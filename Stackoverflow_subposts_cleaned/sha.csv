post_link,title,body_question,body_answer,viewcount,tags,score,score_answer,answercount,LastActivityDate,AcceptedAnswerId,CommentCount,FavoriteCount,LastEditorUserId,LastEditorDisplayName,LastEditDate,CreationDate,ClosedDate
"18887823","Is it possible to decrypt SHA1","Is it possible to decrypt(retain the actual string) the password which is saved in db using SHA1 algorithm.
Example:If password is ""password"" and it is stored in db as ""sha1$4fb4c$2bc693f8a86e2d87f757c382a32e3d50fc945b24"",is any chance to retain the same ""password""(string) from ""sha1$4fb4c$2bc693f8a86e2d87f757c382a32e3d50fc945b24"" 
","SHA1 is a one way hash. So you can not really revert it.
That's why applications use it to store the hash of the password and not the password itself.
Like every hash function SHA-1 maps a large input set (the keys) to a smaller target set (the hash values). Thus collisions can occur. This means that two values of the input set map to the same hash value.
Obviously the collision probability increases when the target set is getting smaller. But vice versa this also means that the collision probability decreases when the target set is getting larger and SHA-1's target set is 160 bit.
Jeff Preshing, wrote a very good blog about Hash Collision Probabilities that can help you to decide which hash algorithm to use. Thanks Jeff.
In his blog he shows a table that tells us the probability of collisions for a given input set.

As you can see the probability of a  32-bit hash is 1 in 2 if you have 77163 input values.
A simple java program will show us what his table shows:
public class Main {

    public static void main(String[] args) {
        char[] inputValue = new char[10];

        Map<Integer, String> hashValues = new HashMap<Integer, String>();

        int collisionCount = 0;

        for (int i = 0; i < 77163; i++) {
            String asString = nextValue(inputValue);
            int hashCode = asString.hashCode();
            String collisionString = hashValues.put(hashCode, asString);
            if (collisionString != null) {
                collisionCount++;
                System.out.println(""Collision: "" + asString + "" <-> "" + collisionString);
            }
        }

        System.out.println(""Collision count: "" + collisionCount);
    }

    private static String nextValue(char[] inputValue) {
        nextValue(inputValue, 0);

        int endIndex = 0;
        for (int i = 0; i < inputValue.length; i++) {
            if (inputValue[i] == 0) {
                endIndex = i;
                break;
            }
        }

        return new String(inputValue, 0, endIndex);
    }

    private static void nextValue(char[] inputValue, int index) {
        boolean increaseNextIndex = inputValue[index] == 'z';

        if (inputValue[index] == 0 || increaseNextIndex) {
            inputValue[index] = 'A';
        } else {
            inputValue[index] += 1;
        }

        if (increaseNextIndex) {
            nextValue(inputValue, index + 1);
        }

    }

}

My output end with:
Collision: RvV <-> SWV
Collision: SvV <-> TWV
Collision: TvV <-> UWV
Collision: UvV <-> VWV
Collision: VvV <-> WWV
Collision: WvV <-> XWV
Collision count: 35135

It produced 35135 collsions and that's the nearly the half of 77163. And if I ran the program with 30084 input values the collision count is 13606. This is not exactly 1 in 10, but it is only a probability and the example program is not perfect, because it only uses the ascii chars between A and z.
Let's take the last reported collision and check 
System.out.println(""VvV"".hashCode());
System.out.println(""WWV"".hashCode());

My output is
86390
86390

Conclusion:
If you have a SHA-1 value and you want to get the input value back you can try a brute force attack. This means that you have to generate all possible input values, hash them and compare them with the SHA-1 you have. But that will consume a lot of time and computing power. Some people created so called rainbow tables for some input sets. But these do only exist for some small input sets.
And remember that many input values map to a single target hash value. So even if you would know all mappings (which is impossible, because the input set is unbounded) you still can't say which input value it was.
","105762","<security><spring-security><sha1><sha>","13","6","3","2018-10-08 11:04:05","","0","1","2681579","","2013-09-19 07:09:48","2013-09-19 06:43:22","2014-05-15 11:48:41"
"18887823","Is it possible to decrypt SHA1","Is it possible to decrypt(retain the actual string) the password which is saved in db using SHA1 algorithm.
Example:If password is ""password"" and it is stored in db as ""sha1$4fb4c$2bc693f8a86e2d87f757c382a32e3d50fc945b24"",is any chance to retain the same ""password""(string) from ""sha1$4fb4c$2bc693f8a86e2d87f757c382a32e3d50fc945b24"" 
","SHA1 is a cryptographic hash function, so the intention of the design was to avoid what you are trying to do.
However, breaking a SHA1 hash is technically possible. You can do so by just trying to guess what was hashed. This brute-force approach is of course not efficient, but that's pretty much the only way.
So to answer your question: yes, it is possible, but you need significant computing power. Some researchers estimate that it costs $70k - $120k.
As far as we can tell today, there is also no other way but to guess the hashed input. This is because operations such as mod eliminate information from your input. Suppose you calculate mod 5 and you get 0. What was the input? Was it 0, 5 or 500? You see, you can't really 'go back' in this case.
","105762","<security><spring-security><sha1><sha>","13","23","3","2018-10-08 11:04:05","","0","1","2681579","","2013-09-19 07:09:48","2013-09-19 06:43:22","2014-05-15 11:48:41"
"18887823","Is it possible to decrypt SHA1","Is it possible to decrypt(retain the actual string) the password which is saved in db using SHA1 algorithm.
Example:If password is ""password"" and it is stored in db as ""sha1$4fb4c$2bc693f8a86e2d87f757c382a32e3d50fc945b24"",is any chance to retain the same ""password""(string) from ""sha1$4fb4c$2bc693f8a86e2d87f757c382a32e3d50fc945b24"" 
","Since SHA-1 maps several byte sequences to one, you can't ""decrypt"" a hash, but in theory you can find collisions: strings that have the same hash.
It seems that breaking a single hash would cost about 2.7 million dollars worth of computer time currently, so your efforts are probably better spent somewhere else.
","105762","<security><spring-security><sha1><sha>","13","5","3","2018-10-08 11:04:05","","0","1","2681579","","2013-09-19 07:09:48","2013-09-19 06:43:22","2014-05-15 11:48:41"
"50026939","php mysqli_connect: authentication method unknown to the client [caching_sha2_password]","I am using php mysqli_connect for login to a MySQL database (all on localhost)
<?php
//DEFINE ('DB_USER', 'user2');
//DEFINE ('DB_PASSWORD', 'pass2');
DEFINE ('DB_USER', 'user1');
DEFINE ('DB_PASSWORD', 'pass1');
DEFINE ('DB_HOST', '127.0.0.1');
DEFINE ('DB_NAME', 'dbname');

$dbc = mysqli_connect(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);

if(!$dbc){
    die('error connecting to database');    
}
?>

this is the mysql.user table:

MySQL Server ini File:
[mysqld]
# The default authentication plugin to be used when connecting to the server
default_authentication_plugin=caching_sha2_password
#default_authentication_plugin=mysql_native_password

with caching_sha2_password in the MySQL Server ini file, it's not possible at all to login with user1 or user2;

error: mysqli_connect(): The server requested authentication method unknown to the client [caching_sha2_password] in...

with mysql_native_password in the MySQL Server ini file, it's possible to login with user1, but with user2, same error;

how can I login using caching_sha2_password on the mySql Server?
","Currently, php mysqli extension do not support new caching_sha2 authentication feature.
You have to wait until they release an update.
Check related post from mysql developers : https://mysqlserverteam.com/upgrading-to-mysql-8-0-default-authentication-plugin-considerations/
They didnt mention PDO, maybe you should try to connect with PDO.
","72949","<php><mysql><hash><sha>","54","23","11","2019-11-09 22:50:54","50027581","2","23","2370483","","2018-06-28 14:20:23","2018-04-25 16:15:32",""
"50026939","php mysqli_connect: authentication method unknown to the client [caching_sha2_password]","I am using php mysqli_connect for login to a MySQL database (all on localhost)
<?php
//DEFINE ('DB_USER', 'user2');
//DEFINE ('DB_PASSWORD', 'pass2');
DEFINE ('DB_USER', 'user1');
DEFINE ('DB_PASSWORD', 'pass1');
DEFINE ('DB_HOST', '127.0.0.1');
DEFINE ('DB_NAME', 'dbname');

$dbc = mysqli_connect(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);

if(!$dbc){
    die('error connecting to database');    
}
?>

this is the mysql.user table:

MySQL Server ini File:
[mysqld]
# The default authentication plugin to be used when connecting to the server
default_authentication_plugin=caching_sha2_password
#default_authentication_plugin=mysql_native_password

with caching_sha2_password in the MySQL Server ini file, it's not possible at all to login with user1 or user2;

error: mysqli_connect(): The server requested authentication method unknown to the client [caching_sha2_password] in...

with mysql_native_password in the MySQL Server ini file, it's possible to login with user1, but with user2, same error;

how can I login using caching_sha2_password on the mySql Server?
","I solve this by SQL command:
ALTER USER 'mysqlUsername'@'localhost' IDENTIFIED WITH mysql_native_password BY 'mysqlUsernamePassword';

which is referenced by https://dev.mysql.com/doc/refman/8.0/en/alter-user.html
if you are creating new user 
 CREATE USER 'jeffrey'@'localhost' IDENTIFIED WITH mysql_native_password BY 'password';

which is referenced by https://dev.mysql.com/doc/refman/8.0/en/create-user.html
this works for me 
","72949","<php><mysql><hash><sha>","54","128","11","2019-11-09 22:50:54","50027581","2","23","2370483","","2018-06-28 14:20:23","2018-04-25 16:15:32",""
"50026939","php mysqli_connect: authentication method unknown to the client [caching_sha2_password]","I am using php mysqli_connect for login to a MySQL database (all on localhost)
<?php
//DEFINE ('DB_USER', 'user2');
//DEFINE ('DB_PASSWORD', 'pass2');
DEFINE ('DB_USER', 'user1');
DEFINE ('DB_PASSWORD', 'pass1');
DEFINE ('DB_HOST', '127.0.0.1');
DEFINE ('DB_NAME', 'dbname');

$dbc = mysqli_connect(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);

if(!$dbc){
    die('error connecting to database');    
}
?>

this is the mysql.user table:

MySQL Server ini File:
[mysqld]
# The default authentication plugin to be used when connecting to the server
default_authentication_plugin=caching_sha2_password
#default_authentication_plugin=mysql_native_password

with caching_sha2_password in the MySQL Server ini file, it's not possible at all to login with user1 or user2;

error: mysqli_connect(): The server requested authentication method unknown to the client [caching_sha2_password] in...

with mysql_native_password in the MySQL Server ini file, it's possible to login with user1, but with user2, same error;

how can I login using caching_sha2_password on the mySql Server?
","ALTER USER 'mysqlUsername'@'localhost' IDENTIFIED WITH mysql_native_password BY 'mysqlUsernamePassword';

Remove quotes (') after ALTER USER and keep quote (') after mysql_native_password BY
It is working for me also.
","72949","<php><mysql><hash><sha>","54","12","11","2019-11-09 22:50:54","50027581","2","23","2370483","","2018-06-28 14:20:23","2018-04-25 16:15:32",""
"50026939","php mysqli_connect: authentication method unknown to the client [caching_sha2_password]","I am using php mysqli_connect for login to a MySQL database (all on localhost)
<?php
//DEFINE ('DB_USER', 'user2');
//DEFINE ('DB_PASSWORD', 'pass2');
DEFINE ('DB_USER', 'user1');
DEFINE ('DB_PASSWORD', 'pass1');
DEFINE ('DB_HOST', '127.0.0.1');
DEFINE ('DB_NAME', 'dbname');

$dbc = mysqli_connect(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);

if(!$dbc){
    die('error connecting to database');    
}
?>

this is the mysql.user table:

MySQL Server ini File:
[mysqld]
# The default authentication plugin to be used when connecting to the server
default_authentication_plugin=caching_sha2_password
#default_authentication_plugin=mysql_native_password

with caching_sha2_password in the MySQL Server ini file, it's not possible at all to login with user1 or user2;

error: mysqli_connect(): The server requested authentication method unknown to the client [caching_sha2_password] in...

with mysql_native_password in the MySQL Server ini file, it's possible to login with user1, but with user2, same error;

how can I login using caching_sha2_password on the mySql Server?
","It's working for me (PHP 5.6 + PDO / MySQL Server 8.0 / Windows 7 64bits)
Edit the file C:\ProgramData\MySQL\MySQL Server 8.0\my.ini: 
default_authentication_plugin=mysql_native_password

Reset MySQL service on Windows, and in the MySQL Shell...
ALTER USER my_user@'%' IDENTIFIED WITH mysql_native_password BY 'password';

","72949","<php><mysql><hash><sha>","54","2","11","2019-11-09 22:50:54","50027581","2","23","2370483","","2018-06-28 14:20:23","2018-04-25 16:15:32",""
"50026939","php mysqli_connect: authentication method unknown to the client [caching_sha2_password]","I am using php mysqli_connect for login to a MySQL database (all on localhost)
<?php
//DEFINE ('DB_USER', 'user2');
//DEFINE ('DB_PASSWORD', 'pass2');
DEFINE ('DB_USER', 'user1');
DEFINE ('DB_PASSWORD', 'pass1');
DEFINE ('DB_HOST', '127.0.0.1');
DEFINE ('DB_NAME', 'dbname');

$dbc = mysqli_connect(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);

if(!$dbc){
    die('error connecting to database');    
}
?>

this is the mysql.user table:

MySQL Server ini File:
[mysqld]
# The default authentication plugin to be used when connecting to the server
default_authentication_plugin=caching_sha2_password
#default_authentication_plugin=mysql_native_password

with caching_sha2_password in the MySQL Server ini file, it's not possible at all to login with user1 or user2;

error: mysqli_connect(): The server requested authentication method unknown to the client [caching_sha2_password] in...

with mysql_native_password in the MySQL Server ini file, it's possible to login with user1, but with user2, same error;

how can I login using caching_sha2_password on the mySql Server?
","I ran the following command
ALTER USER 'root' @ 'localhost' identified with mysql_native_password BY 'root123'; in the command line and finally restart MySQL in local services.
","72949","<php><mysql><hash><sha>","54","2","11","2019-11-09 22:50:54","50027581","2","23","2370483","","2018-06-28 14:20:23","2018-04-25 16:15:32",""
"50026939","php mysqli_connect: authentication method unknown to the client [caching_sha2_password]","I am using php mysqli_connect for login to a MySQL database (all on localhost)
<?php
//DEFINE ('DB_USER', 'user2');
//DEFINE ('DB_PASSWORD', 'pass2');
DEFINE ('DB_USER', 'user1');
DEFINE ('DB_PASSWORD', 'pass1');
DEFINE ('DB_HOST', '127.0.0.1');
DEFINE ('DB_NAME', 'dbname');

$dbc = mysqli_connect(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);

if(!$dbc){
    die('error connecting to database');    
}
?>

this is the mysql.user table:

MySQL Server ini File:
[mysqld]
# The default authentication plugin to be used when connecting to the server
default_authentication_plugin=caching_sha2_password
#default_authentication_plugin=mysql_native_password

with caching_sha2_password in the MySQL Server ini file, it's not possible at all to login with user1 or user2;

error: mysqli_connect(): The server requested authentication method unknown to the client [caching_sha2_password] in...

with mysql_native_password in the MySQL Server ini file, it's possible to login with user1, but with user2, same error;

how can I login using caching_sha2_password on the mySql Server?
","If you're on Windows and it's not possible to use caching_sha2_password at all, you can do the following:

rerun the MySQL Installer
select ""Reconfigure"" next to MySQL Server (the top item)
click ""Next"" until you get to ""Authentication Method""
change ""Use Strong Password Encryption for Authentication (RECOMMENDED)"" to ""Use Legacy Authentication Method (Retain MySQL 5.X Compatibility)
click ""Next""
enter your Root Account Password in Accounts and Roles, and click ""Check""
click ""Next""
keep clicking ""Next"" until you get to ""Apply Configuration""
click ""Execute""

The Installer will make all the configuration changes needed for you.
","72949","<php><mysql><hash><sha>","54","10","11","2019-11-09 22:50:54","50027581","2","23","2370483","","2018-06-28 14:20:23","2018-04-25 16:15:32",""
"50026939","php mysqli_connect: authentication method unknown to the client [caching_sha2_password]","I am using php mysqli_connect for login to a MySQL database (all on localhost)
<?php
//DEFINE ('DB_USER', 'user2');
//DEFINE ('DB_PASSWORD', 'pass2');
DEFINE ('DB_USER', 'user1');
DEFINE ('DB_PASSWORD', 'pass1');
DEFINE ('DB_HOST', '127.0.0.1');
DEFINE ('DB_NAME', 'dbname');

$dbc = mysqli_connect(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);

if(!$dbc){
    die('error connecting to database');    
}
?>

this is the mysql.user table:

MySQL Server ini File:
[mysqld]
# The default authentication plugin to be used when connecting to the server
default_authentication_plugin=caching_sha2_password
#default_authentication_plugin=mysql_native_password

with caching_sha2_password in the MySQL Server ini file, it's not possible at all to login with user1 or user2;

error: mysqli_connect(): The server requested authentication method unknown to the client [caching_sha2_password] in...

with mysql_native_password in the MySQL Server ini file, it's possible to login with user1, but with user2, same error;

how can I login using caching_sha2_password on the mySql Server?
","I tried this in Ubuntu 18.04
and is the only solution that worked for me:
ALTER USER my_user@'%' IDENTIFIED WITH mysql_native_password BY 'password';

","72949","<php><mysql><hash><sha>","54","0","11","2019-11-09 22:50:54","50027581","2","23","2370483","","2018-06-28 14:20:23","2018-04-25 16:15:32",""
"50026939","php mysqli_connect: authentication method unknown to the client [caching_sha2_password]","I am using php mysqli_connect for login to a MySQL database (all on localhost)
<?php
//DEFINE ('DB_USER', 'user2');
//DEFINE ('DB_PASSWORD', 'pass2');
DEFINE ('DB_USER', 'user1');
DEFINE ('DB_PASSWORD', 'pass1');
DEFINE ('DB_HOST', '127.0.0.1');
DEFINE ('DB_NAME', 'dbname');

$dbc = mysqli_connect(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);

if(!$dbc){
    die('error connecting to database');    
}
?>

this is the mysql.user table:

MySQL Server ini File:
[mysqld]
# The default authentication plugin to be used when connecting to the server
default_authentication_plugin=caching_sha2_password
#default_authentication_plugin=mysql_native_password

with caching_sha2_password in the MySQL Server ini file, it's not possible at all to login with user1 or user2;

error: mysqli_connect(): The server requested authentication method unknown to the client [caching_sha2_password] in...

with mysql_native_password in the MySQL Server ini file, it's possible to login with user1, but with user2, same error;

how can I login using caching_sha2_password on the mySql Server?
","I think it is not useful to configure the mysql server without caching_sha2_password encryption, we have to find a way to publish, send or obtain secure information through the network. As you see in the code below I dont use variable $db_name, and Im using a user in mysql server with standar configuration password. 
Just create a Standar user password and config all privilages. it works, but how i said without segurity.
<?php
$db_name=""db"";
$mysql_username=""root"";
$mysql_password=""****"";
$server_name=""localhost"";
$conn=mysqli_connect($server_name,$mysql_username,$mysql_password);

if ($conn) {
    echo ""connetion success"";
}
else{
    echo mysqli_error($conn);
}

?>

","72949","<php><mysql><hash><sha>","54","0","11","2019-11-09 22:50:54","50027581","2","23","2370483","","2018-06-28 14:20:23","2018-04-25 16:15:32",""
"50026939","php mysqli_connect: authentication method unknown to the client [caching_sha2_password]","I am using php mysqli_connect for login to a MySQL database (all on localhost)
<?php
//DEFINE ('DB_USER', 'user2');
//DEFINE ('DB_PASSWORD', 'pass2');
DEFINE ('DB_USER', 'user1');
DEFINE ('DB_PASSWORD', 'pass1');
DEFINE ('DB_HOST', '127.0.0.1');
DEFINE ('DB_NAME', 'dbname');

$dbc = mysqli_connect(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);

if(!$dbc){
    die('error connecting to database');    
}
?>

this is the mysql.user table:

MySQL Server ini File:
[mysqld]
# The default authentication plugin to be used when connecting to the server
default_authentication_plugin=caching_sha2_password
#default_authentication_plugin=mysql_native_password

with caching_sha2_password in the MySQL Server ini file, it's not possible at all to login with user1 or user2;

error: mysqli_connect(): The server requested authentication method unknown to the client [caching_sha2_password] in...

with mysql_native_password in the MySQL Server ini file, it's possible to login with user1, but with user2, same error;

how can I login using caching_sha2_password on the mySql Server?
","For Ubuntu 19.10
Just go to 
cd /etc/mysql/mysql.conf.d

Then edit mysqld.cnf with nano or somethinh like that
sudo nano mysqld.cnf

Restart your Mysql Service With 
sudo /etc/init.d/mysql restart

And That's all. It works for me
","72949","<php><mysql><hash><sha>","54","0","11","2019-11-09 22:50:54","50027581","2","23","2370483","","2018-06-28 14:20:23","2018-04-25 16:15:32",""
"50026939","php mysqli_connect: authentication method unknown to the client [caching_sha2_password]","I am using php mysqli_connect for login to a MySQL database (all on localhost)
<?php
//DEFINE ('DB_USER', 'user2');
//DEFINE ('DB_PASSWORD', 'pass2');
DEFINE ('DB_USER', 'user1');
DEFINE ('DB_PASSWORD', 'pass1');
DEFINE ('DB_HOST', '127.0.0.1');
DEFINE ('DB_NAME', 'dbname');

$dbc = mysqli_connect(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);

if(!$dbc){
    die('error connecting to database');    
}
?>

this is the mysql.user table:

MySQL Server ini File:
[mysqld]
# The default authentication plugin to be used when connecting to the server
default_authentication_plugin=caching_sha2_password
#default_authentication_plugin=mysql_native_password

with caching_sha2_password in the MySQL Server ini file, it's not possible at all to login with user1 or user2;

error: mysqli_connect(): The server requested authentication method unknown to the client [caching_sha2_password] in...

with mysql_native_password in the MySQL Server ini file, it's possible to login with user1, but with user2, same error;

how can I login using caching_sha2_password on the mySql Server?
","If you're on a Mac, here's how to fix it. This is after tons of trial and error. Hope this helps others..
Debugging:
$mysql --verbose --help | grep my.cnf

$ which mysql
/usr/local/bin/mysql

Resolution:
nano /usr/local/etc/my.cnf
Add: default-authentication-plugin=mysql_native_password
-------
# Default Homebrew MySQL server config
[mysqld]
# Only allow connections from localhost
bind-address = 127.0.0.1
default-authentication-plugin=mysql_native_password
------

Finally Run: brew services restart mysql
","72949","<php><mysql><hash><sha>","54","0","11","2019-11-09 22:50:54","50027581","2","23","2370483","","2018-06-28 14:20:23","2018-04-25 16:15:32",""
"50026939","php mysqli_connect: authentication method unknown to the client [caching_sha2_password]","I am using php mysqli_connect for login to a MySQL database (all on localhost)
<?php
//DEFINE ('DB_USER', 'user2');
//DEFINE ('DB_PASSWORD', 'pass2');
DEFINE ('DB_USER', 'user1');
DEFINE ('DB_PASSWORD', 'pass1');
DEFINE ('DB_HOST', '127.0.0.1');
DEFINE ('DB_NAME', 'dbname');

$dbc = mysqli_connect(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);

if(!$dbc){
    die('error connecting to database');    
}
?>

this is the mysql.user table:

MySQL Server ini File:
[mysqld]
# The default authentication plugin to be used when connecting to the server
default_authentication_plugin=caching_sha2_password
#default_authentication_plugin=mysql_native_password

with caching_sha2_password in the MySQL Server ini file, it's not possible at all to login with user1 or user2;

error: mysqli_connect(): The server requested authentication method unknown to the client [caching_sha2_password] in...

with mysql_native_password in the MySQL Server ini file, it's possible to login with user1, but with user2, same error;

how can I login using caching_sha2_password on the mySql Server?
","Like many many people, I have had the same problem. Although the user is set to use mysql_native_password, and I can connect from the command line, the only way I could get mysqli() to connect is to add

default-authentication-plugin=mysql_native_password

to the [mysqld] section of, in my setup on ubuntu 19.10, /etc/mysql/mysql.conf.d/mysqld.cnf
","72949","<php><mysql><hash><sha>","54","0","11","2019-11-09 22:50:54","50027581","2","23","2370483","","2018-06-28 14:20:23","2018-04-25 16:15:32",""
"4014090","Is it safe to ignore the possibility of SHA collisions in practice?","Let's say we have a billion unique images, one megabyte each.
We calculate the SHA-256 hash for the contents of each file.
The possibility of collision depends on:

the number of files
the size of the single file

How far can we go ignoring this possibility, assuming it is zero?
","First of all, it is not zero, but very close to zero.
The key question is what happens if a collision actually occurs? If the answer is ""a nuclear power plant will explode"" then you likely shouldn't ignore the collision possibility. In most cases the consequences are not that dire and so you can ignore the collision possibility.
Also don't forget that you software (or a tiny part of it) might be deployed and simultaneously used in a gazillion of computers (some tiny embedded microcomputers that are almost everywhere nowadays included). In such case you need to multiply the estimate you've got by the largest possible number of copies.
","65907","<hash><sha>","197","17","3","2017-05-31 08:43:41","4014407","7","47","13860","","2017-05-31 08:43:41","2010-10-25 11:28:41",""
"4014090","Is it safe to ignore the possibility of SHA collisions in practice?","Let's say we have a billion unique images, one megabyte each.
We calculate the SHA-256 hash for the contents of each file.
The possibility of collision depends on:

the number of files
the size of the single file

How far can we go ignoring this possibility, assuming it is zero?
","The possibility of a collision does not depend on the size of the files, only on their number.
This is an example of the birthday paradox. The Wikipedia page gives an estimate of the likelihood of a collision. If you run the numbers, you'll see that all harddisks ever produced on Earth can't hold enough 1MB files to get a likelihood of a collision of even 0.01% for SHA-256.
Basically, you can simply ignore the possibility.
","65907","<hash><sha>","197","47","3","2017-05-31 08:43:41","4014407","7","47","13860","","2017-05-31 08:43:41","2010-10-25 11:28:41",""
"4014090","Is it safe to ignore the possibility of SHA collisions in practice?","Let's say we have a billion unique images, one megabyte each.
We calculate the SHA-256 hash for the contents of each file.
The possibility of collision depends on:

the number of files
the size of the single file

How far can we go ignoring this possibility, assuming it is zero?
","The usual answer goes thus: what is the probability that a rogue asteroid crashes on Earth within the next second, obliterating civilization-as-we-know-it, and killing off a few billion people? It can be argued that any unlucky event with a probability lower than that is not actually very important.
If we have a ""perfect"" hash function with output size n, and we have p messages to hash (individual message length is not important), then probability of collision is about p2/2n+1 (this is an approximation which is valid for ""small"" p, i.e. substantially smaller than 2n/2). For instance, with SHA-256 (n=256) and one billion messages (p=109) then the probability is about 4.3*10-60.
A mass-murderer space rock happens about once every 30 million years on average. This leads to a probability of such an event occurring in the next second to about 10-15. That's 45 orders of magnitude more probable than the SHA-256 collision. Briefly stated, if you find SHA-256 collisions scary then your priorities are wrong.
In a security setup, where an attacker gets to choose the messages which will be hashed, then the attacker may use substantially more than a billion messages; however, you will find that the attacker's success probability will still be vanishingly small. That's the whole point of using a hash function with a 256-bit output: so that risks of collision can be neglected.
Of course, all of the above assumes that SHA-256 is a ""perfect"" hash function, which is far from being proven. Still, SHA-256 seems quite robust.
","65907","<hash><sha>","197","360","3","2017-05-31 08:43:41","4014407","7","47","13860","","2017-05-31 08:43:41","2010-10-25 11:28:41",""
"17429040","Creating user with encrypted password in PostgreSQL","Is it possible to create a user in PostgreSQL without providing the plain text password (ideally, I would like to be able to create a user providing only its password crypted with sha-256) ?
What I would like to do is to create a user with something like that :
CREATE USER ""martin"" WITH PASSWORD '$6$kH3l2bj8iT$KKrTAKDF4OoE7w.oy(...)BPwcTBN/V42hqE.';

Is there some way to do that ?
Thank you for your help.
","I'm not aware of a way to override the default md5 encryption of passwords, but if you have a ROLE (aka ""USER"") that has an already md5-encrypted password it appears that you can supply that. Verify this using pg_dumpall -g (to see the globals from the cluster)
Eg.
psql postgres
create role foo with encrypted password foobar;
\q

-- View the role from pg_dumpall -g
pg_dumpall -g | grep foo
CREATE ROLE foo;
ALTER ROLE foo WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION PASSWORD 'md5c98cbfeb6a347a47eb8e96cfb4c4b890';

Or get it from:
select * from pg_catalog.pg_shadow;

-- create the role again with the already-encrypted password
psql postgres
drop role foo;
CREATE ROLE foo;
ALTER ROLE foo WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION PASSWORD 'md5c98cbfeb6a347a47eb8e96cfb4c4b890';
\q

-- view the ROLE with the same password
pg_dumpall -g | grep foo
CREATE ROLE foo;
ALTER ROLE foo WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION PASSWORD 'md5c98cbfeb6a347a47eb8e96cfb4c4b890';

Docs for CREATE ROLE
","61987","<postgresql><passwords><sha><plaintext>","42","8","3","2018-05-22 20:04:24","17431573","0","11","","","","2013-07-02 15:02:22",""
"17429040","Creating user with encrypted password in PostgreSQL","Is it possible to create a user in PostgreSQL without providing the plain text password (ideally, I would like to be able to create a user providing only its password crypted with sha-256) ?
What I would like to do is to create a user with something like that :
CREATE USER ""martin"" WITH PASSWORD '$6$kH3l2bj8iT$KKrTAKDF4OoE7w.oy(...)BPwcTBN/V42hqE.';

Is there some way to do that ?
Thank you for your help.
","You may provide the password already hashed with md5, as said in the doc (CREATE ROLE):

ENCRYPTED UNENCRYPTED These key words control whether the password is
  stored encrypted in the system catalogs. (If neither is specified, the
  default behavior is determined by the configuration parameter
  password_encryption.) If the presented password string is already in
  MD5-encrypted format, then it is stored encrypted as-is, regardless of
  whether ENCRYPTED or UNENCRYPTED is specified (since the system cannot
  decrypt the specified encrypted password string). This allows
  reloading of encrypted passwords during dump/restore.

The information that's missing here is that the MD5-encrypted string should be the password concatened with the username, plus md5 at the beginning.
So for example to create u0 with the password foobar, knowing that md5('foobaru0') is ac4bbe016b808c3c0b816981f240dcae:
CREATE USER u0 PASSWORD 'md5ac4bbe016b808c3c0b816981f240dcae';

and then u0 will be able to log in by typing foobar as the password.
I don't think that there's currently a way to use SHA-256 instead of md5 for PostgreSQL passwords.
","61987","<postgresql><passwords><sha><plaintext>","42","63","3","2018-05-22 20:04:24","17431573","0","11","","","","2013-07-02 15:02:22",""
"17429040","Creating user with encrypted password in PostgreSQL","Is it possible to create a user in PostgreSQL without providing the plain text password (ideally, I would like to be able to create a user providing only its password crypted with sha-256) ?
What I would like to do is to create a user with something like that :
CREATE USER ""martin"" WITH PASSWORD '$6$kH3l2bj8iT$KKrTAKDF4OoE7w.oy(...)BPwcTBN/V42hqE.';

Is there some way to do that ?
Thank you for your help.
","Much easier way to to this is:
CREATE USER u0 PASSWORD 'foobar'; 
select * from pg_catalog.pg_shadow;

Gives passwd: md5ac4bbe016b808c3c0b816981f240dcae
","61987","<postgresql><passwords><sha><plaintext>","42","2","3","2018-05-22 20:04:24","17431573","0","11","","","","2013-07-02 15:02:22",""
"2898685","Hashing in SHA512 using a salt? - Python","I have been looking through ths hashlib documentation but haven't found anything talking about using salt when hashing data.
Help would be great.
","Salting isn't a magical process that the library needs to help you with—it's just additional data provided to stop rainbow tables from working.
>>> import hashlib
>>> m = hashlib.sha512()
>>> m.update(b""Nobody inspects"")
>>> m.update(b"" the spammish repetition"")
>>> m.digest()
b'\xd0\xf4\xc1LH\xadH7\x90^\xa7R\x0c\xc4\xafp\x0fd3\xce\t\x85\xe6\xbb\x87\xb6\xb4a|\xb9D\xab\xf8\x14\xbdS\x96M\xdb\xf5[A\xe5\x81+:\xfe\x90\x89\x0c\nM\xb7\\\xb0Cg\xe19\xfdb\xea\xb2\xe1'
>>> m.update(b""My super-secret salt."")
>>> m.digest()
b'\xcd\xd7K\xd9!~\xa8\x1d6\x9b\xa6\xde\x06\t\x02\xa1+}\xaeNA\x94a`\xaa\xf4\xe9\xb5\xff\x1f\x9cE\x84m\xbb\x98U\xb4z\x92\x9e\xe8\xc9\xc2\xc8\x8f\x068e\xb0\r\xed\xb7\xde\x80\xa6,\n\x111w{\xa2\x9b'

","53268","<python><salt><sha><hashlib><saltedhash>","38","8","6","2013-11-14 19:48:05","2898780","1","11","","","","2010-05-24 16:58:28",""
"2898685","Hashing in SHA512 using a salt? - Python","I have been looking through ths hashlib documentation but haven't found anything talking about using salt when hashing data.
Help would be great.
","Samir's answer is correct but somewhat cryptic. Basically, the salt is just a randomly derived bit of data that you prefix or postfix your data with to dramatically increase the complexity of a dictionary attack on your hashed value. So given a salt s and data d you'd just do the following to generate a salted hash of the data:
import hashlib
hashlib.sha512( s + d ).hexdigest()

See this wikipedia article for more details
","53268","<python><salt><sha><hashlib><saltedhash>","38","72","6","2013-11-14 19:48:05","2898780","1","11","","","","2010-05-24 16:58:28",""
"2898685","Hashing in SHA512 using a salt? - Python","I have been looking through ths hashlib documentation but haven't found anything talking about using salt when hashing data.
Help would be great.
","Just add the salt to your sensitive data:
>>> import hashlib
>>> m = hashlib.sha512()
>>> m.update('salt')
>>> m.update('sensitive data')
>>> m.hexdigest()
'70197a4d3a5cd29b62d4239007b1c5c3c0009d42d190308fd855fc459b107f40a03bd427cb6d87de18911f21ae9fdfc24dadb0163741559719669c7668d7d587'
>>> n = hashlib.sha512()
>>> n.update('%ssensitive data' % 'salt')
>>> n.hexdigest()
'70197a4d3a5cd29b62d4239007b1c5c3c0009d42d190308fd855fc459b107f40a03bd427cb6d87de18911f21ae9fdfc24dadb0163741559719669c7668d7d587'
>>> hashlib.sha512('salt' + 'sensitive data').hexdigest()
'70197a4d3a5cd29b62d4239007b1c5c3c0009d42d190308fd855fc459b107f40a03bd427cb6d87de18911f21ae9fdfc24dadb0163741559719669c7668d7d587'

","53268","<python><salt><sha><hashlib><saltedhash>","38","18","6","2013-11-14 19:48:05","2898780","1","11","","","","2010-05-24 16:58:28",""
"2898685","Hashing in SHA512 using a salt? - Python","I have been looking through ths hashlib documentation but haven't found anything talking about using salt when hashing data.
Help would be great.
","If you're looking for a replacement for crypt(), newer versions of glibc have SHA-512-based ""$6$"" with a variable iteration count (see Ulrich Drepper's page, which has a description and links to a complete C implementation of sha512_crypt_r()).
Writing your own crypto is highly unadvisable — the above sha512(salt+password) doesn't help against a brute-force attack.
For generating salt, use something like os.urandom(16) for random bytes or ''.join(map(lambda x:'./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'[ord(x)%64], os.urandom(16))) for random base64-alike chars (for use with crypt()-alikes).
(I say base64-alike it's not the same as the Base64 in PEM/MIME.)
","53268","<python><salt><sha><hashlib><saltedhash>","38","7","6","2013-11-14 19:48:05","2898780","1","11","","","","2010-05-24 16:58:28",""
"2898685","Hashing in SHA512 using a salt? - Python","I have been looking through ths hashlib documentation but haven't found anything talking about using salt when hashing data.
Help would be great.
","use passlib, writing your own password crypto is an almost sure way to failure.
","53268","<python><salt><sha><hashlib><saltedhash>","38","3","6","2013-11-14 19:48:05","2898780","1","11","","","","2010-05-24 16:58:28",""
"2898685","Hashing in SHA512 using a salt? - Python","I have been looking through ths hashlib documentation but haven't found anything talking about using salt when hashing data.
Help would be great.
","SHA512 isn't a great way to store hashed passwords these days.  You should be using bcrypt or something similar.  What's important is that salting is built in and that the algorithm has a significant work factor.
If you salt your SHA512 passwords by simply appending (or prepending) the salt to the plaintext, anyone who gets their hands on a set of your hashed passwords and applies a modern cracking tool (http://arstechnica.com/security/2013/05/how-crackers-make-minced-meat-out-of-your-passwords/) will be able to see the concatenated password+salt values and will probably, through trivial pattern matching, be able to separate the password portion from the salt portion for most if not all of the accounts in question.
I haven't thought this through all the way, and I am by no means a security expert, but it seems to me that if you were to encrypt (using, for example, AES256) the password using the salt as the key, and then hash that with SHA512, you'd be safe from the vulnerability I described above.
However, at that point you've put in more effort than it would have taken to switch to bcrypt and you still wouldn't have the protection of a work factor, so I would only recommend an approach like that if the environment you're working in does not offer that option.
","53268","<python><salt><sha><hashlib><saltedhash>","38","2","6","2013-11-14 19:48:05","2898780","1","11","","","","2010-05-24 16:58:28",""
"7166129","How can I calculate the SHA-256 hash of a string in Android?","I'm trying to get the SHA256 of a string in Android.
Here is the PHP code that I want to match:
echo bin2hex(mhash(MHASH_SHA256,""asdf""));
//outputs ""f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b""

Now, in Java, I'm trying to do the following:
            String password=""asdf""
            MessageDigest digest=null;
    try {
        digest = MessageDigest.getInstance(""SHA-256"");
    } catch (NoSuchAlgorithmException e1) {
        // TODO Auto-generated catch block
        e1.printStackTrace();
    }
       digest.reset();
       try {
        Log.i(""Eamorr"",digest.digest(password.getBytes(""UTF-8"")).toString());
    } catch (UnsupportedEncodingException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }

But this prints out: ""a42yzk3axdv3k4yh98g8""
What did I do wrong here?

Solution thanks to erickson:
 Log.i(""Eamorr"",bin2hex(getHash(""asdf"")));

 public byte[] getHash(String password) {
       MessageDigest digest=null;
    try {
        digest = MessageDigest.getInstance(""SHA-256"");
    } catch (NoSuchAlgorithmException e1) {
        // TODO Auto-generated catch block
        e1.printStackTrace();
    }
       digest.reset();
       return digest.digest(password.getBytes());
 }
static String bin2hex(byte[] data) {
    return String.format(""%0"" + (data.length*2) + ""X"", new BigInteger(1, data));
}

","The PHP function bin2hex means that it takes a string of bytes and encodes it as a hexadecimal number.
In the Java code, you are trying to take a bunch of random bytes and decode them as a string using your platform's default character encoding. That isn't going to work, and if it did, it wouldn't produce the same results.
Here's a quick-and-dirty binary-to-hex conversion for Java:
static String bin2hex(byte[] data) {
    StringBuilder hex = new StringBuilder(data.length * 2);
    for (byte b : data)
        hex.append(String.format(""%02x"", b & 0xFF));
    return hex.toString();
}

This is quick to write, not necessarily quick to execute. If you are doing a lot of these, you should rewrite the function with a faster implementation.
","52689","<java><php><android><digest><sha>","47","28","4","2019-04-30 12:05:04","7166240","7","15","600500","","2011-08-23 19:36:11","2011-08-23 18:59:05",""
"7166129","How can I calculate the SHA-256 hash of a string in Android?","I'm trying to get the SHA256 of a string in Android.
Here is the PHP code that I want to match:
echo bin2hex(mhash(MHASH_SHA256,""asdf""));
//outputs ""f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b""

Now, in Java, I'm trying to do the following:
            String password=""asdf""
            MessageDigest digest=null;
    try {
        digest = MessageDigest.getInstance(""SHA-256"");
    } catch (NoSuchAlgorithmException e1) {
        // TODO Auto-generated catch block
        e1.printStackTrace();
    }
       digest.reset();
       try {
        Log.i(""Eamorr"",digest.digest(password.getBytes(""UTF-8"")).toString());
    } catch (UnsupportedEncodingException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }

But this prints out: ""a42yzk3axdv3k4yh98g8""
What did I do wrong here?

Solution thanks to erickson:
 Log.i(""Eamorr"",bin2hex(getHash(""asdf"")));

 public byte[] getHash(String password) {
       MessageDigest digest=null;
    try {
        digest = MessageDigest.getInstance(""SHA-256"");
    } catch (NoSuchAlgorithmException e1) {
        // TODO Auto-generated catch block
        e1.printStackTrace();
    }
       digest.reset();
       return digest.digest(password.getBytes());
 }
static String bin2hex(byte[] data) {
    return String.format(""%0"" + (data.length*2) + ""X"", new BigInteger(1, data));
}

","You are along the right lines, but converting the bytes is a little more complicated. This works on my device:
// utility function
    private static String bytesToHexString(byte[] bytes) {
        // http://stackoverflow.com/questions/332079
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < bytes.length; i++) {
            String hex = Integer.toHexString(0xFF & bytes[i]);
            if (hex.length() == 1) {
                sb.append('0');
            }
            sb.append(hex);
        }
        return sb.toString();
    }

// generate a hash

    String password=""asdf"";
    MessageDigest digest=null;
    String hash;
    try {
        digest = MessageDigest.getInstance(""SHA-256"");
        digest.update(password.getBytes());

        hash = bytesToHexString(digest.digest());

        Log.i(""Eamorr"", ""result is "" + hash);
    } catch (NoSuchAlgorithmException e1) {
        // TODO Auto-generated catch block
        e1.printStackTrace();
    }

Source: bytesToHexString function is from the IOSched project.
","52689","<java><php><android><digest><sha>","47","24","4","2019-04-30 12:05:04","7166240","7","15","600500","","2011-08-23 19:36:11","2011-08-23 18:59:05",""
"7166129","How can I calculate the SHA-256 hash of a string in Android?","I'm trying to get the SHA256 of a string in Android.
Here is the PHP code that I want to match:
echo bin2hex(mhash(MHASH_SHA256,""asdf""));
//outputs ""f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b""

Now, in Java, I'm trying to do the following:
            String password=""asdf""
            MessageDigest digest=null;
    try {
        digest = MessageDigest.getInstance(""SHA-256"");
    } catch (NoSuchAlgorithmException e1) {
        // TODO Auto-generated catch block
        e1.printStackTrace();
    }
       digest.reset();
       try {
        Log.i(""Eamorr"",digest.digest(password.getBytes(""UTF-8"")).toString());
    } catch (UnsupportedEncodingException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }

But this prints out: ""a42yzk3axdv3k4yh98g8""
What did I do wrong here?

Solution thanks to erickson:
 Log.i(""Eamorr"",bin2hex(getHash(""asdf"")));

 public byte[] getHash(String password) {
       MessageDigest digest=null;
    try {
        digest = MessageDigest.getInstance(""SHA-256"");
    } catch (NoSuchAlgorithmException e1) {
        // TODO Auto-generated catch block
        e1.printStackTrace();
    }
       digest.reset();
       return digest.digest(password.getBytes());
 }
static String bin2hex(byte[] data) {
    return String.format(""%0"" + (data.length*2) + ""X"", new BigInteger(1, data));
}

","i know this has been answered but i found a Hashing Library at android arsenal and its very easy,simple and just one line of code. can hash MD5, SHA-1, SHA-256, SHA-384, or SHA-512.

first add this to your gradle and sync
implementation 'com.github.1AboveAll:Hasher:1.2'
start hasing
Hasher.Companion.hash(""Hello"",HashType.SHA_1);

","52689","<java><php><android><digest><sha>","47","0","4","2019-04-30 12:05:04","7166240","7","15","600500","","2011-08-23 19:36:11","2011-08-23 18:59:05",""
"7166129","How can I calculate the SHA-256 hash of a string in Android?","I'm trying to get the SHA256 of a string in Android.
Here is the PHP code that I want to match:
echo bin2hex(mhash(MHASH_SHA256,""asdf""));
//outputs ""f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b""

Now, in Java, I'm trying to do the following:
            String password=""asdf""
            MessageDigest digest=null;
    try {
        digest = MessageDigest.getInstance(""SHA-256"");
    } catch (NoSuchAlgorithmException e1) {
        // TODO Auto-generated catch block
        e1.printStackTrace();
    }
       digest.reset();
       try {
        Log.i(""Eamorr"",digest.digest(password.getBytes(""UTF-8"")).toString());
    } catch (UnsupportedEncodingException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }

But this prints out: ""a42yzk3axdv3k4yh98g8""
What did I do wrong here?

Solution thanks to erickson:
 Log.i(""Eamorr"",bin2hex(getHash(""asdf"")));

 public byte[] getHash(String password) {
       MessageDigest digest=null;
    try {
        digest = MessageDigest.getInstance(""SHA-256"");
    } catch (NoSuchAlgorithmException e1) {
        // TODO Auto-generated catch block
        e1.printStackTrace();
    }
       digest.reset();
       return digest.digest(password.getBytes());
 }
static String bin2hex(byte[] data) {
    return String.format(""%0"" + (data.length*2) + ""X"", new BigInteger(1, data));
}

","Complete answer with use example, thanks to erickson.
Put this into your ""Utils"" class.
public static String getSha256Hash(String password) {
    try {
        MessageDigest digest = null;
        try {
            digest = MessageDigest.getInstance(""SHA-256"");
        } catch (NoSuchAlgorithmException e1) {
            e1.printStackTrace();
        }
        digest.reset();
        return bin2hex(digest.digest(password.getBytes()));
    } catch (Exception ignored) {
        return null;
    }
}

private static String bin2hex(byte[] data) {
    StringBuilder hex = new StringBuilder(data.length * 2);
    for (byte b : data)
        hex.append(String.format(""%02x"", b & 0xFF));
    return hex.toString();
}

Example of use: 
Toast.makeText(this, Utils.getSha256Hash(""123456_MY_PASSWORD""), Toast.LENGTH_SHORT).show();

","52689","<java><php><android><digest><sha>","47","1","4","2019-04-30 12:05:04","7166240","7","15","600500","","2011-08-23 19:36:11","2011-08-23 18:59:05",""
"18134627","How much of a git sha is *generally* considered necessary to uniquely identify a change in a given codebase?","If you're going to build, say, a directory structure where a directory is named for a commit in a Git repository, and you want it to be short enough to make your eyes not bleed, but long enough that the chance of it colliding would be negligible, how much of the SHA substring is generally required?
Let's say I want to uniquely identify this change: https://github.com/wycats/handlebars.js/commit/e62999f9ece7d9218b9768a908f8df9c11d7e920
I can use as little as the first four characters:
https://github.com/wycats/handlebars.js/commit/e629
But I feel like that would be risky.  But ssuming a codebase that, over a couple of years, might have—say—30k changes, what are the chances of collision if I use 8 characters?  12?  Is there a number that's generally considered acceptable for this sort of thing?
","This question is actually answered in Chapter 7 of the Pro Git book:

Generally, eight to ten characters are more than enough to be unique
  within a project. One of the largest Git projects, the Linux kernel,
  is beginning to need 12 characters out of the possible 40 to stay
  unique.

7 digits is the Git default for a short SHA, so that's fine for most projects. The Kernel team have increased theirs several times, as mentioned, because the have several hundred thousand commits. So for your ~30k commits, 8 or 10 digits should be perfectly fine.
","50879","<git><github><sha>","190","211","5","2017-07-26 16:27:29","18134919","1","52","","","","2013-08-08 19:37:21",""
"18134627","How much of a git sha is *generally* considered necessary to uniquely identify a change in a given codebase?","If you're going to build, say, a directory structure where a directory is named for a commit in a Git repository, and you want it to be short enough to make your eyes not bleed, but long enough that the chance of it colliding would be negligible, how much of the SHA substring is generally required?
Let's say I want to uniquely identify this change: https://github.com/wycats/handlebars.js/commit/e62999f9ece7d9218b9768a908f8df9c11d7e920
I can use as little as the first four characters:
https://github.com/wycats/handlebars.js/commit/e629
But I feel like that would be risky.  But ssuming a codebase that, over a couple of years, might have—say—30k changes, what are the chances of collision if I use 8 characters?  12?  Is there a number that's generally considered acceptable for this sort of thing?
","Note: you can ask git rev-parse --short for the shortest and yet unique SHA1.
See ""git get short hash from regular hash""
git rev-parse --short=4 921103db8259eb9de72f42db8b939895f5651489
92110


As you can see in my example the SHA1 has a length of 5 even if I specified a length of 4.


For big repos, 7 isn't enough since 2010, and commit dce9648 by Linus Torvalds himself (git 1.7.4.4, Oct 2010):

The default of 7 comes from fairly early in git development, when seven hex digits was a lot (it covers about 250+ million hash values).
  Back then I thought that 65k revisions was a lot (it was what we were about to hit in BK), and each revision tends to be about 5-10 new objects or so, so a million objects was a big number.

(BK = BitKeeper)

These days, the kernel isn't even the largest git project, and even the kernel has about 220k revisions (much bigger than the BK tree ever was) and we are approaching two million objects.
  At that point, seven hex digits is still unique for a lot of them, but when we're talking about just two orders of magnitude difference between number of objects and the hash size, there will be collisions in truncated hash values.
  It's no longer even close to unrealistic - it happens all the time.
We should both increase the default abbrev that was unrealistically small, and add a way for people to set their own default per-project in the git config file.

core.abbrev


Set the length object names are abbreviated to.
  If unspecified, many commands abbreviate to 7 hexdigits, which may not be enough for abbreviated object names to stay unique for sufficiently long time.

environment.c:
int minimum_abbrev = 4, default_abbrev = 7;

Note: As commented below by marco.m, core.abbrevLenght was renamed in core.abbrev in that same Git 1.7.4.4 in commit a71f09f 

Rename core.abbrevlength back to core.abbrev
It corresponds to --abbrev=$n command line option after all.


More recently, Linus added in commit e6c587c (for Git 2.11, Q4 2016):
(as mentioned in Matthieu Moy's answer)

In fairly early days we somehow decided to abbreviate object names down to 7-hexdigits, but as projects grow, it is becoming more and more likely to see such a short object names made in earlier days and recorded in the log messages no longer unique.
Currently the Linux kernel project needs 11 to 12 hexdigits, while Git itself needs 10 hexdigits to uniquely identify the objects they have, while many smaller projects may still be fine with the original 7-hexdigit default.  One-size does not fit all projects.
Introduce a mechanism, where we estimate the number of objects in the repository upon the first request to abbreviate an object name with the default setting and come up with a sane default for the repository.  Based on the expectation that we would see collision in a repository with 2^(2N) objects when using object names shortened to first N bits, use sufficient number of hexdigits to cover the number of objects in the repository.
  Each hexdigit (4-bits) we add to the shortened name allows us to have four times (2-bits) as many objects in the repository.

See commit e6c587c (01 Oct 2016) by Linus Torvalds (torvalds).
See commit 7b5b772, commit 65acfea (01 Oct 2016) by Junio C Hamano (gitster).
(Merged by Junio C Hamano -- gitster -- in commit bb188d0, 03 Oct 2016) 
That new property (guessing a reasonnable default for SHA1 abbrev value) has a direct effect on how Git compute its own version number for release.
","50879","<git><github><sha>","190","128","5","2017-07-26 16:27:29","18134919","1","52","","","","2013-08-08 19:37:21",""
"18134627","How much of a git sha is *generally* considered necessary to uniquely identify a change in a given codebase?","If you're going to build, say, a directory structure where a directory is named for a commit in a Git repository, and you want it to be short enough to make your eyes not bleed, but long enough that the chance of it colliding would be negligible, how much of the SHA substring is generally required?
Let's say I want to uniquely identify this change: https://github.com/wycats/handlebars.js/commit/e62999f9ece7d9218b9768a908f8df9c11d7e920
I can use as little as the first four characters:
https://github.com/wycats/handlebars.js/commit/e629
But I feel like that would be risky.  But ssuming a codebase that, over a couple of years, might have—say—30k changes, what are the chances of collision if I use 8 characters?  12?  Is there a number that's generally considered acceptable for this sort of thing?
","This question has been answered, but for anyone looking for the math behind - it's called Birthday problem (Wikipedia).
It is about the probability of having 2 (or more) people from group of N people to have birthday on the same day in year. Which is analogical to probabily of 2 (or more) git commits from repository having N commits in total having the same hash prefix of length X.
Look at the Probability table. For example for hash hex string of length 8 the probability of having a collision reaches 1 % when the repository has just about 9300 items (git commits). For 110 000 commits the probability is 75 %. But if you have hash hex string of length 12 the probability of collision in 100 000 commits is below 0.1 %.
","50879","<git><github><sha>","190","12","5","2017-07-26 16:27:29","18134919","1","52","","","","2013-08-08 19:37:21",""
"18134627","How much of a git sha is *generally* considered necessary to uniquely identify a change in a given codebase?","If you're going to build, say, a directory structure where a directory is named for a commit in a Git repository, and you want it to be short enough to make your eyes not bleed, but long enough that the chance of it colliding would be negligible, how much of the SHA substring is generally required?
Let's say I want to uniquely identify this change: https://github.com/wycats/handlebars.js/commit/e62999f9ece7d9218b9768a908f8df9c11d7e920
I can use as little as the first four characters:
https://github.com/wycats/handlebars.js/commit/e629
But I feel like that would be risky.  But ssuming a codebase that, over a couple of years, might have—say—30k changes, what are the chances of collision if I use 8 characters?  12?  Is there a number that's generally considered acceptable for this sort of thing?
","Git version 2.11 (or perhaps 2.12?) will contain a feature that adapts the number of characters used in short identifiers (e.g. git log --oneline) to the size of the project. Once you use such version of Git, the answer to your question can be ""pick whatever length Git gives you with git log --oneline, it's safe enough"".
For more details, see Changing the default for “core.abbrev”? discussion in Git Rev News edition 20 and commit bb188d00f7.
","50879","<git><github><sha>","190","2","5","2017-07-26 16:27:29","18134919","1","52","","","","2013-08-08 19:37:21",""
"18134627","How much of a git sha is *generally* considered necessary to uniquely identify a change in a given codebase?","If you're going to build, say, a directory structure where a directory is named for a commit in a Git repository, and you want it to be short enough to make your eyes not bleed, but long enough that the chance of it colliding would be negligible, how much of the SHA substring is generally required?
Let's say I want to uniquely identify this change: https://github.com/wycats/handlebars.js/commit/e62999f9ece7d9218b9768a908f8df9c11d7e920
I can use as little as the first four characters:
https://github.com/wycats/handlebars.js/commit/e629
But I feel like that would be risky.  But ssuming a codebase that, over a couple of years, might have—say—30k changes, what are the chances of collision if I use 8 characters?  12?  Is there a number that's generally considered acceptable for this sort of thing?
","This is known as the birthday problem.
For probabilities less than 1/2 the probability of a collision can be approximated as
p ~= (n2)/(2m)
Where n is the number of items and m is the number of possibilities for each item.
The number of possibilities for a hex string is 16c where c is the number of characters.
So for 8 characters and 30K commits
30K ~= 215
p ~= (n2)/(2m) ~= ((215)2)/(2*168) = 230/233 = ⅛
Increasing it to 12 characters
p ~= (n2)/(2m) ~= ((215)2)/(2*1612) = 230/249 = 2-19 
","50879","<git><github><sha>","190","30","5","2017-07-26 16:27:29","18134919","1","52","","","","2013-08-08 19:37:21",""
"5335734","sha256 function in SQL Server","Is there a built-in sha256 function in SQL Server? I can't find a sha256 T-SQL function source code either. Anyone who has an alternative?
","I think you are looking for HASHBYTES, but it supports only up to SHA-1 (160 bytes)
FYI Hashing is not encrypting. It is irreversible. Encryption is a process that is reversible to get the original data.
Reference for SHA2

SHA-2 is a set of cryptographic hash functions (SHA-224, SHA-256, SHA-384, SHA-512)


Here is a discussion about adding a salt to hashes
As for 256-byte hashing function - there isn't one built in.
","47114","<sql-server><hash><sha256><sha>","12","3","2","2014-05-17 18:16:09","","1","1","13302","","2011-03-17 07:34:25","2011-03-17 06:41:07","2013-09-23 15:19:33"
"5335734","sha256 function in SQL Server","Is there a built-in sha256 function in SQL Server? I can't find a sha256 T-SQL function source code either. Anyone who has an alternative?
","SQL Server 2012 supports SHA2_256 and SHA2_512.
 SELECT HASHBYTES('SHA2_256','something')

","47114","<sql-server><hash><sha256><sha>","12","34","2","2014-05-17 18:16:09","","1","1","13302","","2011-03-17 07:34:25","2011-03-17 06:41:07","2013-09-23 15:19:33"
"6840206","SHA2 password hashing in java","I'm trying to hash some passwords with SHA2.
Where can I get a snippet of java code for make that?
I have seen that post but I have something missing:
SHA2 password storage with Java
 Mac mac = Mac.getInstance(""HmacSha256"");
 SecretKeySpec secret = new SecretKeySpec(key.getBytes(), ""HmacSha256"");
 mac.init(secret);
 byte[] shaDigest = mac.doFinal(phrase.getBytes());
 String hash = """";
 for(byte b:shaDigest) {
     hash += String.format(""%02x"",b);
 }

The phrase is the String I want encode right? And what is the key (line 2)
Thanks in advance
","Phrase would be the password that you're trying to protect.  key is the salt, a unique (and known) string appended to your password before hashing, to defeat rainbow tables.  Or it should be, at least.  Your code is just taking it from the password itself, which is kind of pointless.  It should be a long random string that is stored together with the password digest.
","36726","<java><hash><password-protection><sha>","11","0","4","2016-08-19 06:57:40","","1","8","-1","","2017-05-23 11:47:06","2011-07-27 06:26:17",""
"6840206","SHA2 password hashing in java","I'm trying to hash some passwords with SHA2.
Where can I get a snippet of java code for make that?
I have seen that post but I have something missing:
SHA2 password storage with Java
 Mac mac = Mac.getInstance(""HmacSha256"");
 SecretKeySpec secret = new SecretKeySpec(key.getBytes(), ""HmacSha256"");
 mac.init(secret);
 byte[] shaDigest = mac.doFinal(phrase.getBytes());
 String hash = """";
 for(byte b:shaDigest) {
     hash += String.format(""%02x"",b);
 }

The phrase is the String I want encode right? And what is the key (line 2)
Thanks in advance
","you may consider using commons-codec's implementation
String hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(password +""salt"");

","36726","<java><hash><password-protection><sha>","11","10","4","2016-08-19 06:57:40","","1","8","-1","","2017-05-23 11:47:06","2011-07-27 06:26:17",""
"6840206","SHA2 password hashing in java","I'm trying to hash some passwords with SHA2.
Where can I get a snippet of java code for make that?
I have seen that post but I have something missing:
SHA2 password storage with Java
 Mac mac = Mac.getInstance(""HmacSha256"");
 SecretKeySpec secret = new SecretKeySpec(key.getBytes(), ""HmacSha256"");
 mac.init(secret);
 byte[] shaDigest = mac.doFinal(phrase.getBytes());
 String hash = """";
 for(byte b:shaDigest) {
     hash += String.format(""%02x"",b);
 }

The phrase is the String I want encode right? And what is the key (line 2)
Thanks in advance
","First, you need to be clear what it is you want to do.  You say you want to hash a password, but the code you are using is for a MAC (Message Authentication Code), specifically, HMAC.
Hashes and MACs are different things for different purposes (though HMAC does involve using a hash).  You need to be sure you are using the right one for your requirement.
The reason you are being asked to supply a key is because MACs need a key.  Hashes do not:
public byte[] hash(String password) throws NoSuchAlgorithmException {
    MessageDigest sha256 = MessageDigest.getInstance(""SHA-256"");        
    byte[] passBytes = password.getBytes();
    byte[] passHash = sha256.digest(passBytes);
    return passHash;
}

","36726","<java><hash><password-protection><sha>","11","25","4","2016-08-19 06:57:40","","1","8","-1","","2017-05-23 11:47:06","2011-07-27 06:26:17",""
"6840206","SHA2 password hashing in java","I'm trying to hash some passwords with SHA2.
Where can I get a snippet of java code for make that?
I have seen that post but I have something missing:
SHA2 password storage with Java
 Mac mac = Mac.getInstance(""HmacSha256"");
 SecretKeySpec secret = new SecretKeySpec(key.getBytes(), ""HmacSha256"");
 mac.init(secret);
 byte[] shaDigest = mac.doFinal(phrase.getBytes());
 String hash = """";
 for(byte b:shaDigest) {
     hash += String.format(""%02x"",b);
 }

The phrase is the String I want encode right? And what is the key (line 2)
Thanks in advance
","I modified a little rossum's code, added salt and convert returning type to String, add try/catch, maybe it will help to someone:
    public String hash(String password) {
    try {
        MessageDigest sha256 = MessageDigest.getInstance(""SHA-256"");
        String salt = ""some_random_salt"";
        String passWithSalt = password + salt;
        byte[] passBytes = passWithSalt.getBytes();
        byte[] passHash = sha256.digest(passBytes);             
        StringBuilder sb = new StringBuilder();
        for(int i=0; i< passHash.length ;i++) {
            sb.append(Integer.toString((passHash[i] & 0xff) + 0x100, 16).substring(1));         
        }
        String generatedPassword = sb.toString();
        return generatedPassword;
    } catch (NoSuchAlgorithmException e) { e.printStackTrace(); }       
    return null;
}

","36726","<java><hash><password-protection><sha>","11","14","4","2016-08-19 06:57:40","","1","8","-1","","2017-05-23 11:47:06","2011-07-27 06:26:17",""
"9126567","Method not found using DigestUtils in Android","I am trying to use the library DigestUtils in Android 2.3.1 using JDK 1.6, however I get the following error when executing the app:
Could not find method org.apache.commons.codec.binary.Hex.encodeHexString, referenced from method org.apache.commons.codec.digest.DigestUtils.shaHex
Here you have the stacktrace:
02-03 10:25:45.153: I/dalvikvm(1230): Could not find method org.apache.commons.codec.binary.Hex.encodeHexString, referenced from method org.apache.commons.codec.digest.DigestUtils.shaHex
02-03 10:25:45.153: W/dalvikvm(1230): VFY: unable to resolve static method 329: Lorg/apache/commons/codec/binary/Hex;.encodeHexString ([B)Ljava/lang/String;
02-03 10:25:45.153: D/dalvikvm(1230): VFY: replacing opcode 0x71 at 0x0004
02-03 10:25:45.153: D/dalvikvm(1230): VFY: dead code 0x0007-0008 in Lorg/apache/commons/codec/digest/DigestUtils;.shaHex ([B)Ljava/lang/String;
02-03 10:25:45.163: D/AndroidRuntime(1230): Shutting down VM
02-03 10:25:45.163: W/dalvikvm(1230): threadid=1: thread exiting with uncaught exception (group=0x40015560)
02-03 10:25:45.173: E/AndroidRuntime(1230): FATAL EXCEPTION: main
02-03 10:25:45.173: E/AndroidRuntime(1230): java.lang.NoSuchMethodError: org.apache.commons.codec.binary.Hex.encodeHexString
02-03 10:25:45.173: E/AndroidRuntime(1230):     at org.apache.commons.codec.digest.DigestUtils.md5Hex(DigestUtils.java:226)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at com.caumons.trainingdininghall.ConnectionProfileActivity.onCreate(ConnectionProfileActivity.java:20)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at android.app.Instrumentation.callActivityOnCreate(Instrumentation.java:1047)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:1586)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:1638)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at android.app.ActivityThread.access$1500(ActivityThread.java:117)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at android.app.ActivityThread$H.handleMessage(ActivityThread.java:928)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at android.os.Handler.dispatchMessage(Handler.java:99)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at android.os.Looper.loop(Looper.java:123)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at android.app.ActivityThread.main(ActivityThread.java:3647)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at java.lang.reflect.Method.invokeNative(Native Method)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at java.lang.reflect.Method.invoke(Method.java:507)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:839)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:597)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at dalvik.system.NativeStart.main(Native Method)

The line of code which causes the exception is:
String hash = DigestUtils.shaHex(""textToHash"");
I have executed the same code in a Java class outside Android and it works! So, I do not know why when working with Android it does not work... I put the libraty inside a new libs/ folder in my app and updated the BuildPath to use it. If I try to use md5 instead of sha1 I get the same exception. Any help would be appreciated! Thank you.
UPDATE:
As this is a very active question, I've changed the accepted answer in favour of @DA25, as his solution is straightforward and the high number of upvotes prove that it works.
","Finally I get the answer and it works well. As described in No such method error in Apache codec for another type of encrypt (Base64) I tried to reproduce the same issue and I get exactly the same error. So I was in the case of the question attached. As they say, it seems to be an internal name collision with the package name org.apache.commons.codec and as stated by @Don I changed it to com.apache.commons.codec and worked fine! How I did it?
I downloaded the source code and changed the 3 directories org to com. I also replaced all the occurrences of the package name in the files where they appear and also changed the references in the docs to com/apache/commons/codec/. (Do not try to remane them manually or you will spend the hole day). Then I compiled the library and generated the jar with Ant, which I called commons-codec-1.6-android.jar. I put the jar in the libs/ folder of my Android app and added it to the buildpath. Also, I attached the sources as the folder which contains all the files. So now I have the library ready to use with Android!
Hope that it helps someone else!
","35910","<android><apache><encryption><sha><digest>","71","19","8","2019-10-02 12:25:24","9284092","2","29","955619","","2013-08-28 02:24:38","2012-02-03 09:43:11",""
"9126567","Method not found using DigestUtils in Android","I am trying to use the library DigestUtils in Android 2.3.1 using JDK 1.6, however I get the following error when executing the app:
Could not find method org.apache.commons.codec.binary.Hex.encodeHexString, referenced from method org.apache.commons.codec.digest.DigestUtils.shaHex
Here you have the stacktrace:
02-03 10:25:45.153: I/dalvikvm(1230): Could not find method org.apache.commons.codec.binary.Hex.encodeHexString, referenced from method org.apache.commons.codec.digest.DigestUtils.shaHex
02-03 10:25:45.153: W/dalvikvm(1230): VFY: unable to resolve static method 329: Lorg/apache/commons/codec/binary/Hex;.encodeHexString ([B)Ljava/lang/String;
02-03 10:25:45.153: D/dalvikvm(1230): VFY: replacing opcode 0x71 at 0x0004
02-03 10:25:45.153: D/dalvikvm(1230): VFY: dead code 0x0007-0008 in Lorg/apache/commons/codec/digest/DigestUtils;.shaHex ([B)Ljava/lang/String;
02-03 10:25:45.163: D/AndroidRuntime(1230): Shutting down VM
02-03 10:25:45.163: W/dalvikvm(1230): threadid=1: thread exiting with uncaught exception (group=0x40015560)
02-03 10:25:45.173: E/AndroidRuntime(1230): FATAL EXCEPTION: main
02-03 10:25:45.173: E/AndroidRuntime(1230): java.lang.NoSuchMethodError: org.apache.commons.codec.binary.Hex.encodeHexString
02-03 10:25:45.173: E/AndroidRuntime(1230):     at org.apache.commons.codec.digest.DigestUtils.md5Hex(DigestUtils.java:226)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at com.caumons.trainingdininghall.ConnectionProfileActivity.onCreate(ConnectionProfileActivity.java:20)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at android.app.Instrumentation.callActivityOnCreate(Instrumentation.java:1047)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:1586)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:1638)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at android.app.ActivityThread.access$1500(ActivityThread.java:117)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at android.app.ActivityThread$H.handleMessage(ActivityThread.java:928)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at android.os.Handler.dispatchMessage(Handler.java:99)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at android.os.Looper.loop(Looper.java:123)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at android.app.ActivityThread.main(ActivityThread.java:3647)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at java.lang.reflect.Method.invokeNative(Native Method)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at java.lang.reflect.Method.invoke(Method.java:507)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:839)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:597)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at dalvik.system.NativeStart.main(Native Method)

The line of code which causes the exception is:
String hash = DigestUtils.shaHex(""textToHash"");
I have executed the same code in a Java class outside Android and it works! So, I do not know why when working with Android it does not work... I put the libraty inside a new libs/ folder in my app and updated the BuildPath to use it. If I try to use md5 instead of sha1 I get the same exception. Any help would be appreciated! Thank you.
UPDATE:
As this is a very active question, I've changed the accepted answer in favour of @DA25, as his solution is straightforward and the high number of upvotes prove that it works.
","I ran into the same issue trying to use DigestUtils in my Android app. This was the best answer I could find by searching, but I was reluctant to rebuild the .jar file with the namespace changed. After spending some time on this issue, I found an easier way to solve the problem for my case. The problem statement for my code was 
String s = DigestUtils.md5Hex(data);

Replace this statement with the following and it will work:
String s = new String(Hex.encodeHex(DigestUtils.md5(data)));

Similarly, for shaHex exampl, you can change it to
String hash = new String(Hex.encodeHex(DigestUtils.sha(""textToHash"")));

This works because even though Android does not have encodeHexString(), it does have encodeHex(). Hope this would help others who run into the same issue.
","35910","<android><apache><encryption><sha><digest>","71","138","8","2019-10-02 12:25:24","9284092","2","29","955619","","2013-08-28 02:24:38","2012-02-03 09:43:11",""
"9126567","Method not found using DigestUtils in Android","I am trying to use the library DigestUtils in Android 2.3.1 using JDK 1.6, however I get the following error when executing the app:
Could not find method org.apache.commons.codec.binary.Hex.encodeHexString, referenced from method org.apache.commons.codec.digest.DigestUtils.shaHex
Here you have the stacktrace:
02-03 10:25:45.153: I/dalvikvm(1230): Could not find method org.apache.commons.codec.binary.Hex.encodeHexString, referenced from method org.apache.commons.codec.digest.DigestUtils.shaHex
02-03 10:25:45.153: W/dalvikvm(1230): VFY: unable to resolve static method 329: Lorg/apache/commons/codec/binary/Hex;.encodeHexString ([B)Ljava/lang/String;
02-03 10:25:45.153: D/dalvikvm(1230): VFY: replacing opcode 0x71 at 0x0004
02-03 10:25:45.153: D/dalvikvm(1230): VFY: dead code 0x0007-0008 in Lorg/apache/commons/codec/digest/DigestUtils;.shaHex ([B)Ljava/lang/String;
02-03 10:25:45.163: D/AndroidRuntime(1230): Shutting down VM
02-03 10:25:45.163: W/dalvikvm(1230): threadid=1: thread exiting with uncaught exception (group=0x40015560)
02-03 10:25:45.173: E/AndroidRuntime(1230): FATAL EXCEPTION: main
02-03 10:25:45.173: E/AndroidRuntime(1230): java.lang.NoSuchMethodError: org.apache.commons.codec.binary.Hex.encodeHexString
02-03 10:25:45.173: E/AndroidRuntime(1230):     at org.apache.commons.codec.digest.DigestUtils.md5Hex(DigestUtils.java:226)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at com.caumons.trainingdininghall.ConnectionProfileActivity.onCreate(ConnectionProfileActivity.java:20)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at android.app.Instrumentation.callActivityOnCreate(Instrumentation.java:1047)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:1586)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:1638)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at android.app.ActivityThread.access$1500(ActivityThread.java:117)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at android.app.ActivityThread$H.handleMessage(ActivityThread.java:928)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at android.os.Handler.dispatchMessage(Handler.java:99)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at android.os.Looper.loop(Looper.java:123)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at android.app.ActivityThread.main(ActivityThread.java:3647)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at java.lang.reflect.Method.invokeNative(Native Method)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at java.lang.reflect.Method.invoke(Method.java:507)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:839)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:597)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at dalvik.system.NativeStart.main(Native Method)

The line of code which causes the exception is:
String hash = DigestUtils.shaHex(""textToHash"");
I have executed the same code in a Java class outside Android and it works! So, I do not know why when working with Android it does not work... I put the libraty inside a new libs/ folder in my app and updated the BuildPath to use it. If I try to use md5 instead of sha1 I get the same exception. Any help would be appreciated! Thank you.
UPDATE:
As this is a very active question, I've changed the accepted answer in favour of @DA25, as his solution is straightforward and the high number of upvotes prove that it works.
","Since there's no clear answer for the root cause of this problem, I'd like to clarify what's happening here.
Why the NoSuchMethodError is thrown in the first place?
According to exception stack trace, the line that causes the fault is 226 in DigestUtils#md5hex method. Let's see what we have there (I'm assuming you have used version 1.4, since this is the only release where Hex#encodeHexString method is being invoked in line 226):
public static String md5Hex(String data) {
    return Hex.encodeHexString(md5(data));
}

The exception says java.lang.NoSuchMethodError: org.apache.commons.codec.binary.Hex.encodeHexString.
Let's understand why.  
First of all, Android framework already includes the Commons Codec library (except the DigestUtils class). Yes, it is not exposed as part of the Android SDK and you cannot use it directly. But you still want to use it. So what you do? You add Commons Codec library as part of your application. The compiler doesn't complain - from his point of view everything was fine.
But what happens at runtime? Let's follow your exception stack trace:
First, you're calling DigestUtils#md5Hex from your Activity's onCreate method. As I wrote above, the framework doesn't include that class, so DigestUtils (from Commons Codec version 1.4) is loaded from your dex.
Next, md5hex method tries to invoke Hex#encodeHexString method. Hex class is part of the Commons Codec library that included in framework. The thing is that its version is 1.3 (ancient release from July 2004). Hex class exists in boot classpath, which means that the runtime will always favor it instead of the Hex class that packaged inside your dex. You can see warnings about it in your application logs when you start your app (with Dalvik runtime):  
D/dalvikvm? DexOpt: 'Lorg/apache/commons/codec/binary/Hex;' has an earlier definition; blocking out
I/dalvikvm? DexOpt: not resolving ambiguous class 'Lorg/apache/commons/codec/binary/Hex;'
D/dalvikvm? DexOpt: not verifying/optimizing 'Lorg/apache/commons/codec/binary/Hex;': multiple definitions
I/dalvikvm? Could not find method org.apache.commons.codec.binary.Hex.encodeHexString, referenced from method org.apache.commons.codec.digest.DigestUtils.md5Hex

Hex#encodeHexString method was introduced in version 1.4 of Commons Codec library and therefore it doesn't exist in framework's Hex class. The runtime can't find this method and thus throws NoSuchMethodError exception.
Why the accepted answer's solution works?
String s = new String(Hex.encodeHex(DigestUtils.md5(data)));

First, DigestUtils#md5 method is called. As I already stated, DigestUtils class that will be used is the one that packaged in your dex. This method doesn't use any other Commons Codec classes, so no problem with it.  
Next, Hex#encodeHex will be called. The Hex class that will be used is the framework's one (version 1.3). The encodeHex method (that takes a single parameter - byte array) exists in version 1.3 of Commons Codec library, and therefore this code will work fine.
What would I suggest?
My suggested solution is to rename the classes namespace/package. By doing so I'm explicitly specifying which code is going to execute, and prevent bizarre behavior that may occur because of versioning issues.  
You can do it manually (as Caumons wrote in his answer), or automatically with jarjar tool.  
See this issue summary and tips for using jarjar in my blogpost.
","35910","<android><apache><encryption><sha><digest>","71","34","8","2019-10-02 12:25:24","9284092","2","29","955619","","2013-08-28 02:24:38","2012-02-03 09:43:11",""
"9126567","Method not found using DigestUtils in Android","I am trying to use the library DigestUtils in Android 2.3.1 using JDK 1.6, however I get the following error when executing the app:
Could not find method org.apache.commons.codec.binary.Hex.encodeHexString, referenced from method org.apache.commons.codec.digest.DigestUtils.shaHex
Here you have the stacktrace:
02-03 10:25:45.153: I/dalvikvm(1230): Could not find method org.apache.commons.codec.binary.Hex.encodeHexString, referenced from method org.apache.commons.codec.digest.DigestUtils.shaHex
02-03 10:25:45.153: W/dalvikvm(1230): VFY: unable to resolve static method 329: Lorg/apache/commons/codec/binary/Hex;.encodeHexString ([B)Ljava/lang/String;
02-03 10:25:45.153: D/dalvikvm(1230): VFY: replacing opcode 0x71 at 0x0004
02-03 10:25:45.153: D/dalvikvm(1230): VFY: dead code 0x0007-0008 in Lorg/apache/commons/codec/digest/DigestUtils;.shaHex ([B)Ljava/lang/String;
02-03 10:25:45.163: D/AndroidRuntime(1230): Shutting down VM
02-03 10:25:45.163: W/dalvikvm(1230): threadid=1: thread exiting with uncaught exception (group=0x40015560)
02-03 10:25:45.173: E/AndroidRuntime(1230): FATAL EXCEPTION: main
02-03 10:25:45.173: E/AndroidRuntime(1230): java.lang.NoSuchMethodError: org.apache.commons.codec.binary.Hex.encodeHexString
02-03 10:25:45.173: E/AndroidRuntime(1230):     at org.apache.commons.codec.digest.DigestUtils.md5Hex(DigestUtils.java:226)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at com.caumons.trainingdininghall.ConnectionProfileActivity.onCreate(ConnectionProfileActivity.java:20)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at android.app.Instrumentation.callActivityOnCreate(Instrumentation.java:1047)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:1586)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:1638)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at android.app.ActivityThread.access$1500(ActivityThread.java:117)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at android.app.ActivityThread$H.handleMessage(ActivityThread.java:928)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at android.os.Handler.dispatchMessage(Handler.java:99)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at android.os.Looper.loop(Looper.java:123)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at android.app.ActivityThread.main(ActivityThread.java:3647)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at java.lang.reflect.Method.invokeNative(Native Method)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at java.lang.reflect.Method.invoke(Method.java:507)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:839)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:597)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at dalvik.system.NativeStart.main(Native Method)

The line of code which causes the exception is:
String hash = DigestUtils.shaHex(""textToHash"");
I have executed the same code in a Java class outside Android and it works! So, I do not know why when working with Android it does not work... I put the libraty inside a new libs/ folder in my app and updated the BuildPath to use it. If I try to use md5 instead of sha1 I get the same exception. Any help would be appreciated! Thank you.
UPDATE:
As this is a very active question, I've changed the accepted answer in favour of @DA25, as his solution is straightforward and the high number of upvotes prove that it works.
","Thanks @DA25
This is working fine for me
I have add dependency
compile 'commons-codec:commons-codec:1.9'

ref: http://mvnrepository.com/artifact/commons-codec/commons-codec/1.9
my function 
public String encode(String key, String data) {
    try {

        Mac sha256_HMAC = Mac.getInstance(""HmacSHA256"");
        SecretKeySpec secret_key = new SecretKeySpec(key.getBytes(""UTF-8""), ""HmacSHA256"");
        sha256_HMAC.init(secret_key);

        return new String(Hex.encodeHex(sha256_HMAC.doFinal(data.getBytes(""UTF-8""))));

    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
    } catch (InvalidKeyException e) {
        e.printStackTrace();
    } catch (UnsupportedEncodingException e) {
        e.printStackTrace();
    }

    return null;
}

","35910","<android><apache><encryption><sha><digest>","71","2","8","2019-10-02 12:25:24","9284092","2","29","955619","","2013-08-28 02:24:38","2012-02-03 09:43:11",""
"9126567","Method not found using DigestUtils in Android","I am trying to use the library DigestUtils in Android 2.3.1 using JDK 1.6, however I get the following error when executing the app:
Could not find method org.apache.commons.codec.binary.Hex.encodeHexString, referenced from method org.apache.commons.codec.digest.DigestUtils.shaHex
Here you have the stacktrace:
02-03 10:25:45.153: I/dalvikvm(1230): Could not find method org.apache.commons.codec.binary.Hex.encodeHexString, referenced from method org.apache.commons.codec.digest.DigestUtils.shaHex
02-03 10:25:45.153: W/dalvikvm(1230): VFY: unable to resolve static method 329: Lorg/apache/commons/codec/binary/Hex;.encodeHexString ([B)Ljava/lang/String;
02-03 10:25:45.153: D/dalvikvm(1230): VFY: replacing opcode 0x71 at 0x0004
02-03 10:25:45.153: D/dalvikvm(1230): VFY: dead code 0x0007-0008 in Lorg/apache/commons/codec/digest/DigestUtils;.shaHex ([B)Ljava/lang/String;
02-03 10:25:45.163: D/AndroidRuntime(1230): Shutting down VM
02-03 10:25:45.163: W/dalvikvm(1230): threadid=1: thread exiting with uncaught exception (group=0x40015560)
02-03 10:25:45.173: E/AndroidRuntime(1230): FATAL EXCEPTION: main
02-03 10:25:45.173: E/AndroidRuntime(1230): java.lang.NoSuchMethodError: org.apache.commons.codec.binary.Hex.encodeHexString
02-03 10:25:45.173: E/AndroidRuntime(1230):     at org.apache.commons.codec.digest.DigestUtils.md5Hex(DigestUtils.java:226)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at com.caumons.trainingdininghall.ConnectionProfileActivity.onCreate(ConnectionProfileActivity.java:20)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at android.app.Instrumentation.callActivityOnCreate(Instrumentation.java:1047)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:1586)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:1638)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at android.app.ActivityThread.access$1500(ActivityThread.java:117)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at android.app.ActivityThread$H.handleMessage(ActivityThread.java:928)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at android.os.Handler.dispatchMessage(Handler.java:99)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at android.os.Looper.loop(Looper.java:123)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at android.app.ActivityThread.main(ActivityThread.java:3647)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at java.lang.reflect.Method.invokeNative(Native Method)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at java.lang.reflect.Method.invoke(Method.java:507)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:839)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:597)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at dalvik.system.NativeStart.main(Native Method)

The line of code which causes the exception is:
String hash = DigestUtils.shaHex(""textToHash"");
I have executed the same code in a Java class outside Android and it works! So, I do not know why when working with Android it does not work... I put the libraty inside a new libs/ folder in my app and updated the BuildPath to use it. If I try to use md5 instead of sha1 I get the same exception. Any help would be appreciated! Thank you.
UPDATE:
As this is a very active question, I've changed the accepted answer in favour of @DA25, as his solution is straightforward and the high number of upvotes prove that it works.
","For me proguard removed the class during obfuscation .Add this to your Proguard rules.
-keep class org.apache.commons.** { *; }

Here's the method I was using of apache package.
Hex.encodeHex(digest)

","35910","<android><apache><encryption><sha><digest>","71","2","8","2019-10-02 12:25:24","9284092","2","29","955619","","2013-08-28 02:24:38","2012-02-03 09:43:11",""
"9126567","Method not found using DigestUtils in Android","I am trying to use the library DigestUtils in Android 2.3.1 using JDK 1.6, however I get the following error when executing the app:
Could not find method org.apache.commons.codec.binary.Hex.encodeHexString, referenced from method org.apache.commons.codec.digest.DigestUtils.shaHex
Here you have the stacktrace:
02-03 10:25:45.153: I/dalvikvm(1230): Could not find method org.apache.commons.codec.binary.Hex.encodeHexString, referenced from method org.apache.commons.codec.digest.DigestUtils.shaHex
02-03 10:25:45.153: W/dalvikvm(1230): VFY: unable to resolve static method 329: Lorg/apache/commons/codec/binary/Hex;.encodeHexString ([B)Ljava/lang/String;
02-03 10:25:45.153: D/dalvikvm(1230): VFY: replacing opcode 0x71 at 0x0004
02-03 10:25:45.153: D/dalvikvm(1230): VFY: dead code 0x0007-0008 in Lorg/apache/commons/codec/digest/DigestUtils;.shaHex ([B)Ljava/lang/String;
02-03 10:25:45.163: D/AndroidRuntime(1230): Shutting down VM
02-03 10:25:45.163: W/dalvikvm(1230): threadid=1: thread exiting with uncaught exception (group=0x40015560)
02-03 10:25:45.173: E/AndroidRuntime(1230): FATAL EXCEPTION: main
02-03 10:25:45.173: E/AndroidRuntime(1230): java.lang.NoSuchMethodError: org.apache.commons.codec.binary.Hex.encodeHexString
02-03 10:25:45.173: E/AndroidRuntime(1230):     at org.apache.commons.codec.digest.DigestUtils.md5Hex(DigestUtils.java:226)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at com.caumons.trainingdininghall.ConnectionProfileActivity.onCreate(ConnectionProfileActivity.java:20)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at android.app.Instrumentation.callActivityOnCreate(Instrumentation.java:1047)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:1586)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:1638)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at android.app.ActivityThread.access$1500(ActivityThread.java:117)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at android.app.ActivityThread$H.handleMessage(ActivityThread.java:928)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at android.os.Handler.dispatchMessage(Handler.java:99)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at android.os.Looper.loop(Looper.java:123)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at android.app.ActivityThread.main(ActivityThread.java:3647)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at java.lang.reflect.Method.invokeNative(Native Method)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at java.lang.reflect.Method.invoke(Method.java:507)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:839)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:597)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at dalvik.system.NativeStart.main(Native Method)

The line of code which causes the exception is:
String hash = DigestUtils.shaHex(""textToHash"");
I have executed the same code in a Java class outside Android and it works! So, I do not know why when working with Android it does not work... I put the libraty inside a new libs/ folder in my app and updated the BuildPath to use it. If I try to use md5 instead of sha1 I get the same exception. Any help would be appreciated! Thank you.
UPDATE:
As this is a very active question, I've changed the accepted answer in favour of @DA25, as his solution is straightforward and the high number of upvotes prove that it works.
","Add method 
public static String byteArrayToHexString(byte[] bytes) {
    final char[] toDigits = ""0123456789abcdef"".toCharArray();
    int l = bytes.length;
    char[] out = new char[l << 1];

    int i = 0; for (int j = 0; i < l; ++i) {
        out[(j++)] = toDigits[((0xF0 & bytes[i]) >>> 4)];
        out[(j++)] = toDigits[(0xF & bytes[i])];
    }
    return new String(out);
}

","35910","<android><apache><encryption><sha><digest>","71","0","8","2019-10-02 12:25:24","9284092","2","29","955619","","2013-08-28 02:24:38","2012-02-03 09:43:11",""
"9126567","Method not found using DigestUtils in Android","I am trying to use the library DigestUtils in Android 2.3.1 using JDK 1.6, however I get the following error when executing the app:
Could not find method org.apache.commons.codec.binary.Hex.encodeHexString, referenced from method org.apache.commons.codec.digest.DigestUtils.shaHex
Here you have the stacktrace:
02-03 10:25:45.153: I/dalvikvm(1230): Could not find method org.apache.commons.codec.binary.Hex.encodeHexString, referenced from method org.apache.commons.codec.digest.DigestUtils.shaHex
02-03 10:25:45.153: W/dalvikvm(1230): VFY: unable to resolve static method 329: Lorg/apache/commons/codec/binary/Hex;.encodeHexString ([B)Ljava/lang/String;
02-03 10:25:45.153: D/dalvikvm(1230): VFY: replacing opcode 0x71 at 0x0004
02-03 10:25:45.153: D/dalvikvm(1230): VFY: dead code 0x0007-0008 in Lorg/apache/commons/codec/digest/DigestUtils;.shaHex ([B)Ljava/lang/String;
02-03 10:25:45.163: D/AndroidRuntime(1230): Shutting down VM
02-03 10:25:45.163: W/dalvikvm(1230): threadid=1: thread exiting with uncaught exception (group=0x40015560)
02-03 10:25:45.173: E/AndroidRuntime(1230): FATAL EXCEPTION: main
02-03 10:25:45.173: E/AndroidRuntime(1230): java.lang.NoSuchMethodError: org.apache.commons.codec.binary.Hex.encodeHexString
02-03 10:25:45.173: E/AndroidRuntime(1230):     at org.apache.commons.codec.digest.DigestUtils.md5Hex(DigestUtils.java:226)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at com.caumons.trainingdininghall.ConnectionProfileActivity.onCreate(ConnectionProfileActivity.java:20)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at android.app.Instrumentation.callActivityOnCreate(Instrumentation.java:1047)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:1586)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:1638)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at android.app.ActivityThread.access$1500(ActivityThread.java:117)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at android.app.ActivityThread$H.handleMessage(ActivityThread.java:928)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at android.os.Handler.dispatchMessage(Handler.java:99)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at android.os.Looper.loop(Looper.java:123)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at android.app.ActivityThread.main(ActivityThread.java:3647)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at java.lang.reflect.Method.invokeNative(Native Method)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at java.lang.reflect.Method.invoke(Method.java:507)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:839)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:597)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at dalvik.system.NativeStart.main(Native Method)

The line of code which causes the exception is:
String hash = DigestUtils.shaHex(""textToHash"");
I have executed the same code in a Java class outside Android and it works! So, I do not know why when working with Android it does not work... I put the libraty inside a new libs/ folder in my app and updated the BuildPath to use it. If I try to use md5 instead of sha1 I get the same exception. Any help would be appreciated! Thank you.
UPDATE:
As this is a very active question, I've changed the accepted answer in favour of @DA25, as his solution is straightforward and the high number of upvotes prove that it works.
","We used below code and it worked :
  HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, keyString);
  String digest = new String( Hex.encodeHex(hmacUtils.hmac(msg)));

","35910","<android><apache><encryption><sha><digest>","71","0","8","2019-10-02 12:25:24","9284092","2","29","955619","","2013-08-28 02:24:38","2012-02-03 09:43:11",""
"9126567","Method not found using DigestUtils in Android","I am trying to use the library DigestUtils in Android 2.3.1 using JDK 1.6, however I get the following error when executing the app:
Could not find method org.apache.commons.codec.binary.Hex.encodeHexString, referenced from method org.apache.commons.codec.digest.DigestUtils.shaHex
Here you have the stacktrace:
02-03 10:25:45.153: I/dalvikvm(1230): Could not find method org.apache.commons.codec.binary.Hex.encodeHexString, referenced from method org.apache.commons.codec.digest.DigestUtils.shaHex
02-03 10:25:45.153: W/dalvikvm(1230): VFY: unable to resolve static method 329: Lorg/apache/commons/codec/binary/Hex;.encodeHexString ([B)Ljava/lang/String;
02-03 10:25:45.153: D/dalvikvm(1230): VFY: replacing opcode 0x71 at 0x0004
02-03 10:25:45.153: D/dalvikvm(1230): VFY: dead code 0x0007-0008 in Lorg/apache/commons/codec/digest/DigestUtils;.shaHex ([B)Ljava/lang/String;
02-03 10:25:45.163: D/AndroidRuntime(1230): Shutting down VM
02-03 10:25:45.163: W/dalvikvm(1230): threadid=1: thread exiting with uncaught exception (group=0x40015560)
02-03 10:25:45.173: E/AndroidRuntime(1230): FATAL EXCEPTION: main
02-03 10:25:45.173: E/AndroidRuntime(1230): java.lang.NoSuchMethodError: org.apache.commons.codec.binary.Hex.encodeHexString
02-03 10:25:45.173: E/AndroidRuntime(1230):     at org.apache.commons.codec.digest.DigestUtils.md5Hex(DigestUtils.java:226)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at com.caumons.trainingdininghall.ConnectionProfileActivity.onCreate(ConnectionProfileActivity.java:20)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at android.app.Instrumentation.callActivityOnCreate(Instrumentation.java:1047)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:1586)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:1638)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at android.app.ActivityThread.access$1500(ActivityThread.java:117)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at android.app.ActivityThread$H.handleMessage(ActivityThread.java:928)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at android.os.Handler.dispatchMessage(Handler.java:99)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at android.os.Looper.loop(Looper.java:123)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at android.app.ActivityThread.main(ActivityThread.java:3647)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at java.lang.reflect.Method.invokeNative(Native Method)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at java.lang.reflect.Method.invoke(Method.java:507)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:839)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:597)
02-03 10:25:45.173: E/AndroidRuntime(1230):     at dalvik.system.NativeStart.main(Native Method)

The line of code which causes the exception is:
String hash = DigestUtils.shaHex(""textToHash"");
I have executed the same code in a Java class outside Android and it works! So, I do not know why when working with Android it does not work... I put the libraty inside a new libs/ folder in my app and updated the BuildPath to use it. If I try to use md5 instead of sha1 I get the same exception. Any help would be appreciated! Thank you.
UPDATE:
As this is a very active question, I've changed the accepted answer in favour of @DA25, as his solution is straightforward and the high number of upvotes prove that it works.
","Another way to rename DigestUtils class will be with proguard.
If you are not using proguard you can enable it and add this one line which will obfuscate only DigestUtils class, and leave everything else intact.
-keep class !org.apache.commons.codec.digest.DigestUtils,com.** { *; }

and add this to your app build.gradle
buildTypes {
        debug {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

Or OPTION 2
Use old version of the library in your code:
implementation(""commons-codec:commons-codec:1.3""){
        force = true
    }

Need to use force = true if common-codec dependency come from third part library otherwise Gradle will resolve by default to higher version.
","35910","<android><apache><encryption><sha><digest>","71","0","8","2019-10-02 12:25:24","9284092","2","29","955619","","2013-08-28 02:24:38","2012-02-03 09:43:11",""
"5033441","Where does Git store the SHA1 of the commit for a submodule?","I know that when you add a submodule to a git repository it tracks a particular commit of that submodule referenced by its sha1.
I'm trying to find where this sha1 value is stored.
The .gitmodules and .git/config files only show the paths for the submodule, but not the sha1 of the commit.
The git-submodule(1) reference only speaks of a gitlink entry and the gitmodules(5) reference doesn't say anything about this either.
","It is stored in Git's object database directly.  The tree object for the directory where the submodule lives will have an entry for the submodule's commit (this is the so-called ""gitlink"").
Try doing git ls-tree master <path-to-directory-containing-submodule> (or just git ls-tree master if the submodule lives in the top-level directory).
","28503","<git><git-submodules><sha>","121","146","1","2017-12-30 02:31:33","5033973","1","27","50776","","2017-12-30 02:31:33","2011-02-17 19:12:37",""
"5001893","When should I use SHA-1 and when should I use SHA-2?","In my c# application, I'm using RSA to sign files before being uploaded on the database of my company by the person who is uploading and here I have to choose SHA-1 or SHA-2 for computing the hash.
As any other component in programming, I know that there must be a ""use this here"" and ""use that there"" for the two of them.
So, When this? and when that?
EDIT:
My question is: What is the difference regarding performance? and not regarding security, as I already know that SHA-2 is more solid secure than SHA-1.
In this Link a comparison between different types of SHA-2 noting when to use SHA-512 and when not in the end. I need a similar argument about SHA-1 and SHA-2.
","SHA2 is newer and stronger hashing algorithm. The main question is whether the recipient is capable of handling SHA2. If the recipient can handle it, - go with SHA2 without doubt.
","26812","<c#><security><rsa><digital-signature><sha>","23","-1","4","2016-05-10 20:11:01","5003438","0","4","420689","","2011-02-15 09:55:58","2011-02-15 09:34:12",""
"5001893","When should I use SHA-1 and when should I use SHA-2?","In my c# application, I'm using RSA to sign files before being uploaded on the database of my company by the person who is uploading and here I have to choose SHA-1 or SHA-2 for computing the hash.
As any other component in programming, I know that there must be a ""use this here"" and ""use that there"" for the two of them.
So, When this? and when that?
EDIT:
My question is: What is the difference regarding performance? and not regarding security, as I already know that SHA-2 is more solid secure than SHA-1.
In this Link a comparison between different types of SHA-2 noting when to use SHA-512 and when not in the end. I need a similar argument about SHA-1 and SHA-2.
","There isn't really, it depends on the level of security and/or paranoia desired. I'd use SHA256 for any new application, however this comes with the requirement of sufficiently large RSA keys that can handle an entire SHA256 fingerprint as payload.
","26812","<c#><security><rsa><digital-signature><sha>","23","1","4","2016-05-10 20:11:01","5003438","0","4","420689","","2011-02-15 09:55:58","2011-02-15 09:34:12",""
"5001893","When should I use SHA-1 and when should I use SHA-2?","In my c# application, I'm using RSA to sign files before being uploaded on the database of my company by the person who is uploading and here I have to choose SHA-1 or SHA-2 for computing the hash.
As any other component in programming, I know that there must be a ""use this here"" and ""use that there"" for the two of them.
So, When this? and when that?
EDIT:
My question is: What is the difference regarding performance? and not regarding security, as I already know that SHA-2 is more solid secure than SHA-1.
In this Link a comparison between different types of SHA-2 noting when to use SHA-512 and when not in the end. I need a similar argument about SHA-1 and SHA-2.
","SHA-2 is stronger and better suited to security-sensitive applications such as digital signing.
SHA-1 is good when you need a shorter hash and security is not an issue (e.g., file checksums).
Edit: SHA-1 algorithm is faster (up to 10 times faster than SHA-2 with 256 bits, and 20 times faster than SHA-2 with 512 bits - at least in the .NET implementation).
However, neither are really that slow: to put it in perspective, you can expect to hash a 100KB file with SHA-2 (256 bit) in a few milliseconds on a modern computer (or a 1MB file in a few tens of milliseconds).
","26812","<c#><security><rsa><digital-signature><sha>","23","3","4","2016-05-10 20:11:01","5003438","0","4","420689","","2011-02-15 09:55:58","2011-02-15 09:34:12",""
"5001893","When should I use SHA-1 and when should I use SHA-2?","In my c# application, I'm using RSA to sign files before being uploaded on the database of my company by the person who is uploading and here I have to choose SHA-1 or SHA-2 for computing the hash.
As any other component in programming, I know that there must be a ""use this here"" and ""use that there"" for the two of them.
So, When this? and when that?
EDIT:
My question is: What is the difference regarding performance? and not regarding security, as I already know that SHA-2 is more solid secure than SHA-1.
In this Link a comparison between different types of SHA-2 noting when to use SHA-512 and when not in the end. I need a similar argument about SHA-1 and SHA-2.
","Use SHA-2. Always. SHA-1 shall be reserved to situations where SHA-2 cannot be used due to interoperability issues with legacy code.
There is no performance issue until actual measures have been performed. Hash functions are fast. In most situations, hash function performance has only negligible impact; even detecting it could prove difficult. Security comes first. Since weaknesses have been found in SHA-1, using it nonetheless requires some robust justification. Using SHA-256 will not be questioned; this is the ""default choice"". But if you use SHA-1, prepare to be criticized.
Note that there are four functions known as ""SHA-2"": SHA-224, SHA-256, SHA-384 and SHA-512. SHA-224 and SHA-256 are the same function, save for an internal parameter (the ""initial value"") and the output size (SHA-224 output size is 28 bytes, whereas SHA-256 offers 32 bytes); they have the same performance characteristics. Similarly, SHA-384 and SHA-512 are the same function performance-wise. SHA-512 uses 64-bit arithmetic operations and is faster than SHA-256 on platforms which offer 64-bit opcodes; on 32-bit platforms, SHA-256 will be faster (note: on 32-bit x86 with native code, it is possible to use the SSE2 opcodes and their 64-bit computing abilities, hence some native code implementations of SHA-512 will be faster than SHA-256 in 32-bit mode; the OpenSSL code does that; but, as far as I know, the SHA-512 implementation in .NET is ""managed code""). Also, all the SHA-* functions have some basic granularity, because they process data by chunks: for SHA-256, chunks are 64-byte long, whereas SHA-512 uses 128-byte chunks; when hashing very short data elements, the higher SHA-512 granularity correspondingly lowers its performance. Finally, SHA-256 (on a 32-bit platform) is likely to yield smaller code (i.e. use less L1 cache on the CPU).
So, when in doubt, use SHA-256. If you plan on using SHA-1 then you should doubt.
If you want to use a hash function for a non-cryptographic usage (i.e. the weaknesses are not a problem for you) then, instead of SHA-1, consider MD4.
","26812","<c#><security><rsa><digital-signature><sha>","23","64","4","2016-05-10 20:11:01","5003438","0","4","420689","","2011-02-15 09:55:58","2011-02-15 09:34:12",""
"16231643","Decrypt SHA encrypted string","I have encrypted a string using the above code.
public String encrypt(String generatedKey)
    {
            try {
                MessageDigest md = MessageDigest.getInstance(""SHA"");
                md.update(generatedKey.getBytes(""UTF-8""));
                byte digest[] = md.digest();
                return (new BASE64Encoder()).encode(digest);
            }
            catch (Exception e) {
                return null;
            }

    }

Similarly i need a code to decrypt the above generated code. How can i do this?
","I am pretty sure that we cannot decode a SHA encrypted string directly.
See this for a clear explanation: How to decrypt SHA-256 encrypted String?
","26626","<java><encryption><sha>","-3","0","3","2013-04-26 12:52:17","","2","3","","","","2013-04-26 08:09:44","2013-05-02 05:18:53"
"16231643","Decrypt SHA encrypted string","I have encrypted a string using the above code.
public String encrypt(String generatedKey)
    {
            try {
                MessageDigest md = MessageDigest.getInstance(""SHA"");
                md.update(generatedKey.getBytes(""UTF-8""));
                byte digest[] = md.digest();
                return (new BASE64Encoder()).encode(digest);
            }
            catch (Exception e) {
                return null;
            }

    }

Similarly i need a code to decrypt the above generated code. How can i do this?
","SHA is a digest algorithm, not an encryption algorithm. Digest values are not decryptable. That's why they are secure. Two different inputs may give same digest values. But it is a very little possibility. For sha256 it is 1/(2^256).
Output of digest algorithms have constant length. For SHA256 it is always 256 bit, regardless of your input length, 1  bit or 100 Gbs. If we could decrypt 256 bit digest value and have the original 1Gb input back, we would never need compression algorithms :)
","26626","<java><encryption><sha>","-3","6","3","2013-04-26 12:52:17","","2","3","","","","2013-04-26 08:09:44","2013-05-02 05:18:53"
"16231643","Decrypt SHA encrypted string","I have encrypted a string using the above code.
public String encrypt(String generatedKey)
    {
            try {
                MessageDigest md = MessageDigest.getInstance(""SHA"");
                md.update(generatedKey.getBytes(""UTF-8""));
                byte digest[] = md.digest();
                return (new BASE64Encoder()).encode(digest);
            }
            catch (Exception e) {
                return null;
            }

    }

Similarly i need a code to decrypt the above generated code. How can i do this?
","Message digests produce a small ""fingerprint"" of a larger set of data. It's a one way procedure. 
What you probably is looking for is encryption. 
Key key = new SecretKeySpec(secret.getBytes(), ALGORITHM);

// Encrypt
Cipher cipher = Cipher.getInstance(ALGORITHM);
cipher.init(Cipher.ENCRYPT_MODE, key);
byte[] encryptedData = cipher.doFinal(plainText);

// Decrypt
cipher.init(Cipher.DECRYPT_MODE, key)
byte[] decryptedData = cipher.doFinal(encryptedData);

Where ALGORITHM can be one of
http://docs.oracle.com/javase/6/docs/technotes/guides/security/StandardNames.html#Cipher
","26626","<java><encryption><sha>","-3","2","3","2013-04-26 12:52:17","","2","3","","","","2013-04-26 08:09:44","2013-05-02 05:18:53"
"26473076","How do I check if my SSL Certificate is SHA1 or SHA2 on the commandline","How do I check if my SSL Certificate is using SHA1 or SHA2, from the commandline?
And yes, i this is similar to this, but i need a cli-tool and i want to understand how it is done.
","after googling for quite some time i came up with the following snippet (unix):
openssl s_client -connect <host>:<port> < /dev/null 2>/dev/null | openssl x509 -text -in /dev/stdin | grep ""Signature Algorithm""

windows (thanx Nick Westgate, see below)
certutil -dump cacert.pem | find ""Algorithm""

","26005","<ssl><openssl><sha1><sha><sha256>","18","25","4","2017-01-20 09:47:56","","0","5","-1","","2017-05-23 10:29:52","2014-10-20 19:05:06",""
"26473076","How do I check if my SSL Certificate is SHA1 or SHA2 on the commandline","How do I check if my SSL Certificate is using SHA1 or SHA2, from the commandline?
And yes, i this is similar to this, but i need a cli-tool and i want to understand how it is done.
","I know the topic is old but I think
openssl x509 -in yourcert.crt -text -noout | grep ""Signature Algorithm""

would be an easier solution.
","26005","<ssl><openssl><sha1><sha><sha256>","18","17","4","2017-01-20 09:47:56","","0","5","-1","","2017-05-23 10:29:52","2014-10-20 19:05:06",""
"26473076","How do I check if my SSL Certificate is SHA1 or SHA2 on the commandline","How do I check if my SSL Certificate is using SHA1 or SHA2, from the commandline?
And yes, i this is similar to this, but i need a cli-tool and i want to understand how it is done.
","You didn't specify a platform, but in a Windows command prompt you can use:
certutil -dump cacert.pem | find ""Algorithm""

","26005","<ssl><openssl><sha1><sha><sha256>","18","3","4","2017-01-20 09:47:56","","0","5","-1","","2017-05-23 10:29:52","2014-10-20 19:05:06",""
"26473076","How do I check if my SSL Certificate is SHA1 or SHA2 on the commandline","How do I check if my SSL Certificate is using SHA1 or SHA2, from the commandline?
And yes, i this is similar to this, but i need a cli-tool and i want to understand how it is done.
","In PowerShell
PS C:\> certutil -dump cacert.pem | findstr ""Algorithm""

","26005","<ssl><openssl><sha1><sha><sha256>","18","0","4","2017-01-20 09:47:56","","0","5","-1","","2017-05-23 10:29:52","2014-10-20 19:05:06",""
"10129311","Does every Android phone support SHA-256","So reading this post: How can I calculate the SHA-256 hash of a string in Android?
and the docs: http://developer.android.com/reference/java/security/MessageDigest.html
I'm curious; which phones will support SHA-256? In the docs, the line about the 'NoSuchAlgorithmException' makes me think that some phones don't support all algorithms. Before I go implementing this for an app and expecting it to work the same on all phones I want to know if anyone knows anything about this...?
I find it strange that the MessageDigest class doesn't have some constants to pick the algorithm you want to use.
","All Android devices support SHA-256. The NoSuchAlgorithmException indicates that a requested algorithm could not be found and is necessary because the method takes a String argument for the algorithm name. If you passed in ""foo-256"", the method's only recourse is to throw a NoSuchAlgorithmException because, for reasons beyond my understanding, there's no algorithm called ""foo-256"". Assuming you're passing in a name you're sure is an algorithm that Android can use, you'll never see that exception.
","25706","<android><hash><sha><message-digest>","34","30","4","2019-04-19 12:33:42","10129467","1","4","-1","","2017-05-23 11:47:35","2012-04-12 18:11:50",""
"10129311","Does every Android phone support SHA-256","So reading this post: How can I calculate the SHA-256 hash of a string in Android?
and the docs: http://developer.android.com/reference/java/security/MessageDigest.html
I'm curious; which phones will support SHA-256? In the docs, the line about the 'NoSuchAlgorithmException' makes me think that some phones don't support all algorithms. Before I go implementing this for an app and expecting it to work the same on all phones I want to know if anyone knows anything about this...?
I find it strange that the MessageDigest class doesn't have some constants to pick the algorithm you want to use.
","Add NoSuchAlgorithmException as below:
public static String SHA256 (String text) throws NoSuchAlgorithmException {

    MessageDigest md = MessageDigest.getInstance(""SHA-256"");

    md.update(text.getBytes());
    byte[] digest = md.digest();

    return Base64.encodeToString(digest, Base64.DEFAULT);
}

","25706","<android><hash><sha><message-digest>","34","18","4","2019-04-19 12:33:42","10129467","1","4","-1","","2017-05-23 11:47:35","2012-04-12 18:11:50",""
"10129311","Does every Android phone support SHA-256","So reading this post: How can I calculate the SHA-256 hash of a string in Android?
and the docs: http://developer.android.com/reference/java/security/MessageDigest.html
I'm curious; which phones will support SHA-256? In the docs, the line about the 'NoSuchAlgorithmException' makes me think that some phones don't support all algorithms. Before I go implementing this for an app and expecting it to work the same on all phones I want to know if anyone knows anything about this...?
I find it strange that the MessageDigest class doesn't have some constants to pick the algorithm you want to use.
","SHA-256withRSA is NOT supported in older android versions (verified the same in Android 4.0.3, 4.1.1). I have experienced this problem while using JSCEP. The digest algorithm returned by SCEP server is SHA-256. But SHA-256withRSA is not present in any default SecurityProviders in those android versions. Found a relevant link:
Which versions of Android support which package signing algorithms? 
This link shows that SHA-256withRSA was added later:
https://android-review.googlesource.com/44360
","25706","<android><hash><sha><message-digest>","34","5","4","2019-04-19 12:33:42","10129467","1","4","-1","","2017-05-23 11:47:35","2012-04-12 18:11:50",""
"10129311","Does every Android phone support SHA-256","So reading this post: How can I calculate the SHA-256 hash of a string in Android?
and the docs: http://developer.android.com/reference/java/security/MessageDigest.html
I'm curious; which phones will support SHA-256? In the docs, the line about the 'NoSuchAlgorithmException' makes me think that some phones don't support all algorithms. Before I go implementing this for an app and expecting it to work the same on all phones I want to know if anyone knows anything about this...?
I find it strange that the MessageDigest class doesn't have some constants to pick the algorithm you want to use.
","According to the Android Documentations for MessageDigest, SHA-256 is supported since API 1. 

","25706","<android><hash><sha><message-digest>","34","2","4","2019-04-19 12:33:42","10129467","1","4","-1","","2017-05-23 11:47:35","2012-04-12 18:11:50",""
"17127824","using OpenSSL in Visual Studio 2012","I have downloaded the latest release version of Openssl from http://www.openssl.org/source/
I would like to use it in Visual Studio 2012, especially getting the md5/sha-1 hash of a file, but I can not include / setup the environment with the openssl library. To be honest I got confused what to include, and where, however I have read the README-s.
I'm getting this error.
Error   1   error LNK2019: unresolved external symbol _MD5_Init referenced in function _main

So my question is, I have downloaded the latest release (openssl-1.0.1e.tar.gz), what should I config in VS2012 to be able to use the lib? Thanks!
UPDATE
This question helped me also in finding the solution. Boost SSL with Visual Studio 2010 and OpenSSL
The steps required to use the openSSL lib with VS2012:

download and install a version (I have 64bit OS, however I installed 32bit openssl) from http://slproweb.com/products/Win32OpenSSL.html. 
New project in VS, then Configuration Properties/C/C++/General/Additional Include Directories: openssl include folder (C:\OpenSSL-Win32\include)
Linker/General/Additional Library Directiories: C:\OpenSSL-Win32\lib
Linker/Input/Additional Dependencies :


libeay32.lib libeay32MTd.lib libeay32MT.lib libeay32MDd.lib
  libeay32MD.lib ssleay32.lib ssleay32MTd.lib ssleay32MT.lib
  ssleay32MDd.lib ssleay32MD.lib

(It was written that I need to only add that one which matches with C/C++/Code Generation/Runtime Library, but It works me this way.)

Copy theese files into current VS folder /VC/lib

","What compiler did you use to compile OpenSSL? Did you use MinGW? If so, make sure you don't strip them (or just with --strip-unneeded) otherwise import symbols will be stripped. Do the header and lib version match?
Maybe you want to try pre built ones from: http://slproweb.com/products/Win32OpenSSL.html those work for sure.
","24555","<c++><visual-studio-2012><openssl><md5><sha>","6","5","1","2013-06-17 20:14:12","17128932","1","1","-1","","2017-05-23 12:01:58","2013-06-15 20:58:11",""
"9062742","crypt(3) $6$ password hash algorithm (based on SHA-512) in Java?","I'm looking for a Java function to generate/verify password hashes that were encoded in the way crypt(3) does when storing them in the Linux ""/etc/shadow"" file if sha512 is activated in ""/etc/pam.d/common-password"".
The plaintext string ""geheim"" will translate to:
""$6$WoC532HB$LagBJ00vAGNGu8p9oeYDOSNZo9vTNTzOgPA.K0bJoiXfbcpj3jBuTkNwdzCrSNadRi8LanH1tH6tGGPPp/Lp3.""

From http://www.akkadia.org/drepper/SHA-crypt.txt I understand that, like with MD5, it's not just a SHA hash like DigestUtils or the Java MessageDigest classes produce but an algorithm that does a bit more magic.
","The othe question you refer to only provides links to the traditional crypt(3) method based on DES and the ""$1$"" method based on MD5. I need to check passwords that use the ""$5$"" method that is based on SHA-1 or even the ""$6$"" method that is based on SHA-512.
Based here means that crypt(3) uses e.g. SHA-512 but adds a salt value and does several iterations as described on http://www.akkadia.org/drepper/SHA-crypt.txt
","23303","<java><shadow><sha><crypt><sha512>","7","0","3","2016-03-07 13:33:42","9194512","1","4","128421","","2012-09-21 01:35:19","2012-01-30 10:54:36",""
"9062742","crypt(3) $6$ password hash algorithm (based on SHA-512) in Java?","I'm looking for a Java function to generate/verify password hashes that were encoded in the way crypt(3) does when storing them in the Linux ""/etc/shadow"" file if sha512 is activated in ""/etc/pam.d/common-password"".
The plaintext string ""geheim"" will translate to:
""$6$WoC532HB$LagBJ00vAGNGu8p9oeYDOSNZo9vTNTzOgPA.K0bJoiXfbcpj3jBuTkNwdzCrSNadRi8LanH1tH6tGGPPp/Lp3.""

From http://www.akkadia.org/drepper/SHA-crypt.txt I understand that, like with MD5, it's not just a SHA hash like DigestUtils or the Java MessageDigest classes produce but an algorithm that does a bit more magic.
","I found Java implementations for all the new crypt() algorithms here: ftp://ftp.arlut.utexas.edu/java_hashes/
","23303","<java><shadow><sha><crypt><sha512>","7","5","3","2016-03-07 13:33:42","9194512","1","4","128421","","2012-09-21 01:35:19","2012-01-30 10:54:36",""
"9062742","crypt(3) $6$ password hash algorithm (based on SHA-512) in Java?","I'm looking for a Java function to generate/verify password hashes that were encoded in the way crypt(3) does when storing them in the Linux ""/etc/shadow"" file if sha512 is activated in ""/etc/pam.d/common-password"".
The plaintext string ""geheim"" will translate to:
""$6$WoC532HB$LagBJ00vAGNGu8p9oeYDOSNZo9vTNTzOgPA.K0bJoiXfbcpj3jBuTkNwdzCrSNadRi8LanH1tH6tGGPPp/Lp3.""

From http://www.akkadia.org/drepper/SHA-crypt.txt I understand that, like with MD5, it's not just a SHA hash like DigestUtils or the Java MessageDigest classes produce but an algorithm that does a bit more magic.
","Take a look on Apache Commons Codec Digest
Also jBCrypt you may find useful.
In this article Modular Crypt Format or, a side note about a standard that isn’t a lot of details of Crypt3 format.
","23303","<java><shadow><sha><crypt><sha512>","7","1","3","2016-03-07 13:33:42","9194512","1","4","128421","","2012-09-21 01:35:19","2012-01-30 10:54:36",""
"14918020","SHA-512 not supported by Java?","try {
        MessageDigest digest = MessageDigest.getInstance(""SHA-512"");
        byte[] output = digest.digest(password);

        digest.update(salt);
        digest.update(output);
        return new BigInteger(1, digest.digest());
    } catch (NoSuchAlgorithmException e) {
        throw new UnsupportedOperationException(e);
    }

But I got Exception in thread ""main"" java.security.NoSuchAlgorithmException: SHA_512 MessageDigest not available error 
","
The MessageDigest class is an engine class designed to provide the
  functionality of cryptographically secure message digests such as
  SHA-1 or MD5. A cryptographically secure message digest takes
  arbitrary-sized input (a byte array), and generates a fixed-size
  output.

Reference
To print all the MessageDigest  provider -
Provider provider[] = Security.getProviders();
for (Provider pro : provider) {
    System.out.println(pro);
    for (Enumeration e = pro.keys(); e.hasMoreElements();)
        System.out.println(""\t"" + e.nextElement());

}

And fortunatly SHA-512 is there but SHA_512 is not. :)
","21075","<java><hash><sha>","4","2","5","2017-10-11 11:11:25","14918095","3","4","92493","","2015-05-28 13:30:48","2013-02-17 04:36:43",""
"14918020","SHA-512 not supported by Java?","try {
        MessageDigest digest = MessageDigest.getInstance(""SHA-512"");
        byte[] output = digest.digest(password);

        digest.update(salt);
        digest.update(output);
        return new BigInteger(1, digest.digest());
    } catch (NoSuchAlgorithmException e) {
        throw new UnsupportedOperationException(e);
    }

But I got Exception in thread ""main"" java.security.NoSuchAlgorithmException: SHA_512 MessageDigest not available error 
","The following are the standard hashing algorithms provided by the Java MessageDigest:

MD2
MD5
SHA-1
SHA-256 
SHA-384
SHA-512

You may want to verify the name you are supplying to the factory method.
","21075","<java><hash><sha>","4","15","5","2017-10-11 11:11:25","14918095","3","4","92493","","2015-05-28 13:30:48","2013-02-17 04:36:43",""
"14918020","SHA-512 not supported by Java?","try {
        MessageDigest digest = MessageDigest.getInstance(""SHA-512"");
        byte[] output = digest.digest(password);

        digest.update(salt);
        digest.update(output);
        return new BigInteger(1, digest.digest());
    } catch (NoSuchAlgorithmException e) {
        throw new UnsupportedOperationException(e);
    }

But I got Exception in thread ""main"" java.security.NoSuchAlgorithmException: SHA_512 MessageDigest not available error 
","I would say that the most likely explanation is that your REAL code has ""SHA_512"" rather than ""SHA-512"".  Certainly, that would explain why there is an underscore in the exception message.
The other possibility is that you have a JVM with the ""military strength"" crypto algorithms removed because of US export restrictions.  However, I think that is pretty unlikely ...
(And in fact, my reading of this is that SHA-512 was included in all versions of the default ""Sun"" provider anyway.)
","21075","<java><hash><sha>","4","11","5","2017-10-11 11:11:25","14918095","3","4","92493","","2015-05-28 13:30:48","2013-02-17 04:36:43",""
"14918020","SHA-512 not supported by Java?","try {
        MessageDigest digest = MessageDigest.getInstance(""SHA-512"");
        byte[] output = digest.digest(password);

        digest.update(salt);
        digest.update(output);
        return new BigInteger(1, digest.digest());
    } catch (NoSuchAlgorithmException e) {
        throw new UnsupportedOperationException(e);
    }

But I got Exception in thread ""main"" java.security.NoSuchAlgorithmException: SHA_512 MessageDigest not available error 
","Here is the sample method which can be used to get hash string through SHA-512: 
private static String getHashCodeFromString(String algorithm, String str) throws NoSuchAlgorithmException {
    MessageDigest md = MessageDigest.getInstance(algorithm);
    md.update(str.getBytes());
    byte byteData[] = md.digest();

    //convert the byte to hex format method 1
    StringBuffer hashCodeBuffer = new StringBuffer();
    for (int i = 0; i < byteData.length; i++) {
        hashCodeBuffer.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));
    }
    return hashCodeBuffer.toString();
}

use SHA-512 as algorithm. go to following link for other possible algorithm name you can pass in method. https://docs.oracle.com/javase/7/docs/technotes/guides/security/StandardNames.html#MessageDigest
","21075","<java><hash><sha>","4","7","5","2017-10-11 11:11:25","14918095","3","4","92493","","2015-05-28 13:30:48","2013-02-17 04:36:43",""
"14918020","SHA-512 not supported by Java?","try {
        MessageDigest digest = MessageDigest.getInstance(""SHA-512"");
        byte[] output = digest.digest(password);

        digest.update(salt);
        digest.update(output);
        return new BigInteger(1, digest.digest());
    } catch (NoSuchAlgorithmException e) {
        throw new UnsupportedOperationException(e);
    }

But I got Exception in thread ""main"" java.security.NoSuchAlgorithmException: SHA_512 MessageDigest not available error 
","In Groovy language you can use below method to generate hash string through SHA-512.
It's completely working for me. 
public String getHashCodeFromString(String algorithm, String str) throws NoSuchAlgorithmException{
      MessageDigest md = MessageDigest.getInstance(algorithm);
      md.update(str.getBytes());
      def byteData = md.digest() as byte[];

      //convert the byte to hex format method 1
      StringBuffer hashCodeBuffer = new StringBuffer();
      for (int i = 0; i < byteData.length; i++) {
        hashCodeBuffer.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));
      }
      return hashCodeBuffer.toString();
    }

","21075","<java><hash><sha>","4","1","5","2017-10-11 11:11:25","14918095","3","4","92493","","2015-05-28 13:30:48","2013-02-17 04:36:43",""
"18653294","How to correctly encode password using ShaPasswordEncoder?","I want to encode a password using ShaPasswordEncoder in my Spring app.
ShaPasswordEncoder sha = new ShaPasswordEncoder(256);
sha.setIterations(1000);
String hash = sha.encodePassword(password, salt);

But I don't what I should put to salt param. Can it be a static phrase (e.g. sT4t1cPhr453), or dynamic string different for every user (e.g. username or user ID)?
Edit:
I user custom AuthenticationProvider, so my security context looks like:
<authentication-manager>
   <authentication-provider ref=""customAuthenticationProvider"" />
</authentication-manager>

<beans:bean id=""customAuthenticationProvider"" class=""com.app.cloud.auth.CustomAuthenticationProvider"">

@Component(""customAuthenticationProvider"")
public class CustomAuthenticationProvider implements org.springframework.security.authentication.AuthenticationProvider {

    @Autowired
    private AuthService authService;

    @Override
    public Authentication authenticate(Authentication authentication)
            throws AuthenticationException,BadCredentialsException {
    //...
    }

    @Override
    public boolean supports(Class<?> authentication) {
        return authentication.equals(UsernamePasswordAuthenticationToken.class);
    }
}

","In case you want to explicitly define the salt you can define the salt source:
Dynamic salt (based on the username property)
<authentication-manager alias=""authenticationManager"">
    <authentication-provider user-service-ref=""userDetailsService"">
        <password-encoder hash=""sha-256"">
            <salt-source user-property=""username""/>
        </password-encoder>
    </authentication-provider>
</authentication-manager>

Static salt
<authentication-manager alias=""authenticationManager"">
    <authentication-provider user-service-ref=""userDetailsService"">
        <password-encoder hash=""sha-256"">
            <salt-source system-wide=""MySalt"" />
        </password-encoder>
    </authentication-provider>
</authentication-manager>

Recommended approach
If you are using Spring Security 3.1, the recommended approach would be to go for bcrypt, this automatically generates a salt and concatenates it.
<beans:bean id='bCryptPasswordEncoder' class='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'/>

<authentication-manager>
  <authentication-provider user-service-ref=""userDetailsService"">
          <password-encoder ref=""bCryptPasswordEncoder""/>
  </authentication-provider>
</authentication-manager>

You can generate the user password like this:
String password = ""p4ssword"";
PasswordEncoder passwordEncoder = new BCryptPasswordEncoder();
String encodedPassword = passwordEncoder.encode(password);

","20821","<java><spring><hash><spring-security><sha>","5","12","2","2013-09-06 09:43:18","18654159","5","4","389294","","2013-09-06 09:43:18","2013-09-06 08:30:33",""
"18653294","How to correctly encode password using ShaPasswordEncoder?","I want to encode a password using ShaPasswordEncoder in my Spring app.
ShaPasswordEncoder sha = new ShaPasswordEncoder(256);
sha.setIterations(1000);
String hash = sha.encodePassword(password, salt);

But I don't what I should put to salt param. Can it be a static phrase (e.g. sT4t1cPhr453), or dynamic string different for every user (e.g. username or user ID)?
Edit:
I user custom AuthenticationProvider, so my security context looks like:
<authentication-manager>
   <authentication-provider ref=""customAuthenticationProvider"" />
</authentication-manager>

<beans:bean id=""customAuthenticationProvider"" class=""com.app.cloud.auth.CustomAuthenticationProvider"">

@Component(""customAuthenticationProvider"")
public class CustomAuthenticationProvider implements org.springframework.security.authentication.AuthenticationProvider {

    @Autowired
    private AuthService authService;

    @Override
    public Authentication authenticate(Authentication authentication)
            throws AuthenticationException,BadCredentialsException {
    //...
    }

    @Override
    public boolean supports(Class<?> authentication) {
        return authentication.equals(UsernamePasswordAuthenticationToken.class);
    }
}

","The principle behind salting hashes is that you are not vulnerable to rainbow tables. If you use static salt then its possible (but expensive) for someone to build a rainbow table for your salt. If the pickings are sweet, someone will do it.
Ideally your salt should be random (eg use bytes from a SecureRandom) and should be different for each user. You should store the salt alongside the hashed password, eg if you are using a database table then simply have a salt column.
The latest versions of Spring Security (3.1 and later) try to handle salt in an automatic, transparent manner. The password encoder will automatically generate random salt and append it to the hash instead of storing it separately (eg in different columns). Because hashes and the salt have a fixed length it is easy to determine which part of the data is which.
","20821","<java><spring><hash><spring-security><sha>","5","2","2","2013-09-06 09:43:18","18654159","5","4","389294","","2013-09-06 09:43:18","2013-09-06 08:30:33",""
"14676715","cherry-pick a commit and keep original SHA code","I would like to cherry-pick a commit on a fetched remote while keeping it's original SHA commit code (my current branch is based on this remote which I resetted to a previous state).
","The SHA commit hash is made of from the state of the repository, using the whole history up to the point of the commit (branches not included). This means that you cannot keep the original hash on cherry-picking unless the whole history is the same, and in that case cherry-picking would make no sense.
","19794","<git><commit><sha><cherry-pick>","47","15","4","2019-10-10 02:15:05","14676852","2","6","41071","","2013-02-03 20:20:40","2013-02-03 20:04:42",""
"14676715","cherry-pick a commit and keep original SHA code","I would like to cherry-pick a commit on a fetched remote while keeping it's original SHA commit code (my current branch is based on this remote which I resetted to a previous state).
","A git SHA hash is computed from different pieces of information:

The tree it refers to; basically, the current content of the repository in the branch in which the commit appears.
The SHA of the parent commit(s).
The commit message.
The author information: name, email and timestamp.
The committer information: name, email and timestamp.

Even if you edit a cherry-picked commit so that the tree, the commit message, the author and committer information are exactly the same, the SHA of the parent commit (or commits, if dealing with merge commits) will be always different. So, you will not be able to generate the same SHA hash after a cherry-pick (unless you find a SHA collision ;) ).
","19794","<git><commit><sha><cherry-pick>","47","65","4","2019-10-10 02:15:05","14676852","2","6","41071","","2013-02-03 20:20:40","2013-02-03 20:04:42",""
"14676715","cherry-pick a commit and keep original SHA code","I would like to cherry-pick a commit on a fetched remote while keeping it's original SHA commit code (my current branch is based on this remote which I resetted to a previous state).
","According to your comments to other answers I think you simply want to reset to some remote commit. You can use git reset --hard <SHA> to do this. WARNING: This will discard all of your (uncommitted) changes in the working directory and all commits you did in this branch will no longer be accessible.
If this is not what you want (or you are not sure) please describe more clearly what you did and what you want to do or what you are trying to accomplish.
","19794","<git><commit><sha><cherry-pick>","47","4","4","2019-10-10 02:15:05","14676852","2","6","41071","","2013-02-03 20:20:40","2013-02-03 20:04:42",""
"14676715","cherry-pick a commit and keep original SHA code","I would like to cherry-pick a commit on a fetched remote while keeping it's original SHA commit code (my current branch is based on this remote which I resetted to a previous state).
","Go into interactive rebase (""git rebase -i"") and paste a new entry at the end with the exact revision you want to prepend to your HEAD.
Example:
Open an interactive rebase session:
$ git rebase -i HEAD~4

The screen now shows [something like] this:
pick efdd0ece Linked how to make a pull requests in README
pick 790a3be8 adjust pytest pins to fix testing infra
pick 5bb90d8f drop 3.4 support
pick 839dc8ba v2.22.0
pick b97fb61a Print the type of the password instead of the password itself

Your current HEAD is the last entry. Add a new entry to the bottom (just ""pick"" and your revision; no description necessary) with the exact revision that you want to prepend:
pick efdd0ece Linked how to make a pull requests in README
pick 790a3be8 adjust pytest pins to fix testing infra
pick 5bb90d8f drop 3.4 support
pick 839dc8ba v2.22.0
pick b97fb61a Print the type of the password instead of the password itself
pick 2a173c2a6491aae0772640ba7946a08315d18eb8

Save and close. That exact revision will now be your HEAD:
$ git log --oneline | head -n 6
2a173c2a Some commit
b97fb61a Print the type of the password instead of the password itself
839dc8ba v2.22.0
5bb90d8f drop 3.4 support
790a3be8 adjust pytest pins to fix testing infra
efdd0ece Linked how to make a pull requests in README

As mentioned in other answers, you still have to follow the rules. This works in only the very narrow case where you have the exact same branch, parents, and committer (such as with a code-review-centric process where you have a bunch of commits queued up somewhere, where the developers can push them up and bring them down without necessarily submitting them into the repository first); really only when the timestamps are the only thing that might have changed. In this case, you can force the identical revision in order to force the timestamps to be unchanged. 
In most other cases, the parent will usually be different, and, this alone, means that your dream of forcing a certain revision will be dead. Git will always fix-up the revision to be correct if any of the non-timestamp factors are different.
","19794","<git><commit><sha><cherry-pick>","47","0","4","2019-10-10 02:15:05","14676852","2","6","41071","","2013-02-03 20:20:40","2013-02-03 20:04:42",""
"30589219","Suppress Firefox/Firebug SHA-1 warning","I use Firebug for web development. Since version Firefox 37 I see the following annoying message in my console:

This site makes use of a SHA-1 Certificate; it's recommended you use certificates with signature algorithms that use hash functions stronger than SHA-1""

I understand that it is an important message, but it is duplicated many times and makes my work almost impossible.
Moreover, it appears every time my page communicates with other pages, for example with Google Analytics and other counters. So if I were to update my certificate, this message would still appear because these sites would have SHA-1.
So any site with GA gives me trouble.
How can I disable or filter this message?
","As stated in the Firebug discussion group, Firebug's Console panel currently (Firebug 2.x) cannot filter single messages out. You can only filter by messages matching a specific text using the search field.
There are enhancement requests like issue #4507 reported to add such a filter, though it is unlikely that this will get implemented in Firebug, especially not in version 2.x, directly.
Firebug 3 will integrate into the built-in DevTools, which allow you to filter those warnings by unchecking Warnings within the Security menu inside the Console panel:

Besides that I created bug 1170476 asking to reduce the messages to a minimum.
Update:
Firebug development is discontinued. Instead, there is a Firebug theme available within the Firefox DevTools starting from Firefox 48. Bug 1170476 is fixed since Firefox 42, so you will only see one message logged with a counter showing how often the message occurred.
","18811","<firefox><firebug><sha>","47","29","4","2017-04-06 12:32:18","31494521","0","6","432681","","2015-06-02 08:59:46","2015-06-02 06:48:12",""
"30589219","Suppress Firefox/Firebug SHA-1 warning","I use Firebug for web development. Since version Firefox 37 I see the following annoying message in my console:

This site makes use of a SHA-1 Certificate; it's recommended you use certificates with signature algorithms that use hash functions stronger than SHA-1""

I understand that it is an important message, but it is duplicated many times and makes my work almost impossible.
Moreover, it appears every time my page communicates with other pages, for example with Google Analytics and other counters. So if I were to update my certificate, this message would still appear because these sites would have SHA-1.
So any site with GA gives me trouble.
How can I disable or filter this message?
","you can get rid of the message, but you have to modify firebugs code.
Sorry forgot to mention you need to convert the .xpi to .zip and extract the files first. You can leave the folder as is when done or zip it and convert it to an xpi again. You will need to restart Firefox. 

locate the pluggin in your firefox profile dirctor and go to this file ""\extensions\firebug@software.joehewitt.com\content\firebug\console\errors.js"".
search for ""logScriptError: function(context, object, isWarning)"".
After the code ""var error = new ErrorMessageObj(object.errorMessage, object.sourceName, object.lineNumber, object.sourceLine, category, context, null);"".

input the following code:
if(error.message.indexOf('SHA-1') != -1 || error.message.indexOf('Security Policy') != -1){
            return false;
        }

should be about line 330.
","18811","<firefox><firebug><sha>","47","23","4","2017-04-06 12:32:18","31494521","0","6","432681","","2015-06-02 08:59:46","2015-06-02 06:48:12",""
"30589219","Suppress Firefox/Firebug SHA-1 warning","I use Firebug for web development. Since version Firefox 37 I see the following annoying message in my console:

This site makes use of a SHA-1 Certificate; it's recommended you use certificates with signature algorithms that use hash functions stronger than SHA-1""

I understand that it is an important message, but it is duplicated many times and makes my work almost impossible.
Moreover, it appears every time my page communicates with other pages, for example with Google Analytics and other counters. So if I were to update my certificate, this message would still appear because these sites would have SHA-1.
So any site with GA gives me trouble.
How can I disable or filter this message?
","Select the Console tab and, keeping pressed Ctrl on the keyboard, click on Errors, Info, Debug Info, Cookies.
Bear in mind that this will disable the output of all the warnings logged in Firebug and not only the ones generated by googleapis.
","18811","<firefox><firebug><sha>","47","6","4","2017-04-06 12:32:18","31494521","0","6","432681","","2015-06-02 08:59:46","2015-06-02 06:48:12",""
"30589219","Suppress Firefox/Firebug SHA-1 warning","I use Firebug for web development. Since version Firefox 37 I see the following annoying message in my console:

This site makes use of a SHA-1 Certificate; it's recommended you use certificates with signature algorithms that use hash functions stronger than SHA-1""

I understand that it is an important message, but it is duplicated many times and makes my work almost impossible.
Moreover, it appears every time my page communicates with other pages, for example with Google Analytics and other counters. So if I were to update my certificate, this message would still appear because these sites would have SHA-1.
So any site with GA gives me trouble.
How can I disable or filter this message?
","Remove HTTPS from the URL or keep all resources local. 
","18811","<firefox><firebug><sha>","47","-1","4","2017-04-06 12:32:18","31494521","0","6","432681","","2015-06-02 08:59:46","2015-06-02 06:48:12",""
"1381448","How do I convert password hashing from MD5 to SHA?","I've got an old application that has user passwords stored in the database with an MD5 hash. I'd like to replace this with something in the SHA-2 family.
I've thought of two possible ways to accomplish this, but both seem rather clunky.
1) Add a boolean ""flag"" field. The first time the user authenticates after this, replace the MD5 password hash with the SHA password hash, and set the flag. I can then check the flag to see whether the password hash has been converted.
2) Add a second password field to store the SHA hash. The first time the user authenticates after this, hash the password with SHA and store it in the new field (probably delete their MD5 hash at the same time). Then I can check whether the SHA field has a value; this essentially becomes my flag.
In either case, the MD5 authentication would have to remain in place for some time for any users who log in infrequently. And any users who are no longer active will never be switched to SHA.
Is there a better way to do this?
","I think you've already got the best possibilities.  I like #1 more than #2, since there's no use for the md5 once the sha is set.
There's no way to reverse the MD5, so you have to wait for the user to authenticate again to create a new hash.
","18469","<passwords><md5><hash><sha>","15","3","7","2010-10-19 12:32:31","1381485","5","6","311","","2009-09-10 04:42:05","2009-09-04 20:42:34",""
"1381448","How do I convert password hashing from MD5 to SHA?","I've got an old application that has user passwords stored in the database with an MD5 hash. I'd like to replace this with something in the SHA-2 family.
I've thought of two possible ways to accomplish this, but both seem rather clunky.
1) Add a boolean ""flag"" field. The first time the user authenticates after this, replace the MD5 password hash with the SHA password hash, and set the flag. I can then check the flag to see whether the password hash has been converted.
2) Add a second password field to store the SHA hash. The first time the user authenticates after this, hash the password with SHA and store it in the new field (probably delete their MD5 hash at the same time). Then I can check whether the SHA field has a value; this essentially becomes my flag.
In either case, the MD5 authentication would have to remain in place for some time for any users who log in infrequently. And any users who are no longer active will never be switched to SHA.
Is there a better way to do this?
","Your second suggestion sounds the best to me. That way frequent users will have a more secure experience in the future.
The first effectively ""quirks-mode""'s your codebase and only makes sure that new users have the better SHA experience.
","18469","<passwords><md5><hash><sha>","15","0","7","2010-10-19 12:32:31","1381485","5","6","311","","2009-09-10 04:42:05","2009-09-04 20:42:34",""
"1381448","How do I convert password hashing from MD5 to SHA?","I've got an old application that has user passwords stored in the database with an MD5 hash. I'd like to replace this with something in the SHA-2 family.
I've thought of two possible ways to accomplish this, but both seem rather clunky.
1) Add a boolean ""flag"" field. The first time the user authenticates after this, replace the MD5 password hash with the SHA password hash, and set the flag. I can then check the flag to see whether the password hash has been converted.
2) Add a second password field to store the SHA hash. The first time the user authenticates after this, hash the password with SHA and store it in the new field (probably delete their MD5 hash at the same time). Then I can check whether the SHA field has a value; this essentially becomes my flag.
In either case, the MD5 authentication would have to remain in place for some time for any users who log in infrequently. And any users who are no longer active will never be switched to SHA.
Is there a better way to do this?
","No - basically you'll have to keep the MD5 in place until all the users you care about have been converted. That's just the nature of hashing - you don't have enough information to perform the conversion again.
Another option in-keeping with the others would be to make the password field effectively self-describing, e.g.
MD5:(md5 hash)
SHA:(sha hash)

You could then easily detect which algorithm to use for comparison, and avoid having two fields. Again, you'd overwrite the MD5 with SHA as you went along.
You'd want to do an initial update to make all current passwords declare themselves as MD5.
","18469","<passwords><md5><hash><sha>","15","2","7","2010-10-19 12:32:31","1381485","5","6","311","","2009-09-10 04:42:05","2009-09-04 20:42:34",""
"1381448","How do I convert password hashing from MD5 to SHA?","I've got an old application that has user passwords stored in the database with an MD5 hash. I'd like to replace this with something in the SHA-2 family.
I've thought of two possible ways to accomplish this, but both seem rather clunky.
1) Add a boolean ""flag"" field. The first time the user authenticates after this, replace the MD5 password hash with the SHA password hash, and set the flag. I can then check the flag to see whether the password hash has been converted.
2) Add a second password field to store the SHA hash. The first time the user authenticates after this, hash the password with SHA and store it in the new field (probably delete their MD5 hash at the same time). Then I can check whether the SHA field has a value; this essentially becomes my flag.
In either case, the MD5 authentication would have to remain in place for some time for any users who log in infrequently. And any users who are no longer active will never be switched to SHA.
Is there a better way to do this?
","If the MD5's aren't salted you can always use a decryption site/rainbow tables such as: http://passcracking.com/index.php to get the passwords.  Probably easier to just use the re-encode method though.
","18469","<passwords><md5><hash><sha>","15","-1","7","2010-10-19 12:32:31","1381485","5","6","311","","2009-09-10 04:42:05","2009-09-04 20:42:34",""
"1381448","How do I convert password hashing from MD5 to SHA?","I've got an old application that has user passwords stored in the database with an MD5 hash. I'd like to replace this with something in the SHA-2 family.
I've thought of two possible ways to accomplish this, but both seem rather clunky.
1) Add a boolean ""flag"" field. The first time the user authenticates after this, replace the MD5 password hash with the SHA password hash, and set the flag. I can then check the flag to see whether the password hash has been converted.
2) Add a second password field to store the SHA hash. The first time the user authenticates after this, hash the password with SHA and store it in the new field (probably delete their MD5 hash at the same time). Then I can check whether the SHA field has a value; this essentially becomes my flag.
In either case, the MD5 authentication would have to remain in place for some time for any users who log in infrequently. And any users who are no longer active will never be switched to SHA.
Is there a better way to do this?
","Essentially the same, but maybe more elegant than adding extra fields: In the default authentication framwork in Django, the password hashes are stored as strings constructed like this:
hashtype$salt$hash

Hashtype is either sha1 or md5, salt is a random string used to salt the raw password and at last comes the hash itself. Example value:
sha1$a1976$a36cc8cbf81742a8fb52e221aaeab48ed7f58ab4

","18469","<passwords><md5><hash><sha>","15","11","7","2010-10-19 12:32:31","1381485","5","6","311","","2009-09-10 04:42:05","2009-09-04 20:42:34",""
"1381448","How do I convert password hashing from MD5 to SHA?","I've got an old application that has user passwords stored in the database with an MD5 hash. I'd like to replace this with something in the SHA-2 family.
I've thought of two possible ways to accomplish this, but both seem rather clunky.
1) Add a boolean ""flag"" field. The first time the user authenticates after this, replace the MD5 password hash with the SHA password hash, and set the flag. I can then check the flag to see whether the password hash has been converted.
2) Add a second password field to store the SHA hash. The first time the user authenticates after this, hash the password with SHA and store it in the new field (probably delete their MD5 hash at the same time). Then I can check whether the SHA field has a value; this essentially becomes my flag.
In either case, the MD5 authentication would have to remain in place for some time for any users who log in infrequently. And any users who are no longer active will never be switched to SHA.
Is there a better way to do this?
","You can convert all your MD5 Strings to SHA1 by rehashing them in your DB if you create your future passwords by first MD5ing them. Checking the passwords requires MD5ing them first also, but i dont think thats a big hit.
php-code (login):
prev:
$login = (md5($password) == $storedMd5PasswordHash);
after:
$login = (sha1(md5($password)) == $storedSha1PasswordHash);
Works also with salting, got the initial idea from here.
","18469","<passwords><md5><hash><sha>","15","6","7","2010-10-19 12:32:31","1381485","5","6","311","","2009-09-10 04:42:05","2009-09-04 20:42:34",""
"1381448","How do I convert password hashing from MD5 to SHA?","I've got an old application that has user passwords stored in the database with an MD5 hash. I'd like to replace this with something in the SHA-2 family.
I've thought of two possible ways to accomplish this, but both seem rather clunky.
1) Add a boolean ""flag"" field. The first time the user authenticates after this, replace the MD5 password hash with the SHA password hash, and set the flag. I can then check the flag to see whether the password hash has been converted.
2) Add a second password field to store the SHA hash. The first time the user authenticates after this, hash the password with SHA and store it in the new field (probably delete their MD5 hash at the same time). Then I can check whether the SHA field has a value; this essentially becomes my flag.
In either case, the MD5 authentication would have to remain in place for some time for any users who log in infrequently. And any users who are no longer active will never be switched to SHA.
Is there a better way to do this?
","Yes you should know the real password first before you convert it into sha-1..
If you want to find the real password from md5 encrypted string, you can try md5pass.com
","18469","<passwords><md5><hash><sha>","15","-4","7","2010-10-19 12:32:31","1381485","5","6","311","","2009-09-10 04:42:05","2009-09-04 20:42:34",""
"9444215","How To Generate SHA256 and CRC32 in ios","I am doing a file uploading job. I want to generate SHA256 and CRC32 hashes. Can anyone help me how shall I generate those hash? I want to get it working for iOS.
","there are no apps which can generate Hash for ios
This should work....its for Mac
http://itunes.apple.com/us/app/digiprint/id473233587?mt=12
","18155","<iphone><ios><sha>","8","-5","4","2017-08-28 02:42:54","9444306","2","6","1075341","","2017-08-28 02:42:54","2012-02-25 12:59:16",""
"9444215","How To Generate SHA256 and CRC32 in ios","I am doing a file uploading job. I want to generate SHA256 and CRC32 hashes. Can anyone help me how shall I generate those hash? I want to get it working for iOS.
","SHA256 is available in CommonCrypto. CRC32 is not a hash, it a Cyclic Redundancy Check.
Example code:
#import <CommonCrypto/CommonDigest.h>

NSData *dataIn = [@""Now is the time for all good computers to come to the aid of their masters."" dataUsingEncoding:NSASCIIStringEncoding];
NSMutableData *macOut = [NSMutableData dataWithLength:CC_SHA256_DIGEST_LENGTH];

CC_SHA256(dataIn.bytes, dataIn.length,  macOut.mutableBytes);

NSLog(@""dataIn: %@"", dataIn);
NSLog(@""macOut: %@"", macOut);

NSLog output:
dataIn: <4e6f7720 69732074 68652074 696d6520 666f7220 616c6c20 676f6f64 20636f6d 70757465 72732074 6f20636f 6d652074 6f207468 65206169 64206f66 20746865 6972206d 61737465 72732e>
macOut: <53f89cf6 7ebfbe56 89f1f76a 3843dfd1 09d68c5b a938dcd2 9a12004e 108260cb>
","18155","<iphone><ios><sha>","8","33","4","2017-08-28 02:42:54","9444306","2","6","1075341","","2017-08-28 02:42:54","2012-02-25 12:59:16",""
"9444215","How To Generate SHA256 and CRC32 in ios","I am doing a file uploading job. I want to generate SHA256 and CRC32 hashes. Can anyone help me how shall I generate those hash? I want to get it working for iOS.
","For both of these, you can use this gist:
https://gist.github.com/paul-delange/6808278
And an example
NSString* crc32 = (__bridge NSString*)TGDFileHashCreateWithPath((__bridge CFStringRef)filepath, TGDFileHashDefaultChunkSizeForReadingData, TGDChecksumAlgorithmCRC32);

","18155","<iphone><ios><sha>","8","2","4","2017-08-28 02:42:54","9444306","2","6","1075341","","2017-08-28 02:42:54","2012-02-25 12:59:16",""
"9444215","How To Generate SHA256 and CRC32 in ios","I am doing a file uploading job. I want to generate SHA256 and CRC32 hashes. Can anyone help me how shall I generate those hash? I want to get it working for iOS.
","This method will generate crc32c as used by gcloud on iOS from a filepath. If you want the standard crc32 just uncomment the other value for CRC32_POLYNOMIAL.
It reads the file given in 512KB chunks so can be used on large files.
- (NSString*) crc32c:(NSString*)filepath{

    ///  using crc code from
    //   http://classroomm.com/objective-c/index.php?action=printpage;topic=2891.0
    //   by rgronlie


    //this is the standard crc32 polynomial
    //uint32_t CRC32_POLYNOMIAL = 0xEDB88320;

    //this is the crc32c one
    uint32_t CRC32_POLYNOMIAL = 0x82F63B78L;
    uint32_t  CRC32C_SEED = 0xFFFFFFFFL;

    // create and populate a lookup table
    uint32_t* pCRCTable = malloc(sizeof(uint32_t) * 256);

    for (uint32_t i = 0; i <= 255; i++)
    {
        uint32_t crc32 = i;
        for (uint32_t j = 8; j > 0; j--)
        {
            if ((crc32 & 1) == 1)
                crc32 = (crc32 >> 1) ^ CRC32_POLYNOMIAL;
            else
                crc32 >>= 1;
        }
        pCRCTable[i] = crc32;
    }

    // get a handle to the file
    NSFileHandle *filehandle = [NSFileHandle fileHandleForReadingAtPath:filepath];

    if(filehandle == NULL){
        NSLog(@""failed to create file handle"");
        return nil;
    }

    // a buffer to read into
    NSData* databuffer;

    uint32_t crc = CRC32C_SEED;

    // read the file in chunks of 512KB

    while(true){
        databuffer = [filehandle readDataOfLength: 512 * 1024];

        // if there is nothing left finish
        if([databuffer length] == 0){
            break;
        }
        // otherwise run each chunk through the lookup table
        uint8_t *pBytes = (uint8_t *)[databuffer bytes];
        uint32_t length = [databuffer length];

        while (length--)
        {
            crc = (crc>>8) ^ pCRCTable[(crc & 0xFF) ^ *pBytes++];
        }
    }

    // clean up
    [filehandle closeFile];
    free(pCRCTable);

    // this is the result
    uint32_t hash = crc ^ 0xFFFFFFFFL;

    // reverse it for endianness
    uint32_t hash_reversed = CFSwapInt32HostToBig(hash);
    // as raw bytes
    NSData* hash_data = [NSData dataWithBytes: &hash_reversed length: sizeof(hash_reversed)];
    // return base64 encoded
    return [hash_data base64EncodedStringWithOptions:0];
}

","18155","<iphone><ios><sha>","8","1","4","2017-08-28 02:42:54","9444306","2","6","1075341","","2017-08-28 02:42:54","2012-02-25 12:59:16",""
"10859526","HMAC SHA1 Signature in Java","I am trying to interface with a TransUnion web service and I need to provide a HMAC-SHA1 signature to access it.
This example is in the TransUnion documentation:
Input of SampleIntegrationOwner2008‐11‐18T19:14:40.293Z with security
key xBy/2CLudnBJOxOtDhDRnsDYq9HTuDVr2uCs3FMzoxXEA/Od9tOuwSC70+mIfpjeG68ZGm/PrxFf/s/CzwxF4Q==
creates output of /UhwvT/kY9HxiXaOjpIc/BarBkc=.
Given that data and key, I cannot get this same result in Java.  I have tried several online calculators, and none of them return this result either.  Is the example in their documentation incorrect, or am I just not handling these strings correctly?
Here is the code I am currently working with:
public static String calcShaHash (String data, String key) {
    String HMAC_SHA1_ALGORITHM = ""HmacSHA1"";       
    String result = null;

    try {         
        Key signingKey = new SecretKeySpec(key.getBytes(), HMAC_SHA1_ALGORITHM);
        Mac mac = Mac.getInstance(HMAC_SHA1_ALGORITHM);
        mac.init(signingKey);
        byte[] rawHmac = mac.doFinal(data.getBytes());
        result = Base64.encodeBase64String(rawHmac);    
    }
    catch (Exception e) {
        e.printStackTrace(); 
    }       

    return result;
}

Here is my unit test code:
@Test
public void testCalcShaHash() {
    String data = ""SampleIntegrationOwner2008-11-18T19:14:40.293Z"";
    String key = ""xBy/2CLudnBJOxOtDhDRnsDYq9HTuDVr2uCs3FMzoxXEA/Od9tOuwSC70+mIfpjeG68ZGm/PrxFf/s/CzwxF4Q=="";
    String result = Utils.calcShaHash(data, key);
    assertEquals(result, ""/UhwvT/kY9HxiXaOjpIc/BarBkc="");

}

","That looks like a Base64 encoded key.  So I think you're going to need to do a base64 decode on it, then pass it to the HMAC.  Something like this (just for illustration I haven't tested it, any errors are an exercise for the reader):
public String getHmacMD5(String privateKey, String input) throws Exception{
    String algorithm = ""HmacSHA1"";
    byte[] keyBytes = Base64.decode(privateKey);
    Key key = new SecretKeySpec(keyBytes, 0, keyBytes.length, algorithm); 
    Mac mac = Mac.getInstance(algorithm);
    mac.init(key); 
    return Base64.encode(mac.doFinal(input.getBytes()));
}

","16157","<java><sha><hmacsha1>","3","3","2","2013-02-27 13:28:53","10906314","2","1","944911","","2013-02-27 13:28:53","2012-06-02 03:17:53",""
"10859526","HMAC SHA1 Signature in Java","I am trying to interface with a TransUnion web service and I need to provide a HMAC-SHA1 signature to access it.
This example is in the TransUnion documentation:
Input of SampleIntegrationOwner2008‐11‐18T19:14:40.293Z with security
key xBy/2CLudnBJOxOtDhDRnsDYq9HTuDVr2uCs3FMzoxXEA/Od9tOuwSC70+mIfpjeG68ZGm/PrxFf/s/CzwxF4Q==
creates output of /UhwvT/kY9HxiXaOjpIc/BarBkc=.
Given that data and key, I cannot get this same result in Java.  I have tried several online calculators, and none of them return this result either.  Is the example in their documentation incorrect, or am I just not handling these strings correctly?
Here is the code I am currently working with:
public static String calcShaHash (String data, String key) {
    String HMAC_SHA1_ALGORITHM = ""HmacSHA1"";       
    String result = null;

    try {         
        Key signingKey = new SecretKeySpec(key.getBytes(), HMAC_SHA1_ALGORITHM);
        Mac mac = Mac.getInstance(HMAC_SHA1_ALGORITHM);
        mac.init(signingKey);
        byte[] rawHmac = mac.doFinal(data.getBytes());
        result = Base64.encodeBase64String(rawHmac);    
    }
    catch (Exception e) {
        e.printStackTrace(); 
    }       

    return result;
}

Here is my unit test code:
@Test
public void testCalcShaHash() {
    String data = ""SampleIntegrationOwner2008-11-18T19:14:40.293Z"";
    String key = ""xBy/2CLudnBJOxOtDhDRnsDYq9HTuDVr2uCs3FMzoxXEA/Od9tOuwSC70+mIfpjeG68ZGm/PrxFf/s/CzwxF4Q=="";
    String result = Utils.calcShaHash(data, key);
    assertEquals(result, ""/UhwvT/kY9HxiXaOjpIc/BarBkc="");

}

","One thing I noticed is that the hyphens are not normal hyphens. If you copy and paste them, they are not in the ASCII character set. All I can say for sure is that the hash length appears correct. The funny thing is, I couldn't get your code to produce the correct answer, even after putting the correct hyphens in. But no matter. It solved the problem. Huzzah!
","16157","<java><sha><hmacsha1>","3","2","2","2013-02-27 13:28:53","10906314","2","1","944911","","2013-02-27 13:28:53","2012-06-02 03:17:53",""
"34826388","How to resolve this: invalid conversion from 'const char*' to 'const uint8_t*","I installed this SHA library: https://github.com/Cathedrow/Cryptosuite. I want to implement HMAC256 using Arduino IDE 1.6.7 installed on Win. 10 and the controller is ATMEGA328. 
I copied the example given in their webpage. I am still new and want to test and try. I wrote this code in Arduino IDE. 
#include ""sha256.h""

void setup() {
    // put your setup code here, to run once:
    uint8_t *hash;
    //static const char hash[450]={};
    //const char *hash; hash={};
    Sha256.initHmac(""hash key"",8); // key, and length of key in bytes
    Sha256.print(""This is a message to hash"");
    hash = Sha256.resultHmac();
    //Serial.print(hash,HEX);
}

void loop() {
    // put your main code here, to run repeatedly:
}

I got this error:

invalid conversion from 'const char*' to 'const uint8_t* {aka const
  unsigned char*}' [-fpermissive]

I do not know why this happens. The example is primitive taken as is from the library site. Can you help?
EDIT:
I tried to change the line from:
Sha256.initHmac((const uint8_t*)""hash key"",8);

to:
Sha256.initHmac((const uint8_t*)""hash key"",8);

But again, the compilation fails. It says:

Arduino: 1.6.7 (Windows 10), Board: ""Arduino/Genuino Uno""
In file included from C:\Program Files
  (x86)\Arduino\hardware\arduino\avr\cores\arduino/arduino.h:28:0,
             from C:\Users\e\Documents\Arduino\libraries\Sha\sha1_config.h:13,

             from C:\Users\e\Documents\Arduino\libraries\Sha\sha1.h:4,

             from C:\Users\e\Documents\Arduino\libraries\Sha\sha1.cpp:1:

C:\Users\e\Documents\Arduino\libraries\Sha\sha1.cpp:8:25: error:
  variable 'sha1InitState' must be const in order to be put into
  read-only section by means of 'attribute((progmem))'
uint8_t sha1InitState[] PROGMEM = {
                     ^

exit status 1 Error compiling.
This report would have more information with   ""Show verbose output
  during compilation""   enabled in File > Preferences.

","The initHmac function signature is: 
void initHmac(const uint8_t* secret, int secretLength);

But you use const char* for secret. 
Solution
Try to cast the secret variable to const uint8_t* (or const unsigned char*):
Sha256.initHmac((const uint8_t*)""hash key"",8);

UPDATE
To solve your new compilation error, just add const in front of all declarations containing PROGMEM in the library sources. For insance:
In Sha/sha1.cpp (line 11)
const uint8_t sha1InitState[] PROGMEM = {

In Sha/sha256.cpp (line 6)
const uint32_t sha256K[] PROGMEM = {

In Sha/sha256.cpp (line 11):
const uint8_t sha256InitState[] PROGMEM = {

","15887","<c++><arduino><sha><hmac><arduino-ide>","3","5","1","2016-01-16 16:25:59","34826550","0","1","2192774","","2016-01-16 13:01:14","2016-01-16 11:26:26",""
"29423997","Bouncy Castle Sign and Verify SHA256 Certificate With C#","I have been through a large number of examples of how people use Bouncy Castle to dynamically generate RSA Key Pairs and then sign and verify all within one block of code.  Those answers were great and really helped me ramp up quickly!
That said, I need to create a client that can pass through WCF JSON calls a public key to be used later for signature verification and I cannot seem to get this to work.  First here is the code I use to generate the Certificate:
    public System.Security.Cryptography.X509Certificates.X509Certificate2 LoadCertificate()
    {
        System.Security.Cryptography.X509Certificates.X509Certificate2 returnX509 = null;
        //X509Certificate returnCert = null;

        try
        {
            returnX509 = new System.Security.Cryptography.X509Certificates.X509Certificate2(CertificateName, CertificatePassword);
            //returnCert = DotNetUtilities.FromX509Certificate(returnX509);
        }
        catch
        {
            Console.WriteLine(""Failed to obtain cert - trying to make one now."");

            try
            {
                Guid nameGuid = Guid.NewGuid();
                AsymmetricCipherKeyPair kp;
                var x509 = GenerateCertificate(""CN=Server-CertA-"" + nameGuid.ToString(), out kp);
                SaveCertificateToFile(x509, kp, CertificateName, CertificateAlias, CertificatePassword);
                returnX509 = new System.Security.Cryptography.X509Certificates.X509Certificate2(CertificateName, CertificatePassword);
                //returnCert = DotNetUtilities.FromX509Certificate(returnX509);
                Console.WriteLine(""Successfully wrote and retrieved cert!"");
            }
            catch (Exception exc)
            {
                Console.WriteLine(""Failed to create cert - exception was: "" + exc.ToString());
            }
        }

        return returnX509;
    }

With that completed, I then use the following code to sign a message:
    public string SignData(string Message, string PrivateKey)
    {
        try
        {
            byte[] orgBytes = UnicodeEncoding.ASCII.GetBytes(Message);
            byte[] privateKey = UnicodeEncoding.ASCII.GetBytes(PrivateKey);

            string curveName = ""P-521"";
            X9ECParameters ecP = NistNamedCurves.GetByName(curveName);
            ECDomainParameters ecSpec = new ECDomainParameters(ecP.Curve, ecP.G, ecP.N, ecP.H, ecP.GetSeed());

            ISigner signer = SignerUtilities.GetSigner(""SHA-256withECDSA"");
            BigInteger biPrivateKey = new BigInteger(privateKey);
            ECPrivateKeyParameters keyParameters = new ECPrivateKeyParameters(biPrivateKey, ecSpec);

            signer.Init(true, keyParameters);
            signer.BlockUpdate(orgBytes, 0, orgBytes.Length);

            byte[] data = signer.GenerateSignature();
            //Base64 Encode
            byte[] encodedBytes;
            using (MemoryStream encStream = new MemoryStream())
            {
                base64.Encode(orgBytes, 0, orgBytes.Length, encStream);
                encodedBytes = encStream.ToArray();
            }

            if (encodedBytes.Length > 0)
                return UnicodeEncoding.ASCII.GetString(encodedBytes);
            else
                return """";
        }
        catch (Exception exc)
        {
            Console.WriteLine(""Signing Failed: "" + exc.ToString());
            return """";
        }
    }

And, finally, my attempt to verify:
    public bool VerifySignature(string PublicKey, string Signature, string Message)
    {
        try
        {
            AsymmetricKeyParameter pubKey = new AsymmetricKeyParameter(false);

            var publicKey = PublicKeyFactory.CreateKey(Convert.FromBase64String(PublicKey));
            ISigner signer = SignerUtilities.GetSigner(""SHA-256withECDSA"");
            byte[] orgBytes = UnicodeEncoding.ASCII.GetBytes(Message);

            signer.Init(false, publicKey);
            signer.BlockUpdate(orgBytes, 0, orgBytes.Length);

            //Base64 Decode
            byte[] encodeBytes = UnicodeEncoding.ASCII.GetBytes(Signature);
            byte[] decodeBytes;
            using (MemoryStream decStream = new MemoryStream())
            {
                base64.Decode(encodeBytes, 0, encodeBytes.Length, decStream);
                decodeBytes = decStream.ToArray();
            }

            return signer.VerifySignature(decodeBytes);
        }
        catch (Exception exc)
        {
            Console.WriteLine(""Verification failed with the error: "" + exc.ToString());
            return false;
        } 
    }

Here is my test app:
        Console.WriteLine(""Attempting to load cert..."");
        System.Security.Cryptography.X509Certificates.X509Certificate2 thisCert = LoadCertificate();
        if (thisCert != null)
        {
            Console.WriteLine(thisCert.IssuerName.Name);
            Console.WriteLine(""Signing the text - Mary had a nuclear bomb"");
            string signature = SignData(""Mary had a nuclear bomb"", thisCert.PublicKey.Key.ToXmlString(true));

            Console.WriteLine(""Signature: "" + signature);

            Console.WriteLine(""Verifying Signature"");

            if (VerifySignature(thisCert.PublicKey.Key.ToXmlString(false), signature, ""Mary had a nuclear bomb.""))
                Console.WriteLine(""Valid Signature!"");
            else
                Console.WriteLine(""Signature NOT valid!"");

        }

When I attempt to run the test app, I am getting the error ""Key not valid for use in specified state."" on the line:
    string signature = SignData(""Mary had a nuclear bomb"", thisCert.PublicKey.Key.ToXmlString(true));

I tried replacing the ""PublicKey.Key"" with ""PrivateKey"" but that did not make a difference.  I also tried using the BounceyCastle X509Certificate but I could not figure out how to extract the keys.  Any ideas?
Thank you!
UPDATE:  I did figure out how to sign and verify with just .NET but that is not really useful to me as I need to be cross platform and, in fact, our main client app is written in Java.  Does anybody know the Bouncy Castle equivalent to the following code?
    public string SignDataAsXml(string Message, X509Certificate2 ThisCert)
    {
        XmlDocument doc = new XmlDocument();
        doc.PreserveWhitespace = false;
        doc.LoadXml(""<core>"" + Message + ""</core>"");

        // Create a SignedXml object.
        SignedXml signedXml = new SignedXml(doc);

        // Add the key to the SignedXml document. 
        signedXml.SigningKey = ThisCert.PrivateKey;

        // Create a reference to be signed.
        Reference reference = new Reference();
        reference.Uri = """";

        // Add an enveloped transformation to the reference.
        XmlDsigEnvelopedSignatureTransform env = new XmlDsigEnvelopedSignatureTransform();
        reference.AddTransform(env);

        // Add the reference to the SignedXml object.
        signedXml.AddReference(reference);

        // Create a new KeyInfo object.
        KeyInfo keyInfo = new KeyInfo();

        // Load the certificate into a KeyInfoX509Data object 
        // and add it to the KeyInfo object.
        keyInfo.AddClause(new KeyInfoX509Data(ThisCert));

        // Add the KeyInfo object to the SignedXml object.
        signedXml.KeyInfo = keyInfo;

        // Compute the signature.
        signedXml.ComputeSignature();

        // Get the XML representation of the signature and save 
        // it to an XmlElement object.
        XmlElement xmlDigitalSignature = signedXml.GetXml();

        // Append the element to the XML document.
        doc.DocumentElement.AppendChild(doc.ImportNode(xmlDigitalSignature, true));


        if (doc.FirstChild is XmlDeclaration)
        {
            doc.RemoveChild(doc.FirstChild);
        }

        using (var stringWriter = new StringWriter())
        {
            using (var xmlTextWriter = XmlWriter.Create(stringWriter))
            {
                doc.WriteTo(xmlTextWriter);
                xmlTextWriter.Flush();
                return stringWriter.GetStringBuilder().ToString();
            }
        }
    }

    public bool VerifyXmlSignature(string XmlMessage, X509Certificate2 ThisCert)
    {
        // Create a new XML document.
        XmlDocument xmlDocument = new XmlDocument();

        // Load the passed XML file into the document. 
        xmlDocument.LoadXml(XmlMessage);

        // Create a new SignedXml object and pass it the XML document class.
        SignedXml signedXml = new SignedXml(xmlDocument);

        // Find the ""Signature"" node and create a new XmlNodeList object.
        XmlNodeList nodeList = xmlDocument.GetElementsByTagName(""Signature"");

        // Load the signature node.
        signedXml.LoadXml((XmlElement)nodeList[0]);

        // Check the signature and return the result. 
        return signedXml.CheckSignature(ThisCert, true);
    }

","Bouncy Castle doesn't support XML formats at all. Unless your use-case strictly requires it, you'll find it much easier going just to use Base64 encodings, with certificates (X.509) and private keys (PKCS#8) stored in PEM format. These are all string formats, so should be usable with JSON directly.
There are other problems in the code samples: signing should use the private key, signatures shouldn't be treated as ASCII strings, possibly your messages are actually UTF8. I would expect the inner sign/verify routines to perhaps look like this:
    public string SignData(string msg, ECPrivateKeyParameters privKey)
    {
        try
        {
            byte[] msgBytes = Encoding.UTF8.GetBytes(msg);

            ISigner signer = SignerUtilities.GetSigner(""SHA-256withECDSA"");
            signer.Init(true, privKey);
            signer.BlockUpdate(msgBytes, 0, msgBytes.Length);
            byte[] sigBytes = signer.GenerateSignature();

            return Convert.ToBase64String(sigBytes);
        }
        catch (Exception exc)
        {
            Console.WriteLine(""Signing Failed: "" + exc.ToString());
            return null;
        }
    }

    public bool VerifySignature(ECPublicKeyParameters pubKey, string signature, string msg)
    {
        try
        {
            byte[] msgBytes = Encoding.UTF8.GetBytes(msg);
            byte[] sigBytes = Convert.FromBase64String(signature);

            ISigner signer = SignerUtilities.GetSigner(""SHA-256withECDSA"");
            signer.Init(false, pubKey);
            signer.BlockUpdate(msgBytes, 0, msgBytes.Length);
            return signer.VerifySignature(sigBytes);
        }
        catch (Exception exc)
        {
            Console.WriteLine(""Verification failed with the error: "" + exc.ToString());
            return false;
        }
    }

A further issue is that I think .NET didn't get ECDSA support until .NET 3.5, in any case there's no ECDsa class in .NET 1.1 (which is BC's target for the upcoming 1.8 release - we will be ""modernising"" after that), so DotNetUtilities doesn't have support for ECDSA. However, we can export to PKCS#12 and import to BC. An example program:
    public void Program()
    {
        Console.WriteLine(""Attempting to load cert..."");
        System.Security.Cryptography.X509Certificates.X509Certificate2 thisCert = LoadCertificate();

        Console.WriteLine(thisCert.IssuerName.Name);
        Console.WriteLine(""Signing the text - Mary had a nuclear bomb"");

        byte[] pkcs12Bytes = thisCert.Export(X509ContentType.Pkcs12, ""dummy"");
        Pkcs12Store pkcs12 = new Pkcs12StoreBuilder().Build();
        pkcs12.Load(new MemoryStream(pkcs12Bytes, false), ""dummy"".ToCharArray());

        ECPrivateKeyParameters privKey = null;
        foreach (string alias in pkcs12.Aliases)
        {
            if (pkcs12.IsKeyEntry(alias))
            {
                privKey = (ECPrivateKeyParameters)pkcs12.GetKey(alias).Key;
                break;
            }
        }

        string signature = SignData(""Mary had a nuclear bomb"", privKey);

        Console.WriteLine(""Signature: "" + signature);

        Console.WriteLine(""Verifying Signature"");

        var bcCert = DotNetUtilities.FromX509Certificate(thisCert);
        if (VerifySignature((ECPublicKeyParameters)bcCert.GetPublicKey(), signature, ""Mary had a nuclear bomb.""))
            Console.WriteLine(""Valid Signature!"");
        else
            Console.WriteLine(""Signature NOT valid!"");
    }

I haven't really tested any of the above code, but it should give you something to go on. Note that BC has key and certificate generators too, so you could choose to use BC for everything (except XML!), and export/import to/from .NET land only where necessary. 
","15886","<c#><rsa><bouncycastle><sha>","5","10","2","2018-12-04 12:04:32","29574548","3","2","4076091","","2015-04-09 16:56:17","2015-04-02 23:13:52",""
"29423997","Bouncy Castle Sign and Verify SHA256 Certificate With C#","I have been through a large number of examples of how people use Bouncy Castle to dynamically generate RSA Key Pairs and then sign and verify all within one block of code.  Those answers were great and really helped me ramp up quickly!
That said, I need to create a client that can pass through WCF JSON calls a public key to be used later for signature verification and I cannot seem to get this to work.  First here is the code I use to generate the Certificate:
    public System.Security.Cryptography.X509Certificates.X509Certificate2 LoadCertificate()
    {
        System.Security.Cryptography.X509Certificates.X509Certificate2 returnX509 = null;
        //X509Certificate returnCert = null;

        try
        {
            returnX509 = new System.Security.Cryptography.X509Certificates.X509Certificate2(CertificateName, CertificatePassword);
            //returnCert = DotNetUtilities.FromX509Certificate(returnX509);
        }
        catch
        {
            Console.WriteLine(""Failed to obtain cert - trying to make one now."");

            try
            {
                Guid nameGuid = Guid.NewGuid();
                AsymmetricCipherKeyPair kp;
                var x509 = GenerateCertificate(""CN=Server-CertA-"" + nameGuid.ToString(), out kp);
                SaveCertificateToFile(x509, kp, CertificateName, CertificateAlias, CertificatePassword);
                returnX509 = new System.Security.Cryptography.X509Certificates.X509Certificate2(CertificateName, CertificatePassword);
                //returnCert = DotNetUtilities.FromX509Certificate(returnX509);
                Console.WriteLine(""Successfully wrote and retrieved cert!"");
            }
            catch (Exception exc)
            {
                Console.WriteLine(""Failed to create cert - exception was: "" + exc.ToString());
            }
        }

        return returnX509;
    }

With that completed, I then use the following code to sign a message:
    public string SignData(string Message, string PrivateKey)
    {
        try
        {
            byte[] orgBytes = UnicodeEncoding.ASCII.GetBytes(Message);
            byte[] privateKey = UnicodeEncoding.ASCII.GetBytes(PrivateKey);

            string curveName = ""P-521"";
            X9ECParameters ecP = NistNamedCurves.GetByName(curveName);
            ECDomainParameters ecSpec = new ECDomainParameters(ecP.Curve, ecP.G, ecP.N, ecP.H, ecP.GetSeed());

            ISigner signer = SignerUtilities.GetSigner(""SHA-256withECDSA"");
            BigInteger biPrivateKey = new BigInteger(privateKey);
            ECPrivateKeyParameters keyParameters = new ECPrivateKeyParameters(biPrivateKey, ecSpec);

            signer.Init(true, keyParameters);
            signer.BlockUpdate(orgBytes, 0, orgBytes.Length);

            byte[] data = signer.GenerateSignature();
            //Base64 Encode
            byte[] encodedBytes;
            using (MemoryStream encStream = new MemoryStream())
            {
                base64.Encode(orgBytes, 0, orgBytes.Length, encStream);
                encodedBytes = encStream.ToArray();
            }

            if (encodedBytes.Length > 0)
                return UnicodeEncoding.ASCII.GetString(encodedBytes);
            else
                return """";
        }
        catch (Exception exc)
        {
            Console.WriteLine(""Signing Failed: "" + exc.ToString());
            return """";
        }
    }

And, finally, my attempt to verify:
    public bool VerifySignature(string PublicKey, string Signature, string Message)
    {
        try
        {
            AsymmetricKeyParameter pubKey = new AsymmetricKeyParameter(false);

            var publicKey = PublicKeyFactory.CreateKey(Convert.FromBase64String(PublicKey));
            ISigner signer = SignerUtilities.GetSigner(""SHA-256withECDSA"");
            byte[] orgBytes = UnicodeEncoding.ASCII.GetBytes(Message);

            signer.Init(false, publicKey);
            signer.BlockUpdate(orgBytes, 0, orgBytes.Length);

            //Base64 Decode
            byte[] encodeBytes = UnicodeEncoding.ASCII.GetBytes(Signature);
            byte[] decodeBytes;
            using (MemoryStream decStream = new MemoryStream())
            {
                base64.Decode(encodeBytes, 0, encodeBytes.Length, decStream);
                decodeBytes = decStream.ToArray();
            }

            return signer.VerifySignature(decodeBytes);
        }
        catch (Exception exc)
        {
            Console.WriteLine(""Verification failed with the error: "" + exc.ToString());
            return false;
        } 
    }

Here is my test app:
        Console.WriteLine(""Attempting to load cert..."");
        System.Security.Cryptography.X509Certificates.X509Certificate2 thisCert = LoadCertificate();
        if (thisCert != null)
        {
            Console.WriteLine(thisCert.IssuerName.Name);
            Console.WriteLine(""Signing the text - Mary had a nuclear bomb"");
            string signature = SignData(""Mary had a nuclear bomb"", thisCert.PublicKey.Key.ToXmlString(true));

            Console.WriteLine(""Signature: "" + signature);

            Console.WriteLine(""Verifying Signature"");

            if (VerifySignature(thisCert.PublicKey.Key.ToXmlString(false), signature, ""Mary had a nuclear bomb.""))
                Console.WriteLine(""Valid Signature!"");
            else
                Console.WriteLine(""Signature NOT valid!"");

        }

When I attempt to run the test app, I am getting the error ""Key not valid for use in specified state."" on the line:
    string signature = SignData(""Mary had a nuclear bomb"", thisCert.PublicKey.Key.ToXmlString(true));

I tried replacing the ""PublicKey.Key"" with ""PrivateKey"" but that did not make a difference.  I also tried using the BounceyCastle X509Certificate but I could not figure out how to extract the keys.  Any ideas?
Thank you!
UPDATE:  I did figure out how to sign and verify with just .NET but that is not really useful to me as I need to be cross platform and, in fact, our main client app is written in Java.  Does anybody know the Bouncy Castle equivalent to the following code?
    public string SignDataAsXml(string Message, X509Certificate2 ThisCert)
    {
        XmlDocument doc = new XmlDocument();
        doc.PreserveWhitespace = false;
        doc.LoadXml(""<core>"" + Message + ""</core>"");

        // Create a SignedXml object.
        SignedXml signedXml = new SignedXml(doc);

        // Add the key to the SignedXml document. 
        signedXml.SigningKey = ThisCert.PrivateKey;

        // Create a reference to be signed.
        Reference reference = new Reference();
        reference.Uri = """";

        // Add an enveloped transformation to the reference.
        XmlDsigEnvelopedSignatureTransform env = new XmlDsigEnvelopedSignatureTransform();
        reference.AddTransform(env);

        // Add the reference to the SignedXml object.
        signedXml.AddReference(reference);

        // Create a new KeyInfo object.
        KeyInfo keyInfo = new KeyInfo();

        // Load the certificate into a KeyInfoX509Data object 
        // and add it to the KeyInfo object.
        keyInfo.AddClause(new KeyInfoX509Data(ThisCert));

        // Add the KeyInfo object to the SignedXml object.
        signedXml.KeyInfo = keyInfo;

        // Compute the signature.
        signedXml.ComputeSignature();

        // Get the XML representation of the signature and save 
        // it to an XmlElement object.
        XmlElement xmlDigitalSignature = signedXml.GetXml();

        // Append the element to the XML document.
        doc.DocumentElement.AppendChild(doc.ImportNode(xmlDigitalSignature, true));


        if (doc.FirstChild is XmlDeclaration)
        {
            doc.RemoveChild(doc.FirstChild);
        }

        using (var stringWriter = new StringWriter())
        {
            using (var xmlTextWriter = XmlWriter.Create(stringWriter))
            {
                doc.WriteTo(xmlTextWriter);
                xmlTextWriter.Flush();
                return stringWriter.GetStringBuilder().ToString();
            }
        }
    }

    public bool VerifyXmlSignature(string XmlMessage, X509Certificate2 ThisCert)
    {
        // Create a new XML document.
        XmlDocument xmlDocument = new XmlDocument();

        // Load the passed XML file into the document. 
        xmlDocument.LoadXml(XmlMessage);

        // Create a new SignedXml object and pass it the XML document class.
        SignedXml signedXml = new SignedXml(xmlDocument);

        // Find the ""Signature"" node and create a new XmlNodeList object.
        XmlNodeList nodeList = xmlDocument.GetElementsByTagName(""Signature"");

        // Load the signature node.
        signedXml.LoadXml((XmlElement)nodeList[0]);

        // Check the signature and return the result. 
        return signedXml.CheckSignature(ThisCert, true);
    }

","Thanks to Petters answer I wanted to add code to verify the signature with RSA algorithm.
public bool VerifySignature(AsymmetricKeyParameter pubKey, string signature, string msg)
{
    try
    {
        byte[] msgBytes = Encoding.UTF8.GetBytes(msg);
        byte[] sigBytes = Convert.FromBase64String(signature);

        ISigner signer = SignerUtilities.GetSigner(""SHA-256withRSA"");
        signer.Init(false, pubKey);
        signer.BlockUpdate(msgBytes, 0, msgBytes.Length);
        return signer.VerifySignature(sigBytes);
    }
    catch (Exception exc)
    {
        Console.WriteLine(""Verification failed with the error: "" + exc.ToString());
        return false;
    }
}

","15886","<c#><rsa><bouncycastle><sha>","5","1","2","2018-12-04 12:04:32","29574548","3","2","4076091","","2015-04-09 16:56:17","2015-04-02 23:13:52",""
"4676828","When generating a SHA256 / 512 hash, is there a minimum 'safe' amount of data to hash?","I have heard that when creating a hash, it's possible that if small files or amounts of data are used, the resulting hash is more likely to suffer from a collision. If that is true, is there a minimum ""safe"" amount of data that should be used to ensure this doesn't happen?
I guess the question could also be phrased as:
What is the smallest amount of data that can be safely and securely hashed?
","No, message length does not effect the likeliness of a collision.
If that were the case, the algorithm is broken.
You can try for yourself by running SHA against all one-byte inputs, then against all two-byte inputs and so on, and see if you get a collision. Probably not, because no one has ever found a collision for SHA-256 or SHA-512 (or at least they kept it a secret from Wikipedia)
","15672","<hash><checksum><sha>","23","1","5","2016-11-17 02:33:23","4681221","0","5","","","","2011-01-13 04:35:49",""
"4676828","When generating a SHA256 / 512 hash, is there a minimum 'safe' amount of data to hash?","I have heard that when creating a hash, it's possible that if small files or amounts of data are used, the resulting hash is more likely to suffer from a collision. If that is true, is there a minimum ""safe"" amount of data that should be used to ensure this doesn't happen?
I guess the question could also be phrased as:
What is the smallest amount of data that can be safely and securely hashed?
","Depends very much on your application: if you were simply hashing ""YES"" and ""NO"" strings to send across a network to indicate whether you should give me a $100,000 loan, it would be a pretty big failure -- the domain of answers can't be that large, so someone could easily check observed hashes on the wire against a database of 'small input' hash outputs.
If you were to include the date, time, my name, my tax ID, the amount requested, the amount of data being hashed probably won't amount to much, but the chances of that data being in precomputed hash tables is pretty slim.
But I know of no research to point you to beyond my instincts. Sorry.
","15672","<hash><checksum><sha>","23","-4","5","2016-11-17 02:33:23","4681221","0","5","","","","2011-01-13 04:35:49",""
"4676828","When generating a SHA256 / 512 hash, is there a minimum 'safe' amount of data to hash?","I have heard that when creating a hash, it's possible that if small files or amounts of data are used, the resulting hash is more likely to suffer from a collision. If that is true, is there a minimum ""safe"" amount of data that should be used to ensure this doesn't happen?
I guess the question could also be phrased as:
What is the smallest amount of data that can be safely and securely hashed?
","A hash function accepts inputs of arbitrary (or at least very high) length, and produces a fixed-length output. There are more possible inputs than possible outputs, so collisions must exist. The whole point of a secure hash function is that it is ""collision resistant"", which means that while collisions must mathematically exist, it is very very hard to actually compute one. Thus, there is no known collision for SHA-256 and SHA-512, and the best known methods for computing one (by doing it on purpose) are so ludicrously expensive that they will not be applied soon (the whole US federal budget for a century would buy only a ridiculously small part of the task).
So, if it cannot be realistically done on purpose, you can expect not to hit a collision out of (bad) luck.
Moreover, if you limit yourself to very short inputs, there is a chance that there is no collision at all. E.g., if you consider 12-byte inputs: there are 296 possible sequences of 12 bytes. That's huge (more than can be enumerated with today's technology). Yet, SHA-256 will map each input to a 256-bit value, i.e. values in a much wider space (of size 2256). We cannot prove it formally, but chances are that all those 296 hash values are distinct from each other. Note that this has no practical consequence: there is no measurable difference between not finding a collision because there is none, and not finding a collision because it is extremely improbable to hit one.
Just to illustrate how low risks of collision are with SHA-256: consider your risks of being mauled by a gorilla escaped from a local zoo or private owner. Unlikely? Yes, but it still may conceivably happen: it seems that a gorilla escaped from the Dallas zoo in 2004 and injured four persons; another gorilla escaped from the same zoo in 2010. Assuming that there is only one rampaging gorilla every 6 years on the whole Earth (not only in the Dallas area) and you happen to be the unlucky chap who is on his path, out of a human population of 6.5 billions, then risks of grievous-bodily-harm-by-gorilla can be estimated at about 1 in 243.7 per day. Now, take 10 thousands of PC and have them work on finding a collision for SHA-256. The chances of hitting a collision are close to 1 in 275 per day -- more than a billion less probable than the angry ape thing. The conclusion is that if you fear SHA-256 collisions but do not keep with you a loaded shotgun at all times, then you are getting your priorities wrong. Also, do not mess with Texas.
","15672","<hash><checksum><sha>","23","90","5","2016-11-17 02:33:23","4681221","0","5","","","","2011-01-13 04:35:49",""
"4676828","When generating a SHA256 / 512 hash, is there a minimum 'safe' amount of data to hash?","I have heard that when creating a hash, it's possible that if small files or amounts of data are used, the resulting hash is more likely to suffer from a collision. If that is true, is there a minimum ""safe"" amount of data that should be used to ensure this doesn't happen?
I guess the question could also be phrased as:
What is the smallest amount of data that can be safely and securely hashed?
","There is no minimum input size. SHA-256 algorithm is effectively a random mapping and collision probability doesn't depend on input length. Even a 1 bit input is 'safe'.
Note that the input is padded to a multiple of 512 bits (64 bytes) for SHA-256 (multiple of 1024 for SHA-512). Taking a 12 byte input (as Thomas used in his example), when using SHA-256, there are 2^96 possible sequences of length 64 bytes.
As an example, a 12 byte input Hello There! (0x48656c6c6f20546865726521) will be padded with a one bit, followed by 351 zero bits followed by the 64 bit representation of the length of the input in bits which is 0x0000000000000060 to form a 512 bit padded message. This 512 bit message is used as the input for computing the hash.
More details can be found in RFC: 4634 ""US Secure Hash Algorithms (SHA and HMAC-SHA)"", http://www.ietf.org/rfc/rfc4634.txt
","15672","<hash><checksum><sha>","23","0","5","2016-11-17 02:33:23","4681221","0","5","","","","2011-01-13 04:35:49",""
"4676828","When generating a SHA256 / 512 hash, is there a minimum 'safe' amount of data to hash?","I have heard that when creating a hash, it's possible that if small files or amounts of data are used, the resulting hash is more likely to suffer from a collision. If that is true, is there a minimum ""safe"" amount of data that should be used to ensure this doesn't happen?
I guess the question could also be phrased as:
What is the smallest amount of data that can be safely and securely hashed?
","Τhe hash is 256 bits long, there is a collision for anything longer than 256bits.
Υou cannot compress something into a smaller thing without having collisions, its defying mathmatics.
Yes, because of the algoritm and the 2 to the power of 256 there is a lot of different hashes, but they are not collision free, that is impossible.
","15672","<hash><checksum><sha>","23","0","5","2016-11-17 02:33:23","4681221","0","5","","","","2011-01-13 04:35:49",""
"9991757","SHA256 digest in perl","I need to do SHA256 hashing of email addresses and I need the result as a String.
I tried the following:
  use Digest::SHA qw(sha256);
  my $data = 'swaranga@gmail.com';
  my $digest = sha256($data);

  print $digest;

But it prints something like: 
B/D6i1Î¼û^Þ©Q;¢Þ

I need the output as follows: 
cbc41284e23c8c7ed98f589b6d6ebfd6

The above hash is generated using SHA256 generator of Apache DigestUtils.
What am I doing wrong? I am a newbie in perl, so excuse if it is something silly.
Thanks.
","You probably want Digest::SHA qw(sha256_hex)  From CPAN's Digest::SHA page

Logically joins the arguments into a single string, and returns its
  SHA-1/224/256/384/512 digest encoded as a hexadecimal string.

","15320","<perl><hash><md5><sha><sha256>","10","6","2","2012-09-24 14:18:22","9994784","1","1","1215106","","2012-09-24 14:18:22","2012-04-03 10:51:32",""
"9991757","SHA256 digest in perl","I need to do SHA256 hashing of email addresses and I need the result as a String.
I tried the following:
  use Digest::SHA qw(sha256);
  my $data = 'swaranga@gmail.com';
  my $digest = sha256($data);

  print $digest;

But it prints something like: 
B/D6i1Î¼û^Þ©Q;¢Þ

I need the output as follows: 
cbc41284e23c8c7ed98f589b6d6ebfd6

The above hash is generated using SHA256 generator of Apache DigestUtils.
What am I doing wrong? I am a newbie in perl, so excuse if it is something silly.
Thanks.
","cbc41284e23c8c7ed98f589b6d6ebfd6 is MD5 for swaranga@gmail.com, not SHA-256

SHA encryptions for swaranga@gmail.com >>
 SHA-1:            3a3be7013e297e28d24979aadc4ae75d84ce0844
 SHA-256:          0947300f280d422f4418366931cebcfbd17f5ede1507a951153b0f15a21c10de
 SHA-384:          34c01f3956aac32aacae1a6cf67f8a66d441af06c9d36f580ce4be5b234b5399cd879231c49db5bec269309582c19432
 SHA-512:          db1aa053dd9ee191b091abbcb8bead2ec69a1ab2664bb1deeeedbdb49b25e7bc7680a7659ae88c046afdabf1e35ed0e068763f8754b369bfade69cf21f65d166
 SHA-1   (Base64): OjvnAT4pfijSSXmq3ErnXYTOCEQ=
 SHA-256 (Base64): CUcwDygNQi9EGDZpMc68+9F/Xt4VB6lRFTsPFaIcEN4=
 SHA-384 (Base64): NMAfOVaqwyqsrhps9n+KZtRBrwbJ029YDOS+WyNLU5nNh5IxxJ21vsJpMJWCwZQy
 SHA-512 (Base64): 2xqgU92e4ZGwkau8uL6tLsaaGrJmS7He7u29tJsl57x2gKdlmuiMBGr9q/HjXtDgaHY/h1Szab+t5pzyH2XRZg==


If you sure you want to use SHA-256 and you are looking for HEX output, then try this one:
Script:
#!/usr/bin/perl
use Digest::SHA qw(sha256);
print unpack(""H*"", sha256('swaranga@gmail.com')), ""\n"";

or
#!/usr/bin/perl
use Digest::SHA qw(sha256_hex);
print sha256_hex('swaranga@gmail.com'), ""\n"";

Output:
0947300f280d422f4418366931cebcfbd17f5ede1507a951153b0f15a21c10de


And if you want MD5 with HEX output, then try this one:
Script:
#!/usr/bin/perl
use Digest::MD5 qw(md5);
print unpack(""H*"", md5('swaranga@gmail.com')), ""\n"";

or
#!/usr/bin/perl
use Digest::MD5 qw(md5_hex);
print md5_hex('swaranga@gmail.com'), ""\n"";

Output:
cbc41284e23c8c7ed98f589b6d6ebfd6

","15320","<perl><hash><md5><sha><sha256>","10","19","2","2012-09-24 14:18:22","9994784","1","1","1215106","","2012-09-24 14:18:22","2012-04-03 10:51:32",""
"18464517","6 Character Short Hash Algorithm","My goal is to generate a short Hash string of 6 characters (possibly containing characters [A-Z][a-z][0-9]) for a string which is 42 case-insensitive alphanumeric characters in length. Uniqueness is the key requirement. Security or performance is not so important. 
Is there a specific algorithm which will give this result or should I stick to truncating a MD5 Hash or a SHA-1 Hash (Like in this question)? If so, what is the probability of a collision?
","Easy hash :)
private string Hash(string str)
{
    var allowedSymbols = ""0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"".ToCharArray();
    var hash = new char[6];

    for (int i = 0; i < str.Length; i++)
    {
        hash[i % 6] = (char)(hash[i % 6] ^ str[i]);
    }

    for (int i = 0; i < 6; i++)
    {
        hash[i] = allowedSymbols[hash[i] % allowedSymbols.Length];
    }

    return new string(hash);
}

","14350","<c#><hash><md5><sha>","10","8","3","2016-02-08 14:42:26","18465323","4","1","-1","","2017-05-23 10:34:09","2013-08-27 11:47:07",""
"18464517","6 Character Short Hash Algorithm","My goal is to generate a short Hash string of 6 characters (possibly containing characters [A-Z][a-z][0-9]) for a string which is 42 case-insensitive alphanumeric characters in length. Uniqueness is the key requirement. Security or performance is not so important. 
Is there a specific algorithm which will give this result or should I stick to truncating a MD5 Hash or a SHA-1 Hash (Like in this question)? If so, what is the probability of a collision?
","Your best bet would be the truncating well-known hash function (MD5 or SHA-family) because these algorithms have statistically good uniform distributions of the hash values (and also using full hash and not just 6 chars there).
Now some calculations for probability of collision

- Number of letters in English alphabet: 26
- Add capitals: 26
- Add numerics: 10
--------------

In total you get 26 + 26 + 10 = 62 characters. 

Now you have 6 places, which gives you 62^6 possible combinations.
That is 56.800.235.584 ~ 57 billion combinations. 
This is a space of possible hash values - N.
--------------
To compute collisions let's use the formula 

Pcollision = K^2 / 2N

Which is a very rough approximation of collision probability


Now let's see the result table for a number of items in a table - K

# items     | Probability of collision
---------------------------------------
10          |  1.7 * 10^-9
100         |  1.7 * 10^-7
1K          |  1.7 * 10^-5
10K         |  1.7 * 10^-3
100K        |  0.17

This formula can only be used for small K, but it shows that given 100K entries in the hash table you would roughly have 17% chance of collision.
Links
Collision probability
","14350","<c#><hash><md5><sha>","10","17","3","2016-02-08 14:42:26","18465323","4","1","-1","","2017-05-23 10:34:09","2013-08-27 11:47:07",""
"18464517","6 Character Short Hash Algorithm","My goal is to generate a short Hash string of 6 characters (possibly containing characters [A-Z][a-z][0-9]) for a string which is 42 case-insensitive alphanumeric characters in length. Uniqueness is the key requirement. Security or performance is not so important. 
Is there a specific algorithm which will give this result or should I stick to truncating a MD5 Hash or a SHA-1 Hash (Like in this question)? If so, what is the probability of a collision?
","The best solution is almost certainly to use SHA1, convert to Base62 (although Base64 would be much easier as it's built in to the framework Convert.ToBase64String. You'll have to do some looking for a decent Base62 library), and then truncate the output to 6 bytes.
I would not use GetHashCode() as it has a history of collision problems. (I'm not trying to claim that this specific bug would apply to you, only mentioning this as evidence that GetHashCode hasn't been implemented well in the past.)
I also would not implement a custom hashing algorithm, it's extremely easy to accidentally write an algorithm with a high collision rate. A lot of research and scrutiny has gone in to SHA1 and the other major hashing algorithms, and you'd be very hard pressed to come up with anything better.
","14350","<c#><hash><md5><sha>","10","2","3","2016-02-08 14:42:26","18465323","4","1","-1","","2017-05-23 10:34:09","2013-08-27 11:47:07",""
"25902732","Compute SHA1 of Strings in python","I have a file which contains a lot of Strings. I am trying to compute SHA1 hashes of these strings individually and store those
import hashlib
inp = open(""inp.txt"" , ""r"")
outputhash  = open(""outputhashes.txt"", ""w"")
for eachpwd in inp:
    sha_1 = hashlib.sha1()
    sha_1.update(eachpwd)
    outputhash.write(sha_1.hexdigest())
    outputhash.write(""\n"")

The issue I am facing is once a strings SHA1 is computed the next string is being appended(I feel this is why I am not getting the correct hashes) and its hash is being computed. Hence I am not getting the correct hashes. I am new to python. I know what to do but don't know how to do it. Can you point me in the right direction to go about this?
","You're iterating over a file, which is going to return the lines, including the line terminator (a \n character at the end of the string) 
You should remove it:
import hashlib
inp = open(""inp.txt"" , ""r"")
outputhash  = open(""outputhashes.txt"", ""w"")
for line in inp:            # Change this
    eachpwd = line.strip()  # Change this

    # Add this to understand the problem:
    print repr(line)

    sha_1 = hashlib.sha1()
    sha_1.update(eachpwd)
    outputhash.write(sha_1.hexdigest())
    outputhash.write(""\n"")

","14080","<python><hash><sha>","12","15","1","2014-09-18 01:21:46","25902763","0","2","873145","","2014-09-18 01:20:06","2014-09-18 01:18:08",""
"42290681","Android Studio only gives me SHA1, I need SHA256","I want to use assetlinks.json for appindexing.
I am supposed to use an SHA256 fingerprint, but when I print out the signingReport in Android Studio, I only have SHA1.
Can I use SHA1, if not, how can I get an SHA256 signed app?
Using Manish Jain's answer I have managed to list only the debug keys, which is more than I could do by myself, but if I put my actual keystore path and jks file in the path, ""keytool -list -v -keystore ""C:\Users\myself\Keystores\android.jks"" -alias mykey -storepass 1password -keypass 2password"" a different set of keys come up, which I assume would be the release key set.
The BIG QUESTION is why android studio only lists the debug keys when I print out the signingReport from Gradle and why it says ""Variant: releaseUnitTest, Config: none""? Any idea?
By the way, this question has nothing to do with the suggested duplicate.
EDIT:
Replying to a question from  jyomin 2.
I hope it helps others too.
***** For Release:
1, go to: C:\Program Files\Java\jdk1.7.0_25\bin (or wherever your jdk file is)
2, type ""cmd"" in address bar in win explorer
3, add: keytool -list -v -keystore ""C:\Users\yourUserName\Keystores\android.jks""  -alias yourAppName -storepass yourPasswordToKeystore -keypass yourPasswordToRequiredAppKey
Be careful!!!
If you have multiple keys in the keystore, it might not give you the correct matching one to the given app!!!
Another way of getting the SHA256 for your app:
Either on the Developer Console or Firebase you can find the related SHA256 key somewhere. I couldn't find it now, but if you keep looking, it is there somewhere.
I just found it on Google Play Developer Console:

Upload the first version of your app (if you haven't done it yet)
Go to App Releases in Release Management
Click Manage Beta
At the APK version click the ""i"" info button on the right

It will show you the SHA keys
Good luck!
","You can get SHA256 by using keytool using command prompt (windows).

keytool -list -v -keystore ""%USERPROFILE%.android\debug.keystore""
  -alias androiddebugkey -storepass android -keypass android

","13924","<android><sha><android-app-indexing><google-app-indexing><firebase-app-indexing>","7","21","2","2018-02-19 15:15:44","42290810","5","4","5452576","","2017-06-06 12:16:26","2017-02-17 06:16:34",""
"42290681","Android Studio only gives me SHA1, I need SHA256","I want to use assetlinks.json for appindexing.
I am supposed to use an SHA256 fingerprint, but when I print out the signingReport in Android Studio, I only have SHA1.
Can I use SHA1, if not, how can I get an SHA256 signed app?
Using Manish Jain's answer I have managed to list only the debug keys, which is more than I could do by myself, but if I put my actual keystore path and jks file in the path, ""keytool -list -v -keystore ""C:\Users\myself\Keystores\android.jks"" -alias mykey -storepass 1password -keypass 2password"" a different set of keys come up, which I assume would be the release key set.
The BIG QUESTION is why android studio only lists the debug keys when I print out the signingReport from Gradle and why it says ""Variant: releaseUnitTest, Config: none""? Any idea?
By the way, this question has nothing to do with the suggested duplicate.
EDIT:
Replying to a question from  jyomin 2.
I hope it helps others too.
***** For Release:
1, go to: C:\Program Files\Java\jdk1.7.0_25\bin (or wherever your jdk file is)
2, type ""cmd"" in address bar in win explorer
3, add: keytool -list -v -keystore ""C:\Users\yourUserName\Keystores\android.jks""  -alias yourAppName -storepass yourPasswordToKeystore -keypass yourPasswordToRequiredAppKey
Be careful!!!
If you have multiple keys in the keystore, it might not give you the correct matching one to the given app!!!
Another way of getting the SHA256 for your app:
Either on the Developer Console or Firebase you can find the related SHA256 key somewhere. I couldn't find it now, but if you keep looking, it is there somewhere.
I just found it on Google Play Developer Console:

Upload the first version of your app (if you haven't done it yet)
Go to App Releases in Release Management
Click Manage Beta
At the APK version click the ""i"" info button on the right

It will show you the SHA keys
Good luck!
","You can get it from the Google Play Console (https://play.google.com) go to Release Management -> App Signing -> App signing certificate
","13924","<android><sha><android-app-indexing><google-app-indexing><firebase-app-indexing>","7","5","2","2018-02-19 15:15:44","42290810","5","4","5452576","","2017-06-06 12:16:26","2017-02-17 06:16:34",""
"7827836","Build openssl with just RSA and AES","I'm using libcrypto.a (OpenSSL) with a project. By default all the algorithms are available under libcrypto.a. For the project i just need RSA, AES and SHA. 
How I can build libcrypto.a with just those algorithms?
","If you build OpenSSL by running the config or Configure script, you provide no-<cipher> as an argument to exclude the cipher.  Run Configure with no options to see the available build options.
The configuration script converts these arguments into options for the preprocessor.  Here's a list of nearly everything you can disable at compile time.  First is the configuration-script argument, and then the compiler argument it gets converted to.
Ciphers:

no-idea       -DOPENSSL_NO_IDEA
no-aes        -DOPENSSL_NO_AES
no-camellia   -DOPENSSL_NO_CAMELLIA
no-seed       -DOPENSSL_NO_SEED
no-bf         -DOPENSSL_NO_BF
no-cast       -DOPENSSL_NO_CAST
no-des        -DOPENSSL_NO_DES
no-rc2        -DOPENSSL_NO_RC2
no-rc4        -DOPENSSL_NO_RC4
no-rc5        -DOPENSSL_NO_RC5

no-md2        -DOPENSSL_NO_MD2
no-md4        -DOPENSSL_NO_MD4
no-md5        -DOPENSSL_NO_MD5
no-sha        -DOPENSSL_NO_SHA
no-ripemd     -DOPENSSL_NO_RIPEMD
no-mdc2       -DOPENSSL_NO_MDC2

no-rsa        -DOPENSSL_NO_RSA
no-dsa        -DOPENSSL_NO_DSA
no-dh         -DOPENSSL_NO_DH

no-ec         -DOPENSSL_NO_EC
no-ecdsa      -DOPENSSL_NO_ECDSA
no-ecdh       -DOPENSSL_NO_ECDH

Non-cipher functionality:

no-sock       -DOPENSSL_NO_SOCK         No socket code.
no-ssl2       -DOPENSSL_NO_SSL2         No SSLv2.
no-ssl3       -DOPENSSL_NO_SSL3         No SSLv3.
no-err        -DOPENSSL_NO_ERR          No error strings.
no-krb5       -DOPENSSL_NO_KRB5         No Kerberos v5.
no-engine     -DOPENSSL_NO_ENGINE       No dynamic engines.
no-hw         -DOPENSSL_NO_HW           No support for external hardware.

Not documented:

no-tlsext     -DOPENSSL_NO_TLSEXT
no-cms        -DOPENSSL_NO_CMS
no-jpake      -DOPENSSL_NO_JPAKE
no-capieng    -DOPENSSL_NO_CAPIENG

Note that some things have dependencies.  For example, you cannot build the SSL library without ciphers and digest algorithms because the SSL and TLS protocols demand them.  So instead of doing make all, you want to do make build_crypto so that it only builds libcrypto.a.
Through experimentation, I found (in OpenSSL 0.9.8r) that libcrypto has 2 algorithm dependencies:  MD5 for the random-number generator's algorithm (in crypto/rand_lib.c) and SHA-1 for printing certificate hashes (in crypto/asn1/t_x509.c).  I'd say these dependencies are oversights by the developers.
This is how I build libcrypto.a with only MD5 and SHA:
./config no-idea no-aes no-camellia no-seed no-bf no-cast no-des no-rc2 no-rc4 no-rc5 \
no-md2 no-md4 no-ripemd no-mdc2 no-rsa no-dsa no-dh no-ec no-ecdsa no-ecdh no-sock \
no-ssl2 no-ssl3 no-err no-krb5 no-engine no-hw
make depend
make build_crypto

I also successfully built it with everything except AES, RSA, SHA, and MD5 as the question asked.
","13905","<build><openssl><rsa><aes><sha>","9","17","1","2011-10-25 05:16:17","","1","5","","","","2011-10-19 20:39:57",""
"14146636","How do I calculate the equivalent to SQL Server (hashbytes('SHA1',[ColumnName])) in C#?","In my database I have a computed column that contains a SHA1 hash of a column called URLString which holds URLs (e.g. ""http://xxxx.com/index.html"").
I often need to query the table to find a specific URL based on the URLString column.
The table contains 100K's and these queries take several seconds (using SQL Azure). 
Since URLs can be quite long, I cannot create an index on this column (above 450 bytes).
To speed things up I want to calculate the equivalent of SQL Server hashbytes('SHA1',[URLString]) from C# and query based on this value.
I tried the below code, but the value I get is different than the one calculated by the database.
var urlString = Encoding.ASCII.GetBytes(url.URLString); //UTF8 also fails
var sha1 = new SHA1CryptoServiceProvider();
byte[] hash = sha1.ComputeHash(urlString);

Am I missing something trivial here?
I'm open to other ideas that can solve the same problem (as long as they are supported by SQL Azure).
Example: in the database the automatically calculated SHA1 value of URL http://www.whatismyip.org/ is 0xAE66CA69A157186A511ED462153D7CA65F0C1BF7.
","Below are two methods that do hashing of string and of bytes. The HashBytes method returns Base64 of the resulting bytes but you can return just the bytes if you prefer them
public static string HashString(string cleartext)
{
    byte[] clearBytes = Encoding.UTF8.GetBytes(cleartext);
    return HashBytes(clearBytes);
}  

public static string HashBytes(byte[] clearBytes)
{
    SHA1 hasher = SHA1.Create();
    byte[] hashBytes =   hasher.ComputeHash(clearBytes);
    string hash = System.Convert.ToBase64String(hashBytes);
    hasher.Clear();
    return hash;
}

","12755","<c#><sql-server><tsql><sha>","7","4","3","2018-09-14 01:57:58","14146892","6","2","1359694","","2013-01-03 20:49:57","2013-01-03 20:25:18",""
"14146636","How do I calculate the equivalent to SQL Server (hashbytes('SHA1',[ColumnName])) in C#?","In my database I have a computed column that contains a SHA1 hash of a column called URLString which holds URLs (e.g. ""http://xxxx.com/index.html"").
I often need to query the table to find a specific URL based on the URLString column.
The table contains 100K's and these queries take several seconds (using SQL Azure). 
Since URLs can be quite long, I cannot create an index on this column (above 450 bytes).
To speed things up I want to calculate the equivalent of SQL Server hashbytes('SHA1',[URLString]) from C# and query based on this value.
I tried the below code, but the value I get is different than the one calculated by the database.
var urlString = Encoding.ASCII.GetBytes(url.URLString); //UTF8 also fails
var sha1 = new SHA1CryptoServiceProvider();
byte[] hash = sha1.ComputeHash(urlString);

Am I missing something trivial here?
I'm open to other ideas that can solve the same problem (as long as they are supported by SQL Azure).
Example: in the database the automatically calculated SHA1 value of URL http://www.whatismyip.org/ is 0xAE66CA69A157186A511ED462153D7CA65F0C1BF7.
","You're likely getting bitten by character encoding differences:
http://weblogs.sqlteam.com/mladenp/archive/2009/04/28/Comparing-SQL-Server-HASHBYTES-function-and-.Net-hashing.aspx
You could try getting the bytes via Encoding.ASCII.GetBytes(url) or Encoding.Unicode.GetBytes(url) and see which one your db is using.
","12755","<c#><sql-server><tsql><sha>","7","10","3","2018-09-14 01:57:58","14146892","6","2","1359694","","2013-01-03 20:49:57","2013-01-03 20:25:18",""
"14146636","How do I calculate the equivalent to SQL Server (hashbytes('SHA1',[ColumnName])) in C#?","In my database I have a computed column that contains a SHA1 hash of a column called URLString which holds URLs (e.g. ""http://xxxx.com/index.html"").
I often need to query the table to find a specific URL based on the URLString column.
The table contains 100K's and these queries take several seconds (using SQL Azure). 
Since URLs can be quite long, I cannot create an index on this column (above 450 bytes).
To speed things up I want to calculate the equivalent of SQL Server hashbytes('SHA1',[URLString]) from C# and query based on this value.
I tried the below code, but the value I get is different than the one calculated by the database.
var urlString = Encoding.ASCII.GetBytes(url.URLString); //UTF8 also fails
var sha1 = new SHA1CryptoServiceProvider();
byte[] hash = sha1.ComputeHash(urlString);

Am I missing something trivial here?
I'm open to other ideas that can solve the same problem (as long as they are supported by SQL Azure).
Example: in the database the automatically calculated SHA1 value of URL http://www.whatismyip.org/ is 0xAE66CA69A157186A511ED462153D7CA65F0C1BF7.
","The below code is equivalent to SQL Server's hashbytes('sha1')
using (SHA1Managed sha1 = new SHA1Managed()) {
    var hash = sha1.ComputeHash(Encoding.Unicode.GetBytes(input));
    var sb = new StringBuilder(hash.Length * 2);

    foreach (byte b in hash) {
        // can be ""x2"" if you want lowercase
        sb.Append(b.ToString(""X2""));
    }

    string output = sb.ToString();
}

","12755","<c#><sql-server><tsql><sha>","7","1","3","2018-09-14 01:57:58","14146892","6","2","1359694","","2013-01-03 20:49:57","2013-01-03 20:25:18",""
"20807647","SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA512"") throws NoSuchAlgorithmException","After a little bit of research and some work I finally was able to hash salt the password now there is a question which is on my mind I have used the SHA1 method and I would like to try to use the SHA512 because I was told it's better (more secure) so the following is my code its a little bit all over the place but I think its comprehensible so:
public class Safety
{
   //calling some parameters for possible later changes
   public static final String algorithm = ""PBKDF2WithHmacSHA1"";
   public static final int saltbytesize = 24;
   public static final int hashbytesize = 24;
   public static final int iterations = 1000;
   public static final int iIndex = 0;
   public static final int sIndex = 1;
   public static final int pbkIndex = 2;

   public static Users passwordHash(Users user) throws NoSuchAlgorithmException,
                                                       InvalidKeySpecException
   {
      SecureRandom sR = new SecureRandom();

      byte[] pws = new byte[saltbytesize];

      sR.nextBytes(pws);
      byte[] pwh = pbkdf2(user.getPassword().toCharArray(), pws, iterations, hashbytesize);

      user.setPassword(toHex(pwh));

      byte[] sas = new byte[saltbytesize];

      sR.nextBytes(sas);

      byte[] sah = pbkdf2(user.getsA().toCharArray(), sas, iterations, hashbytesize);

      user.setsA(toHex(sah));

      user.setUserhash(pws);

      user.setSahash(sas);

      return user;
   }

   public static boolean hashpassword(String username, String password, Users user)
   throws NoSuchAlgorithmException,
          InvalidKeySpecException
   {
      byte[] pws = user.getUserhash();

      byte[] pwh = pbkdf2(password.toCharArray(), pws, iterations, hashbytesize);

      String searcher = toHex(pwh) + username;

      String searched = user.getPassword() + user.getUsername();

      if (searcher.equals(searched))
      {
         return true;
      }
      return false;
   }

   private static byte[] pbkdf2(char[] password, byte[] salt,
                                int iterations, int bytes)
      throws NoSuchAlgorithmException, InvalidKeySpecException
   {
      PBEKeySpec spec = new PBEKeySpec(password, salt, iterations, bytes * 8);
      SecretKeyFactory skf = SecretKeyFactory.getInstance(algorithm);
      return skf.generateSecret(spec).getEncoded();
   }

   private static String toHex(byte[] array)
   {
      BigInteger bi = new BigInteger(1, array);

      String hex = bi.toString(16);

      int paddingLength = (array.length * 2) - hex.length();

      if (paddingLength > 0)
         return String.format(""%0"" + paddingLength + ""d"", 0) + hex;
      else
         return hex;
   }
}

So that's my code, however, I have not been able to make that SHA512 and I have already tried public static final String algorithm = ""PBKDF2WithHmacSHA512"" but that doesn't seem to be the right string for the algorithm since it throws the no such algorithm exception.
I also welcome any changes that would make the code better.
as stated above!
relevant few line(s) of code





public static final String algorithm = ""PBKDF2WithHmacSHA512""<<<<<





","That is not possible out of the box
The OpenJDK implementation does only provide a PBKDF2HmacSHA1Factory.java which has the ""HmacSHA1"" digest harcoded. As far as I tested, the Oracle JDK is not different in that sense.
What you have to do is derive the PBKDF2HmacSHA1Factory (come on, it is open!) and add a parameter to its constructor. You may avoid the mess of creating your own Provider, and just initialize and use your factory as follows:
PBKDF_SecretKeyFactory kf = new PBKDF_SecretKeyFactory(""HmacSHA512"");
KeySpec ks = new PBEKeySpec(password,salt,iterations,bitlen);
byte key[] = kf.engineGenerateSecret(ks).getEncoded();

","12648","<java><algorithm><security><sha>","3","2","1","2013-12-29 06:46:31","20809005","7","1","1297272","","2013-12-29 06:46:31","2013-12-27 20:50:16",""
"39784955","HmacSHA256 Hashing in JAVA","I have been given a set of steps to obtain a hash of data. I have trying to comprehend the steps for quite long now, but the hash that I am getting doesn't seem to match expected hash.
The steps that was mentioned is as follows:

Use the FIN message input as a binary value (unsigned char in C language, byte in Java). The FIN message input must be coded in the ASCII character set.
Combine the left LAU key and the right LAU key as one string. The merged LAU key must be used as a binary value (unsigned char in C language, byte in Java). The merged LAU key must be coded in the ASCII character set.
Call a HMAC256 routine to compute the hash value. The hash value must also be treated as a binary value (unsigned char in C language, byte in Java). The hmac size is 32 bytes.
Convert the hmac binary values to uppercase hexadecimal printable characters (for example, a onebyte binary value of 0000 1010 has a hexadecimal value of 0x0A and will be translated to the twobyte characters “0A”).

This is what I have tried. 
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import javax.xml.bind.DatatypeConverter;

import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import org.apache.commons.codec.binary.Hex;

import java.io.File;
import java.io.FileInputStream;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.nio.charset.StandardCharsets;


public class ABCHash{
        public static void main(String[] args) throws Exception        
        {
                try{
                        int character;
                        StringBuffer buffer = new StringBuffer("""");
                        FileInputStream inputStream = new FileInputStream(new File(""C:/EncPDF.txt""));

                        while( (character = inputStream.read()) != -1)
                                buffer.append((char) character);

                        inputStream.close();
                        System.out.println(""Fetching data from the file""+buffer);

                        StringBuffer sbuf = new StringBuffer(buffer);

                        String str=sbuf.toString();

                        System.out.println( ""Data = ""+ str);
                        if(str!=null)
                        {
                                String key = ""0123456789ABCDEF0123456789ABCDEF""; // Assuming the key as 0123456789ABCDEF

                                byte[] hexvalue= stringToHexByte(str);
                                byte[] hexkey=stringToHexByte(key);
                                byte[] byHMAC = encode(hexkey, hexvalue);
                                String stEncryptedData = Hex.encodeHexString(byHMAC).toUpperCase();

                                System.out.println(""Encrypted data =\n ""+stEncryptedData);
                        }
                }
                catch(Exception e)
                {
                        System.out.println(""Exception in the file reading""+e);
                }

        }

        private static byte[] encode(byte[] hexkey, byte[] hexvalue) {
                try {
                        Mac sha256_HMAC = Mac.getInstance(""HmacSHA256"");
                        SecretKeySpec secret_key = new SecretKeySpec(hexkey, ""HmacSHA256"");
                        sha256_HMAC.init(secret_key);

                        return sha256_HMAC.doFinal(hexvalue);

                } catch (NoSuchAlgorithmException e) {
                        e.printStackTrace();
                } catch (InvalidKeyException e) {
                        e.printStackTrace();
                }

                return null;
        }

        public static String stringToHex(String base) throws UnsupportedEncodingException
        {
                return String.format(""%040x"", new BigInteger(1, base.getBytes(StandardCharsets.US_ASCII)));
        }

        public static byte[] stringToHexByte(String base) throws UnsupportedEncodingException
        {
                System.out.println(stringToHex(base).toUpperCase());
                return DatatypeConverter.parseHexBinary(stringToHex(base).toUpperCase());
        }

}

It will be really helpful if someone can point whats wrong with the implementation.
","","11890","<java><encryption><hash><sha><hmac>","1","","0","2019-08-18 21:00:59","","4","3","","","","2016-09-30 06:23:13",""
"37041254","SSL Certificate: Signature Algorithm shows ""sha256rsa"" but thumbprint algorithm shows ""sha1""","I have a certificate where Signature Algorithm shows ""sha256rsa"" but thumbprint algorithm shows""sha1"". What will be the identification of my certicate SHA1/SHA2?
Thanks!
","TL;TR: signature and thumbprint are totally different things. For strength of the certificate thumbprint is irrelevant but signature is relevant.
The signature of a certificate is the thing the issuer creates by signing the certificate. This signature is used by the TLS stack (inside the browser) to validate the trust chain. It is important to use a strong algorithm here so that nobody can create a fake certificate which looks like it was signed by a trusted issuer (CA). 
The thumbprint is just a hash over the certificate. It is mainly intended for human reception, i.e. check that the certificate is the intended one. This is usually used with self-signed certificates where the browser can not validate the certificate by itself since there is no trusted issuer and so the user should verify the certificate manually against the expected one. 
A certificate has only a single signature since it has only a single issuer. But you often find multiple thumbprints for the certificate, i.e. one with MD5, one with SHA-1 and one with SHA-256. This is because the browser does not know which one you got for manual verification and that's why it offers you the most common versions.

What will be the identification of my certicate SHA1/SHA2?

The identification is the certificate itself, i.e. neither the signature not the thumbprint. But if you mean the ""this certificate was signed with ...."" part than this is SHA-256 in your case since what counts is the signature and not some thumbprint.
","11419","<algorithm><security><ssl-certificate><rsa><sha>","5","7","1","2016-05-05 09:26:36","37046973","2","","","","","2016-05-05 02:19:17",""
"15201409","How to get SHA1 fingerprints from p12 certificate?","In order to get the keys of my  Android project, Google requires SHA1 fingerprint.
Offered this command: keytool-list-v-keystore mystore.keystore
I went through different options, but always in an error Illegal option: Files
keytool:-list [OPTION] ...
For example my command:
C:\Program Files (x86)\Java\jre7\bin>keytool -storepass mypass -list -v -keystore C:\Program Files (x86)\Java\jre7\bin\android.p12

If i set p12 file in root (c:) then i get another error - Invalid keystore format.
","For p12 format (PKCS12) use option -storetype PKCS12.
For example:
keytool -list -v -keystore mykeystore.p12 -storetype PKCS12 -storepass 123456

For keystore/certificate inspection & manipulation i recommend GUI tool Portecle (formerly: KeyToolGUI). Here is convenient windows installer.
","11301","<java><android><command-line><sha>","10","11","3","2015-06-27 20:21:19","15201662","0","3","","","","2013-03-04 12:17:48",""
"15201409","How to get SHA1 fingerprints from p12 certificate?","In order to get the keys of my  Android project, Google requires SHA1 fingerprint.
Offered this command: keytool-list-v-keystore mystore.keystore
I went through different options, but always in an error Illegal option: Files
keytool:-list [OPTION] ...
For example my command:
C:\Program Files (x86)\Java\jre7\bin>keytool -storepass mypass -list -v -keystore C:\Program Files (x86)\Java\jre7\bin\android.p12

If i set p12 file in root (c:) then i get another error - Invalid keystore format.
","This can also be done with OpenSSL:
openssl pkcs12 -in <my pkcs12 file>.p12 -nodes -passin pass:<passphrase, or blank> |openssl x509 -noout -fingerprint

","11301","<java><android><command-line><sha>","10","13","3","2015-06-27 20:21:19","15201662","0","3","","","","2013-03-04 12:17:48",""
"15201409","How to get SHA1 fingerprints from p12 certificate?","In order to get the keys of my  Android project, Google requires SHA1 fingerprint.
Offered this command: keytool-list-v-keystore mystore.keystore
I went through different options, but always in an error Illegal option: Files
keytool:-list [OPTION] ...
For example my command:
C:\Program Files (x86)\Java\jre7\bin>keytool -storepass mypass -list -v -keystore C:\Program Files (x86)\Java\jre7\bin\android.p12

If i set p12 file in root (c:) then i get another error - Invalid keystore format.
","If you are using Android Studio. You can get fastly the SHA1 certificate fingerprint (debug,release... all Build Types!!) through Gradle Tasks: 

signingReport

SHA1 is shown in Messages Logs
Android Plugin (configured in the gradle app) creates a debug mode for default. 
File route to keystore:  HOME/.android/debug.keystore
I recommend attach debug.keystore to build.gradle. To do this put a file debug.keystore to a app folder.
Extra: If you want creates for release, put a file release.keystore to a app folder. (This example uses the same debug.keystore)
","11301","<java><android><command-line><sha>","10","0","3","2015-06-27 20:21:19","15201662","0","3","","","","2013-03-04 12:17:48",""
"33773477","JWT (JSON Web Token) in PHP without using 3rd-party library. How to sign?","There are a few libraries for implementing JSON Web Tokens (JWT) in PHP, such as php-jwt.  I am writing my own, very small and simple class but cannot figure out why my signature fails validation here even though I've tried to stick to the standard.  I've been trying for hours and I'm stuck. Please help!
My code is simple
//build the headers
$headers = ['alg'=>'HS256','typ'=>'JWT'];
$headers_encoded = base64url_encode(json_encode($headers));

//build the payload
$payload = ['sub'=>'1234567890','name'=>'John Doe', 'admin'=>true];
$payload_encoded = base64url_encode(json_encode($payload));

//build the signature
$key = 'secret';
$signature = hash_hmac('SHA256',""$headers_encoded.$payload_encoded"",$key);

//build and return the token
$token = ""$headers_encoded.$payload_encoded.$signature"";
echo $token;

The base64url_encode function:
function base64url_encode($data) {
    return rtrim(strtr(base64_encode($data), '+/', '-_'), '=');
}

My headers and payload perfectly match the validation site's default JWT, but my signature doesn't match so my token is flagged as invalid.  This standard seems really straightforward so what's wrong with my signature?
","I solved it!  I did not realize that the signature itself needs to be base64 encoded. In addition, I needed to set the last optional parameter of the hash_hmac function to $raw_output=true (see the docs.  In short I needed to change my code from the original:
//build the signature
$key = 'secret';
$signature = hash_hmac('SHA256',""$headers_encoded.$payload_encoded"",$key);

//build and return the token
$token = ""$headers_encoded.$payload_encoded.$signature"";

To the corrected:
//build the signature
$key = 'secret';
$signature = hash_hmac('SHA256',""$headers_encoded.$payload_encoded"",$key,true);
$signature_encoded = base64url_encode($signature);

//build and return the token
$token = ""$headers_encoded.$payload_encoded.$signature_encoded"";
echo $token;

","11126","<php><json><authentication><jwt><sha>","11","18","1","2017-06-02 09:23:59","33773850","2","5","","","","2015-11-18 06:47:15",""
"23791999","Why does git commit --amend change the hash even if I don't make any changes?","Why does the SHA-1 hash of my latest commit change even if I don't make any changes to the commit (message, files) after running git commit --amend?
Say I run the following at the command line.
cd ~/Desktop
mkdir test_amend
cd test_amend
git init
echo 'foo' > test.txt
git add test.txt
git commit -m 'initial commit'

Then, invoking 
git log --pretty=oneline --abbrev-commit

prints the following message:
b96a901 initial commit

I then do
git commit --amend

but I change my mind and decide not to change anything in the last commit. In other words, I leave the files, directories, and message of the last commit untouched (I just save the message file and close my editor).
Then, I do
git log --pretty=oneline --abbrev-commit

one more time, I see that the hash of the commit has changed:
3ce92dc initial commit

What causes the hash to change? Does it have to do with the time stamp of the commit?
","Amending a Git commit changes the commit date (which is different from the date you initially see when running git log -- run git log --format=fuller to see the commit date). The commit date is taken into account when creating the commit hash.
","10901","<git><sha><amend>","28","4","3","2015-03-07 17:20:32","23792149","0","3","2541573","","2015-02-23 07:36:02","2014-05-21 19:20:29",""
"23791999","Why does git commit --amend change the hash even if I don't make any changes?","Why does the SHA-1 hash of my latest commit change even if I don't make any changes to the commit (message, files) after running git commit --amend?
Say I run the following at the command line.
cd ~/Desktop
mkdir test_amend
cd test_amend
git init
echo 'foo' > test.txt
git add test.txt
git commit -m 'initial commit'

Then, invoking 
git log --pretty=oneline --abbrev-commit

prints the following message:
b96a901 initial commit

I then do
git commit --amend

but I change my mind and decide not to change anything in the last commit. In other words, I leave the files, directories, and message of the last commit untouched (I just save the message file and close my editor).
Then, I do
git log --pretty=oneline --abbrev-commit

one more time, I see that the hash of the commit has changed:
3ce92dc initial commit

What causes the hash to change? Does it have to do with the time stamp of the commit?
","Yes, it's the commit timestamp. Inspecting the contents of the two commits reveals:
$ git cat-file commit 82c7363bcfd727fe2d6b0a98412f71a10c8849c9
tree d87cbcba0e2ede0752bdafc5938da35546803ba5
author Thomas <xxx> 1400700200 +0200
committer Thomas <xxx> 1400700200 +0200

hello

$ git cat-file commit 7432fcf82b65d9d757efd73ef7d6bff4707f99bd
tree d87cbcba0e2ede0752bdafc5938da35546803ba5
author Thomas <xxx> 1400700200 +0200
committer Thomas <xxx> 1400700214 +0200

hello

If you amended in the same second as the original commit, presumably you'd get the same hash.
","10901","<git><sha><amend>","28","31","3","2015-03-07 17:20:32","23792149","0","3","2541573","","2015-02-23 07:36:02","2014-05-21 19:20:29",""
"23791999","Why does git commit --amend change the hash even if I don't make any changes?","Why does the SHA-1 hash of my latest commit change even if I don't make any changes to the commit (message, files) after running git commit --amend?
Say I run the following at the command line.
cd ~/Desktop
mkdir test_amend
cd test_amend
git init
echo 'foo' > test.txt
git add test.txt
git commit -m 'initial commit'

Then, invoking 
git log --pretty=oneline --abbrev-commit

prints the following message:
b96a901 initial commit

I then do
git commit --amend

but I change my mind and decide not to change anything in the last commit. In other words, I leave the files, directories, and message of the last commit untouched (I just save the message file and close my editor).
Then, I do
git log --pretty=oneline --abbrev-commit

one more time, I see that the hash of the commit has changed:
3ce92dc initial commit

What causes the hash to change? Does it have to do with the time stamp of the commit?
","Following things go in creating commit sha object

tree object reference 
parent object reference 
author name
author commit timestamp with timezone (e.g for me its +530) [could be
different from commiter for example in case of cherry picking]
committer name
commit timestamp with timezone (e.g for me its +530)
commit message

I was trying to figure out why commit SHA ids are different after resetting and again adding the same file with exact same commit message by the same user with same parent and tree object reference .
","10901","<git><sha><amend>","28","6","3","2015-03-07 17:20:32","23792149","0","3","2541573","","2015-02-23 07:36:02","2014-05-21 19:20:29",""
"5171487","Using ruby to generate SHA512 crypt-style hashes formatted for /etc/shadow?","I want to generate SHA512 hashed passwords for inclusion directly into a /etc/shadow file for use with chef's user resource.  Normally I'd go to the stdlib's Digest library for this, but it doesn't generate the hash in the right format:
ruby-1.9.2-p136 :001 > require 'digest/sha2'
 => true 
ruby-1.9.2-p136 :002 > Digest::SHA512.hexdigest('test')
 => ""ee26b0dd4af7e749aa1a8ee3c10ae9923f618980772e473f8819a5d4940e0db27ac185f8a0e1d5f84f88bc887fd67b143732c304cc5fa9ad8e6f57f50028a8ff"" 

The format that the shadow file wants is: 
$6$/ShPQNXV$HJnibH9lw01qtYqyJQiBf81ggJB2BGUvKA7.kv39HGCeE.gD4C/SS9zAf5BrwOv3VJzvl99FpHYli9E8jykRC0

Things I've looked at:

The openssl ""dgst"" module returns the same format as .hexdigest, and its ""passwd"" module doesn't include SHA512 support.
String#crypt, but that does not support SHA512. (edit: this is only the case on OSX - modern Linux distros will work if you specify ""$6$somesalt"" as the salt)
ruby-crypt gem, but it does not support SHA512

For comparison, something that does return the proper format is PHP's crypt, but I'd rather not have to exec out to PHP for something that should be simple.
","After further research:

The mkpasswd command, which on debian is in the whois package (weird):
mkpasswd -m sha-512
String#crypt does actually call the platform's native crypt() call, however OSX (up to 10.6) does not include support for alternate ciphers.  ""password"".crypt('$6$somesalt') will work on Linux platforms.

","10786","<ruby><encryption><passwords><sha><crypt>","7","6","1","2013-02-22 16:03:27","5174746","0","3","119479","","2011-03-03 16:19:00","2011-03-02 18:03:46",""
"17534919","how to encode/decode a simple string","I'm very new to encryption, I need to encode a simple string like 'ABC123' into  something similar to that '3d3cf25845f3aae505bafbc1c8f16d0bfdea7d70f6b141c21726da8d'. 
I first tried this:
>>> import base64
>>> q = 'ABC123'
>>> w = base64.encodestring(q)
>>> w
'QUJDMTIz\n'

But it's to short, I need something longer, than I tried this:
>>> import hashlib
>>> a = hashlib.sha224(q)
>>> a.hexdigest()
'3d3cf25845f3aae505bafbc1c8f16d0bfdea7d70f6b141c21726da8d'

This is good, but now I don't know how to convert it back. If some one can help me eather with this example or suggest something else, how I can encode/decode a small string into a something longer, would be great.
UPDATE
based on plockc answer I did this, and it seems to work:
from Crypto.Cipher import AES # encryption library

BLOCK_SIZE = 32

# the character used for padding--with a block cipher such as AES, the value
# you encrypt must be a multiple of BLOCK_SIZE in length.  This character is
# used to ensure that your value is always a multiple of BLOCK_SIZE
PADDING = '{'

# one-liner to sufficiently pad the text to be encrypted
pad = lambda s: s + (BLOCK_SIZE - len(s) % BLOCK_SIZE) * PADDING

# one-liners to encrypt/encode and decrypt/decode a string
# encrypt with AES, encode with base64
EncodeAES = lambda c, s: base64.b64encode(c.encrypt(pad(s)))
DecodeAES = lambda c, e: c.decrypt(base64.b64decode(e)).rstrip(PADDING)

# create a cipher object using the random secret
cipher = AES.new('aaaaaaaaaa123456')

# encode a string
encoded = EncodeAES(cipher, 'ABC123')
print 'Encrypted string: %s' % encoded

# decode the encoded string
decoded = DecodeAES(cipher, encoded)
print 'Decrypted string: %s' % decoded

","You probably need to elaborate on how you are going to use it and why, as you have just opened Pandora's box :)
An encoding is reversible and should only be used to make data fit into something else (like base 64 binary data when you can only use text), a hash (like sha224) is not supposed to be reversible.
If you want to verify a user entering a password, you hash it (with like sha224) and store the hash, then when the user enters password again, you hash their entry and compare.  This is the simplified version, you also need to add ""salt"" to avoid a simple ""dictionary attack"".  I won't elaborate as that wasn't the question you asked.
To quickly answer your question you want an encryption library, like the cipher AES-128, which has a secret key and with the key you can recover the original data.  There will be some details in the library on how to create the key (it has to be a specific length and will be manipulated to make it that length).  If your key is based on simple passwords, go look at PBKDF2, which makes a strong encryption key from a weak password.
Don't confuse hmac as encryption (hmac uses another function, like the hashing function sha224), if the receiver of a messages shares a hmac key with the sender, they can ""authenticate"" that the message can from the sender, and it came without alteration.
Good luck!
P.S. here is a good book if you really want to start digging in:
Cryptography Engineering: Design Principles and Practical Applications
A popular related answer:
https://stackoverflow.com/a/4948393/1322463
Wikipedia has good articles too.
","10682","<python><encryption><hash><sha>","7","3","1","2013-07-08 21:10:01","17535381","6","3","1516286","","2013-07-08 21:10:01","2013-07-08 19:56:36",""
"20872829","How to cherry-pick the last sha from another branch in Git with 1 command?","I find myself doing this a lot when cherry-picking a commit from another branch.
$ git log -1 another_branch
commit <commit_sha>
// copy <commit_sha>
$ git cherry-pick <commit_sha>

Can I do all of this in one command, if so, what is it?
","Just go with:
$ git cherry-pick another_branch

This will cherry-pick the last commit from another_branch.
Branches in git are just references to the last commit in that branch, you can use them instead of commit SHAs in your commands.
","10673","<git><git-branch><sha><git-cherry-pick>","46","85","1","2014-01-01 20:22:50","20872869","0","2","","","","2014-01-01 20:18:59",""
"770900","Is MD5 less secure than SHA et. al. in a practical sense?","I've seen a few questions and answers on SO suggesting that MD5 is less secure than something like SHA.
My question is, Is this worth worrying about in my situation?
Here's an example of how I'm using it:

On the client side, I'm providing a ""secure"" checksum for a message by appending the current time and a password and then hashing it using MD5.  So: MD5(message+time+password).
On the server side, I'm checking this hash against the message that's sent using my knowledge of the time it was sent and the client's password.

In this example, am I really better off using SHA instead of MD5?
In what circumstances would the choice of hashing function really matter in a practical sense?
Edit:
Just to clarify - in my example, is there any benefit moving to an SHA algorithm?
In other words, is it feasible in this example for someone to send a message and a correct hash without knowing the shared password?
More Edits:
Apologies for repeated editing - I wasn't being clear with what I was asking.
","It depends on how valuable the contents of the messages are.  The SHA family is demonstrably more secure than MD5 (where ""more secure"" means ""harder to fake""), but if your messages are twitter updates, then you probably don't care. 
If those messages are the IPC layer of a distributed system that handles financial transactions, then maybe you care more.
Update: I should add, also, that the two digest algorithms are essentially interchangeable in many ways, so how much more trouble would it really be to use the more secure one?
Update 2: this is a much more thorough answer: http://www.schneier.com/essay-074.html
","10651","<security><hash><md5><sha>","9","5","11","2012-05-02 19:45:06","770923","1","4","-1","","2017-05-23 12:06:01","2009-04-21 03:12:46",""
"770900","Is MD5 less secure than SHA et. al. in a practical sense?","I've seen a few questions and answers on SO suggesting that MD5 is less secure than something like SHA.
My question is, Is this worth worrying about in my situation?
Here's an example of how I'm using it:

On the client side, I'm providing a ""secure"" checksum for a message by appending the current time and a password and then hashing it using MD5.  So: MD5(message+time+password).
On the server side, I'm checking this hash against the message that's sent using my knowledge of the time it was sent and the client's password.

In this example, am I really better off using SHA instead of MD5?
In what circumstances would the choice of hashing function really matter in a practical sense?
Edit:
Just to clarify - in my example, is there any benefit moving to an SHA algorithm?
In other words, is it feasible in this example for someone to send a message and a correct hash without knowing the shared password?
More Edits:
Apologies for repeated editing - I wasn't being clear with what I was asking.
","There is nothing insecure about using MD5 in this manner. MD5 was only broken in the sense that, there are algorithms that, given a bunch of data A additional data B can be generated to create a desired hash. Meaning, if someone knows the hash of a password, they could produce a string that will result with that hash. Though, these generated strings are usually very long so if you limit passwords to 20 or 30 characters you're still probably safe.
The main reason to use SHA1 over MD5 is that MD5 functions are being phased out. For example the Silverlight .Net library does not include the MD5 cryptography provider.
","10651","<security><hash><md5><sha>","9","0","11","2012-05-02 19:45:06","770923","1","4","-1","","2017-05-23 12:06:01","2009-04-21 03:12:46",""
"770900","Is MD5 less secure than SHA et. al. in a practical sense?","I've seen a few questions and answers on SO suggesting that MD5 is less secure than something like SHA.
My question is, Is this worth worrying about in my situation?
Here's an example of how I'm using it:

On the client side, I'm providing a ""secure"" checksum for a message by appending the current time and a password and then hashing it using MD5.  So: MD5(message+time+password).
On the server side, I'm checking this hash against the message that's sent using my knowledge of the time it was sent and the client's password.

In this example, am I really better off using SHA instead of MD5?
In what circumstances would the choice of hashing function really matter in a practical sense?
Edit:
Just to clarify - in my example, is there any benefit moving to an SHA algorithm?
In other words, is it feasible in this example for someone to send a message and a correct hash without knowing the shared password?
More Edits:
Apologies for repeated editing - I wasn't being clear with what I was asking.
","Yes, it is worth worrying about in practice. MD5 is so badly broken that researchers have been able to forge fake certificates that matched a real certificate signed by a certificate authority. This meant that they were able to create their own fake certificate authority, and thus could impersonate any bank or business they felt like with browsers completely trusting them.
Now, this took them a lot of time and effort using a cluster of PlayStation 3s, and several weeks to find an appropriate collision. But once broken, a hash algorithm only gets worse, never better. If you care at all about security, it would be better to choose an unbroken hash algorithm, such as one of the SHA-2 family (SHA-1 has also been weakened, though not broken as badly as MD5 is).
edit: The technique used in the link that I provided you involved being able to choose two arbitrary message prefixes and a common suffix, from which it could generate for each prefix a block of data that could be inserted between that prefix and the common suffix, to produce a message with the same MD5 sum as the message constructed from the other prefix. I cannot think of a way in which this particular vulnerability could be exploited in the situation you describe, and in general, using a secure has for message authentication is more resistant to attack than using it for digital signatures, but I can think of a few vulnerabilities you need to watch out for, which are mostly independent of the hash you choose.

As described, your algorithm involves storing the password in plain text on the server. This means that you are vulnerable to any information disclosure attacks that may be able to discover passwords on the server. You may think that if an attacker can access your database then the game is up, but your users would probably prefer if even if your server is compromised, that their passwords not be. Because of the proliferation of passwords online, many users use the same or similar passwords across services. Furthermore, information disclosure attacks may be possible even in cases when code execution or privilege escalation attacks are not.
You can mitigate this attack by storing the password on your server hashed with a random salt; you store the pair <salt,hash(password+salt)> on the server, and send the salt to the client so that it can compute hash(password+salt) to use in place of the password in the protocol you mention. This does not protect you from the next attack, however.
If an attacker can sniff a message sent from the client, he can do an offline dictionary attack against the client's password. Most users have passwords with fairly low entropy, and a good dictionary of a few hundred thousand existing passwords plus some time randomly permuting them could make finding a password given the information an attacker has from sniffing a message pretty easy.
The technique you propose does not authenticate the server. I don't know if this is a web app that you are talking about, but if it is, then someone who can perform a DNS hijack attack, or DHCP hijacking on an unsecure wireless network, or anything of the sort, can just do a man-in-the-middle attack in which they collect passwords in clear text from your clients.
While the current attack against MD5 may not work against the protocol you describe, MD5 has been severely compromised, and a hash will only ever get weaker, never stronger. Do you want to bet that you will find out about new attacks that could be used against you and will have time to upgrade hash algorithms before your attackers have a chance to exploit it? It would probably be easier to start with something that is currently stronger than MD5, to reduce your chances of having to deal with MD5 being broken further.

Now, if you're just doing this to make sure no one forges a message from another user on a forum or something, then sure, it's unlikely that anyone will put the time and effort in to break the protocol that you described. If someone really wanted to impersonate someone else, they could probably just create a new user name that has a 0 in place of a O or something even more similar using Unicode, and not even bother with trying to forge message and break hash algorithms.
If this is being used for something where the security really matters, then don't invent your own authentication system. Just use TLS/SSL. One of the fundamental rules of cryptography is not to invent your own. And then even for the case of the forum where it probably doesn't matter all that much, won't it be easier to just use something that's proven off the shelf than rolling your own?
","10651","<security><hash><md5><sha>","9","29","11","2012-05-02 19:45:06","770923","1","4","-1","","2017-05-23 12:06:01","2009-04-21 03:12:46",""
"770900","Is MD5 less secure than SHA et. al. in a practical sense?","I've seen a few questions and answers on SO suggesting that MD5 is less secure than something like SHA.
My question is, Is this worth worrying about in my situation?
Here's an example of how I'm using it:

On the client side, I'm providing a ""secure"" checksum for a message by appending the current time and a password and then hashing it using MD5.  So: MD5(message+time+password).
On the server side, I'm checking this hash against the message that's sent using my knowledge of the time it was sent and the client's password.

In this example, am I really better off using SHA instead of MD5?
In what circumstances would the choice of hashing function really matter in a practical sense?
Edit:
Just to clarify - in my example, is there any benefit moving to an SHA algorithm?
In other words, is it feasible in this example for someone to send a message and a correct hash without knowing the shared password?
More Edits:
Apologies for repeated editing - I wasn't being clear with what I was asking.
","MD5 provide more collision than SHA which mean someone can actually get same hash from different word (but it's rarely).
SHA family has been known for it's reliability, SHA1 has been standard on daily use, while SHA256/SHA512 was a standard for government and bank appliances.
For your personal website or forum, i suggest you to consider SHA1, and if you create a more serious like commerce, i suggest you to use SHA256/SHA512 (SHA2 family) 
You can check wikipedia article about MD5 & SHA
","10651","<security><hash><md5><sha>","9","0","11","2012-05-02 19:45:06","770923","1","4","-1","","2017-05-23 12:06:01","2009-04-21 03:12:46",""
"770900","Is MD5 less secure than SHA et. al. in a practical sense?","I've seen a few questions and answers on SO suggesting that MD5 is less secure than something like SHA.
My question is, Is this worth worrying about in my situation?
Here's an example of how I'm using it:

On the client side, I'm providing a ""secure"" checksum for a message by appending the current time and a password and then hashing it using MD5.  So: MD5(message+time+password).
On the server side, I'm checking this hash against the message that's sent using my knowledge of the time it was sent and the client's password.

In this example, am I really better off using SHA instead of MD5?
In what circumstances would the choice of hashing function really matter in a practical sense?
Edit:
Just to clarify - in my example, is there any benefit moving to an SHA algorithm?
In other words, is it feasible in this example for someone to send a message and a correct hash without knowing the shared password?
More Edits:
Apologies for repeated editing - I wasn't being clear with what I was asking.
","Yes, someone can send a message and a correct hash without knowing the shared password.  They just need to find a string that hashes to the same value.
How common is that? In 2007, a group from the Netherlands announced that they had predicted the winner of the 2008 U.S. Presidential election in a file with the MD5 hash value 3D515DEAD7AA16560ABA3E9DF05CBC80. They then created twelve files, all identical except for the candidate's name and an arbitrary number of spaces following, that hashed to that value. The MD5 hash value is worthless as a checksum, because too many different files give the same result.
This is the same scenario as yours, if I'm reading you right. Just replace ""candidate's name"" with ""secret password"". If you really want to be secure, you should probably use a different hash function.
","10651","<security><hash><md5><sha>","9","2","11","2012-05-02 19:45:06","770923","1","4","-1","","2017-05-23 12:06:01","2009-04-21 03:12:46",""
"770900","Is MD5 less secure than SHA et. al. in a practical sense?","I've seen a few questions and answers on SO suggesting that MD5 is less secure than something like SHA.
My question is, Is this worth worrying about in my situation?
Here's an example of how I'm using it:

On the client side, I'm providing a ""secure"" checksum for a message by appending the current time and a password and then hashing it using MD5.  So: MD5(message+time+password).
On the server side, I'm checking this hash against the message that's sent using my knowledge of the time it was sent and the client's password.

In this example, am I really better off using SHA instead of MD5?
In what circumstances would the choice of hashing function really matter in a practical sense?
Edit:
Just to clarify - in my example, is there any benefit moving to an SHA algorithm?
In other words, is it feasible in this example for someone to send a message and a correct hash without knowing the shared password?
More Edits:
Apologies for repeated editing - I wasn't being clear with what I was asking.
","In this particular case, I don't think that the weakest link your application is using md5 rather than sha. The manner in which md5 is ""broken"" is that given that md5(K) = V, it is possible to generate K' such that md5(K') = V, because the output-space is limited (not because there are any tricks to reduce the search space). However, K' is not necessarily K. This means that if you know md5(M+T+P) = V, you can generate P' such that md5(M+T+P') = V, this giving a valid entry. However, in this case the message still remains the same, and P hasn't been compromised. If the attacker tries to forge message M', with a T' timestamp, then it is highly unlikely that md5(M'+T'+P') = md5(M'+T'+P) unless P' = P. In which case, they would have brute-forced the password. If they have brute-forced the password, then that means that it doesn't matter if you used sha or md5, since checking if md5(M+T+P) = V is equivalent to checking if sha(M+T+P) = V. (except that sha might take constant time longer to calculate, that doesn't affect the complexity of the brute-force on P).
However, given the choice, you really ought to just go ahead and use sha. There is no sense in not using it, unless there is a serious drawback to using it.
A second thing is you probably shouldn't store the user's password in your database in plain-text. What you should store is a hash of the password, and then use that. In your example, the hash would be of: md5(message + time + md5(password)), and you could safely store md5(password) in your database. However, an attacker stealing your database (through something like SQL injection) would still be able to forge messages. I don't see any way around this.
","10651","<security><hash><md5><sha>","9","12","11","2012-05-02 19:45:06","770923","1","4","-1","","2017-05-23 12:06:01","2009-04-21 03:12:46",""
"770900","Is MD5 less secure than SHA et. al. in a practical sense?","I've seen a few questions and answers on SO suggesting that MD5 is less secure than something like SHA.
My question is, Is this worth worrying about in my situation?
Here's an example of how I'm using it:

On the client side, I'm providing a ""secure"" checksum for a message by appending the current time and a password and then hashing it using MD5.  So: MD5(message+time+password).
On the server side, I'm checking this hash against the message that's sent using my knowledge of the time it was sent and the client's password.

In this example, am I really better off using SHA instead of MD5?
In what circumstances would the choice of hashing function really matter in a practical sense?
Edit:
Just to clarify - in my example, is there any benefit moving to an SHA algorithm?
In other words, is it feasible in this example for someone to send a message and a correct hash without knowing the shared password?
More Edits:
Apologies for repeated editing - I wasn't being clear with what I was asking.
","if you are going to generate a hash-mac don't invent your scheme. use HMAC. there are issues with doing HASH(secret-key || message) and HASH(message || secret-key). if you are using a password as a key you should also be using a key derivation function. have a look at pbkdf2.
","10651","<security><hash><md5><sha>","9","1","11","2012-05-02 19:45:06","770923","1","4","-1","","2017-05-23 12:06:01","2009-04-21 03:12:46",""
"770900","Is MD5 less secure than SHA et. al. in a practical sense?","I've seen a few questions and answers on SO suggesting that MD5 is less secure than something like SHA.
My question is, Is this worth worrying about in my situation?
Here's an example of how I'm using it:

On the client side, I'm providing a ""secure"" checksum for a message by appending the current time and a password and then hashing it using MD5.  So: MD5(message+time+password).
On the server side, I'm checking this hash against the message that's sent using my knowledge of the time it was sent and the client's password.

In this example, am I really better off using SHA instead of MD5?
In what circumstances would the choice of hashing function really matter in a practical sense?
Edit:
Just to clarify - in my example, is there any benefit moving to an SHA algorithm?
In other words, is it feasible in this example for someone to send a message and a correct hash without knowing the shared password?
More Edits:
Apologies for repeated editing - I wasn't being clear with what I was asking.
","Brian's answer covers the issues, but I do think it needs to be explained a little less verbosely
You are using the wrong crypto algorithm here 
MD5 is wrong here, Sha1 is wrong to use here Sha2xx is wrong to use and Skein is wrong to use. 
What you should be using is something like RSA.
Let me explain: 

Your secure hash is effectively sending the password out for the world to see. 

You mention that your hash is ""time + payload + password"", if a third party gets a copy of your payload and knows the time. It can find the password (using a brute force or dictionary attack). So, its almost as if you are sending the password in clear text. 
Instead of this you should look at a public key cryptography have your server send out public keys to your agents and have the agents encrypt the data with the public key. 
No man in the middle will be able to tell whats in the messages, and no one will be able to forge the messages.
On a side note, MD5 is plenty strong most of the time. 
","10651","<security><hash><md5><sha>","9","8","11","2012-05-02 19:45:06","770923","1","4","-1","","2017-05-23 12:06:01","2009-04-21 03:12:46",""
"770900","Is MD5 less secure than SHA et. al. in a practical sense?","I've seen a few questions and answers on SO suggesting that MD5 is less secure than something like SHA.
My question is, Is this worth worrying about in my situation?
Here's an example of how I'm using it:

On the client side, I'm providing a ""secure"" checksum for a message by appending the current time and a password and then hashing it using MD5.  So: MD5(message+time+password).
On the server side, I'm checking this hash against the message that's sent using my knowledge of the time it was sent and the client's password.

In this example, am I really better off using SHA instead of MD5?
In what circumstances would the choice of hashing function really matter in a practical sense?
Edit:
Just to clarify - in my example, is there any benefit moving to an SHA algorithm?
In other words, is it feasible in this example for someone to send a message and a correct hash without knowing the shared password?
More Edits:
Apologies for repeated editing - I wasn't being clear with what I was asking.
","Both MD5 amd SHA-1 have cryptographic weaknesses. MD4 and SHA-0 are also compromised.
You can probably safely use MD6, Whirlpool, and RIPEMD-160.
See the following powerpoint from Princeton University, scroll down to the last page.
http://gcu.googlecode.com/files/11Hashing.pdf
","10651","<security><hash><md5><sha>","9","0","11","2012-05-02 19:45:06","770923","1","4","-1","","2017-05-23 12:06:01","2009-04-21 03:12:46",""
"770900","Is MD5 less secure than SHA et. al. in a practical sense?","I've seen a few questions and answers on SO suggesting that MD5 is less secure than something like SHA.
My question is, Is this worth worrying about in my situation?
Here's an example of how I'm using it:

On the client side, I'm providing a ""secure"" checksum for a message by appending the current time and a password and then hashing it using MD5.  So: MD5(message+time+password).
On the server side, I'm checking this hash against the message that's sent using my knowledge of the time it was sent and the client's password.

In this example, am I really better off using SHA instead of MD5?
In what circumstances would the choice of hashing function really matter in a practical sense?
Edit:
Just to clarify - in my example, is there any benefit moving to an SHA algorithm?
In other words, is it feasible in this example for someone to send a message and a correct hash without knowing the shared password?
More Edits:
Apologies for repeated editing - I wasn't being clear with what I was asking.
","I'm not going to comment on the MD5/SHA1/etc. issue, so perhaps you'll consider this answer moot, but something that amuses me very slightly is whenever the use of MD5 et al. for hashing passwords in databases comes up.
If someone's poking around in your database, then they might very well want to look at your password hashes, but it's just as likely they're going to want to steal personal information or any other data you may have lying around in other tables. Frankly, in that situation, you've got bigger fish to fry.
I'm not saying ignore the issue, and like I said, this doesn't really have much bearing on whether or not you should use MD5, SHA1 or whatever to hash your passwords, but I do get tickled slightly pink every time I read someone getting a bit too upset about plain text passwords in a database.
","10651","<security><hash><md5><sha>","9","0","11","2012-05-02 19:45:06","770923","1","4","-1","","2017-05-23 12:06:01","2009-04-21 03:12:46",""
"770900","Is MD5 less secure than SHA et. al. in a practical sense?","I've seen a few questions and answers on SO suggesting that MD5 is less secure than something like SHA.
My question is, Is this worth worrying about in my situation?
Here's an example of how I'm using it:

On the client side, I'm providing a ""secure"" checksum for a message by appending the current time and a password and then hashing it using MD5.  So: MD5(message+time+password).
On the server side, I'm checking this hash against the message that's sent using my knowledge of the time it was sent and the client's password.

In this example, am I really better off using SHA instead of MD5?
In what circumstances would the choice of hashing function really matter in a practical sense?
Edit:
Just to clarify - in my example, is there any benefit moving to an SHA algorithm?
In other words, is it feasible in this example for someone to send a message and a correct hash without knowing the shared password?
More Edits:
Apologies for repeated editing - I wasn't being clear with what I was asking.
","Yes, it is worth to worry about which hash to use in this case. Let's look at the attack model first. An attacker might not only try to generate values md5(M+T+P), but might also try to find the password P. In particular, if the attacker can collect tupels of values Mi, Ti, and the corresponding md5(Mi, Ti, P) then he/she might try to find P. This problem hasn't been studied as extensively for hash functions as finding collisions. My approach to this problem would be to try the same types of attacks that are used against block ciphers: e.g. differential attacks. And since MD5 already highly susceptible to differential attacks, I can certainly imagine that such an attack could be successful here. 
Hence I do recommend that you use a stronger hash function than MD5 here. I also recommend that you use HMAC instead of just md5(M+T+P), because HMAC has been designed for the situation that you describe and has accordingly been analyzed.
","10651","<security><hash><md5><sha>","9","1","11","2012-05-02 19:45:06","770923","1","4","-1","","2017-05-23 12:06:01","2009-04-21 03:12:46",""
"10587506","Creating a hash from several Java string objects","What would be the fastest and more robust (in terms of uniqueness) way for implementing a method like
public abstract String hash(String[] values);

The values[] array has 100 to 1,000 members, each of a which with few dozen characters, and the method needs to be run about 10,000 times/sec on a different values[] array each time.
Should a long string be build using a StringBuilder buffer and then a hash method invoked on the buffer contents, or is it better to keep invoking the hash method for each string from values[]?
Obviously a hash of at least 64 bits is needed (e.g., MD5) to avoid collisions, but is there anything simpler and faster that could be done, at the same quality?
For example, what about
public String hash(String[] values)
{
    long result = 0;

    for (String v:values)
    {
        result += v.hashCode();
    }

    return String.valueOf(result);
}

","Definitely don't use plain addition due to its linearity properties, but you can modify your code just slightly to achieve very good dispersion.
public String hash(String[] values) {
  long result = 17;
  for (String v:values) result = 37*result + v.hashCode();
  return String.valueOf(result);
}

","10534","<java><hash><md5><hashcode><sha>","9","10","5","2019-08-21 14:25:23","","2","","","","","2012-05-14 16:38:51",""
"10587506","Creating a hash from several Java string objects","What would be the fastest and more robust (in terms of uniqueness) way for implementing a method like
public abstract String hash(String[] values);

The values[] array has 100 to 1,000 members, each of a which with few dozen characters, and the method needs to be run about 10,000 times/sec on a different values[] array each time.
Should a long string be build using a StringBuilder buffer and then a hash method invoked on the buffer contents, or is it better to keep invoking the hash method for each string from values[]?
Obviously a hash of at least 64 bits is needed (e.g., MD5) to avoid collisions, but is there anything simpler and faster that could be done, at the same quality?
For example, what about
public String hash(String[] values)
{
    long result = 0;

    for (String v:values)
    {
        result += v.hashCode();
    }

    return String.valueOf(result);
}

","First, hash code is typically numeric, e.g. int. Moreover your version of hash function create int and then makes its string representation that IMHO does not have any sense. 
I'd improve your hash method as following:
public int hash(String[] values) {
    long result = 0;
   for (String v:values) {
        result = result * 31 + v.hashCode();
    }
    return result;
}

Take a look on hashCode() implemented in class java.lang.String
","10534","<java><hash><md5><hashcode><sha>","9","1","5","2019-08-21 14:25:23","","2","","","","","2012-05-14 16:38:51",""
"10587506","Creating a hash from several Java string objects","What would be the fastest and more robust (in terms of uniqueness) way for implementing a method like
public abstract String hash(String[] values);

The values[] array has 100 to 1,000 members, each of a which with few dozen characters, and the method needs to be run about 10,000 times/sec on a different values[] array each time.
Should a long string be build using a StringBuilder buffer and then a hash method invoked on the buffer contents, or is it better to keep invoking the hash method for each string from values[]?
Obviously a hash of at least 64 bits is needed (e.g., MD5) to avoid collisions, but is there anything simpler and faster that could be done, at the same quality?
For example, what about
public String hash(String[] values)
{
    long result = 0;

    for (String v:values)
    {
        result += v.hashCode();
    }

    return String.valueOf(result);
}

","You should watch out for creating weaknesses when combining methods. (The java hash function and your own). I did a little research on cascaded ciphers, and this is an example of it. (the addition might interfere with the internals of hashCode().
The internals of hashCode() look like this:
        for (int i = 0; i < len; i++) {
            h = 31*h + val[off++];
        }

so adding numbers together will cause the last characters of all strings in the array to just be added, which doesn't lower the randomness (this is already bad enough for a hash function).
If you want real pseudorandomness, take a look at the FNV hash algorithm. It is the fastest hash algorithm out there that is especially designed for use in HashMaps.
It goes like this:
    long hash = 0xCBF29CE484222325L;
    for(String s : strings)
    {
        hash ^= s.hashCode();
        hash *= 0x100000001B3L;
    }

^ This is not the actual implementation of FNV as it takes ints as input instead of bytes, but I think it works just as well.
","10534","<java><hash><md5><hashcode><sha>","9","2","5","2019-08-21 14:25:23","","2","","","","","2012-05-14 16:38:51",""
"10587506","Creating a hash from several Java string objects","What would be the fastest and more robust (in terms of uniqueness) way for implementing a method like
public abstract String hash(String[] values);

The values[] array has 100 to 1,000 members, each of a which with few dozen characters, and the method needs to be run about 10,000 times/sec on a different values[] array each time.
Should a long string be build using a StringBuilder buffer and then a hash method invoked on the buffer contents, or is it better to keep invoking the hash method for each string from values[]?
Obviously a hash of at least 64 bits is needed (e.g., MD5) to avoid collisions, but is there anything simpler and faster that could be done, at the same quality?
For example, what about
public String hash(String[] values)
{
    long result = 0;

    for (String v:values)
    {
        result += v.hashCode();
    }

    return String.valueOf(result);
}

","It doesn't provide a 64 bit hash, but given the title of the question it's probably worth mentioning that since Java 1.7 there is java.util.Objects#hash(Object...).
","10534","<java><hash><md5><hashcode><sha>","9","5","5","2019-08-21 14:25:23","","2","","","","","2012-05-14 16:38:51",""
"10587506","Creating a hash from several Java string objects","What would be the fastest and more robust (in terms of uniqueness) way for implementing a method like
public abstract String hash(String[] values);

The values[] array has 100 to 1,000 members, each of a which with few dozen characters, and the method needs to be run about 10,000 times/sec on a different values[] array each time.
Should a long string be build using a StringBuilder buffer and then a hash method invoked on the buffer contents, or is it better to keep invoking the hash method for each string from values[]?
Obviously a hash of at least 64 bits is needed (e.g., MD5) to avoid collisions, but is there anything simpler and faster that could be done, at the same quality?
For example, what about
public String hash(String[] values)
{
    long result = 0;

    for (String v:values)
    {
        result += v.hashCode();
    }

    return String.valueOf(result);
}

","Here is the simple implementation using Objects class available from Java 7. 
@Override
public int hashCode()
{
    return Objects.hash(this.variable1, this.variable2);
}

","10534","<java><hash><md5><hashcode><sha>","9","2","5","2019-08-21 14:25:23","","2","","","","","2012-05-14 16:38:51",""
"15441315","Java and Hash algorithm to compare files","I have to fingerprint files to match doublets. What is recommended with Java in 2013? Should I also compare the file size, or is this a unnecessary check?
The probability of false positive should be very close to 0
EDIT: Lots of answers, thanks. What is the standard of backup software today? SHA-256? higher? I guess md5 is not suitable?
","Are you asking how to getting the md5 checksums of files in Java? If that's the case then  read the accepted answers here and here. Basically, do this:
import java.security.DigestInputStream;
...
...

MessageDigest md_1 = MessageDigest.getInstance(""MD5"");
MessageDigest md_2 = MessageDigest.getInstance(""MD5"");
InputStream is_1 = new FileInputStream(""file1.txt"");
InputStream is_2 = new FileInputStream(""file2.txt"");
try {
  is_1 = new DigestInputStream(is_1, md_1);
  is_2 = new DigestInputStream(is_2, md_2);
}
finally {
  is_1.close();
  is_2.close();
}
byte[] digest_1 = md_1.digest();
byte[] digest_2 = md_2.digest();

// compare digest_1 and digest_2


Should I also compare the file size, or is this a unnecessary check?

It is unnecessary.
","10357","<java><hash><md5><sha>","5","1","2","2015-04-29 05:51:30","15441433","4","3","514069","","2013-03-15 20:29:08","2013-03-15 20:13:09","2013-03-16 10:08:38"
"15441315","Java and Hash algorithm to compare files","I have to fingerprint files to match doublets. What is recommended with Java in 2013? Should I also compare the file size, or is this a unnecessary check?
The probability of false positive should be very close to 0
EDIT: Lots of answers, thanks. What is the standard of backup software today? SHA-256? higher? I guess md5 is not suitable?
","If the probability of false positives has to be zero, as opposed to ""lower than the probability you will be struck by lightning,"" then no hash algorithm at all can be used; you must compare the files byte by byte.
For what it's worth, if you can use third-party libraries, you can use Guava to compare two files byte-by-byte with the one-liner
Files.asByteSource(file1).contentEquals(Files.asByteSource(file2));

which takes care of opening and closing the files as well as the details of comparison.
If you're willing to accept false positives that are less likely than getting struck by lightning, then you could do
Files.hash(file, Hashing.sha1()); // or md5(), or sha256(), or...

which returns a HashCode, and then you can test that for equality with the hash of another file.  (That version also deals with the messiness of MessageDigest, of opening and closing the file properly, etcetera.)
","10357","<java><hash><md5><sha>","5","12","2","2015-04-29 05:51:30","15441433","4","3","514069","","2013-03-15 20:29:08","2013-03-15 20:13:09","2013-03-16 10:08:38"
"21761453","Create SHA-256 hash from a Blob/File in javascript","I need to create a SHA-256 digest from a file (~6MB) inside the browser. The only way that I've managed to do it so far was like this:
var reader = new FileReader();
reader.onload = function() {
    // this gets read of the mime-type data header
    var actual_contents = reader.result.slice(reader.result.indexOf(',') + 1);
    var what_i_need = new jsSHA(actual_contents, ""B64"").getHash(""SHA-256"", ""HEX"");
}
reader.readAsDataURL(some_file);

While this works correctly, the problem is that it's very slow. It took ~2-3 seconds for a 6MB file. How can I improve this?
","You may want to take a look at the Stanford JS Crypto Library
GitHub
Website with Examples 
From the website:

SJCL is secure. It uses the industry-standard AES algorithm at 128, 192 or 256 bits; the SHA256 hash function; the HMAC authentication code; the PBKDF2 password strengthener; and the CCM and OCB authenticated-encryption modes.

SJCL has a test page that shows how long it will take.
184 milliseconds for a SHA256 iterative. And 50 milliseconds for a SHA-256 from catameringue.
Test page
Sample code:
Encrypt data:
sjcl.encrypt(""password"", ""data"")
Decrypt data: sjcl.decrypt(""password"", ""encrypted-data"")
","10109","<javascript><html5><performance><hash><sha>","24","17","4","2016-06-21 18:07:20","","5","7","651174","","2014-02-15 23:14:17","2014-02-13 17:36:05",""
"21761453","Create SHA-256 hash from a Blob/File in javascript","I need to create a SHA-256 digest from a file (~6MB) inside the browser. The only way that I've managed to do it so far was like this:
var reader = new FileReader();
reader.onload = function() {
    // this gets read of the mime-type data header
    var actual_contents = reader.result.slice(reader.result.indexOf(',') + 1);
    var what_i_need = new jsSHA(actual_contents, ""B64"").getHash(""SHA-256"", ""HEX"");
}
reader.readAsDataURL(some_file);

While this works correctly, the problem is that it's very slow. It took ~2-3 seconds for a 6MB file. How can I improve this?
","It might be faster to use an emscripten compiled version of the crypto libraries,

Q. How fast will the compiled code be?
A. Emscripten's default code generation mode is in asm.js format,
  which is a subset of JavaScript designed to make it possible for
  JavaScript engines to execute very quickly. See here for up-to-date
  benchmark results. In many cases, asm.js can get quite close to native
  speed.

You can find an Emscripten-compiled NaCl cryptographic library here.
","10109","<javascript><html5><performance><hash><sha>","24","4","4","2016-06-21 18:07:20","","5","7","651174","","2014-02-15 23:14:17","2014-02-13 17:36:05",""
"21761453","Create SHA-256 hash from a Blob/File in javascript","I need to create a SHA-256 digest from a file (~6MB) inside the browser. The only way that I've managed to do it so far was like this:
var reader = new FileReader();
reader.onload = function() {
    // this gets read of the mime-type data header
    var actual_contents = reader.result.slice(reader.result.indexOf(',') + 1);
    var what_i_need = new jsSHA(actual_contents, ""B64"").getHash(""SHA-256"", ""HEX"");
}
reader.readAsDataURL(some_file);

While this works correctly, the problem is that it's very slow. It took ~2-3 seconds for a 6MB file. How can I improve this?
","Here is what your looking for. I derived this from a C version of the SHA256 algorithm. It also includes SHA256D. I don't think your going to get much faster than this with javascript. I tried expanding the loops and it ran slower due to optimizations run by the javascript interpreter.
// From: https://github.com/Hartland/GPL-CPU-Miner/blob/master/sha2.c

if (""undefined"" == typeof vnet) {
    vnet = new Array();
}

if (""undefined"" == typeof vnet.crypt) {
    vnet.crypt = new Array();
}

vnet.crypt.sha2 = function() {

    var sha256_h = [
        0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
        0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
    ];

    var sha256_k = [
                    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
                    0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
                    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
                    0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
                    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
                    0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
                    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
                    0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
                    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
                    0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
                    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
                    0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
                    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
                    0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
                    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
                    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
    ];

    var sha256_init = function(s) {
        s.state = [
                   sha256_h[0],
                   sha256_h[1],
                   sha256_h[2],
                   sha256_h[3],
                   sha256_h[4],
                   sha256_h[5],
                   sha256_h[6],
                   sha256_h[7],
        ];
    }; this.sha256_init = sha256_init;

/*
* SHA256 block compression function. The 256-bit state is transformed via
* the 512-bit input block to produce a new state.
*/
    var sha256_transform = function(s, b, swap) {

        var block = b.block;
        var state = s.state;

        var W;
        var S;
        var t0;
        var t1;
        var i;

        /* 1. Prepare message schedule W. */
        if (swap) {


            W = [
                 ((((block[0] ) << 24) & 0xff000000) | (((block[0] ) << 8) & 0x00ff0000) | (((block[0] ) >> 8) & 0x0000ff00) | (((block[0] ) >> 24) & 0x000000ff)),
                 ((((block[1] ) << 24) & 0xff000000) | (((block[1] ) << 8) & 0x00ff0000) | (((block[1] ) >> 8) & 0x0000ff00) | (((block[1] ) >> 24) & 0x000000ff)),
                 ((((block[2] ) << 24) & 0xff000000) | (((block[2] ) << 8) & 0x00ff0000) | (((block[2] ) >> 8) & 0x0000ff00) | (((block[2] ) >> 24) & 0x000000ff)),
                 ((((block[3] ) << 24) & 0xff000000) | (((block[3] ) << 8) & 0x00ff0000) | (((block[3] ) >> 8) & 0x0000ff00) | (((block[3] ) >> 24) & 0x000000ff)),
                 ((((block[4] ) << 24) & 0xff000000) | (((block[4] ) << 8) & 0x00ff0000) | (((block[4] ) >> 8) & 0x0000ff00) | (((block[4] ) >> 24) & 0x000000ff)),
                 ((((block[5] ) << 24) & 0xff000000) | (((block[5] ) << 8) & 0x00ff0000) | (((block[5] ) >> 8) & 0x0000ff00) | (((block[5] ) >> 24) & 0x000000ff)),
                 ((((block[6] ) << 24) & 0xff000000) | (((block[6] ) << 8) & 0x00ff0000) | (((block[6] ) >> 8) & 0x0000ff00) | (((block[6] ) >> 24) & 0x000000ff)),
                 ((((block[7] ) << 24) & 0xff000000) | (((block[7] ) << 8) & 0x00ff0000) | (((block[7] ) >> 8) & 0x0000ff00) | (((block[7] ) >> 24) & 0x000000ff)),
                 ((((block[8] ) << 24) & 0xff000000) | (((block[8] ) << 8) & 0x00ff0000) | (((block[8] ) >> 8) & 0x0000ff00) | (((block[8] ) >> 24) & 0x000000ff)),
                 ((((block[9] ) << 24) & 0xff000000) | (((block[9] ) << 8) & 0x00ff0000) | (((block[9] ) >> 8) & 0x0000ff00) | (((block[9] ) >> 24) & 0x000000ff)),
                 ((((block[10]) << 24) & 0xff000000) | (((block[10]) << 8) & 0x00ff0000) | (((block[10]) >> 8) & 0x0000ff00) | (((block[10]) >> 24) & 0x000000ff)),
                 ((((block[11]) << 24) & 0xff000000) | (((block[11]) << 8) & 0x00ff0000) | (((block[11]) >> 8) & 0x0000ff00) | (((block[11]) >> 24) & 0x000000ff)),
                 ((((block[12]) << 24) & 0xff000000) | (((block[12]) << 8) & 0x00ff0000) | (((block[12]) >> 8) & 0x0000ff00) | (((block[12]) >> 24) & 0x000000ff)),
                 ((((block[13]) << 24) & 0xff000000) | (((block[13]) << 8) & 0x00ff0000) | (((block[13]) >> 8) & 0x0000ff00) | (((block[13]) >> 24) & 0x000000ff)),
                 ((((block[14]) << 24) & 0xff000000) | (((block[14]) << 8) & 0x00ff0000) | (((block[14]) >> 8) & 0x0000ff00) | (((block[14]) >> 24) & 0x000000ff)),
                 ((((block[15]) << 24) & 0xff000000) | (((block[15]) << 8) & 0x00ff0000) | (((block[15]) >> 8) & 0x0000ff00) | (((block[15]) >> 24) & 0x000000ff))
            ];
        } else {
            W = [
                 block[0],
                 block[1],
                 block[2],
                 block[3],
                 block[4],
                 block[5],
                 block[6],
                 block[7],
                 block[8],
                 block[9],
                 block[10],
                 block[11],
                 block[12],
                 block[13],
                 block[14],
                 block[15]
            ];
        }


        for (i = 16; i < 64; i += 2) {
            W[i] = ((
                ((((W[i-2] >>> 17) | (W[i-2] << 15)) ^ ((W[i-2] >>> 19) | ((W[i-2] << 13)>>>0) ) ^ (W[i - 2] >>> 10)) >>> 0) + //s1 (W[i - 2]) + 
                W[i - 7] + 
                ((((W[i - 15] >>> 7) | (W[i - 15] << 25)) ^ ((W[i - 15] >>> 18) | ((W[i - 15] << 14) >>> 0)) ^ (W[i - 15] >>> 3))  >>> 0) + //s0 (W[i - 15]) + 
                W[i - 16]
            ) & 0xffffffff) >>> 0;

            W[i+1] = ((
                ((((W[i-1] >>> 17) | (W[i-1] << 15)) ^ ((W[i-1] >>> 19) | (W[i-1] << 13)) ^ (W[i - 1] >>> 10)) >>> 0)+ //s1 (W[i - 1]) + 
                W[i - 6] + 
                ((((W[i - 14] >>> 7) | (W[i - 14] << 25)) ^ ((W[i - 14] >>> 18) | (W[i - 14] << 14)) ^ (W[i - 14] >>> 3)) >>> 0)  + //s0 (W[i - 14]) + 
                W[i - 15]
            ) & 0xffffffff) >>> 0;
        }


        /* 2. Initialize working variables. */

        S = [
         state[0],
         state[1],
         state[2],
         state[3],
         state[4],
         state[5],
         state[6],
         state[7],
        ];

        /* 3. Mix. */


        i=0;
        for(;i<64;++i) {

            //RNDr(S,W,i)
            t0 = S[(71 - i) % 8] + 
                ((((S[(68 - i) % 8] >>> 6) | (S[(68 - i) % 8]  << 26)) ^ ((S[(68 - i) % 8] >>> 11) | (S[(68 - i) % 8] << 21)) ^ ((S[(68 - i) % 8] >>> 25) | (S[(68 - i) % 8] << 7)))) + //S1 (S[(68 - i) % 8]) +
                (((S[(68 - i) % 8] & (S[(69 - i) % 8] ^ S[(70 - i) % 8])) ^ S[(70 - i) % 8]) ) + // Ch
                W[i] + 
                sha256_k[i];

            t1 = ((((S[(64 - i) % 8] >>> 2) | ((S[(64 - i) % 8] & 3) << 30)) ^ ((S[(64 - i) % 8] >>> 13) | (S[(64 - i) % 8] << 19)) ^ ((S[(64 - i) % 8] >>> 22) | (S[(64 - i) % 8] << 10)))) + //S0 (S[(64 - i) % 8]) +
                (((S[(64 - i) % 8] & (S[(65 - i) % 8] | S[(66 - i) % 8])) | (S[(65 - i) % 8] & S[(66 - i) % 8]))); // Maj

            S[(67 - i) % 8] = ((S[(67 - i) % 8] + t0) & 0xFFFFFFFF) >>> 0; 
            S[(71 - i) % 8] = ((t0 + t1) & 0xFFFFFFFF) >>> 0;
        }

        /* 4. Mix local working variables into global state */

        i=0;
        for(;i<8;++i) {
            s.state[i] = (0xFFFFFFFF & (state[i] + S[i])) >>> 0;
        }

    }; this.sha256_transform = sha256_transform;

    var sha256d_hash1 = [
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x80000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000100
    ];

    var sha256d_80_swap = function(hash, data) 
    {

        var S = new Array();

        var i;

        var b1 = new Array();
        var b2 = new Array();
        var b3 = new Array();

        b1.block = [
            data[0],
            data[1],
            data[2],
            data[3],
            data[4],
            data[5],
            data[6],
            data[7],
            data[8],
            data[9],
            data[10],
            data[11],
            data[12],
            data[13],
            data[14],
            data[15]
        ];

        b2.block = [
            data[16],
            data[17],
            data[18],
            data[19],
            data[20],
            data[21],
            data[22],
            data[23],
            data[24],
            data[25],
            data[26],
            data[27],
            data[28],
            data[29],
            data[30],
            data[31]
        ];

        sha256_init(S);
        sha256_transform(S, b1, 0);
        sha256_transform(S, b2, 0);

        b3.block = [
            S.state[0],
            S.state[1],
            S.state[2],
            S.state[3],
            S.state[4],
            S.state[5],
            S.state[6],
            S.state[7],
            sha256d_hash1[8],
            sha256d_hash1[9],
            sha256d_hash1[10],
            sha256d_hash1[11],
            sha256d_hash1[12],
            sha256d_hash1[13],
            sha256d_hash1[14],
            sha256d_hash1[15]
        ];

        sha256_init(hash);
        sha256_transform(hash, b3, 0);

        for (i = 0; i < 8; i++) {
            hash.state[i] = ((((hash.state[i] ) << 24) & 0xff000000) | (((hash.state[i] ) << 8) & 0x00ff0000) | (((hash.state[i] ) >> 8) & 0x0000ff00) | (((hash.state[i] ) >> 24) & 0x000000ff)); //swab32(hash[i]);
        }

    }; this.sha256d_80_swap = sha256d_80_swap;

    var sha256d = function(hash, data) {
        var S;
        var T;
        var block_in;

        S = new Array();
        T = new Array();

        T.block = [];

        var i, r;

        //hash.hash = new Array(32).join('0').split('').map(parseFloat);

        sha256_init(S);

        for (r = data.length; r > -9; r -= 64) {
            if (r < 64) {
                if (r > 0) {
                    block_in = data.slice(data.length - r,data.length);
                    block_in.push.apply(block_in, new Array(64-r).join('0').split('').map(parseFloat));
                } else {
                    block_in = new Array(64).join('0').split('').map(parseFloat);
                }
            } else {
                block_in = data.slice(data.length - r,data.length - r + 64);
            }

            //memcpy(T, data + len - r, r > 64 ? 64 : (r < 0 ? 0 : r));

            if (r >= 0 && r < 64) {
                block_in[r] = 0x80;
            } 

            for (i = 0; i < 16; i++) {
                T.block[i] = (((0xff & block_in[(i*4)]) << 24) | ((0xff & block_in[(i*4)+1]) << 16) | ((0xff & block_in[(i*4)+2]) << 8) | (0xff & block_in[(i*4)+3])) >>> 0;
            }

            if (r < 56) {
                T.block[15] = 8 * data.length;
            }

            sha256_transform(S, T, 0);
        }
        //memcpy(S + 8, sha256d_hash1 + 8, 32);
        S.block = S.state;
        for(i=8;i<16;i++) {
            S.block[i] =  sha256d_hash1[i];
        }

        sha256_init(T);
        sha256_transform(T, S, 0);

        hash.hash = [ 
                  (T.state[0] >> 24) & 0xff,
                  (T.state[0] >> 16) & 0xff,
                  (T.state[0] >> 8) & 0xff,
                  T.state[0] & 0xff,

                  (T.state[1] >> 24) & 0xff,
                  (T.state[1] >> 16) & 0xff,
                  (T.state[1] >> 8) & 0xff,
                  T.state[1] & 0xff,

                  (T.state[2] >> 24) & 0xff,
                  (T.state[2] >> 16) & 0xff,
                  (T.state[2] >> 8) & 0xff,
                  T.state[2] & 0xff,

                  (T.state[3] >> 24) & 0xff,
                  (T.state[3] >> 16) & 0xff,
                  (T.state[3] >> 8) & 0xff,
                  T.state[3] & 0xff,

                  (T.state[4] >> 24) & 0xff,
                  (T.state[4] >> 16) & 0xff,
                  (T.state[4] >> 8) & 0xff,
                  T.state[4] & 0xff,

                  (T.state[5] >> 24) & 0xff,
                  (T.state[5] >> 16) & 0xff,
                  (T.state[5] >> 8) & 0xff,
                  T.state[5] & 0xff,

                  (T.state[6] >> 24) & 0xff,
                  (T.state[6] >> 16) & 0xff,
                  (T.state[6] >> 8) & 0xff,
                  T.state[6] & 0xff,

                  (T.state[7] >> 24) & 0xff,
                  (T.state[7] >> 16) & 0xff,
                  (T.state[7] >> 8) & 0xff,
                  T.state[7] & 0xff
         ];

    }; this.sha256d = sha256d;



    var sha256 = function(hash, data) {
        var S;
        var T;
        var block_in;

        S = new Array();
        T = new Array();

        T.block = [];

        var i, r;

        hash.hash = new Array(32).join('0').split('').map(parseFloat);

        sha256_init(S);

        for (r = data.length; r > -9; r -= 64) {

            if (r < 64) {
                if (r > 0) {
                    block_in = data.slice(data.length - r,data.length);
                    block_in.push.apply(block_in, new Array(64-r).join('0').split('').map(parseFloat));
                } else {
                    block_in = new Array(64).join('0').split('').map(parseFloat);
                }
            } else {
                block_in = data.slice(data.length - r,data.length - r + 64);
            }

            //memcpy(T, data + len - r, r > 64 ? 64 : (r < 0 ? 0 : r));

            if (r >= 0 && r < 64) {
                block_in[r] = 0x80;
            } 

            for (i = 0; i < 16; i++) {
                T.block[i] = (((0xff & block_in[(i*4)]) << 24) | ((0xff & block_in[(i*4)+1]) << 16) | ((0xff & block_in[(i*4)+2]) << 8) | (0xff & block_in[(i*4)+3])) >>> 0;
            }

            if (r < 56) {
                T.block[15] = 8 * data.length;
            }

            sha256_transform(S, T, 0);
        }

        for (i = 0; i < 8; i++) {
            //be32enc((uint32_t *)hash + i, T[i]);
            hash.hash[(i * 4)] = (S.state[i] >> 24) & 0xff;
            hash.hash[(i * 4)+1] = (S.state[i] >> 16) & 0xff
            hash.hash[(i * 4)+2] = (S.state[i] >> 8) & 0xff
            hash.hash[(i * 4)+3] = S.state[i] & 0xff;
        }
    }; this.sha256 = sha256;



};

","10109","<javascript><html5><performance><hash><sha>","24","3","4","2016-06-21 18:07:20","","5","7","651174","","2014-02-15 23:14:17","2014-02-13 17:36:05",""
"21761453","Create SHA-256 hash from a Blob/File in javascript","I need to create a SHA-256 digest from a file (~6MB) inside the browser. The only way that I've managed to do it so far was like this:
var reader = new FileReader();
reader.onload = function() {
    // this gets read of the mime-type data header
    var actual_contents = reader.result.slice(reader.result.indexOf(',') + 1);
    var what_i_need = new jsSHA(actual_contents, ""B64"").getHash(""SHA-256"", ""HEX"");
}
reader.readAsDataURL(some_file);

While this works correctly, the problem is that it's very slow. It took ~2-3 seconds for a 6MB file. How can I improve this?
","This is an old question but I thought it's worth noting that asmCrypto is significantly faster than jsSHA, and faster than CryptoJS and SJCL
https://github.com/vibornoff/asmcrypto.js/
There is also a lite version (a fork of the above) maintained by OpenPGP.js
https://github.com/openpgpjs/asmcrypto-lite
Which only includes SHA256, and a couple of AES features.
To use asmCrypto You can simply do the following:
var sha256HexValue = asmCrypto.SHA256.hex(myArraybuffer);
I'm able to hash a 150MB+ file in < 2 seconds consistently in Chrome.
","10109","<javascript><html5><performance><hash><sha>","24","6","4","2016-06-21 18:07:20","","5","7","651174","","2014-02-15 23:14:17","2014-02-13 17:36:05",""
"9661008","Compute SHA256 Hash in Android/Java and C#","I am trying to generate a SHA256 hash in android, that I then pass to an ASP.NET Web API web service and compare the hash there. As such, I need to construct a hash in Android, that given the same inputs in ASP.NET will generate an equivalent hash. I'm pulling my hair out trying to figure out what I'm doing wrong.
Here's the Android code:
public String computeHash(String input) throws NoSuchAlgorithmException{
    MessageDigest digest = MessageDigest.getInstance(""SHA-256"");
    digest.reset();
    try{
      digest.update(input.getBytes(""UTF-8""));
    } catch (UnsupportedEncodingException e){
      e.printStackTrace();
    }

    byte[] byteData = digest.digest(input.getBytes());
    StringBuffer sb = new StringBuffer();

    for (int i = 0; i < byteData.length; i++){
      sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));
    }
    return sb.toString();
}

AND HERE's THE CODE ON THE SERVER (c#):
    private static string ComputeHash(string input, HashAlgorithm algorithm)
    {

        Byte[] inputBytes = Encoding.UTF8.GetBytes(input);
        Byte[] hashedBytes = algorithm.ComputeHash(inputBytes);

        StringBuilder sb = new StringBuilder();

        for (int i = 0; i < hashedBytes.Length; i++)
        {
            sb.Append(String.Format(""{0:x2}"", hashedBytes[i]));
        }

        return sb.ToString();
    }

UPDATE: 
Here is the corrected Android/Java implementation (thank you Nikolay Elenkov):
public String computeHash(String input) throws NoSuchAlgorithmException, UnsupportedEncodingException{
    MessageDigest digest = MessageDigest.getInstance(""SHA-256"");
    digest.reset();

    byte[] byteData = digest.digest(input.getBytes(""UTF-8""));
    StringBuffer sb = new StringBuffer();

    for (int i = 0; i < byteData.length; i++){
      sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));
    }
    return sb.toString();
}

","Your Java code is wrong: you are adding the input bytes twice. If you are calculating this in one go, you need to either call only digest(bytes) or call digest() after update(bytes);
","9969","<android><asp.net><security><sha><asp.net-web-api>","34","21","1","2013-12-13 04:47:07","9661804","3","8","988216","","2012-03-12 11:14:27","2012-03-12 02:23:34",""
"44904388","Gettitng ReferenceError: ""CryptoJS"" is not defined","I have written javascript to for RSASHA256 but gettitng error crypto.js is not defined.
 function aaa(message,secret) {
     <script src=""http://crypto-
      js.googlecode.com/svn/tags/3.0.2/build/rollups/hmac-sha256.js""></script>;
     <script src=""http://crypto-
      js.googlecode.com/svn/tags/3.0.2/build/components/enc-base64-min.js""></script>;
     var hash = CryptoJS.HmacSHA256(""Message"", ""secret"");
     var hashInBase64 = CryptoJS.enc.Base64.stringify(hash);
     document.write(hashInBase64);
}

","You need to set the <script> tags inside your HTML.


 function aaa(message,secret) {
     var hash = CryptoJS.HmacSHA256(""Message"", ""secret"");
     var hashInBase64 = CryptoJS.enc.Base64.stringify(hash);
     document.write(hashInBase64);
 }
   <script src=""https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.9-1/crypto-js.js"">



","9398","<javascript><sha>","0","0","3","2019-05-30 08:45:26","44904448","4","","4693496","","2017-07-04 11:14:10","2017-07-04 11:09:49",""
"44904388","Gettitng ReferenceError: ""CryptoJS"" is not defined","I have written javascript to for RSASHA256 but gettitng error crypto.js is not defined.
 function aaa(message,secret) {
     <script src=""http://crypto-
      js.googlecode.com/svn/tags/3.0.2/build/rollups/hmac-sha256.js""></script>;
     <script src=""http://crypto-
      js.googlecode.com/svn/tags/3.0.2/build/components/enc-base64-min.js""></script>;
     var hash = CryptoJS.HmacSHA256(""Message"", ""secret"");
     var hashInBase64 = CryptoJS.enc.Base64.stringify(hash);
     document.write(hashInBase64);
}

","
Use script tag in html
or you can use jquery to load the script
$.getScript(""YourScriptOrLibraryFile.js"", function(){
  //your code
});


","9398","<javascript><sha>","0","1","3","2019-05-30 08:45:26","44904448","4","","4693496","","2017-07-04 11:14:10","2017-07-04 11:09:49",""
"44904388","Gettitng ReferenceError: ""CryptoJS"" is not defined","I have written javascript to for RSASHA256 but gettitng error crypto.js is not defined.
 function aaa(message,secret) {
     <script src=""http://crypto-
      js.googlecode.com/svn/tags/3.0.2/build/rollups/hmac-sha256.js""></script>;
     <script src=""http://crypto-
      js.googlecode.com/svn/tags/3.0.2/build/components/enc-base64-min.js""></script>;
     var hash = CryptoJS.HmacSHA256(""Message"", ""secret"");
     var hashInBase64 = CryptoJS.enc.Base64.stringify(hash);
     document.write(hashInBase64);
}

","Hi my below code is working fine for HmacSHA256 not for RSASHA256,
 function aaa(message,secret) {
 var hash = CryptoJS.HmacSHA256(""Message"", ""secret"");
 var hashInBase64 = CryptoJS.enc.Base64.stringify(hash);
 return aaa
 }

","9398","<javascript><sha>","0","0","3","2019-05-30 08:45:26","44904448","4","","4693496","","2017-07-04 11:14:10","2017-07-04 11:09:49",""
"13821003","Code example for C# and Javascript SHA256 hashing","I have an algorithm in C# running on server side which hashes a base64-encoded string.
byte[] salt = Convert.FromBase64String(serverSalt); // Step 1
SHA256Managed sha256 = new SHA256Managed(); // Step 2
byte[] hash = sha256.ComputeHash(salt); // Step 3
Echo(""String b64: "" + Convert.ToBase64String(hash)); // Step 4

The hash is then checked against a database list of hashes.
I'd love to achieve the same with javascript, using the serverSalt as it is transmitted from C# through a websocket.
I know SHA-256 hashes different between C# and Javascript because C# and Javascript have different string encodings.
But I know I can pad zeros in the byte array to make Javascript behave as C# (step 1 above is solved).
var newSalt  = getByteArrayFromCSharpString(salt); // Pad zeros where needed
function getByteArrayFromCSharpString(inString)
{
  var bytes = [];
  for (var i = 0; i < inString.length; ++i)
{
    bytes.push(inString.charCodeAt(i));
    bytes.push(0);
}
return bytes;
}

Could anyone provide some insight on which algorithms I could use to reproduce steps 2, 3 and 4?
PS: there are already questions and answers around but not a single code snippet.
","check Java script SHA256 implementation on the following URL 
http://www.movable-type.co.uk/scripts/sha256.html
","8350","<c#><javascript><base64><sha>","3","0","2","2012-12-13 14:28:10","13837543","6","1","-1","","2017-05-23 11:46:38","2012-12-11 13:01:44",""
"13821003","Code example for C# and Javascript SHA256 hashing","I have an algorithm in C# running on server side which hashes a base64-encoded string.
byte[] salt = Convert.FromBase64String(serverSalt); // Step 1
SHA256Managed sha256 = new SHA256Managed(); // Step 2
byte[] hash = sha256.ComputeHash(salt); // Step 3
Echo(""String b64: "" + Convert.ToBase64String(hash)); // Step 4

The hash is then checked against a database list of hashes.
I'd love to achieve the same with javascript, using the serverSalt as it is transmitted from C# through a websocket.
I know SHA-256 hashes different between C# and Javascript because C# and Javascript have different string encodings.
But I know I can pad zeros in the byte array to make Javascript behave as C# (step 1 above is solved).
var newSalt  = getByteArrayFromCSharpString(salt); // Pad zeros where needed
function getByteArrayFromCSharpString(inString)
{
  var bytes = [];
  for (var i = 0; i < inString.length; ++i)
{
    bytes.push(inString.charCodeAt(i));
    bytes.push(0);
}
return bytes;
}

Could anyone provide some insight on which algorithms I could use to reproduce steps 2, 3 and 4?
PS: there are already questions and answers around but not a single code snippet.
","Here's the solution, I really hope this could help other people in the same situation.
In the html file, load crypto-js library
<!-- library for doing password hashing, base64 eoncoding / decoding -->
<script src=""http://crypto-js.googlecode.com/svn/tags/3.0.2/build/components/core-min.js""></script>
<script src=""http://crypto-js.googlecode.com/svn/tags/3.0.2/build/components/enc-base64-min.js""></script>
<script src=""http://crypto-js.googlecode.com/svn/tags/3.0.2/build/rollups/sha256.js""></script>

In the javascript, do the following
// This function takes a base64 string, hashes it with the SHA256 algorithm
// and returns a base64 string. 
function hashBase64StringAndReturnBase64String(str)
{
    // Take the base64 string and parse it into a javascript variable
    var words  = CryptoJS.enc.Base64.parse(str);
    // Create the hash using the CryptoJS implementation of the SHA256 algorithm
    var hash = CryptoJS.SHA256(words);
    var outString =  hash.toString(CryptoJS.enc.Base64)
    // Display what you just got and return it
    console.log(""Output string is: "" + outString);
    return outString;
}

","8350","<c#><javascript><base64><sha>","3","6","2","2012-12-13 14:28:10","13837543","6","1","-1","","2017-05-23 11:46:38","2012-12-11 13:01:44",""
"28660441","Fast hash function with collision possibility near SHA-1","I'm using SHA-1 to detect duplicates in a program handling files. It is not required to be cryptographic strong and may be reversible. I found this list of fast hash functions https://code.google.com/p/xxhash/
What do I choose if I want a faster function and collision on random data near to SHA-1?
Maybe a 128 bit hash is good enough for file deduplication? (vs 160 bit sha-1)
In my program the hash is calculated on chuncks from 0 - 512 KB.
","Maybe this will help you:
https://softwareengineering.stackexchange.com/questions/49550/which-hashing-algorithm-is-best-for-uniqueness-and-speed

collisions rare: FNV-1, FNV-1a, DJB2, DJB2a, SDBM & MurmurHash

I don't know about xxHash but it looks also promising.
MurmurHash is very fast and version 3 supports 128bit length, I would choose this one. (Implemented in Java and Scala.)
","7697","<performance><hash><sha><murmurhash>","10","7","7","2018-04-16 16:21:38","29516556","9","2","630511","","2015-02-22 17:15:14","2015-02-22 16:46:12",""
"28660441","Fast hash function with collision possibility near SHA-1","I'm using SHA-1 to detect duplicates in a program handling files. It is not required to be cryptographic strong and may be reversible. I found this list of fast hash functions https://code.google.com/p/xxhash/
What do I choose if I want a faster function and collision on random data near to SHA-1?
Maybe a 128 bit hash is good enough for file deduplication? (vs 160 bit sha-1)
In my program the hash is calculated on chuncks from 0 - 512 KB.
","Google developed and uses (I think) FarmHash for performance-critical hashing. From the project page:

FarmHash is a successor to CityHash, and includes many of the same tricks and techniques, several of them taken from Austin Appleby’s MurmurHash.
...
On CPUs with all the necessary machine instructions, about six different hash functions can contribute to FarmHash's lineup. In some cases we've made significant performance gains over CityHash by using newer instructions that are now commonly available. However, we've also squeezed out some more speed in other ways, so the vast majority of programs using CityHash should gain at least a bit when switching to FarmHash.

(CityHash was already a performance-optimized hash function family by Google.)
It was released a year ago, at which point it was almost certainly the state of the art, at least among the published algorithms. (Or else Google would have used something better.) There's a good chance it's still the best option.
","7697","<performance><hash><sha><murmurhash>","10","2","7","2018-04-16 16:21:38","29516556","9","2","630511","","2015-02-22 17:15:14","2015-02-22 16:46:12",""
"28660441","Fast hash function with collision possibility near SHA-1","I'm using SHA-1 to detect duplicates in a program handling files. It is not required to be cryptographic strong and may be reversible. I found this list of fast hash functions https://code.google.com/p/xxhash/
What do I choose if I want a faster function and collision on random data near to SHA-1?
Maybe a 128 bit hash is good enough for file deduplication? (vs 160 bit sha-1)
In my program the hash is calculated on chuncks from 0 - 512 KB.
","The facts: 

Good hash functions, specially the cryptographic ones (like SHA-1),
require considerable CPU time because they have to honor a number of
properties that wont be very useful for you in this case;
Any hash function will give you only one certainty: if the hash values of two files are different, the files are surely different. If, however, their hash values are equal, chances are that the files are also equal, but the only way to tell for sure if this ""equality"" is not just a hash collision, is to fall back to a binary comparison of the two files.

The conclusion:
In your case I would try a much faster algorithm like CRC32, that has pretty much all the properties you need, and would be capable of handling more than 99.9% of the cases and only resorting to a slower comparison method (like binary comparison) to rule out the false positives. Being a lot faster in the great majority of comparisons would probably compensate for not having an ""awesome"" uniformity (possibly generating a few more collisions).
","7697","<performance><hash><sha><murmurhash>","10","2","7","2018-04-16 16:21:38","29516556","9","2","630511","","2015-02-22 17:15:14","2015-02-22 16:46:12",""
"28660441","Fast hash function with collision possibility near SHA-1","I'm using SHA-1 to detect duplicates in a program handling files. It is not required to be cryptographic strong and may be reversible. I found this list of fast hash functions https://code.google.com/p/xxhash/
What do I choose if I want a faster function and collision on random data near to SHA-1?
Maybe a 128 bit hash is good enough for file deduplication? (vs 160 bit sha-1)
In my program the hash is calculated on chuncks from 0 - 512 KB.
","128 bits is indeed good enough to detect different files or chunks. The risk of collision is infinitesimal, at least as long as no intentional collision is being attempted.
64 bits can also prove good enough if the number of files or chunks you want to track remain ""small enough"" (i.e. no more than a few millions ones).
Once settled the size of the hash, you need a hash with some very good distribution properties, such as the ones listed with Q.Score=10 in your link.
","7697","<performance><hash><sha><murmurhash>","10","2","7","2018-04-16 16:21:38","29516556","9","2","630511","","2015-02-22 17:15:14","2015-02-22 16:46:12",""
"28660441","Fast hash function with collision possibility near SHA-1","I'm using SHA-1 to detect duplicates in a program handling files. It is not required to be cryptographic strong and may be reversible. I found this list of fast hash functions https://code.google.com/p/xxhash/
What do I choose if I want a faster function and collision on random data near to SHA-1?
Maybe a 128 bit hash is good enough for file deduplication? (vs 160 bit sha-1)
In my program the hash is calculated on chuncks from 0 - 512 KB.
","Since the only relevant property of hash algorithms in your case is the collision probability, you should estimate it and choose the fastest algorithm which fulfills your requirements.
If we suppose your algorithm has absolute uniformity, the probability of a hash collision among n files using hashes with d possible values will be:

For example, if you need a collision probability lower than one in a million among one million of files, you will need to have more than 5*10^17 distinct hash values, which means your hashes need to have at least 59 bits. Let's round to 64 to account for possibly bad uniformity.
So I'd say any decent 64-bit hash should be sufficient for you. Longer hashes will further reduce collision probability, at a price of heavier computation and increased hash storage volume. Shorter caches like CRC32 will require you to write some explicit collision handling code.
","7697","<performance><hash><sha><murmurhash>","10","4","7","2018-04-16 16:21:38","29516556","9","2","630511","","2015-02-22 17:15:14","2015-02-22 16:46:12",""
"28660441","Fast hash function with collision possibility near SHA-1","I'm using SHA-1 to detect duplicates in a program handling files. It is not required to be cryptographic strong and may be reversible. I found this list of fast hash functions https://code.google.com/p/xxhash/
What do I choose if I want a faster function and collision on random data near to SHA-1?
Maybe a 128 bit hash is good enough for file deduplication? (vs 160 bit sha-1)
In my program the hash is calculated on chuncks from 0 - 512 KB.
","It kind of depends on how many hashes you are going to compute over in an iteration.
Eg, 64bit hash reaches a collision probability of 1 in 1000000 with 6 million hashes computed.
Refer to : Hash collision probabilities
","7697","<performance><hash><sha><murmurhash>","10","1","7","2018-04-16 16:21:38","29516556","9","2","630511","","2015-02-22 17:15:14","2015-02-22 16:46:12",""
"28660441","Fast hash function with collision possibility near SHA-1","I'm using SHA-1 to detect duplicates in a program handling files. It is not required to be cryptographic strong and may be reversible. I found this list of fast hash functions https://code.google.com/p/xxhash/
What do I choose if I want a faster function and collision on random data near to SHA-1?
Maybe a 128 bit hash is good enough for file deduplication? (vs 160 bit sha-1)
In my program the hash is calculated on chuncks from 0 - 512 KB.
","Check out MurmurHash2_160. It's a modification of MurmurHash2 which produces 160-bit output. 
It computes 5 unique results of MurmurHash2 in parallel and mixes them thoroughly. The collision probability is equivalent to SHA-1 based on the digest size.
It's still fast, but MurmurHash3_128, SpookyHash128 and MetroHash128 are probably faster, albeit with a higher (but still very unlikely) collision probability. There's also CityHash256 which produces a 256-bit output which should be faster than SHA-1 as well.
","7697","<performance><hash><sha><murmurhash>","10","1","7","2018-04-16 16:21:38","29516556","9","2","630511","","2015-02-22 17:15:14","2015-02-22 16:46:12",""
"12032821","How to verify that the source code is copied from web","I am building a web tool to check whether the submitted content is taken from web or is it submitter own work. A plagiarism detector. 
I have some idea that I can generated check sum and use that as a key to compare with other entries. However, if someone has made some small changes like including/removing comments, changing variables/function name and so on then the checksum will be different, so this approach won't work.
Any suggestions for a better way?
","Plagiarism detection is a special case of similarity detection. This is a big field of study that's almost as old as computer science its self. There is a lot of published research, and there just isn't a single simple answer.
See, eg, a Google Scholar search for ""code similarity plagiarism"" or ""plagiarism detection"". Regular Google searches for things like ""source code similarity detection algorithm"" can also be useful.
There are plenty of existing tools in the space, too, so I'm surprised you're trying to write your own.
As you've noted, a check-sum won't do the job unless the code is perfectly identical. Techniques that can help include:

Building word-frequency histograms and comparing them
Extracting comment text and looking for copied comments using text-substring matching
Extracting variable, class and method names and looking for other code that uses the same names. You have to do a lot of correction for ""obvious"" names that everyone will choose, and for names that're dictated by the problem, like implementing a particular interface or API. Private class member variables and the local variables inside a function or method are the most useful to compare. You will need the help of a compiler or at least syntax parser for the language to extract these.
Looking for differences in indenting style. Did the user use all-spaces indenting, except for this one function that's indented with tabs?
Comparing parse trees or token streams to strip out the effects of formatting. You'd usually have to compare individual functions, etc, not just the code as a whole.
... and lots more

What you'll have to do is produce a report that weighs all these factors and others and presents them to a human so the human can make a decision. Your tool should explain why it thinks two results are similar, not just that they are similar.
","7607","<security><checksum><sha><code-access-security>","6","8","2","2012-08-20 06:57:07","12033018","3","1","398670","","2012-08-20 06:16:52","2012-08-20 05:54:17",""
"12032821","How to verify that the source code is copied from web","I am building a web tool to check whether the submitted content is taken from web or is it submitter own work. A plagiarism detector. 
I have some idea that I can generated check sum and use that as a key to compare with other entries. However, if someone has made some small changes like including/removing comments, changing variables/function name and so on then the checksum will be different, so this approach won't work.
Any suggestions for a better way?
","How i would aproach this, and custom enhancements can be added lately:
Remove everything that is not a letter or number;
Use explode() with empty space character as delimiter and find all the words; now you know how many words you have in that article;
Now, you must find out how many times a word apears in that article, and increase the word indicator each time that word is found in the text;
Store this into an array, like:
$words['wordX']++;

Do this also with the seccond article that you want to check with;
Now, compare them; You know the original data; some conclusions ca be made at this step;
Using the big characters, like J from John, F from Feudalism, you can also make some conclusions;
From here you may know if the article is about the same thing, and this could be the real step #1
Now, somehow you have to parse both articles, word by word, in the same time, and see the differecnce beetween them.
A student can add a own ""original"" sentence after each sentence/paragraph found in the original article.
Make sure that if you advance to much in the parsing process on one of the articles, you somehow keep a balanced parsing process and try to parse the seccond article until you reach that balance.
i see 2 for instructions, maybe 3, or instead of 3, a function that tryes to keep the balance in the parsing process.
Also, you have to use explode() and check sentence by sentence, and word by word from each sentence and find the similarity.
I am sure that you get the idea, but i say again, you cant parse the entire WWW.
","7607","<security><checksum><sha><code-access-security>","6","0","2","2012-08-20 06:57:07","12033018","3","1","398670","","2012-08-20 06:16:52","2012-08-20 05:54:17",""
"1404615","RIPEMD-160 vs SHA-256","Can anyone shed some light into SHA-256 and RIPEMD-160, which algorithm is normally faster and what are the performance and space comparisons, if any?
By space comparisons I don't mean 160 bits and 256 bits, but what are the collisions frequency, difference in space requirements in production env. and time to calculate both.
Is RIPEMD-160 a requirement for European countries?
Any additional information, that would be helpful in deciding.
","As for SHA-256 there are no known collisions. I believe that while some advances have been made in generating collisions in SHA-1 faster than brute force, that those are still not practical and certainly not applicable for SHA-256.
I'm not very familiar with RIPEMD-160 so I cannot say much about it.
","7544","<sha><ripemd>","3","1","3","2016-05-16 00:30:21","","0","","","","","2009-09-10 10:59:24",""
"1404615","RIPEMD-160 vs SHA-256","Can anyone shed some light into SHA-256 and RIPEMD-160, which algorithm is normally faster and what are the performance and space comparisons, if any?
By space comparisons I don't mean 160 bits and 256 bits, but what are the collisions frequency, difference in space requirements in production env. and time to calculate both.
Is RIPEMD-160 a requirement for European countries?
Any additional information, that would be helpful in deciding.
","RIPMD-160 can be used to any message size while SHA is limited to 2^64-1.
and RIPMD-160 takes 160 steps during the process whereas SHA takes only 80.
as I think RIPMD-160 is better.
","7544","<sha><ripemd>","3","1","3","2016-05-16 00:30:21","","0","","","","","2009-09-10 10:59:24",""
"1404615","RIPEMD-160 vs SHA-256","Can anyone shed some light into SHA-256 and RIPEMD-160, which algorithm is normally faster and what are the performance and space comparisons, if any?
By space comparisons I don't mean 160 bits and 256 bits, but what are the collisions frequency, difference in space requirements in production env. and time to calculate both.
Is RIPEMD-160 a requirement for European countries?
Any additional information, that would be helpful in deciding.
","
Is RIPEMD-160 a requirement for European countries?

No.
","7544","<sha><ripemd>","3","0","3","2016-05-16 00:30:21","","0","","","","","2009-09-10 10:59:24",""
"3026762","Is it okay to truncate a SHA256 hash to 128 bits?","MD5 and SHA-1 hashes have weaknesses against collision attacks. SHA256 does not but it outputs 256 bits. Can I safely take the first or last 128 bits and use that as the hash? I know it will be weaker (because it has less bits) but otherwise will it work?
Basically I want to use this to uniquely identify files in a file system that might one day contain a trillion files. I'm aware of the birthday problem and a 128 bit hash should yield about a 1 in a trillion chance on a trillion files that there would be two different files with the same hash. I can live with those odds.
What I can't live with is if somebody could easily, deliberately, insert a new file with the same hash and the same beginning characters of the file. I believe in MD5 and SHA1 this is possible.
","Yes, that will work.
For the record, there are known in-use collision attacks against MD5, but the SHA-1 attacks are at this point completely theoretical (no SHA-1 collision has ever been found... yet).
","7516","<hash><md5><sha256><sha>","14","0","3","2010-06-11 23:24:53","","5","1","","","","2010-06-11 22:54:43",""
"3026762","Is it okay to truncate a SHA256 hash to 128 bits?","MD5 and SHA-1 hashes have weaknesses against collision attacks. SHA256 does not but it outputs 256 bits. Can I safely take the first or last 128 bits and use that as the hash? I know it will be weaker (because it has less bits) but otherwise will it work?
Basically I want to use this to uniquely identify files in a file system that might one day contain a trillion files. I'm aware of the birthday problem and a 128 bit hash should yield about a 1 in a trillion chance on a trillion files that there would be two different files with the same hash. I can live with those odds.
What I can't live with is if somebody could easily, deliberately, insert a new file with the same hash and the same beginning characters of the file. I believe in MD5 and SHA1 this is possible.
","But is it worth it? If you have a hash for each file, then you essentially have an overhead for each file. Let's say that each file must take up at least 512 bytes (a typical disk sector) and that you're storing these hashes compactly enough so as to not have each hash take up much more than the hash size.
So, even if all your files are 512 bytes, the smallest, you're talking either 16 / 512 = 3.1% or 32 / 512 = 6.3%. In reality, I'd bet your average file size is higher (unless all your files are 1 sector...), so that overhead would be less.
Now, the amount of space you need for hashes scales linearly with the number of files you have. Is that extra space worth that much? Even if you had your mentioned trillion files - that's 1 000 000 000 000 * 16 = ~29 TiB, which is a lot of space, but keep in mind: your data would be 1 000 000 000 000 * 512 = 465 TiB. The numbers are worthless, really, since it's still 3% or 6% overhead. But at this level, where you have a half petabyte of storage, does 15 terabytes matter? At any level, does a 3% savings mean anything? And remember, if they're larger, you save less. (Which, they probably are: good luck getting a 512 byte sector size at that hard disk size.)
So, is this 3% or less disk savings worth the potential risk in security. (Which I'll leave unanswered, as it's waaay not my cup of tea.)
Alternatively, could you, say, group files together in some logical fashion, so that you have less files? (I mean, if you have trillions of 512 byte files, do you really want to hash every byte on disk?)
","7516","<hash><md5><sha256><sha>","14","4","3","2010-06-11 23:24:53","","5","1","","","","2010-06-11 22:54:43",""
"3026762","Is it okay to truncate a SHA256 hash to 128 bits?","MD5 and SHA-1 hashes have weaknesses against collision attacks. SHA256 does not but it outputs 256 bits. Can I safely take the first or last 128 bits and use that as the hash? I know it will be weaker (because it has less bits) but otherwise will it work?
Basically I want to use this to uniquely identify files in a file system that might one day contain a trillion files. I'm aware of the birthday problem and a 128 bit hash should yield about a 1 in a trillion chance on a trillion files that there would be two different files with the same hash. I can live with those odds.
What I can't live with is if somebody could easily, deliberately, insert a new file with the same hash and the same beginning characters of the file. I believe in MD5 and SHA1 this is possible.
","Yeah that will work. Theoretically it's better to XOR the two halves together but even truncated SHA256 is stronger than MD5. You should still consider the result a 128 bit hash rather than a 256 bit hash though.
My particular recommendation in this particular case is to store and reference using HASH + uniquifier where uniquifier is the count of how many distinct files you've seen with this hash before. This way you don't absolutely fall down flat if somebody tries to store future discovered collision vectors for SHA256.
","7516","<hash><md5><sha256><sha>","14","8","3","2010-06-11 23:24:53","","5","1","","","","2010-06-11 22:54:43",""
"26133529","oclHashcat SHA256 Line Length Exception","I am running this command in my Windows cmd:
oclHashcat.exe -m 1400 hash.txt

My hash is:
$5$JLj/jsZd$hOjXUxfucZeTUYE/MB2WMnY75/Cty8V9Z8/sslogefB

I keep getting an error ""Line-Length exception"" and I am not sure why.
","That hash you posted is sha256crypt. To make hashcat load it you need to use -m 7400 instead of -m 1400.
Here's a sample list of hashes in the way how hashcat wants to load them: https://hashcat.net/wiki/doku.php?id=example_hashes
You can typically recognize those crypt() based hashes if you see this format:
$id$salt$encrypted
Where ID can be one of

1  MD5, default 1000 iterations
2a/2y/2x Blowfish, default 64 iterations
5  SHA-256, default 5000 iterations
6  SHA-512, default 5000 iterations

There are some more, but those are the most common. 
There's also an optional round= field on which the user can defines the number of iterations different to the default value. In that case, the hash looks like this:
$id$rounds=XXX$salt$encrypted
Hashcat accepts user-defined rounds as well
","7488","<linux><hash><sha><sha256><ocl>","1","4","1","2014-10-01 17:05:13","26146691","0","1","","","","2014-10-01 03:10:58",""
"18433917","Decrypt SHA1 with (password) in python","I have a function for encrypting with SHA-1 in Python, using hashlib. I take a file and encrypt the contents with this hash.
If I set a password for an encrypted text file can I use this password to decrypt and to restore the file with the original text?
","SHA-1 is not an encryption algorithm, it's a hashing algorithm. By definition, you can't ""decrypt"" anything that was hashed with the SHA-1 function, it doesn't have an inverse.
If you have an arbitrary hashed password, there's very little you can do to retrieve the original password - If you're lucky, the password could be in a database of reverse hashes, but that's as far as you can go.
And the message extraction algorithm expects the original password to perform the verification - the algorithm will hash the provided plain-text password and compare it against the stored hashed password, only if they're equal the plain-text message will be revealed.
","7418","<python><encryption><sha>","2","8","3","2013-08-25 22:11:58","18434044","0","","419","","2013-08-25 21:49:11","2013-08-25 21:29:28",""
"18433917","Decrypt SHA1 with (password) in python","I have a function for encrypting with SHA-1 in Python, using hashlib. I take a file and encrypt the contents with this hash.
If I set a password for an encrypted text file can I use this password to decrypt and to restore the file with the original text?
","Hashing functions are different than normal crypto algorithms. They are oftenly referred to as one-way ciphers, because the process data goes through is irreversible.
Differently than symmetric and assymetric encryption, hashes are used by asserting the hashed values themselves, instead of decrypting and asserting the plain-text values. To validate logins when you're using hashes, you'd hash the password the user just attempted to log in with and compare it with the hash you have on your DB. If they match, login is successful.
Cracking hashes involves guessing hashing various different strings and trying to match hashed values to the ones illegally obtained from a DB. There are lists available on the internet with millions of already hashed values to make hash cracking easier, those are known as Rainbow Tables and they can be easily countered with the use of Salts.
It's also worth noting that since hashing algorithms are able to digest GBs of data into significantly smaller strings, mathematically, two different values may have identical hashes. Even though this is very rare, it is an existing problem, and its known as Hash Collision.
Can you immagine if hashing was reversible? Hard drives would be reduntant since we would be able to hash thousands of GBs into a small string of text and reverse them as we pleased. It would be the nirvana of data compression and storage.

Related Wikipedia Articles:
Hashing Algorithms: http://en.wikipedia.org/wiki/Hash_function
Rainbow Tables: http://en.wikipedia.org/wiki/Rainbow_table
Salts: http://en.wikipedia.org/wiki/Salt_(cryptography)
Collision: http://en.wikipedia.org/wiki/Collision_(computer_science)
Symmetric Encryption: http://en.wikipedia.org/wiki/Symmetric-key_algorithm
Assymetric Encryption: http://en.wikipedia.org/wiki/Public-key_cryptography
","7418","<python><encryption><sha>","2","6","3","2013-08-25 22:11:58","18434044","0","","419","","2013-08-25 21:49:11","2013-08-25 21:29:28",""
"18433917","Decrypt SHA1 with (password) in python","I have a function for encrypting with SHA-1 in Python, using hashlib. I take a file and encrypt the contents with this hash.
If I set a password for an encrypted text file can I use this password to decrypt and to restore the file with the original text?
","Hash functions are one way tickets. You cannot use them for encryption.
Hash function algorithms are realised through modulo, xor and other familiar (one way) operations.
You may try to find what argument was used to generate hash but in theory you will never be 100% sure it is the correct value.
For example try with a really simple (useless in cryptography) hash function modulo 10. This function returns ten different values. If it's 7 you may guess the entry was 7 or 137 and 1234567. Same with md5, sha1 and better ones.
As you can see, in the case when you are using hash function that returns only 40 bytes with files that are much bigger (maybe even few hundred megabytes) there in theory exists infinite numbers of files for each possible hash.
","7418","<python><encryption><sha>","2","1","3","2013-08-25 22:11:58","18434044","0","","419","","2013-08-25 21:49:11","2013-08-25 21:29:28",""
"29523764","Fix Chrome notification about obsolete encryption in IIS8.5 and SQL Server 2012","I am trying to configure IIS 8.5 on Windows 2012 R2 so that I do not get the notification from Chrome that the website is using obsolete cryptography. The image below is from Mac OS X , but I get a similar message in Windows 8.1 where the encryption algorithm is AES_256_CBC using a SHA1 hash and key exchange is ECDHE_RSA. The problem is the SHA1 message hashing.  Google is trying to get websites to use SHA2 message hashing. On the Mac the algorithm used is SHA256 for hash signing but the problem here is the GCM modifier on AES encryption.
I have a new certificate that is 2048-bit RSA certificate supporting SHA256 message hashing.
I have used the NARTAC IIS Crypto tool to configure the IIS server. The Protocols Enabled are TLS 1.0, TLS 1.1 and TLS 1.2 The Ciphers Enabled are TripleDES 168, AES 12/128 and AES 256/256. The Hashes Enabled are SHA, SHA256, SHA384 and SHA512. The Key Exchanges Enabled are Diffie-Hellman, PKCS and ECDH. The SSL Cipher Suites Order for enabled suites are:
TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256_P256
TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256_P384
TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256_P521 (it really is this way in the latest tool)
TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384_P521
TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384_P384
TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384_P256
TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA_P521
TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA_P384
TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA_P521
TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA_P384
TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA_P256
TLS_RSA_WITH_AES_256_GCM_SHA384
TLS_RSA_WITH_AES_128_GCM_SHA256
I have tried a large number of variations of this configuration, but none have resulted in a working site with the notification from Chrome gone. If I remove the AES 128/128 from the Ciphers Enabled it appears to have no impact. If I remove SHA from the Hashes Enabled then the website is unable to communicate with the SQL Server 2012 that provides data services to the website. If I remove the SHA1 based SSL Cipher Suites from the supported order then the browser is unable to connect to the server.
Has anyone got a working configuration of Windows IIS 8.5 with SQL Server, where the Chrome notification is gone?
","Either put TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 on top of the list or don't let the server override the cipher order presented by the client (which puts the preferred ciphers on top). I don't know if there is an option for this.
For more background about the issue see https://security.stackexchange.com/questions/85532/chrome-showing-cryptography-as-obsolete/85544#85544
","7238","<google-chrome><iis><encryption><sha>","7","1","2","2018-06-08 18:16:53","","14","4","","","","2015-04-08 19:32:54",""
"29523764","Fix Chrome notification about obsolete encryption in IIS8.5 and SQL Server 2012","I am trying to configure IIS 8.5 on Windows 2012 R2 so that I do not get the notification from Chrome that the website is using obsolete cryptography. The image below is from Mac OS X , but I get a similar message in Windows 8.1 where the encryption algorithm is AES_256_CBC using a SHA1 hash and key exchange is ECDHE_RSA. The problem is the SHA1 message hashing.  Google is trying to get websites to use SHA2 message hashing. On the Mac the algorithm used is SHA256 for hash signing but the problem here is the GCM modifier on AES encryption.
I have a new certificate that is 2048-bit RSA certificate supporting SHA256 message hashing.
I have used the NARTAC IIS Crypto tool to configure the IIS server. The Protocols Enabled are TLS 1.0, TLS 1.1 and TLS 1.2 The Ciphers Enabled are TripleDES 168, AES 12/128 and AES 256/256. The Hashes Enabled are SHA, SHA256, SHA384 and SHA512. The Key Exchanges Enabled are Diffie-Hellman, PKCS and ECDH. The SSL Cipher Suites Order for enabled suites are:
TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256_P256
TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256_P384
TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256_P521 (it really is this way in the latest tool)
TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384_P521
TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384_P384
TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384_P256
TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA_P521
TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA_P384
TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA_P521
TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA_P384
TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA_P256
TLS_RSA_WITH_AES_256_GCM_SHA384
TLS_RSA_WITH_AES_128_GCM_SHA256
I have tried a large number of variations of this configuration, but none have resulted in a working site with the notification from Chrome gone. If I remove the AES 128/128 from the Ciphers Enabled it appears to have no impact. If I remove SHA from the Hashes Enabled then the website is unable to communicate with the SQL Server 2012 that provides data services to the website. If I remove the SHA1 based SSL Cipher Suites from the supported order then the browser is unable to connect to the server.
Has anyone got a working configuration of Windows IIS 8.5 with SQL Server, where the Chrome notification is gone?
","Windows Server 2012 does not appear to provide the TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 cipher suite needed to get rid of this error. See https://msdn.microsoft.com/en-us/library/windows/desktop/aa374757(v=vs.85).aspx for links to pages which list the cipher suites for the various versions of Server.  You will note that Windows Server 2012 does have this cipher suite and I found that upgrading to 2016 was the best way for me to resolve the Google error. Please note that if you upgrade to Windows Server 2016 you will again need to use your IIS_Crypto 2.0 program to order the ciphers appropriately (or whatever ordering interface you choose).  Using the Best Practices template will get you there. I chose their cipher order which yields TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 at the top of the list.
","7238","<google-chrome><iis><encryption><sha>","7","6","2","2018-06-08 18:16:53","","14","4","","","","2015-04-08 19:32:54",""
"21875903","Shortest hash? MD5 / SHA . First chars, git","I need hash function. Users will be write these hash to computer so hash should be short.
I will have about 50 000 000 records in database. Each must have own hash. I would like to have unique hashes. But if a little records have the same hash, I can accept. Unique is better.
MD2 is good secure for me, but hash is long: ""8350e5a3e24c153df2275c9f80692773"" - 32 chars. If you must write 10 MD2 hash on keybord you do not happy...
Git use SHA1 for each commit (40 chars). But in output show only first 7 chars:
$ git log
commit e2cfc89fae5b43594b2c649fd4c05bcc6d2d12ac
...
commit 56a8b4c50d4269dc3f88727472933fd81231f63b
...
commit ce2e9ddbe896b9592abbd5fcb6604b181809d523
...
commit 498c49833516ea33b6a40697634ea6e3cfd62328
...
commit b7d78aea415e64d8d441f9747fe6d5d48fe54ee5

$ git log --oneline | head -n 5
e2cfc89 commnit message...
56a8b4c commnit message...
ce2e9dd commnit message...
498c498 commnit message...
b7d78ae commnit message...

How is it secure/unique? If I will use for example first 5 or 10 chars from MD5/SHA-1/SHA-256 is it enough secure?
Thank you.
","By default git only shows 7 characters as the odds are it will be unique, and you can refer to commits/blobs using just enough characters to define it as unique. 
However, under the hood it still using the full hash. If your git tree has two commits with the same first 7 numbers, then it will throw an error if you only use 7 characters to identify one of those commits.
If the user is entering the hash for data that the system already knows about, then allow the user to enter as many characters as he thinks he needs, and if that isn't enough to uniquely identify which hash he is talking about, then error and prompt for more.
7 hex characters gives ~ 2x10^7 possible hashes. Assuming you are using a good hash - i.e. it has an even spread across the values then by square approximation you have a 50% chance of a duplicate after ~19k* hashes. Whether this is acceptable to you depends on how many you are inserting
*The number of inserts to get a 50% chance of a hash collision for a hash of N hex characters is approximately 0.5+sqrt(0.25-(2xln(0.5)x16^N))
","6877","<git><hash><md5><sha>","6","7","2","2014-02-19 13:18:20","","0","3","","","","2014-02-19 09:18:35",""
"21875903","Shortest hash? MD5 / SHA . First chars, git","I need hash function. Users will be write these hash to computer so hash should be short.
I will have about 50 000 000 records in database. Each must have own hash. I would like to have unique hashes. But if a little records have the same hash, I can accept. Unique is better.
MD2 is good secure for me, but hash is long: ""8350e5a3e24c153df2275c9f80692773"" - 32 chars. If you must write 10 MD2 hash on keybord you do not happy...
Git use SHA1 for each commit (40 chars). But in output show only first 7 chars:
$ git log
commit e2cfc89fae5b43594b2c649fd4c05bcc6d2d12ac
...
commit 56a8b4c50d4269dc3f88727472933fd81231f63b
...
commit ce2e9ddbe896b9592abbd5fcb6604b181809d523
...
commit 498c49833516ea33b6a40697634ea6e3cfd62328
...
commit b7d78aea415e64d8d441f9747fe6d5d48fe54ee5

$ git log --oneline | head -n 5
e2cfc89 commnit message...
56a8b4c commnit message...
ce2e9dd commnit message...
498c498 commnit message...
b7d78ae commnit message...

How is it secure/unique? If I will use for example first 5 or 10 chars from MD5/SHA-1/SHA-256 is it enough secure?
Thank you.
","Check out hashids, which is designed to generate unique YouTube-style hashes from your primary keys (or some other set of unique numbers). It's not really a hash in the sense that MD5 and SHA-1 are, as it's designed to be reversible.
As an example, if you want to ""hash"" your single integer primary key, you may get a relationship like
(PK: 1) <=> (hashid: 8dY0qQ)

This is seeded from a secret value that you control, so users are not able to determine the primary key they're really referencing. If your database is somewhat more involved, say with multiple shards and complex keys, you're still okay. hashids takes a list of integers as input:
(3, 171, 24) <=> (243j7Z)

As the developer, you are responsible for defining the hash's minimum length. As you generate more and more hashes, hashids may generate slightly longer hashes.
Hashes are guaranteed to be unique for a given input (initial seed, minimum hash length, and list of integers to hash):

There are no collisions. Your generated hashes should be unique. 

There is support for

JavaScript
Ruby
Python
Java
PHP
Perl
CoffeeScript
Objective-C
Go
Lua
Node.js
.NET

","6877","<git><hash><md5><sha>","6","9","2","2014-02-19 13:18:20","","0","3","","","","2014-02-19 09:18:35",""
"20207594","How to find a Github file 's SHA blob","I'm using this API to update a file on my repo, it requires me to have a valid SHA blob for a file that I want to update:
http://developer.github.com/v3/repos/contents/
How do I find the SHA blob for the specific file? Supposed in my testrepo in the test account here, what is the SHA blob for the test.txt file?
https://github.com/testacc01/testrepo01
Thank you so much!
","The docs for updating a file specify that you will need to provide the SHA for the file you will be replacing. The easiest way would be to query github for that, too. For example:
> curl https://api.github.com/repos/testacc01/testrepo01/contents/test.txt
{
  ""name"": ""test.txt"",
  ""path"": ""test.txt"",
  ""sha"": ""4f8a0fd8ab3537b85a64dcffa1487f4196164d78"",
  ""size"": 13,
 …

So, you can see what the SHA is in the ""sha"" field of the JSON response. Use that when you formulate your request to update the file with a new version. After you have successfully updated the file, the file will have a new SHA that you will need to request before it can be updated again. (Unless, I guess, your next update goes on a different branch.)
","6857","<git><github><sha><github-api>","21","15","2","2017-11-27 02:26:03","20208173","0","4","","","","2013-11-26 02:48:24",""
"20207594","How to find a Github file 's SHA blob","I'm using this API to update a file on my repo, it requires me to have a valid SHA blob for a file that I want to update:
http://developer.github.com/v3/repos/contents/
How do I find the SHA blob for the specific file? Supposed in my testrepo in the test account here, what is the SHA blob for the test.txt file?
https://github.com/testacc01/testrepo01
Thank you so much!
","If you use GraphQL API v4, you can use the following to find the sha of a specific file :
{
  repository(owner: ""testacc01"", name: ""testrepo01"") {
    object(expression: ""master:test.txt"") {
      ... on Blob {
        oid
      }
    }
  }
}

Try it in the explorer
","6857","<git><github><sha><github-api>","21","4","2","2017-11-27 02:26:03","20208173","0","4","","","","2013-11-26 02:48:24",""
"31235059","How to downgrade python version on CentOS?","I have a dedicated web server which runs CentOS 6.6
I am running some script that uses Python SHA module and I think that this module is deprecated in the current Python version.
I am consider downgrading my Python installation so that I can use this module. 
Is there a better option? If not, how should I do it?
These are my Python installation details:

rpm-python-4.8.0-38.el6_6.x86_64
dbus-python-0.83.0-6.1.el6.x86_64
gnome-python2-2.28.0-3.el6.x86_64
gnome-python2-canvas-2.28.0-3.el6.x86_64
libreport-python-2.0.9-21.el6.centos.x86_64
gnome-python2-applet-2.28.0-5.el6.x86_64
gnome-python2-gconf-2.28.0-3.el6.x86_64
gnome-python2-bonobo-2.28.0-3.el6.x86_64
python-urlgrabber-3.9.1-9.el6.noarch
python-tools-2.6.6-52.el6.x86_64
newt-python-0.52.11-3.el6.x86_64
python-ethtool-0.6-5.el6.x86_64
python-pycurl-7.19.0-8.el6.x86_64
python-docs-2.6.6-2.el6.noarch
gnome-python2-libegg-2.25.3-20.el6.x86_64
python-iwlib-0.1-1.2.el6.x86_64
libxml2-python-2.7.6-17.el6_6.1.x86_64
gnome-python2-gnome-2.28.0-3.el6.x86_64
python-iniparse-0.3.1-2.1.el6.noarch
gnome-python2-libwnck-2.28.0-5.el6.x86_64
libproxy-python-0.3.0-10.el6.x86_64
python-2.6.6-52.el6.x86_64
gnome-python2-gnomevfs-2.28.0-3.el6.x86_64
gnome-python2-desktop-2.28.0-5.el6.x86_64
gnome-python2-extras-2.25.3-20.el6.x86_64
abrt-addon-python-2.0.8-26.el6.centos.x86_64
at-spi-python-1.28.1-2.el6.centos.x86_64
python-libs-2.6.6-52.el6.x86_64
python-devel-2.6.6-52.el6.x86_64

","Instead of literally downgrading, I would consider virtualenv.  It lets you create isolated python environments, including the specific python version and the modules.
","6529","<python><python-2.7><centos><sha>","1","0","2","2015-07-05 23:39:25","31235259","4","","268093","","2015-07-05 23:39:25","2015-07-05 21:14:58",""
"31235059","How to downgrade python version on CentOS?","I have a dedicated web server which runs CentOS 6.6
I am running some script that uses Python SHA module and I think that this module is deprecated in the current Python version.
I am consider downgrading my Python installation so that I can use this module. 
Is there a better option? If not, how should I do it?
These are my Python installation details:

rpm-python-4.8.0-38.el6_6.x86_64
dbus-python-0.83.0-6.1.el6.x86_64
gnome-python2-2.28.0-3.el6.x86_64
gnome-python2-canvas-2.28.0-3.el6.x86_64
libreport-python-2.0.9-21.el6.centos.x86_64
gnome-python2-applet-2.28.0-5.el6.x86_64
gnome-python2-gconf-2.28.0-3.el6.x86_64
gnome-python2-bonobo-2.28.0-3.el6.x86_64
python-urlgrabber-3.9.1-9.el6.noarch
python-tools-2.6.6-52.el6.x86_64
newt-python-0.52.11-3.el6.x86_64
python-ethtool-0.6-5.el6.x86_64
python-pycurl-7.19.0-8.el6.x86_64
python-docs-2.6.6-2.el6.noarch
gnome-python2-libegg-2.25.3-20.el6.x86_64
python-iwlib-0.1-1.2.el6.x86_64
libxml2-python-2.7.6-17.el6_6.1.x86_64
gnome-python2-gnome-2.28.0-3.el6.x86_64
python-iniparse-0.3.1-2.1.el6.noarch
gnome-python2-libwnck-2.28.0-5.el6.x86_64
libproxy-python-0.3.0-10.el6.x86_64
python-2.6.6-52.el6.x86_64
gnome-python2-gnomevfs-2.28.0-3.el6.x86_64
gnome-python2-desktop-2.28.0-5.el6.x86_64
gnome-python2-extras-2.25.3-20.el6.x86_64
abrt-addon-python-2.0.8-26.el6.centos.x86_64
at-spi-python-1.28.1-2.el6.centos.x86_64
python-libs-2.6.6-52.el6.x86_64
python-devel-2.6.6-52.el6.x86_64

","You can always install a different version of Python using the -altinstall argument, and then run it either in a virtual environment, or just run the commands with python(version) command.
A considerable amount of CentOS is written in Python so changing the core version will most likely break some functions.
","6529","<python><python-2.7><centos><sha>","1","-1","2","2015-07-05 23:39:25","31235259","4","","268093","","2015-07-05 23:39:25","2015-07-05 21:14:58",""
"46329956","How to correctly generate SHA-256 checksum for a string in scala?","I need to generate an SHA-256 checksum from a string that will be sent as a get param.
If found this link to generate the checksum.
Genrating the checksum like so:
  val digest = MessageDigest.getInstance(""SHA-256"");      
  private def getCheckSum() = {
    println(new String(digest.digest((""Some String"").getBytes(StandardCharsets.UTF_8))))        
  }

prints checksum similar to this:
*║┼¼┬]9AòdJb:#↓o6↓T╞B5C♀¼O~╟╙àÿG

The API that we need to send this to says the checksum should look like this:
45e00158bc8454049b7208e76670466d49a5dfb2db4196

What am I doing wrong?
Please advise.
Thanks.
",".digest gives a byte array.
scala> import java.security.MessageDigest
import java.security.MessageDigest

scala> import java.math.BigInteger
import java.math.BigInteger

scala> MessageDigest.getInstance(""SHA-256"").digest(""some string"".getBytes(""UTF-8""))
res6: Array[Byte] = Array(97, -48, 52, 71, 49, 2, -41, -38, -61, 5, -112, 39, 112, 71, 31, -43, 15, 76, 91, 38, -10, -125, 26, 86, -35, -112, -75, 24, 75, 60, 48, -4)

To create the hex, use String.format, 
scala> String.format(""%032x"", new BigInteger(1, MessageDigest.getInstance(""SHA-256"").digest(""some string"".getBytes(""UTF-8""))))
res4: String = 61d034473102d7dac305902770471fd50f4c5b26f6831a56dd90b5184b3c30fc

You can verify hash with command line tool in linux, unix
$ echo -n ""some string"" | openssl dgst -sha256
61d034473102d7dac305902770471fd50f4c5b26f6831a56dd90b5184b3c30fc

","6478","<scala><sha>","5","5","3","2019-03-06 10:04:58","46330112","1","4","","","","2017-09-20 19:05:55",""
"46329956","How to correctly generate SHA-256 checksum for a string in scala?","I need to generate an SHA-256 checksum from a string that will be sent as a get param.
If found this link to generate the checksum.
Genrating the checksum like so:
  val digest = MessageDigest.getInstance(""SHA-256"");      
  private def getCheckSum() = {
    println(new String(digest.digest((""Some String"").getBytes(StandardCharsets.UTF_8))))        
  }

prints checksum similar to this:
*║┼¼┬]9AòdJb:#↓o6↓T╞B5C♀¼O~╟╙àÿG

The API that we need to send this to says the checksum should look like this:
45e00158bc8454049b7208e76670466d49a5dfb2db4196

What am I doing wrong?
Please advise.
Thanks.
","Equivalent, but a bit more efficient:
MessageDigest.getInstance(""SHA-256"")
  .digest(""some string"".getBytes(""UTF-8""))
  .map(""%02x"".format(_)).mkString

","6478","<scala><sha>","5","17","3","2019-03-06 10:04:58","46330112","1","4","","","","2017-09-20 19:05:55",""
"46329956","How to correctly generate SHA-256 checksum for a string in scala?","I need to generate an SHA-256 checksum from a string that will be sent as a get param.
If found this link to generate the checksum.
Genrating the checksum like so:
  val digest = MessageDigest.getInstance(""SHA-256"");      
  private def getCheckSum() = {
    println(new String(digest.digest((""Some String"").getBytes(StandardCharsets.UTF_8))))        
  }

prints checksum similar to this:
*║┼¼┬]9AòdJb:#↓o6↓T╞B5C♀¼O~╟╙àÿG

The API that we need to send this to says the checksum should look like this:
45e00158bc8454049b7208e76670466d49a5dfb2db4196

What am I doing wrong?
Please advise.
Thanks.
","Can use DatatypeConverter.printHexBinary.
Something like:
DatatypeConverter.printHexBinary(
  MessageDigest
    .getInstance(algorithm)
    .digest(""some string"").getBytes(""UTF-8"")))

","6478","<scala><sha>","5","1","3","2019-03-06 10:04:58","46330112","1","4","","","","2017-09-20 19:05:55",""
"30519849","VHDL: Convert String to Std_Logic_Vector","I'm writing a sha-256 hash function in VHDL and it takes in a String.  I need to convert this string to a std_logic_vector of bits. So, I must somehow extract the bits from the characters of the String, but I'm not sure of the best way.  As far as I can tell there does not exist a built in function to do this in any of the libraries.  
Is my only option to loop through each index of the string and use a case block to map the characters to their respective 8-bit ASCII counterparts?  Or is there some way to convert a character to bits?
","You can convert a string to bits with a function like this (untested):
function to_std_logic_vector(a : string) return std_logic_vector is
    variable ret : std_logic_vector(a'length*8-1 downto 0);
begin
    for i in a'range loop
        ret(i*8+7 downto i*8) := std_logic_vector(to_unsigned(character'pos(a(i)), 8));
    end loop;
    return ret;
end function to_std_logic_vector;

I don't think type string is synthesisable, so this function is only useful for simulation or static initialization.
","6477","<string><entity><vhdl><sha>","0","1","1","2016-09-13 14:24:52","30520361","4","","2855707","","2015-05-29 02:38:39","2015-05-29 01:48:22",""
"31834433","Google Maps API Key in release build doesn't work","I'm currently developing an application for Android and I'm using Google Maps API. In developer console, I added my SHA1 certificate print, followed by my package name.
Even though I put this SHA1 certificate print using keytool, I can't access to the maps.
I made lots of search, but every topics brought me to answers where error were in a wrong API Key in developer console.
But I took the right SHA1, the one of my certificate.
Thanks in advance !
","I had this same problem, it was super frustrating. What I ended up doing was taking the key I made using my release keystore and putting it in the google developers console. Then, added the following into the android manifest.
<meta-data
        android:name=""com.google.android.geo.API_KEY""
        android:value=""KEY GOES HERE""/>

I'm sure you read the documentation on this, but make sure you follow the instructions for the release certificate to the dot.
https://developers.google.com/maps/documentation/android/signup
You could also follow the link that was generated for you in the google_maps_api.xml file. This automates the process of entering the key into the developer console. However, make sure you still add that meta data value into your manifest.
","6334","<android><google-maps><certificate><key><sha>","7","7","5","2019-08-02 20:31:56","31834932","1","3","","","","2015-08-05 13:48:00",""
"31834433","Google Maps API Key in release build doesn't work","I'm currently developing an application for Android and I'm using Google Maps API. In developer console, I added my SHA1 certificate print, followed by my package name.
Even though I put this SHA1 certificate print using keytool, I can't access to the maps.
I made lots of search, but every topics brought me to answers where error were in a wrong API Key in developer console.
But I took the right SHA1, the one of my certificate.
Thanks in advance !
","The file google_maps_api.xml  has to be under res/debug/ and res/release.  The editor only shows your current run configuration which is debug by default and is a bit misleading if you do not observe the (debug) note after the folder name. Copy the google_maps_api.xml into both folder and edit make sure they have the correct API keys ofr each build. 
","6334","<android><google-maps><certificate><key><sha>","7","6","5","2019-08-02 20:31:56","31834932","1","3","","","","2015-08-05 13:48:00",""
"31834433","Google Maps API Key in release build doesn't work","I'm currently developing an application for Android and I'm using Google Maps API. In developer console, I added my SHA1 certificate print, followed by my package name.
Even though I put this SHA1 certificate print using keytool, I can't access to the maps.
I made lots of search, but every topics brought me to answers where error were in a wrong API Key in developer console.
But I took the right SHA1, the one of my certificate.
Thanks in advance !
","Android Studio also creates a TODO in the release folder for the google_maps_api xml file and lets you know of the required procedure before release. Also please do not change the key in manifest manually. When you switch to a release variant, the key is automatically updated in the manifest.
In any case do this, 

Go to the link as mentioned by @Andrew Brook
Click ""Get a key"" and continue
Either create a new project or use an existing one
Specify the options and click the button
If you already had made one before, for let's say for debug, then go to Create a new api key
Image here
Add the required name, click on ""Add package name and fingerprint""
Add your app's package name and SHA-1 key (generete it using keytool in java/jdk../bin/)
Image here
You get your ""release"" variant API key to be added in the google_maps_api.xml in the release folder. 

","6334","<android><google-maps><certificate><key><sha>","7","1","5","2019-08-02 20:31:56","31834932","1","3","","","","2015-08-05 13:48:00",""
"31834433","Google Maps API Key in release build doesn't work","I'm currently developing an application for Android and I'm using Google Maps API. In developer console, I added my SHA1 certificate print, followed by my package name.
Even though I put this SHA1 certificate print using keytool, I can't access to the maps.
I made lots of search, but every topics brought me to answers where error were in a wrong API Key in developer console.
But I took the right SHA1, the one of my certificate.
Thanks in advance !
","My Map in release mode was showing but after I publish to Play Store it was not showing.
I had mentioned both debug and release certificate SHA-1 Key to Google Developer Console but map in release mode after downloading app from play store was still not showing.
Here' what was problem:
Google Play App Signing is enabled for this app
Goto Release Management -> App Signing -> and copy the SHA-1 certificate fingerprint from App signing certificate
Paste this newly copied SHA-1 fingerprint to Developer Console and map in release mode will show.
","6334","<android><google-maps><certificate><key><sha>","7","11","5","2019-08-02 20:31:56","31834932","1","3","","","","2015-08-05 13:48:00",""
"31834433","Google Maps API Key in release build doesn't work","I'm currently developing an application for Android and I'm using Google Maps API. In developer console, I added my SHA1 certificate print, followed by my package name.
Even though I put this SHA1 certificate print using keytool, I can't access to the maps.
I made lots of search, but every topics brought me to answers where error were in a wrong API Key in developer console.
But I took the right SHA1, the one of my certificate.
Thanks in advance !
","You have to Enable the SHA key In Google Developer Console 
so at 1st go to release Management get your app SHA key (1st one ) 
then Follow this link 
 https://console.developers.google.com/flows/enableapi?apiid=maps_android_backend&keyType=CLIENT_SIDE_ANDROID&r=(Your SHA KEY)%3B(YOUR PACKAGE NAME)

Now it Will Enable the API .
now update your app with the new key . 
It will Work .
","6334","<android><google-maps><certificate><key><sha>","7","0","5","2019-08-02 20:31:56","31834932","1","3","","","","2015-08-05 13:48:00",""
"11188749","Installed OpenSSL, no openssl.h file","I have found an answer to a question on this site, which I have tried to implement from here.
I downloaded and installed openssl from here. I performed each step mentioned within the install text inside the extracted file. 
$ ./config
  $ make
  $ make test
  $ make install
These all finished without error. Then when I tried to compile the code on how to generate an SHA hash using the example code from the answered question, I am given the following error:
fatal error: openssl.h: No such file or directory
Do I have to do something more to create the openssl header file, as I thought after installing openssl without any problems it would be automatically created? This is the first time I am adding a library to C, so please excuse any naiveties on my part.
Thanks for reading. 
","Try including the -I option for compilation specifying the openssl directory when compiling your example program.
This is from the INSTALL file in the openssl directory:
  *  WRITING applications

     To write an application that is able to handle both the new
     and the old directory layout, so that it can still be compiled
     with library versions up to OpenSSL 0.9.2b without bothering
     the user, you can proceed as follows:

     -  Always use the new filename of OpenSSL header files,
        e.g. #include <openssl/ssl.h>.

     -  Create a directory ""incl"" that contains only a symbolic
        link named ""openssl"", which points to the ""include"" directory
        of OpenSSL.
        For example, your application's Makefile might contain the
        following rule, if OPENSSLDIR is a pathname (absolute or
        relative) of the directory where OpenSSL resides:

        incl/openssl:
                -mkdir incl
                cd $(OPENSSLDIR) # Check whether the directory really exists
                -ln -s `cd $(OPENSSLDIR); pwd`/include incl/openssl

        You will have to add ""incl/openssl"" to the dependencies
        of those C files that include some OpenSSL header file.

     -  Add ""-Iincl"" to your CFLAGS.

     With these additions, the OpenSSL header files will be available
     under both name variants if an old library version is used:
     Your application can reach them under names like <openssl/foo.h>,
     while the header files still are able to #include each other
     with names of the form <foo.h>.

I suggest you read the INSTALL file in the openssl source directory to get more details.
","6063","<c><openssl><sha>","1","0","1","2019-07-22 03:02:10","","1","","-1","","2017-05-23 12:04:41","2012-06-25 11:44:51",""
"24183109","What is sha-256 padding?","Studying a source code of one of the cpu miners I found this piece of code:
work->data[20] = 0x80000000;

Well, I asked the coded about it and his answer was:
""Those values are part of standard SHA-2 padding"" 
Googling ""sha 2 padding"" didn't help. Can you tell me what is this for?
I thought that md5/sha256 functions simply take data and return hash. 
I don't understand the ""padding"" concept.
","Most modern cryptographic hash functions process messages in fixed-length blocks; all but the earliest hash functions include some sort of padding scheme. It is critical for cryptographic hash functions to employ termination schemes that prevent a hash from being vulnerable to length extension attacks. The rest can be found here wiki
And by explaining with my own words: if you want to encrypt a text, the algorithm splits in into blocks of same size, if you don't have enough data at the last block the algorith adds 0's until it has the same size as the others.
","5967","<sha>","2","1","4","2018-01-11 09:51:25","24183312","0","1","","user3660182","2014-06-12 11:27:27","2014-06-12 11:22:33",""
"24183109","What is sha-256 padding?","Studying a source code of one of the cpu miners I found this piece of code:
work->data[20] = 0x80000000;

Well, I asked the coded about it and his answer was:
""Those values are part of standard SHA-2 padding"" 
Googling ""sha 2 padding"" didn't help. Can you tell me what is this for?
I thought that md5/sha256 functions simply take data and return hash. 
I don't understand the ""padding"" concept.
","You can find it documented in RFC 4634 -- SHA and HMAC-SHA, section 4.1. Quoting from the introduction of part 4:

As a summary, a ""1"" followed by a number of ""0""s followed by a 64-bit or 128-bit integer are appended to the end of the message. 

0x80000000 is 10000000000000000000000000000000 in binary. Here is your ""1"" followed by a number of ""0""s.
The reason is that SHA-256 processes the input by splitting it in blocks of fixed size. The last block might be smaller, so it is extended (padded) until its size matches the expected block size.
","5967","<sha>","2","3","4","2018-01-11 09:51:25","24183312","0","1","","user3660182","2014-06-12 11:27:27","2014-06-12 11:22:33",""
"24183109","What is sha-256 padding?","Studying a source code of one of the cpu miners I found this piece of code:
work->data[20] = 0x80000000;

Well, I asked the coded about it and his answer was:
""Those values are part of standard SHA-2 padding"" 
Googling ""sha 2 padding"" didn't help. Can you tell me what is this for?
I thought that md5/sha256 functions simply take data and return hash. 
I don't understand the ""padding"" concept.
","Basically hash algorithms need a specific block size (fixed multiple of bytes) to work with.  Adding ""padding"" to the end of a message makes it reach the next multiple of block bytes.  But, you also need to know how big the actual message is as well.  By adding a 1-bit followed by enough 0-bits to the message you can then read back from the end of the message until you hit the first 1-bit, and that is the end of your message, so you know the size of it.
","5967","<sha>","2","0","4","2018-01-11 09:51:25","24183312","0","1","","user3660182","2014-06-12 11:27:27","2014-06-12 11:22:33",""
"24183109","What is sha-256 padding?","Studying a source code of one of the cpu miners I found this piece of code:
work->data[20] = 0x80000000;

Well, I asked the coded about it and his answer was:
""Those values are part of standard SHA-2 padding"" 
Googling ""sha 2 padding"" didn't help. Can you tell me what is this for?
I thought that md5/sha256 functions simply take data and return hash. 
I don't understand the ""padding"" concept.
","SHA-2 hashes are built upon the Merkle-Damgård scheme. This means that the hash function is based on a one-way compression function which takes n + r bits of input and outputs r bits. Thus, the input must be partitioned into n-bit blocks such that the compression function can be applied to the each block with the output of the last round.
The padding is necessary such that the input can be partitioned into n-bit blocks. In particular a Merkle-Damgård compliant padding is used for security reasons (see the link for details).
","5967","<sha>","2","1","4","2018-01-11 09:51:25","24183312","0","1","","user3660182","2014-06-12 11:27:27","2014-06-12 11:22:33",""
"12430409","Base 64 Encoding a SHA-1 Hash in the Bash Shell","I have a Python command that generates the URL-safe base-64 encoding of the SHA-1 hash of a string:
>>> import base64
>>> import sha
>>> base64.urlsafe_b64encode((sha.new(""abc"").digest()))
'qZk-NkcGgWq6PiVxeFDCbJzQ2J0='

I want to do the same thing in the bash shell, but I'm running into problems:
me:~$ echo -n ""abc"" | sha1sum | sed 's/ .*//' 
a9993e364706816aba3e25717850c26c9cd0d89d
me:~$ echo -n ""abc"" | sha1sum | sed 's/ .*//' | base64
YTk5OTNlMzY0NzA2ODE2YWJhM2UyNTcxNzg1MGMyNmM5Y2QwZDg5ZAo=

I suspect that this is because of the way that sha1sum prints out (in hex format). I think base64 is reading 40 bytes, but it really should only be reading 20. I've tried piping it through iconv, but no success there:
me:~$ echo -n ""abc"" | sha1sum | sed 's/ .*//' 
a9993e364706816aba3e25717850c26c9cd0d89d
me:~$ echo -n ""abc"" | sha1sum | sed 's/ .*//' | base64
YTk5OTNlMzY0NzA2ODE2YWJhM2UyNTcxNzg1MGMyNmM5Y2QwZDg5ZAo=

What should I be doing here to get the output I'm expecting?
Thanks in advance for the help!
","digest() is not the same as hexdigest()
base64.urlsafe_b64encode((sha.new(""abc"").hexdigest()))
'YTk5OTNlMzY0NzA2ODE2YWJhM2UyNTcxNzg1MGMyNmM5Y2QwZDg5ZA=='

Docstring for digest:
Type:       builtin_function_or_method
Base Class: <type 'builtin_function_or_method'>
String Form:<built-in method digest of _hashlib.HASH object at 0x1c88940>
Namespace:  Interactive
Docstring:  Return the digest value as a **string of binary data**.

EDIT: Try:
echo -n ""abc""| openssl sha1 -binary | base64
qZk+NkcGgWq6PiVxeFDCbJzQ2J0=

","5866","<bash><utf-8><base64><sha>","1","7","1","2012-09-14 19:41:33","12430914","1","","","","","2012-09-14 18:58:20",""
"553310","Delphi: How to calculate the SHA hash of a large file","Hi I need to generate a SHA over a 5 Gig file
Do you know of a non string based Delphi library that can do this ?
","There is a Delphi interface for OpenSSL, isn't there?
That should provide you with better performances.
","5691","<delphi><sha>","11","0","5","2018-12-29 00:11:02","553344","0","4","30568","mghie","2009-02-17 19:42:35","2009-02-16 13:33:21",""
"553310","Delphi: How to calculate the SHA hash of a large file","Hi I need to generate a SHA over a 5 Gig file
Do you know of a non string based Delphi library that can do this ?
","You should use DCPcrypt v2 and read your file buffered and feed the SHA hasher with the buffer until you've read the complete 5GB file.
If you want to know how to read a large file buffered, see my answer about a file copy using custom buffering.
so in concept (no real delphi code!):
function GetShaHash(const AFilename: String)
begin
  sha := TSHAHasher.Create;
  SetLength(Result, sha.Size);
  file := OpenFile(AFilename, GENERIC_READ);
  while not eof file do
  begin
     BytesRead := ReadFile(file, buffer[0], 0, 1024 * 1024);
     sha.Update(buffer[0], BytesRead);
  end;
  sha.Final(Result[0]); 
  CloseFile(file);
end;

","5691","<delphi><sha>","11","14","5","2018-12-29 00:11:02","553344","0","4","30568","mghie","2009-02-17 19:42:35","2009-02-16 13:33:21",""
"553310","Delphi: How to calculate the SHA hash of a large file","Hi I need to generate a SHA over a 5 Gig file
Do you know of a non string based Delphi library that can do this ?
","I would recommend Wolfgang Ehrhardt's CRC/Hash. 
http://home.netsurf.de/wolfgang.ehrhardt/
It's fast and ""can be compiled with most current Pascal (TP 5/5.5/6, BP 7, VP 2.1, FPC 1.0/2.0/2.2) and Delphi versions (tested with V1 up to V7/9/10)"".
I've used it with D11/D12 too.
","5691","<delphi><sha>","11","5","5","2018-12-29 00:11:02","553344","0","4","30568","mghie","2009-02-17 19:42:35","2009-02-16 13:33:21",""
"553310","Delphi: How to calculate the SHA hash of a large file","Hi I need to generate a SHA over a 5 Gig file
Do you know of a non string based Delphi library that can do this ?
","If I remember correctly, Indy comes with several a stream based hash methods.
","5691","<delphi><sha>","11","1","5","2018-12-29 00:11:02","553344","0","4","30568","mghie","2009-02-17 19:42:35","2009-02-16 13:33:21",""
"553310","Delphi: How to calculate the SHA hash of a large file","Hi I need to generate a SHA over a 5 Gig file
Do you know of a non string based Delphi library that can do this ?
","@Davy Landman,
thank you, your answer really helped me out. This is the code I ended up using:
function HashFileSHA256(const fileName: String): String;
var
  sha256: TDCP_sha256;
  buffer: array[0..1024*1024] of byte;
  i, bytesRead: Integer;
  streamIn: TFileStream;
  hashBuf: array[0..31] of byte;
begin
  // Initialization
  Result := '';
  streamIn := TFileStream.Create(fileName, fmOpenRead);
  sha256 := TDCP_sha256.Create(nil);
  for i:=0 to Sizeof(buffer) do
    buffer[i] := 0;
  for i:=0 to Sizeof(hashBuf) do
    hashBuf[i] := 0;
  bytesRead := -1;

  // Compute
  try
    sha256.Init;
    while bytesRead <> 0 do
    begin
      bytesRead := streamIn.Read(buffer[0], Sizeof(buffer));
      sha256.Update(buffer[0], bytesRead);
    end;
    sha256.Final(hashBuf);
    for I := 0 to 31 do
      Result := Result + IntToHex(hashBuf[i], 2);
  finally
    streamIn.Free;
    sha256.Free;
  end;

  Result := LowerCase(Result);
end;

P.S.: I am a total beginner with Pascal, so this code most likely sucks. But I tested it on the MSYS2 installer and was able to verify the hash, so that's nice.
","5691","<delphi><sha>","11","0","5","2018-12-29 00:11:02","553344","0","4","30568","mghie","2009-02-17 19:42:35","2009-02-16 13:33:21",""
"49365327","get SHA256 hash of public key","I have a certificate mycert.pem . I got the public key of the certificate by command:
openssl x509 -pubkey -noout -in mycert.pem  > pubkey.pem

How can I get the SHA256 hash of the public key?
","The openssl -pubkey outputs the key in PEM format (even if you use -outform DER). 
Assuming you have a RSA public key, you have to convert the key in DER format (binary) and then get its hash value:
 openssl rsa -in pubkey.pem -pubin -outform der | openssl dgst -sha256

","5678","<openssl><sha256><sha><sha2>","2","0","1","2018-03-19 14:58:10","","0","","","","","2018-03-19 14:26:37",""
"5648929","Check if string is a hash","I'm using SHA-512 to hash my passwords (with a salt ofcourse). I don't think that what I want is possible, but let's ask anyway.
Is there a way to check if a string is a SHA-512 (or another algorithm) hash already?
When a user logs in, I want to do a check on his password. If it's still in plain text, it should get converted to a secure form.
","Obviously the only way to guess is to check the string length. I bet no one has so long password.
","5678","<php><security><passwords><sha>","1","1","6","2011-04-13 12:53:57","5649021","4","","","","","2011-04-13 12:09:00",""
"5648929","Check if string is a hash","I'm using SHA-512 to hash my passwords (with a salt ofcourse). I don't think that what I want is possible, but let's ask anyway.
Is there a way to check if a string is a SHA-512 (or another algorithm) hash already?
When a user logs in, I want to do a check on his password. If it's still in plain text, it should get converted to a secure form.
","why u want to check the hashed password during login.no user put hashed string as a password.
u must check like this
if (sha1($input_password) === 'your hased password') {
    //go ahead
}

","5678","<php><security><passwords><sha>","1","0","6","2011-04-13 12:53:57","5649021","4","","","","","2011-04-13 12:09:00",""
"5648929","Check if string is a hash","I'm using SHA-512 to hash my passwords (with a salt ofcourse). I don't think that what I want is possible, but let's ask anyway.
Is there a way to check if a string is a SHA-512 (or another algorithm) hash already?
When a user logs in, I want to do a check on his password. If it's still in plain text, it should get converted to a secure form.
","Your task is extremely simple and require no strings checking.
Just compare entered password with stored one first.
If matched - here it is, a plain password. So, you can start conversion process.
","5678","<php><security><passwords><sha>","1","6","6","2011-04-13 12:53:57","5649021","4","","","","","2011-04-13 12:09:00",""
"5648929","Check if string is a hash","I'm using SHA-512 to hash my passwords (with a salt ofcourse). I don't think that what I want is possible, but let's ask anyway.
Is there a way to check if a string is a SHA-512 (or another algorithm) hash already?
When a user logs in, I want to do a check on his password. If it's still in plain text, it should get converted to a secure form.
","As @zerkms already mentioned the string length is the most obvious thing you can test against. Also hashes usually are written in hexadecimal, so it only consists of the digits 0 to 9 and the characters a to f. Or as regular expression
/[0-9a-f]{64}/i

","5678","<php><security><passwords><sha>","1","5","6","2011-04-13 12:53:57","5649021","4","","","","","2011-04-13 12:09:00",""
"5648929","Check if string is a hash","I'm using SHA-512 to hash my passwords (with a salt ofcourse). I don't think that what I want is possible, but let's ask anyway.
Is there a way to check if a string is a SHA-512 (or another algorithm) hash already?
When a user logs in, I want to do a check on his password. If it's still in plain text, it should get converted to a secure form.
","I'm a bit confused by this question. 
When a user enters his or her password on your website, you can assume that the value in $_POST['password'] (or whatever you name it) is in plain text. Even if the user is using the result of a hash function as their password, that doesn't matter, since as far as your application is concerned, it's still plain text. That is, the hashed value is the users password, no matter the steps they took to create it, as the entry of that value into the system results in access for that user. The point of hashing user-submitted passwords on the server is so that even you don't know that users password. That way, if your database is compromised, the users password isn't revealed. 
Once you have the password, you retrieve that users salt and hashed password from the database. You take the submitted form, hash it with the user-specific salt, then compare it to the pre-hashed password from the database. If the hashed submission and the pre-hashed database values match, then you can assume the correct password was entered.
The only reason I can see for doing things as you describe, is if you had previously stored your passwords in plain text, and are now in the process of converting them all to hashes. In that case, you should simply assign each user a unique salt, hash their current plain-text password + salt, and store that as their new password. This conversion should occur all at once, when the ""hashwords"" are enabled, rather than doing it piecemeal as the users login for the first time post-transition.
","5678","<php><security><passwords><sha>","1","2","6","2011-04-13 12:53:57","5649021","4","","","","","2011-04-13 12:09:00",""
"5648929","Check if string is a hash","I'm using SHA-512 to hash my passwords (with a salt ofcourse). I don't think that what I want is possible, but let's ask anyway.
Is there a way to check if a string is a SHA-512 (or another algorithm) hash already?
When a user logs in, I want to do a check on his password. If it's still in plain text, it should get converted to a secure form.
","You can hash the user password when he/she submit the form, this require javascript ofcourse.
function myOnSubmit(aForm) {
    //Getting the password input object
    var inputPassword = aForm['password'];

    //Hashing the password before submitting
    inputPassword.value = sha512_hash(inputPassword.value);

    //Submitting
    return true;
}

Your form will be like this:
<form onsubmit=""return myOnSubmit(this);"">
<input type=""text"" name=""login""><br>
<input type=""password"" name=""password""><br>
<input type=""submit"" name=""send"">
</form>

As I know, there is no sha512 native function come with JS, so you need sha512 function, you may check this.
","5678","<php><security><passwords><sha>","1","0","6","2011-04-13 12:53:57","5649021","4","","","","","2011-04-13 12:09:00",""
"23786939","What kind of hash returns lower and upper case characters?","Sorry for my bad English...
The string:
NFkwYnB5cjA0V09HK1Q2SHZXZHNydz09
I think it's a MD5 hash, but a MD5 returns only lower case characters and, as you can see, the result returns the both (lower and upper case).
","It's not true that MD5 returns only lowercase characters.
A hash function returns a sequence of bytes, not a string. To print out bytes, you need a binary-to-text encoding. Whether there are uppercase characters in the printed string depends completely on which binary-to-text encoding you choose. For example, Base64 uses two character cases, which means you can have both uppercase and lowercase characters, while Base32 uses only one case.
","5574","<hash><base64><md5><sha1><sha>","4","15","1","2017-06-24 15:43:20","23787165","2","1","3661371","","2016-07-28 12:33:29","2014-05-21 14:59:49",""
"9245235","Go, midstate SHA-256 hash","Having 128 bytes of data, for example:
00000001c570c4764aadb3f09895619f549000b8b51a789e7f58ea750000709700000000103ca064f8c76c390683f8203043e91466a7fcc40e6ebc428fbcc2d89b574a864db8345b1b00b5ac00000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000080020000

And wanting to perform SHA-256 hash on it, one would have to separate it into two 64 bytes of data and hash them individually before hashing the results together. If one was to often change some bits in the second half of the data, one could simplify the calculations and hash the first half of the data only once. How would one do that in Google Go? I tried calling
func SingleSHA(b []byte)([]byte){
    var h hash.Hash = sha256.New()
    h.Write(b)
    return h.Sum()
}

But instead of the proper answer
e772fc6964e7b06d8f855a6166353e48b2562de4ad037abc889294cea8ed1070

I got
12E84A43CBC7689AE9916A30E1AA0F3CA12146CBF886B60103AEC21A5CFAA268

When discussing the matter on Bitcoin forum, someone mentioned that there could be some problems with getting that midstate hash.
How do I calculate a midstate SHA-256 hash in Google Go?
","The Go code you have is the right way to compute sha256 of a stream of bytes.
Most likely the answer is that what you want to do is not sha256. Specifically:

one would have to separate it into two 64 bits of data and hash them individually before hashing the results together. If one was to often change some bits in the second half of the data, one could simplify the calculations and hash the first half of the data only once.

is not a valid way to calculate sha256 (read http://doc.golang.org/src/pkg/crypto/sha256/sha256.go to e.g. see that sha256 does its work on blocks of data, which must be padded etc.). 
The algorithm you described calculates something, but not sha256. 
Since you know the expected value you presumably have some reference implementation of your algorithm in another language so just do a line-by-line port to Go.
Finally, it's a dubious optimization in any case. 128 bits is 16 bytes. Hashing cost is usually proportional to the size of data. At 16 bytes, the cost is so small that the additional work of trying to be clever by splitting data in 8 byte parts will likely cost more than what you saved.
","5560","<hash><go><state><sha256><sha>","3","3","4","2017-10-05 18:59:15","9322486","2","1","102371","","2017-10-05 18:59:15","2012-02-12 00:11:14",""
"9245235","Go, midstate SHA-256 hash","Having 128 bytes of data, for example:
00000001c570c4764aadb3f09895619f549000b8b51a789e7f58ea750000709700000000103ca064f8c76c390683f8203043e91466a7fcc40e6ebc428fbcc2d89b574a864db8345b1b00b5ac00000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000080020000

And wanting to perform SHA-256 hash on it, one would have to separate it into two 64 bytes of data and hash them individually before hashing the results together. If one was to often change some bits in the second half of the data, one could simplify the calculations and hash the first half of the data only once. How would one do that in Google Go? I tried calling
func SingleSHA(b []byte)([]byte){
    var h hash.Hash = sha256.New()
    h.Write(b)
    return h.Sum()
}

But instead of the proper answer
e772fc6964e7b06d8f855a6166353e48b2562de4ad037abc889294cea8ed1070

I got
12E84A43CBC7689AE9916A30E1AA0F3CA12146CBF886B60103AEC21A5CFAA268

When discussing the matter on Bitcoin forum, someone mentioned that there could be some problems with getting that midstate hash.
How do I calculate a midstate SHA-256 hash in Google Go?
","In sha256.go, at the start of function Sum() the implementation is making a copy of the SHA256 state. The underlying datatype of SHA256 (struct digest) is private to the sha256 package.
I would suggest to make your own private copy of the sha256.go file (it is a small file). Then add a Copy() function to save the current state of the digest:
func (d *digest) Copy() hash.Hash {
    d_copy := *d
    return &d_copy
}

Then simply call the Copy() function to save a midstate SHA256 hash.
","5560","<hash><go><state><sha256><sha>","3","2","4","2017-10-05 18:59:15","9322486","2","1","102371","","2017-10-05 18:59:15","2012-02-12 00:11:14",""
"9245235","Go, midstate SHA-256 hash","Having 128 bytes of data, for example:
00000001c570c4764aadb3f09895619f549000b8b51a789e7f58ea750000709700000000103ca064f8c76c390683f8203043e91466a7fcc40e6ebc428fbcc2d89b574a864db8345b1b00b5ac00000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000080020000

And wanting to perform SHA-256 hash on it, one would have to separate it into two 64 bytes of data and hash them individually before hashing the results together. If one was to often change some bits in the second half of the data, one could simplify the calculations and hash the first half of the data only once. How would one do that in Google Go? I tried calling
func SingleSHA(b []byte)([]byte){
    var h hash.Hash = sha256.New()
    h.Write(b)
    return h.Sum()
}

But instead of the proper answer
e772fc6964e7b06d8f855a6166353e48b2562de4ad037abc889294cea8ed1070

I got
12E84A43CBC7689AE9916A30E1AA0F3CA12146CBF886B60103AEC21A5CFAA268

When discussing the matter on Bitcoin forum, someone mentioned that there could be some problems with getting that midstate hash.
How do I calculate a midstate SHA-256 hash in Google Go?
","I ran two Go benchmarks on your 128 bytes of data, using an Intel i5 2.70 GHz CPU. First,  1,000 times, I wrote all 128 bytes to the SHA256 hash and read the sum, which took a total of about 9,285,000 nanoseconds. Second, I wrote the first 64 bytes to the SHA256 hash once and then, 1,000 times, I wrote the second 64 bytes to a copy of the SHA256 hash and read the sum, which took a total of about 6,492,371 nanoseconds. The second benchmark, which assumed the first 64 bytes are invariant, ran in 30% less time than the first benchmark.
Using the first method, you could calculate about 9,305,331,179 SHA256 128-byte sums per day before buying a faster CPU. Using the second method, you could calculate 13,307,927,103 SHA256 128-byte sums per day, assuming the first 64 bytes are invariant 1,000 times in a row, before buying a faster CPU. How many SHA256 128-byte sums per day do you need to calculate? For how many SHA256 128-byte sums per day are the first 64 bytes are invariant?
What benchmarks did you run and what were the results?
","5560","<hash><go><state><sha256><sha>","3","0","4","2017-10-05 18:59:15","9322486","2","1","102371","","2017-10-05 18:59:15","2012-02-12 00:11:14",""
"9245235","Go, midstate SHA-256 hash","Having 128 bytes of data, for example:
00000001c570c4764aadb3f09895619f549000b8b51a789e7f58ea750000709700000000103ca064f8c76c390683f8203043e91466a7fcc40e6ebc428fbcc2d89b574a864db8345b1b00b5ac00000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000080020000

And wanting to perform SHA-256 hash on it, one would have to separate it into two 64 bytes of data and hash them individually before hashing the results together. If one was to often change some bits in the second half of the data, one could simplify the calculations and hash the first half of the data only once. How would one do that in Google Go? I tried calling
func SingleSHA(b []byte)([]byte){
    var h hash.Hash = sha256.New()
    h.Write(b)
    return h.Sum()
}

But instead of the proper answer
e772fc6964e7b06d8f855a6166353e48b2562de4ad037abc889294cea8ed1070

I got
12E84A43CBC7689AE9916A30E1AA0F3CA12146CBF886B60103AEC21A5CFAA268

When discussing the matter on Bitcoin forum, someone mentioned that there could be some problems with getting that midstate hash.
How do I calculate a midstate SHA-256 hash in Google Go?
","Bitcoin-related byte operations are a bit tricky, as they tend to switch endianness at a whim. First of, we take the initial []byte array representing
00000001c570c4764aadb3f09895619f549000b8b51a789e7f58ea750000709700000000103ca064f8c76c390683f8203043e91466a7fcc40e6ebc428fbcc2d89b574a864db8345b1b00b5ac00000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000080020000

Then, we separate out the first half of the array, obtaining:
00000001c570c4764aadb3f09895619f549000b8b51a789e7f58ea750000709700000000103ca06 4f8c76c390683f8203043e91466a7fcc40e6ebc428fbcc2d8

After that, we need to swap some bytes around. We reverse the order of bytes in every slice of 4 bytes, thusly obtaining:
0100000076C470C5F0B3AD4A9F619598B80090549E781AB575EA587F977000000000000064A03C10396CC7F820F8830614E94330C4FCA76642BC6E0ED8C2BC8F

And that is the array we will be using for calculating the midstate. Now, we need to alter the file hash.go, adding to type Hash interface:
Midstate() []byte

And change the file sha256.go, adding this function:
func (d *digest) Midstate() []byte {
    var answer []byte
    for i:=0;i<len(d.h);i++{
        answer=append(answer[:], Uint322Hex(d.h[i])...)
    }
    return answer
}

Where Uint322Hex converts an uint32 variable into a []byte variable. Having all that, we can call:
var h BitSHA.Hash = BitSHA.New()
h.Write(Str2Hex(""0100000076C470C5F0B3AD4A9F619598B80090549E781AB575EA587F977000000000000064A03C10396CC7F820F8830614E94330C4FCA76642BC6E0ED8C2BC8F""))
log.Printf(""%X"", h.Midstate())

Where Str2Hex turns a string into []byte. The result is:
69FC72E76DB0E764615A858F483E3566E42D56B2BC7A03ADCE9492887010EDA8

Remembering the proper answer:
e772fc6964e7b06d8f855a6166353e48b2562de4ad037abc889294cea8ed1070

We can compare them:
69FC72E7 6DB0E764 615A858F 483E3566 E42D56B2 BC7A03AD CE949288 7010EDA8
e772fc69 64e7b06d 8f855a61 66353e48 b2562de4 ad037abc 889294ce a8ed1070

So we can see that we just need to swap the bytes around a bit in each slice of 4 bytes and we will have the proper ""midstate"" used by Bitcoin pools and miners (until it will no longer be needed due to being deprecated).
","5560","<hash><go><state><sha256><sha>","3","5","4","2017-10-05 18:59:15","9322486","2","1","102371","","2017-10-05 18:59:15","2012-02-12 00:11:14",""
"16713810","How secure is MD5 and SHA1","Hey just a simple questions, as im tryng to understand a bit more on Hash functions, I know how they work and what they do but how secure are they?
I would appreciate a simple answer not links as I never find them useful.
","With nowadays technology, both can be cracked. There are also hash dictionaries that help find what a hash means for short strings.
If they are secure or not, highly depends on what you want to protect. If you are building an online banking system, they are not recommended at all (depending where in the online banking system they come to use). If you implement them just for online user password hashing, for example, it also depends on: is you website worth cracking, how many users you have, etc.
A general advice, is to first study the level of security you want to achieve in you scenario and decide what technologies (in this case hashing) you use. There is also no 100% security. Also don't invest too much time into one security issues and ignore others which might not be as obvious or technical (human errors, security by obscurity, human engineering).
Check this out:

generate the hash for a small word here. For example, password has the MD5 hash: 5f4dcc3b5aa765d61d8327deb882cf99
now go here and ask back for the text.

The above example is just one of many (dictionary attack) possible way to crack them. Also the wikipedia articles of each security algorithms gives you a list of vulnerabilities.
ALSO SEE:

Is MD5 less secure than SHA et. al. in a practical sense?

SIDE NOTE
Never let websites generate a hash for a real password that you have (in case you need it somewhere for testing or other reasons). Always use test passwords, or generate hashes on your local machine. People building hash databases (hackers or not), also provide online hash tools for capturing hashes.
","5502","<md5><sha>","6","23","3","2016-10-27 06:12:34","16714008","0","2","1420197","","2013-05-24 13:21:24","2013-05-23 12:21:09",""
"16713810","How secure is MD5 and SHA1","Hey just a simple questions, as im tryng to understand a bit more on Hash functions, I know how they work and what they do but how secure are they?
I would appreciate a simple answer not links as I never find them useful.
","Here is the comparison between MD5 and SHA1. You can get a clear idea about which one is better.

","5502","<md5><sha>","6","1","3","2016-10-27 06:12:34","16714008","0","2","1420197","","2013-05-24 13:21:24","2013-05-23 12:21:09",""
"16713810","How secure is MD5 and SHA1","Hey just a simple questions, as im tryng to understand a bit more on Hash functions, I know how they work and what they do but how secure are they?
I would appreciate a simple answer not links as I never find them useful.
","When discussing hash security vs brute force shouldn't we take some more in account?
First of all, is md5 obfuscated data stored in trusted zone or not. In other words, do we trust our db admin not to try read user passwords from the database and brute force reverse them. This can be trusted or technically granted via some security procedures (db admin may not have access to the table that stores password hashes, this may be accessible for security officer only).
Another one is possibility of login+password hash pair hijacking from client or client-server transaction. If there's no trojan horse in the client and the communication between client and server is TLS-secured, the pair should be secure from man-in-the-middle attacks. 
What is left for the attacker is (apart from social engineering, xss and hosting security break) to subsequently send number of generated requests to the logon server and see if one is successful. This can be managed too:

after both successful and unsuccessful login there may be some random
lag time before the service responds to slow down brute force process
login process may queue parallel login requests from same IP and parallel logins with same login name (to enforce the rule above)
there may be limit implemented for unsuccessful logins, after it is exceeded the account is locked and security alert is launched

I believe when above rules are implemented the md5 hash is secure enough. In fact it is equally secure as plain password :) To sum it up if we believe our md5 hash is secure we may simply leave passwords uncovered. The twist is nowadays there is no use of md5 at all (in the matter of password obfuscating). What one should do is leave it plain in the storage in the trusted zone or use some stronger tool (like SHA) when trusted zone is not to be managed. And in my opinion the trusted zone is still under risk of server (hosting service) security break, so no matter of all simply obfuscate the passwords with SHA (or better) :) This shouldn't be costly to harden password hashing itself and it brings some benefits (reduces risks) so my advice is never to revisit this discussion again.
Still even with SHA hashing all the spoken security rules should be implemented. Especially TLS which prevents compromising login+password pair (no matter password is sent plain or hashed with md5 or sha it may enable successful login). Also login attempts should be monitored. Even if we believe our site is brute-force-proof it is good to know someone is trying to break security. 
","5502","<md5><sha>","6","1","3","2016-10-27 06:12:34","16714008","0","2","1420197","","2013-05-24 13:21:24","2013-05-23 12:21:09",""
"7112664","Converting a unique seed string into a random, yet deterministic, float value in Ruby","I'm having a hard time with this, conceptually.
Basically, I need to accept some arbitrary unique string, and be able to convert that to a normalized float value.  What the output float value is doesn't really matter, so long as the same string input always results in the same normalized float output.
So this is a hashing algorithm right? I'm familiar with SHA1 or MD5, and this seems similar to password hashing where the result is the same for the correct password.  But those methods output strings of characters, I believe.  And what I'm not getting is how I would turn the result of a SHA1 or MD5 into a consistent float value.
# Goal
def string_to_float(seed_string)
  # ...
end

string_to_float('abc-123') #=> 0.15789
string_to_float('abc-123') #=> 0.15789

string_to_float('def-456') #=> 0.57654
string_to_float('def-456') #=> 0.57654

So what kind of approach in Ruby can I take that would turn an arbitrary string into a random but consistent float value?
","Yes, you are describing a hashing algorithm.  You could use a MD5 or SHA1 digest (since they just produce random bits) to generate a floating point number simply by using the String#unpack method with an argument of ""G"" (double-precision float, network byte order) from a digest:
require 'digest/sha1'

def string_to_float(str)
  Digest::SHA1.digest(str).unpack(""G"")[0]
end

string_to_float(""abc-123"") # => -2.86011943713676e-154
string_to_float(""def-456"") # => -1.13232994606094e+214
string_to_float(""abc-123"") # => -2.86011943713676e-154 OK!
string_to_float(""def-456"") # => -1.13232994606094e+214 OK!

Note that if you want the resulting floats to be in a particular range then you'll need to do some massaging.
Also note that the unpacked number doesn't use all of the bits from the digest so you might want to combine into the number of bytes for a double floating point number (although you'll have to be careful not to decrease the entropy of the hash function, if you care about that sort of thing), e.g.:
def str2float(s)
  d = Digest::SHA1.digest(s)
  x, y = d[0..9], d[10..19]
   # XOR the 1st (x) and 2nd (y) halves to use all bits.
  (0..9).map {|i| x[i] ^ y[i]}.pack(""c*"").unpack(""G"")[0]
end

","5452","<ruby><string><floating-point><md5><sha>","17","4","3","2012-05-16 13:06:05","7113000","2","1","44390","","2012-05-16 13:06:05","2011-08-18 18:59:30",""
"7112664","Converting a unique seed string into a random, yet deterministic, float value in Ruby","I'm having a hard time with this, conceptually.
Basically, I need to accept some arbitrary unique string, and be able to convert that to a normalized float value.  What the output float value is doesn't really matter, so long as the same string input always results in the same normalized float output.
So this is a hashing algorithm right? I'm familiar with SHA1 or MD5, and this seems similar to password hashing where the result is the same for the correct password.  But those methods output strings of characters, I believe.  And what I'm not getting is how I would turn the result of a SHA1 or MD5 into a consistent float value.
# Goal
def string_to_float(seed_string)
  # ...
end

string_to_float('abc-123') #=> 0.15789
string_to_float('abc-123') #=> 0.15789

string_to_float('def-456') #=> 0.57654
string_to_float('def-456') #=> 0.57654

So what kind of approach in Ruby can I take that would turn an arbitrary string into a random but consistent float value?
","The key part that you want is a way of converting a SHA1 or MD5 hash output into a float that is both deterministic and 1-1. Here's a simple solution based on md5. This could be used as integers too.
require 'digest/md5'

class String
  def float_hash
    (Digest::MD5.hexdigest(self).to_i(16)).to_f
  end
end

puts ""example_string"".float_hash  # returns 1.3084281619666243e+38

This generates a hexadecimal hash, then converts it to an integer, then converts that to a float. Each step is deterministic.
Note: as pointed out by @emboss, this reduces collision resistance because a double is 8 bytes and the hash is 16 bytes. It shouldn't be a big deal though by the sounds of your application.
","5452","<ruby><string><floating-point><md5><sha>","17","23","3","2012-05-16 13:06:05","7113000","2","1","44390","","2012-05-16 13:06:05","2011-08-18 18:59:30",""
"7112664","Converting a unique seed string into a random, yet deterministic, float value in Ruby","I'm having a hard time with this, conceptually.
Basically, I need to accept some arbitrary unique string, and be able to convert that to a normalized float value.  What the output float value is doesn't really matter, so long as the same string input always results in the same normalized float output.
So this is a hashing algorithm right? I'm familiar with SHA1 or MD5, and this seems similar to password hashing where the result is the same for the correct password.  But those methods output strings of characters, I believe.  And what I'm not getting is how I would turn the result of a SHA1 or MD5 into a consistent float value.
# Goal
def string_to_float(seed_string)
  # ...
end

string_to_float('abc-123') #=> 0.15789
string_to_float('abc-123') #=> 0.15789

string_to_float('def-456') #=> 0.57654
string_to_float('def-456') #=> 0.57654

So what kind of approach in Ruby can I take that would turn an arbitrary string into a random but consistent float value?
","If security is no issue, what you are describing is in my opinion not a hash function. A hash function is a one-way function, meaning computing the hash is easy but reverting it is ""hard"" or, ideally, impossible.
Your requirements instead describe an injective function Given any x1, x2 in your domain X the following holds:
For all x1, x2 element of X, x1 != x2  => f(x1) != f(x2)

f(x) = x is such a function, f(x) = x² is not. In plain English: you want to have different results if your inputs are different, same results only if the inputs are the same. It is true that this also is true for secure hashes, but they additionally provide the one-way characteristics such as the property of not being able (easily) to find x if you are only given f(x), among others. As far as I understood, you don't need these security properties.
Trivially, such an injective mapping from String to Float would be given by simply interpreting the ""String bytes"" as ""Float bytes"" from now on, i.e. you interpret the bytes differently (think C:
unsigned char *bytes = ""..."";
double d = (double)bytes; 

). But, there is as downside to this - the real trouble is that Float has a maximum precision, so you will run into an overflow situation if your strings are too long (Floats are internally represented as double values, that's 8 bytes on a 32 bit machine). So not enough space for almost any use case. Even MD5-ing your strings first doesn't solve the problem - MD5 output is already 16 bytes long.
So this could be a real problem, depending on your exact requirements. Although MD5 (or any other hash) will mess sufficiently with the input to make it as random as possible, you still cut the range of possible values from 16 bytes to effectively 8 bytes. (Note: Truncating random 16 byte output at 8 bytes is generally considered ""secure"" in terms of preserving the randomness. Elliptic Curve Cryptography does something similar. But as far as I know, nobody can really prove it, but neither could someone prove the contrary so far). So a collision is much more likely with your restricted Float range. By the birthday paradox, finding a collision takes sqrt(number of values in a finite range) tries. For MD5 this is 2^64, but for your scheme it's only 2^32. That's still very, very unlikely to produce a collision. It's probably something in the order of winning the lottery while at the same time being hit by a lightning. If you could live with this minimal possibility, go for it:
def string_to_float(str)
  Digest::MD5.new.digest(str).unpack('D')
end

If uniqueness is of absolute priority I would recommend to move from floats to integers. Ruby has built-in support for large integers that are not restricted by the internal constraints of a long value (that's what a Fixnum boils down to). So any arbitrary hash output could be represented as a large integer number.
","5452","<ruby><string><floating-point><md5><sha>","17","4","3","2012-05-16 13:06:05","7113000","2","1","44390","","2012-05-16 13:06:05","2011-08-18 18:59:30",""
"27755941","OAuth 1.0 Signature Generation with PHP","I want to generate signature for my custom header to get access tokens from Magento. ""oauth_signature_method"" is ""HMAC-SHA1"". I prepared my base string but don't know how to generate the signature. Should I use ""hash_hmac($algo,$data,$key)""? If it is the case, what should be the key? Any help would be appreciated.
$consumerSecret = ""abcdef"";
...
$nonce = generateNonce();
$time = time();
...
$base = ""POST&http%3A%2F%2Fmydomain.com%2Fmagento%2Foauth%2Ftoken&"".
""oauth_consumer_key%3Dc67eee22b81ac3237cc501aa58fdc236%26"".
""oauth_nonce%3D"".$nonce.""%26"".
""oauth_signature_method%3DHMAC-SHA1%26"".
""oauth_timestamp%3D"".$time.""%26"".
""oauth_version%3D1.0%26"".
""oauth_token%3D"".$oauthToken.""%26"".
""oauth_verifier%3D"".$oauthVerifier;

","You can find the documentation of OAuth 1.0 here, more precisely for your problem (sub)chapters  

9.2. HMAC-SHA1
Appendix A.5.1. Generating Signature Base String 
Appendix A.5.2. Calculating Signature Value  

According to documentation the Signature Base String is formed as:
HTTP_METHOD&urlencode(BASE_URL_OF_RESOURCE)&urlencode(PARAMETERS_ORDERED_AND_NORMALIZED_AND_WITHOUT_OAUTHSIGNATURE) 
The key used for hasing is:
urlencode(CONSUMER_SECRET)&urlencode(OAUTH_TOKEN_SECRET)  - when you have a token secret
urlencode(CONSUMER_SECRET)&  - when you don't have a token secret (on the very beginning when requesting a ""Request Token"")
The final signature should be base64_encode(hash_hmac('SHA1', $signatureBaseString, $key, 1));
I put an example script so you can use/test/see how it works:
    <?php
// testMagentoRestApi.php file
error_reporting(E_ALL);
ini_set('display_errors', 'On');

session_start();

/**
 * @author Bogdan Constantinescu <{first3LettersFromFirstname}_{first3LettersFromLastname}{at}yahoo{dot}com>
 * @license The MIT License (http://opensource.org/licenses/MIT)
 */
class MagentoRestApi
{
    /**
     * @var const int       Curl connect timeout.
     */
    const TIMEOUT = 20;
    /**
     * @var string          Application 's key.
     */
    private $appKey;
    /**
     * @var string          Application 's secret.
     */
    private $appSecret;
    /**
     * @var resource        The curl resource.
     */
    protected $curl;
    /**
     * @var string          Base Magento url.
     */
    protected $baseMagentoUrl;
    /**
     * @var string          Consumer 's callback url.
     */
    protected $callbackUrl;


    /**
     * Constructor; initializes stuffs...
     * @param   string     $strBaseMagentoUrl   Magento 's base url.
     * @param   string     $strAppKey           API application key.
     * @param   string     $strAppSecret        API application secret.
     * @param   string     $strCallbackUrl      Consumer's callback url.
     * @throws  Exception  If params are not ok / curl could not be initialized.
     */
    public function __construct($strBaseMagentoUrl, $strAppKey, $strAppSecret, $strCallbackUrl)
    {
        // check params
        if(!filter_var($strBaseMagentoUrl, FILTER_VALIDATE_URL)) {
            throw new Exception('Invalid param base magento url.');
        }
        if (!is_string($strAppKey) || !mb_strlen($strAppKey)) {
            throw new Exception('Invalid param app key.');
        }
        if (!is_string($strAppSecret) || !mb_strlen($strAppSecret)) {
            throw new Exception('Invalid param app secret.');
        }
        if(!filter_var($strCallbackUrl, FILTER_VALIDATE_URL)) {
            throw new Exception('Invalid param callback url.');
        }
        $this->baseMagentoUrl = trim($strBaseMagentoUrl, '/');
        $this->callbackUrl    = $strCallbackUrl;
        $this->appKey         = $strAppKey;
        $this->appSecret      = $strAppSecret;

        if (!extension_loaded('curl')) {
            throw new Exception('cURL extension is not enabled.');
        }
        $this->curl = curl_init();
        if (false === $this->curl) {
            throw new Exception('cURL could not be initialized.');
        }
    }


    /**
     * Makes api call.
     * @param   string     $strUrl                      Api call url.
     * @param   string     $strMethod                   Request method (POST|GET|DELETE|PUT...)
     * @param   array      $arrHeaders                  Optional request headers.
     * @param   string     $strPostData                 Request body.
     * @param   boolean    $blnSuprimeResponseHeader    Whether to suprime response 's headers or not.
     * @return  string                                  Api call response.
     * @throws  Exception   If smth went wrong.
     */
    protected function makeApiCall(
        $strUrl,
        $strMethod = 'GET',
        array $arrHeaders = array(),
        $strPostData = '',
        $blnSuprimeResponseHeader = false,
        &$intStatus = null
    ) {
        curl_setopt($this->curl, CURLOPT_URL, $strUrl);
        curl_setopt($this->curl, CURLOPT_HTTPHEADER, $arrHeaders);
        curl_setopt($this->curl, CURLOPT_TIMEOUT, self::TIMEOUT);
        curl_setopt($this->curl, CURLOPT_CONNECTTIMEOUT, self::TIMEOUT);
        curl_setopt($this->curl, CURLOPT_MAXREDIRS, 3);
        curl_setopt($this->curl, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($this->curl, CURLOPT_FOLLOWLOCATION, 1);
        curl_setopt($this->curl, CURLOPT_CUSTOMREQUEST, $strMethod);
        curl_setopt($this->curl, CURLOPT_POSTFIELDS, $strPostData);
        curl_setopt($this->curl, CURLOPT_HEADER, !$blnSuprimeResponseHeader);
        curl_setopt($this->curl, CURLOPT_USERAGENT, 'Magento REST API Client');
        curl_setopt($this->curl, CURLOPT_SSL_VERIFYPEER, 0);

        $mxdResponse = curl_exec($this->curl);
        if (false === $mxdResponse) {
            throw new Exception(curl_error($this->curl), curl_errno($this->curl));
        }
        $intStatus = curl_getinfo($this->curl, CURLINFO_HTTP_CODE);
        // var_dump($mxdResponse);
        return $mxdResponse;
    }


    /**
     * Retrieve request token.
     * @return array        With keys 'oauth_token' & 'oauth_token_secret'
     * @throws Exception    If request did not succeed/smth went bad
     */
    public function getRequestToken()
    {
        $returnValue = array();

        // define params that will be used either in Authorization header, or as url query params, excluding 'oauth_signature'
        $params = array(
            'oauth_callback' => $this->callbackUrl,
            'oauth_consumer_key' => $this->appKey,
            'oauth_nonce' => uniqid(mt_rand(1, 1000)),
            'oauth_signature_method' => 'HMAC-SHA1',
            'oauth_timestamp' => time(),
            'oauth_version' => '1.0',
        );
        // define HTTP method
        $method = 'POST';
        // this is the url to get Request Token according to Magento doc
        $url = $this->baseMagentoUrl . '/oauth/initiate?oauth_callback=' . urlencode($params['oauth_callback']);

        // start making the signature
        ksort($params); // @see Zend_Oauth_Signature_SignatureAbstract::_toByteValueOrderedQueryString() for more accurate sorting, including array params 
        $sortedParamsByKeyEncodedForm = array();
        foreach ($params as $key => $value) {
            $sortedParamsByKeyEncodedForm[] = rawurlencode($key) . '=' . rawurlencode($value);
        }
        $strParams = implode('&', $sortedParamsByKeyEncodedForm);
        $signatureData = strtoupper($method) // HTTP method (POST/GET/PUT/...)
                . '&'
                . rawurlencode($this->baseMagentoUrl . '/oauth/initiate') // base resource url - without port & query params & anchors, @see how Zend extracts it in Zend_Oauth_Signature_SignatureAbstract::normaliseBaseSignatureUrl()
                . '&'
                . rawurlencode($strParams);

        $key = rawurlencode($this->appSecret) . '&'; // on later requests, when you also have a oauth_token_secret from this request append it to $key  ( eq: $key = rawurlencode($this->appSecret) . '&' . rawurlencode($someOauthTokenSecret); )
        $signature = base64_encode(hash_hmac('SHA1', $signatureData, $key, 1));
        // end making signature

        $responseStatusCode = 0;
        $response = $this->makeApiCall(
            $url,
            $method,
            array(
                'Authorization: OAuth '
                . 'oauth_callback=""' . rawurlencode($params['oauth_callback']) . '"",'
                . 'oauth_consumer_key=""' . $params['oauth_consumer_key'] . '"",'
                . 'oauth_nonce=""' . $params['oauth_nonce'] . '"",'
                . 'oauth_signature_method=""' . $params['oauth_signature_method'] . '"",'
                . 'oauth_signature=""' . rawurlencode($signature) . '"",'
                . 'oauth_timestamp=""' . $params['oauth_timestamp'] . '"",'
                . 'oauth_version=""' . $params['oauth_version'] . '""'
            ),
            '',
            true,
            $responseStatusCode
        );
        if (200 == $responseStatusCode) {
            parse_str($response, $returnValue);
        } else {
            throw new Exception('Response HTTP code != 200, but ' . $responseStatusCode);
        }
        return $returnValue;
    }


    /**
     * Retrieve access token.
     * @param   string     $strOauthToken         token from ""Request Token"".
     * @param   string     $strOauthTokenSecret   token secret from ""Request Token"".
     * @param   string     $strOauthVerifier      verifier returened after user authorization.
     * @return array        With keys 'oauth_token' & 'oauth_token_secret'
     * @throws Exception    If request did not succeed/smth went bad
     */
    public function getAccessToken($strOauthToken, $strOauthTokenSecret, $strOauthVerifier)
    {
        $returnValue = array();

        // define params that will be used either in Authorization header, or as url query params, excluding 'oauth_signature'
        $params = array(
            'oauth_consumer_key' => $this->appKey,
            'oauth_nonce' => uniqid(mt_rand(1, 1000)),
            'oauth_signature_method' => 'HMAC-SHA1',
            'oauth_timestamp' => time(),
            'oauth_version' => '1.0',
            'oauth_token' => $strOauthToken,
            'oauth_verifier' => $strOauthVerifier,
        );
        // define HTTP method
        $method = 'POST';
        // this is the url to get Request Token according to Magento doc
        $url = $this->baseMagentoUrl . '/oauth/token';

        // start making the signature
        ksort($params); // @see Zend_Oauth_Signature_SignatureAbstract::_toByteValueOrderedQueryString() for more accurate sorting, including array params 
        $sortedParamsByKeyEncodedForm = array();
        foreach ($params as $key => $value) {
            $sortedParamsByKeyEncodedForm[] = rawurlencode($key) . '=' . rawurlencode($value);
        }
        $strParams = implode('&', $sortedParamsByKeyEncodedForm);
        $signatureData = strtoupper($method) // HTTP method (POST/GET/PUT/...)
                . '&'
                . rawurlencode($url) // base resource url - without port & query params & anchors, @see how Zend extracts it in Zend_Oauth_Signature_SignatureAbstract::normaliseBaseSignatureUrl()
                . '&'
                . rawurlencode($strParams);

        $key = rawurlencode($this->appSecret) . '&' . rawurlencode($strOauthTokenSecret); 
        $signature = base64_encode(hash_hmac('SHA1', $signatureData, $key, 1));
        // end making signature

        $responseStatusCode = 0;
        $response = $this->makeApiCall(
            $url,
            $method,
            array(
                'Authorization: OAuth '
                . 'oauth_consumer_key=""' . $params['oauth_consumer_key'] . '"",'
                . 'oauth_nonce=""' . $params['oauth_nonce'] . '"",'
                . 'oauth_signature_method=""' . $params['oauth_signature_method'] . '"",'
                . 'oauth_signature=""' . rawurlencode($signature) . '"",'
                . 'oauth_timestamp=""' . $params['oauth_timestamp'] . '"",'
                . 'oauth_version=""' . $params['oauth_version'] . '"",'
                . 'oauth_token=""' . rawurlencode($params['oauth_token']) . '"",'
                . 'oauth_verifier=""' . rawurlencode($params['oauth_verifier']) . '""'
            ),
            '',
            true,
            $responseStatusCode
        );
        if (200 == $responseStatusCode) {
            parse_str($response, $returnValue);
        } else {
            throw new Exception('Response HTTP code != 200, but ' . $responseStatusCode);
        }
        return $returnValue;
    }


    /**
     * Destructor. Free resources.
     */
    public function __destruct() {
        if (is_resource($this->curl)) {
            curl_close($this->curl);
        }
    }
}

// change the following variables accordingly to your needs
$callbackUrl = 'http://localhost/testMagentoRestApi.php';
$baseMagentoUrl = 'http://www.magento.dev/CE_1.9.1.0';
$consumerKey = 'e93a5396269851aaddaabd86999bafcb';
$consumerSecret = 'bfb0c10cf75f0b66f71186d806616807';

$client = new MagentoRestApi($baseMagentoUrl, $consumerKey, $consumerSecret, $callbackUrl);

if (!isset($_SESSION['request_token']) && !isset($_GET['oauth_token'])) { // retrieve ""Request Token"" and Authorize user
    $_SESSION['request_token'] = $client->getRequestToken();
    header('Location: ' . $baseMagentoUrl . '/oauth/authorize?oauth_token=' . urlencode($_SESSION['request_token']['oauth_token']));
    exit;
} elseif (isset($_SESSION['request_token']) && isset($_GET['oauth_token']) && isset($_GET['oauth_verifier'])) { // user authorized and redirected here, now request access token (step E from http://oauth.net/core/diagram.png)
    $_SESSION['access_token'] = $client->getAccessToken($_GET['oauth_token'], $_SESSION['request_token']['oauth_token_secret'], $_GET['oauth_verifier']);
    var_dump($_SESSION['access_token']);
}

Also you can do some reverse engineering in magento. For example when requesting an ""Request Token"" the flow is:  
Mage_Oauth_InitiateController::indexAction()
Mage_Oauth_Model_Server::initiateToken()
Mage_Oauth_Model_Server::_processRequest()
Mage_Oauth_Model_Server::_validateSignature()
Zend_Oauth_Http_Utility::sign()
Zend_Oauth_Signature_Hmac::sign()
Zend_Oauth_Signature_SignatureAbstract::_getBaseSignatureString()

Around the last 3 classes all the magic happens. You can check them out.
","5450","<php><magento><oauth><signature><sha>","6","8","1","2015-01-14 13:08:26","27761671","0","","","","","2015-01-03 14:36:02",""
"15124554","mcrypt_decrypt(): The IV parameter must be as long as the blocksize","I'm trying to encrypt some information in my code, so I searched for a way to do this.
I found this on php official website:
http://www.php.net/manual/vote-note.php?id=107483&page=book.mcrypt&vote=down
So, I changed it a little bit and I did this:
class EncrypterDecrypter {

private $SECRET = ""xxxxxxxxxxxxxxxxxxxx"";


function encrypt($decrypted, $salt = 'zzzzzzzzzzzzzzzzzz') {
    $password = $this->SECRET;
    // Build a 256-bit $key which is a SHA256 hash of $salt and $password.
    $key = hash('SHA256', $salt . $password, true);
    // Build $iv and $iv_base64.  We use a block size of 128 bits (AES compliant) and CBC mode.  (Note: ECB mode is inadequate as IV is not used.)
    srand();
    $iv = mcrypt_create_iv(mcrypt_get_iv_size(MCRYPT_RIJNDAEL_128, MCRYPT_MODE_CBC), MCRYPT_RAND);
    if (strlen($iv_base64 = rtrim(base64_encode($iv), '=')) != 22)
        return false;
    // Encrypt $decrypted and an MD5 of $decrypted using $key.  MD5 is fine to use here because it's just to verify successful decryption.
    $encrypted = base64_encode(mcrypt_encrypt(MCRYPT_RIJNDAEL_128, $key, $decrypted . md5($decrypted), MCRYPT_MODE_CBC, $iv));
    // We're done!
    return $iv_base64 . $encrypted;
}

public function decrypt($encrypted, $salt = 'zzzzzzzzzzzzzzzzzz') {
    $password = $this->SECRET;
    // Build a 256-bit $key which is a SHA256 hash of $salt and $password.
    $key = hash('SHA256', $salt . $password, true);
    // Retrieve $iv which is the first 22 characters plus ==, base64_decoded.
    $iv = base64_decode(substr($encrypted, 0, 22) . '==');
    // Remove $iv from $encrypted.
    $encrypted = substr($encrypted, 22);
    // Decrypt the data.  rtrim won't corrupt the data because the last 32 characters are the md5 hash; thus any \0 character has to be padding.
    $decrypted = rtrim(
            mcrypt_decrypt(MCRYPT_RIJNDAEL_128,
                    $key, base64_decode($encrypted),
                    MCRYPT_MODE_CBC, $iv),
            ""\0\4"");
    // Retrieve $hash which is the last 32 characters of $decrypted.
    $hash = substr($decrypted, -32);
    // Remove the last 32 characters from $decrypted.
    $decrypted = substr($decrypted, 0, -32);
    // Integrity check.  If this fails, either the data is corrupted, or the password/salt was incorrect.
    if (md5($decrypted) != $hash)
        return false;
    // Yay!
    return $decrypted;
   }
}

I already tried to change the key and salt size but the warning keeps showing.
I also searched other topics but I could not find any answer, they all look to specific.
","","5399","<php><encryption><mcrypt><sha>","1","","0","2018-12-16 19:16:58","","2","","2224584","","2018-12-16 19:16:58","2013-02-27 23:25:13",""
"19065711","How to Calculate the MD5 and SHA checksum of a huge file?","I want to calculate the MD5 and SHA checksum of a series of huge files.
Each file is about 1GB, so I wish to be as fast as possible.
Could anyone help to recommend some efficient C++ library?
BTW, 
When reading file, fread( buffer, sizeof(char), BUFFER_SIZE, fin ), what size of BUFFER_SIZE is reasonable?
","On top of my head I do not know any fast C++ library. Computing a hash is relative straightforward, so any C library will be as easy to use (you can easily wrap it in a C++ class yourself). I found the following site where a guy implemented several hashing algorithms in x86 assembly and compared them to ""official"" C implementations of the same algorithms:
https://www.nayuki.io/page/fast-sha1-hash-implementation-in-x86-assembly
https://www.nayuki.io/page/fast-md5-hash-implementation-in-x86-assembly
Those implementations should be a good starting point and then you just have to make the file I/O as efficient as possible. Memory-mapped I/O is usually very efficient, or then you could go complex and use two threads: one thread reads chunks from the file and the other thread hashes the read data. The idea here would be to always keep the process doing something useful, i.e. hashes can be calculated while waiting for more data to be read from the file.
","5393","<c++><io><md5><checksum><sha>","1","0","3","2016-02-17 17:50:22","","3","1","","","","2013-09-28 10:06:16",""
"19065711","How to Calculate the MD5 and SHA checksum of a huge file?","I want to calculate the MD5 and SHA checksum of a series of huge files.
Each file is about 1GB, so I wish to be as fast as possible.
Could anyone help to recommend some efficient C++ library?
BTW, 
When reading file, fread( buffer, sizeof(char), BUFFER_SIZE, fin ), what size of BUFFER_SIZE is reasonable?
","You could use Openssl.
Search for Mysticial answer about MD5 large file 
How to create a md5 hash of a string in C?
When you look into Openssl SHA docs you will see that MD5 and SHA ways of using these functions are the same.
SHA Openssl Docs
","5393","<c++><io><md5><checksum><sha>","1","1","3","2016-02-17 17:50:22","","3","1","","","","2013-09-28 10:06:16",""
"19065711","How to Calculate the MD5 and SHA checksum of a huge file?","I want to calculate the MD5 and SHA checksum of a series of huge files.
Each file is about 1GB, so I wish to be as fast as possible.
Could anyone help to recommend some efficient C++ library?
BTW, 
When reading file, fread( buffer, sizeof(char), BUFFER_SIZE, fin ), what size of BUFFER_SIZE is reasonable?
","I personally would do FILE *pipe = popen(""md5sum filename""); [or something to that effect] - it is likely to be as fast as anything else, since 1GB of a file will take a little while to read, and the calculation is unlikely to be using much of your CPU time - most of the time will be waiting for the disk to load up the file. 
On my system, I created 6 files of 1GB each, and it takes 2 seconds to checksum the file with md5sum. (12 seconds for all 6 files). 
","5393","<c++><io><md5><checksum><sha>","1","2","3","2016-02-17 17:50:22","","3","1","","","","2013-09-28 10:06:16",""
"9435963","String SHA-512 Encoding: C# and JAVA result is different","Im trying to compare two different string encoded by sha512. But, result is different. It can be an encode problem i mean. I hope you can help me.
This is my Java code:
    MessageDigest digest = java.security.MessageDigest.getInstance(""SHA-512""); 
    digest.update(MyString.getBytes()); 
    byte messageDigest[] = digest.digest();

    // Create Hex String
    StringBuffer hexString = new StringBuffer();
    for (int i = 0; i < messageDigest.length; i++) {
        String h = Integer.toHexString(0xFF & messageDigest[i]);
        while (h.length() < 2)
            h = ""0"" + h;
        hexString.append(h);
    }
    return hexString.toString();

and, this is my C# code:
        UnicodeEncoding UE = new UnicodeEncoding();
        byte[] hashValue;
        byte[] message = UE.GetBytes(MyString);

        SHA512Managed hashString = new SHA512Managed();
        string hex = """";

        hashValue = hashString.ComputeHash(message);
        foreach (byte x in hashValue)
        {
            hex += String.Format(""{0:x2}"", x);

        }
        return hex;

Where is the problem ? Thx much guys
UPDATE
If i don't specify encoding type, it supposes Unicode i think. Result is this (without specifying anything):
Java SHA: a99951079450e0bf3cf790872336b3269da580b62143af9cfa27aef42c44ea09faa83e1fbddfd1135e364ae62eb373c53ee4e89c69b54a7d4d268cc2274493a8

C# SHA: 70e6eb559cbb062b0c865c345b5f6dbd7ae9c2d39169571b6908d7df04642544c0c4e6e896e6c750f9f135ad05280ed92b9ba349de12526a28e7642721a446aa

Instead, if i specify UTF-16 in Java:
Java UTF-16: SHA f7a587d55916763551e9fcaafd24d0995066371c41499fcb04614325cd9d829d1246c89af44b98034b88436c8acbd82cd13ebb366d4ab81b4942b720f02b0d9b

It's always different !!!
","The reason is probably that you did not specify the encoding to use when converting the string to bytes, java uses the platform default encoding, while UnicodeEncoding seems to use utf-16.
Edit:
The documentation for UnicodeEncoding says

This constructor creates an instance that uses the little endian byte order, provides a Unicode byte order mark, and does not throw an exception when an invalid encoding is detected.

Javas ""utf-16"" however seems to default to big endian byte order. With character encodings its better to be really specific, there is an UnicodeEncoding constructor taking two boolean specifiyng byte order, while in java there is also ""utf-16le"" and ""utf-16be"". You could try the following in c#
new UnicodeEncoding(true, false) // big endian, no byte order mark

and in java
myyString.getBytes(""utf-16be"")

Or even better use ""utf-8"" / Encoding.UTF8 in both cases since it is not affected by different byteorders.
","5382","<c#><java><encoding><sha>","7","3","3","2012-05-04 13:45:33","9438470","6","6","1079354","","2012-05-04 13:45:33","2012-02-24 18:21:06",""
"9435963","String SHA-512 Encoding: C# and JAVA result is different","Im trying to compare two different string encoded by sha512. But, result is different. It can be an encode problem i mean. I hope you can help me.
This is my Java code:
    MessageDigest digest = java.security.MessageDigest.getInstance(""SHA-512""); 
    digest.update(MyString.getBytes()); 
    byte messageDigest[] = digest.digest();

    // Create Hex String
    StringBuffer hexString = new StringBuffer();
    for (int i = 0; i < messageDigest.length; i++) {
        String h = Integer.toHexString(0xFF & messageDigest[i]);
        while (h.length() < 2)
            h = ""0"" + h;
        hexString.append(h);
    }
    return hexString.toString();

and, this is my C# code:
        UnicodeEncoding UE = new UnicodeEncoding();
        byte[] hashValue;
        byte[] message = UE.GetBytes(MyString);

        SHA512Managed hashString = new SHA512Managed();
        string hex = """";

        hashValue = hashString.ComputeHash(message);
        foreach (byte x in hashValue)
        {
            hex += String.Format(""{0:x2}"", x);

        }
        return hex;

Where is the problem ? Thx much guys
UPDATE
If i don't specify encoding type, it supposes Unicode i think. Result is this (without specifying anything):
Java SHA: a99951079450e0bf3cf790872336b3269da580b62143af9cfa27aef42c44ea09faa83e1fbddfd1135e364ae62eb373c53ee4e89c69b54a7d4d268cc2274493a8

C# SHA: 70e6eb559cbb062b0c865c345b5f6dbd7ae9c2d39169571b6908d7df04642544c0c4e6e896e6c750f9f135ad05280ed92b9ba349de12526a28e7642721a446aa

Instead, if i specify UTF-16 in Java:
Java UTF-16: SHA f7a587d55916763551e9fcaafd24d0995066371c41499fcb04614325cd9d829d1246c89af44b98034b88436c8acbd82cd13ebb366d4ab81b4942b720f02b0d9b

It's always different !!!
","Here,
digest.update(MyString.getBytes()); 

you should be explicitly specifying the desired character encoding in String#getBytes() method. It will otherwise default to the platform default charset as is been obtained by Charset#defaultCharset(). 
Fix it accordingly:
digest.update(MyString.getBytes(""UTF-16LE"")); 

It should at least be the same charset as UnicodeEncoding is internally using.

Unrelated to the concrete problem, Java has also an enhanced for loop and a String#format().
","5382","<c#><java><encoding><sha>","7","6","3","2012-05-04 13:45:33","9438470","6","6","1079354","","2012-05-04 13:45:33","2012-02-24 18:21:06",""
"9435963","String SHA-512 Encoding: C# and JAVA result is different","Im trying to compare two different string encoded by sha512. But, result is different. It can be an encode problem i mean. I hope you can help me.
This is my Java code:
    MessageDigest digest = java.security.MessageDigest.getInstance(""SHA-512""); 
    digest.update(MyString.getBytes()); 
    byte messageDigest[] = digest.digest();

    // Create Hex String
    StringBuffer hexString = new StringBuffer();
    for (int i = 0; i < messageDigest.length; i++) {
        String h = Integer.toHexString(0xFF & messageDigest[i]);
        while (h.length() < 2)
            h = ""0"" + h;
        hexString.append(h);
    }
    return hexString.toString();

and, this is my C# code:
        UnicodeEncoding UE = new UnicodeEncoding();
        byte[] hashValue;
        byte[] message = UE.GetBytes(MyString);

        SHA512Managed hashString = new SHA512Managed();
        string hex = """";

        hashValue = hashString.ComputeHash(message);
        foreach (byte x in hashValue)
        {
            hex += String.Format(""{0:x2}"", x);

        }
        return hex;

Where is the problem ? Thx much guys
UPDATE
If i don't specify encoding type, it supposes Unicode i think. Result is this (without specifying anything):
Java SHA: a99951079450e0bf3cf790872336b3269da580b62143af9cfa27aef42c44ea09faa83e1fbddfd1135e364ae62eb373c53ee4e89c69b54a7d4d268cc2274493a8

C# SHA: 70e6eb559cbb062b0c865c345b5f6dbd7ae9c2d39169571b6908d7df04642544c0c4e6e896e6c750f9f135ad05280ed92b9ba349de12526a28e7642721a446aa

Instead, if i specify UTF-16 in Java:
Java UTF-16: SHA f7a587d55916763551e9fcaafd24d0995066371c41499fcb04614325cd9d829d1246c89af44b98034b88436c8acbd82cd13ebb366d4ab81b4942b720f02b0d9b

It's always different !!!
","The UnicodeEncoding in C# you use corresponds to the little-endian UTF-16 encoding, while ""UTF-16"" in Java corresponds to the big-endian UTF-16 encoding. Another difference is that C# doesn't output the Byte Order Marker (called ""preamble"" in the API) if you don't ask for it, while ""UTF-16"" in Java generates it always. To make the two programs compatible you can make Java also use the little-endian UTF-16:
digest.update(MyString.getBytes(""UTF-16LE""));

Or you could switch to some other well known encoding, like UTF-8.
","5382","<c#><java><encoding><sha>","7","6","3","2012-05-04 13:45:33","9438470","6","6","1079354","","2012-05-04 13:45:33","2012-02-24 18:21:06",""
"12468063","Passwords storage, hash() with sha-512 or crypt() with blowfish (bcrypt)?","This is my current password hashing procedure in PHP/SQL projects...

Take 512bits of per-user salt from /dev/urandom, stored in the user's DB record in addition to the final hash
Take 512bits of ""pepper"" from /dev/urandom which is stored in the file system. This is a
constant per-application and is the same for each user
Then hash('sha512', $password.$salt.$pepper, TRUE)

The hash and salt are stored in binary in the DB, mainly out of habit. I don't think it makes any difference in terms of security. If anything it's slightly less convenient for SQL backups and makes the PHP code appear marginally more complex.
Is hash() with SHA-256 or SHA-512 generally considered to have been superceeded by bcrypt these days?
I believe SHA-2 (256/512) is still considered cryptographically secure and I'm probably overdoing the entropy bits. It's far more likely that it would be a flaw in my code that would lead to problems than an attacker reverse-engineering a SHA-2 hash from a DB dump.
But should I update my methodology going forward to use crypt() with CRYPT_BLOWFISH instead (I believe this is referred to as bcrypt, with blowfish technically being a cipher rather than hashing algorithm)?
Even just as future best practice?
I'm not particularly concerned about the computational expense of the algorithms (within reason). This would only ever be a factor when creating accounts, changing passwords or on login when you hash then compare. Those activities make up a small percentage of page views. I guess in a way the slower the better, if it makes a server work harder to generate then it will make an attacker's work slower to brute force.
Cheers, B
","If you can wait til php 5.5, there will be some helpful functions for this built in: 
https://gist.github.com/3707231
Till then, use crypt - you could look at this forward compatible port of the new functions:
https://github.com/ircmaxell/password_compat
","5350","<php><hash><sha><bcrypt><password-encryption>","2","5","2","2012-09-18 01:51:41","12468166","2","1","","","","2012-09-17 22:41:13",""
"12468063","Passwords storage, hash() with sha-512 or crypt() with blowfish (bcrypt)?","This is my current password hashing procedure in PHP/SQL projects...

Take 512bits of per-user salt from /dev/urandom, stored in the user's DB record in addition to the final hash
Take 512bits of ""pepper"" from /dev/urandom which is stored in the file system. This is a
constant per-application and is the same for each user
Then hash('sha512', $password.$salt.$pepper, TRUE)

The hash and salt are stored in binary in the DB, mainly out of habit. I don't think it makes any difference in terms of security. If anything it's slightly less convenient for SQL backups and makes the PHP code appear marginally more complex.
Is hash() with SHA-256 or SHA-512 generally considered to have been superceeded by bcrypt these days?
I believe SHA-2 (256/512) is still considered cryptographically secure and I'm probably overdoing the entropy bits. It's far more likely that it would be a flaw in my code that would lead to problems than an attacker reverse-engineering a SHA-2 hash from a DB dump.
But should I update my methodology going forward to use crypt() with CRYPT_BLOWFISH instead (I believe this is referred to as bcrypt, with blowfish technically being a cipher rather than hashing algorithm)?
Even just as future best practice?
I'm not particularly concerned about the computational expense of the algorithms (within reason). This would only ever be a factor when creating accounts, changing passwords or on login when you hash then compare. Those activities make up a small percentage of page views. I guess in a way the slower the better, if it makes a server work harder to generate then it will make an attacker's work slower to brute force.
Cheers, B
","You are definitely on the right track, bcrypt is a very nice way to store your passwords (scrypt is better but hard to find a good implementation in PHP).
Remember that sha1, sha256, sha512 were never made to hash passwords. They were designed to be fast, so that you could take large data sets and create a unique signature for them, in the shortest amount of time. They are used for signing more than anything else.
You definitely want to use a hashing algorithm that takes more time.
Side note: Some would argue that the pepper is pointless, since if they hack your system, they will have access to your salts and pepper.
This post has some great insights into password security.
","5350","<php><hash><sha><bcrypt><password-encryption>","2","2","2","2012-09-18 01:51:41","12468166","2","1","","","","2012-09-17 22:41:13",""
"20754279","Creating signed URLs for Google Cloud Storage using NodeJS","I'm trying to create a signature for a privately stored file in Google Cloud Storage; so that I can distribute a time-limited link.
Currently doing this and it makes a signature that's too short ... where am I going wrong?
var crypto = require(""crypto"");

var ttl = new Date().getTime() + 3600;
var id = 'the_target_file.txt';
var bucketName = 'bucket_name';
var POLICY_JSON = ""GET\n"" + ""\n"" + ""\n"" + ttl + ""\n"" + '/' + bucketName + '/' + id;

// stringify and encode the policy
var stringPolicy = JSON.stringify(POLICY_JSON);
var base64Policy = Buffer(stringPolicy, ""utf-8"").toString(""base64"");

// sign the base64 encoded policy
var privateKey = ""MY_PRIVATE_KEY"";
var sha256 = crypto.createHmac(""sha256"", privateKey);
var signature = sha256.update(new Buffer(base64Policy, ""utf-8"")).digest(""base64"");

console.log ( signature );

","Realised what I was doing wrong ... I was hashing the policy string instead of signing it.
The below code now gives me the correct output.
var crypto = require(""crypto"");
var fs = require(""fs"");

var expiry = new Date().getTime() + 3600;
var key = 'the_target_file';
var bucketName = 'bucket_name';
var accessId = 'my_access_id';
var stringPolicy = ""GET\n"" + ""\n"" + ""\n"" + expiry + ""\n"" + '/' + bucketName + '/' + key; 
var privateKey = fs.readFileSync(""gcs.pem"",""utf8"");
var signature = encodeURIComponent(crypto.createSign('sha256').update(stringPolicy).sign(privateKey,""base64""));   
var signedUrl = ""https://"" + bucketName + "".commondatastorage.googleapis.com/"" + key +""?GoogleAccessId="" + accessId + ""&Expires="" + expiry + ""&Signature="" + signature;

console.log(signedUrl);

For completeness ... here is a PHP version that does the same thing, which I used to check my results
$expiry = time() + 3600;
$key = 'the_target_file';
$bucketName = 'bucket_name';
$accessId = 'my_access_id';
$stringPolicy = ""GET\n\n\n"".$expiry.""\n/"".$bucketName.""/"".$key;
$fp = fopen('gcs.pem', 'r');
$priv_key = fread($fp, 8192);
fclose($fp);
$pkeyid = openssl_get_privatekey($priv_key,""password""); 
if (openssl_sign( $stringPolicy, $signature, $pkeyid, 'sha256' )) {
    $signature = urlencode( base64_encode( $signature ) );    
    echo 'https://'.$bucketName.'.commondatastorage.googleapis.com/'.
              $key.'?GoogleAccessId='.$accessId.'&Expires='.$expiry.'&Signature='.$signature;
}

","5341","<node.js><google-cloud-storage><sha>","11","17","3","2019-10-24 23:50:05","20817078","0","3","","","","2013-12-24 03:00:18",""
"20754279","Creating signed URLs for Google Cloud Storage using NodeJS","I'm trying to create a signature for a privately stored file in Google Cloud Storage; so that I can distribute a time-limited link.
Currently doing this and it makes a signature that's too short ... where am I going wrong?
var crypto = require(""crypto"");

var ttl = new Date().getTime() + 3600;
var id = 'the_target_file.txt';
var bucketName = 'bucket_name';
var POLICY_JSON = ""GET\n"" + ""\n"" + ""\n"" + ttl + ""\n"" + '/' + bucketName + '/' + id;

// stringify and encode the policy
var stringPolicy = JSON.stringify(POLICY_JSON);
var base64Policy = Buffer(stringPolicy, ""utf-8"").toString(""base64"");

// sign the base64 encoded policy
var privateKey = ""MY_PRIVATE_KEY"";
var sha256 = crypto.createHmac(""sha256"", privateKey);
var signature = sha256.update(new Buffer(base64Policy, ""utf-8"")).digest(""base64"");

console.log ( signature );

","There is an API/module for getting signed URLs now.
module: https://www.npmjs.com/package/@google-cloud/storage
API docs: https://cloud.google.com/nodejs/docs/reference/storage/1.6.x/File#getSignedUrl
Example
var storage = require('@google-cloud/storage')();
var myBucket = storage.bucket('my-bucket');

var file = myBucket.file('my-file');

//-
// Generate a URL that allows temporary access to download your file.
//-
var request = require('request');

var config = {
  action: 'read',
  expires: '03-17-2025'
};

file.getSignedUrl(config, function(err, url) {
  if (err) {
    console.error(err);
    return;
  }

  // The file is now available to read from this URL.
  request(url, function(err, resp) {
    // resp.statusCode = 200
  });
});

","5341","<node.js><google-cloud-storage><sha>","11","11","3","2019-10-24 23:50:05","20817078","0","3","","","","2013-12-24 03:00:18",""
"20754279","Creating signed URLs for Google Cloud Storage using NodeJS","I'm trying to create a signature for a privately stored file in Google Cloud Storage; so that I can distribute a time-limited link.
Currently doing this and it makes a signature that's too short ... where am I going wrong?
var crypto = require(""crypto"");

var ttl = new Date().getTime() + 3600;
var id = 'the_target_file.txt';
var bucketName = 'bucket_name';
var POLICY_JSON = ""GET\n"" + ""\n"" + ""\n"" + ttl + ""\n"" + '/' + bucketName + '/' + id;

// stringify and encode the policy
var stringPolicy = JSON.stringify(POLICY_JSON);
var base64Policy = Buffer(stringPolicy, ""utf-8"").toString(""base64"");

// sign the base64 encoded policy
var privateKey = ""MY_PRIVATE_KEY"";
var sha256 = crypto.createHmac(""sha256"", privateKey);
var signature = sha256.update(new Buffer(base64Policy, ""utf-8"")).digest(""base64"");

console.log ( signature );

","Assuming this question is to sign the CDN url backed by google bucket backend, here what works for me (code above did not work for me). 
Opts and signing function calling: 
const signUrlOptions = {
  expires: '' + new Date().getTime() + 3600, // one hour
  keyName: '_SIGNING_KEY_NAME_', // URL signing key name (the one one you created in the CDN backend bucket)
  keyBase64: '_SIGNING_KEY_BASE64_', // the URL signing key base64 content (base64-encoded, 128-bit value, ~24 characters)
  baseUrl: '_CDN_BASE_URL_' // your base CDN URL (can be IP http://123.... when dev env or https://cdn_dns_name or https dns name)
}

const signedUrl = signCdnUrl('demo.png', signedUrlOptions);

signing function:
import { createHmac } from 'crypto';

const BASE64_REPLACE = { '+': '-', '/': '_', '=': '' };

export function signCdnUrl(fileName, opts) {
  // URL to sign
  const urlToSign = `${opts.baseUrl}/${fileName}?Expires=${opts.expires}&KeyName=${opts.keyName}`;

  // Compute signature
  const keyBuffer = Buffer.from(opts.keyBase64, 'base64');
  let signature = createHmac('sha1', keyBuffer).update(urlToSign).digest('base64');
  signature = signature.replace(/[+/=]/g, c => (<any>BASE64_REPLACE)[c]); // might be a better way

  // Add signature to urlToSign and return signedUrl
  return urlToSign + `&Signature=${signature}`;
}

Hope this helps. Somehow google cloud doc does not have a nodejs example and the file.getSignedUrl() add confusion to the mix as it does not seem to be related to CDN URL signing. 
Note: 

Note: Probably want to move base64 -> buffer work to the caller as opts.keyBuffer 

","5341","<node.js><google-cloud-storage><sha>","11","0","3","2019-10-24 23:50:05","20817078","0","3","","","","2013-12-24 03:00:18",""
"32673943","How to update Homebrew SHA256?","This seems like a very noob question but I can't find an answer anywhere!
I'm very new to developing packages for Homebrew but when I edit my formula and come to update my package I get the following error
Error: SHA256 mismatch

My question is, how do I generate the expected SHA256 value?
","After editing the formula, you can run brew fetch your-formula --build-from-source to fetch the tarball and display the new checksum. If you've already downloaded the tarball somewhere, you can calculate the hash with openssl sha256 < some_tarball.tar.gz or shasum -a 256 some_tarball.tar.gz.
","5185","<homebrew><sha>","16","24","1","2017-11-16 10:15:55","32753064","0","4","4245316","","2015-09-20 09:25:32","2015-09-19 22:46:14",""
"5564643","Android, calculating SHA-1 hash from file, fastest algorithm","I have a problem with SHA-1 performance on Android. In C# I get calculated hash in about 3s, same calculation for Android takes about 75s. I think the problem is in reading operation from file, but I'm not sure how to improve performance.
Here's my hash generation method.
private static String getSHA1FromFileContent(String filename)
    {

        try
        {
            MessageDigest digest = MessageDigest.getInstance(""SHA-1"");
            //byte[] buffer = new byte[65536]; //created at start.
            InputStream fis = new FileInputStream(filename);
            int n = 0;
            while (n != -1)
            {
                n = fis.read(buffer);
                if (n > 0)
                {
                    digest.update(buffer, 0, n);
                }
            }
            byte[] digestResult = digest.digest();
            return asHex(digestResult);
        }
        catch (Exception e)
        {
            return null;
        }
    }

Any ideas how can I improve performance?
","If I were you I would use the JNI like this guy did and get the speed up that way. This is exactly what the C interface was made for.
","5142","<android><performance><file><hash><sha>","12","1","2","2015-11-10 14:07:46","9989835","5","5","2162028","","2015-11-10 14:07:46","2011-04-06 10:08:11",""
"5564643","Android, calculating SHA-1 hash from file, fastest algorithm","I have a problem with SHA-1 performance on Android. In C# I get calculated hash in about 3s, same calculation for Android takes about 75s. I think the problem is in reading operation from file, but I'm not sure how to improve performance.
Here's my hash generation method.
private static String getSHA1FromFileContent(String filename)
    {

        try
        {
            MessageDigest digest = MessageDigest.getInstance(""SHA-1"");
            //byte[] buffer = new byte[65536]; //created at start.
            InputStream fis = new FileInputStream(filename);
            int n = 0;
            while (n != -1)
            {
                n = fis.read(buffer);
                if (n > 0)
                {
                    digest.update(buffer, 0, n);
                }
            }
            byte[] digestResult = digest.digest();
            return asHex(digestResult);
        }
        catch (Exception e)
        {
            return null;
        }
    }

Any ideas how can I improve performance?
","I tested it on my SGS (i9000) and it took 0.806s to generate the hash for a 10.1MB file.
Only difference is that in my code i am using BufferedInputStream in addition to the FileInputStream and the hex conversion library found at:
http://apachejava.blogspot.com/2011/02/hexconversions-convert-string-byte-byte.html
Also I would suggest that you close your file input stream in a finally clause
","5142","<android><performance><file><hash><sha>","12","3","2","2015-11-10 14:07:46","9989835","5","5","2162028","","2015-11-10 14:07:46","2011-04-06 10:08:11",""
"16875249","How to check if string is a valid sha256 hash in PHP?","How do I manage to identify a sha256 hash using PHP?
Also, is there any way to identify if the string is a sha256 hash even if it was salted?
I don't need to know the real value of the hash (I know that is impossible), but I need only to validate the string, so I can work in a way if the string is a sha256 hash and work another way if it isn't.
","The only way to check if a hash is a valid SHA-256 hash is to check 256 bits in it- if it does, then yes some input CAN possibly generate that output.
Hashes are one way meaning I can give you a hash and you can never decrypt it (this is the difference between hashing and an encryption). This is good for storing passwords and such where the plain text value is irrelevant. 
","5073","<php><encryption><hash><sha><sha256>","4","5","2","2018-11-08 15:36:17","16875304","3","0","1891542","","2013-06-01 17:34:33","2013-06-01 17:24:10",""
"16875249","How to check if string is a valid sha256 hash in PHP?","How do I manage to identify a sha256 hash using PHP?
Also, is there any way to identify if the string is a sha256 hash even if it was salted?
I don't need to know the real value of the hash (I know that is impossible), but I need only to validate the string, so I can work in a way if the string is a sha256 hash and work another way if it isn't.
","I do not understand what you mean when you say: ""even if it was salted"". Salting happens before hashing, it offers some protection against rainbow table attacks and users using the same password on multiple sites. Depending on the base a simple regex can tell you if a particular string is a sha256 hash. i think most times we encounter hashes in base16, in that case this would work:
   if (preg_match(""/^([a-f0-9]{64})$/"", $hash) == 1) {
      return true;
   } else {
      return false;
   }

","5073","<php><encryption><hash><sha><sha256>","4","3","2","2018-11-08 15:36:17","16875304","3","0","1891542","","2013-06-01 17:34:33","2013-06-01 17:24:10",""
"4685970","Where does Digest::SHA2.hexdigest() defined?","I'm following through the tutorial from the book Agile Web Development with Rails and I found the following code:
def User.encrypt_password(password, salt) 
  Digest::SHA2.hexdigest(password + ""wibble"" + salt)
end

Looking into the Digest source code (digest.rb and digest/sha2.rb inside the lib directory in my ruby installation), however, I can't seem to find where the hexdigest method is defined, but yet the code seems to work just fine.
Can someone enlighten me how this happens? I assume that I need to look for a code that somehow looks like:
def hexdigest(...)
   ...
end

","The hexdigest part, and several other similar methods are written as a C extension for speed. It's found in ext/digest/ in the Ruby source.
static VALUE rb_digest_instance_hexdigest(int argc, VALUE *argv, VALUE self) is defined on line 216 in ext/digest/digest.c in my Ruby 1.9.2-p0 source. It just calls a bunch of other functions, but it might be a starting point at least.
For SHA2, there is another ext/digest/sha2/sha2.c that contains those functions. digest.c is just the basics, ""extended"" by the other ones
","5049","<ruby-on-rails><ruby><sha><digest>","1","8","2","2014-10-06 12:01:24","4686040","0","","2174742","","2014-10-06 12:01:24","2011-01-13 22:17:35",""
"4685970","Where does Digest::SHA2.hexdigest() defined?","I'm following through the tutorial from the book Agile Web Development with Rails and I found the following code:
def User.encrypt_password(password, salt) 
  Digest::SHA2.hexdigest(password + ""wibble"" + salt)
end

Looking into the Digest source code (digest.rb and digest/sha2.rb inside the lib directory in my ruby installation), however, I can't seem to find where the hexdigest method is defined, but yet the code seems to work just fine.
Can someone enlighten me how this happens? I assume that I need to look for a code that somehow looks like:
def hexdigest(...)
   ...
end

","According to http://ruby-doc.org/stdlib/libdoc/digest/rdoc/classes/Digest/Class.html
Digest is implemented in digest.rb and also digest.c (native methods). I believe what is happening here is hexdigest is a class method on Digest which Digest::SHA2 inherits. The implementation of hexdigest calls the digest class method which each digest type implements and returns the result.
","5049","<ruby-on-rails><ruby><sha><digest>","1","1","2","2014-10-06 12:01:24","4686040","0","","2174742","","2014-10-06 12:01:24","2011-01-13 22:17:35",""
"23756832","Can't get to have SHA-256 hash working with my spring security","I am using the Spring Roo framework which uses Spring Security as security framework. I configured it the following way:
<authentication-manager alias=""authenticationManager"">
    <!-- SHA-256 values can be produced using 'echo -n your_desired_password | sha256sum' (using normal *nix environments) -->
    <authentication-provider>
        <password-encoder hash=""sha-256"">
            <!-- <salt-source user-property=""login""/> -->
        </password-encoder>
        <jdbc-user-service data-source-ref=""dataSource""
            users-by-username-query=""
            SELECT login, password, enabled
            FROM user WHERE login = ?""

            authorities-by-username-query=""
            SELECT u.login, r.authority
            FROM user u, rol r, 
            usuer_role ur
            WHERE u.login = ur.usuarer
            AND r.roleId = ur.role
            AND u.login = ?""        
        />
        <user-service>
            <user name=""admin"" password=""8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918"" authorities=""ROLE_ADMIN"" />
            <user name=""user"" password=""04f8996da763b7a969b1028ee3007569eaf3a635486ddab211d512c85b9df8fb"" authorities=""ROLE_USER"" />
        </user-service>
    </authentication-provider>

In order to make the passwords match I edited the UserController create method so the password is stored applying a SHA-256 hash, the same that was configured in applicationContext-security.xml which is the security configuration file.
This is how I do it:
public String create(@Valid User user, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) throws NoSuchAlgorithmException, UnsupportedEncodingException {
    if (bindingResult.hasErrors()) {
        populateEditForm(uiModel, usuario);
        return ""security/users/create"";
    }
    MessageDigest md = MessageDigest.getInstance(""SHA-256"");
    md.update(user.getPassword().getBytes(""UTF-8""));
    byte[] digest = md.digest();
    usuario.setPassword( new String(digest, ""UTF-8""));
    uiModel.asMap().clear();
    user.persist();
    return ""redirect:/security/users/"" + encodeUrlPathSegment(usuario.getId().toString(), httpServletRequest);
}

I tried setting the password to admin which is the same provided for the default user: admin, password: admin by the configuration file in order to check that the password generated by my create method matches.
However, the hashed password in the configuration file is 8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918 but the one stored in the database is a weird set of characters when I inspect my mysql database via console or  ivAMgsKo*H when displayed in a page.
Any help? 
","
However, the hashed password in the configuration file is 
  8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918 but the one stored in the > database is a weird set of characters when I inspect my mysql database via console or 
  ivAMgsKo*H when displayed in a page.

8c6976e5b541041... 

looks like a Base64 encoded data.
While 
 ivAMgsKo*H

and your code
new String(digest, ""UTF-8"")

tells me, that your digest is not encoded but stored as a UTF-8 string.
A hash value can contain not printable byte values, so it is common to encode the value. For example with Base64.
","4987","<java><spring><spring-mvc><spring-security><sha>","1","-1","2","2017-02-26 06:49:58","23766819","4","4","","","","2014-05-20 10:08:24",""
"23756832","Can't get to have SHA-256 hash working with my spring security","I am using the Spring Roo framework which uses Spring Security as security framework. I configured it the following way:
<authentication-manager alias=""authenticationManager"">
    <!-- SHA-256 values can be produced using 'echo -n your_desired_password | sha256sum' (using normal *nix environments) -->
    <authentication-provider>
        <password-encoder hash=""sha-256"">
            <!-- <salt-source user-property=""login""/> -->
        </password-encoder>
        <jdbc-user-service data-source-ref=""dataSource""
            users-by-username-query=""
            SELECT login, password, enabled
            FROM user WHERE login = ?""

            authorities-by-username-query=""
            SELECT u.login, r.authority
            FROM user u, rol r, 
            usuer_role ur
            WHERE u.login = ur.usuarer
            AND r.roleId = ur.role
            AND u.login = ?""        
        />
        <user-service>
            <user name=""admin"" password=""8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918"" authorities=""ROLE_ADMIN"" />
            <user name=""user"" password=""04f8996da763b7a969b1028ee3007569eaf3a635486ddab211d512c85b9df8fb"" authorities=""ROLE_USER"" />
        </user-service>
    </authentication-provider>

In order to make the passwords match I edited the UserController create method so the password is stored applying a SHA-256 hash, the same that was configured in applicationContext-security.xml which is the security configuration file.
This is how I do it:
public String create(@Valid User user, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) throws NoSuchAlgorithmException, UnsupportedEncodingException {
    if (bindingResult.hasErrors()) {
        populateEditForm(uiModel, usuario);
        return ""security/users/create"";
    }
    MessageDigest md = MessageDigest.getInstance(""SHA-256"");
    md.update(user.getPassword().getBytes(""UTF-8""));
    byte[] digest = md.digest();
    usuario.setPassword( new String(digest, ""UTF-8""));
    uiModel.asMap().clear();
    user.persist();
    return ""redirect:/security/users/"" + encodeUrlPathSegment(usuario.getId().toString(), httpServletRequest);
}

I tried setting the password to admin which is the same provided for the default user: admin, password: admin by the configuration file in order to check that the password generated by my create method matches.
However, the hashed password in the configuration file is 8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918 but the one stored in the database is a weird set of characters when I inspect my mysql database via console or  ivAMgsKo*H when displayed in a page.
Any help? 
","Finally I came up with this solution, thank to @Oleg Estekhin comment:
public String sha256(String original) throws NoSuchAlgorithmException {
    MessageDigest md = MessageDigest.getInstance(""SHA-256"");
    md.update(original.getBytes());
    byte[] digest = md.digest();
    return new String(Hex.encodeHexString(digest));
}

","4987","<java><spring><spring-mvc><spring-security><sha>","1","4","2","2017-02-26 06:49:58","23766819","4","4","","","","2014-05-20 10:08:24",""
"6006743","Getting MD5 and SHA-1","I am looking for some help in getting MD5 and SHA-1 in my iPhone app.
Can anybody give me an idea on how to get these? 
","#include <CommonCrypto/CommonDigest.h>

-(NSString*) sha1:(NSString*)input
{

 NSData *data = [input dataUsingEncoding: NSUTF8StringEncoding]; 

 uint8_t digest[CC_SHA1_DIGEST_LENGTH];

 CC_SHA1(data.bytes, data.length, digest);

 NSMutableString* output = [NSMutableString stringWithCapacity:CC_SHA1_DIGEST_LENGTH * 2];

 for(int i = 0; i < CC_SHA1_DIGEST_LENGTH; i++)
 [output appendFormat:@""%02x"", digest[i]];

 return output;

}

- (NSString *) md5:(NSString *) input
{
 const char *cStr = [input UTF8String];
 unsigned char digest[CC_MD5_DIGEST_LENGTH];
 CC_MD5( cStr, (CC_LONG)strlen(cStr), digest ); // This is the md5 call

 NSMutableString *output = [NSMutableString stringWithCapacity:CC_MD5_DIGEST_LENGTH * 2];

 for(int i = 0; i < CC_MD5_DIGEST_LENGTH; i++)
 [output appendFormat:@""%02x"", digest[i]];

 return  output;

}

also have a look at my blog post here - 
http://www.makebetterthings.com/blogs/iphone/how-to-get-md5-and-sha1-in-objective-c-ios-sdk/
","4984","<ios><objective-c><md5><sha>","10","16","1","2015-10-20 15:01:10","6006747","2","6","603977","","2013-04-12 18:29:22","2011-05-15 05:48:33",""
"46194754","How to Hex Encode a SHA-256 Hash","How to Hex Encode a SHA-256 hash properly in C#?
private static string ToHex(byte[] bytes, bool upperCase)
{
    StringBuilder result = new StringBuilder(bytes.Length * 2);

    for (int i = 0; i < bytes.Length; i++)
        result.Append(bytes[i].ToString(upperCase ? ""X2"" : ""x2""));

    return result.ToString();
}

private string hashRequestBody(string reqBody)
{
    string hashString;
    using (var sha256 = SHA256Managed.Create())
    {
        var hash = sha256.ComputeHash(Encoding.Default.GetBytes(reqBody));
        hashString = ToHex(hash, false);
    }

    MessageBox.Show(hashString);
    return hashString;
}

I did this, but the result is different with bank's sandbox I worked with.
TEST DATA:
{""CorporateID"":""BCAAPI2016"",""SourceAccountNumber"":""0201245680"",""TransactionID"":""00000001"",""TransactionDate"":""2017-09-13"",""ReferenceID"":""refID"",""CurrencyCode"":""IDR"",""Amount"":""10000"",""BeneficiaryAccountNumber"":""0201245681"",""Remark1"":""Transfer Test"",""Remark2"":""Online Transfer""}
Bank's sandbox result: e9d06986c1ed6b063bf59aa873030013725c518631deef2b2147e614017c2141
Mine: 1c83acc42cf905ca8afba27ef0640c70ad2856a366b57c17cf16f2894327676e
","I've seen several solutions to this problem, but your code is the most elegant.  I slightly re-factored it and tested it for this answer.  I also get the hash: 

1c83acc42cf905ca8afba27ef0640c70ad2856a366b57c17cf16f2894327676e

See working fiddle here: https://dotnetfiddle.net/QbsKTc
Perhaps this hash is different to the bank's because you changed the JSON string to remove private data?
using System;
using System.Security.Cryptography;
using System.Text;

public class Program
{
    public static void Main()
    {
        Console.WriteLine(SHA256HexHashString(""{\""CorporateID\"":\""BCAAPI2016\"",\""SourceAccountNumber\"":\""0201245680\"",\""TransactionID\"":\""00000001\"",\""TransactionDate\"":\""2017-09-13\"",\""ReferenceID\"":\""refID\"",\""CurrencyCode\"":\""IDR\"",\""Amount\"":\""10000\"",\""BeneficiaryAccountNumber\"":\""0201245681\"",\""Remark1\"":\""Transfer Test\"",\""Remark2\"":\""Online Transfer\""}""));
    }

    private static string ToHex(byte[] bytes, bool upperCase)
    {
        StringBuilder result = new StringBuilder(bytes.Length * 2);
        for (int i = 0; i < bytes.Length; i++)
            result.Append(bytes[i].ToString(upperCase ? ""X2"" : ""x2""));
        return result.ToString();
    }

    private static string SHA256HexHashString(string StringIn)
    {
        string hashString;
        using (var sha256 = SHA256Managed.Create())
        {
            var hash = sha256.ComputeHash(Encoding.Default.GetBytes(StringIn));
            hashString = ToHex(hash, false);
        }

        return hashString;
    }
}

","4969","<c#><hex><encode><sha256><sha>","2","4","1","2017-12-12 01:41:47","47764129","4","","8443113","","2017-09-13 10:53:19","2017-09-13 10:11:17",""
"7846841","How to calculate sha256 faster in java?","I have found out that calculating sha256 in java is slow. For example, it is slower than python. I wrote two simple benchmarks that calculate sha256 of 1GB of zeroes. In both cases the result is the same and correct, but the python time is 5653ms and the java time is 8623ms(53% slower). The result is similar every time and this is an important difference for me.
How to make the calculation in java faster?
Benchmarks:
Java:
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

public class BenchmarkSha256 {

  public static void main(String... args) throws NoSuchAlgorithmException {
    int size = 1024 * 1024;
    byte[] bytes = new byte[size];
    MessageDigest md = MessageDigest.getInstance(""SHA-256"");
    long startTime = System.nanoTime();
    for (int i = 0; i < 1024; i++)
      md.update(bytes, 0, size);
    long endTime = System.nanoTime();
    System.out.println(String.format(""%1$064x"", new java.math.BigInteger(1, md.digest())));
    System.out.println(String.format(""%d ms"", (endTime - startTime) / 1000000));
  }

}

Python:
#!/usr/bin/env python

import hashlib
import time

size = 1024 * 1024
bytes = bytearray(size)
md = hashlib.sha256()
startTime = time.time()
for i in range(0, 1024):
  md.update(bytes)
endTime = time.time()
print ""%s\n%d ms"" % (md.hexdigest(), (endTime - startTime) * 1000)

results:
~> java BenchmarkSha256
49bc20df15e412a64472421e13fe86ff1c5165e18b2afccf160d4dc19fe68a14
8623 ms

~> python BenchmarkSha256.py 
49bc20df15e412a64472421e13fe86ff1c5165e18b2afccf160d4dc19fe68a14
5653 ms

versions of java and python:
~> java -version
java version ""1.6.0_26""
Java(TM) SE Runtime Environment (build 1.6.0_26-b03)
Java HotSpot(TM) 64-Bit Server VM (build 20.1-b02, mixed mode)

~> python --version
Python 2.7

","I think that java is just slow by nature.  This question may be relevant to you Java: Calculate SHA-256 hash of large file efficiently
","4858","<java><optimization><sha256><sha>","7","0","5","2019-10-16 01:15:04","","5","3","1093147","","2017-01-18 23:10:27","2011-10-21 08:25:15",""
"7846841","How to calculate sha256 faster in java?","I have found out that calculating sha256 in java is slow. For example, it is slower than python. I wrote two simple benchmarks that calculate sha256 of 1GB of zeroes. In both cases the result is the same and correct, but the python time is 5653ms and the java time is 8623ms(53% slower). The result is similar every time and this is an important difference for me.
How to make the calculation in java faster?
Benchmarks:
Java:
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

public class BenchmarkSha256 {

  public static void main(String... args) throws NoSuchAlgorithmException {
    int size = 1024 * 1024;
    byte[] bytes = new byte[size];
    MessageDigest md = MessageDigest.getInstance(""SHA-256"");
    long startTime = System.nanoTime();
    for (int i = 0; i < 1024; i++)
      md.update(bytes, 0, size);
    long endTime = System.nanoTime();
    System.out.println(String.format(""%1$064x"", new java.math.BigInteger(1, md.digest())));
    System.out.println(String.format(""%d ms"", (endTime - startTime) / 1000000));
  }

}

Python:
#!/usr/bin/env python

import hashlib
import time

size = 1024 * 1024
bytes = bytearray(size)
md = hashlib.sha256()
startTime = time.time()
for i in range(0, 1024):
  md.update(bytes)
endTime = time.time()
print ""%s\n%d ms"" % (md.hexdigest(), (endTime - startTime) * 1000)

results:
~> java BenchmarkSha256
49bc20df15e412a64472421e13fe86ff1c5165e18b2afccf160d4dc19fe68a14
8623 ms

~> python BenchmarkSha256.py 
49bc20df15e412a64472421e13fe86ff1c5165e18b2afccf160d4dc19fe68a14
5653 ms

versions of java and python:
~> java -version
java version ""1.6.0_26""
Java(TM) SE Runtime Environment (build 1.6.0_26-b03)
Java HotSpot(TM) 64-Bit Server VM (build 20.1-b02, mixed mode)

~> python --version
Python 2.7

","Have you tried feeding in the data incrementally?  You can use messageDigest.update() with the bytes and then get the final digest with messageDigest.digest()?
Allocating a 1GB array in memory is a fairly chunky operation.  You may find that smaller incremental updates are faster in the end.
","4858","<java><optimization><sha256><sha>","7","4","5","2019-10-16 01:15:04","","5","3","1093147","","2017-01-18 23:10:27","2011-10-21 08:25:15",""
"7846841","How to calculate sha256 faster in java?","I have found out that calculating sha256 in java is slow. For example, it is slower than python. I wrote two simple benchmarks that calculate sha256 of 1GB of zeroes. In both cases the result is the same and correct, but the python time is 5653ms and the java time is 8623ms(53% slower). The result is similar every time and this is an important difference for me.
How to make the calculation in java faster?
Benchmarks:
Java:
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

public class BenchmarkSha256 {

  public static void main(String... args) throws NoSuchAlgorithmException {
    int size = 1024 * 1024;
    byte[] bytes = new byte[size];
    MessageDigest md = MessageDigest.getInstance(""SHA-256"");
    long startTime = System.nanoTime();
    for (int i = 0; i < 1024; i++)
      md.update(bytes, 0, size);
    long endTime = System.nanoTime();
    System.out.println(String.format(""%1$064x"", new java.math.BigInteger(1, md.digest())));
    System.out.println(String.format(""%d ms"", (endTime - startTime) / 1000000));
  }

}

Python:
#!/usr/bin/env python

import hashlib
import time

size = 1024 * 1024
bytes = bytearray(size)
md = hashlib.sha256()
startTime = time.time()
for i in range(0, 1024):
  md.update(bytes)
endTime = time.time()
print ""%s\n%d ms"" % (md.hexdigest(), (endTime - startTime) * 1000)

results:
~> java BenchmarkSha256
49bc20df15e412a64472421e13fe86ff1c5165e18b2afccf160d4dc19fe68a14
8623 ms

~> python BenchmarkSha256.py 
49bc20df15e412a64472421e13fe86ff1c5165e18b2afccf160d4dc19fe68a14
5653 ms

versions of java and python:
~> java -version
java version ""1.6.0_26""
Java(TM) SE Runtime Environment (build 1.6.0_26-b03)
Java HotSpot(TM) 64-Bit Server VM (build 20.1-b02, mixed mode)

~> python --version
Python 2.7

","Well, unless you are doing this to compare two command line programs, this is not the best test.  Primarily, these numbers are being polluted by the vast differences in overhead associated with each program.  VM start times will vary.  Memory allocation speeds will vary.
To clean this up a bit, simply take two time samples before and after each actual MD5 calculation within the code itself.
This will actually measure performance of the hashing operation itself.
","4858","<java><optimization><sha256><sha>","7","3","5","2019-10-16 01:15:04","","5","3","1093147","","2017-01-18 23:10:27","2011-10-21 08:25:15",""
"7846841","How to calculate sha256 faster in java?","I have found out that calculating sha256 in java is slow. For example, it is slower than python. I wrote two simple benchmarks that calculate sha256 of 1GB of zeroes. In both cases the result is the same and correct, but the python time is 5653ms and the java time is 8623ms(53% slower). The result is similar every time and this is an important difference for me.
How to make the calculation in java faster?
Benchmarks:
Java:
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

public class BenchmarkSha256 {

  public static void main(String... args) throws NoSuchAlgorithmException {
    int size = 1024 * 1024;
    byte[] bytes = new byte[size];
    MessageDigest md = MessageDigest.getInstance(""SHA-256"");
    long startTime = System.nanoTime();
    for (int i = 0; i < 1024; i++)
      md.update(bytes, 0, size);
    long endTime = System.nanoTime();
    System.out.println(String.format(""%1$064x"", new java.math.BigInteger(1, md.digest())));
    System.out.println(String.format(""%d ms"", (endTime - startTime) / 1000000));
  }

}

Python:
#!/usr/bin/env python

import hashlib
import time

size = 1024 * 1024
bytes = bytearray(size)
md = hashlib.sha256()
startTime = time.time()
for i in range(0, 1024):
  md.update(bytes)
endTime = time.time()
print ""%s\n%d ms"" % (md.hexdigest(), (endTime - startTime) * 1000)

results:
~> java BenchmarkSha256
49bc20df15e412a64472421e13fe86ff1c5165e18b2afccf160d4dc19fe68a14
8623 ms

~> python BenchmarkSha256.py 
49bc20df15e412a64472421e13fe86ff1c5165e18b2afccf160d4dc19fe68a14
5653 ms

versions of java and python:
~> java -version
java version ""1.6.0_26""
Java(TM) SE Runtime Environment (build 1.6.0_26-b03)
Java HotSpot(TM) 64-Bit Server VM (build 20.1-b02, mixed mode)

~> python --version
Python 2.7

","While you might be able to improve the performance of the Java tool a bit, the Python implementation will usually be faster because it is likely delegating to assembled libraries which run with significantly better performance.
If your project does not have any other significant dependencies on Java, I'd recommend going with the Python implementation.
","4858","<java><optimization><sha256><sha>","7","0","5","2019-10-16 01:15:04","","5","3","1093147","","2017-01-18 23:10:27","2011-10-21 08:25:15",""
"7846841","How to calculate sha256 faster in java?","I have found out that calculating sha256 in java is slow. For example, it is slower than python. I wrote two simple benchmarks that calculate sha256 of 1GB of zeroes. In both cases the result is the same and correct, but the python time is 5653ms and the java time is 8623ms(53% slower). The result is similar every time and this is an important difference for me.
How to make the calculation in java faster?
Benchmarks:
Java:
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

public class BenchmarkSha256 {

  public static void main(String... args) throws NoSuchAlgorithmException {
    int size = 1024 * 1024;
    byte[] bytes = new byte[size];
    MessageDigest md = MessageDigest.getInstance(""SHA-256"");
    long startTime = System.nanoTime();
    for (int i = 0; i < 1024; i++)
      md.update(bytes, 0, size);
    long endTime = System.nanoTime();
    System.out.println(String.format(""%1$064x"", new java.math.BigInteger(1, md.digest())));
    System.out.println(String.format(""%d ms"", (endTime - startTime) / 1000000));
  }

}

Python:
#!/usr/bin/env python

import hashlib
import time

size = 1024 * 1024
bytes = bytearray(size)
md = hashlib.sha256()
startTime = time.time()
for i in range(0, 1024):
  md.update(bytes)
endTime = time.time()
print ""%s\n%d ms"" % (md.hexdigest(), (endTime - startTime) * 1000)

results:
~> java BenchmarkSha256
49bc20df15e412a64472421e13fe86ff1c5165e18b2afccf160d4dc19fe68a14
8623 ms

~> python BenchmarkSha256.py 
49bc20df15e412a64472421e13fe86ff1c5165e18b2afccf160d4dc19fe68a14
5653 ms

versions of java and python:
~> java -version
java version ""1.6.0_26""
Java(TM) SE Runtime Environment (build 1.6.0_26-b03)
Java HotSpot(TM) 64-Bit Server VM (build 20.1-b02, mixed mode)

~> python --version
Python 2.7

","I ran a test on the following SHA-256 implementations: Java built-in, Groovy built-in, Apache Commons, Guava, and Bouncy Castle. My results on one run are here:
>groovy hash_comp.groovy
Hashing 1000000 iterations of SHA-256
time java: 2688         372023.8095238095 hashes/sec
time groovy: 1948       513347.0225872690 hashes/sec
time apache: 867        1153402.5374855825 hashes/sec
time guava: 953         1049317.9433368311 hashes/sec
time bouncy: 1890       529100.5291005291 hashes/sec

This was run on an Intel i5 8th Gen. Apache and Guava were easily to two fastest implementations. Apache Commons narrowly beat out Guava on 9/10 of my runs. My code for this test is available here.
Note that after running this test I started to wonder if you could go even faster by tapping into the CPU instruction set (Intel has SHA extensions). I'm not sure there is a JVM way to do this without JNI or JNA. I created another question here.
","4858","<java><optimization><sha256><sha>","7","0","5","2019-10-16 01:15:04","","5","3","1093147","","2017-01-18 23:10:27","2011-10-21 08:25:15",""
"4892462","SQL Server 2005 hashbytes(‘sha1’,'code') alternative in MySQL","Hi i have several passwords encrypted in this way:
hashbytes(‘sha1’,'password')

Using SQL Server 2005, we are planing a migration to MySQL.
There is a hash function equivalent in MySQL or PHP.
Because i use a standard SHA1 algorithm and results are different that the ones i have using SQL Server algorithm.
","MySQL has a SHA1 function:
mysql> SELECT SHA1('password');
+------------------------------------------+
| SHA1('password')                         |
+------------------------------------------+
| 5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8 |
+------------------------------------------+

What does the equivalent SQL Server function produce?
","4856","<mysql><database><sql-server-2005><sha>","2","0","2","2011-03-26 01:33:04","","0","","76337","","2011-02-20 20:51:02","2011-02-03 22:26:05",""
"4892462","SQL Server 2005 hashbytes(‘sha1’,'code') alternative in MySQL","Hi i have several passwords encrypted in this way:
hashbytes(‘sha1’,'password')

Using SQL Server 2005, we are planing a migration to MySQL.
There is a hash function equivalent in MySQL or PHP.
Because i use a standard SHA1 algorithm and results are different that the ones i have using SQL Server algorithm.
","I found out that php uses ascii encoding, so in order to get the same results in sql server management studio for example, use a varchar(8000) as @input.
","4856","<mysql><database><sql-server-2005><sha>","2","2","2","2011-03-26 01:33:04","","0","","76337","","2011-02-20 20:51:02","2011-02-03 22:26:05",""
"28465173","ImportError: No module named 'sha'","all, I tried to import sha in a python file, but got the error message when compiling the file.
ImportError: No module named 'sha'

I am using pycharm 4.0.4 with python 3.4.2 installed on Win 7. I am wondering how to solve the problem.
","Please use hashlib, in any case.  sha has long been deprecated.
","4793","<python><python-3.x><pycharm><sha>","2","4","1","2015-02-11 21:54:00","28465270","0","1","4099593","","2015-02-11 21:51:30","2015-02-11 21:48:06",""
"6532606","What is the output format of SHA256","What is the output format of the SHA256? It is composed by letters and numbers only? And it is case insensitive?
","As with most (all?) crypto hashes, the output of SHA-256 is binary data. How that binary data is encoded in a text format is up to you. For example, you could encode it as hex, or base64.
","4792","<sha256><sha>","7","12","1","2011-06-30 09:22:35","6532636","0","","","","","2011-06-30 09:18:45",""
"5549102","Problems with Python MD5, SHA512 (+salt) encryption","I'm trying to understand how does Linux encrypt our password on the etc/shadow file, so I've dont a new virtual 'test' user to make some test:
user: newuser
password: usrpw123
Generated salt: Ii4CGbr7
So the OS makes me the following line on the etc/shadow file, using a SHA512 encryptation system ($6$):    newuser:$6$Ii4CGbr7$IOua8/oPV79Yp.BwzpxlSHjmCvRfTomZ.bhEvjZV2x5qhrvk82lZVrEtWQQej2pOWMdN7hvKwNgvCXKFQm5CB/:15069:0:99999:7:::
Now, I take the SHA512 module from python and try this:
import hashlib
m = hashlib.sha512()
m.update('Ii4CGbr7'+'usrpw123')
print m.hexdigest

This gives me the following hash as a result:
c73156daca3e31125ce457f1343201cc8a26400b2974440af2cc72687922b48b6631d21c186796ea2756ad987a996d2b261fe9ff3af4cc81e14c3029eac5df55
As you can see, it's different than the other one on the /etc/shadow file, and I dont know why if I'm using the same salt+password to generate the hash.
Can someone give me a hand and explain me more or less why this happens?
And also, why does the /etc/shadow files generates a hash with some dots (.)?
Thanks
","The fields in /etc/shadow are not built or interpreted the way you think they are.  You'll want to read the man page for details, but the most obvious difference is that it uses an unusual base64 encoding for both the salt and the hash.
","4768","<python><md5><salt><sha><sha512>","6","6","3","2014-02-26 18:25:23","5549309","3","2","168352","","2011-04-05 08:46:34","2011-04-05 08:22:11",""
"5549102","Problems with Python MD5, SHA512 (+salt) encryption","I'm trying to understand how does Linux encrypt our password on the etc/shadow file, so I've dont a new virtual 'test' user to make some test:
user: newuser
password: usrpw123
Generated salt: Ii4CGbr7
So the OS makes me the following line on the etc/shadow file, using a SHA512 encryptation system ($6$):    newuser:$6$Ii4CGbr7$IOua8/oPV79Yp.BwzpxlSHjmCvRfTomZ.bhEvjZV2x5qhrvk82lZVrEtWQQej2pOWMdN7hvKwNgvCXKFQm5CB/:15069:0:99999:7:::
Now, I take the SHA512 module from python and try this:
import hashlib
m = hashlib.sha512()
m.update('Ii4CGbr7'+'usrpw123')
print m.hexdigest

This gives me the following hash as a result:
c73156daca3e31125ce457f1343201cc8a26400b2974440af2cc72687922b48b6631d21c186796ea2756ad987a996d2b261fe9ff3af4cc81e14c3029eac5df55
As you can see, it's different than the other one on the /etc/shadow file, and I dont know why if I'm using the same salt+password to generate the hash.
Can someone give me a hand and explain me more or less why this happens?
And also, why does the /etc/shadow files generates a hash with some dots (.)?
Thanks
","There is an algorithm for generating the password hashes found in /etc/shadow.
See this document for an explanation:
http://www.akkadia.org/drepper/SHA-crypt.txt
There's an implementation of this in python here:
http://packages.python.org/passlib/lib/passlib.hash.sha512_crypt.html
","4768","<python><md5><salt><sha><sha512>","6","6","3","2014-02-26 18:25:23","5549309","3","2","168352","","2011-04-05 08:46:34","2011-04-05 08:22:11",""
"5549102","Problems with Python MD5, SHA512 (+salt) encryption","I'm trying to understand how does Linux encrypt our password on the etc/shadow file, so I've dont a new virtual 'test' user to make some test:
user: newuser
password: usrpw123
Generated salt: Ii4CGbr7
So the OS makes me the following line on the etc/shadow file, using a SHA512 encryptation system ($6$):    newuser:$6$Ii4CGbr7$IOua8/oPV79Yp.BwzpxlSHjmCvRfTomZ.bhEvjZV2x5qhrvk82lZVrEtWQQej2pOWMdN7hvKwNgvCXKFQm5CB/:15069:0:99999:7:::
Now, I take the SHA512 module from python and try this:
import hashlib
m = hashlib.sha512()
m.update('Ii4CGbr7'+'usrpw123')
print m.hexdigest

This gives me the following hash as a result:
c73156daca3e31125ce457f1343201cc8a26400b2974440af2cc72687922b48b6631d21c186796ea2756ad987a996d2b261fe9ff3af4cc81e14c3029eac5df55
As you can see, it's different than the other one on the /etc/shadow file, and I dont know why if I'm using the same salt+password to generate the hash.
Can someone give me a hand and explain me more or less why this happens?
And also, why does the /etc/shadow files generates a hash with some dots (.)?
Thanks
","I fell into the same trap as everything that I read lead me to believe you could retrieve the results the same way you have it written.
I was able to determine the password by using the salt and password using crypt.crypt()
import crypt
crypt.crypt(password, salt)

salt: $6$Ii4CGbr7
password: usrpw123
doesn't exactly use the hashlib library but it works.
","4768","<python><md5><salt><sha><sha512>","6","2","3","2014-02-26 18:25:23","5549309","3","2","168352","","2011-04-05 08:46:34","2011-04-05 08:22:11",""
"24066318","How to generate RSA SHA signature using OpenSSL in C","I need some help using OpenSSL to generate a signature of a block of data using C (Windows and Linux). The application has to do with Google authentication.  The instructions from Google's documentation are:
""Sign the UTF-8 representation of the input using SHA256withRSA (also known as RSASSA-PKCS1-V1_5-SIGN
with the SHA-256 hash function) with the private key obtained from the Google Developers Console. The
output will be a byte array.""
The private key is a .p12 file containing 1660 bytes of binary data.
Do I use the RSA_sign() API for this?  If so am I supposed to hash the data first?  Using what
key value?  I assume the RSA * parameter is supposed to hold the private key?  How does it get
loaded?  I have used the HMAC function to generate a SHA hash, but I'm a bit lost here - any help
or sample code would be appreciated.  (And yes, I know Google has libraries to do this, but none
for C, which I need to use).
","You can use RSA_sign to sign the data with SHA256 hash. You can call this
RSA_sign(NID_sha256, digest, digest_len, &sign_buffer, sign_len, rsa_key);

You have calculate SHA256 hash of the data into digest buffer. rsa_key should be initialized.
Since, you have .p12 file, you need to do the following.
Create PKCS12 structure from .p12 file.
PKCS12 * p12 = d2i_PKCS12_fp(fp_to_p12_file, NULL);

Parse the p12 structure to certificate and key.
PKCS12_parse(p12, passphrase, &evp_pkey, &x509_cert, NULL);

It will give EVP_PKEY structure from which you can get RSA structure using EVP_PKEY_get1_RSA or access evp_pkey->pkey.rsa member of the structure.
This should help you to start.
","4710","<c><openssl><rsa><sha>","4","4","1","2014-06-06 06:17:10","","0","","","","","2014-06-05 17:17:42",""
"11845157","How to create serials key to protect an application","I have an application that creates a serial key as follows:
Take customername
Sign customername using privatekey and sha/dsa algorithm

Then license can be checked by decoding with public key, and checking cuastomername matches
This works okay except that the generated serial is rather long. So it is not really practical for customer to type in the serial key instead they have to provide a serial with in a file, which is rather different to how mist applications and work and is confusing.
Many other applications just provide the user with a Guid when they make a purchase
i.e 5bd1060b-8608-4817-93ca-207f7c828e2f
and the user has to enter their email address and guid to license their application.
This looks like a neater solution for the user but I don't understand how such an application verifies a valid guid from an invalid guid unless its done all online by checking emailaddress/guid pairs on a database. But I really would like some kind of verification to be done without requiring an online check otherwise: 
a>The application will not work if internet connection/my server down
or
b>they can circumvent check by disabling internet access 
EDIT:
My understanding solution as proposed by answer below:
User makes purchase
Take emailaddress + salt
Encrypt with SHA1 gives 160bit hash
Convert to hex notation gives 20 hex values, i.e 40 characters
Lop of last 8 characters to give a Guid
Email User Gui and Email address which they enter into program 
Program verifies this pairing by taking the email address, adding salt, encrypting ectera
and checking generates a valid guid.   
My main problem with this is that I need to store the salt in the program somewhere, therefore if the hacker finds the salt and works out what Im doing they can create a valid license key generator for any email address.  
My current method for another program:
I have generated a public key/private key pair
User makes purchase
I generate a license by signing the emailaddress
BaseEncode the generated license
Send license to user
Program verifies license by basedecoding and decrypting with public key   
My problem has been that when I sign the emailaddress is too long so I end up putting it in a file instead of the user entering it into a field, but maybe the problem is that I am base64encoding rather than converting to Hex.
How long can the output of signing be, does it depend on the length of the input or is it always the same ?
Because I decrypt the key with the public key I canot lop some chars of the license key, but if the generate key is only 40 characters I guess that is okay
I think the advantage of this method is that even if hacker works out how I'm doing things, they cannot create a license generator because they do not, and cannot get the private key because it is only stored on my server. They could only generate licenses if they created a new private/public key pairing and then if my application had the public key encoded in itself  the application could reject the license anyway.
Of course they could hack the application, but if the application was updated regularly this would become alot of effort.
So in summary:
Have I understood this correctly, which method is best, and how much data is generated for second approach.
","You may just hash the user info concatenated with a ""secret"" salt and then truncate the hash.
Hackers - provided they are interested in your program - will crack it, by reverse engineering the source: they'll find both the hash algorithm and the secret salt.
But this is to happen also with your sign&verify solution: they can just bypass the check making it return true.
So the sign&verify solution is more complex but not safer.
","4702","<java><licensing><sha><serial-number>","4","0","2","2012-11-29 13:39:52","12226398","0","3","58074","","2012-11-29 13:39:52","2012-08-07 11:39:33",""
"11845157","How to create serials key to protect an application","I have an application that creates a serial key as follows:
Take customername
Sign customername using privatekey and sha/dsa algorithm

Then license can be checked by decoding with public key, and checking cuastomername matches
This works okay except that the generated serial is rather long. So it is not really practical for customer to type in the serial key instead they have to provide a serial with in a file, which is rather different to how mist applications and work and is confusing.
Many other applications just provide the user with a Guid when they make a purchase
i.e 5bd1060b-8608-4817-93ca-207f7c828e2f
and the user has to enter their email address and guid to license their application.
This looks like a neater solution for the user but I don't understand how such an application verifies a valid guid from an invalid guid unless its done all online by checking emailaddress/guid pairs on a database. But I really would like some kind of verification to be done without requiring an online check otherwise: 
a>The application will not work if internet connection/my server down
or
b>they can circumvent check by disabling internet access 
EDIT:
My understanding solution as proposed by answer below:
User makes purchase
Take emailaddress + salt
Encrypt with SHA1 gives 160bit hash
Convert to hex notation gives 20 hex values, i.e 40 characters
Lop of last 8 characters to give a Guid
Email User Gui and Email address which they enter into program 
Program verifies this pairing by taking the email address, adding salt, encrypting ectera
and checking generates a valid guid.   
My main problem with this is that I need to store the salt in the program somewhere, therefore if the hacker finds the salt and works out what Im doing they can create a valid license key generator for any email address.  
My current method for another program:
I have generated a public key/private key pair
User makes purchase
I generate a license by signing the emailaddress
BaseEncode the generated license
Send license to user
Program verifies license by basedecoding and decrypting with public key   
My problem has been that when I sign the emailaddress is too long so I end up putting it in a file instead of the user entering it into a field, but maybe the problem is that I am base64encoding rather than converting to Hex.
How long can the output of signing be, does it depend on the length of the input or is it always the same ?
Because I decrypt the key with the public key I canot lop some chars of the license key, but if the generate key is only 40 characters I guess that is okay
I think the advantage of this method is that even if hacker works out how I'm doing things, they cannot create a license generator because they do not, and cannot get the private key because it is only stored on my server. They could only generate licenses if they created a new private/public key pairing and then if my application had the public key encoded in itself  the application could reject the license anyway.
Of course they could hack the application, but if the application was updated regularly this would become alot of effort.
So in summary:
Have I understood this correctly, which method is best, and how much data is generated for second approach.
","I think the signature approach is currently best practice. Btw. there are a number of free libs that cover this topic.
The length of the license key is at least determined by the signature key length - a 1024 bit key produces a 128 byte license (if no other payload is added). 
Often the license file consists of more information on the licensed use itself, like validity period, licensed submodules, throughput... - the signature itself is embedded within this structure. This way you gain flexibility and i strongly advise this solution, even if the license gets even bigger.
For importing the license in an application you can adopt a hybrid way (like we did). On one hand you can provide the classic ""import license file"" solution. On the other, we generate a random, short ID (like your GUID) and associate it with the license data. Upon registration the user enters the the short ID and the application looks up the complete license via HTTP. You must be online only once, you can still provide complex licenses and the user only needs a short ID.
EDIT

The length of s signature is the length of the key. E.g. 1024 bit (or 128 byte)
You can use this signature alone if your application knows what data is signed (e.g. the mail)
You can sign a ""license document"" containing more properties than only the mail. In this case the license contains  property AND signature (and is, accordingly, longer than only the signature)
You dont need online connection for license check. Just import a license with the application and check whenever you like.
An addition to license file import you CAN adopt an online download of the license file using a short ID as a key. The license is downloaded and offline. So you have the best of both worlds.

","4702","<java><licensing><sha><serial-number>","4","1","2","2012-11-29 13:39:52","12226398","0","3","58074","","2012-11-29 13:39:52","2012-08-07 11:39:33",""
"41954287","SHA256 base 64 hash generation in SQL Server","I need to generate a SHA256 base 64 hash from a table in SQL server but I can't find that algorithm in the list HASHBYTES arguments. 
Is there a way to generate it directly in SQL Server?
Duplicate disclamer:
My question is not duplicate of SHA256 in T-sql stored procedure as I am looking for the SHA256 base 64 version of the algorithm which is not listed in the page.
Numeric Example
I have this query result in SQL Server

Start date,End date,POD,Amount,Currency 
2016-01-01,2016-12-31,1234567890,12000,EUR

this give me the following string (using concatenate function) 

2016-01-012016-12-31123456789012000EUR

whit this convertion tool I get the following hash 

GMRzFNmm90KLVtO1kwTf7EcSeImq+96QTHgnWFFmZ0U

that I need to send to a customer.
","First, the generator link you provided outputs the base64 representation in not exactly correct format. Namely, it omits the padding sequence. Though theoretically optional, padding is mandatory in MS SQL Server (tested on 2012 and 2016 versions).
With this in mind, the following code gives you what you need:
declare @s varchar(max), @hb varbinary(128), @h64 varchar(128);

select @s = '2016-01-012016-12-31123456789012000EUR';

set @hb = hashbytes('sha2_256', @s);
set @h64 = cast(N'' as xml).value('xs:base64Binary(sql:variable(""@hb""))', 'varchar(128)');

select @hb as [BinaryHash], @h64 as [64Hash];

Apart from the aforementioned padding, there is another caveat for you to look for. Make sure that the input string is always of the same type, that is, either always varchar or always nvarchar. If some of your hashes will be calculated from ASCII strings and some from UTF-16, results will be completely different. Depending on which languages are used in your system, it might make sense to always convert the plain text to nvarchar before hashing.
","4672","<sql-server><sha256><sha>","3","11","1","2017-02-01 04:41:58","41972037","6","2","-1","","2017-05-23 12:00:10","2017-01-31 09:48:57",""
"32589456","How to use Hash SHA in Xamarin","I want to hash a String with C# in Xamarin.
Normally I'd use:
using System.Security.Cryptography;

public string SHA512StringHash(String input)
{
    SHA512 shaM = new SHA512Managed();
    // Convert the input string to a byte array and compute the hash.
    byte[] data = shaM.ComputeHash(Encoding.UTF8.GetBytes(input));
    // Create a new Stringbuilder to collect the bytes
    // and create a string.
    StringBuilder sBuilder = new StringBuilder();
    // Loop through each byte of the hashed data 
    // and format each one as a hexadecimal string.
    for (int i = 0; i < data.Length; i++)
    {
        sBuilder.Append(data[i].ToString(""x2""));
    }
    // Return the hexadecimal string.
    input = sBuilder.ToString();
    return (input);
}

But in Xamarin I don't seem able to include this library.
Is there a way to include this library or an alternative to easily hash a Password?
","I have no idea why this wouldn't work. I created a sample project to test it out and it works perfectly. The only thing i had to do is add a reference to:
using System.Security.Cryptography;

Add this line to the top of your file and it should do the trick. Or right click on the object that isn't being recognized and let XamStudio or VS solve it for you by resolving it like this: 

","4663","<c#><hash><xamarin><xamarin.forms><sha>","2","0","3","2016-10-07 15:57:24","32591077","4","","3465182","","2015-09-15 15:58:05","2015-09-15 15:04:20",""
"32589456","How to use Hash SHA in Xamarin","I want to hash a String with C# in Xamarin.
Normally I'd use:
using System.Security.Cryptography;

public string SHA512StringHash(String input)
{
    SHA512 shaM = new SHA512Managed();
    // Convert the input string to a byte array and compute the hash.
    byte[] data = shaM.ComputeHash(Encoding.UTF8.GetBytes(input));
    // Create a new Stringbuilder to collect the bytes
    // and create a string.
    StringBuilder sBuilder = new StringBuilder();
    // Loop through each byte of the hashed data 
    // and format each one as a hexadecimal string.
    for (int i = 0; i < data.Length; i++)
    {
        sBuilder.Append(data[i].ToString(""x2""));
    }
    // Return the hexadecimal string.
    input = sBuilder.ToString();
    return (input);
}

But in Xamarin I don't seem able to include this library.
Is there a way to include this library or an alternative to easily hash a Password?
","I found the solution,
i was trying to create this class in the Forms Solution, but in this Solution
using System.Security.Cryptography;
is not available.
In the iOS and Android Solution it is available.
So i implemented an Interface in the Forms Solution and used the Method in the iOS and Android Solution.
","4663","<c#><hash><xamarin><xamarin.forms><sha>","2","1","3","2016-10-07 15:57:24","32591077","4","","3465182","","2015-09-15 15:58:05","2015-09-15 15:04:20",""
"32589456","How to use Hash SHA in Xamarin","I want to hash a String with C# in Xamarin.
Normally I'd use:
using System.Security.Cryptography;

public string SHA512StringHash(String input)
{
    SHA512 shaM = new SHA512Managed();
    // Convert the input string to a byte array and compute the hash.
    byte[] data = shaM.ComputeHash(Encoding.UTF8.GetBytes(input));
    // Create a new Stringbuilder to collect the bytes
    // and create a string.
    StringBuilder sBuilder = new StringBuilder();
    // Loop through each byte of the hashed data 
    // and format each one as a hexadecimal string.
    for (int i = 0; i < data.Length; i++)
    {
        sBuilder.Append(data[i].ToString(""x2""));
    }
    // Return the hexadecimal string.
    input = sBuilder.ToString();
    return (input);
}

But in Xamarin I don't seem able to include this library.
Is there a way to include this library or an alternative to easily hash a Password?
","System.Security.Cryptography is not available in PCL projects. You could use pclcontrib nuget to have System.Security.Cryptography in PCL project.
http://pclcontrib.codeplex.com
","4663","<c#><hash><xamarin><xamarin.forms><sha>","2","1","3","2016-10-07 15:57:24","32591077","4","","3465182","","2015-09-15 15:58:05","2015-09-15 15:04:20",""
"9974028","hash string size","In python I use the following code to create hash for user passwords:
self.password = hmac.new(security_key, raw_password, sha1).hexdigest()

Now I'd like to save this value to database. What size must be my database column? 
It seems related to digest_size property, but do not know what object or class has such property. sha1 doesn't have one.
","The output of the sha-1 hash function will be 20 characters long.
(According to RFC2104, referenced by the hmac python module docs: ""...L the byte-length of hash outputs (L=16 for MD5, L=20 for SHA-1)."")
You can also verify this by:
import hashlib;
H = hashlib.sha1(""blahblah"");
print(H.digest_size);

","4661","<python><hmac><sha>","8","2","2","2012-04-02 12:35:17","9976535","1","","","","","2012-04-02 09:35:41",""
"9974028","hash string size","In python I use the following code to create hash for user passwords:
self.password = hmac.new(security_key, raw_password, sha1).hexdigest()

Now I'd like to save this value to database. What size must be my database column? 
It seems related to digest_size property, but do not know what object or class has such property. sha1 doesn't have one.
","The output of hmac is dependent on the hashing algorithm it uses. In your case, it uses sha1, which always output a 20-byte long byte string according to RFC2104. Calling hexdigest() turns the byte string into a printable hex format. 1 byte = 2 hex numbers, so the total is 40 hex characters. You can safely set your database column to char(40).
","4661","<python><hmac><sha>","8","5","2","2012-04-02 12:35:17","9976535","1","","","","","2012-04-02 09:35:41",""
"43796468","Whats the standard code to generate HMAC SHA256 with key using C#","I'd like to know if there is a standard code to generate a SHA256 hash using a key. I've come across several types of code, however, they don't generate the same output.
Code found at JokeCamp
private string CreateToken(string message, string secret)
{
  secret = secret ?? """";
  var encoding = new System.Text.ASCIIEncoding();
  byte[] keyByte = encoding.GetBytes(secret);
  byte[] messageBytes = encoding.GetBytes(message);
  using (var hmacsha256 = new HMACSHA256(keyByte))
  {
    byte[] hashmessage = hmacsha256.ComputeHash(messageBytes);
    return Convert.ToBase64String(hashmessage);
  }
}

Here's another one that I found
private static string ComputeHash(string apiKey, string message)
{
    var key = Encoding.UTF8.GetBytes(apiKey);
    string hashString;
    using (var hmac = new HMACSHA256(key))
    {
        var hash = hmac.ComputeHash(Encoding.UTF8.GetBytes(message));
        hashString = Convert.ToBase64String(hash);
    }

    return hashString;
 }

The code generated by both of these are different to what is generated by http://www.freeformatter.com/hmac-generator.html#ad-output
I'll be using the SHA256 for one of our external API's where consumers would hash the data and send it to us. So we just want to make sure we use a standard approach so that they send us the correct hash. Also, I would like to know if there are any well-known nugets for this. I've also tried to find a solution with Bouncy Castle, however, I couldn't find one that uses a key to hash.
","The difference is because of the character encodings (ASCII vs UTF-8 in your examples). Note that the hashing algorithm takes an array of bytes, and you do the conversion from a string to that byte-array beforehand. 
Your question ""whats the standard code"" probably hasnt an answer, id say that if you expect the input to contain content from just the ASCII character-space, go for that, if not go for UTF-8. Either way - communicate it to your users
If you want to look at it from a usability perspective and make it the optimal for your users - go for both. Hash the content both ways and check agains the users incoming hash, but it all depends on your evaluation on clock-cycles vs security vs usability (you can have two)
","4646","<c#><hash><sha>","3","2","2","2017-05-05 08:36:53","","0","0","3819411","","2017-05-05 08:36:53","2017-05-05 04:22:03",""
"43796468","Whats the standard code to generate HMAC SHA256 with key using C#","I'd like to know if there is a standard code to generate a SHA256 hash using a key. I've come across several types of code, however, they don't generate the same output.
Code found at JokeCamp
private string CreateToken(string message, string secret)
{
  secret = secret ?? """";
  var encoding = new System.Text.ASCIIEncoding();
  byte[] keyByte = encoding.GetBytes(secret);
  byte[] messageBytes = encoding.GetBytes(message);
  using (var hmacsha256 = new HMACSHA256(keyByte))
  {
    byte[] hashmessage = hmacsha256.ComputeHash(messageBytes);
    return Convert.ToBase64String(hashmessage);
  }
}

Here's another one that I found
private static string ComputeHash(string apiKey, string message)
{
    var key = Encoding.UTF8.GetBytes(apiKey);
    string hashString;
    using (var hmac = new HMACSHA256(key))
    {
        var hash = hmac.ComputeHash(Encoding.UTF8.GetBytes(message));
        hashString = Convert.ToBase64String(hash);
    }

    return hashString;
 }

The code generated by both of these are different to what is generated by http://www.freeformatter.com/hmac-generator.html#ad-output
I'll be using the SHA256 for one of our external API's where consumers would hash the data and send it to us. So we just want to make sure we use a standard approach so that they send us the correct hash. Also, I would like to know if there are any well-known nugets for this. I've also tried to find a solution with Bouncy Castle, however, I couldn't find one that uses a key to hash.
","They are almost equivalent.
The difference is how the encoding for the string is established.
In the first portion of code it assumes ASCII, whereas in the second portion it assumes UTF-8. It is possible that the string used another encoding which is none of those.
But regardless of that, the idea is to understand what is the goal of this operation. The truly relevant things in this context are:

Given equal input, output should be the same
There should be no way to retrieve the plaintext only by knowing the output (within a reasonable amount of time)
After hashing, you no longer require the original input in plaintext.

A secure cryptographic hashing function (meaning not older functions like MD5) achieves that.
Then, if your data store where hashes are stored is compromised, the attacker would only have a hash which cannot be used to retrieved the original plaintext. This is why hashing is used rather than encryption, encryption is a reversible operation (through decryption).
Then, within the system, if you've made the decision to use one encoding, you need to keep that decision consistent across all components in your system so they can interoperate.
","4646","<c#><hash><sha>","3","0","2","2017-05-05 08:36:53","","0","0","3819411","","2017-05-05 08:36:53","2017-05-05 04:22:03",""
"9714139","Why does Zipping the same content twice gives two files with different SHA1?","I have run into a strange problem with git and zip files. My build script takes a bunch of documentation html pages and zips them into a docs.zip I then check this file into git. 
The problem I am having is that every time I re-run the build script and get a new zip file the new zip file has a different SHA1 than the previous run. My build script is calling the ant zip task. However manualy calling the macOSX zip from the Mac OS X shell gives me a different sha1 if I zip up the same directory twice. 
Run 1: 
zip foo.zip *
openssl sha1 foo.zip 
rm foo.zip 

Run 2: 
zip foo.zip *
openssl sha1 foo.zip

Run 1 and run2 give different SHA1 even though the content did not change between runs. In both cases zip prints out exactly the same files being zipped it does not indicate that any OS specific files like .DS_Store are being included in the zip file. 
Is the zip algoritm deterministic? If run on the same content will it produce exactly the same bits? if not why not? 
What are my choices for zipping the files in a deterministic way? There are thousands of them in the zipped up file, I don't expect those files to change much. I know that git will zip up any files you checkin but the motivation to zip them is to just keep the mass of them out of the way.
","According to Wikipedia http://en.wikipedia.org/wiki/Zip_(file_format) seems that zip files have headers for 
File last modification time and File last modification date so any zip file checked into git will appear to git to have changed if the zip is rebuilt from the same content since. And it seems that there is no flag to tell it to not set those headers.
I am resorting to just using tar, it seems to produce the same bytes for the same input if run multiple times. 
","4607","<git><ant><zip><gzip><sha>","17","12","3","2018-05-25 07:40:17","9714323","2","2","","","","2012-03-15 04:48:04",""
"9714139","Why does Zipping the same content twice gives two files with different SHA1?","I have run into a strange problem with git and zip files. My build script takes a bunch of documentation html pages and zips them into a docs.zip I then check this file into git. 
The problem I am having is that every time I re-run the build script and get a new zip file the new zip file has a different SHA1 than the previous run. My build script is calling the ant zip task. However manualy calling the macOSX zip from the Mac OS X shell gives me a different sha1 if I zip up the same directory twice. 
Run 1: 
zip foo.zip *
openssl sha1 foo.zip 
rm foo.zip 

Run 2: 
zip foo.zip *
openssl sha1 foo.zip

Run 1 and run2 give different SHA1 even though the content did not change between runs. In both cases zip prints out exactly the same files being zipped it does not indicate that any OS specific files like .DS_Store are being included in the zip file. 
Is the zip algoritm deterministic? If run on the same content will it produce exactly the same bits? if not why not? 
What are my choices for zipping the files in a deterministic way? There are thousands of them in the zipped up file, I don't expect those files to change much. I know that git will zip up any files you checkin but the motivation to zip them is to just keep the mass of them out of the way.
","By default, gzip saves file name and time stamp
%> gzip -help 2>&1 | grep -e '-n'
 -N --name            save or restore original file name and time stamp
 -n --no-name         don't save original file name or time stamp

%> gzip -V
Apple gzip 272

Using -n option:
%> tar cv foo/ | gzip -n > foo.tgz; shasum foo.tgz # sha256sum on Ubuntu

you will consistently get the same hash.
Try above without -n and you should see a different hash each time.
","4607","<git><ant><zip><gzip><sha>","17","10","3","2018-05-25 07:40:17","9714323","2","2","","","","2012-03-15 04:48:04",""
"9714139","Why does Zipping the same content twice gives two files with different SHA1?","I have run into a strange problem with git and zip files. My build script takes a bunch of documentation html pages and zips them into a docs.zip I then check this file into git. 
The problem I am having is that every time I re-run the build script and get a new zip file the new zip file has a different SHA1 than the previous run. My build script is calling the ant zip task. However manualy calling the macOSX zip from the Mac OS X shell gives me a different sha1 if I zip up the same directory twice. 
Run 1: 
zip foo.zip *
openssl sha1 foo.zip 
rm foo.zip 

Run 2: 
zip foo.zip *
openssl sha1 foo.zip

Run 1 and run2 give different SHA1 even though the content did not change between runs. In both cases zip prints out exactly the same files being zipped it does not indicate that any OS specific files like .DS_Store are being included in the zip file. 
Is the zip algoritm deterministic? If run on the same content will it produce exactly the same bits? if not why not? 
What are my choices for zipping the files in a deterministic way? There are thousands of them in the zipped up file, I don't expect those files to change much. I know that git will zip up any files you checkin but the motivation to zip them is to just keep the mass of them out of the way.
","I had success on creating files with the same SHA1 using the -X (--no-extra) flag for zip. 
I created a folder and a couple of files to zip to test it, and as expected, getting different SHA1 hashes everytime:
$ mkdir stuff
$ echo ""Stuff 1"" > stuff/stuff1.txt
$ echo ""Stuff 2"" > stuff/stuff2.txt
$ zip -r stuff.zip stuff/
  adding: stuff/ (stored 0%)
  adding: stuff/stuff1.txt (stored 0%)
  adding: stuff/stuff2.txt (stored 0%)

$ shasum stuff.zip
1c8be43ac859bb57603be1243da14022710d22bd  stuff.zip

$ shasum stuff.zip
1c8be43ac859bb57603be1243da14022710d22bd  stuff.zip

$ zip -r stuff.zip stuff/
updating: stuff/ (stored 0%)
updating: stuff/stuff1.txt (stored 0%)
updating: stuff/stuff2.txt (stored 0%)

$ shasum stuff.zip
73920362d0f7de74d87286502e03e7126fdc0a6a  stuff.zip

However, using -X gets me the same hash after consecutive zipping:
$ zip -r -X stuff.zip stuff/
updating: stuff/ (stored 0%)
updating: stuff/stuff1.txt (stored 0%)
updating: stuff/stuff2.txt (stored 0%)

$ shasum stuff.zip
1ed228b16d1ee803f26a8b1419f2eb3bf7fcb9f5  stuff.zip

$ zip -r -X stuff.zip stuff/
updating: stuff/ (stored 0%)
updating: stuff/stuff1.txt (stored 0%)
updating: stuff/stuff2.txt (stored 0%)

$ shasum stuff.zip
1ed228b16d1ee803f26a8b1419f2eb3bf7fcb9f5  stuff.zip

I don't have the time to dig in and find out which extra info is causing the difference to popup in the first case, but maybe this could be helpful to someone trying to solve it. Also only tested on macOS 10.12.6.
","4607","<git><ant><zip><gzip><sha>","17","3","3","2018-05-25 07:40:17","9714323","2","2","","","","2012-03-15 04:48:04",""
"12716204","Have Keccak (SHA-3) example hashes (test vectors) been made available?","I'm interested in implementing Keccak (SHA-3) and would like a set of input/expected output pairs to test against. Have any official test vectors been released? I recall having some for the other SHA routines and they were very helpful.
","Yes. See the ""Known-answer and Monte Carlo test results"" bullet on the downloads page, or go straight to the file. There are whole-message test vectors as well as files describing inputs and outputs for the individual intermediate stages.
And of course, you can always run the reference implementation and compare outputs.
","4544","<unit-testing><sha><sha-3><keccak>","3","6","2","2017-01-17 01:30:04","12719825","1","0","153535","","2012-10-04 03:11:47","2012-10-03 20:18:19",""
"12716204","Have Keccak (SHA-3) example hashes (test vectors) been made available?","I'm interested in implementing Keccak (SHA-3) and would like a set of input/expected output pairs to test against. Have any official test vectors been released? I recall having some for the other SHA routines and they were very helpful.
","
Have Keccak (SHA-3) example hashes (test vectors) been made available?

Yes. The NIST test vectors can be found at SHA-3 Reference and Optimized Implementations. The page includes:

Description of Known Answer Test (KAT) and Monte Carlo Test (MCT) for SHA-3 Candidate Algorithm Submissions
Test files and Source Code for Conducting KAT and MCT

These tests may be different from the Keccak test vectors because NIST modified some things. So, for SHA-3, I would specifically use what NIST provides.
","4544","<unit-testing><sha><sha-3><keccak>","3","2","2","2017-01-17 01:30:04","12719825","1","0","153535","","2012-10-04 03:11:47","2012-10-03 20:18:19",""
"1019837","Java Encode SHA-1 Byte Array","I have an SHA-1 byte array that I would like to use in a GET request.  I need to encode this. URLEncoder expects a string, and if I create a string of it and then encode it, it gets corrupt?
To clarify, this is kinda a follow up to another question of mine.
(Bitorrent Tracker Request) I can get the value as a hex string, but that is not recognized by the tracker. On the other hand, encoded answer mark provided return 200 OK.
So I need to convert the hex representation that I got:
9a81333c1b16e4a83c10f3052c1590aadf5e2e20

into encoded form
%9A%813%3C%1B%16%E4%A8%3C%10%F3%05%2C%15%90%AA%DF%5E.%20

","This depends on what the recipient of your request expects.
I would imagine it could be a hexadecimal representation of the bytes in your hash. A string would probably not be the best idea, because the hash array will most likely contain non-printable character values.
I'd iterate over the array and use Integer.toHexValue() to convert the bytes to hex.
","4531","<java><encode><sha>","0","0","4","2009-06-20 01:14:33","1019955","1","","-1","","2017-05-23 11:47:54","2009-06-19 20:11:42",""
"1019837","Java Encode SHA-1 Byte Array","I have an SHA-1 byte array that I would like to use in a GET request.  I need to encode this. URLEncoder expects a string, and if I create a string of it and then encode it, it gets corrupt?
To clarify, this is kinda a follow up to another question of mine.
(Bitorrent Tracker Request) I can get the value as a hex string, but that is not recognized by the tracker. On the other hand, encoded answer mark provided return 200 OK.
So I need to convert the hex representation that I got:
9a81333c1b16e4a83c10f3052c1590aadf5e2e20

into encoded form
%9A%813%3C%1B%16%E4%A8%3C%10%F3%05%2C%15%90%AA%DF%5E.%20

","SHA1 is in hex format [0-9a-f], there should be no need to URLEncode it.
","4531","<java><encode><sha>","0","0","4","2009-06-20 01:14:33","1019955","1","","-1","","2017-05-23 11:47:54","2009-06-19 20:11:42",""
"1019837","Java Encode SHA-1 Byte Array","I have an SHA-1 byte array that I would like to use in a GET request.  I need to encode this. URLEncoder expects a string, and if I create a string of it and then encode it, it gets corrupt?
To clarify, this is kinda a follow up to another question of mine.
(Bitorrent Tracker Request) I can get the value as a hex string, but that is not recognized by the tracker. On the other hand, encoded answer mark provided return 200 OK.
So I need to convert the hex representation that I got:
9a81333c1b16e4a83c10f3052c1590aadf5e2e20

into encoded form
%9A%813%3C%1B%16%E4%A8%3C%10%F3%05%2C%15%90%AA%DF%5E.%20

","Question was edited while I was responding, following is ADDITIONAL code and should work (with my hex conversion code):
//Inefficient, but functional, does not test if input is in hex charset, so somewhat unsafe
//NOT tested, but should be functional
public static String encodeURL(String hexString) throws Exception {
  if(hexString==null || hexString.isEmpty()){
     return """";
  }
  if(hexString.length()%2 != 0){
    throw new Exception(""String is not hex, length NOT divisible by 2: ""+hexString);
  }
  int len = hexString.length();
  char[] output = new char[len+len/2];
  int i=0;
  int j=0;
  while(i<len){
      output[j++]='%';
      output[j++]=hexString.charAt(i++);
      output[j++]=hexString.charAt(i++);
  }
  return new String(output);
}

You'll need to convert the raw bytes to hexadecimal characters or whatever URL-friendly encoding they are using.  Base32 or Base64 encodings are possible, but straight hexadecimal characters is the most common.  URLEncoder is not needed for this string, because it shouldn't contain any characters that would require URL Encoding to %NN format.
The below will convert bytes for a hash (SHA-1, MD5SUM, etc) to a hexadecimal string:
/** Lookup table: character for a half-byte */
    static final char[] CHAR_FOR_BYTE = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
         /** Encode byte data as a hex string... hex chars are UPPERCASE*/
         public static String encode(byte[] data){
             if(data == null || data.length==0){
                 return """";
             }
             char[] store = new char[data.length*2];
             for(int i=0; i<data.length; i++){
                 final int val = (data[i]&0xFF);
                 final int charLoc=i<<1;
                 store[charLoc]=CHAR_FOR_BYTE[val>>>4];
                 store[charLoc+1]=CHAR_FOR_BYTE[val&0x0F];
             }
             return new String(store);
         }

This code is fairly optimized and fast, and I am using it for my own SHA-1 byte encoding.  Note that you may need to convert uppercase to lowercase with the String.toLowerCase() method, depending on which form the server accepts.
","4531","<java><encode><sha>","0","3","4","2009-06-20 01:14:33","1019955","1","","-1","","2017-05-23 11:47:54","2009-06-19 20:11:42",""
"1019837","Java Encode SHA-1 Byte Array","I have an SHA-1 byte array that I would like to use in a GET request.  I need to encode this. URLEncoder expects a string, and if I create a string of it and then encode it, it gets corrupt?
To clarify, this is kinda a follow up to another question of mine.
(Bitorrent Tracker Request) I can get the value as a hex string, but that is not recognized by the tracker. On the other hand, encoded answer mark provided return 200 OK.
So I need to convert the hex representation that I got:
9a81333c1b16e4a83c10f3052c1590aadf5e2e20

into encoded form
%9A%813%3C%1B%16%E4%A8%3C%10%F3%05%2C%15%90%AA%DF%5E.%20

","Use Apache Commons-Codec for all your encoding/decoding needs (except ASN.1, which is a pain in the ass)
","4531","<java><encode><sha>","0","0","4","2009-06-20 01:14:33","1019955","1","","-1","","2017-05-23 11:47:54","2009-06-19 20:11:42",""
"42308516","SHA256 encryption and decryption (Python 2.7) - same word but different hash","I wanted to write a script that can encrypt and decrypt words. But I ran on a problem and cannot understand it. This code I used to encrypt is this:
 def encrypt():
    print ""Enter string for encryption: \n""
    rec = raw_input()
    enkr =hashlib.sha256(rec).hexdigest()
    print enkr

and code I am using to decrypt based on dictionary is this: 
def decrypt():
    print ""Enter hash for decryption: \n""
    rec = raw_input()
    print ""Enter path of wordlist""
    list = raw_input()
    wordl=open(list,""r"")
    wordk = wordl.readlines()
    for w in wordk:
        w = hashlib.sha256(w).hexdigest()
        if rec.lower() != w:
            print ""Not this "" + w
        elif rec.lower() ==w:
            print ""Found ! "" + w
            break
        else:
            print ""Nothing found ! ""

For example let's say i want to encrypt word ""admin"". I get this hash 8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918
and when i want to decrypt i get this 
fc8252c8dc55839967c58b9ad755a59b61b67c13227ddae4bd3f78a38bf394f7
and my question is, why am i getting two different hash with same function? Best regards, Khan
","8c69…a918 is the SHA256 hash of ""admin"".
fc82…94f7 is the SHA256 hash of ""admin\n"".
file.readlines() includes a trailing newline at the end of each line it reads. To remove that, you can use w.rstrip(""\n"").
","4488","<python><encryption><hash><sha256><sha>","0","3","2","2017-02-17 22:44:40","42308661","7","","14122","","2017-02-17 22:39:33","2017-02-17 22:33:56",""
"42308516","SHA256 encryption and decryption (Python 2.7) - same word but different hash","I wanted to write a script that can encrypt and decrypt words. But I ran on a problem and cannot understand it. This code I used to encrypt is this:
 def encrypt():
    print ""Enter string for encryption: \n""
    rec = raw_input()
    enkr =hashlib.sha256(rec).hexdigest()
    print enkr

and code I am using to decrypt based on dictionary is this: 
def decrypt():
    print ""Enter hash for decryption: \n""
    rec = raw_input()
    print ""Enter path of wordlist""
    list = raw_input()
    wordl=open(list,""r"")
    wordk = wordl.readlines()
    for w in wordk:
        w = hashlib.sha256(w).hexdigest()
        if rec.lower() != w:
            print ""Not this "" + w
        elif rec.lower() ==w:
            print ""Found ! "" + w
            break
        else:
            print ""Nothing found ! ""

For example let's say i want to encrypt word ""admin"". I get this hash 8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918
and when i want to decrypt i get this 
fc8252c8dc55839967c58b9ad755a59b61b67c13227ddae4bd3f78a38bf394f7
and my question is, why am i getting two different hash with same function? Best regards, Khan
","rec = raw_input() doesn't have a newline in it.
On the other hand, each line iterated upon by for w in wordk: has a trailing newline.
So you have to rstrip(""\n"") your lines or use splitlines() to get rid of the last newline character before performing the hash.
","4488","<python><encryption><hash><sha256><sha>","0","1","2","2017-02-17 22:44:40","42308661","7","","14122","","2017-02-17 22:39:33","2017-02-17 22:33:56",""
"16323701","Hash a password with SHA1 in java","I want to insert a password to my database using SHA1 hash 
I do it manually in phpmyadmin by choosing the function sha1 but how to do this using Java ??
Any Idea ? Thank you!
","If you must use java:
import java.io.ByteArrayInputStream;
import java.security.MessageDigest;

public class SHACheckSumExample 
{
    public static void main(String[] args)throws Exception
    {
        MessageDigest md = MessageDigest.getInstance(""SHA-1"");
        ByteArrayInputStream fis = new ByteArrayInputStream(args[1].getBytes());

        byte[] dataBytes = new byte[1024];

        int nread = 0; 
        while ((nread = fis.read(dataBytes)) != -1) {
          md.update(dataBytes, 0, nread);
        };
        byte[] mdbytes = md.digest();

        //convert the byte to hex format method 1
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < mdbytes.length; i++) {
          sb.append(Integer.toString((mdbytes[i] & 0xff) + 0x100, 16).substring(1));
        }

        System.out.println(""Hex format : "" + sb.toString());

       //convert the byte to hex format method 2
        StringBuffer hexString = new StringBuffer();
        for (int i=0;i<mdbytes.length;i++) {
          hexString.append(Integer.toHexString(0xFF & mdbytes[i]));
        }

        System.out.println(""Hex format : "" + hexString.toString());
    }
}

I would, for performance reasons, suggest seeing if your database has SHA support. I know Postgres does, not sure about other systems.
","4472","<java><sql><insert><sha>","1","1","1","2013-05-01 18:12:07","16323820","4","2","2337243","","2013-05-01 18:12:07","2013-05-01 18:02:36",""
"5915336","How does windows manages users & passwords?","I'm doing a research of the encryption methods of Linux and Windows.
I do know Linux manages his password by the shadow file (/etc/shadow), encrypting each one (mostly) by MD5 or SHA and saving them on that file, but which file does windows uses to manage users & passwords?
Can someone give me a little explanation or any website I can read about it?
","The files are C:\WINDOWS\system32\config\SAM  and C:\WINDOWS\system32\config\SYSTEM
","4358","<windows><file><encryption><protection><sha>","1","0","2","2011-05-06 18:26:34","5915362","1","","135152","","2011-05-06 18:11:05","2011-05-06 18:09:55",""
"5915336","How does windows manages users & passwords?","I'm doing a research of the encryption methods of Linux and Windows.
I do know Linux manages his password by the shadow file (/etc/shadow), encrypting each one (mostly) by MD5 or SHA and saving them on that file, but which file does windows uses to manage users & passwords?
Can someone give me a little explanation or any website I can read about it?
","Windows uses something called SAM to store user credentials (http://en.wikipedia.org/wiki/Security_Accounts_Manager).  From what I understand, it is possible to use the more unix-y PAM as well (http://www.oreillynet.com/onlamp/blog/2008/05/microsoft_windows_now_supports.html).
Hope this helps!
","4358","<windows><file><encryption><protection><sha>","1","0","2","2011-05-06 18:26:34","5915362","1","","135152","","2011-05-06 18:11:05","2011-05-06 18:09:55",""
"4741511","C# High speed MD5/SHA hash over network","In a C# project that I am currently working on, we're attempting to calculate the MD5 of a large quantity of files over a network (current pot is 2.7 million, client pot may be in excess of 10 million).  With the number of files that we are processing, speed is of the issue.
The reason we do this is to verify the file was copied to a different location without modification.  
We currently use the following code to calculate the MD5 of a file
MD5 md5 = new MD5CryptoServiceProvider();
StringBuilder sb = new StringBuilder();

byte[] hashMD5 = null;

try
{
   // Open stream to file to get MD5 hash for, create hash
   using (FileStream fsMD5 = new FileStream(sFilePath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))
      hashMD5 = md5.ComputeHash(fsMD5);
}
catch (Exception ex)
{
   clsLogging.logError(clsLogging.ErrorLevel.ERROR, ex);
}

string md5sum = """";
if (hashMD5 != null)
{
   // Change hash into readable text
   foreach (byte hex in hashMD5)
      sb.Append(hex.ToString(""x2""));
    md5sum = sb.ToString();
}

However, the speed of this isn't what my manager has been hoping for.  We've gone through a number of changes to the way and number of files that we calculate the MD5 for (i.e. we don't do it for files that we don't copy... until today when my manager changed his mind so ALL files must have a MD5 calculated for them, in case at some future time a client wishes to bugger with our program so all files are copied i guess)
I realize that the speed of the network is probably a major contributing factor (100Mbit/s).   Is there an efficient way to calculate the MD5 of the contents of a file over a network?
Thanks in advance.
Trevor Watson
Edit: put all code in block instead of just a part of it.
","Why don't you try installing a 'client' on each one which listens on a port and when signaled, will calculate the MD5 hash for the files requested.
The main server will then only need to ask each client to calculate the MD5. Using this distributed approach you will gain the combined speed of all the clients and reduce network congestion.
","4319","<c#><performance><networking><md5><sha>","1","1","3","2012-04-06 20:05:22","4741623","4","1","","","","2011-01-19 22:24:44",""
"4741511","C# High speed MD5/SHA hash over network","In a C# project that I am currently working on, we're attempting to calculate the MD5 of a large quantity of files over a network (current pot is 2.7 million, client pot may be in excess of 10 million).  With the number of files that we are processing, speed is of the issue.
The reason we do this is to verify the file was copied to a different location without modification.  
We currently use the following code to calculate the MD5 of a file
MD5 md5 = new MD5CryptoServiceProvider();
StringBuilder sb = new StringBuilder();

byte[] hashMD5 = null;

try
{
   // Open stream to file to get MD5 hash for, create hash
   using (FileStream fsMD5 = new FileStream(sFilePath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))
      hashMD5 = md5.ComputeHash(fsMD5);
}
catch (Exception ex)
{
   clsLogging.logError(clsLogging.ErrorLevel.ERROR, ex);
}

string md5sum = """";
if (hashMD5 != null)
{
   // Change hash into readable text
   foreach (byte hex in hashMD5)
      sb.Append(hex.ToString(""x2""));
    md5sum = sb.ToString();
}

However, the speed of this isn't what my manager has been hoping for.  We've gone through a number of changes to the way and number of files that we calculate the MD5 for (i.e. we don't do it for files that we don't copy... until today when my manager changed his mind so ALL files must have a MD5 calculated for them, in case at some future time a client wishes to bugger with our program so all files are copied i guess)
I realize that the speed of the network is probably a major contributing factor (100Mbit/s).   Is there an efficient way to calculate the MD5 of the contents of a file over a network?
Thanks in advance.
Trevor Watson
Edit: put all code in block instead of just a part of it.
","The bottleneck is that the whole file must be streamed/copied over the network, and your seems to look good...
the different hash functions (md5/sha256/sha512) have almost the same computation time  
Two possible solutions for this problem:
1) run a hasher on the remote system and store the hashes in to separate files - if that is possible in your environment.
2) Create a part-wise hash of the file, so that you only copy a part of the file.
I mean something like that:
part1Hash = md5(file.getXXXBytesFromFileAtPosition1)
part2Hash = md5(file.getXXXBytesFromFileAtPosition2)
part3Hash = md5(file.getXXXBytesFromFileAtPosition3)
finalHash = part1Hash ^ part2Hash ^ part3Hash;

you have to test which part of the file are optimal to read, so the hashes stay unique.
hope that helps...
edit: changed to bitwise xor
","4319","<c#><performance><networking><md5><sha>","1","3","3","2012-04-06 20:05:22","4741623","4","1","","","","2011-01-19 22:24:44",""
"4741511","C# High speed MD5/SHA hash over network","In a C# project that I am currently working on, we're attempting to calculate the MD5 of a large quantity of files over a network (current pot is 2.7 million, client pot may be in excess of 10 million).  With the number of files that we are processing, speed is of the issue.
The reason we do this is to verify the file was copied to a different location without modification.  
We currently use the following code to calculate the MD5 of a file
MD5 md5 = new MD5CryptoServiceProvider();
StringBuilder sb = new StringBuilder();

byte[] hashMD5 = null;

try
{
   // Open stream to file to get MD5 hash for, create hash
   using (FileStream fsMD5 = new FileStream(sFilePath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))
      hashMD5 = md5.ComputeHash(fsMD5);
}
catch (Exception ex)
{
   clsLogging.logError(clsLogging.ErrorLevel.ERROR, ex);
}

string md5sum = """";
if (hashMD5 != null)
{
   // Change hash into readable text
   foreach (byte hex in hashMD5)
      sb.Append(hex.ToString(""x2""));
    md5sum = sb.ToString();
}

However, the speed of this isn't what my manager has been hoping for.  We've gone through a number of changes to the way and number of files that we calculate the MD5 for (i.e. we don't do it for files that we don't copy... until today when my manager changed his mind so ALL files must have a MD5 calculated for them, in case at some future time a client wishes to bugger with our program so all files are copied i guess)
I realize that the speed of the network is probably a major contributing factor (100Mbit/s).   Is there an efficient way to calculate the MD5 of the contents of a file over a network?
Thanks in advance.
Trevor Watson
Edit: put all code in block instead of just a part of it.
","One possible approach would be to make use of the parallel task library in .Net 4.0.  100Mbps will still be a bottleneck, but you should see a modest improvement.
I wrote a small application last year that walks the top levels of a folder tree checking folder and file security settings.  Running over a 10Mbps WAN it took about 7 minutes to complete one of our large file shares.  When I parallelised the operation the execution time came down to a bit over 1 minute.
","4319","<c#><performance><networking><md5><sha>","1","3","3","2012-04-06 20:05:22","4741623","4","1","","","","2011-01-19 22:24:44",""
"11364004","hmac sha-256 in perl","What is the perl equivalent for this php code?
$hash = hash_hmac('sha256', $all , $secret);
I tried using the below code but in vain. The values are different.
         use Digest::SHA;
             $sha = Digest::SHA->new('sha256');
             $sha->add($secret);
             $sha->add($all);
             $digest = $sha->hexdigest;

Regards,
Pavan
","Since my question was getting more views than I expected, I decided to answer it to help others with the same problem. I found the equivalent for it in PHP. 
use Digest::SHA qw(hmac_sha256_hex); 
$digest=hmac_sha256_hex($all, $secret);

Hope it helps.
","4297","<perl><sha>","8","15","1","2016-04-09 03:57:29","24800555","3","3","1428276","","2012-07-09 08:02:17","2012-07-06 14:19:05",""
"26592596","Why does SHA1.ComputeHash fail under high load with many threads?","I'm seeing an issue with some code I maintain. The code below has a private static SHA1 member (which is an IDisposable but since it's static, it should never get finalized). However, under stress this code throws an exception that suggests it has been closed:
Caught exception.  Safe handle has been closed"" 
Stack trace: Call stack where exception was thrown
at System.Runtime.InteropServices.SafeHandle.DangerousAddRef(Boolean& success)
at System.Security.Cryptography.Utils.HashData(SafeHashHandle hHash, Byte[] data, Int32 cbData, Int32 ibStart, Int32 cbSize)
at System.Security.Cryptography.Utils.HashData(SafeHashHandle hHash, Byte[] data, Int32 ibStart, Int32 cbSize)
at System.Security.Cryptography.HashAlgorithm.ComputeHash(Byte[] buffer)

The code in question is:
internal class TokenCache
{
    private static SHA1 _sha1 = SHA1.Create();

    private string ComputeHash(string password)
    {
        byte[] passwordBytes = UTF8Encoding.UTF8.GetBytes(password);
        return UTF8Encoding.UTF8.GetString(_sha1.ComputeHash(passwordBytes));
    }

My question is obviously what could cause this issue. Can the call to SHA1.Create fail silently (how many cryptographic resources are available)? Could this be caused by the appdomain going down?
Any other theories?
","As per the documentation for the HashAlgorithm base class

Any public static (Shared in Visual Basic) members of this type are thread safe. Any instance members are not guaranteed to be thread safe.

You should not share these classes between threads where different threads try and call ComputeHash on the same instance at the same time.
EDIT
This is what is causing your error. The stress test below yields a variety of errors due to multiple threads calling ComputeHash on the same hash algorithm instance. Your error is one of them.
Specifically, I have seen the following errors with this stress test:

System.Security.Cryptography.CryptographicException: Hash not valid for use in specified state.
System.ObjectDisposedException: Safe handle has been closed

Stress test code sample:
const int threadCount = 2;
var sha1 = SHA1.Create();
var b = new Barrier(threadCount);
Action start = () => {
                    b.SignalAndWait();
                    for (int i = 0; i < 10000; i++)
                    {
                        var pwd = Guid.NewGuid().ToString();
                        var bytes = Encoding.UTF8.GetBytes(pwd);
                        sha1.ComputeHash(bytes);
                    }
                };
var threads = Enumerable.Range(0, threadCount)
                        .Select(_ => new ThreadStart(start))
                        .Select(x => new Thread(x))
                        .ToList();
foreach (var t in threads) t.Start();
foreach (var t in threads) t.Join();

","4272","<c#><sha><stress-testing><finalizer>","9","27","1","2015-08-24 06:49:00","26592826","7","3","1945631","","2015-08-24 06:49:00","2014-10-27 16:48:49",""
"41865537","How does Apple's codesign utility decide which SHA algorithm(s) to sign a shared library with?","First, a little background:  I'm investigating why my company's MacOS/X application (which by all accounts appears to be correctly signed; it runs fine under MacOS/X 10.11.x and 10.12.x; Gatekeeper is fine with it on all MacOS versions; ""spctl --assess"", and ""codesign -vvvv"" all say it satisfies its requirement on all OS versions) nevertheless won't launch under OS/X 10.10.x -- under 10.10.x when I try to launch it, I get a Crash Report where dyld complains that some of the libraries aren't signed correctly:
Dyld Error Message:
  Library not loaded:     @executable_path/../Frameworks/libcrypto.1.0.0.dylib
  Referenced from: /Applications/MyApplication v123/MyApplication.app/Contents/MacOS/MyApplication
  Reason: no suitable image found.  Did find:
  /Applications/MyApplication v123/MyApplication.app/Contents/MacOS/../Frameworks/libcrypto.1.0.0.dylib: code signature invalid for '/Applications/MyApplication v123/MyApplication.app/Contents/MacOS/../Frameworks/libcrypto.1.0.0.dylib'

While investigating that problem, I noticed that the libraries in the .app/Contents/Framework -- which are all signed using the exact same codesign command, via the build/package script on our OS/X build machine running OS/X 10.12 -- have differing kinds of hashes computed for them.
That is, if I look at how one of the non-Qt .dylib files was signed, I see it has only a sha256 hash recorded in it:
sierrabuild-polaris:MyApp v123 autobuild$ codesign -vvvd ./MyApp.app/Contents/Frameworks/libsndfile.1.dylib 
Executable=/Applications/MyApp v123/MyApp.app/Contents/Frameworks/libsndfile.1.dylib
Identifier=libsndfile.1
Format=Mach-O thin (x86_64)
CodeDirectory v=20200 size=4140 flags=0x0(none) hashes=125+2 location=embedded
Hash type=sha256 size=32
CandidateCDHash sha256=b4256e9bf0fac567bb8ac86f56964c066b93d069
Hash choices=sha256     <----------------------------- ONLY 256!?
CDHash=b4256e9bf0fac567bb8ac86f56964c066b93d069
Signature size=8846
Authority=Developer ID Application: MyCompany
Authority=Developer ID Certification Authority
Authority=Apple Root CA
Timestamp=Jan 24, 2017, 1:39:58 AM
Info.plist=not bound
TeamIdentifier=5XD27G7646
Sealed Resources=none
Internal requirements count=1 size=172

... but if I look at how any of the captive Qt frameworks was signed, OTOH, I see it has both sha1 and sha256 hashes included:
sierrabuild-polaris:MyApp v123 autobuild$ codesign -vvvd ./MyApp.app/Contents/Frameworks/QtCore.framework/Versions/5/QtCore
Executable=/Applications/MyApp v123/MyApp.app/Contents/Frameworks/QtCore.framework/Versions/5/QtCore
Identifier=org.qt-project.QtCore
Format=bundle with Mach-O thin (x86_64)
CodeDirectory v=20200 size=42549 flags=0x0(none) hashes=1324+3 location=embedded
Hash type=sha256 size=32
CandidateCDHash sha1=09b5854f83091228f1baaad1455e7a30d6500c95
CandidateCDHash sha256=6dfdc74da06618e1b406a6e5fd0794fe43701def
Hash choices=sha1,sha256    <------------- BOTH sha1 and sha256, yay!
CDHash=6dfdc74da06618e1b406a6e5fd0794fe43701def
Signature size=8896
Authority=Developer ID Application: MyCompany
Authority=Developer ID Certification Authority
Authority=Apple Root CA
Timestamp=Jan 24, 2017, 1:39:57 AM
Info.plist entries=8
TeamIdentifier=5XD27G7646
Sealed Resources version=2 rules=13 files=1
Internal requirements count=1 size=184

Given that dyld's error when trying to run my app under Yosemite always refers to one of the libraries that only has a sha256 hash, my working theory is that OS/X 10.10.x's dyld is ancient enough that it doesn't know about SHA-256 hashes, and that is why it is erroring out when it tries to load a captive shared library that is signed only with an SHA-256 hash.
My question (assuming I'm not completely barking up the wrong tree here) is:  how does codesign decide when to stamp a file with sha256 hash alone, vs adding both an sha1 and an sha256 hash?  And how can I force codesign to always include both hashes, so that my app can launch under 10.10.x again (like it used to before we upgraded our build machine to OSX/Sierra)?
For the record, here is how I'm invoking codesign in my build script -- the invocation arguments are exactly the same for all libraries (both the Qt framework libraries that end up with sha1,sha256 and the non-Qt libraries that end up with only sha256), e.g.:
codesign -f -v -s ""Developer ID Application:  MyCompanyName"" ""./Frameworks/libcrypto.1.0.0.dylib""
codesign -f -v -s ""Developer ID Application:  MyCompanyName"" ""./Frameworks/QtCore.framework/Versions/5/QtCore""

","After a lot of googling around, this answer and this answer led me to the solution.
The problem was that several of the third-party shared libraries included inside my app were being compiled using just their default build settings (e.g. ""./configure; make""), and since they were being compiled under OS/X 10.12, naturally they were compiled with only 10.12-compatibility in mind.
In order to get them to compile in such a way that the resulting .dylib files would be appropriate for earlier OS/X versions as well, I added these lines to the top of my build script:
export  LDFLAGS=""-mmacosx-version-min=10.9""   
export   CFLAGS=""-mmacosx-version-min=10.9""   
export CXXFLAGS=""-mmacosx-version-min=10.9""

... and that did the trick for all of the libraries (libssh2, libsndfile, libogg, libflac, libvorbis, etc) except for the libssl -- for that one I had to hand-modify the Configure file and insert the -mmacosx-version-min argument into the compiler's command-line arguments that way.
With that change, codesign now applies both SHA-1 and SHA-256 hashes to all of the .dylib files, and the resulting .app now runs as expected under 10.10.x.
","4266","<macos><sha><codesign>","13","14","2","2017-03-25 19:11:05","41868747","0","4","","","","2017-01-26 03:35:48",""
"41865537","How does Apple's codesign utility decide which SHA algorithm(s) to sign a shared library with?","First, a little background:  I'm investigating why my company's MacOS/X application (which by all accounts appears to be correctly signed; it runs fine under MacOS/X 10.11.x and 10.12.x; Gatekeeper is fine with it on all MacOS versions; ""spctl --assess"", and ""codesign -vvvv"" all say it satisfies its requirement on all OS versions) nevertheless won't launch under OS/X 10.10.x -- under 10.10.x when I try to launch it, I get a Crash Report where dyld complains that some of the libraries aren't signed correctly:
Dyld Error Message:
  Library not loaded:     @executable_path/../Frameworks/libcrypto.1.0.0.dylib
  Referenced from: /Applications/MyApplication v123/MyApplication.app/Contents/MacOS/MyApplication
  Reason: no suitable image found.  Did find:
  /Applications/MyApplication v123/MyApplication.app/Contents/MacOS/../Frameworks/libcrypto.1.0.0.dylib: code signature invalid for '/Applications/MyApplication v123/MyApplication.app/Contents/MacOS/../Frameworks/libcrypto.1.0.0.dylib'

While investigating that problem, I noticed that the libraries in the .app/Contents/Framework -- which are all signed using the exact same codesign command, via the build/package script on our OS/X build machine running OS/X 10.12 -- have differing kinds of hashes computed for them.
That is, if I look at how one of the non-Qt .dylib files was signed, I see it has only a sha256 hash recorded in it:
sierrabuild-polaris:MyApp v123 autobuild$ codesign -vvvd ./MyApp.app/Contents/Frameworks/libsndfile.1.dylib 
Executable=/Applications/MyApp v123/MyApp.app/Contents/Frameworks/libsndfile.1.dylib
Identifier=libsndfile.1
Format=Mach-O thin (x86_64)
CodeDirectory v=20200 size=4140 flags=0x0(none) hashes=125+2 location=embedded
Hash type=sha256 size=32
CandidateCDHash sha256=b4256e9bf0fac567bb8ac86f56964c066b93d069
Hash choices=sha256     <----------------------------- ONLY 256!?
CDHash=b4256e9bf0fac567bb8ac86f56964c066b93d069
Signature size=8846
Authority=Developer ID Application: MyCompany
Authority=Developer ID Certification Authority
Authority=Apple Root CA
Timestamp=Jan 24, 2017, 1:39:58 AM
Info.plist=not bound
TeamIdentifier=5XD27G7646
Sealed Resources=none
Internal requirements count=1 size=172

... but if I look at how any of the captive Qt frameworks was signed, OTOH, I see it has both sha1 and sha256 hashes included:
sierrabuild-polaris:MyApp v123 autobuild$ codesign -vvvd ./MyApp.app/Contents/Frameworks/QtCore.framework/Versions/5/QtCore
Executable=/Applications/MyApp v123/MyApp.app/Contents/Frameworks/QtCore.framework/Versions/5/QtCore
Identifier=org.qt-project.QtCore
Format=bundle with Mach-O thin (x86_64)
CodeDirectory v=20200 size=42549 flags=0x0(none) hashes=1324+3 location=embedded
Hash type=sha256 size=32
CandidateCDHash sha1=09b5854f83091228f1baaad1455e7a30d6500c95
CandidateCDHash sha256=6dfdc74da06618e1b406a6e5fd0794fe43701def
Hash choices=sha1,sha256    <------------- BOTH sha1 and sha256, yay!
CDHash=6dfdc74da06618e1b406a6e5fd0794fe43701def
Signature size=8896
Authority=Developer ID Application: MyCompany
Authority=Developer ID Certification Authority
Authority=Apple Root CA
Timestamp=Jan 24, 2017, 1:39:57 AM
Info.plist entries=8
TeamIdentifier=5XD27G7646
Sealed Resources version=2 rules=13 files=1
Internal requirements count=1 size=184

Given that dyld's error when trying to run my app under Yosemite always refers to one of the libraries that only has a sha256 hash, my working theory is that OS/X 10.10.x's dyld is ancient enough that it doesn't know about SHA-256 hashes, and that is why it is erroring out when it tries to load a captive shared library that is signed only with an SHA-256 hash.
My question (assuming I'm not completely barking up the wrong tree here) is:  how does codesign decide when to stamp a file with sha256 hash alone, vs adding both an sha1 and an sha256 hash?  And how can I force codesign to always include both hashes, so that my app can launch under 10.10.x again (like it used to before we upgraded our build machine to OSX/Sierra)?
For the record, here is how I'm invoking codesign in my build script -- the invocation arguments are exactly the same for all libraries (both the Qt framework libraries that end up with sha1,sha256 and the non-Qt libraries that end up with only sha256), e.g.:
codesign -f -v -s ""Developer ID Application:  MyCompanyName"" ""./Frameworks/libcrypto.1.0.0.dylib""
codesign -f -v -s ""Developer ID Application:  MyCompanyName"" ""./Frameworks/QtCore.framework/Versions/5/QtCore""

","Jeremy Friesner's answer 1 worked for me. Just a side not on compiling OpenSSL. At least for 1.0.2h there was no need to change Configure file. The following worked fine
./Configure darwin64-x86_64-cc shared --openssldir=$HOME/cmake_builds/openssl-1.0.2h.bin -mmacosx-version-min=10.10
","4266","<macos><sha><codesign>","13","1","2","2017-03-25 19:11:05","41868747","0","4","","","","2017-01-26 03:35:48",""
"4470091","Changing devise and rails 3 to use bcrypt instead of sha","I've got a rails 3 production app that uses devise to deal with authentication. I'd like to change to using bcrypt instead of sha on the app but I can't find any resources that explain the process of migrating from one to the other. I am assuming that you will need to have some sort of fallback in place to handle the fact that the passwords at the moment are salted a certain way with sha...
Anyone done this before?! Any tips, tutorials, walk-throughs, etc?!
","I don't think there is a solution you would like. I only know of two options -
reset all user passwords and email them telling them this has been done (and preferably why so they don't freak out)
as every user logs in, check against the old hash system you had, if it validates, create a new bcrypt hash in a new column and then remove the old, less secure hash and begin a slow migration that way.
The mathemtical power needed to create a rainbow table to move over everyone just isn't likely. 
","4129","<ruby-on-rails><encryption><devise><sha><bcrypt>","7","3","3","2012-06-09 00:29:06","5073036","0","3","","","","2010-12-17 11:40:38",""
"4470091","Changing devise and rails 3 to use bcrypt instead of sha","I've got a rails 3 production app that uses devise to deal with authentication. I'd like to change to using bcrypt instead of sha on the app but I can't find any resources that explain the process of migrating from one to the other. I am assuming that you will need to have some sort of fallback in place to handle the fact that the passwords at the moment are salted a certain way with sha...
Anyone done this before?! Any tips, tutorials, walk-throughs, etc?!
","the User model:

devise :encryptable

the devise-users migration file:

t.encryptable

Are these settings available for you?
","4129","<ruby-on-rails><encryption><devise><sha><bcrypt>","7","0","3","2012-06-09 00:29:06","5073036","0","3","","","","2010-12-17 11:40:38",""
"4470091","Changing devise and rails 3 to use bcrypt instead of sha","I've got a rails 3 production app that uses devise to deal with authentication. I'd like to change to using bcrypt instead of sha on the app but I can't find any resources that explain the process of migrating from one to the other. I am assuming that you will need to have some sort of fallback in place to handle the fact that the passwords at the moment are salted a certain way with sha...
Anyone done this before?! Any tips, tutorials, walk-throughs, etc?!
","Here's a better algorithm for ya, that will let you switch everyone over at once. You'll have to figure out how to implement this in devise, but here's the outline. This isn't mine, found on the web at the URL noted. 

http://blog.jgc.org/2012/06/one-way-to-fix-your-rubbish-password.html

Suppose you have a database that contains password hashes for the n users of your site, and for each user you have salt si and hash hi (where hi was computed with some algorithm such as SHA1 or MD5).  (Note that the rest of these instructions work if there's no salt, just ignore it).
Suppose that you've chosen to use scrypt.  For each user you first create a new random salt value s'i and then compute a new hash h'i using the formula scrypt(s'i, hi) and store the new salt and hash in the database.  You throw away the old weak hash hi and forget it ever existed. So you are left with two salt values and a new hash.  (I've ignored the other scrypt parameters which are left to the reader to determine).
When user i logs in and presents password p you use your old weak hash algorithm (let's suppose it was md5(salt, password)) to compute a hash for comparison as follows: scrypt(s'i,  md5(si, p)) and compare that with the h'i stored in the database.
If, like last.fm, you were also allowing third-parties to authorize users by presenting the old hash value instead of the password then you can still use this scheme.  When the third-party presents hash h for user i you calculate scrypt(s'i,  h) and do the comparison.
If step 4 is not needed then you can go further when a user logs in.  Once the user has logged in successfully with password p you can completely eliminate any trace of the old weak hash by choosing a new random salt value s''i and computing scrypt(s''i,  p) and storing that in the database.

This has the effect of immediately making your password database more secure if stolen without any effort on the part of your users.
","4129","<ruby-on-rails><encryption><devise><sha><bcrypt>","7","3","3","2012-06-09 00:29:06","5073036","0","3","","","","2010-12-17 11:40:38",""
"10943837","PBKDF2 recommended key size?","My function is as follows:
pbkdf2($raw_pw,$salt,1000,128)

1000 is the number of passes, and 128 is the key size. The function returns a binary key which I use base64 to store it in the database.
My question is: what's the recommended keysize and salt size for pbkdf2 using sha512?
will a keysize of 32 be just as secure as a keysize of 128?
","1000 is the number of iterations, not passes. 128 Is the length at the end.
According to Wikipedia (and my own little knowledge about cryptography) you should use more than 128 bits (or 32 as you're asking). The size of the resulting key is equivalent to the chance for a hash collision. Using 256 (as WPA2 does) or 512 should not be a problem, also not a problem for your CPU/memory/whatever.
Also 1000 is, compared to other integrations of pbkdf2, a very small amount of iterations. You can easily use 5000 or 10000 (like iOS4) which might result in something like 10ms more processing time but makes a way more stronger key (see: a possible attacker has also to run the 10k iterations. This might change the time he needs from 1 day to 10 days, or 1 month to almost 1 year).
","4052","<php><mysql><security><sha><pbkdf2>","2","6","1","2019-08-19 20:43:50","10945120","2","2","","","","2012-06-08 06:08:47",""
"35202115","How do I specify the key for computing a SHA256 hash?","I have had a requirement handed to me to modify an existing application to compute the SHA256 hash of a message body (basically a large string)  using a specific key (the key to be provided in the message header). 
However in none of the .Net SHA256 classes (eg  System.Security.Cryptography.SHA256Managed) can I find a reference to a Key property or anything like that.
Does anyone know how to do this in .Net? (This ideally has to be .Net3.5, which the application targets.)
TIA
","There is no key for SHA256. It is hash function and returns the same value each time for the same input. This is not encryption with key.
","4045","<c#><hash><sha>","3","2","2","2016-02-04 13:29:13","35202328","3","","","","","2016-02-04 13:20:28",""
"35202115","How do I specify the key for computing a SHA256 hash?","I have had a requirement handed to me to modify an existing application to compute the SHA256 hash of a message body (basically a large string)  using a specific key (the key to be provided in the message header). 
However in none of the .Net SHA256 classes (eg  System.Security.Cryptography.SHA256Managed) can I find a reference to a Key property or anything like that.
Does anyone know how to do this in .Net? (This ideally has to be .Net3.5, which the application targets.)
TIA
","You've been asked to compute the Hash-based Message Authentication Code (HMAC) with SHA256. For this you will want to use the HMACSHA256 class - the documentation also includes an example of how to implement this.
","4045","<c#><hash><sha>","3","5","2","2016-02-04 13:29:13","35202328","3","","","","","2016-02-04 13:20:28",""
"37333994","How to use SHA-1 dynamic key in Postman","I'm trying to use Postman to send a GET http request which contains a parameter which is dynamically generated by taking the full request query string (everything to the right of the question mark in the URL, after URL encoding), concatenating a previously assigned shared secret key, and then performing a SHA-1 hash of the resulting string.
I would use a Pre-request Script to achieve this. 
Thank you.
","I actually found a solution and would like to share it. 


var params = [
    [""client_id"", ""222""]
    ,[""account_id"", """"]
];

// Build the request body string from the Postman request.data object
var requestBody = """";
var firstpass = true;
for(var i=0;i < params.length; i++) {
        if(!firstpass){
            requestBody += ""&"";
        }
        requestBody += params[i][0] + ""="" + params[i][1];
        firstpass = false;
        postman.setGlobalVariable(params[i][0], params[i][1]);
}
requestBody += postman.getEnvironmentVariable(""sharedSecretKey"");
postman.setGlobalVariable(""requestBody"", requestBody);

var mac = """";
if(requestBody){
    // SHA1 hash
    mac = CryptoJS.SHA1(requestBody);
}

postman.setGlobalVariable(""mac"", mac);



Then I just need to set the parameters in the URL : 
{{baseUrl}}/get?client_id={{client_id}}&account_id={{account_id}}&mac={{mac}}
where {{baseUrl}} is an environment variable
and {{client_id}}, {{account_id}} are global variables
Hope it can be helpful to someone. 
Thank you. 
","3966","<javascript><security><sha><postman>","4","8","2","2019-08-04 04:03:08","","0","2","","","","2016-05-19 21:06:55",""
"37333994","How to use SHA-1 dynamic key in Postman","I'm trying to use Postman to send a GET http request which contains a parameter which is dynamically generated by taking the full request query string (everything to the right of the question mark in the URL, after URL encoding), concatenating a previously assigned shared secret key, and then performing a SHA-1 hash of the resulting string.
I would use a Pre-request Script to achieve this. 
Thank you.
","Inspired by this answer, I used the following Postman pre-request script to create a SHA1 hash of a request.
Note that request.data is an implied variable and the CryptoJS library are provided by the Postman Sandbox for pre-request scripts.
const hash = CryptoJS.HmacSHA1(request.data, 'yourSecret');
pm.globals.set('hash', hash);

You can now reference the hash value as a postman global variable using {{hash}} syntax.

Creating X-Hub-Signature Header like GitHub API Webhook Requests
My purpose in all this was to simulate the X-Hub-Signature header provided by the GitHub Webhooks API because my web service validates all webhook payloads to match the signature. So for me to test my web service, I also needed postman to generate a valid signature header. 
Here's an adaptation of the above code snippet for generating the X-Hub-Signature request header value.

In GitHub, I set a webhook secret for my GitHub App.



In Postman, I created an environment and added the key=value pair GITHUB_WEBHOOK_SECRET with the value I specified when I created my GitHub App.



In Postman, I used the following pre-request script. It set the computed hash as a global variable.

const hash = CryptoJS.HmacSHA1(
    request.data,
    pm.environment.get('GITHUB_WEBHOOK_SECRET')
);
pm.globals.set('X-HUB-SIGNATURE', 'sha1=' + hash);


In Postman, I reference the global hash variable as a header in my requests, just like the GitHub Webhooks API will.


","3966","<javascript><security><sha><postman>","4","0","2","2019-08-04 04:03:08","","0","2","","","","2016-05-19 21:06:55",""
"5787471","MD5 and SHA-2 collisions in Python","I'm writing a simple MP3 cataloguer to keep track of which MP3's are on my various devices. I was planning on using MD5 or SHA2 keys to identify matching files even if they have been renamed/moved, etc. I'm not trying to match MP3's that are logically equivalent (i.e.: same song but encoded differently). I have about 8000 MP3's. Only about 6700 of them generated unique keys.
My problem is that I'm running into collisions regardless of the hashing algorithm I choose. In one case, I have two files that happen to be tracks #1 and #2 on the same album, they are different file sizes yet produce identical hash keys whether I use MD5, SHA2-256, SHA2-512, etc...
This is the first time I'm really using hash keys on files and this is an unexpected result. I feel something fishy is going on here from the little I know about these hashing algorithms. Could this be an issue related to MP3's or Python's implementation?
Here's the snippet of code that I'm using:
    data = open(path, 'r').read()

    m = hashlib.md5(data)

    m.update(data)

    md5String = m.hexdigest()

Any answers or insights to why this is happening would be much appreciated. Thanks in advance.
--UPDATE--:
I tried executing this code in linux (with Python 2.6) and it did not produce a collision. As demonstrated by the stat call, the files are not the same. I also downloaded WinMD5 and this did not produce a collision(8d327ef3937437e0e5abbf6485c24bb3 and 9b2c66781cbe8c1be7d6a1447994430c). Is this a bug with Python hashlib on Windows? I tried the same under Python 2.7.1 and 2.6.6 and both provide the same result.
import hashlib
import os

def createMD5( path):

    fh = open(path, 'r')
    data = fh.read()
    m = hashlib.md5(data)
    md5String = m.hexdigest()
    fh.close()
    return md5String

print os.stat(path1)
print os.stat(path2)
print createMD5(path1)
print createMD5(path2)

>>> nt.stat_result(st_mode=33206, st_ino=0L, st_dev=0, st_nlink=0, st_uid=0, st_gid=0, st_size=6617216L, st_atime=1303808346L, st_mtime=1167098073L, st_ctime=1290222341L)
>>> nt.stat_result(st_mode=33206, st_ino=0L, st_dev=0, st_nlink=0, st_uid=0, st_gid=0, st_size=4921346L, st_atime=1303808348L, st_mtime=1167098076L, st_ctime=1290222341L)   
>>> a7a10146b241cddff031eb03bd572d96
>>> a7a10146b241cddff031eb03bd572d96

","The files you're having a problem with are almost certainly identical if several different hashing algorithms all return the same hash results on them, or there's a bug in your implementation.
As a sanity test write your own ""hash"" that just returns the file's contents wholly, and see if this one generates the same ""hashes"".
","3957","<python><hash><mp3><md5><sha>","7","2","4","2011-04-26 11:15:30","5789493","2","2","724966","","2011-04-26 10:53:35","2011-04-26 07:53:25",""
"5787471","MD5 and SHA-2 collisions in Python","I'm writing a simple MP3 cataloguer to keep track of which MP3's are on my various devices. I was planning on using MD5 or SHA2 keys to identify matching files even if they have been renamed/moved, etc. I'm not trying to match MP3's that are logically equivalent (i.e.: same song but encoded differently). I have about 8000 MP3's. Only about 6700 of them generated unique keys.
My problem is that I'm running into collisions regardless of the hashing algorithm I choose. In one case, I have two files that happen to be tracks #1 and #2 on the same album, they are different file sizes yet produce identical hash keys whether I use MD5, SHA2-256, SHA2-512, etc...
This is the first time I'm really using hash keys on files and this is an unexpected result. I feel something fishy is going on here from the little I know about these hashing algorithms. Could this be an issue related to MP3's or Python's implementation?
Here's the snippet of code that I'm using:
    data = open(path, 'r').read()

    m = hashlib.md5(data)

    m.update(data)

    md5String = m.hexdigest()

Any answers or insights to why this is happening would be much appreciated. Thanks in advance.
--UPDATE--:
I tried executing this code in linux (with Python 2.6) and it did not produce a collision. As demonstrated by the stat call, the files are not the same. I also downloaded WinMD5 and this did not produce a collision(8d327ef3937437e0e5abbf6485c24bb3 and 9b2c66781cbe8c1be7d6a1447994430c). Is this a bug with Python hashlib on Windows? I tried the same under Python 2.7.1 and 2.6.6 and both provide the same result.
import hashlib
import os

def createMD5( path):

    fh = open(path, 'r')
    data = fh.read()
    m = hashlib.md5(data)
    md5String = m.hexdigest()
    fh.close()
    return md5String

print os.stat(path1)
print os.stat(path2)
print createMD5(path1)
print createMD5(path2)

>>> nt.stat_result(st_mode=33206, st_ino=0L, st_dev=0, st_nlink=0, st_uid=0, st_gid=0, st_size=6617216L, st_atime=1303808346L, st_mtime=1167098073L, st_ctime=1290222341L)
>>> nt.stat_result(st_mode=33206, st_ino=0L, st_dev=0, st_nlink=0, st_uid=0, st_gid=0, st_size=4921346L, st_atime=1303808348L, st_mtime=1167098076L, st_ctime=1290222341L)   
>>> a7a10146b241cddff031eb03bd572d96
>>> a7a10146b241cddff031eb03bd572d96

","Like @Delan Azabani said, there is something fishy here; collisions are bound to happen, but not that often. Check if the songs are the same, and update your post please.
Also, if you feel  that you don't have enough keys, you can use two (or even more) hashing algorithms at the same time: by using MD5 for example, you have 2**128, or 340282366920938463463374607431768211456 keys. By using SHA-1, you have 2**160 or 1461501637330902918203684832716283019655932542976 keys. By combining them, you have 2**128 * 2**160, or 497323236409786642155382248146820840100456150797347717440463976893159497012533375533056.
(But if you ask me, MD5 is more than enough for your needs.)
","3957","<python><hash><mp3><md5><sha>","7","0","4","2011-04-26 11:15:30","5789493","2","2","724966","","2011-04-26 10:53:35","2011-04-26 07:53:25",""
"5787471","MD5 and SHA-2 collisions in Python","I'm writing a simple MP3 cataloguer to keep track of which MP3's are on my various devices. I was planning on using MD5 or SHA2 keys to identify matching files even if they have been renamed/moved, etc. I'm not trying to match MP3's that are logically equivalent (i.e.: same song but encoded differently). I have about 8000 MP3's. Only about 6700 of them generated unique keys.
My problem is that I'm running into collisions regardless of the hashing algorithm I choose. In one case, I have two files that happen to be tracks #1 and #2 on the same album, they are different file sizes yet produce identical hash keys whether I use MD5, SHA2-256, SHA2-512, etc...
This is the first time I'm really using hash keys on files and this is an unexpected result. I feel something fishy is going on here from the little I know about these hashing algorithms. Could this be an issue related to MP3's or Python's implementation?
Here's the snippet of code that I'm using:
    data = open(path, 'r').read()

    m = hashlib.md5(data)

    m.update(data)

    md5String = m.hexdigest()

Any answers or insights to why this is happening would be much appreciated. Thanks in advance.
--UPDATE--:
I tried executing this code in linux (with Python 2.6) and it did not produce a collision. As demonstrated by the stat call, the files are not the same. I also downloaded WinMD5 and this did not produce a collision(8d327ef3937437e0e5abbf6485c24bb3 and 9b2c66781cbe8c1be7d6a1447994430c). Is this a bug with Python hashlib on Windows? I tried the same under Python 2.7.1 and 2.6.6 and both provide the same result.
import hashlib
import os

def createMD5( path):

    fh = open(path, 'r')
    data = fh.read()
    m = hashlib.md5(data)
    md5String = m.hexdigest()
    fh.close()
    return md5String

print os.stat(path1)
print os.stat(path2)
print createMD5(path1)
print createMD5(path2)

>>> nt.stat_result(st_mode=33206, st_ino=0L, st_dev=0, st_nlink=0, st_uid=0, st_gid=0, st_size=6617216L, st_atime=1303808346L, st_mtime=1167098073L, st_ctime=1290222341L)
>>> nt.stat_result(st_mode=33206, st_ino=0L, st_dev=0, st_nlink=0, st_uid=0, st_gid=0, st_size=4921346L, st_atime=1303808348L, st_mtime=1167098076L, st_ctime=1290222341L)   
>>> a7a10146b241cddff031eb03bd572d96
>>> a7a10146b241cddff031eb03bd572d96

","As others have stated, a single hash collision is unlikely, and multiple nigh on impossible, unless the files are identical. I would recommend generating the sums with an external utility as something of a sanity check. For example, in Ubuntu (and most/all other Linux distributions):
blair@blair-eeepc:~$ md5sum Bandwagon.mp3
b87cbc2c17cd46789cb3a3c51a350557  Bandwagon.mp3
blair@blair-eeepc:~$ sha256sum Bandwagon.mp3 
b909b027271b4c3a918ec19fc85602233a4c5f418e8456648c426403526e7bc0  Bandwagon.mp3

A quick Google search shows there are similar utilities available for Windows machines. If you see the collisions with the external utilities, then the files are identical. If there are no collisions, you are doing something wrong. I doubt the Python implementation is wrong, as I get the same results when doing the hash in Python:
>>> import hashlib
>>> hashlib.md5(open('Bandwagon.mp3', 'r').read()).hexdigest()
'b87cbc2c17cd46789cb3a3c51a350557'
>>> hashlib.sha256(open('Bandwagon.mp3', 'r').read()).hexdigest()
'b909b027271b4c3a918ec19fc85602233a4c5f418e8456648c426403526e7bc0'

","3957","<python><hash><mp3><md5><sha>","7","1","4","2011-04-26 11:15:30","5789493","2","2","724966","","2011-04-26 10:53:35","2011-04-26 07:53:25",""
"5787471","MD5 and SHA-2 collisions in Python","I'm writing a simple MP3 cataloguer to keep track of which MP3's are on my various devices. I was planning on using MD5 or SHA2 keys to identify matching files even if they have been renamed/moved, etc. I'm not trying to match MP3's that are logically equivalent (i.e.: same song but encoded differently). I have about 8000 MP3's. Only about 6700 of them generated unique keys.
My problem is that I'm running into collisions regardless of the hashing algorithm I choose. In one case, I have two files that happen to be tracks #1 and #2 on the same album, they are different file sizes yet produce identical hash keys whether I use MD5, SHA2-256, SHA2-512, etc...
This is the first time I'm really using hash keys on files and this is an unexpected result. I feel something fishy is going on here from the little I know about these hashing algorithms. Could this be an issue related to MP3's or Python's implementation?
Here's the snippet of code that I'm using:
    data = open(path, 'r').read()

    m = hashlib.md5(data)

    m.update(data)

    md5String = m.hexdigest()

Any answers or insights to why this is happening would be much appreciated. Thanks in advance.
--UPDATE--:
I tried executing this code in linux (with Python 2.6) and it did not produce a collision. As demonstrated by the stat call, the files are not the same. I also downloaded WinMD5 and this did not produce a collision(8d327ef3937437e0e5abbf6485c24bb3 and 9b2c66781cbe8c1be7d6a1447994430c). Is this a bug with Python hashlib on Windows? I tried the same under Python 2.7.1 and 2.6.6 and both provide the same result.
import hashlib
import os

def createMD5( path):

    fh = open(path, 'r')
    data = fh.read()
    m = hashlib.md5(data)
    md5String = m.hexdigest()
    fh.close()
    return md5String

print os.stat(path1)
print os.stat(path2)
print createMD5(path1)
print createMD5(path2)

>>> nt.stat_result(st_mode=33206, st_ino=0L, st_dev=0, st_nlink=0, st_uid=0, st_gid=0, st_size=6617216L, st_atime=1303808346L, st_mtime=1167098073L, st_ctime=1290222341L)
>>> nt.stat_result(st_mode=33206, st_ino=0L, st_dev=0, st_nlink=0, st_uid=0, st_gid=0, st_size=4921346L, st_atime=1303808348L, st_mtime=1167098076L, st_ctime=1290222341L)   
>>> a7a10146b241cddff031eb03bd572d96
>>> a7a10146b241cddff031eb03bd572d96

","I sort of have the feeling that you are reading a chunk of data which is smaller than the expected, and this chunk happens to be the same for both files. I don't know why, but try to open the file in binary with 'rb'. read() should read up to end of file, but windows behaves differently. From the docs

On Windows, 'b' appended to the mode
  opens the file in binary mode, so
  there are also modes like 'rb', 'wb',
  and 'r+b'. Python on Windows makes a
  distinction between text and binary
  files; the end-of-line characters in
  text files are automatically altered
  slightly when data is read or written.
  This behind-the-scenes modification to
  file data is fine for ASCII text
  files, but it’ll corrupt binary data
  like that in JPEG or EXE files. Be
  very careful to use binary mode when
  reading and writing such files. On
  Unix, it doesn’t hurt to append a 'b'
  to the mode, so you can use it
  platform-independently for all binary
  files.

","3957","<python><hash><mp3><md5><sha>","7","8","4","2011-04-26 11:15:30","5789493","2","2","724966","","2011-04-26 10:53:35","2011-04-26 07:53:25",""
"26256351","Encrypt passwords on Sql Server 2008 using SHA1","I have designed a Log In System using C# where the username and password is checked in SQL server 2008 before loading the main page. I wish to encrypt the stored password on the database. Is it possible to do it using C# and SHA1 algorithm?
Following is my stored procedure:
ALTER procedure [dbo].[proc_UserLogin]
 @userid varchar(20),
  @password nvarchar(50)
  As 

  declare
  @ReturnVal              varchar(500)


SET NOCOUNT ON      

  if exists(select userid,password from LoginManager where userid=@userid and password=@password)
  set @ReturnVal='0|Logged in Successfully'
  else
  set @ReturnVal='1|Login Failed/Username does not exist'

  select @ReturnVal

C# Code
public void button1_Click(object sender, EventArgs e)
        {
            mainform = new Form1();
            string[] v;

            OleDbConnection conn = new OleDbConnection(""File Name=E:\\Vivek\\License Manager\\License Manager\\login.udl"");

            try
            {

                conn.Open();
                string query = ""EXEC dbo.proc_UserLogin'"" + username.Text+ ""', '"" + password.Text+""'"";
                OleDbCommand cmd = new OleDbCommand(query, conn);
                string s = Convert.ToString(cmd.ExecuteScalar());
                v= s.Split('|');
                if (v[0]==""0"")
                {
                    mainform.Show();
                    this.Hide();
                }
                else
                {
                    MessageBox.Show(""Please enter correct user credentials and try again"");
                }


             }

             catch (Exception ex)
             {
                 MessageBox.Show(ex.Message);
             }


              conn.Close();

         }

I have gone through similar questions asked by other users here, but they were not working for me. Can anyone suggest changes to the code, so that password encryption can be accomplished?
Thanks
","Hash and salt passwords in C#
https://crackstation.net/hashing-security.htm
https://www.bentasker.co.uk/blog/security/201-why-you-should-be-asking-how-your-passwords-are-stored
As I stated in my comments, hashing passwords is something that you probably shouldn't be doing yourself.
A few things to note:

SHA1 is not recommended for passwords
Passwords should be salted
You should use a verified userstore framework rather than attempting to create your own, as you will likely ""do it wrong""
I'm sure there are many more

That being said, to accomplish your specific question, you would want something like this:
Users
----
userId
passwordHashed

passwordHashed stores a hashed version of the user's password (the plain text password is never stored anywhere in persistence.)
for checking for valid password something like this is done:
ALTER procedure [dbo].[proc_UserLogin]
 @userid varchar(20),
  @password nvarchar(50)
  As 

  declare
  @ReturnVal              varchar(500)


SET NOCOUNT ON      

  if exists(select userid,password from LoginManager where userid=@userid and password=HASHBYTES('SHA1', @password))
  set @ReturnVal='0|Logged in Successfully'
  else
  set @ReturnVal='1|Login Failed/Username does not exist'

  select @ReturnVal

For inserting/updating user passwords, you need to make sure to store the hashed password not the plain text password, as such;
INSERT INTO users(userId, passwordHashed) 
VALUES (@userId, HASHBYTES('SHA1', @rawPassword)

or
UPDATE users 
SET passwordHased = HASHBYTES('SHA1', @rawPassword) 
WHERE userId = @userId

EDIT:
just realized you're asking how to accomplish the hash in C#, not SQL.  You could perform the following (taken from Hashing with SHA1 Algorithm in C#):
public string Hash(byte [] temp)
{
    using (SHA1Managed sha1 = new SHA1Managed())
    {
        var hash = sha1.ComputeHash(temp);
        return Convert.ToBase64String(hash);
    }
}

Your code snip could be:
            conn.Open();
            string query = ""EXEC dbo.proc_UserLogin'"" + username.Text+ ""', '"" + this.Hash(System.Text.Encoding.UTF8.GetBytes(password.Text))+""'"";
            OleDbCommand cmd = new OleDbCommand(query, conn);

You should also note that you should parameterize your parameters to your stored procedure rather than passing them in the manner you are - which it looks like you already have a separate question in regarding that.
","3929","<c#><.net><sql-server-2008><encryption><sha>","2","3","1","2014-10-08 14:24:42","26258395","8","","3837962","","2014-10-08 14:24:42","2014-10-08 11:56:09",""
"6968734","How to calculate HMAC SHA on Windows?","I need to calculate HMAC SHA in my program on Windows. This program earlier used to run on linux where it used the openssl. Now I need to port it to Windows, but I am not sure if Windows platform SDK provides any means to calculate the HMAC SHA.
I cam across the following link on msdn, but I am not sure - http://msdn.microsoft.com/en-us/library/aa382453(v=VS.85).aspx.
Let me know what is the best way ahead for me. The existing program is in C.
","IF you want to use the API included in the OS then the link you found is ok - more information see http://msdn.microsoft.com/en-us/library/aa380255%28v=vs.85%29.aspx
Or are you looking for some 3rd-party lib with some specific features ? if you are already familiar with with openssl, it is available for Windows too... see http://www.slproweb.com/products/Win32OpenSSL.html
","3905","<windows><hmac><sha>","0","0","3","2015-09-03 00:03:57","","0","","","","","2011-08-06 18:19:20",""
"6968734","How to calculate HMAC SHA on Windows?","I need to calculate HMAC SHA in my program on Windows. This program earlier used to run on linux where it used the openssl. Now I need to port it to Windows, but I am not sure if Windows platform SDK provides any means to calculate the HMAC SHA.
I cam across the following link on msdn, but I am not sure - http://msdn.microsoft.com/en-us/library/aa382453(v=VS.85).aspx.
Let me know what is the best way ahead for me. The existing program is in C.
","If you have the key explicitly, it may be easier to program HMAC explicitly out of two invocations of the SHA primitive than to try to get make the key known to the Windows crypto API. HMAC itself is specified in RFC 2104, and Windows can do the SHA hashes for you with CryptCreateHash, CryptHashData and CryptGetHashParam.
","3905","<windows><hmac><sha>","0","2","3","2015-09-03 00:03:57","","0","","","","","2011-08-06 18:19:20",""
"6968734","How to calculate HMAC SHA on Windows?","I need to calculate HMAC SHA in my program on Windows. This program earlier used to run on linux where it used the openssl. Now I need to port it to Windows, but I am not sure if Windows platform SDK provides any means to calculate the HMAC SHA.
I cam across the following link on msdn, but I am not sure - http://msdn.microsoft.com/en-us/library/aa382453(v=VS.85).aspx.
Let me know what is the best way ahead for me. The existing program is in C.
","You can use CryptImportKeyto get your key into the Windows Cryptographic Service Provider. Then follow the MSDN example HMAC code. The trick to getting your key into the CSP is to make a struct to hold 3 things: a BLOBHEADER, a DWORD for the length, and char[] for the key. I will presume you have the raw key data so it would look something like:
struct KeyData
{
  BLOBHEADER hdr;
  unsigned long keyLength;
  unsigned char key[128];
};

void ComputeHash()
{
  HCRYPTPROV cryptoProvider = 0;
  HCRYPTKEY cryptKey = 0;
  KeyData kd;
  kd.hdr.aiKeyAlg = CALG_RC2;
  kd.hdr.bType = PLAINTEXTKEYBLOB;
  kd.hdr.bVersion = CUR_BLOB_VERSION;
  kd.hdr.reserved = 0;
  kd.keyLength = 128;
  /* set your key data here */
  /* get a crypto provider - See the microsoft references */
  CryptImportKey(cryptoProvider, reinterpret_cast<BYTE*>(&kd), sizeof(kd),0, CRYPT_IPSEC_HMAC_KEY, &cryptKey);
  /* use cryptKey in the call to CryptCreateHash when you create your CALG_HMAC */
}

Make sure to replace the lengths with the actual length of your key.
","3905","<windows><hmac><sha>","0","2","3","2015-09-03 00:03:57","","0","","","","","2011-08-06 18:19:20",""
"22840322","How to make ""MessageDigest SHA-1 and Signature NONEwithRSA"" equivalent to ""Signature SHA1withRSA ""","I am interested in applying a SHA-1 hash with RSA signature to some data, but I need to do it in two steps - apply hash first and then sign the data.  The Signature.sign() function appears to create a more complex (ASN.1?) data structure that is ultimately signed (see this question). How can I make the two equivalent without using any external libraries like BouncyCastle?
Apply hash and sign in single step with Signature:
PrivateKey privatekey = (PrivateKey) keyStore.getKey(alias, null);
...
sig = Signature.getInstance(""SHA1withRSA"", ""SunMSCAPI"");
sig.initSign(privatekey);
sig.update(data_to_sign);
byte[] bSignedData_CAPISHA1_CAPIRSA = sig.sign();

Apply hash via MessageDigest, then sign with Signature:
PrivateKey privatekey = (PrivateKey) keyStore.getKey(alias, null);
...
MessageDigest sha1 = MessageDigest.getInstance(""SHA-1"");
byte[] data_to_sign = sha1.digest(bdataToSign);
Signature sig = Signature.getInstance(""NONEwithRSA"", ""SunMSCAPI"");
sig.initSign(privatekey);
sig.update(data_to_sign);
byte[] bSignedData_JAVASHA1_CAPIRSA = sig.sign();
...

I am looking for the following equivalency:
bSignedData_JAVASHA1_CAPIRSA == bSignedData_CAPISHA1_CAPIRSA

My ultimate goal is to create the hash and then sign with a PKCS11 token, but I require the signed data to be the same format as legacy data for verification purposes.
","I was able to solve this by doing the following:

The data to be signed needed to be formatted correctly in a
DigestInfo DER-encoded byte array.  The Signature SHA1withRSA takes
care of this for you, but if you want to accomplish it in a two-step
process, you need to create your own DigestInfo.  I ended up copying
a very minimal amount of ASN.1 classes from BouncyCastle into my
project to accomplish this, despite my desire not to use a third
party lib.
If you try to use the Cipher API to encrypt the DigestInfo, the
PKCS1 padding will be random and not appropriate for a digital
signature.  I needed static padding.
The Signature.getInstance(""NONEwithRSA"", ""SunMSCAPI"") rejects the
DER-encoded DigestInfo format, and will return an error if you try
to sign that data.  But, since I ultimately wanted to use the PKCS11
API to generate the signature, I ended up signing the DER-encoded
DigestInfo with the PKCS11 C_SignInit and C_Sign functions.

To summarize, what worked for me was:

generate the SHA-1 hash of the data to sign using the Java MessageDigest API 
generated a DigestInfo DER-encoded ASN.1 object with the SHA-1 hash and SHA-1 OID embedded in the object. 
signed the DigestInfo using the PKCS11 C_Sign function from a third party library.

The following links were most helpful in solving my problem:
Oracle Forums: SHA1withRSA - how to do that in 2 steps?
StackOverflow: Using SHA1 and RSA with java.security.Signature vs. MessageDigest and Cipher
","3881","<java><hash><rsa><keystore><sha>","4","3","2","2015-09-15 12:39:00","22867916","0","6","-1","","2017-05-23 12:06:56","2014-04-03 14:11:05",""
"22840322","How to make ""MessageDigest SHA-1 and Signature NONEwithRSA"" equivalent to ""Signature SHA1withRSA ""","I am interested in applying a SHA-1 hash with RSA signature to some data, but I need to do it in two steps - apply hash first and then sign the data.  The Signature.sign() function appears to create a more complex (ASN.1?) data structure that is ultimately signed (see this question). How can I make the two equivalent without using any external libraries like BouncyCastle?
Apply hash and sign in single step with Signature:
PrivateKey privatekey = (PrivateKey) keyStore.getKey(alias, null);
...
sig = Signature.getInstance(""SHA1withRSA"", ""SunMSCAPI"");
sig.initSign(privatekey);
sig.update(data_to_sign);
byte[] bSignedData_CAPISHA1_CAPIRSA = sig.sign();

Apply hash via MessageDigest, then sign with Signature:
PrivateKey privatekey = (PrivateKey) keyStore.getKey(alias, null);
...
MessageDigest sha1 = MessageDigest.getInstance(""SHA-1"");
byte[] data_to_sign = sha1.digest(bdataToSign);
Signature sig = Signature.getInstance(""NONEwithRSA"", ""SunMSCAPI"");
sig.initSign(privatekey);
sig.update(data_to_sign);
byte[] bSignedData_JAVASHA1_CAPIRSA = sig.sign();
...

I am looking for the following equivalency:
bSignedData_JAVASHA1_CAPIRSA == bSignedData_CAPISHA1_CAPIRSA

My ultimate goal is to create the hash and then sign with a PKCS11 token, but I require the signed data to be the same format as legacy data for verification purposes.
","emsworth's answer was when a great help for me when struggling with the same issue (but using SHA512). However it is still missing a hint which takes me a few more days to find out by myself.
There are different ways how the signature is constructed. For example when using RSASSA-PKCS1-v1_5 (from RFC 5246, TLS 1.2) the DER-encoded DigestInfo is not obtained the usual way. For example if using BouncyCastle
DigestInfo digestInfo = new DigestInfo(new AlgorithmIdentifier(NISTObjectIdentifiers.id_sha512), hash);
byte[] digestedHash = digestInfo.getEncoded(ASN1Encoding.DER);

does not yield the expected results. RFC 3447 defines how to construct the DER encoding on page 42. For example in case of SHA-512 the DER encoding is as follows:
// code example includes MessageDigest for the sake of completeness
byte[] input = ... // the raw data
MessageDigest md = MessageDigest.getInstance(""SHA-512"");
md.update(input);
byte[] hash = md.digest();

// Taken from RFC 3447, page 42 for SHA-512, create input for signing
byte[] modifierBytes = { 0x30, 0x51, 0x30, 0x0d, 0x06, 0x09, 0x60, (byte) 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x03, 0x05, 0x00, 0x04, 0x40 };
ByteArrayOutputStream baos = new ByteArrayOutputStream();
baos.write(modifierBytes);
baos2.write(hash);

// create signature
Signature s = Signature.getInstance(""NONEwithRSA"");
s.initSign(MyTlsCredentials.THE_CLIENT_KEY);
s.update(baos.toByteArray());
byte[] signature = s.sign();

// add prefix as specified in RFC 3447, im my case it had always been the shown values
// but I have not understand the RFC completely in this point as the code seems to be
// contradictious to the interpretation of the byte values for the hash function from page 42.
ByteArrayOutputStream baos2 = new ByteArrayOutputStream();
baos2.write(new byte[] { 1, 0 });
baos2.write(signature5);

","3881","<java><hash><rsa><keystore><sha>","4","1","2","2015-09-15 12:39:00","22867916","0","6","-1","","2017-05-23 12:06:56","2014-04-03 14:11:05",""
"16983301","SHA-256 Padding","To calculate the SHA-256 hash I need to pad my message. Am using the following description:
(taken from http://csrc.nist.gov/groups/STM/cavp/documents/shs/sha256-384-512.pdf)

Pad the message in the usual way: Suppose the length of the message M,
  in bits, is l. Append the bit ""1"" to the end of the message, and then
  k zero bits, where k is the smallest non-negative solution to the
  equation l+1+k  448 mod 512. To this append the 64-bit block which is
  equal to the number l written in binary

But what should one do if the message length in bits is less than 64-bits short of a 512bit block... i.e., there isn't room for the end 64-bit block mentioned above? Or the 64-bit length and the ""1"" bit?
I had a look on wikipedia too, but this doesn't throw any more light on the subject. Google searches haven't been too fruitful either, would appreciate any suggestions :)
Thanks
","If your message is only just short of a full block (less than 65 bits short), you will need your output to be a block longer than your input. In the worst case, if your message is exactly 64 bits short of a full block, you will add a 1 and then 511 0s before the ""number"" bits, but that is how the padding has to work.
","3840","<algorithm><sha>","2","4","1","2013-06-07 11:45:04","16983339","0","1","","","","2013-06-07 11:43:17",""
"8873169","Is the SHA-1 of commits calculated based only on the content of the tree?","For the sake of an experiment, lets say your git log identifies the following commits
commit 16bc8486fb34cf9a6faf0f7df606ae72ad9ea438  // added 2nd file
commit 9188f9a25b045f130b08888bc3f638099fa7f212  // initial commit

After committing, .git/refs/heads/master points to 16bc8486fb34cf9a6faf0f7df606ae72ad9ea438.
Let's say, after this, i manually edit the .git/refs/heads/master file to point to 9188f9a25b045f130b08888bc3f638099fa7f212
At this point, git status recognizes that a new uncommitted file is in need of some attention. This is the same file my second commit took care of before.
If i do commit it .. git log now shows 
commit b317f67686f9e6ab1eaabf47073b401d677205d5  // 2nd file committed for the 2nd time
commit 9188f9a25b045f130b08888bc3f638099fa7f212  // initial commit

Question 1:
You'll notice that SHA hashes are different between the very first time i committed a second file and now. Why is that? File's content did not change, it is still the same exact file.
Question 2
At this point, what happened to the original second commit? When i do git show 16bc8486, it shows this commit. It does not however show up in git log history. 
","Question 1: Because the hash is generated taking everything into account including the commit meta data (which itself contains the date and time).
Question 2: git log shows the log of the current branch. The commit 16bc8486 is not part of it. As far as I know (I'm not completely sure) the garbage collector will take it away sooner or later, if it finds it with nothing referencing it (git gc --help)..
","3811","<git><sha>","10","14","3","2016-05-17 10:31:31","8873188","1","5","895245","","2016-05-17 10:31:31","2012-01-15 20:36:16",""
"8873169","Is the SHA-1 of commits calculated based only on the content of the tree?","For the sake of an experiment, lets say your git log identifies the following commits
commit 16bc8486fb34cf9a6faf0f7df606ae72ad9ea438  // added 2nd file
commit 9188f9a25b045f130b08888bc3f638099fa7f212  // initial commit

After committing, .git/refs/heads/master points to 16bc8486fb34cf9a6faf0f7df606ae72ad9ea438.
Let's say, after this, i manually edit the .git/refs/heads/master file to point to 9188f9a25b045f130b08888bc3f638099fa7f212
At this point, git status recognizes that a new uncommitted file is in need of some attention. This is the same file my second commit took care of before.
If i do commit it .. git log now shows 
commit b317f67686f9e6ab1eaabf47073b401d677205d5  // 2nd file committed for the 2nd time
commit 9188f9a25b045f130b08888bc3f638099fa7f212  // initial commit

Question 1:
You'll notice that SHA hashes are different between the very first time i committed a second file and now. Why is that? File's content did not change, it is still the same exact file.
Question 2
At this point, what happened to the original second commit? When i do git show 16bc8486, it shows this commit. It does not however show up in git log history. 
","The SHA1 is calculated from the diff and all meta data from this commit (including the author and committer, the timestamp, and various other data).
For your second question, the data commit is still present but not part of any live branch anymore. Sometimes git will run a garbage collection where various deleted stuff will actually be removed. You will notice that once you manually run it using git gc that the unreferenced commit will be gone and not even be accessible with git show anymore.
","3811","<git><sha>","10","2","3","2016-05-17 10:31:31","8873188","1","5","895245","","2016-05-17 10:31:31","2012-01-15 20:36:16",""
"8873169","Is the SHA-1 of commits calculated based only on the content of the tree?","For the sake of an experiment, lets say your git log identifies the following commits
commit 16bc8486fb34cf9a6faf0f7df606ae72ad9ea438  // added 2nd file
commit 9188f9a25b045f130b08888bc3f638099fa7f212  // initial commit

After committing, .git/refs/heads/master points to 16bc8486fb34cf9a6faf0f7df606ae72ad9ea438.
Let's say, after this, i manually edit the .git/refs/heads/master file to point to 9188f9a25b045f130b08888bc3f638099fa7f212
At this point, git status recognizes that a new uncommitted file is in need of some attention. This is the same file my second commit took care of before.
If i do commit it .. git log now shows 
commit b317f67686f9e6ab1eaabf47073b401d677205d5  // 2nd file committed for the 2nd time
commit 9188f9a25b045f130b08888bc3f638099fa7f212  // initial commit

Question 1:
You'll notice that SHA hashes are different between the very first time i committed a second file and now. Why is that? File's content did not change, it is still the same exact file.
Question 2
At this point, what happened to the original second commit? When i do git show 16bc8486, it shows this commit. It does not however show up in git log history. 
","The sha1 values for each of the file blobs will be identical in both cases if you have the same content (even if the filename is changed). 
Likewise the sha1 values for the trees of the files blobs will be the same if they have the same filenames. 
However at the very top we have the commit which will contain the unchanged link to the previous commit, the top tree, the author and commiter, but as KingCrunch said, the author and commiter date will be different, so the sha1 of the commit sha1 will be different.
You can make them the same if you deliberately set the author and commiter date using the environment variables so they are unchanged.
","3811","<git><sha>","10","6","3","2016-05-17 10:31:31","8873188","1","5","895245","","2016-05-17 10:31:31","2012-01-15 20:36:16",""
"10096268","Securing data in the google app engine datastore","Our google app engine app stores a fair amount of personally identifying information (email, ssn, etc) to identify users. I'm looking for advice as to how to secure that data.
My current strategy
Store the sensitive data in two forms:

Hashed - using SHA-2 and a salt
Encrypted - using public/private key RSA

When we need to do look ups: 

Do look-ups on the hashed data (hash the PII in a query, compare it to the hashed PII in the datastore).

If we ever need to re-hash the data or otherwise deal with it in a raw form:

Decrypt the encrypted version with our private key. Never store it in raw form, just process it then re-hash & re-encrypt it.

My concerns
Keeping our hash salt secret
If an attacker gets ahold of the data in the datastore, as well as our hash salt, I'm worried they could brute force the sensitive data. Some of it (like SSN, a 9-digit number) does not have a big key space, so even with a modern hash algorithm I believe it could be done if the attacker knew the salt.
My current idea is to keep the salt out of source control and in it's own file. That file gets loaded on to GAE during deployment and the app reads the file when it needs to hash incoming data. 
In between deployments the salt file lives on a USB key protected by an angry bear (or a safe deposit box). 
With the salt only living in two places

The USB key
Deployed to google apps

and with code download permanently disabled, I can't think of a way for someone to get ahold of the salt without stealing that USB key. Am I missing something?
Keeping our private RSA key secret
Less worried about this. It will be rare that we'll need to decrypt the encrypted version (only if we change the hash algorithm or data format).  
The private key never has to touch the GAE server, we can pull down the encrypted data, decrypt it locally, process it, and re-upload the encrypted / hashed versions.
We can keep our RSA private key on a USB stick guarded by a bear AND a tiger, and only bring it out when we need it.

I realize this question isn't exactly google apps specific, but I think GAE makes the situation somewhat unique. 
If I had total control, I'd do things like lock down deployment access and access to the datastore viewer with two-factor authentication, but those options aren't available at the moment (Having a GAE specific password is good, but I like having RSA tokens involved).
I'm also neither a GAE expert nor a security expert, so if there's a hole I'm missing or something I'm not thinking of specific to the platform, I would love to hear it.
","You can increase your hashing algorithm security by using HMAC, a secret key, and a unique salt per entry (I know people will disagree with me on this but it's my belief from my research that it helps avoid certain attacks). You can also use bcrypt or scrypt to hash which will make reversing the hash an extremely time consuming process (but you'll also have to factor this in as time it takes your app to compute the hash).
By disabling code downloads and keeping your secret key protected, I can't imagine how someone can get a hold of it. Just make sure your code is kept protected under similar safe guards or that you remove the secret key from your code during development and only pull it out to deploy. I assume you will keep your secret key in your code (I've heard many people say to keep it in memory to be ultra secure but given the nature of AppEngine and instances, this isn't feasible).
Update:
Be sure to enable 2-factor authentication for all Google accounts that have admin rights to your app. Google offers this so not sure if your restriction for enabling this was imposed by an outside force or not.
","3701","<python><security><google-app-engine><rsa><sha>","17","3","3","2013-07-07 18:18:47","10098781","6","11","","","","2012-04-10 20:50:25",""
"10096268","Securing data in the google app engine datastore","Our google app engine app stores a fair amount of personally identifying information (email, ssn, etc) to identify users. I'm looking for advice as to how to secure that data.
My current strategy
Store the sensitive data in two forms:

Hashed - using SHA-2 and a salt
Encrypted - using public/private key RSA

When we need to do look ups: 

Do look-ups on the hashed data (hash the PII in a query, compare it to the hashed PII in the datastore).

If we ever need to re-hash the data or otherwise deal with it in a raw form:

Decrypt the encrypted version with our private key. Never store it in raw form, just process it then re-hash & re-encrypt it.

My concerns
Keeping our hash salt secret
If an attacker gets ahold of the data in the datastore, as well as our hash salt, I'm worried they could brute force the sensitive data. Some of it (like SSN, a 9-digit number) does not have a big key space, so even with a modern hash algorithm I believe it could be done if the attacker knew the salt.
My current idea is to keep the salt out of source control and in it's own file. That file gets loaded on to GAE during deployment and the app reads the file when it needs to hash incoming data. 
In between deployments the salt file lives on a USB key protected by an angry bear (or a safe deposit box). 
With the salt only living in two places

The USB key
Deployed to google apps

and with code download permanently disabled, I can't think of a way for someone to get ahold of the salt without stealing that USB key. Am I missing something?
Keeping our private RSA key secret
Less worried about this. It will be rare that we'll need to decrypt the encrypted version (only if we change the hash algorithm or data format).  
The private key never has to touch the GAE server, we can pull down the encrypted data, decrypt it locally, process it, and re-upload the encrypted / hashed versions.
We can keep our RSA private key on a USB stick guarded by a bear AND a tiger, and only bring it out when we need it.

I realize this question isn't exactly google apps specific, but I think GAE makes the situation somewhat unique. 
If I had total control, I'd do things like lock down deployment access and access to the datastore viewer with two-factor authentication, but those options aren't available at the moment (Having a GAE specific password is good, but I like having RSA tokens involved).
I'm also neither a GAE expert nor a security expert, so if there's a hole I'm missing or something I'm not thinking of specific to the platform, I would love to hear it.
","When deciding on a security architecture, the first thing in your mind should always be threat models. Who are your potential attackers, what are their capabilities, and how can you defend against them? Without a clear idea of your threat model, you've got no way to assess whether or not your proposed security measures are sufficient, or even if they're necessary.
From your text, I'm guessing you're seeking to protect against some subset of the following:

An attacker who compromises your datastore data, but not your application code.
An attacker who obtains access to credentials to access the admin console of your app and can deploy new code.

For the former, encrypting or hashing your datastore data is likely sufficient (but see the caveats later in this answer). Protecting against the latter is tougher, but as long as your admin users can't execute arbitrary code without deploying a new app version, storing your keys in a module that's not checked in to source control, as you suggest, ought to work just fine, since even with admin access, they can't recover the keys, nor can they deploy a new version that reveals the keys to them. Make sure to disable downloading of source, obviously.
You rightly note some concerns about hashing of data with a limited amount of entropy - and you're right to be concerned. To some degree, salts can help with this by preventing precomputation attacks, and key stretching, such as that employed in PBKDF2, scrypt, and bcrypt, can make your attacker's life harder by increasing the amount of work they have to do. However, with something like SSN, your keyspace is simply so small that no amount of key stretching is going to help - if you hash the data, and the attacker gets the hash, they will be able to determine the original SSN.
In such situations, your only viable approach is to encrypt the data with a secret key. Now your attacker is forced to brute-force the key in order to get the data, a challenge that is orders of magnitude harder.
In short, my recommendation would be to encrypt your data using a standard (private key) cipher, with the key stored in a module not in source control. Using hashing instead will only weaken your data, while using public key cryptography doesn't provide appreciable security against any plausible threat model that you don't already have by using a standard cipher.
Of course, the number one way to protect your users' data is to not store it in the first place, if you can. :)
","3701","<python><security><google-app-engine><rsa><sha>","17","11","3","2013-07-07 18:18:47","10098781","6","11","","","","2012-04-10 20:50:25",""
"10096268","Securing data in the google app engine datastore","Our google app engine app stores a fair amount of personally identifying information (email, ssn, etc) to identify users. I'm looking for advice as to how to secure that data.
My current strategy
Store the sensitive data in two forms:

Hashed - using SHA-2 and a salt
Encrypted - using public/private key RSA

When we need to do look ups: 

Do look-ups on the hashed data (hash the PII in a query, compare it to the hashed PII in the datastore).

If we ever need to re-hash the data or otherwise deal with it in a raw form:

Decrypt the encrypted version with our private key. Never store it in raw form, just process it then re-hash & re-encrypt it.

My concerns
Keeping our hash salt secret
If an attacker gets ahold of the data in the datastore, as well as our hash salt, I'm worried they could brute force the sensitive data. Some of it (like SSN, a 9-digit number) does not have a big key space, so even with a modern hash algorithm I believe it could be done if the attacker knew the salt.
My current idea is to keep the salt out of source control and in it's own file. That file gets loaded on to GAE during deployment and the app reads the file when it needs to hash incoming data. 
In between deployments the salt file lives on a USB key protected by an angry bear (or a safe deposit box). 
With the salt only living in two places

The USB key
Deployed to google apps

and with code download permanently disabled, I can't think of a way for someone to get ahold of the salt without stealing that USB key. Am I missing something?
Keeping our private RSA key secret
Less worried about this. It will be rare that we'll need to decrypt the encrypted version (only if we change the hash algorithm or data format).  
The private key never has to touch the GAE server, we can pull down the encrypted data, decrypt it locally, process it, and re-upload the encrypted / hashed versions.
We can keep our RSA private key on a USB stick guarded by a bear AND a tiger, and only bring it out when we need it.

I realize this question isn't exactly google apps specific, but I think GAE makes the situation somewhat unique. 
If I had total control, I'd do things like lock down deployment access and access to the datastore viewer with two-factor authentication, but those options aren't available at the moment (Having a GAE specific password is good, but I like having RSA tokens involved).
I'm also neither a GAE expert nor a security expert, so if there's a hole I'm missing or something I'm not thinking of specific to the platform, I would love to hear it.
","Interesting approach to encrypt data on a datastore. After going through this, one question that comes to my mind is how do you query data on your hashes? Are you using comparison of two hashes or more fine grained hashing? Again how do you accomplish operations like greater than value, less than value after hashing and encrypting the data in your table?
Fine grained hashing meaning, do you hash consecutive bytes of a data stream to get the accumulated hash. i.e hash(abcd) = hash(a,b) + hash (b,c) + etc. This type of hashing would tell how similar the underlying data are rather than a match.  
","3701","<python><security><google-app-engine><rsa><sha>","17","1","3","2013-07-07 18:18:47","10098781","6","11","","","","2012-04-10 20:50:25",""
"39607485","SHA256 in React Native","I need to calculate SHA256 hash value of many files in Android and iOS using React Native.  When files are selected by a user, my app will start calculating SHA256 for each file.
For web pages, I have been using crypto-js.  But for Andoid and iOS applications, I am concerned that performance of crypto-js may not be fast enough as a file (eg. video file) may be >400 MB.  
Is there any way that I can call Android/iOS native api to calculate SHA256, instead of using crypto-js for performance sake?
","There isn't anything built into react-native itself to natively calculate a sha-256, but there are a few options.
As @Morre pointed out, react-native-sha256 is an open source project that supports calculating the sha-256 of a string using native components.
Another open source react-native project - react-native-fs - has support for calculating the sha-256 of a file using native components, specifically the hash function.
As @Morre has pointed out, you could write your own native code to provide the same functionality if you would prefer that option. Both of the libraries I mentioned here are open source, so the source code there can be a good reference for what the specific Android/iOS code would need to be written. There are also code examples here on StackOverflow for both java and swift. React-Native's native module documentation (Android) and iOS is extensive.
","3694","<react-native><sha><cryptojs>","2","2","1","2017-12-14 21:29:01","47822332","4","1","","","","2016-09-21 04:18:59",""
"4769007","Can you get this same Java SHA-1 in PHP please?","I find myself in a need to change website platforms from Java to PHP but I'd like to keep all my user's passwords...
I had this code do the password hashing prior to writting the hashed value as the password to the website:
MessageDigest md = null;
md = MessageDigest.getInstance(""SHA"");
md.update(plaintext.getBytes(""UTF-8""));
byte raw[] = md.digest();
hash = new Base64().encodeToString(raw).replaceAll(""\n"", """").replaceAll(""\r"", """");

I think the Java code did SHA-1 hashing of the password but just prior to that it was byte encoded to UTF-8 and afterwards it was Base64 encoded.
I'd like to have a PHP code do the same, i.e. return the same value of a hash for the same password as in Java, only it seems that the PHP code doing SHA-1 hashing I have won't return the same SHA(-1, not Base64 encoded, I think?) value when compared to a Java Base64 decoded value of the hash...could it have something to do with the fact that my passwords in PHP are not UTF-8 byte encoded first (and how can I do that in PHP) please?
p.s.
Another strange thing...my passwords in Java are all 28characters long (usually something like this rnwn4zTNgH30l4pP8V05lRVGmF4=)...but the Base64().decode(hash) value of those password hashes is 10 characters long (an example [B@14e1f2b).
I thought Base64 did an additional 1 character to each 3 charters (28 or 27, excluding the padding = charter, is much more that a third larger than those 10 charcters) so am I doing the decoding call wrong somehow maybe???
And on top of all that the SHA-1 password hashed values in PHP are 40 characters long (in a UTF-8 mysql database) like so dd94709528bb1c83d08f3088d4043f4742891f4f?
","[B@14e1f2b is definitely not a hash. It's a result of implicit conversion from byte[] to String. 
It looks like you do something like this:
String decodedHash = Base64().decode(hash); // Produces [B@14e1f2b

However, the correct representation of the hash is a byte array:
byte[] decodedHash = Base64().decode(hash); 

","3686","<java><php><hash><passwords><sha>","4","5","3","2011-11-03 05:19:53","","4","2","338665","","2011-01-22 16:39:48","2011-01-22 16:25:12",""
"4769007","Can you get this same Java SHA-1 in PHP please?","I find myself in a need to change website platforms from Java to PHP but I'd like to keep all my user's passwords...
I had this code do the password hashing prior to writting the hashed value as the password to the website:
MessageDigest md = null;
md = MessageDigest.getInstance(""SHA"");
md.update(plaintext.getBytes(""UTF-8""));
byte raw[] = md.digest();
hash = new Base64().encodeToString(raw).replaceAll(""\n"", """").replaceAll(""\r"", """");

I think the Java code did SHA-1 hashing of the password but just prior to that it was byte encoded to UTF-8 and afterwards it was Base64 encoded.
I'd like to have a PHP code do the same, i.e. return the same value of a hash for the same password as in Java, only it seems that the PHP code doing SHA-1 hashing I have won't return the same SHA(-1, not Base64 encoded, I think?) value when compared to a Java Base64 decoded value of the hash...could it have something to do with the fact that my passwords in PHP are not UTF-8 byte encoded first (and how can I do that in PHP) please?
p.s.
Another strange thing...my passwords in Java are all 28characters long (usually something like this rnwn4zTNgH30l4pP8V05lRVGmF4=)...but the Base64().decode(hash) value of those password hashes is 10 characters long (an example [B@14e1f2b).
I thought Base64 did an additional 1 character to each 3 charters (28 or 27, excluding the padding = charter, is much more that a third larger than those 10 charcters) so am I doing the decoding call wrong somehow maybe???
And on top of all that the SHA-1 password hashed values in PHP are 40 characters long (in a UTF-8 mysql database) like so dd94709528bb1c83d08f3088d4043f4742891f4f?
","What I normally do with Java to compute a SHA-1 hash that is exactly identical to the PHP sha1() function is the following. The key is that toHexString is used to show the raw bytes in a printable way. If you use the PHP function and want to obtain the same result of your convoluted process, you need to use the parameter $raw_output to true in PHP to get the raw bytes and apply Base64. Full source code.
/**
 * Compute a SHA-1 hash of a String argument
 *
 * @param arg the UTF-8 String to encode
 * @return the sha1 hash as a string.
 */
public static String computeSha1OfString(String arg) {
    try {
        return computeSha1OfByteArray(arg.getBytes((""UTF-8"")));
    } catch (UnsupportedEncodingException ex) {
        throw new UnsupportedOperationException(ex);
    }
}

private static String computeSha1OfByteArray(byte[] arg) {
    try {
        MessageDigest md = MessageDigest.getInstance(""SHA-1"");
        md.update(arg);
        byte[] res = md.digest();
        return toHexString(res);
    } catch (NoSuchAlgorithmException ex) {
        throw new UnsupportedOperationException(ex);
    }
}

private static String toHexString(byte[] v) {
    StringBuilder sb = new StringBuilder(v.length * 2);
    for (int i = 0; i < v.length; i++) {
        int b = v[i] & 0xFF;
        sb.append(HEX_DIGITS.charAt(b >>> 4)).append(HEX_DIGITS.charAt(b & 0xF));
    }
    return sb.toString();
}

","3686","<java><php><hash><passwords><sha>","4","3","3","2011-11-03 05:19:53","","4","2","338665","","2011-01-22 16:39:48","2011-01-22 16:25:12",""
"4769007","Can you get this same Java SHA-1 in PHP please?","I find myself in a need to change website platforms from Java to PHP but I'd like to keep all my user's passwords...
I had this code do the password hashing prior to writting the hashed value as the password to the website:
MessageDigest md = null;
md = MessageDigest.getInstance(""SHA"");
md.update(plaintext.getBytes(""UTF-8""));
byte raw[] = md.digest();
hash = new Base64().encodeToString(raw).replaceAll(""\n"", """").replaceAll(""\r"", """");

I think the Java code did SHA-1 hashing of the password but just prior to that it was byte encoded to UTF-8 and afterwards it was Base64 encoded.
I'd like to have a PHP code do the same, i.e. return the same value of a hash for the same password as in Java, only it seems that the PHP code doing SHA-1 hashing I have won't return the same SHA(-1, not Base64 encoded, I think?) value when compared to a Java Base64 decoded value of the hash...could it have something to do with the fact that my passwords in PHP are not UTF-8 byte encoded first (and how can I do that in PHP) please?
p.s.
Another strange thing...my passwords in Java are all 28characters long (usually something like this rnwn4zTNgH30l4pP8V05lRVGmF4=)...but the Base64().decode(hash) value of those password hashes is 10 characters long (an example [B@14e1f2b).
I thought Base64 did an additional 1 character to each 3 charters (28 or 27, excluding the padding = charter, is much more that a third larger than those 10 charcters) so am I doing the decoding call wrong somehow maybe???
And on top of all that the SHA-1 password hashed values in PHP are 40 characters long (in a UTF-8 mysql database) like so dd94709528bb1c83d08f3088d4043f4742891f4f?
","PHP's sha1() encodes each byte of the output as hexadecimal by default, but you can get the raw output by passing true as the second argument:
$digest = sha1($password, true); // This returns the same string of bytes as md.digest()

Then pass the digest to base64_encode and you are done:
base64_encode(sha1($password, true));

This returns the exact same SHA-1 hash as your java code.
","3686","<java><php><hash><passwords><sha>","4","1","3","2011-11-03 05:19:53","","4","2","338665","","2011-01-22 16:39:48","2011-01-22 16:25:12",""
"22358406","Can Azure Cloud service use a sha256 certificate","We need to update our Azure Cloud service with a brand new cert.
The one I have been given specifies sha256 as the signature hash algorithm.
We previously had one with sha1.
When I tried to update and package of the Azure deployment the error I get states that the thumprint is not valid.

Error 8   The XML specification is not valid: The 'thumbprint' attribute is invalid - The value '‎‎REDACTED' is invalid according to its datatype 'http://schemas.microsoft.com/ServiceHosting/2008/10/ServiceConfiguration:ThumbprintType' - The Pattern constraint failed.

In the ServiceConfiguration.Cloud.cscfg file, the XML looks like this:
<Certificates>
  <Certificate name=""cert"" thumbprint=""REDACTED"" thumbprintAlgorithm=""sha1"" />
</Certificates>

with the thumprint attribute squiggly lined as the error above.
I've tried thumbprintAlgorithm=256, but this didn't work, presumably not a valid value.
Does it need to be sha1? Can Azure support sha256?
EDIT:
I found the following in the service defintion schema, that indicates sha256 is allowed:
<xs:attribute name=""thumbprintAlgorithm"" type=""ThumbprintAlgorithmTypes"" use=""required"">
  <xs:annotation>
    <xs:documentation>
      The hash algorithm that generates a digest of data (or thumbprint)
      for digital signatures such as MD5, SHA1, SHA256. This is different than
      the algorithm used in creating the signature inside the certificate.
    </xs:documentation>
  </xs:annotation>
</xs:attribute>

however, the only type value allowed by the schema is sha1 as follows:
<xs:simpleType name=""ThumbprintAlgorithmTypes"">
<xs:restriction base=""xs:string"">
  <xs:enumeration value=""sha1"">
    <xs:annotation>
      <xs:documentation>
        Algorithm currently used in certmgr.msc to display thumbprint.
      </xs:documentation>
    </xs:annotation>
  </xs:enumeration>
</xs:restriction>


Any ideas? Googling sha256 and that  XML node is not getting me far.
","http://msdn.microsoft.com/library/azure/gg465718.aspx
According to the link above:

The only thumbprint algorithm currently supported is sha1. If you are
  not certain which thumbprint algorithm your certificate supports, you
  can use the certmgr.msc snap in with the Microsoft Management Console
  (MMC) to inspect the certificate.

I've also seen this error when copy->paste the thumbprint from certmgr.msc into the .cscfg files.  This is because non-printable chars are actually copied to the clipboard and pasted into the thumbprint attribute.  Removing these chars by putting your cursor just before the first visible character in the hash and backspacing, alleviates the issue.
See:
http://codingfields.com/c-and-windows-azure-lessons-adding-ssl-certs/
http://answers.flyppdevportal.com/categories/azure/azuredevelopment.aspx?ID=8542a464-0d61-4c29-8ac2-3019a39d48a3
","3623","<ssl-certificate><azure-web-roles><sha><sha256>","9","20","2","2015-06-09 15:13:33","23187447","2","1","300685","","2014-03-12 17:03:21","2014-03-12 16:49:41",""
"22358406","Can Azure Cloud service use a sha256 certificate","We need to update our Azure Cloud service with a brand new cert.
The one I have been given specifies sha256 as the signature hash algorithm.
We previously had one with sha1.
When I tried to update and package of the Azure deployment the error I get states that the thumprint is not valid.

Error 8   The XML specification is not valid: The 'thumbprint' attribute is invalid - The value '‎‎REDACTED' is invalid according to its datatype 'http://schemas.microsoft.com/ServiceHosting/2008/10/ServiceConfiguration:ThumbprintType' - The Pattern constraint failed.

In the ServiceConfiguration.Cloud.cscfg file, the XML looks like this:
<Certificates>
  <Certificate name=""cert"" thumbprint=""REDACTED"" thumbprintAlgorithm=""sha1"" />
</Certificates>

with the thumprint attribute squiggly lined as the error above.
I've tried thumbprintAlgorithm=256, but this didn't work, presumably not a valid value.
Does it need to be sha1? Can Azure support sha256?
EDIT:
I found the following in the service defintion schema, that indicates sha256 is allowed:
<xs:attribute name=""thumbprintAlgorithm"" type=""ThumbprintAlgorithmTypes"" use=""required"">
  <xs:annotation>
    <xs:documentation>
      The hash algorithm that generates a digest of data (or thumbprint)
      for digital signatures such as MD5, SHA1, SHA256. This is different than
      the algorithm used in creating the signature inside the certificate.
    </xs:documentation>
  </xs:annotation>
</xs:attribute>

however, the only type value allowed by the schema is sha1 as follows:
<xs:simpleType name=""ThumbprintAlgorithmTypes"">
<xs:restriction base=""xs:string"">
  <xs:enumeration value=""sha1"">
    <xs:annotation>
      <xs:documentation>
        Algorithm currently used in certmgr.msc to display thumbprint.
      </xs:documentation>
    </xs:annotation>
  </xs:enumeration>
</xs:restriction>


Any ideas? Googling sha256 and that  XML node is not getting me far.
","Yes, Azure does support certificates that use SHA256.
To clarify, the Azure is looking at the thumbprint algorithm not the  signature hash algorithm in the ServiceConfiguration.Cloud.cscfg.  The thumbprint is the value used to pull the certificate from the certificate store and is unrelated to the Signature Hash Algorithm.
In the ServiceConfiguration.Cloud.cscfg file, the XML looks like this:
<Certificates>
  <Certificate name=""cert"" thumbprint=""REDACTED"" thumbprintAlgorithm=""sha1"" />
</Certificates>

Notice the above XML in the config specifies the thumbprint algorithm, which is SHA1 even in the case of your certificate that uses SHA256 for Signature Hash Algorithm, if your thumbprint was hashed using SHA256, you would have other schema validation problems because the hash is a different length then SHA1.
Here is a good explanation of the topic as it relates to Azure: http://blogs.msdn.com/b/plankytronixx/archive/2015/04/23/confusion-with-azure-cloud-service-sha1-and-sha256-certificates.aspx
","3623","<ssl-certificate><azure-web-roles><sha><sha256>","9","8","2","2015-06-09 15:13:33","23187447","2","1","300685","","2014-03-12 17:03:21","2014-03-12 16:49:41",""
"37821492","Enable AES and SHA256 algorithms in IPSEC on Windows","I'm setting up IPSec on Windows 2012 R2 using the wizards found at gpedit.msc (Local Computer Policy, Security Settings, IP Security Policies...). When modifying the security method and clicking on custom, I am expecting to see more algorithms than just DES/3DES/Sha1/MD5. Specifically, I'm expected to see AES256, Sha256, etc..
As per the screenshot, I am only seeing the weaker algorithms. I've confirmed on different OS as well (Windows 10). What am I missing..? How do I get the other algorithms to show up, or why are they not needed?
Local security policy IPSec settings
","You can customize the IPsec settings by going to the 'Windows Firewall with Advanced Security' MMC, right click on the root and select Properties.  Then select the 'IPsec Settings' tab and click 'Customize' next to 'IPsec defaults'.  There you can change the Integrity and Encryption algorithms, and even the Key Exchange algorithm if you want.  These can also be set via Group Policy as well.
https://technet.microsoft.com/en-us/library/cc730833(v=ws.11).aspx
","3595","<aes><sha><ipsec>","2","2","1","2017-05-05 22:26:52","","0","","","","","2016-06-14 20:27:01",""
"37484163","C# - Is it possible to Sign hash using RSA SHA512?","I have created a selfsign certificate using OpenSSL as follows:
openssl req -x509 -sha512 -new keyrsa:2048 -keyout key2.pem -out cert2.pem -days 100
openssl pkcs12 -export -out pkcs12_cert_test2.pfx -inkey key2.pem -in cert2.pem
I have installed pkcs12_cert_test2.pfx on Windows and the certificate sign algorithm value is sha512RSA
Then, I have coded the following in C# .NET 4.0:
public static bool DSHandler(string operation, string path, string devicePath)
{
    bool result = false;
        CryptoConfig.AddAlgorithm(typeof(USBSaferAppEFB.RsaPkCs1Sha512SignatureDescription),
            ""http://www.w3.org/2001/04/xmldsig-more#rsa-sha512"");
        string password = ""xxxx"";
        bool validSignature = false;
        byte[] hashchain = generateHash(path);
        string digSignFile = Utils.RegVarValue(DIGSIGNFILE);
        string subjectDN = Utils.RegVarValue(SUBJECTDN);

        if (operation == ""sign"")
        {
            byte[] signature = SignFromContainer(hashchain, subjectDN);
            if (signature != null)
            {
                string signaturestring = Convert.ToBase64String(signature);

                File.WriteAllBytes(devicePath + digSignFile, signature);
                result = true;
            }
            else
                result = false;
        }
}

static byte[] SignFromContainer(byte[] hashchain, string certSubject)
{
    try
    {
        X509Store my = new X509Store(StoreName.My, StoreLocation.CurrentUser);
        my.Open(OpenFlags.ReadOnly);
        RSACryptoServiceProvider csp = null;
        foreach (X509Certificate2 cert in my.Certificates)
        {
            if (cert.Subject.Contains(certSubject))
            {
                // We found it.
                // Get its associated CSP and private key
                csp = (RSACryptoServiceProvider)cert.PrivateKey;
            }
        }

        if (csp == null)
        {
            return null;
        }

        byte[] myHash = { 59,4,248,102,77,97,142,201,
        210,12,224,93,25,41,100,197,
        210,12,224,93};

        // Sign the hash
        return csp.SignHash(hashchain, CryptoConfig.MapNameToOID(""SHA-512""));
    }
    catch (Exception e)
    {
        log.Logger(""Exception: ""+e.Message, ""debug"");
        log.Logger(e.StackTrace, ""debug"");
        return null;
    }
}

Using solutions from some articles and answers, I have RsaPkCs1Sha512SignatureDescription class where I try to implement and register the signature description:
public class RsaPkCs1Sha512SignatureDescription : SignatureDescription
{
    public RsaPkCs1Sha512SignatureDescription()
    {
        KeyAlgorithm = typeof(RSACryptoServiceProvider).FullName;
        DigestAlgorithm = typeof(SHA512Managed).FullName;
        FormatterAlgorithm = typeof(RSAPKCS1SignatureFormatter).FullName;
        DeformatterAlgorithm = typeof(RSAPKCS1SignatureDeformatter).FullName;
    }

    public override AsymmetricSignatureDeformatter CreateDeformatter(AsymmetricAlgorithm key)
    {
        var sigProcessor = (AsymmetricSignatureDeformatter)CryptoConfig.CreateFromName(DeformatterAlgorithm);
        sigProcessor.SetKey(key);
        sigProcessor.SetHashAlgorithm(""SHA-512"");
        return sigProcessor;
    }

    public override AsymmetricSignatureFormatter CreateFormatter(AsymmetricAlgorithm key)
    {
        var sigProcessor =
            (AsymmetricSignatureFormatter)CryptoConfig.CreateFromName(FormatterAlgorithm);
        sigProcessor.SetKey(key);
        sigProcessor.SetHashAlgorithm(""SHA-512"");
        return sigProcessor;
    }
}

I have verified that hash is 64 bytes long and it returns a CryptographicException: Bad Hash. But if I use myHash var (20 bytes long), although algorithm specified in SignHash is SHA512, it works, and sign the hash using SHA1 algorithm.
Also, if I print csp.SignatureAlgorithm, its value is http://www.w3.org/2000/09/xmldsig#rsa-sha1. Why is signature algorithm equals to http://www.w3.org/2000/09/xmldsig#rsa-sha1 if the detail of the installed certificate shows sha512RSA as sign algorithm? Could be this point the real problem? If so, how could I create the certificate properly? Thanks in advance!
","Ok. It is not necessary to implement RsaPkCs1Sha512SignatureDescription class or something similiar but to specify the right CSP to allow CryptoAPI to use SHA256 or SHA512: ""Microsoft Enhanced RSA and AES Cryptographic Provider"", type 24.
We only need to put CSP type as CspParameter and export/import key info:
    byte[] privateKeyBlob;
    CspParameters cp = new CspParameters(24);
    RSACryptoServiceProvider csp = (RSACryptoServiceProvider)cert.PrivateKey;
    privateKeyBlob = csp.ExportCspBlob(true);
    csp = new RSACryptoServiceProvider(cp);
    csp.ImportCspBlob(privateKeyBlob); 

    // Sign the hash
    return csp.SignHash(hashchain, CryptoConfig.MapNameToOID(""SHA-512""));

","3578","<c#><hash><.net-4.0><sha>","2","0","2","2016-06-30 21:43:16","37584625","0","1","4416750","","2016-05-27 13:35:37","2016-05-27 12:57:17",""
"37484163","C# - Is it possible to Sign hash using RSA SHA512?","I have created a selfsign certificate using OpenSSL as follows:
openssl req -x509 -sha512 -new keyrsa:2048 -keyout key2.pem -out cert2.pem -days 100
openssl pkcs12 -export -out pkcs12_cert_test2.pfx -inkey key2.pem -in cert2.pem
I have installed pkcs12_cert_test2.pfx on Windows and the certificate sign algorithm value is sha512RSA
Then, I have coded the following in C# .NET 4.0:
public static bool DSHandler(string operation, string path, string devicePath)
{
    bool result = false;
        CryptoConfig.AddAlgorithm(typeof(USBSaferAppEFB.RsaPkCs1Sha512SignatureDescription),
            ""http://www.w3.org/2001/04/xmldsig-more#rsa-sha512"");
        string password = ""xxxx"";
        bool validSignature = false;
        byte[] hashchain = generateHash(path);
        string digSignFile = Utils.RegVarValue(DIGSIGNFILE);
        string subjectDN = Utils.RegVarValue(SUBJECTDN);

        if (operation == ""sign"")
        {
            byte[] signature = SignFromContainer(hashchain, subjectDN);
            if (signature != null)
            {
                string signaturestring = Convert.ToBase64String(signature);

                File.WriteAllBytes(devicePath + digSignFile, signature);
                result = true;
            }
            else
                result = false;
        }
}

static byte[] SignFromContainer(byte[] hashchain, string certSubject)
{
    try
    {
        X509Store my = new X509Store(StoreName.My, StoreLocation.CurrentUser);
        my.Open(OpenFlags.ReadOnly);
        RSACryptoServiceProvider csp = null;
        foreach (X509Certificate2 cert in my.Certificates)
        {
            if (cert.Subject.Contains(certSubject))
            {
                // We found it.
                // Get its associated CSP and private key
                csp = (RSACryptoServiceProvider)cert.PrivateKey;
            }
        }

        if (csp == null)
        {
            return null;
        }

        byte[] myHash = { 59,4,248,102,77,97,142,201,
        210,12,224,93,25,41,100,197,
        210,12,224,93};

        // Sign the hash
        return csp.SignHash(hashchain, CryptoConfig.MapNameToOID(""SHA-512""));
    }
    catch (Exception e)
    {
        log.Logger(""Exception: ""+e.Message, ""debug"");
        log.Logger(e.StackTrace, ""debug"");
        return null;
    }
}

Using solutions from some articles and answers, I have RsaPkCs1Sha512SignatureDescription class where I try to implement and register the signature description:
public class RsaPkCs1Sha512SignatureDescription : SignatureDescription
{
    public RsaPkCs1Sha512SignatureDescription()
    {
        KeyAlgorithm = typeof(RSACryptoServiceProvider).FullName;
        DigestAlgorithm = typeof(SHA512Managed).FullName;
        FormatterAlgorithm = typeof(RSAPKCS1SignatureFormatter).FullName;
        DeformatterAlgorithm = typeof(RSAPKCS1SignatureDeformatter).FullName;
    }

    public override AsymmetricSignatureDeformatter CreateDeformatter(AsymmetricAlgorithm key)
    {
        var sigProcessor = (AsymmetricSignatureDeformatter)CryptoConfig.CreateFromName(DeformatterAlgorithm);
        sigProcessor.SetKey(key);
        sigProcessor.SetHashAlgorithm(""SHA-512"");
        return sigProcessor;
    }

    public override AsymmetricSignatureFormatter CreateFormatter(AsymmetricAlgorithm key)
    {
        var sigProcessor =
            (AsymmetricSignatureFormatter)CryptoConfig.CreateFromName(FormatterAlgorithm);
        sigProcessor.SetKey(key);
        sigProcessor.SetHashAlgorithm(""SHA-512"");
        return sigProcessor;
    }
}

I have verified that hash is 64 bytes long and it returns a CryptographicException: Bad Hash. But if I use myHash var (20 bytes long), although algorithm specified in SignHash is SHA512, it works, and sign the hash using SHA1 algorithm.
Also, if I print csp.SignatureAlgorithm, its value is http://www.w3.org/2000/09/xmldsig#rsa-sha1. Why is signature algorithm equals to http://www.w3.org/2000/09/xmldsig#rsa-sha1 if the detail of the installed certificate shows sha512RSA as sign algorithm? Could be this point the real problem? If so, how could I create the certificate properly? Thanks in advance!
","This process has been simplified in .NET 4.6:
byte[] signature;

using (RSA rsa = cert.GetRSAPrivateKey())
{
    signature = rsa.SignHash(hash, HashAlgorithmName.SHA512, RSASignaturePadding.Pkcs1);
}

Note that the .NET 4.6 RSA type no longer requires casting to RSACryptoServiceProvider, and if you use GetRSAPrivateKey() (instead of the PrivateKey property) the returned object is likely to handle SHA-512 signature generation.  GetRSAPrivateKey also returns a unique object each time, so you should Dispose it appropriately. 
","3578","<c#><hash><.net-4.0><sha>","2","1","2","2016-06-30 21:43:16","37584625","0","1","4416750","","2016-05-27 13:35:37","2016-05-27 12:57:17",""
"26969469","Cannot find type System.Security.Cryptography.SHA256 on Windows Phone 8.1","I'want to use SHA 256 encryption on windows phone 8.1 c# xaml.
But i am getting the following error:
Cannot find type System.Security.Cryptography.HashAlgorithm in module mscorlib.dll
And indeed System.Security.Cryptography is not available on Windows Phone (or windows 8 store).
Windows.Security.Cryptography however is available, but I couldn't find this class there as well.
What i need to use SHA 256 encryption ? Is thereany dll for that ?
Thanks
","It's a bit more difficult if you're doing Universal App.  But to get you started
using Windows.Security.Cryptography;
using Windows.Security.Cryptography.Core;

HashAlgorithmProvider hap = HashAlgorithmProvider.OpenAlgorithm(HashAlgorithmNames.Sha256);   
CryptographicHash ch = hap.CreateHash();            

// read in bytes from file then append with ch.Append(data)           

Windows.Storage.Streams.IBuffer b_hash = ch.GetValueAndReset();       // hash it
string hash_string = CryptographicBuffer.EncodeToHexString(b_hash);   // encode it to a hex string for easy reading


You have to create a HashAlgorithmProvider and provided it with the HashAlgorithm you want to use 
see HashAlgorithmNames. namespace for all supported Hashes
Then you create a CryptographicHash from the above.
Then you add in bytes into the CryptographicHash using .Append(data)
Then you compute the hash.
Then you can encode it to a hex string if you like.

Shameless Screenshot of my Hashing App :)
Click Here for Fullsize Image

","3556","<c#><encryption><windows-phone-8.1><windows-8.1><sha>","2","3","1","2014-11-17 10:31:03","26970619","0","1","","","","2014-11-17 09:31:23",""
"19962424","Probability of collision with truncated SHA-256 hash","I have a database-driven web application where the primary keys of all data rows are obfuscated as follows: SHA256(content type + primary key + secret), truncated to the first 8 characters. The content type is a simple word, e.g. ""post"" or ""message"" and the secret is a 20-30 char ASCII constant. The result is stored in a separate indexed column for fast DB lookup.
How do I calculate the probability of a hash collision in this scenario? I am not a mathematician at all, but a friend claimed that due to the Birthday Paradox the collision probability would be ~1% for 10,000 rows with an 8-char truncation. Is there any truth to this claim?
","Yes, there is a collision probability & it's probably somewhat too high. The exact probability depends on what ""8 characters"" means.
Does ""8 characters"" mean:

A) You store 8 hex characters of the hash?  That would store 32 bits.
B) You store 8 characters of BASE-64? That would store 48 bits.
C) You store 8 bytes, encoded in some single-byte charset/ or hacked in some broken way into a character encoding?  That would store 56-64 bits, but if you don't do encoding right you'll encounter character conversion problems.
D) You store 8 bytes, as bytes? That genuinely stores 64 bits of the hash.

Storing binary data as either A) hex or D) binary bytes, would be my preferred options. But I'd definitely recommend either reconsidering your ""key obfuscation"" scheme or significantly expanding the stored key-size to reduce the (currently excessive) probability of key collision.
From Wikipedia:  http://en.wikipedia.org/wiki/Birthday_problem#Cast_as_a_collision_problem
The birthday problem in this more generic sense applies to hash functions: the expected number of N-bit hashes that can be generated before getting a collision is not 2^N, but rather only 2^(N/2).
Since in the most conservative above understanding of your design (reading it as A, 8 chars of hex == 32 bits) your scheme would be expected to suffer collisions if it stored on the scale of ~64,000 rows. I would consider such an outcome unacceptable for all serious, or even toy, systems.
Transaction tables may have volumes, allowing growth for the business, from 1000 - 100,000 transactions/day (or more). Systems should be designed to function 100 years (36500 days), with a 10x growth factor built in, so.. 
For your keying mechanism to be genuinely robust & professionally useful, you would need to be able to scale it up to potentially handle ~36 billion (2^35) rows without collision. That would imply 70+ bits of hash.
The source-control system Git, for example, stores 160 bits of SHA-1 hash (40 chars of hex == 20 bytes or 160 bits). Collisions would not be expected to be probable with < less than 2^80 different file revisions stored.

A possibility better design might be, rather than hashing & pseudo-randomizing the key entirely & hoping (against hope) to avoid collisions, to prepend/ append/ fold-in 8-10 bits of a hash into the key.
This would generates a larger key, containing all the uniqueness of the original key plus 8-10 bits of verification.  Attempts to access keys would then be verified, and more than 3 invalid requests would be treated as an attempt to violate security by ""probing"" the keyspace & would trigger semi-permanent lockout. 
The only major costs here, would be a modest reduction in the size of the available keyspace for a given int-size.  32-bit int to/from the browser would have 8-10 bits dedicated to security, thus leaving 22-24 for the actual key. So you'd use 64-bit ints where that was not sufficient.
","3536","<math><hash><probability><sha><sha256>","2","3","1","2014-02-16 00:33:33","","1","1","","","","2013-11-13 19:15:54",""
"13672414","Including local vs. remote javascript libraries","I'm using jsSHA 1.3.1 which I downloaded here and used in learning project on my localhost.  It gives a slightly different result than the copy I got by referring to the remote as follows:
<script src=""https://raw.github.com/Caligatio/jsSHA/master/src/sha1.js""></script>

The remote copy works well for me, now, thanks to this excellent answer by @Andreas here.
But it leaves me with a new question:  what's the rationale for including a copy vs. referring to a remote js library?  Is it like 'vendoring' the library, insulating my app from subsequent changes in the code?
","It comes down to whether or not the developer is happy with you 'hotlinking' to the JS library.  
Regarding the specific URL that you have posted, 
https://raw.github.com/Caligatio/jsSHA/master/src/sha1.js

I would be wary of referencing that.  It is the master branch of their source code, they may include breaking changes at any time.  They may even decide to move and restructure their codebase, in which case your application will break as the URL above will lead to a 404.
The better solution is indeed referencing a specific version of the library.  This ensures that your application behaves, and will continue to behave, in an expected and known manner as far as the jsSHA library is concerned.  
There are a few ways to do this.  You can reference a specific, fixed URL that explicitly specifies a version
http://crypto-js.googlecode.com/svn/tags/3.0.2/build/rollups/hmac-sha1.js

Because its tagged (3.0.2), you are a bit safer, but you are still referencing source control.  This should really be done via a CDN if one exists.  I do not believe that the googlecode.com URL is a CDN URL (I could be wrong).  It is of course a common practice to use a proper CDN or external link to reference a JS library and you can see an example of this on the JQuery page, but this is often done as part of page performance enhancements.  A CDN is optimized for a user's geographic location so a reference to any content on a CDN (as opposed to the main server) will be served faster.  It has user experience benefits.  It's useful if page load times are important for your userbase.
The alternative, and the safest way, is to keep a copy of the JS library in your own source control and reference it using your own infrastructure.  It's with you, it is a fixed version and there are no surprises if something changes, such as restructuring, sites going down, and so on. 
","3535","<javascript><sha>","5","3","2","2014-03-06 17:05:21","13673544","4","","-1","","2017-05-23 12:34:15","2012-12-02 18:34:58",""
"13672414","Including local vs. remote javascript libraries","I'm using jsSHA 1.3.1 which I downloaded here and used in learning project on my localhost.  It gives a slightly different result than the copy I got by referring to the remote as follows:
<script src=""https://raw.github.com/Caligatio/jsSHA/master/src/sha1.js""></script>

The remote copy works well for me, now, thanks to this excellent answer by @Andreas here.
But it leaves me with a new question:  what's the rationale for including a copy vs. referring to a remote js library?  Is it like 'vendoring' the library, insulating my app from subsequent changes in the code?
","If your application is available on the WWW, you should consider using a well-known external URL. 

<script type=""text/javascript""
   src=""http://ajax.googleapis.com/ajax/libs/jquery/1.8.0/jquery.min.js""
</script> 

This example below gets the minified version of jquery 1.8.0 from google's servers.


The benefit obtained by this method comes from caching:  

You do not want the first visit a potential user makes to your website to be slow and disappointing. If your first-time visitor has visited my site which uses this URL for jQuery, her browser will probably have cached it so it will not need to load it.
Using immutable versioned resources (jquery/1.8.0 instead of something like jquery/current) both helps developers not have to track down breaking changes in their production code and ensures that these resources can be cached.
If the resource has to be downloaded and the URL is hosted on a CDN you are likely to get lower latency as the resource will probably be loaded from a server closer to the user's network.  The URL in the example is hosted on Google Hosted Libraries which is a CDN.  See https://developers.google.com/speed/libraries/devguide for more information.

Another argument often seen in such discussions is that when the resource has to be downloaded, you will be able to get better client-side resource loading parallelism if the resource is not on your own servers together with 10 more resources your page includes because browsers limit themselves to loading up to a small number (6 or so in modern browsers) of resources form the same server.  
If your internet-wide web application is security-critical, you must keep control of as much of it as you can securely manage (and static immutable or nearly immutable resources are relatively easy to manage securely). 

If my bank's e-banking application which runs over HTTPS were to rely on google's HTTP servers for serving, it would both be granting Google authority over the client-side part of its e-banking application and eliminating practically all benefits of the HTTPS connection to its servers. There are very few things that a rogue client script cannot do...



If your application is accessed locally, you should probably include it in your application for both performance (access to your servers should be faster than accessing some remote server both in terms of latency and in terms of bandwidth) and reliability reasons (you are not relying on the external internet connection and on the remote servers being up and running).

","3535","<javascript><sha>","5","9","2","2014-03-06 17:05:21","13673544","4","","-1","","2017-05-23 12:34:15","2012-12-02 18:34:58",""
"25536341","Spring LDAP - How to manage encoded (SHA) password","I want to implement a basic user repository using Spring LDAP and it's concept of Object-Directory Mapping (ODM).
My User class is pretty straightforward :
@Entry(objectClasses = { ""inetOrgPerson"", ""organizationalPerson"", ""person"", ""shadowAccount"", ""top"" }, base = ""ou=people"")
public class User {
    [...]

    @Id
    private Name dn;

    @Attribute(name = ""uid"")
    @DnAttribute(value = ""uid"")
    private String username;

    @Attribute(name = ""cn"")
    private String fullName;

    @Attribute(name = ""givenName"")
    private String firstName;

    @Attribute(name = ""sn"")
    private String lastName;

    @Attribute(name = ""o"")
    private String organization;

    @Attribute(name = ""userPassword"")
    private String password;

    // Getters & Setters
    [...]
}

And basic methods of my repository :
public User findByUid(String uid) {
    return ldapTemplate.findOne(query().where(""uid"").is(uid), User.class);
}

public void update(User user) {
    ldapTemplate.update(user);
}

Everything works fine except for the password attribute. For example, if I change only the user first name, the password is also changed.
I want to know how to deal with an encoded password (using the SHA - Secure Hashing Algorithm).
I don't see any annotations allowing to specify the encoding method.
Do we have to deal with it manually?
","Short version
@Attribute(name = ""userPassword"", type = Type.BINARY)
private byte[] password;

is the correct definition of your password attribute. This is because LDAP stores the password as binary too.
To provide a convenient way of interaction, you should modify the setter for password
public void setPassword(String password) {
    this.password = password.getBytes(Charset.forName(""UTF-8""));
}

Long version
The problem is your definition of userPassword. It is a java.lang.String. And the Spring LDAP ODM Attribute annotation defaults to Type.STRING
Your LDAP gets the string as byte array and checks if it has a proper prefix (in our case {SSHA}). If there is no prefix present it hashes the given string with its configured hash algorithm and stores it in the attribute as binary. Here lays the root cause. Your attribute definition differs. LDAP has a binary, you have a string.
When you read the entry again, to modify the first name, the password attribute gets read too. But, as it should be a string in the object, Spring converts the binary array to a string. This conversion is wrong, as it creates a string.
e.g.

you put test in the password field of your entity object.
Spring takes the string and sends it unmodified to the LDAP server.
the server hashes the string and saves it as {SSHA}H97JD...
you read the entry again
spring gets a byte[] containing the ascii numbers representing the stored value
[123, 83, 83, 72, 65, 125, 72, 57, 55, 74, 68, ...]
a conversion to a string results in the following:
123,83,83,72,65,125,72,57,55,74,68,...
spring sets this string in your entity as password value
you modify the first name
spring takes the password string again and sends it as is to the server
the servers prefix check indicates an unhashed password and applies the hash algorithm again on the string, because 123,83, starts not with {SSHA}
the server changes the password again.

","3482","<spring><ldap><sha><spring-ldap><change-password>","2","7","1","2017-07-20 10:39:52","","3","","1274068","","2014-08-28 15:35:59","2014-08-27 20:25:51",""
"14392140","hash_file is computing same value for different files","
Possible Duplicate:
What is a good way to check if an image is unique using PHP? 

A user uploads an image (png, jpg, gif) via a form. I'm am using hash_file to check against the db to see if the image already has been uploaded but I am now noticing that it is not unique.
Is this a bug or should I be using something else to generate a unique ID for the files?
I guess the workaround would be md5(filesize($file) . $hash)?
UPDATE
From the logs... first set is using md5_file, second from hash_file with sha256...
HASH: SELECT SiteID FROM tbl_image_hashes WHERE SiteID = 0 AND Hash = 'd41d8cd98f00b204e9800998ecf8427e'
HASH: SELECT SiteID FROM tbl_image_hashes WHERE SiteID = 0 AND Hash = 'd41d8cd98f00b204e9800998ecf8427e'

HASH: SELECT SiteID FROM tbl_image_hashes WHERE SiteID = 0 AND Hash = 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'
HASH: SELECT SiteID FROM tbl_image_hashes WHERE SiteID = 0 AND Hash = 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'
HASH: SELECT SiteID FROM tbl_image_hashes WHERE SiteID = 0 AND Hash = 'e3b0c44298fc1c
20130117T231016: booru.pixymedia.us/utilities/batchExistingUpload.php
HASH: SELECT SiteID FROM tbl_image_hashes WHERE SiteID = 0 AND Hash = 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'
HASH: SELECT SiteID FROM tbl_image_hashes WHERE SiteID = 0 AND Hash = 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'
HASH: SELECT SiteID FROM tbl_image_hashes WHERE SiteID = 0 AND Hash = 'e3b0c44298fc1c

And no the SQL is right... I've uploaded 3,000 files successfully with this function...
This is the hash generating code:
$fileHash = hash_file(""sha256"",$FILE[""tmp_name""]);

$FILE is basically $_FILE, it's just what the function parameter is named as
","The problem with working with the image data is that the same image can be represented in many ways. This is especially true of GIFs, where the colour table can be in any order and the result is the same.
You should probably work out a way to hash the image itself. You could do this by reading the colour of each pixel and generating some kind of hash from that. Alternatively, you could try using GD to load the image, and then let it ""normalize"" it by having it output the image with imagegd(), and then using that to check uniqueness.
","3455","<php><file-upload><hash><sha>","1","1","3","2013-01-18 07:17:13","14392705","0","","-1","user166390","2017-05-23 12:00:49","2013-01-18 03:57:10","2013-01-18 09:14:22"
"14392140","hash_file is computing same value for different files","
Possible Duplicate:
What is a good way to check if an image is unique using PHP? 

A user uploads an image (png, jpg, gif) via a form. I'm am using hash_file to check against the db to see if the image already has been uploaded but I am now noticing that it is not unique.
Is this a bug or should I be using something else to generate a unique ID for the files?
I guess the workaround would be md5(filesize($file) . $hash)?
UPDATE
From the logs... first set is using md5_file, second from hash_file with sha256...
HASH: SELECT SiteID FROM tbl_image_hashes WHERE SiteID = 0 AND Hash = 'd41d8cd98f00b204e9800998ecf8427e'
HASH: SELECT SiteID FROM tbl_image_hashes WHERE SiteID = 0 AND Hash = 'd41d8cd98f00b204e9800998ecf8427e'

HASH: SELECT SiteID FROM tbl_image_hashes WHERE SiteID = 0 AND Hash = 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'
HASH: SELECT SiteID FROM tbl_image_hashes WHERE SiteID = 0 AND Hash = 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'
HASH: SELECT SiteID FROM tbl_image_hashes WHERE SiteID = 0 AND Hash = 'e3b0c44298fc1c
20130117T231016: booru.pixymedia.us/utilities/batchExistingUpload.php
HASH: SELECT SiteID FROM tbl_image_hashes WHERE SiteID = 0 AND Hash = 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'
HASH: SELECT SiteID FROM tbl_image_hashes WHERE SiteID = 0 AND Hash = 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'
HASH: SELECT SiteID FROM tbl_image_hashes WHERE SiteID = 0 AND Hash = 'e3b0c44298fc1c

And no the SQL is right... I've uploaded 3,000 files successfully with this function...
This is the hash generating code:
$fileHash = hash_file(""sha256"",$FILE[""tmp_name""]);

$FILE is basically $_FILE, it's just what the function parameter is named as
","If you are getting the same hash value for different files, then consider the possibilities:

The hash is being generated incorrectly (=> check the input! <=); or,
The hash used is not of sufficient quality (SHA-x is sufficient); or,
The hash implementation is broken (doubtful, and not the case here); or,
They files really do have the same content (determined to be false)

The odds of accidental SHA-x collisions are extremely small; here is a probability table, which doesn't do justice indicating exactly how unlikely this is. This article on 160-bit hashes has a more comparable scale at the bottom .. there is a higher chance of being hit by a meteor!
In any case, #1 is indeed the culprit.
Hint: hash(""sha256"", """")
","3455","<php><file-upload><hash><sha>","1","0","3","2013-01-18 07:17:13","14392705","0","","-1","user166390","2017-05-23 12:00:49","2013-01-18 03:57:10","2013-01-18 09:14:22"
"14392140","hash_file is computing same value for different files","
Possible Duplicate:
What is a good way to check if an image is unique using PHP? 

A user uploads an image (png, jpg, gif) via a form. I'm am using hash_file to check against the db to see if the image already has been uploaded but I am now noticing that it is not unique.
Is this a bug or should I be using something else to generate a unique ID for the files?
I guess the workaround would be md5(filesize($file) . $hash)?
UPDATE
From the logs... first set is using md5_file, second from hash_file with sha256...
HASH: SELECT SiteID FROM tbl_image_hashes WHERE SiteID = 0 AND Hash = 'd41d8cd98f00b204e9800998ecf8427e'
HASH: SELECT SiteID FROM tbl_image_hashes WHERE SiteID = 0 AND Hash = 'd41d8cd98f00b204e9800998ecf8427e'

HASH: SELECT SiteID FROM tbl_image_hashes WHERE SiteID = 0 AND Hash = 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'
HASH: SELECT SiteID FROM tbl_image_hashes WHERE SiteID = 0 AND Hash = 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'
HASH: SELECT SiteID FROM tbl_image_hashes WHERE SiteID = 0 AND Hash = 'e3b0c44298fc1c
20130117T231016: booru.pixymedia.us/utilities/batchExistingUpload.php
HASH: SELECT SiteID FROM tbl_image_hashes WHERE SiteID = 0 AND Hash = 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'
HASH: SELECT SiteID FROM tbl_image_hashes WHERE SiteID = 0 AND Hash = 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'
HASH: SELECT SiteID FROM tbl_image_hashes WHERE SiteID = 0 AND Hash = 'e3b0c44298fc1c

And no the SQL is right... I've uploaded 3,000 files successfully with this function...
This is the hash generating code:
$fileHash = hash_file(""sha256"",$FILE[""tmp_name""]);

$FILE is basically $_FILE, it's just what the function parameter is named as
","d41d...427e and e3b0...b855 are the MD5 and SHA256 sums of the empty string (e.g, md5("""") and sha256("""")). The fact that you've got these in your database indicates that there is something wrong with your code -- you may be hashing the wrong filename at some point.
","3455","<php><file-upload><hash><sha>","1","4","3","2013-01-18 07:17:13","14392705","0","","-1","user166390","2017-05-23 12:00:49","2013-01-18 03:57:10","2013-01-18 09:14:22"
"25802970","How to use SHA-256 with Android","I need to encrypt my Android API Call. I need to use the SHA-256.
I have tried to you this example from jokecamp.com but it does not seem to work with Android I also imported the Jar file from commons.apache.org
Here is my code:
package com.example.api_tester;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;

import org.apache.commons.codec.binary.Hex;

import android.os.Bundle;
import android.support.v7.app.ActionBarActivity;
import android.util.Log;
import android.view.Window;
import android.widget.TextView;

public class MainActivity extends ActionBarActivity {

    public static final String TAG = MainActivity.class.getSimpleName();
    APICall api;
    ApiSecurity hash_security;

    TextView url;
    TextView api_result;
    TextView url_call;
    private String hardCodedUrl = "" MY API URL"";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        // Hide Action Bar min target apit set to 11
        getWindow().requestFeature(Window.FEATURE_ACTION_BAR);
        getActionBar().hide();
        setContentView(R.layout.activity_main);
        Log.i(TAG, ""onCreate"");

        ...

        test();

    }//end - onCreate




        private void test(){           
            try {
                String secret = ""acbdef"";
                String message = ""api_key=abcd123&access_token=123abc"";

                Mac sha256_HMAC = Mac.getInstance(""HmacSHA256"");
                SecretKeySpec secret_key = new SecretKeySpec(secret.getBytes(), ""HmacSHA256"");
                sha256_HMAC.init(secret_key);            

                String hash = Hex.encodeHexString(sha256_HMAC.doFinal(message.getBytes()));
                Log.e(TAG, ""Result=> "" + hash);
            }
            catch (Exception e) {
                Log.e(TAG, ""Error=> "" + e);
            }
        }//end test

    ...

And here is the Eror I am getting:
09-12 13:39:42.676: E/AndroidRuntime(13531): java.lang.NoSuchMethodError: org.apache.commons.codec.binary.Hex.encodeHexString

Thanks guys.
","You are using Apache Commons Codec
String sha256hex = org.apache.commons.codec.digest.DigestUtils.sha256Hex(stringText);

For java do this
MessageDigest digest = MessageDigest.getInstance(""SHA-256"");
byte[] hash = digest.digest(text.getBytes(""UTF-8""));

","3378","<java><android><http><hex><sha>","0","1","2","2014-09-12 07:46:48","","0","4","","","","2014-09-12 07:27:22",""
"25802970","How to use SHA-256 with Android","I need to encrypt my Android API Call. I need to use the SHA-256.
I have tried to you this example from jokecamp.com but it does not seem to work with Android I also imported the Jar file from commons.apache.org
Here is my code:
package com.example.api_tester;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;

import org.apache.commons.codec.binary.Hex;

import android.os.Bundle;
import android.support.v7.app.ActionBarActivity;
import android.util.Log;
import android.view.Window;
import android.widget.TextView;

public class MainActivity extends ActionBarActivity {

    public static final String TAG = MainActivity.class.getSimpleName();
    APICall api;
    ApiSecurity hash_security;

    TextView url;
    TextView api_result;
    TextView url_call;
    private String hardCodedUrl = "" MY API URL"";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        // Hide Action Bar min target apit set to 11
        getWindow().requestFeature(Window.FEATURE_ACTION_BAR);
        getActionBar().hide();
        setContentView(R.layout.activity_main);
        Log.i(TAG, ""onCreate"");

        ...

        test();

    }//end - onCreate




        private void test(){           
            try {
                String secret = ""acbdef"";
                String message = ""api_key=abcd123&access_token=123abc"";

                Mac sha256_HMAC = Mac.getInstance(""HmacSHA256"");
                SecretKeySpec secret_key = new SecretKeySpec(secret.getBytes(), ""HmacSHA256"");
                sha256_HMAC.init(secret_key);            

                String hash = Hex.encodeHexString(sha256_HMAC.doFinal(message.getBytes()));
                Log.e(TAG, ""Result=> "" + hash);
            }
            catch (Exception e) {
                Log.e(TAG, ""Error=> "" + e);
            }
        }//end test

    ...

And here is the Eror I am getting:
09-12 13:39:42.676: E/AndroidRuntime(13531): java.lang.NoSuchMethodError: org.apache.commons.codec.binary.Hex.encodeHexString

Thanks guys.
","Seems you are missing the ""encodeHexString"" method - instead of including the whole jar, use any easy implementation around... for example:
private final static char[] hexArray = ""0123456789abcdef"".toCharArray();

private static String encodeHexString(byte[] bytes) {
    char[] hexChars = new char[bytes.length * 2];
    int v;
    for (int j = 0; j < bytes.length; j++) {
        v = bytes[j] & 0xFF;
        hexChars[j * 2] = hexArray[v >>> 4];
        hexChars[j * 2 + 1] = hexArray[v & 0x0F];
    }
    return new String(hexChars);
}

","3378","<java><android><http><hex><sha>","0","0","2","2014-09-12 07:46:48","","0","4","","","","2014-09-12 07:27:22",""
"44499389","Creating a CSR with a PEM formatted Key","I have run into a CSR generation problem I can't seem to explain and was wondering if someone could either help me with my command, or tell me what I am generating.
I think I am generating CRT Certificates in PEM format, but it seems my key is not in PEM format !?
Here is what I do, and what I get.
I create a CSR with:
openssl req -nodes -new -newkey rsa:2048 -sha256 -out test.csr
This generate 2 files:
privkey.pem and test.csr 
Now when I try and update some servers, they complain that my Private key is not in PEM format. nginx and apache seem happy with my key.
When I then convert the key with:
openssl rsa -in privkey.pem -out privkey.rsa.pem
It works !?! 
vimdiff shows me the difference in the files visually, and one can see that not only is the heading different, but the content is also been changed (after the first 4 characters)
And thus my question
is the key created in DER - PEM format, even though I specify not to use DER in the create line ?
","The only way I have found to generate a key in RSA format is to first create the keyfile with 
openssl genrsa -out ./yourkeyfile.key 2048

and then use the file to create a CSR with 
openssl req -new -sha256 -key yourkeyfile.key -out yourcsrfile.csr

If you use the one line command the keyfile is created in DER format.
openssl req -new -sha256 -newkey rsa:2048 -nodes -keyout yourkeyfile.key -out yourcsrfile.csr

","3373","<openssl><rsa><sha><pem><der>","0","1","1","2017-06-23 13:11:29","44722325","2","","608639","","2017-06-12 17:44:27","2017-06-12 12:22:49",""
"36027187","Why does my Base64 encoded hash only contain 28 characters?","The inverse question exists with no answer and a comment that I don't understand.
I am attempting to create a Base64 encoded HMAC-SHA1 signature for a pseudo OAuth authentication header for an API. I found a support document (requires authenticated access) that takes you through the evolution of creating the signature. I'm able to create the same data up until the final step which is to Base64 encode the hash.
The support document states that the HMAC-SHA1 signature is:
cb5acd2d3ef689a8fbec4d06c576371834689673

And I get:
CB5ACD2D3EF689A8FBEC4D06C576371834689673

The support document then states 

From the hex result string in step 3, encode the value using Base64

and provides the following Base64 encoded result (58 characters):
Y2I1YWNkMmQzZWY2ODlhOGZiZWM0ZDA2YzU3NjM3MTgzNDY4OTY3Mw==

When I use Convert.ToBase64String() to convert my signature I get (28 characters):
y1rNLT72iaj77E0GxXY3GDRolnM=

I'm stumped, I don't know if the support document is incorrect or if I'm doing something wrong. The fact that I'm generating a string that is 28 characters and the example is 56 is too interesting to ignore.
The comment in the aforementioned semi-duplicate question also stumps me. I don't see how the string ""MDY"" translates to any ascii or unicode digits that make sense to me - I don't understand how the comment author came to that conclusion.

The hex value is being encoded as text (""062..."" == 0x30, 0x36, 0x32,
  ...) rather than as the large number it represents.

","Your signature is a 20 byte (160 bit) long byte array.
So it's basically a very long number.
When you show it, you are converting it into a hex string, so each byte is shown as 2 chars, so you get a 40 chars long string.
Base64 encoding gives you 4 chars every 3 bytes of payload to encode.
If you encode in base64 20 bytes of binary data you get 26.6 bytes, rounded up to 28 (you round up every 4 bytes).
If you encode your 40 characters long string (320 bits), you get 53,3 characters, again rounded up to 56.
I suppose you're doing the latter, and encoding a string instead of a byte[].
","3337","<c#><base64><encode><sha>","0","2","2","2017-03-31 08:56:24","","1","","-1","","2017-05-23 12:32:28","2016-03-16 05:03:31",""
"36027187","Why does my Base64 encoded hash only contain 28 characters?","The inverse question exists with no answer and a comment that I don't understand.
I am attempting to create a Base64 encoded HMAC-SHA1 signature for a pseudo OAuth authentication header for an API. I found a support document (requires authenticated access) that takes you through the evolution of creating the signature. I'm able to create the same data up until the final step which is to Base64 encode the hash.
The support document states that the HMAC-SHA1 signature is:
cb5acd2d3ef689a8fbec4d06c576371834689673

And I get:
CB5ACD2D3EF689A8FBEC4D06C576371834689673

The support document then states 

From the hex result string in step 3, encode the value using Base64

and provides the following Base64 encoded result (58 characters):
Y2I1YWNkMmQzZWY2ODlhOGZiZWM0ZDA2YzU3NjM3MTgzNDY4OTY3Mw==

When I use Convert.ToBase64String() to convert my signature I get (28 characters):
y1rNLT72iaj77E0GxXY3GDRolnM=

I'm stumped, I don't know if the support document is incorrect or if I'm doing something wrong. The fact that I'm generating a string that is 28 characters and the example is 56 is too interesting to ignore.
The comment in the aforementioned semi-duplicate question also stumps me. I don't see how the string ""MDY"" translates to any ascii or unicode digits that make sense to me - I don't understand how the comment author came to that conclusion.

The hex value is being encoded as text (""062..."" == 0x30, 0x36, 0x32,
  ...) rather than as the large number it represents.

","I came up with the same problem here. You have to convert sha1sum result to a Hex format. For example, when your sha1sum result is ""dfe5ec35f9c9f144d3814821a558bcfa23ab1a58"", the console outputs it in string format. You may use UltraEdit or other text editor, edit it as hex.
enter image description here
And then save it as file.
The right answer ""3+XsNfnJ8UTTgUghpVi8+iOrGlg="" comes out after you base64 encode the file.
Have a try. Hope it helps.
","3337","<c#><base64><encode><sha>","0","0","2","2017-03-31 08:56:24","","1","","-1","","2017-05-23 12:32:28","2016-03-16 05:03:31",""
"18683197","Encrypt password in add user form - Spring security","I've used Spring Security to avoid non user access my app. I have to roles and passwords for this kind of users are encoded using SHA. All is working nice and I'm using the login form actively but I need a form to create users. My problem is that what I write in the password field is interpreted as an SHA encoded password so when I try to sign in with the new user, I can't. How can I solve this? Is there a way to force Spring to encrypt the password that I write in the password field?
","At user authentication time
Spring security's authentication manager should be configured so that it encodes plain text passwords received from the login form using SHA beforehand. 
This is explained in this chapter of Spring Security's documentation, at the paragraph ""Adding a Password Encoder"". It is basically adding this line of configuration : 
<authentication-provider>
    <password-encoder hash=""sha""/>
    ...
</authentication-provider>

At user creation time
Before you store a new user, you should encode ""by yourself"" the password, Spring security does not handle it. 
In your case, you can use the ShaPasswordEncoder.encodePassword(..) method.
This topic was assessed in 
Adding new users in Spring Security
Edit added details after question author's first comment
","3096","<spring-mvc><encryption><spring-security><sha>","1","3","1","2013-09-08 13:00:51","18683550","0","1","","","","2013-09-08 11:35:43",""
"5948870","hmac key and salt length","I'm using hmac sha1 to sign a userid which is passed to a third party service.
The same secret is used for all users and the salt is unique for each user.
token = userid : timestamp+2hours : hmac(userid : timestamp+2hours, salt+secret)
token_hex = hex(hash)

Will hmac work for short strings? userid:timestamp can be for example 12:1304985212
Does the order of salt and secret matters? (salt+secret vs secret+salt)
What should be the shared secret length and what should be the salt length?
Can I use the same secret to also sign messages between the server and the remote service or is it better to generate a separate secret?
Thanks
","You should calculate hmac(salt : userid : timestamp+2hours, secret) and transmit salt : userid : timestamp+2hours : hash.
Purpose of salt here is to make plaintext longer and not repeating, so it better be appended to plaintext, not secret.
If you really want to change secret, do hmac(userid : timestamp+2hours, hash(salt : secret)), it will make one-time secret look more like random number.
","3048","<security><hash><hmac><sha><hmacsha1>","2","2","1","2011-05-10 13:26:16","5950777","0","2","","","","2011-05-10 10:49:11",""
"23639952","When using SHA-256 hashes as a primary key, is it OK to ignore the possibility of collisions?","I have this situation where I have files on the HDD and I want to cache information about them in a database. Information that would otherwise take a long time to parse given that some of these files can run into GBs. 
My first intuition is to use the file path as a unique identifier for a file and I use that as the key (TEXT/VARCHAR) and store the information as value in a database table.
Given that under some file systems (especially in *nix), file paths can be of unlimited length. It seems like a bad idea to use file name as a primary key in a database. Just indexing on a string field is going to be much slower, not to mention memory/space constraints.
I thought, maybe, I generate SHA-256 hash from the full file path (/usr/xxx/1/2/../abc.xyz)  and use this as primary key (fixed width) in my database. Another thought, would be to generate the SHA-256 hash from file contents. However, this can also become quite time consuming. 
My question is - in this scenario, are hash collisions as equally less likely, as the answer provided on this excellent thread.
","To answer your question, you would only be likely have issues with hash collisions if you were to approach 2^128 files in your table. This assumes that all inputs are between 0 .. +INF in length and that the hash algorithm you are using is perfect (SHA-256 is considered perfect in practice but not proven in theory) and that the output size is exactly 256 bits.
If you have under a few billion files, you should be fine.
Now for my recommendation. I would say that you need to tell us more information about your intended use. Your first thought is closer to correct than your hashing approach.
I would use a table like this (T-SQL Syntax for SQL Server):
CREATE TABLE [File]
(
    [Id] BIGINT IDENTITY NOT NULL,
    [Path] CHARACTER VARYING(MAX) NOT NULL

    PRIMARY KEY([Id])
);

CREATE NONCLUSTERED INDEX [File_Path_IX] ON [File]([Path]);

Then, you should let your database take care of indexing and making the searches fast.
If and only if you experience a major performance issue later down the road, demonstrated by profiling, should you consider changing to a hashing approach. The hashing will impose massive computational penalty on your preprocessing and will introduce complicated scenarios such as hash collisions and trying to resolve them if and when they do happen.
","3009","<database-design><hash><sha>","1","0","1","2014-05-13 20:07:41","23640530","4","","-1","","2017-05-23 12:07:34","2014-05-13 19:29:39","2014-05-14 07:27:32"
"11477083","Hashing text with SHA-256 at Windows Forms","String inputPass = textBox2.Text;
byte[] inputBytes = System.Text.Encoding.UTF8.GetBytes(inputPass);
byte[] inputHashedBytes = Sha256.ComputeHash(inputBytes);
String inputHash = Convert.ToBase64String(inputHashedBytes);

I'm getting some strange output:

Q9nXCEhAn7RkIOVgBbBeOd5LiH7FWFtDFJ22TMLSoH8=

By output hash looks like this:

43d9d70828409fb46420e56005b05e38de4b887ec5585b43149db64cc2d2a07f

","Encoding.UTF8.GetString parses bytes as UTF8 codepoints.
The SHA256 hash is an arbitrary 256-bit number and does not correspond to any Unicode text.
You probably want to show the binary value in hexadecimal, by calling BitConverter.ToString().
You can also call Convert.ToBase64String().
","2980","<c#><winforms><utf-8><sha>","2","7","2","2012-07-13 19:39:14","11477252","3","1","1379268","","2012-07-13 19:34:48","2012-07-13 19:27:46",""
"11477083","Hashing text with SHA-256 at Windows Forms","String inputPass = textBox2.Text;
byte[] inputBytes = System.Text.Encoding.UTF8.GetBytes(inputPass);
byte[] inputHashedBytes = Sha256.ComputeHash(inputBytes);
String inputHash = Convert.ToBase64String(inputHashedBytes);

I'm getting some strange output:

Q9nXCEhAn7RkIOVgBbBeOd5LiH7FWFtDFJ22TMLSoH8=

By output hash looks like this:

43d9d70828409fb46420e56005b05e38de4b887ec5585b43149db64cc2d2a07f

","// this is where you get the actual binary hash
byte[] inputHashedBytes = Sha256.ComputeHash(inputBytes);

// but you want it in a string format, similar to a variety of UNIX tools
string result = BitConverter.ToString(inputHashedBytes)
   // this will remove all the dashes in between each two characters
   .Replace(""-"", string.Empty)
   // and make it lowercase
   .ToLower();

","2980","<c#><winforms><utf-8><sha>","2","6","2","2012-07-13 19:39:14","11477252","3","1","1379268","","2012-07-13 19:34:48","2012-07-13 19:27:46",""
"46864606","C++ HMAC-SHA256 implementation with openssl","I am trying to use HMAC-SHA256 using openssl in C++.
I am double-checking my output using a python code which seems to prove that something is wrong... Surprisingly I am able to hash using HMAC-SHA384 and HMAC-SHA512 (still double checking with my python code)
Can someone kindly point me to what I am doing wrong ?
My code : 
static std::vector<unsigned char> hmac_sha256(const std::vector<unsigned char>& data, const std::vector<unsigned char>& key)
{
    unsigned int len = EVP_MAX_MD_SIZE;
    std::vector<unsigned char> digest(len);

    HMAC_CTX ctx;
    HMAC_CTX_init(&ctx);

    HMAC_Init_ex(&ctx, key.data(), key.size(), EVP_sha256(), NULL);
    HMAC_Update(&ctx, data.data(), data.size());
    HMAC_Final(&ctx, digest.data(), &len);

    HMAC_CTX_cleanup(&ctx);

    return digest;
}

My implementation of HMAC-SHA384 and HMAC-SHA512 only differs from the above by respectively changing EVP_sha256() by EVP_sha384() and EVP_sha512()...
Example : message = ""azertyAZERTY"", key = ""vzxgPuegSjRksLnCAu/LElxWRonjVkCoArWzZqliiSEtmlbaCfZaGkrSweWJKQkgQsyrBUpSusAcPcGDfFhWOx=="" (that one should be b64 decoded before being used in my function).
The following python implementation 
import json, hmac, hashlib, time, requests, base64 from requests.auth import AuthBase

message = ""azertyAZERTY""
hmac_key = base64.b64decode(""vzxgPuegSjRksLnCAu/LElxWRonjVkCoArWzZqliiSEtmlbaCfZaGkrSweWJKQkgQsyrBUpSusAcPcGDfFhWOx=="")

signature256 = hmac.new(hmac_key, message, hashlib.sha256)
print('signature 256 : ' + 
signature256.digest().encode('base64').rstrip('\n'))
signature384 = hmac.new(hmac_key, message, hashlib.sha384)
print('signature 384 : ' + 
signature384.digest().encode('base64').rstrip('\n'))
signature512 = hmac.new(hmac_key, message, hashlib.sha512)
print('signature 512 : ' + 
signature512.digest().encode('base64').rstrip('\n'))

returns 
signature 256 : tfnYBB630T/8TemIeNMSSTuY12eJMmel55ZWaRAEq/w=
signature 384 : irWXsFWoNREZddkTRDzPFgyhyiLoIt8uoi0Kpxw4GgYSfSnILXLdQu0HuM5qN4Zb
signature 512 : DU+sAkJnJBqY1QPwJRmwCK/vdACwKfysz+PetdsmvlmgRlK8Ad1tbHsjvRs/By2PR7uWEngXGjocTgqjDGMTFw==

while my c++ implementation
std::string secret = ""vzxgPuegSjRksLnCAu/LElxWRonjVkCoArWzZqliiSEtmlbaCfZaGkrSweWJKQkgQsyrBUpSusAcPcGDfFhWOx=="";

std::vector<unsigned char> v = b64_decode(secret);
std::string message = ""azertyAZERTY"";
std::vector<unsigned char> data(message.begin(), message.end());
std::vector<unsigned char> v = b64_decode(secret);

std::cout << ""signature 256 : "" << b64_encode(hmac_sha256(data, v)) << std::endl;
std::cout << ""signature 384 : "" << b64_encode(hmac_sha384(data, v)) << std::endl;
std::cout << ""signature 512 : "" << b64_encode(hmac_sha512(data, v)) << std::endl;

returns
signature 256 : AUTcxQUgWHDOX3KzXJwl6ACDtfNJlMXq55pTBGp3RxAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==
signature 384 : irWXsFWoNREZddkTRDzPFgyhyiLoIt8uoi0Kpxw4GgYSfSnILXLdQu0HuM5qN4ZbAAAAAAAAAAAAAAAAAAAAAA==
signature 512 : DU+sAkJnJBqY1QPwJRmwCK/vdACwKfysz+PetdsmvlmgRlK8Ad1tbHsjvRs/By2PR7uWEngXGjocTgqjDGMTFw==

And one can see that the signatures 256 look very different...
Thank you very much in advance !
","","2956","<openssl><sha>","3","","0","2017-10-22 14:26:21","","3","","2698304","","2017-10-22 14:26:21","2017-10-21 15:00:23",""
"6357234","SHA hash function gives a negative output","I'm trying to implement DSA signature algorithm and I'm stuck on a problem. I'm using the java.security MessageDigest class, here's the code:
MessageDigest md;
md = MessageDigest.getInstance(""SHA-1"");
md.update(text.getBytes());
return new BigInteger(md.digest());

Text is a random String object. Problem is that this code gives me negative values of hash, which is not accepted by the algorithm. Am I doing something wrong? Thanks in advance.
P.S. By the way, I've also tried to implement DSA without using BigIntegers, is this possible? I've not found the L and N values lesser than 1024 and 160, so I have no idea what values should I take and what hash-function should I use. Will be very thankful to hear the answers on these questions.
","MessageDigest md;
md = MessageDigest.getInstance(""SHA-1"");
md.update(text.getBytes());
return new BigInteger(1, md.digest()); // use this 1 to tell it is positive.

Then you can convert your hash to a String using:
String hash = biginteger.toString(16);

Then optionally prepend the leading zeros.
String zeros = String.format(""%032d"", 0);
hash = zeros.substring(hash.length()) + hash;

","2944","<java><hash><sha><dsa>","4","3","4","2012-12-27 22:45:35","6357302","6","2","554431","","2011-06-15 12:15:30","2011-06-15 11:49:40",""
"6357234","SHA hash function gives a negative output","I'm trying to implement DSA signature algorithm and I'm stuck on a problem. I'm using the java.security MessageDigest class, here's the code:
MessageDigest md;
md = MessageDigest.getInstance(""SHA-1"");
md.update(text.getBytes());
return new BigInteger(md.digest());

Text is a random String object. Problem is that this code gives me negative values of hash, which is not accepted by the algorithm. Am I doing something wrong? Thanks in advance.
P.S. By the way, I've also tried to implement DSA without using BigIntegers, is this possible? I've not found the L and N values lesser than 1024 and 160, so I have no idea what values should I take and what hash-function should I use. Will be very thankful to hear the answers on these questions.
","You are passing the bytes returned to the BigInteger constructor. While the types match, I'm not sure what you want to accomplish here. From the BigInteger JavaDoc:

Translates a byte array containing the two's-complement binary representation of a BigInteger

","2944","<java><hash><sha><dsa>","4","1","4","2012-12-27 22:45:35","6357302","6","2","554431","","2011-06-15 12:15:30","2011-06-15 11:49:40",""
"6357234","SHA hash function gives a negative output","I'm trying to implement DSA signature algorithm and I'm stuck on a problem. I'm using the java.security MessageDigest class, here's the code:
MessageDigest md;
md = MessageDigest.getInstance(""SHA-1"");
md.update(text.getBytes());
return new BigInteger(md.digest());

Text is a random String object. Problem is that this code gives me negative values of hash, which is not accepted by the algorithm. Am I doing something wrong? Thanks in advance.
P.S. By the way, I've also tried to implement DSA without using BigIntegers, is this possible? I've not found the L and N values lesser than 1024 and 160, so I have no idea what values should I take and what hash-function should I use. Will be very thankful to hear the answers on these questions.
","Why are you surprised? MessageDigest#digest() returns evenly distributed 160 bits of data. They are typically represented as hexadecimal string, but if you convert them to integer, the most significant bit designates the sign. Check out this code:
System.out.println(new BigInteger(new byte[]{(byte) 255}));  //-1

","2944","<java><hash><sha><dsa>","4","2","4","2012-12-27 22:45:35","6357302","6","2","554431","","2011-06-15 12:15:30","2011-06-15 11:49:40",""
"6357234","SHA hash function gives a negative output","I'm trying to implement DSA signature algorithm and I'm stuck on a problem. I'm using the java.security MessageDigest class, here's the code:
MessageDigest md;
md = MessageDigest.getInstance(""SHA-1"");
md.update(text.getBytes());
return new BigInteger(md.digest());

Text is a random String object. Problem is that this code gives me negative values of hash, which is not accepted by the algorithm. Am I doing something wrong? Thanks in advance.
P.S. By the way, I've also tried to implement DSA without using BigIntegers, is this possible? I've not found the L and N values lesser than 1024 and 160, so I have no idea what values should I take and what hash-function should I use. Will be very thankful to hear the answers on these questions.
","Don't re-invent the wheel, esp for cryptography -- use java.security.Signature or a higher-level library.
","2944","<java><hash><sha><dsa>","4","0","4","2012-12-27 22:45:35","6357302","6","2","554431","","2011-06-15 12:15:30","2011-06-15 11:49:40",""
"3372580","How detect a Git SHA ID in a text","A Git SHA ID looks like this one 351e11dac558a764ba83f89c6598151d2dbaf904, it is a long hex number. But how should it be detected in a text? Search for ""words"" which only contain 0-9,a-f and have a length of at least 20 characters? But how to distinguish SHA IDs from normal words?
","Yes, your approach will work.  Remember, though, SHA1 is a general algorithm (not git specific), so it's possible your text could contain other SHA1 hashes in it which will also be 40 character hex strings.
","2909","<git><commit><sha>","5","1","1","2010-08-03 11:46:51","","3","1","209706","","2010-08-03 11:46:51","2010-07-30 14:48:06",""
"24088295","Can SHA1 , SHA-256 , SHA-512 be broken up to run across multiple cores/threads?","I'm studying the speed (time to calculate hash) of SHA1 , SHA-256 , SHA-512 over different processors
Can these hashing algorithms be broken up to run across multiple cores/threads ?
","If you're wondering about parallelizing the execution of computing a single hash (regardless of flavor 1, 256, or 512) then the answer is sadly no. That is because of the way the SHA transform function is defined. It operates on blocks of fixed size but the output of the transformation of each block is required by next so you can't run the computations in parallel.
Obviously it is possible to run multiple hashes in parallel, for different input strings, but that I assume you already knew.
If all you wanted was to generate digests for large inputs using underlying SHA transforms you could define an arbitrary scheme for segmenting the input and then generating digest blocks for each segment in parallel. Then combine those and so on..
Something like this:
 | ------------------ large input ---------------------------------------------|

 |    b0     |    b1    |    b2    |          |          |          |    bn    |

You can generate H(b0), H(b1), .. H(bn) in parallel.
Then, generate H_OUT = H(H(b0) + H(b1) + .. + H(bn)) (where the + sign could be concatenation or a simple XOR but these would very likely not be cryptographically strong).
This method will benefit from multiple cores but H_OUT will not be equivalent to computing  a single hash of the original large input.
","2885","<multithreading><hash><sha>","6","13","1","2017-01-13 16:24:40","24088333","0","","","","","2014-06-06 18:18:26",""
"13250505","Which versions of Android support which package signing algorithms?","Given that I want to support all android devices which are, say, Froyo or later, what's the most secure signing algorithm I can use? I do not need to place my APK in Android Market.
I know, for instance, that some phones support sha1withrsa but not sha256withrsa (Link).
","Please refer to the android dev guide on signing.
The current default method is SHA1withRSA:
$ jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore my-release-key.keystore my_application.apk alias_name

while a few years ago the signing method recommended was MD5withRSA.


[...] what's the most secure signing algorithm I can use?

Are you concerned with some specific attack that makes you think that SHA1withRSA or SHA256withRSA would be more secure?  I can't foresee any scenario.
","2872","<android><sha>","8","1","1","2015-05-06 08:34:00","","0","1","1412059","","2012-11-06 12:02:28","2012-11-06 11:55:26",""
"23760816","spring security bad credentials even though they are correct","I am using Spring Roo and I setup my Spring Security like this (applicationContext-security.xml):
<?xml version=""1.0"" encoding=""UTF-8""?>
<beans:beans xmlns=""http://www.springframework.org/schema/security"" 
    xmlns:beans=""http://www.springframework.org/schema/beans"" 
    xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" 
    xsi:schemaLocation=""http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd"">
    <!-- HTTP security configurations -->
    <http auto-config=""true"" use-expressions=""true"" request-matcher=""regex"">
        <form-login login-processing-url=""/resources/j_spring_security_check"" login-page=""/login"" authentication-failure-url=""/login?login_error=t"" />
        <logout logout-url=""/resources/j_spring_security_logout"" />
        <intercept-url pattern=""\A/hotels\?form.*\Z"" access=""hasRole('ROLE_ADMIN')""/>
        <intercept-url pattern=""/**"" access=""permitAll""/>
    </http>
    <!-- Configure Authentication mechanism -->
    <authentication-manager alias=""authenticationManager"">
        <!-- SHA-256 values can be produced using 'echo -n your_desired_password | sha256sum' (using normal *nix environments) -->
        <authentication-provider>
            <password-encoder hash=""sha-256"">
                <!-- <salt-source user-property=""login""/> -->
            </password-encoder>
            <jdbc-user-service data-source-ref=""dataSource""
                users-by-username-query=""
                SELECT login, password, enabled
                FROM user WHERE login = ?""

                authorities-by-username-query=""
                FROM user u, role r, 
                user_role ur
                WHERE u.id = ur.user
                AND r.id = ur.role
                AND u.login = ?""        
            />
            <user-service>
                <user name=""admin"" password=""8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918"" authorities=""ROLE_ADMIN"" />
                <user name=""user"" password=""04f8996da763b7a969b1028ee3007569eaf3a635486ddab211d512c85b9df8fb"" authorities=""ROLE_USER"" />
            </user-service>
        </authentication-provider>
    </authentication-manager>
</beans:beans>

Then I created a dummy user with the login johnny and the password admin, which is stored in the database like this 8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918.
This is the default login page provided by the framework:
<div xmlns:spring=""http://www.springframework.org/tags"" xmlns:fn=""http://java.sun.com/jsp/jstl/functions"" xmlns:util=""urn:jsptagdir:/WEB-INF/tags/util"" xmlns:c=""http://java.sun.com/jsp/jstl/core"" xmlns:jsp=""http://java.sun.com/JSP/Page"" version=""2.0"">
  <jsp:directive.page contentType=""text/html;charset=UTF-8"" />
  <jsp:output omit-xml-declaration=""yes"" />
  <spring:message code=""security_login_title"" var=""title"" htmlEscape=""false"" />
  <util:panel id=""title"" title=""${title}"">
    <c:if test=""${not empty param.login_error}"">
      <div class=""errors"">
        <p>
          <spring:message code=""security_login_unsuccessful"" />
          <c:out value=""${SPRING_SECURITY_LAST_EXCEPTION.message}"" />
          .
        </p>
      </div>
      <br/>
    </c:if>
    <c:if test=""${empty param.login_error}"">
      <p>
        <!-- <spring:message code=""security_login_message"" /> -->
      </p>
    </c:if>
    <spring:url value=""/resources/j_spring_security_check"" var=""form_url"" />
    <form name=""f"" action=""${fn:escapeXml(form_url)}"" method=""POST"">
      <input type=""hidden"" name=""test""/>
      <div>
        <label for=""j_username"">
          <spring:message code=""security_login_form_name"" />
        </label>
        <input id=""j_username"" type='text' name='j_username' style=""width:150px"" />
        <spring:message code=""security_login_form_name_message"" var=""name_msg"" htmlEscape=""false"" />
        <script type=""text/javascript"">
          <c:set var=""sec_name_msg"">
            <spring:escapeBody javaScriptEscape=""true"">${name_msg}</spring:escapeBody>
          </c:set>
          Spring.addDecoration(new Spring.ElementDecoration({elementId : ""j_username"", widgetType : ""dijit.form.ValidationTextBox"", widgetAttrs : {promptMessage: ""${sec_name_msg}"", required : true}})); 
        </script>
      </div>
      <br />
      <div>
        <label for=""j_password"">
          <spring:message code=""security_login_form_password"" />
        </label>
        <input id=""j_password"" type='password' name='j_password' style=""width:150px"" />
        <spring:message code=""security_login_form_password_message"" var=""pwd_msg"" htmlEscape=""false"" />
        <script type=""text/javascript"">
          <c:set var=""sec_pwd_msg"">
            <spring:escapeBody javaScriptEscape=""true"">${pwd_msg}</spring:escapeBody>
          </c:set>
          Spring.addDecoration(new Spring.ElementDecoration({elementId : ""j_password"", widgetType : ""dijit.form.ValidationTextBox"", widgetAttrs : {promptMessage: ""${sec_pwd_msg}"", required : true}})); 
        </script>
      </div>
      <br />
      <div class=""submit"">
        <script type=""text/javascript"">Spring.addDecoration(new Spring.ValidateAllDecoration({elementId:'proceed', event:'onclick'}));</script>
        <spring:message code=""button_submit"" var=""submit_label"" htmlEscape=""false"" />
        <input id=""proceed"" type=""submit"" value=""${fn:escapeXml(submit_label)}"" />
        <spring:message code=""button_reset"" var=""reset_label"" htmlEscape=""false"" />
        <input id=""reset"" type=""reset"" value=""${fn:escapeXml(reset_label)}"" />
      </div>
    </form>
  </util:panel>
</div>

However, when I try to log in I get a Bad credentials error. What is happening?
I can't really manage to find a way of how to debug this because it's all happening internally in spring security I guess so I can't get to know what queries are actually being made and I can't/don't know where to look to figure out why this is failing.
","Look at the debug log output when you try to authenticate as the user (always a good idea). Most likely it says it can't find the user ""johnny"".
This is most likely because you have both a jdbc-user-service and a user-service in the same authentication-provider which won't work.
Use two separate authentication-provider elements:
<authentication-provider>
    <jdbc-user-service ... />
</authentication-provider>
<authentication-provider>
    <user-service>
       ....
    </user-service>
</authentication-provider>

Also, as I said in your other question, you shouldn't use SHA as a password hashing algorithm unless it's for a legacy system.
","2832","<spring><spring-mvc><spring-security><spring-roo><sha>","0","1","2","2014-05-20 17:59:00","23766791","0","","","","","2014-05-20 13:11:38",""
"23760816","spring security bad credentials even though they are correct","I am using Spring Roo and I setup my Spring Security like this (applicationContext-security.xml):
<?xml version=""1.0"" encoding=""UTF-8""?>
<beans:beans xmlns=""http://www.springframework.org/schema/security"" 
    xmlns:beans=""http://www.springframework.org/schema/beans"" 
    xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" 
    xsi:schemaLocation=""http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd"">
    <!-- HTTP security configurations -->
    <http auto-config=""true"" use-expressions=""true"" request-matcher=""regex"">
        <form-login login-processing-url=""/resources/j_spring_security_check"" login-page=""/login"" authentication-failure-url=""/login?login_error=t"" />
        <logout logout-url=""/resources/j_spring_security_logout"" />
        <intercept-url pattern=""\A/hotels\?form.*\Z"" access=""hasRole('ROLE_ADMIN')""/>
        <intercept-url pattern=""/**"" access=""permitAll""/>
    </http>
    <!-- Configure Authentication mechanism -->
    <authentication-manager alias=""authenticationManager"">
        <!-- SHA-256 values can be produced using 'echo -n your_desired_password | sha256sum' (using normal *nix environments) -->
        <authentication-provider>
            <password-encoder hash=""sha-256"">
                <!-- <salt-source user-property=""login""/> -->
            </password-encoder>
            <jdbc-user-service data-source-ref=""dataSource""
                users-by-username-query=""
                SELECT login, password, enabled
                FROM user WHERE login = ?""

                authorities-by-username-query=""
                FROM user u, role r, 
                user_role ur
                WHERE u.id = ur.user
                AND r.id = ur.role
                AND u.login = ?""        
            />
            <user-service>
                <user name=""admin"" password=""8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918"" authorities=""ROLE_ADMIN"" />
                <user name=""user"" password=""04f8996da763b7a969b1028ee3007569eaf3a635486ddab211d512c85b9df8fb"" authorities=""ROLE_USER"" />
            </user-service>
        </authentication-provider>
    </authentication-manager>
</beans:beans>

Then I created a dummy user with the login johnny and the password admin, which is stored in the database like this 8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918.
This is the default login page provided by the framework:
<div xmlns:spring=""http://www.springframework.org/tags"" xmlns:fn=""http://java.sun.com/jsp/jstl/functions"" xmlns:util=""urn:jsptagdir:/WEB-INF/tags/util"" xmlns:c=""http://java.sun.com/jsp/jstl/core"" xmlns:jsp=""http://java.sun.com/JSP/Page"" version=""2.0"">
  <jsp:directive.page contentType=""text/html;charset=UTF-8"" />
  <jsp:output omit-xml-declaration=""yes"" />
  <spring:message code=""security_login_title"" var=""title"" htmlEscape=""false"" />
  <util:panel id=""title"" title=""${title}"">
    <c:if test=""${not empty param.login_error}"">
      <div class=""errors"">
        <p>
          <spring:message code=""security_login_unsuccessful"" />
          <c:out value=""${SPRING_SECURITY_LAST_EXCEPTION.message}"" />
          .
        </p>
      </div>
      <br/>
    </c:if>
    <c:if test=""${empty param.login_error}"">
      <p>
        <!-- <spring:message code=""security_login_message"" /> -->
      </p>
    </c:if>
    <spring:url value=""/resources/j_spring_security_check"" var=""form_url"" />
    <form name=""f"" action=""${fn:escapeXml(form_url)}"" method=""POST"">
      <input type=""hidden"" name=""test""/>
      <div>
        <label for=""j_username"">
          <spring:message code=""security_login_form_name"" />
        </label>
        <input id=""j_username"" type='text' name='j_username' style=""width:150px"" />
        <spring:message code=""security_login_form_name_message"" var=""name_msg"" htmlEscape=""false"" />
        <script type=""text/javascript"">
          <c:set var=""sec_name_msg"">
            <spring:escapeBody javaScriptEscape=""true"">${name_msg}</spring:escapeBody>
          </c:set>
          Spring.addDecoration(new Spring.ElementDecoration({elementId : ""j_username"", widgetType : ""dijit.form.ValidationTextBox"", widgetAttrs : {promptMessage: ""${sec_name_msg}"", required : true}})); 
        </script>
      </div>
      <br />
      <div>
        <label for=""j_password"">
          <spring:message code=""security_login_form_password"" />
        </label>
        <input id=""j_password"" type='password' name='j_password' style=""width:150px"" />
        <spring:message code=""security_login_form_password_message"" var=""pwd_msg"" htmlEscape=""false"" />
        <script type=""text/javascript"">
          <c:set var=""sec_pwd_msg"">
            <spring:escapeBody javaScriptEscape=""true"">${pwd_msg}</spring:escapeBody>
          </c:set>
          Spring.addDecoration(new Spring.ElementDecoration({elementId : ""j_password"", widgetType : ""dijit.form.ValidationTextBox"", widgetAttrs : {promptMessage: ""${sec_pwd_msg}"", required : true}})); 
        </script>
      </div>
      <br />
      <div class=""submit"">
        <script type=""text/javascript"">Spring.addDecoration(new Spring.ValidateAllDecoration({elementId:'proceed', event:'onclick'}));</script>
        <spring:message code=""button_submit"" var=""submit_label"" htmlEscape=""false"" />
        <input id=""proceed"" type=""submit"" value=""${fn:escapeXml(submit_label)}"" />
        <spring:message code=""button_reset"" var=""reset_label"" htmlEscape=""false"" />
        <input id=""reset"" type=""reset"" value=""${fn:escapeXml(reset_label)}"" />
      </div>
    </form>
  </util:panel>
</div>

However, when I try to log in I get a Bad credentials error. What is happening?
I can't really manage to find a way of how to debug this because it's all happening internally in spring security I guess so I can't get to know what queries are actually being made and I can't/don't know where to look to figure out why this is failing.
","After more suffering I managed to solve it. I made the user and role entities-tables again and re-wrote the queries:
        <jdbc-user-service data-source-ref=""dataSource""
        users-by-username-query=""SELECT u.login, u.password, u.enabled from users u where u.login=?""
        authorities-by-username-query=""SELECT u.login, r.name FROM users u left join user_roles ur on u.id=ur.user join roles r on ur.roles=r.id WHERE u.login=?"" 
        />

Using two separte authentication-provide had nothing to do with my error.
","2832","<spring><spring-mvc><spring-security><spring-roo><sha>","0","0","2","2014-05-20 17:59:00","23766791","0","","","","","2014-05-20 13:11:38",""
"9420722","Improve password hashing with a random salt","I'm starting a website and I'm trying to decide how to encrypt user passwords to store them in a SQL database.
I realize that using a simple md5(password) is very unsecured. I'm considering using a sha512(password.salt), and I have been researching the best way to generate a useful salt.
I read numerous articles stating that a salt should be as random as possible to add entropy to the hash and it looks like a great idea. But:

you need to store the random salt along with your hash
given that an attacker somehow got access to your hashed passwords (and is trying to reverse the hash to plain text), it means he probably dumped your database, then got access to your random salts also

Isn't it obvious that the weird looking value next to the hash in the database is a salt? If the attacker can access the salt along with the hash value, how is that more secure?
Anyone has any expertise in that area? Thanks!
","
given that an attacker somehow got access to your hashed passwords
  (and is trying to reverse the hash to plain text), it means he
  probably dumped your database, then got access to your random salts
  also

The whole point of salting is to defeat ""rainbow tables"":
http://en.wikipedia.org/wiki/Rainbow_table
See why a sufficiently long salt defeats any rainbow table under the section ""Defense against rainbow tables"".

how is that more secure?

It used to be more secure because it forced the attacker to try a, back then, very costly brute-force approach instead of an instant looked in precomputed rainbow tables. If you had a 64 bit salt, the attacker needed to have 2^64 precomputed rainbow tables instead of one...  In other words: it made rainbow tables useless.
Note however that modern GPUs can crack billions of passwords per second making it mostly pointless for an attacker to store huge rainbow tables (instead of storing billions of hashes, simply compute them in a few seconds).
Nowadays you want to store your ""passwords"" using something like PBKDF2 or scrypt.
","2802","<php><mysql><security><hash><sha>","21","15","5","2014-03-21 17:49:02","9420779","8","7","","","","2012-02-23 20:28:03",""
"9420722","Improve password hashing with a random salt","I'm starting a website and I'm trying to decide how to encrypt user passwords to store them in a SQL database.
I realize that using a simple md5(password) is very unsecured. I'm considering using a sha512(password.salt), and I have been researching the best way to generate a useful salt.
I read numerous articles stating that a salt should be as random as possible to add entropy to the hash and it looks like a great idea. But:

you need to store the random salt along with your hash
given that an attacker somehow got access to your hashed passwords (and is trying to reverse the hash to plain text), it means he probably dumped your database, then got access to your random salts also

Isn't it obvious that the weird looking value next to the hash in the database is a salt? If the attacker can access the salt along with the hash value, how is that more secure?
Anyone has any expertise in that area? Thanks!
","An attacker is ""allowed"" to know the salt - your security must be designed in a way that even with the knowledge of the salt it is still secure.
What does the salt do ?
Salt aids in defending against brute-force attacks using pre-computed ""rainbow-tables"".
Salt makes brute-force much more expensive (in time/memory terms) for the attacker.
Calculating such a table is expensive and usually only done when it can be used for more than one attack/password.
IF you use the same salt for all password an attacker could pre-compute such a table and then brute-force your passwords into cleartext... 
As long as you generate a new (best cryptogrpahically strong) random salt for every password you want to store the hash of there is no problem.
IF you want to strengthen the security further
You could calculate the hash several times over (hash the hash etc.) - this doesn't cost you much but it makes a brute-force attack / calculating ""rainbow-tables"" even more expensive... please don't invent yourself - there are proven standard methods to do so, see for example http://en.wikipedia.org/wiki/PBKDF2 and http://www.itnewb.com/tutorial/Encrypting-Passwords-with-PHP-for-Storage-Using-the-RSA-PBKDF2-Standard
NOTE: 
Using such a mechanism is these days mandatrory since ""CPU time"" (usable for attacks like rainbow tables/brute force etc.) is getting more and more widely available (see for example the fact that Amazon's Cloud service is among the top 50 of fastest supercomuters worldwide and can be used by anyone for a comparatively small amount)!
","2802","<php><mysql><security><hash><sha>","21","40","5","2014-03-21 17:49:02","9420779","8","7","","","","2012-02-23 20:28:03",""
"9420722","Improve password hashing with a random salt","I'm starting a website and I'm trying to decide how to encrypt user passwords to store them in a SQL database.
I realize that using a simple md5(password) is very unsecured. I'm considering using a sha512(password.salt), and I have been researching the best way to generate a useful salt.
I read numerous articles stating that a salt should be as random as possible to add entropy to the hash and it looks like a great idea. But:

you need to store the random salt along with your hash
given that an attacker somehow got access to your hashed passwords (and is trying to reverse the hash to plain text), it means he probably dumped your database, then got access to your random salts also

Isn't it obvious that the weird looking value next to the hash in the database is a salt? If the attacker can access the salt along with the hash value, how is that more secure?
Anyone has any expertise in that area? Thanks!
","Here's a good article on cryptography: http://www.javacodegeeks.com/2012/02/introduction-to-strong-cryptography-p1.html
See the section Real World Usage of Hash Algorithms, Scenario 1 for discussion of the salt.
I highly recommend using http://docs.oracle.com/javase/6/docs/api/java/security/SecureRandom.html to generate your salt
","2802","<php><mysql><security><hash><sha>","21","-1","5","2014-03-21 17:49:02","9420779","8","7","","","","2012-02-23 20:28:03",""
"9420722","Improve password hashing with a random salt","I'm starting a website and I'm trying to decide how to encrypt user passwords to store them in a SQL database.
I realize that using a simple md5(password) is very unsecured. I'm considering using a sha512(password.salt), and I have been researching the best way to generate a useful salt.
I read numerous articles stating that a salt should be as random as possible to add entropy to the hash and it looks like a great idea. But:

you need to store the random salt along with your hash
given that an attacker somehow got access to your hashed passwords (and is trying to reverse the hash to plain text), it means he probably dumped your database, then got access to your random salts also

Isn't it obvious that the weird looking value next to the hash in the database is a salt? If the attacker can access the salt along with the hash value, how is that more secure?
Anyone has any expertise in that area? Thanks!
","The strength of your hashed, salted passwords rely on all of the following factors:

The strength of the hashing algorithm
The randomness of the salt
The randomness of the password

Your system is as strong as the weakest of the above.
","2802","<php><mysql><security><hash><sha>","21","0","5","2014-03-21 17:49:02","9420779","8","7","","","","2012-02-23 20:28:03",""
"9420722","Improve password hashing with a random salt","I'm starting a website and I'm trying to decide how to encrypt user passwords to store them in a SQL database.
I realize that using a simple md5(password) is very unsecured. I'm considering using a sha512(password.salt), and I have been researching the best way to generate a useful salt.
I read numerous articles stating that a salt should be as random as possible to add entropy to the hash and it looks like a great idea. But:

you need to store the random salt along with your hash
given that an attacker somehow got access to your hashed passwords (and is trying to reverse the hash to plain text), it means he probably dumped your database, then got access to your random salts also

Isn't it obvious that the weird looking value next to the hash in the database is a salt? If the attacker can access the salt along with the hash value, how is that more secure?
Anyone has any expertise in that area? Thanks!
","The questions below are from the sister site Security StackExchange. They discuss hashing, salts, PBKDF2, bcrypt, scrypt, and a few other things.

How to securely hash passwords?
Do any security experts recommend bcrypt for password storage?

There's also some previous discussion from here on StackOverflow as well:
Is BCrypt a good hashing algorithm to use in C#? Where can I find it?
In short answer to you question, a salt is a safeguard that makes it take a long time to recover a password in the event of compromise just as a hash is. If attacking one password, the salt won't make a difference. If trying to use a pre-computed dictionary or test many passwords at the same time, having a different salt for each entry will greatly increase the amount of work needed and generally make generating a suitable rainbow table infeasible.
","2802","<php><mysql><security><hash><sha>","21","0","5","2014-03-21 17:49:02","9420779","8","7","","","","2012-02-23 20:28:03",""
"31123925","Is binary hashing possible with CryptoJS?","I want to create an HOTP client using javascript similar to SpeakEasy
The above library is intended for server side javascript usage and it uses NodeJS.
I want to do the same thing on front end javascript in a browser but I haven't been able to use CryptoJS to achieve this behavior. 
         var key = ""abc"";
         var counter = ""123"";

         // create an octet array from the counter
         var octet_array = new Array(8);

         var counter_temp = counter;

         for (var i = 0; i < 8; i++) {
             var i_from_right = 7 - i;

             // mask 255 over number to get last 8
             octet_array[i_from_right] = counter_temp & 255;

             // shift 8 and get ready to loop over the next batch of 8
             counter_temp = counter_temp >> 8;
         }

        // There is no such class called as Buffer on Browsers (its node js)
         var counter_buffer = new Buffer(octet_array);

         var hash = CryptoJS.HmacSHA1(key,counter_buffer);

         document.write(""hex value ""+ hash);
         document.write(""hash value ""+    CryptoJS.enc.Hex.stringify(hash));

I know this is possible on a native platform like java (android) or objective c (ios) 
Here is the corresponding implementation HOTP in Objective C but I doubt if it's possible to do on a web based front end. 
Also, I highly doubt if such a thing is secure in browser because javascript is viewable from any browser. Any inputs suggestions would be useful. I am doing this for a POC. I am curious if anyone has used Hotp on web based platform.
","There is no such language that supports binary data strings in the code. You need to encode the binary data into some format such as Hex or Base64 and let CryptoJS decode it into it's own internal binary format which you then can pass to the various CryptoJS functions:
var wordArrayFromUtf = CryptoJS.enc.Utf8.parse(""test"");
var wordArrayFromHex = CryptoJS.enc.Hex.parse(""74657374""); // ""test""
var wordArrayFromB64 = CryptoJS.enc.Base64.parse(""dGVzdA==""); // ""test""

Other functions are:
wordArrayFromHex.toString(CryptoJS.enc.Utf8)  // ""test""
CryptoJS.enc.Utf8.stringify(wordArrayFromB64) // ""test""

If you pass a string into a CrypoJS function (not these here), it will be assumed to be a Utf8-encoded string. If you don't want that, you need to decode it yourself.
","2795","<javascript><hash><sha><cryptojs><one-time-password>","3","3","2","2015-06-30 06:47:07","31124690","5","","1816580","","2015-06-30 06:47:07","2015-06-29 19:26:27",""
"31123925","Is binary hashing possible with CryptoJS?","I want to create an HOTP client using javascript similar to SpeakEasy
The above library is intended for server side javascript usage and it uses NodeJS.
I want to do the same thing on front end javascript in a browser but I haven't been able to use CryptoJS to achieve this behavior. 
         var key = ""abc"";
         var counter = ""123"";

         // create an octet array from the counter
         var octet_array = new Array(8);

         var counter_temp = counter;

         for (var i = 0; i < 8; i++) {
             var i_from_right = 7 - i;

             // mask 255 over number to get last 8
             octet_array[i_from_right] = counter_temp & 255;

             // shift 8 and get ready to loop over the next batch of 8
             counter_temp = counter_temp >> 8;
         }

        // There is no such class called as Buffer on Browsers (its node js)
         var counter_buffer = new Buffer(octet_array);

         var hash = CryptoJS.HmacSHA1(key,counter_buffer);

         document.write(""hex value ""+ hash);
         document.write(""hash value ""+    CryptoJS.enc.Hex.stringify(hash));

I know this is possible on a native platform like java (android) or objective c (ios) 
Here is the corresponding implementation HOTP in Objective C but I doubt if it's possible to do on a web based front end. 
Also, I highly doubt if such a thing is secure in browser because javascript is viewable from any browser. Any inputs suggestions would be useful. I am doing this for a POC. I am curious if anyone has used Hotp on web based platform.
","The code at http://caligatio.github.io/jsSHA/ works fine for SHA-512.
Drop the .js files, look in their test/test.html at line 515. It might look like a string to you but it is binary hex.
So their input is binary which is unmistaken. Don't get hung up on the fact it is sitting in a big string.
","2795","<javascript><hash><sha><cryptojs><one-time-password>","3","1","2","2015-06-30 06:47:07","31124690","5","","1816580","","2015-06-30 06:47:07","2015-06-29 19:26:27",""
"14850674","How much faster is the native implementation of the native cryptographic hashes on Windows than the .Net Managed version?","I'm providing hashes for sets of data in order to fingerprint the data and identify it by hash - this is the core use case for fast hashes like SHA1 and MD5.
In .Net, there is an option to go with the native or managed implementations of some of these hashes (the SHA variants, anyway). I'm looking for an MD5 managed implementation, and there doesn't appear to be one in the .Net Framework, but wondered if the wrapped native CSP is faster anyway, and if I should just use it content that there will be no perf problems using it. The top answer to Why is there no managed MD5 implementation in the .NET framework? indicates that faster performance could be the reason that a managed variant doesn't exist.
Is this true, and if so, how much faster is the native CSP?
","Unfortunately, the wrapped native CSP for MD5 - MD5CryptoServiceProvider - is significantly slower than a pure managed implementation. It is an obstinate viewpoint that holds that native code is unequivocally faster than managed code: in many cases the opposite is true. This is such a case, at least in head-to-head measurements.
Using the translated reference MD5 implementation by David Anson, I constructed a quick performance test (source) which aims to measure any large differences in performance between the two implementations. While for small data arrays the difference are negligible, as expected, at around 16kB the native implementation starts to show potentially significant delay - on the order of milliseconds. This might not seem like much, but it is orders of magnitude slower than the pure managed implementation. This difference is maintained as the size of the data being hashed increases, and at the largest tested data array - ~250MB - the difference in CPU time was about 8.5 seconds. Considering that a hash like this is often used to fingerprint very large files, this extra delay would become noticeable, even against the often much larger delays from I/O.
It's not abundantly clear where the delay comes from, since a pure native test was not performed (one which would dispense with the wrapping of a CSP and consumption in managed code), but given the nearly identical shape of the graphs on the log scale, it would appear that the managed and native implementations have the same intrinsic performance, but that the native code performance is ""shifted"" down in performance likely due to the cost of the interop between native and managed code at runtime. This performance difference between wrapped native CSPs and pure managed implementations has also been reproduced and documented by other investigators.
In addition to answering the question ""how much faster is the native implementation"" in this particular case, I hope this evidence serves to prompt more reflection and investigation when the question of native vs. managed arises, breaking the long-standing and pernicious reaction to similar questions that native code is always faster, and thus, somehow, better. Managed code is clearly very fast, even in this performance-sensitive domain of bulk data hashing.


","2771","<.net><performance><md5><native><sha>","9","19","1","2015-12-06 23:29:26","14850676","4","4","-1","","2017-05-23 10:30:15","2013-02-13 09:52:37",""
"22956720","Which hashing algorithm is best for uniqueness and speed on Strings?","Which hashing algorithm is best for uniqueness and speed on Strings?
I know there are things like SHA-*, MD5 and such,  I want a hash algorithm designed to be fast,  unique and safe.
","You have a nice post on programmers.stackexchange.com with pros and cons on each hash function: https://softwareengineering.stackexchange.com/questions/49550/which-hashing-algorithm-is-best-for-uniqueness-and-speed
","2748","<algorithm><hash><md5><unique><sha>","0","3","1","2014-04-09 08:26:52","","4","","","","","2014-04-09 08:20:01",""
"15669550","Get SHA1 of HexString like HashCalc does","HashCalc has, at the top, a field called ""Data Format"" I switch that to ""HexString"" then type in test value of 9a in the data field. I run a SHA-1 hash on it and the answer is:13cba177bcfad90e7b3de70616b2e54ba4bb107f
(NOTE: online hashers will hash ""9a"" as a string resulting in an answer of e8eef065fb7295044d65b305bab18a9a645d1abf. Which is wrong for this application)
Now, I need to embed this type of hashing into my Java program. This is what I got so far (wrapped in try/catch):
String ss = ""9a"";
ByteBuffer bb = ByteBuffer.allocate(8);  
byte[] ba = bb.putLong(Long.decode(""0x""+ss).longValue()).array();
MessageDigest md = MessageDigest.getInstance(""SHA-1"");
String results = encodeHex(md.digest(ba));
System.out.println(""sha:""+results);

However, my result is E73C417858807239DD5BC30BA978C14D57F80834
What am I doing wrong? 
EDIT: Added Hex tag back, it seems obvious that the data has to be in some sort of hex format. As HashCalc has to be set to ""HexString"" and not ""TextString"" which returns a different result. And the solution could well include a change to how Im dealing with these hex numbers. --> which turned out to be true
","DISCLAIMER
The OP (Pimp Trizkit), is the one who found the right solution. I just used his solution (with minor change) to showcase the result and to have fun. All rights reserved)
Also, the bytes array to hex string converting algorithm offered by the OP  is much faster, than the ones in my example code. See his solution for the implementation.
(For the details read the comments down below)

One of the manual solutions:
(Important! It was my first answer, but it's only for getting hash from the text string, not from the hex string as the OP asked. See the update below):

import java.security.MessageDigest;

public class TestHash {

    public static void main(String[] args) throws Exception {
        String password = ""9a"";

        MessageDigest md = MessageDigest.getInstance(""SHA-1"");
        md.update(password.getBytes());
        byte[] byteData = md.digest();
        // byte[] byteData = md.digest(password.getBytes());    // both updates and completes the hash computation

        // Method 1 of converting bytes to hex format
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < byteData.length; i++) {
            sb.append(Integer.toString((byteData[i] & 0xFF) + 0x100, 16).substring(1));
        }

        System.out.println(""1) Hex format : "" + sb.toString());

        // Method 2 of converting bytes to hex format
        StringBuffer hexString = new StringBuffer();
        for (int i = 0; i < byteData.length; i++) {
            String hex = Integer.toHexString(0xff & byteData[i]);
            // NB! E.g.: Integer.toHexString(0x0C) will return ""C"", not ""0C""            
            if (hex.length() == 1) {
                hexString.append('0');
            }
            hexString.append(hex);
        }
        System.out.println(""2) Hex format : "" + hexString.toString());      
    }
}

Output:
1) Hex format : e8eef065fb7295044d65b305bab18a9a645d1abf
2) Hex format : e8eef065fb7295044d65b305bab18a9a645d1abf


UPDATE
Based on the OP found solution, here is the  code, that showcases getting the SHA-1 hash from a hex string instead of a text string. Plus it presents several methods of manually converting byte arrays to hex string (just for fun). Sorry, I was in a mood ))
See my comments inside the main method and inside different bytesToHexString() methods for the explanation of important moments.
import java.security.MessageDigest;
import java.math.BigInteger;
import javax.xml.bind.DatatypeConverter;

public class TestHash3 {

    public static void main(String[] args) throws Exception {
        String hexString = ""1234"";

        /*
         * NB!
         * Before passing hex string to DatatypeConverter.parseHexBinary(),
         * we need to check if the hex sting is even-length, 
         * otherwise DatatypeConverter.parseHexBinary() will throw a
         * java.lang.IllegalArgumentException: hexBinary needs to be even-length
         */
        hexString = (hexString.length() % 2 == 0) ? hexString : ""0"" + hexString;
        byte[] bytes = DatatypeConverter.parseHexBinary(hexString);

        MessageDigest md = MessageDigest.getInstance(""SHA-1"");
        byte[] byteData = md.digest(bytes);

        System.out.println(""1) SHA-1 hash for the hex string "" + hexString + "": "" +
                            bytesToHexString1(byteData));
        System.out.println(""2) SHA-1 hash for the hex string "" + hexString + "": "" +
                            bytesToHexString2(byteData));
        System.out.println(""3) SHA-1 hash for the hex string "" + hexString + "": "" +
                            bytesToHexString3(byteData));
        System.out.println(""4) SHA-1 hash for the hex string "" + hexString + "": "" +
                            bytesToHexString4(byteData));
    }

    public static String bytesToHexString1(byte[] bytes) {
        StringBuffer hexBuffer = new StringBuffer();
        for (int i = 0; i < bytes.length; i++) {
            hexBuffer.append(Integer.toString((bytes[i] & 0xFF) + 0x100, 16).substring(1));
        }

        return hexBuffer.toString();
    }

    public static String bytesToHexString2(byte[] bytes) {
        StringBuffer hexBuffer = new StringBuffer(bytes.length * 2);
        for (byte b: bytes) {
            int n = b & 0xFF;   // casting to integer to avoid problems with negative bytes
            if (n < 0x10) {
                hexBuffer.append(""0"");
            }
            hexBuffer.append(Integer.toHexString(n));
        }

        return hexBuffer.toString();
    }       

    public static String bytesToHexString3(byte[] bytes) {
        StringBuffer hexBuffer = new StringBuffer();
        for (int i = 0; i < bytes.length; i++) {
            String hexString = Integer.toHexString(0xff & bytes[i]);
            // NB! E.g.: Integer.toHexString(0x0C) will return ""C"", not ""0C""            
            if (hexString.length() == 1) {
                hexBuffer.append('0');
            }
            hexBuffer.append(hexString);
        }

        return hexBuffer.toString();
    }

    public static String bytesToHexString4(byte[] bytes) {
        String hexString = new BigInteger(1, bytes).toString(16);

        /*
         * NB!
         * We need an even-length hex string to propely represent bytes in hexadecimal.
         * A hexadecimal representation of one byte consists of two hex digits.
         * If the value is less than 16 (dec), it is prepended with zero
         * E.g.:
         * 1  (byte)    ==> 01 (hex)    // pay attention to the prepended zero
         * 15 (byte)    ==> 0F (hex)
         * 16 (byte)    ==> 10 (hex)    // no need to prepend
         * 255(byte)    ==> FF (hex)
         *
         * BigInteger.toString(16) can return both even and odd-length hex strings.
         * E.g.:
         * byte[] bytes = {15, 16}  // two bytes
         * BigInteger(1, bytes).toString(16) will produce (NB!): f10
         * But we need (NB!): 0f10
         * So we must check if the resulting hex string is even-length,
         * and if not, prepend it with zero.
         */
        return ((hexString.length() % 2 == 0) ? hexString : ""0"" + hexString);
    }
}

Output:
1) SHA-1 hash for the hex string 1234: ffa76d854a2969e7b9d83868d455512fce0fd74d
2) SHA-1 hash for the hex string 1234: ffa76d854a2969e7b9d83868d455512fce0fd74d
3) SHA-1 hash for the hex string 1234: ffa76d854a2969e7b9d83868d455512fce0fd74d
4) SHA-1 hash for the hex string 1234: ffa76d854a2969e7b9d83868d455512fce0fd74d


btw Checking if the hex string is even-length inside byteToHexString4() so it could be used independently.

UPDATE 2
The user @kan brought one more method of converting byte array to hex string, very simple one liner and the second fastest after the OP's method.
DatatypeConverter.printHexBinary(byte[] val)
","2744","<java><hash><hex><sha1><sha>","1","3","3","2018-03-02 01:43:19","15672400","7","3","693927","","2013-04-23 16:57:18","2013-03-27 21:09:25",""
"15669550","Get SHA1 of HexString like HashCalc does","HashCalc has, at the top, a field called ""Data Format"" I switch that to ""HexString"" then type in test value of 9a in the data field. I run a SHA-1 hash on it and the answer is:13cba177bcfad90e7b3de70616b2e54ba4bb107f
(NOTE: online hashers will hash ""9a"" as a string resulting in an answer of e8eef065fb7295044d65b305bab18a9a645d1abf. Which is wrong for this application)
Now, I need to embed this type of hashing into my Java program. This is what I got so far (wrapped in try/catch):
String ss = ""9a"";
ByteBuffer bb = ByteBuffer.allocate(8);  
byte[] ba = bb.putLong(Long.decode(""0x""+ss).longValue()).array();
MessageDigest md = MessageDigest.getInstance(""SHA-1"");
String results = encodeHex(md.digest(ba));
System.out.println(""sha:""+results);

However, my result is E73C417858807239DD5BC30BA978C14D57F80834
What am I doing wrong? 
EDIT: Added Hex tag back, it seems obvious that the data has to be in some sort of hex format. As HashCalc has to be set to ""HexString"" and not ""TextString"" which returns a different result. And the solution could well include a change to how Im dealing with these hex numbers. --> which turned out to be true
","I use a small utility class:
public abstract class Sha1Util
{
    private static final Charset UTF8 = Charset.forName(""UTF-8"");

    public static MessageDigest newSha1Digest()
    {
        try
        {
            return MessageDigest.getInstance(""SHA-1"");
        } catch (NoSuchAlgorithmException e)
        {
            throw new Error(e);
        }
    }

    public static void update(final MessageDigest digest, final String s)
    {
        digest.update(s.getBytes(UTF8));
    }

    public static String sha1sum(final MessageDigest digest)
    {
        return String.format(""%040x"", new BigInteger(1, digest.digest()));
    }
}

Test:
@Test
public void testSha1For9a()
{
    final MessageDigest md = SecUtil.newSha1Digest();
    SecUtil.update(md, ""9a"");// you could use several updates e.g. for salted passwords
    assertEquals(""e8eef065fb7295044d65b305bab18a9a645d1abf"", SecUtil.sha1sum(md));

}

","2744","<java><hash><hex><sha1><sha>","1","1","3","2018-03-02 01:43:19","15672400","7","3","693927","","2013-04-23 16:57:18","2013-03-27 21:09:25",""
"15669550","Get SHA1 of HexString like HashCalc does","HashCalc has, at the top, a field called ""Data Format"" I switch that to ""HexString"" then type in test value of 9a in the data field. I run a SHA-1 hash on it and the answer is:13cba177bcfad90e7b3de70616b2e54ba4bb107f
(NOTE: online hashers will hash ""9a"" as a string resulting in an answer of e8eef065fb7295044d65b305bab18a9a645d1abf. Which is wrong for this application)
Now, I need to embed this type of hashing into my Java program. This is what I got so far (wrapped in try/catch):
String ss = ""9a"";
ByteBuffer bb = ByteBuffer.allocate(8);  
byte[] ba = bb.putLong(Long.decode(""0x""+ss).longValue()).array();
MessageDigest md = MessageDigest.getInstance(""SHA-1"");
String results = encodeHex(md.digest(ba));
System.out.println(""sha:""+results);

However, my result is E73C417858807239DD5BC30BA978C14D57F80834
What am I doing wrong? 
EDIT: Added Hex tag back, it seems obvious that the data has to be in some sort of hex format. As HashCalc has to be set to ""HexString"" and not ""TextString"" which returns a different result. And the solution could well include a change to how Im dealing with these hex numbers. --> which turned out to be true
","I figured it out! Thanks to Louis Wasserman for inspiration in his comment to my question. When I used 000000000000009a with HashCalc it returned the same result as my function! I realized that I was forcing a certain data length (the length of a long). Turns out it needs to be an arbitrary length (like HashCalc... as I said, I needed to duplicate the HashCalc behavior, not just for 9a or what ever small test case we use, but for all possible data). Even longer than long. So these other solutions don't work here.
I got around this by converting the original hex string to a char[] array then concat them together in pairs and converting to a byte, in a loop, storing each in the byte[] that is passed to digest. This worked! Then I saw Kan's comment to his answer on  this, and showed me I was just reinventing the wheel there.
So here is the final code, and its amazingly the same size as the original:
private String HexToSHA1(String ss) throws IllegalArgumentException {
    MessageDigest md = null;
    try { md = MessageDigest.getInstance(""SHA-1""); }
    catch ( Exception e ) {}
    return byteArrayToHexString(md.digest(DatatypeConverter.parseHexBinary(ss)));
}

This runs pretty quick, not sure if there is even a faster way. Of course thats also based on how fast your byteArrayToHexString function is. Here is mine:
private String byteArrayToHexString(byte[] data) {
    char[] toDigits =  {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
    int l = data.length;
    char[] out = new char[l << 1];
    for (int i = 0, j = 0; i < l; i++) {
        out[j++] = toDigits[(0xF0 & data[i]) >>> 4];
        out[j++] = toDigits[0x0F & data[i]];
    }
    return new String(out);
}

And its pretty fast. Credit to someone somewhere. I didn't write it.
EDIT:
Moving char[] toDigits =  {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'}; to the global (or ""up one in scope"") makes it faster still.
","2744","<java><hash><hex><sha1><sha>","1","1","3","2018-03-02 01:43:19","15672400","7","3","693927","","2013-04-23 16:57:18","2013-03-27 21:09:25",""
"7276109","Hash from ""email+salt "" as a token to verify email","I'm verifying user email address. 
The way most people tell  is to create some unique token store it in db and 
send to user.
I'm doing it with just hashing (sha256) email addres with sitewide salt
and sending this hash to user.
Am i missing something or is this enough to verify?
","You can do that and if nobody gets the serverside salt, it's save. In the end it's email validation, and if you don't need to do it for legal reasons, there is no need to make it more complicated.
But it depends on your goals. Do want it to be extra safe? Do you want to be easy to implement? Do you want it easy to maintain? Are you thinking about execution time of your scripts?
BTW: One very nasty thing when having a long link in an email: There may be email cients which break your link, so maybe add the code along with the link and if the code is not completly transfered through the link, have a form where the user can add the code.
","2713","<salt><email-validation><sha256><sha><saltedhash>","2","1","2","2011-11-11 21:55:54","7276292","3","1","631619","","2011-11-11 21:55:54","2011-09-01 20:28:15",""
"7276109","Hash from ""email+salt "" as a token to verify email","I'm verifying user email address. 
The way most people tell  is to create some unique token store it in db and 
send to user.
I'm doing it with just hashing (sha256) email addres with sitewide salt
and sending this hash to user.
Am i missing something or is this enough to verify?
","A couple of things that might be worth a look (or not).
If someone finds out your salt, then they can reconstruct your hashes and flood your system.  In this case you'd want to make sure that a user requested addition of their e-mail address to whatever you're creating.  (That is, I wouldn't get rid of storing the hash in the DB altogether.)
Also, if the salt is the same, the hash will be the same if they request again from that same e-mail address.  Do you want a different hash each time a request is made, even for the same e-mail address?  You could concatenate the server date/time to the e-mail address before you hash it to make it different each time.
","2713","<salt><email-validation><sha256><sha><saltedhash>","2","2","2","2011-11-11 21:55:54","7276292","3","1","631619","","2011-11-11 21:55:54","2011-09-01 20:28:15",""
"26838341","SHA algorithm generates each time unique hash string for a same key","I know there are lots lots of articles available about hashing and encryption algorithm.
I have figure it out from them that use hashing function instead of encryption to store password in the database.
So I decided to use SHA-256 algorithm to generate hash key and I am storing that hash key into my server database instead of plain password.
Now I am really not able to understand how I should use it, because each time I am passing the same password to generate SHA key it gives me different than previous one, than how could I compare it with stored hash key in my database?
I am using java so my java code is
public class Test {
public static void main(String...arg) throws IOException{
    System.out.println(""First time"");
    String string64 = getEncryptedPassword(""FenilShah"");
    System.out.println(string64);
    System.out.println(StringUtils.newStringUtf8(Base64.decodeBase64(string64)));

    System.out.println(""\nSecond time"");
    string64 = getEncryptedPassword(""FenilShah"");
    System.out.println(string64);
    System.out.println(StringUtils.newStringUtf8(Base64.decodeBase64(string64)));

    System.out.println(""\nThird time"");
    string64 = getEncryptedPassword(""FenilShah"");
    System.out.println(string64);
    System.out.println(StringUtils.newStringUtf8(Base64.decodeBase64(string64)));

}

 public static String getEncryptedPassword(String clearTextPassword)   {  


        try {
          MessageDigest md = MessageDigest.getInstance(""SHA-256"");
          md.update(clearTextPassword.getBytes());
          byte pass[] = md.digest();
          System.out.println(pass.toString());
          return Base64.encodeBase64String(StringUtils.getBytesUtf8(pass.toString()));
        } catch (NoSuchAlgorithmException e) {
          //_log.error(""Failed to encrypt password."", e);
        }
        return """";
      }
 }

so the output is something like this
First time
[B@5bf825cc
W0JANWJmODI1Y2M=
[B@5bf825cc

Second time
[B@1abfb235
W0JAMWFiZmIyMzU=
[B@1abfb235

Third time
[B@1f4cc34b
W0JAMWY0Y2MzNGI=
[B@1f4cc34b

","This is your most immediate problem:
byte pass[] = md.digest();
System.out.println(pass.toString());

You're not returning the hash of the string. You're returning the result of calling toString() on a byte[]. Arrays in Java don't override toString(), so you get the default implementation, which has everything to do with the identity of the object and nothing to do with the data in the byte array:

The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object.

(Arrays don't override hashCode() either, so that's obtained from the default implementation in Object too...)
Basically, you need a different way of converting a byte[] to a String... or store the byte array directly in the database, of course. If you do want to convert to a string, I suggest you use either hex or base64. For base64, I'd suggest the iharder.net public domain library... or if you're using Java 8, you can use java.util.Base64. (It's astonishing that it took so long to get a base64 class into the standard libraries in a context other than XML etc, but there we go.)
return Base64.getEncoder().encodeToString(md.digest());

Your code has an additional problem though:
md.update(clearTextPassword.getBytes());

This uses the platform default encoding to convert the password into a byte array. That's not a good idea - it means you could end up getting different hashes based on what system your code is running on. It's better to specify the encoding explicitly:
md.update(clearTextPassword.getBytes(StandardCharsets.UTF_8));

Additionally, catching an exception if SHA-256 is missing, logging and continuing with a blank string is almost certainly the wrong approach. Do you really want to populate your database with empty strings, allowing anyone to log in with any password? If your system is in that state, the best thing you can do is almost certainly to fail any request to do anything with passwords. You probably want to convert the NoSuchAlgorithmException into some sort of RuntimeException and rethrow.
Finally, storing a simple SHA-256 hash probably isn't a good idea anyway.

You probably want an HMAC instead
You should at least use a random salt to avoid the same passwords having the same values in the database. (Otherwise, an attacker can use that information to their advantage.)

I'm far from an expert on security, so I won't advise you much further on the right way to do things - but I would actually suggest trying to find a well-respected library written by security experts rather than trying to implement this yourself. Security it very hard to do right.
","2707","<java><algorithm><encryption><hash><sha>","1","4","1","2014-11-10 07:07:18","26838386","0","4","","","","2014-11-10 06:56:13",""
"9368252","Is it possible to have SHA-512 collisions using this hash creation strategy?","Assuming that I am using this code to generate hashes:
static void Main(string[] args) {

    string id = Guid.Parse(""8681941A-76C2-4120-BC34-F800B5AAB5A5"".ToLower()).ToString();
    string date = DateTime.Today.ToString(""yyyy-MM-dd"");

    Console.WriteLine(id);
    Console.WriteLine(date);

    using (System.Security.Cryptography.SHA512Managed hashTool = 
        new System.Security.Cryptography.SHA512Managed()) {

        Byte[] PasswordAsByte = System.Text.Encoding.UTF8.GetBytes(string.Concat(id, date));
        Byte[] EncryptedBytes = hashTool.ComputeHash(PasswordAsByte);
        hashTool.Clear();

        Console.WriteLine(Convert.ToBase64String(EncryptedBytes));

    }
    Console.ReadLine();
}

In a real world example, I'll generate hashes with a GUID and Date as you see on the sample. I will get those values from database. 
Is it ever possible to have the same hash result with different values with this approach?
Edit:
As I indicated I will pull the values form database. As you can guess, the Guid is the id key which is unique (if I do not come across a miracle and sql server generates the same Guid for me for multiple times). And the datetime value will be the payment due date for the record. I demonstrated here with DateTime.Today but I won't definitely use this on prod.
","As in any hash function, it might happen very very very rarely.
A good hash function produces a different result from two neighbour inputs. SHA512 is considered a good hash algorithm, so it should not be a problem in your case.
","2653","<c#><hash><sha><sha512>","1","0","3","2012-05-30 14:05:46","9369427","7","","463785","","2012-02-21 08:08:58","2012-02-20 20:53:01",""
"9368252","Is it possible to have SHA-512 collisions using this hash creation strategy?","Assuming that I am using this code to generate hashes:
static void Main(string[] args) {

    string id = Guid.Parse(""8681941A-76C2-4120-BC34-F800B5AAB5A5"".ToLower()).ToString();
    string date = DateTime.Today.ToString(""yyyy-MM-dd"");

    Console.WriteLine(id);
    Console.WriteLine(date);

    using (System.Security.Cryptography.SHA512Managed hashTool = 
        new System.Security.Cryptography.SHA512Managed()) {

        Byte[] PasswordAsByte = System.Text.Encoding.UTF8.GetBytes(string.Concat(id, date));
        Byte[] EncryptedBytes = hashTool.ComputeHash(PasswordAsByte);
        hashTool.Clear();

        Console.WriteLine(Convert.ToBase64String(EncryptedBytes));

    }
    Console.ReadLine();
}

In a real world example, I'll generate hashes with a GUID and Date as you see on the sample. I will get those values from database. 
Is it ever possible to have the same hash result with different values with this approach?
Edit:
As I indicated I will pull the values form database. As you can guess, the Guid is the id key which is unique (if I do not come across a miracle and sql server generates the same Guid for me for multiple times). And the datetime value will be the payment due date for the record. I demonstrated here with DateTime.Today but I won't definitely use this on prod.
","You will definitely get a hash collision for a given GUID that was pulled more than once on the same day. For example, if you generate a hash for a particular GUID g, then pulling g at 2012-02-20 at 12:00 yields the same hash as if you pulled it at 18:00, since you only take into account the date, and not the time.
For unrelated GUIDs, it is still possible to have a hash collision. The space of possible hashes is 64 bits, which is less than infinity, which means that there are bound to be repeats by virtue of the pigeonhole principle. However, it's exceedingly unlikely -- in fact, it's so unlikely that you should treat it as zero.
","2653","<c#><hash><sha><sha512>","1","1","3","2012-05-30 14:05:46","9369427","7","","463785","","2012-02-21 08:08:58","2012-02-20 20:53:01",""
"9368252","Is it possible to have SHA-512 collisions using this hash creation strategy?","Assuming that I am using this code to generate hashes:
static void Main(string[] args) {

    string id = Guid.Parse(""8681941A-76C2-4120-BC34-F800B5AAB5A5"".ToLower()).ToString();
    string date = DateTime.Today.ToString(""yyyy-MM-dd"");

    Console.WriteLine(id);
    Console.WriteLine(date);

    using (System.Security.Cryptography.SHA512Managed hashTool = 
        new System.Security.Cryptography.SHA512Managed()) {

        Byte[] PasswordAsByte = System.Text.Encoding.UTF8.GetBytes(string.Concat(id, date));
        Byte[] EncryptedBytes = hashTool.ComputeHash(PasswordAsByte);
        hashTool.Clear();

        Console.WriteLine(Convert.ToBase64String(EncryptedBytes));

    }
    Console.ReadLine();
}

In a real world example, I'll generate hashes with a GUID and Date as you see on the sample. I will get those values from database. 
Is it ever possible to have the same hash result with different values with this approach?
Edit:
As I indicated I will pull the values form database. As you can guess, the Guid is the id key which is unique (if I do not come across a miracle and sql server generates the same Guid for me for multiple times). And the datetime value will be the payment due date for the record. I demonstrated here with DateTime.Today but I won't definitely use this on prod.
","I don't understand all those discussions?
even if you have 10 million entries in your db the chance of a collision is like
0.000000000003% (looked that up for sha256, so the chances for sha512 are even less)
even if you have 100 million entries you shouldn't worry about it, and if you really want to be sure, put something in between the text and then hash it.
$newtext= wordwrap(""mytexttexttext"", 8, ""myspliter"", true);

","2653","<c#><hash><sha><sha512>","1","0","3","2012-05-30 14:05:46","9369427","7","","463785","","2012-02-21 08:08:58","2012-02-20 20:53:01",""
"25128077","How does git assure that commit SHA keys for identical operations/data are still unique?","If I create a file foo with touch foo and then run shasum foo it will print out
da39a3ee5e6b4b0d3255bfef95601890afd80709.
No matter how often I run shasum foo or if I run it on a different computer it will always print da39a3ee5e6b4b0d3255bfef95601890afd80709 because, yep, it's the SHA1 representation of exactly the same contents. Empty contents in this case :)
However, if I do the following steps:
cd /some/where
mkdir demo
git init
touch foo
git add -A
git commit -m ""adding foo""

..and remember the SHA key of the commit (e.g. 959c363ed4cf147725360532454bc258c964c744).
Now, when I delete demo and repeat the exact same steps, still the commit SHA key will be different. And that is great and it's important to assure identity.
What I would like to know though is, what exactly does git do to assure commit hashes are always unique even if they do the exact same operations with exactly the same contents. Does git simply use something like uuidgen to generate a unique id for the commit object or does it do something different based on a combination of a timestamp, your mac address, your wifi signals etc pp.
","It doesn't, but you will have to manually construct the commit to get the timestamps to line up. You can manually construct a whole valid repository identical to another, by editing the .git/objects files, but because newer commits contain the hashes of older commits this will of course have to be exactly identical.
","2639","<git><uuid><sha>","9","2","4","2016-04-30 01:02:11","25128596","4","","","","","2014-08-04 21:43:47",""
"25128077","How does git assure that commit SHA keys for identical operations/data are still unique?","If I create a file foo with touch foo and then run shasum foo it will print out
da39a3ee5e6b4b0d3255bfef95601890afd80709.
No matter how often I run shasum foo or if I run it on a different computer it will always print da39a3ee5e6b4b0d3255bfef95601890afd80709 because, yep, it's the SHA1 representation of exactly the same contents. Empty contents in this case :)
However, if I do the following steps:
cd /some/where
mkdir demo
git init
touch foo
git add -A
git commit -m ""adding foo""

..and remember the SHA key of the commit (e.g. 959c363ed4cf147725360532454bc258c964c744).
Now, when I delete demo and repeat the exact same steps, still the commit SHA key will be different. And that is great and it's important to assure identity.
What I would like to know though is, what exactly does git do to assure commit hashes are always unique even if they do the exact same operations with exactly the same contents. Does git simply use something like uuidgen to generate a unique id for the commit object or does it do something different based on a combination of a timestamp, your mac address, your wifi signals etc pp.
","
What I would like to know though is, what exactly does git do to assure commit hashes are always unique even if they do the exact same operations with exactly the same contents.

Nothing.  If you create the same contents, you get the same SHA-1.
First, however, you need to realize that ""same contents"" of a commit means that—provided you don't get an accidental SHA-1 collision1 or find a way to break SHA-1—you must create the same complete repository history leading up to and including the commit itself, including all the same trees, author-names, time-stamps, and so on.
This is because the contents of a commit are what you see if you run git cat-file -p <sha-1> on a commit (plus the tag-and-size field that says ""this object is of type commit"", so that there are no trivial ways to break things by creating a blob with the same contents as a previous commit).  Here's one as an example:
$ git cat-file -p 996b0fdbb4ff63bfd880b3901f054139c95611cf
tree e760f781f2c997fd1d26f2779ac00d42ca93f534
parent 6da748a7cebe3911448fabf9426f81c9df9ec54f
parent 740c281d21ef5b27f6f1b942a4f2fc20f51e8c7e
author Junio C Hamano <gitster@pobox.com> 1406140600 -0700
committer Junio C Hamano <gitster@pobox.com> 1406140600 -0700

Sync with v2.0.3

* maint:
  Git 2.0.3
  .mailmap: combine Stefan Beller's emails
  git.1: switch homepage for stats

Note that this string includes the tree and its SHA-1, both of this commit's parent SHA-1s, the author and timestamp, the committer and timestamp, and the message.  If you change even a single bit of this—such as by trying to change the underlying tree, or using some different parent commit(s)—you will get a new, different SHA-1, rather than 996b0fdbb4ff63bfd880b3901f054139c95611cf.
So the answer to this:

So in theory if me and you do exactly the same steps at exactly the same time with exactly the same configured author, email etc, we would actually get the same commit SHA key?

is ""yes"".  However ... you must start with the same staging area (this is what will become the tree), and the same parent commits.  If you then configure your author, email, etc., exactly the same as the other guy, and both of you create a new commit at the same second (or using git's environment variables2 to force the time stamps), you both get the same new commit.
Which is precisely what we want.  It doesn't matter if you create it, when you're named ""me"", or I create it, when I'm named ""me"", if all the rest of the contents are the same.  Because whoever creates it, the other ""me"" can clone it, and then we both have the same thing that way too.
(If I want to be sure that the ""me"" that creates something is not confused with the real me, I need to add something unique, that I know and the other me doesn't.  Of course, if I publish this thing somewhere, the other me know knows it.  But this is what signed, annotated tags are for.  They can contain a GPG signature.)

1The chances of an accidental hash collision (for any pair of objects; chances rise with more objects) are 1 out of 2160, which is ... very small. :-)  The rise is actually very rapid, so that by the time you have a million objects, it's about 1 out of 2121.  The formula I use here is:
1 - exp(((-(n * (n-1))) / (2 * r))
where r = 2160 and n is the number of objects.  Without the subtraction from 1, the equation calculates the ""safety margin"", as it were: the chance that we won't have an accidental hash collision.  If we want to keep this number in the same range as the safety margin that a disk drive won't read back the wrong contents for a file—or at least, that disk-makers claim—we need to keep it around 10-18, which means we need to avoid putting more than about 1.7 quadrillion (1.7E15) objects in our git databases.
2There are many git environment variables that you can set to override various defaults.  The ones for the author and committer, including date and email, are:

GIT_AUTHOR_NAME
GIT_AUTHOR_EMAIL
GIT_AUTHOR_DATE
GIT_COMMITTER_NAME
GIT_COMMITTER_EMAIL
GIT_COMMITTER_DATE
EMAIL

as described in the git commit-tree documentation.
","2639","<git><uuid><sha>","9","11","4","2016-04-30 01:02:11","25128596","4","","","","","2014-08-04 21:43:47",""
"25128077","How does git assure that commit SHA keys for identical operations/data are still unique?","If I create a file foo with touch foo and then run shasum foo it will print out
da39a3ee5e6b4b0d3255bfef95601890afd80709.
No matter how often I run shasum foo or if I run it on a different computer it will always print da39a3ee5e6b4b0d3255bfef95601890afd80709 because, yep, it's the SHA1 representation of exactly the same contents. Empty contents in this case :)
However, if I do the following steps:
cd /some/where
mkdir demo
git init
touch foo
git add -A
git commit -m ""adding foo""

..and remember the SHA key of the commit (e.g. 959c363ed4cf147725360532454bc258c964c744).
Now, when I delete demo and repeat the exact same steps, still the commit SHA key will be different. And that is great and it's important to assure identity.
What I would like to know though is, what exactly does git do to assure commit hashes are always unique even if they do the exact same operations with exactly the same contents. Does git simply use something like uuidgen to generate a unique id for the commit object or does it do something different based on a combination of a timestamp, your mac address, your wifi signals etc pp.
","The only things which are SHA-1'd to give the commit object its reference are what is shown by git show <commit>.
commit e6e53f5256c47b039ed19e95a073484dbb97cbf7
tree 543b9bebdc6bd5c4b22136034a95dd097a57d3dd
author Alex Balhatchet <kaoru@slackwise.net> 1406774132 -0700
committer Alex Balhatchet <kaoru@slackwise.net> 1406774132 -0700

    foo

That is:

The tree's id
The author name, email
The author commit timestamp
The committer name, email
The committer timestamp

The reason the examples with --date from other answers haven't worked is because you need to override both the committer timestamp and the author timestamp.
For example the following is completely repeatable:
alex@yuzu:~$ ( mkdir foo ; cd foo ; git init ; export GIT_AUTHOR_DATE='Wed Jul 30 19:35:32 2014 -0700'; export GIT_COMMITTER_DATE=$GIT_AUTHOR_DATE; touch README; git add README; git commit README --message 'foo' --author 'Foo Bar <foo@example.com>'; git show HEAD --format=raw ; cd .. ; rm -rf foo ) 2>&1 | grep '^commit '
commit 7438e0a18888854650e6a53a9a5d823d6382de45

If you run it on your machine you should get exactly the same output.
Update
If you get different output it should at least be repeatable. For example I get different output for different versions of git; 1.7.10.4 reports a new empty README file as 0 files changed whereas 1.9.1 reports it as 1 file changed, 0 insertions(+), 0 deletions(-) which changes the commit object's contents.
","2639","<git><uuid><sha>","9","2","4","2016-04-30 01:02:11","25128596","4","","","","","2014-08-04 21:43:47",""
"25128077","How does git assure that commit SHA keys for identical operations/data are still unique?","If I create a file foo with touch foo and then run shasum foo it will print out
da39a3ee5e6b4b0d3255bfef95601890afd80709.
No matter how often I run shasum foo or if I run it on a different computer it will always print da39a3ee5e6b4b0d3255bfef95601890afd80709 because, yep, it's the SHA1 representation of exactly the same contents. Empty contents in this case :)
However, if I do the following steps:
cd /some/where
mkdir demo
git init
touch foo
git add -A
git commit -m ""adding foo""

..and remember the SHA key of the commit (e.g. 959c363ed4cf147725360532454bc258c964c744).
Now, when I delete demo and repeat the exact same steps, still the commit SHA key will be different. And that is great and it's important to assure identity.
What I would like to know though is, what exactly does git do to assure commit hashes are always unique even if they do the exact same operations with exactly the same contents. Does git simply use something like uuidgen to generate a unique id for the commit object or does it do something different based on a combination of a timestamp, your mac address, your wifi signals etc pp.
","This Gist from Carl Mäsak explains it better than I ever could:
https://gist.github.com/masak/2415865
alex@yuzu:~/foo$ git show HEAD
commit 7438e0a18888854650e6a53a9a5d823d6382de45
Author: Foo Bar <foo@example.com>
Date:   Wed Jul 30 19:35:32 2014 -0700

    foo

diff --git README README
new file mode 100644
index 0000000..e69de29

Which is the SHA-1 checksum of ""commit\0"" followed by a character count (length) followed by git cat-file commit HEAD.
alex@yuzu:~/foo$ git cat-file commit HEAD
tree 543b9bebdc6bd5c4b22136034a95dd097a57d3dd
author Foo Bar <foo@example.com> 1406774132 -0700
committer Alex Balhatchet <kaoru@slackwise.net> 1406774132 -0700

foo

Put it all together and...
alex@yuzu:~/foo$ (printf ""commit %s\0"" $(git cat-file commit HEAD | wc -c); git cat-file commit HEAD) | sha1sum
7438e0a18888854650e6a53a9a5d823d6382de45  -

The sha1sum output matches the commit SHA-1!
","2639","<git><uuid><sha>","9","0","4","2016-04-30 01:02:11","25128596","4","","","","","2014-08-04 21:43:47",""
"37513084","jarsigner: java.lang.SecurityException:SHA1 digest error for META-INF/CERT.RSA android error while updating application","I am getting this error while i am updating my android application, i tried signing new Application on same system there is no problem with that,
when updating the same application i got this error.
I need help, i searched but nothing worked for me.

I am using android studio when i updated studio to 2.2 preview 1 i am getting this error.
java 1.8.0_92 installed in my System.
","I found the solution , just extract apk with 7zip and deleted the META-INF folder and re-signed Apk

","2637","<java><android><sha><meta-inf>","2","3","2","2016-08-28 15:19:41","37516743","1","1","","","","2016-05-29 17:52:28",""
"37513084","jarsigner: java.lang.SecurityException:SHA1 digest error for META-INF/CERT.RSA android error while updating application","I am getting this error while i am updating my android application, i tried signing new Application on same system there is no problem with that,
when updating the same application i got this error.
I need help, i searched but nothing worked for me.

I am using android studio when i updated studio to 2.2 preview 1 i am getting this error.
java 1.8.0_92 installed in my System.
","This one works for me.
Rebuild Project > Clean Project (Is this necessary?)> Generate Signed APK
","2637","<java><android><sha><meta-inf>","2","0","2","2016-08-28 15:19:41","37516743","1","1","","","","2016-05-29 17:52:28",""
"10981660","Why do md5 and sha-* only use alphanumeric characters in their hash result?","I understand not wanting to use '\0', but all the rest in the extended ASCII range is usable right?
Wouldn't this provide a much better/secure/""less coliding"" hash?
","The result is just hexadecimal encoded to be better readable.
","2627","<hash><ascii><sha><md5sum>","2","0","4","2012-06-11 14:21:11","10981857","0","","","","","2012-06-11 14:02:53",""
"10981660","Why do md5 and sha-* only use alphanumeric characters in their hash result?","I understand not wanting to use '\0', but all the rest in the extended ASCII range is usable right?
Wouldn't this provide a much better/secure/""less coliding"" hash?
","In fact, those hash algorithms are outputting numbers, not strings. They use only letters a-f in combination with numbers 0-9, which makes the output a hexadecimal number.
","2627","<hash><ascii><sha><md5sum>","2","0","4","2012-06-11 14:21:11","10981857","0","","","","","2012-06-11 14:02:53",""
"10981660","Why do md5 and sha-* only use alphanumeric characters in their hash result?","I understand not wanting to use '\0', but all the rest in the extended ASCII range is usable right?
Wouldn't this provide a much better/secure/""less coliding"" hash?
","MD5 produces an 128 bit hash. (16 byte)
sha, depending of whether is sha1 or sha256 produces either 160 bit (20 byte) or 256 bit (32 byte) hash.
Note that I'm talking about binary length/strength. The longer the less likely a collision occurs.
The fact that most users stick it into a DB field or whatnot makes it convenient to convert it to ASCII using varions binary-ascii conversion algos. This should not influence the strength of collision probability at all since you'll end up with a larger ASCII string.
FWIW I've been using SHA1, SHA256 in crypto products in binary form for over 5 years and I'd recommend choosing hashes in this following order, from the strongest to the weakest: SHA256, SHA1, MD5. There is a website that can ""reverse"" MD5 so I'd strongly suggest against it.
","2627","<hash><ascii><sha><md5sum>","2","0","4","2012-06-11 14:21:11","10981857","0","","","","","2012-06-11 14:02:53",""
"10981660","Why do md5 and sha-* only use alphanumeric characters in their hash result?","I understand not wanting to use '\0', but all the rest in the extended ASCII range is usable right?
Wouldn't this provide a much better/secure/""less coliding"" hash?
","You're starting from false premise -- they produce a result that can (does) include all 8-bit values from 0 to 255. Just for example, one of the test vectors for SHA-256 is an input of ""abc"". The result from this (in hexadecimal) is:
ba7816bf 8f01cfea 414140de 5dae2223 b00361a3 96177a9c b410ff61 f20015ad

Just within that test, the result includes bytes with values from 0x03 to 0xff.
For display, that may be (often is) rendered in something like hexadecimal. For transmission in email they're often encoded with something like MIME or UUENCODE. The hash itself, however, is not limited in this way.
Transforming the result this way makes no difference to collision resistance -- you still have 160/256/whatever bits of actual data, but the representation is expanded.
","2627","<hash><ascii><sha><md5sum>","2","3","4","2012-06-11 14:21:11","10981857","0","","","","","2012-06-11 14:02:53",""
"24165227","PHP SHA-256 check sum in base64 to match that of Java","I have java program which calculates SHA-256 checksum as follows. For example, if I provide the input abcd123ABCD00-4000 it outputs 0QtyIu4B+lU+TLqM/zfJz5ULVpyXgfLRs5mKXCQvbHM= . It also matches the online check sum calculator.
However the PHP code I used won't match it.
PHP code : 
$s = 'abcd123ABCD00-4000';
$signature = base64_encode(hash_hmac(""sha256"", $s, True)); 
print  base64_encode($signature); 

Output : TWpRM1pEWXpaVFl4TURoallqTXdPRFV6WVRrNU5XVTRNRGxoWkRJMU1XWTVNREk1TnpBeU4ySXhaR0psTW1ZMk16Y3hPRE01WldFelkySXhOalJrWXc9PQ==
Java Code : 
private static String getSHA256Hash(String text) {


    String hash = null;
    MessageDigest md = null;


    try {

      md = MessageDigest.getInstance(""SHA-256"");

      md.update(text.getBytes(""UTF-8""));

      byte[] shaDig = md.digest();
      // hash = Hex.encodeHexString(shaDig);
      hash = Base64.encodeBase64String(shaDig);

    } catch (NoSuchAlgorithmException ex) {


    } catch (UnsupportedEncodingException e) {

      e.printStackTrace();
    }
    return hash;

  }

Output : 0QtyIu4B+lU+TLqM/zfJz5ULVpyXgfLRs5mKXCQvbHM=
Here what I want is to get the equivalent result in PHP (i.e to change PHP code to match result of the Java program[ I won't able to change the Java code ]. Any help is appreciated
","If you use hash() and base64 encode once you get the same result.
$s = 'abcd123ABCD00-4000';
$signature = base64_encode(hash(""sha256"", $s, True)); 
print  $signature; // 0QtyIu4B+lU+TLqM/zfJz5ULVpyXgfLRs5mKXCQvbHM=

","2572","<java><php><sha>","2","8","1","2014-06-11 14:24:54","24165458","2","3","","","","2014-06-11 14:15:28",""
"45385707","How to efficiently hash (SHA 256) in golang data where only the last few bytes changes","Assuming you had 80 bytes of data and only the last 4 bytes was constantly changing, how would you efficiently hash the total 80 bytes using Go. In essence, the first 76 bytes are the same, while the last 4 bytes keeps changing. Ideally, you want to keep a copy of the hash digest for the first 76 bytes and just keep changing the last 4.
","You can try the following examples on the Go Playground. Benchmark results is at the end.
Note: the implementations below are not safe for concurrent use; I intentionally made them like this to be simpler and faster.
Fastest when using only public API (always hashes all input)
The general concept and interface of Go's hash algorithms is the hash.Hash interface. This does not allow you to save the state of the hasher and to return or rewind to the saved state. So using the public hash APIs of the Go standard lib, you always have to calculate the hash from start.
What the public API offers is to reuse an already constructed hasher to calculate the hash of a new input, using the Hash.Reset() method. This is nice so that no (memory) allocations will be needed to calculate multiple hash values. Also you may take advantage of the optional slice that may be passed to Hash.Sum() which is used to append the current hash to. This is nice so that no allocations will be needed to receive the hash results either.
Here's an example that takes advantage of these:
type Cached1 struct {
    hasher hash.Hash
    result [sha256.Size]byte
}

func NewCached1() *Cached1 {
    return &Cached1{hasher: sha256.New()}
}

func (c *Cached1) Sum(data []byte) []byte {
    c.hasher.Reset()
    c.hasher.Write(data)
    return c.hasher.Sum(c.result[:0])
}

Test data
We'll use the following test data:
var fixed = bytes.Repeat([]byte{1}, 76)
var variantA = []byte{1, 1, 1, 1}
var variantB = []byte{2, 2, 2, 2}

var data = append(append([]byte{}, fixed...), variantA...)
var data2 = append(append([]byte{}, fixed...), variantB...)

var c1 = NewCached1()

First let's get authentic results (to verify if our hasher works correctly):
fmt.Printf(""%x\n"", sha256.Sum256(data))
fmt.Printf(""%x\n"", sha256.Sum256(data2))

Output:
fb8e69bdfa2ad15be7cc8a346b74e773d059f96cfc92da89e631895422fe966a
10ef52823dad5d1212e8ac83b54c001bfb9a03dc0c7c3c83246fb988aa788c0c

Now let's check our Cached1 hasher:
fmt.Printf(""%x\n"", c1.Sum(data))
fmt.Printf(""%x\n"", c1.Sum(data2))

Output is the same:
fb8e69bdfa2ad15be7cc8a346b74e773d059f96cfc92da89e631895422fe966a
10ef52823dad5d1212e8ac83b54c001bfb9a03dc0c7c3c83246fb988aa788c0c

Even faster but may break (in future Go releases): hashes only the last 4 bytes
Now let's see a less flexible solution which truly calculates the hash of the first 76 fixed part only once.
The hasher of the crypto/sha256 package is the unexported sha256.digest type (more precisely a pointer to this type):
// digest represents the partial evaluation of a checksum.
type digest struct {
    h     [8]uint32
    x     [chunk]byte
    nx    int
    len   uint64
    is224 bool // mark if this digest is SHA-224
}

A value of the digest struct type basically holds the current state of the hasher.
What we may do is feed the hasher the fixed, first 76 bytes, and then save this struct value. When we need to caclulate the hash of some 80 bytes data where the first 76 is the same, we use this saved value as a starting point, and then feed the varying last 4 bytes.
Note that it's enough to simply save this struct value as it contains no pointers and no descriptor types like slices and maps. Else we would also have to make a copy of those, but we're ""lucky"". So this solution would need adjustment if a future implementation of crypto/sha256 would add a pointer or slice field for example.
Since sha256.digest is unexported, we can only use reflection (reflect package) to achieve our goals, which inherently will add some delays to computation.
Example implementation that does this:
type Cached2 struct {
    origv   reflect.Value
    hasherv reflect.Value
    hasher  hash.Hash

    result [sha256.Size]byte
}

func NewCached2(fixed []byte) *Cached2 {
    h := sha256.New()
    h.Write(fixed)

    c := &Cached2{origv: reflect.ValueOf(h).Elem()}
    hasherv := reflect.New(c.origv.Type())
    c.hasher = hasherv.Interface().(hash.Hash)
    c.hasherv = hasherv.Elem()

    return c
}

func (c *Cached2) Sum(data []byte) []byte {
    // Set state of the fixed hash:
    c.hasherv.Set(c.origv)

    c.hasher.Write(data)
    return c.hasher.Sum(c.result[:0])
}

Testing it:
var c2 = NewCached2(fixed)
fmt.Printf(""%x\n"", c2.Sum(variantA))
fmt.Printf(""%x\n"", c2.Sum(variantB))

Output is again the same:
fb8e69bdfa2ad15be7cc8a346b74e773d059f96cfc92da89e631895422fe966a
10ef52823dad5d1212e8ac83b54c001bfb9a03dc0c7c3c83246fb988aa788c0c

So it works.
The ""ultimate"", fastest solution
Cached2 could be faster if reflection would not be involved. If we want an even faster solution, simply we can make a copy of the sha256.digest type and its methods into our package, so we can directly use it without having to resort to reflection.
If we do this, we will have access to the digest struct value, and we can simply make a copy of it like:
var d digest
// init d
saved := d

And restoring it is like:
d = saved

I simply ""cloned"" the crypto/sha256 package to my workspace, and changed / exported the digest type as Digest just for demonstration purposes. Then using this mysha256.Digest type I implemented Cached3 like this:
type Cached3 struct {
    orig   mysha256.Digest
    result [sha256.Size]byte
}

func NewCached3(fixed []byte) *Cached3 {
    var d mysha256.Digest
    d.Reset()
    d.Write(fixed)

    return &Cached3{orig: d}
}

func (c *Cached3) Sum(data []byte) []byte {
    // Make a copy of the fixed hash:
    d := c.orig
    d.Write(data)
    return d.Sum(c.result[:0])
}

Testing it:
var c3 = NewCached3(fixed)

fmt.Printf(""%x\n"", c3.Sum(variantA))
fmt.Printf(""%x\n"", c3.Sum(variantB))

Output again is the same. So this works too.
Benchmarks
We can benchmark performance with this code:
func BenchmarkCached1(b *testing.B) {
    for i := 0; i < b.N; i++ {
        c1.Sum(data)
        c1.Sum(data2)
    }
}

func BenchmarkCached2(b *testing.B) {
    for i := 0; i < b.N; i++ {
        c2.Sum(variantA)
        c2.Sum(variantB)
    }
}

func BenchmarkCached3(b *testing.B) {
    for i := 0; i < b.N; i++ {
        c3.Sum(variantA)
        c3.Sum(variantB)
    }
}

Benchmark results (go test -bench . -benchmem):
BenchmarkCached1-4   1000000     1569 ns/op     0 B/op    0 allocs/op
BenchmarkCached2-4   2000000      926 ns/op     0 B/op    0 allocs/op
BenchmarkCached3-4   2000000      872 ns/op     0 B/op    0 allocs/op

Cached2 is approximately 41% faster than Cached1 which is quite noticable and nice. Cached3 only gives a ""little"" performance boost compared to Cached2, another 6%. Cached3 is 44% faster than Cached1.
Also note that none of the solutions use any allocations which is also nice.
Conclusion
For that extra 40% or 44%, I would probably not go for the Cached2 or Cached3 solutions. Of course it really depends on how important the performance is to you. If it is important, I think the Cached2 solution presents a fine compromise between minimum added complexity and the noticeable performance gain. It does pose a threat as future Go implementations may break it; if it is a problem, Cached3 solves this by copying the current implementation (and also improves its performance a little).
","2539","<go><hash><sha><blockchain>","4","5","1","2017-07-30 20:05:05","","1","2","","","","2017-07-29 05:38:52",""
"8393117","How many characters should I reserve in my database for storing SHA512 hash?","Column: pwdhash
Type: char
Many web pages give me the bit size, not a character size.
Should I use a binary field instead?
","For readability reasons, these are sometimes stored as hexadecimal digits (two digits per byte).  So 512 bits requires 64 bytes, which would need a char(128) field.  If you used a binary field, it would only need 64 bytes.
","2537","<security><passwords><sha><sha512>","0","1","3","2011-12-05 23:10:53","8393172","0","","","","","2011-12-05 22:58:59",""
"8393117","How many characters should I reserve in my database for storing SHA512 hash?","Column: pwdhash
Type: char
Many web pages give me the bit size, not a character size.
Should I use a binary field instead?
","64 bytes when stored in BLOB.
128 characters when stored as hex.
~88 characters when stored as Base64.
","2537","<security><passwords><sha><sha512>","0","4","3","2011-12-05 23:10:53","8393172","0","","","","","2011-12-05 22:58:59",""
"8393117","How many characters should I reserve in my database for storing SHA512 hash?","Column: pwdhash
Type: char
Many web pages give me the bit size, not a character size.
Should I use a binary field instead?
","Yes, you should use a binary field.
A hash is not a string.
","2537","<security><passwords><sha><sha512>","0","2","3","2011-12-05 23:10:53","8393172","0","","","","","2011-12-05 22:58:59",""
"10633173","What is the logic behind django password encryption","I need to make mobile app using  sencha as client  and  django as server
I am sending request as follows to server
url: 'http://localhost:8000/api/user/?format=jsonp',
                method: 'GET',
        headers : {'Authorization' : CryptoJS.HmacSHA256(""password"", ""1154590211545902""),'Content-Type':'application/json;charset=utf-8'
         }

I need to query request.META.get('HTTP_AUTHORIZATION') with the password in the database.
request.META.get('HTTP_AUTHORIZATION') return encrypted value for the password like  ea121221rtrtrt7878237878787  which is irreversible
Any ideas?
Thank you
","Assuming you're using the built-in authentication framework, this is fully documented: Manually checking a user's password.
","2526","<python><django><authentication><encryption><sha>","1","1","2","2012-05-17 10:05:18","10633584","0","","1355249","","2012-05-17 09:59:28","2012-05-17 09:39:05",""
"10633173","What is the logic behind django password encryption","I need to make mobile app using  sencha as client  and  django as server
I am sending request as follows to server
url: 'http://localhost:8000/api/user/?format=jsonp',
                method: 'GET',
        headers : {'Authorization' : CryptoJS.HmacSHA256(""password"", ""1154590211545902""),'Content-Type':'application/json;charset=utf-8'
         }

I need to query request.META.get('HTTP_AUTHORIZATION') with the password in the database.
request.META.get('HTTP_AUTHORIZATION') return encrypted value for the password like  ea121221rtrtrt7878237878787  which is irreversible
Any ideas?
Thank you
","
Django authentication module doesn't store the password in the database as a plain text.   
rather it apply hashing algorithms like 'SHA1' on the password and stores it (as a hash value).
From the hash value you can't get the password as plain text.
You can apply the same hashing algorithm on the given password and check against the stored password.

","2526","<python><django><authentication><encryption><sha>","1","2","2","2012-05-17 10:05:18","10633584","0","","1355249","","2012-05-17 09:59:28","2012-05-17 09:39:05",""
"18977462","git SHA1 0000000000000000000000000000000000000000 (all zeroes), is this normal?","I have a yet uncommited branch in git with SHA1 0000000000000000000000000000000000000000 (all zeroes), is this normal or did I corrupt the git repository?
Please don't answer yes there's one in 2^160, or 0.00000000000000000000000000000000000000000000006842277657836021% probabilities to have that SHA1.
I am reasonably safe I'm not the lucky guy who got the SHA1 of 0000000000000000000000000000000000000000 in his git repository. 
","A commit includes, among other metadata, the commit date. So the commit hash can't be displayed until the commit has actually been created. What you're seeing is not a commit SHA, it's just a default value used in the UI.
","2522","<git><sha>","9","9","2","2013-09-24 13:05:16","18979431","8","4","","","","2013-09-24 09:17:59",""
"18977462","git SHA1 0000000000000000000000000000000000000000 (all zeroes), is this normal?","I have a yet uncommited branch in git with SHA1 0000000000000000000000000000000000000000 (all zeroes), is this normal or did I corrupt the git repository?
Please don't answer yes there's one in 2^160, or 0.00000000000000000000000000000000000000000000006842277657836021% probabilities to have that SHA1.
I am reasonably safe I'm not the lucky guy who got the SHA1 of 0000000000000000000000000000000000000000 in his git repository. 
","Note, you can find the ""all-zeros SHA1"" all the way back to commit f65fdf (June 30th, 2005, v0.99 of git)

Linus Torvalds:
A ""old ref"" of all zeroes is considered a ""don't care"" ref, and allows us to say ""write the new ref regardless of what the old ref contained (or even if it existed at all)"".
This allows (if git-send-pack were to do it) creating new refs, and fixing up old ones.


As SzG mentioned in the comments, this is the kind of SHA1 you find in Git receive/update hooks and new branches, representing an ""old-ref"" for a non-existent object (while the ""new-ref"" would create said object, like a branch).
","2522","<git><sha>","9","9","2","2013-09-24 13:05:16","18979431","8","4","","","","2013-09-24 09:17:59",""
"18877960","How to set DigestMethod to Sha 256 WCF?","I'm writing a client using WCF and I need to set the signaturemethod algorithm to rsa-sha1 and the DigestMethod to sha256.  None of the enum values in the SecurityAlgorithmSuite support this.
So, I want this in my SOAP request:
   <ds:SignatureMethod Algorithm=""http://www.w3.org/2000/09/xmldsig#rsa-sha1""/>
   <ds:Reference URI=""#TS-25"">
   <ds:Transforms>
   <ds:Transform Algorithm=""http://www.w3.org/2001/10/xml-exc-c14n#"">
   </ds:Transform>
   </ds:Transforms>
   <ds:DigestMethod Algorithm=""http://www.w3.org/2001/04/xmlenc#sha256""/>

My code:
    Dim asbe As System.ServiceModel.Channels.AsymmetricSecurityBindingElement
    asbe = New System.ServiceModel.Channels.AsymmetricSecurityBindingElement

    asbe.MessageSecurityVersion = _
        MessageSecurityVersion.WSSecurity11WSTrustFebruary2005WSSecureConversationFebruary2005WSSecurityPolicy11

    asbe.InitiatorTokenParameters = New System.ServiceModel.Security.Tokens.X509SecurityTokenParameters(System.ServiceModel.Security.Tokens.X509KeyIdentifierClauseType.Thumbprint, SecurityTokenInclusionMode.AlwaysToRecipient)
    asbe.RecipientTokenParameters = New System.ServiceModel.Security.Tokens.X509SecurityTokenParameters(System.ServiceModel.Security.Tokens.X509KeyIdentifierClauseType.Thumbprint, SecurityTokenInclusionMode.AlwaysToInitiator)


    asbe.MessageProtectionOrder = System.ServiceModel.Security.MessageProtectionOrder.SignBeforeEncrypt

    asbe.SecurityHeaderLayout = System.ServiceModel.Channels.SecurityHeaderLayout.Strict
    asbe.EnableUnsecuredResponse = True 
    asbe.IncludeTimestamp = True 
    asbe.SetKeyDerivation(False)

    asbe.DefaultAlgorithmSuite = System.ServiceModel.Security.SecurityAlgorithmSuite.Basic128Sha256Rsa15

    Dim usernameToken As New UserNameSecurityTokenParameters
    usernameToken.InclusionMode = SecurityTokenInclusionMode.AlwaysToRecipient
    asbe.EndpointSupportingTokenParameters.Signed.Add(usernameToken)
    asbe.AllowInsecureTransport = True

    Dim myBinding As CustomBinding
    myBinding = New CustomBinding

    myBinding.Elements.Add(asbe)
    myBinding.Elements.Add(New TextMessageEncodingBindingElement(MessageVersion.Soap11, Encoding.UTF8))

    Dim httpsBindingElement As HttpsTransportBindingElement  
    httpsBindingElement = New HttpsTransportBindingElement
    myBinding.Elements.Add(httpsBindingElement)

    Return myBinding

","To resolve this issue you have to create a custom class that inherits SecurityAlgorithmSuite. You can then set the Default properties on the overrideable methods to whatever you need. To use it, instead of:   
asbe.DefaultAlgorithmSuite = System.ServiceModel.Security.SecurityAlgorithmSuite.Basic128Sha256Rsa15

you would do:
asbe.DefaultAlgorithmSuite = new CustomAlgorithmSuiteclass

then your DefaultAlgorithmSuite property on the proxy object will contain all of the defaults set in the custom class.
I didn't figure this out credit goes to: http://social.msdn.microsoft.com/Forums/vstudio/en-US/8b149878-f9a2-44e3-afd4-68884b02e129/algorithm-suite-wcf-ws-security
","2496","<algorithm><wcf><security><sha>","2","1","1","2016-05-27 14:14:18","27135164","0","1","1775643","","2016-05-27 14:14:18","2013-09-18 16:50:52",""
"25779829","openssl input in hexadecimal for bash","How do we input value and key as hexadecimal values?
echo -n ""value"" | openssl dgst -sha1 -hmac ""key""
$value=11111111FFAA2211
$key=11111111FFAA2211000000000011BBFF
echo -n ""$value"" | openssl dgst -sha1 -hmac ""$key""

is not working either.
","I just managed to solved it, it's the use of the '-macopt hexkey:string' option.
echo -n '4869205468657265' | xxd -r -p | openssl dgst -sha512 -mac HMAC -macopt hexkey:0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b
(stdin)= 87aa7cdea5ef619d4ff0b4241a1d6cb02379f4e2ce4ec2787ad0b30545e17cdedaa833b7d6b8a702038b274eaea3f4e4be9d914eeb61f1702e696c203a126854
or
key='0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b'
value='4869205468657265'
echo -n ""$value"" | xxd -r -p | openssl dgst -sha512 -mac HMAC -macopt hexkey:$key
(stdin)= 87aa7cdea5ef619d4ff0b4241a1d6cb02379f4e2ce4ec2787ad0b30545e17cdedaa833b7d6b8a702038b274eaea3f4e4be9d914eeb61f1702e696c203a126854
I hope this answer may serve as a mini tutorial to help people.
","2458","<bash><openssl><sha><hmac><digest>","2","4","1","2014-09-11 05:59:05","25780094","0","","3150853","","2014-09-11 05:43:33","2014-09-11 05:39:10",""
"34928787","Migration from SHA1 to SHA2 ASP.net 4.5, C#","We have one ASP.NET web application which is built in .NET Framework 4.5 version. Currently on production this application is using SHA1 encryption algorithm. This algorithm is set in ""MachineKey"" tag of application's web.config file. This application uses ASP.Net Membership concept for maintaining Login credentials.
As the SHA1 algorithm is on verge of degradation so we want to update our application from SHA1 to SHA2. For this we have set ""HMACSHA256"" in ""MachineKey"" tag of application's web.config file.
After upgrading our application to SHA2 with the above settings, we expect that the older user's passwords (which were encrypted using SHA1 and already present in membership database) will not work with SHA2 algorithm. But it allows older users to login without any modification in previously encrypted password.
Question 1: Are the changes made in ""MachineKey"" tag of application's web.config file enough/recommended for this migration?
Question 2: As we are still able to login into the application using previously encrypted passwords, does the membership database really uses the SHA2 encryption set in web.config file? Or we need to add some additional settings to enable SHA2 encryption on membership database level? Please advice.
Please suggest if there is any best way to enable SHA2 encryption on Membership database level.
","The whole point of upgrading from SHA1 to SHA2 is to actually decrease your known security issue of SHA1 which was hacked many years ago.  So to try and have a hybrid system is mostly pointless.  
Short Term:   99% of users are on SHA1 ..   and only NEW users  1% of all users are on SHA2  ??  :(   
You just need to enforce the password change which makes 100% of people on SHA2 
","2446","<c#><asp.net><.net><sha>","4","0","3","2017-06-22 14:10:39","","0","1","1978617","","2017-06-22 14:10:39","2016-01-21 16:14:31",""
"34928787","Migration from SHA1 to SHA2 ASP.net 4.5, C#","We have one ASP.NET web application which is built in .NET Framework 4.5 version. Currently on production this application is using SHA1 encryption algorithm. This algorithm is set in ""MachineKey"" tag of application's web.config file. This application uses ASP.Net Membership concept for maintaining Login credentials.
As the SHA1 algorithm is on verge of degradation so we want to update our application from SHA1 to SHA2. For this we have set ""HMACSHA256"" in ""MachineKey"" tag of application's web.config file.
After upgrading our application to SHA2 with the above settings, we expect that the older user's passwords (which were encrypted using SHA1 and already present in membership database) will not work with SHA2 algorithm. But it allows older users to login without any modification in previously encrypted password.
Question 1: Are the changes made in ""MachineKey"" tag of application's web.config file enough/recommended for this migration?
Question 2: As we are still able to login into the application using previously encrypted passwords, does the membership database really uses the SHA2 encryption set in web.config file? Or we need to add some additional settings to enable SHA2 encryption on membership database level? Please advice.
Please suggest if there is any best way to enable SHA2 encryption on Membership database level.
","I do not know if it is possible to handle such a migration with Membership, without forcing users to go through a password reset process.
But you can do that by migrating Membership to Asp.Net Identity at the same time: Asp.Net Identity has extension points allowing you to handle a ""fallback"" password signature match for supporting old signature. At that point, you still have the login and password unhashed in memory, and you can then by the way convert the signature to the new format.
All that is explained with details and code in following blog, including the SQL migration I am only slightly explain in an added comment in below code.
Here is the main class for achieving this:

public class BackCompatPasswordHasher : PasswordHasher
{
    public override string HashPassword(string password)
    {
        return base.HashPassword(password);
    }

    public override PasswordVerificationResult VerifyHashedPassword(
        string hashedPassword, string providedPassword)
    {
        // Relies on SQL migration having formatted old hashes as
        // (aspnet_Membership.Password + '|' + 
        // CAST(aspnet_Membership.PasswordFormat as varchar) + '|'
        // + aspnet_Membership.PasswordSalt)
        string[] passwordProperties = hashedPassword.Split('|');
        if (passwordProperties.Length != 3)
        {
            return base.VerifyHashedPassword(hashedPassword, 
                providedPassword);
        }
        else
        {
            string passwordHash = passwordProperties[0];
            int passwordformat = 1;
            string salt = passwordProperties[2];
            if (String.Equals(EncryptPassword(providedPassword,
                passwordformat, salt), 
                passwordHash, StringComparison.CurrentCultureIgnoreCase))
            {
                return PasswordVerificationResult.SuccessRehashNeeded;
            }
            else
            {
                return PasswordVerificationResult.Failed;
            }
        }
    }

    //This is copied from the existing SQL providers and is provided only 
    // for back-compat.
    private string EncryptPassword(string pass, int passwordFormat, 
         string salt)
    {
        if (passwordFormat == 0) // MembershipPasswordFormat.Clear
            return pass;

        byte[] bIn = Encoding.Unicode.GetBytes(pass);
        byte[] bSalt = Convert.FromBase64String(salt);
        byte[] bRet = null;

        if (passwordFormat == 1)
        { // MembershipPasswordFormat.Hashed 
            HashAlgorithm hm = HashAlgorithm.Create(""SHA1"");
            if (hm is KeyedHashAlgorithm)
            {
                KeyedHashAlgorithm kha = (KeyedHashAlgorithm)hm;
                if (kha.Key.Length == bSalt.Length)
                {
                    kha.Key = bSalt;
                }
                else if (kha.Key.Length < bSalt.Length)
                {
                    byte[] bKey = new byte[kha.Key.Length];
                    Buffer.BlockCopy(bSalt, 0, bKey, 0, bKey.Length);
                    kha.Key = bKey;
                }
                else
                {
                    byte[] bKey = new byte[kha.Key.Length];
                    for (int iter = 0; iter < bKey.Length; )
                    {
                        int len = Math.Min(bSalt.Length, bKey.Length - iter);
                        Buffer.BlockCopy(bSalt, 0, bKey, iter, len);
                        iter += len;
                    }
                    kha.Key = bKey;
                }
                bRet = kha.ComputeHash(bIn);
            }
            else
            {
                byte[] bAll = new byte[bSalt.Length + bIn.Length];
                Buffer.BlockCopy(bSalt, 0, bAll, 0, bSalt.Length);
                Buffer.BlockCopy(bIn, 0, bAll, bSalt.Length, bIn.Length);
                bRet = hm.ComputeHash(bAll);
            }
        }

        return Convert.ToBase64String(bRet);
    }
}


Then, in your user manager:
public class IdentityUserManager : UserManager<IdentityUser>
{
    public IdentityUserManager(IUserStore<IdentityUser> store)
        : base(store)
    {
        PasswordHasher = new BackCompatPasswordHasher();
    }
}

In my actual code base, I have some additions for handling re-hashing but unfortunately, no comments on why. Maybe that was some superfluous code from original implementer, or it was really needed. I have not investigate it, so here is the additional code in IdentityUserManager:
    private ConcurrentDictionary<string, string> UserRehashed = 
        new ConcurrentDictionary<string, string>();

    private bool CanRehash(IdentityUser user)
    {
        return UserRehashed.TryAdd(user.Id, user.Id);
    }

    protected async override Task<bool> VerifyPasswordAsync(
        IUserPasswordStore<IdentityUser, string> store, IdentityUser user,
        string password)
    {
        var hash = await store.GetPasswordHashAsync(user).ConfigureAwait(false);
        var verifPassRes = PasswordHasher.VerifyHashedPassword(hash, password);
        if (verifPassRes == PasswordVerificationResult.SuccessRehashNeeded &&
            // avoid rehash loop.
            CanRehash(user))
        {
            var chPassRes = await this.ChangePasswordAsync(user.Id,
                password, password).ConfigureAwait(false);
            if (!chPassRes.Succeeded)
            {
                // throw or log, whatever.
            }
        }

        return verifPassRes != PasswordVerificationResult.Failed;
    }

","2446","<c#><asp.net><.net><sha>","4","2","3","2017-06-22 14:10:39","","0","1","1978617","","2017-06-22 14:10:39","2016-01-21 16:14:31",""
"34928787","Migration from SHA1 to SHA2 ASP.net 4.5, C#","We have one ASP.NET web application which is built in .NET Framework 4.5 version. Currently on production this application is using SHA1 encryption algorithm. This algorithm is set in ""MachineKey"" tag of application's web.config file. This application uses ASP.Net Membership concept for maintaining Login credentials.
As the SHA1 algorithm is on verge of degradation so we want to update our application from SHA1 to SHA2. For this we have set ""HMACSHA256"" in ""MachineKey"" tag of application's web.config file.
After upgrading our application to SHA2 with the above settings, we expect that the older user's passwords (which were encrypted using SHA1 and already present in membership database) will not work with SHA2 algorithm. But it allows older users to login without any modification in previously encrypted password.
Question 1: Are the changes made in ""MachineKey"" tag of application's web.config file enough/recommended for this migration?
Question 2: As we are still able to login into the application using previously encrypted passwords, does the membership database really uses the SHA2 encryption set in web.config file? Or we need to add some additional settings to enable SHA2 encryption on membership database level? Please advice.
Please suggest if there is any best way to enable SHA2 encryption on Membership database level.
","With my other answer technical details, I just realize why you can change hashing algorithm without causing old password to get ""lost"".
Membership does store the hashing algorithm it has used with each password, thus allowing it to still validates old password after a hash algorithm change.
This explains the behavior you have seen. To double check it (and infirms your question 1 & 2 concerns), inspect your data in db, check the PasswordFormat column which should change depending on the used hash algorithm.
You should also check if simply logging in with an old account is enough to have it re-hashed to SHA-2 by Membership. If this is the case, all regular users will be re-hashed quickly after having done the change.
I do not remove my previous answer since it may still be helpful if one considers migrating the authentication framework too.
","2446","<c#><asp.net><.net><sha>","4","2","3","2017-06-22 14:10:39","","0","1","1978617","","2017-06-22 14:10:39","2016-01-21 16:14:31",""
"3124994","MessageDigest SHA-512 different than openssl","I can't figure out what I'm doing wrong here.  I have the following code:
byte[] digest = new byte[0];
MessageDigest md = null;
try{
    md = MessageDigest.getInstance( ""SHA-512"" );
}
catch( NoSuchAlgorithmException e ) {
    return digest;
}
digest = md.digest( myString.getBytes() );

Looking at the hex values of digest byte[] in the NetBeans debugger, it shows something different than the output of:
echo ""myString"" | openssl dgst -sha512

I'm guessing it's a character encoding issue, but doesn't the JVM and openssl use the default character set for the machine?
Any help is appreciated.
","echo appends a newline at the end -
[steven@emu:~]% echo ""myString"" | hexdump -C
00000000  6d 79 53 74 72 69 6e 67  0a                       |myString.|

Try echo -n?
","2444","<java><openssl><message><digest><sha>","7","7","1","2011-07-13 20:03:48","3125026","1","3","56541","","2010-06-26 18:16:45","2010-06-26 18:14:27",""
"7071902","Small differences in SHA1 hashes","A project I am working on uses Apache Shiro as a security framework. Passwords are SHA1 hashed (no salt, no iterations). Login is SSL secured. However, the remaining part of the application is not SSL secured. In this context (no SSL) there should be a form where a user can change the password.
Since it wouldn't be a good idea to transmit it plainly it should be hashed on the client and then transmitted to the server. As the client is GWT (2.3) based, I am trying this library http://code.google.com/p/gwt-crypto, which uses code from bouncycastle.
However, in many cases (not all) the hashes generated by both frameworks differ in 1-4(?) characters.
For instance ""happa3"" is hashed to
""fe7f3cffd8a5f0512a5f1120f1369f48cd6f47c2""

by both implementations, whereas just ""happa"" is hashed to
""fb3c3a741b4e07a87d9cb68f3db020d6fbfed00a""

by the Shiro implementation and to 
""fb3c3a741b4e07a87d9cb63f3db020d6fbfed00a""

by the gwt-crypto implementation (23rd character differs).
I wonder whether there is a ""correct""/standard SHA1 hashing and whether there is a bug in one of the libraries or maybe my usage of them is flawed.
One of my first thoughts was related to different encodings or strange conversions due to different transport mechanisms (RPC vs. Post). To my knowledge though (and what puzzles me most), SHA1 hashes should differ completely with a high probability if there is just a difference of a single bit. So different encodings shouldn't be the issue here.
I am using this code on the client (GWT) for hashing:
String hashed = toHex(createSHA1Hash(""password""));
...
private String createSHA1Hash(String passwordString){
    SHA1Digest sha1 = new SHA1Digest();
    byte[] bytes;
    byte[] result = new byte[sha1.getDigestSize()];
    try {
        bytes = passwordString.getBytes();
        sha1.update(bytes, 0, bytes.length);
        int val = sha1.doFinal(result, 0);
    } catch (UnsupportedEncodingException e) {}
    return new String(result);
}

public String toHex(String arg) {
    return new BigInteger(1, arg.getBytes()).toString(16);
}

And this on the server (Shiro):
 String hashed = new Sha1Hash(""password"").toHex()

which afaics does something very similar behind the scenes (had a quick view on the source code).
Did I miss something obvious here?
EDIT: Seems like the GWT code does not run natively for some reason (i.e. just in development mode) and silently fails (it does compile, though). Have to find out why...
Edit(2): ""int val = sha1.doFinal(result, 0);"" is the line that makes trouble, i.e. if present, the whole code does not run natively (JS) but only in dev-mode (with wrong results)
","You could test this version:
public class SHA1 {

    public static native String calcSHA1(String s) /*-{
        //
        // A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
        // in FIPS 180-1
        // Version 2.2 Copyright Paul Johnston 2000 - 2009.
        // Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
        // Distributed under the BSD License
        // See http://pajhome.org.uk/crypt/md5 for details.
        //

        //
        // Configurable variables. You may need to tweak these to be compatible with
        // the server-side, but the defaults work in most cases.
        //
        var hexcase = 0;  // hex output format. 0 - lowercase; 1 - uppercase        
        var b64pad  = """"; // base-64 pad character. ""="" for strict RFC compliance   

        //
        // These are the functions you'll usually want to call
        // They take string arguments and return either hex or base-64 encoded strings
        //

        function b64_sha1(s)    { return rstr2b64(rstr_sha1(str2rstr_utf8(s))); }
        function any_sha1(s, e) { return rstr2any(rstr_sha1(str2rstr_utf8(s)), e); }
        function hex_hmac_sha1(k, d)
          { return rstr2hex(rstr_hmac_sha1(str2rstr_utf8(k), str2rstr_utf8(d))); }
        function b64_hmac_sha1(k, d)
          { return rstr2b64(rstr_hmac_sha1(str2rstr_utf8(k), str2rstr_utf8(d))); }
        function any_hmac_sha1(k, d, e)
          { return rstr2any(rstr_hmac_sha1(str2rstr_utf8(k), str2rstr_utf8(d)), e); }

        //
        // Perform a simple self-test to see if the VM is working
        //
        function sha1_vm_test()
        {
          return hex_sha1(""abc"").toLowerCase() == ""a9993e364706816aba3e25717850c26c9cd0d89d"";
        }

        //
        // Calculate the SHA1 of a raw string
        //
        function rstr_sha1(s)
        {
          return binb2rstr(binb_sha1(rstr2binb(s), s.length * 8));
        }

        //
        // Calculate the HMAC-SHA1 of a key and some data (raw strings)
        //
        function rstr_hmac_sha1(key, data)
        {
          var bkey = rstr2binb(key);
          if(bkey.length > 16) bkey = binb_sha1(bkey, key.length * 8);

          var ipad = Array(16), opad = Array(16);
          for(var i = 0; i < 16; i++)
          {
            ipad[i] = bkey[i] ^ 0x36363636;
            opad[i] = bkey[i] ^ 0x5C5C5C5C;
          }

          var hash = binb_sha1(ipad.concat(rstr2binb(data)), 512 + data.length * 8);
          return binb2rstr(binb_sha1(opad.concat(hash), 512 + 160));
        }

        //
        // Convert a raw string to a hex string
        //
        function rstr2hex(input)
        {
          try { hexcase } catch(e) { hexcase=0; }
          var hex_tab = hexcase ? ""0123456789ABCDEF"" : ""0123456789abcdef"";
          var output = """";
          var x;
          for(var i = 0; i < input.length; i++)
          {
            x = input.charCodeAt(i);
            output += hex_tab.charAt((x >>> 4) & 0x0F)
                   +  hex_tab.charAt( x        & 0x0F);
          }
          return output;
        }

        //
        // Convert a raw string to a base-64 string
        //
        function rstr2b64(input)
        {
          try { b64pad } catch(e) { b64pad=''; }
          var tab = ""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"";
          var output = """";
          var len = input.length;
          for(var i = 0; i < len; i += 3)
          {
            var triplet = (input.charCodeAt(i) << 16)
                        | (i + 1 < len ? input.charCodeAt(i+1) << 8 : 0)
                        | (i + 2 < len ? input.charCodeAt(i+2)      : 0);
            for(var j = 0; j < 4; j++)
            {
              if(i * 8 + j * 6 > input.length * 8) output += b64pad;
              else output += tab.charAt((triplet >>> 6*(3-j)) & 0x3F);
            }
          }
          return output;
        }

        //
        // Convert a raw string to an arbitrary string encoding
        //
        function rstr2any(input, encoding)
        {
          var divisor = encoding.length;
          var remainders = Array();
          var i, q, x, quotient;

          // Convert to an array of 16-bit big-endian values, forming the dividend 
          var dividend = Array(Math.ceil(input.length / 2));
          for(i = 0; i < dividend.length; i++)
          {
            dividend[i] = (input.charCodeAt(i * 2) << 8) | input.charCodeAt(i * 2 + 1);
          }

          //
          // Repeatedly perform a long division. The binary array forms the dividend,
          // the length of the encoding is the divisor. Once computed, the quotient
          // forms the dividend for the next step. We stop when the dividend is zero.
          // All remainders are stored for later use.
          //
          while(dividend.length > 0)
          {
            quotient = Array();
            x = 0;
            for(i = 0; i < dividend.length; i++)
            {
              x = (x << 16) + dividend[i];
              q = Math.floor(x / divisor);
              x -= q * divisor;
              if(quotient.length > 0 || q > 0)
                quotient[quotient.length] = q;
            }
            remainders[remainders.length] = x;
            dividend = quotient;
          }

          // Convert the remainders to the output string 
          var output = """";
          for(i = remainders.length - 1; i >= 0; i--)
            output += encoding.charAt(remainders[i]);

          // Append leading zero equivalents 
          var full_length = Math.ceil(input.length * 8 /
                                            (Math.log(encoding.length) / Math.log(2)))
          for(i = output.length; i < full_length; i++)
            output = encoding[0] + output;

          return output;
        }

        //
        // Encode a string as utf-8.
        // For efficiency, this assumes the input is valid utf-16.
        //
        function str2rstr_utf8(input)
        {
          var output = """";
          var i = -1;
          var x, y;

          while(++i < input.length)
          {
              // Decode utf-16 surrogate pairs 
            x = input.charCodeAt(i);
            y = i + 1 < input.length ? input.charCodeAt(i + 1) : 0;
            if(0xD800 <= x && x <= 0xDBFF && 0xDC00 <= y && y <= 0xDFFF)
            {
              x = 0x10000 + ((x & 0x03FF) << 10) + (y & 0x03FF);
              i++;
            }

            // Encode output as utf-8 
            if(x <= 0x7F)
              output += String.fromCharCode(x);
            else if(x <= 0x7FF)
              output += String.fromCharCode(0xC0 | ((x >>> 6 ) & 0x1F),
                                            0x80 | ( x         & 0x3F));
            else if(x <= 0xFFFF)
              output += String.fromCharCode(0xE0 | ((x >>> 12) & 0x0F),
                                            0x80 | ((x >>> 6 ) & 0x3F),
                                            0x80 | ( x         & 0x3F));
            else if(x <= 0x1FFFFF)
              output += String.fromCharCode(0xF0 | ((x >>> 18) & 0x07),
                                            0x80 | ((x >>> 12) & 0x3F),
                                            0x80 | ((x >>> 6 ) & 0x3F),
                                            0x80 | ( x         & 0x3F));
          }
          return output;
        }

        //
        // Encode a string as utf-16
        //
        function str2rstr_utf16le(input)
        {
          var output = """";
          for(var i = 0; i < input.length; i++)
            output += String.fromCharCode( input.charCodeAt(i)        & 0xFF,
                                          (input.charCodeAt(i) >>> 8) & 0xFF);
          return output;
        }

        function str2rstr_utf16be(input)
        {
          var output = """";
          for(var i = 0; i < input.length; i++)
            output += String.fromCharCode((input.charCodeAt(i) >>> 8) & 0xFF,
                                           input.charCodeAt(i)        & 0xFF);
          return output;
        }

        //
        // Convert a raw string to an array of big-endian words
        // Characters >255 have their high-byte silently ignored.
        //
        function rstr2binb(input)
        {
          var output = Array(input.length >> 2);
          for(var i = 0; i < output.length; i++)
            output[i] = 0;
          for(var i = 0; i < input.length * 8; i += 8)
            output[i>>5] |= (input.charCodeAt(i / 8) & 0xFF) << (24 - i % 32);
          return output;
        }

        //
        // Convert an array of big-endian words to a string
        //
        function binb2rstr(input)
        {
          var output = """";
          for(var i = 0; i < input.length * 32; i += 8)
            output += String.fromCharCode((input[i>>5] >>> (24 - i % 32)) & 0xFF);
          return output;
        }

        //
        // Calculate the SHA-1 of an array of big-endian words, and a bit length
        //
        function binb_sha1(x, len)
        {
            // append padding 
          x[len >> 5] |= 0x80 << (24 - len % 32);
          x[((len + 64 >> 9) << 4) + 15] = len;

          var w = Array(80);
          var a =  1732584193;
          var b = -271733879;
          var c = -1732584194;
          var d =  271733878;
          var e = -1009589776;

          for(var i = 0; i < x.length; i += 16)
          {
            var olda = a;
            var oldb = b;
            var oldc = c;
            var oldd = d;
            var olde = e;

            for(var j = 0; j < 80; j++)
            {
              if(j < 16) w[j] = x[i + j];
              else w[j] = bit_rol(w[j-3] ^ w[j-8] ^ w[j-14] ^ w[j-16], 1);
              var t = safe_add(safe_add(bit_rol(a, 5), sha1_ft(j, b, c, d)),
                               safe_add(safe_add(e, w[j]), sha1_kt(j)));
              e = d;
              d = c;
              c = bit_rol(b, 30);
              b = a;
              a = t;
            }

            a = safe_add(a, olda);
            b = safe_add(b, oldb);
            c = safe_add(c, oldc);
            d = safe_add(d, oldd);
            e = safe_add(e, olde);
          }
          return Array(a, b, c, d, e);

        }

        //
        // Perform the appropriate triplet combination function for the current
        // iteration
        //
        function sha1_ft(t, b, c, d)
        {
          if(t < 20) return (b & c) | ((~b) & d);
          if(t < 40) return b ^ c ^ d;
          if(t < 60) return (b & c) | (b & d) | (c & d);
          return b ^ c ^ d;
        }

        //
        // Determine the appropriate additive constant for the current iteration
        //
        function sha1_kt(t)
        {
          return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 :
                 (t < 60) ? -1894007588 : -899497514;
        }

        //
        // Add integers, wrapping at 2^32. This uses 16-bit operations internally
        // to work around bugs in some JS interpreters.
        //
        function safe_add(x, y)
        {
          var lsw = (x & 0xFFFF) + (y & 0xFFFF);
          var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
          return (msw << 16) | (lsw & 0xFFFF);
        }

        //
        // Bitwise rotate a 32-bit number to the left.
        //
        function bit_rol(num, cnt)
        {
          return (num << cnt) | (num >>> (32 - cnt));
        }

        return rstr2hex(rstr_sha1(str2rstr_utf8(s))); 
    }-*/;
}

I'm using it in my client side sha generation and it worked well.
","2433","<gwt><encoding><hash><sha><shiro>","3","2","1","2011-08-21 09:58:16","","16","1","462982","","2011-08-16 15:58:33","2011-08-15 23:16:14",""
"49565332","The fingerprint you specified is already used by an Android OAuth2 client ID in this project or another project","I noticed my SHA1 number showing from the gradle view signing report in android studio was different from the one I had originally. I thought maybe it was from changing computers a year ago. My game app was still able to access leaderboards and achievements. I when to my Google API dashboard I noticed the 'OAuth client' had my old SHA1. It wouldn't let me change it to my new SHA1, saying it 'had already been used by this client or another client', although I had no other clients. The mysterious 'Anroid client 1' and 'Android client 2' had neither the old or new SHA1. Underneath the 'OAuth client' was 'OAuth client (auto created by google service)' which had my new SHA1. I went ahead and deleted that one, despite a warning it gave me that it had been used 147 times in the last week (evidence of impending senility on my part I suppose). It seemed I had to delete it to free up the number for my 'OAuth client' that was not auto created. 
Now it appears I'm screwed, as it still gives me 'the already in use message' when I try to change the SHA1, and my game app can no longer access Google Play Services at all. I'm thinking I should have deleted the 'OAuth client' instead. Can I recover from this? Will it free up over time? Another post suggested 7 days for clients to be removed, although I don't see a button to delete the whole client, and am concerned over the deletion of the API codes on the same page.
EDIT 3/30 - It looks like I may have lost this number permanently, although (I'm hoping) it only affects my Leaderboards and Achievements, not Firebase, Inapp Purchasing, or Ads. I can roll my own Leaderboards and Achievements in Firebase anyway. New projects with different package names give me the same unusable SHA1 in the Gradle signingReport.

","I finally got a useful response from Google support through email, providing just a clue on how to start the recovery process:
I understand you're receiving a Client ID error when trying to link your app to a Game Services project. This error message is displayed because your package ID and SHA1 are already in use by another Client ID.

To resolve this issue, please use the steps below to delete the Client ID from your Google Developers Console (formerly Cloud Console).

Important: Do not delete the Google Developers Console project before deleting the Client ID. If you’ve already deleted the project, you will need to undelete it from your Projects list.

1. Use the following URL to access the project - https://console.developers.google.com/project/186639667931
2. Select APIs & auth > Credentials
3. Under “Client ID for Android application” click the “Delete” button.
4. Try linking your app in the Play Console again. If you’re unable to view or undelete the project linked in step 1, please try accessing it while logged in with the primary email address on your Play developer account.

There was no 'Client ID for Android application', but there was an 'OAuth Client' under 'OAuth 2.0 client IDs', so I deleted that. That still had an old SHA1 number as it wouldn't take my current one. So I wasn't really deleting something with my current number, but deleting this deleted the whole client and brought up a blank screen. Here there was a bit of a trap. I added my current SHA1 number to that screen, which it accepted. Now I was able to get a response from the Google Play site again from my app, although its response always was 'Cannot access services'. 
As it turns out, this screen was the default screen, which is 'Google Play Android Developer'. I'll have to research what this is for sometime, but what I needed to add a SHA1 to was my actual app name. I ultimately found buried in the dropdown list at the very top, next to 'Google APIs', among example apps I had downloaded and 'Google Play Android Developer'. I still couldn't add my current SHA1 to it until I went back and deleted the 'OAuth Client' from 'Google Play Android Developer'. This bought the same default screen back, so I went back to the dropdown, selected my app name, and then was able to finally add my current SHA1 back to it.
So deleting a SHA1 appears not to be a permanent exile from Play Services, just the start of a tricky process to get it reestablished.
","2414","<android><android-studio><sha><google-api-console>","3","0","1","2018-04-02 19:52:26","49617467","0","1","1324802","","2018-04-02 19:52:26","2018-03-29 21:30:10",""
"35760176","Generate a 16 digit unique Hexadecimal value from given string of numbers","How would I go about doing that? I tried using SHA-1 and MD5 but the output is too long for my requirements and truncation would not make it unique.
Input : String containing numbers e.g. (0302160123456789)
Received output : 30f2bddc3e2fba9c05d97d04f8da4449
Desired Output: Unique number within range (0000000000000000 - FFFFFFFFFFFFFFFF) and 16 characters long 
Any help/ pointers are greatly appreciated.
","are you going to receive more than FFFFFFFFFFFFFFFF different strings?
if not then it's a simple problem of generating integers: the first string will get 0 the next 1 etc; you just keep a list of the strings and check if something the same appears.
","2402","<java><encryption><md5><sha>","1","1","3","2016-03-03 18:47:31","35780454","2","2","","","","2016-03-02 23:18:26",""
"35760176","Generate a 16 digit unique Hexadecimal value from given string of numbers","How would I go about doing that? I tried using SHA-1 and MD5 but the output is too long for my requirements and truncation would not make it unique.
Input : String containing numbers e.g. (0302160123456789)
Received output : 30f2bddc3e2fba9c05d97d04f8da4449
Desired Output: Unique number within range (0000000000000000 - FFFFFFFFFFFFFFFF) and 16 characters long 
Any help/ pointers are greatly appreciated.
","You could just convert your number to hex using BigInteger like this:
String id = new BigInteger(""0302160123456789"").toString(16);
System.out.println(id);

That gives:
112d022d2ed15

","2402","<java><encryption><md5><sha>","1","0","3","2016-03-03 18:47:31","35780454","2","2","","","","2016-03-02 23:18:26",""
"35760176","Generate a 16 digit unique Hexadecimal value from given string of numbers","How would I go about doing that? I tried using SHA-1 and MD5 but the output is too long for my requirements and truncation would not make it unique.
Input : String containing numbers e.g. (0302160123456789)
Received output : 30f2bddc3e2fba9c05d97d04f8da4449
Desired Output: Unique number within range (0000000000000000 - FFFFFFFFFFFFFFFF) and 16 characters long 
Any help/ pointers are greatly appreciated.
","How big is your input domain? If it is bigger than your output domain, then the Pigeon Hole principle applies and you can't get unique output by definition.
If the input domain is smaller or equal to the output domain, then you can easily accomplish this with a Pseudo-Random Permutation (PRP) that block ciphers provide.
The output of 16 hexits is equivalent to 8 bytes and equivalent to 64 bit. DES (and Triple DES) is a block cipher that has this block size. 

Parse the input string to a byte array in a compact fashion. If the input always consists of numerical digits, you can use Ebbe M. Pedersen's approach with 
byte[] plaintext = new BigInteger(""0302160123456789"").toByteArray();

Then you can generate some random, but fixed key of 24 bytes for Triple DES and instantiate the cipher with:
Cipher c = Cipher.getInstance(""DESede/ECB/PKCS5Padding"");
c.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(key, ""DESede""));
byte[] ciphertext = c.doFinal(plaintext);

Use some kind of Hex converter to get the representation you want.

You can ""hash"" numbers up to 36028797018963968 with this. If you want larger numbers (up to 9223372036854775808), then you need to use ""DESede/ECB/NoPadding"" and pad yourself with some padding bytes.
","2402","<java><encryption><md5><sha>","1","1","3","2016-03-03 18:47:31","35780454","2","2","","","","2016-03-02 23:18:26",""
"15993217","Avoiding hash collision in php when using sha1 for hashing","Suppose i assume if hash collision occur while i am using sha1 function in php .
Will this code avoids it permanently or do i have to use any other way
$filename=sha1($filename.'|'.microtime());

OR

$filename=sha1($filename.'|'.rand());

If no this code doesn't provide protection from hash collision .
What should i do to avoid any type of hash collision if i assume there can be more than 100,000 entries in db.
","Neither of these avoid hash collision.
Hash collisions happen when you have an algorithm that generates a hash of a specific size, regardless of the starting value.
A hash collision is when two different values, like ""mypassword"" and ""dsjakfuiUIs2kh-1jlks"" end up generating the same hash because of the mathematical operations performed on them.
You can't write code to prevent hash collisions, how often that happens is dependent on the hashing algorithm you are using.
","2398","<php><security><hash><sha>","1","1","4","2013-04-13 22:01:45","15993403","3","","","","","2013-04-13 21:38:25",""
"15993217","Avoiding hash collision in php when using sha1 for hashing","Suppose i assume if hash collision occur while i am using sha1 function in php .
Will this code avoids it permanently or do i have to use any other way
$filename=sha1($filename.'|'.microtime());

OR

$filename=sha1($filename.'|'.rand());

If no this code doesn't provide protection from hash collision .
What should i do to avoid any type of hash collision if i assume there can be more than 100,000 entries in db.
","Just sha1() the entire file path, not only the file name. 
Filename xy.png can be only one in a directory, therefore your hash will be unique for that filename.
Also, this has the advantage that you will not have duplicate files (while with rand()/microtime() you can get same file 10 times in same dir, and if it's a 1GB file can cause problems)
","2398","<php><security><hash><sha>","1","1","4","2013-04-13 22:01:45","15993403","3","","","","","2013-04-13 21:38:25",""
"15993217","Avoiding hash collision in php when using sha1 for hashing","Suppose i assume if hash collision occur while i am using sha1 function in php .
Will this code avoids it permanently or do i have to use any other way
$filename=sha1($filename.'|'.microtime());

OR

$filename=sha1($filename.'|'.rand());

If no this code doesn't provide protection from hash collision .
What should i do to avoid any type of hash collision if i assume there can be more than 100,000 entries in db.
","Just to be clear, you can't completely avoid hash collisions. It's an infinite number of inputs to a finite number of outputs, but you can take into account things like the file's size, the current system time and other data to use as a salt which will increase the entropy of your message digests.
","2398","<php><security><hash><sha>","1","2","4","2013-04-13 22:01:45","15993403","3","","","","","2013-04-13 21:38:25",""
"15993217","Avoiding hash collision in php when using sha1 for hashing","Suppose i assume if hash collision occur while i am using sha1 function in php .
Will this code avoids it permanently or do i have to use any other way
$filename=sha1($filename.'|'.microtime());

OR

$filename=sha1($filename.'|'.rand());

If no this code doesn't provide protection from hash collision .
What should i do to avoid any type of hash collision if i assume there can be more than 100,000 entries in db.
","Its very unlikely that a hash collision will happen for sha1.
Probability of sha1 collision is negligible
And hash collision risk is not practical. No one has found sha1 collision till yet . So you are safe to use it. 
Using a salt like microtime or random number may decreases the chances of probability but you simply can't avoid it.
And what you are using is sha1(string) whether string is a mixed value or single string.so using microtime and rand function wont affect anything to probability of hash collision.
Therefore there can be possibility that sha1(mixedvalue) collision might be equal or greater than collision of sha1(filename) so certainly that is of no use.
So dont worry and use this or simple way if you like to, it wont create problem in future, Thinking about hash collision is waste of time when the chances are very very very less.
","2398","<php><security><hash><sha>","1","3","4","2013-04-13 22:01:45","15993403","3","","","","","2013-04-13 21:38:25",""
"8830398","How do you use SHA256 to create a token of  key,value pairs and a secret signature?","I want to validate some hidden input fields (to make sure they arent changed on submission) with the help of a sha-encoded string of the key value pairs of these hidden fields. I saw examples of this online but I didnt understand how to encode and 
decode the values with a dynamic secret value. Can someone help me understand how to do this in perl? 
Also which signature type  (MD5, SHA1, SHA256, etc), has a good balance of performance and security?
update
So, how do you decode the string once you get it encoded? 
","I don't know what you mean by ""unpack"", but you can't get original string from the hash.
Let's understand the problem: you render some hidden fields and you want to make sure that they're submitted unchanged, right? Here's how you can ensure that.
Let's suppose you have two variables:
first: foo
second: bar

You can hash them together with a secret key:
secret_key = ""ysEJbKTuJU6u""
source_string = secret_key + ""first"" + ""foo"" + ""second"" + ""bar""
hash = MD5(source_string)

# => ""1adfda97d28af6535ef7e8fcb921d3f0""    

Now you can render your markup:
<input type=""hidden"" name=""first"" value=""foo"" />
<input type=""hidden"" name=""second"" value=""bar"" />
<input type=""hidden"" name=""hash"" value=""1adfda97d28af6535ef7e8fcb921d3f0"">

Upon form submission, you get values of first and second fields, concat them to your secret key in a similar manner and hash again.
If hashes are equal, your values haven't been changed.
Note: never render secret key to the client. And sort key/value pairs before hashing (to eliminate dependency on order).
( disclaimer: I am not a crypto person, so you may just stop reading now)
As for performance/security, even though MD5 was found to have a weakness, it's still pretty usable, IMHO. SHA1 has a theoretical weakness, although no successful attack has been made yet. There are no known weaknesses in SHA-256.
","2388","<perl><encryption><sha>","4","3","3","2012-01-13 01:13:46","8841960","0","","177389","","2012-01-12 23:50:42","2012-01-12 05:07:25",""
"8830398","How do you use SHA256 to create a token of  key,value pairs and a secret signature?","I want to validate some hidden input fields (to make sure they arent changed on submission) with the help of a sha-encoded string of the key value pairs of these hidden fields. I saw examples of this online but I didnt understand how to encode and 
decode the values with a dynamic secret value. Can someone help me understand how to do this in perl? 
Also which signature type  (MD5, SHA1, SHA256, etc), has a good balance of performance and security?
update
So, how do you decode the string once you get it encoded? 
","For this application, any of the encryption algorithms is fine. You can pack the values any way you want, so long as it's repeatable. One common method is to pack the fields into a string the same way you would encode them into a URL for a GET request (name=value).
To compute the hash, create a text secret that can be whatever you want. It should be at least 12 bytes long though. Compute the hash of the secret concatenated with the packed fields and append that onto the end.
So, say you picked MD5, a secret of JS90320ERHe2 and you have these fields:
first_name = Jack
last_name = Smith
other_field = 7=2

First, URL encode it:
first_name=Jack&last_name=Smith&other_field=7%3d=2

Then compute the MD5 hash of
JS90320ERHe2first_name=Jack&last_name=Smith&other_field=7%3d=2

Which is 6d0fa69703935efaa183be57f81d38ea. The final encoded field is:
first_name=Jack&last_name=Smith&other_field=7%3d=2&hash=6d0fa69703935efaa183be57f81d38ea

So that's what you pass to the user. To validate it, remove the hash from the end, compute the MD5 hash by concatenating what's left with the secret, and if the hashes match, the field hasn't been tampered with.
Nobody can compute their own valid MD5 because they don't know to prefix the string with.
Note that an adversary can re-use any old valid value set. They just can't create their own value set from scratch or modify an existing one and have it test valid. So make sure you include something in the information so you can verify that it is suitable for the purpose it has been used.
","2388","<perl><encryption><sha>","4","2","3","2012-01-13 01:13:46","8841960","0","","177389","","2012-01-12 23:50:42","2012-01-12 05:07:25",""
"8830398","How do you use SHA256 to create a token of  key,value pairs and a secret signature?","I want to validate some hidden input fields (to make sure they arent changed on submission) with the help of a sha-encoded string of the key value pairs of these hidden fields. I saw examples of this online but I didnt understand how to encode and 
decode the values with a dynamic secret value. Can someone help me understand how to do this in perl? 
Also which signature type  (MD5, SHA1, SHA256, etc), has a good balance of performance and security?
update
So, how do you decode the string once you get it encoded? 
","What you really need is not a plain hash function, but a message authentication code such as HMAC.  Since you say you'd like to use SHA-256, you might like HMAC_SHA256, which is available in Perl via the Digest::SHA module:
use Digest::SHA qw(hmac_sha256_base64);

my $mac = hmac_sha256_base64( $string, $key );

Here, $key is an arbitrary key, which you should keep secret, and $string contains the data you want to sign.  To apply this to a more complex data structure (such as a hash of key–value pairs), you first need to convert it to a string.  There are several ways to do that; for example, you could use Storable:
use Storable qw(freeze);

sub pairs_to_string {
    local $Storable::canonical = 1;
    my %hash = @_;
    return freeze( \%hash );
}

You could also URL-encoding, as suggested by David Schwartz.  The important thing is that, whatever method you use, it should always return the exact same string when given the same hash as input.
Then, before sending the data to the user, you calculate a MAC for them and include it as an extra field in the data.  When you receive the data back, you remove the MAC field (and save its value), recalculate the MAC for the remaining fields and compare it to the value you received.  If they don't match, someone (or something) has tampered with the data.  Like this:
my $key = ""secret"";
sub mac { hmac_sha256_base64( pairs_to_string(@_), $key ) }

# before sending data to client:
my %data = (foo => ""something"", bar => ""whatever"");
$data{mac} = mac( %data );

# after receiving %data back from client:
my $mac = delete $data{mac};
die ""MAC mismatch"" if $mac ne mac( %data );

Note that there are some potential tricks this technique doesn't automatically prevent, such as replay attacks: once you send the data and MAC to the user, they'll learn the MAC corresponding to the particular set of data, and could potentially replace the fields in a later form with values saved from an earlier form.  To protect yourself against such attacks, you should include enough identifying information in the data protected by the MAC to ensure that you can detect any potentially harmful replays.  Ideally, you'd want to include a unique ID in every form and check that no ID is ever submitted twice, but that may not always be practical.  Failing that, it may be a good idea to include a user ID (so that a malicious user can't trick someone else into submitting their data) and a form ID (so that a user can't copy data from one form to another) and perhaps a timestamp and/or a session ID (so that you can reject old data) in the form (and in the MAC calculation).
","2388","<perl><encryption><sha>","4","2","3","2012-01-13 01:13:46","8841960","0","","177389","","2012-01-12 23:50:42","2012-01-12 05:07:25",""
"42491350","java - is there a way to confirm that a string is a sha256 hash?","I'd like to validate that a String is a sha256 representation of another without  having to decrypt it. Is this possible?
","I think what you could do is to hash the other string and then compare these two strings with each other.
No idea if this would help you but I read that it was commonly used praxis when creating rainbow tables for cracking password attempts.
EDIT: Oh forgot this is also the way to compare passwords in php when you login to a webpage iirc. At least I had to do it like this for university.
","2384","<java><sha>","3","1","4","2017-02-27 17:01:52","42491511","1","","","","","2017-02-27 16:54:32",""
"42491350","java - is there a way to confirm that a string is a sha256 hash?","I'd like to validate that a String is a sha256 representation of another without  having to decrypt it. Is this possible?
","You can get your machine to parse the string with specific rules and attempt to qualify the string as an sha hash. The following post might answer your question How to determine whether a string is a hash. 
","2384","<java><sha>","3","1","4","2017-02-27 17:01:52","42491511","1","","","","","2017-02-27 16:54:32",""
"42491350","java - is there a way to confirm that a string is a sha256 hash?","I'd like to validate that a String is a sha256 representation of another without  having to decrypt it. Is this possible?
","Yes and no.
You can test that a string is hex very easily. You can then test that it contains a statistically sensible number of digits and letters. That will rule out some common non sha256 strings.
But if someone creates a random string designed to look like a sha256, I don't think it's possible to distinguish it from the real thing by any mathematical test. The algorithm is designed to be robust to that. 
","2384","<java><sha>","3","4","4","2017-02-27 17:01:52","42491511","1","","","","","2017-02-27 16:54:32",""
"42491350","java - is there a way to confirm that a string is a sha256 hash?","I'd like to validate that a String is a sha256 representation of another without  having to decrypt it. Is this possible?
","A sha-256 value is just a 256 bits (32 bytes) value which you usually represent as a String or as a byte[] in Java.
As a value per se it's pointless, if you want to tell if a specific String is a hash then any 32 bytes number is a hash of an infinite unknown plain texts. But it's like asking ""how do I know that a 32 bytes number is a number?"", you see that you are going nowhere.
It's useful only when it's paired to a plain text so that you can compare it with the hash computed from the plain text to verify they match.
","2384","<java><sha>","3","2","4","2017-02-27 17:01:52","42491511","1","","","","","2017-02-27 16:54:32",""
"42781792","How to send soap request with SHA2 and TLS version 1.2","I just wanted to send Soap request to the soap server using SHA2 and TLS1.2 but it's showing below error when trying to create soap client
Error

SOAP-ERROR: Parsing WSDL: Couldn't load from 'https://example.com/wsdl' : failed to load external entity ""https://example.com/wsdl""

Code
$url = 'https://example.com/wsdl';

$client = new SoapClient(
            $url,
            array(
              'ssl_method' => SOAP_SSL_METHOD_TLS,
              'cache_wsdl'    => WSDL_CACHE_NONE,
              'stream_context'=> stream_context_create(
                array(
                  'ssl'=> array(
                    'crypto_method' => STREAM_CRYPTO_METHOD_TLSv1_2_CLIENT,
                    'ciphers' => 'SHA2',
                    'verify_peer'=>false,
                    'verify_peer_name'=>false, 
                    'allow_self_signed' => true //can fiddle with this one.
                  )
                )
              )
            )
          );

","Don't you have a certificate to place in the ssl array?
'cafile' => $certFile

","2325","<php><soap><sha><tls1.2>","2","0","2","2017-03-15 16:26:00","42815467","0","4","","","","2017-03-14 09:09:47",""
"42781792","How to send soap request with SHA2 and TLS version 1.2","I just wanted to send Soap request to the soap server using SHA2 and TLS1.2 but it's showing below error when trying to create soap client
Error

SOAP-ERROR: Parsing WSDL: Couldn't load from 'https://example.com/wsdl' : failed to load external entity ""https://example.com/wsdl""

Code
$url = 'https://example.com/wsdl';

$client = new SoapClient(
            $url,
            array(
              'ssl_method' => SOAP_SSL_METHOD_TLS,
              'cache_wsdl'    => WSDL_CACHE_NONE,
              'stream_context'=> stream_context_create(
                array(
                  'ssl'=> array(
                    'crypto_method' => STREAM_CRYPTO_METHOD_TLSv1_2_CLIENT,
                    'ciphers' => 'SHA2',
                    'verify_peer'=>false,
                    'verify_peer_name'=>false, 
                    'allow_self_signed' => true //can fiddle with this one.
                  )
                )
              )
            )
          );

","Have solved by adding SHA256 in ciphars. Actually SHA2 has 4 kinds of hash functions: SHA224, SHA256, SHA384 and SHA512.
Changes
'ciphers' => 'SHA256',

Answering own question is little odd for me but it can help other devs.
","2325","<php><soap><sha><tls1.2>","2","5","2","2017-03-15 16:26:00","42815467","0","4","","","","2017-03-14 09:09:47",""
"43474902","Generate self signed RSA-2048-SHA-256 certificate PFX file using openSSL","I am trying to create a self signed RSA-2048-SHA-256 certificate PFX file, in order to use it for data signing in my WCF requests.
I used some openSSL examples in order to create a certificate PFX file, but even  though I set the SHA algorithm to 256, when I load it in my .net app, I see that this certificate's private key, has these settings:
KeyExchangeAlgorithm = RSA-PKCS1-KeyEx

SignatureAlgorithm = http://www.w3.org/2000/09/xmldsig#rsa-sha1

and when I use the code below in order to consume this certificate, I am getting ""Invalid algorithm specified exception"", but if I change the SHA256CryptoServiceProvider to SHA1CryptoServiceProvider everything works fine.
string msg = ""This is my test message"";

X509Certificate2 privateCert = new X509Certificate2(""C:\\TEMP\\private.pfx"", ""12345"");

byte[] signature = (privateCert.PrivateKey as RSACryptoServiceProvider).SignData(new UTF8Encoding().GetBytes(msg), new SHA256CryptoServiceProvider());

I can only assume that my certificate file was not created with SHA256, but instead with some kind of default SHA1 algorithm.
Those are the steps I used in order to create my certificate:

openssl req -x509 -days 365 -newkey rsa:2048 -sha256 -keyout key.pem -out cert.pem
openssl pkcs12 -export -in cert.pem -inkey key.pem -out private.pfx

What am I doing wrong?
","
What am I doing wrong?

Believing that those two properties have meaning :).
The two values you're seeing are hard-coded into RSACryptoServiceProvider.  Other RSA types (such as RSACng) have different, less confusing, hard-coded values.
The problem is that a key doesn't have either of those attributes.  A key can be used for multiple purposes (though NIST recommends against it). A TLS session (or EnvelopedCMS document, etc) can have a key exchange algorithm. A certificate, SignedCMS document, or other such material can have a signature (and thus a signature algorithm).
To know that your certificate was signed with RSA-PKCS1-SHA256 you need to look at X509Certificate2.SignatureAlgorithm.
switch (cert.SignatureAlgorithm.Value)
{
    case ""1.2.840.113549.1.1.4"":
        return ""RSA-PKCS1-MD5"";
    case ""1.2.840.113549.1.1.5"";
        return ""RSA-PKCS1-SHA1"";
    case ""1.2.840.113549.1.1.11"";
        return ""RSA-PKCS1-SHA2-256""; // Winner
    case ""1.2.840.113549.1.1.12"":
        return ""RSA-PKCS1-SHA2-384"";
    case ""1.2.840.113549.1.1.13"":
        return ""RSA-PKCS1-SHA2-512"";
    default:
        throw new SomethingFromTheFutureOrMaybeNotRSAException();
}

","2283","<c#><.net><openssl><rsa><sha>","2","1","1","2017-04-18 15:52:11","43476838","2","","833070","","2017-04-18 14:27:37","2017-04-18 14:24:48",""
"10028308","Use SHA-512 and salt to hash an MD5 hashed password?","I am working on a system that has been hashing user passwords with MD5 (no salt). I want to store the passwords more securely using SHA-512 and a salt.
While this is easy enough to implement for future passwords, I'd like to also retrofit the existing MD5 hashed passwords, preferably without forcing all the users to change their passwords. My idea is to just use SHA-512 and and an appropriate salt to hash the existing MD5 hash. I can either then set some flag in the database that indicates which passwords were hashed from plain text, and which ones were hashed from an MD5 hash. Or I could just try both when authenticating users. Or even just hash new passwords with MD5 and then SHA-512/salt, so they can be treated the same as old passwords.
Programmatically, I don't think this will be a problem, but I don't know enough about encryption/hashing to know if I'm compromising the quality of the hash in any way by applying a SHA-512/salt hash to a password that was already MD5 hashed. My first instinct is that if anything, it would be even stronger, a very light key stretching. 
My second instinct is that I don't really know what I'm talking about, so I'd better get advice. Any thoughts?
","Trust your second instinct. Use an existing library made especially for hashing passwords instead of trying to cook up your own.
Probably hash your new passwords with MD5 and then hash the MD5 with your password hashing library. That way, you can maintain backwards compatibility with your old passwords.
I.e. password_hash(All old, md5'd passwords) and password_hash( md5(New passwords) )
(Warning: I'm not a cryptography expert)
http://www.codinghorror.com/blog/2007/09/youre-probably-storing-passwords-incorrectly.html
","2280","<java><security><hash><sha>","9","1","4","2012-04-05 12:26:30","10028562","2","2","","","","2012-04-05 12:09:05",""
"10028308","Use SHA-512 and salt to hash an MD5 hashed password?","I am working on a system that has been hashing user passwords with MD5 (no salt). I want to store the passwords more securely using SHA-512 and a salt.
While this is easy enough to implement for future passwords, I'd like to also retrofit the existing MD5 hashed passwords, preferably without forcing all the users to change their passwords. My idea is to just use SHA-512 and and an appropriate salt to hash the existing MD5 hash. I can either then set some flag in the database that indicates which passwords were hashed from plain text, and which ones were hashed from an MD5 hash. Or I could just try both when authenticating users. Or even just hash new passwords with MD5 and then SHA-512/salt, so they can be treated the same as old passwords.
Programmatically, I don't think this will be a problem, but I don't know enough about encryption/hashing to know if I'm compromising the quality of the hash in any way by applying a SHA-512/salt hash to a password that was already MD5 hashed. My first instinct is that if anything, it would be even stronger, a very light key stretching. 
My second instinct is that I don't really know what I'm talking about, so I'd better get advice. Any thoughts?
","If you hash with MD5 first, you will only have the spread of MD5 (128 bit). A large fraction of the space of SHA512 will not be covered by your passwords. So you don't take advantage of SHA512, but it won't be worse than MD5. 
You have the benefit that if someone obtains the SHA512 hash and doesn't know the salt (this you have to enforce somehow) can't look up the hashes and get the passwords -- something that would be possible with the MD5 database you have now.
So yes, you can just rehash the existing MD5 passwords. But as explained in the first paragraph, it would be a bad idea to apply MD5 to all new passwords as well and then hash them as SH512. A easy implementation would be to have a boolean 'salted' field in the database next to the hashes (but don't put the salt there).
","2280","<java><security><hash><sha>","9","4","4","2012-04-05 12:26:30","10028562","2","2","","","","2012-04-05 12:09:05",""
"10028308","Use SHA-512 and salt to hash an MD5 hashed password?","I am working on a system that has been hashing user passwords with MD5 (no salt). I want to store the passwords more securely using SHA-512 and a salt.
While this is easy enough to implement for future passwords, I'd like to also retrofit the existing MD5 hashed passwords, preferably without forcing all the users to change their passwords. My idea is to just use SHA-512 and and an appropriate salt to hash the existing MD5 hash. I can either then set some flag in the database that indicates which passwords were hashed from plain text, and which ones were hashed from an MD5 hash. Or I could just try both when authenticating users. Or even just hash new passwords with MD5 and then SHA-512/salt, so they can be treated the same as old passwords.
Programmatically, I don't think this will be a problem, but I don't know enough about encryption/hashing to know if I'm compromising the quality of the hash in any way by applying a SHA-512/salt hash to a password that was already MD5 hashed. My first instinct is that if anything, it would be even stronger, a very light key stretching. 
My second instinct is that I don't really know what I'm talking about, so I'd better get advice. Any thoughts?
","Function composition with cryptographic primitives is dangerous and should not be done if avoidable. The common solution for your type of problem is to keep both hashes for a migration period, using the new hash where possible and transparently upgrading old passwords (when you check a password and it matches, rehash it with the new algorithm and store it)
This won't work if you have a challenge-response based scheme where you don't get to see the plaintext password, but since you seem to have a stored salt that does not change, I assume your application does the hashing.
","2280","<java><security><hash><sha>","9","5","4","2012-04-05 12:26:30","10028562","2","2","","","","2012-04-05 12:09:05",""
"10028308","Use SHA-512 and salt to hash an MD5 hashed password?","I am working on a system that has been hashing user passwords with MD5 (no salt). I want to store the passwords more securely using SHA-512 and a salt.
While this is easy enough to implement for future passwords, I'd like to also retrofit the existing MD5 hashed passwords, preferably without forcing all the users to change their passwords. My idea is to just use SHA-512 and and an appropriate salt to hash the existing MD5 hash. I can either then set some flag in the database that indicates which passwords were hashed from plain text, and which ones were hashed from an MD5 hash. Or I could just try both when authenticating users. Or even just hash new passwords with MD5 and then SHA-512/salt, so they can be treated the same as old passwords.
Programmatically, I don't think this will be a problem, but I don't know enough about encryption/hashing to know if I'm compromising the quality of the hash in any way by applying a SHA-512/salt hash to a password that was already MD5 hashed. My first instinct is that if anything, it would be even stronger, a very light key stretching. 
My second instinct is that I don't really know what I'm talking about, so I'd better get advice. Any thoughts?
","If you look at how most Bank and high security people does there password changing. Most of them basically ask people who is using the old encryption method to create a new password. I think you first solution of placing a flag on all existing old MD5 password users, and notify them they need to create new password and slowly migrate them to the new system. That way when you trouble shoot the system if anything goes wrong you won't be asking is this a new user or an old one. Are we double hashing or single? Should never compare two hash as a possible answer because what if MD5('abc') => 123, SHA('NO') => 123, that means someone could have typed in the wrong password but still gets in.
","2280","<java><security><hash><sha>","9","0","4","2012-04-05 12:26:30","10028562","2","2","","","","2012-04-05 12:09:05",""
"6613278","How was SHA-0 broken? - What is the significance of a mere handful of hash collisions?","I wanted to understand how the SHA0 hash function was broken.  I understand that utilising the birthday problem/pigeon-hold principle, hash collision(s) were found.  http://www.mail-archive.com/cryptography%40metzdowd.com/msg02554.html contains an example message.
What I’m having trouble finding/understanding:
Does this mean there is a timely, mathematical way to ALWAYS produce a hash collision? 
Can I eventually find a m2 for a given m1 such that m1 != m2, sha(m1) == sha(m2) or is it only possible on a subset of possible messages?  Rephrased:  Are the chances of my password having another message for a collision guaranteed?  
What is the significance of finding 2 random long messages such as in the link above that have the same hash value?  Why did they have to sift through long random messages for a collision instead of figuring a collision for a practical message like “The brown dog jumped over the fox” ?
A couple examples of hash collisions don’t seem as important as a timely method to generate a collision for any message, but all the posts talk about the former.  
Thanks for any help/your time!  I've read alot of posts/articles, but can't work my brain around my confusion.  I suspect I have the same questions for other broken hash functions like MD5.
EDIT:
The paper (explaining improved method for finding collisions) referenced in the answer
","From Wikipedia:

In February 2005, an attack by Xiaoyun
  Wang, Yiqun Lisa Yin, and Hongbo Yu
  was announced which could find
  collisions in SHA-0 in 2^39
  operations.

That kind of complexity is completely insufficient for cryptographic purposes with the computing power currently available. It guarantees the discovery of a collision for any message in a very reasonable amount of time.
","2264","<hash><md5><sha><hash-collision>","5","8","1","2011-08-19 21:30:37","6613379","3","2","95","","2011-08-19 21:30:37","2011-07-07 15:42:19",""
"26622185","SHA1() vs shasum from command line","So I have been playing around with SHA hashing, but I have run up against a bit of a wall. For some reason, shasum from the command line and SHA1() from openssl in my program produce two difference results. 
Code:
#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <string.h>
#include <sys/wait.h>
#include <openssl/sha.h>

int main(int argc, char* argv[]){
  int i;
  char data[] = ""README"";
  size_t length = sizeof(data);
  unsigned char hash[50];

  SHA1(data, length, hash);

  printf(""shasum of \""README\"" is \n"");
  for(i = 0; i<SHA_DIGEST_LENGTH; i++){
    printf(""%x"", hash[i]);
  }
  printf(""\n"");

  /*Using shasum utility*/

  int rc = fork();
  if(rc < 0){
    fprintf(stderr, ""Fork failed. \n"");
    exit(1);
  }
  else if(rc == 0){
    char* myargs[3];
    myargs[0] = strdup(""shasum"");
    myargs[1] = strdup(""README"");
    myargs[2] = NULL;
    execvp(myargs[0], myargs);
  }
  wait(NULL);

  return 0;
}

Output:
shasum of ""README"" is
aabc5996b4a0256158cbaa6eb4e01b3aa992d942
827cc372e1a3c99b66f6ad820b223939c68bd389  README

The first hash is from SHA1 and the second hash is from shasum (fork/exec from within program). What is causing this?
","The problem is that the command-line function ""shasum"" takes as an argument a filename, whereas the openssl-library C-function ""shasum"" takes as an argument the actual data. 
That is, you are comparing the result of the hash of the file named README to the result of the hash of the string ""README"".
To see both of calculations result the same, just change:
SHA1(data, length, hash);

to 
SHA1(data, length-1, hash);

As Jonathan Leffler said, this is to correct the fact that you're including the terminating '\0'.
For the other calculation, you could do echo -n README | shasum to see the real hash. Or, to see it result ok in your program, just output it to a file named README: echo -n README > README.
Your program will then output:
shasum of ""README"" is 
69e27356ef629022720d868ab0c0e3394775b6c1
69e27356ef629022720d868ab0c0e3394775b6c1  README

EDIT:
If you want to use the SHA1 function to calculate the hash of the readme file, you would have to read the file (see You would need to programatically read the file to a char* buffer, ( see Reading the whole text file into a char array in C) and pass this buffer to the SHA1 function.
","2254","<c><hash><sha1><sha>","1","3","1","2014-10-29 14:47:49","","4","1","1009479","","2014-10-29 03:14:01","2014-10-29 03:12:45",""
"17221253","Facebook Real-time Update: Validating X-Hub-Signature SHA1 signature in Java","When Facebook sends real-time updates, they include a X-Hub-Signature in the HTTP header. According to their documentation, they're using SHA1 and the application secret as the key.
Based on a similar question for C# I tried to verify the signature like this ('body' is the message sent by facebook in the body of the request):
String passedSignature = req.getHeader(""X-Hub-Signature"").substring(5);
Mac hmac = Mac.getInstance(""HmacSHA1"");
hmac.init(new SecretKeySpec(FACEBOOK_SECRET.getBytes(Charset.forName(""UTF-8"")), ""HmacSHA1""));
String calculatedSignature = Hex.encodeHexString(hmac.doFinal(body.getBytes(Charset.forName(""UTF-8""))));
logger.debug(""Calculated sigSHA1: "" + calculatedSignature + "" passedSignature: "" + passedSignature);

But the passedSignature is always different from the calculatedSignature.
Anybody can help solving the problem?
","Turns out the code is correct, I was using the wrong key :-/
Anyway I hope this could help somebody else.
","2246","<java><facebook><sha><real-time-updates>","10","12","1","2013-06-21 12:52:32","17235716","1","3","-1","","2017-05-23 12:09:03","2013-06-20 18:36:57",""
"31428397","SHA 256 from Java to C#","I´m trying to create the equivalent code from Java to C# for the function below:
public static String SHA256 (List<String> parametros, String clave) 

{
try {
    MessageDigest sha = MessageDigest.getInstance(""SHA-256"");
    for(String param:parametros){
        byte p[] = new byte[param.length()];
        p = param.getBytes();
        sha.update(p);
    }
    byte bClave[] = new byte[clave.length()];
    bClave = clave.getBytes();
    byte[] hash = sha.digest(bClave);
    return ( hexString256 (hash));
   }catch (NoSuchAlgorithmException e){
   return (""Error"");
  }
}

Any suggestions for the  sha.update(p); line?
","If it's just about calculating SHA-256 hash of some data maybe this would give some idea:
// using System.Security.Cryptography;
public static string ComputeHashSha256(byte[] toBeHashed)
{
    using (var sha256 = SHA256.Create())
    {
        return Encoding.UTF8.GetString(sha256.ComputeHash(toBeHashed));
    }
}

UPDATE:
If the goal is to compute hash of a list strings after concatenating them you can use an additional method like (or combine them both in a single one if you wish):
public static string ComputeSHA256HashOfAListOfStrings(List<string> parameters)
{
    var concatted = string.Join(string.Empty, parameters);
    var byteOfConcattedString = Encoding.UTF8.GetBytes(concatted);
    return ComputeHashSha256(byteOfConcattedString);
}

Please note I just meant this sample to be a pointer for you because I don't exactly know what the Java code above does but I hope it helps a bit.
","2241","<java><c#><sha><sha256><message-digest>","1","1","1","2015-07-16 09:34:24","31436812","0","3","","","","2015-07-15 10:52:40",""
"8269574","Compare two hash strings generated using SHA-1 in Android","Here is the flow of my Android code:
I am using SHA-1 hashing to hash a password entered by the user via EditText. I get a hash string as output over here.
After that I am calling a SOAP web service (created using .NET framework) that performs the same SHA-1 hashing using ASCII encoding and returns me another hash string.
Now since the input string is same in both the cases, my hash strings are same as expected.
See logcat below. But when I am comparing the hash strings, I am not getting the result as expected
Here is my Android code followed by logcat:
           package com.kar.encodePassword;
           import java.io.IOException;
           import java.io.UnsupportedEncodingException;
           import java.net.SocketException;
           import java.security.MessageDigest;
           import java.security.NoSuchAlgorithmException;
           import org.ksoap2.SoapEnvelope;
           import org.ksoap2.serialization.SoapObject;
           import org.ksoap2.serialization.SoapPrimitive;
           import org.ksoap2.serialization.SoapSerializationEnvelope;
           import org.ksoap2.transport.HttpTransportSE;
           import org.xmlpull.v1.XmlPullParserException;
           import android.app.Activity;
           import android.os.Bundle;
           import android.util.Base64;
           import android.util.Log;
           import android.view.View;
           import android.widget.Button;
           import android.widget.EditText;
           import android.widget.Toast;

   public class PaswordencodingActivity extends Activity {
       /** Called when the activity is first created. */

 private static final String soap_action = ""http://tempuri.org/HashCode"";
 private static final String method_name = ""HashCode"";
 private static final String namespace2 = ""http://tempuri.org/"";
 private static final String url2 = ""http://10.0.2.2/checkhash/Service1.asmx""; 

String password=""abc"";
public final static int NO_OPTIONS = 0;
String hash;
    String result2;


@Override
public void onCreate(Bundle savedInstanceState) 
{
    super.onCreate(savedInstanceState);
    setContentView(R.layout.main);

    final EditText pass=(EditText)findViewById(R.id.editText1);
    Button encode=(Button)findViewById(R.id.button1);            
    encode.setOnClickListener(new View.OnClickListener() {
        public void onClick(View v)  {
            // Perform action on click
            password=pass.getText().toString();
            if(password!=null){
                try { 
        SHA1(password) ;
        } catch (UnsupportedEncodingException e) {                                          
                      e.printStackTrace();
        } catch (IOException e) {   
            e.printStackTrace();                    
                      }
            }
            else{
       Toast.makeText(PaswordencodingActivity.this, ""this is a negative onClick"", Toast.LENGTH_LONG).show();
            }

           }

          });


        }


private static String convertToHex(byte[] data) throws java.io.IOException 
 {
        System.out.println(""data received is""  +data);

        StringBuffer sb = new StringBuffer();
        String hex=null;

        hex=Base64.encodeToString(data, 0, data.length, NO_OPTIONS);

        for (int i = 0; i < data.length; i++) 
        {            
            if (hex.length() == 1) 
            {
                sb.append('0');
            }
            sb.append(hex);
        }

       return sb.toString();
    }

public void SHA1(String text) throws IOException
{
    MessageDigest mdSha1 = null;
    try 
    {
      mdSha1 = MessageDigest.getInstance(""SHA-1"");
    } catch (NoSuchAlgorithmException e1) {
      Log.e(""myapp"", ""Error initializing SHA1 message digest"");
    }
    mdSha1.update(text.getBytes(""iso-8859-1""), 0, text.length());
    byte[] data = mdSha1.digest();
    hash=convertToHex(data);

    System.out.println(""data going is""  +data);
    System.out.println(""hash value""+hash);

    try
    {
        result2=call3(password);
        if(result2.equalsIgnoreCase(hash.toString()))
        System.out.println(""success"");


    } catch (XmlPullParserException e)
    {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }   

        }

public String call3(String pass) throws XmlPullParserException
{
        String b=""""; 

        SoapObject request = new SoapObject(namespace2, method_name);      
        request.addProperty(""str"",pass);

        SoapSerializationEnvelope envelope = new SoapSerializationEnvelope(SoapEnvelope.VER11); 
        envelope.dotNet = true; 
        envelope.setOutputSoapObject(request);

        HttpTransportSE  android = new HttpTransportSE(url2);

        android.debug = true; 
 try 
 {

        android.call(soap_action, envelope);

        SoapPrimitive result = (SoapPrimitive)envelope.getResponse();
        Log.i(""myapp"",result.toString());
        System.out.println("" --- response ---- "" + result); 
        b=result.toString();


        } catch (SocketException ex) { 
            ex.printStackTrace(); 
        } catch (Exception e) { 
            e.printStackTrace(); 
        } 

        return b;   

}
}

Basically when I am trying to compare the two hash strings I am not getting the result
Why so ? can anyone help?
Logcat:
        11-25 17:09:50.899: INFO/System.out(275): data received is[B@44ef8eb0
        11-25 17:09:50.909: INFO/System.out(275): data going is[B@44ef8eb0
        11-25 17:09:50.909: INFO/System.out(275): hash valueUGGpBypVug3K+/4xONpqv9wkFd8=
        11-25 17:09:50.909: INFO/System.out(275): UGGpBypVug3K+/4xONpqv9wkFd8=
        11-25 17:09:50.909: INFO/System.out(275): UGGpBypVug3K+/4xONpqv9wkFd8=
        11-25 17:09:50.909: INFO/System.out(275): UGGpBypVug3K+/4xONpqv9wkFd8=
        11-25 17:09:50.909: INFO/System.out(275): UGGpBypVug3K+/4xONpqv9wkFd8=
        11-25 17:09:50.909: INFO/System.out(275): UGGpBypVug3K+/4xONpqv9wkFd8=
        11-25 17:09:50.909: INFO/System.out(275): UGGpBypVug3K+/4xONpqv9wkFd8=
        11-25 17:09:50.909: INFO/System.out(275): UGGpBypVug3K+/4xONpqv9wkFd8=
        11-25 17:10:01.730: INFO/myapp(275): UGGpBypVug3K+/4xONpqv9wkFd8=
        11-25 17:10:01.730: INFO/System.out(275):  --- response ---- UGGpBypVug3K+/4xONpqv9wkFd8=

","I think you convert byte[] to String in wrong way, it should be like this:
hash = new String(data);

Also you are doing the comparison wrong, should be like this:
if(result2.equals(hash))

In my opinion you should not convert byte[] to String at all. Use Arrays.equals(byteArray1,byteArray2);. Your data is random bits of 1 and 0s. Converting it to String can be done in many ways, but it doesn't make any sense.
","2240","<android><web-services><hash><ksoap2><sha>","1","1","3","2011-11-25 14:17:37","8269771","0","1","841915","","2011-11-25 13:17:11","2011-11-25 13:05:29",""
"8269574","Compare two hash strings generated using SHA-1 in Android","Here is the flow of my Android code:
I am using SHA-1 hashing to hash a password entered by the user via EditText. I get a hash string as output over here.
After that I am calling a SOAP web service (created using .NET framework) that performs the same SHA-1 hashing using ASCII encoding and returns me another hash string.
Now since the input string is same in both the cases, my hash strings are same as expected.
See logcat below. But when I am comparing the hash strings, I am not getting the result as expected
Here is my Android code followed by logcat:
           package com.kar.encodePassword;
           import java.io.IOException;
           import java.io.UnsupportedEncodingException;
           import java.net.SocketException;
           import java.security.MessageDigest;
           import java.security.NoSuchAlgorithmException;
           import org.ksoap2.SoapEnvelope;
           import org.ksoap2.serialization.SoapObject;
           import org.ksoap2.serialization.SoapPrimitive;
           import org.ksoap2.serialization.SoapSerializationEnvelope;
           import org.ksoap2.transport.HttpTransportSE;
           import org.xmlpull.v1.XmlPullParserException;
           import android.app.Activity;
           import android.os.Bundle;
           import android.util.Base64;
           import android.util.Log;
           import android.view.View;
           import android.widget.Button;
           import android.widget.EditText;
           import android.widget.Toast;

   public class PaswordencodingActivity extends Activity {
       /** Called when the activity is first created. */

 private static final String soap_action = ""http://tempuri.org/HashCode"";
 private static final String method_name = ""HashCode"";
 private static final String namespace2 = ""http://tempuri.org/"";
 private static final String url2 = ""http://10.0.2.2/checkhash/Service1.asmx""; 

String password=""abc"";
public final static int NO_OPTIONS = 0;
String hash;
    String result2;


@Override
public void onCreate(Bundle savedInstanceState) 
{
    super.onCreate(savedInstanceState);
    setContentView(R.layout.main);

    final EditText pass=(EditText)findViewById(R.id.editText1);
    Button encode=(Button)findViewById(R.id.button1);            
    encode.setOnClickListener(new View.OnClickListener() {
        public void onClick(View v)  {
            // Perform action on click
            password=pass.getText().toString();
            if(password!=null){
                try { 
        SHA1(password) ;
        } catch (UnsupportedEncodingException e) {                                          
                      e.printStackTrace();
        } catch (IOException e) {   
            e.printStackTrace();                    
                      }
            }
            else{
       Toast.makeText(PaswordencodingActivity.this, ""this is a negative onClick"", Toast.LENGTH_LONG).show();
            }

           }

          });


        }


private static String convertToHex(byte[] data) throws java.io.IOException 
 {
        System.out.println(""data received is""  +data);

        StringBuffer sb = new StringBuffer();
        String hex=null;

        hex=Base64.encodeToString(data, 0, data.length, NO_OPTIONS);

        for (int i = 0; i < data.length; i++) 
        {            
            if (hex.length() == 1) 
            {
                sb.append('0');
            }
            sb.append(hex);
        }

       return sb.toString();
    }

public void SHA1(String text) throws IOException
{
    MessageDigest mdSha1 = null;
    try 
    {
      mdSha1 = MessageDigest.getInstance(""SHA-1"");
    } catch (NoSuchAlgorithmException e1) {
      Log.e(""myapp"", ""Error initializing SHA1 message digest"");
    }
    mdSha1.update(text.getBytes(""iso-8859-1""), 0, text.length());
    byte[] data = mdSha1.digest();
    hash=convertToHex(data);

    System.out.println(""data going is""  +data);
    System.out.println(""hash value""+hash);

    try
    {
        result2=call3(password);
        if(result2.equalsIgnoreCase(hash.toString()))
        System.out.println(""success"");


    } catch (XmlPullParserException e)
    {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }   

        }

public String call3(String pass) throws XmlPullParserException
{
        String b=""""; 

        SoapObject request = new SoapObject(namespace2, method_name);      
        request.addProperty(""str"",pass);

        SoapSerializationEnvelope envelope = new SoapSerializationEnvelope(SoapEnvelope.VER11); 
        envelope.dotNet = true; 
        envelope.setOutputSoapObject(request);

        HttpTransportSE  android = new HttpTransportSE(url2);

        android.debug = true; 
 try 
 {

        android.call(soap_action, envelope);

        SoapPrimitive result = (SoapPrimitive)envelope.getResponse();
        Log.i(""myapp"",result.toString());
        System.out.println("" --- response ---- "" + result); 
        b=result.toString();


        } catch (SocketException ex) { 
            ex.printStackTrace(); 
        } catch (Exception e) { 
            e.printStackTrace(); 
        } 

        return b;   

}
}

Basically when I am trying to compare the two hash strings I am not getting the result
Why so ? can anyone help?
Logcat:
        11-25 17:09:50.899: INFO/System.out(275): data received is[B@44ef8eb0
        11-25 17:09:50.909: INFO/System.out(275): data going is[B@44ef8eb0
        11-25 17:09:50.909: INFO/System.out(275): hash valueUGGpBypVug3K+/4xONpqv9wkFd8=
        11-25 17:09:50.909: INFO/System.out(275): UGGpBypVug3K+/4xONpqv9wkFd8=
        11-25 17:09:50.909: INFO/System.out(275): UGGpBypVug3K+/4xONpqv9wkFd8=
        11-25 17:09:50.909: INFO/System.out(275): UGGpBypVug3K+/4xONpqv9wkFd8=
        11-25 17:09:50.909: INFO/System.out(275): UGGpBypVug3K+/4xONpqv9wkFd8=
        11-25 17:09:50.909: INFO/System.out(275): UGGpBypVug3K+/4xONpqv9wkFd8=
        11-25 17:09:50.909: INFO/System.out(275): UGGpBypVug3K+/4xONpqv9wkFd8=
        11-25 17:09:50.909: INFO/System.out(275): UGGpBypVug3K+/4xONpqv9wkFd8=
        11-25 17:10:01.730: INFO/myapp(275): UGGpBypVug3K+/4xONpqv9wkFd8=
        11-25 17:10:01.730: INFO/System.out(275):  --- response ---- UGGpBypVug3K+/4xONpqv9wkFd8=

","Try 
result2 = result2.trim();
hash = hash.trim();

System.out.println(""result2='"" + result2 + ""'"");
System.out.println(""hash ='"" + hash + ""'"");

if(result2.equalsIgnoreCase(hash))
   System.out.println(""success"");

If this does not help, check the actual arrays:
byte[] a = result.toString().getBytes() 
byte[] b = hash..getBytes();

If the arrays are not equal, you have strings in different encodings.
","2240","<android><web-services><hash><ksoap2><sha>","1","1","3","2011-11-25 14:17:37","8269771","0","1","841915","","2011-11-25 13:17:11","2011-11-25 13:05:29",""
"8269574","Compare two hash strings generated using SHA-1 in Android","Here is the flow of my Android code:
I am using SHA-1 hashing to hash a password entered by the user via EditText. I get a hash string as output over here.
After that I am calling a SOAP web service (created using .NET framework) that performs the same SHA-1 hashing using ASCII encoding and returns me another hash string.
Now since the input string is same in both the cases, my hash strings are same as expected.
See logcat below. But when I am comparing the hash strings, I am not getting the result as expected
Here is my Android code followed by logcat:
           package com.kar.encodePassword;
           import java.io.IOException;
           import java.io.UnsupportedEncodingException;
           import java.net.SocketException;
           import java.security.MessageDigest;
           import java.security.NoSuchAlgorithmException;
           import org.ksoap2.SoapEnvelope;
           import org.ksoap2.serialization.SoapObject;
           import org.ksoap2.serialization.SoapPrimitive;
           import org.ksoap2.serialization.SoapSerializationEnvelope;
           import org.ksoap2.transport.HttpTransportSE;
           import org.xmlpull.v1.XmlPullParserException;
           import android.app.Activity;
           import android.os.Bundle;
           import android.util.Base64;
           import android.util.Log;
           import android.view.View;
           import android.widget.Button;
           import android.widget.EditText;
           import android.widget.Toast;

   public class PaswordencodingActivity extends Activity {
       /** Called when the activity is first created. */

 private static final String soap_action = ""http://tempuri.org/HashCode"";
 private static final String method_name = ""HashCode"";
 private static final String namespace2 = ""http://tempuri.org/"";
 private static final String url2 = ""http://10.0.2.2/checkhash/Service1.asmx""; 

String password=""abc"";
public final static int NO_OPTIONS = 0;
String hash;
    String result2;


@Override
public void onCreate(Bundle savedInstanceState) 
{
    super.onCreate(savedInstanceState);
    setContentView(R.layout.main);

    final EditText pass=(EditText)findViewById(R.id.editText1);
    Button encode=(Button)findViewById(R.id.button1);            
    encode.setOnClickListener(new View.OnClickListener() {
        public void onClick(View v)  {
            // Perform action on click
            password=pass.getText().toString();
            if(password!=null){
                try { 
        SHA1(password) ;
        } catch (UnsupportedEncodingException e) {                                          
                      e.printStackTrace();
        } catch (IOException e) {   
            e.printStackTrace();                    
                      }
            }
            else{
       Toast.makeText(PaswordencodingActivity.this, ""this is a negative onClick"", Toast.LENGTH_LONG).show();
            }

           }

          });


        }


private static String convertToHex(byte[] data) throws java.io.IOException 
 {
        System.out.println(""data received is""  +data);

        StringBuffer sb = new StringBuffer();
        String hex=null;

        hex=Base64.encodeToString(data, 0, data.length, NO_OPTIONS);

        for (int i = 0; i < data.length; i++) 
        {            
            if (hex.length() == 1) 
            {
                sb.append('0');
            }
            sb.append(hex);
        }

       return sb.toString();
    }

public void SHA1(String text) throws IOException
{
    MessageDigest mdSha1 = null;
    try 
    {
      mdSha1 = MessageDigest.getInstance(""SHA-1"");
    } catch (NoSuchAlgorithmException e1) {
      Log.e(""myapp"", ""Error initializing SHA1 message digest"");
    }
    mdSha1.update(text.getBytes(""iso-8859-1""), 0, text.length());
    byte[] data = mdSha1.digest();
    hash=convertToHex(data);

    System.out.println(""data going is""  +data);
    System.out.println(""hash value""+hash);

    try
    {
        result2=call3(password);
        if(result2.equalsIgnoreCase(hash.toString()))
        System.out.println(""success"");


    } catch (XmlPullParserException e)
    {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }   

        }

public String call3(String pass) throws XmlPullParserException
{
        String b=""""; 

        SoapObject request = new SoapObject(namespace2, method_name);      
        request.addProperty(""str"",pass);

        SoapSerializationEnvelope envelope = new SoapSerializationEnvelope(SoapEnvelope.VER11); 
        envelope.dotNet = true; 
        envelope.setOutputSoapObject(request);

        HttpTransportSE  android = new HttpTransportSE(url2);

        android.debug = true; 
 try 
 {

        android.call(soap_action, envelope);

        SoapPrimitive result = (SoapPrimitive)envelope.getResponse();
        Log.i(""myapp"",result.toString());
        System.out.println("" --- response ---- "" + result); 
        b=result.toString();


        } catch (SocketException ex) { 
            ex.printStackTrace(); 
        } catch (Exception e) { 
            e.printStackTrace(); 
        } 

        return b;   

}
}

Basically when I am trying to compare the two hash strings I am not getting the result
Why so ? can anyone help?
Logcat:
        11-25 17:09:50.899: INFO/System.out(275): data received is[B@44ef8eb0
        11-25 17:09:50.909: INFO/System.out(275): data going is[B@44ef8eb0
        11-25 17:09:50.909: INFO/System.out(275): hash valueUGGpBypVug3K+/4xONpqv9wkFd8=
        11-25 17:09:50.909: INFO/System.out(275): UGGpBypVug3K+/4xONpqv9wkFd8=
        11-25 17:09:50.909: INFO/System.out(275): UGGpBypVug3K+/4xONpqv9wkFd8=
        11-25 17:09:50.909: INFO/System.out(275): UGGpBypVug3K+/4xONpqv9wkFd8=
        11-25 17:09:50.909: INFO/System.out(275): UGGpBypVug3K+/4xONpqv9wkFd8=
        11-25 17:09:50.909: INFO/System.out(275): UGGpBypVug3K+/4xONpqv9wkFd8=
        11-25 17:09:50.909: INFO/System.out(275): UGGpBypVug3K+/4xONpqv9wkFd8=
        11-25 17:09:50.909: INFO/System.out(275): UGGpBypVug3K+/4xONpqv9wkFd8=
        11-25 17:10:01.730: INFO/myapp(275): UGGpBypVug3K+/4xONpqv9wkFd8=
        11-25 17:10:01.730: INFO/System.out(275):  --- response ---- UGGpBypVug3K+/4xONpqv9wkFd8=

","If you are applying the hashing algorithm on data derived from a String, you need to use the same character encoding to retrieve the bytes.
text.getBytes(""iso-8859-1"")

Different character sets can represent byte values differently.
","2240","<android><web-services><hash><ksoap2><sha>","1","1","3","2011-11-25 14:17:37","8269771","0","1","841915","","2011-11-25 13:17:11","2011-11-25 13:05:29",""
"23884594","Encrypting passwords in database by using SHA-256 algorithm","I'd would like to encrypt in a database the password by using SHA-256 algorithm. I have made some researches and I found out I should use MessageDigestclass to encrypt properly a string object. The problem is how should revert the hash function to get back to the original password? I mean If I would create a login system, I have to be able to get back to the original password or maybe not? Maybe when the password is filled into the form, it has to be converted into hash function and compared to the hash string stored in database, right?
","Brother, the entire purpose of hashes is that you should not be able to get the original string back from them. What you need to do in case of passwords is you hash the user input and compare it with the hash of the password to check if it was the original password. To know how you convert the password into a SHA-256 hash read this.
","2234","<java><algorithm><encryption><sha><message-digest>","0","5","1","2014-05-27 08:39:42","23884735","1","","","","","2014-05-27 08:31:49",""
"6478451","sha('$password') return with empty set","I have two problems.
problem one:
I am trying to create a registeration form where users can register with my website.
when I run this mysql statement a get dublicate entry found error:
$sql ""insert into users(username, password) values('$username, sha('$password'))"";

Duplicate entry 'da39a3ee5e6b4b0d3255bfef95601890afd80709' for key 'password'
despite the fact that I changed the the string sha('$password') several times.
please help.
else{
   include(""databaseconnection.php"");
   $databaseconnect = connect($host,$user,$password,$database)
      or die(""couldnot connect to database serever.\n"");
   $database_select = mysql_select_db($database,$databaseconnect)
      or die(""could not select dabases.\n "" .mysql_error());
   $query2 = ""insert into company(username,password)
      values('$username',sha1('$password'))"";
   $result2 = mysql_query($query2,$databaseconnect);
   echo ""you have been registered as '$companyloginName' <br/>"";
   header(""Location:/index.php"");

my login php script is as follow:
   $result =""select username, password form users where username ='$username' and password = sha('$password');
    if(mysql_num_rows($reuslt)==1){
   echo""welcome '$username"";
    }

","da39a3ee5e6b4b0d3255bfef95601890afd80709 is the sha1 hash of the empty string. Make sure that you actually insert the password into your SQL query, for example by echoing the query instead of sending it to the SQL server.
Edit With the new information added to your question, check out these two lines:
include(""databaseconnection.php"");
$databaseconnect = connect($host,$user,$password,$database)

Here, $password is the password used to connect to the database. The inclusion of databaseconnection.php probably overwrites what was previously in the $password variable.
Try to echo $query2 and you'll probably see it for yourself, that the SQL query doesn't include any password at all or that the password therein is not the same as the one entered by the user.
","2219","<php><sha1><sha>","1","0","3","2011-06-25 20:40:46","6478669","5","","455934","","2011-06-25 20:40:46","2011-06-25 14:44:01",""
"6478451","sha('$password') return with empty set","I have two problems.
problem one:
I am trying to create a registeration form where users can register with my website.
when I run this mysql statement a get dublicate entry found error:
$sql ""insert into users(username, password) values('$username, sha('$password'))"";

Duplicate entry 'da39a3ee5e6b4b0d3255bfef95601890afd80709' for key 'password'
despite the fact that I changed the the string sha('$password') several times.
please help.
else{
   include(""databaseconnection.php"");
   $databaseconnect = connect($host,$user,$password,$database)
      or die(""couldnot connect to database serever.\n"");
   $database_select = mysql_select_db($database,$databaseconnect)
      or die(""could not select dabases.\n "" .mysql_error());
   $query2 = ""insert into company(username,password)
      values('$username',sha1('$password'))"";
   $result2 = mysql_query($query2,$databaseconnect);
   echo ""you have been registered as '$companyloginName' <br/>"";
   header(""Location:/index.php"");

my login php script is as follow:
   $result =""select username, password form users where username ='$username' and password = sha('$password');
    if(mysql_num_rows($reuslt)==1){
   echo""welcome '$username"";
    }

","Guessing from the commented line, it may be possible you accidentally use the connection password that is set in 'databaseconnection.php' rather than the user password - you don't show how you initialize the $password string.
Also note the comma in your sql that shouldn't be there:
insert into company(username,password,)
                                     ^

I have not tested if that is the cause, but you should probably get rid of it and test it again.
Also, seriously consider pdo / prepared statements to prevent sql-injections, even more so if you want to insert the password from user input. 
","2219","<php><sha1><sha>","1","0","3","2011-06-25 20:40:46","6478669","5","","455934","","2011-06-25 20:40:46","2011-06-25 14:44:01",""
"6478451","sha('$password') return with empty set","I have two problems.
problem one:
I am trying to create a registeration form where users can register with my website.
when I run this mysql statement a get dublicate entry found error:
$sql ""insert into users(username, password) values('$username, sha('$password'))"";

Duplicate entry 'da39a3ee5e6b4b0d3255bfef95601890afd80709' for key 'password'
despite the fact that I changed the the string sha('$password') several times.
please help.
else{
   include(""databaseconnection.php"");
   $databaseconnect = connect($host,$user,$password,$database)
      or die(""couldnot connect to database serever.\n"");
   $database_select = mysql_select_db($database,$databaseconnect)
      or die(""could not select dabases.\n "" .mysql_error());
   $query2 = ""insert into company(username,password)
      values('$username',sha1('$password'))"";
   $result2 = mysql_query($query2,$databaseconnect);
   echo ""you have been registered as '$companyloginName' <br/>"";
   header(""Location:/index.php"");

my login php script is as follow:
   $result =""select username, password form users where username ='$username' and password = sha('$password');
    if(mysql_num_rows($reuslt)==1){
   echo""welcome '$username"";
    }

","First, I would STRONGLY advice against using MySQL's sha() or PHP's sha1() alone for password hashing purposes. This is a huge security risk for your users if your database gets compromised.
Please take the time to read my previous answer on the subject of password hashing to properly secure your data.

Second, your code is vulnerable to an SQL Injection attack. Use mysql_real_escape_string() to escape the variables you are going to put in your query before-hand.
$query2 = ""insert into company(username,password)
  values('"" . mysql_real_escape_string($username) .
          ""', sha1('"" . mysql_real_escape_string($password) . ""'))"";


Third, your $password variable is being overwritten by your databaseconnection.php file.
include(""databaseconnection.php"");
$databaseconnect = connect($host,$user, $password ,$database);

To put emphasis...

$databaseconnect = connect($host,$user,$password,$database);

Therefore, the $password used later on in your query still contains the password for the database connection, not your user's password.
Change the name of your variable in databaseconnection.php or even better still, use an array to hold all the configuration.
$dbConnectParams = array('host' => 'localhost'
                         'user' => 'myUser',
                         'pass' => 'myPassword',
                         'db' => 'myDB');

Then, change your code as follows:
include(""databaseconnection.php"");
$databaseconnect = mysql_connect($dbConnectParams['host'],
                           $dbConnectParams['user'],
                           $dbConnectParams['pass'],
                           $dbConnectParams['db']);

Since you are already passing the database when calling mysql_connect(), you do no need to call mysql_select_db().
","2219","<php><sha1><sha>","1","1","3","2011-06-25 20:40:46","6478669","5","","455934","","2011-06-25 20:40:46","2011-06-25 14:44:01",""
"23949502","Wordpress sha 256 login","I've been asked to enable SHA256 for storing wordpress passwords.
I've searched for plugins with no luck (not working), so I started to develop my own.
I first thoug.. well if I replace the wp_hash_password with my own function, It would encrypt when saving password and loging. But I wasn't that lucky. I'm able to run hash(sha256) though in a basic php file. I'm aware that users wont' be able to login as the stored key would be md5 and the comparation would be SHA, but it isn't a problem. 
Code:
 if(!function_exists('wp_hash_password')):
   function wp_hash_password($password){
     return hash('sha256', $password);
   }
endif;

So I guess I'll have to make my own ""check login"" function.
Did someone did something like this?¿
","Seems to me that your approach should work if you override the wp_check_password function as well.  That'll have to be done in a plugin, I think, as the functions are loaded before the theme's functions.php.  Something like this:
<?php
/*
Plugin Name: sh256pass
Version: 1.0
*/

if(!function_exists('wp_hash_password')):
   function wp_hash_password($password){
     return hash('sha256', $password);
   }
endif;


if(!function_exists('wp_check_password')):
    function wp_check_password($password, $hash, $user_id = '') {
        // You might want to apply the check_password filter here 
        return wp_hash_password($password) == $hash;
    }
endif;

Note that you'll either have to have your users reset their password on their next login (you won't be able to convert the existing passwords automatically), or you'll have to follow WordPress's approach in wp_check_password and compare the password to the old encrypted value (in their case md5), and if that matches, update to the new value.
Keep in mind that the wp_users.user_pass field is only 64 characters long.  While that's (just) long enough to store the sha256 value, it isn't long enough to store the sha256 value and a salt.  If you don't salt, and two users choose the same password, the wp_users.user_pass field will contain the same value, making it obvious to anyone with access to the database that the passwords are the same.  My gut feel is that that is a greater security risk than using the current algorithm.  You might be able to get around that by (say) concatenating the user ID and the password before hashing, but there might be edge cases where you don't know the user ID (such as when a user is created).
Personally, I'd question the requirement.
","2219","<php><wordpress><sha>","3","3","1","2014-05-30 12:03:36","23954168","1","","","","","2014-05-30 07:43:12",""
"45037903","C++ how to convert unsigned char array to string?","I'm testing a piece of code that performs a hash operation (sha256) of a binary file and I've got something like this:

for(i = 0; i < SHA256_DIGEST_LENGTH; i++) printf(""%02x"", c[i]);

This prints something like: 
12b64492d18aa37d609f27cb02ce5ba381068d1ef5625193df68451c650a2b8d

I'm asking how can I do to get the string shown below into a string variable in C++.
thanks
","#include <iomanip>
#include <sstream>
#include <string>

std::ostringstream oss;
for(int i = 0; i < SHA256_DIGEST_LENGTH; ++i) 
{
      oss << std::hex << std::setw(2) << std::setfill('0') << +c[i];
}
auto str = oss.str();

","2213","<c++><string><sha>","1","5","3","2019-09-16 15:36:07","","1","","7889858","","2017-07-11 21:19:17","2017-07-11 14:48:55",""
"45037903","C++ how to convert unsigned char array to string?","I'm testing a piece of code that performs a hash operation (sha256) of a binary file and I've got something like this:

for(i = 0; i < SHA256_DIGEST_LENGTH; i++) printf(""%02x"", c[i]);

This prints something like: 
12b64492d18aa37d609f27cb02ce5ba381068d1ef5625193df68451c650a2b8d

I'm asking how can I do to get the string shown below into a string variable in C++.
thanks
","For printing out hex values, you can use std::hex format; for setting width and fill character, use std::setw and std::setfill, which are part of <iomanip>.
As you do not show the data type of c, I suppose/suggest to use an unsigned integral type, e.g. unsigned char. I slightly adapted the code to make it self contained):
#define SHA256_DIGEST_LENGTH 256

#include <iostream>
#include <sstream>
#include <iomanip>

int main() {

    unsigned char c[SHA256_DIGEST_LENGTH];
    for (unsigned int i=0; i<SHA256_DIGEST_LENGTH; i++)
        c[i]=i;

    std::stringstream ss;
    for(int i = 0; i < SHA256_DIGEST_LENGTH; i++) {
        ss << std::hex << std::setw(2) << std::setfill('0') << (unsigned int)c[i];
    }

    std::cout << ss.str();
}

Output:
000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff

","2213","<c++><string><sha>","1","1","3","2019-09-16 15:36:07","","1","","7889858","","2017-07-11 21:19:17","2017-07-11 14:48:55",""
"45037903","C++ how to convert unsigned char array to string?","I'm testing a piece of code that performs a hash operation (sha256) of a binary file and I've got something like this:

for(i = 0; i < SHA256_DIGEST_LENGTH; i++) printf(""%02x"", c[i]);

This prints something like: 
12b64492d18aa37d609f27cb02ce5ba381068d1ef5625193df68451c650a2b8d

I'm asking how can I do to get the string shown below into a string variable in C++.
thanks
","Just for comparison, here's the sprintf version:
#include <stdio.h>
#include <string>

std::string ss;
ss.resize(SHA256_DIGEST_LENGTH * 2 + 1); // includes space for terminating NUL
int used = 0;
for(int i = 0; i < SHA256_DIGEST_LENGTH; i++)
    used += sprintf(&ss[used], ""%02x"", c[i]);
ss.resize(used);

Note that there's no harm in making the buffer larger than necessary initially because the final exact size is used, but if there's any possibility the buffer is too small then one must use snprintf and also pass the buffer space remaining (ss.size() - used).
","2213","<c++><string><sha>","1","0","3","2019-09-16 15:36:07","","1","","7889858","","2017-07-11 21:19:17","2017-07-11 14:48:55",""
"29550708","'dgst verify and sign' equivalent with 'RSA_Verify()'","I am using the RSA_verify() function to validate a SHA that I signed by using the openssl program (via a console). RSA_verify() is always returning a non successful validation, so I think that I am sending incorrect parameters to it.
The following console commands are run in Linux Ubuntu with OpenSSL 0.9.8k.
The C functions are compiled for Android, using OpenSSL 1.0.1...c as far as I remember. It's definitely 1.0.1 (we are updating it to avoid the Heartbleed issue).
This is what I do... please forgive any mistake as I am learning this by myself.

Generate a private key
openssl genrsa -out private.key 2048

Extract the public key from the private key
openssl rsa -in private.key -out public.key -outform PEM -pubout

Calculate the SHA from a file called permissions and then sign it with the private.key, the output will be a SHA but with RSA encryption (permissions.sign)
openssl dgst -sha256 -sign private.key -out permissions.sign permissions

Validate a received SHA signature against the permissions file (it's successful in the Ubuntu console)
openssl dgst -sha256 -verify public.key -signature permissions.sign permissions

I copy the permissions file, the permissions.sign file and the public.key file to the file system in Android.
I verify that permissions.sign was created with permissions and with a matching private.key... all of this with my public.key (I don't have the private key in Android).

This is the C function.
#include <openssl/pem.h>
#include <openssl/rsa.h>
#include <openssl/sha.h>

...

/* Initialize the public key */
RSA *pub_key = RSA_new();

if(NULL == pub_key)
{
   ANDROID_LOGE(""RSA_new failed"");
   result = 0;
}
else
{
   FILE* fp = fopen(public_key, ""r"");

   if(NULL == fp)
   {
      ANDROID_LOGE_P(""fopen [%s] failed"", public_key);
      result = 0;
   }
   else
   {
      /* Read it from the passed path */
      if(PEM_read_RSA_PUBKEY(fp, &pub_key, NULL, NULL) == NULL)
      {
         ANDROID_LOGE_P(""[%s] can't be read"", public_key);
         result = 0;
         fclose(fp);
      }
      else
      {
         /* Verify the file and its SHA with the public key */
         int verified = RSA_verify(
             NID_sha256,
             file, /* message digest (message to validate) */
             file_size, /* message size */
             sign, /* signature (signed SHA) */
             sign_size, /* signature size */
             pub_key);
         ANDROID_LOGD(""NID_sha256"");

         if(verified)
         {
            result = 1;
            ANDROID_LOGD_P(""[%s] is valid"", file_to_verify);
         }
         else
         {
            ANDROID_LOGE_P(""[%s] is NOT valid"", file_to_verify);
         }

         fclose(fp);
      }

      RSA_free(pub_key);
   }
}


public_key is a path to public.key
PEM_read_RSA_PUBKEY succeeds
NID_sha256 is what I think I should use for the verification
file is a byte array with the contents of permissions
file_size is the array size of file
sign is a byte array with the contents of permissions.sign
sign_size is the array size of sign
RSA_verify() fails, it returns a 0

So the question is, is it correct to:

generate the keys with the commands I used,
sign the permissions file (which generates permissions.sign),
and then try to verify the files with PEM_read_RSA_PUBKEY() and RSA_verify() ?

Are the commands I used for the signing process equivalent to the C functions I used for the verification process?
Please let me know if more info is required or where I could study more about this.
Thanks!
EDIT: I added some error printing after calling RSA_Verify():
ANDROID_LOGE_P(""openssl: %s"", ERR_reason_error_string(ERR_get_error()));
It prints:
openssl: bad signature
Still investigating.
","There were several missing steps in my reading process for the public key.
The correct commands to generate the private and public keys are as follows:
Generate a private key
 ""openssl genrsa -out private.key 2048""
Extract the public key (DER certificate form) from the private key (needed by RSA_SHA_Verify())
 ""openssl req -outform DER -new -x509 -key private.key -out public.key -days 30000""
Generate a public key with no certificate info (only needed by ""openssl dgst -sha1 -verify ..."")
 ""openssl x509 -inform DER -in public.key -pubkey -noout > public_no_cert.key""
Sign a file with the private key
 ""openssl dgst -sha1 -sign private.key -out permissions.sign permissions""
Verify a file with the public key (no certificate info)
 ""openssl dgst -sha1 -verify public_no_cert.key -signature permissions.sign permissions""
Please refer to the documentation on OpenSSL.org for details. I required a X509 DER certificate that was holding the public key to verify the signed SHA with RSA_verify().
An equivalency in command mode to RSA_verify() is:
openssl dgst -sha1 -verify public.key -signature permissions.sign permissions
For code source, please refer to this link:
http://www.bmt-online.org/geekisms/RSA_verify
It does NOT compile at first sight, you have to tweak it. Call the functions in there as follows:
   result = sign_data(
         input_file_buffer,
         input_file_size,
         private_key_buffer,
         private_key_size,
         (void**)&signature,
         &signature_size);

   result = verify_data(
         input_file_buffer,
         input_file_size,
         signature_buffer,
         signature_size,
         public_key_buffer,
         public_key_size);

Everything has to be in RAM, pass them as pointers.
The signing function expects the pointer to a pointer (**) to save the signed SHA into it. You can later save it into a file.
Tested under Ubuntu openssl 0.9.8k.
If you see that something is missing, please let me know. Thanks for reading!
EDIT: Here's a link to the source code...
http://migsantiago.com/index.php/tutoriales/32-firma-y-valida-archivos-con-openssl
","2196","<openssl><rsa><sign><sha><verify>","0","2","1","2015-05-12 15:32:57","29590862","3","","608639","","2015-05-12 15:32:57","2015-04-09 23:19:06",""
"8372548","How can I analyze a file about to be uploaded before it's actually uploaded?","We are currently planning a website on which people can upload movies. When looking at YouTube you notice that some movies are uploaded twice or more times (by different users). To scale our application we're thinking about the following idea:

User selects movie file to be uploaded
A JavaScript will get the SHA256 hash from the file (it's more accurate then the MD5 hash) before it get's uploaded
The website will check if the hash already exists
If the hash doesn't exist, the file will be uploaded
If the hash does exist a message will be prompted or a reference to the already existing version on the server will be created. This without the video being uploaded.

Q: How do we analyze a file with JavaScript in order to get the SHA256 hash, and is SHA256 good enough or should we consider SHA512 (or another algorithm)?
","Simple answer, you can't. That is if you want to support all browsers at least. I think both Chrome and FireFox supports the reading of files on the client, and IE supports it with the help of ActiveX controls, but to get a solution that works in all browsers you have to use a plugin like Flash or Silverlight. Also, when doing file-uploads of video-magnitude (large+ files), I think going for flash or the likes from the start is a good idea anyhow, but that's just my opinion.
","2178","<javascript><scalability><sha>","4","-1","3","2011-12-04 01:45:04","8372585","0","2","815724","","2011-12-04 01:39:38","2011-12-04 01:29:26",""
"8372548","How can I analyze a file about to be uploaded before it's actually uploaded?","We are currently planning a website on which people can upload movies. When looking at YouTube you notice that some movies are uploaded twice or more times (by different users). To scale our application we're thinking about the following idea:

User selects movie file to be uploaded
A JavaScript will get the SHA256 hash from the file (it's more accurate then the MD5 hash) before it get's uploaded
The website will check if the hash already exists
If the hash doesn't exist, the file will be uploaded
If the hash does exist a message will be prompted or a reference to the already existing version on the server will be created. This without the video being uploaded.

Q: How do we analyze a file with JavaScript in order to get the SHA256 hash, and is SHA256 good enough or should we consider SHA512 (or another algorithm)?
","Use the HTML5 File API to read the file: http://www.html5rocks.com/en/tutorials/file/dndfiles. Here is a JS code for calculating SHA-256: http://www.webtoolkit.info/javascript-sha256.html
I must add that I never tried this, but it seems to be possible. Alxandr is right, this would take very long for large videos, but you may try to use the WebWorker API in order not to freeze the browser: http://html5rocks.com/en/tutorials/workers/basics
","2178","<javascript><scalability><sha>","4","6","3","2011-12-04 01:45:04","8372585","0","2","815724","","2011-12-04 01:39:38","2011-12-04 01:29:26",""
"8372548","How can I analyze a file about to be uploaded before it's actually uploaded?","We are currently planning a website on which people can upload movies. When looking at YouTube you notice that some movies are uploaded twice or more times (by different users). To scale our application we're thinking about the following idea:

User selects movie file to be uploaded
A JavaScript will get the SHA256 hash from the file (it's more accurate then the MD5 hash) before it get's uploaded
The website will check if the hash already exists
If the hash doesn't exist, the file will be uploaded
If the hash does exist a message will be prompted or a reference to the already existing version on the server will be created. This without the video being uploaded.

Q: How do we analyze a file with JavaScript in order to get the SHA256 hash, and is SHA256 good enough or should we consider SHA512 (or another algorithm)?
","Putting files aside for now, if the question is actually whether it's possible to get a SHA-256 hashes in JavaScript, the answer is yes. You can either reiplement this yourself (bad idea) or use a library like the Stanford JS Crypto library (good idea).
As far as the File API goes, it is implemented in the bleeding edge version of every major desktop browser, as well as the latest Android browser shipping. iOS is not supported as it doesn't really have a filesystem. Check out caniuse.com for the latest stats.
","2178","<javascript><scalability><sha>","4","1","3","2011-12-04 01:45:04","8372585","0","2","815724","","2011-12-04 01:39:38","2011-12-04 01:29:26",""
"13275187","Are there any slow Javascript hashing algorithms like bcrypt?","I'm not talking about server-side node.js.
I want to use a slow hashing algorithm for a key on the client-side of my site. I have found implementations of SHA-256 which seem to be reliable. I also found this question which lead to the OP creating his own library.
However, I'm not sure if I should just do multiple rounds of SHA hashing or trust some of that code since I'm not a security expert and it doesn't seem to have a large following only being ""stared"" by 36 people.
What is the best choice in this case? I (basically) cannot change methods once I choose something. 
I want a slow hashing (not encryption) algorithm and I would rather it produced a short string. For example, a slow 60 char bcrypt vs fast 70 char SHA-256.
","You can always ignore the last 10 characters of the fast SHA-256. Or xor the first 10 characters to be included.
SHA has a variable number of rounds. Two rounds of SHA should be reversible somewhat. I have a vague idea that 20 rounds is considered ""safe"". 30 rounds should be ""highly secure"" and 50 rounds doesn't practically improve at all the security. 
SHA is designed to be secure -- not by hoping that the cracker has a slow enough machine -- but by mathematical proof. If and when the number of irreversible bits in each round is increased and permuted to the 256 bit hash code, there will never be enough computer power to try all possible sequences that generate that particular hash code. Not even enough energy in the universe to wrap a 256-bit counter. 
Unless the string that produces the hash is very small or written on a post-it on somebody's monitor.
","2173","<javascript><hash><sha><bcrypt>","5","0","2","2012-11-07 19:30:02","13276801","0","2","-1","","2017-05-23 11:46:00","2012-11-07 17:42:42",""
"13275187","Are there any slow Javascript hashing algorithms like bcrypt?","I'm not talking about server-side node.js.
I want to use a slow hashing algorithm for a key on the client-side of my site. I have found implementations of SHA-256 which seem to be reliable. I also found this question which lead to the OP creating his own library.
However, I'm not sure if I should just do multiple rounds of SHA hashing or trust some of that code since I'm not a security expert and it doesn't seem to have a large following only being ""stared"" by 36 people.
What is the best choice in this case? I (basically) cannot change methods once I choose something. 
I want a slow hashing (not encryption) algorithm and I would rather it produced a short string. For example, a slow 60 char bcrypt vs fast 70 char SHA-256.
","There are currently three key-derivation functions widely considered to be secure against brute force cracking attempts.  Key-derivation functions are slightly different from regular hashing algorithms in that they are designed to be slow, even in the face of modern GPU-based computation.
I'll list them in order of theoretical security:

PBKDF2 is designed by RSA, based on SHA, and is the algorithm recommended by NIST.  There's a couple implementations that you could use in a browser.
Note to Node users: Node's crypto module has a built-in PBKDF2 function.  Use that.
bcrypt, based on Blowfish, is slightly more secure than PBKDF2.  It has been relatively well-tested and verified secure, but does not have a stamp of approval from any standards bodies, if that's a consideration for you.  There's a generic JS implementation here.
Note to Node users: Use node.bcrypt, which performs the computationally expensive stuff on a separate thread.
Finally, scrypt is far and away the most theoretically secure (slowest) KDF.  Unfortunately, the algorithm is very new, so it has not been validated by rigorous study and testing by the cryptographic community.  It is, however, on track to become a IETF standard.
Because the algorithm is so new, it is hard to find implementations.  I could only find this half-baked one.  While the security benefits are very promising, I would not recommend scrypt until both the algorithm itself and its implementations are verified secure.

How do these three actually compare?  The scrypt paper has a comparison:

Realistically, even PBKDF2 makes it cost-prohibitive for anyone but a government to crack a single 8-character password.
","2173","<javascript><hash><sha><bcrypt>","5","7","2","2012-11-07 19:30:02","13276801","0","2","-1","","2017-05-23 11:46:00","2012-11-07 17:42:42",""
"15649446","Standard format for digital signature","I want to make a javascript library for signing messages. I expect the format to be something like...
--- BEGIN SIGNED MESSAGE ---
This is a plain old message
It goes on and on...
--- BEGIN RSA OF SHA1 ---
Base64Stringassfd86asdf870n8
09as8d76fn098==
--- END SIGNED MESSAGE ---

But I don't know the correct format. I could replicate PGP format (I am sure it is not hard to find info on that) but I would prefer to use a standard method if there is one.
Is there a standard format for this kind of signed message?
","Cryptographic Message Syntax (a.k.a PKCS #7) is a very commonly used format for signed data. It also supports encryption and authentication of payload contents, so it's a bit of an uber-format. The downside is the complexity of implementation - the specification can be tiresome to trawl through and you have to be comfortable working with ASN.1.
OpenPGP format is likely to be simpler to implement and more readable to the human eye (no ASN.1 to be seen). This might be the best bet for simplicity. Again, you would have the option to add encryption at a later date, if you so desired. However, the specification can be equally infuriating to work with - I've never encountered an RFC that was so... imprecise before.
","2148","<encryption><hash><rsa><sha><pgp>","2","3","2","2019-08-02 10:38:02","15653932","1","","","","","2013-03-26 23:39:44",""
"15649446","Standard format for digital signature","I want to make a javascript library for signing messages. I expect the format to be something like...
--- BEGIN SIGNED MESSAGE ---
This is a plain old message
It goes on and on...
--- BEGIN RSA OF SHA1 ---
Base64Stringassfd86asdf870n8
09as8d76fn098==
--- END SIGNED MESSAGE ---

But I don't know the correct format. I could replicate PGP format (I am sure it is not hard to find info on that) but I would prefer to use a standard method if there is one.
Is there a standard format for this kind of signed message?
","For sake of completion, W3C XML Signature, it is slightly easier from the syntax and encoding perspective but requires that the final data is in XML.
","2148","<encryption><hash><rsa><sha><pgp>","2","1","2","2019-08-02 10:38:02","15653932","1","","","","","2013-03-26 23:39:44",""
"6250662","How to decrease the size of SHA1?","I have a problem, maybe a silly question, I want to store data in a database after I hash with the SHA1 algorithm. However, at a future time, the size in database will increase because size words in SHA1 is big.
Can we decrease the size of SHA1 algorithm, maybe half the size. I'm sorry for my silly question, and for my bad English. Thanks. :D
I am using JAVA.
","No; a SHA-1 hash has a size of 160 bits by definition. I strongly doubt that the size of the hash will be a problem; I suppose that you have other data in your database as well? Most likely, you will find that other parts of the data contribute even more to the database size. And how many rows to you expect to have with these hashes?
However, there is a size difference between storing the hash as a string (this will take at least 40 bytes, depending on the string encoding) and storing it as binary data (this will take 20 bytes).
You can switch to another algorithm, as others have noted, but that might not be a good choice from a security perspective - the shorter the output length of a hash algorithm is, the weaker it is.
","2104","<java><algorithm><security><sha>","5","4","3","2011-06-06 14:41:50","6250722","1","1","80714","","2011-06-06 14:36:27","2011-06-06 10:25:56",""
"6250662","How to decrease the size of SHA1?","I have a problem, maybe a silly question, I want to store data in a database after I hash with the SHA1 algorithm. However, at a future time, the size in database will increase because size words in SHA1 is big.
Can we decrease the size of SHA1 algorithm, maybe half the size. I'm sorry for my silly question, and for my bad English. Thanks. :D
I am using JAVA.
","If you reduce it it is no more SHA1 :). You have to think of a different algorithm
","2104","<java><algorithm><security><sha>","5","5","3","2011-06-06 14:41:50","6250722","1","1","80714","","2011-06-06 14:36:27","2011-06-06 10:25:56",""
"6250662","How to decrease the size of SHA1?","I have a problem, maybe a silly question, I want to store data in a database after I hash with the SHA1 algorithm. However, at a future time, the size in database will increase because size words in SHA1 is big.
Can we decrease the size of SHA1 algorithm, maybe half the size. I'm sorry for my silly question, and for my bad English. Thanks. :D
I am using JAVA.
","Is 20 bytes per hash(assuming binary storage) really too much? If you currently use hex encoding switching to binary saves you 20 bytes per hash. Base64 saves about 10 bytes compared to hex.
If you simply truncate a cryptographic hash it is still a good cryptographic hash, but with a reduced output size. What output size you need depends on your application.
Integrity checks against random changes can use a much shorter hash of 32-64 bits and don't need a cryptographic hash functions.
If you need uniqueness you should have >>2*log_2(entries) bits in your hash (See birthday paradox). At around 120 bits it's similar to a GUID/UUID (There is a sha1 based generation mode for GUIDs)
If you want cryptographic strength I'd avoid going below 128bits.
","2104","<java><algorithm><security><sha>","5","10","3","2011-06-06 14:41:50","6250722","1","1","80714","","2011-06-06 14:36:27","2011-06-06 10:25:56",""
"22218232","Smartgit SHA fingerprint of the certificate does not match","I am trying to install SmartGit and trying to provide bitbucket as hosting provide. I provide correct credentials of my bitbucket account but I get following error:
=======================================
java.security.cert.CerfiticateException: SHA fingerprint of the certificate does not match.
Expected: [some string]
Actual: [some other string]
This may either mean that the server certificate has changed or that you are spoofed.
=======================================
I think this is related to SSL certificate but do not know how to fix it. Any help will be highly appreciated.
","Same problem here. Guess BitBucket changed their key since the latest version got released.
Solution (or rather, workaround)...:
Don't add BitBucket as a remote provider. Add your URL simply per each project.
Remote -> Add 
You can find the URL for your projects on the web interface of BitBucket.
Right after you select a project of yours, a link is displayed on the right side of your screen. It starts with https ... That is what you need.  
","2077","<bitbucket><sha><smartgit>","6","1","5","2014-07-28 07:27:52","","0","3","2057919","","2014-03-09 06:08:16","2014-03-06 07:47:50",""
"22218232","Smartgit SHA fingerprint of the certificate does not match","I am trying to install SmartGit and trying to provide bitbucket as hosting provide. I provide correct credentials of my bitbucket account but I get following error:
=======================================
java.security.cert.CerfiticateException: SHA fingerprint of the certificate does not match.
Expected: [some string]
Actual: [some other string]
This may either mean that the server certificate has changed or that you are spoofed.
=======================================
I think this is related to SSL certificate but do not know how to fix it. Any help will be highly appreciated.
","BitBucket just changed their certificates, as announced on their blog.

On March 7th at 22:00 UTC, we’ll be updating our SSL certificates to replace ones that will be expiring soon. It’s likely that you won’t notice any changes and won’t need to take any action. 

You can work around it it using the per-project URLs as described in Shiki's answer.
","2077","<bitbucket><sha><smartgit>","6","1","5","2014-07-28 07:27:52","","0","3","2057919","","2014-03-09 06:08:16","2014-03-06 07:47:50",""
"22218232","Smartgit SHA fingerprint of the certificate does not match","I am trying to install SmartGit and trying to provide bitbucket as hosting provide. I provide correct credentials of my bitbucket account but I get following error:
=======================================
java.security.cert.CerfiticateException: SHA fingerprint of the certificate does not match.
Expected: [some string]
Actual: [some other string]
This may either mean that the server certificate has changed or that you are spoofed.
=======================================
I think this is related to SSL certificate but do not know how to fix it. Any help will be highly appreciated.
","From [1]: to fix SmartGit 5.0.7.1 (and older) add following line to smartgit.properties (in the SmartGit settings directory, see About dialog):
smartgit.hostingProvider.bitbucket.sslFingerprint=37:A8:0E:13:87:DA:13:C3:B8:35:6F:84:EF:74:D2:38:B1:AC:59:9B

After restarting SmartGit, connection will work again.
[1] http://blog.syntevo.com/2014/03/09/1394361360000.html
","2077","<bitbucket><sha><smartgit>","6","2","5","2014-07-28 07:27:52","","0","3","2057919","","2014-03-09 06:08:16","2014-03-06 07:47:50",""
"22218232","Smartgit SHA fingerprint of the certificate does not match","I am trying to install SmartGit and trying to provide bitbucket as hosting provide. I provide correct credentials of my bitbucket account but I get following error:
=======================================
java.security.cert.CerfiticateException: SHA fingerprint of the certificate does not match.
Expected: [some string]
Actual: [some other string]
This may either mean that the server certificate has changed or that you are spoofed.
=======================================
I think this is related to SSL certificate but do not know how to fix it. Any help will be highly appreciated.
","Just add the following line to your ~/.smartgit/5/smartgit.properties
    smartgit.hostingProvider.bitbucket.sslFingerprint=7F:E2:6E:8F:0B:7F:3A:CD:6E:02:54:04:03:57:39:BD:D2:4B:CF:AE
Then re-try adding Bitbucket and it should work.
","2077","<bitbucket><sha><smartgit>","6","0","5","2014-07-28 07:27:52","","0","3","2057919","","2014-03-09 06:08:16","2014-03-06 07:47:50",""
"22218232","Smartgit SHA fingerprint of the certificate does not match","I am trying to install SmartGit and trying to provide bitbucket as hosting provide. I provide correct credentials of my bitbucket account but I get following error:
=======================================
java.security.cert.CerfiticateException: SHA fingerprint of the certificate does not match.
Expected: [some string]
Actual: [some other string]
This may either mean that the server certificate has changed or that you are spoofed.
=======================================
I think this is related to SSL certificate but do not know how to fix it. Any help will be highly appreciated.
","I had this same issue, but for github and adding the fingerprint to smartgit.properties was not working.
What did work was updating to the latest build (last option in the Help menu).
","2077","<bitbucket><sha><smartgit>","6","0","5","2014-07-28 07:27:52","","0","3","2057919","","2014-03-09 06:08:16","2014-03-06 07:47:50",""
"11768809","Randomness of hashing functions such as SHA1","I'm trying to generate an even distribution of random numbers based on User IDs.  That is, I want a random number for each user that remains the same any time that user requests the random number (but the user doesn't need to store the number).  My current algorithm (in PHP) to count distribution, for a given large array of userIDs $arr is:
$range = 100;
$results = array_fill(0, $range, 0);

foreach ($arr as $userID) {
    $hash = sha1($userID,TRUE);
    $data = unpack('L*', $hash);
    $seed = 0;
    foreach ($data as $integer) {
        $seed ^= $integer;
    }
    srand($seed);
    ++$results[rand(0, $range-1)];
}

One would hope that this generates an approximately even distribution.  But it doesn't!  I've checked to make sure that each value in $arr is unique, but one entry in the list always gets much more activity than all the others.  Is there a better method of generating a hash of a string that will give an approximately even distribution?  Apparently SHA is not up to the job.  I've also tried MD5 and a simple crc32, all with the same results!?
Am I crazy?  Is the only explanation that I have not, in fact, verified that each entry in $arr is unique?
","mt_rand() should have a very even distribution over the range requested.  When users are created, create a random seed for that user using mt_rand() then always mt_srand() with that seed for that user.
To get an even distribution from 0 to 99, as your example, just mt_rand(0,$range-1).  Doing tricks with sha1, md5, or some other hashing algorithm won't really give you a more even distribution than straight random.
","2007","<php><random><sha>","2","1","4","2012-08-02 14:16:04","11769089","4","1","36007","","2012-08-01 23:40:06","2012-08-01 23:02:25",""
"11768809","Randomness of hashing functions such as SHA1","I'm trying to generate an even distribution of random numbers based on User IDs.  That is, I want a random number for each user that remains the same any time that user requests the random number (but the user doesn't need to store the number).  My current algorithm (in PHP) to count distribution, for a given large array of userIDs $arr is:
$range = 100;
$results = array_fill(0, $range, 0);

foreach ($arr as $userID) {
    $hash = sha1($userID,TRUE);
    $data = unpack('L*', $hash);
    $seed = 0;
    foreach ($data as $integer) {
        $seed ^= $integer;
    }
    srand($seed);
    ++$results[rand(0, $range-1)];
}

One would hope that this generates an approximately even distribution.  But it doesn't!  I've checked to make sure that each value in $arr is unique, but one entry in the list always gets much more activity than all the others.  Is there a better method of generating a hash of a string that will give an approximately even distribution?  Apparently SHA is not up to the job.  I've also tried MD5 and a simple crc32, all with the same results!?
Am I crazy?  Is the only explanation that I have not, in fact, verified that each entry in $arr is unique?
","The sha1 hash numbers are quite uniform distributed. After executing this:
<?php

$n = '';
$salt = 'this is the salt';

for ($i=0; $i<100000; $i++) {
    $n .= implode('', unpack('L*', sha1($i . $salt)));
}   

$count = count_chars($n, 1);
$sum = array_sum($count);

foreach ($count as $k => $v) {
    echo chr($k)."" => "".($v/$sum).""\n"";
} 

?>

You get this result. The probability for each number:
0 => 0.083696057956298
1 => 0.12138983759522
2 => 0.094558704004335
3 => 0.07301783188663
4 => 0.092124978934097
5 => 0.088623772577848
6 => 0.11390989553446
7 => 0.092570936094051
8 => 0.12348330833868
9 => 0.11662467707838

You could use the sha1 as a simple random number generator based on the user's id.
In hexadecimal, the distribution is near to perfect:
//  $n .= sha1($i . $salt, false);

0 => 0.06245515
1 => 0.06245665
2 => 0.06258855
3 => 0.0624244
4 => 0.06247255
5 => 0.0625422
6 => 0.0625246
7 => 0.0624716
8 => 0.06257355
9 => 0.0625005
a => 0.0625068
b => 0.0625086
c => 0.0624463
d => 0.06250535
e => 0.06250895
f => 0.06251425

","2007","<php><random><sha>","2","4","4","2012-08-02 14:16:04","11769089","4","1","36007","","2012-08-01 23:40:06","2012-08-01 23:02:25",""
"11768809","Randomness of hashing functions such as SHA1","I'm trying to generate an even distribution of random numbers based on User IDs.  That is, I want a random number for each user that remains the same any time that user requests the random number (but the user doesn't need to store the number).  My current algorithm (in PHP) to count distribution, for a given large array of userIDs $arr is:
$range = 100;
$results = array_fill(0, $range, 0);

foreach ($arr as $userID) {
    $hash = sha1($userID,TRUE);
    $data = unpack('L*', $hash);
    $seed = 0;
    foreach ($data as $integer) {
        $seed ^= $integer;
    }
    srand($seed);
    ++$results[rand(0, $range-1)];
}

One would hope that this generates an approximately even distribution.  But it doesn't!  I've checked to make sure that each value in $arr is unique, but one entry in the list always gets much more activity than all the others.  Is there a better method of generating a hash of a string that will give an approximately even distribution?  Apparently SHA is not up to the job.  I've also tried MD5 and a simple crc32, all with the same results!?
Am I crazy?  Is the only explanation that I have not, in fact, verified that each entry in $arr is unique?
","It would be helpful if you posted your results that led you to conclude that you're not getting an appropriate distribution, but it's likely one of three things is going on here:

You're simply looking at too small of a sample, and/or you're miss-interpreting your data.  As others have commented, it's completely reasonable for a uniform distribution to not have perfectly uniform output.
You'd see better results if you used mt_rand instead of rand.
(Personally, I think this is most likely) You're over-optimizing your seed generation, and losing data / pigeon holing / otherwise hurting your ability to generate random numbers.  Reading your code, I think you're doing the following:

Generate a uniform random hash of an unknown value
Split the hash into longs and bitwise XOR-ing them together
Setting rand's seed, and generating a random number off that seed

But why are you doing step 2?  What benefit do you think you're getting from that?  Try taking that step out, and just use the first value you extract from the hash as your seed, and see if that doesn't give you better results.  Good rule of thumb with randomness - don't try to outsmart the people who implemented the algorithms, it can't be done :)

","2007","<php><random><sha>","2","0","4","2012-08-02 14:16:04","11769089","4","1","36007","","2012-08-01 23:40:06","2012-08-01 23:02:25",""
"11768809","Randomness of hashing functions such as SHA1","I'm trying to generate an even distribution of random numbers based on User IDs.  That is, I want a random number for each user that remains the same any time that user requests the random number (but the user doesn't need to store the number).  My current algorithm (in PHP) to count distribution, for a given large array of userIDs $arr is:
$range = 100;
$results = array_fill(0, $range, 0);

foreach ($arr as $userID) {
    $hash = sha1($userID,TRUE);
    $data = unpack('L*', $hash);
    $seed = 0;
    foreach ($data as $integer) {
        $seed ^= $integer;
    }
    srand($seed);
    ++$results[rand(0, $range-1)];
}

One would hope that this generates an approximately even distribution.  But it doesn't!  I've checked to make sure that each value in $arr is unique, but one entry in the list always gets much more activity than all the others.  Is there a better method of generating a hash of a string that will give an approximately even distribution?  Apparently SHA is not up to the job.  I've also tried MD5 and a simple crc32, all with the same results!?
Am I crazy?  Is the only explanation that I have not, in fact, verified that each entry in $arr is unique?
","While all of the answers here are good, I will provide the answer that was correct for me, and that is that I was, indeed, crazy.  Apparently the uniq command does not, in fact, work like I expected it to (data needs to be sorted first).  So the explanation was indeed that the values in $arr were not unique.
","2007","<php><random><sha>","2","0","4","2012-08-02 14:16:04","11769089","4","1","36007","","2012-08-01 23:40:06","2012-08-01 23:02:25",""
"19364232","CryptoJS and PHP SHA256","I would like to get Both CryptoJS's SHA256  and php's Crypt SHA256 output to match.
PHP crypt has a salt and a number of rounds. E.g. for 5000 rounds and salt of ""usesomesillystringforsalt"" it would be;

$hash = crypt('Clear Text String', '$5$rounds=5000$usesomesillystringforsalt$');

I hope im not blind, but i cant find how to reproduce this behaviour in crypto-js. Its syntax doesn't seem to allow for rounds or salt.
Is it possible or should i just resort to using the basic PHP hash instead of crypt? 
","The CryptoJS API doesn't provide a way to specify a salt or the number of rounds for SHA256. You could add a salt manually if necessary, and specifying rounds doesn't make sense since ""plain"" SHA256 always uses a fixed number of rounds (64).
The number of rounds in PHP's crypt() actually defines how often the SHA256 algorithm is applied consecutively, in order to increase the complexity of brute force attacks. The PHP source code comments on this as follows: ""Repeatedly run the collected hash value through SHA256 to burn CPU cycles"".
As you can see in the source code (here and here), crypt() is actually a key derivation function that only makes use of SHA256 to generate cryptographically secure, salted hashes. So it also doesn't simply append the given salt to the key, instead it's a more elaborate process.
Therefore, it is not possible to get the same results with the algorithms provided by CryptoJS.
crypt() is mainly intended for password hashing. So if you need the hashes for another purpose, hash() is a good alternative (and of course creates exactly the same results as CryptoJS.SHA256()).
However, bear in mind that any cryptography with JavaScript is generally considered harmful. Hence, you should better use SSL in your application, if possible, and generate the hashes server side. If this is an option, have a look at bcrypt.
","1989","<javascript><php><sha><crypt>","1","1","1","2013-10-15 13:43:56","19382826","0","","","","","2013-10-14 15:55:08",""
"43333053","Change PostgreSQL password encryption from MD5 to SHA","Is there a way to change the PostgreSQL password encryption method from MD5 to SHA?
If Yes, can you please tell me how?
I am using PostgreSQL 9.5
","Pg 10
With PostgreSQL 10, you can set password_encryption to scram-sha-256. From the docs

When a password is specified in CREATE ROLE or ALTER ROLE without writing either ENCRYPTED or UNENCRYPTED, this parameter determines whether the password is to be encrypted. The default value is md5, which stores the password as an MD5 hash. Setting this to plain stores it in plaintext. on and off are also accepted, as aliases for md5 and plain, respectively. Setting this parameter to scram-sha-256 will encrypt the password with SCRAM-SHA-256.

See this post for information about iterations using scram-sha-256
Pg 9.x
This can not be done without actually modifying the source.
","1987","<postgresql><sha><postgresql-9.5><database-security>","3","2","1","2019-02-27 23:11:42","43668066","4","","124486","","2017-04-27 21:17:45","2017-04-10 21:19:16",""
"24941614","Multi-user ""provably fair""","""Provably fair"" is an algorithm which allows players of online gambling sites (mostly BTC) to ensure they're always getting a fair shake. You can read more in depth about ""provably fair"" on almost all BTC gambling sites including https://bitzino.com/ or https://primedice.com/.
The algorithm goes something like this:

Generate a random ""secret seed"" to be used for the next 24 hours
Before each bet generate and disclose to the player a ""server seed""
The player then generates a ""client seed"" and places his bet
The server then SHA-2 hashes secret_seed+server_seed+client_seed
The digital signature is then used to determine the outcome of the bet

Some variations forgo altogether the ""secret seed"" in favor of simply hashing the server seed and disclosing only its hash to the player.
While both variations work well, I have taken an interest in creating a ""multi-user"" experience. As it stands, provably fair only works individually. What I would like is a way for two users to both bet on the outcome of a single event. 
For example, if the game is Roulette, I want all users who bet on black for that particular bet to all win, and all those who bet on red to all lose etc.
The naive approach is to have each user contribute a part of the client seed. But this would allow a super-user among the legitimate players to manipulate things. As he would know in advance the outcome of any given client seed he could ensure his piece was contributed last and in such a way as to maximize the house's profit.
Another approach is for the server to generate the outcome, hash it and then disclose this hash to the players before any bets are placed. This forgoes entirely the need for a client seed and would ensure the outcome is not tampered with but would allow the server to manipulate outcomes based on the game (for example, picking 0 or 00 in Roulette) or in easily observed betting patterns. For example, even if the game was something like >50 or <50 on a 1-100 die (where there exists no clear motivation for one outcome over the other) if we see a player betting 1,2,4,8... on "">50"" we can be pretty sure his next bet is going to be 16 on "">50"" and can manipulate things in our favor.
Has something like this ever been implemented before? How might you approach this problem? Is it even possible?
I understand that this question is more conceptual than anything and would kindly ask a moderator to move it if I have posted in the wrong section.
","This might help you. In principle, you need a way to generate a distributed random number between the peers as seed. I.e. you want to avoid anyone choosing a beneficial number. Basically, you could extend the Coin flipping protocol so that everyone generates n numbers and everyone selects one of the n numbers of each other participant at random. Everyone can then prove the correctness of the commonly generated number.
","1964","<random><sha><gambling>","1","0","1","2014-07-24 19:09:42","","0","1","","","","2014-07-24 18:45:25",""
"23163770","Padding the message in SHA256","I am trying to understand SHA256. On the Wikipedia page it says:

append the bit '1' to the message 
append k bits '0', where k is the minimum number >= 0 such that the resulting message
      length (modulo 512 in bits) is 448. 
append length of message (without the '1' bit or padding), in bits, as 64-bit big-endian
  integer
      (this will make the entire post-processed length a multiple of 512 bits)

So if my message is 01100001 01100010 01100011 I would first add a 1 to get
01100001 01100010 01100011 1 
Then you would fill in 0s so that the total length is 448 mod 512:
01100001 01100010 01100011 10000000 0000 ... 0000 
(So in this example, one would add 448 - 25 0s)
My question is: What does the last part mean? I would like to see an example.
","It means the message length, padded to 64 bits, with the bytes appearing in order of significance. So if the message length is 37113, that's 90 f9 in hex; two bytes. There are two basic(*) ways to represent this as a 64-bit integer,
00 00 00 00 00 00 90 f9  # big endian

and
f9 90 00 00 00 00 00 00  # little endian

The former convention follows the way numbers are usually written out in decimal: one hundred and two is written 102, with the most significant part (the ""big end"") being written first, the least significant (""little end"") last. The reason that this is specified explicitly is that both conventions are used in practice; internet protocols use big endian, Intel-compatible processors use little endian, so if they were decimal machines, they'd write one hundred and two as 201.
(*) Actually there are 8! = 40320 ways to represent a 64-bit integer if 8-bit bytes are the smallest units to be permuted, but two are in actual use.
","1945","<algorithm><hash><padding><sha>","1","4","1","2014-04-23 04:28:59","23163905","3","","707111","","2014-04-23 04:28:59","2014-04-18 23:11:12",""
"21909313","c# sorting list with byte array doesn't work","I create a list like this:
private List<byte[]> shaList = new List<byte[]>();

and fill it with millions of shas.
Afterwards I wanna sort it like this:
shaList.Sort();

But it throws an exception:
Unbehandelte Ausnahme: System.InvalidOperationException: Fehler beim Vergleichen
von zwei Elementen im Array. ---> System.ArgumentException: Mindestens ein 
Objekt muss IComparable implementieren.
bei System.Collections.Comparer.Compare(Object a, Object b)
bei System.Collections.Generic.ObjectComparer`1.Compare(T x, T y)
bei System.Collections.Generic.ArraySortHelper`1.SwapIfGreaterWithItems(T[] 
keys, IComparer`1 comparer, Int32 a, Int32 b)
bei System.Collections.Generic.ArraySortHelper`1.QuickSort(T[] keys, Int32 
left, Int32 right, IComparer`1 comparer)
bei System.Collections.Generic.ArraySortHelper`1.Sort(T[] keys, Int32 index,
Int32 length, IComparer`1 comparer)
--- Ende der internen Ausnahmestapelüberwachung ---
bei System.Collections.Generic.ArraySortHelper`1.Sort(T[] keys, Int32 index,
Int32 length, IComparer`1 comparer)
bei System.Array.Sort[T](T[] array, Int32 index, Int32 length, IComparer`1 
comparer)
bei System.Collections.Generic.List`1.Sort(Int32 index, Int32 count, I
Comparer`1 comparer)
bei System.Collections.Generic.List`1.Sort()

I don't have a clue how to sort it on my own. I only had Bubble and Insertion Sort in school but sorting millions of hashes with bubble sort... xD
//3vilc00kie
","You get the exception because you are trying to sort a list with byte arrays. Since byte[] does not implement IComparable you cant do this
","1938","<c#><arrays><sorting><byte><sha>","1","1","7","2018-10-12 22:34:52","21909464","1","","1208461","","2014-02-20 13:33:33","2014-02-20 13:30:17",""
"21909313","c# sorting list with byte array doesn't work","I create a list like this:
private List<byte[]> shaList = new List<byte[]>();

and fill it with millions of shas.
Afterwards I wanna sort it like this:
shaList.Sort();

But it throws an exception:
Unbehandelte Ausnahme: System.InvalidOperationException: Fehler beim Vergleichen
von zwei Elementen im Array. ---> System.ArgumentException: Mindestens ein 
Objekt muss IComparable implementieren.
bei System.Collections.Comparer.Compare(Object a, Object b)
bei System.Collections.Generic.ObjectComparer`1.Compare(T x, T y)
bei System.Collections.Generic.ArraySortHelper`1.SwapIfGreaterWithItems(T[] 
keys, IComparer`1 comparer, Int32 a, Int32 b)
bei System.Collections.Generic.ArraySortHelper`1.QuickSort(T[] keys, Int32 
left, Int32 right, IComparer`1 comparer)
bei System.Collections.Generic.ArraySortHelper`1.Sort(T[] keys, Int32 index,
Int32 length, IComparer`1 comparer)
--- Ende der internen Ausnahmestapelüberwachung ---
bei System.Collections.Generic.ArraySortHelper`1.Sort(T[] keys, Int32 index,
Int32 length, IComparer`1 comparer)
bei System.Array.Sort[T](T[] array, Int32 index, Int32 length, IComparer`1 
comparer)
bei System.Collections.Generic.List`1.Sort(Int32 index, Int32 count, I
Comparer`1 comparer)
bei System.Collections.Generic.List`1.Sort()

I don't have a clue how to sort it on my own. I only had Bubble and Insertion Sort in school but sorting millions of hashes with bubble sort... xD
//3vilc00kie
","list.OrderBy(b => BitConverter.ToInt64(b, 0))

","1938","<c#><arrays><sorting><byte><sha>","1","1","7","2018-10-12 22:34:52","21909464","1","","1208461","","2014-02-20 13:33:33","2014-02-20 13:30:17",""
"21909313","c# sorting list with byte array doesn't work","I create a list like this:
private List<byte[]> shaList = new List<byte[]>();

and fill it with millions of shas.
Afterwards I wanna sort it like this:
shaList.Sort();

But it throws an exception:
Unbehandelte Ausnahme: System.InvalidOperationException: Fehler beim Vergleichen
von zwei Elementen im Array. ---> System.ArgumentException: Mindestens ein 
Objekt muss IComparable implementieren.
bei System.Collections.Comparer.Compare(Object a, Object b)
bei System.Collections.Generic.ObjectComparer`1.Compare(T x, T y)
bei System.Collections.Generic.ArraySortHelper`1.SwapIfGreaterWithItems(T[] 
keys, IComparer`1 comparer, Int32 a, Int32 b)
bei System.Collections.Generic.ArraySortHelper`1.QuickSort(T[] keys, Int32 
left, Int32 right, IComparer`1 comparer)
bei System.Collections.Generic.ArraySortHelper`1.Sort(T[] keys, Int32 index,
Int32 length, IComparer`1 comparer)
--- Ende der internen Ausnahmestapelüberwachung ---
bei System.Collections.Generic.ArraySortHelper`1.Sort(T[] keys, Int32 index,
Int32 length, IComparer`1 comparer)
bei System.Array.Sort[T](T[] array, Int32 index, Int32 length, IComparer`1 
comparer)
bei System.Collections.Generic.List`1.Sort(Int32 index, Int32 count, I
Comparer`1 comparer)
bei System.Collections.Generic.List`1.Sort()

I don't have a clue how to sort it on my own. I only had Bubble and Insertion Sort in school but sorting millions of hashes with bubble sort... xD
//3vilc00kie
","You can implement a custom comparer:
class ByteArrayComparer : IComparer<byte[]> {
    public int Compare(byte[] x, byte[] y) {
        // implement your comparison criteria here
    }
}

And then sort your list like this:
List<byte[]> shaList = new List<byte[]>();
shaList.Sort(new ByteArrayComparer());

What your Compare function should return is defined here: http://msdn.microsoft.com/en-us/library/xh5ks3b3(v=vs.110).aspx
Basically, you have to return:

< 0 if x < y
0 if x == y
> 0 if x > y

","1938","<c#><arrays><sorting><byte><sha>","1","3","7","2018-10-12 22:34:52","21909464","1","","1208461","","2014-02-20 13:33:33","2014-02-20 13:30:17",""
"21909313","c# sorting list with byte array doesn't work","I create a list like this:
private List<byte[]> shaList = new List<byte[]>();

and fill it with millions of shas.
Afterwards I wanna sort it like this:
shaList.Sort();

But it throws an exception:
Unbehandelte Ausnahme: System.InvalidOperationException: Fehler beim Vergleichen
von zwei Elementen im Array. ---> System.ArgumentException: Mindestens ein 
Objekt muss IComparable implementieren.
bei System.Collections.Comparer.Compare(Object a, Object b)
bei System.Collections.Generic.ObjectComparer`1.Compare(T x, T y)
bei System.Collections.Generic.ArraySortHelper`1.SwapIfGreaterWithItems(T[] 
keys, IComparer`1 comparer, Int32 a, Int32 b)
bei System.Collections.Generic.ArraySortHelper`1.QuickSort(T[] keys, Int32 
left, Int32 right, IComparer`1 comparer)
bei System.Collections.Generic.ArraySortHelper`1.Sort(T[] keys, Int32 index,
Int32 length, IComparer`1 comparer)
--- Ende der internen Ausnahmestapelüberwachung ---
bei System.Collections.Generic.ArraySortHelper`1.Sort(T[] keys, Int32 index,
Int32 length, IComparer`1 comparer)
bei System.Array.Sort[T](T[] array, Int32 index, Int32 length, IComparer`1 
comparer)
bei System.Collections.Generic.List`1.Sort(Int32 index, Int32 count, I
Comparer`1 comparer)
bei System.Collections.Generic.List`1.Sort()

I don't have a clue how to sort it on my own. I only had Bubble and Insertion Sort in school but sorting millions of hashes with bubble sort... xD
//3vilc00kie
","You can sort a byte[] but how do you want to sort a List<Byte()>? Which array comes first, and which last? Y
Here's an example using the overload of List.Sort that takes a Comparison<T>. It  compares the sum of all bytes. 
shaList.Sort((b1, b2) => b1.Sum(b => b).CompareTo(b2.Sum(b => b)));

","1938","<c#><arrays><sorting><byte><sha>","1","0","7","2018-10-12 22:34:52","21909464","1","","1208461","","2014-02-20 13:33:33","2014-02-20 13:30:17",""
"21909313","c# sorting list with byte array doesn't work","I create a list like this:
private List<byte[]> shaList = new List<byte[]>();

and fill it with millions of shas.
Afterwards I wanna sort it like this:
shaList.Sort();

But it throws an exception:
Unbehandelte Ausnahme: System.InvalidOperationException: Fehler beim Vergleichen
von zwei Elementen im Array. ---> System.ArgumentException: Mindestens ein 
Objekt muss IComparable implementieren.
bei System.Collections.Comparer.Compare(Object a, Object b)
bei System.Collections.Generic.ObjectComparer`1.Compare(T x, T y)
bei System.Collections.Generic.ArraySortHelper`1.SwapIfGreaterWithItems(T[] 
keys, IComparer`1 comparer, Int32 a, Int32 b)
bei System.Collections.Generic.ArraySortHelper`1.QuickSort(T[] keys, Int32 
left, Int32 right, IComparer`1 comparer)
bei System.Collections.Generic.ArraySortHelper`1.Sort(T[] keys, Int32 index,
Int32 length, IComparer`1 comparer)
--- Ende der internen Ausnahmestapelüberwachung ---
bei System.Collections.Generic.ArraySortHelper`1.Sort(T[] keys, Int32 index,
Int32 length, IComparer`1 comparer)
bei System.Array.Sort[T](T[] array, Int32 index, Int32 length, IComparer`1 
comparer)
bei System.Collections.Generic.List`1.Sort(Int32 index, Int32 count, I
Comparer`1 comparer)
bei System.Collections.Generic.List`1.Sort()

I don't have a clue how to sort it on my own. I only had Bubble and Insertion Sort in school but sorting millions of hashes with bubble sort... xD
//3vilc00kie
","Not clear what you want, but maybe this:
shaList.Sort(System.Collections.StructuralComparisons.StructuralComparer.Compare);

StructuralComparisons is a static class introduced in .NET version 4.0 (2010). Its property StructuralComparer gives an object which compares ""by structure"", which is something like lexicographically after each entry in the array (or tuple). It does this by the method Compare; above, Compare is turned into a delegate by a method group conversion.
Important addition: This seems to only work if all byte arrays in your list have the same length.
Test code:
static void Main()
{
    var shaList = new List<byte[]>
    {
        new byte[] { 20, 29, },
        new byte[] { 22, 29, },
        new byte[] { 2, 255, },
        new byte[] { 22, 0, },
    };

    shaList.Sort(System.Collections.StructuralComparisons.StructuralComparer.Compare);
}

","1938","<c#><arrays><sorting><byte><sha>","1","1","7","2018-10-12 22:34:52","21909464","1","","1208461","","2014-02-20 13:33:33","2014-02-20 13:30:17",""
"21909313","c# sorting list with byte array doesn't work","I create a list like this:
private List<byte[]> shaList = new List<byte[]>();

and fill it with millions of shas.
Afterwards I wanna sort it like this:
shaList.Sort();

But it throws an exception:
Unbehandelte Ausnahme: System.InvalidOperationException: Fehler beim Vergleichen
von zwei Elementen im Array. ---> System.ArgumentException: Mindestens ein 
Objekt muss IComparable implementieren.
bei System.Collections.Comparer.Compare(Object a, Object b)
bei System.Collections.Generic.ObjectComparer`1.Compare(T x, T y)
bei System.Collections.Generic.ArraySortHelper`1.SwapIfGreaterWithItems(T[] 
keys, IComparer`1 comparer, Int32 a, Int32 b)
bei System.Collections.Generic.ArraySortHelper`1.QuickSort(T[] keys, Int32 
left, Int32 right, IComparer`1 comparer)
bei System.Collections.Generic.ArraySortHelper`1.Sort(T[] keys, Int32 index,
Int32 length, IComparer`1 comparer)
--- Ende der internen Ausnahmestapelüberwachung ---
bei System.Collections.Generic.ArraySortHelper`1.Sort(T[] keys, Int32 index,
Int32 length, IComparer`1 comparer)
bei System.Array.Sort[T](T[] array, Int32 index, Int32 length, IComparer`1 
comparer)
bei System.Collections.Generic.List`1.Sort(Int32 index, Int32 count, I
Comparer`1 comparer)
bei System.Collections.Generic.List`1.Sort()

I don't have a clue how to sort it on my own. I only had Bubble and Insertion Sort in school but sorting millions of hashes with bubble sort... xD
//3vilc00kie
","Array.Sort() accepts either an IComparer<T> interface implementation or a Comparison<T> delegate.  In either case, as noted by Paolo Tedesco, you must write a function that accepts two byte arrays and returns a numeric comparison result.
Here is a succinct implementation that efficiently does this:
int CompareByteArrays(byte[] a, byte[] b)
{
    var length = Math.Min(a.Length, b.Length);
    for (var i = 0; i < length; i++)
    {
        var diff = a[i] - b[i];
        if (diff != 0)
            return diff;
    }
    return a.Length - b.Length;
}

","1938","<c#><arrays><sorting><byte><sha>","1","0","7","2018-10-12 22:34:52","21909464","1","","1208461","","2014-02-20 13:33:33","2014-02-20 13:30:17",""
"21909313","c# sorting list with byte array doesn't work","I create a list like this:
private List<byte[]> shaList = new List<byte[]>();

and fill it with millions of shas.
Afterwards I wanna sort it like this:
shaList.Sort();

But it throws an exception:
Unbehandelte Ausnahme: System.InvalidOperationException: Fehler beim Vergleichen
von zwei Elementen im Array. ---> System.ArgumentException: Mindestens ein 
Objekt muss IComparable implementieren.
bei System.Collections.Comparer.Compare(Object a, Object b)
bei System.Collections.Generic.ObjectComparer`1.Compare(T x, T y)
bei System.Collections.Generic.ArraySortHelper`1.SwapIfGreaterWithItems(T[] 
keys, IComparer`1 comparer, Int32 a, Int32 b)
bei System.Collections.Generic.ArraySortHelper`1.QuickSort(T[] keys, Int32 
left, Int32 right, IComparer`1 comparer)
bei System.Collections.Generic.ArraySortHelper`1.Sort(T[] keys, Int32 index,
Int32 length, IComparer`1 comparer)
--- Ende der internen Ausnahmestapelüberwachung ---
bei System.Collections.Generic.ArraySortHelper`1.Sort(T[] keys, Int32 index,
Int32 length, IComparer`1 comparer)
bei System.Array.Sort[T](T[] array, Int32 index, Int32 length, IComparer`1 
comparer)
bei System.Collections.Generic.List`1.Sort(Int32 index, Int32 count, I
Comparer`1 comparer)
bei System.Collections.Generic.List`1.Sort()

I don't have a clue how to sort it on my own. I only had Bubble and Insertion Sort in school but sorting millions of hashes with bubble sort... xD
//3vilc00kie
","I stumbled upon this question which is quite old but very close to what I'm attempting to do nowadays, that's why I would like to contribute to this thread. I'm trying to sort a List<Byte[]>, whose values are the basically hashes and this is what I came up with:
[SuppressUnmanagedCodeSecurity]
internal static class NativeMethods
{
    [DllImport(""MSVCRT.dll"", CallingConvention=CallingConvention.Cdecl, ExactSpelling=true)]
    private static extern Int32 memcmp([In] IntPtr pointer1, [In] IntPtr pointer2, [In] UIntPtr count);

    internal static Int32 CompareSequences(Byte[] array1, Byte[] array2)
    {
        if (ReferenceEquals(array1, array2))
            return 0;

        if (array1 == null)
            return 1;

        if (array2 == null)
            return -1;

        if (array1.Length != array2.Length)
            return -Math.Min(Math.Max(array1.Length - array2.Length, -1), 1);

        unsafe
        {
            fixed (Byte* pointer1 = array1, pointer2 = array2)
                return -Math.Min(Math.Max(memcmp((IntPtr)pointer1, (IntPtr)pointer2, (UIntPtr)array1.Length), -1), 1);
        }
    }
}

Usage:
List<Byte[]> hashes = ComputeHashes();
hashes.Sort(NativeMethods.CompareSequences);

This is what it does:

Null arrays are placed at the bottom of the list.
Non-null arrays are sorted by length, then by ""content"":


In presence of mismatching lengths, bigger arrays prevail.
In presence of identical lengths, the array whose first mismatching byte is greater prevails.


Since you are working with hashes, there should be no null values and all the arrays in your list are supposed to have the same length. Hence, the comparison function could be simplified as follows:
internal static Int32 CompareSequences(Byte[] array1, Byte[] array2)
{
    unsafe
    {
        fixed (Byte* pointer1 = array1, pointer2 = array2)
            return -Math.Min(Math.Max(memcmp((IntPtr)pointer1, (IntPtr)pointer2, (UIntPtr)array1.Length), -1), 1);
    }
}

","1938","<c#><arrays><sorting><byte><sha>","1","0","7","2018-10-12 22:34:52","21909464","1","","1208461","","2014-02-20 13:33:33","2014-02-20 13:30:17",""
"12974964","compressing a SHA-256 hash","I want to automatically generate Java's serialVersionUID (which is a long, or 64 bits).  What distinguishes the object to be serialized is determined by about 20 integers, but not always 20 integers.  I intend to convert the integers into a comma separated string of numbers and run it through the SHA-256 hash function.
Since SHA-256 is 32 bytes long (256 bits), and I need it to fit into the serialVersionUID (64 bits), how might I convert it to a 64 bit value and minimize the loss of the characteristics of a good hash?
","I would say either use a 64 bit checksum, or if you want to stick with SHA, then XOR the 64 bit chunks.
","1938","<java><serialization><sha>","3","0","5","2019-01-29 13:30:18","12975045","2","","","","","2012-10-19 13:09:16",""
"12974964","compressing a SHA-256 hash","I want to automatically generate Java's serialVersionUID (which is a long, or 64 bits).  What distinguishes the object to be serialized is determined by about 20 integers, but not always 20 integers.  I intend to convert the integers into a comma separated string of numbers and run it through the SHA-256 hash function.
Since SHA-256 is 32 bytes long (256 bits), and I need it to fit into the serialVersionUID (64 bits), how might I convert it to a 64 bit value and minimize the loss of the characteristics of a good hash?
","Just cut off the extra bits. There is no need to complicate things. If there is a superior method to just taking the first (or any other) 64 bits, then the hash is broken in the first place.
","1938","<java><serialization><sha>","3","5","5","2019-01-29 13:30:18","12975045","2","","","","","2012-10-19 13:09:16",""
"12974964","compressing a SHA-256 hash","I want to automatically generate Java's serialVersionUID (which is a long, or 64 bits).  What distinguishes the object to be serialized is determined by about 20 integers, but not always 20 integers.  I intend to convert the integers into a comma separated string of numbers and run it through the SHA-256 hash function.
Since SHA-256 is 32 bytes long (256 bits), and I need it to fit into the serialVersionUID (64 bits), how might I convert it to a 64 bit value and minimize the loss of the characteristics of a good hash?
","You could calculate the cyclic redundancy check (CRC) of the SHA-256 digest.
","1938","<java><serialization><sha>","3","1","5","2019-01-29 13:30:18","12975045","2","","","","","2012-10-19 13:09:16",""
"12974964","compressing a SHA-256 hash","I want to automatically generate Java's serialVersionUID (which is a long, or 64 bits).  What distinguishes the object to be serialized is determined by about 20 integers, but not always 20 integers.  I intend to convert the integers into a comma separated string of numbers and run it through the SHA-256 hash function.
Since SHA-256 is 32 bytes long (256 bits), and I need it to fit into the serialVersionUID (64 bits), how might I convert it to a 64 bit value and minimize the loss of the characteristics of a good hash?
","First of all, it is unlikely that you can compress a good hash in the normal sense.  Compression is about a reversible encoding that reduces redundancy.  In a good hash there should be no redundancy to reduce, and hence compression will be ineffective.

Since SHA-256 is 32 bytes long (256 bits), and I need it to fit into the serialVersionUID (64 bits), how might I convert it to a 64 bit value and minimize the loss of the characteristics of a good hash?

So what are those good characteristics?  Well the primary characteristic of a good hash is that it is impractical to reverse it; i.e. it is impractical to work out a possible input that resulted in the hash.  And a related characteristic is that given a known input that produces a given hash, it is impractical to produce another input (i.e. a collision) that gives the same hash.
Now when you go from a 256 bit to a 64 bit hash, you make it a whole lot easier to reverse a hash or produce a collision for a hash ... by brute-force.  Basically, an 64 bit hash means there is one chance in 2^64 that any random input will have a given hash.   That probability is large enough that some ""bad guy"" with enough cores has a good enough chance of success (in a reasonable time) to make brute-force a reasonable option.
But does it really matter?  What would someone achieve by creating a serialVersion String that collides?  These strings are not secret, and they don't tell you anything definitive about the API of the object ...
The bottom line is that if these reduced hashes are being used as serialVersion strings are designed to be used, then there won't be any problem in (for example) just using the first 64 bits of the SHA-256 hash.  There is no need to XOR or checksum or do any other more complicated transformation.
","1938","<java><serialization><sha>","3","4","5","2019-01-29 13:30:18","12975045","2","","","","","2012-10-19 13:09:16",""
"12974964","compressing a SHA-256 hash","I want to automatically generate Java's serialVersionUID (which is a long, or 64 bits).  What distinguishes the object to be serialized is determined by about 20 integers, but not always 20 integers.  I intend to convert the integers into a comma separated string of numbers and run it through the SHA-256 hash function.
Since SHA-256 is 32 bytes long (256 bits), and I need it to fit into the serialVersionUID (64 bits), how might I convert it to a 64 bit value and minimize the loss of the characteristics of a good hash?
","hash it with ripemd-160.
eg,
4727c1278432c388eea822904f008468c02fd543fc347391d1f2b9918ec9b5b9

becomes
069e298ee9d1b14e7774434624703c0be1a47ee1

That is 66 characters, reduced to 40.
","1938","<java><serialization><sha>","3","0","5","2019-01-29 13:30:18","12975045","2","","","","","2012-10-19 13:09:16",""
"21107350","How can I access SHA intrinsic?","Gprof tells me that my computationally heavy program spends most of it's time (36%) hashing using AP-Hash.
I can't reduce the call count but I would still like to make it faster, can I call intrinsic SHA from a c program?
Do I need the intel compiler or can I stick with gcc?
","Unless you work at Intel, you can't yet. SHA extensions have not yet been included on any released CPU; they are expected to be included in Intel's Skylake microarchitecture (which isn't expected until 2015 or 2016).
Moreover, the AP hash function is probably already faster than even an accelerated SHA would be. You may want to consider alternative approaches, such as optimizing the hash function or caching the results for hot values.
","1898","<c><hash><sha><intrinsics>","5","2","2","2017-12-28 19:42:10","40878908","4","1","608639","","2016-12-01 04:00:54","2014-01-14 06:34:49",""
"21107350","How can I access SHA intrinsic?","Gprof tells me that my computationally heavy program spends most of it's time (36%) hashing using AP-Hash.
I can't reduce the call count but I would still like to make it faster, can I call intrinsic SHA from a c program?
Do I need the intel compiler or can I stick with gcc?
","SHA instructions are now available in Goldmont architecture. It was released around September, 2016. According to the Intel Intrinsics Guide, these are the intrinsics of interest:

__m128i _mm_sha1msg1_epu32 (__m128i a, __m128i b)
__m128i _mm_sha1msg2_epu32 (__m128i a, __m128i b)
__m128i _mm_sha1nexte_epu32 (__m128i a, __m128i b)
__m128i _mm_sha1rnds4_epu32 (__m128i a, __m128i b, const int func)
__m128i _mm_sha256msg1_epu32 (__m128i a, __m128i b)
__m128i _mm_sha256msg2_epu32 (__m128i a, __m128i b)
__m128i _mm_sha256rnds2_epu32 (__m128i a, __m128i b, __m128i k)

GCC 5.0 and above make intrinsics available all the time for Function Specific Option Pragmas. You will need Binutils 2.24, however. Testing also shows Clang 3.7 and 3.8 support the intrinsics. Testing also shows Visual Studio 2015 can consume them, but VS2013 failed to compile them.
You can detect the availability of SHA in the preprocessor on Linux by looking for the macro __SHA__. -march=native will make it available if its native to the processor. If not, you can enable it with -msha.
$ gcc -march=native -dM -E - </dev/null | egrep -i '(aes|rdrnd|rdseed|sha)'
#define __RDRND__ 1
#define __SHA__ 1
#define __RDSEED__ 1
#define __AES__ 1

The code for using SHA1 is shown below. Its based on Intel's blog titled Intel® SHA Extensions. Another reference implementation is available from the miTLS project.

The code below is based on Intel® SHA Extensions blog. The code works with full SHA1 blocks, so const uint32_t *data is 64 bytes. You will have to add the padding for the final block and set the bit length.
It runs at about 1.7 cycles-per-byte (cpb) on an Celeron J3455. I believe Andy Polyakov has SHA1 running around 1.5 cpb for OpenSSL. For reference, an optimized C/C++ implementation will run somewhere around 9 to 10 cpb.
static void SHA1_SHAEXT_Transform(uint32_t *state, const uint32_t *data)
{
    __m128i ABCD, ABCD_SAVE, E0, E0_SAVE, E1;
    __m128i MASK, MSG0, MSG1, MSG2, MSG3;

    // Load initial values
    ABCD = _mm_loadu_si128((__m128i*) state);
    E0 = _mm_set_epi32(state[4], 0, 0, 0);
    ABCD = _mm_shuffle_epi32(ABCD, 0x1B);
    MASK = _mm_set_epi64x(0x0001020304050607ULL, 0x08090a0b0c0d0e0fULL);

    // Save current hash
    ABCD_SAVE = ABCD;
    E0_SAVE = E0;

    // Rounds 0-3
    MSG0 = _mm_loadu_si128((__m128i*) data+0);
    MSG0 = _mm_shuffle_epi8(MSG0, MASK);
    E0 = _mm_add_epi32(E0, MSG0);
    E1 = ABCD;
    ABCD = _mm_sha1rnds4_epu32(ABCD, E0, 0);

    // Rounds 4-7
    MSG1 = _mm_loadu_si128((__m128i*) (data+4));
    MSG1 = _mm_shuffle_epi8(MSG1, MASK);
    E1 = _mm_sha1nexte_epu32(E1, MSG1);
    E0 = ABCD;
    ABCD = _mm_sha1rnds4_epu32(ABCD, E1, 0);
    MSG0 = _mm_sha1msg1_epu32(MSG0, MSG1);

    // Rounds 8-11
    MSG2 = _mm_loadu_si128((__m128i*) (data+8));
    MSG2 = _mm_shuffle_epi8(MSG2, MASK);
    E0 = _mm_sha1nexte_epu32(E0, MSG2);
    E1 = ABCD;
    ABCD = _mm_sha1rnds4_epu32(ABCD, E0, 0);
    MSG1 = _mm_sha1msg1_epu32(MSG1, MSG2);
    MSG0 = _mm_xor_si128(MSG0, MSG2);

    // Rounds 12-15
    MSG3 = _mm_loadu_si128((__m128i*) (data+12));
    MSG3 = _mm_shuffle_epi8(MSG3, MASK);
    E1 = _mm_sha1nexte_epu32(E1, MSG3);
    E0 = ABCD;
    MSG0 = _mm_sha1msg2_epu32(MSG0, MSG3);
    ABCD = _mm_sha1rnds4_epu32(ABCD, E1, 0);
    MSG2 = _mm_sha1msg1_epu32(MSG2, MSG3);
    MSG1 = _mm_xor_si128(MSG1, MSG3);

    // Rounds 16-19
    E0 = _mm_sha1nexte_epu32(E0, MSG0);
    E1 = ABCD;
    MSG1 = _mm_sha1msg2_epu32(MSG1, MSG0);
    ABCD = _mm_sha1rnds4_epu32(ABCD, E0, 0);
    MSG3 = _mm_sha1msg1_epu32(MSG3, MSG0);
    MSG2 = _mm_xor_si128(MSG2, MSG0);

    // Rounds 20-23
    E1 = _mm_sha1nexte_epu32(E1, MSG1);
    E0 = ABCD;
    MSG2 = _mm_sha1msg2_epu32(MSG2, MSG1);
    ABCD = _mm_sha1rnds4_epu32(ABCD, E1, 1);
    MSG0 = _mm_sha1msg1_epu32(MSG0, MSG1);
    MSG3 = _mm_xor_si128(MSG3, MSG1);

    // Rounds 24-27
    E0 = _mm_sha1nexte_epu32(E0, MSG2);
    E1 = ABCD;
    MSG3 = _mm_sha1msg2_epu32(MSG3, MSG2);
    ABCD = _mm_sha1rnds4_epu32(ABCD, E0, 1);
    MSG1 = _mm_sha1msg1_epu32(MSG1, MSG2);
    MSG0 = _mm_xor_si128(MSG0, MSG2);

    // Rounds 28-31
    E1 = _mm_sha1nexte_epu32(E1, MSG3);
    E0 = ABCD;
    MSG0 = _mm_sha1msg2_epu32(MSG0, MSG3);
    ABCD = _mm_sha1rnds4_epu32(ABCD, E1, 1);
    MSG2 = _mm_sha1msg1_epu32(MSG2, MSG3);
    MSG1 = _mm_xor_si128(MSG1, MSG3);

    // Rounds 32-35
    E0 = _mm_sha1nexte_epu32(E0, MSG0);
    E1 = ABCD;
    MSG1 = _mm_sha1msg2_epu32(MSG1, MSG0);
    ABCD = _mm_sha1rnds4_epu32(ABCD, E0, 1);
    MSG3 = _mm_sha1msg1_epu32(MSG3, MSG0);
    MSG2 = _mm_xor_si128(MSG2, MSG0);

    // Rounds 36-39
    E1 = _mm_sha1nexte_epu32(E1, MSG1);
    E0 = ABCD;
    MSG2 = _mm_sha1msg2_epu32(MSG2, MSG1);
    ABCD = _mm_sha1rnds4_epu32(ABCD, E1, 1);
    MSG0 = _mm_sha1msg1_epu32(MSG0, MSG1);
    MSG3 = _mm_xor_si128(MSG3, MSG1);

    // Rounds 40-43
    E0 = _mm_sha1nexte_epu32(E0, MSG2);
    E1 = ABCD;
    MSG3 = _mm_sha1msg2_epu32(MSG3, MSG2);
    ABCD = _mm_sha1rnds4_epu32(ABCD, E0, 2);
    MSG1 = _mm_sha1msg1_epu32(MSG1, MSG2);
    MSG0 = _mm_xor_si128(MSG0, MSG2);

    // Rounds 44-47
    E1 = _mm_sha1nexte_epu32(E1, MSG3);
    E0 = ABCD;
    MSG0 = _mm_sha1msg2_epu32(MSG0, MSG3);
    ABCD = _mm_sha1rnds4_epu32(ABCD, E1, 2);
    MSG2 = _mm_sha1msg1_epu32(MSG2, MSG3);
    MSG1 = _mm_xor_si128(MSG1, MSG3);

    // Rounds 48-51
    E0 = _mm_sha1nexte_epu32(E0, MSG0);
    E1 = ABCD;
    MSG1 = _mm_sha1msg2_epu32(MSG1, MSG0);
    ABCD = _mm_sha1rnds4_epu32(ABCD, E0, 2);
    MSG3 = _mm_sha1msg1_epu32(MSG3, MSG0);
    MSG2 = _mm_xor_si128(MSG2, MSG0);

    // Rounds 52-55
    E1 = _mm_sha1nexte_epu32(E1, MSG1);
    E0 = ABCD;
    MSG2 = _mm_sha1msg2_epu32(MSG2, MSG1);
    ABCD = _mm_sha1rnds4_epu32(ABCD, E1, 2);
    MSG0 = _mm_sha1msg1_epu32(MSG0, MSG1);
    MSG3 = _mm_xor_si128(MSG3, MSG1);

    // Rounds 56-59
    E0 = _mm_sha1nexte_epu32(E0, MSG2);
    E1 = ABCD;
    MSG3 = _mm_sha1msg2_epu32(MSG3, MSG2);
    ABCD = _mm_sha1rnds4_epu32(ABCD, E0, 2);
    MSG1 = _mm_sha1msg1_epu32(MSG1, MSG2);
    MSG0 = _mm_xor_si128(MSG0, MSG2);

    // Rounds 60-63
    E1 = _mm_sha1nexte_epu32(E1, MSG3);
    E0 = ABCD;
    MSG0 = _mm_sha1msg2_epu32(MSG0, MSG3);
    ABCD = _mm_sha1rnds4_epu32(ABCD, E1, 3);
    MSG2 = _mm_sha1msg1_epu32(MSG2, MSG3);
    MSG1 = _mm_xor_si128(MSG1, MSG3);

    // Rounds 64-67
    E0 = _mm_sha1nexte_epu32(E0, MSG0);
    E1 = ABCD;
    MSG1 = _mm_sha1msg2_epu32(MSG1, MSG0);
    ABCD = _mm_sha1rnds4_epu32(ABCD, E0, 3);
    MSG3 = _mm_sha1msg1_epu32(MSG3, MSG0);
    MSG2 = _mm_xor_si128(MSG2, MSG0);

    // Rounds 68-71
    E1 = _mm_sha1nexte_epu32(E1, MSG1);
    E0 = ABCD;
    MSG2 = _mm_sha1msg2_epu32(MSG2, MSG1);
    ABCD = _mm_sha1rnds4_epu32(ABCD, E1, 3);
    MSG3 = _mm_xor_si128(MSG3, MSG1);

    // Rounds 72-75
    E0 = _mm_sha1nexte_epu32(E0, MSG2);
    E1 = ABCD;
    MSG3 = _mm_sha1msg2_epu32(MSG3, MSG2);
    ABCD = _mm_sha1rnds4_epu32(ABCD, E0, 3);

    // Rounds 76-79
    E1 = _mm_sha1nexte_epu32(E1, MSG3);
    E0 = ABCD;
    ABCD = _mm_sha1rnds4_epu32(ABCD, E1, 3);

    // Add values back to state
    E0 = _mm_sha1nexte_epu32(E0, E0_SAVE);
    ABCD = _mm_add_epi32(ABCD, ABCD_SAVE);

    // Save state
    ABCD = _mm_shuffle_epi32(ABCD, 0x1B);
    _mm_storeu_si128((__m128i*) state, ABCD);
    *(state+4) = _mm_extract_epi32(E0, 3);
}


You can tell if your processor supports the SHA extensions under Linux by looking for the sha_ni flag:
$ cat /proc/cpuinfo
processor   : 0
vendor_id   : GenuineIntel
cpu family  : 6
model       : 92
model name  : Intel(R) Celeron(R) CPU J3455 @ 1.50GHz
stepping    : 9
microcode   : 0x1a
cpu MHz     : 799.987
cache size  : 1024 KB
physical id : 0
siblings    : 4
core id     : 0
cpu cores   : 4
apicid      : 0
initial apicid  : 0
fpu     : yes
fpu_exception   : yes
cpuid level : 21
wp      : yes
flags       : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 
clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc 
art arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclm
ulqdq dtes64 monitor ds_cpl vmx est tm2 ssse3 sdbg cx16 xtpr pdcm sse4_1 sse4_2 x2apic mov
be popcnt tsc_deadline_timer aes xsave rdrand lahf_lm 3dnowprefetch intel_pt tpr_shadow vn
mi flexpriority ept vpid fsgsbase tsc_adjust smep erms mpx rdseed smap clflushopt sha_ni x
saveopt xsavec xgetbv1 xsaves dtherm ida arat pln pts
bugs        : monitor
bogomips    : 2995.20
clflush size    : 64
cache_alignment : 64
address sizes   : 39 bits physical, 48 bits virtual
power management:
...


Also see Are there in x86 any instructions to accelerate SHA (SHA1/2/256/512) encoding?
You can find source for both Intel SHA intrinsics and ARMv8 SHA intrinsics at Noloader GitHub | SHA-Intrinsics. They are C source files, and provide the compress function for SHA-1, SHA-224 and SHA-256. The intrinsic based implementations increase throughput approximately 3x to 4x for SHA-1, and approximately 6x to 12x for SHA-224 and SHA-256.
","1898","<c><hash><sha><intrinsics>","5","7","2","2017-12-28 19:42:10","40878908","4","1","608639","","2016-12-01 04:00:54","2014-01-14 06:34:49",""
"32196099","Java's SHA1 deprecation plan","Microsoft ceases to trust code signing certificate that use SHA-1 from January 2016 (https://www.comodo.com/e-commerce/SHA-2-transition.php). I am not able to find any such reference or deprecation policy for SHA-1 for Java. If anyone can provide relevant pointers that would be helpful.
","","1882","<java><certificate><ssl-certificate><sha>","3","","0","2015-08-25 05:55:08","","2","1","4054517","","2015-08-25 05:55:08","2015-08-25 05:24:44",""
"7953430","Android SHA1 is painfully slow","Am I doing it wrong, or Android's JVM implementation of SHA1 is painfully slow? My code is below:
in = new FileInputStream(""/mnt/sdcard/200mb"");
MessageDigest digester = MessageDigest.getInstance(""sha1"");
byte[] bytes = new byte[8192];
int byteCount;
int total = 0;
while ((byteCount = in.read(bytes)) > 0) {
    total += byteCount;
    digester.update(bytes, 0, byteCount);
    Log.d(""sha"", ""processed "" + total);
}    

and here is log:
10-31 13:59:53.790 D/sha     ( 3386): processed 4931584
10-31 13:59:54.790 D/sha     ( 3386): processed 5054464
10-31 13:59:55.780 D/sha     ( 3386): processed 5177344

which is about 100k / sec, for me it is unacceptable.
I am using physical device (LG P990, 2.2.2). Can I get better results with Java, or I have to look into JNI implementation?
I have played with buffer size - no significant difference.
Traceview results
So it seems the bottleneck is in updating hash.

Research
That is interesting. When I have tried on 2.3.2 (SE Xperia), processing speed was about 12meg/sec. When I've tried on 2.2 (HTC Legend), the speed was even slower than at first device. Could it be so that something has been changed since 2.3?
","According to my benchmarks, that code should easily be able to perform way better than 120 kb/s (I'm running on different hardware, but still).
If you profile the code with Traceview, where is the time spent? If the bottleneck is FileInputStream.read(), think about:

if some other app is using the sdcard at the same time as you, like a media indexing app or something. Sharing bandwidth with some other app will have an adverse effect on the sdcard reading performance of your app.
If the sdcard itself is the problem. Try another sdcard or re-format the one you have.

If the bottleneck is MessageDigest.update() (which I doubt), I guess you do need to look into a JNI solution. For your information, the SHA-1 implementation already is in native code (see android_message_digest_sha1.cpp), but maybe you can gain a speedup by avoiding some native <-> Java copying.
Update 1 (Please ignore):
(Based on your profiling, the problem seems to be that you don't use Android's optimized android.security.MessageDigest but instead java.security.MessageDigest. Try android.security.MessageDigest instead. Both Android 2.2 and 2.3 have native SHA-1 implementations of android.security.MessageDigest.)
Update 2:
Sorry, I forgot about android.security.MessageDigest being internal. I now realize that I was also using java.security.MessageDigest in my benchmarking. I was running on Android 2.3 though, and it turns out the SHA-1 implementation of java.security.MessageDigest in Android 2.3 is in native code as well, while that appearently is not the case on Android 2.2.
So the answer to your original question is: Yes, it is painfully slow in Android 2.2 due to a Java implementation but significantly faster in Android 2.3 due to an implementation in native code. You should see similar speedups on Android 2.2 if you use your own SHA-1 implementation in native code.
","1882","<java><android><performance><java-native-interface><sha>","3","3","1","2011-11-01 10:00:42","7956299","4","5","227024","","2011-11-01 07:03:39","2011-10-31 12:04:30",""
"30617909","How do I generate SHA1 and Key Hash in Windows 8","I know How to generate SHA1 and Key Hash in Ubuntu 12.04, but don't know How to generate in Windows 8
To generate SHA1 in Linux Ubuntu 12.04, using following command in terminal:
Debug
keytool -list -v -keystore ~/.android/debug.keystore -alias androiddebugkey -storepass android -keypass android 

Release
keytool -list -v -keystore <keystore_path> -alias <alias_name>

To generate Key Hash in Linux Ubuntu 12.04, using following command in terminal:
Debug
keytool -exportcert -alias androiddebugkey -keystore ~/.android/debug.keystore | openssl sha1 -binary | openssl base64

Release
keytool -exportcert -alias <alias_name> -keystore <keystore_path> | openssl sha1 -binary | openssl base64

Note: I have followed this link to generate SHA1 Certificate fingerprint for Debug and Release modes
","Its quite similar
FOR SHA1:
Open command prompt, type the following

cd C:\Program Files\Java\jdk1.8.0_45\bin
keytool -list -v -keystore C:\PathToKeyStore -alias  -storepass password -keypass password

FOR KEYHASH:

download https://code.google.com/p/openssl-for-windows/downloads/detail?name=openssl-0.9.8e_X64.zip&can=2&q=
Extra to C:/
Go cmd and type cd C:\Program Files\Java\jdk1.8.0_45\bin
keytool -exportcert -alias  -keystore ""C:\PathToKeyStore"" | ""C:\openssl-0.9.8e_X64\bin\openssl"" sha1 -binary |""C:\openssl-0.9.8e_X64\bin\openssl"" base64

","1876","<android><windows><ubuntu><hash><sha>","3","0","1","2015-07-29 04:52:31","","0","1","4675078","","2015-07-29 04:52:31","2015-06-03 10:47:15",""
"4422970","What is the SHA-256 hash of a single ""1"" bit?","The definition of SHA-256 appears to be such that the input consisting of a single ""1"" bit has a well-defined hash value, distinct from that of the ""01"" byte (since the padding is done based on input's length in bits).
However, due to endianness issues and the fact that no implementations that I can find support feeding in single bits, I can't quite figure out what this correct value is.
So, what is the correct hash of the 1-bit long input consisting of the bit ""1""? (not the 8-bit long byte[] { 1 } input).
","Not sure if I understand your question correctly.
SHA-256 operates with block sizes of 64 bytes (=512bits). This means smaller inputs must be padded first. The result of the padding looks like this:
For Bit 1:    1100000000000...00000000001
For Bits 01:  0110000000000...00000000010

As this results are distinct, the results of the following compression functions will be too. And therefore the hash values are. The standard document explains the padding quite descriptive: http://csrc.nist.gov/publications/fips/fips180-2/fips180-2.pdf
","1867","<algorithm><language-agnostic><hash><sha>","11","3","3","2014-02-23 02:24:16","4423394","16","3","33080","","2010-12-12 18:48:21","2010-12-12 17:40:46",""
"4422970","What is the SHA-256 hash of a single ""1"" bit?","The definition of SHA-256 appears to be such that the input consisting of a single ""1"" bit has a well-defined hash value, distinct from that of the ""01"" byte (since the padding is done based on input's length in bits).
However, due to endianness issues and the fact that no implementations that I can find support feeding in single bits, I can't quite figure out what this correct value is.
So, what is the correct hash of the 1-bit long input consisting of the bit ""1""? (not the 8-bit long byte[] { 1 } input).
","OK, according to my own implementation:
1-bit string ""1"":
B9DEBF7D 52F36E64 68A54817 C1FA0711 66C3A63D 384850E1 575B42F7 02DC5AA1

1-bit string ""0"":
BD4F9E98 BEB68C6E AD3243B1 B4C7FED7 5FA4FEAA B1F84795 CBD8A986 76A2A375

I have tested this implementation on several standard multiples-of-8-bits inputs, including the 0-bit string, and the results were correct.
(of course the point of this question was to validate the above outputs in the first place, so use with care...)
","1867","<algorithm><language-agnostic><hash><sha>","11","10","3","2014-02-23 02:24:16","4423394","16","3","33080","","2010-12-12 18:48:21","2010-12-12 17:40:46",""
"4422970","What is the SHA-256 hash of a single ""1"" bit?","The definition of SHA-256 appears to be such that the input consisting of a single ""1"" bit has a well-defined hash value, distinct from that of the ""01"" byte (since the padding is done based on input's length in bits).
However, due to endianness issues and the fact that no implementations that I can find support feeding in single bits, I can't quite figure out what this correct value is.
So, what is the correct hash of the 1-bit long input consisting of the bit ""1""? (not the 8-bit long byte[] { 1 } input).
","There is C code available in section 8 of RFC 4634 to compute the hash of data that is not necessarily a multiple of 8 bits. See the methods whose names are SHA*FinalBits(...).
","1867","<algorithm><language-agnostic><hash><sha>","11","2","3","2014-02-23 02:24:16","4423394","16","3","33080","","2010-12-12 18:48:21","2010-12-12 17:40:46",""
"47953615","How to do HMAC-SHA512 signing in Python?","I want to do a get request in the following format:
https://bittrex.com/api/v1.1/account/getbalance?apikey=API_KEY&currency=BTC

I do have the public and the secret key. However I found the following statement:

For this version, we use a standard HMAC-SHA512 signing. Append apikey and nonce to your request and calculate the HMAC hash and include it under an apisign header

I don't really know how to properly encrypt my key. Using the plain secret key obviously returns ""NONCE_NOT_PROVIDED"". Everything I got is this:
current_price = requests.get(""https://bittrex.com/api/v1.1/account/getbalance?apikey=API_KEY&currency=BTC"")

How to properly sign and encrypt the keys? Thank you.
Edit:
Current attempt looks like the following.
def getWalletSize():
    APIkey = b'29i52wp4'
    secret = b'10k84a9e'
    s = ""https://bittrex.com/api/v1.1/account/getbalance?apikey=29i52wp4&currency=BTC""
    digest = hmac.new(secret, msg=s, digestmod=hashlib.sha512).digest()
    current_balance = requests.get(digest)
    return current_balance

However it raises the error Unicode-objects must be encoded before hashing
","import hmac
import hashlib
import base64

API_KEY = 'public_key'
s = """"""GET https://bittrex.com/api/v1.1/account/getbalance?apikey=%s&currency=BTC"""""" % API_KEY

base64.b64encode(hmac.new(""1234567890"", msg=s, digestmod=hashlib.sha512).digest())


it signs the request
digest = hmac.new(secret_key, msg=thing_to_hash, digestmod=hashlib.sha512).digest()

and this encode it in base64
base64.b64encode(digest)

","1822","<python><python-3.x><api><sign><sha>","3","4","1","2017-12-23 19:18:24","","2","1","3080315","","2017-12-23 17:05:19","2017-12-23 15:17:17","2017-12-23 19:40:12"
"15039234","Mysql5 hash generator VBA","Is mysql5 algoritm is SHA-1(SHA-1($pass)) ?
Then i trying this http://vb.wikia.com/wiki/SHA-1.bas script, with function =SHA1HASH(SHA1HASH(""test"")) i get c4033bff94b567a190e33faa551f411caef444f2 but Mysql5 hash must be 94BDCEBE19083CE2A1F959FD02F964C7AF4CFC29
How to convert string to Mysql5 hash in VBA? 

I have found why this hapens,
because Sha1 provided in Hex, but Mysql5 in binary
","It looks like the string 94BDCEBE19083CE2A1F959FD02F964C7AF4CFC29 was generated via the MySQL function PASSWORD().
SELECT PASSWORD(""test"") /* *94BDCEBE19083CE2A1F959FD02F964C7AF4CFC29 */

As recommended by the MySQL documentation if you need to maintain all you hash code in excel you need to change your original hashing process to use something like SHA1. 
From the MySQL documentation: http://dev.mysql.com/doc/refman/5.0/en/encryption-functions.html#function_password
The PASSWORD() function is used by the authentication system in MySQL Server; you should not use it in your own applications. For that purpose, consider MD5() or SHA1() instead.
","1815","<vba><excel-vba><hash><sha><mysql5>","0","1","1","2013-02-23 11:54:14","","6","","2102031","","2013-02-23 11:54:14","2013-02-23 09:56:33",""
"24160553","Hashing image names","I'm uploading images to S3 and I wish to create a unique name for each one uploaded.
I'm using intervention to make the image:
$img = Image::make($file->getRealPath());

Then I hash the image:
$name = hash('sha256', $img);

The problem is, when I upload the same image, it's given the same name.
How can I get around this?
","Have you considered using com_create_guid() to create a global unique identifier instead? This would give you a unique name for each file. For example:
$name = com_create_guid();

","1805","<php><hash><sha>","1","1","4","2014-06-11 14:45:24","24160813","1","","1939603","","2014-06-11 10:31:57","2014-06-11 10:26:13",""
"24160553","Hashing image names","I'm uploading images to S3 and I wish to create a unique name for each one uploaded.
I'm using intervention to make the image:
$img = Image::make($file->getRealPath());

Then I hash the image:
$name = hash('sha256', $img);

The problem is, when I upload the same image, it's given the same name.
How can I get around this?
","Best way to avoid this is by using a timestamp for each upload.
Just combine the $img with current timestamp by using the time() function.
For example:
hash('sha256', $img+time());

","1805","<php><hash><sha>","1","0","4","2014-06-11 14:45:24","24160813","1","","1939603","","2014-06-11 10:31:57","2014-06-11 10:26:13",""
"24160553","Hashing image names","I'm uploading images to S3 and I wish to create a unique name for each one uploaded.
I'm using intervention to make the image:
$img = Image::make($file->getRealPath());

Then I hash the image:
$name = hash('sha256', $img);

The problem is, when I upload the same image, it's given the same name.
How can I get around this?
","You should try to add a salt to it.  Even appending the date/time should give you an unique name.
Cheers! 
PS (edit):
$data = Image::make($file->getRealPath())->encode('data-url'); 

$name = hash('sha256', $data . strval(time()));

First we encode the data in a ""string way"" so we can concatenate the time value as a string. 
If you want extra ""randomness"" add a user cookie, username etc. 
Final solution:
$data = implode('', file($file->getRealPath()));
$name = hash('sha256', $data . strval(time()));
","1805","<php><hash><sha>","1","0","4","2014-06-11 14:45:24","24160813","1","","1939603","","2014-06-11 10:31:57","2014-06-11 10:26:13",""
"24160553","Hashing image names","I'm uploading images to S3 and I wish to create a unique name for each one uploaded.
I'm using intervention to make the image:
$img = Image::make($file->getRealPath());

Then I hash the image:
$name = hash('sha256', $img);

The problem is, when I upload the same image, it's given the same name.
How can I get around this?
","You could try add a rand()
hash('sha256', $img . rand(1,100) );

","1805","<php><hash><sha>","1","-1","4","2014-06-11 14:45:24","24160813","1","","1939603","","2014-06-11 10:31:57","2014-06-11 10:26:13",""
"32759956","MD5 or SHA hash of a large file in Java","I need to calculate SHA or MD5 hash of a large file. The thing I need to do is this,I make an example:
Suppose I have a 1GB file.
To calculate the hash I want to divide this file in 4 parts of 256MB(I want to divide it in smaller parts).
1)start to calculate the hash of the first part 
2)get the output hash of the first part,give it in input with the second part and calculate the hash of the second part 
3)get the output hash of the 2) point,give it in input with the third part and calculate the hash of the third part 
4)get the output hash of the 3) point,give it in input with the fourth part and calculate the hash of the entire file.
I searched a lot on google but I haven't found nothing similar.I read that with MessageDigest by using the method update I can read file chunks until the  entire file is loaded and then calculate the hash but I haven't understood if when I load a chunk it calculate also the hash of it(so it would be good in my case) or if it's only a loading and  the hash is calculated at the end when the file is entirely loaded.
","You may also want to look at java.security.DigestInputStream to calculate the hash of the whole file.
If you need intermediate hashes for the parts, you may have luck with java.security.MessageDigest.clone(); after a part clone the MessageDigest instance used for the hash calculation and call digest() on the clone to get the hash value after the part.
The original MessageDigest instance can be updated with the bytes of the next part.
","1795","<java><hash><md5><sha>","1","0","1","2015-09-24 12:46:49","32760172","0","1","","","","2015-09-24 11:15:54",""
"30230164","Hide password in python using getpass.getpass()","When I type
>>> passwd = getpass.getpass()

Into the python 2.7 shell, in IDLE, I get the result:
Warning (from warnings module):
  File ""/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/getpass.py"", line 55
    passwd = fallback_getpass(prompt, stream)
GetPassWarning: Can not control echo on the terminal.
Warning: Password input may be echoed.
Password:

Then when I type the password, it isn't hidden. I need to send it to a variable, so I can SHA it using the sha module and compare it with the 'SHAed' original.
","pass is a python keyword . please change that something like 
password = getpass.getpass()

Then run it from shell/console 
","1778","<python><macos><python-2.7><passwords><sha>","0","1","1","2015-05-26 11:19:24","30231272","2","1","4884103","","2015-05-26 11:19:24","2015-05-14 05:49:53",""
"28873870","Checksum using VB.Net SHA1","I have a secret key : zbPsRqhNg
It needs to be encoded in vb.net
I am using the following source :
Friend Overrides Function PostToLender(sData As String) As String
            '' sData contains the XML to post
            '' lendertier.ServiceURL is the URL to post to
            '' so build a checksum from the XML data
            Dim Secret As String = lendertier.Credential1  '' store the secret key in the tier's 1st credential
            Dim hash As HMACSHA1 = New HMACSHA1()
            hash.Key = UTF8.GetBytes(Secret)
            Dim checksum As String = UTF8.GetString(hash.ComputeHash(UTF8.GetBytes(sData)))

            '' append checksum to URL
            lendertier.ServiceURL &= ""&checksum="" & checksum

            '' Complete normal processing
            Return MyBase.PostToLender(sData)
        End Function

This is not working and the result which is not correct
checksum=%EF%BF%BD%EF%BF%BD&amp;%EF%BF%BDg%EF%BF%BD*(%

it should be
6d91394d2b57ed448f45efcd2aeb773238b9055d

so i tryed which i think i did this wrong:
Dim Secret As String = lendertier.Credential3  '' store the secret key in the tier's 1st credential
Dim hash As New SHA1CryptoServiceProvider()
            HashCore = UTF8.GetBytes(Secret)
Dim checksum As String = UTF8.GetString(hash.ComputeHash(UTF8.GetBytes(sData)))

'' append checksum to URL
            lendertier.ServiceURL &= ""?checksum="" & checksum

Neither work , if i could could get a little assistance that would be great.
","Think this is what you are looking for
Dim checksum As String = Convert.ToBase64String(hash.ComputeHash(UTF8.GetBytes(sData)))

","1766","<vb.net><checksum><sha>","0","0","1","2015-03-05 10:27:57","28875571","1","","","","","2015-03-05 09:09:11",""
"43069682","SSHA password encryption on OpenLDAP","My current problem is that i cannot stop OpenLDAP to store passwords as plaintext. In an older openLDAP version , i entered following configuration in the slapd.conf
ppolicy_hash_cleartext
password-hash {SSHA} {SHA} 

So once a password was sent from my application as plaintext, the ldap was encrypting it and storing it encrypted.
Unfortunately i was not able to configure OpenLDAP 2.4.40. I found out that the slapd.conf does not exist anymore in the newer version and instead the configuration is taking place in the cn=config.ldif file. 
I tried to add again the same configuration there but it seems that it has no effect. 
EDIT : I added with ldapmodify the olcPasswordHash: {SSHA} entry in olcBackend={0}mdb.ldif , olcDatabase={1}mdb.ldif , olcDatabase={0}config.ldif and cn=config.ldif , still my passwords that are sent as plaintext are stored as plaintext. 
","Took some time, but figured out finally.
Load schema describing ppolicy attributes.
ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/ldap/schema/ppolicy.ldif

Create a ppolicy_module.ldif with the following content and make sure that the ppolicy.la is located under the defined olcModulePath. Store the file under /etc/ldap
dn: cn=module,cn=config
objectClass: olcModuleList
cn: module
olcModuleLoad: ppolicy.la
olcModulePath: /usr/lib/ldap

Add the ppolicy_module.ldif
ldapadd -Y EXTERNAL -H ldapi:/// -f ppolicy_module.ldif

Create a ppolicy-overlay.ldif file with the following content. Make sure of the olcDatabase number . In this case it is olcDatabase={1}mdb . Store the file under /etc/ldap
dn: olcOverlay=ppolicy,olcDatabase={1}mdb,cn=config
objectClass: olcPPolicyConfig
olcOverlay: ppolicy
olcPPolicyDefault: cn=ppolicy,ou=policies,dc=example,dc=com
olcPPolicyUseLockout: FALSE
olcPPolicyHashCleartext: TRUE

Add LDIF file.
ldapadd -Y EXTERNAL -H ldapi:/// -f ./ppolicy-overlay.ldif

Restart ldap.
More details under:
https://fedorahosted.org/sssd/wiki/openldap_ppolicy
","1763","<ldap><openldap><sha><ssha>","0","0","1","2017-04-03 05:34:26","43113906","4","","1918516","","2017-04-03 05:34:26","2017-03-28 12:32:38",""
"24769488","How to get Bitcoin address from pubkey_hash?","I'm using: https://github.com/bitcoin-abe/bitcoin-abe to import the blockchain into a mysql DB it is almost done after 5 days. So I started looking at the data and didn't see any addresses. I know the BTC client doesn't use those, but it still would be nice to have them in another table. I was looking around at the code and found this:
def hash_to_address(version, hash):
    vh = version + hash
    return base58.b58encode(vh + double_sha256(vh)[:4])

In: https://github.com/bitcoin-abe/bitcoin-abe/blob/3004fe4bad6f64d4c032c735ee23bf9f052d825b/Abe/util.py
When I run a pubkey_hash through that function I don't get the expected result of an address. For example taking the following pubkey_hash: 62E907B15CBF27D5425399EBF6F0FB50EBB88F18
I should get: 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa
But instead I get: 6GEZdxx5UiTk3U3LaLfsWwRaFAvXEpPNS5R4mqsJDXVJcTNNngTyB5i9S76MLTq
The script I created is:
import util
hash = '62E907B15CBF27D5425399EBF6F0FB50EBB88F18'
print util.hash_to_address(""00"", hash)

Any ideas or is there something else that would do the same correctly?
Appleman1234 pointed me in the right direction:
import util
hash = '62E907B15CBF27D5425399EBF6F0FB50EBB88F18'
hash = '00' + hash
print ""Util: "", util.hash_to_address("""", hash.decode('hex'))

","The reason you don't get the result you expected is due to encoding.
The correct code for Python 2
import util
hash = '62e907b15cbf27d5425399ebf6f0fb50ebb88f18'
print util.hash_to_address(""00"".decode('hex'), hash.decode('hex'))

The correct code for Python 3
import util
import binascii
hash = '62e907b15cbf27d5425399ebf6f0fb50ebb88f18'
print util.hash_to_address(binascii.unhexlify(""00""), binascii.unhexlify(hash))

The decode and unhexlify functions convert the hexadecimal ASCII representations into binary byte strings. 
The problem you were having was that the hash of the binary string and the hash of its hexadecimal ASCII representation are two different hashs.                                                     
","1756","<python><hash><sha><bitcoin><blockchain>","2","2","1","2014-07-20 16:02:11","24848124","0","","636841","","2014-07-20 15:58:20","2014-07-15 22:53:02",""
"13057931","SHA1 encryption for Minecraft client","I'm writing a client for Minecraft in Java. I have a lot of things working already, but the one thing that has really stumped me is how Minecraft does its authentication. I found this page
http://wiki.vg/Protocol#Handshake_.280x02.29
Which defines the protocol. As of now, the following code
public boolean connect(String ip, int port) {
    try {
        socket = new Socket(ip, port);
        dis = new DataInputStream(socket.getInputStream());
        dos = new DataOutputStream(socket.getOutputStream());
        dos.writeByte(0x02);
        dos.writeByte(0x00);
        writeString(username);
        writeString(ip);
        dos.writeInt(port);
        if (dis.readByte() != 0xFD)
            return false;
        String serverId = readString();
        byte[] publicKey = new byte[dis.readShort()];
        for (int i = 0; i < publicKey.length; i++)
            publicKey[i] = dis.readByte();
        byte[] token = new byte[dis.readShort()];
        for (int i = 0; i < token.length; i++)
            token[i] = dis.readByte();
        PublicKey serverPublicKey = KeyFactory.getInstance(""RSA"").generatePublic(new X509EncodedKeySpec(publicKey));
        byte[] sharedSecret = new byte[16];
        new Random().nextBytes(sharedSecret);
        URL url = new URL(""http://session.minecraft.net/game/joinserver.jsp?user="" + username + ""&sessionId="" + session + ""&serverId="" + serverId);
        url.openConnection();

        Cipher cipher = Cipher.getInstance(""AES"");
        return true;
    }
    catch (Exception ex) { System.out.println(""Failed to login for "" + username); ex.printStackTrace(); }
    return false;
}

is what I have. Through this code, as you can tell, I get a public key, a verification token, and generate a random shared secret. However, I don't know what to do from here. I have seen a Python implementation of this 
https://github.com/ammaraskar/pyCraft/blob/master/networking/NetworkManager.py line 82
but I can't figure out how they used SHA1 to grab the serverid. I can't find an equivalent in Java. There is a authentication scheme page specific for Minecraft which more clearly defines what happens in the background here: http://wiki.vg/Protocol_Encryption
","There is an excellent decompilation project for minecraft: 
http://mcp.ocean-labs.de/index.php/MCP_Releases.
Have a look in src/minecraft/net/minecraft/src/NetClientHandler.java, and src/minecraft/net/minecraft/src/ThreadLoginVerifier.java.
The actual hashing is done in src/minecraft/net/minecraft/src/CryptManager.java, like this:
digestOperation(""SHA-1"", new byte[][] {par0Str.getBytes(""ISO_8859_1""), par2SecretKey.getEncoded(), par1PublicKey.getEncoded()}) 

","1744","<java><minecraft><sha>","1","1","1","2013-04-29 12:23:58","16278559","2","3","396458","","2012-10-24 21:24:49","2012-10-24 21:20:35",""
"39101962","How to generate trusted self signed certificate with SHA2 signing algorithm using keytool?","I am trying to establish a secure connection for my application using jetty http server version 8.1.8.v20121106 with self signed certificate.
I am generating self signed certificate with the following command,

keytool -genkey -alias mykey -keyalg RSA -keysize 2048 -sigalg SHA256withRSA -validity 365 -keypass password -keystore keystore.jks -storepass password
keytool -export -alias mykey -file server.cer -keystore keystore.jks -storepass password
keytool -import -alias mykey -file server.cer -keystore truststore.jks -storepass password

So, totally 3 files generate (keystore.jks,server.cer,truststore.jks)
After the server gets started, I got the following error in my browser. There are issues with the site's certificate chain (net::ERR_CERT_AUTHORITY_INVALID).


Could anyone help me to generate a trusted self signed certificate using keytool.
Thanks in advance.
","It is the problem with java jdk. I have verified using java 1.8 and jdk1.7.0_79 it is working fyn for me. Change your java jdk version and verify. For further clarification, Please refer this link.
 https://bugs.eclipse.org/bugs/show_bug.cgi?id=398644
","1707","<ssl><keytool><sha><jetty-8>","0","0","1","2016-08-24 05:06:30","39114816","6","1","","","","2016-08-23 12:59:56",""
"6299286","How to use hashed passwords with BASIC authentication in tomcat6?","I want to use hashed passwords in tomcat-users.xml with BASIC authentication. I added digest=""SHA"" to realm definition. UserDatabase part is defined as this in $TOMCAT_HOME/conf/server.xml:
<GlobalNamingResources>
<Resource name=""UserDatabase"" auth=""Container""
          type=""org.apache.catalina.UserDatabase""
          description=""User database that can be updated and saved""
          factory=""org.apache.catalina.users.MemoryUserDatabaseFactory""
          pathname=""conf/tomcat-users.xml"" />
</GlobalNamingResources>
...
<Engine>
...
      <Realm className=""org.apache.catalina.realm.UserDatabaseRealm""
             digest=""SHA""
             resourceName=""UserDatabase"" />  
...
</Engine>

But after restart tomcat still treats all defined in $TOMCAT_HOME/conf/tomcat-users.xml passwords as plain-text ones.
<?xml version='1.0' encoding='utf-8'?>
<tomcat-users>
<user username=""guest"" password=""e5e9fa1ba31ecd1ae84f75caaa474f3a663f05f4"" roles=""role1"" />
</tomcat-users>

I.e. I can login with username/password guest/e5e9fa1ba31ecd1ae84f75caaa474f3a663f05f4, but not with guest/secret as it should be.
Please point me what I'm doing wrong?
","Your solution should work up to Tomcat 7, but starting from Tomcat 8 you have to specify the CredentialHandler section inside Realm as shown below:
Tomcat 6...7:
      <Realm className=""org.apache.catalina.realm.UserDatabaseRealm""
             digest=""sha""
             resourceName=""UserDatabase"" />  

Tomcat 8:
      <Realm className=""org.apache.catalina.realm.UserDatabaseRealm""
             resourceName=""UserDatabase"">
           <CredentialHandler
              className=""org.apache.catalina.realm.MessageDigestCredentialHandler""     
              algorithm=""sha"" />
      </Realm>


NB: For more secure hashing, like PBKDF2WithHmacSHA512, see this answer.
","1699","<tomcat><hash><basic-authentication><sha>","2","0","1","2018-02-14 10:13:58","","1","","","","","2011-06-09 21:06:49",""
"11598821","Ruby HMAC-SHA Differs from Python","I'm rewriting some existing code from Python to Ruby, and I've across a strange error that I can't seem to figure out.  Here we have the Python code (which works):
import sha, hmac
data = 'sampledata'
data = data.encode('ascii')
des_key = hmac.new(data + ""\0"", ""SUPERSECRET"", sha).digest()[0:8]

Output: 0x64F461D377D9930C
And the Ruby (which I'm new to) code:
require 'openssl'
digest  = OpenSSL::Digest::SHA.new
data = 'sampledata'
data.encode!('ascii')
puts OpenSSL::HMAC.hexdigest(digest, ""SUPERSECRET"", data + ""\0"")[0, 16]

Output: 0x563FDAF11E63277C
What could be causing this difference?
","You made two mistakes:

Python's hmac.new takes key, method, digest - so you should write
hmac.new(""SUPERSECRET"",data + ""\0"", sha)
The default digest method for OpenSSL::Digest in Ruby isn't SHA1 (I'm not sure what it is). You should just use:
OpenSSL::HMAC.hexdigest('sha1',""SUPERSECRET"",data+""\0"")[0,16]

Both methods (first in Python, second in Ruby) return the same output.
","1693","<python><ruby><sha><hmac>","3","5","2","2012-07-22 18:53:11","11599097","0","1","","","","2012-07-22 08:37:02",""
"11598821","Ruby HMAC-SHA Differs from Python","I'm rewriting some existing code from Python to Ruby, and I've across a strange error that I can't seem to figure out.  Here we have the Python code (which works):
import sha, hmac
data = 'sampledata'
data = data.encode('ascii')
des_key = hmac.new(data + ""\0"", ""SUPERSECRET"", sha).digest()[0:8]

Output: 0x64F461D377D9930C
And the Ruby (which I'm new to) code:
require 'openssl'
digest  = OpenSSL::Digest::SHA.new
data = 'sampledata'
data.encode!('ascii')
puts OpenSSL::HMAC.hexdigest(digest, ""SUPERSECRET"", data + ""\0"")[0, 16]

Output: 0x563FDAF11E63277C
What could be causing this difference?
","In addition to Guy Adini's answer - in Ruby SHA is different from python sha which is sha1 (in sha.py: from hashlib import sha1 as sha):
from hashlib import *
import hmac
data = 'sampledata'
data = data.encode('ascii')

algo = [sha1, sha224, sha256, sha512]
for al in algo:
    print al().name, hmac.new(""SUPERSECRET"", data + ""\0"", al).hexdigest()[0:16]

produces:
sha1 50c61ea49195f03c
sha224 fd6a418ee0ae21c8
sha256 79deab13bd7b041a
sha512 31561f9c9df69ab2

and in Ruby:
require 'openssl'
data = 'sampledata'
data.encode!('ascii')
%w(sha sha1 sha224 sha256 sha512).each do |al|
  puts ""#{al}: #{OpenSSL::HMAC::hexdigest(al, ""SUPERSECRET"", ""#{data}\0"")[0,16]}""
end

produces:
sha: 563fdaf11e63277c
sha1: 50c61ea49195f03c
sha224: fd6a418ee0ae21c8
sha256: 79deab13bd7b041a
sha512: 31561f9c9df69ab2

","1693","<python><ruby><sha><hmac>","3","4","2","2012-07-22 18:53:11","11599097","0","1","","","","2012-07-22 08:37:02",""
"9138768","Store SHA256 hash in Access Database","I'm trying to figure out how to store a hash in my Access Database. Now I have generated a hash by salting a user password with the User ID (not highly secure I know, but plenty for my purposes). I have also stored the hashed values in the database as Base64 strings (manually, I haven't yet developed the module to do that automatically), however, when I go to retrieve the hash from the database I receive the hex code in place of the string. I know that the string is stored in the database since I stored it there manually so I'm not quite sure what's going on.
This is the code for the login button:
Sub prcLogin()
        'Log User in

        Dim ds As New DataSet
        Dim blnCorrect As Boolean

        'Fill DataSet with login details
        prcConnectSet(""SELECT * FROM Parent"", ""User"", ds)

        strUser = txtUser.Text

        'Ensure username field is not blank
        If strUser <> """" Then

            'Search for the user
            For Each Row In ds.Tables(""User"").Rows
                Dim HashedPass As String = fncComputeHash(txtPass.Text & strUser)
                Dim ContainedPass As String = Row.Item(3)
                'Validate user
                If strUser = Row.Item(0) Then
                    If HashedPass = Row.Item(3) Then
                        blnCorrect = True
                        lblLoggedAs.Text = Row.Item(1)
                        Exit For
                    End If
                Else
                    blnCorrect = False
                End If
            Next
        End If

And this is the code for the hash calculator:
    Function fncComputeHash(ByVal PasswordField As String) As String
        Dim Hasher As New SHA256CryptoServiceProvider()
        Dim encoder As New UTF8Encoding()

        Return Convert.ToBase64String(Hasher.ComputeHash(encoder.GetBytes(PasswordField)))

    End Function

But when I run this instead of returning a value like ""rlzhYoiO4+vpdJdsrFq5Sj9VBJ+FFYhIg9V5+z+jeNI="" which I stored in the database, it returns a value like ""5C6BED0D94B9BE8AFBC5C8CAC1E9D4BE03F556917C2611EC56F4E6F341EF60D9"". Now how do I get around this? Am I storing the values incorrectly? Should I store them as a byte array? If so, how do I do that? Or am I retrieving the values incorrectly? Or are those ok and should I be converting the value once I get it back from the database?
I'm very new to this whole encryption lark and even authentication so if I'm doing something stupid do tell me. 
Thanks in advance!
Edit: I'm using the ""Text"" data type in Access.
Edit 2: Sorry I understand the confusion now. I'm storing only the hash! Not the plaintext password. So it's vital the hash received from the database is in the same format as that from the user id and password.
Edit 3: OK Thanks guys, I've solved it. I needed to convert it to a hex string using the SoapHexBinary function.
","Are you sure this is not intended behaviour? Does it return the same hash if you pass the same value? IF yes, then you've achieved your purpose. You've got a one way hashed string of the username and password.
comparing
so you retrieve the has from database and store the hash from the table
get the userid and password from database and compute the hash
So basically, when the user types in his username, you fetch his userid from database
Calculate the has from the provided password 
and you've got the two hashes.
databasehash=gethashfromdatabase(user_id)
receviedhash=computehash(user_id,password)

now, you can compare the two.
note: If you want more explanation on fetching data from database or getting user_id from the form, I suggest posting a new question
","1692","<.net><vb.net><encryption><sha>","1","0","3","2012-03-01 12:43:33","9516455","3","","1142314","","2012-02-07 06:27:58","2012-02-04 05:57:15",""
"9138768","Store SHA256 hash in Access Database","I'm trying to figure out how to store a hash in my Access Database. Now I have generated a hash by salting a user password with the User ID (not highly secure I know, but plenty for my purposes). I have also stored the hashed values in the database as Base64 strings (manually, I haven't yet developed the module to do that automatically), however, when I go to retrieve the hash from the database I receive the hex code in place of the string. I know that the string is stored in the database since I stored it there manually so I'm not quite sure what's going on.
This is the code for the login button:
Sub prcLogin()
        'Log User in

        Dim ds As New DataSet
        Dim blnCorrect As Boolean

        'Fill DataSet with login details
        prcConnectSet(""SELECT * FROM Parent"", ""User"", ds)

        strUser = txtUser.Text

        'Ensure username field is not blank
        If strUser <> """" Then

            'Search for the user
            For Each Row In ds.Tables(""User"").Rows
                Dim HashedPass As String = fncComputeHash(txtPass.Text & strUser)
                Dim ContainedPass As String = Row.Item(3)
                'Validate user
                If strUser = Row.Item(0) Then
                    If HashedPass = Row.Item(3) Then
                        blnCorrect = True
                        lblLoggedAs.Text = Row.Item(1)
                        Exit For
                    End If
                Else
                    blnCorrect = False
                End If
            Next
        End If

And this is the code for the hash calculator:
    Function fncComputeHash(ByVal PasswordField As String) As String
        Dim Hasher As New SHA256CryptoServiceProvider()
        Dim encoder As New UTF8Encoding()

        Return Convert.ToBase64String(Hasher.ComputeHash(encoder.GetBytes(PasswordField)))

    End Function

But when I run this instead of returning a value like ""rlzhYoiO4+vpdJdsrFq5Sj9VBJ+FFYhIg9V5+z+jeNI="" which I stored in the database, it returns a value like ""5C6BED0D94B9BE8AFBC5C8CAC1E9D4BE03F556917C2611EC56F4E6F341EF60D9"". Now how do I get around this? Am I storing the values incorrectly? Should I store them as a byte array? If so, how do I do that? Or am I retrieving the values incorrectly? Or are those ok and should I be converting the value once I get it back from the database?
I'm very new to this whole encryption lark and even authentication so if I'm doing something stupid do tell me. 
Thanks in advance!
Edit: I'm using the ""Text"" data type in Access.
Edit 2: Sorry I understand the confusion now. I'm storing only the hash! Not the plaintext password. So it's vital the hash received from the database is in the same format as that from the user id and password.
Edit 3: OK Thanks guys, I've solved it. I needed to convert it to a hex string using the SoapHexBinary function.
","When you deal with strong encryption, strong hashes (such as SHA1) it is critical that you understand that all of them are defined to work on strings of octets, which are usually arrays of unsigned characters. They are not ""strings"" as used by popular programming languages.
What you are seeing, ""5C6BED..."" is simply a hexadecimal encoding of the octets. Just call that a string, and store it, and then retrieve it, and convert back to the raw value for processing.
","1692","<.net><vb.net><encryption><sha>","1","0","3","2012-03-01 12:43:33","9516455","3","","1142314","","2012-02-07 06:27:58","2012-02-04 05:57:15",""
"9138768","Store SHA256 hash in Access Database","I'm trying to figure out how to store a hash in my Access Database. Now I have generated a hash by salting a user password with the User ID (not highly secure I know, but plenty for my purposes). I have also stored the hashed values in the database as Base64 strings (manually, I haven't yet developed the module to do that automatically), however, when I go to retrieve the hash from the database I receive the hex code in place of the string. I know that the string is stored in the database since I stored it there manually so I'm not quite sure what's going on.
This is the code for the login button:
Sub prcLogin()
        'Log User in

        Dim ds As New DataSet
        Dim blnCorrect As Boolean

        'Fill DataSet with login details
        prcConnectSet(""SELECT * FROM Parent"", ""User"", ds)

        strUser = txtUser.Text

        'Ensure username field is not blank
        If strUser <> """" Then

            'Search for the user
            For Each Row In ds.Tables(""User"").Rows
                Dim HashedPass As String = fncComputeHash(txtPass.Text & strUser)
                Dim ContainedPass As String = Row.Item(3)
                'Validate user
                If strUser = Row.Item(0) Then
                    If HashedPass = Row.Item(3) Then
                        blnCorrect = True
                        lblLoggedAs.Text = Row.Item(1)
                        Exit For
                    End If
                Else
                    blnCorrect = False
                End If
            Next
        End If

And this is the code for the hash calculator:
    Function fncComputeHash(ByVal PasswordField As String) As String
        Dim Hasher As New SHA256CryptoServiceProvider()
        Dim encoder As New UTF8Encoding()

        Return Convert.ToBase64String(Hasher.ComputeHash(encoder.GetBytes(PasswordField)))

    End Function

But when I run this instead of returning a value like ""rlzhYoiO4+vpdJdsrFq5Sj9VBJ+FFYhIg9V5+z+jeNI="" which I stored in the database, it returns a value like ""5C6BED0D94B9BE8AFBC5C8CAC1E9D4BE03F556917C2611EC56F4E6F341EF60D9"". Now how do I get around this? Am I storing the values incorrectly? Should I store them as a byte array? If so, how do I do that? Or am I retrieving the values incorrectly? Or are those ok and should I be converting the value once I get it back from the database?
I'm very new to this whole encryption lark and even authentication so if I'm doing something stupid do tell me. 
Thanks in advance!
Edit: I'm using the ""Text"" data type in Access.
Edit 2: Sorry I understand the confusion now. I'm storing only the hash! Not the plaintext password. So it's vital the hash received from the database is in the same format as that from the user id and password.
Edit 3: OK Thanks guys, I've solved it. I needed to convert it to a hex string using the SoapHexBinary function.
","I found what I needed. The ""SoapHexBinary"" function is what I need. Here is an example:
Function fncComputeHash(ByVal PasswordField As String) As String
    'Compute SHA-256 Hash value

    Dim Hasher As New SHA256CryptoServiceProvider()
    Dim encoder As New UTF8Encoding()
    Dim shb As New SoapHexBinary(Hasher.ComputeHash(encoder.GetBytes(PasswordField)))

    Return shb.ToString

End Function

","1692","<.net><vb.net><encryption><sha>","1","0","3","2012-03-01 12:43:33","9516455","3","","1142314","","2012-02-07 06:27:58","2012-02-04 05:57:15",""
"12017185","How to get SHA of file for specific Git commit?","Is there a way to get SHA of file for specific Git commit?
It's possible with 2 commands:

retrieving file git show COMMIT_VERSION:myfile.txt > ~/tmp/myfile.txt
calculating SHA git hash-object ./tmp/myfile.txt

But, maybe there's specific command in Git that does exactly that?
","git ls-tree COMMIT_VERSION myfile.txt appears to contain the same result in its third field.
","1677","<git><commit><sha>","5","5","1","2012-08-18 08:48:44","12017235","0","1","","","","2012-08-18 08:39:35",""
"20001994","MySQL SHA1 hash does not match","I have a weird problem with a MySQL users table. I have quickly created a simplified version as a testcase.
I have the following table
CREATE TABLE IF NOT EXISTS `users` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `identity` varchar(255) NOT NULL,
  `credential` varchar(255) NOT NULL,
  `credentialSalt` varchar(255) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=ucs2 AUTO_INCREMENT=2 ;

INSERT INTO `users` (`id`, `identity`, `credential`, `credentialSalt`) VALUES
(1, 'test', '7288edd0fc3ffcbe93a0cf06e3568e28521687bc', '123');

And I run the following query
SELECT id,
       IF (credential = SHA1(CONCAT('test', credentialSalt)), 1, 0) AS dynamicSaltMatches,
       credentialSalt AS dynamicSalt,
       SHA1(CONCAT('test', credentialSalt)) AS dynamicSaltHash,
       IF (credential = SHA1(CONCAT('test', 123)), 1, 0) AS staticSaltMatches,
       123 AS staticSalt,
       SHA1(CONCAT('test', 123)) AS staticSaltHash
FROM   users
WHERE  identity = 'test'

Which gives me the following result

The dynamic salt does NOT match while the static salt DOES match.
This is blowing my mind. Can someone help me point out the cause of this?
My MySQL version is 5.5.29
","It's because of the default character set of your table. You appear to be running this on a UTF8 database and something in SHA1() is having problems with the differing character sets.
If you change your table declaration to the following it will match again:
CREATE TABLE IF NOT EXISTS `users` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `identity` varchar(255) NOT NULL,
  `credential` varchar(255) NOT NULL,
  `credentialSalt` varchar(255) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=2 ;

SQL Fiddle
As robertklep commented explicitly casting your string to a character will also work, basically ensure you're using the same characterset when doing comparisons using SHA1()
As the encryption functions documentation says:

Many encryption and compression functions return strings for which the result might contain arbitrary byte values. If you want to store these results, use a column with a VARBINARY or BLOB binary string data type. This will avoid potential problems with trailing space removal or character set conversion that would change data values, such as may occur if you use a nonbinary string data type (CHAR, VARCHAR, TEXT).

This was changed in version 5.5.3:

As of MySQL 5.5.3, the return value is a nonbinary string in the connection character set. Before 5.5.3, the return value is a binary string; see the notes at the beginning of this section about using the value as a nonbinary string.

","1674","<mysql><passwords><sha>","2","4","1","2013-11-15 13:34:32","20002184","0","","","","","2013-11-15 13:16:10",""
"18392341","python 2.7 hashlib sha1 not found on ARM","I'm trying to use openssl in python that is cross compiled to run on ARM.
For some reason the sha hashing methods are not found.
In the python console, I type:

import hashlib

ERROR:root:code for hash sha1 was not found. Traceback (most recent call last):   File ""/usr/lib/python2.7/hashlib.py"", line 139, in <module>
    globals()[__func_name] = __get_hash(__func_name)   File ""/usr/lib/python2.7/hashlib.py"", line 91, in __get_builtin_constructor
    raise ValueError('unsupported hash type %s' % name) ValueError: unsupported hash type sha1 ERROR:root:code for hash sha224 was not found. Traceback (most recent call last):   File ""/usr/lib/python2.7/hashlib.py"", line 139, in <module>
    globals()[__func_name] = __get_hash(__func_name)   File ""/usr/lib/python2.7/hashlib.py"", line 91, in __get_builtin_constructor
    raise ValueError('unsupported hash type %s' % name) ValueError: unsupported hash type sha224 ERROR:root:code for hash sha256 was not found. Traceback (most recent call last):   File ""/usr/lib/python2.7/hashlib.py"", line 139, in <module>
    globals()[__func_name] = __get_hash(__func_name)   File ""/usr/lib/python2.7/hashlib.py"", line 91, in __get_builtin_constructor
    raise ValueError('unsupported hash type %s' % name) ValueError: unsupported hash type sha256 ERROR:root:code for hash sha384 was not found. Traceback (most recent call last):   File ""/usr/lib/python2.7/hashlib.py"", line 139, in <module>
    globals()[__func_name] = __get_hash(__func_name)   File ""/usr/lib/python2.7/hashlib.py"", line 91, in __get_builtin_constructor
    raise ValueError('unsupported hash type %s' % name) ValueError: unsupported hash type sha384 ERROR:root:code for hash sha512 was not found. Traceback (most recent call last):   File ""/usr/lib/python2.7/hashlib.py"", line 139, in <module>
    globals()[__func_name] = __get_hash(__func_name)   File ""/usr/lib/python2.7/hashlib.py"", line 91, in __get_builtin_constructor
    raise ValueError('unsupported hash type %s' % name) ValueError: unsupported hash type sha512

and if I type it again, I do not get any error message. That is one issue. But the more significant problem is that when I type:

from hashlib import sha1 as sha

I get this error:
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
ImportError: cannot import name sha1

Any ideas or hints as to where sha is supposed to be implemented?
Even sha.py is trying to import sha1 from hashlib.
Another piece of information:
When I type
""dir(hashlib)""
I get
['__all__', '__builtins__', '__doc__', '__file__', '__get_builtin_constructor', '__name__', '__package__', 'algorithms', 'logging', 'md5', 'new']

","","1654","<python><sha><hashlib>","0","","0","2013-08-22 23:31:21","","6","","100297","","2013-08-22 23:31:21","2013-08-22 23:25:30",""
"45927378","HMAC SHA-384 in Java","I am trying to translate this line of code in Python:
signature = hmac.new(""1234abcd"", b64, hashlib.sha384).hexdigest()

I am trying to get the hash of a string with a secret key using SHA-384. However, I am trying to do this Java, does anyone know how to do it?
Also, I am asked for a nonce. What are the requirements for that?
","You can use the MessageDigest with a method to convert bytes to Hex:
private static final String HMAC_SHA1_ALGORITHM = ""HmacSHA384"";

private static String bytesToHex(final byte[] hash) {
    final StringBuffer hexString = new StringBuffer();
    for (int i = 0; i < hash.length; i++) {
        final String hex = Integer.toHexString(0xff & hash[i]);
        if (hex.length() == 1) {
            hexString.append('0');
        }
        hexString.append(hex);
    }
    return hexString.toString();
}

public static void main(final String... args) throws NoSuchAlgorithmException, InvalidKeyException {
    final String nonce = ""nonce"";
    final String message = ""test string"";
    SecretKeySpec signingKey = new SecretKeySpec(nonce.getBytes(), HMAC_SHA1_ALGORITHM);
    final Mac mac = Mac.getInstance(HMAC_SHA1_ALGORITHM);
    mac.init(signingKey);
    System.out.println(bytesToHex(mac.doFinal(message.getBytes())));
}

","1644","<java><sha>","1","3","1","2017-08-30 03:22:46","45927984","1","2","1337299","","2017-08-30 03:22:46","2017-08-28 21:05:52",""
"13932609","how to create md5 or sha1 checksum of a file without loading its contents to memory?","I mean similar thing like in php sha1_file.
I found very nice and compact script that does not need external libraries like boost : http://code.google.com/p/smallsha1/source/browse/trunk/sha1.cpp
But is there a way to pass to it a file stream when the file is for example 10GB in size ?
","For large files you can memory map part of the file, calculate sum, remap to the next part of the file and continue summing, and so on.
","1620","<c++><winapi><md5><checksum><sha>","2","0","2","2012-12-18 12:18:56","","1","","","","","2012-12-18 12:05:06",""
"13932609","how to create md5 or sha1 checksum of a file without loading its contents to memory?","I mean similar thing like in php sha1_file.
I found very nice and compact script that does not need external libraries like boost : http://code.google.com/p/smallsha1/source/browse/trunk/sha1.cpp
But is there a way to pass to it a file stream when the file is for example 10GB in size ?
","That exact code can't take a stream, no.
Look at the loop while (currentBlock <= endOfFullBlocks). It runs 64 bytes at a time through the actual hashing code. So in order to modify this code to take a stream, you need it to read those 64 bytes from the stream rather than taking them from sarray (which points to the same data as the input src).
64 bytes per read is not an efficient way to read 10GB of data, so actually you might like to introduce a second loop: one to read larger chunks from the file and one to put 64 byte blocks of that through the hash.
You will of course also need to modify the code to handle the ""leftover"" part of the input data that's not a multiple of 64.
Alternatively, find a different SHA1 implementation with ""init"", ""update"", ""finish""/""digest"" functions, and use that instead. The idea of such interfaces is that you call ""update"" as many times as you like, passing in chunks of data of whatever size is convenient for reading your stream.
","1620","<c++><winapi><md5><checksum><sha>","2","5","2","2012-12-18 12:18:56","","1","","","","","2012-12-18 12:05:06",""
"19342963","How to verify that my site is using SHA256RSA SSL ceritificate?","We recently acquired a brand new SHA256RSA certificate from a known CA. 
After importing the certificate into my keystore and starting the web server how can I confirm that the certificate is indeed SHA256RSA ?
I can use either IE, Firefox or Chrome for testing.
Please provide a short answer no need to walk me through configuration dialogs.
","In Firefox click on the padlock, click on ""more information"" and look down the bottom, it should say what kind of connection is being used.  You can also view the certificate data from that screen to verify the fingerprint of your new key.  The other browsers should do something similar, but I have neither so I can't check the hoops to jump through.
The connection details will list the symmetric algorithm and session key size, the certificate data will have the breakdown of the asymmetric cipher and hash algorithm (but as long as the fingerprint matches what your CA vendor signed it'll be fine).
","1616","<ssl><encryption><sha>","-1","1","1","2013-10-13 09:56:29","","2","","","","","2013-10-13 07:47:47","2013-10-14 04:30:52"
"22944043","Echo output of sha256sum on a CD's files to a text file","I have a CD whose contents I need to hash using sha256sum and I need to store its output to a single text file. How can I do this in a single command? I tried ""echo sha256sum * >> shasum.txt"" but what it did was it only appended the text sha256sum to all the files in the root folder and not what I really intended for it to do. Help please?
Edit: How can I do this command such that it affects ALL the files in the subfolders?
","That was close. I think you want to do:
sha256sum * > shasum.txt

Edit:
if you got subfolders, then something like that should work:
find myFolder -type f | xargs sha256sum >  shasum.txt

or in the folder:
find . -type f | xargs sha256sum >  shasum.txt

if you want only some files you can filter with -name:
find . -type f -name ""*.wav"" | xargs sha256sum >  shasum.txt

if you have filenames with newlines or strange things, you can use -print0:
find . -type f -print0 | xargs -0 sha256sum >  shasum.txt

","1603","<linux><ubuntu><hash><sha><sha256>","0","1","1","2014-04-09 08:15:12","22949400","0","","1743334","","2014-04-09 03:12:27","2014-04-08 17:22:46",""
"10887099","SHA256.Create() always returns null","Whenever I use the SHA256.Create() method it always returns a null value. Here is the method I have for encrypting a password ...
private string EncryptPassword(string password)
{
    SHA256 sha = SHA256.Create(password);
    return BitConverter.ToString(sha.Hash);
}

The debugger shows that the variable sha is null. I have even tried putting it in its own method in a controller but I still get a System.NullReferenceException
public String Index()
{
    return BitConverter.ToString(SHA256.Create(""Hello World"").Hash);
}

I am completely lost. Is there something that I am obviously doing wrong?
","Yes, Create() isn't meant for the message, it specifies the SHA256 implementation.
I suspect you want to use the implementation class SHA256Managed instead.
http://msdn.microsoft.com/en-us/library/system.security.cryptography.sha256managed.aspx
Example:
using (var sha256 = new SHA256Managed())
{
    byte[] raw = Encoding.Default.GetBytes(password);
    return sha256.ComputeHash(raw);
}

","1583","<c#><.net><asp.net-mvc-3><sha>","4","7","1","2012-06-04 19:28:55","10887133","0","1","","","","2012-06-04 19:26:13",""
"10830844","implementation of sha-256 in perl","i'm trying very hard on implementing the sha-256 algorithm. I have got problems with the padding of the message. for sha-256 you have to append one bit at the end of the message, which I have reached so far with $message .= (chr 0x80);
The next step should be to fill the emtpy space(512bit block) with 0's.
I calculated it with this formula: l+1+k=448-l and append it then to the message.
My problem comes now:Append in the last 64bit block the binary representation of the length of the message and fill the rest with 0's again. Since perl handles their data types by themself, there is no ""byte"" datatype. How can I figure out which value I should append? 
please see also the official specification:
http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf
","First of all I hope you do this just as an exercise -- there is a Digest module in core that already computes SHA-256 just fine.
Note that $message .= (chr 0x80); appends one byte, not one bit. If you really need bitwise manipulation, take a look at the vec function.
To get the binary representation of an intger, you should use pack. To get it to 64 bit, do something like
$message .= pack 'Q', length($message)

Note that the 'Q' format is only available on 64 bit perls; if yours isn't one, simply concatenate four 0-bytes with a 32 bit value (pack format L).
","1566","<perl><padding><sha>","6","5","2","2012-06-01 11:40:57","10840436","3","","","","","2012-05-31 09:26:43",""
"10830844","implementation of sha-256 in perl","i'm trying very hard on implementing the sha-256 algorithm. I have got problems with the padding of the message. for sha-256 you have to append one bit at the end of the message, which I have reached so far with $message .= (chr 0x80);
The next step should be to fill the emtpy space(512bit block) with 0's.
I calculated it with this formula: l+1+k=448-l and append it then to the message.
My problem comes now:Append in the last 64bit block the binary representation of the length of the message and fill the rest with 0's again. Since perl handles their data types by themself, there is no ""byte"" datatype. How can I figure out which value I should append? 
please see also the official specification:
http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf
","If at all possible, pull something off the shelf. You do not want to roll your own SHA-256 implementation because to get official blessing, you would have to have it certified.
That said, the specification is

5.1.1 SHA-1, SHA-224 and SHA-256
Suppose that the length of the message, M, is l bits. Append the bit 1 to the end of the message, followed by k zero bits, where k is the smallest, non-negative solution to the equation
l + 1 + k ≡ 448 mod 512
Then append the 64-bit block that is equal to the number l expressed using a binary representation. For example, the (8-bit ASCII) message “abc” has length 8 × 3 = 24, so the message is padded with a one bit, then 448 - (24 + 1) = 423 zero bits, and then the message length, to become the 512-bit padded message
                                  423       64
                                 .-^-.  .---^---.
01100001  01100010  01100011  1  00…00  00…011000
   “a”       “b”       “c”                  '-v-'
                                             l=24

Then length of the padded message should now be a multiple of 512 bits.

You might be tempted to use vec because it allows you to address single bits, but you would have to work around funky addressing.

If bits is 4 or less, the string is broken into bytes, then the bits of each byte are broken into 8/BITS groups. Bits of a byte are numbered in a little-endian-ish way, as in 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80. For example, breaking the single input byte chr(0x36) into two groups gives a list (0x6, 0x3); breaking it into 4 groups gives (0x2, 0x1, 0x3, 0x0).

Instead, a pack template of B* specifies

A bit string (descending bit order inside each byte).

and N

An unsigned long (32-bit) in ""network"" (big-endian) order.

The latter is useful for assembling the message length. Although pack has a Q parameter for quad, the result is in the native order.
Start with a bit of prep work
our($UPPER32BITS,$LOWER32BITS);
BEGIN {
  use Config;
  die ""$0: $^X not configured for 64-bit ints""
    unless $Config{use64bitint};

  # create non-portable 64-bit masks as constants
  no warnings ""portable"";
  *UPPER32BITS = \0xffff_ffff_0000_0000;
  *LOWER32BITS = \0x0000_0000_ffff_ffff;
}

Then you can defined pad_message as
sub pad_message {
  use bytes;

  my($msg) = @_;
  my $l = bytes::length($msg) * 8;
  my $extra = $l % 512;  # pad to 512-bit boundary
  my $k = 448 - ($extra + 1);

  # append 1 bit followed by $k zero bits
  $msg .= pack ""B*"", 1 . 0 x $k;

  # add big-endian length
  $msg .= pack ""NN"", (($l & $UPPER32BITS) >> 32), ($l & $LOWER32BITS);

  die ""$0: bad length: "", bytes::length $msg
    if (bytes::length($msg) * 8) % 512;

  $msg;
}

Say the code prints the padded message with
my $padded = pad_message ""abc"";

# break into multiple lines for readability
for (unpack(""H*"", $padded) =~ /(.{64})/g) {
  print $_, ""\n"";
}

Then the output is
6162638000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000018
which matches the specification.
","1566","<perl><padding><sha>","6","4","2","2012-06-01 11:40:57","10840436","3","","","","","2012-05-31 09:26:43",""
"39589999","Correct SHA256 implementation with UTF-8 characters","I'm running into issues comparing SHA256 hashes generated by different languages/functions.
For example, SHA256(""í"") either returns:
f3df1f9c358ae8eceb8fce7c00614288d113ad55315f4ebb909774a7daadfc84

-or-
127035a8ff26256ea0541b5add6dcc3ecdaeea603e606f84e0fd63492fbab2c5

Which of the above hash is correct for a string of one character, and what's the correct way of handling UTF-8 strings?
","
Which of the above hash is correct for a string of one character

There is no ""correct"" answer. What's being hashed is the bytes, not the ""character"". What bytes are hashed exactly depends on the encoding of the string.
""í"" in Windows-1252 is byte ED, which hashes as:
f3df1f9c358ae8eceb8fce7c00614288d113ad55315f4ebb909774a7daadfc84

""í"" in UTF-8 is bytes C3 AD, which hashes as:
127035a8ff26256ea0541b5add6dcc3ecdaeea603e606f84e0fd63492fbab2c5

""í"" in UTF-16LE is bytes ED 00, which hashes as:
430e2ca27910b5ee6e0ec56a12b81325c763376cb8e25a60362dce9444424f95

How exactly that works in various programming languages depends on the languages and the encodings they use for strings.
","1557","<hash><utf-8><character-encoding><sha>","1","3","1","2016-09-22 01:55:57","39590111","1","","65863","","2016-09-22 01:55:57","2016-09-20 09:08:54",""
"1699451","I want to convert 160-bit to integer","I am using SHA1 so i want to convert the output of this SHA1 to integer
","How about 
echo preg_replace(""/[^0-9]/i"", """", sha1(""apikot""));

","1554","<sha>","1","0","3","2012-01-15 21:12:35","","3","0","359862","","2012-01-15 21:12:35","2009-11-09 06:53:45",""
"1699451","I want to convert 160-bit to integer","I am using SHA1 so i want to convert the output of this SHA1 to integer
","You could represent 160 bits in 5 long ints.  That could be an array of 5 long ints, or you could have it be an array of 10 short ints.  Are you trying to make it easier to handle than a string of characters/bits?
","1554","<sha>","1","0","3","2012-01-15 21:12:35","","3","0","359862","","2012-01-15 21:12:35","2009-11-09 06:53:45",""
"1699451","I want to convert 160-bit to integer","I am using SHA1 so i want to convert the output of this SHA1 to integer
","This will convert the sha1sum of /tmp/a to a decimal integer:
$ (echo ibase=16; (cat /tmp/a | sha1sum | tr a-z A-Z | sed s/-// )) | bc 

","1554","<sha>","1","0","3","2012-01-15 21:12:35","","3","0","359862","","2012-01-15 21:12:35","2009-11-09 06:53:45",""
"6998203","Php Login / Mysql checking against mysql is not working with SHA512","GOAL: Trying to create a login. The registration page uses this to create the username and password based on input:
Register
 <?php
$host=""localhost""; // Host name 
$username=""root""; // Mysql username 
$password=""""; // Mysql password 
$db_name=""dbname""; // Database name 
$tbl_name=""Student""; // Table name

// Connect to server and select databse.
mysql_connect(""$host"", ""$username"", ""$password"")or die(""cannot connect""); 
mysql_select_db(""$db_name"")or die(""cannot select DB"");

/* Obliterate bad input */
$secUser = mysql_real_escape_string($_POST['reguser']);
$badpasses = $_POST['regpass'];
$salt = '~Z`!@#$%I^&*()_-+Q=}]{[\|""><';
$secPass = hash('sha512', $badpasses.$salt);

$sql= ""INSERT INTO Student (uname, upass, fname, lname, email, currGrade)                VALUES('$secUser','$secPass','$_POST[regfirst]','$_POST[reglast]','$_POST[regemail]','$_POST[regclassrank]')"";

$result = mysql_query($sql);
if (!$result) {
    die('Invalid query: ' . mysql_error());
}
else{
echo ""Registered"";
}

?>

Login.php
<?php
ob_start();
$host=""localhost""; // Host name 
$username=""root""; // Mysql username 
$password=""""; // Mysql password 
$db_name=""dbname""; // Database name 
$tbl_name=""Student""; // Table name

// Connect to server and select databse.
mysql_connect(""$host"", ""$username"", ""$password"")or die(""cannot connect""); 
mysql_select_db(""$db_name"")or die(""cannot select DB"");

// Define $myusername and $mypassword 
$salt = '~Z`!@#$%I^&*()_-+Q=}]{[\|""><';
$myusername = $_POST['uname']; 
$mypassword = $_POST['upass'];
$mypassword = hash('sha512', $mypassword.$salt);

$sql = ""SELECT * FROM $tbl_name WHERE uname = '$myusername' AND upass = '$mypassword')"";
$result=mysql_query($sql);

// Mysql_num_row is counting table row
$count=mysql_num_rows($result);
// If result matched $myusername and $mypassword, table row must be 1 row

if($count==1){
// Register $myusername, $mypassword and redirect to file ""login_success.php""
session_register(""regduser"");
session_register(""regdpass""); 
header(""location:login_success.php"");
}
else {
echo ""$mypassword<br />"";
echo ""Wrong Username or Password"";
}

ob_end_flush();
?>

The error I get is the Wrong User or Pass, but the password when I try to login is:
bffbc4f94f40d0cece6774ed9ec792b03ad5362edf768d190913d033c46ad4af4e2cbe1d42134f58da402efb7d3209b7e9b62ff3e81caf6341262b24dd300e9a

the password in the database for the user poop and password poop in the db is:
4e4d252a08ac4c35c2917b4fc715fef13bac2b686c7ebc8f8256765bd584a89634df3fa455ed73c1fbec84d442f11d5e064749396dcb1c0f1525f82c1b0ea57a

Why are these passwords different?! Can someone help?
","Should
// Define $myusername and $mypassword 
$salt = '~Z`!@#$%I^&*()_-+Q=}]{[\|""><';
$myusername = $_POST['uname']; 
$mypassword = $_POST['upass'];
$mypassword = hash('sha512', $mypassword);

not be
// Define $myusername and $mypassword 
$salt = '~Z`!@#$%I^&*()_-+Q=}]{[\|""><';
$myusername = $_POST['uname']; 
$mypassword = $_POST['upass'];
$mypassword = hash('sha512', $mypassword.$salt);

?
You add the salt to the password hash when you register, but you don't add it when you attempt a login.
I also want to strongly urge you not to POST directly into your database queries, but to use the mysql_real_escape for every POST variable that is used in a query. Better still would be to use prepared statements.
Doest that help at all?
","1549","<php><mysql><sha><sha512>","0","2","3","2011-08-09 18:34:14","","1","","886187","","2011-08-09 15:25:25","2011-08-09 14:54:09",""
"6998203","Php Login / Mysql checking against mysql is not working with SHA512","GOAL: Trying to create a login. The registration page uses this to create the username and password based on input:
Register
 <?php
$host=""localhost""; // Host name 
$username=""root""; // Mysql username 
$password=""""; // Mysql password 
$db_name=""dbname""; // Database name 
$tbl_name=""Student""; // Table name

// Connect to server and select databse.
mysql_connect(""$host"", ""$username"", ""$password"")or die(""cannot connect""); 
mysql_select_db(""$db_name"")or die(""cannot select DB"");

/* Obliterate bad input */
$secUser = mysql_real_escape_string($_POST['reguser']);
$badpasses = $_POST['regpass'];
$salt = '~Z`!@#$%I^&*()_-+Q=}]{[\|""><';
$secPass = hash('sha512', $badpasses.$salt);

$sql= ""INSERT INTO Student (uname, upass, fname, lname, email, currGrade)                VALUES('$secUser','$secPass','$_POST[regfirst]','$_POST[reglast]','$_POST[regemail]','$_POST[regclassrank]')"";

$result = mysql_query($sql);
if (!$result) {
    die('Invalid query: ' . mysql_error());
}
else{
echo ""Registered"";
}

?>

Login.php
<?php
ob_start();
$host=""localhost""; // Host name 
$username=""root""; // Mysql username 
$password=""""; // Mysql password 
$db_name=""dbname""; // Database name 
$tbl_name=""Student""; // Table name

// Connect to server and select databse.
mysql_connect(""$host"", ""$username"", ""$password"")or die(""cannot connect""); 
mysql_select_db(""$db_name"")or die(""cannot select DB"");

// Define $myusername and $mypassword 
$salt = '~Z`!@#$%I^&*()_-+Q=}]{[\|""><';
$myusername = $_POST['uname']; 
$mypassword = $_POST['upass'];
$mypassword = hash('sha512', $mypassword.$salt);

$sql = ""SELECT * FROM $tbl_name WHERE uname = '$myusername' AND upass = '$mypassword')"";
$result=mysql_query($sql);

// Mysql_num_row is counting table row
$count=mysql_num_rows($result);
// If result matched $myusername and $mypassword, table row must be 1 row

if($count==1){
// Register $myusername, $mypassword and redirect to file ""login_success.php""
session_register(""regduser"");
session_register(""regdpass""); 
header(""location:login_success.php"");
}
else {
echo ""$mypassword<br />"";
echo ""Wrong Username or Password"";
}

ob_end_flush();
?>

The error I get is the Wrong User or Pass, but the password when I try to login is:
bffbc4f94f40d0cece6774ed9ec792b03ad5362edf768d190913d033c46ad4af4e2cbe1d42134f58da402efb7d3209b7e9b62ff3e81caf6341262b24dd300e9a

the password in the database for the user poop and password poop in the db is:
4e4d252a08ac4c35c2917b4fc715fef13bac2b686c7ebc8f8256765bd584a89634df3fa455ed73c1fbec84d442f11d5e064749396dcb1c0f1525f82c1b0ea57a

Why are these passwords different?! Can someone help?
","I do not see where the ""salt"" is used in your login script. Maybe try the following:
$mypassword = hash('sha512', $mypassword . $salt);

","1549","<php><mysql><sha><sha512>","0","0","3","2011-08-09 18:34:14","","1","","886187","","2011-08-09 15:25:25","2011-08-09 14:54:09",""
"6998203","Php Login / Mysql checking against mysql is not working with SHA512","GOAL: Trying to create a login. The registration page uses this to create the username and password based on input:
Register
 <?php
$host=""localhost""; // Host name 
$username=""root""; // Mysql username 
$password=""""; // Mysql password 
$db_name=""dbname""; // Database name 
$tbl_name=""Student""; // Table name

// Connect to server and select databse.
mysql_connect(""$host"", ""$username"", ""$password"")or die(""cannot connect""); 
mysql_select_db(""$db_name"")or die(""cannot select DB"");

/* Obliterate bad input */
$secUser = mysql_real_escape_string($_POST['reguser']);
$badpasses = $_POST['regpass'];
$salt = '~Z`!@#$%I^&*()_-+Q=}]{[\|""><';
$secPass = hash('sha512', $badpasses.$salt);

$sql= ""INSERT INTO Student (uname, upass, fname, lname, email, currGrade)                VALUES('$secUser','$secPass','$_POST[regfirst]','$_POST[reglast]','$_POST[regemail]','$_POST[regclassrank]')"";

$result = mysql_query($sql);
if (!$result) {
    die('Invalid query: ' . mysql_error());
}
else{
echo ""Registered"";
}

?>

Login.php
<?php
ob_start();
$host=""localhost""; // Host name 
$username=""root""; // Mysql username 
$password=""""; // Mysql password 
$db_name=""dbname""; // Database name 
$tbl_name=""Student""; // Table name

// Connect to server and select databse.
mysql_connect(""$host"", ""$username"", ""$password"")or die(""cannot connect""); 
mysql_select_db(""$db_name"")or die(""cannot select DB"");

// Define $myusername and $mypassword 
$salt = '~Z`!@#$%I^&*()_-+Q=}]{[\|""><';
$myusername = $_POST['uname']; 
$mypassword = $_POST['upass'];
$mypassword = hash('sha512', $mypassword.$salt);

$sql = ""SELECT * FROM $tbl_name WHERE uname = '$myusername' AND upass = '$mypassword')"";
$result=mysql_query($sql);

// Mysql_num_row is counting table row
$count=mysql_num_rows($result);
// If result matched $myusername and $mypassword, table row must be 1 row

if($count==1){
// Register $myusername, $mypassword and redirect to file ""login_success.php""
session_register(""regduser"");
session_register(""regdpass""); 
header(""location:login_success.php"");
}
else {
echo ""$mypassword<br />"";
echo ""Wrong Username or Password"";
}

ob_end_flush();
?>

The error I get is the Wrong User or Pass, but the password when I try to login is:
bffbc4f94f40d0cece6774ed9ec792b03ad5362edf768d190913d033c46ad4af4e2cbe1d42134f58da402efb7d3209b7e9b62ff3e81caf6341262b24dd300e9a

the password in the database for the user poop and password poop in the db is:
4e4d252a08ac4c35c2917b4fc715fef13bac2b686c7ebc8f8256765bd584a89634df3fa455ed73c1fbec84d442f11d5e064749396dcb1c0f1525f82c1b0ea57a

Why are these passwords different?! Can someone help?
","Your $_POST['upass']; variable is empty. Check if your form field is actually called upass.
Based on this piece of information:
>> $salt = '~Z`!@#$%I^&*()_-+Q=}]{[\|""><';
'~Z`!@#$%I^&*()_-+Q=}]{[\\|""><'

>> hash('sha512', 'poop'.$salt);
'4e4d252a08ac4c35c2917b4fc715fef13bac2b686c7ebc8f8256765bd584a89634df3fa455ed73c1fbec84d442f11d5e064749396dcb1c0f1525f82c1b0ea57a'

>> hash('sha512', ''.$salt);
'bffbc4f94f40d0cece6774ed9ec792b03ad5362edf768d190913d033c46ad4af4e2cbe1d42134f58da402efb7d3209b7e9b62ff3e81caf6341262b24dd300e9a'

","1549","<php><mysql><sha><sha512>","0","0","3","2011-08-09 18:34:14","","1","","886187","","2011-08-09 15:25:25","2011-08-09 14:54:09",""
"31260719","Getting Exception in authenticating Mongo DB","I am Getting below Exception while inserting record in Mongo DB.
org.springframework.dao.DataAccessResourceFailureException: IOException authenticating the connection; nested exception is com.mongodb.MongoException$Network: IOException authenticating the connection
    at org.springframework.data.mongodb.core.MongoExceptionTranslator.translateExceptionIfPossible(MongoExceptionTranslator.java:56)
    at org.springframework.data.mongodb.core.MongoTemplate.potentiallyConvertRuntimeException(MongoTemplate.java:1791)
    at org.springframework.data.mongodb.core.MongoTemplate.execute(MongoTemplate.java:404)
    at org.springframework.data.mongodb.core.MongoTemplate.insertDBObject(MongoTemplate.java:879)
    at org.springframework.data.mongodb.core.MongoTemplate.doInsert(MongoTemplate.java:709)
    at org.springframework.data.mongodb.core.MongoTemplate.insert(MongoTemplate.java:663)
    at com.yatra.product.seo.service.mongo.MongoJob.singleInsert(MongoJob.java:76)
    at com.yatra.product.seo.service.mongo.MongoJob.myRun(MongoJob.java:96)
    at com.yatra.platform.commons.YatraRunable.run(YatraRunable.java:9)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
    at java.lang.Thread.run(Unknown Source)
Caused by: com.mongodb.MongoException$Network: IOException authenticating the connection
    at com.mongodb.DBPort$SaslAuthenticator.authenticate(DBPort.java:915)
    at com.mongodb.DBPort.authenticate(DBPort.java:432)
    at com.mongodb.DBPort.checkAuth(DBPort.java:443)
    at com.mongodb.DBTCPConnector.doOperation(DBTCPConnector.java:207)
    at com.mongodb.DBTCPConnector.say(DBTCPConnector.java:181)
    at com.mongodb.DBCollectionImpl.insertWithWriteProtocol(DBCollectionImpl.java:565)
    at com.mongodb.DBCollectionImpl.insert(DBCollectionImpl.java:195)
    at com.mongodb.DBCollectionImpl.insert(DBCollectionImpl.java:167)
    at com.mongodb.DBCollection.insert(DBCollection.java:93)
    at com.mongodb.DBCollection.insert(DBCollection.java:78)
    at com.mongodb.DBCollection.insert(DBCollection.java:120)
    at org.springframework.data.mongodb.core.MongoTemplate$8.doInCollection(MongoTemplate.java:884)
    at org.springframework.data.mongodb.core.MongoTemplate.execute(MongoTemplate.java:402)
    ... 9 more
Caused by: javax.security.sasl.SaslException: Unable to find PBKDF2WithHmacSHA1. [Caused by java.security.NoSuchAlgorithmException: PBKDF2WithHmacSHA1 SecretKeyFactory not available]
    at com.mongodb.DBPort$ScramSha1Authenticator$ScramSha1SaslClient.Hi(DBPort.java:829)
    at com.mongodb.DBPort$ScramSha1Authenticator$ScramSha1SaslClient.computeClientFinalMessage(DBPort.java:747)
    at com.mongodb.DBPort$ScramSha1Authenticator$ScramSha1SaslClient.evaluateChallenge(DBPort.java:681)
    at com.mongodb.DBPort$SaslAuthenticator.authenticate(DBPort.java:904)
    ... 21 more
Caused by: java.security.NoSuchAlgorithmException: PBKDF2WithHmacSHA1 SecretKeyFactory not available
    at javax.crypto.SecretKeyFactory.<init>(SecretKeyFactory.java:122)
    at javax.crypto.SecretKeyFactory.getInstance(SecretKeyFactory.java:160)
    at com.mongodb.DBPort$ScramSha1Authenticator$ScramSha1SaslClient.Hi(DBPort.java:826)
    ... 24 more

Can Any Body help please ?
Thanks 
","Despite we can't see your code. There are two possible ways to fix this. 
Workaround: Add the following dependencies
    <dependency>
        <groupId>org.bouncycastle</groupId>
        <artifactId>bcpkix-jdk15on</artifactId>
        <version>1.52</version>
    </dependency>
    <dependency>
        <groupId>org.bouncycastle</groupId>
        <artifactId>bcprov-jdk15</artifactId>
        <version>1.46</version>
    </dependency>

And add this instruction Security.addProvider(new BouncyCastleProvider()) before authenticating with MongoDB.
Correct way:
Since, PBKDF2WithHmacSHA1 should be included in your java installation folder. In my opinion, i would check if my enviorment variables are correct. And in the case that you use Windows, i would also check regedit HKLM/Software/JavaSoft/Java Runtime Environment/ to make sure that paths are also correct.
","1548","<java><spring><mongodb><sha>","1","1","2","2015-12-18 12:27:56","","3","","2965839","","2015-07-07 06:06:29","2015-07-07 05:50:27",""
"31260719","Getting Exception in authenticating Mongo DB","I am Getting below Exception while inserting record in Mongo DB.
org.springframework.dao.DataAccessResourceFailureException: IOException authenticating the connection; nested exception is com.mongodb.MongoException$Network: IOException authenticating the connection
    at org.springframework.data.mongodb.core.MongoExceptionTranslator.translateExceptionIfPossible(MongoExceptionTranslator.java:56)
    at org.springframework.data.mongodb.core.MongoTemplate.potentiallyConvertRuntimeException(MongoTemplate.java:1791)
    at org.springframework.data.mongodb.core.MongoTemplate.execute(MongoTemplate.java:404)
    at org.springframework.data.mongodb.core.MongoTemplate.insertDBObject(MongoTemplate.java:879)
    at org.springframework.data.mongodb.core.MongoTemplate.doInsert(MongoTemplate.java:709)
    at org.springframework.data.mongodb.core.MongoTemplate.insert(MongoTemplate.java:663)
    at com.yatra.product.seo.service.mongo.MongoJob.singleInsert(MongoJob.java:76)
    at com.yatra.product.seo.service.mongo.MongoJob.myRun(MongoJob.java:96)
    at com.yatra.platform.commons.YatraRunable.run(YatraRunable.java:9)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
    at java.lang.Thread.run(Unknown Source)
Caused by: com.mongodb.MongoException$Network: IOException authenticating the connection
    at com.mongodb.DBPort$SaslAuthenticator.authenticate(DBPort.java:915)
    at com.mongodb.DBPort.authenticate(DBPort.java:432)
    at com.mongodb.DBPort.checkAuth(DBPort.java:443)
    at com.mongodb.DBTCPConnector.doOperation(DBTCPConnector.java:207)
    at com.mongodb.DBTCPConnector.say(DBTCPConnector.java:181)
    at com.mongodb.DBCollectionImpl.insertWithWriteProtocol(DBCollectionImpl.java:565)
    at com.mongodb.DBCollectionImpl.insert(DBCollectionImpl.java:195)
    at com.mongodb.DBCollectionImpl.insert(DBCollectionImpl.java:167)
    at com.mongodb.DBCollection.insert(DBCollection.java:93)
    at com.mongodb.DBCollection.insert(DBCollection.java:78)
    at com.mongodb.DBCollection.insert(DBCollection.java:120)
    at org.springframework.data.mongodb.core.MongoTemplate$8.doInCollection(MongoTemplate.java:884)
    at org.springframework.data.mongodb.core.MongoTemplate.execute(MongoTemplate.java:402)
    ... 9 more
Caused by: javax.security.sasl.SaslException: Unable to find PBKDF2WithHmacSHA1. [Caused by java.security.NoSuchAlgorithmException: PBKDF2WithHmacSHA1 SecretKeyFactory not available]
    at com.mongodb.DBPort$ScramSha1Authenticator$ScramSha1SaslClient.Hi(DBPort.java:829)
    at com.mongodb.DBPort$ScramSha1Authenticator$ScramSha1SaslClient.computeClientFinalMessage(DBPort.java:747)
    at com.mongodb.DBPort$ScramSha1Authenticator$ScramSha1SaslClient.evaluateChallenge(DBPort.java:681)
    at com.mongodb.DBPort$SaslAuthenticator.authenticate(DBPort.java:904)
    ... 21 more
Caused by: java.security.NoSuchAlgorithmException: PBKDF2WithHmacSHA1 SecretKeyFactory not available
    at javax.crypto.SecretKeyFactory.<init>(SecretKeyFactory.java:122)
    at javax.crypto.SecretKeyFactory.getInstance(SecretKeyFactory.java:160)
    at com.mongodb.DBPort$ScramSha1Authenticator$ScramSha1SaslClient.Hi(DBPort.java:826)
    ... 24 more

Can Any Body help please ?
Thanks 
","If your java version below 1.6, then use @Charlie 's solution.
Else, there must be absent the system property of java.ext.dirs 
you can execute java like this:

java -Djava.ext.dirs=$JAVA_HOME/jre/lib/ext  yourApp

enjoy it.
","1548","<java><spring><mongodb><sha>","1","1","2","2015-12-18 12:27:56","","3","","2965839","","2015-07-07 06:06:29","2015-07-07 05:50:27",""
"25917032","CryptoJS.SHA3 in code behind in c#?","Now I am using below code in aspx page. But Now I need something in code behind in C#. Is there any library available? 
<script src=""http://crypto-js.googlecode.com/svn/tags/3.1.2/build/rollups/sha3.js""/>
<script>
    var hash = CryptoJS.SHA3(""Message"", { outputLength: 512 });
</script>

","There are libraries that implement SHA3 in C#. Some are:

Hashlib
SHA3Net
SHA3 0.9.2

Checkout their docs for code examples.
","1534","<c#><javascript><asp.net><sha><cryptojs>","1","3","1","2014-09-18 16:01:35","25917306","0","","158008","","2014-09-18 15:43:52","2014-09-18 15:41:56",""
"13035062","The different of SHA512 between openssl and php","Here is C code:
#include <openssl/sha.h>
#include <stdio.h>
char *hash_sha512(char *data){
    SHA512_CTX ctx;
    char *md=malloc(sizeof(char)*(SHA512_DIGEST_LENGTH+1));

    SHA512_Init(&ctx);
    SHA512_Update(&ctx, data, strlen(data));
    SHA512_Final(md, &ctx);
    md[SHA512_DIGEST_LENGTH]='\0';

    return md;
}
int main(int argc, char *argv[]){
    str=hash_sha512(""GFLOuJnR19881218"");
    printf(""%s\n"", str);
    free(str);
    return 1;
}

The output:

�<�4����IIA[r�� Η#�    6π�8jD����J�b9��ږ��^X�

Here is PHP code:
$hash=hash('sha512', 'GFLOuJnR19881218', TRUE);

The output:

�<��>4��ǰ��II�-A[r�?�� �Η#��D6π�8jD���?���J�b9��ږ��^X�

The results of C code and PHP code are different, what is wrong with my code?
","The output is garbled because the output is a binary string which the browser is trying to display as ASCII or UTF-8 and can't. You need to encode both as hexidecimal, decimal, base32, or some other normal human representation and then compare them.
$binary = hash('sha512', 'GFLOuJnR19881218', TRUE);
$hex = hash('sha512', 'GFLOuJnR19881218');


string hash ( string $algo , string $data [, bool $raw_output = false ] )  

When set to TRUE, outputs raw binary data. FALSE outputs lowercase hexits.
  - http://us2.php.net/manual/en/function.hash.php

","1517","<php><c><hash><sha>","2","3","1","2012-10-23 16:57:55","13035490","8","","1030853","","2012-10-23 16:47:14","2012-10-23 16:25:44","2012-10-24 17:03:41"
"51546097","Verify SHA-256 sum of a file and exit the script if not as intended","I am attempting to make a bash script to auto-install a software I frequently work with, and I've arrived at a small issue. I would like my script to verify the validity of the downloaded file's sha256sum and either respond with a message of success or exit with an error message if it isn't what is expected. 
Here's what I've tried so far (It works somewhat but doesn't exit on failure): 
shasum panel.tar.gz |
awk $1==""acca80528628ad362c5733229203a6c4bb3d648a9c40be318ff9f4f9653d505d""{print""SHA256SUM validated, installation may proceed""}

It's a part of an installation script, I'd like for it to verify the shasum and then if it doesn't match the expected acca80528628ad362c5733229203a6c4bb3d648a9c40be318ff9f4f9653d505d, it should exit the entire script. The line I gave above keeps the script going as-is without stopping, even if the shasum doesn't match the expected.
","Use a process substitution to create the checksum file for shasum -c on the fly:
checksum=acca80528628ad362c5733229203a6c4bb3d648a9c40be318ff9f4f9653d505d
shasum -c <(echo ""$checksum panel.tar.gz"")

Or pipe the contents to shasum, using - as the file name:
echo ""$checksum panel.tar.gz"" | shasum -c -

Look at the exit status to determine whether to continue.
if ! echo ""$checksum panel.tar.gz"" | shasum -c -; then
    echo ""Checksum failed"" >&2
    exit 1
fi

If you don't want to do anything other than exit immediately, you can use
echo ""$checksum panel.tar.gz"" | shasum -c - || exit 1

","1509","<linux><bash><shell><sh><sha>","0","2","1","2018-07-26 20:17:13","51546226","3","","608639","","2018-07-26 20:12:12","2018-07-26 19:16:53",""
"35563804","Python 3.5 convert a string to the type of a sha1 sum","I know how to get the sha1 from a string and then get the digest sha1 from it which is my goal. But now the problem is that I already have the sha1 (which comes from a file not a string) and want to get the digest sha1 from it (and base 64 encode it).
mysha1 = ""FB9BA6614A6AEB7A040881E09A4B8211405831FF""
print(base64.b64encode(mysha1.digest()))

and this leads to
AttributeError: 'str' object has no attribute 'digest'

","Example with digest and hexdigest:
>>> import hashlib
>>> d = hashlib.sha1(b'footext')
>>> d.digest()
b'f\xf9\x88gI\xfdQK\x8eM\xbd\x9e\x18(\xcf\x860""\xf1\xbf'
>>> d.hexdigest()
'66f9886749fd514b8e4dbd9e1828cf863022f1bf'

How to turn the hexdigest into the digest:
>>> bytes.fromhex(d.hexdigest())
b'f\xf9\x88gI\xfdQK\x8eM\xbd\x9e\x18(\xcf\x860""\xf1\xbf'

","1508","<python-3.x><sha><digest>","0","5","1","2016-02-22 22:27:52","","6","1","4179277","","2016-02-22 22:27:52","2016-02-22 21:04:44",""
"17003134","php's hmac sha256 implementation mismatches java's one","i'm trying to reproduce in php the test cases mentioned in the official of totp computation reference (http://tools.ietf.org/html/rfc6238 Appendix A) which are written in java. The reference provides example for sha1, sha256 and sha512 algorithm.  
I've found this nice example by Rob Swan (see the 8 digit example) that reproduces fine one test case (with sha1). But if I change the algorithm to sha256 or sha512 (and change the seeds too, according to the reference input data) I got different results from the reference's ones. 
May the hmac hash function of php be different from java's one? 
Thank you!
","* SOLUTION 
Here is a copy of the php implementation by Rob Swan I mentioned:
<?php

// Define your secret seed
// NB: this is a hexadecimal representation of the example
// ASCII string which is: 12345678901234567890
$secret_seed = ""3132333435363738393031323334353637383930"";

// Determine the time window as 30 seconds
$time_window = 30;

// Set the timestamp manually
$exact_time = 1111111109;

// Round the time down to the time window
$rounded_time = floor($exact_time/$time_window);

// Pack the counter into binary
$packed_time = pack(""N"", $rounded_time);

// Make sure the packed time is 8 characters long
$padded_packed_time = str_pad($packed_time,8, chr(0), STR_PAD_LEFT);

// Pack the secret seed into a binary string
$packed_secret_seed = pack(""H*"", $secret_seed);

// Generate the hash using the SHA1 algorithm
$hash = hash_hmac ('sha1', $padded_packed_time, $packed_secret_seed, true);

// NB: Note we have change the exponent in the pow function 
// from 6 to 8 to generate an 8 digit OTP not a 6 digit one 

// Extract the 8 digit number fromt the hash as per RFC 6238
$offset = ord($hash[19]) & 0xf;
$otp = (
    ((ord($hash[$offset+0]) & 0x7f) << 24 ) |
    ((ord($hash[$offset+1]) & 0xff) << 16 ) |
    ((ord($hash[$offset+2]) & 0xff) << 8 ) |
    (ord($hash[$offset+3]) & 0xff)
) % pow(10, 8);

// NB: Note that we are padding to 8 characters not 6 for this example

// Add any missing zeros to the left of the numerical output
$otp = str_pad($otp, 8, ""0"", STR_PAD_LEFT);

// Display the output, which should be 
echo ""This should display 07081804: "" . $otp;

?>

The key point is this line: 
$offset = ord($hash[19]) & 0xf;

This works fine under the hypotesis of using sha1 algorithm, which returns a 20 chars string. 
To abstract the line and make it compatible with any other algorithm change this line to:
$offset = ord($hash[strlen($hash)-1]) & 0xf;

Now you have a general and working php version of RFC 6238 totp calculation!
","1495","<java><php><hash><sha><hmac>","0","1","1","2014-04-19 21:21:54","","5","","","","","2013-06-08 19:38:56",""
"35381287","How to verify POST data is sent from Android app with correct SHA1 signature?","Recently my game has been hacked and one user submitted an impossible score to the server. The score was submitted with a verified checksum, and correct data.
I'm convinced that the user must have reverse engineered my APK file to find the POST request.
Now I wonder what would be a good way to prevent this from happening again and I thought about verifying the SHA1 signature of the app. Maybe this way I can make sure that the app is signed by me, and is not a reverse engineered and changed version of the app.
Would this be possible? Or would there be a better solution to solve this?
I am using LibGDX by the way.
","Verifying the integrity of your app won't be enough, since the request can be easily faked outside the app or modified in memory on the fly, using a rooted android environment. Even more, you cannot totally avoid it.
This is a problem shared by all applications running in a machine out of your control (all client applications). You can't never trust the data coming from them.
As I can see it, you have several choices:

Obfuscate the code and make the app more difficult to be reverse-engineered. Notice that this do not solve the problem, but minimizes it.
Move processing to the server. The more game-play is controlled by the server, the less vulnerable you app would be to this malicious behavior.
Automatically detect impossible scores and close their accounts

Cheers,
","1482","<java><android><security><proguard><sha>","11","1","5","2016-03-03 08:36:22","35673495","3","3","","","","2016-02-13 14:48:03",""
"35381287","How to verify POST data is sent from Android app with correct SHA1 signature?","Recently my game has been hacked and one user submitted an impossible score to the server. The score was submitted with a verified checksum, and correct data.
I'm convinced that the user must have reverse engineered my APK file to find the POST request.
Now I wonder what would be a good way to prevent this from happening again and I thought about verifying the SHA1 signature of the app. Maybe this way I can make sure that the app is signed by me, and is not a reverse engineered and changed version of the app.
Would this be possible? Or would there be a better solution to solve this?
I am using LibGDX by the way.
","If you want to verify the signature of your app without the possibility that this is cracked too, you would have to upload the whole apk and make the check on a server. This is not a practicable solution.
The only secure android app is a pure terminal app, which means you'd have to do all computing on a server. Most of the time this won't be possible because of latency.
That's why we Android developers have to live with this: an app is not 100% secure.
But you can get close to it. 
You might want to read Security with HTTPS and SSL guide for securing your communication.
Also you'll want to ensure your client is hard to crack: android app piracy prevention and Combating Android App Piracy: Xposed
In your case you'll also want to implement server-side request validation:
If you have a game with a server side, users probably have an account. If a user sends a clearly impossible score, automatically disregard the request and ban the user (and his ip). (But also have in mind that this should never happen to a valid request, otherwise users might get angry and stop playing.)
","1482","<java><android><security><proguard><sha>","11","1","5","2016-03-03 08:36:22","35673495","3","3","","","","2016-02-13 14:48:03",""
"35381287","How to verify POST data is sent from Android app with correct SHA1 signature?","Recently my game has been hacked and one user submitted an impossible score to the server. The score was submitted with a verified checksum, and correct data.
I'm convinced that the user must have reverse engineered my APK file to find the POST request.
Now I wonder what would be a good way to prevent this from happening again and I thought about verifying the SHA1 signature of the app. Maybe this way I can make sure that the app is signed by me, and is not a reverse engineered and changed version of the app.
Would this be possible? Or would there be a better solution to solve this?
I am using LibGDX by the way.
","First of all, you really have to obfuscate your code. You can find more information about ProGuard and code obfuscation here.
Second of all, you can use GoogleAuthUtil available in Google Play Services, which is available for devices running Android 2.2 or higher.
GoogleAuthUtil does exactly what you need: 

Your client server calls go to Google via a HTTPS request, Google checks whether or not the call is made by an app signed with your release certificate, and then it sends the request to your server.
You can find official tutorials about how to implement this here and official documentation here.
Cheers!
","1482","<java><android><security><proguard><sha>","11","4","5","2016-03-03 08:36:22","35673495","3","3","","","","2016-02-13 14:48:03",""
"35381287","How to verify POST data is sent from Android app with correct SHA1 signature?","Recently my game has been hacked and one user submitted an impossible score to the server. The score was submitted with a verified checksum, and correct data.
I'm convinced that the user must have reverse engineered my APK file to find the POST request.
Now I wonder what would be a good way to prevent this from happening again and I thought about verifying the SHA1 signature of the app. Maybe this way I can make sure that the app is signed by me, and is not a reverse engineered and changed version of the app.
Would this be possible? Or would there be a better solution to solve this?
I am using LibGDX by the way.
","1) Use code obfuscation for ex. Proguard. This kind of tools available not only for Java.
But be careful with that - obfuscated code may work slowly or contain additional bugs.
2) Add App Licencing check (this will check app signature with Google Play):
Watch this video with attention:
https://www.youtube.com/watch?v=TnSNCXR9fbY
As I remember he mention technics  used at runtime to verify your app not hacked or modified (zip check, etc). 
3) Make sure your app/server use secure connection (SSL/TLS) only with MODERN cipher suites. This will mitigate downgrade attacks.
You can use this generator to build config with MODERN cipher suites for your server:
https://mozilla.github.io/server-side-tls/ssl-config-generator/
Also you can use certificate pining on client side - this will mitigate authority attack.
Do not use plain HTTP connection.
4) Use some kind of request signing (like Amazon AWS does)
You can get core idea from their docs.
http://docs.aws.amazon.com/general/latest/gr/sigv4_signing.html
Also this article should be helpful.
5) Prohibit usage of your app on ROOT'ed devices by adding run time check. Because of on rooted phone it's easier to hack or analyze your app.
6) You can decrease fraud by adding some ban system to your online game - if somebody hack your app and send wrong data to your server => add this user to ban list on server side (by IP or by user ID, etc). Probably add users to this list temporary (ex 24 hr, 7 days)
7) + if you are using Json/XML as data formats for network layer try to use binary format like Protocol Buffers. Binary serialization formats more efficient and hard to reverse engineer.
","1482","<java><android><security><proguard><sha>","11","3","5","2016-03-03 08:36:22","35673495","3","3","","","","2016-02-13 14:48:03",""
"35381287","How to verify POST data is sent from Android app with correct SHA1 signature?","Recently my game has been hacked and one user submitted an impossible score to the server. The score was submitted with a verified checksum, and correct data.
I'm convinced that the user must have reverse engineered my APK file to find the POST request.
Now I wonder what would be a good way to prevent this from happening again and I thought about verifying the SHA1 signature of the app. Maybe this way I can make sure that the app is signed by me, and is not a reverse engineered and changed version of the app.
Would this be possible? Or would there be a better solution to solve this?
I am using LibGDX by the way.
","You can obfuscate your code better and use some very obfuscated secret to sign your requests. With that you can increase security.
But if all your game run in client it can't be completely secure. Because it doesn't matter what you use to sign, if you do it in client it means you have the secret or private key in client and then it can be hacked.
To make it more secure you need to involve some game logic in server and then control in that logic that the user isn't cheating.
","1482","<java><android><security><proguard><sha>","11","1","5","2016-03-03 08:36:22","35673495","3","3","","","","2016-02-13 14:48:03",""
"1238494","How can I create the hash of a webpage in java?","I need to create the hash of a the html of a webpage (from its URL) using SHA1 or MD5 in java, but I don't know how to do it... can you help me? 
","DigestUtils.sha(String) should do the job for the URI or the HTML of the web page, though it's on you to get the HTML of the page from its URI if that's part of the problem. If so, you may want to look into using Commons HttpClient to GET the page.
","1481","<java><hash><md5><sha>","0","1","2","2009-08-06 12:48:58","1238670","2","3","136295","","2009-08-06 12:46:14","2009-08-06 12:16:53",""
"1238494","How can I create the hash of a webpage in java?","I need to create the hash of a the html of a webpage (from its URL) using SHA1 or MD5 in java, but I don't know how to do it... can you help me? 
","Raffaele Di Fazio:
you can use this function to generate MD5 as HashValue from the String; for example, 
   String hashValue = MD5Hash(""URL or HTML"".getBytes());


  /**
     * MD5 implementation as Hash value 
     * 
     * @param a_sDataBytes - a original data as byte[] from String
     * @return String as Hex value 
     * @throws NoSuchAlgorithmException 
     */

    public static String MD5Hash(byte[] dataBytes) throws NoSuchAlgorithmException {
        if( dataBytes == null) return """";

        MessageDigest md = MessageDigest.getInstance(""MD5"");
        md.update(dataBytes);
        byte[] digest = md.digest();

        // convert it to the hexadecimal 
        BigInteger bi = new BigInteger(digest);
        String s = bi.toString(16);
        if( s.length() %2 != 0)
        {
            s = ""0""+s;
        }
        return s;
    }

I hope it helps. Please, let us know if it is right direction for that question.
Tiger. 
","1481","<java><hash><md5><sha>","0","2","2","2009-08-06 12:48:58","1238670","2","3","136295","","2009-08-06 12:46:14","2009-08-06 12:16:53",""
"16111754","SHA256 in Go and PHP giving different results","I'm trying to send a SHA256 hashed string over HTTP to a server, where I want to authenticate by performing a SHA256 hash and verifying the two match.  For testing purposes I'm using the same string, however my results do not match up.  Could this be something with default encoding schemes for my base64_encode calls?  Thanks.
In PHP I'm doing:
$sha = hash(""sha256"", $url, true);
$sha = base64_encode(urlencode($sha));

And in Go I'm doing
//convert string to byte slice
converted := []byte(to_hash)

//hash the byte slice and return the resulting string
hasher := sha256.New()
hasher.Write(converted)
return (base64.URLEncoding.EncodeToString(hasher.Sum(nil)))

","I was able to figure it out after a while.  I standardized both to hexadecimal encoding.  To accomplish this I changed the code as follows:
PHP:
$sha = hash(""sha256"", $url, false); //false is default and returns hex
//$sha = base64_encode(urlencode($sha)); //removed

Go:
//convert string to byte slice
converted := []byte(to_hash)

//hash the byte slice and return the resulting string
hasher := sha256.New()
hasher.Write(converted)
return (hex.EncodeToString(hasher.Sum(nil))) //changed to hex and removed URLEncoding

","1448","<php><go><sha><sha256>","5","6","1","2013-04-26 08:50:36","16113567","3","","367456","","2013-04-26 08:50:36","2013-04-19 19:02:12",""
"43519587","how SHA-256 hash size is calculated","SHA-256 gives us a 256 bits hash code for a given input. When I tried, I got the below hash for a random input string-
2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824

This hash has 64 characters. So considering common encodings, its size would be-
UTF-8 = 64 * 8 = 512bits
UTF-16 = 64 * 16 = 1024bits
So how come its called 256bit hash. Am I doing a incorrect conversion?
","This is base16/hex representation, which only has 4 (log2 16) bits of data per byte.
Thus, sha256 is 4*64 here. Nothing is wrong.
","1446","<hash><sha>","2","3","2","2017-04-20 14:27:04","43520009","0","","2607840","","2017-04-20 14:27:04","2017-04-20 12:29:10",""
"43519587","how SHA-256 hash size is calculated","SHA-256 gives us a 256 bits hash code for a given input. When I tried, I got the below hash for a random input string-
2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824

This hash has 64 characters. So considering common encodings, its size would be-
UTF-8 = 64 * 8 = 512bits
UTF-16 = 64 * 16 = 1024bits
So how come its called 256bit hash. Am I doing a incorrect conversion?
","The string 2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824 is a hex-encoded String. It's the bytes represented in base 16 numbers, so every 2 characters represent a single byte.
So 2c is the first byte, f2 is the second byte and so on. As the string has 64 characters, it represents 32 bytes.
And 32 bytes = 256 bits
","1446","<hash><sha>","2","1","2","2017-04-20 14:27:04","43520009","0","","2607840","","2017-04-20 14:27:04","2017-04-20 12:29:10",""
"32448912","Build error with ""___report_rangecheckfailure"" with OpenSSL libs","Using VC++ 2010
Compiling with OpenSSL libraries to make a SHA512 hash...
getting this build error:
1>------ Build started: Project: Second, Configuration: Debug Win32 ------
1>  stdafx.cpp
1>  AssemblyInfo.cpp
1>Second.cpp
1>  Second.cpp(64): warning C4996: 'sprintf': This function or variable may be unsafe. Consider using sprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.
1>          C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\stdio.h(371) : see declaration of 'sprintf'
1>  Generating Code...
1>  .NETFramework,Version=v4.0.AssemblyAttributes.cpp
1>  Microsoft (R) Incremental Linker Version 10.00.40219.01
1>  Copyright (C) Microsoft Corporation.  All rights reserved.
1>  
1>  ""/OUT:C:\Users\Boss\documents\visual studio 2010\Projects\Second\Debug\Second.exe"" /INCREMENTAL ""C:\Program Files\OpenSSL-Win32\lib\VC\static\ssleay32MD.lib"" ""C:\Program Files\OpenSSL-Win32\lib\VC\static\libeay32MD.lib"" kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib /ASSEMBLYRESOURCE:Debug\Second.Form1.resources /MANIFEST ""/ManifestFile:Debug\Second.exe.intermediate.manifest"" ""/MANIFESTUAC:level='asInvoker' uiAccess='false'"" /DEBUG ""/PDB:C:\Users\Boss\documents\visual studio 2010\Projects\Second\Debug\Second.pdb"" /ASSEMBLYDEBUG /SUBSYSTEM:WINDOWS /TLBID:1 ""/ENTRY:main"" /DYNAMICBASE /FIXED:NO /NXCOMPAT /MACHINE:X86 Debug\app.res 
1>  Debug\AssemblyInfo.obj 
1>  Debug\Second.obj 
1>  Debug\stdafx.obj 
1>  ""Debug\.NETFramework,Version=v4.0.AssemblyAttributes.obj"" 
1>libeay32MD.lib(obj_dat.obj) : error LNK2019: unresolved external symbol ___report_rangecheckfailure referenced in function _OBJ_create_objects
1>libeay32MD.lib(b_print.obj) : error LNK2001: unresolved external symbol ___report_rangecheckfailure
1>C:\Users\Boss\documents\visual studio 2010\Projects\Second\Debug\Second.exe : fatal error LNK1120: 1 unresolved externals
========== Build: 0 succeeded, 1 failed, 0 up-to-date, 0 skipped ==========

Tried disabling buffer overrun security check, same error..
Any thoughts?  Tried all day with Crypto++, to no avail, OpenSSL was much easier, just hung up on this one error...
","It looks as though you are trying to link to OpenSSL libraries that were built with a later version of the compiler.
Function ___report_rangecheckfailure was introduced in more recent versions of Visual Studio (see http://blogs.microsoft.com/cybertrust/2012/01/26/enhancements-to-gs-in-visual-studio-11/ for details).
So the linker is looking in the VS2010 libraries to find a function that didn't exist until later.
The maintainer of at least one of the pre-built OpenSSL libraries for Windows has recently switched from using an earlier version of Visual Studio, which may be the trigger for your problems.
One solution is to build your own OpenSSL Windows binaries with VS2010 (See http://developer.covenanteyes.com/building-openssl-for-visual-studio/ for example).
","1442","<c++><visual-studio-2010><openssl><sha>","0","1","1","2016-01-04 03:17:37","","0","","","","","2015-09-08 03:39:22",""
"8743504","How to calculate SHA in parallel?","Calculation of SHA variants is simple, you create a message digest, update it with data and get the result.
  But, if we have many cores, how to do that in parallel? You can not calculate it on blocks and hash the results, because the overall result will not be correct.
  How to do this calculation in parallel, getting the same result?
The following is sequential java example:
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

public class BenchmarkSha256 {

  public static void main(String... args) throws NoSuchAlgorithmException {
    int size = 1024 * 1024;
    byte[] bytes = new byte[size];
    MessageDigest md = MessageDigest.getInstance(""SHA-256"");
    long startTime = System.nanoTime();
    for (int i = 0; i < 1024; i++)
      md.update(bytes, 0, size);
    long endTime = System.nanoTime();
    System.out.println(String.format(""%1$064x"", new java.math.BigInteger(1, md.digest())));
    System.out.println(String.format(""%d ms"", (endTime - startTime) / 1000000));
  }

}

","To use multiple threads you need to be able to perform tasks in parallel. 
AFAIK, you can only calculate a message digest processing each block in turn.  As such you can only use one thread to calculate each digest value.  However, if you can produce multiple values or merge them, you can do it is parallel.
","1438","<java><multithreading><parallel-processing><hash><sha>","1","3","1","2012-01-05 13:46:23","8743569","5","3","","","","2012-01-05 13:41:21",""
"6961190","Update list item using SharePoint List item","I am trying to update SharePoint List Item using ""UpdateListItems"" method in Lists Web service.
CAML Query:
""<Method ID='1' Cmd='Update'>"" +
           ""<Field Name='ID'>"" + itemID + ""</Field>"" +
           ""<Field Name='Status'>"" + itemStatus + ""</Field></Method>""

itemID,itemStatus and passed from UI as parameters.
This gives following  error
<Result ID=""1,Update"">
<ErrorCode>0x80070005</ErrorCode>
<ErrorText>The operation failed because an unexpected error occurred. (Result Code: 0x80070005)
</ErrorText>
</Result>

Can any one help.
One more question is the update method works only based on ID or is there any possibility of passing Title also.
Thanks
","Try using one of this CAML tools:
http://msdn.microsoft.com/en-us/library/ff648040.aspx 
","1434","<sharepoint-2007><moss><sha>","0","0","2","2015-06-04 14:03:37","","0","","","","","2011-08-05 18:48:28",""
"6961190","Update list item using SharePoint List item","I am trying to update SharePoint List Item using ""UpdateListItems"" method in Lists Web service.
CAML Query:
""<Method ID='1' Cmd='Update'>"" +
           ""<Field Name='ID'>"" + itemID + ""</Field>"" +
           ""<Field Name='Status'>"" + itemStatus + ""</Field></Method>""

itemID,itemStatus and passed from UI as parameters.
This gives following  error
<Result ID=""1,Update"">
<ErrorCode>0x80070005</ErrorCode>
<ErrorText>The operation failed because an unexpected error occurred. (Result Code: 0x80070005)
</ErrorText>
</Result>

Can any one help.
One more question is the update method works only based on ID or is there any possibility of passing Title also.
Thanks
","You might not need at this moment, however this might be helpful for someone else facing the same issue.
Sometimes the reason for this error is the headers in the SOAP action. You need to set the following in order to make updates.:
beforeSend: function(xhr) { xhr.setRequestHeader(""SOAPAction"", ""http://schemas.microsoft.com/sharepoint/soap/UpdateListItems"");
I've created the following function to send updates at Sharepoint Lists:
function sendupdates(location,listName,command,fieldnames,fieldvalues){
      var updatesvar;
      for(x=0;x<fieldnames.length;x++){
      updatesvar =   updatesvar + '<Field Name=""'+fieldnames[x]+'"">'+fieldvalues[x]+'</Field>'
         }

      var batchvar = '<Batch OnError=""Continue"" ListVersion=""0""><Method ID=""1"" Cmd=""'+command+'"">'+updatesvar+'</Method></Batch>';

      var soapEnv =
                  '<?xml version=""1.0"" encoding=""utf-8""?>'+
                  '<soap:Envelope xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/"">'+
                  '<soap:Body>'+
                  '<UpdateListItems xmlns=""http://schemas.microsoft.com/sharepoint/soap/"">'+
                  '<listName>'+listName+'</listName>'+
                  '<updates>'+batchvar+'</updates>'+
                  '</UpdateListItems>'+
                  '</soap:Body>'+
                  '</soap:Envelope>';

           $.ajax({
                  url: location+""/_vti_bin/Lists.asmx"",
                  beforeSend: function(xhr) { xhr.setRequestHeader(""SOAPAction"", ""http://schemas.microsoft.com/sharepoint/soap/UpdateListItems"");},
                  type: ""POST"",
                  dataType: ""xml"",
                  data: soapEnv,
                  complete: complete,   
                  contentType: ""text/xml; charset=\""utf-8\""""
              });

  }

","1434","<sharepoint-2007><moss><sha>","0","1","2","2015-06-04 14:03:37","","0","","","","","2011-08-05 18:48:28",""
"11345826","MD5 or SHA-1 in pseudocode or java without libraries","I am looking for precise algorithm of MD5 or SHA-1. Everything what i found in google, wiki etc. is very confusing, not clear and not precise to me. Does anybody have implementation of that algorithm. I was looking for this in google for several hours yesterday and could find nothing. I know how to generate it using libraries(and I've done it many times).
","A simple googling:
SHA-1 and
MD5
","1421","<java><md5><pseudocode><sha>","0","1","1","2012-07-05 14:01:54","11345951","3","","","","","2012-07-05 13:54:42",""
"12303567","Cannot output correct hash in Java. What is wrong?","In my Android app I have a SHA256 hash which I must further hash with the RIPEMD160 message digest algorithm.
I can output the correct sha256 and ripemd160 hash of any string, but when I try to hash the sha256 hash with ripemd160 I get a hash which is incorrect.
According to online hash calculators, the SHA256 value of the string 'test'(all lowercase) is:
9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08

And the RIPEMD160 value of the string 'test' is:
5e52fee47e6b070565f74372468cdc699de89107

The value from hashing the resulting sha256 hash with ripemd160 according to online calcs is:
4efc1c36d3349189fb3486d2914f56e05d3e66f8

And the one my app gives me is:
cebaa98c19807134434d107b0d3e5692a516ea66

which is obviously wrong.
Here is my code:
public static String toRIPEMD160(String in)
{
    byte[] addr = in.getBytes();
    byte[] out = new byte[20];
    RIPEMD160Digest digest = new RIPEMD160Digest();
    byte[] sha256 = sha256(addr);
    digest.update(sha256,0,sha256.length);
    digest.doFinal(out,0);
    return getHexString(out);
}

public static byte[] sha256(byte[] data)
{
    byte[] sha256 = new byte[32];
    try
    {
        sha256 = MessageDigest.getInstance(""SHA-256"").digest(data);
    }
    catch(NoSuchAlgorithmException e)
    {}

    return sha256;
}

For the ripemd160 algorithm, you need bouncycastle and java.security.MessageDigest for sha256.
","Your ""online calculator"" result is the result of hashing the bytes of the string ""test"" with SHA-256, converting the result of that hash to a hex string, then taking the bytes corresponding to the ASCII characters of that hex string and hashing those a second time.  This is very different from your Java code, which passes the bytes that come out of the first hash directly to the second one, without printing them as hex and turning those characters back into bytes in between.  The single byte with value 254 (decimal) becomes ""fe"" in hex, which becomes the two-byte sequence [0x66, 0x65] when converted back to bytes.
","1414","<java><android><sha>","4","8","3","2016-10-11 17:03:10","12304200","0","4","438992","","2012-09-06 15:40:15","2012-09-06 15:34:38",""
"12303567","Cannot output correct hash in Java. What is wrong?","In my Android app I have a SHA256 hash which I must further hash with the RIPEMD160 message digest algorithm.
I can output the correct sha256 and ripemd160 hash of any string, but when I try to hash the sha256 hash with ripemd160 I get a hash which is incorrect.
According to online hash calculators, the SHA256 value of the string 'test'(all lowercase) is:
9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08

And the RIPEMD160 value of the string 'test' is:
5e52fee47e6b070565f74372468cdc699de89107

The value from hashing the resulting sha256 hash with ripemd160 according to online calcs is:
4efc1c36d3349189fb3486d2914f56e05d3e66f8

And the one my app gives me is:
cebaa98c19807134434d107b0d3e5692a516ea66

which is obviously wrong.
Here is my code:
public static String toRIPEMD160(String in)
{
    byte[] addr = in.getBytes();
    byte[] out = new byte[20];
    RIPEMD160Digest digest = new RIPEMD160Digest();
    byte[] sha256 = sha256(addr);
    digest.update(sha256,0,sha256.length);
    digest.doFinal(out,0);
    return getHexString(out);
}

public static byte[] sha256(byte[] data)
{
    byte[] sha256 = new byte[32];
    try
    {
        sha256 = MessageDigest.getInstance(""SHA-256"").digest(data);
    }
    catch(NoSuchAlgorithmException e)
    {}

    return sha256;
}

For the ripemd160 algorithm, you need bouncycastle and java.security.MessageDigest for sha256.
","To get printable version of byte[] digest use this code:
StringBuffer hexString = new StringBuffer();
for (int i=0;i<out.length;i++) {
    hexString.append( String.format(""%02x"", 0xFF & out[i]) );
}

and then call hexString.toString();
","1414","<java><android><sha>","4","1","3","2016-10-11 17:03:10","12304200","0","4","438992","","2012-09-06 15:40:15","2012-09-06 15:34:38",""
"12303567","Cannot output correct hash in Java. What is wrong?","In my Android app I have a SHA256 hash which I must further hash with the RIPEMD160 message digest algorithm.
I can output the correct sha256 and ripemd160 hash of any string, but when I try to hash the sha256 hash with ripemd160 I get a hash which is incorrect.
According to online hash calculators, the SHA256 value of the string 'test'(all lowercase) is:
9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08

And the RIPEMD160 value of the string 'test' is:
5e52fee47e6b070565f74372468cdc699de89107

The value from hashing the resulting sha256 hash with ripemd160 according to online calcs is:
4efc1c36d3349189fb3486d2914f56e05d3e66f8

And the one my app gives me is:
cebaa98c19807134434d107b0d3e5692a516ea66

which is obviously wrong.
Here is my code:
public static String toRIPEMD160(String in)
{
    byte[] addr = in.getBytes();
    byte[] out = new byte[20];
    RIPEMD160Digest digest = new RIPEMD160Digest();
    byte[] sha256 = sha256(addr);
    digest.update(sha256,0,sha256.length);
    digest.doFinal(out,0);
    return getHexString(out);
}

public static byte[] sha256(byte[] data)
{
    byte[] sha256 = new byte[32];
    try
    {
        sha256 = MessageDigest.getInstance(""SHA-256"").digest(data);
    }
    catch(NoSuchAlgorithmException e)
    {}

    return sha256;
}

For the ripemd160 algorithm, you need bouncycastle and java.security.MessageDigest for sha256.
","Your hash is working fine. The problem is that the online calculators that you're using are treating your input:
9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08

as a string instead of an array of bytes. In other words, it's treating each character as a byte instead of parsing character pairs as bytes in hexadecimal. If I give this as a string to online calculators, I indeed get exactly what you got:
4efc1c36d3349189fb3486d2914f56e05d3e66f8

However, you're treating the output as an array of bytes instead of a String and that's giving you different results. You should encode your raw SHA256 hash as a string, then pass the encoded string to the hash function. I see you have a getHexString method, so we'll just use that.
public static String toRIPEMD160(String in) {
    try {
        byte[] addr = in.getBytes();
        byte[] out = new byte[20];
        RIPEMD160Digest digest = new RIPEMD160Digest();

        // These are the lines that changed
        byte[] rawSha256 = sha256(addr);
        String encodedSha256 = getHexString(rawSha256);
        byte[] strBytes = encodedSha256.getBytes(""UTF-8"");
        digest.update(strBytes, 0, strBytes.length);

        digest.doFinal(out, 0);
        return getHexString(out);
    } catch (UnsupportedEncodingException ex) {
        // Never happens, everything supports UTF-8
        return null;
    }
}

If you want to know it's working, take the value of encodedSha256 and put that into an online hash calculator. As long as the calculator uses UTF-8 encoding to turn the string into a byte array, it will match your output.
","1414","<java><android><sha>","4","4","3","2016-10-11 17:03:10","12304200","0","4","438992","","2012-09-06 15:40:15","2012-09-06 15:34:38",""
"32991501","How to verify ecdsa-with-SHA256 signature with PHP?","I have encountered the following issue while developing a secure system:
We receive some data which we have to verify by signature. The signature algorithm is ecdsa-with-SHA256, and openssl_verify() doesn't seem to have an option for that. Already tried searching for standalone PHP libraries like phpseclib - no luck either, ecdsa-with-SHA1 is the best option they seem to offer.
What would be an appropriate solution for that issue? Maybe I've missed some library that implements such functionality?
","PHP's openssl_ currently supports ECDSA only with SHA1 digest (reefer to openssl_get_md_methods() output, position [14]). You'll need a workaround for this. From comments of this question (closed as off topic, by the way), but it was focused on bitcoin implementations.
","1407","<php><sha><ecdsa>","2","2","1","2015-10-07 12:39:15","32992458","0","1","","","","2015-10-07 11:52:08",""
"15820699","What is the best cryptographic hash function that generates 16-bit hashes values in openssl?","I was thinking of just using SHA256 and then using only the first two bytes of the result. Is there anything wrong with this approach?
NOTE: The concern here is not malicious attacks, but to ensure the best possible protection against random bit flips.
","Any hash that satisfies the strict avalanche criterion (that is, if any bit is flipped in the input, every bit in the output will be flipped with a probability of 50%) may be used in this way, and that includes every cryptographic hash in common use, including SHA512. There are security implications to using very short hashes, but if they really aren't relevant, as you claim, you're free to select the fastest hash available (probably MD5).
Since short hashes will be particularly vulnerable to the birthday paradox, though, consider using longer hashes anyway. If you're generating so many hashes that 16 bits versus 256 bits is significant, you will run into duplicates even without malicious attackers.
","1405","<c><openssl><sha><sha256><cryptographic-hash-function>","2","2","1","2013-04-04 20:40:23","15821277","11","2","810671","","2013-04-04 20:19:30","2013-04-04 20:05:24",""
"11040106","Hashing image bytes with SHA-256 yields many random collisions, what am I doing wrong?","I'm using the SHA-256 algorithm to detect identical images in a database. Because we use a lot of different image formats I don't want to compute the hash directly on the file. Instead I want to extract the pixel data and compute the hash on that. 
Unfortunately I'm getting a lot of random collisions: 68 images which do not have identical bytes using the same pixel extraction (below) out of 6000 images hash to the same value. I feel like this is an insane number of collisions. Additionally I dumped the bytes I compute from the pixel data to a file, then tried:
echo -n [byteDumpFile] | sha256sum
which resulted in different hash values for the dumped images, which leads me to believe I'm doing something wrong when I use MessageDigest. 
Here is how I get the pixel data:
    imageBytes = new byte[4 * width * height];
    for (int y = 0; y < height; y++)
    {
        for (int x = 0; x < width; x++)
        {

            // grab color information
            int argb = image.getRGB(x, y);

            // a,r,g,b ordered bytes per this pixel. the values are always 0-255 so the byte cast is safe
            int offset = y * width;
            int pushX = x * 4;
            imageBytes[pushX + offset] = (byte) ((argb >> 24) & 0xff);
            imageBytes[pushX + 1 + offset] = (byte) ((argb >> 16) & 0xff);
            imageBytes[pushX + 2 + offset] = (byte) ((argb >> 8) & 0xff);
            imageBytes[pushX + 3 + offset] = (byte) (argb & 0xff);

        }
    }

Then I compute the hash using the MessageDigest class:
    MessageDigest digest = MessageDigest.getInstance(""SHA-256"");
    digest.reset();


    for (int i = 0; i < imageBytes.length; i++)
    {
        digest.update(imageBytes[i]);
    }

    String hashString = new String(encodeHex(digest.digest()));

where encodeHex is just:
   private static String encodeHex(byte data[])
    {
        StringBuilder hex = new StringBuilder(2 * data.length);
        for (byte b : data)
        {
            hex.append(HEXES.charAt((b & 0xF0) >> 4)).append(HEXES.charAt((b & 0x0F)));
        }

    return hex.toString();
}

","try 
digest.update(imageBytes);

","1394","<java><bufferedimage><sha><hash-collision><message-digest>","4","1","3","2015-11-13 21:56:56","11040349","0","6","","","","2012-06-14 19:33:18",""
"11040106","Hashing image bytes with SHA-256 yields many random collisions, what am I doing wrong?","I'm using the SHA-256 algorithm to detect identical images in a database. Because we use a lot of different image formats I don't want to compute the hash directly on the file. Instead I want to extract the pixel data and compute the hash on that. 
Unfortunately I'm getting a lot of random collisions: 68 images which do not have identical bytes using the same pixel extraction (below) out of 6000 images hash to the same value. I feel like this is an insane number of collisions. Additionally I dumped the bytes I compute from the pixel data to a file, then tried:
echo -n [byteDumpFile] | sha256sum
which resulted in different hash values for the dumped images, which leads me to believe I'm doing something wrong when I use MessageDigest. 
Here is how I get the pixel data:
    imageBytes = new byte[4 * width * height];
    for (int y = 0; y < height; y++)
    {
        for (int x = 0; x < width; x++)
        {

            // grab color information
            int argb = image.getRGB(x, y);

            // a,r,g,b ordered bytes per this pixel. the values are always 0-255 so the byte cast is safe
            int offset = y * width;
            int pushX = x * 4;
            imageBytes[pushX + offset] = (byte) ((argb >> 24) & 0xff);
            imageBytes[pushX + 1 + offset] = (byte) ((argb >> 16) & 0xff);
            imageBytes[pushX + 2 + offset] = (byte) ((argb >> 8) & 0xff);
            imageBytes[pushX + 3 + offset] = (byte) (argb & 0xff);

        }
    }

Then I compute the hash using the MessageDigest class:
    MessageDigest digest = MessageDigest.getInstance(""SHA-256"");
    digest.reset();


    for (int i = 0; i < imageBytes.length; i++)
    {
        digest.update(imageBytes[i]);
    }

    String hashString = new String(encodeHex(digest.digest()));

where encodeHex is just:
   private static String encodeHex(byte data[])
    {
        StringBuilder hex = new StringBuilder(2 * data.length);
        for (byte b : data)
        {
            hex.append(HEXES.charAt((b & 0xF0) >> 4)).append(HEXES.charAt((b & 0x0F)));
        }

    return hex.toString();
}

","I think offset is being calculated wrong.  It should be:
int offset = y * width * 4;

A better way to create the imageBytes might be a ByteBuffer; it allows you to simply put each byte sequentially without calculating the index.  In addition, it can be used directly with MessageDigest.
","1394","<java><bufferedimage><sha><hash-collision><message-digest>","4","2","3","2015-11-13 21:56:56","11040349","0","6","","","","2012-06-14 19:33:18",""
"11040106","Hashing image bytes with SHA-256 yields many random collisions, what am I doing wrong?","I'm using the SHA-256 algorithm to detect identical images in a database. Because we use a lot of different image formats I don't want to compute the hash directly on the file. Instead I want to extract the pixel data and compute the hash on that. 
Unfortunately I'm getting a lot of random collisions: 68 images which do not have identical bytes using the same pixel extraction (below) out of 6000 images hash to the same value. I feel like this is an insane number of collisions. Additionally I dumped the bytes I compute from the pixel data to a file, then tried:
echo -n [byteDumpFile] | sha256sum
which resulted in different hash values for the dumped images, which leads me to believe I'm doing something wrong when I use MessageDigest. 
Here is how I get the pixel data:
    imageBytes = new byte[4 * width * height];
    for (int y = 0; y < height; y++)
    {
        for (int x = 0; x < width; x++)
        {

            // grab color information
            int argb = image.getRGB(x, y);

            // a,r,g,b ordered bytes per this pixel. the values are always 0-255 so the byte cast is safe
            int offset = y * width;
            int pushX = x * 4;
            imageBytes[pushX + offset] = (byte) ((argb >> 24) & 0xff);
            imageBytes[pushX + 1 + offset] = (byte) ((argb >> 16) & 0xff);
            imageBytes[pushX + 2 + offset] = (byte) ((argb >> 8) & 0xff);
            imageBytes[pushX + 3 + offset] = (byte) (argb & 0xff);

        }
    }

Then I compute the hash using the MessageDigest class:
    MessageDigest digest = MessageDigest.getInstance(""SHA-256"");
    digest.reset();


    for (int i = 0; i < imageBytes.length; i++)
    {
        digest.update(imageBytes[i]);
    }

    String hashString = new String(encodeHex(digest.digest()));

where encodeHex is just:
   private static String encodeHex(byte data[])
    {
        StringBuilder hex = new StringBuilder(2 * data.length);
        for (byte b : data)
        {
            hex.append(HEXES.charAt((b & 0xF0) >> 4)).append(HEXES.charAt((b & 0x0F)));
        }

    return hex.toString();
}

","I came up with this. Based on the comments from above:
private String calculateHash(BufferedImage img) throws NoSuchAlgorithmException {
    final int width = img.getWidth();
    final int height = img.getHeight();
    final ByteBuffer byteBuffer = ByteBuffer.allocate(4 * width * height);
    for (int y = 0; y < height; y++)
    {
        for (int x = 0; x < width; x++)
        {
            // grab color information
            int argb = img.getRGB(x, y);

            // a,r,g,b ordered bytes per this pixel. the values are always 0-255 so the byte cast is safe
            byteBuffer.put((byte) ((argb >> 24) & 0xff));
            byteBuffer.put((byte) ((argb >> 16) & 0xff));
            byteBuffer.put((byte) ((argb >> 8) & 0xff));
            byteBuffer.put((byte) (argb & 0xff));
        }
    }


    MessageDigest digest = MessageDigest.getInstance(""SHA-256"");
    digest.reset();

    byte[] hashBytes = digest.digest(byteBuffer.array());
    return Base64Utils.encodeToString(hashBytes);
}

","1394","<java><bufferedimage><sha><hash-collision><message-digest>","4","0","3","2015-11-13 21:56:56","11040349","0","6","","","","2012-06-14 19:33:18",""
"12924185","Java's SHA-256 sometimes returns 255 bits","I'm encountering some weird behavior when I use Java's MessageDigest to compute the  SHA-256 hash of a BigInteger. It appears that sometimes the hash value has 256 bits, but sometimes it has only 255 bits. This is the code that I'm using to test BigInteger hashing:
@Test
public void testSHA256LengthConsistent() {
    MessageDigest sha256 = null;
    try {
        sha256 = MessageDigest.getInstance(""SHA-256"");
    } catch (NoSuchAlgorithmException e) {
        Assert.fail(""NoSuchAlgorithmException. Can't construct the MessageDigest."");
    }
    BigInteger[] tests = {new BigInteger(""15902493""), new BigInteger(""5189087324092341824""), new BigInteger(""7153293421609183203421127438153268"")};
    for(BigInteger testNum : tests) {
        byte[] hash = sha256.digest(testNum.toByteArray());
        Assert.assertEquals(32, hash.length); //256 bits is 32 bytes
        BigInteger hashedInt = new BigInteger(1, hash);
        Assert.assertEquals(256, hashedInt.bitLength());
    }
}

(Yes, I'm using JUnit 4). This test fails on the third test number, where the second assert fails with ""Expected 256 but was 255.""
Is there something wrong with the way I'm converting BigIntegers to and from byte arrays? All of the examples I can find for Java's MessageDigest use it to hash Strings, not BigIntegers, so I don't know if there's a ""standard"" way to use BigIntegers with MessageDigest. Alternatively, is this a bug or edge case in the way Java does SHA-256, and there's something with 7153293421609183203421127438153268 (a number I generated randomly) that results in an off-by-one error in the hash?
By the way, I've already tried converting the hash to a negative BigInteger (using new BigInteger(-1, hash)) to see if it was a problem with the sign bit, but I get the exact same result. 
","Leading zeros are ignored
byte[] bytes = {0x0, 0x1};
System.out.println(new BigInteger(1, bytes).bitLength());

prints
1

not 16 as you appear to expect.

I should have read the Javadoc because it states in BigInteger.bitLength()

number of bits in the minimal two's-complement representation of this BigInteger, excluding a sign bit.

","1373","<java><hash><biginteger><sha>","1","7","2","2017-09-22 20:58:09","12924258","3","3","","","","2012-10-16 22:05:39",""
"12924185","Java's SHA-256 sometimes returns 255 bits","I'm encountering some weird behavior when I use Java's MessageDigest to compute the  SHA-256 hash of a BigInteger. It appears that sometimes the hash value has 256 bits, but sometimes it has only 255 bits. This is the code that I'm using to test BigInteger hashing:
@Test
public void testSHA256LengthConsistent() {
    MessageDigest sha256 = null;
    try {
        sha256 = MessageDigest.getInstance(""SHA-256"");
    } catch (NoSuchAlgorithmException e) {
        Assert.fail(""NoSuchAlgorithmException. Can't construct the MessageDigest."");
    }
    BigInteger[] tests = {new BigInteger(""15902493""), new BigInteger(""5189087324092341824""), new BigInteger(""7153293421609183203421127438153268"")};
    for(BigInteger testNum : tests) {
        byte[] hash = sha256.digest(testNum.toByteArray());
        Assert.assertEquals(32, hash.length); //256 bits is 32 bytes
        BigInteger hashedInt = new BigInteger(1, hash);
        Assert.assertEquals(256, hashedInt.bitLength());
    }
}

(Yes, I'm using JUnit 4). This test fails on the third test number, where the second assert fails with ""Expected 256 but was 255.""
Is there something wrong with the way I'm converting BigIntegers to and from byte arrays? All of the examples I can find for Java's MessageDigest use it to hash Strings, not BigIntegers, so I don't know if there's a ""standard"" way to use BigIntegers with MessageDigest. Alternatively, is this a bug or edge case in the way Java does SHA-256, and there's something with 7153293421609183203421127438153268 (a number I generated randomly) that results in an off-by-one error in the hash?
By the way, I've already tried converting the hash to a negative BigInteger (using new BigInteger(-1, hash)) to see if it was a problem with the sign bit, but I get the exact same result. 
","If you were to run a sufficient number of random tests, you would have seen that about half the results are 256 bits long, a quarter 255 bits long, one in eight 254 bits long etc. The reason is that each of the bits of the hash is effectively random, so there is a 50% probability that the high order bit (or, to be precise, any other specific bit you care to look at) is 1 and 50% that it is 0, and 25% probability that the two high order bits (or any other two specific bits you care to look at) are 00 (or any other value you care to test for) and so on.
 public static void main(final String[] args) throws Exception {
    final Random random = new Random();
    final int[] bits = new int[257];
    for (int i = 0; i < 10000; i++) {
        final MessageDigest sha256 = MessageDigest.getInstance(""SHA-256"");
        final BigInteger testNum = new BigInteger(100, random);
        final byte[] hash = sha256.digest(testNum.toByteArray());
        final BigInteger hashedInt = new BigInteger(1, hash);
        bits[hashedInt.bitLength()]++;
    }

    for (int i = 0; i < bits.length; i++) {
        if (bits[i] > 0) {
            System.out.println(i + "" / "" + bits[i]);
        }
    }        
}

produced:
Bits: 244 Count: 2 0.02%
Bits: 245 Count: 3 0.03%
Bits: 246 Count: 4 0.04%
Bits: 247 Count: 7 0.07%
Bits: 248 Count: 20 0.2%
Bits: 249 Count: 33 0.33%
Bits: 250 Count: 70 0.7%
Bits: 251 Count: 168 1.68%
Bits: 252 Count: 296 2.96%
Bits: 253 Count: 657 6.57%
Bits: 254 Count: 1238 12.38%
Bits: 255 Count: 2510 25.1%
Bits: 256 Count: 4992 49.92%
","1373","<java><hash><biginteger><sha>","1","0","2","2017-09-22 20:58:09","12924258","3","3","","","","2012-10-16 22:05:39",""
"5687766","SHA256 security question","Having that the result for some string STR was:
SHA256(STR)=3f7c54571faee024e3fd68603c5c95f6a4c8ef73a398840b974f3f57737a116f 

Would it be possible to get the result of SHA256(myOwnString+STR)? ('+' is used as concatenation)
Are there any known attacks for this scenario?
","myOwnString+STR would be a totally different string than STR -- so, those two would have totally different hashes ; and looking at those hashed, you'd have no way of guessing they result of your hashing function being applied to STR and something based on STR.
That's precisely why we generally recommend using a salt when hashing passwords -- see Salt (cryptography), about that.
","1371","<security><math><sha256><sha>","4","3","2","2011-04-16 18:03:51","5687819","2","1","635608","","2011-04-16 16:13:22","2011-04-16 16:09:24",""
"5687766","SHA256 security question","Having that the result for some string STR was:
SHA256(STR)=3f7c54571faee024e3fd68603c5c95f6a4c8ef73a398840b974f3f57737a116f 

Would it be possible to get the result of SHA256(myOwnString+STR)? ('+' is used as concatenation)
Are there any known attacks for this scenario?
","What you're describing is evaluating hash function's 'avalanche property';  if you change the input just a little bit, how much does the output change?  Any decent hashing function should be able to completely mangle the result drastically even if the input changes just one bit.  This is why things like salts and nonces work well, because adding few bytes to the initial string (which by itself might be weak, short or predictable, like passwords), changes the result of the hash to something completely different and unrelated to the original.
to answer your question more directly tho:  

A 2008 attack breaks preimage
  resistance for 46 out of 80 rounds of
  SHA-512, and 41 out of 64 rounds of
  SHA-256.[1] Collision attacks against
  up to 24 steps of SHA-256

and

There are two meet-in-the-middle preimage attacks against SHA-2 with a reduced number of rounds. The first one attacks 41-round SHA-256 out of 64 rounds with time complexity of 2253.5 and space complexity of 216, and 46-round SHA-512 out of 80 rounds with time 2511.5 and space 23. The second one attacks 42-round SHA-256 with time complexity of 2251.7 and space complexity of 212, and 42-round SHA-512 with time 2502 and space 222.

So yes, it's weakened, but it's nowhere near useless yet.  And I haven't found any attacks specific to dealing with input length extension.
","1371","<security><math><sha256><sha>","4","2","2","2011-04-16 18:03:51","5687819","2","1","635608","","2011-04-16 16:13:22","2011-04-16 16:09:24",""
"1061171","SHA-1 Hashes Mixed with Strings","I have to parse something like the following ""some text <40 byte hash>"" can i read this whole thing in to a string without corrupting 40 byte hash part?
The thing is hash is not going to be there so i don't want to process it while reading.
EDIT: I forgot to mention that the 40 byte hash is 2x20 byte hashes no encoding raw bytes.
","SHA-1 hashes are 20 bytes (160 bits) in length. If you are dealing with 40 character hashes, then they are probably an ASCII representation of the hash, and therefore only contain the characters 0-9 and a-f. If this is the case, then you should be able to read and manipulate the strings in Java without any trouble.
","1369","<java><hash><byte><sha>","1","0","5","2013-03-06 09:08:31","","1","0","1403020","","2013-03-06 09:08:31","2009-06-30 00:03:26",""
"1061171","SHA-1 Hashes Mixed with Strings","I have to parse something like the following ""some text <40 byte hash>"" can i read this whole thing in to a string without corrupting 40 byte hash part?
The thing is hash is not going to be there so i don't want to process it while reading.
EDIT: I forgot to mention that the 40 byte hash is 2x20 byte hashes no encoding raw bytes.
","Some more details could be useful, but I think the answer is that you should be okay.
You didn't say how the SHA-1 hash was encoded (common possibilities include ""none"" (the raw bytes), Base64 and hex). Since SHA-1 produces a 20 byte (160 bit) hash, I am guessing that it will be encoded using hex, since that doubles the space needed to the 40 bytes you mentioned. With that encoding, 2 characters will be used to encode each byte from the hash, using the symbols 0 through 9 and A through F. Those are all ASCII characters so you are safe.
Base64 encoding would also work (though probably not what you asked about since it increases the size by about 1/3 leaving you at well less than 40 bytes) as each of the characters used in Base64 are also ASCII.
If the raw bytes were used directly, you would have a problem, as some of the values are not valid characters.
","1369","<java><hash><byte><sha>","1","0","5","2013-03-06 09:08:31","","1","0","1403020","","2013-03-06 09:08:31","2009-06-30 00:03:26",""
"1061171","SHA-1 Hashes Mixed with Strings","I have to parse something like the following ""some text <40 byte hash>"" can i read this whole thing in to a string without corrupting 40 byte hash part?
The thing is hash is not going to be there so i don't want to process it while reading.
EDIT: I forgot to mention that the 40 byte hash is 2x20 byte hashes no encoding raw bytes.
","OK, now that you've clarified that these are raw bytes
No, you cannot read this into Java as a string, you will need to read it as raw bytes.
","1369","<java><hash><byte><sha>","1","0","5","2013-03-06 09:08:31","","1","0","1403020","","2013-03-06 09:08:31","2009-06-30 00:03:26",""
"1061171","SHA-1 Hashes Mixed with Strings","I have to parse something like the following ""some text <40 byte hash>"" can i read this whole thing in to a string without corrupting 40 byte hash part?
The thing is hash is not going to be there so i don't want to process it while reading.
EDIT: I forgot to mention that the 40 byte hash is 2x20 byte hashes no encoding raw bytes.
","WORKING CODE:
Converts byte string inputs into hex characters which should be safe in almost all string encodings. Use the code I posted in your other question to decode the hex chars back to raw bytes.
/** Lookup table: character for a half-byte */
    static final char[] CHAR_FOR_BYTE = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
    /** Encode byte data as a hex string... hex chars are UPPERCASE */
    public static String encode(byte[] data){
        if(data == null || data.length==0){
            return null;
        }
        char[] store = new char[data.length*2];
        for(int i=0; i<data.length; i++){
            final int val = (data[i]&0xFF);
            final int charLoc=i<<1;
            store[charLoc]=CHAR_FOR_BYTE[val>>>4];
            store[charLoc+1]=CHAR_FOR_BYTE[val&0x0F];
        }
        return new String(store);
    }

","1369","<java><hash><byte><sha>","1","0","5","2013-03-06 09:08:31","","1","0","1403020","","2013-03-06 09:08:31","2009-06-30 00:03:26",""
"1061171","SHA-1 Hashes Mixed with Strings","I have to parse something like the following ""some text <40 byte hash>"" can i read this whole thing in to a string without corrupting 40 byte hash part?
The thing is hash is not going to be there so i don't want to process it while reading.
EDIT: I forgot to mention that the 40 byte hash is 2x20 byte hashes no encoding raw bytes.
","Read it from your input stream as a byte stream, and then strip the String out of the stream like this: 
String s = new String(Arrays.copyOfRange(bytes, 0, bytes.length-40));

Then get your bytes as:
byte[] hash = Arrays.copyOfRange(bytes, s.length-1, bytes.length-1)

","1369","<java><hash><byte><sha>","1","1","5","2013-03-06 09:08:31","","1","0","1403020","","2013-03-06 09:08:31","2009-06-30 00:03:26",""
"24742676","How to make ldappasswd use {SHA} instead of {SSHA} for users passwords in openldap?","Is it possible to use {SHA} with ldappasswd? I didn't find responsible option in manual page and docs
","Look for password-hash in slapd.conf(5), or for olcPasswordHash in slapd-config(5).
","1368","<passwords><openldap><sha>","1","1","2","2016-09-09 09:59:53","24764656","0","","","","","2014-07-14 17:52:36",""
"24742676","How to make ldappasswd use {SHA} instead of {SSHA} for users passwords in openldap?","Is it possible to use {SHA} with ldappasswd? I didn't find responsible option in manual page and docs
","I know that's an old post but I found another solution for this problem.
This wolution works for ApacheDirectory servers (for org.apache implementation classes, but I think you can find interceptors for each openldap).
If you want use SHA encrypting by default when using ldappasswd you can change the interceptor implementation of password.
You have to modify following dn entry:

ads-interceptorId=passwordHashingInterceptor,ou=interceptors,ads-directoryServiceId=default,ou=config

And change the value:
ads-interceptorclassname: arg.apache.directory.server.core.hash.ShaPasswordHashingInterceptor
By default, openldap is using:

ads-interceptorclassname: org.apache.directory.server.core.hash.SshaPasswordHashingInterceptor

Command to modify:

ldapmodify -h <LDAP_HOST> -p <LDAP_PORT> -D ""<ADMIN_DN>"" -w ""<ADMIN_PASSWORD>"" <<EOF
dn: ads-interceptorId=passwordHashingInterceptor,ou=interceptors,ads-directoryServiceId=default,ou=config
changetype: modify
replace: ads-interceptorclassname
ads-interceptorclassname: org.apache.directory.server.core.hash.ShaPasswordHashingInterceptor
EOF

Then you have to restart your LDAP server. All new passwords added by ldappasswd will be in SHA and not in SSHA.
Note:
You can use another interceptor provided by Apache:
http://directory.apache.org/apacheds/advanced-ug/1.4-interceptors.html#existing-interceptors
Javadoc:
https://directory.apache.org/apacheds/gen-docs/2.0.0-M20/apidocs/org/apache/directory/server/core/hash/package-tree.html
","1368","<passwords><openldap><sha>","1","0","2","2016-09-09 09:59:53","24764656","0","","","","","2014-07-14 17:52:36",""
"12640858","Delphi DCrypt - How to isolate SHA256?","I'm writing my own component in Delphi XE2 but I primary use C++ Builder. That is why I need some help regarding Delphi DCrypt library.
My new component needs to have a method (function) that calculates sha256 hash value of a string. I know for DCrypt library and I use it for some time but this time I need to isolate SHA256 hash algorithm and add it in my new component. 
DCrypt has stored SHA256 in DCPsha256.pas but since I'm not so skilled in Delphi I don't know what to do. I don't need to install TDCP_sha256, I just need to be able to calculate SHA256 inside my new component.
Ideas? Thanks.
","
one: do not do. It better to distribute DCrypt library with ur component and allow user to update it to more recent versions.
If sha256 would turn buggy, or incompatible with newer Delphi version - what would you do ? If u use DCrypt, then you just download new version of it. If you isolated it - then u have to fix it yourself. Do you have enough skils in both Delphi and crypto mathematics, to always doo all fixes of sha256 code and new Delphi versions in future ?
But if you insist - then launch to Delphi side by side. In one open DCrypt sources, in another open new empty unit. Copy sha256-generating procedure from DCrypt to empty unit and try to compile. Delphi would tell you of unknown identificators. Look into Dcrypt Delphi and find the declarations of them. If they are from DCpypt too - then copy them again into the new unit. If they are from RTL/VCL - add the unit into USES of your new unit. And try to compile again. Repeat this until all the identifiers are either resolved by USES or copied from DCrypt into your file.
After it compiles - take some file and calculate hashes by DCrypt and by you new library - if they are different, that means you had borken something and have to find and fix it (you have enought crypto math experience, don't you).

I made Win64 asm optimizations for Spring4D sha code and all that code was covered by unit tests, so i always new if my optimizations broke things or not. Without those total testign policy i'd not be able to do it.
I strongly advice you to stick with DCrypt or Lockbox3 or Spring4D or any other strong living library and not isolate yourself. Keep together with community and you can use their labor for yourself. Isolate - and you would have to re-do it each time new bug or incompatibility would face up.
You cannot extract code from library - why do you think you would be able to upgrade that code to XE4/5/6... and prove it was not broken ?
","1364","<delphi><hash><components><vcl><sha>","1","4","2","2012-09-28 18:16:03","12645267","0","2","976391","","2012-09-28 13:50:02","2012-09-28 13:21:20",""
"12640858","Delphi DCrypt - How to isolate SHA256?","I'm writing my own component in Delphi XE2 but I primary use C++ Builder. That is why I need some help regarding Delphi DCrypt library.
My new component needs to have a method (function) that calculates sha256 hash value of a string. I know for DCrypt library and I use it for some time but this time I need to isolate SHA256 hash algorithm and add it in my new component. 
DCrypt has stored SHA256 in DCPsha256.pas but since I'm not so skilled in Delphi I don't know what to do. I don't need to install TDCP_sha256, I just need to be able to calculate SHA256 inside my new component.
Ideas? Thanks.
","Create the objects manually.  Use the existing units and do not modify DCPCrypt.
How to create an object:
var
  x:TDCP_sha256;

begin
  x := TDCP_sha256.Create(nil);
  try 
     // do stuff, create hash, whatever.
  finally
    x.Free;
  end;
end;

You do not need to install any packages in order to provide access to the classes that you want to use, unless you wanted to drop them onto a form or data module. If you write code like the above code, you don't need to modify anything.
","1364","<delphi><hash><components><vcl><sha>","1","4","2","2012-09-28 18:16:03","12645267","0","2","976391","","2012-09-28 13:50:02","2012-09-28 13:21:20",""
"3438197","Hashing no longer works in .Net 4.0 despite MSDN workarounds","I have an existing app in production that uses SqlMembershipProvider and has a specified machine key:
<machineKey validationKey=""..."" decryptionKey=""..."" 
            validation=""SHA1"" decryption=""AES""/>

It runs under .Net 2.0 AppPool currently.
I'm writing a new application that has to use the existing database, which I have a backup of. I'm trying to get SqlMembershipProvider working with it (which it does) but I can't get a known username/password working. This account works in prod, and the password hash and salt are the same on both databases (prod and mine). However at the point where the SqlMembershipProvider compares the password from the database with the hashed password entered, they aren't the same. 
This article suggests breaking changes with the default hashing algorithm in ASP.Net in .Net 4.0:
http://www.asp.net/learn/whitepapers/aspnet4/breaking-changes
However I am already specifying a machine key as suggested. Further, I've stripped out the .Net 4.0 components and dropped it back to 3.5 (which is CLR 2) and the hash of the entered password is still the same. 
Furthermore, I tried redeploying this new temporary app to the same server production is on, and it still fails to login (although I can't verify if it fails due to password hash mismatch). 
What else can I try here?  
","First copy the production app to dev/test and run it there to see if it works as expected.
If it does, proceed to upgrade the project to run under .NET 4.0, but do not modify any other code (ie. don't try to make it work with SQLMembershipProvider) - retest the application
If that works, you know it's not an environment issue, and it's not a .NET breaking change issue, which would point to something in your code not working as you expect it should work.  My guess is that the hashing algorithm you're using in the new application is different from the one being used in the old application.  Were you salting the password in the old application?  Are you using the same salt in the new application?  
","1356","<asp.net><hash><sqlmembershipprovider><sha><machinekey>","3","0","2","2011-02-01 19:33:30","","0","","","","","2010-08-09 07:47:04",""
"3438197","Hashing no longer works in .Net 4.0 despite MSDN workarounds","I have an existing app in production that uses SqlMembershipProvider and has a specified machine key:
<machineKey validationKey=""..."" decryptionKey=""..."" 
            validation=""SHA1"" decryption=""AES""/>

It runs under .Net 2.0 AppPool currently.
I'm writing a new application that has to use the existing database, which I have a backup of. I'm trying to get SqlMembershipProvider working with it (which it does) but I can't get a known username/password working. This account works in prod, and the password hash and salt are the same on both databases (prod and mine). However at the point where the SqlMembershipProvider compares the password from the database with the hashed password entered, they aren't the same. 
This article suggests breaking changes with the default hashing algorithm in ASP.Net in .Net 4.0:
http://www.asp.net/learn/whitepapers/aspnet4/breaking-changes
However I am already specifying a machine key as suggested. Further, I've stripped out the .Net 4.0 components and dropped it back to 3.5 (which is CLR 2) and the hash of the entered password is still the same. 
Furthermore, I tried redeploying this new temporary app to the same server production is on, and it still fails to login (although I can't verify if it fails due to password hash mismatch). 
What else can I try here?  
","You need to specify the hashAlgorithmType of the membership provider in the web.config as the default has changed with .net 4.
The value that you want is most likely SHA1.
Please see the following page for more details: http://geekswithblogs.net/DavidHoerster/archive/2010/06/15/asp.net-membership-password-hash----.net-3.5-to-.net-4.aspx
","1356","<asp.net><hash><sqlmembershipprovider><sha><machinekey>","3","2","2","2011-02-01 19:33:30","","0","","","","","2010-08-09 07:47:04",""
"8115710","Grails 2.0: Invalid SHA1","Often I get and invalid SHA1 error when executing run-app in Grails 2.0.0.RC1, especially with depedencies to our pwn products/modules.
I have found the following Jira case:
http://jira.grails.org/browse/GRAILS-7313
Unfortunately the following line in BuildConfig.groovy
ivySettings.setVariable(""ivy.checksums"", """")

results in the error:
| Error There was an error loading the BuildConfig: No signature of method: groovy.util.ConfigObject.setVariable() is applicable for argument types: 
(java.lang.String, java.lang.String) values: [ivy.checksums, ] (Use --stacktrace to see the full trace)

Regards
Jonas
","Bobby Warner's comment suggests the new way to disable checksums is:
grails.project.dependency.resolution = {
    checksums false
}

","1353","<grails><ivy><sha><grails-2.0><buildconfig>","2","3","2","2012-02-03 17:29:29","8116044","0","","120296","","2012-02-03 17:29:29","2011-11-13 23:39:02",""
"8115710","Grails 2.0: Invalid SHA1","Often I get and invalid SHA1 error when executing run-app in Grails 2.0.0.RC1, especially with depedencies to our pwn products/modules.
I have found the following Jira case:
http://jira.grails.org/browse/GRAILS-7313
Unfortunately the following line in BuildConfig.groovy
ivySettings.setVariable(""ivy.checksums"", """")

results in the error:
| Error There was an error loading the BuildConfig: No signature of method: groovy.util.ConfigObject.setVariable() is applicable for argument types: 
(java.lang.String, java.lang.String) values: [ivy.checksums, ] (Use --stacktrace to see the full trace)

Regards
Jonas
","ivySettings.setVariable(""ivy.checksums"", """")

should work if you put it inside the resolution closure e.g.
grails.project.dependency.resolution = {
    ivySettings.setVariable(""ivy.checksums"", """")
}

but 
grails.project.dependency.resolution = {
    checksums false
}

is the right way to do it for Grails 2.0 and later.
","1353","<grails><ivy><sha><grails-2.0><buildconfig>","2","3","2","2012-02-03 17:29:29","8116044","0","","120296","","2012-02-03 17:29:29","2011-11-13 23:39:02",""
"34979463","Windows 10 ignores Authenticode on my setups files","Being on the ""Fast Ring"" of Windows 10, I got a strange behaviour on my own setup executables:
I'm SHA-1 signing them with Authenticode since years the same way and never had any problems. 
Recently Windows 10 does not recognize my (valid) signatures.
When downloading a setup.exe from my website and executing it, the Windows SmartScreen message box appears and tells me:

...
  Publisher: unknown
  ...

When viewing the properties of the just downloaded setup executable, it shows the signature, and tells me that the signature is valid.
In addition, the whole certificate chain is valid.
I'm signing it with something like this:
SignTool.exe sign /v /t http://timestamp.verisign.com/scripts/timstamp.dll 
    /f ""my-authenticode.pfx"" /p ""my-password"" ""my-setup.exe""

(Line-breaks added for readability)
My question:
Is anyone aware of a possible reason (and fix) for this?
More Information:
I can think of possible reasons:

Signing with Windows 10 Fast Ring is buggy. (I've signed on Windows Server 2008 R2 with the same behaviour).
Running the downloaded setup executable within Windows 10 Fast Ring is buggy.

Update 1:
I've found a MSDN blog article back from 2013 that seems to talk about something similar as I discover, but I still cannot see whether this really applies.
More strange: Older downloads from our website, signed with the same Authenticode certificate do not trigger the warning.
Maybe SmartScreen compares the timestamp and behaves differently for newer signatures/setup executables?
Maybe I would need to add additional/different parameters when calling SignTool.exe?
Update 2:
On a non-Fast Ring Windows 10, the SmartScreen warning is not displayed.
In addition, there is also a similar SO posting which didn't help me further.
Plus, there is a Symantec posting, that claims:

For Windows Vista 64-bit and Windows 7 the signing process has changed. The code cannot simply be signed, it also needs to be ""cross-signed"" with a certificate provided by Microsoft.

This is strange to me since my signing procedure worked successfully until recently.
They further link to their own instructions which talk about kernel mode software only.
Update 3:
User GSerg pointed me to ""Windows Enforcement of Authenticode Code Signing and Timestamping"" on Microsoft TechNet.
This seems to go into the right direction.
I've seen that my current certificate is SHA-1. I've just updated it to SHA-2/SHA-256 by re-issuing it from Thawte.
Now, I still get a SmartScreen warning on my local Windows 10 Fast Ring PC but at least it now prints the publisher.

I'll no purchase a code signing cert from DigiCert since I believe that the certificate chain also has influence on how the SmartScreen filter sees my application. I do hope it is an improvement compared to the Thawte certificate I'm currently using.
If you plan to sign for Windows Vista, please note that there was a problem with SHA-256 signed files. The linked TechNet article talks about dual signing to overcome this.
Update 4:
See also this SO answer that deals about passing the SmartScreen warning with signed applications.
If this DigiCert certificate plus waiting to get enough reputation still does not help, I'll probably have to swallow the bitter pill and buy an extended validation (EV) code signing certificate (which requires a hardware token and is more expensive).
Update 5:
After approx. one day, SmartScreen seems to not show any warnings anymore.
Seems that my now dual-signed setup executables (SHA-1 plus SHA-256) already got enough reputation to successfully pass the SmartScreen tests.

My certification path/chain now looks like this:

What looks a bit strange to me is that the root certificate ""thawte"" still uses SHA-1. 
I would have expected that this still causes SmartScreen worries, but it seems it doesn't.
Update 6:
The article ""Do You Need SHA-2 Signed Root Certificates?"" explains why you do not need a SHA-256 root certificate.
In the meantime I've also received my Authenticode certificate from DigiCert. I'm using it in some setups already.
It only took about one single day until the SmartScreen filter did pick it up and not warn about it anymore.
So I'm now having a Thawte Authenticode code signing certificate and a DigiCert Authenticode code signing certificate.
If I understood the SHA-256 implications earlier, I could have saved the money for the DigiCert certificate.
","As user GSerg pointed out, the reason for the error in my initial question was that I'm using SHA-1 only which is ""deprecated"" by Microsoft since 2016.
After dual-signing my setup executable both with SHA-1 and SHA-256 (and waiting some days), the SmartScreen filter does not complain anymore.
","1339","<windows><windows-10><sha><authenticode>","4","2","1","2016-01-27 15:15:22","35041097","3","3","-1","","2017-05-23 12:19:26","2016-01-24 18:09:43",""
"34963305","How to convert a hexadecimal char into a 4-bit binary representation?","I wish to compare a SHA-256 hash which is stored in u8[32](after being calculated in kernel-space) with a 64 char string that the user passes as string.
For eg. : User passes a SHA-256 hash ""49454bcda10e0dd4543cfa39da9615a19950570129420f956352a58780550839"" as char* which will take 64 bytes. But this has to be compared with a hash inside the kernel space which is represented as u8 hash[32].
The hash inside the kernel gets properly printed in ASCII by the following code:
int i;
u8 hash[32];

for(i=0; i<32; i++)
    printk(KERN_CONT ""%hhx "", hash[i]);

Output : 
""49 45 4b cd a1 0e 0d d4 54 3c fa 39 da 96 15 a1 99 50 57 01 29 42 0f 95 63 52 a5 87 80 55 08 39 ""
As the complete hash is stored in 32 bytes and printed as 64 chars in groups of 2 chars per u8 space, I assume that currently one u8 block stores information worth 2 chars i.e. 00101111 prints to be 2f.
Is there a way to store the 64 bytes string in 32 bytes so that it can be compared?
","Characters are often stored in ASCII, so start by having a look at an ASCII chart. This will show you the relationship between a character like 'a' and the number 97.
You will note all of the numbers are right next to each other. This is why you often see people do c-'0' or c-48 since it will convert the ASCII-encoded digits into numbers you can use.
However you will note that the letters and the numbers are far away from each other, which is slightly less convenient. If you arrange them by bits, you may notice a pattern: Bit 6 (&64) is set for letters, but unset for digits. Observing that, converting hex-ASCII into numbers is straightforward:
int h2i(char c){return (9*!!(c&64))+(c&15);}

Once you have converted a single character, converting a string is also straightforward:
void hs(char*d,char*s){while(*s){*d=(h2i(*s)*16)+h2i(s[1]);s+=2;++d;}}

Adding support for non-hex characters embedded (like whitespace) is a useful exercise you can do to convince yourself you understand what is going on.
","1332","<c><linux><kernel><sha>","3","1","2","2016-01-23 12:48:13","34963593","0","0","335858","","2016-01-23 12:20:55","2016-01-23 12:14:26",""
"34963305","How to convert a hexadecimal char into a 4-bit binary representation?","I wish to compare a SHA-256 hash which is stored in u8[32](after being calculated in kernel-space) with a 64 char string that the user passes as string.
For eg. : User passes a SHA-256 hash ""49454bcda10e0dd4543cfa39da9615a19950570129420f956352a58780550839"" as char* which will take 64 bytes. But this has to be compared with a hash inside the kernel space which is represented as u8 hash[32].
The hash inside the kernel gets properly printed in ASCII by the following code:
int i;
u8 hash[32];

for(i=0; i<32; i++)
    printk(KERN_CONT ""%hhx "", hash[i]);

Output : 
""49 45 4b cd a1 0e 0d d4 54 3c fa 39 da 96 15 a1 99 50 57 01 29 42 0f 95 63 52 a5 87 80 55 08 39 ""
As the complete hash is stored in 32 bytes and printed as 64 chars in groups of 2 chars per u8 space, I assume that currently one u8 block stores information worth 2 chars i.e. 00101111 prints to be 2f.
Is there a way to store the 64 bytes string in 32 bytes so that it can be compared?
","Here is how to use scanf to do the conversion:
char *shaStr = ""49454bcda10e0dd4543cfa39da9615a19950570129420f956352a58780550839"";
uint8_t sha[32];
for (int i = 0 ; i != 32 ; i++) {
    sscanf(shaStr+2*i, ""%2"" SCNx8, &sha[i]);
    printf(""%02x "", sha[i]);
}

The approach here is to call sscanf repeatedly with the ""%2"" SCNx8 format specifier, which means ""two hex characters converted to uint8_t"". The position is determined by the index of the loop iteration, i.e. shaStr+2*i
Demo.
","1332","<c><linux><kernel><sha>","3","4","2","2016-01-23 12:48:13","34963593","0","0","335858","","2016-01-23 12:20:55","2016-01-23 12:14:26",""
"24905357","How to decode SHA384 hash?","I am creating a SHA384 hash. I want to decode that hash. Is there any possible way to do this? Please help
Following is the code to get hash
public String getHash(String message) {
    String algorithm = ""SHA384"";
    String hex = """";
    try {
        byte[] buffer = message.getBytes();
        MessageDigest md = MessageDigest.getInstance(algorithm);
        md.update(buffer);
        byte[] digest = md.digest();

        for(int i = 0 ; i < digest.length ; i++) {
            int b = digest[i] & 0xff;
            if (Integer.toHexString(b).length() == 1) hex = hex + ""0"";
            hex  = hex + Integer.toHexString(b);
        }
        return hex;
    } catch(NoSuchAlgorithmException e) {
        e.printStackTrace();
        return null;
    }

}

","A cryptographically secure hashing function is a function such that a given arbitrary length input is processed into a fixed length output in such a way that is not reversible (computationally infeasible). Such functions include MD5 and the SHA (Secure Hash Algorithm) family (1, 224, 256, 384, 512, etc).
Once you take the hash of the input there is no going back to the original input. This property can be used for verification of message integrity as hashing the identical message produces a identical hash.
The website you visited simply stores hashes and their inputs side by side and does a database lookup for your hash to attempt to find a possible input (if it was previously added to the database).
","1327","<android><hash><sha>","-1","4","1","2016-06-28 18:44:44","24906063","3","4","","","","2014-07-23 08:24:18",""
"21579634","Store SHA1 hash digest of a FreeRADIUS user password in PostgreSQL","I have a system with a centralized user database where usernames and passwords are stored for different application.
The database is created in PostgreSQL. FreeRDAIUS gets access to the users and passwords via OpenLDAP which uses PostgreSQL as a backend system. The passwords are supposed to be stored in their hash formats.
I have tested FreeRADIUS with SHA1 passwords stored in the database and users are successfully authenticated. I stored the digest with {SHA} prepnded to it and it work perfectly. This hash, however, needs to be in base64 with ""="" as the a padding character. I generated the base64 hash digest using ldap utility slappasswd.
Since in reality, I am supposed to insert users in the database using a C function and the available cryptographic libs such as OpenSSL only offer function for hex hash, I thought the best way is to know how to tell FreeRDAIUS that the digest stored in the database is NOT base64 but HEX. 
Does anyone know how I can do this? It seems that if I simply put {SHA} before the hashed value, it only works for base64 with FreeRADIUS. I would also like to know if FreeRADIUS supports other hash algorithms such as SHA256.
OS: Ubuntu 12.04 LTS
PostgreSQL: 9.1
FreeRADIUS: 2.1.10
","No currently released versions support any of the SHA-2 hash algorithms.
The rlm_pap module in FreeRADIUS 2.1.10 should automatically 'normify' the 'known good' password, that is convert the hexits to binary, and assign it to the correct control: attribute. This works the same way for hexits as it does base64.
Update:
https://github.com/FreeRADIUS/freeradius-server/commit/0bd0f7453adb2c331a9c1127eda9c9a9fe203b2d
","1317","<postgresql><ubuntu-12.04><sha><freeradius>","0","0","1","2014-02-06 15:58:22","","0","","","","","2014-02-05 14:12:04",""
"7519725","How to grab a specific SHA from the git log output","Executing the following command git log --before ""Feb 01 2011"" returns all of the commits from before the specified date, including their SHA
I'm trying to write a cygwin script that syncs my head to the last commit of a specific month, without me having to find and enter the SHA myself.  Any ideas?  Thanks!
","In bash on linux the following works, I think it should also work on cygwin:
git checkout $(git log --before='Feb 01 2011' -n1 | head -n 1 |sed s/commit\ //)

It may be a good idea to immediately create a branch when you do that
git checkout $(git log --before='Feb 01 2011' -n1 | head -n 1 |sed s/commit\ //) -b 2011-02

Or alternatively if you intend to create a script tagging is perhaps a better option. Eg:
git checkout $(git log --before='Feb 01 2011' -n1 | head -n 1 |sed s/commit\ //)
git tag 2011-01

","1313","<git><import><cygwin><logging><sha>","3","0","2","2011-09-22 18:50:34","7519863","0","","","","","2011-09-22 18:38:11",""
"7519725","How to grab a specific SHA from the git log output","Executing the following command git log --before ""Feb 01 2011"" returns all of the commits from before the specified date, including their SHA
I'm trying to write a cygwin script that syncs my head to the last commit of a specific month, without me having to find and enter the SHA myself.  Any ideas?  Thanks!
","Just use rev-list with the same options as you would pass to log, plus -n 1 to return just the first one.
sha1=$(git rev-list --before ""Feb 01 2011"" -n 1 HEAD)

","1313","<git><import><cygwin><logging><sha>","3","3","2","2011-09-22 18:50:34","7519863","0","","","","","2011-09-22 18:38:11",""
"48592450","Binance API call with SHA56 and Python requests","Haven't worked in Python much and I'm obviously not sending the proper signature being asked for. How do I hash it and pass it in properly?
SIGNED endpoints require an additional parameter, signature, to be sent in the query string or request body.
Endpoints use HMAC SHA256 signatures. The HMAC SHA256 signature is a keyed HMAC SHA256 operation. Use your secretKey as the key and totalParams as the value for the HMAC operation.
The signature is not case sensitive.
totalParams is defined as the query string concatenated with the request body.

Full Documentation:
https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md
import requests, json, time, hashlib


apikey = ""myactualapikey""
secret = ""myrealsecret""
test = requests.get(""https://api.binance.com/api/v1/ping"")
servertime = requests.get(""https://api.binance.com/api/v1/time"")

servertimeobject = json.loads(servertime.text)
servertimeint = servertimeobject['serverTime']

hashedsig = hashlib.sha256(secret)

userdata = requests.get(""https://api.binance.com/api/v3/account"",
    params = {
        ""signature"" : hashedsig,
        ""timestamp"" : servertimeint,
    },
    headers = {
        ""X-MBX-APIKEY"" : apikey,
    }
)
print(userdata)

I am getting
{""code"":-1100,""msg"":""Illegal characters found in parameter 'signature'; legal range is '^[A-Fa-f0-9]{64}$'.""}

","This:
hashedsig = hashlib.sha256(secret)

Gives you a hash object, not a string.  You need to get the string in hex form:
hashedsig = hashlib.sha256(secret).hexdigest()

You could have figured this out by comparing the documentation you linked (which shows they require hex strings) with your original hashedsig and the functions it provides.
Secondly, as a  commenter pointed out, you need to apply HMAC, not just SHA256:
params = urlencode({
    ""signature"" : hashedsig,
    ""timestamp"" : servertimeint,
})
hashedsig = hmac.new(secret.encode('utf-8'), params.encode('utf-8'), hashlib.sha256).hexdigest()

You can find similar code here: http://python-binance.readthedocs.io/en/latest/_modules/binance/client.html
","1308","<python><python-3.x><python-requests><sha256><sha>","2","4","1","2018-02-02 23:58:09","","1","","","","","2018-02-02 23:46:33",""
"19021671","Find long SHA from short SHA for git diff","I was generating difference / changes done in the commit so that I can upload it in ReviewBoard.
I used ""git show d9f7121e8ebd4d1f789dab9f8214ada2h480b9cf"". It gave me diff something like...
diff --git a/src/index.php b/src/index.php
index 3cfa8e8..7f8440d 100644
--- a/src/index.php
+++ b/src/index.php
@@ -12,10 +12,13 @@
 .test {
     .input;
     width: auto;
+    border-width: 5px;
+    border-radius: 50%;
 }

When I create .patch file of this diff. Reviewboard rejects it saying ""'3cfa8e8' revision is not valid format. SHA1 is too short"".
So I wanted to get long SHA1 from short SHA1 '3cfa8e8'.
I did 'git show 3cfa8e8'. It just shows me some content of file. Doesn't show me anything else.
Any help how can I get long SHA?
(Note:- All the sha and file diff are example to demonstrate the problem)
","git rev-parse <short sha> should do the trick.
See also the git rev-parse manpage.
","1305","<git><diff><sha><review-board>","5","8","1","2013-09-26 07:18:34","","0","1","","","","2013-09-26 07:12:13",""
"23405558","ogone error unknown order/0/s/","I'm trying to configure my script to use ogone payment gateway
i've assigned a pass phrase let's say e.g: abcd1234
so the code that will be hased is
$sh = ""AMOUNT=5000abcd1234CURRENCY=USDabcd1234LANGUAGE=en_USabcd1234ORDERID=1122abcd1234PSPID=MyIDabcd1234"";

and i'm using this form
<FORM METHOD=""post"" ACTION=""https://secure.ogone.com/ncol/test/orderstandard.asp"" id=""form1"" name=""form1"">
<INPUT type=""hidden"" NAME=""PSPID"" value=""MyID"">
<INPUT type=""hidden"" NAME=""ORDERID"" value=""1122"">
<INPUT type=""hidden"" NAME=""AMOUNT"" value=""5000"">
<INPUT type=""hidden"" NAME=""CURRENCY"" value=""USD"">
<INPUT type=""hidden"" NAME=""LANGUAGE"" value=""en_US"">
<INPUT type=""hidden"" NAME=""SHASIGN"" value=""<?php echo $sh; ?>"">
<input type=""submit"" value=""Your button lib"" id=""submit2"" name=""submit2"">
</form>

after adjusting the referrer URL of this webpage i get this error unknown order/0/s/
Any idea please?
","The error unknown order/0/s means that you are not sending the proper SHA-1 signature. 
This is related to a parameter configured in Ogone's backoffice there :
Configuration > Technical information > Data and origin verification
","1304","<php><payment-gateway><sha>","0","1","1","2014-05-27 14:28:09","23892126","0","","1151715","","2014-05-01 10:27:38","2014-05-01 10:00:21",""
"30609749","VHDL modulo 2^32 addition","I am working on a VHDL implementation of the SHA-256 hash function.
I have some 32-bit unsigned signals defined as such:
SIGNAL a, b : UNSIGNED (31 downto 0);

Within the specifications of the SHA-256 algorithm, it says addition must be performed modulo 2^32 in order to retain the 32-bit size in case of an overflow.    Now, according to the answer to this question, it sounds like overflow is already handled with modular addition in VHDL:

There is no overflow handling, the overflow carry is simply lost. Thus the result is simply the integer result of your operation modulo 2^MAX.

I have 2 questions:

In my case, MAX = 31 so does that mean that any addition operation I perform on a and b will be modded with 2^31?  
I need to perform addition modulo 2^32 which obviously doesn't make sense since I am working with 32-bit numbers and 2^32 is one bit too large.  So is it somehow implied that I should actually be modding with 2^31?

","You are fine with unsigned(31 downto 0). The 2^MAX in the post you reference is an error and should read 2^length. The length of 31 downto 0 is 32.
Think about it, 31 downto 0 can represent numbers from 0 to 2^32-1, it wouldn't make much sense if any addition of that range would be modulo 2^31 if you can represent larger numbers!
I'm not sure I understand your second question, but addition modulo 2^32 yields results in the range of 0 to 2^32-1. 2^32 is illegal, thus it's quite fine that you can't represent it with your unsigned.
","1290","<overflow><vhdl><sha>","1","5","1","2015-06-03 18:33:34","30609914","0","","-1","","2017-05-23 11:58:13","2015-06-03 02:20:26",""
"48968074","How to create a SHA-512 hash?","I am trying to create a SHA-512 or SHA-256 system within my Java code, to store passwords. I have looked around and can't find any working code. Does anyone have an idea where to start? Or is there a plugin that hashes strings for me?
","Try this:
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

public String get_SHA_512_SecurePassword(String passwordToHash, String              salt){
String generatedPassword = null;
try {
     MessageDigest md = MessageDigest.getInstance(""SHA-512"");
     md.update(salt.getBytes(StandardCharsets.UTF_8));
     byte[] bytes = md.digest(passwordToHash.getBytes(StandardCharsets.UTF_8));
     StringBuilder sb = new StringBuilder();
     for(int i=0; i< bytes.length ;i++){
        sb.append(Integer.toString((bytes[i] & 0xff) + 0x100, 16).substring(1));
     }
     generatedPassword = sb.toString();
    } 
   catch (NoSuchAlgorithmException e){
    e.printStackTrace();
   }
return generatedPassword;
}

","1281","<java><android><hash><sha>","-1","1","1","2018-02-24 22:12:16","48968152","2","1","6296561","","2018-02-24 22:07:57","2018-02-24 22:01:56",""
"24461629","Go SHA-256 hash differs from Java SHA-256 hash","If I generate the SHA-256 hash in the language ""GO"", I get a different byte-Array compared to the Java equivalent.
This is the GO version:
fmt.Println(getSha256([]byte(""5nonce=5"")))

The resulting array looks like:
41 79 186 235 199 123 95 226 16 59 51 161 112 245 192 50 21 66 180 250 179 109 153 18 233 148 16 237 156 69 163 150]

This one should do the same in Java code:
MessageDigest md = MessageDigest.getInstance(""SHA-256"");

md.update(""5nonce=5"".getBytes()); 
byte[] digest = md.digest();

But results in this byte array
[41, 79, -70, -21, -57, 123, 95, -30, 16, 59, 51, -95, 112, -11, -64, 50, 21, 66, -76, -6, -77, 109, -103, 18, -23, -108, 16, -19, -100, 69, -93, -106]

Why are they different? How do I need to change the java version to work exactly like the Go version?
","
Why are they different?

They're not, really. They're the same bits. It's just that Java doesn't have unsigned bytes - so any byte with the top bit set is negative. In every case like that, you'll see that Java result = Go result - 256.
If you convert both byte arrays to hex or base64, you'll see same results.
","1277","<java><hash><go><sha>","5","16","2","2014-06-28 08:48:53","24461657","0","4","","","","2014-06-27 22:27:05",""
"24461629","Go SHA-256 hash differs from Java SHA-256 hash","If I generate the SHA-256 hash in the language ""GO"", I get a different byte-Array compared to the Java equivalent.
This is the GO version:
fmt.Println(getSha256([]byte(""5nonce=5"")))

The resulting array looks like:
41 79 186 235 199 123 95 226 16 59 51 161 112 245 192 50 21 66 180 250 179 109 153 18 233 148 16 237 156 69 163 150]

This one should do the same in Java code:
MessageDigest md = MessageDigest.getInstance(""SHA-256"");

md.update(""5nonce=5"".getBytes()); 
byte[] digest = md.digest();

But results in this byte array
[41, 79, -70, -21, -57, 123, 95, -30, 16, 59, 51, -95, 112, -11, -64, 50, 21, 66, -76, -6, -77, 109, -103, 18, -23, -108, 16, -19, -100, 69, -93, -106]

Why are they different? How do I need to change the java version to work exactly like the Go version?
","Here is the Go code which would produce the same result:
package main

import ""fmt""
import ""crypto/sha256""

func main() {
    sum224 := sha256.Sum256([]byte(""5nonce=5""))
    s := make([]int8, sha256.Size)
    for i := range sum224 {
        s[i] = int8(sum224[i])
    }
    fmt.Printf(""%d"", s)
}

[41 79 -70 -21 -57 123 95 -30 16 59 51 -95 112 -11 -64 50 21 66 -76 -6 -77 109 -103 18 -23 -108 16 -19 -100 69 -93 -106]

The fmt doc does mention:

There is no 'u' flag. Integers are printed unsigned if they have unsigned type. 

Since Numeric Types defines:

byte        alias for uint8
uint8       the set of all unsigned  8-bit integers (0 to 255)
int8        the set of all signed  8-bit integers (-128 to 127)

That is why you would need to convert byte (unsigned) into signed int8 to see the same.

If you add base64 encoding (see golang playground), you can get a result easier to compare:
import ""encoding/base64""

res := base64.StdEncoding.EncodeToString([]byte(sum224[:]))
fmt.Println(res)

That returns:
KU+668d7X+IQOzOhcPXAMhVCtPqzbZkS6ZQQ7ZxFo5Y=

","1277","<java><hash><go><sha>","5","4","2","2014-06-28 08:48:53","24461657","0","4","","","","2014-06-27 22:27:05",""
"16619980","Failing mocha test on hash of favicon static image","I'm trying to use mocha, request, and a SHA1 hash to write an integration test to confirm that the favicon being served from Express is the same as the one on the file system. I get two different hashes, and can't figure out why. Is it possible the encoding is changing?
process.env.NODE_TLS_REJECT_UNAUTHORIZED = ""0"" // Avoids DEPTH_ZERO_SELF_SIGNED_CERT error for self-signed certs
var request = require(""request"");
var crypto = require('crypto');
var fs = require('fs');
var favicon = crypto.createHash('sha1').update(fs.readFileSync(__dirname + '/../../public/img/favicon.ico')).digest('hex');
var app = require(""../../server.js"");
var expect = require('expect.js');

describe(""Static tests"", function () {
    it(""responds successfully"", function (done) {
        request.get(""https://localhost:"" + process.env.PORT + ""/favicon.ico"", function (err, res, body) {
            // console.log(res)
            expect(res.statusCode).to.be(200);
            done();
        });
    });

    it(""serves out the file correctly"", function (done) {
        request.get(""https://localhost:"" + process.env.PORT + ""/favicon.ico"", function (err, res, body) {
            // console.log(res)
            expect(crypto.createHash('sha1').update(body).digest('hex')).to.be(favicon);
            done();
        });
    });
});

Test 1 passes and then I get: ""1) Server Static tests serves out the file Error: expected 'b09865f78dae40afa5f31503c208f5474e1d76a9' to equal 'd3e242e289b401c18d6e96526f586abf06385108'""
Any ideas why the same favicon might be hashing differently when being sent over HTTP versus read off the filesystem?
","Assuming you are using the request module from npm, you should verify the type of the object you are receiving for the body argument is a Buffer. Looking at the source for the request module, I suspect you are getting a String instead. You might try doing the following when requiring request:
var request = require(""request"").defaults({ encoding: null });

That should tell the request module that you want a Buffer object by default.
","1272","<node.js><favicon><mocha><sha>","3","5","1","2013-05-18 04:03:19","16620557","0","","","","","2013-05-18 01:53:42",""
"20031873","Byte array in objective c with ascii encoding","I am trying to get a byte array from an NSString in objective c using ascii encoding. I need to this array to calculate the SHA256 hash of that string and then compare the result to the SHA256 encoding generated in Windows.
    NSString *myString = @""123456¥"";
const char *string = (const unsigned char *) [myString cStringUsingEncoding:NSASCIIStringEncodin];

this always gives  nil since it contains the ¥ character. 
the problem is I cannot use UTF8Encoding since the hash generated by windows uses ASCII encoding like so:
string text =""123456¥"";
byte[] arrSHA = System.Text.Encoding.ASCII.GetBytes(text);

although using UTF8 Encoding in objective c does work, I cannot use it as it will give a different byte array than the one generated in .Net which will result a completely different SHA for that string.
Any suggestions on how to make this work?

UPDATE:
reading the documentation about ASCII encoding in .Net it seems that it convert every non ASCII character to ?. Can I detect these characters in objective c and manually replace them with ?
Regards
","The best solution would be if the server used UTF-8 instead of ASCII encoding.
If that is not an option, you can use the following code for the conversion,
where all non-ASCII characters are substituted by a question mark
(error-checking omitted for brevity):
NSString *myString = @""ä123€456¥"";

CFIndex asciiLength;
// Determine length of converted data:
CFStringGetBytes((__bridge CFStringRef)(myString), CFRangeMake(0, [myString length]),
                 kCFStringEncodingASCII, '?', false, NULL, 0, &asciiLength);
// Allocate buffer:
uint8_t *asciiBuffer = malloc(asciiLength);
// Do the conversion:
CFStringGetBytes((__bridge CFStringRef)(myString), CFRangeMake(0, [myString length]),
                 kCFStringEncodingASCII, '?', false, asciiBuffer, asciiLength, NULL);

// Check the result:
printf(""%.*s\n"", (int)asciiLength, asciiBuffer);
// Output: ?123?456?

There is (as far as I know) no equivalent NSString method, therefore you have
to use the ""toll-free bridge"" from NSString to CFStringRef and a Core Foundation
function.
","1266","<c#><objective-c><encoding><utf-8><sha>","1","1","1","2014-04-22 16:41:13","","7","","127602","","2013-11-17 15:29:10","2013-11-17 14:31:26",""
"19549313","JavaScript hiding plain text similar to password","I am trying to hide/show the plain text of a hashing function, I have been able to hide the input field but i have not been able to hide/show the plain text, the webpage has a input field and under that is the text that i am typing, then there is the hashed text, i am trying to replace the plain text with bullets.
I tried hiding it by counting the number of characters in the field and then repeating the bullet that many times. but now the page does not function at all.
<!DOCTYPE html>
<html>
<body>

    <input 
        name=""show password"" 
        type=""checkbox"" 
        checked=""checked""
        onclick=""toggleType();"" />
    <input 
        size=""80""
        input type=""text""
        rows=""7""
        id=""edValue"" 
        type=""text"" 
        onKeyPress=""edValueKeyPress() 
        ""onKeyUp=""edValueKeyPress()"">
    <p id=""string"">Original text: </p>
    <p id=""lblValue"">The SHA256 hash is:  </p>

<script type=""text/javascript"" src=""sha256.js"">
</script>

<script type=""text/javascript"">
    function edValueKeyPress()
    {
        var edValue = document.getElementById(""edValue"");
        var s = edValue.value;

        var lblValue = document.getElementById(""lblValue"");
        lblValue.innerText = ""The SHA256 hash is: ""+sha256_digest(s);

        var TheText = document.getElementById(""string"");
        TheText.innerText = ""Original text: ""+s;

    }

    function toggleType() {
        var obj = document.getElementById('edValue');
        if (obj.type == 'password') {
            obj.type = 'text';
        } else {
            obj.type = 'password';
            repeat();
        }
    }
    function repeat() {
        var length = this.value.length;
        var count = document.getElementById(""edValue"");
        String.prototype.repeat = function(n) {
        return new Array(1 + n).join(this);
        var TheText = document.getElementById(""string"");
        TheText.innerText = ""*"".repeat(count);
    }





</script>
</body>
</html>

","Just use a regex:
w/ jQuery:
$('YOURELEMENT').html($('div').html().replace(/./g, '*'));

without:
var text = document.getElementById('YOURELEMENT').innerText;
document.getElementById('string').innerHTML = text.replace(/./g, '*')

","1255","<javascript><html><sha>","1","0","3","2013-10-23 19:22:07","","2","","","","","2013-10-23 18:13:23",""
"19549313","JavaScript hiding plain text similar to password","I am trying to hide/show the plain text of a hashing function, I have been able to hide the input field but i have not been able to hide/show the plain text, the webpage has a input field and under that is the text that i am typing, then there is the hashed text, i am trying to replace the plain text with bullets.
I tried hiding it by counting the number of characters in the field and then repeating the bullet that many times. but now the page does not function at all.
<!DOCTYPE html>
<html>
<body>

    <input 
        name=""show password"" 
        type=""checkbox"" 
        checked=""checked""
        onclick=""toggleType();"" />
    <input 
        size=""80""
        input type=""text""
        rows=""7""
        id=""edValue"" 
        type=""text"" 
        onKeyPress=""edValueKeyPress() 
        ""onKeyUp=""edValueKeyPress()"">
    <p id=""string"">Original text: </p>
    <p id=""lblValue"">The SHA256 hash is:  </p>

<script type=""text/javascript"" src=""sha256.js"">
</script>

<script type=""text/javascript"">
    function edValueKeyPress()
    {
        var edValue = document.getElementById(""edValue"");
        var s = edValue.value;

        var lblValue = document.getElementById(""lblValue"");
        lblValue.innerText = ""The SHA256 hash is: ""+sha256_digest(s);

        var TheText = document.getElementById(""string"");
        TheText.innerText = ""Original text: ""+s;

    }

    function toggleType() {
        var obj = document.getElementById('edValue');
        if (obj.type == 'password') {
            obj.type = 'text';
        } else {
            obj.type = 'password';
            repeat();
        }
    }
    function repeat() {
        var length = this.value.length;
        var count = document.getElementById(""edValue"");
        String.prototype.repeat = function(n) {
        return new Array(1 + n).join(this);
        var TheText = document.getElementById(""string"");
        TheText.innerText = ""*"".repeat(count);
    }





</script>
</body>
</html>

","To toggle :
Html input
<input 
        name=""show password"" 
        type=""checkbox"" 
        checked=""checked""
        onclick=""toggleType();"" />

<input id=""password"" type=""password"" />

The javascript
function toggleType(){
    var inputEl = document.getElementById('password');
  if(inputEl.type != ""text""){
        inputEl.type = ""text"";
  }else{
      inputEl.type = ""password"";
  }
}

Working example: http://jsfiddle.net/3MRAX/1/ 
","1255","<javascript><html><sha>","1","0","3","2013-10-23 19:22:07","","2","","","","","2013-10-23 18:13:23",""
"19549313","JavaScript hiding plain text similar to password","I am trying to hide/show the plain text of a hashing function, I have been able to hide the input field but i have not been able to hide/show the plain text, the webpage has a input field and under that is the text that i am typing, then there is the hashed text, i am trying to replace the plain text with bullets.
I tried hiding it by counting the number of characters in the field and then repeating the bullet that many times. but now the page does not function at all.
<!DOCTYPE html>
<html>
<body>

    <input 
        name=""show password"" 
        type=""checkbox"" 
        checked=""checked""
        onclick=""toggleType();"" />
    <input 
        size=""80""
        input type=""text""
        rows=""7""
        id=""edValue"" 
        type=""text"" 
        onKeyPress=""edValueKeyPress() 
        ""onKeyUp=""edValueKeyPress()"">
    <p id=""string"">Original text: </p>
    <p id=""lblValue"">The SHA256 hash is:  </p>

<script type=""text/javascript"" src=""sha256.js"">
</script>

<script type=""text/javascript"">
    function edValueKeyPress()
    {
        var edValue = document.getElementById(""edValue"");
        var s = edValue.value;

        var lblValue = document.getElementById(""lblValue"");
        lblValue.innerText = ""The SHA256 hash is: ""+sha256_digest(s);

        var TheText = document.getElementById(""string"");
        TheText.innerText = ""Original text: ""+s;

    }

    function toggleType() {
        var obj = document.getElementById('edValue');
        if (obj.type == 'password') {
            obj.type = 'text';
        } else {
            obj.type = 'password';
            repeat();
        }
    }
    function repeat() {
        var length = this.value.length;
        var count = document.getElementById(""edValue"");
        String.prototype.repeat = function(n) {
        return new Array(1 + n).join(this);
        var TheText = document.getElementById(""string"");
        TheText.innerText = ""*"".repeat(count);
    }





</script>
</body>
</html>

","Sorry about this, OP, but I tried :( This is as far as I got.
Javascript
function edValueKeyPress()
{
    var edValue = document.getElementById(""edValue"");
    var s = edValue.value;

    var lblValue = document.getElementById(""lblValue"");
    var hashes = s.hashCode;
    lblValue.innerHTML = ""The SHA256 hash is: "" + hashes;

    var text = document.getElementById(""string"");
    text.innerHTML = ""Original text: "" + s;
}

function toggleType() {
    var obj = document.getElementById('edValue');
    if (obj.type == 'password') {
        obj.type = 'text';
    } else if(obj.type == 'text'){
        obj.type = 'password';
    }
}

HTML
<input 
    name=""show password"" 
    type=""checkbox"" 
    checked=""checked""
    onclick=""toggleType();"" />
<input 
    size=""80""
    type=""text""
    rows=""7""
    id=""edValue"" 
    type=""text"" 
    onkeyup=""edValueKeyPress();"">
<p id=""string"">Original text: </p>
<p id=""lblValue"">The SHA256 hash is:  </p>

","1255","<javascript><html><sha>","1","0","3","2013-10-23 19:22:07","","2","","","","","2013-10-23 18:13:23",""
"31219009","Fast and light JavaScript SHA-256 secure hash implementation","I'm looking for a hash implementation that is;

secure (practically impossible to invert)
fast (few ms)
light (few KB)
runs in the browser

Ideally a SHA-256 implementation, since it is widely used and therefore widely tested against.
","Doing some tests suggests that forge is the fastest SHA-256 JavaScript implementation.
It is 284KB big but extracting the SHA-256 related code reduces the size to 4.5 KB, see https://github.com/brillout/forge-sha256.
","1255","<javascript><security><browser><sha><sha256>","0","1","1","2015-07-22 12:10:14","31219060","11","2","270274","","2015-07-22 12:06:23","2015-07-04 09:18:42","2015-07-13 00:23:07"
"30687160","Converting String to Sha-256 Hash","I want to convert a String to a SHA-256 Hash. I am using this code:
String text = ""YOLO"";
MessageDigest digest = MessageDigest.getInstance(""SHA-256"");
byte[] hash = digest.digest(text.getBytes(""UTF-8""));
System.out.println(hash.toString());

The problem is, when I start the program, it prints

[B@28d93b30

Why is this, and how can solve this?
Thanks in advance,
Fihdi
","In JAVA, arrays do not override Object.toString(). Therefore, hash.toString() does not return a representation of the contents of the array, but rather a representation of the array itself. Apparently, this representation of an array is not very useful. The default toString() implementation returns
 getClass().getName() + '@' + Integer.toHexString(hashCode())

","1239","<java><arrays><string><hash><sha>","1","0","3","2015-06-06 21:04:47","","2","3","4304965","","2015-06-06 20:37:29","2015-06-06 20:15:02",""
"30687160","Converting String to Sha-256 Hash","I want to convert a String to a SHA-256 Hash. I am using this code:
String text = ""YOLO"";
MessageDigest digest = MessageDigest.getInstance(""SHA-256"");
byte[] hash = digest.digest(text.getBytes(""UTF-8""));
System.out.println(hash.toString());

The problem is, when I start the program, it prints

[B@28d93b30

Why is this, and how can solve this?
Thanks in advance,
Fihdi
","As others have mentioned, you're using the default toString() method which simply outputs the class name and hashcode
If you want a hex print out of the contents of the byte array try...
Hex.encodeHexString(byte[] data) from Apache Commons.
Also How to convert a byte array to a hex string in Java? has some examples for doing this without a library.
","1239","<java><arrays><string><hash><sha>","1","2","3","2015-06-06 21:04:47","","2","3","4304965","","2015-06-06 20:37:29","2015-06-06 20:15:02",""
"30687160","Converting String to Sha-256 Hash","I want to convert a String to a SHA-256 Hash. I am using this code:
String text = ""YOLO"";
MessageDigest digest = MessageDigest.getInstance(""SHA-256"");
byte[] hash = digest.digest(text.getBytes(""UTF-8""));
System.out.println(hash.toString());

The problem is, when I start the program, it prints

[B@28d93b30

Why is this, and how can solve this?
Thanks in advance,
Fihdi
","To print the bytes as hex (instead of that result, explained in How do I print my Java object without getting "SomeType@2f92e0f4"?), simply run:
System.out.println((new HexBinaryAdapter()).marshal(hash));

","1239","<java><arrays><string><hash><sha>","1","1","3","2015-06-06 21:04:47","","2","3","4304965","","2015-06-06 20:37:29","2015-06-06 20:15:02",""
"19982951","How does Firefox generate the hash values when installing extensions","I wrote some code that manually takes a XPI that was already installed from one Firefox profile, and set's up the xpi to be manually set up on a different profile or computer entirely.
So the I set everything up fine within the extensions.sqlite Database that is within the user profile folder. I can even rename the extension on the fly when I move the xpi itself into the extension folder.
Here's my question: When I extract the XPI, there is a file called 'harness-options.json'. Within that file there are two variables, docsSHA256 and jsSHA256.
These to hash variables must be based on the extension in some way, but I am not sure how exactly.
Could anyone point me in the right direction as to how firefox generates these hash codes?
Thanks.
","Firefox does not generate these hashes at all. It is the Add-on SDK which does. The Firefox extension manager does not care about harness-options.json at all. The SDK loader in turn, does care about harness-options.json a bit, but doesn't do anything with jsSHA256 or docsSHA256 at the moment. Other tools, such as the validator that runs when you upload something to addons.mozilla.org, do care about jsSHA256 at least.
It should be noted that add-ons not using the SDK do not (normally) contain a harness-options.json file at all.
There will be one jsSHA256 per module lib/, e.g. one for main.js and so on.
docsSHA256 for main.js will be generated from README.md when the SDK builds the XPI. Apparantly, README.md is not packed into the XPI. For all other modules it appears docsSHA256 appears to be null.
The code in question lives in manifest.py.
In the end you shouldn't mess with the XPI (other than repacking an unpacked extension) and/or extensions.sqlite at all. Especially the latter isn't meant to be modified externally.
Just drop the your XPIs files in the corresponding extensions/ folder of the profile and the Add-on manager will automatically pick them up the next time you start the browser.
","1236","<firefox><hash><firefox-addon><firefox-addon-sdk><sha>","0","1","1","2013-11-14 18:46:21","19985803","1","","","","","2013-11-14 16:26:46",""
"10718766","set a field in hibernate to encrypt using sha1 using annotation","I have a field in my table that I want to save it using sha1 function in database;
How can I configure hibernate with annotation to use sha1 to save the password field when I call 
session.save(User);
","There is no such annotation for Hibernate. If you are using JPA you can define a @PrePersist method to compute the SHA-1 password prior to saving the user object. If you are using regular Hibernate you can do the same with an entity listener.
I would recommend though, that you explicitly handle the hashing of the password in your code, so that it's always clear when it's being done, and how. It's also possible to push the hashing function all the way down to the DB, but of all the options that is probably the least preferred. 
Don't forget to salt your password before hashing it!
","1233","<java><hibernate><sha><hibernate-annotations>","0","1","1","2012-05-23 11:53:35","10719347","0","","","","","2012-05-23 11:12:50",""
"20324108","Create RSA SHA-256 (DNSSEC valid) keys?","I would like to create my own RSA/Sha256 Key Generator in Python for DNSSEC.
I know that there is already a build-in keygen (dnssec-keygen) but I want to build it my own.
The keys which are accepted looks like this:
Private-key-format: v1.2

   Algorithm:       8 (RSASHA256)
   Modulus:         wVwaxrHF2CK64aYKRUibLiH30KpPuPBjel7E8ZydQW1HYWHfoGm
                    idzC2RnhwCC293hCzw+TFR2nqn8OVSY5t2Q==
   PublicExponent:  AQAB
   PrivateExponent: UR44xX6zB3eaeyvTRzmskHADrPCmPWnr8dxsNwiDGHzrMKLN+i/
                    HAam+97HxIKVWNDH2ba9Mf1SA8xu9dcHZAQ==
   Prime1:          4c8IvFu1AVXGWeFLLFh5vs7fbdzdC6U82fduE6KkSWk=
   Prime2:          2zZpBE8ZXVnL74QjG4zINlDfH+EOEtjJJ3RtaYDugvE=
   Exponent1:       G2xAPFfK0KGxGANDVNxd1K1c9wOmmJ51mGbzKFFNMFk=
   Exponent2:       GYxP1Pa7CAwtHm8SAGX594qZVofOMhgd6YFCNyeVpKE=
   Coefficient:     icQdNRjlZGPmuJm2TIadubcO8X7V4y07aVhX464tx8Q=

http://tools.ietf.org/html/rfc5702
My Python script can generate the RSA-parts, but I don't know how to mix it with SHA256:
#!/usr/bin/python

from Crypto.PublicKey import RSA
from Crypto.Hash import SHA256
import base64
import hashlib

key = RSA.generate(2048)

expo1 = ((key.d)%((key.p)-1))
expo2 = ((key.d)%((key.q)-1))

KEYVORLAGE = """"""Private-key-format: v1.2
Algorithm:       8 (RSASHA256)
Modulus: {0}
PublicExponent: {1}
PrivateExponent: {2} 
Prime1: {3}
Prime2: {4}
Exponent1: {5}
Exponent2: {6}
Coefficient: {7}""""""

keystring = KEYVORLAGE.format(key.n,key.e,key.d,key.p,key.q,expo1,expo2,key.u)
print keystring

BTW: All my Key Parts generated by this script only has numbers and not random letters, like the valid key.
","(Question was answered by OP, but in the question itself. Copy of text below.)
The answer is simple – by modifying the keystring: 
keystring = KEYVORLAGE.format( 
    base64.standard_b64encode(str(key.n)), 
    base64.standard_b64encode(str(key.e)), 
    base64.standard_b64encode(str(key.d)), 
    base64.standard_b64encode(str(key.p)), 
    base64.standard_b64encode(str(key.q)), 
    base64.standard_b64encode(str(expo1)), 
    base64.standard_b64encode(str(expo2)), 
    base64.standard_b64encode(str(key.u)))

","1227","<python><rsa><sha>","3","1","2","2019-09-24 16:43:07","","2","","474189","","2013-12-02 10:38:53","2013-12-02 08:48:03",""
"20324108","Create RSA SHA-256 (DNSSEC valid) keys?","I would like to create my own RSA/Sha256 Key Generator in Python for DNSSEC.
I know that there is already a build-in keygen (dnssec-keygen) but I want to build it my own.
The keys which are accepted looks like this:
Private-key-format: v1.2

   Algorithm:       8 (RSASHA256)
   Modulus:         wVwaxrHF2CK64aYKRUibLiH30KpPuPBjel7E8ZydQW1HYWHfoGm
                    idzC2RnhwCC293hCzw+TFR2nqn8OVSY5t2Q==
   PublicExponent:  AQAB
   PrivateExponent: UR44xX6zB3eaeyvTRzmskHADrPCmPWnr8dxsNwiDGHzrMKLN+i/
                    HAam+97HxIKVWNDH2ba9Mf1SA8xu9dcHZAQ==
   Prime1:          4c8IvFu1AVXGWeFLLFh5vs7fbdzdC6U82fduE6KkSWk=
   Prime2:          2zZpBE8ZXVnL74QjG4zINlDfH+EOEtjJJ3RtaYDugvE=
   Exponent1:       G2xAPFfK0KGxGANDVNxd1K1c9wOmmJ51mGbzKFFNMFk=
   Exponent2:       GYxP1Pa7CAwtHm8SAGX594qZVofOMhgd6YFCNyeVpKE=
   Coefficient:     icQdNRjlZGPmuJm2TIadubcO8X7V4y07aVhX464tx8Q=

http://tools.ietf.org/html/rfc5702
My Python script can generate the RSA-parts, but I don't know how to mix it with SHA256:
#!/usr/bin/python

from Crypto.PublicKey import RSA
from Crypto.Hash import SHA256
import base64
import hashlib

key = RSA.generate(2048)

expo1 = ((key.d)%((key.p)-1))
expo2 = ((key.d)%((key.q)-1))

KEYVORLAGE = """"""Private-key-format: v1.2
Algorithm:       8 (RSASHA256)
Modulus: {0}
PublicExponent: {1}
PrivateExponent: {2} 
Prime1: {3}
Prime2: {4}
Exponent1: {5}
Exponent2: {6}
Coefficient: {7}""""""

keystring = KEYVORLAGE.format(key.n,key.e,key.d,key.p,key.q,expo1,expo2,key.u)
print keystring

BTW: All my Key Parts generated by this script only has numbers and not random letters, like the valid key.
","my suggestion:
#!/usr/bin/python

import ldns

dnskey = ldns.ldns_key.new_frm_algorithm(ldns.LDNS_RSASHA256, 2048)
print(str(dnskey))
Private-key-format: v1.2
Algorithm: 8 (RSASHA256)
Modulus: tZqeHDj2fvrGZrrZ+t+8lJmbKijaBjyeKg+8ccWl6XuEolbP/L+0UaV6TOEzWOIPuA/4bGEUYJF0/ITY3s/m2X1Zaf5Tcr7OwbIGg8JlBB+WrJ1pd0n48vg1ivdh27OvTehwNA+dx04V0NN1oCF0aGGv0XoIhVpLu8NgMjs3K0ZWtwUGFhRYpSKKkdZXf08GolpnnjMS/WMEEPDWEUAEv5T2ys9EhVNc3zm2eE+kNxtrF3ueldz8JPZHxJbm2H50mYPSvQsIXFxjdMPErYvs6Xixa/YtucCHwLmpYRxSESlnxZ5AhcusxiiyCyxsF63yd3MpoI5C1X//xEhr6OB2iw==
PublicExponent: AQAB
PrivateExponent: A2AGRDwCyMVcXphmaLUzygc4zQXJV4hU4C8+r1afCMHU6zd10hq1/TZ4GWmuDJ7W7/LMCSecu1a4t+C4LxvqDGy59rBVWLKXIR5v5I7+VZ9Iq5iZVzA2wj0+sYB7fxvNzELfovgPVJ7s5N6pNvqoMTBvlhMQiXnuImU1KnnTQqiZ+Iegcc4v6R+WoJVysjVxcGa4gdjD5yiZej+gPGHMCJqUur4utYDb01p0VOm15gAbBiRQDhnS1xXLbyKv8svLr/NI1jEpkDeuLU7LbZJLFVB52YSZgRTfqAlKUY9oB7KHY4wjA8SxxqRBQ1gcEsAogSSasOhjLTuy6EnQ3RN4kQ==
Prime1: 5Pwr5q3MJshI1Jpy+XSQeP2zCNe1lgiqqiUmRWkpe02qUWovoGLdSQjfsyiS1Al4uj/TddNWoXHerUMCZgJ+3Q5SvrieHpJwsAfQH72a06FeBjbbf0xod4Jrs14zUeB1a0aNB+v6bI5CGkbTIh2339LcfYyWG8dw6t8iANLMb1c=
Prime2: ywdwP3liUR1FYC0ttmPU6A215FS5pwIQ6e09pGlygjbv1JmZ3w0dGhkhVJL8iZ5KnrcCEzwI44vdfAtu3QDt1c+Bn0RSD8BpTlTJdBkyHfzzwDoN2w1sFe/rGfvSYyncHNkf0Mqj8pdQ9tpW46XXH2aP+zVfH5FyrX0rOHSW1e0=
Exponent1: QamSSTbjSOe8AsM7Xw8u8pMFiO6aUqivj9TRUawjSgluYqRJfft7qxrRUwW6fPUuWnI9CBePSwJlMVf60xe6G1elIK2+IdQqXkAPTVrIkBFA7hVDAhD+D+8lRS0pGDx+T0HO5Uuk5wYwLGrM1oahGJzVv2bWEKczWRadIJFSMEc=
Exponent2: fRUAGpr173NRIoey+gNXT//iZ+Gq3zFuqi/3Iiu02HRwHVLkcX7qxwFkf25vF3nmDxJAvQjnkQjCU4HXs2C3JlrJSQ4WYI3yUsf5tQUw0zjcEzmw/5utU3aUKVXzsBRB/6Pk7gVqLDL9Npgdn/K0LixJ2EJxcElzlV7gGc/6faE=
Coefficient: 11MhOHYowmSXQGZhv4cJk9ZYupHuGbzqj+qv10xOuFWbvPGnkKAmuxUJ5MeYhFS/rZQ+VjroDh0sAPe7ycX1lyyn2KWH8/92tVoy77pnJvWyxBxZCKWFK2p1rGOfxhCjyyzOlQ071uv0CeloK1lsvlE9tJgseCcP4QQr9Qec6gA=

e.g. for use under debian (buster) you need to install the package python3-ldns.
","1227","<python><rsa><sha>","3","0","2","2019-09-24 16:43:07","","2","","474189","","2013-12-02 10:38:53","2013-12-02 08:48:03",""
"28251448","Hash function with ability to define its output generation length","I need to have a hash function in matlab which has capability to define its generated hashing length. For example, MD5 can generated hashing with length of 128 bits. However, I need to define various hashing function with designed lengths such as 10,16,20, ...
","Here's a possible solution if you employ the CalcMD5 package from FEX (Matlab File Exchange):
function hash = myhash(len, value)
% len: The desired hash length. Integer
% value: The value to hash. String.

% Set this to whatever hash length your native hash algorithm employs.
nativehashlength = 32;
if len <= nativehashlength
    % Using the CalcMD5 package to obtain MD5 hash
    hash = CalcMD5(value);
    hash = hash(1:len);
else
    % Could to a lot of stuff, but i choose to hash the repeated value
    runs = ceil(len/nativehashlength);
    hash = [];
    aggregated = value;
    for r = 1:runs
        % Compute hash and add to hash string
        hash = [hash CalcMD5(aggregated)]; %#ok
        % Update the aggregate
        aggregated = [aggregated value]; %#ok
    end
    hash = hash(1:len);
end
end

This also works for strings/char arrays of short length, e.g.
>> myhash(100,'hello')
ans = 5d41402abc4b2a76b9719d911017c59223b431acfeb41e15d466d75de822307c99fb31087791f6317ad7c6da1433f1729436
>> myhash(2,'world') 
ans =
7d

Of course, the hash of size 10 for 'hello' will equal the first ten hash characters of the size 20 hash of 'hello', but it was not asked to generate very different hash functions depending on the desired hash size. this could, however, be easily implemented by salting the value with the requested hash size, for example.
There's more on FEX regarding hashing of stuff in Matlab, e.g. here.
","1226","<matlab><hash><md5><hashcode><sha>","-1","0","1","2015-01-31 14:31:38","28252745","0","","","","","2015-01-31 12:12:52",""
"23959058","Generate SHA 256 Hash using multiple values in Java/Android","I have two objects based on which SHA 256 Hash needs to be generated.
First value is a JSONObject
Second value is a String variable.
Ideally, what i need is
Hash hash= new Hash(JSONObject, String);
I couldn't find any hash generation methods which takes two values.
Could anyone help me with this?.
","SHA 256 works on a byte array as input. You need to convert your JSONObject and your String to byte arrays, then calculate the SHA 256 hash on the concatenation of these byte arrays.
","1203","<java><android><hash><sha>","1","1","2","2014-06-11 02:09:05","","1","4","","","","2014-05-30 16:17:35",""
"23959058","Generate SHA 256 Hash using multiple values in Java/Android","I have two objects based on which SHA 256 Hash needs to be generated.
First value is a JSONObject
Second value is a String variable.
Ideally, what i need is
Hash hash= new Hash(JSONObject, String);
I couldn't find any hash generation methods which takes two values.
Could anyone help me with this?.
","The proper way of generating a sha256 hashcode using key and value
   public static String hashMac(String text, String secretKey)
                  throws SignatureException {

                 try {
                  Key sk = new SecretKeySpec(secretKey.getBytes(), HASH_ALGORITHM);
                  Mac mac = Mac.getInstance(sk.getAlgorithm());
                  mac.init(sk);
                  final byte[] hmac = mac.doFinal(text.getBytes());
                  return toHexString(hmac);
                 } catch (NoSuchAlgorithmException e1) {
                  // throw an exception or pick a different encryption method
                  throw new SignatureException(
                    ""error building signature, no such algorithm in device ""
                      + HASH_ALGORITHM);
                 } catch (InvalidKeyException e) {
                  throw new SignatureException(
                    ""error building signature, invalid key "" + HASH_ALGORITHM);
                 }
    }

    public static String toHexString(byte[] bytes) {  
            StringBuilder sb = new StringBuilder(bytes.length * 2);  

            Formatter formatter = new Formatter(sb);  
            for (byte b : bytes) {  
                formatter.format(""%02x"", b);  
            }  

            return sb.toString();  
        } 

","1203","<java><android><hash><sha>","1","0","2","2014-06-11 02:09:05","","1","4","","","","2014-05-30 16:17:35",""
"20522661","How to calculate a 256-bit HMAC_SHA3 hash with CryptoJS?","Recent CryptoJS versions support SHA3 hashing. 
SHA3 can output different hash sizes, including 512-bit (default) and 256-bit. These two work fine:
var sha3_512_hash = CryptoJS.SHA3( 'test' );
var sha3_256_hash = CryptoJS.SHA3( 'test' , { outputLength:256 } );

Similarly, CryptoJS can also calculate HMAC values. However, I can't figure out how to change the default output size there:
var sha3_512_hmac = CryptoJS.HmacSHA3( 'test' , 'key' );
var sha3_256_hmac = CryptoJS.HmacSHA3( 'test' , 'key' , { outputLength:256 } );

The first works OK (the result is a 512-bit hmac value) but the second is the same (i.e. also 512-bit), as if it ignores the {outputLength:256} parameter!
Here's a live example: http://jsfiddle.net/M8xf3/ (using hmac-sha3.js from CryptoJS 3.1.2)
Does anyone know how to create 256-bit SHA3-based HMAC hashes?
P.S. For the SHA2 family of functions, CryptoJS has separate Hmac functions for each output size (that's HmacSHA256 and HmacSHA512). But this doesn't seem to be the case for SHA3?
","This doesn't answer the actual question, but note that with SHA3 you don't really need HMAC hashes. Unlike SHA1 and SHA2 and MD5, SHA3 is not vulnerable to length-extension attacks.
Therefore with SHA3 it would suffice to just prepend or append the secret key to your input.
Or, if you're paranoid of a single hash step becoming compromised (not to be expected in the foreseeable future, especially not with SHA3, but still) you could do something like SHA3(key+SHA3(key+data)) or SHA3(key+SHA3(key+data)+data) (obviously with ""+"" denoting binary concatenation).
","1194","<hash><sha><hmac><cryptojs>","1","2","2","2014-05-19 16:16:11","","0","","1072269","","2013-12-11 15:35:47","2013-12-11 15:09:02",""
"20522661","How to calculate a 256-bit HMAC_SHA3 hash with CryptoJS?","Recent CryptoJS versions support SHA3 hashing. 
SHA3 can output different hash sizes, including 512-bit (default) and 256-bit. These two work fine:
var sha3_512_hash = CryptoJS.SHA3( 'test' );
var sha3_256_hash = CryptoJS.SHA3( 'test' , { outputLength:256 } );

Similarly, CryptoJS can also calculate HMAC values. However, I can't figure out how to change the default output size there:
var sha3_512_hmac = CryptoJS.HmacSHA3( 'test' , 'key' );
var sha3_256_hmac = CryptoJS.HmacSHA3( 'test' , 'key' , { outputLength:256 } );

The first works OK (the result is a 512-bit hmac value) but the second is the same (i.e. also 512-bit), as if it ignores the {outputLength:256} parameter!
Here's a live example: http://jsfiddle.net/M8xf3/ (using hmac-sha3.js from CryptoJS 3.1.2)
Does anyone know how to create 256-bit SHA3-based HMAC hashes?
P.S. For the SHA2 family of functions, CryptoJS has separate Hmac functions for each output size (that's HmacSHA256 and HmacSHA512). But this doesn't seem to be the case for SHA3?
","You can just edit hmac-sha3.js and change the outputLength to 256-bit instead of 512-bit.

Open hmac-sha3.js file, using your text editor.
Find ""{outputLength:512}"" and replace it with ""{outputLength:256}""

Then the hash output will be 256-bit in length.
To be sure that you did not messed up things, double check your 256-bit hmac-sha3 output with some test cases available on the internet, for example: http://www.di-mgt.com.au/hmac_sha3_testvectors.html
","1194","<hash><sha><hmac><cryptojs>","1","1","2","2014-05-19 16:16:11","","0","","1072269","","2013-12-11 15:35:47","2013-12-11 15:09:02",""
"47557136","Space & Time Complexity of SHA-2","I am wondering what the space and time complexity of SHA-2 is. I tried looking around, didn't really get a straight forward answer. Can anyone help me out? Thanks very much!
","","1187","<algorithm><hash><time-complexity><sha><space-complexity>","3","","0","2017-11-29 16:10:41","","3","1","","","","2017-11-29 16:10:41",""
"24541366","How can I convert Lua HMAC SHA256 digest to a hexadecimal string (creates Facebook appsecret_proof token)?","I've been spending time reading about the HTTPLuaModule for Nginx and find that there are some great ways developers have been able to SHA256 sign Amazon Web Services using a key and string. As a junior developer who is a Lua noob, I would like to use the HTTPLuaModule to generate Facebook appsecret_proof tokens. Currently I found that there is the LuaCrypto module for Lua to generate HMAC via SHA256 but it doesn't exactly match the implementation needed for Facebook's token: 

digest = crypto.hmac.digest('sha256', user-access-token, app-secret, true) ## what next to convert digest into hexadecimal string?

Unlike in the Amazon example above, the token doesn't need to be Base64 encode but instead the HMAC needs to be turned into a string of double length using only hexadecimal digits (hence hexidecimal!). 
In Python I can obtain the token with:

import hashlib
import hmac
token = hmac.new(app-secret, user-access-token, hashlib.sha256).hexadecimal()

Thoughts? Any better modules that have methods to convert digest's into hexadecimal strings?
","Should be as simple as:
local secretProof = digest:final()

source: http://mkottman.github.io/luacrypto/manual.html#reference
","1179","<facebook-graph-api><lua><hex><sha><sha256>","1","0","1","2014-07-03 00:11:54","24542167","0","","3011436","","2014-07-02 21:33:50","2014-07-02 21:30:59",""
"29864405","SHA 256 for android app","I have in PHP this method to call a security web service:
// token generator; date is UTC/GMT
$tokenNewInputData = date(""Y-m-d"");
$tokenNew = hash_hmac('sha256', $tokenNewInputData, KEY);
echo ‘token: ‘.$tokenNew;

where KEY it's ""password"" text.
I must use the same method into Android app for generate a security code in the same way and add this to a string for get call.
Can you help me please for an example to traslate this PHP code into Android code?
Thanks.
","write down below code.
MessageDigest md = MessageDigest.getInstance(""SHA-256"");
String text = ""This is some text"";
md.update(text.getBytes(""UTF-8"")); // Change this to ""UTF-16"" if needed
byte[] digest = md.digest();

","1172","<java><php><android><sha><ash>","0","0","1","2015-04-26 01:19:53","","1","3","2227834","","2015-04-26 01:19:53","2015-04-25 11:15:15","2015-04-26 07:20:29"
"39654631","How to get SHA1 fingerprint for debug mode in Android Studio 2.2","Earlier it was working fine by choosing Gradle--> signing report
For reference
Get Sha1 fingerprint
but in the latest stable version(2.2) its not generating by this process.
Please guide.
Thanks
","Alternate method:
Generate SHA1 in terminal by the following command
keytool -list -v -keystore c:\users\your_user_name\.android\debug.keystore -alias androiddebugkey -storepass android 

Link
","1168","<android><android-studio><sha>","1","1","3","2017-04-26 09:51:47","43630728","3","","-1","","2017-05-23 11:54:28","2016-09-23 07:04:41",""
"39654631","How to get SHA1 fingerprint for debug mode in Android Studio 2.2","Earlier it was working fine by choosing Gradle--> signing report
For reference
Get Sha1 fingerprint
but in the latest stable version(2.2) its not generating by this process.
Please guide.
Thanks
","This got me too - it's the Gradle Console you're looking for!

Mine was in the bottom right - yours could be somewhere else
UPDATE:
I also notice that you can view it in the Run console by selecting the ""Toggle task executions/text mode"" - this will take you from the output that tells you about the gradle execution process to the actual outputs and logs from that process. 
To all the people telling him to use keytool - he is looking for a way to do it within the IDE, not the first result you got when you googled..!
","1168","<android><android-studio><sha>","1","0","3","2017-04-26 09:51:47","43630728","3","","-1","","2017-05-23 11:54:28","2016-09-23 07:04:41",""
"39654631","How to get SHA1 fingerprint for debug mode in Android Studio 2.2","Earlier it was working fine by choosing Gradle--> signing report
For reference
Get Sha1 fingerprint
but in the latest stable version(2.2) its not generating by this process.
Please guide.
Thanks
","Aftre a research I found my answer i.e need to toggle task execution/text mode. For more clarification see the image :
","1168","<android><android-studio><sha>","1","1","3","2017-04-26 09:51:47","43630728","3","","-1","","2017-05-23 11:54:28","2016-09-23 07:04:41",""
"53969082","SQL Update Statement based on Procedure in SAP HANA","I'm creating an update statement that generate SHA256 for table columns based on table's name
1st Step: I created a procedure that get the table columns, concatenate it all in one columns, then format to a desired format. 
-- Procedure code : Extract table's columns list, conctenate it and format it

Create procedure SHA_PREP (in inp1 nvarchar(20))
as 
begin

SELECT concat(concat('hash_sha256(',STRING_AGG(A, ', ')),')')  AS Names
FROM (
    SELECT  concat('to_varbinary(IFNULL(""',concat(COLUMN_NAME,'"",''0''))')) as A
    FROM    SYS.TABLE_COLUMNS
    WHERE SCHEMA_NAME = 'SCHEMA_NAME' AND TABLE_NAME = :inp1
    AND COLUMN_NAME not in ('SHA')
    ORDER BY POSITION 
    );
end;

/* Result of this procedures : 
hash_sha256(
to_varbinary(""ID""),to_varbinary(IFNULL(""COL1"",'0')),to_varbinary(IFNULL(""COL2"",'0')) )
*/

-- Update Statement needed 

UPDATE ""SCHEMA_NAME"".""TABLE_NAME""
SET ""SHA"" = CALL ""SCHEMA_NAME"".""SHA_PREP""('SCHEMA_NAME')
WHERE ""ID"" = 99 -- a random filter

","I find a solution that suits my need, but maybe there's other easier or more suitable approchaes :
I added the update statement to my procedure, and inserted all the generated query into a temporary table column, the excuted it using EXECUTE IMMEDIATE 
Create procedure SHA_PREP (in inp1 nvarchar(20))
as 
begin
/* ********************************************************** */
DECLARE SQL_STR VARCHAR(5000);

-- Create a temporary table to store a query in
create local temporary table #temp1 (QUERY varchar(5000));
-- Insert the desirable query into the QUERY column (Temp Table)
insert into #temp1(QUERY)
SELECT concat('UPDATE ""SCHEMA_NAME"".""TABLE_NAME"" SET ""SHA"" =' ,concat(concat('hash_sha256(',STRING_AGG(A, ', ')),')'))
FROM (
    SELECT  concat('to_varbinary(IFNULL(""',concat(COLUMN_NAME,'"",''0''))')) as A
    FROM    SYS.TABLE_COLUMNS
    WHERE SCHEMA_NAME = 'SCHEMA_NAME' AND TABLE_NAME = :inp1
    AND COLUMN_NAME not in ('SHA')
    ORDER BY POSITION 
    );
end;
/* QUERY : UPDATE ""SCHEMA_NAME"".""TABLE_NAME"" SET ""SHA"" = 
hash_sha256(to_varbinary(""ID""),to_varbinary(IFNULL(""COL1"",'0')),to_varbinary(IFNULL(""COL2"",'0'))) */
SELECT QUERY into SQL_STR FROM ""SCHEMA_NAME"".#temp1;

--Excuting the query 
EXECUTE IMMEDIATE (:SQL_STR);

-- Dropping the temporary table 
DROP TABLE ""SCHEMA_NAME"".#temp1;

/* ********************************************************** */
end;

Any other solution or improvement are well welcomed 
Thank you
","1166","<sql><hash><sap><hana><sha>","0","0","2","2019-01-07 06:36:04","54069517","0","","","","","2018-12-29 11:24:35",""
"53969082","SQL Update Statement based on Procedure in SAP HANA","I'm creating an update statement that generate SHA256 for table columns based on table's name
1st Step: I created a procedure that get the table columns, concatenate it all in one columns, then format to a desired format. 
-- Procedure code : Extract table's columns list, conctenate it and format it

Create procedure SHA_PREP (in inp1 nvarchar(20))
as 
begin

SELECT concat(concat('hash_sha256(',STRING_AGG(A, ', ')),')')  AS Names
FROM (
    SELECT  concat('to_varbinary(IFNULL(""',concat(COLUMN_NAME,'"",''0''))')) as A
    FROM    SYS.TABLE_COLUMNS
    WHERE SCHEMA_NAME = 'SCHEMA_NAME' AND TABLE_NAME = :inp1
    AND COLUMN_NAME not in ('SHA')
    ORDER BY POSITION 
    );
end;

/* Result of this procedures : 
hash_sha256(
to_varbinary(""ID""),to_varbinary(IFNULL(""COL1"",'0')),to_varbinary(IFNULL(""COL2"",'0')) )
*/

-- Update Statement needed 

UPDATE ""SCHEMA_NAME"".""TABLE_NAME""
SET ""SHA"" = CALL ""SCHEMA_NAME"".""SHA_PREP""('SCHEMA_NAME')
WHERE ""ID"" = 99 -- a random filter

","The solution by @SonOfHarpy technically works but has several issues, namely:

unnecessary use of temporary tables
overly complicated string assignment approach
use of fixed system table schema (SYS.TABLE_COLUMNS) instead of PUBLIC synonym
wrong data type and variable name for the input parameter

An improved version of the code looks like this:
create procedure SHA_PREP (in TABLE_NAME nvarchar(256))
as 
begin
declare SQL_STR nvarchar(5000);

    SELECT 
          'UPDATE ""SCHEMA_NAME"".""TABLE_NAME"" SET ""SHA""= hash_sha256(' || STRING_AGG(A, ', ') || ')'
          into SQL_STR
    FROM (
        SELECT  
            'TO_VARBINARY(IFNULL(""'|| ""COLUMN_NAME"" ||'"",''0''))' as A
        FROM TABLE_COLUMNS
        WHERE 
                ""SCHEMA_NAME"" = 'SCHEMA_NAME' 
           AND ""TABLE_NAME"" = :TABLE_NAME
           AND ""COLUMN_NAME"" != 'SHA'
        ORDER BY POSITION 
        );

  --  select :sql_str from dummy; -- this is for debugging output only
    EXECUTE IMMEDIATE (:SQL_STR);
end; 

By changing the CONCAT functions to the shorter || (double-pipe) operator, the code becomes a lot easier to read as the formerly nested function calls are now simple chained concatenations.  
By using SELECT ... INTO variable the whole nonsense with the temporary table can be avoided, again, making the code easier to understand and less prone to problems.
The input parameter name now correctly reflects its meaning and mirrors the HANA dictionary data type for TABLE_NAME (NVARCHAR(256)). 
The procedure now consists of two commands (SELECT and EXECUTE IMMEDIATE) that each performs an essential task of the procedure:  

Building a valid SQL update command string. 
Executing the SQL command.

I removed the useless line-comments but left a debugging statement as a comment in the code, so that the SQL string can be reviewed without having to execute the command. 
For that to work, obviously, the EXECUTE... line needs to be commented out and the debugging line has to be uncommented.
What's more worrying than the construction of the solution is its purpose.
It looks as if the SHA column should be used as a kind of shorthand row-data fingerprint. The UPDATE approach certainly handles this as an after-thought activity but leaves the ""finger-printing"" for the time when the update gets executed.
Also, it takes an essential part of the table design (that the SHA column should contain the fingerprint) away from the table definition.
An alternative to this could be a GENERATED COLUMN:
create  table test (aaa int, bbb int);
alter table test add (sha varbinary (256) generated always as 
                        hash_sha256(to_varbinary(IFNULL(""AAA"",'0'))
                                 ,  to_varbinary(IFNULL(""BBB"",'0'))
                                    )
                       );

insert into test (aaa, bbb) values (12, 32);

select * from test;

/*
AAA BBB SHA                                                             
12  32  B6602F58690CA41488E97CD28153671356747C951C55541B6C8D8B8493EB7143
*/ 

With this, the ""generator"" approach could be used for table definition/modification time, but all the actual data handling would be automatically done by HANA, whenever values get changed in the table.
Also, no separate calls to the procedure will ever be necessary as the fingerprints will always be current.
","1166","<sql><hash><sap><hana><sha>","0","0","2","2019-01-07 06:36:04","54069517","0","","","","","2018-12-29 11:24:35",""
"25649718","sha-512 returning different value for same string","I am new to java security so it may sound stupid to you guys. I am using triple-des algorithm for encryption decryption in that i am using hash value as keys. I am using sha-512 for hashing i have heard that two same strings hash will be same but i am getting different output for same string. I am affixing the code of sha-512. Let me know what the problem is if possible.
public class SHA256Algo {

    public static String createHash(String text) throws UnsupportedEncodingException, NoSuchAlgorithmException 
    {
        String encryptedText = """" ;
        MessageDigest md = MessageDigest.getInstance(""SHA-512"");

        md.update(text.getBytes(""UTF-16"")); // Change this to ""UTF-16"" if needed
        byte[] digest = md.digest();
        String str = digest.toString() ;
        return str ;
    }

    public static void main(String[] args) {
        try {
            System.out.println(createHash(""tarun"")) ;
            System.out.println(createHash(""tarun"")) ;
        } catch (UnsupportedEncodingException | NoSuchAlgorithmException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }
}

output :
[B@32d2bb53
[B@29086036
","Arrays are objects too in Java, but they don't override Object's toString() method.  The output is not the hashed output, but the result of Object's toString() method.

[T]his method returns a string equal to the value of:

getClass().getName() + '@' + Integer.toHexString(hashCode())

The getClass().getName() is responsible for [B, then there is the @ character, and the rest of the characters are the hexadecimal hash code, also from Object.
You need to convert the byte array to a String in another way besides calling toString().  This may involve conversion of the byte array to Base 64 or to hexadecimal characters.
","1165","<java><sha><sha512><tripledes>","2","4","1","2014-09-03 16:54:18","25649771","2","3","","","","2014-09-03 16:51:42",""
"24303918","How to encrypt and decrypt a specific column in a file by using Perl?","I have log file like below,
NAME    ID      LOCATION
aa      12      in
bb      13      freak
cc      14      test

I want to encrypt and as well as decrypt the field ""LOCATION"". How to do that by using any Encryption module in Perl ?
Since I'm new to Perl, help me .
","Use Crypt::CBC
A sample script
#!/usr/bin/perl
use strict;
use Crypt::CBC;

unless (scalar @ARGV == 3) {
    die ""Usage: $0 encrypt|decrypt|en|de \$mysecretkey \$file_to_dencrypt"";
}

my $type = shift @ARGV;
my $key = shift @ARGV;
my $file = shift @ARGV;

die ""The first ARGV should be one of de, en, encrypt, decrypt"" if ($type !~ /^(en|de)(crypt)?$/);
die ""the file $file is not existence"" unless (-f $file);

my $DEBUG = 1;

print ""type is $type, key is $key, file is $file\n"" if $DEBUG;

my $cipher = Crypt::CBC->new(
    -key    => $key,
    -cipher => 'Blowfish'
);

local $/;
open(FH, $file) or die $!;
flock(FH, 2);
my $data = <FH>;
close(FH);

my ($save_data, $save_file);
if ($type =~ /^en(crypt)?$/) {
    $save_data = $cipher->encrypt($data);
    $save_file = $file . '.encrypt';
} else {
    $save_data = $cipher->decrypt($data);
    $save_file = $file . '.decrypt';
}

open(FH, '>', $save_file) or die $!;
print FH $save_data;
close(FH);

if (-e $save_file) {
    print ""$type file $file to $save_file OK\n"";
} else {
    print ""failed without reason\n"";
}

","1161","<perl><encryption><md5><sha>","1","1","1","2014-06-19 10:15:48","","0","","","","","2014-06-19 10:03:15",""
"15209045","PBKDF2 security key in android","I get from server password like show below and i need to verify that user password is same like form server. How can i do it please?
From server i got this
pbkdf2_sha256$10000$v2WJyd8HkqhU$QVAp707PYTiFDHvzjwBCTbecr9+6q2OIPsunPyOxXGU=

","So BouncyCastle(the crypto provider in Andorid) doesn't implement PBKDF2 using SHA256, so you will have to get very slightly custom.  This SO answer tells you which class to modify to get the algorithm set up.  Then you will need to integrate it, or figure out how to call it yourself (and I'm afraid I can't help much on that)
as far as the hash itself goes the format (as defined here) is:
<algorithm>$<iteration count>$<salt>$<hash>

where in your case the iteration count is 10000, your salt is the ascii string v2WJyd8HkqhU and the the hash is the byte array represented by the base64 string QVAp707PYTiFDHvzjwBCTbecr9+6q2OIPsunPyOxXGU=
You will compute the hash of the utf8 string of the password with the parameters specified.  Then, you can either base64 encode the output of the hash and compare the strings, or base64 decode the recieved hash and compare the byte arrays.  Apache Commons Codec provides some good Base64 encoding/decoding methods in its Base64 class.
","1158","<android><security><encryption><sha><pbkdf2>","1","1","1","2013-03-04 21:45:29","","7","","","","","2013-03-04 19:02:06","2013-03-05 00:38:43"
"37123904","How do you transition from MD5 authentication to SHA1 for NTP?","Does anyone know how to transition authentications on NTP? I've done copious amounts of research, none being fruitful. For example, NTP currently using MD5, how do you move over to SHA1?
","You can have multiple keys one next to the other.
SO:

first add the new key everywhere
delete the old key once it's added everywhere.

","1155","<authentication><md5><sha1><sha><ntp>","2","0","2","2017-07-20 19:29:20","","0","","","","","2016-05-09 19:28:16",""
"37123904","How do you transition from MD5 authentication to SHA1 for NTP?","Does anyone know how to transition authentications on NTP? I've done copious amounts of research, none being fruitful. For example, NTP currently using MD5, how do you move over to SHA1?
","NTP if compiled along with OPENSSL libraries, then NTP uses OPENSSL libraries for cryptographic operations.
Then you can use different types of message digest algorithms supported by OPENSSL. This is a link which explains configuring ntp key file.
The key file where the keys will be present should be added to the /etc/ntp.conf file.
The keys to be used for generating the digest will be present under
/etc/ntp/keys . This path should be added to /etc/ntp.conf file to specify that this is the keys file.
The structure of the entry in the file will be 
  
This is an example of the keys file
You can mention the keytype as ""SHA1"" to use SHA1 authentication.
Further details about the length of the digest and keys can be found here:
https://www.eecis.udel.edu/~mills/ntp/html/authentic.html
","1155","<authentication><md5><sha1><sha><ntp>","2","1","2","2017-07-20 19:29:20","","0","","","","","2016-05-09 19:28:16",""
"11326899","git check if file exists on HEAD with SHA?","I need to check if a file exists on the most recent commit (HEAD). I have been doing this with
git cat-file -e HEAD:path/to/file

but I realized this could be problematic if the file has been moved or renamed. Is there a way to check a file based on the SHA? I tried
git cat-file -e SHA

but it seems to search all commits, not just the most recent.
Based on Alan Curry’s answer this seems to work
git ls-tree -r HEAD | grep SHA

","You could parse the output of git ls-tree -r HEAD
","1153","<git><sha>","4","1","1","2013-04-23 18:09:49","11327054","1","1","-1","","2017-05-23 12:04:43","2012-07-04 10:07:23",""
"46933008","Error Generating Certificate SHA-1","I'm trying to integrate my app with the Google API. For this you need to provide the sha-1 of the signing certificate.
At the command prompt, I use the following command provided by Google:
keytool -exportcert -list -v \
-alias <your-key-name> -keystore <path-to-production-keystore>

With this, I get the following error:
erro de keytool: java.lang.Exception: O arquivo da área de armazenamento de chaves não existe. %shang%\.android\debug.keystore
java.lang.Exception: O arquivo da área de armazenamento de chaves não existe. %shang%\.android\debug.keystore
        at sun.security.tools.keytool.Main.doCommands(Main.java:745)
        at sun.security.tools.keytool.Main.run(Main.java:343)
        at sun.security.tools.keytool.Main.main(Main.java:336)

However, the debug.keystore file exists.

","You can generate the SHA-1 key from the studio itself, without using the terminal like this :

Click on gradle placed at right side of the studio



Click on refreshAllGradleProjects button
go to app
android
doble click on signingReport

SHA-1 key will be generated. 
","1135","<android><google-api><keystore><sha>","0","0","2","2018-02-24 06:19:07","46933290","2","","","","","2017-10-25 12:52:30",""
"46933008","Error Generating Certificate SHA-1","I'm trying to integrate my app with the Google API. For this you need to provide the sha-1 of the signing certificate.
At the command prompt, I use the following command provided by Google:
keytool -exportcert -list -v \
-alias <your-key-name> -keystore <path-to-production-keystore>

With this, I get the following error:
erro de keytool: java.lang.Exception: O arquivo da área de armazenamento de chaves não existe. %shang%\.android\debug.keystore
java.lang.Exception: O arquivo da área de armazenamento de chaves não existe. %shang%\.android\debug.keystore
        at sun.security.tools.keytool.Main.doCommands(Main.java:745)
        at sun.security.tools.keytool.Main.run(Main.java:343)
        at sun.security.tools.keytool.Main.main(Main.java:336)

However, the debug.keystore file exists.

","For SHA1 Debug Key  , run below command in android studio terminal. 
Mac/Linux :
 keytool -exportcert -list -v \
-alias androiddebugkey -keystore ~/.android/debug.keystore

Windows :
 keytool -exportcert -list -v \
-alias androiddebugkey -keystore %USERPROFILE%\.android\debug.keystore

Replace the %USERPROFILE% with your user path . 
The Password is default : android 
","1135","<android><google-api><keystore><sha>","0","1","2","2018-02-24 06:19:07","46933290","2","","","","","2017-10-25 12:52:30",""
"12804551","I'm using MD5 to hash passwords. When should I jump to the next thing? SHA-3?","On the 2nd of October NIST decided that SHA-3 is the new standard hashing algorithm.
Should MD5 users start migrating to SHA-3? To something else (see below why SHA-3 is not recommended)? bcrypt? 
Why Not {MD5, SHA1, SHA256, SHA512, SHA-3, etc}?
And, is this really critical? Even if your password is salted?
","The main reason not to use MD5 for hashing passwords is not the fact that MD5 is severely compromised or even considered broken.
It’s true, MD5 has known vulnerabilities. But none of them do pose a serious threat to your use of MD5. Because in your case the only threat would be a preimage attack where an attacker would try to find a preimage of a known hash, e.g. the password to a known (salted) password hash. And the probably known preimage attack against MD5 is only theoretical and lowers the effort from 2128 to 2123.4, which is no big advantage. A brute-force attack with an average of 264 is still more promising.
No, the main reason not to use MD5 is because MD5 is too fast. With a todays affordable computer you can generate and test 7190M MD5 hashes per second. All 8 characters long combinations of alphanumeric characters can be brute-forced in about 8.5 hours, no matter whether with or without salt.
In contrast to that, with the hash function like bcrypt $2a$ one can only generate and test 4085 hashes per second, so only 0.00005682 % of the number of MD5 hashes. With bcrypt $2a$ you would need 1694 years for the same attempt.
","1126","<security><encryption><passwords><md5><sha>","-1","7","1","2015-12-31 18:04:03","","18","1","","","","2012-10-09 16:37:46","2016-01-01 09:43:07"
"20270081","Java how to do sha256 hashing equiavelent to php crypt function ? result is not the same?","I am using this http://raginggoblin.wordpress.com/2012/08/11/java-alternative-to-php-crypt-function/  for the equivalent of php crypt function or does it says here that it is...
But I have the same value in java and in php but the hashing result is different.. I was wondering if not hashing is different because its not executed the same way ? I post this two values to a WS.
JAVA:


 String doc_data=""{\""table\"":\""1048582\""}"";
 String data=""$5$rounds=5000$503$La071hYxZERff9GGq0cb.x2k96Xx25\/C4vxQztQ7B96"";
 String result=Crypt.crypt(doc_data, data);

PHP: 
 $params['result'] = crypt($params['doc_data'], @$this->initdata['data']);

I logged it and I put the exact data in from POST... but the result is not the same.. There is no way to do this right ? or there is no equivalent?
Before that library I used Guava..but still not the same
public static String crypt_sha256(String password, String salt) {
        int iteration_count = 5000;
        HashFunction func = Hashing.sha256();
        HashCode result = func.hashString(salt + param1, Charsets.UTF_8);

        for (int i = 0; i < iteration_count; i++) {
            result = func.hashBytes(result.asBytes());
        }

        return salt + result.toString();

}

","Oke, so far I tested a few library's and the Winner is Apache's Crypt.
http://commons.apache.org/proper/commons-codec/apidocs/org/apache/commons/codec/digest/Crypt.html
public static String crpyt_sha256_apache(String param1, String salt) {

        return Crypt.crypt(param1, salt);
    }

","1123","<java><php><hash><sha><sha256>","0","0","1","2013-11-29 13:03:08","20286510","2","","","","","2013-11-28 15:43:01",""
"6328472","GIT SHA id of a file on remote git branch","I would like to know if there is any command available to get the SHA id of a particular file on a given specific git branch on the GIT remote server?
Thanks,
Srinivas
","git lsremote is one of the few commands running against a remote repo, as explained in ""Show git logs for range of commits on remote server?"".
But it will only display SHA1 on refs (tags, branches, ...), not a specific file.
For a file, you need first to fetch the remote repo, and then you can query your information on a specific file.
","1122","<git><commit><sha>","1","2","2","2011-06-14 05:14:21","6339367","0","","","","","2011-06-13 09:05:47",""
"6328472","GIT SHA id of a file on remote git branch","I would like to know if there is any command available to get the SHA id of a particular file on a given specific git branch on the GIT remote server?
Thanks,
Srinivas
","Thanks for the reply..
I got below command working to meet my scenario for now.. but trying to see if there is any direct command to find the latest ID of a file on remote server...

git log 'branch-name' -- 'file-name'

which displaying log messages with ID, Author and Date.. I am fetching the top first line with unix pipe head command.

git log 'branch-name' -- 'file-name' | head -1

","1122","<git><commit><sha>","1","0","2","2011-06-14 05:14:21","6339367","0","","","","","2011-06-13 09:05:47",""
"50226112","How to calculate SHA-256 checksum of S3 file content","S3 out of the box provides the MD5 checksum of the S3 object content. But I need to calculate the SHA-256 checksum of the file content. The file could be large enough so I do not want to load the file in memory and calculate the checksum, instead I need a solution to calculate the checksum without loading the whole file in memory.
","It can be achieved by following steps in Java:

Get InputStream of the S3 Object
Use MessageDigest and DigestInputStream classes for the SHA-256 hash(or SHA-1 or MD5)

Following is the snippet on how to do it:
String getS3FileHash(AmazonS3 amazonS3, String s3bucket, String filePath) {
    try {
        InputStream inputStream = amazonS3.getObject(s3bucket, filePath).getObjectContent();
        MessageDigest messageDigest = MessageDigest.getInstance(""SHA-256"");
        DigestInputStream digestInputStream = new DigestInputStream(inputStream, messageDigest);
        byte[] buffer = new byte[4096];
        int count = 0;
        while (digestInputStream.read(buffer) > -1) {
            count++;
        }
        log.info(""total read: "" + count);
        MessageDigest digest = digestInputStream.getMessageDigest();
        digestInputStream.close();
        byte[] md5 = digest.digest();
        StringBuilder sb = new StringBuilder();
        for (byte b: md5) {
            sb.append(String.format(""%02X"", b));
        }
        return sb.toString().toLowerCase();
    } catch (Exception e) {
        log.error(e);
    }
    return null; 
}

","1119","<java><amazon-web-services><amazon-s3><checksum><sha>","1","2","1","2018-05-10 13:39:14","50226113","0","1","","","","2018-05-08 04:58:23",""
"44893645","Facebook Messenger Verify X-Hub-Signature of Shared Location","I'm adding X-Hub verification to my messenger app. I learned about it here: https://developers.facebook.com/docs/messenger-platform/webhook-reference
I've successfully gotten verification to work with simple text messages, but when I send a location instead of a text message, verification fails because the hash I generate and the hash Facebook gives me in the header do not match. Here is my verification code:
module.exports.requestIsValid = function(event) {
    if (event['headers']['X-Hub-Signature']) {
        var sha     = event['headers']['X-Hub-Signature']
        var body    = JSON.stringify(event.body);
        return sha == `sha1=${crypto.createHmac('sha1', config.APP_SECRET).update(body).digest('hex')}`;
    }

    return false;   // this return is never called, I know that the first return is the one returning false when it should be true
 }

Here is an example of a regular text message payload:
{""body"":{""object"":""page"",""entry"":[{""id"":""1366222643461024"",""time"":1499114399253,""messaging"":[{""sender"":{""id"":""1582085681843981""},""recipient"":{""id"":""1366222643461024""},""timestamp"":1499114399084,""message"":{""mid"":""mid.$cAASAZhi0_wRjO3OtbFdCi5lV2qe4"",""seq"":52192,""text"":""Test""}}]}]},""method"":""POST"",""principalId"":""offlineContext_authorizer_principalId"",""headers"":{""X-Real-Ip"":""173.252.88.182"",""X-Forwarded-For"":""173.252.88.182"",""Host"":""test.localtunnel.me"",""X-Forwarded-Proto"":""https"",""X-Nginx-Proxy"":""true"",""Connection"":""close"",""Content-Length"":""270"",""Accept"":""/"",""Accept-Encoding"":""deflate, gzip"",""Content-Type"":""application/json"",""X-Hub-Signature"":""sha1=0f51d788fe5f1111846097ad016728cdcd06029f""},""query"":{},""path"":{},""identity"":{""accountId"":""offlineContext_accountId"",""apiKey"":""offlineContext_apiKey"",""caller"":""offlineContext_caller"",""cognitoAuthenticationProvider"":""offlineContext_cognitoAuthenticationProvider"",""cognitoAuthenticationType"":""offlineContext_cognitoAuthenticationType"",""sourceIp"":""127.0.0.1"",""user"":""offlineContext_user"",""userAgent"":"""",""userArn"":""offlineContext_userArn""},""stageVariables"":{},""isOffline"":true}
And here is an example of a payload with a location:
{""body"":{""object"":""page"",""entry"":[{""id"":""1366222643461024"",""time"":1499114451619,""messaging"":[{""sender"":{""id"":""1582085681843981""},""recipient"":{""id"":""1366222643461024""},""timestamp"":1499114451469,""message"":{""mid"":""mid.$cAASAZhi0_wRjO3R6DVdCi8v9yqk0"",""seq"":52196,""attachments"":[{""title"":""Brandon's Location"",""url"":""https://l.facebook.com/l.php?u=https%3A%2F%2Fwww.bing.com%2Fmaps%2Fdefault.aspx%3Fv%3D2%26pc%3DFACEBK%26mid%3D8100%26where1%3D35.142236316764%252C%2B-106.53531087607%26FORM%3DFBKPL1%26mkt%3Den-US&h=ATOu8uYrLDiFl6wG8RVfhXvwkMl7uB_l2MHqB_uKLhk8qC9p1ua0EOLpGkznVX7Y8YfxSXP7vDuAR7swPmDCw1esH2bwKhNNsZKxVPC2ViC2AFMO_g&s=1&enc=AZMYxff8btvCZWHtzUR4oFL7K2Mg6nXM_O_tRXXL-L8z508UAOauiSRztoRvWdlGCWU1dNRdNK1ls2CGulM8lvzR"",""type"":""location"",""payload"":{""coordinates"":{""lat"":35.142236316764,""long"":-106.53531087607}}}]}}]}]},""method"":""POST"",""principalId"":""offlineContext_authorizer_principalId"",""headers"":{""X-Real-Ip"":""173.252.90.239"",""X-Forwarded-For"":""173.252.90.239"",""Host"":""test.localtunnel.me"",""X-Forwarded-Proto"":""https"",""X-Nginx-Proxy"":""true"",""Connection"":""close"",""Content-Length"":""911"",""Accept"":""/"",""Accept-Encoding"":""deflate, gzip"",""Content-Type"":""application/json"",""X-Hub-Signature"":""sha1=34f23436b2744b9b0cc8776922e7386c454786db""},""query"":{},""path"":{},""identity"":{""accountId"":""offlineContext_accountId"",""apiKey"":""offlineContext_apiKey"",""caller"":""offlineContext_caller"",""cognitoAuthenticationProvider"":""offlineContext_cognitoAuthenticationProvider"",""cognitoAuthenticationType"":""offlineContext_cognitoAuthenticationType"",""sourceIp"":""127.0.0.1"",""user"":""offlineContext_user"",""userAgent"":"""",""userArn"":""offlineContext_userArn""},""stageVariables"":{},""isOffline"":true}
Happy to provide extra info if needed.
UPDATE:
Upon furthere inspection it appears that the verifcation only fails when there is an ""attatchments"" field in the payload. So if also fails when I send a picture or gif or something like that.
","You should apply the SHA1 algorithm to the 'raw request body'. If you parse body and convert it back to json; it may not work.
","1118","<facebook><security><postback><sha><facebook-messenger>","0","1","2","2018-05-21 07:05:48","","2","","6692781","","2017-07-03 20:49:51","2017-07-03 20:43:23",""
"44893645","Facebook Messenger Verify X-Hub-Signature of Shared Location","I'm adding X-Hub verification to my messenger app. I learned about it here: https://developers.facebook.com/docs/messenger-platform/webhook-reference
I've successfully gotten verification to work with simple text messages, but when I send a location instead of a text message, verification fails because the hash I generate and the hash Facebook gives me in the header do not match. Here is my verification code:
module.exports.requestIsValid = function(event) {
    if (event['headers']['X-Hub-Signature']) {
        var sha     = event['headers']['X-Hub-Signature']
        var body    = JSON.stringify(event.body);
        return sha == `sha1=${crypto.createHmac('sha1', config.APP_SECRET).update(body).digest('hex')}`;
    }

    return false;   // this return is never called, I know that the first return is the one returning false when it should be true
 }

Here is an example of a regular text message payload:
{""body"":{""object"":""page"",""entry"":[{""id"":""1366222643461024"",""time"":1499114399253,""messaging"":[{""sender"":{""id"":""1582085681843981""},""recipient"":{""id"":""1366222643461024""},""timestamp"":1499114399084,""message"":{""mid"":""mid.$cAASAZhi0_wRjO3OtbFdCi5lV2qe4"",""seq"":52192,""text"":""Test""}}]}]},""method"":""POST"",""principalId"":""offlineContext_authorizer_principalId"",""headers"":{""X-Real-Ip"":""173.252.88.182"",""X-Forwarded-For"":""173.252.88.182"",""Host"":""test.localtunnel.me"",""X-Forwarded-Proto"":""https"",""X-Nginx-Proxy"":""true"",""Connection"":""close"",""Content-Length"":""270"",""Accept"":""/"",""Accept-Encoding"":""deflate, gzip"",""Content-Type"":""application/json"",""X-Hub-Signature"":""sha1=0f51d788fe5f1111846097ad016728cdcd06029f""},""query"":{},""path"":{},""identity"":{""accountId"":""offlineContext_accountId"",""apiKey"":""offlineContext_apiKey"",""caller"":""offlineContext_caller"",""cognitoAuthenticationProvider"":""offlineContext_cognitoAuthenticationProvider"",""cognitoAuthenticationType"":""offlineContext_cognitoAuthenticationType"",""sourceIp"":""127.0.0.1"",""user"":""offlineContext_user"",""userAgent"":"""",""userArn"":""offlineContext_userArn""},""stageVariables"":{},""isOffline"":true}
And here is an example of a payload with a location:
{""body"":{""object"":""page"",""entry"":[{""id"":""1366222643461024"",""time"":1499114451619,""messaging"":[{""sender"":{""id"":""1582085681843981""},""recipient"":{""id"":""1366222643461024""},""timestamp"":1499114451469,""message"":{""mid"":""mid.$cAASAZhi0_wRjO3R6DVdCi8v9yqk0"",""seq"":52196,""attachments"":[{""title"":""Brandon's Location"",""url"":""https://l.facebook.com/l.php?u=https%3A%2F%2Fwww.bing.com%2Fmaps%2Fdefault.aspx%3Fv%3D2%26pc%3DFACEBK%26mid%3D8100%26where1%3D35.142236316764%252C%2B-106.53531087607%26FORM%3DFBKPL1%26mkt%3Den-US&h=ATOu8uYrLDiFl6wG8RVfhXvwkMl7uB_l2MHqB_uKLhk8qC9p1ua0EOLpGkznVX7Y8YfxSXP7vDuAR7swPmDCw1esH2bwKhNNsZKxVPC2ViC2AFMO_g&s=1&enc=AZMYxff8btvCZWHtzUR4oFL7K2Mg6nXM_O_tRXXL-L8z508UAOauiSRztoRvWdlGCWU1dNRdNK1ls2CGulM8lvzR"",""type"":""location"",""payload"":{""coordinates"":{""lat"":35.142236316764,""long"":-106.53531087607}}}]}}]}]},""method"":""POST"",""principalId"":""offlineContext_authorizer_principalId"",""headers"":{""X-Real-Ip"":""173.252.90.239"",""X-Forwarded-For"":""173.252.90.239"",""Host"":""test.localtunnel.me"",""X-Forwarded-Proto"":""https"",""X-Nginx-Proxy"":""true"",""Connection"":""close"",""Content-Length"":""911"",""Accept"":""/"",""Accept-Encoding"":""deflate, gzip"",""Content-Type"":""application/json"",""X-Hub-Signature"":""sha1=34f23436b2744b9b0cc8776922e7386c454786db""},""query"":{},""path"":{},""identity"":{""accountId"":""offlineContext_accountId"",""apiKey"":""offlineContext_apiKey"",""caller"":""offlineContext_caller"",""cognitoAuthenticationProvider"":""offlineContext_cognitoAuthenticationProvider"",""cognitoAuthenticationType"":""offlineContext_cognitoAuthenticationType"",""sourceIp"":""127.0.0.1"",""user"":""offlineContext_user"",""userAgent"":"""",""userArn"":""offlineContext_userArn""},""stageVariables"":{},""isOffline"":true}
Happy to provide extra info if needed.
UPDATE:
Upon furthere inspection it appears that the verifcation only fails when there is an ""attatchments"" field in the payload. So if also fails when I send a picture or gif or something like that.
","Your bodyParserJSON should return rawBody:
bodyParser.json({
    verify(req, res, buf) {
      req.rawBody = buf;
    },
})

Here is a middleware that I've written. It uses crypto module to generate sha1
fbWebhookAuth: (req, res, next) => {
    const hmac = crypto.createHmac('sha1', process.env.FB_APP_SECRET);
    hmac.update(req.rawBody, 'utf-8');
    if (req.headers['x-hub-signature'] === `sha1=${hmac.digest('hex')}`) next();
    else res.status(400).send('Invalid signature');
}

and finally in your route you can use it as:
app.post('/webhook/facebook', middlewares.fbWebhookAuth, facebook.webhook);

","1118","<facebook><security><postback><sha><facebook-messenger>","0","0","2","2018-05-21 07:05:48","","2","","6692781","","2017-07-03 20:49:51","2017-07-03 20:43:23",""
"31219986","The sha module is deprecated","I am playing with SIPVicious (python)
So I have a dedicated server centos 6.6. When I run the script, I get this error:

/root/1/fphelper.py:134: DeprecationWarning: the sha module is deprecated; use the hashlib module instead
import sha, re 

When I used this command.  

rpm -qa | grep python

Here is what was appeared:
rpm-python-4.8.0-38.el6_6.x86_64
dbus-python-0.83.0-6.1.el6.x86_64
gnome-python2-2.28.0-3.el6.x86_64
gnome-python2-canvas-2.28.0-3.el6.x86_64
libreport-python-2.0.9-21.el6.centos.x86_64
gnome-python2-applet-2.28.0-5.el6.x86_64
gnome-python2-gconf-2.28.0-3.el6.x86_64
gnome-python2-bonobo-2.28.0-3.el6.x86_64
python-urlgrabber-3.9.1-9.el6.noarch
python-tools-2.6.6-52.el6.x86_64
newt-python-0.52.11-3.el6.x86_64
python-ethtool-0.6-5.el6.x86_64
python-pycurl-7.19.0-8.el6.x86_64
python-docs-2.6.6-2.el6.noarch
gnome-python2-libegg-2.25.3-20.el6.x86_64
python-iwlib-0.1-1.2.el6.x86_64
libxml2-python-2.7.6-17.el6_6.1.x86_64
gnome-python2-gnome-2.28.0-3.el6.x86_64
python-iniparse-0.3.1-2.1.el6.noarch
gnome-python2-libwnck-2.28.0-5.el6.x86_64
libproxy-python-0.3.0-10.el6.x86_64
python-2.6.6-52.el6.x86_64
gnome-python2-gnomevfs-2.28.0-3.el6.x86_64
gnome-python2-desktop-2.28.0-5.el6.x86_64
gnome-python2-extras-2.25.3-20.el6.x86_64
abrt-addon-python-2.0.8-26.el6.centos.x86_64
at-spi-python-1.28.1-2.el6.centos.x86_64
python-libs-2.6.6-52.el6.x86_64
python-devel-2.6.6-52.el6.x86_64

Please help me how to fix this.
","You are receiving this warning since there was a change in Python standard library. The functionaliy of the sha module has been merged with other hash algorithms into the hashlib. The warning notifies you that the old module is used by the code and that it should be changed to the new library.
See https://docs.python.org/2/library/hashlib.html on how you can change your code to use the hashlib.
","1112","<python><sip><centos6><sha><hashlib>","1","2","1","2016-04-11 21:45:52","31220068","2","","1564659","","2016-04-11 21:45:52","2015-07-04 11:18:58",""
"38872060","Convert hash string to binary file","What would be the easiest way to convert the text produced by utilities such as sha512sum into a binary file?
I'd like to convert hex string like 77f4de214a5423e3c7df8704f65af57c39c55f08424c75c0931ab09a5bfdf49f5f939f2caeff1e0113d9b3d6363583e4830cf40787100b750cde76f00b8cd3ec (example produced by sha512sum) into a binary file (64 bytes long), in which each byte's value would be equivalent to a pair of letters/digits from the string. I'm looking for a solution that would require minimal amount of tools, so I'd be happy if this can be done easily with bash, sed or some utility from coreutils. I'd rather avoid xxd, as this doesn't seem to handle such string anyway (I'd have to add ""addresses"" and some whitespace).
I need the hash as a binary file, to convert it into an object file and link with the application that I'm writing. If there's another way to embed such string (in a binary form!) into application (via an array or whatever) - it's also a solution for me.
","A bit of sed and echo might do:
for i in $(echo 77f4de214a5423e3c7df8704f65af57c39c55f08424c75c0931ab09a5bfdf49f5f939f2caeff1e0113d9b3d6363583e4830cf40787100b750cde76f00b8cd3ec | sed 's/../& /g'); do
   echo -ne ""\x$i""
done > output.bin

The sed command is splitting the hex string into bytes and the echo shows it as hexadecimal character.
Or in a shorter form with sha512sum output, as suggested in the comment:
echo -ne ""$(sha512sum some-file.txt | sed 's/ .*$//; s/../\\x&/g')""

","1111","<bash><shell><sed><hex><sha>","0","4","4","2016-08-10 12:20:59","38872334","0","","","","","2016-08-10 11:21:49",""
"38872060","Convert hash string to binary file","What would be the easiest way to convert the text produced by utilities such as sha512sum into a binary file?
I'd like to convert hex string like 77f4de214a5423e3c7df8704f65af57c39c55f08424c75c0931ab09a5bfdf49f5f939f2caeff1e0113d9b3d6363583e4830cf40787100b750cde76f00b8cd3ec (example produced by sha512sum) into a binary file (64 bytes long), in which each byte's value would be equivalent to a pair of letters/digits from the string. I'm looking for a solution that would require minimal amount of tools, so I'd be happy if this can be done easily with bash, sed or some utility from coreutils. I'd rather avoid xxd, as this doesn't seem to handle such string anyway (I'd have to add ""addresses"" and some whitespace).
I need the hash as a binary file, to convert it into an object file and link with the application that I'm writing. If there's another way to embed such string (in a binary form!) into application (via an array or whatever) - it's also a solution for me.
","If you have node:
node -e ""var fs = require('fs'); fs.writeFileSync('binary', new Buffer('77f4de214a5423e3c7df8704f65af57c39c55f08424c75c0931ab09a5bfdf49f5f939f2caeff1e0113d9b3d6363583e4830cf40787100b750cde76f00b8cd3ec', 'hex'))""

","1111","<bash><shell><sed><hex><sha>","0","1","4","2016-08-10 12:20:59","38872334","0","","","","","2016-08-10 11:21:49",""
"38872060","Convert hash string to binary file","What would be the easiest way to convert the text produced by utilities such as sha512sum into a binary file?
I'd like to convert hex string like 77f4de214a5423e3c7df8704f65af57c39c55f08424c75c0931ab09a5bfdf49f5f939f2caeff1e0113d9b3d6363583e4830cf40787100b750cde76f00b8cd3ec (example produced by sha512sum) into a binary file (64 bytes long), in which each byte's value would be equivalent to a pair of letters/digits from the string. I'm looking for a solution that would require minimal amount of tools, so I'd be happy if this can be done easily with bash, sed or some utility from coreutils. I'd rather avoid xxd, as this doesn't seem to handle such string anyway (I'd have to add ""addresses"" and some whitespace).
I need the hash as a binary file, to convert it into an object file and link with the application that I'm writing. If there's another way to embed such string (in a binary form!) into application (via an array or whatever) - it's also a solution for me.
","How about perl:
<<<77f4de214a5423e3c7df8704f65af57c39c55f08424c75c0931ab09a5bfdf49f5f939f2caeff1e0113d9b3d6363583e4830cf40787100b750cde76f00b8cd3ec \
perl -e 'print pack ""H*"", <STDIN>' > hash.bin

","1111","<bash><shell><sed><hex><sha>","0","1","4","2016-08-10 12:20:59","38872334","0","","","","","2016-08-10 11:21:49",""
"38872060","Convert hash string to binary file","What would be the easiest way to convert the text produced by utilities such as sha512sum into a binary file?
I'd like to convert hex string like 77f4de214a5423e3c7df8704f65af57c39c55f08424c75c0931ab09a5bfdf49f5f939f2caeff1e0113d9b3d6363583e4830cf40787100b750cde76f00b8cd3ec (example produced by sha512sum) into a binary file (64 bytes long), in which each byte's value would be equivalent to a pair of letters/digits from the string. I'm looking for a solution that would require minimal amount of tools, so I'd be happy if this can be done easily with bash, sed or some utility from coreutils. I'd rather avoid xxd, as this doesn't seem to handle such string anyway (I'd have to add ""addresses"" and some whitespace).
I need the hash as a binary file, to convert it into an object file and link with the application that I'm writing. If there's another way to embed such string (in a binary form!) into application (via an array or whatever) - it's also a solution for me.
","If you have openssl in your system and want a sha512 hash in binary form, you can use this:
openssl dgst -sha512 -binary somefile.txt

","1111","<bash><shell><sed><hex><sha>","0","1","4","2016-08-10 12:20:59","38872334","0","","","","","2016-08-10 11:21:49",""
"15229380","How to modify ""SHA1"" in my released keystore app","I made my app using appsgeyser of which was version0.1. 
I made the same app with more features on phonegap and updated my version to 0.2.
 Everything goes fine 
BUT 
while uploading my apk to google store under the same app 
it says that my SHA1 is modified and I have to use the same certificate. 
what shall I do? 
Thanks 
","Play store requires .apk to be signed before you can publish it there.
If you've made an app with AppsGeyser and published it to Play then your application is signed by the AppsGeyser private keys (unless you've explicitly signed the .apk before publising it or if you've provided your secret keystore to AppsGeyser which is unlikely).
AppsGeyser wont give you their keystore and you need it to be able to sign new version of your software. Here is the quote from docs about this:

Your private key is required for signing all future versions of your application. If you lose or misplace your key, you will not be able to publish updates to your existing application. You cannot regenerate a previously generated key.

In other words you have 2 options here. Either stick with AppsGeyser and update your app using their services or publish update to your application as a whole new appliation.
","1102","<google-play><publishing><sha>","0","0","1","2013-12-07 13:33:37","","0","","1856738","","2013-03-05 16:45:19","2013-03-05 16:42:34",""
"11874473","Can MurmurHash3 hash a block of data in multiple parts (incrementally)?","I would like to use MurmurHash3 to uniquely identify large pieces of data. This implementation:
http://code.google.com/p/smhasher/source/browse/trunk/MurmurHash3.h
Doesn't seem to provide a way to update the hash incrementally, though--it seems to compute one separate hash per block of data given. For example, if I were hashing 512MB of data from disk I might not want to load it all in memory at once, or if I were hashing an unknown amount of data from the network. Has anyone ever used MurmurHash3 in such a context before (hashing a large amount of data incrementally)? If you could point me to some resources or an alternate implementation, that would be great :). I am looking for something similar to SHA256_Update from OpenSSL.
Thanks!
","See http://code.google.com/p/smhasher/source/browse/trunk/PMurHash.h and http://code.google.com/p/smhasher/source/browse/trunk/PMurHash.c for an example of progressive hashing using MurmurHash3.
","1097","<c++><sha><murmurhash>","0","5","1","2012-08-08 23:35:51","11874764","0","","","","","2012-08-08 23:02:48",""
"28827957","OpenSSL SHA256 Wrong result","I have following piece of code that is supposed to calculate the SHA256 of a file. I am reading the file chunk by chunk and using EVP_DigestUpdate for the chunk. When I test the code with the file that has content
Test Message
 Hello World

in Windows, it gives me SHA256 value of 97b2bc0cd1c3849436c6532d9c8de85456e1ce926d1e872a1e9b76a33183655f but the value is supposed to be 318b20b83a6730b928c46163a2a1cefee4466132731c95c39613acb547ccb715, which can be verified here too.
Here is the code:
#include <openssl\evp.h>
#include <iostream>
#include <string>
#include <fstream>
#include <cstdio>
const int MAX_BUFFER_SIZE = 1024;
std::string FileChecksum(std::string, std::string);
int main()
{
    std::string checksum = FileChecksum(""C:\\Users\\Dell\\Downloads\\somefile.txt"",""sha256"");
    std::cout << checksum << std::endl;
    return 0;
}

std::string FileChecksum(std::string file_path, std::string algorithm)
{
     EVP_MD_CTX *mdctx;
     const EVP_MD *md;
     unsigned char md_value[EVP_MAX_MD_SIZE];
     int i;
     unsigned int md_len;

     OpenSSL_add_all_digests();
     md = EVP_get_digestbyname(algorithm.c_str());

     if(!md) {
            printf(""Unknown message digest %s\n"",algorithm);
            exit(1);
     }

     mdctx = EVP_MD_CTX_create();
     std::ifstream readfile(file_path,std::ifstream::in|std::ifstream::binary);
     if(!readfile.is_open())
     {
         std::cout << ""COuldnot open file\n"";
         return 0;
     }
     readfile.seekg(0, std::ios::end);
     long filelen = readfile.tellg();
     std::cout << ""LEN IS "" << filelen << std::endl;
     readfile.seekg(0, std::ios::beg);
     if(filelen == -1)
     {
         std::cout << ""Return Null \n"";
         return 0;
     }

     EVP_DigestInit_ex(mdctx, md, NULL);
     long temp_fil = filelen;
     while(!readfile.eof() && readfile.is_open() && temp_fil>0)
     {

         int bufferS = (temp_fil < MAX_BUFFER_SIZE) ? temp_fil : MAX_BUFFER_SIZE;
         char *buffer = new char[bufferS+1];
         buffer[bufferS] = 0;
         readfile.read(buffer, bufferS);
         std::cout << strlen(buffer) << std::endl;
         EVP_DigestUpdate(mdctx, buffer, strlen(buffer));
         temp_fil -= bufferS;
         delete[] buffer;
     }
     EVP_DigestFinal_ex(mdctx, md_value, &md_len);
     EVP_MD_CTX_destroy(mdctx);

     printf(""Digest is: "");
     //char *checksum_msg = new char[md_len];
     //int cx(0);
     for(i = 0; i < md_len; i++)
     {
        //_snprintf(checksum_msg+cx,md_len-cx,""%02x"",md_value[i]);
         printf(""%02x"", md_value[i]);
     }
     //std::string res(checksum_msg);
     //delete[] checksum_msg;

     printf(""\n"");

     /* Call this once before exit. */
     EVP_cleanup();
     return """";
}

I tried to write the hash generated by program as string using _snprintf but it didn't worked. How can I generate the correct hash and return the value as string from FileChecksum Function? Platform is Windows.
EDIT:  It seems the problem was because of CRLF issue. As Windows in saving file using \r\n, the Checksum calculated was different. How to handle this?
","MS-DOS used the CR-LF convention,So basically while saving the file in windows, \r\n comes in effect for carriage return and newline. And while testing on online (given by you),  only  \n character comes in effect. 
Thus either you have to check the checksum of Test Message\r\nHello World\r\n in string which is equivalent to creating and reading file in windows(as given above), which is the case here. 
However, the checksum of files,wherever created, will be same.
Note: your code works fine :) 
","1087","<c++><windows><openssl><sha>","0","0","2","2015-03-03 11:07:11","28830140","2","1","2634612","","2015-03-03 10:02:04","2015-03-03 09:14:47",""
"28827957","OpenSSL SHA256 Wrong result","I have following piece of code that is supposed to calculate the SHA256 of a file. I am reading the file chunk by chunk and using EVP_DigestUpdate for the chunk. When I test the code with the file that has content
Test Message
 Hello World

in Windows, it gives me SHA256 value of 97b2bc0cd1c3849436c6532d9c8de85456e1ce926d1e872a1e9b76a33183655f but the value is supposed to be 318b20b83a6730b928c46163a2a1cefee4466132731c95c39613acb547ccb715, which can be verified here too.
Here is the code:
#include <openssl\evp.h>
#include <iostream>
#include <string>
#include <fstream>
#include <cstdio>
const int MAX_BUFFER_SIZE = 1024;
std::string FileChecksum(std::string, std::string);
int main()
{
    std::string checksum = FileChecksum(""C:\\Users\\Dell\\Downloads\\somefile.txt"",""sha256"");
    std::cout << checksum << std::endl;
    return 0;
}

std::string FileChecksum(std::string file_path, std::string algorithm)
{
     EVP_MD_CTX *mdctx;
     const EVP_MD *md;
     unsigned char md_value[EVP_MAX_MD_SIZE];
     int i;
     unsigned int md_len;

     OpenSSL_add_all_digests();
     md = EVP_get_digestbyname(algorithm.c_str());

     if(!md) {
            printf(""Unknown message digest %s\n"",algorithm);
            exit(1);
     }

     mdctx = EVP_MD_CTX_create();
     std::ifstream readfile(file_path,std::ifstream::in|std::ifstream::binary);
     if(!readfile.is_open())
     {
         std::cout << ""COuldnot open file\n"";
         return 0;
     }
     readfile.seekg(0, std::ios::end);
     long filelen = readfile.tellg();
     std::cout << ""LEN IS "" << filelen << std::endl;
     readfile.seekg(0, std::ios::beg);
     if(filelen == -1)
     {
         std::cout << ""Return Null \n"";
         return 0;
     }

     EVP_DigestInit_ex(mdctx, md, NULL);
     long temp_fil = filelen;
     while(!readfile.eof() && readfile.is_open() && temp_fil>0)
     {

         int bufferS = (temp_fil < MAX_BUFFER_SIZE) ? temp_fil : MAX_BUFFER_SIZE;
         char *buffer = new char[bufferS+1];
         buffer[bufferS] = 0;
         readfile.read(buffer, bufferS);
         std::cout << strlen(buffer) << std::endl;
         EVP_DigestUpdate(mdctx, buffer, strlen(buffer));
         temp_fil -= bufferS;
         delete[] buffer;
     }
     EVP_DigestFinal_ex(mdctx, md_value, &md_len);
     EVP_MD_CTX_destroy(mdctx);

     printf(""Digest is: "");
     //char *checksum_msg = new char[md_len];
     //int cx(0);
     for(i = 0; i < md_len; i++)
     {
        //_snprintf(checksum_msg+cx,md_len-cx,""%02x"",md_value[i]);
         printf(""%02x"", md_value[i]);
     }
     //std::string res(checksum_msg);
     //delete[] checksum_msg;

     printf(""\n"");

     /* Call this once before exit. */
     EVP_cleanup();
     return """";
}

I tried to write the hash generated by program as string using _snprintf but it didn't worked. How can I generate the correct hash and return the value as string from FileChecksum Function? Platform is Windows.
EDIT:  It seems the problem was because of CRLF issue. As Windows in saving file using \r\n, the Checksum calculated was different. How to handle this?
","It seems the problem was associated with the value of length I passed in  EVP_DigestUpdate. I had passed value from strlen, but replacing it with bufferS did fixed the issue. 
The code was modified as:
while(!readfile.eof() && readfile.is_open() && temp_fil>0)
{
  int bufferS = (temp_fil < MAX_BUFFER_SIZE) ? temp_fil : MAX_BUFFER_SIZE;
  char *buffer = new char[bufferS+1];
  buffer[bufferS] = 0;
  readfile.read(buffer, bufferS);
  EVP_DigestUpdate(mdctx, buffer, bufferS);
  temp_fil -= bufferS;
  delete[] buffer;
}

and to send the checksum string, I modified the code as:
EVP_DigestFinal_ex(mdctx, md_value, &md_len);
EVP_MD_CTX_destroy(mdctx);
char str[128] = { 0 };
char *ptr = str;
std::string ret;
for(i = 0; i < md_len; i++)
 {
    //_snprintf(checksum_msg+cx,md_len-cx,""%02x"",md_value[i]);
     sprintf(ptr,""%02x"", md_value[i]);
     ptr += 2;
 }

ret = str;
/* Call this once before exit. */
EVP_cleanup();
return ret;

As for the wrong checksum earlier, the problem was associated in how windows keeps the line feed. As suggested by Zangetsu, Windows was making text file as CRLF, but linux and the site I mentioned earlier was using LF. Thus there was difference in the checksum value. For files other than text, eg dll the code now computes correct checksum as string
","1087","<c++><windows><openssl><sha>","0","0","2","2015-03-03 11:07:11","28830140","2","1","2634612","","2015-03-03 10:02:04","2015-03-03 09:14:47",""
"31778618","What is wrong with my SHA256 hash function?","I am writing this function in a Windows application that  generates a SHA-256 hash of some text. The code compiles and runs fine, but seems to produce incorrect output.
char GSalt[17] = { 0 };

HRESULT SaltHashAndStorePassword(_In_ char* PlainTextPassword)
{
    HCRYPTPROV CryptProvider = NULL;
    HCRYPTHASH HashPointer = NULL;

    char PlainTextPasswordWithSalt[64] = { 0 };

    strcat_s(PlainTextPasswordWithSalt, PlainTextPassword);
    strcat_s(PlainTextPasswordWithSalt, GSalt); 

    if (CryptAcquireContext(&CryptProvider, NULL, NULL, PROV_RSA_AES, CRYPT_VERIFYCONTEXT) == FALSE)
    {
        return(E_FAIL);
    }

    if (CryptCreateHash(CryptProvider, CALG_SHA_256, 0, 0, &HashPointer) == FALSE)
    {
        CryptReleaseContext(CryptProvider, 0);
        return(E_FAIL);
    }

    if (CryptHashData(HashPointer, (BYTE*)PlainTextPasswordWithSalt, (DWORD)strlen(PlainTextPasswordWithSalt), 0) == FALSE)
    {
        CryptDestroyHash(HashPointer);
        CryptReleaseContext(CryptProvider, 0);
        return(E_FAIL);
    }

    BYTE HashBytes[32] = { 0 };
    DWORD HashSize = 32;

    if (CryptGetHashParam(HashPointer, HP_HASHVAL, HashBytes, &HashSize, 0) == FALSE)
    {
        CryptDestroyHash(HashPointer);
        CryptReleaseContext(CryptProvider, 0);
        return(E_FAIL);
    }

    char *Hex = ""0123456789abcdef"";
    char HashString[65] = { 0 };

    for (int Count = 0; Count < 32; Count++)
    {
        HashString[Count * 2] = Hex[HashBytes[Count] >> 4];
        HashString[(Count * 2) + 1] = Hex[HashBytes[Count] & 0xF];
    }

    CryptDestroyHash(HashPointer);
    CryptReleaseContext(CryptProvider, 0);

    return(S_OK);
}

Here is a screenshot from a Visual Studio debugging session, showing the current variable values while this function is being run.

So as you can see, I am attempting to generate a SHA-256 hash of the text 
food@Jt/+iI?{?n\\}L(
But the resulting hash comes out as 
7804d488ccc172d87314474fb7f9951ec554cac33232bf2efc081afd323ca563
Which isn't correct based on the other SHA256 calculators I've tested with.
What am I doing wrong?
","I've just checked, and the Visual Studio 2013 debugger shows single backslashes as double backslashes in character strings.  (Visual Studio 2010 does not.)
So the string you are actually hashing is
food@Jt/+iI?{?n\}L(

for which the result you are getting is correct.
","1083","<c><windows><winapi><hash><sha>","2","4","1","2015-08-03 02:51:59","31778781","5","","","","","2015-08-03 02:28:59",""
"23235612","Dockerfile works when every line run interactively, but fails using docker build","I have a simple Dockerfile that downloads the node.js source tarball, checksums it, extracts it, builds and installs it.  The checksum works when manually run in an interactive docker container, but fails when running the exact same commands when building a Dockerfile.
Works:

docker run -i -t ubuntu:12.04 /bin/bash
cd /tmp
apt-get update -y
apt-get install wget build-essential automake -y
wget http://nodejs.org/dist/latest/node-v0.10.26.tar.gz
wget http://nodejs.org/dist/latest/SHASUMS256.txt
sha256sum -c SHASUM256.txt 2>&1|grep -qs OK
tar -xvf node-v0.10.26.tar.gz && cd node-v0.10.26
./configure && make && make install

Doesn't work:

sudo docker build -t=""my_docker_node_image_01"" .

Error is:
sudo docker build -t=""my_docker_node_image_01"" .                                        
Uploading context 7.168 kB
Uploading context 
Step 0 : FROM ubuntu:12.04
 ---> 9cd978db300e
Step 1 : RUN cd /tmp
 ---> Using cache
 ---> 0467ad75bbd6
Step 2 : RUN apt-get update -y
 ---> Using cache
 ---> d2933f250090
Step 3 : RUN apt-get install wget build-essential automake -y
 ---> Using cache
 ---> e8a71b28782a
Step 4 : RUN wget http://nodejs.org/dist/latest/node-v0.10.26.tar.gz
 ---> Using cache
 ---> bae7de7b46f7
Step 5 : RUN wget http://nodejs.org/dist/latest/SHASUMS256.txt
 ---> Using cache
 ---> 245f6b6ceb84
 ---> 77532c879864
Step 6 : RUN sha256sum -c SHASUM256.txt 2>&1|grep -qs OK
 ---> Running in 77765e80f55b
2014/04/22 22:27:32 The command [/bin/sh -c sha256sum -c SHASUM256.txt 2>&1|grep -qs OK] returned a non-zero code: 1

I tried adding less SHASUMS256.txt to the Dockerfile just to confirm that file is successfully downloaded uncorrupted, and it is, but still getting the error anyway.
I'm not sure how to troubleshoot this since normally I would just manually run all the steps in an interactive container to see what goes wrong.  Any suggestions much appreciated.
","I think I figured this out and it's just a typo, at least when I cut and paste your commands above! You download SHASUMS256.txt but test against a file called SHASUM256.txt (missing the S). Because you throw away the output and pipe it to grep, you weren't seeing that error. 
$ sha256sum -c SHASUM256.txt 
sha256sum: SHASUM256.txt: No such file or directory

$ sha256sum -c SHASUM256.txt 2>&1|grep -qs OK
$ echo $?
1

Doing an echo $? tells you the return code of the last command executed (in this case 1). By correcting the file, it works for me now:
 $ sha256sum -c SHASUMS256.txt 2>&1|grep -qs OK
 $ echo $?
 0

","1078","<build><checksum><docker><sha>","0","1","1","2014-04-24 19:15:56","23277870","2","1","","","","2014-04-23 05:37:16",""
"13269606","Signature/Hash Choice for File Integrity Verification","For a file repository, I need to select a hashing algorithm that will reasonably ensure the integrity of files. 
I need an algorithm that anyone (with a bit of effort) would be able to easily use to verify the integrity given the hash. In short, the file may be transferred to the user, along with a hash, and they must be able to verify that the hash comes from the file. 
My first choice would be MD5 because there seems to be widely available utilities to verify MD5 hashes, but I'm concerned with the MD5 algorithm being cryptographically broken (ref Wikipedia/US-CERT: http://en.wikipedia.org/wiki/MD5)
My second choice would be a SHA-2 algorithm, but I'm concerned about availability of utilities that could easily verify the hash. Most examples I've found show program code to evaluate a hash, but I've found few, if any, utilities that are pre-built (asking users to build their own utility is beyond the 'easily' scope)
What other options are available for generating and evaluating a file hash, or are these two the options that are best?
","Provide both/multiple, and let the user decide which they verify against. Or if they are really cautious, they can verify against both/all.
Have seen download sites use this approach. One site recommended the most secure, but offered others like md5 as fallback. It also provided links to tools. Can't remember specific site I'm afraid.
","1071","<security><hash><sha>","1","2","3","2013-05-17 18:52:41","13269717","11","","","","","2012-11-07 12:15:03",""
"13269606","Signature/Hash Choice for File Integrity Verification","For a file repository, I need to select a hashing algorithm that will reasonably ensure the integrity of files. 
I need an algorithm that anyone (with a bit of effort) would be able to easily use to verify the integrity given the hash. In short, the file may be transferred to the user, along with a hash, and they must be able to verify that the hash comes from the file. 
My first choice would be MD5 because there seems to be widely available utilities to verify MD5 hashes, but I'm concerned with the MD5 algorithm being cryptographically broken (ref Wikipedia/US-CERT: http://en.wikipedia.org/wiki/MD5)
My second choice would be a SHA-2 algorithm, but I'm concerned about availability of utilities that could easily verify the hash. Most examples I've found show program code to evaluate a hash, but I've found few, if any, utilities that are pre-built (asking users to build their own utility is beyond the 'easily' scope)
What other options are available for generating and evaluating a file hash, or are these two the options that are best?
","Since you've been able to find a few file-checkers, why not link to them as a recommendation? That way your users have at least one tool they can use. They don't need several dozen different filechecking utilities, they need just one which works for the algo you chose to use.
Tools you could link to:
Windows: http://securityxploded.com/download-hash-verifier.php
Mac OS X: http://www.macupdate.com/app/mac/31781/checksum
","1071","<security><hash><sha>","1","0","3","2013-05-17 18:52:41","13269717","11","","","","","2012-11-07 12:15:03",""
"13269606","Signature/Hash Choice for File Integrity Verification","For a file repository, I need to select a hashing algorithm that will reasonably ensure the integrity of files. 
I need an algorithm that anyone (with a bit of effort) would be able to easily use to verify the integrity given the hash. In short, the file may be transferred to the user, along with a hash, and they must be able to verify that the hash comes from the file. 
My first choice would be MD5 because there seems to be widely available utilities to verify MD5 hashes, but I'm concerned with the MD5 algorithm being cryptographically broken (ref Wikipedia/US-CERT: http://en.wikipedia.org/wiki/MD5)
My second choice would be a SHA-2 algorithm, but I'm concerned about availability of utilities that could easily verify the hash. Most examples I've found show program code to evaluate a hash, but I've found few, if any, utilities that are pre-built (asking users to build their own utility is beyond the 'easily' scope)
What other options are available for generating and evaluating a file hash, or are these two the options that are best?
","sha256sum, a program a part of the coreutils package on linux will generate checksums for the listed files. The format of the checksum output is the same as that of the md5sum program (but using SHA-256 hashing instead of MD5 of course), which has been widely used for years. You didn't list any target platforms but a quick googling shows there are Windows ports of the command line program.
If you need to generate large numbers of checksums you can use md5deep, which includes support for other hashes as well, including SHA-256.
http://md5deep.sourceforge.net/
I haven't tried this but from the screenshots it looks pretty neat integrating into OSX and Windows Explorer: http://implbits.com/HashTab.aspx
","1071","<security><hash><sha>","1","0","3","2013-05-17 18:52:41","13269717","11","","","","","2012-11-07 12:15:03",""
"19975198","JSON generate unique hash value (SHA-512)","I'm searching for a way to generate a SHA-512 hash from a json string in Ruby, independent from the positions of the elements in it, and independent from nestings, arrays, nested arrays and so on. I just want to hash the raw data along with its keys.
I tried some approaches with converting the JSON into a ruby hash, deep sort them by their keys, append everything into one, long string and hash it. But I bet that my solution isn't the most efficient one, and that there must be a better way to do this.
EDIT
So far, I convert JSON into a Ruby hash. Then I try to use this function to get a canonical representation:
  def self.canonical_string_from_hash value, key=nil
    str = """"
    if value.is_a? Hash
      value.keys.sort.each do |k|
        str += canonical_string_from_hash(value[k], k)
      end
    elsif value.is_a? Array
      str += key.to_s
      value.each do |v|
        str += canonical_string_from_hash(v)
      end
    else
      str += key ? ""#{key}#{value}"" : value.to_s
    end
    return str
  end

But I'm not sure, if this is a good and efficient way to do this.
For example, this hash
hash = {
  id: 3,
  zoo: ""test"",
  global: [
    {ukulele: ""ringding"", blub: 3},
    {blub: nil, ukulele: ""rangdang"", guitar: ""stringstring""}
  ],
  foo: {
    ids: [3,4,5],
    bar: ""asdf""
  }
}

gets converted to this string:
barasdfids345globalblub3ukuleleringdingblubguitarstringstringukulelerangdangid3zootest

","
But I'm not sure, if this is a good and efficient way to do this.

Depends on what you are trying to do. Your canonical/equivalent structures need to represent what is important to you for the comparison. Removing details such as object structure makes sense if you consider two items with different structure but same string values equivalent.
According to your comments, you are attempting to sign a request that is being transferred from one system to a second one. In other words you want security, not a measure of similarity or a digital fingerprint for some other purpose. Therefore equivalent requests are ones that are identical in all the ways that affect the processing that you want to protect. It is simpler, and very likely more secure, to lock down the raw bytes of data that transfer between your two systems.
In which case your whole approach needs a re-think. The reasons for that are probably best discussed on security.stackoverflow.com
However, in brief:

Use an HMAC routine (HMAC-SHA512), it is designed for your purpose. Instead of a salt, this uses a secret, which is essentially the same thing (in fact you need to keep your salt a secret in your implementation too, which is unusual for something called a salt), but has been combined with the SHA in a way which makes it resilient to a couple of attack forms possible against simple concatenation followed by SHA. The worst of these is that it is possible to extend the data and have it generate the same SHA when processed, without needing to know the salt. In other words, an attacker could take a known valid request and use it to forge other requests which will get past your security check. Your proposed solution looks vulnerable to this form of attack to me.
Unpacking the request and analysing the details to get a ""canonical"" view of the request is not necessary, and also reduces the security of your solution. The only reason for doing this is that you are for some reason not able to handle the request once it has been serialised to JSON, and are forced to work only with the de-serialised request at one end or another of the two systems. If that is purely a knowledge or convenience thing, then fix that problem rather than trying to roll your own security protocol using SHA-512.
You should sign the request, and check the signature, against the fully serialised JSON string. If you need to de-serialise data from a ""man-in-the-middle"" attack, then you are potentially already exposed to some attacks via the parser. You should work to reject suspect requests before any data processing has been done to them.

TL;DR - ALthough not a direct answer to your question, the correct solution for you is to not write this code at all. Instead you need to place your secure signature code closer to the ins and outs of your two services that need to trust each other.
","1070","<ruby><json><hash><sha><sha512>","1","1","1","2013-11-15 08:58:17","19980095","6","","228370","","2013-11-14 12:55:03","2013-11-14 10:26:32",""
"35333872","pysha3 not giving the right answer","With the following code,
# $ pip install pysha3
import sys
if sys.version_info < (3, 4):
    import sha3

import hashlib

s = hashlib.new(""sha3_512"")

s.update(b"""")
print(s.hexdigest())

I am getting 
0eab42de4c3ceb9235fc91acffe746b29c29a8c366b7c60e4e67c466f36a4304c00fa9caf9d87976ba469bcbe06713b435f091ef2769fb160cdab33d3670680e

instead of
a69f73cca23a9ac5c8b567dc185a756e97c982164fe25859e0d1dcc1475c80a615b2123af1f5f94c11e3e9402c3ac558f500199d95b6d3e301758586281dcd26

cf. https://en.wikipedia.org/wiki/SHA-3#Examples_of_SHA-3_variants
Could anyone advise me?
","The pysha3 module you found was based on an draft of the SHA-3 specification, before it was standardised.
The module was created as a POC for Python issue 16113, and the code has not been updated since 2012. The NIST standard wasn't finalised until October 2015. As such, the implementation can't be used if you expect it to follow the released standard.
That ticket links to an implementation that does claim to have been updated to the standard: https://github.com/bjornedstrom/python-sha3. That package doesn't appear to be listed on PyPI, but can be installed with pip directly from GitHub:
pip install git+https://github.com/bjornedstrom/python-sha3

and this package does produce the expected result:
>>> import hashlib
>>> import sha3
>>> hashlib.sha3_512(b'').hexdigest()
b'a69f73cca23a9ac5c8b567dc185a756e97c982164fe25859e0d1dcc1475c80a615b2123af1f5f94c11e3e9402c3ac558f500199d95b6d3e301758586281dcd26'

This package doesn't patch the built-in hashlib.new() constructor, but that's easily done by plugging in the constructor into the module cache:
>>> hashlib.__builtin_constructor_cache['sha3_512'] = sha3.sha3_512
>>> hashlib.new('sha3_512')
<sha3.SHA3512 object at 0x10b381a90>

","1066","<python><sha><sha-3>","2","3","2","2017-01-29 18:45:09","35334325","5","","100297","","2016-02-11 08:13:28","2016-02-11 08:08:37",""
"35333872","pysha3 not giving the right answer","With the following code,
# $ pip install pysha3
import sys
if sys.version_info < (3, 4):
    import sha3

import hashlib

s = hashlib.new(""sha3_512"")

s.update(b"""")
print(s.hexdigest())

I am getting 
0eab42de4c3ceb9235fc91acffe746b29c29a8c366b7c60e4e67c466f36a4304c00fa9caf9d87976ba469bcbe06713b435f091ef2769fb160cdab33d3670680e

instead of
a69f73cca23a9ac5c8b567dc185a756e97c982164fe25859e0d1dcc1475c80a615b2123af1f5f94c11e3e9402c3ac558f500199d95b6d3e301758586281dcd26

cf. https://en.wikipedia.org/wiki/SHA-3#Examples_of_SHA-3_variants
Could anyone advise me?
","SHA3 has been added to the built-in hashlib module in Python 3.6:

What’s New In Python 3.6
The SHA-3 hash functions sha3_224(), sha3_256(), sha3_384(),
  sha3_512(), and SHAKE hash functions shake_128() and shake_256() were
  added. (Contributed by Christian Heimes in issue 16113. Keccak Code
  Package by Guido Bertoni, Joan Daemen, Michaël Peeters, Gilles Van
  Assche, and Ronny Van Keer.)

It can be used in the follow way:
>>> import sys
>>> import hashlib
>>> s = hashlib.new(""sha3_512"")    # sha3_224, sha3_256 and sha3_384 are also available
>>> s.update(b"""")
>>> print(s.hexdigest())
a69f73cca23a9ac5c8b567dc185a756e97c982164fe25859e0d1dcc1475c80a615b2123af1f5f94c11e3e9402c3ac558f500199d95b6d3e301758586281dcd26

","1066","<python><sha><sha-3>","2","0","2","2017-01-29 18:45:09","35334325","5","","100297","","2016-02-11 08:13:28","2016-02-11 08:08:37",""
"22976617","OpenCL SHA1 Throughput Optimisation","Hoping someone more experienced in OpenCL usage may be able to help me here!!  I'm doing a project (to help me learn a bit more crypto and to try my hand at GPGPU programming) where I'm trying to implement my own SHA1 algo. Ultimately my question is about maximizing my throughput rates - at present I'm seeing something like 56.1 MH/sec, which compares very badly to OpenSource programs I've looked at, such as John the Ripper and OCLHashcat, which are giving 1000 and 1500 MH/sec respectively (heck, I'd be well-chuffed with a 3rd of that!).
So, what I'm doing; I've written a SHA1 implementation in an OpenCL kernel and a C++ host application to load data to the GPU (using CL 1.2 C++ wrapper).  I'm generating blocks of candidate data to hash in a threaded fashion on the CPU and loading this data onto the global GPU memory using the CL C++ call to enqueueWriteBuffer (using uchars to represent the bytes to hash):
    errorCode = dispatchQueue->enqueueWriteBuffer(
        inputBuffer,
        CL_FALSE,//CL_TRUE,
        0,
        sizeof(cl_uchar) * inputBufferSize,
        passwordBuffer,
        NULL,
        &dispatchDelegate);

I'm en-queuing data using enqueueNDRangeKernel in the following manner (where global  worksize is a user-defined variable, at present I've set this to my GPUs maximum flattened global worksize of 16.777 million per run):
errorCode = dispatchQueue->enqueueNDRangeKernel(
    *kernel,
    NullRange,
    NDRange(globalWorkgroupSize, 1), 
    NullRange, 
    NULL,
    NULL);

Meaning, that per dispatch, I load 16.777 million items in a 1D array and index from my kernel into this using get_global_offset(0).  My Kernel signature:
__kernel void sha1Crack(__global uchar* out, __global uchar* in, 
                        __constant int* passLen, __constant int* targetHash, 
                        __global bool* collisionFound)
{
    //Kernel Instance Global GPU Mem IO Mapping:
    __private int id = get_global_id(0);
    __private int inputIndexStart = id * passwordLen;

    //Select Password input key space:
    #pragma unroll
    for (i = 0; i < passwordLen; i++)
    {
        inputMem[i] = in[inputIndexStart + i];
    }

    //SHA1 Code omitted for brevity...
}

So, given this, am I doing something fundamentally wrong in the way I'm loading data? i.e. 1 call to enqueueNDrange for 16.7 million kernel executions over a 1D input vector? (should I be using a 2D space and sub-dividing into localworkgroup ranges? - I tried playing with this but it didn't seem quicker). 
Or, perhaps as likely is my algorithm itself the source of slowness (I've spent a good while optimizing it and manually unrolling all of the loop stages using pre-processor directives etc)?
I've read about memory coalescing on the hardware, is that my issue? :S
Any advice at all appreciated!  If I've missed anything important please let me know and I'll update.
Thanks in advance! ;)

Update: 16,777,216 is the device maximum reported workgroup size; 256**3. The global array of boolean values is one boolean.  It's set to false at the start of the kernel enqueue, then a branching statement sets this to true if a collision is found only - will that force a convergence? passwordLen is the length of the current input value and target hash is an int[4] encoded hash to check against.
","Your 'maximum flattened global worksize' should be multiplied by passwordLen. It is the number of kernels you can run, not the maximal length of an input array. You can most likely send much more data than this to the GPU.
Other potential issues: the 'generating blocks of candidate data to hash in a threaded fashion on the CPU', try doing this in advance of the kernel iterations to see whether the delay is in the generation of the data blocks or in the processing of the kernels; your sha1 algorithm is the other obvious potential issue. I'm not sure how much you've really optimised it by 'unrolling' the loops, usually the bigger optimisation issue is 'if' statements (if a single kernel instance within a workgroup tests to true then all of the lockstepped workgroup instances must follow that branch in parallel).
And DarkZeros is correct, you should manually play with the local workgroup size making it the highest common multiple of the global size and the number of kernels which can be run at once on the card. The easiest way to do this is to round up the global work group size to the next multiple of the card capacity and use an external if{} statement in the kernel only running the kernel for global_id less than the actual number of kernels you want to run.
Dave.
","1059","<c++><hash><opencl><sha>","1","0","1","2014-04-22 12:12:31","","3","","1620017","","2014-04-10 12:03:26","2014-04-10 00:45:21",""
"21059643","change git commit message and keep SHA the same","Since a git SHA is a hash generated from the commit files, metadata, and commit message, changing the commit message changes the SHA.
But would it be possible to make a change to the commit message that preserves the SHA, by 'balancing out' the change to the message with some random string at the end, which cancels out the change to the original message?
","In theory this is possible — there probably exists some padding that would preserve the SHA1 sum.
In practice this is extremely hard — SHA1 is a cryptographically secure hash function, which means that things like what you propose cannot be done practically (non-malleability). If they could, SHA1 would be a poor cryptographic hash.
","1055","<git><sha>","2","3","3","2014-01-11 09:12:13","","3","1","","","","2014-01-11 07:05:53",""
"21059643","change git commit message and keep SHA the same","Since a git SHA is a hash generated from the commit files, metadata, and commit message, changing the commit message changes the SHA.
But would it be possible to make a change to the commit message that preserves the SHA, by 'balancing out' the change to the message with some random string at the end, which cancels out the change to the original message?
","You are trying to find a collision for the SHA1 hash algorithm, which is only possible by a brute force attack needing a lot of computing power to test all possible paddings.
Some analysis on this can be found here:
https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html
They write:

A collision attack is therefore well within the range of what an
  organized crime syndicate can practically budget by 2018, and a
  university research project by 2021.

""Normal"" people should better try their luck in gambling. ;)
If you are interested in even more details, please ask at http://crypto.stackexchange.com as this question is really about cryptography and not about git.
","1055","<git><sha>","2","7","3","2014-01-11 09:12:13","","3","1","","","","2014-01-11 07:05:53",""
"21059643","change git commit message and keep SHA the same","Since a git SHA is a hash generated from the commit files, metadata, and commit message, changing the commit message changes the SHA.
But would it be possible to make a change to the commit message that preserves the SHA, by 'balancing out' the change to the message with some random string at the end, which cancels out the change to the original message?
","Easy, but it takes time. Prepare to spend the next few years on trying different paddings until you get a matching SHA.
Provided your check-in allows you to add a character without changing the semantics of the check-in (comments, optional whitespace; what have you), try adding one more and see what the resulting hash is.
Expect to need to try again a few times. SHA1 is 160 bits so you should plan on spending a significant fraction of 2^160 times (approx 1.46e48).
","1055","<git><sha>","2","0","3","2014-01-11 09:12:13","","3","1","","","","2014-01-11 07:05:53",""
"7364319","How do I SSHA1 in C/C++?","How do I calculate in C/C++ a salted SHA1 digest of a C-string (in my case a clear-text password)?
I do not want to include some huge library to do that. All I need is an ""easy"" way to make a salted SHA1 digest.
","Well, the 'easy' way is to include a pre-built library.
The essence of SHA1 and other digests is that they are not easy to calculate because that would leave them open to simple duplication that would negate their usefulness.
","1052","<c++><c><sha>","2","1","3","2012-03-25 14:51:26","","10","","937111","","2011-09-12 13:49:41","2011-09-09 15:55:24",""
"7364319","How do I SSHA1 in C/C++?","How do I calculate in C/C++ a salted SHA1 digest of a C-string (in my case a clear-text password)?
I do not want to include some huge library to do that. All I need is an ""easy"" way to make a salted SHA1 digest.
","Quick Google search revealed this: http://www.packetizer.com/security/sha1/
Code both C++ and C, with files to include in your project (so no library). Freeware Public License (FPL).
","1052","<c++><c><sha>","2","4","3","2012-03-25 14:51:26","","10","","937111","","2011-09-12 13:49:41","2011-09-09 15:55:24",""
"7364319","How do I SSHA1 in C/C++?","How do I calculate in C/C++ a salted SHA1 digest of a C-string (in my case a clear-text password)?
I do not want to include some huge library to do that. All I need is an ""easy"" way to make a salted SHA1 digest.
","If on Windows, may be simple CryptCreateHash Function will do?
By the way, here you can select the algorithm by ALG_ID.
","1052","<c++><c><sha>","2","1","3","2012-03-25 14:51:26","","10","","937111","","2011-09-12 13:49:41","2011-09-09 15:55:24",""
"30628996","Replace IIS Express certificate with sha-256 certificate","Since sha-1 is no longer secure and Google Chrome now shows an error when using https with a sha1 certificate, how do I replace the IIS Express certificate with a sha-256 self-signed certificate?
","
In mmc's Certificate plug in, add your new certificate to local computer's Personal store.
At command prompt, use netsh http to change certificate mapping from the old one to your new one.

You might also try out Jexus Manager for IIS Express, which simplifies the task to a few clicks,
https://jexus.codeplex.com/releases/view/138373
https://www.jexusmanager.com/en/latest/tutorials/self-signed.html

","1044","<https><iis-express><sha>","2","1","1","2016-09-25 04:26:45","30906914","0","","","","","2015-06-03 19:31:00",""
"4864295","decrypt a cipher -- RoR","In my Rails App, I have a client 'C1' who will send me the username of C1's clients. I and C1 share a salt. C1 will send me the username encrypted with the help of the shared salt. Now I need to decrypt it and get the original username and store it in my dB. How can I do it?
Please help. Thanks in Advance.
","If you are using SHA1 (or any other hashing algorithm), the solution is to generate the same hash on the server side and compare it with what was sent. If the resulting hash on the server side is the same as hash sent by the client it's likely the correct username.
In ruby Digest::SHA1.hexdigest would allow you to generate a SHA1 hash.
","1042","<ruby-on-rails><ruby><encryption><sha>","1","1","2","2011-02-01 15:39:06","","4","2","","","","2011-02-01 15:16:35",""
"4864295","decrypt a cipher -- RoR","In my Rails App, I have a client 'C1' who will send me the username of C1's clients. I and C1 share a salt. C1 will send me the username encrypted with the help of the shared salt. Now I need to decrypt it and get the original username and store it in my dB. How can I do it?
Please help. Thanks in Advance.
","You seem to be confused about cryptography in general.
The SHA's are Cryptographic Hash Functions. They are designed so as not to be reversible.
If you want secure communication between yourself and the client use a channel with end-to-end encryption, such as https.
","1042","<ruby-on-rails><ruby><encryption><sha>","1","3","2","2011-02-01 15:39:06","","4","2","","","","2011-02-01 15:16:35",""
"22390427","SHA-1 Collision Probability","I'm having difficulty working this out on paper and in my head. I know that is revolves around the Birthday Paradox, however, I cannot seem to comprehend the interchangeability of values between my question and BP's solution.
Alright, so I know that SHA-1 produces a hash of 160 bits. 


Between two messages and the probability of 0.5, how many times should the said ""attacker"" have to search to find identical hash values?


I've come across a series of solutions from searching, but none that thoroughly walk me through the process and explain it in a way that makes sense to me. Below is the closest that I've been able to come up with during my search.

I hope this helps to explain my question.
","Yes, you're right; this circles around the Birthday Problem. In hashing you are essentially trying to place a something that can be of theoretically infinite length into a fixed length string through a mathematical process; a collision is therefore inevitable. 
The Birthday Problem basically means that suppose you had a hall full of people, you ask each person their date of birth. The probability of finding someone with the same birthday as another increases as you have more dates of birth which two people could have as the same. And eventually you will find someone who has the same birthday.

Aaron Toponce wrote about this in his piece ""The Reality of SHA1"" where he pointed out:

SHA1 was meant to be a replacement for MD5. MD5 has an output space of
  only 128-bits, where as SHA1 has an output space of 160-bits. SHA1 is
  also designed differently than MD5, and is meant to not suffer the
  same sort of weaknesses or attacks that MD5 faces. However, over time,
  cryptographers have been able to severely attack SHA1, and as a
  result, they've all been warning us to get off SHA1, and move to SHA2.
  It should take 2^160 operations to find a collision with SHA1, however
  using the Birthday Paradox, we can have a probability of 50% of
  finding a SHA1 collision in about 2^80 operations. However,
  cryptanalysists have torn down SHA1 to a complexity of only 2^61
  operations. Even better.

Essentially, the SHA1 is a mathematical algorithm, weaknesses can be found in algorithms which make them easier crack and reduce the probability of a collision. This research, usually done by computer scientists, cryptographers and mathematicians then can be used to reduce the chance of finding a collision by using new algorithms to find new ways of finding collisions. 
","1040","<probability><sha1><sha>","0","0","1","2015-10-14 15:56:19","","2","","","","","2014-03-13 20:41:25",""
"40624840","Does ASP.NET use SHA256 or SHA1?","I'm using the default identity stuff provided by ASP.NET 4.5 MVC and Entity Framework.  I can create users with passwords and the hashed password shows up in the database.  I'm trying to figure out if that hash is generated using the no-longer-trusted SHA1 algorithm or the SHA2 algorithm (be it SHA256, SHA512, etc).
Articles which seem to say it defaults to SHA256:
https://www.asp.net/whitepapers/aspnet4/breaking-changes#0.1__Toc256770148
http://kosmisch.net/Blog/DotNetEssential/Archive/2015/2/1/aspnet-membership-default-password-hash-algorithms-in-net-4x-and-previous-versions.html
Articles which seem to say it defaults to SHA1:
https://docs.microsoft.com/en-us/aspnet/core/security/data-protection/consumer-apis/password-hashing
https://msdn.microsoft.com/en-us/library/system.security.cryptography.rfc2898derivebytes.aspx
When I follow the chain down, I end up inside the PasswordHasher.cs class -> HashPassword() -> Crypto.HashPassword() which I can see is using Rfc2898DeriveBytes which then has a bunch of stuff about HMACSHA1.
So are my passwords getting hashed by SHA256 or SHA1?  Easy way to default to SHA256?
If it helps, here is a dummy password taken from my local environment:
AIPfkvy5v59jmVZdPpU9QfUMoToCQ+Rp3dBT7m9RwMKZai5/61REkN/0InCtxKPUOQ==
","So it looks like the answer is neither exactly:
From the comments in the ASP.Net Identity Source Code


Version 0:
    PBKDF2 with HMAC-SHA1, 128-bit salt, 256-bit subkey, 1000 iterations.
See also: SDL crypto guidelines v5.1, Part III)
Format: { 0x00, salt, subkey }


Ultimately the hashing algorithim is SHA1, but it is not a simple SHA1 hash of the password, or even a SHA1 + salt hash.
It is worth pointing out that SHA1 is considered ""broken"" for digital signatures due to a mathematical attack, reducing the computational effort of generating a collision to just-about feasible levels. 
This does not apply to hashed passwords.
Links for further reading.
Is SHA-1 secure for password storage?
https://www.schneier.com/blog/archives/2005/02/sha1_broken.html
https://en.wikipedia.org/wiki/PBKDF2
https://www.owasp.org/index.php/Password_Storage_Cheat_Sheet
Rfc2898DeriveBytes and HMACSHA1
","1039","<asp.net><asp.net-mvc><password-protection><sha>","6","2","1","2016-11-17 15:50:39","","4","","1559036","","2016-11-16 22:35:21","2016-11-16 05:42:33",""
"36369506","is using the java.util.UUID after hashing it with md5 a good option?","I saw this following code. 
.
. // some code
.
String guid = NetworkUtil.md5(java.util.UUID.randomUUID().toString())
.
. // guid is being used 
.

Is this a good approach, hashing a Version 4 UUID with MD5?
According to UUID specification, UUID itself is very good in uniqueness of the generated UUID's and chances of collision are very very very small. So isn't this above piece of code actually reducing the quality of uniqueness by hashing it with MD5 which is an obsolete hashing mechanism now and prone to collisions and attacks.
","You can only make a probably-unique value worse by hashing it.  It cannot get any better or ""more unique"".  So, there is nothing to be gained by hashing like this, other than getting it into a uniform format that could be used where a md5-hashed string is required.
","1035","<java><android><md5><uuid><sha>","2","3","2","2016-04-04 00:29:13","36370054","3","","642706","","2016-04-02 05:51:08","2016-04-02 05:20:11",""
"36369506","is using the java.util.UUID after hashing it with md5 a good option?","I saw this following code. 
.
. // some code
.
String guid = NetworkUtil.md5(java.util.UUID.randomUUID().toString())
.
. // guid is being used 
.

Is this a good approach, hashing a Version 4 UUID with MD5?
According to UUID specification, UUID itself is very good in uniqueness of the generated UUID's and chances of collision are very very very small. So isn't this above piece of code actually reducing the quality of uniqueness by hashing it with MD5 which is an obsolete hashing mechanism now and prone to collisions and attacks.
","Lets start with this:

According to UUID specification, UUID itself is very good in uniqueness of the generated UUID's and chances of collision are very very very small.

Actually, it doesn't say that.  It can't say that, because that does not make sense.
In fact, if the UUID spec says anything about the uniqueness of type 4 UUIDs it would say that they are only as good as the source of random numbers.  And that depends on the platform and the quality of the RNG & UUID implementations.  If we can assume a perfect1 source of random numbers, then the probability of any two (separately generated) UUIDs being the same is on in 2122; i.e. very, very small.  On the other hand, if you have a poor source of random numbers, the probability of pair-wise collision increases.

So isn't this above piece of code actually reducing the quality of uniqueness by hashing it with MD5 which is an obsolete hashing mechanism now and prone to collisions and attacks.

Yes.  But MD5 isn't the real problem.
As @Doug Stevenson says, hashing a UUID does not reduce the chance of a collision.  Not even for a hashing algorithm that has no known weakness.  Whatever the algorithm, there is a chance that hashing UUIDs will increase the probability of collisions2.
So basically, there is no point in hashing a single UUID.  
However, if you required a token that had a smaller probability of collision than a type 4 UUID, you could concatenate N type 4 UUIDs into a single byte array, and then create a hash for the array.  If you have a (strong) M-bit hashing algorithm, and a perfect source of random numbers for your UUID generator, then the chance of collision should be roughly one in 2min(M, 122 * N).

1 - That is, a source of random bits where it is impossible for someone (an attacker) to predict the next bit in the sequence with anything other than 50% probability of being correct.
2 - This will happen if there are any two distinct UUIDs that have the same hash.  That is possible even for a strong hashing algorithm ... unless you defined that to be a criteria by which you measure strength.
","1035","<java><android><md5><uuid><sha>","2","4","2","2016-04-04 00:29:13","36370054","3","","642706","","2016-04-02 05:51:08","2016-04-02 05:20:11",""
"22543385","linker error with openssl (trying SH1 example)","I'm trying to compile an example of how to implement SHA1 but I keep getting this error:
[Linker Error] Unresolved external '_SHA1' referenced from C:\PROGRAM FILES (X86)\BORLAND\CBUILDER6\PROJECTS\UNIT1.OBJ

I downloaded openssl files from their website, I tried both copying the headers directory to my project directory and copying it to my includes directory, but nothing.
here's the example code:
#include <string.h>
#include <openssl/sha.h>
#include <stdio.h>

int main(int argc, char* argv[])
{
    int i;
    unsigned char ibuf[] = ""compute sha1"";
    unsigned char obuf[20];

    SHA1(ibuf, strlen(ibuf), obuf);

    for (i = 0; i < 20; i++) {
        printf(""%02x "", obuf[i]);
    }
    printf(""\n"");

    return 0;
}x

P.S: I'm using Borland C++ Builder 6
","You can add the OpenSSL .lib files to your project via ""Add to project..."" or use #pragma comment
#pragma comment(lib, ""ssl_lib_file_here.lib"")

int main(int argc, char* argv[])

","1019","<c++><openssl><c++builder><sha>","2","1","2","2014-03-21 01:35:14","","5","","","","","2014-03-20 19:37:31",""
"22543385","linker error with openssl (trying SH1 example)","I'm trying to compile an example of how to implement SHA1 but I keep getting this error:
[Linker Error] Unresolved external '_SHA1' referenced from C:\PROGRAM FILES (X86)\BORLAND\CBUILDER6\PROJECTS\UNIT1.OBJ

I downloaded openssl files from their website, I tried both copying the headers directory to my project directory and copying it to my includes directory, but nothing.
here's the example code:
#include <string.h>
#include <openssl/sha.h>
#include <stdio.h>

int main(int argc, char* argv[])
{
    int i;
    unsigned char ibuf[] = ""compute sha1"";
    unsigned char obuf[20];

    SHA1(ibuf, strlen(ibuf), obuf);

    for (i = 0; i < 20; i++) {
        printf(""%02x "", obuf[i]);
    }
    printf(""\n"");

    return 0;
}x

P.S: I'm using Borland C++ Builder 6
","
I downloaded openssl files from their website,

And 

... except that there're no files with extension '.lib' in the directory the setup I downloaded installed

You need to use Shining Light's Win32OpenSSL or build OpenSSL yourself.
If you use Shining Light's version, everything is already built. While Thomas Hruska keeps Win32OpenSSL up to date with OpenSSL releases, I don't think he offers anything compatible with the version of C++ Builder 6 (circa 2002) you are using.
If you want to build OpenSSL from sources on the Win32 platform, then see INSTALL.W32 and INSTALL.W64 in the root directory of the OpenSSL distribution.
I believe you have a third option. That option is to grab a modern IDE. Microsoft offers a trial version of Visual Studio (the link for the Trial is on the right of the page). Embarcadero also offers a free trial version of C++ Builder XE5. Both should work with Shining Light's Win32OpenSSL.
","1019","<c++><openssl><c++builder><sha>","2","1","2","2014-03-21 01:35:14","","5","","","","","2014-03-20 19:37:31",""
"37335481","What is different about HashAlgorithm is new SHA256Managed() vs. SHA256Managed.Create()","I seem to be seeing SHA-2 being done 2 different ways. 
Yes I get that 1 is ""newed"" (instantiated) vs. a Create Method on the other but it seems that that achieve the same identical object 
HashAlgorithm sha2 = new SHA256Managed();

vs.            

SHA256 sha2 = SHA256Managed.Create();

Does ""sha2"" act the same? if not what is the difference and why are there 2 types written?
","The .Create method might give you a platform optimized version of implementation (though the current code from Microsoft might not use that opportunity in all possible places). 
For example, if this call is made on a machine with hardware encryption support, it might return a hardware-specific version.
Thus, it would be a better option to avoid using a specific implementation in your own code. 
","1013","<c#><hash><sha256><sha>","3","2","1","2016-05-23 03:35:59","37339029","6","","","","","2016-05-19 23:08:38",""
"26402497","Calculate MD5 or SHA of an Image using CryptoJS","I have a requirement where I need to calculate hash of an Image and upload it to a webservice. The image is captured using Cordova API and the API returns a URI of that image.
I checked the CryptoJS but it is taking a string as input.
var hash = CryptoJS.MD5(""Message"");

Any way we can calculate hash for the image ? 
CryptoJS Lib : CryptoJS Home Page
Any other library is also fine as long as it can be used from Cordova App. 
","Using Cordova API you can get a Base64 encoded image instead of the URI. Which you can easily hash using CryptoJS.
When calling getPicture API use the DATA_URL option to get Base64 encoded image as the result:
navigator.camera.getPicture(onSuccess, onFail, {
    destinationType: Camera.DestinationType.DATA_URL }); 

This will return the base64 encoded image in the onSuccess method as the param:
function onSuccess(imageURI) {
    var hash = CryptoJS.MD5(imageURI);
}

","1002","<javascript><cordova><md5><sha>","0","1","1","2014-10-16 12:32:33","","0","","","","","2014-10-16 10:48:51",""
"15794281","SHA512 to generate random numbers in PHP","I'm filling an array with random numbers using $blockhash[$i] = rand().time().rand()
Then, for each random number in that array I calculate the correspondent SHA512
$SecretKey = ""60674ccb549f1988439774adb82ff187e63a2dfd403a0dee852e4e4eab75a0b3"";
$sha = hash_hmac('sha512', $value, $SecretKey);

Split it:
$pool  = str_split($sha, 2);

Then I get the first number from the $pool array, convert hex to dec and limit it within 1 and 50:
$dec = hexdec($pool[0]) % 50 + 1;

The problem is that the numbers are not that random and I don't know why. I'm counting the frequency for each number from 1 to 50 but the numbers 1,2,3,4,5 and 6 are coming up often than the others. See graph

Why is this happening and how to fix it? Thanks!
","Neither rand() or mt_rand() generate truly random values.
As the manual states:

This function does not generate cryptographically secure values, and should not be used for cryptographic purposes. If you need a cryptographically secure value, consider using openssl_random_pseudo_bytes() instead.

See Better Random Generating PHP for an StackOverflow question that points the same issue and has some good answers.
","1001","<php><random><generator><sha>","3","1","3","2013-04-03 17:56:33","15794442","0","1","","","","2013-04-03 17:40:24",""
"15794281","SHA512 to generate random numbers in PHP","I'm filling an array with random numbers using $blockhash[$i] = rand().time().rand()
Then, for each random number in that array I calculate the correspondent SHA512
$SecretKey = ""60674ccb549f1988439774adb82ff187e63a2dfd403a0dee852e4e4eab75a0b3"";
$sha = hash_hmac('sha512', $value, $SecretKey);

Split it:
$pool  = str_split($sha, 2);

Then I get the first number from the $pool array, convert hex to dec and limit it within 1 and 50:
$dec = hexdec($pool[0]) % 50 + 1;

The problem is that the numbers are not that random and I don't know why. I'm counting the frequency for each number from 1 to 50 but the numbers 1,2,3,4,5 and 6 are coming up often than the others. See graph

Why is this happening and how to fix it? Thanks!
","the 2 hex characters you are converting to decimal will be in the range of 0-255. you mod that by 50 and add 1 making 1-6 (range(0-5)+1) occur 6 times over 1-256 while every other number occurs only 5 times. This would account for a ~20% increase in those numbers coming up.
","1001","<php><random><generator><sha>","3","4","3","2013-04-03 17:56:33","15794442","0","1","","","","2013-04-03 17:40:24",""
"15794281","SHA512 to generate random numbers in PHP","I'm filling an array with random numbers using $blockhash[$i] = rand().time().rand()
Then, for each random number in that array I calculate the correspondent SHA512
$SecretKey = ""60674ccb549f1988439774adb82ff187e63a2dfd403a0dee852e4e4eab75a0b3"";
$sha = hash_hmac('sha512', $value, $SecretKey);

Split it:
$pool  = str_split($sha, 2);

Then I get the first number from the $pool array, convert hex to dec and limit it within 1 and 50:
$dec = hexdec($pool[0]) % 50 + 1;

The problem is that the numbers are not that random and I don't know why. I'm counting the frequency for each number from 1 to 50 but the numbers 1,2,3,4,5 and 6 are coming up often than the others. See graph

Why is this happening and how to fix it? Thanks!
","You get 1-6 more often because you fetch two hexadecimal digits from the hash. That's one byte, so it can store values from 0 to 255. Then you use modulo 50. In result you get ranges 0-49, 50-99, 100-149, 150-199, 200-249 and... 250-255. This last one is responsible for extra prevalence of 1-6 in your results.
Solution: just use mt_rand(1,50);
[edit]
If you really need to convert a number from 0-255 range to 1-50 range, the solution would be scaling and rounding.
$number = round(($byteValue)/(255/49))+1; 

","1001","<php><random><generator><sha>","3","1","3","2013-04-03 17:56:33","15794442","0","1","","","","2013-04-03 17:40:24",""
"36444317","SHA-1 Checksum verify?","I was downloading the Download Android Studio and SDK Tools. There was written SHA-1 Checksum and its value given f9b59d72413649d31e633207e31f456443e7ea0b.
My questions are:

1) What is the use of it?
2) How to test and verify it on Window and linux?

Can I also make SHA-1 Checksum of any file?
","
1) What is the use of it?

In essence, hashing is a one-way (irreversible) process that takes some input data and produces a string - typically in hexadecimal - of a fixed length that uniquely* identifies that particular input data.
This is very useful and has many applications but in your case, it's used to verify the integrity of files. A website uploads the hash of a file for the world to see and when the file is downloaded on your computer, you check whether or not the hash you calculate locally matches the hash displayed on the website. If they match, the file is intact but if they don't, the file on your computer is not identical to the file on the server - most likely because it was damaged/altered in transit.

2) How to test and verify it on Windows and Linux?

At least on *nix systems, there are several ways of comparing hashes. Nothing is stopping you from manually checking every character of two hashes for equality - this is often fast when you simply want to check a single file. Anyway, most of the hashing programs have a -c option for this purpose that will output ""OK"" in case of a match. To manually input the hash and file and pipe both to sha1sum for comparison, do this:
$ echo ""672d844c60553f9b3db9844dc29ddf49bc426f45"" /bin/echo | sha1sum -c -
/bin/echo: OK

To calculate the hash and make a file (echo.sha1) containing the hash and file path + file name:
# calculate hash and write it along with the file path + file name to a file
$ sha1sum /bin/echo > echo.sha1

# see the contents of the file
$ cat echo.sha1 
672d844c60553f9b3db9844dc29ddf49bc426f45  /bin/echo

# do the comparison
$ sha1sum -c echo.sha1 
/bin/echo: OK

Microsoft apparently provides The File Checksum Integrity Verifier for the same purpose. I'm on Linux and haven't tested it but the description says:
""The File Checksum Integrity Verifier (FCIV) is a command-prompt utility that computes and verifies cryptographic hash values of files. FCIV can compute MD5 or SHA-1 cryptographic hash values. These values can be displayed on the screen or saved in an XML file database for later use and verification.""
I disagree with Microsoft's use of the phrase ""cryptographic hash"" in this context; maybe the program is outdated. Anyway, for the record, MD5 and SHA1 are not cryptographically secure hashing algorithms. They are, however, perfectly fine for doing quick file integrity checks.

Can I also make SHA-1 Checksum of any file?

You can indeed. In fact, there's no way of verifying file integrity without calculating the hash on your computer - its part of the process. 
To get the sha1 sum of a file on Linux/Unix (in this case the ""echo"" binary again), you can simply do:
$ sha1sum /bin/echo
672d844c60553f9b3db9844dc29ddf49bc426f45  /bin/echo

There are other SHA hash lengths:
$ sha512sum /bin/echo 
1f481804f114677efbfc1438b04e88af5be8507e098792b714939fcd346b7477fdb4ae0c53fd48e96d1031fc8d6e3d8c8d4c4c80e121f5c5a39d18c912b33a11  /bin/echo

MD5 was used for the same purpose for a long time and sometimes still is (but, again, don't use MD5 or SHA1 for cryptography):
$ md5sum /bin/echo 
482a44200637097351e30c80b1155c27  /bin/echo

As you can see below, it works for strings as well. The -n option after echo strips out the newline character that would otherwise be part of the string and result in a wrong hash.
$ echo -n ""some_string"" | sha256sum
539a374ff43dce2e894fd4061aa545e6f7f5972d40ee9a1676901fb92125ffee  

If you run a server and want to do password logins, you typically don't store the actual passwords but, instead, you store a hash of the passwords. In this case, add a salt to the password before hashing and use the currently recommended hashing algorithm - bcrypt is a good choice in 2016.
I could go on and on about checksums vs. cryptographic hashing vs. encryption, rainbow tables, hash collisions, etc. but that's beyond the scope of your question.

""(...) that uniquely identifies (...)"" is an over-statement. Here's why. Nothing in this world is perfect - except one-time pads :)

","1000","<sha>","0","2","1","2016-04-06 11:19:22","36445697","1","","","","","2016-04-06 07:30:55",""
"14435132","What is DigestUtils sha256 encoding equivalent from JavaScript?","I call following and create the password hash.
ByteString password = ByteString.copyFrom(DigestUtils.sha256(""mypassword""));

But now I need to send the sha256 converted password message from client (JavaScript). I tired to use CryptoJS as following
 var pass = CryptoJS.SHA256(document.getElementById('password').value);
    var passhash = pass.toString(CryptoJS.enc.Latin1)
    login(passhash);

I tried all Base64, Latin1, and Hex types to get the string. But it will not produce the same password as the one in Java
","Problem was with character encoding. Following fixed the problem. 
in JS: 
var password = pass.toString(CryptoJS.enc.Utf16); 

In Java:
byte[] passhash = jsCryptoString.getBytes(""UTF-16BE"");

","997","<javascript><apache-commons><sha><sha256>","1","1","1","2013-01-21 09:39:17","14435856","2","1","","","","2013-01-21 08:49:10",""
"29621569","Convert SHA-1 string to plain text java","I tried to search this but surprisingly could not find any results of converting SHA-1 generated string back to normal string. I hash a string to SHA-1 and then send it to some other device where this SHA-1 generated string should be unhashed and used but I am unable to find any such method in Java.
","The whole point of SHA-1 and other hashing algorithms is that there is no such thing as unhashing. There is no such method in Java or any other language.
What you are searching for is symmetric encryption.
","987","<java><hash><sha1><sha>","-2","3","3","2015-04-14 07:36:35","29621596","0","","","","","2015-04-14 07:32:10",""
"29621569","Convert SHA-1 string to plain text java","I tried to search this but surprisingly could not find any results of converting SHA-1 generated string back to normal string. I hash a string to SHA-1 and then send it to some other device where this SHA-1 generated string should be unhashed and used but I am unable to find any such method in Java.
","You are confusing hashing with encryption (this is what you would probably want to use instead). Encryption is reversible given a key, while hashing is not.
","987","<java><hash><sha1><sha>","-2","0","3","2015-04-14 07:36:35","29621596","0","","","","","2015-04-14 07:32:10",""
"29621569","Convert SHA-1 string to plain text java","I tried to search this but surprisingly could not find any results of converting SHA-1 generated string back to normal string. I hash a string to SHA-1 and then send it to some other device where this SHA-1 generated string should be unhashed and used but I am unable to find any such method in Java.
","Hashes are one way, you can go from text to hash but not the other way.
Have a look at this for a nice discussion:
https://security.stackexchange.com/questions/11717/why-are-hash-functions-one-way-if-i-know-the-algorithm-why-cant-i-calculate-t
","987","<java><hash><sha1><sha>","-2","0","3","2015-04-14 07:36:35","29621596","0","","","","","2015-04-14 07:32:10",""
"26940498","wrong calculatin of sha256 hash in android","I have a problem generating a correct hash for a given string by android studio. I have read a lot of solutions without understanding how to convert it the right way.
I need the correct hash since i am making an HTTP request with it.
Here is my code in JAVA:
public String getHash(final String appSecret , final String sessionToken)throws NoSuchAlgorithmException ,UnsupportedEncodingException{

        String input = sessionToken + appSecret;
        MessageDigest digest = MessageDigest.getInstance(""SHA-256"");
        digest.reset();

        byte[] byteData = digest.digest(input.getBytes(""UTF-8""));
        StringBuffer sb = new StringBuffer();

        for (int i = 0; i < byteData.length; i++){
            sb.append(String.format(""%02x"", 0xFF & byteData[i]));
        }
        return sb.toString();

    }

For an input like:
1130_11825_253402300799_1_1bcb4a27d42524de11325ec627b63878770a8651c0a0d8ddfc8fc06b92aea281634ff11f7d874c03851932304601439e

I need the exact output:
01a9d698f0587a25ad8ef56b0994ec0022364aff91d668a4b3a4b97c40167672

but i got a wrong output:
a60f61b5e9f832b153a91e8d2b1ffa28b9611b2d60c3669663cfe050ac8e28cc

I think my problem is how to read/print the string but i can't figure out how to correct it.
I know that an online hash calculator return a correct hash.
Thanks.
","I modified getHash to take a a single String, I removed the call to reset() and you to finish digest(). I also prefer the for each loop. Like,
public static String getHash(final String msg) {
    StringBuilder sb = new StringBuilder();
    try {
        MessageDigest digest = MessageDigest.getInstance(""SHA-256"");
        digest.update(msg.getBytes());
        byte[] byteData = digest.digest();
        for (byte x : byteData) {
            String str = Integer.toHexString(Byte.toUnsignedInt(x));
            if (str.length() < 2) {
                sb.append('0');
            }
            sb.append(str);
        }
    } catch (Exception e) {
        e.printStackTrace();
    }
    return sb.toString();
}

And call it like
public static void main(String[] args) {
    String out = getHash(""1130_11825_253402300799_1_1bcb4a27d42524de11325ec627b63878770a8651c0a0d8ddfc8fc06b92aea281634ff11f7d874c03851932304601439e"");
    String expected = ""01a9d698f0587a25ad8ef56b0994ec0022364aff91d668a4b3a4b97c40167672"";
    System.out.println(out.equals(expected));
}

I get
true

","986","<java><android><sha>","1","0","2","2015-11-27 17:47:01","26940606","0","4","","","","2014-11-14 23:25:32",""
"26940498","wrong calculatin of sha256 hash in android","I have a problem generating a correct hash for a given string by android studio. I have read a lot of solutions without understanding how to convert it the right way.
I need the correct hash since i am making an HTTP request with it.
Here is my code in JAVA:
public String getHash(final String appSecret , final String sessionToken)throws NoSuchAlgorithmException ,UnsupportedEncodingException{

        String input = sessionToken + appSecret;
        MessageDigest digest = MessageDigest.getInstance(""SHA-256"");
        digest.reset();

        byte[] byteData = digest.digest(input.getBytes(""UTF-8""));
        StringBuffer sb = new StringBuffer();

        for (int i = 0; i < byteData.length; i++){
            sb.append(String.format(""%02x"", 0xFF & byteData[i]));
        }
        return sb.toString();

    }

For an input like:
1130_11825_253402300799_1_1bcb4a27d42524de11325ec627b63878770a8651c0a0d8ddfc8fc06b92aea281634ff11f7d874c03851932304601439e

I need the exact output:
01a9d698f0587a25ad8ef56b0994ec0022364aff91d668a4b3a4b97c40167672

but i got a wrong output:
a60f61b5e9f832b153a91e8d2b1ffa28b9611b2d60c3669663cfe050ac8e28cc

I think my problem is how to read/print the string but i can't figure out how to correct it.
I know that an online hash calculator return a correct hash.
Thanks.
","import static org.junit.Assert.assertEquals;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

import org.junit.Test;

public class Sha256Test {

    @Test
    public void sha256Test() throws NoSuchAlgorithmException {
        String out = hash256(""1130_11825_253402300799_1_1bcb4a27d42524de11325ec627b63878770a8651c0a0d8ddfc8fc06b92aea281634ff11f7d874c03851932304601439e"");
        String in  = ""01a9d698f0587a25ad8ef56b0994ec0022364aff91d668a4b3a4b97c40167672"";
        assertEquals(in, out);
    }

    private String hash256(String data) throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance(""SHA-256"");
        md.update(data.getBytes());
        return bytesToHex(md.digest());
    }

    private String bytesToHex(byte[] bytes) {
        StringBuffer result = new StringBuffer();
        for (byte byt : bytes) {
            result.append(Integer.toString((byt & 0xff) + 0x100, 16).substring(1));
        }
        return result.toString();
    }
}

See: https://gist.github.com/avilches/750151
","986","<java><android><sha>","1","0","2","2015-11-27 17:47:01","26940606","0","4","","","","2014-11-14 23:25:32",""
"22958199","Password hashing doesn't work","I'm inserted some users into the MySQL database 
$register_query = "" INSERT INTO user ( name, password, permission_id) 
VALUES ( '$username', SHA('$password_01'), '1' ) "";

I wants to read the user table for logging in
require_once('initializing.php');

class DbPlus extends MySQLDatabaseConnection{

public $database;

function __construct()
{
    $this->database = parent::connection();
}

public function reading_table($table, $query, $where = null, $limit = null, $order = null){

    $query = ""SELECT {$query} FROM {$table}"";
    if ( isset($where) ) {
        $query .= "" WHERE {$where}"";

    }
    if ( isset($order) ){
        $query .= "" ORDER BY {$order}"";
    }
    if ( isset($limit) ) {
        $query .= "" LIMIT {$limit}"";
    }

    // $data = $this->database->query($query);
    $data = $this->database->query($query);

    $rows = array();
    while ( $row = $data->fetch_object() ) {
        $rows[] = $row;

    }

    return $rows;
    }
}

$dbplus = new DbPlus;

$login_qry_slct = ""id,name,password,permission_id"";
$login_qry_whr = ""name ='test' AND password = SHA('test')"";
$result = $dbplus->reading_table('user', $login_qry_slct, $login_qry_whr );
var_dump($result);

For testing purpose I inserted name=test, and password=test. I did it in two ways, with and without SHA(). When I inserted the password 'test' without hashing, the select query works fine (note: it is for testing purposes) and returns the non hashed test user.
 $login_qry_whr = ""name ='test' AND password = 'test'"";

But when I using SHA
$login_qry_whr = ""name ='test' AND password = SHA('test')"";

Returns array(0) { } (note: there is hashed version saved in in the user table too)
What am I doing wrong with SHA()?
","Try this,
sha1(password) instead of sha(password).
Orelse try this one,password_hash() function or crypt function.
http://www.php.net/manual/en/function.password-hash.php
Hope this works for you.
","982","<php><hash><sha>","-1","0","3","2014-04-09 10:58:30","22958311","10","","3497923","","2014-04-09 10:01:57","2014-04-09 09:26:22",""
"22958199","Password hashing doesn't work","I'm inserted some users into the MySQL database 
$register_query = "" INSERT INTO user ( name, password, permission_id) 
VALUES ( '$username', SHA('$password_01'), '1' ) "";

I wants to read the user table for logging in
require_once('initializing.php');

class DbPlus extends MySQLDatabaseConnection{

public $database;

function __construct()
{
    $this->database = parent::connection();
}

public function reading_table($table, $query, $where = null, $limit = null, $order = null){

    $query = ""SELECT {$query} FROM {$table}"";
    if ( isset($where) ) {
        $query .= "" WHERE {$where}"";

    }
    if ( isset($order) ){
        $query .= "" ORDER BY {$order}"";
    }
    if ( isset($limit) ) {
        $query .= "" LIMIT {$limit}"";
    }

    // $data = $this->database->query($query);
    $data = $this->database->query($query);

    $rows = array();
    while ( $row = $data->fetch_object() ) {
        $rows[] = $row;

    }

    return $rows;
    }
}

$dbplus = new DbPlus;

$login_qry_slct = ""id,name,password,permission_id"";
$login_qry_whr = ""name ='test' AND password = SHA('test')"";
$result = $dbplus->reading_table('user', $login_qry_slct, $login_qry_whr );
var_dump($result);

For testing purpose I inserted name=test, and password=test. I did it in two ways, with and without SHA(). When I inserted the password 'test' without hashing, the select query works fine (note: it is for testing purposes) and returns the non hashed test user.
 $login_qry_whr = ""name ='test' AND password = 'test'"";

But when I using SHA
$login_qry_whr = ""name ='test' AND password = SHA('test')"";

Returns array(0) { } (note: there is hashed version saved in in the user table too)
What am I doing wrong with SHA()?
","I never ran into problems like this by hashing the password in PHP by using the native hash() function.
<?php
$query = ""SELECT * FROM table WHERE username = 'test' AND password = '"" . hash('sha256', $password) . ""'"";
?>

Documentation: http://us2.php.net/manual/en/function.hash.php
","982","<php><hash><sha>","-1","-1","3","2014-04-09 10:58:30","22958311","10","","3497923","","2014-04-09 10:01:57","2014-04-09 09:26:22",""
"22958199","Password hashing doesn't work","I'm inserted some users into the MySQL database 
$register_query = "" INSERT INTO user ( name, password, permission_id) 
VALUES ( '$username', SHA('$password_01'), '1' ) "";

I wants to read the user table for logging in
require_once('initializing.php');

class DbPlus extends MySQLDatabaseConnection{

public $database;

function __construct()
{
    $this->database = parent::connection();
}

public function reading_table($table, $query, $where = null, $limit = null, $order = null){

    $query = ""SELECT {$query} FROM {$table}"";
    if ( isset($where) ) {
        $query .= "" WHERE {$where}"";

    }
    if ( isset($order) ){
        $query .= "" ORDER BY {$order}"";
    }
    if ( isset($limit) ) {
        $query .= "" LIMIT {$limit}"";
    }

    // $data = $this->database->query($query);
    $data = $this->database->query($query);

    $rows = array();
    while ( $row = $data->fetch_object() ) {
        $rows[] = $row;

    }

    return $rows;
    }
}

$dbplus = new DbPlus;

$login_qry_slct = ""id,name,password,permission_id"";
$login_qry_whr = ""name ='test' AND password = SHA('test')"";
$result = $dbplus->reading_table('user', $login_qry_slct, $login_qry_whr );
var_dump($result);

For testing purpose I inserted name=test, and password=test. I did it in two ways, with and without SHA(). When I inserted the password 'test' without hashing, the select query works fine (note: it is for testing purposes) and returns the non hashed test user.
 $login_qry_whr = ""name ='test' AND password = 'test'"";

But when I using SHA
$login_qry_whr = ""name ='test' AND password = SHA('test')"";

Returns array(0) { } (note: there is hashed version saved in in the user table too)
What am I doing wrong with SHA()?
","Please please don't use SHA* for hashing passwords, instead use a slow key-derivation function like BCrypt or PBKDF2 with a cost factor. The verification cannot be done in an SQL statement directly (because of the salt), so you have to do it in your PHP code:
// Hash a new password for storing in the database.
// The function automatically generates a cryptographically safe salt.
$hashToStoreInDb = password_hash($password, PASSWORD_BCRYPT);

// Check if the hash of the entered login password, matches the stored hash.
// The salt and the cost factor will be extracted from $existingHashFromDb.
$isPasswordCorrect = password_verify($password, $existingHashFromDb);

","982","<php><hash><sha>","-1","0","3","2014-04-09 10:58:30","22958311","10","","3497923","","2014-04-09 10:01:57","2014-04-09 09:26:22",""
"26067811","perl shasum vs bash shasum","The following bash and Perl scripts mysteriously give different results. Why?
#!/bin/bash                                                                       
hash=`echo -n 'abcd' | /usr/bin/shasum -a 256`;
echo $hash;

#!/usr/bin/perl                                                                   
$hash = `echo -n 'abcd' | /usr/bin/shasum -a 256`;
print ""$hash"";

The bash script:
$ ./tst.sh
88d4266fd4e6338d13b845fcf289579d209c897823b9217da3e161936f031589 -

The Perl script:
$ ./tst.pl
61799467ee1ab1f607764ab36c061f09cfac2f9c554e13f4c7442e66cbab9403  -

the heck?
","If you do:
printf ""%s"" 'abcd' | /usr/bin/shasum -a 256

you get the 88d...589 hash.  If you do:
printf ""%s\n"" '-n abcd' | /usr/bin/shasum -a 256

you get the 617...403 hash.
Therefore, I deduce that Perl is somehow running a different echo command, perhaps /bin/echo or /usr/bin/echo instead of the bash built-in echo, or maybe the built-in echo to /bin/sh (which might perhaps be dash rather than bash), and this other echo does not recognize the -n option as an option and outputs different data.
I'm not sure which other echo it is finding; on my machine which is running an Ubuntu 14.04 LTE derivative, bash, dash, sh (linked to bash), ksh, csh and tcsh all treat echo -n abcd the same way.  But somewhere along the line, I think that there is something along these lines happening; the hash checksums being identical strongly point to it.  (Maybe you have a 3.2 bash linked to sh; see the notes in the comments.)
","980","<bash><perl><sha>","6","6","2","2014-09-26 21:26:01","26067904","4","","","","","2014-09-26 20:28:52",""
"26067811","perl shasum vs bash shasum","The following bash and Perl scripts mysteriously give different results. Why?
#!/bin/bash                                                                       
hash=`echo -n 'abcd' | /usr/bin/shasum -a 256`;
echo $hash;

#!/usr/bin/perl                                                                   
$hash = `echo -n 'abcd' | /usr/bin/shasum -a 256`;
print ""$hash"";

The bash script:
$ ./tst.sh
88d4266fd4e6338d13b845fcf289579d209c897823b9217da3e161936f031589 -

The Perl script:
$ ./tst.pl
61799467ee1ab1f607764ab36c061f09cfac2f9c554e13f4c7442e66cbab9403  -

the heck?
","Summary: In your Perl script, -n is being treated as an argument to include in the output of echo, not a flag to suppress the newline. ( Try 
$hash = `echo -n 'abcd'`;

to confirm). Use printf instead.

Perl uses /bin/sh to execute code in back tics. Even if /bin/sh is a link to bash, it will behave differently when invoked via that like. In POSIX mode,
echo -n 'abcd'

will output
-n abcd

that is, the -n option is not recognized as a flag to suppress a newline, but is treated as a regular argument to print. Replace echo -n with printf in each script, and you should get the same SHA hash from each script.
(UPDATE: bash 3.2, when invoked as sh, displays this behavior. Newer versions of bash seem to continue treating -n as a flag when invoked as sh.)

Even better, don't shell out to do things you can do in Perl.
use Digest::SHA;

$hash = Digest::SHA::sha256('abcd');


For the curious, here's what the POSIX spec has to say about echo. I'm not sure what to make of XSI conformance; bash echo requires the -e option to treat the escape characters specially, but nearly every shell—except old versions of bash, and then only under special circumstances—treats -n as a flag, not a string. Oh well.
The following operands shall be supported:

string
A string to be written to standard output. If the first operand is -n, or
if any of the operands contain a <backslash> character, the results are
implementation-defined.

On XSI-conformant systems, if the first operand is -n, it shall be treated
as a string, not an option. The following character sequences shall be
recognized on XSI-conformant systems within any of the arguments:

\a
Write an <alert>.
\b
Write a <backspace>.
\c
Suppress the <newline> that otherwise follows the final argument in the output. All characters following the '\c' in the arguments shall be ignored.
\f
Write a <form-feed>.
\n
Write a <newline>.
\r
Write a <carriage-return>.
\t
Write a <tab>.
\v
Write a <vertical-tab>.
\\
Write a <backslash> character.
\0num
Write an 8-bit value that is the zero, one, two, or three-digit octal number num.

","980","<bash><perl><sha>","6","18","2","2014-09-26 21:26:01","26067904","4","","","","","2014-09-26 20:28:52",""
"21946390","PHP SHA-256 not the same as this c# code?","Got a problem - maybe... It seems that this piece of PHP:
$mydigestb = hash(""sha256"",$digeststring);

does not generate the same result as this C# code:
private string GenerateDigest(long currentTime)
{
    SHA256Managed hashString = new SHA256Managed();
    StringBuilder hex = new StringBuilder();
    byte[] hashValue = hashString.ComputeHash(Encoding.UTF8.GetBytes(String.Format(""{0}{1}"", currentTime, txtApiKey.Text)));
    foreach (byte x in hashValue)
    {
        hex.AppendFormat(""{0:x2}"", x);
    }
    return hex.ToString();
}

The input values are the same, but it appears that what comes out is different.
","It is the same for me:
PHP code: http://codepad.org/gcGC5Omp
<?php
$mydigestb = hash(""sha256"" , ""abhinav"" );
echo $mydigestb;
?>

C# code: https://ideone.com/jrz05O
using System;

public class Test
{
    public static void Main()
    {
        System.Security.Cryptography.SHA256Managed hm = new System.Security.Cryptography.SHA256Managed();
        byte[] hashValue = hm.ComputeHash(System.Text.Encoding.ASCII.GetBytes(""abhinav""));
        Console.WriteLine(System.BitConverter.ToString(hashValue).Replace(""-"", """").ToLower());
    }
}

Are you using the same sample data?
","977","<c#><php><hash><sha>","0","1","1","2014-02-21 22:44:52","","1","","1297623","","2014-02-21 22:34:14","2014-02-21 22:20:57",""
"17791504","How to sign on office documents with sha256/384/512 using PackageDigitalSignatureManager on .Net framework 3.0","I'm trying to programmatically sign an office document(Word\Excel) on a signature line provider using PackageDigitalSignatureManager class but I got an Unsupported hash algorithm exception:

General exception: System.InvalidOperationException: Unsupported hash algorithm specified.   
at MS.Internal.IO.Packaging.XmlDigitalSignatureProcessor.Sign(IEnumerable`1 parts, IEnumerable`1 relationshipSelectors, X509Certificate2 signer, String signatureId, Boolean embedCertificate, IEnumerable`1 signatureObjects, IEnumerable`1 objectReferences)    
at System.IO.Packaging.PackageDigitalSignatureManager.Sign(IEnumerable`1 parts, X509Certificate certificate, IEnumerable`1 relationshipSelectors, String signatureId, IEnumerable`1 signatureObjects, IEnumerable`1 objectReferences)

Here is a part of my code:
string SigInfoHashAlg = ""http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"";
string HashAlg = ""http://www.w3.org/2001/04/xmlenc#sha256"";

PackageDigitalSignatureManager dsm = new PackageDigitalSignatureManager(package);
dsm.CertificateOption = CertificateEmbeddingOption.InSignaturePart;
dsm.HashAlgorithm = SigInfoHashAlg;
System.Collections.Generic.List<Uri> toSign = new System.Collections.Generic.List<Uri>();
System.Collections.Generic.List<PackageRelationshipSelector> relationshipSelectors = new System.Collections.Generic.List<PackageRelationshipSelector>();
foreach (PackageRelationship relationship in package.GetRelationshipsByType(""http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument""))
{
  AddSignableItems(relationship, toSign, relationshipSelectors);
}

X509Certificate cert = new X509Certificate(Cert);
System.Collections.Generic.List<System.Security.Cryptography.Xml.DataObject> signatureObjects = new System.Collections.Generic.List<System.Security.Cryptography.Xml.DataObject>();
System.Collections.Generic.List<Reference> objectReferences = new System.Collections.Generic.List<Reference>();
Reference officeItemRef = new Reference(_OfficeUri);
officeItemRef.Type = ""http://www.w3.org/2000/09/xmldsig#Object"";
try{
    NewSig = dsm.Sign(toSign, cert, relationshipSelectors, ""idPackageSignature"", signatureObjects, objectReferences);
}
catch (CryptographicException ex)
{
    throw ex;
}

I have searched and found lots of pages using the PackageDigitalSignatureManager class but none of them gives a working example or explanation about this procedure.
As I understood from my research the dsm.HashAlgorithm should be the parameter that affects the signing algorithm (Saw it even in the source code of the .Net framework XmlDigitalSignatureProcessor).
I know someone will think that the SignatureDescription class will be a solution but I have tried this as well.

I have configured the machine.config to work with my relevant hash IDs
SHA1 is working properly and till now the SHA1 was kind of hard coded. If you'll need any other information, you are welcome to ask for it.
Pay attention I'm talking about Net Framework 3.0 so 4.0 solutions are not relevant unless you will say that there is no other choice(Last resort).

Thank you very very much,
Alex.
","","976","<c#><c#-2.0><openxml><digital-signature><sha>","2","","0","2019-09-09 15:56:20","","0","","8290665","","2019-09-09 15:56:20","2013-07-22 15:27:07",""
"29313571","Implementing SHA-256 in C++","I am trying to implement SHA-256 in MSVC++. I am nearly there, except for extending the first 16 words of the message schedule array into the remaining 48. I have identified my problem to be at this point because it exactly matches the example from nist.gov until round 17 of the compression algorithm. My code for the message schedule is as follows:     
//Extend first 16 words into the remaining 48 words of the message schedule array:
for (int k = 16; k < 64; k++)
{
    bitset<32> s0 = rotr(W[k - 15], 7) ^= rotr(W[k - 15], 18) ^= (W[k - 15] >> 3);
    bitset<32> s1 = rotr(W[k - 2], 17) ^= rotr(W[k - 2], 19) ^= (W[k - 2] >> 10);
    W[k] = add(add(W[k - 16], s0), add(W[i - 7], s1));
}

bitset<32> add(bitset<32> a, bitset<32> b)
{
    unsigned long c = a.to_ulong();
    unsigned long d = b.to_ulong();
    return bitset<32>((c + d) % 4294967296);
}

bitset<32> rotr(bitset<32> b, int num)
{
    int temp = (int)b.to_ulong();
    temp = _rotr(temp, num);
    return bitset<32> (temp);
}

Where W[0..15] is a copy of the padded message (which matches the example).
Does anyone see a problem? The full code is here. It's about 170 lines.
","This question is quite old, but it hasn't been answered or closed, so I assume an answer is still welcome  
In extending the first 16 words of the message schedule array into the remaining 48, you probably meant for the third call to the add function to read add(W[k-7], s1) instead of add(W[i-7], s1)
Array index i-7 is less than zero for the first 7 chunks.
","967","<c++><algorithm><visual-studio><sha><sha256>","1","0","1","2019-01-27 14:02:54","","5","0","4723025","","2015-03-29 14:22:37","2015-03-28 04:08:30",""
"18541046","openssl sha256 difference between two way of calculating","I am using openssl sha256 function with C++. 
What is the difference between the below two way of calculating sha256 ?
Way1: Just call SHA256 method like below
SHA256((unsigned char*)buffer_to_hash, buffer_size, hashed_payload);
Way2: Use SHA256_CTX, SHA256_Init, SHA256_Update and SHA256_Final. As mentioned here
generate sha256 with openssl and C++
Both the programs produce the same result
Example for both methods have been mentioned here
","Modulo bugs and such, the two have basically different intents. The first does batch style processing. That is to say: you give it one complete string, and it produces a hash of that complete string.
The second does hashing incrementally. If you don't have (or want) access to the entire string to be hashed at once, it allows you to read some data, operate on it, read some more, operate on it, and so on until you've read all the data. At the end, you can get the overall hash of the entire data stream.
Just for example, let's assume you're running this on a computer with 4 Gigs of RAM, and you want to hash a 16 gigabyte file. Since the data won't fit in RAM (or even close to it) the second is probably a better choice for this case. Likewise, if you're receiving data over the network, but don't (necessarily) want to store all the raw packets just so you can hash them and (for example) acknowledge receipt.
","967","<c++><openssl><sha><sha256>","1","2","1","2013-08-31 05:06:35","","0","1","-1","","2017-05-23 11:51:58","2013-08-30 20:32:06",""
"26041996","How to use SHA-3 on Mac? Which hash function securely prove integrity of files?","I need do make a digital attachment to my master thesis thus I was looking into hash functions to proof integrity. I thought of supplying all (MD5, SHA-1, SHA-256) and I'd also love to supply a SHA-3 as well.
How can I calculate a SHA-3 on mac?
Do you think SHA-3 is necessary and recommended or would the others be proof enough?
Which other hash algorithms would you recommend 
","You can write the code in Go which has SHA-3 as part of its crypto library.
","960","<macos><hash><md5><sha>","2","0","1","2015-06-05 14:58:50","","0","","","","","2014-09-25 15:08:57",""
"24282789","C++ Builder - Using TIdHashSHA256 with OpenSSL","As I understand Indy does not directly implement SHA256 and above and I must use OpenSSL.If I use the following I don't get any result:
#include <IdHashSHA.hpp>
...
TIdHashSHA256 *x = new TIdHashSHA256;
ShowMessage(BoolToStr(x->IsAvailable(), true)); 

i get false. I read somewhere I need to use IdSSLOpenSSLHeaders and load SSL library but I don't know how. Can anyone give an example how to use SHA256 in C++ Builder? 
","You need to call LoadOpenSSLLibrary() to initialize the OpenSSL functions that TIdHashSHA256 uses internally.
Also, IsAvailable() is a class method (similar to a static method but with an extra metaclass parameter), so you do not need an object instance to call it:
#include <IdSSLOpenSSLHeaders.hpp>
#include <IdHashSHA.hpp>
...
LoadOpenSSLLibrary(); // <-- add this

// if using CB2007 or earlier:
ShowMessage(BoolToStr(TIdHashSHA256::IsAvailable(__classid(TIdHashSHA256)), true)); 

// if using CB2009 or later:
ShowMessage(BoolToStr(TIdHashSHA256::IsAvailable(), true)); 

","957","<c++><hash><c++builder><indy><sha>","1","2","1","2014-06-19 01:44:26","24297530","2","","","","","2014-06-18 10:08:12",""
"46176184","How an array is ""tightly packed"" in Solidity","I am trying to create a hash (sha256) of an array but I don't understand how it works.
for example : 
pragma solidity 0.4.11;
contract test { bytes32 public hash; bytes32 public hash2; bytes32 public hash3; bytes32 public hash4;
function test () {
    address[2] memory _add;
    _add[0] = 0xca35b7d915458ef540ade6068dfe2f44e8fa733c;
    _add[1] = 0xca35b7d915458ef540ade6068dfe2f44e8fa733c;
    hash = sha256(_add[0],_add[1]);
    hash2 = sha256(_add);

    _add[0] = 0;
    _add[1] = 0;
    hash3 = sha256(_add[0],_add[1]);
    hash4 = sha256(_add);
}

hash is different from hash2 and hash3 is different from hash4... why?
The ""tightly packed"" data should result in the same hash ... no?
Best,
","""Tightly packed"" no longer applies when dealing with an array. You must zerofill to 32 bytes.
Unfortunately, I couldn't find the docs to validate that, so all I can do is give an example to show it works.
Side Note: Are you sure you want sha256 instead of keccak256, which is used most other places in Ethereum?
Demo
I'll demonstrate with sha3 (the same as keccak256), but the concept is the same.
Baseline
In Remix, you'll find that:
sha3([0xca35b7d915458ef540ade6068dfe2f44e8fa733c, 0xca35b7d915458ef540ade6068dfe2f44e8fa733c]);

gives the result: 0x77e5189111eb6557e8a637b27ef8fbb15bc61d61c2f00cc48878f3a296e5e0ca
Rebuild, with Web3.py
from web3 import Web3, IPCProvider

web3 = Web3(IPCProvider())

addr = 'ca35b7d915458ef540ade6068dfe2f44e8fa733c'
zerofilled = addr.zfill(64)  # 64 hex chars == 32 bytes
two_packed = zerofilled * 2

sha = web3.sha3('0x' + two_packed, encoding='hex')
assert sha == '0x77e5189111eb6557e8a637b27ef8fbb15bc61d61c2f00cc48878f3a296e5e0ca'

For what it's worth, you can also get the result with:
web3.soliditySha3(
  ['address[2]'],
  [[
    '0xca35b7d915458ef540ade6068dfe2f44e8fa733c',
    '0xca35b7d915458ef540ade6068dfe2f44e8fa733c',
  ]],
)

","956","<sha256><sha><ethereum><solidity>","2","0","2","2017-09-13 16:17:46","","0","","8468225","","2017-09-12 12:43:57","2017-09-12 12:18:04",""
"46176184","How an array is ""tightly packed"" in Solidity","I am trying to create a hash (sha256) of an array but I don't understand how it works.
for example : 
pragma solidity 0.4.11;
contract test { bytes32 public hash; bytes32 public hash2; bytes32 public hash3; bytes32 public hash4;
function test () {
    address[2] memory _add;
    _add[0] = 0xca35b7d915458ef540ade6068dfe2f44e8fa733c;
    _add[1] = 0xca35b7d915458ef540ade6068dfe2f44e8fa733c;
    hash = sha256(_add[0],_add[1]);
    hash2 = sha256(_add);

    _add[0] = 0;
    _add[1] = 0;
    hash3 = sha256(_add[0],_add[1]);
    hash4 = sha256(_add);
}

hash is different from hash2 and hash3 is different from hash4... why?
The ""tightly packed"" data should result in the same hash ... no?
Best,
","Actually, the issue was that all the elements of the array are converted to Bytes32 (adding a padding of zeros)...
So basically :
data before hash = ca35b7d915458ef540ade6068dfe2f44e8fa733cca35b7d915458ef540ade6068dfe2f44e8fa733c
data before hash2 = 000000000000000000000000ca35b7d915458ef540ade6068dfe2f44e8fa733c000000000000000000000000ca35b7d915458ef540ade6068dfe2f44e8fa733c
data before hash3 = 00000000000000000000000000000000000000000000000000000000000000000000000000000000
data before hash4 = 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
","956","<sha256><sha><ethereum><solidity>","2","1","2","2017-09-13 16:17:46","","0","","8468225","","2017-09-12 12:43:57","2017-09-12 12:18:04",""
"47920371","APK that is signed with a different certificate to your previous APKs","I need help in android application created in eclipse which is already live BUT it has some complication so we had recreate this project on Android studio.After complete debug testing, Now client is trying to make the new apk live by upgrading previous live apk. AND while doing this, client getting following error,

You uploaded an APK that is signed with a different certificate to
  your previous APKs. You must use the same certificate. Your existing
  APKs are signed with the certificate(s) with fingerprint(s): [ SHA1:
  52:D5:6D:B3:88:30:B7:88:3F:4D:8B:D5:37:67:FF:E1:93:7A:E9:89 ] and the
  certificate(s) used to sign the APK you uploaded have fingerprint(s):
  [ SHA1: B1:53:ED:20:41:2E:1F:0E:1F:5B:54:F3:8D:44:7C:59:AC:EE:FE:DB
  ------------------------------------------------------------------------ ].

I googled the solution for this error but not found any proper solution. Can you please guide me for resolving the above error.
","The answer is already in error description: ""You must use the same certificate"". Seems you generate signed apk using different from old version certificate (.jks file)
","941","<android><google-play><sha>","0","0","1","2018-08-04 05:32:18","","3","","4231956","","2017-12-21 08:27:39","2017-12-21 07:56:17",""
"8254132","Two different hash values even after entering same string in Android and .NET","I have a .NET SOAP web serviec(.asmx) for SHA-1 hashing to get Base64 hash string. 
Here is my web service code:
 public class Service1 : System.Web.Services.WebService
  {
    [WebMethod]
    public string HashCode(string str)
    {
        string rethash = """";
        try
        {

            System.Security.Cryptography.SHA1 hash = System.Security.Cryptography.SHA1.Create();
            System.Text.ASCIIEncoding encoder = new System.Text.ASCIIEncoding();
            byte[] combined = encoder.GetBytes(str);
            hash.ComputeHash(combined);
            rethash = Convert.ToBase64String(hash.Hash);
        }
        catch (Exception ex)
        {
            string strerr = ""Error in HashCode : "" + ex.Message;
        }
        return rethash;
    }
}

Here hash returned for input string ""abc"" is 

qZk+NkcGgWq6PiVxeFDCbJzQ2J0=

Now, Android code again using SHA-1 and Base64 is:
public class PaswordencodingActivity extends Activity 
   {
 private static final String soap_action = ""http://tempuri.org/HashCode"";
 private static final String method_name = ""HashCode"";
 private static final String namespace2 = ""http://tempuri.org/"";
 private static final String url2 = ""http://10.0.2.2/checkhash/Service1.asmx""; 

String password=""abc"";
public final static int NO_OPTIONS = 0;
String hash;
    String result2;

   @Override
      public void onCreate(Bundle savedInstanceState) {
      super.onCreate(savedInstanceState);
      setContentView(R.layout.main);

    final EditText pass=(EditText)findViewById(R.id.editText1);
    Button encode=(Button)findViewById(R.id.button1);

    encode.setOnClickListener(new View.OnClickListener() {
        public void onClick(View v)  {
            // Perform action on click
            password=pass.getText().toString();
            if(password!=null){
            try {
    SHA1(password) ;
           } catch (NoSuchAlgorithmException e) {   
    // TODO Auto-generated catch block
    e.printStackTrace();
    } catch (UnsupportedEncodingException e) {
    // TODO Auto-generated catch block                                          
               e.printStackTrace();
    } catch (IOException e)
              {
    // TODO Auto-generated catch block
        e.printStackTrace();
        }
            }
            else{
    Toast.makeText(PaswordencodingActivity.this, ""this is a negative onClick"", Toast.LENGTH_LONG).show();
            }

         }
    });

}
private static String convertToHex(byte[] bytes) throws java.io.IOException 
 {       
      StringBuffer sb = new StringBuffer();
      String hex=null;
        for (int i = 0; i < bytes.length; i++) 
        {           
          hex=Base64.encodeToString(bytes, 0, bytes.length, NO_OPTIONS);
            if (hex.length() == 1) 
            {
                sb.append('0');
            }
            sb.append(hex);
        }
        return sb.toString();
    }


 public  void SHA1(String text) 
      throws NoSuchAlgorithmException, IOException  
   { 
       MessageDigest md;
       md = MessageDigest.getInstance(""SHA-1"");
       byte[] sha1hash = new byte[40];
       md.update(text.getBytes(""iso-8859-1""), 0, text.length());
       sha1hash = md.digest();
       hash=convertToHex(sha1hash);
       System.out.println(""hash value is""+hash);
  try 
  {
        result2 = call3(hash);
} catch (XmlPullParserException e) {
    // TODO Auto-generated catch block
    e.printStackTrace();
 }

if(result2.equalsIgnoreCase(hash))
{
    System.out.println(""success"");

}

} 

public String call3(String hash) throws XmlPullParserException
    {
        String b="""";     
        SoapObject request = new SoapObject(namespace2, method_name);                       
        request.addProperty(""str"",hash);
    SoapSerializationEnvelope envelope = new SoapSerializationEnvelope(SoapEnvelope.VER11); 
     envelope.dotNet = true; 
     envelope.setOutputSoapObject(request);

     HttpTransportSE  android = new HttpTransportSE(url2);
         android.debug = true; 
  try 
 {

         android.call(soap_action, envelope);
         SoapPrimitive result = (SoapPrimitive)envelope.getResponse();
         Log.i(""myapp"",result.toString());
         System.out.println("" --- response ---- "" + result); 
         b=result.toString();

 } catch (SocketException ex) { 
    ex.printStackTrace(); 
    } catch (Exception e) { 
    e.printStackTrace(); 
    } 

    return b;   

}

Android returned hash value is (from logcat for input String ""abc"")

11-24 13:56:35.179: INFO/myapp(578): 48a4yT8WPFCmkTxMSC9WaEtSxJI=
11-24 13:56:35.179: INFO/System.out(578):  --- response ---- 48a4yT8WPFCmkTxMSC9WaEtSxJI=

Can someone tell what's going wrong in my code? Am I double hashing somewhere
Please help
Thanks
","Check the encoding, make sure that the actual byte arrays that are used to compute the hash are equal. In .NET you use ASCII encoding and in Android iso-8859-1. This should not mater as the iso-8859-1 is natural extension of the ASCII encoding, but still, check the arrays.
Also try using this function for SHA1 digest on Android:
 /**
   * Generates SHA-1 digest of the provided data.
   * 
   * @param data the data to digest
   * @return SHA-1 digest of the provided data.
   */
  public static byte[] sha1Digest(byte[] data) {
    MessageDigest mdSha1 = null;
    try {
      mdSha1 = MessageDigest.getInstance(""SHA-1"");
    } catch (NoSuchAlgorithmException e1) {
      Log.e(LOG_TAG, ""Error initializing SHA1 message digest"");
    }
    mdSha1.update(data);
    byte[] sha1hash = mdSha1.digest();
    return sha1hash;
  }

","934","<android><web-services><hash><android-ksoap2><sha>","1","1","1","2011-11-24 08:50:09","8254278","0","3","","","","2011-11-24 08:36:16",""
"50321301","How To Hash Social Security Numbers When Used As Identifiers","I have a service that let's users store information (such as messages, videos', etc.) for their extended family online to be shared when they pass away. Ex - Send this video to my nephew when I pass way telling him I love him. 
I have a JSON structured database that stores a users social security number as an identifier to their profile. 
 $salted_hashed_ssn: {
    //important information for extended family such as vidoes and email addresses
   }

When a user dies, their closest family members go to my site and input the deceased person's social security number. I then hash those and see if a match is made in my database. If a match is made, we then run functions to share the important information for the extended family. 
Preparing for the worst, I want to store the social security numbers as securely as possible. Because I only need to use the social security numbers as a identifier, I don't have to store the raw/plain text ssn values. Therefore, I can hash the ssns but I need to salt them to protect against lookup tables. My issue is that when the users input the deceased user's social security number I don't have a way to see which salt key was used. 
To make it random and prevent against lookup tables, how would you recommend I salt my social security numbers? Should I just take x number of characters each time? Ie - always grab the first 4 characters of the social security number, hash those, and them to the full SSN and then rehash?
let salted_hashed_ssn = SHA256(First 4 characters of SSN) + SHA256(SSN) ?
How would you recommend setting up the salt and hash?
","You can treat your SSN in the same way you would treat a password.  Remember, a salt doesn't have to be secret, it just has to be different for each entry.  So simply store your salt alongside your hash, this is perfectly safe.
I wouldn't recommend using SHA256 here, however.  Use bcrypt instead.  It handles the salt for you, which means you don't need to worry about the advice above anyway.  It's also far more resistant to brute forcing.  The SHA family was not designed for hashing in the way you are using it.
","931","<encryption><hash><sha256><sha>","1","1","1","2018-05-13 23:01:00","50321339","0","","","","","2018-05-13 22:55:01",""
"22113758","HMAC implementation in C with SHA384","I need an HMAC implementation with SHA384 in C. It is needed for some API I'm writing.
If anyone can provide at least a starting point I would be happy. Thanks!
","Use the openssl library.
An example of using openssl to generate an SHA384 hash is here: http://www.askyb.com/cpp/openssl-sha384-hashing-example-in-cpp/
It claims to be in C++ but it's pretty much straight C.
","929","<c><sha><hmac>","1","3","1","2014-03-01 13:05:58","22114765","0","","","","","2014-03-01 11:27:38",""
"12689617","Do any web browsers support HTTP Digest with alternative digest algorithms such as SHA-2","I am looking to see do any web browsers currently support HTTP Digest using alternative digest algorithms such as SHA-2?
I know the proposed update to RFC-2617 is still in a draft state so just wanted to know if any browsers are pre-emptively already supporting the alternative digest algorithms.
","In the context of digest authentication, the MD5 weakness is not a concern. What is more important is a robust implementation of the nonce mechanism (and preferably the integrity checking, although only a few browsers support it) as it avoids replay and chosen plaintext attacks. Adding SHA to the mix doesn't help in any way. 
","919","<http><authentication><md5><sha><digest>","1","0","1","2013-10-26 18:04:06","","0","","","","","2012-10-02 11:44:59",""
"5356248","Bash scripting files with find and xargs","When I run shasum from a several directories up on a single file, I get what I expect and ultimately want: 
shasum 2010/Whitmore/The\ Astrophysical\ Journal\ 2010\ Whitmore.pdf
5da84767c2301f29ed3b7db7542167150fe63b8b  2010/Whitmore/The Astrophysical Journal 2010 Whitmore.pdf

When I run find from the same directory, it lists the files no problem: 
find 2010/Whitmore/* | xargs -0
2010/Whitmore/The Astrophysical Journal 2010 Whitmore.pdf

I've been trying to write a bash script (or just a single line) that will return the individual shasum on each file found by find (there are lots) along with its filename. Piping the filenames to shasum does not work in any of the combinations I've tried.
I expect that the problem is with the spaces in the filename, but after Google searching, trying a number of find/xargs/ls combinations (and various combinations of what seemed to work for other people including -print0 flags), I still cannot figure out a way to run shasum on each file under these directories.
An example of the output I want (assuming there are 2 files under Whitmore) in case there's a completely different way of getting this result:
find 2010/Whitmore/* | xargs -0 | shasum
5da84767c2301f29ed3b7db7542167150fe63b8b  2010/Whitmore/The Astrophysical Journal 2010 Whitmore.pdf
4d2b0a6da00473133b4617d67d9249da3d05cc19  2010/Whitmore/arXiv 2010 Whitmore.pdf

I am on a Mac OSX 10.6 
","Does 
find -type f | sed 's/./\\&/g' | xargs shasum

work?
","916","<find><xargs><sha>","1","0","5","2013-06-22 12:38:21","5356338","0","","","","","2011-03-18 18:22:46",""
"5356248","Bash scripting files with find and xargs","When I run shasum from a several directories up on a single file, I get what I expect and ultimately want: 
shasum 2010/Whitmore/The\ Astrophysical\ Journal\ 2010\ Whitmore.pdf
5da84767c2301f29ed3b7db7542167150fe63b8b  2010/Whitmore/The Astrophysical Journal 2010 Whitmore.pdf

When I run find from the same directory, it lists the files no problem: 
find 2010/Whitmore/* | xargs -0
2010/Whitmore/The Astrophysical Journal 2010 Whitmore.pdf

I've been trying to write a bash script (or just a single line) that will return the individual shasum on each file found by find (there are lots) along with its filename. Piping the filenames to shasum does not work in any of the combinations I've tried.
I expect that the problem is with the spaces in the filename, but after Google searching, trying a number of find/xargs/ls combinations (and various combinations of what seemed to work for other people including -print0 flags), I still cannot figure out a way to run shasum on each file under these directories.
An example of the output I want (assuming there are 2 files under Whitmore) in case there's a completely different way of getting this result:
find 2010/Whitmore/* | xargs -0 | shasum
5da84767c2301f29ed3b7db7542167150fe63b8b  2010/Whitmore/The Astrophysical Journal 2010 Whitmore.pdf
4d2b0a6da00473133b4617d67d9249da3d05cc19  2010/Whitmore/arXiv 2010 Whitmore.pdf

I am on a Mac OSX 10.6 
","How about using the -exec option of find?
find 2010/Whitmore/* -exec shasum {} \;
","916","<find><xargs><sha>","1","3","5","2013-06-22 12:38:21","5356338","0","","","","","2011-03-18 18:22:46",""
"5356248","Bash scripting files with find and xargs","When I run shasum from a several directories up on a single file, I get what I expect and ultimately want: 
shasum 2010/Whitmore/The\ Astrophysical\ Journal\ 2010\ Whitmore.pdf
5da84767c2301f29ed3b7db7542167150fe63b8b  2010/Whitmore/The Astrophysical Journal 2010 Whitmore.pdf

When I run find from the same directory, it lists the files no problem: 
find 2010/Whitmore/* | xargs -0
2010/Whitmore/The Astrophysical Journal 2010 Whitmore.pdf

I've been trying to write a bash script (or just a single line) that will return the individual shasum on each file found by find (there are lots) along with its filename. Piping the filenames to shasum does not work in any of the combinations I've tried.
I expect that the problem is with the spaces in the filename, but after Google searching, trying a number of find/xargs/ls combinations (and various combinations of what seemed to work for other people including -print0 flags), I still cannot figure out a way to run shasum on each file under these directories.
An example of the output I want (assuming there are 2 files under Whitmore) in case there's a completely different way of getting this result:
find 2010/Whitmore/* | xargs -0 | shasum
5da84767c2301f29ed3b7db7542167150fe63b8b  2010/Whitmore/The Astrophysical Journal 2010 Whitmore.pdf
4d2b0a6da00473133b4617d67d9249da3d05cc19  2010/Whitmore/arXiv 2010 Whitmore.pdf

I am on a Mac OSX 10.6 
","If your disks are fast you may want to run several in parallel:
find 2010/Whitmore/* -type f | parallel shasum

To learn more about GNU Parallel watch the intro video (If you are an astrophysicist you will be glad you did): http://www.youtube.com/watch?v=OpaiGYxkSuQ
","916","<find><xargs><sha>","1","1","5","2013-06-22 12:38:21","5356338","0","","","","","2011-03-18 18:22:46",""
"5356248","Bash scripting files with find and xargs","When I run shasum from a several directories up on a single file, I get what I expect and ultimately want: 
shasum 2010/Whitmore/The\ Astrophysical\ Journal\ 2010\ Whitmore.pdf
5da84767c2301f29ed3b7db7542167150fe63b8b  2010/Whitmore/The Astrophysical Journal 2010 Whitmore.pdf

When I run find from the same directory, it lists the files no problem: 
find 2010/Whitmore/* | xargs -0
2010/Whitmore/The Astrophysical Journal 2010 Whitmore.pdf

I've been trying to write a bash script (or just a single line) that will return the individual shasum on each file found by find (there are lots) along with its filename. Piping the filenames to shasum does not work in any of the combinations I've tried.
I expect that the problem is with the spaces in the filename, but after Google searching, trying a number of find/xargs/ls combinations (and various combinations of what seemed to work for other people including -print0 flags), I still cannot figure out a way to run shasum on each file under these directories.
An example of the output I want (assuming there are 2 files under Whitmore) in case there's a completely different way of getting this result:
find 2010/Whitmore/* | xargs -0 | shasum
5da84767c2301f29ed3b7db7542167150fe63b8b  2010/Whitmore/The Astrophysical Journal 2010 Whitmore.pdf
4d2b0a6da00473133b4617d67d9249da3d05cc19  2010/Whitmore/arXiv 2010 Whitmore.pdf

I am on a Mac OSX 10.6 
","To get around the trouble with space chars in filenames, use '\0' as file separator:
find 2010/Whitmore/ -type f -print0 | xargs -0 -l -P 2 shasum

The -P argument to xargs specifies how many concurrent processes it should run.
","916","<find><xargs><sha>","1","0","5","2013-06-22 12:38:21","5356338","0","","","","","2011-03-18 18:22:46",""
"5356248","Bash scripting files with find and xargs","When I run shasum from a several directories up on a single file, I get what I expect and ultimately want: 
shasum 2010/Whitmore/The\ Astrophysical\ Journal\ 2010\ Whitmore.pdf
5da84767c2301f29ed3b7db7542167150fe63b8b  2010/Whitmore/The Astrophysical Journal 2010 Whitmore.pdf

When I run find from the same directory, it lists the files no problem: 
find 2010/Whitmore/* | xargs -0
2010/Whitmore/The Astrophysical Journal 2010 Whitmore.pdf

I've been trying to write a bash script (or just a single line) that will return the individual shasum on each file found by find (there are lots) along with its filename. Piping the filenames to shasum does not work in any of the combinations I've tried.
I expect that the problem is with the spaces in the filename, but after Google searching, trying a number of find/xargs/ls combinations (and various combinations of what seemed to work for other people including -print0 flags), I still cannot figure out a way to run shasum on each file under these directories.
An example of the output I want (assuming there are 2 files under Whitmore) in case there's a completely different way of getting this result:
find 2010/Whitmore/* | xargs -0 | shasum
5da84767c2301f29ed3b7db7542167150fe63b8b  2010/Whitmore/The Astrophysical Journal 2010 Whitmore.pdf
4d2b0a6da00473133b4617d67d9249da3d05cc19  2010/Whitmore/arXiv 2010 Whitmore.pdf

I am on a Mac OSX 10.6 
","instead of:

find 2010/Whitmore/* | xargs -0 | shasum

you should use

find 2010/Whitmore/* | xargs shasum

","916","<find><xargs><sha>","1","0","5","2013-06-22 12:38:21","5356338","0","","","","","2011-03-18 18:22:46",""
"5516281","SHA512 in php - how?","
Possible Duplicate:
SHA-512 library for PHP 

I see the has() is only upto sha1. How to implement SHA512 properly with PHP, using codeignitor. Do i need an external library or is there built-in support for this? If external any suggestions on something open/free?
Thanks.
","See http://us2.php.net/manual/en/function.hash-algos.php:
print_r(hash_algos());

That should give you SHA512.
","912","<php><codeigniter><sha>","0","1","1","2011-04-01 16:42:43","","2","","-1","","2017-05-23 10:33:11","2011-04-01 16:39:44","2011-04-01 17:09:58"
"25698182","Possible to move a SSL certificate from SHA1 to SHA256 without reissueing?","I have generated some ssl certificates using:
sudo openssl req -nodes -newkey rsa:2048 -keyout hostname.key -out hostname.csr

instead of:
sudo openssl req -nodes -sha256 -newkey rsa:2048 -keyout hostname.key -out hostname.csr

Is it possible to change the hash on the certificate without having to regenerate and reissue the certificate?
","No, this is not possible.
Since the hash is used to sign the certificate by the issuing CA, the signature would be invalid if you change the hash no matter if the new hash would still be a valid hash of the certificate (because of just another algorithm).
","907","<ssl><https><openssl><sha>","1","1","2","2014-09-06 09:53:11","25698492","0","","","","","2014-09-06 07:57:41",""
"25698182","Possible to move a SSL certificate from SHA1 to SHA256 without reissueing?","I have generated some ssl certificates using:
sudo openssl req -nodes -newkey rsa:2048 -keyout hostname.key -out hostname.csr

instead of:
sudo openssl req -nodes -sha256 -newkey rsa:2048 -keyout hostname.key -out hostname.csr

Is it possible to change the hash on the certificate without having to regenerate and reissue the certificate?
","No. You haven't just changed the certificate: you've changed the key that it authenticates.
","907","<ssl><https><openssl><sha>","1","1","2","2014-09-06 09:53:11","25698492","0","","","","","2014-09-06 07:57:41",""
"11130574","Why am I getting this NoSuchProviderException","I am trying to use Bouncy Castle as a security provider in a Maven project. It seems to work fine in certain places in the codebase and works completely fine everywhere for some people. However, if I try something like:
public class Foo {
    public static void main(String[] args) throws Exception {
        Signature signature = Signature.getInstance(""SHA256withRSA"", ""BC"");
    }
}

then I get a NoSuchProviderException exception.
In the pom I have Bouncy Castle as a dependency as
<dependency>
          <groupId>bouncycastle</groupId>
          <artifactId>bcprov-jdk16</artifactId>
          <version>140</version>
          <scope>compile</scope>
</dependency>

I have tried with several different JDKs and all give the same error.
","As answered in this related SO question, adding the following line should solve your problem.
Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());

","905","<java><maven><rsa><bouncycastle><sha>","2","4","1","2012-06-21 04:34:23","11131534","0","","","","","2012-06-21 01:56:20",""
"36856557","where is SHA1_Init implementation in openssl","I would like to find the implementation of SHA1_Init in openssl source code.
http://osxr.org:8080/openssl/source/crypto/sha/sha1.c#0108
0108     SHA1_Init(&c);

but only definition found in 
http://osxr.org:8080/openssl/source/crypto/sha/sha.h#0122
Where is it?
Thanks,
=SG=
","So SHA1_Init is defined in the header of sha_locl.h as HASH_INIT. sha1dgst.c includes sha_locl.h which includes ../md32_common.h which does the expansion of HASH_UPDATE, HASH_TRANFORM, and HASH_FINAL which is defined as SHA1_Init in sha.h. I believe the actual implementation though of SHA1_Init is ultimately here: http://osxr.org:8080/openssl/source/crypto/sha/sha_locl.h#0125 or here on github: https://github.com/openssl/openssl/blob/master/crypto/sha/sha_locl.h#L101.
","904","<openssl><sha>","3","1","1","2016-04-26 06:50:46","","0","","","","","2016-04-26 06:10:15",""
"25533497","Different sha calculated in client and server for the same value","I have a question about this.
I created two programs, a client and a server, that communicate via socket in Java.
Now the problem is, when I receive an object from an InputStream on the server's socket, I have to take the SHA384 of the value received and check to ensure it is the same as the SHA384 computed by the client. I checked in debug mode that the received value is the same as the sent value, but when I take the SHA384 of this value I obtain a different hash than the client.
Why? The client is an android application and the server side is in simple Java.
This is the function that I call to create the hash
public enum SECURE_HASH_TYPE{MD2, MD5, SHA, SHA256, SHA384, SHA512}

private static String SecureHashToString(SECURE_HASH_TYPE hash){

    String hashString = ""SHA-256"";                              //default value

    if(hash != null){
        switch(hash){
            case MD2:
                hashString = ""MD2"";
                break;

            case MD5:
                hashString = ""MD5"";
                break;

            case SHA:
                hashString = ""SHA"";
                break;

            case SHA256:
                hashString = ""SHA-256"";
                break;

            case SHA384:
                hashString = ""SHA-384"";
                break;

            case SHA512:
                hashString = ""SHA-512"";
                break;

            default:
                hashString = ""SHA-512"";
                break;
        }
    }

    return hashString;
}



public static byte[] getByteHashCode(Object obj, SECURE_HASH_TYPE hashing){
    if(obj == null)
        return null;

    MessageDigest md;
    byte[] byteData = null;

    try {
        md = MessageDigest.getInstance(SecureHashToString(hashing));

        md.update(ObjectUtil.toByteArray(obj));

        byteData = md.digest();
    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
    }

    return byteData;
}


 public static byte[] toByteArray(Object obj){
    if(obj == null)
        return null;

    if(obj instanceof String)
        return ((String)obj).getBytes();

    ByteArrayOutputStream baos = null;
    ObjectOutputStream oos = null;
    byte[] byte_array = null;

    try{
        baos = new ByteArrayOutputStream();
        oos = new ObjectOutputStream(baos);

        oos.writeObject(obj);
        byte_array = baos.toByteArray();

        baos.close();
        oos.close();
    } catch (IOException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }

    return byte_array;
}

","Minor issue: for Strings, you rely on getBytes(), which uses the system's default charset.  The result can be different if the client and server use different default charsets.  You should instead use getBytes(String), specifying an appropriate charset name:
return ((String) obj).getBytes('UTF-8');

But the major issue is that you use ObjectOutputStream.writeObject() to create your byte sequence for non-strings.  There is no particular reason to expect that that method will yield byte-for-byte identical byte sequences when applied to any two distinct objects, even if those objects are equivalent in some relevant sense.  You might get that result for objects of some classes, but I can definitely write a class whose instances will not have that property.
Oh, and your method will break if you pass it an object that isn't Serializable.
I don't know of any way to do what you are attempting at the level of generality you are trying to do it.
","904","<java><hash><byte><sha>","0","3","1","2014-12-16 23:10:09","","3","","1500563","","2014-12-16 23:10:09","2014-08-27 17:29:01",""
"22841666","Email deduplication","is it true that e-mail can be deduplicated by just using some of their headers as according to RFC their message-id should be unique?
Is there any way to calculate the chance of 1 single email beeing missed in this deduplication method below (sha512 hash of those 3 headers)?
// $email is a parsed array containing 3 keys (mime headers) -> message_id, subject and date.
$hashStr = $email['message_id'];
$hashStr .= $email['subject'];
$hashStr .= $email['date'];
$uniqueEmailId = hash('sha512', $hashStr);

It is kind of mission critical that no single email will be missed, chances are that we are having to deduplicate over several (>2) billion mime files.
","The SHA512 hash produces a hash value with 512 bits of data. Assuming a random distribution of bits, this works out to more than 1.34e+154 possible values.  Even with over 2e+9 samples, the chances of an accidental collision are very near zero.
However, your input for the hash isn't quite that random.  message_id is a globally unique identifier which ""only"" has 5.3e+36 possible values, and the randomness depends on the implementation. According to the wiki link, the odds of a collision are about 50% at 4.2e+18 samples. Email addresses and dates are likely significantly higher than that.
That said, without actually doing the probability math, I would say that the odds are negligible.
","904","<email><hash><bigdata><sha><deduplication>","6","4","2","2014-04-21 21:46:07","","0","2","","","","2014-04-03 15:06:23",""
"22841666","Email deduplication","is it true that e-mail can be deduplicated by just using some of their headers as according to RFC their message-id should be unique?
Is there any way to calculate the chance of 1 single email beeing missed in this deduplication method below (sha512 hash of those 3 headers)?
// $email is a parsed array containing 3 keys (mime headers) -> message_id, subject and date.
$hashStr = $email['message_id'];
$hashStr .= $email['subject'];
$hashStr .= $email['date'];
$uniqueEmailId = hash('sha512', $hashStr);

It is kind of mission critical that no single email will be missed, chances are that we are having to deduplicate over several (>2) billion mime files.
","If the message-id is already unique, there's little point in hashing (and therefore introducing the admittedly negligible chance of collision).
It seems that a more robust approach would be to use the message-id itself as a basis for comparison.
","904","<email><hash><bigdata><sha><deduplication>","6","2","2","2014-04-21 21:46:07","","0","2","","","","2014-04-03 15:06:23",""
"8305158","Reverse hash lookup query","i have an web service and one of the parameter our clients needs to use is a custom key. this key is a hash of sha1
eg:
bce700635afccfd8690836f37e4b4e9cf46d9c08

then when the client call our web service i have to check few things:

is client active
is client can submit via webservice and service

now my problem is this:
i have a query:
$sql = ""SELECT permission, is_active FROM clients WHERE sha1(concat(id,key)) = '"" . mysql_real_escape_string($key) . ""'"";

Am i doing the right thing? or there's a better way?
thanks
","This approach is expensive, since, every time you run this query, MySQL will have to examine every single record in clients and compute the SHA-1 hash of its id and key. (I'm assuming here that clients has more than a few rows, or at least, that you'd like to use an approach that supports the case where clients has more than a few rows.)
Why don't you add a new field called (say) id_key_sha1? You can use a trigger to keep the field populated, and add an index on it. This approach should perform much better.
Edited to add: You mention that the client, in addition to passing in this SHA-1 hash, also has to submit a username and password? I don't know what your table structure looks like, but I'm guessing that it would make more sense to find the client record based on the username first, and then comparing the SHA-1 hash for that specific record, rather than trying to find the record by the SHA-1 hash.
","895","<mysql><sha>","10","10","2","2011-11-29 03:12:54","8305209","4","","1012030","","2011-11-29 02:49:04","2011-11-29 02:35:41",""
"8305158","Reverse hash lookup query","i have an web service and one of the parameter our clients needs to use is a custom key. this key is a hash of sha1
eg:
bce700635afccfd8690836f37e4b4e9cf46d9c08

then when the client call our web service i have to check few things:

is client active
is client can submit via webservice and service

now my problem is this:
i have a query:
$sql = ""SELECT permission, is_active FROM clients WHERE sha1(concat(id,key)) = '"" . mysql_real_escape_string($key) . ""'"";

Am i doing the right thing? or there's a better way?
thanks
","You should not applying function into your LHS column where doing filtering in mysql,
this make not possible for mysql to make use of index for comparison.
An example will allow make use on index :-
where key = SHA1(CONCAT(id, :key))

// where the :key = user submitted api key
// and in this case mysql able to fetch the matched rows via index

","895","<mysql><sha>","10","0","2","2011-11-29 03:12:54","8305209","4","","1012030","","2011-11-29 02:49:04","2011-11-29 02:35:41",""
"32982883","Using SHA256 method of OpenSSL library in C#","I'm coding a wrapper for OpenSSL for C#, and actually everything is working for me now, but i'm having a problem with one method. (I know about OpenSSL.Net, it just doesn't work as I need it and it is missing a lot of methods).
OpenSSL 1.0.1 has SHA256 that I'd like to use. The method itself in the OpenSSL lib C code:
unsigned char *SHA256(const unsigned char *d, size_t n, unsigned char *md)
{
    SHA256_CTX c;
    static unsigned char m[SHA256_DIGEST_LENGTH];

    if (md == NULL)
        md = m;
    SHA256_Init(&c);
    SHA256_Update(&c, d, n);
    SHA256_Final(md, &c);
    OPENSSL_cleanse(&c, sizeof(c));
    return (md);
} 

The function itself returns a pointer, and as parameters it needs the input data, the length of the data to hash, and an object for the hash.
I'm wrapping it in the next way:
[DllImport(DLLNAME, CallingConvention = CallingConvention.Cdecl)]
public extern static IntPtr SHA256(byte[] data, long len, ref byte[] result);

I'm trying to run it the next way:
byte[] d = Encoding.ASCII.GetBytes(""aaaaaaaaaaaaaaaa"");
byte[] r = new byte[32];
IntPtr x = NOpenSSL.Wrapper.SHA256(d, d.Length, ref r);
Console.WriteLine(d.Length + "" "" + x + "" "" + r.Length + "" "" + Encoding.ASCII.GetString(r));

And what i get for result: 16 1838788744 1. The d.Length is 16 OK, I get the x as a pointer OK, the r.Length becomes 1 byte that is impossible.
If I don't ref the byte[] in the method just simply give it to it nothing changes in the variable r.
Can anyone help me please what am i doing wrong?
Thank you for the help in advance!
","After some dicovery of the OpenSSL C source and experimenting with C# pointers and Marshaling it turned out the SHA256 method does not put the result hash in the variable md, but it returns a pointer to the hash. (First i thought it's the pointer of the SHA256-struct, but it is the actual hash.)
The working C# code is the following:
[DllImport(DLLNAME, CallingConvention = CallingConvention.Cdecl)]
public extern static IntPtr SHA256(byte[] data, long len, byte[] result);

-
byte[] data = Encoding.ASCII.GetBytes(""some_data_to_hash"");

IntPtr r = NOpenSSL.Wrapper.SHA256(data, data.Length, null);
byte[] output = new byte[32];
Marshal.Copy(r, output, 0, output.Length);

// output contains now the 32 bytes of the hashed data

Since we are not using the 3rd variable of the SHA256 method (we just pass null instead) the ref is needed to be removed from the DllImport.
(Note: https://www.openssl.org/docs/manmaster/crypto/sha.html says: If md is NULL, the digest is placed in a static array. Note: setting md to NULL is not thread safe.)
Using SHA512 is exactly the same just we need to replace the method name at both places in the code and change the output byte[] length from 32 to 64.
","891","<c#><openssl><wrapper><sha><sha256>","2","0","1","2015-10-14 04:41:58","33116765","1","","608639","","2015-10-07 22:32:09","2015-10-07 02:34:46",""
"12417781","methods DSA_do_verify and SHA1 (OpenSSL library for Windows)","i am working on a program to authenticate an ENC signature file by using OpenSSL for windows, and specifically methods DSA_do_verify(...) and SHA1(...) hash algorithm, but is having problems as the result from DSA_do_verify is always 0 (invalid). 
I am using the signature file of test set 4B from the IHO S-63 Data Protection Scheme, and also the SA public key (downloadable from IHO) for verification.
Below is my program, can anyone help to see where i have gone wrong as i have tried many ways but failed to get the verification to be valid, thanks..
The signature file from test set 4B
// Signature part R:
3F14 52CD AEC5 05B6 241A 02C7 614A D149 E7D6 C408.
// Signature part S:
44BB A3DB 8C46 8D11 B6DB 23BE 1A79 55E6 B083 7429.
// Signature part R:
93F5 EF86 1FF6 BA6F 1C2B B9BB 7F36 0C80 2F9B 2414.
// Signature part S:
4877 8130 12B4 50D8 3688 B52C 7A84 8E26 D442 8B6E.
// BIG p
C16C BAD3 4D47 5EC5 3966 95D6 94BC 8BC4 7E59 8E23 B5A9 D7C5 CEC8 2D65 B682 7D44 E953 7848 4730 C0BF F1F4 CB56 F47C 6E51 054B E892 00F3 0D43 DC4F EF96 24D4 665B.
// BIG q
B7B8 10B5 8C09 34F6 4287 8F36 0B96 D7CC 26B5 3E4D.
// BIG g
4C53 C726 BDBF BBA6 549D 7E73 1939 C6C9 3A86 9A27 C5DB 17BA 3CAC 589D 7B3E 003F A735 F290 CFD0 7A3E F10F 3515 5F1A 2EF7 0335 AF7B 6A52 11A1 1035 18FB A44E 9718.
// BIG y
15F8 A502 11C2 34BB DF19 B3CD 25D1 4413 F03D CF38 6FFC 7357 BCEE 59E4 EBFD B641 6726 5E5F 0682 47D4 B50B 3B86 7A85 FB4D 6E01 8329 A993 C36C FD9A BFB6 ED6D 29E0.

dataServer_pkeyfile.txt (extracted from above)
// BIG p
C16C BAD3 4D47 5EC5 3966 95D6 94BC 8BC4 7E59 8E23 B5A9 D7C5 CEC8 2D65 B682 7D44 E953 7848 4730 C0BF F1F4 CB56 F47C 6E51 054B E892 00F3 0D43 DC4F EF96 24D4 665B.
// BIG q
B7B8 10B5 8C09 34F6 4287 8F36 0B96 D7CC 26B5 3E4D.
// BIG g
4C53 C726 BDBF BBA6 549D 7E73 1939 C6C9 3A86 9A27 C5DB 17BA 3CAC 589D 7B3E 003F A735 F290 CFD0 7A3E F10F 3515 5F1A 2EF7 0335 AF7B 6A52 11A1 1035 18FB A44E 9718.
// BIG y
15F8 A502 11C2 34BB DF19 B3CD 25D1 4413 F03D CF38 6FFC 7357 BCEE 59E4 EBFD B641 6726 5E5F 0682 47D4 B50B 3B86 7A85 FB4D 6E01 8329 A993 C36C FD9A BFB6 ED6D 29E0.

Program abstract:
QbyteArray pk_data;
QFile pk_file(""./dataServer_pkeyfile.txt"");

if (pk_file.open(QIODevice::Text | QIODevice::ReadOnly))
{
   pk_data.append(pk_file.readAll());
}
pk_file.close();

unsigned char ptr_sha_hashed[20];
unsigned char *ptr_pk_data = (unsigned char *)pk_data.data();

// openssl SHA1 hashing algorithm
SHA1(ptr_pk_data, pk_data.length(), ptr_sha_hashed);

DSA_SIG *dsasig = DSA_SIG_new();

char ptr_r[] = ""93F5EF861FF6BA6F1C2BB9BB7F360C802F9B2414""; //from tset 4B
char ptr_s[] = ""4877813012B450D83688B52C7A848E26D4428B6E""; //from tset 4B

if (BN_hex2bn(&dsasig->r, ptr_r) == 0) return 0;
if (BN_hex2bn(&dsasig->s, ptr_s) == 0) return 0;

DSA *dsakeys = DSA_new();

//the following values are from the SA public key
char ptr_p[] = ""FCA682CE8E12CABA26EFCCF7110E526DB078B05EDECBCD1EB4A208F3AE1617AE01F35B91A47E6DF63413C5E12ED0899BCD132ACD50D99151BDC43EE737592E17"";
char ptr_q[] = ""962EDDCC369CBA8EBB260EE6B6A126D9346E38C5"";
char ptr_g[] = ""678471B27A9CF44EE91A49C5147DB1A9AAF244F05A434D6486931D2D14271B9E35030B71FD73DA179069B32E2935630E1C2062354D0DA20A6C416E50BE794CA4"";
char ptr_y[] = ""963F14E32BA5372928F24F15B0730C49D31B28E5C7641002564DB95995B15CF8800ED54E354867B82BB9597B158269E079F0C4F4926B17761CC89EB77C9B7EF8"";

if (BN_hex2bn(&dsakeys->p, ptr_p) == 0) return 0;
if (BN_hex2bn(&dsakeys->q, ptr_q) == 0) return 0;
if (BN_hex2bn(&dsakeys->g, ptr_g) == 0) return 0;
if (BN_hex2bn(&dsakeys->pub_key, ptr_y) == 0) return 0;

int result;  //valid = 1, invalid = 0, error = -1

result = DSA_do_verify(ptr_sha_hashed, 20, dsasig, dsakeys);

//result is 0 (invalid)

","Found the problem.. should open the file as binary, instead of text as follows:
if (pk_file.open(QIODevice::ReadOnly))
","889","<c++><authentication><openssl><sha><dsa>","0","0","1","2012-09-17 07:22:58","12454746","0","","1670209","","2012-09-17 01:45:39","2012-09-14 03:37:45",""
"9578341","SHA512, SHA256, any hash in general is deprecated?","Why are the hashes deprecated for Mac OSX 10.7 and higher?
","The CommonCrypto framework isn't deprecated, and provides all the hashes that you need. See the manpage for CC_SHA.
","864","<macos><sha>","0","2","1","2014-07-05 19:59:07","9578394","2","","1296746","","2014-07-05 19:59:07","2012-03-06 05:25:41",""
"25042105","Object Obect array Json.stringify string array","I had a object object array which i used JSON.stringify() on i can now see what's in my array but when i do arr[0] etc it only outputs one letter.
arr = {""hello"":""yes"",""because"":""no""}

arr[0] =h

I want it to output the whole of the value not just the first letter
My code 
        var clientContext = SP.ClientContext.get_current();

        var peopleManager = new SP.UserProfiles.PeopleManager(clientContext);

    // Get user properties for the target user.
    // To get the PersonProperties object for the current user, use the
    // getMyProperties method.
    MyProperties = peopleManager.getMyProperties();

    // Load the PersonProperties object and send the request.
    clientContext.load(MyProperties);
    clientContext.executeQueryAsync(getMyNewsChoicesSuccess, getMyNewsChoicesFail);
    },

    getMyNewsChoicesSuccess = function () {
        //get the news choice by actually fieldname
        var MyChoices = JSON.stringify(MyProperties.get_userProfileProperties().Value);
        $('#NBStest').text(MyChoices);

    },

","Well its not an array anymore, its a string. arr[0] will return the first letter. 
If you want to get the objects from it you need to parse it ( try JSON.parse )
","857","<javascript><arrays><sha>","-2","0","3","2014-07-31 16:06:51","25042625","5","","3891650","","2014-07-31 09:00:59","2014-07-30 16:28:53","2014-08-16 04:02:38"
"25042105","Object Obect array Json.stringify string array","I had a object object array which i used JSON.stringify() on i can now see what's in my array but when i do arr[0] etc it only outputs one letter.
arr = {""hello"":""yes"",""because"":""no""}

arr[0] =h

I want it to output the whole of the value not just the first letter
My code 
        var clientContext = SP.ClientContext.get_current();

        var peopleManager = new SP.UserProfiles.PeopleManager(clientContext);

    // Get user properties for the target user.
    // To get the PersonProperties object for the current user, use the
    // getMyProperties method.
    MyProperties = peopleManager.getMyProperties();

    // Load the PersonProperties object and send the request.
    clientContext.load(MyProperties);
    clientContext.executeQueryAsync(getMyNewsChoicesSuccess, getMyNewsChoicesFail);
    },

    getMyNewsChoicesSuccess = function () {
        //get the news choice by actually fieldname
        var MyChoices = JSON.stringify(MyProperties.get_userProfileProperties().Value);
        $('#NBStest').text(MyChoices);

    },

","JSON.stringify() does exactly what it sounds like.  It turns the javascript object into a string.  So when you do arr[0] you are getting the first letter in the string. You need to turn it back into a javascript object if you want to get the actual values.
","857","<javascript><arrays><sha>","-2","0","3","2014-07-31 16:06:51","25042625","5","","3891650","","2014-07-31 09:00:59","2014-07-30 16:28:53","2014-08-16 04:02:38"
"25042105","Object Obect array Json.stringify string array","I had a object object array which i used JSON.stringify() on i can now see what's in my array but when i do arr[0] etc it only outputs one letter.
arr = {""hello"":""yes"",""because"":""no""}

arr[0] =h

I want it to output the whole of the value not just the first letter
My code 
        var clientContext = SP.ClientContext.get_current();

        var peopleManager = new SP.UserProfiles.PeopleManager(clientContext);

    // Get user properties for the target user.
    // To get the PersonProperties object for the current user, use the
    // getMyProperties method.
    MyProperties = peopleManager.getMyProperties();

    // Load the PersonProperties object and send the request.
    clientContext.load(MyProperties);
    clientContext.executeQueryAsync(getMyNewsChoicesSuccess, getMyNewsChoicesFail);
    },

    getMyNewsChoicesSuccess = function () {
        //get the news choice by actually fieldname
        var MyChoices = JSON.stringify(MyProperties.get_userProfileProperties().Value);
        $('#NBStest').text(MyChoices);

    },

","You can get the first element from your json string like this
JSON.parse(json_str)[0]

but in the example you have, the first element is ""yes"" and its index is ""hello"" , which means you can't get the first element by the index 0 , however you can get it by its property name like this
arr.hello = ""yes"";
// or
arr['hello'] = ""yes"";

if you want to get the hello which is the key , you have to use this loop
for (key in arr)
   console.log(key); 
// it will print 'hello' and then 'because'

","857","<javascript><arrays><sha>","-2","0","3","2014-07-31 16:06:51","25042625","5","","3891650","","2014-07-31 09:00:59","2014-07-30 16:28:53","2014-08-16 04:02:38"
"41598123","SAS lowercase SHA256 string","Currently testing a SHA256 function in order to prepare a variable for use in another application. 
The user has requested the SHA256 result be in lower case. I created a quick record in order to make sure I can convert the string-
data have;
input first $ last $ dob $ 10. sex $;
cards;
test person 1955-07-31 1
;
run;

Seems it will not allow a lower case string once passed through the SHA function. 
Is there a workaround for this? The below attempt did not yield desirable results. 
data have2;
set have;
source = catt(first,last,dob,sex);
encryp = lowcase(sha256(source));
format encryp $hex64.;
run;

","Below will do it using a put statement with the format inside:
data have2;
set have;
encryp = lowcase(put(sha256(catt(first,last,dob,sex)),$hex64.));
run;

It will show an entirely different encryption code compared to your method but it remains consistent.
data have;
input first $ last $ dob $ 10. sex $;
cards;
test person 1955-07-31 1
test person 1955-07-31 1
test2 person 1977-08-11 2
test3 person 1945-12-22 1
;
run;

data have2;
set have;
new_encryp = lowcase(put(sha256(catt(first,last,dob,sex)),hex64.)); /* new method */
encryp = lowcase(sha256(catt(first,last,dob,sex))); /* what you tried */
format encryp $hex64.;
run;

/* output */
first   last    dob         sex new_encryp                                                          encryp
test    person  7/31/1955   1   038a855a47f40edf54094adc4366e3e79c1a931346d7968e96d2cb930b01e7bc    039A857A67F40EDF74096AFC6366E3E79C1A931366D7969E96F2EB930B01E7BC
test    person  7/31/1955   1   038a855a47f40edf54094adc4366e3e79c1a931346d7968e96d2cb930b01e7bc    039A857A67F40EDF74096AFC6366E3E79C1A931366D7969E96F2EB930B01E7BC
test2   person  8/11/1977   2   1117ab614f48a7edfbe9d615f12acad9d564b457b0f31bb2619f7eb9b10f1e58    1117AB616F68A7EDFBE9F615F12AEAF9F564B477B0F31BB261FF7EB9B10F1E78
test3   person  12/22/1945  1   d1cb00ebe044c0553039f99592dc7bd4804eac2c13da8208fd82459c3a37efd1    F1EB00EBE064E0753039F99592FC7BF4806EAC2C13FA8208FD82659C3A37EFF1

","856","<sas><sha>","0","1","2","2017-01-11 18:59:27","41598356","0","","","","","2017-01-11 18:28:45",""
"41598123","SAS lowercase SHA256 string","Currently testing a SHA256 function in order to prepare a variable for use in another application. 
The user has requested the SHA256 result be in lower case. I created a quick record in order to make sure I can convert the string-
data have;
input first $ last $ dob $ 10. sex $;
cards;
test person 1955-07-31 1
;
run;

Seems it will not allow a lower case string once passed through the SHA function. 
Is there a workaround for this? The below attempt did not yield desirable results. 
data have2;
set have;
source = catt(first,last,dob,sex);
encryp = lowcase(sha256(source));
format encryp $hex64.;
run;

","The issue is not with the sha256 function, but with the $HEX64 format. 
When you used lowcase you actually do some harm to the SHA256 result: you're not altering the hexadecimal representation, but you're actually altering the characters themselves, which means your result isn't accurate - and then you're displaying them with $HEX64. which will always show capital letters for the hexadecimal characters.
What instead you want, presumably, is to store the lower case version of the $HEX64. format.  You can do that with put:
data want;
  set have;
  source = catt(first,last,dob,sex);
  encryp = sha256(source);
  lower  = lowcase(put(encryp,$HEX64.));
run;

Note what encryp looks like - something totally different, and probably not particularly useful.  You can of course skip that step if you want.
","856","<sas><sha>","0","2","2","2017-01-11 18:59:27","41598356","0","","","","","2017-01-11 18:28:45",""
"46376966","How to get sha of current git commit from R","Is there a way to get SHA of current GIT commit from R? I need to access it via a function call (not as a hard string). 
I have adapted GIT as version control system for analysis, and want to print the SHA on footnote of my intermediate reports (my working drafts, in pdf format, get a life of their own and it is not immediately obvious by looking at them at what moment they were generated; this creates a reproducibility issue).
For reference: I am using R 3.4.1 via R Studio and creating reports via r markdown.
","You'll need to invoke the git rev-parse command as explained here: How to retrieve the hash for the current commit in Git?
You can do it using system():
https://stat.ethz.ch/R-manual/R-devel/library/base/html/system.html
Putting it together:
system(""git rev-parse HEAD"", intern=TRUE)

","855","<r><git><rstudio><r-markdown><sha>","3","5","2","2017-09-23 10:52:52","46377001","0","1","923194","","2017-09-23 10:52:52","2017-09-23 07:01:04",""
"46376966","How to get sha of current git commit from R","Is there a way to get SHA of current GIT commit from R? I need to access it via a function call (not as a hard string). 
I have adapted GIT as version control system for analysis, and want to print the SHA on footnote of my intermediate reports (my working drafts, in pdf format, get a life of their own and it is not immediately obvious by looking at them at what moment they were generated; this creates a reproducibility issue).
For reference: I am using R 3.4.1 via R Studio and creating reports via r markdown.
","Install git2r package and then:
> r = git2r::revparse_single(repository(path),""HEAD"")
> r@sha
[1] ""515e0160237149b534ea0b105c03584d72c6173c""

It also gives you some other info about the commit too, in other slots of the returned object.
> r@author
name:  Barry Rowlingson
email: b.rowlingson@example.com
when:  2017-09-17 22:27:28

","855","<r><git><rstudio><r-markdown><sha>","3","3","2","2017-09-23 10:52:52","46377001","0","1","923194","","2017-09-23 10:52:52","2017-09-23 07:01:04",""
"25907377","error in spring-security.xml for constructor arg error","i m using spring security for my login page.in this in the database user password is stored using sha-password encoder.now i want to use the same in my spring-security.xml.i tried this
<beans:bean id=""passwordEncoder"" class=""org.springframework.security.authentication.encoding.ShaPasswordEncoder"">
 <constructor-arg value=""256""/>
 </beans:bean>


    <authentication-manager>  
  <authentication-provider> 
    <password-encoder ref=""passwordEncoder""/>
  <jdbc-user-service data-source-ref=""dataSource""
          users-by-username-query=
            ""select email,password, 'true' as enabled from user_login where email=? limit 1""
          authorities-by-username-query=
            ""select email, role from user_roles where email =?  "" />
      </authentication-provider>
      </authentication-manager>  
 </beans:beans>

i m getting error at 
 
cvc-complex-type.2.4.c: The matching wildcard is strict, but no declaration can be found for element 'constructor-arg'.
    - Security namespace does not support decoration of element [constructor-arg]
    - Configuration problem: Security namespace does not support decoration of element.

anyone help me for this,please.
","The constructor-arg element is not in the security namespace, but in the beans namespace. So in your case, use:
<beans:constructor-arg value=""256""/>

","854","<spring-mvc><spring-security><sha><password-encryption>","0","2","1","2014-09-18 09:20:56","25908806","0","","","","","2014-09-18 08:06:57",""
"42561568","How to get the SHA of the base commit a branch is started from?","C    E
|   /
B  D
| /
A

How to get the SHA of the commit A if E is the current HEAD?
","You can see git log [options] and find the started commit of a specific branch.
$ git log --oneline --decorate --all --graph

","844","<git><branch><git-commit><sha>","1","1","2","2017-03-02 18:12:10","42562844","2","","","","","2017-03-02 17:03:50",""
"42561568","How to get the SHA of the base commit a branch is started from?","C    E
|   /
B  D
| /
A

How to get the SHA of the commit A if E is the current HEAD?
","If finding the common ancestor of the branches C and E is what you need, then:
git merge-base <hash of commit C> <hash of commit E>

","844","<git><branch><git-commit><sha>","1","0","2","2017-03-02 18:12:10","42562844","2","","","","","2017-03-02 17:03:50",""
"18756764","Converting a hex digest to a long in Clojure","How would I convert a hex string (say, a SHA256 digest) to a long in Clojure/Java?
This results in a java.lang.NumberFormatException:
(Long/parseLong ""4590d31a9cf5eb30997501f82b1b8db051c01f7ea8a2c413343f2c1b9f5aa04e"" 16)

","A long is only 64 bits. A SHA-256 digest has 256 bits (hence the name). So no, you can't (reversibly) perform that conversion.
If you just want (say) the bottom 64 bits, you could either take the last 16 hex digits and parse that, or you could convert the whole thing into a byte array and convert 8 bytes from that array into a long.
If you want the whole number, you should consider BigInteger instead. None of the primitive types in Java handle 256 bits.
","842","<java><clojure><hex><sha>","1","3","2","2013-09-12 06:26:40","18756816","0","","","","","2013-09-12 06:20:30",""
"18756764","Converting a hex digest to a long in Clojure","How would I convert a hex string (say, a SHA256 digest) to a long in Clojure/Java?
This results in a java.lang.NumberFormatException:
(Long/parseLong ""4590d31a9cf5eb30997501f82b1b8db051c01f7ea8a2c413343f2c1b9f5aa04e"" 16)

","This works, resulting in a BigInteger:
(BigInteger. ""4590d31a9cf5eb30997501f82b1b8db051c01f7ea8a2c413343f2c1b9f5aa04e"" 16)

If I needed a long it would be a lossy conversion, as Jon pointed out above.
","842","<java><clojure><hex><sha>","1","4","2","2013-09-12 06:26:40","18756816","0","","","","","2013-09-12 06:20:30",""
"23339042","Downgrading a SSL-cert SHA-2 to SHA-1","Yes, I need to downgrade to SHA-1 to add compatibility to older browser in a project.
Is there a way to do this?
I'm using Linux Centos 6.5 and Apache/2.2.15.
I have 3 files:

SSLCertificateFile /etc/ssl/certs/portal.crt
SSLCertificateKeyFile /etc/ssl/certs/portal.key
SSLCertificateChainFile /etc/ssl/certs/gd_bundle-g2-g1.crt

Thanks a lot for any support!
","You need to re-issue the certificate (if it's self-signed) or request the re-issue from the CA if it has been obtained from the CA. 
","842","<https><centos><sha1><sha><sha2>","0","2","1","2014-04-28 13:28:55","23342423","0","","","","","2014-04-28 10:46:17",""
"27696996","Why would signing credentials from a RSA-SHA512 X509Certificate2 appear to be RSA-SHA256?","Given a public/private key pair PFX file created from the following commands:
makecert.exe -r -n ""CN=TEST"" -pe -sv TEST.pvk -a sha512 -len 2048 -b 01/01/2014 -e 12/31/2075 TEST.cer
pvk2pfx.exe -pvk TEST.pvk -spc TEST.cer -pfx TEST.pfx

The following C# code:
X509Certificate2 cert = new X509Certificate2(""TEST.pfx"");
Console.WriteLine(cert.SignatureAlgorithm.FriendlyName);

var creds = new X509SigningCredentials(cert);
Console.WriteLine(creds.SignatureAlgorithm);
Console.WriteLine(""Key size: {0}"", creds.SigningKey.KeySize / 8);

Results in this:
sha512RSA
http://www.w3.org/2001/04/xmldsig-more#rsa-sha256
Key size: 256

What I am confused about is why the signing credentials are coming out as SHA256 when the cert was created SHA512?  Am I misunderstanding something?
","What you are probably misunderstanding is where the hashing algorithms are used. The first one is used during the creation of the signature over the certificate. The second one is the hashing algorithm that is used during signing with the private key that belongs to the certificate. That one seems to default to SHA-256.
Note that Microsoft is actually confusing hashing algorithms with signature algorithms. Maybe that once made some sense when everybody was still only using PKCS#1 v1.5 style signatures, but now it just makes them look stupid.
","841","<.net><certificate><rsa><sha><x509certificate2>","0","1","1","2014-12-30 01:43:13","27698567","1","0","208990","","2014-12-29 22:39:52","2014-12-29 22:31:37",""
"32397674","How to switch between using SHA-2 instead of SHA-1?","My program uses SHA-1 certificate for SSL connection. The SHA-2 certificate has been widely used now by some web services (Gmail) instead. This causes blocking incoming connection to SMTP servers during email notification setup.
To send email I use SmtpClient like this
using (var smtpClient = new SmtpClient(serverSettings.SmtpServerName, (int)serverSettings.SmtpPort))
{
     smtpClient.EnableSsl = serverSettings.SmtpUseSsl;
     smtpClient.UseDefaultCredentials = false; 

     if (!string.IsNullOrEmpty(serverSettings.UserName) || !string.IsNullOrEmpty(serverSettings.EncryptedPassword))
     {
          smtpClient.Credentials = new NetworkCredential(serverSettings.UserName, serverSettings.EncryptedPassword);
     }
                ...
      smtpClient.Send(message);
}

I can't send an email by using this code and I don't want to allow ""less secure apps"" in my gmail account.
How to implement or switch to SHA-2 certificate for email notifications?
","SHA-1 vs. SHA-2 is completely unrelated to the problem you have. ""Less secure apps"" are considered for google the application which don't use OAuth 2.0 for authentication (which would allow for 2-factor authentication) but instead only a simple password. See New Security Measures Will Affect Older (non-OAuth 2.0) Applications for more information.
For using OAuth 2.0 with C# see SMTP and OAuth 2
","840","<c#><ssl><sha>","9","9","2","2015-11-02 10:32:47","32398664","1","3","4770328","","2015-11-02 10:32:47","2015-09-04 12:06:30",""
"32397674","How to switch between using SHA-2 instead of SHA-1?","My program uses SHA-1 certificate for SSL connection. The SHA-2 certificate has been widely used now by some web services (Gmail) instead. This causes blocking incoming connection to SMTP servers during email notification setup.
To send email I use SmtpClient like this
using (var smtpClient = new SmtpClient(serverSettings.SmtpServerName, (int)serverSettings.SmtpPort))
{
     smtpClient.EnableSsl = serverSettings.SmtpUseSsl;
     smtpClient.UseDefaultCredentials = false; 

     if (!string.IsNullOrEmpty(serverSettings.UserName) || !string.IsNullOrEmpty(serverSettings.EncryptedPassword))
     {
          smtpClient.Credentials = new NetworkCredential(serverSettings.UserName, serverSettings.EncryptedPassword);
     }
                ...
      smtpClient.Send(message);
}

I can't send an email by using this code and I don't want to allow ""less secure apps"" in my gmail account.
How to implement or switch to SHA-2 certificate for email notifications?
","Although, SHA1 is more resistant than MD5 to collision attacks, but it is getting weaker each year. Therefore, google encourages to migrate away from SHA-1 to SHA-2/SHA-3.  
I think you should first acquire a SHA-2 certificate, and then use the following sample code to set it for SMTPClient:
string certificate = ""Certificate.cer"";

X509Certificate cert = new X509Certificate2(certificate);

MailMessage message = new MailMessage(from, to);

SmtpClient client = new SmtpClient(server);

client.ClientCertificates.Add(cert);

client.Send(message);

And also notice MSDN SmtpClient.ClientCertificates remarks:

The Framework caches SSL sessions as they are created and attempts to reuse a cached session for a new request, if possible. When attempting to reuse an SSL session, the Framework uses the first element of ClientCertificates (if there is one), or tries to reuse an anonymous sessions if ClientCertificates is empty.

","840","<c#><ssl><sha>","9","3","2","2015-11-02 10:32:47","32398664","1","3","4770328","","2015-11-02 10:32:47","2015-09-04 12:06:30",""
"37921247","Veracode Cryptography issue","Recently we done a static security scan using Veracode on one of the applications.
The report indicate an issue 

Use of a Broken or Risky Cryptographic Algorithm (CWE ID 327)

It is shown for following code snippet
byte[] CalculateHash(byte[] publicKey) {
        SHA1CryptoServiceProvider hashGenerator = new SHA1CryptoServiceProvider();
        Byte[] hashInArray = new Byte[32];
        PrivateKey.CopyTo(hashInArray,0);            // Combine public key and private key
        publicKey.CopyTo(hashInArray,16);
        return hashGenerator.ComputeHash(hashInArray); // Calculate hash
    }

In description it describe SHA1 as a weak algorithm.
I modified the code and used SHA256 instead of SHA1 and performed veracode scanning again but it still show same issue.
What is an alternative for this? any suggestions? 
","","836","<c#><sha><veracode><cryptographic-hash-function>","1","","0","2018-11-27 23:29:34","","9","","1510998","","2016-06-20 13:19:27","2016-06-20 11:21:45",""
"235493","Is my OCaml implementation of SHA256 sane?","I'm a novice OCaml programmer and thought I would throw myself into the deep end by attempting to implement a very tricky algorithm.  I'm open to all criticisms great and small be they stylistic or security or performance related.  
One criticism that I'm already aware of is that the algorithm requires the entire message to fit in memory (whereas the reference implementation of SHA256 can process a block at a time).
I'm especially concerned about if any of the recursive-functions are not tail-recursive.
I have tested the code and it does produce proper message digests on x86_64 Linux.
Thanks in advance for your consideration.
Edit:
Should nothing jump out at you please don't spend too much time here.  I'm looking for obviously broken behavior, not rewrites.
let as_bytes bits =
  match (bits mod 8) with
    | 0 -> (bits / 8)
    | _ -> failwith ""as_bytes: bits must be multiple of 8""
let as_bits bytes = bytes * 8
let k = [|
    0x428a2f98l; 0x71374491l; 0xb5c0fbcfl; 0xe9b5dba5l;
    0x3956c25bl; 0x59f111f1l; 0x923f82a4l; 0xab1c5ed5l;
    0xd807aa98l; 0x12835b01l; 0x243185bel; 0x550c7dc3l;
    0x72be5d74l; 0x80deb1fel; 0x9bdc06a7l; 0xc19bf174l;
    0xe49b69c1l; 0xefbe4786l; 0x0fc19dc6l; 0x240ca1ccl;
    0x2de92c6fl; 0x4a7484aal; 0x5cb0a9dcl; 0x76f988dal;
    0x983e5152l; 0xa831c66dl; 0xb00327c8l; 0xbf597fc7l;
    0xc6e00bf3l; 0xd5a79147l; 0x06ca6351l; 0x14292967l;
    0x27b70a85l; 0x2e1b2138l; 0x4d2c6dfcl; 0x53380d13l;
    0x650a7354l; 0x766a0abbl; 0x81c2c92el; 0x92722c85l;
    0xa2bfe8a1l; 0xa81a664bl; 0xc24b8b70l; 0xc76c51a3l;
    0xd192e819l; 0xd6990624l; 0xf40e3585l; 0x106aa070l;
    0x19a4c116l; 0x1e376c08l; 0x2748774cl; 0x34b0bcb5l;
    0x391c0cb3l; 0x4ed8aa4al; 0x5b9cca4fl; 0x682e6ff3l;
    0x748f82eel; 0x78a5636fl; 0x84c87814l; 0x8cc70208l;
    0x90befffal; 0xa4506cebl; 0xbef9a3f7l; 0xc67178f2l
  |]
  let hash s =
    let add_int32 x y = Int32.add x y in

    let left_int32 x n = Int32.shift_left x n in
    let right_int32 x n = Int32.shift_right_logical x n in
    let or_int32 x y = Int32.logor x y in
    let xor_int32 x y = Int32.logxor x y in
    let and_int32 x y = Int32.logand x y in
    let not_int32 x = Int32.lognot x in

    let rotate x n = (or_int32 (right_int32 x n) (left_int32 x (32 - n))) in
    let shift x n = right_int32 x n in
    let ch x y z = xor_int32 (and_int32 x y) (and_int32 (not_int32 x) z) in
    let maj x y z = (xor_int32 (and_int32 x y) (xor_int32 (and_int32 x z) (and_int32 y z))) in
    let sum0 x = (xor_int32 (rotate x  2) (xor_int32 (rotate x 13) (rotate x 22))) in
    let sum1 x = (xor_int32 (rotate x  6) (xor_int32 (rotate x 11) (rotate x 25))) in
    let rh00 x = (xor_int32 (rotate x  7) (xor_int32 (rotate x 18) (shift  x  3))) in
    let rh01 x = (xor_int32 (rotate x 17) (xor_int32 (rotate x 19) (shift  x 10))) in

    let as_bytes bits =
      match (bits mod 8) with
        | 0 -> (bits / 8)
        | _ -> failwith ""as_bytes: bits must be multiple of 8""
    in
    let as_bits bytes = bytes * 8 in
    let sha = [|
      0x6a09e667l;
      0xbb67ae85l;
      0x3c6ef372l;
      0xa54ff53al;
      0x510e527fl;
      0x9b05688cl;
      0x1f83d9abl;
      0x5be0cd19l
    |]
    in
    let message = Buffer.create (as_bytes 512) in (* smallest possible buffer is at least 512 bits *)
      begin
        Buffer.add_string message s;
        let original_length = as_bits (Buffer.length message) in 
        Buffer.add_char message '\x80'; (* append '1' bit *)
          let pad_start = as_bits (Buffer.length message) in
          let pad_blocks = if (original_length mod 512) < 448 then 1 else 2 in
          let message_length = ((original_length / 512) + pad_blocks) * 512 in
            begin (* appending k bits of 0 (where message_length-64 is our k) *)
              for i = as_bytes pad_start to (as_bytes (message_length - (as_bytes  64)))-8 do
                Buffer.add_char message '\x00'
              done;
              Buffer.add_buffer message (Bin.pack64 (Int64.of_int original_length))
            end
      end;
      let rec process_block i blocks =
        let array_of_block i = 
          let boff = i*(as_bytes 512) in
          let to_int32 x = (Int32.of_int (int_of_char x)) in
          let w = Array.make (as_bytes 512) 0l in
            begin
              for t = 0 to 15 do
                w.(t) <- (or_int32 (left_int32 (to_int32 (Buffer.nth message (boff + (t*4  )))) 24)
                         (or_int32 (left_int32 (to_int32 (Buffer.nth message (boff + (t*4+1)))) 16)
                         (or_int32 (left_int32 (to_int32 (Buffer.nth message (boff + (t*4+2))))  8)
                                               (to_int32 (Buffer.nth message (boff + (t*4+3))))   )));
              done;
              for t = 16 to 63 do
                w.(t) <- add_int32 (add_int32 (rh01 w.(t-2)) w.(t-7)) (add_int32 (rh00 w.(t-15)) w.(t-16))
              done;
              w
            end
        in
          if i = blocks then 
            let sha256 = Buffer.create (as_bytes 256) in
            let rec pack_sha256 i =
              match i with
                | 8 -> Buffer.contents sha256
                | _ ->
                    begin
                      Buffer.add_buffer sha256 (Bin.pack32 sha.(i));
                      pack_sha256 (i+1)
                    end
            in pack_sha256 0
          else
            begin
              let w = array_of_block i in
              let tem = [| 0l; 0l |] in
                begin
                  let a = ref sha.(0) in 
                  let b = ref sha.(1) in
                  let c = ref sha.(2) in
                  let d = ref sha.(3) in 
                  let e = ref sha.(4) in
                  let f = ref sha.(5) in
                  let g = ref sha.(6) in
                  let h = ref sha.(7) in
                    for t = 0 to 63 do
                      begin
                        tem.(0) <- add_int32 (add_int32 !h (sum1 !e)) (add_int32 (ch !e !f !g) (add_int32 k.(t) w.(t)));
                        tem.(1) <- add_int32 (sum0 !a) (maj !a !b !c);
                        h := !g;
                        g := !f;
                        f := !e;
                        e := add_int32 !d tem.(0);
                        d := !c;
                        c := !b;
                        b := !a;
                        a := add_int32 tem.(0) tem.(1);
                       end
                    done;
                    sha.(0) <- add_int32 sha.(0) !a;
                    sha.(1) <- add_int32 sha.(1) !b;
                    sha.(2) <- add_int32 sha.(2) !c;
                    sha.(3) <- add_int32 sha.(3) !d;
                    sha.(4) <- add_int32 sha.(4) !e;
                    sha.(5) <- add_int32 sha.(5) !f;
                    sha.(6) <- add_int32 sha.(6) !g;
                    sha.(7) <- add_int32 sha.(7) !h;

                    (* good faith attempt to clear memory *)
                    for i = 0 to 63 do w.(t) <- 0 done;
                    tem.(0) <- 0; tem.(1) <- 0;
                    a := 0; b := 0; c := 0; d := 0; e := 0; f := 0; g := 0; h := 0;
                end;
            process_block (i+1) blocks
          end
  in process_block 0 ((Buffer.length message) / (as_bytes 512))

  let hexdigits s =
    let rec hexdigits_inner hx i =
      match i with
        | 32 -> hx
        | _ -> hexdigits_inner (hx ^ (Printf.sprintf ""%02x"" (int_of_char s.[i]))) (i+1)
    in
      hexdigits_inner """" 0

The pack functions, defined in a separate file, are thus:
let pack64 x = 
  let b = Buffer.create 8 in 
    for i = 0 to 7 do
      let shft = (7-i)*8 in
        Buffer.add_char b (char_of_int (Int64.to_int (Int64.logand (Int64.shift_right x shft) 0xFFL)));
    done;
    b

let pack x n = 
  if (n mod 8) = 0 then
    let n' = n/8 in
    let b = Buffer.create n' in 
      for i = 0 to n'-1 do
        let shft = ((n'-1)-i)*8 in
          Buffer.add_char b (char_of_int (Int32.to_int (Int32.logand (Int32.shift_right x shft) 0xFFl)));
      done;
      b
  else
    raise (Invalid_argument (""pack: "" ^ (string_of_int n) ^ "" is not a multiple of 8""))

let pack32 x = pack x 32
let pack16 x = pack x 16
let pack8 x = pack x 8

","The first thing you should do is get the test vectors from the standard and verify if your implementation generates the exact same result. If it does not, it's broken.
You can also generate other test vectors if you have a ""known sane"" implementation (the openssl command probably has one).
Finally, run some performance tests with progressively larger files, and compare with a known fast implementation (the openssl one should be quite fast). If it fails (exausting all memory or being too slow), you have to fix something on it.
If it passes all these tests, it should be good enough. There shouldn't be many security concerns with a hashing algorithm (unless you are hashing sensitive data, where you would have to be very careful to overwrite all the memory you used).
","835","<ocaml><digest><sha256><sha>","0","4","1","2008-10-24 23:47:09","235620","1","","18446","mbac32768","2008-10-24 22:44:03","2008-10-24 22:36:57",""
"17438228","Generating pbkdf2_sha256 hash of a password by means of MySQL","I have a bunch of hashed passwords pbkdf2_sha256$10000$0POUvc6y8M4z$QyldL9qyQO.... Is it possible to verify them in SQL queries? Don't ask why.
","Usually database systems do not support this kind of hash functions on their own. It would be difficult to write the queries anyway, because the password hashes are not searchable. To verify a password with its hash-value following steps are necessary:

Search for the row by username (cannot be done by the hash-value).
Return the password-hash from the found row.
Extract the used salt and the cost factor from the stored password-hash.
Build a new hash-value from the entered password with the same salt and cost factor.
Compare the stored hash-value and the new calculated one.

That means, you first have to know the stored hash-value, before you can verify the entered password with it. Such a hash function is surely better placed in the development language, than in the database, especially when you later have to switch the algorithm or the cost factor and need backwards compatibility.
","828","<mysql><hash><sha>","1","0","1","2013-07-03 08:12:20","","4","","1401975","","2013-07-03 01:13:00","2013-07-03 01:09:52",""
"40538727","Why is this HMAC SHA256 hash I'm creating using the wrong character encoding?","I'm doing this in C# to create a hash:
        using (var hmacsha256 = new HMACSHA256(Encoding.ASCII.GetBytes(secret)))
        {
            return System.Text.Encoding.UTF8.GetString(hmacsha256.ComputeHash(Encoding.ASCII.GetBytes(message)));
        }

I use the following JSON:
{
    ""client_id"": ""26075235"",
    ""client_version"": ""1.0.0"",
    ""event"": ""app.uninstall"",
    ""timestamp"": ""1478741247"",
    ""data"": {
        ""user_id"": ""62581379"",
        ""site_id"": ""837771289247593785"",
        ""domain"": """"
    }
}

and I get this: 
sX�m�.-�n�0�v@�i!S��IEC,�56
I'm expecting the hash to look like this:
960aff6c335a87e6077f41066358980a88db54062505875e5a8c363ded9d027e
If I do the hashing like this:
        using (var hmacsha256 = new HMACSHA256(Encoding.UTF8.GetBytes(secret)))
        {
            return System.Text.Encoding.UTF8.GetString(hmacsha256.ComputeHash(Encoding.UTF8.GetBytes(message)));
        }

I get the same thing. How do I return what I'm expecting?
What am I not understanding about this?
","An arbitrary binary data can not be converted to string... Seems like you want BitConverter.ToString ,  Convert.ToBase64String or System.Runtime.Remoting.Metadata.W3cXsd2001.SoapBase64Binary, instead of System.Text.Encoding.UTF8.GetString
","825","<c#><encoding><sha><hmac>","0","2","2","2016-11-11 01:36:44","40538788","0","","3996167","","2016-11-10 23:26:19","2016-11-10 23:21:16",""
"40538727","Why is this HMAC SHA256 hash I'm creating using the wrong character encoding?","I'm doing this in C# to create a hash:
        using (var hmacsha256 = new HMACSHA256(Encoding.ASCII.GetBytes(secret)))
        {
            return System.Text.Encoding.UTF8.GetString(hmacsha256.ComputeHash(Encoding.ASCII.GetBytes(message)));
        }

I use the following JSON:
{
    ""client_id"": ""26075235"",
    ""client_version"": ""1.0.0"",
    ""event"": ""app.uninstall"",
    ""timestamp"": ""1478741247"",
    ""data"": {
        ""user_id"": ""62581379"",
        ""site_id"": ""837771289247593785"",
        ""domain"": """"
    }
}

and I get this: 
sX�m�.-�n�0�v@�i!S��IEC,�56
I'm expecting the hash to look like this:
960aff6c335a87e6077f41066358980a88db54062505875e5a8c363ded9d027e
If I do the hashing like this:
        using (var hmacsha256 = new HMACSHA256(Encoding.UTF8.GetBytes(secret)))
        {
            return System.Text.Encoding.UTF8.GetString(hmacsha256.ComputeHash(Encoding.UTF8.GetBytes(message)));
        }

I get the same thing. How do I return what I'm expecting?
What am I not understanding about this?
","Solved now. I use this string extension method, so to get a lowercase HMAC SHA 256 Hash for a string, I can just do:
mymessage.HmacSha256Digest(mysecret)
public static string HmacSha256Digest(this string message, string secret)
{
    ASCIIEncoding encoding = new ASCIIEncoding();
    byte[] keyBytes = encoding.GetBytes(secret);
    byte[] messageBytes = encoding.GetBytes(message);
    System.Security.Cryptography.HMACSHA256 cryptographer = new System.Security.Cryptography.HMACSHA256(keyBytes);

    byte[] bytes = cryptographer.ComputeHash(messageBytes);

    return BitConverter.ToString(bytes).Replace(""-"", """").ToLower();
}

","825","<c#><encoding><sha><hmac>","0","2","2","2016-11-11 01:36:44","40538788","0","","3996167","","2016-11-10 23:26:19","2016-11-10 23:21:16",""
"43660519","Adyen, Unable to get correct SHA-256 encryption","I am using a signing string and a private key to generate a public key using SHA-256 encryption. 
The hashing function is a standard C# SHA-256 hashing function: 
string CalculateHMAC256(string hmacKey, string signingstring)
    {
        byte[] key = Encoding.UTF8.GetBytes(hmacKey);
        byte[] data = Encoding.UTF8.GetBytes(signingstring);
        using (HMACSHA256 hmac = new HMACSHA256(key))
        {
            byte[] result = hmac.ComputeHash(data);
            return Convert.ToBase64String(result);
        }
    }

The string signature looks like this:
    allowedMethods:blockedMethods:countryCode:currencyCode:merchantAccount:merchantReference:offset:orderData:paymentAmount:sessionValidity:shipBeforeDate:shopperEmail:shopperLocale:shopperReference:skinCode:::GB:GBP:MyTest:abc:::1:2017-04-28T15:07:10+01:00:2017-04-30::en_US::neDRF4H4
I have also tried this with escaped ':' as advised: 
allowedMethods:blockedMethods:countryCode:currencyCode:merchantAccount:merchantReference:offset:orderData:paymentAmount:sessionValidity:shipBeforeDate:shopperEmail:shopperLocale:shopperReference:skinCode:::GB:GBP:MyTest:abc:::1:2017-04-29T13:34:48+01:00:2017-05-01::en_US::neDRF4H4
And then my html form looks like this:
 <form ngNoForm name=""frmsp"" id=""frmsp"" target=""_blank"" 
    action=""https://test.barclaycardsmartpay.com/hpp/pay.shtml""
    method=""post"">
    <input type=""hidden"" name=""merchantSig"" [value]=""merchantSignature"" />
    <input type=""hidden"" name=""currencyCode"" [value]=""smartPayment?.currencyCode"" />
    <input type=""hidden"" name=""merchantAccount"" [value]=""smartPayment?.merchantAccount"" />
    <input type=""hidden"" name=""merchantReference"" [value]=""smartPayment?.merchantReference"" />
    <input type=""hidden"" name=""paymentAmount"" [value]=""smartPayment?.paymentAmount"" />
    <input type=""hidden"" name=""sessionValidity"" [value]=""smartPayment?.sessionValidity"" />
    <input type=""hidden"" name=""shipBeforeDate"" [value]=""smartPayment?.shipBeforeDate"" />
    <input type=""hidden"" name=""shopperLocale"" [value]=""smartPayment?.shopperLocale"" />
    <input type=""hidden"" name=""orderData"" [value]=""smartPayment?.orderData"" />
    <input type=""hidden"" name=""skinCode"" [value]=""smartPayment?.skinCode"" />
    <input type=""hidden"" name=""countryCode"" [value]=""smartPayment?.countryCode"" />
    <input type=""hidden"" name=""shopperEmail"" [value]=""smartPayment?.shopperEmail"" />
    <input type=""hidden"" name=""shopperReference"" [value]=""smartPayment?.shopperReference"" />
    <input type=""hidden"" name=""allowedMethods"" [value]=""smartPayment?.allowedMethods"" />
    <input type=""hidden"" name=""blockedMethods"" [value]=""smartPayment?.blockedMethods"" />
    <input type=""hidden"" name=""offset"" [value]=""smartPayment?.offset"" />    
    <input type=""submit"" value=""Process Payment"" (click)=""buttonClicked()"">

Where the fields values are being calculated with angular2 - using the same ones used to build the signing string, so I am confident that the data matches. 
When I send the form, I get an error stating that the merchant signature is incorrect. 
Perhaps the format of the signing string could be incorrect? 
I am trying to implement a call to Barclaycard Smartpay using hosted payment. Documentation here: 
Hosted Payment Page Integration Guide 
Note: that the barclays documentation is out of date (last updated 2012) and that the references to SHA-1 are now using SHA-256. It is built using Adyen payment systems and I have reused the string generation examples using the following example code: https://github.com/Adyen/adyen-asp.net-sample-code
","There is a problem with your signing string. You need to replace ""\"" with ""\"" and "":"" with "":"" in all your vallues.
I also suggest to use the code from this sample on GIT to generate create your encrypted signature.
Using the code below I get the same signature as on the test page provided by Adyen.
 // Computes the Base64 encoded signature using the HMAC algorithm with the HMACSHA256 hashing function.
    string CalculateHMAC(string hmacKey, string signingstring)
{
    byte[] key = PackH(hmacKey);
    byte[] data = Encoding.UTF8.GetBytes(signingstring);

    try
    {
        using (HMACSHA256 hmac = new HMACSHA256(key))
        {
            // Compute the hmac on input data bytes
            byte[] rawHmac = hmac.ComputeHash(data);

            // Base64-encode the hmac
            return Convert.ToBase64String(rawHmac);
        }
    }
    catch (Exception e)
    {
        throw new Exception(""Failed to generate HMAC : "" + e.Message);
    }
}

byte[] PackH(string hex)
{
    if ((hex.Length % 2) == 1)
    {
        hex += '0';
    }

    byte[] bytes = new byte[hex.Length / 2];
    for (int i = 0; i < hex.Length; i += 2)
    {
        bytes[i / 2] = Convert.ToByte(hex.Substring(i, 2), 16);
    }

    return bytes;
}

Try to use only a limited amound of fields and see if you get any results.
I used the fields below (also take their order into account!)
currencyCode:merchantAccount:merchantReference:paymentAmount:sessionValidity:shipBeforeDate:shopperLocale:skinCode

","819","<c#><encryption><sha><payment-processing><adyen>","1","4","1","2018-07-04 15:48:58","43680544","6","","2945345","","2017-04-28 12:44:38","2017-04-27 14:21:13",""
"32206442","OpenSSL: can output size of EVP_DigestFinal_ex be greater than the digest size?","OpenSSL EVP_DigestFinal_ex has the following documentation:
""EVP_DigestFinal_ex() retrieves the digest value from ctx and places it in md. If the s parameter is not NULL then the number of bytes of data written (i.e. the length of the digest) will be written to the integer at s, at most EVP_MAX_MD_SIZE bytes will be written.""
Signature: 
int EVP_DigestFinal_ex(EVP_MD_CTX *ctx, unsigned char *md, unsigned int *s);

Are there any cases where the digest length will be greater than the output size of the digest yet smaller than EVP_MAX_MD_SIZE. i.e. for SHA-1 digest, I get an output which is greater than 20bytes?
","Relevant source code from OpenSSL crypto/evp/digest.c:
    OPENSSL_assert(ctx->digest->md_size <= EVP_MAX_MD_SIZE);
    ret = ctx->digest->final(ctx, md);
    if (size != NULL)
       *size = ctx->digest->md_size;

where size is your desired output digest size, and digest is a const structure which in case of SHA1 is being defined in crypto/evp/m_sha1.c:
static const EVP_MD sha1_md = {
     NID_sha1,
     NID_sha1WithRSAEncryption,
     SHA_DIGEST_LENGTH

md_size is the third member of this structure, so it always will be  SHA_DIGEST_LENGTH which is equal to 20
","819","<hash><openssl><sha><digest><message-digest>","0","2","1","2015-08-26 10:53:44","32224712","0","","","","","2015-08-25 14:15:46",""
"21346410","C# Compute GIT Commit Hash","I'm trying to get the SHA1 commit hash for a GIT commit manually, but something isn't working correctly.
First we have the standard commit message that looks something like this:
tree f594b3f6d9ae291c83902f3992aa36872aa70d68

parent 0000004bf6d464667df5150b4526083886947d92

author User <foo@bar.com> 1390620460.46263 +0000
committer User <foo@bar.com> 1390620460.46263 +0000

Commit Message

we'll call that the 'commitMessage'
The spec says that to get the commit hash says we have to sha1:

the string ""commit""
plus a space "" ""
plus the number of bytes in the commitMessage
plus a null byte
plus the commitMessage

so (pseudo code obv) 
SHA1( ""commit"" + "" "" + numBytes(commitMessage) + '\0' + commitMessage );
And here's my implementation in C#
(I'm aware this is quite clunky)
    var commitBody = ""tree "" + treeHash + ""\n\n"" +
                     ""parent "" + parentHash + ""\n\n"" +
                     ""author User <foo@bar.com> "" + date + ""\n"" +
                     ""committer User <foo@bar.com> "" + date + ""\n\n"" +
                     ""My Commit Message\n"";

    var blob = ""commit "" + Encoding.UTF8.GetByteCount(commitBody);

    // This is the string ""commit "" (with a space) + byte count
    var first = Encoding.UTF8.GetBytes(blob);

    // This is just the null byte
    var second = new byte[1];
    second[0] = (byte)0;

    // This is the commitMessage
    var third = Encoding.UTF8.GetBytes(commitBody);

    // Merge first, second, third into bytez as a byte array
    var bytez = new byte[first.Length + second.Length + third.Length];
    Buffer.BlockCopy(first, 0, bytez, 0, first.Length);
    Buffer.BlockCopy(second, 0, bytez, first.Length, second.Length);
    Buffer.BlockCopy(third, 0, bytez, first.Length + second.Length, third.Length);

    // Debug Print
    Console.WriteLine(Encoding.UTF8.GetString(bytez));

    // Compute the hash and print it
    var sss = SHA1.Create();
    var myssh = GetString(sss.ComputeHash(bytez));
    Console.WriteLine(myssh);

The hash returned is not the same as what is returned from GIT. I'm not actually expecting anyone to know how to do this, as this isn't something that is usually done, but I figured I'd ask. 
Thanks for any help :D
","Every object's hash is actually the hash of ""Length + ' ' + Content"" - this works to prevent SHA1 hash collisions (since now you have to collide on both the SHA1 and the length, which is way less likely)
","813","<c#><git><sha>","2","1","4","2018-02-24 13:56:56","","0","1","","","","2014-01-25 03:59:01",""
"21346410","C# Compute GIT Commit Hash","I'm trying to get the SHA1 commit hash for a GIT commit manually, but something isn't working correctly.
First we have the standard commit message that looks something like this:
tree f594b3f6d9ae291c83902f3992aa36872aa70d68

parent 0000004bf6d464667df5150b4526083886947d92

author User <foo@bar.com> 1390620460.46263 +0000
committer User <foo@bar.com> 1390620460.46263 +0000

Commit Message

we'll call that the 'commitMessage'
The spec says that to get the commit hash says we have to sha1:

the string ""commit""
plus a space "" ""
plus the number of bytes in the commitMessage
plus a null byte
plus the commitMessage

so (pseudo code obv) 
SHA1( ""commit"" + "" "" + numBytes(commitMessage) + '\0' + commitMessage );
And here's my implementation in C#
(I'm aware this is quite clunky)
    var commitBody = ""tree "" + treeHash + ""\n\n"" +
                     ""parent "" + parentHash + ""\n\n"" +
                     ""author User <foo@bar.com> "" + date + ""\n"" +
                     ""committer User <foo@bar.com> "" + date + ""\n\n"" +
                     ""My Commit Message\n"";

    var blob = ""commit "" + Encoding.UTF8.GetByteCount(commitBody);

    // This is the string ""commit "" (with a space) + byte count
    var first = Encoding.UTF8.GetBytes(blob);

    // This is just the null byte
    var second = new byte[1];
    second[0] = (byte)0;

    // This is the commitMessage
    var third = Encoding.UTF8.GetBytes(commitBody);

    // Merge first, second, third into bytez as a byte array
    var bytez = new byte[first.Length + second.Length + third.Length];
    Buffer.BlockCopy(first, 0, bytez, 0, first.Length);
    Buffer.BlockCopy(second, 0, bytez, first.Length, second.Length);
    Buffer.BlockCopy(third, 0, bytez, first.Length + second.Length, third.Length);

    // Debug Print
    Console.WriteLine(Encoding.UTF8.GetString(bytez));

    // Compute the hash and print it
    var sss = SHA1.Create();
    var myssh = GetString(sss.ComputeHash(bytez));
    Console.WriteLine(myssh);

The hash returned is not the same as what is returned from GIT. I'm not actually expecting anyone to know how to do this, as this isn't something that is usually done, but I figured I'd ask. 
Thanks for any help :D
","If you are using UTF-8 characters in your strings, don't use string.Length to reserve bytes array. This is true if the string only contains ASCII characters, but if there is UTF-8 Characters in your string, then .Length will will be smaller than the actual byte size. 
Since you are using .Length to allocate an array, that array may be to small and not all of the strings data may be copied. 
I'd suggest that you use StringBuilder to build your string, and then use System.Text.Encoding.UTF8.GetBytes(stringbuilder.ToString()) to get the data as bytes. 
StringBuilder sb = new StringBuilder();
sb.Append(""commit ""+ Encoding.UTF8.GetByteCount(commitBody));
sb.Append(""\0"");
sb.Append(commitBody);

var sss = SHA1.Create();
var bytez = Encoding.UTF8.GetBytes(sb.ToString());
var myssh = GetString(sss.ComputeHash(bytez));
Console.WriteLine(myssh);

","813","<c#><git><sha>","2","1","4","2018-02-24 13:56:56","","0","1","","","","2014-01-25 03:59:01",""
"21346410","C# Compute GIT Commit Hash","I'm trying to get the SHA1 commit hash for a GIT commit manually, but something isn't working correctly.
First we have the standard commit message that looks something like this:
tree f594b3f6d9ae291c83902f3992aa36872aa70d68

parent 0000004bf6d464667df5150b4526083886947d92

author User <foo@bar.com> 1390620460.46263 +0000
committer User <foo@bar.com> 1390620460.46263 +0000

Commit Message

we'll call that the 'commitMessage'
The spec says that to get the commit hash says we have to sha1:

the string ""commit""
plus a space "" ""
plus the number of bytes in the commitMessage
plus a null byte
plus the commitMessage

so (pseudo code obv) 
SHA1( ""commit"" + "" "" + numBytes(commitMessage) + '\0' + commitMessage );
And here's my implementation in C#
(I'm aware this is quite clunky)
    var commitBody = ""tree "" + treeHash + ""\n\n"" +
                     ""parent "" + parentHash + ""\n\n"" +
                     ""author User <foo@bar.com> "" + date + ""\n"" +
                     ""committer User <foo@bar.com> "" + date + ""\n\n"" +
                     ""My Commit Message\n"";

    var blob = ""commit "" + Encoding.UTF8.GetByteCount(commitBody);

    // This is the string ""commit "" (with a space) + byte count
    var first = Encoding.UTF8.GetBytes(blob);

    // This is just the null byte
    var second = new byte[1];
    second[0] = (byte)0;

    // This is the commitMessage
    var third = Encoding.UTF8.GetBytes(commitBody);

    // Merge first, second, third into bytez as a byte array
    var bytez = new byte[first.Length + second.Length + third.Length];
    Buffer.BlockCopy(first, 0, bytez, 0, first.Length);
    Buffer.BlockCopy(second, 0, bytez, first.Length, second.Length);
    Buffer.BlockCopy(third, 0, bytez, first.Length + second.Length, third.Length);

    // Debug Print
    Console.WriteLine(Encoding.UTF8.GetString(bytez));

    // Compute the hash and print it
    var sss = SHA1.Create();
    var myssh = GetString(sss.ComputeHash(bytez));
    Console.WriteLine(myssh);

The hash returned is not the same as what is returned from GIT. I'm not actually expecting anyone to know how to do this, as this isn't something that is usually done, but I figured I'd ask. 
Thanks for any help :D
","There should be no blank lines after the tree and parent lines, i.e. the commit body should be:
tree f594b3f6d9ae291c83902f3992aa36872aa70d68
parent 0000004bf6d464667df5150b4526083886947d92
author User <foo@bar.com> 1390620460.46263 +0000
committer User <foo@bar.com> 1390620460.46263 +0000

Commit Message

See the original C implementation; commit_tree_extended() in commit.c.
","813","<c#><git><sha>","2","0","4","2018-02-24 13:56:56","","0","1","","","","2014-01-25 03:59:01",""
"21346410","C# Compute GIT Commit Hash","I'm trying to get the SHA1 commit hash for a GIT commit manually, but something isn't working correctly.
First we have the standard commit message that looks something like this:
tree f594b3f6d9ae291c83902f3992aa36872aa70d68

parent 0000004bf6d464667df5150b4526083886947d92

author User <foo@bar.com> 1390620460.46263 +0000
committer User <foo@bar.com> 1390620460.46263 +0000

Commit Message

we'll call that the 'commitMessage'
The spec says that to get the commit hash says we have to sha1:

the string ""commit""
plus a space "" ""
plus the number of bytes in the commitMessage
plus a null byte
plus the commitMessage

so (pseudo code obv) 
SHA1( ""commit"" + "" "" + numBytes(commitMessage) + '\0' + commitMessage );
And here's my implementation in C#
(I'm aware this is quite clunky)
    var commitBody = ""tree "" + treeHash + ""\n\n"" +
                     ""parent "" + parentHash + ""\n\n"" +
                     ""author User <foo@bar.com> "" + date + ""\n"" +
                     ""committer User <foo@bar.com> "" + date + ""\n\n"" +
                     ""My Commit Message\n"";

    var blob = ""commit "" + Encoding.UTF8.GetByteCount(commitBody);

    // This is the string ""commit "" (with a space) + byte count
    var first = Encoding.UTF8.GetBytes(blob);

    // This is just the null byte
    var second = new byte[1];
    second[0] = (byte)0;

    // This is the commitMessage
    var third = Encoding.UTF8.GetBytes(commitBody);

    // Merge first, second, third into bytez as a byte array
    var bytez = new byte[first.Length + second.Length + third.Length];
    Buffer.BlockCopy(first, 0, bytez, 0, first.Length);
    Buffer.BlockCopy(second, 0, bytez, first.Length, second.Length);
    Buffer.BlockCopy(third, 0, bytez, first.Length + second.Length, third.Length);

    // Debug Print
    Console.WriteLine(Encoding.UTF8.GetString(bytez));

    // Compute the hash and print it
    var sss = SHA1.Create();
    var myssh = GetString(sss.ComputeHash(bytez));
    Console.WriteLine(myssh);

The hash returned is not the same as what is returned from GIT. I'm not actually expecting anyone to know how to do this, as this isn't something that is usually done, but I figured I'd ask. 
Thanks for any help :D
","Not C#, but here's how you can calculate a git commit hash from the bash prompt:
commit_len=$(git cat-file commit HEAD | wc -c)
(echo -ne ""commit $commit_len\0""; git cat-file commit HEAD) | sha1sum

Check that the hash is correct:
git show HEAD | grep commit

","813","<c#><git><sha>","2","0","4","2018-02-24 13:56:56","","0","1","","","","2014-01-25 03:59:01",""
"40152194","How to encrypt LDAP password using SHA-256","I am working on java web application where i need to authenticate user's password
using LDAP server i am not too much aware with this.My request from application server to LDAP is 
already encrypted with certificate file but i still need to encrypt password using SHA-256. 
how can i do ???
My Java code is :
            Hashtable<String,String> env = new Hashtable<String,String>();
            env.put(Context.INITIAL_CONTEXT_FACTORY,""com.sun.jndi.ldap.LdapCtxFactory"");
            env.put(Context.PROVIDER_URL,""ldaps://"" + ldap_url);
            env.put(Context.SECURITY_AUTHENTICATION, auth_method);
            env.put(Context.SECURITY_PRINCIPAL, ""abcd123""+""@""+ldap_domain);
            env.put(Context.SECURITY_CREDENTIALS, ""mypassword"");
            env.put(Context.SECURITY_PROTOCOL,""ssl"");

            System.setProperty(""javax.net.ssl.keyStore"", keystorePath);
            System.setProperty(""javax.net.ssl.keyStorePassword"", ""changeit"");
            ctx = new InitialDirContext(env);

I got this this but unable to do with SHA-256
","Generally, we would expect your LDAP server will encrypt the password. You just need to send itn in text over SSL. (or using StartTLS) 
If you are using SSL, then you are encrypted. Otherwise you would need to use something like SASL which requires support on the client and the server.
-jim
","810","<java><ldap><sha>","-1","0","1","2016-10-21 10:00:22","","3","","","","","2016-10-20 10:44:16",""
"29604301","SHA-256 custom length digest","I need to allow old users of a website to have access to the new website with the same credentials. The database server version is Microsoft SQL Server 2005 and i dont have permissions to make changes to the database. The password column of the database is set to varchar(50) and a digest is 48 characters. The only information that i have for the passwords is that they have been hashed with sha-256 algoritm but as far as i know a sha-256 digest is 64 characters and not 48. Is it possible to produce the same 48 length digests with sha256?
","The only two primitive hash functions with native output size of 192 bits (48hex * 1byte/2hex * 8bit/byte) are HAVAL-192 and TIGER-192. None of the others match up exactly.
If they have indeed been hashed with sha256, then they may be truncated (as a hex encoded sha-256 digest is 64 characters.
To deduce the exact situation will take some work. Here are the different ways you can approach it.

If I had access to the original source code, I'd look at that. Considering you asked the question, I'll assume that's not possible.
If I could write a record into the old system, I'd set a sentinel password (or find an account I knew the password to). Something that I know. Then I'd find the hashed result from the DB.
So now we know p=password and h=4d9e.... 
From there, start by just hashing the password with sha256 and see what you come up with. If you're lucky, you'll find a pattern quickly (like the last half of the hash is just cut off). If you're not lucky, it'll take some digging and trial and error.
So, for example:
p = ""password""
h = ""5e884898da28047151d0e56f8dc6292773603d0d6aabbdd6""

The result would be: sha256(p)[0:48] as sha256(p) == ""5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8""
h = ""51d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8""

The result would be: sha256(p)[16:48]
And so on.
If I didn't have access to a known password, there would be no way of testing the hypothesis. So if you don't have the source code, and don't know an account in the system, you're basically out of luck. So make those first 2 your top priority.

Beware that you may have to get creative. It's entirely possible that something weird has been done. Such as:
salt = h[0:8]
tmp = sha256(p + salt)
h = salt + (tmp[0:16] xor tmp[16:16])

So have fun :-)
","809","<java><sql-server><security><sha><sha256>","1","1","1","2015-04-13 14:28:20","","2","","","","","2015-04-13 11:34:58",""
"49216459","How to generate HMAC SHA 256 using hmacutils in java","I've been trying to generate an HMAC for an API using code like so:
public static void main(String[] args) {

    byte[] hmacSha256 = HmacUtils.hmacSha256(API_SECRET, ""totalParams"");

    System.out.println((Base64.getEncoder().encodeToString(hmacSha256)));
}

But when I use the string I get in my API call I receive the error:

{""code"":-1100,""msg"":""Illegal characters found in parameter
  'signature'; legal range is '^[A-Fa-f0-9]{64}$'.""}

I thought that it meant I had to convert to hex, but the hex is not working either.
I don't care about the implementation, I just want a valid signature. Anyone know how to generate a valid signature in any way?
","See this answer to a similar question, and then this answer to convert your byte[] to hex instead of using Base64.
(Short version: You've got 256 bits of hash, and the API is expecting 64 characters. Base64 gives you 44(ish), but hex should give you 64)
","804","<java><hmac><sha>","0","2","1","2018-03-11 09:13:39","49218018","6","","","","","2018-03-11 03:48:57",""
"9436192","hex string from list of integers in swi-prolog","wondering if there's a library call somewhere to convert the crypto libs 
sha1  return format
15 ?- sha_hash('howdy', X , []), atom_codes(Y, X).
X = [239, 66, 186, 177, 25, 29, 162, 114, 241|...],
Y = 'ïBº±\031\\035\¢rñ95÷\214\@\036\=àÁ\032\û'.

want to convert X to format like
""A34F890F16"" 
","?- sha_hash('howdy', X , []),
 atom_codes(Y, X),
 maplist(\I^format('~16R',[I]),X).

outputs
EF42BAB1191DA272F13935F78C401E3DE0C11AFB
X = [239, 66, 186, 177, 25, 29, 162, 114, 241|...],
Y = 'ïBº±\031\\035\¢rñ95÷\214\@\036\=àÁ\032\û'.

But of course the top string is ambiguous...
Alternatively, padding 'by hand' can be done this way (just 1 code here)
?- phrase(xinteger(3), L, []),
   (L =[A] -> N = [48,A] ; N = L),
   format('~s',[N]).

output
03
L = [51],
A = 51,
N = [48, 51] .

xinteger//1 requires this include :- [library(http/dcg_basics)].
edit: I found the specification string for padding:
?- format('~`0t~16R~2|', [15]).
0F
true.

then the original example now can be written
?- sha_hash('howdy', X , []),
     atom_codes(Y, X),
     maplist(\I^format('~`0t~16R~2|',[I]),X).

and this outputs
EF42BAB1191DA272F13935F78C401E3DE0C11AFB
X = [239, 66, 186, 177, 25, 29, 162, 114, 241|...],
Y = 'ïBº±\031\\035\¢rñ95÷\214\@\036\=àÁ\032\û'.

the output can easily be captured by with_output_to
atom_to_hex(Atom, Hex) :-
    atom_codes(Atom, Codes),
    with_output_to(Hex, maplist(\I^format('~`0t~16R~2|',[I]), Codes)).

All these examples use library(lambda).
","801","<prolog><hex><swi-prolog><sha>","1","2","2","2014-02-03 14:26:05","","0","","772868","","2014-02-03 14:26:05","2012-02-24 18:38:06",""
"9436192","hex string from list of integers in swi-prolog","wondering if there's a library call somewhere to convert the crypto libs 
sha1  return format
15 ?- sha_hash('howdy', X , []), atom_codes(Y, X).
X = [239, 66, 186, 177, 25, 29, 162, 114, 241|...],
Y = 'ïBº±\031\\035\¢rñ95÷\214\@\036\=àÁ\032\û'.

want to convert X to format like
""A34F890F16"" 
","Chac, thanks, your first version put me on right track, but isn't working. For those reading the question, here's my final version
asHexByte(X) :-
    X >= 16,
    format('~R', [X]).
asHexByte(X) :-
    X < 16,
    format('0~R', [X]).
% compute a sha1 in the same style as llSHA1String
%
sha1string(Atom, SHAString) :-
    sha_hash(Atom, SHAList, []),
    with_output_to(codes(SHAString) , maplist(asHexByte , SHAList)).
","801","<prolog><hex><swi-prolog><sha>","1","0","2","2014-02-03 14:26:05","","0","","772868","","2014-02-03 14:26:05","2012-02-24 18:38:06",""
"21551632","Sql Server Storing SHA256 String as Question Marks","I have followed this article on how to implement password hashing and salting
http://www.codeproject.com/Articles/608860/A-Beginners-Tutorial-for-Understanding-and-Impleme
I have implemented all the code mentioned in the article into my MVC 5 web application, however, whenever I store the PasswordHash and Salt, both of these strings save in my User table as question marks, e.g, ????????????????
The database I'm using is Sql Server 2008 R2. The two fields within my database User table have both got a datatype of Nvarchar(100)
I should also mention the data is being persisted to the database using Entity Framework 5.
Has anyone seen this before? I'm thinking it might be a datatype problem, i.e., shouldn't be Nvarchar, however, I don't really know.
Any help with this would be great.
Thanks.
","There's a problem in Utility.cs:
    public static string GetString(byte[] bytes)
    {
        char[] chars = new char[bytes.Length / sizeof(char)];
        System.Buffer.BlockCopy(bytes, 0, chars, 0, bytes.Length);
        return new string(chars);
    }

The function is fed random bytes. This is not how you create a random string. Characters are not meant to store binary data. Such strings will be hard to swallow for many components.
Use Convert.ToBase64String and don't trust random articles on the web. Validate what you find with your own understanding before using it.
","790","<sql-server-2008><entity-framework><encryption><sha>","2","1","2","2014-02-04 12:04:17","21551806","1","","","","","2014-02-04 11:47:19",""
"21551632","Sql Server Storing SHA256 String as Question Marks","I have followed this article on how to implement password hashing and salting
http://www.codeproject.com/Articles/608860/A-Beginners-Tutorial-for-Understanding-and-Impleme
I have implemented all the code mentioned in the article into my MVC 5 web application, however, whenever I store the PasswordHash and Salt, both of these strings save in my User table as question marks, e.g, ????????????????
The database I'm using is Sql Server 2008 R2. The two fields within my database User table have both got a datatype of Nvarchar(100)
I should also mention the data is being persisted to the database using Entity Framework 5.
Has anyone seen this before? I'm thinking it might be a datatype problem, i.e., shouldn't be Nvarchar, however, I don't really know.
Any help with this would be great.
Thanks.
","SHA256 are not string, are byte arrays. Use byte[] in your client code, use VARBINARY on the server code.
","790","<sql-server-2008><entity-framework><encryption><sha>","2","1","2","2014-02-04 12:04:17","21551806","1","","","","","2014-02-04 11:47:19",""
"40583412","how to generate sha1 similar to git hash-object command","Any idea why git hash-object has different outcome from shasum and openssl commands ? 
➜ printf test | shasum
a94a8fe5ccb19ba61c4c0873d391e987982fbbd3  -

➜  printf test | git hash-object --stdin
30d74d258442c7c65512eafab474568dd706c430

➜  echo -n ""test"" | shasum
a94a8fe5ccb19ba61c4c0873d391e987982fbbd3  -

","Git adds a header which contains the type and length of the content and after that it generates the hash. That's why you are getting it different.
Here is a more detailed description.
","787","<git><sha>","2","2","1","2016-11-14 07:19:43","40583650","1","","2523025","","2016-11-14 07:14:28","2016-11-14 07:01:52","2016-11-14 09:34:29"
"28728732","Create C# generated HMAC hash in Javascript","I have C# function below;
private string GetEncyptionData(string encryptionKey)
    {
        string hashString = string.Format(""{{timestamp:{0},client_id:{1}}}"", Timestamp, ClientId);
        HMAC hmac = HMAC.Create();
        hmac.Key = Guid.Parse(encryptionKey).ToByteArray();
        byte[] hash = hmac.ComputeHash(Encoding.UTF8.GetBytes(hashString));
        string encData = Convert.ToBase64String(hash);
        return encData;
    }

I am trying to convert this code in Javascript. I found this library as helper.
Here is code I am using;
 <script>
            var timestamp = 1424890904;
            var client_id = ""496ADAA8-36D0-4B65-A9EF-EE4E3659910D"";
            var EncryptionKey = ""E69B1B7D-8DFD-4DEA-824A-8D43B42BECC5"";

            var message = ""{timestamp:{0},client_id:{1}}"".replace(""{0}"", timestamp).replace(""{1}"", client_id);

            var hash = CryptoJS.HmacSHA1(message, EncryptionKey);
            var hashInBase64 = CryptoJS.enc.Base64.stringify(hash);       

             alert(hashInBase64);
        </script>

but code above is not generating same output from C# code.
How can I achieve it in Javascript?
","Your issue is due to your key. In C#, you're passing in a 16-byte array as the key. In CryptoJS, you're passing in a string which CryptoJS is interpreting as a passphrase, so it's going to generate a totally different key from that.
EDIT: Here's how to get the correct key in javascript:
If you convert your 16-byte key to Base64, in javascript you can do the following. It will generate a WordArray as the key, and use that key to generate your hash.
var keyBase64 = ""eFY0EiMBZ0UBI0VniRI0Vg=="";
var key = CryptoJS.enc.Base64.parse(keyBase64);
var hash = CryptoJS.HmacSHA1(""Hello"", key);
var hashInBase64 = CryptoJS.enc.Base64.stringify(hash); 
console.log(hashInBase64);

","784","<javascript><c#><sha><hmacsha1>","3","2","1","2015-02-25 20:46:37","28728940","1","","","","","2015-02-25 20:14:10",""
"16542910","Why does opening an MS Excel file change the SHA hash of a document?","I want to verify that the contents of an Excel document have not been altered. I was thinking about using SHA hashes to do this. However, just the process of opening an Excel document changes the SHA hash of the file.
What is Excel 2011 changing in the file? Is there some way of preventing this from happening?
","I've just tested this quickly and if you set the file to be read-only, it does more or less what you want.
Create spreadsheet, save, set as read-only
Generate SHA-1 hash -> hash1

Open spreadsheet, edit, attempt save, receive warning about read-only copy, abort save, close without saving
Generate SHA-1 hash -> hash1 (i.e. same hash as before)

Turn off read-only flag, open, edit, save, undo edit, save, close
Generate SHA-1 hash -> hash2 (i.e. different hash from before)

So if you mark the file as read-only, this should allow people to view it without affecting the hash. If they turn the read-only flag off and open it, even if they do not make any changes, the hash will change.
","784","<excel><sha>","1","1","1","2013-05-14 12:27:01","16543119","1","1","","","","2013-05-14 12:16:28",""
"34097035","Sign a JWT with a SHA cert using jose4j","New to using jose4j.  I have found examples like this to set private key from cert:
JsonWebSignature jws = new JsonWebSignature();
PKCS8EncodedKeySpec spec =
new PKCS8EncodedKeySpec(keyBytes);
KeyFactory kf = KeyFactory.getInstance(""RSA"");
PrivateKey pk = kf.generatePrivate(spec);
jws.setKey(kf.generatePrivate(spec));

But I get this error message
java.security.spec.InvalidKeySpecException: java.security.InvalidKeyException: invalid key format    

I think it is because the cert was created as SHA256 instead of RSA.  Here is how I was told the cert was created:
openssl req -x509 -sha256 -nodes -days 730 -newkey rsa:2048 -keyout private.key -out certificate_pub.crt

Does anyone have any examples of how I could sign JWT with a SHA256 cert?
","With additional info, that private key file is PEM but NOT PKCS#8, as a modern version of OpenSSL should have created for req -newkey. And the difference between PEM and ""DER"" (binary) which standard Java requires is not just removing (and adding) the BEGIN and END lines.
Your simplest solution if OpenSSL is available is to convert both of these, without encrypting:
openssl pkcs8 -topk8 -nocrypt -outform der -in private.pem -out good.der 

Then read good.der (use better name if you like) as bytes, and put that in PKCS8EncodedKeySpec and use it as you posted. Aside: you don't need to fiddle with DataInputStream, which isn't really intended for ""plain old"" bytes; java.nio.file.Files.readAllBytes can open, allocate, and read for you.
The next more complicated alternative is to convert to PKCS#8 but still PEM: same as about but omit -outform der (and use a file name that indicates PEM, to avoid confusion). Then in Java read that file as characters (with a Reader, usually BufferedReader, not a Stream), discard the BEGIN and END lines, concatenate all the lines between, and convert them from base64 to byte[]: in Java8 you have java.util.Base64, before that you can use javax.xml.bind.DatatypeConverter. 
To read the file you have in standard Java is harder. You could read the PEM-armored PKCS#1 and convert to binary PKCS#1, then ""wrap"" the PKCS#1 into PKCS#8 by building the DER encoding, but that's a good bit more complicated than what you've demonstrated familiarity with. Or you could parse the PKCS#1 and use the components to construct your own implemenation of RSAPrivateCrtKey and use that directly (no factory), ditto. 
The other alternative is to use the third-party library from http://www.BouncyCastle.org which has more flexible features for handling PEM files than standard Java. But you need to learn their API as well as the standard one, and if your program will run anywhere else you need to ensure BC is deployed with or as part of your program.
","784","<certificate><jwt><private-key><sha>","1","2","1","2015-12-08 05:29:28","","2","","","","","2015-12-04 20:40:10",""
"6994263","Encryption: do I need to salt the key when not even storing it at all?","I searched all over the Net, including here on SO: There is a lot of discussion on the need to salt passwords before hashing and storing them.
In case the password is used to compute a key used for encryption (""Password Based Encryption""): what if you do not store the password at al?

[Note: I did read SO: Passphrase, Salt and IV, do I need all of these? and Does IV work like salt are certainly a related question: I am not sure how the Initialization Vector discussed there relates to the question here]

Suppose:
For encryption

the users enters a master password
this is SHA256 hashed and the output is used to AES256 encrypt a file
the hash is not stored (and obviously neither is the master password)

For decryption

The users enters the master password
This is SHA256 hashed and the output is used to decrypt the file
If the decryption was successful, the password was - apparently - correct

My question: 
When not storing anything except the encrypted file itself, is there any benefit in salting the master password before hashing it?
Considerations:

it would probably reduce the likelihood of a hash-collision
it would require the salt to be stored.
if the salt were lost/corrupted the user would not be able to decrypt the file anymore
how to check for successful decryption in step3: does this require part of the file contents to be known?
if so, how much of a faux-pas is storing a known value in an encrypted file (this cannot always be prevented - an attacker might guess that for example the users last name is encrypted somewhere in the file - an be correct).

","If you are not storing the master password then there is no need to salt it.  If you are reusing the master password to generate a lot of single-use passwords then it will need to be stored encrypted and decrypted as required.
Salting is for long term storing of user passwords that have to be matched more than once so that people with the same password don't have the same hash, which would help an attacker who stole the file.
Salt is for hashing in long term storage, an IV is for encryption using CBC mode (or CTR mode where it can also be called a nonce).
As to checking that your file has decrypted correctly, just ensure that you use a padding like PKCS7.  When the last block is decrypted the padding will be checked to ensure it is in the right format.  If the decryption failed then the padding will not be correctly formatted and you should get a ""Padding failed"" error.
","781","<encryption><hash><aes><salt><sha>","4","3","1","2011-08-09 12:02:54","6995875","0","1","-1","","2017-05-23 12:04:17","2011-08-09 09:48:42",""
"10861752","Why does the SHA-1 algorithm produce different values for the same input value?","Here I attach my code regards ""SHA-1"" algorithm based Java code for same input value given manually:
import java.security.MessageDigest;    
import java.security.NoSuchAlgorithmException;    
import sun.misc.BASE64Encoder;

public class NewClass {       
 public static void main(String args[]) throws NoSuchAlgorithmException        
 {       
    MessageDigest digest = MessageDigest.getInstance(""SHA-1"");    
    System.out.println(""Algorithm :""+digest.getAlgorithm());    
    digest.update(""welcome"".getBytes());    
    byte[] result = digest.digest();     
    hash = (new BASE64Encoder()).encode(result);     
    MessageDigest digest1 = MessageDigest.getInstance(""SHA-1"");    
    digest1.update(""welcome"".getBytes());    
    byte[] result1 = digest1.digest();    
    System.out.println(result);    
    System.out.println(result1);    
    String hash1 = (new BASE64Encoder()).encode(result);    
    System.out.println(""Digest value""+hash);    
    System.out.println(""Digest value""+hash1);       
 }

}

output:
Algorithm :SHA-1

[B@42e816

[B@9304b1

Digest value wLE3/i15JFnyb/djzORFdKW1qwM=

Digest value wLE3/i15JFnyb/djzORFdKW1qwM=

The above algorithm produces the same hash code, but the intermediate values are not same. Why is that?
","[B@42e816 is what you get when you try to print an array in Java.  It just prints its memory address, not the contents.  Obviously, two different arrays will have different addresses.
","761","<java><sha><sha1>","1","9","2","2012-06-02 15:33:15","10861782","1","3","1419007","","2012-06-02 15:33:15","2012-06-02 10:55:35",""
"10861752","Why does the SHA-1 algorithm produce different values for the same input value?","Here I attach my code regards ""SHA-1"" algorithm based Java code for same input value given manually:
import java.security.MessageDigest;    
import java.security.NoSuchAlgorithmException;    
import sun.misc.BASE64Encoder;

public class NewClass {       
 public static void main(String args[]) throws NoSuchAlgorithmException        
 {       
    MessageDigest digest = MessageDigest.getInstance(""SHA-1"");    
    System.out.println(""Algorithm :""+digest.getAlgorithm());    
    digest.update(""welcome"".getBytes());    
    byte[] result = digest.digest();     
    hash = (new BASE64Encoder()).encode(result);     
    MessageDigest digest1 = MessageDigest.getInstance(""SHA-1"");    
    digest1.update(""welcome"".getBytes());    
    byte[] result1 = digest1.digest();    
    System.out.println(result);    
    System.out.println(result1);    
    String hash1 = (new BASE64Encoder()).encode(result);    
    System.out.println(""Digest value""+hash);    
    System.out.println(""Digest value""+hash1);       
 }

}

output:
Algorithm :SHA-1

[B@42e816

[B@9304b1

Digest value wLE3/i15JFnyb/djzORFdKW1qwM=

Digest value wLE3/i15JFnyb/djzORFdKW1qwM=

The above algorithm produces the same hash code, but the intermediate values are not same. Why is that?
","These two lines make no sense:
System.out.println(result);
System.out.println(result1);

The don't print the contents of the two byte arrays as you obviously expect. Instead, the print the type ([B stands for byte array) and a number which can be thought of as the memory address of the array.
To print the contents of the byte array, use the Base 64 encoding and print the resulting string. I'm confident they will be the same.
","761","<java><sha><sha1>","1","5","2","2012-06-02 15:33:15","10861782","1","3","1419007","","2012-06-02 15:33:15","2012-06-02 10:55:35",""
"18743953","Always return alphanumeric characters?","I'm having a heck of a time trying to understand this. How does, for example MD5 or SHA1 hash a string and only return alphanumeric characters. I mean, if I'm not entirely off, they both, or atleast MD5, converts the string to binary and then appends whatever's missing to be able to chop it up in blocks of 512 chars. It then does a series of operations, one of them being to XOR one of the 32 words of each chunk. I mean, this cannot be pure luck to just get alphanumeric characters in the end, the XOR must produce something else?
Could someone explain to me, and or even provide a small example where someone XOR's a string in java or php?
","They're alphanumeric because the result is displayed in hexadecimal form. Makes it easier to visualize and compare.
","756","<php><javascript><hash><md5><sha>","1","0","2","2013-09-11 15:23:22","","4","","1768788","","2013-09-11 14:48:59","2013-09-11 14:28:19",""
"18743953","Always return alphanumeric characters?","I'm having a heck of a time trying to understand this. How does, for example MD5 or SHA1 hash a string and only return alphanumeric characters. I mean, if I'm not entirely off, they both, or atleast MD5, converts the string to binary and then appends whatever's missing to be able to chop it up in blocks of 512 chars. It then does a series of operations, one of them being to XOR one of the 32 words of each chunk. I mean, this cannot be pure luck to just get alphanumeric characters in the end, the XOR must produce something else?
Could someone explain to me, and or even provide a small example where someone XOR's a string in java or php?
","Generally when being displayed to a user the output of a hash is displayed encoded as a hexadecimal string, sometimes you might also see a Base64 string, but this is more rare.
The output of an MD5 hash is a 16 byte (128-bit) value . The full range of values a single byte can have can be shown as a two digit hexadecimal value. This hexadecimal value can range from 00 to FF which in decimal is 0 to 255 or perhaps more clearly in binary 00000000 to 11111111 (eight bits in a byte).
So 16 bytes can be represented as 32 hexadecimal digits without losing any information, and has the advantage of being easy to compare by visual inspection.
EDIT:
Another source of confusion may be in your premise that hashes work on alphanumeric data, which is incorrect. Hashes such as MD5 do not operate on strings, they operate on arbitrary data. 
When you hash a string it is hashed as data using an encoding such as UTF-8. For instance, the representation of hello in UTF-8 is 01101000 01100101 01101100 01101100 01101111 in binary or 68 65 6C 6C 6F in hexadecimal. That number is the actual input to the hash.
","756","<php><javascript><hash><md5><sha>","1","2","2","2013-09-11 15:23:22","","4","","1768788","","2013-09-11 14:48:59","2013-09-11 14:28:19",""
"36736839","Calculate SHA-1 checksum of local html5 video file using JavaScript","When a video on my local storage—let's say it's currently located at file:///home/user/video.m4v—is opened by dragging it into a new tab in Chrome, how can I calculate the SHA-1 checksum for the file using JavaScript?

Purpose:
I am planning to write a Chrome extension which will store the calculated checksum of videos (files with extensions matching a pattern) as localStorage objects in order to save the playback position of video upon tab close and then restore it when the file is loaded again, even if the location or filename of the video is changed.
","You need a crypto library for this. A well known one is Google CryptoJS.
I found this as an specific example for your task: https://gist.github.com/npcode/11282867
After including the crypto-js source:
function sha1sum() {
    var oFile = document.getElementById('uploadFile').files[0];
    var sha1 = CryptoJS.algo.SHA1.create();
    var read = 0;
    var unit = 1024 * 1024;
    var blob;
    var reader = new FileReader();
    reader.readAsArrayBuffer(oFile.slice(read, read + unit));
    reader.onload = function(e) {
        var bytes = CryptoJS.lib.WordArray.create(e.target.result);
        sha1.update(bytes);
        read += unit;
        if (read < oFile.size) {
            blob = oFile.slice(read, read + unit);
            reader.readAsArrayBuffer(blob);
        } else {
            var hash = sha1.finalize();
            console.log(hash.toString(CryptoJS.enc.Hex)); // print the result
        }
    }
}


I wouldn't recommend to calculate a hash over the whole video file as it can be pretty resource consuming depending on the file size. Maybe you can use just the meta information or reconsider about the filename and filepath again?
","752","<javascript><html5><video><sha>","0","2","1","2016-04-20 09:00:01","","2","1","","","","2016-04-20 07:33:27",""
"31402742","Sha-out sign not matching Ogone, PHP","I'm trying to make a payment plugin for my webshop for Ogone ideal payments.
I can make a payment, but when i return i cannot get the SHA-signs to match.
I have the following get request on return:
orderID=476&amount=90%2E82&PM=iDEAL&ACCEPTANCE=0000000000&STATUS=9&PAYID=43934127&NCERROR=0&BRAND=iDEAL&SHASIGN=5AB0A065BAA83C5D807249A66E661ACBB6709B8F

According to the documentation, i have to order the keys alphabetically and only hash those that are allowed.
These are the allowed keys:
['AAVADDRESS', 'AAVCHECK', 'AAVZIP', 'ACCEPTANCE', 'ALIAS', 'AMOUNT', 'BRAND', 'CARDNO', 'CCCTY', 'CN', 'COMPLUS', 'CURRENCY', 'CVCCHECK', 'DCC_COMMPERCENTAGE', 'DCC_CONVAMOUNT', 'DCC_CONVCCY', 'DCC_EXCHRATE', 'DCC_EXCHRATESOURCE', 'DCC_EXCHRATETS', 'DCC_INDICATOR', 'DCC_MARGINPERCENTAGE', 'DCC_VALIDHOUS', 'DIGESTCARDNO', 'ECI', 'ED', 'ENCCARDNO', 'IP', 'IPCTY', 'NBREMAILUSAGE', 'NBRIPUSAGE', 'NBRIPUSAGE_ALLTX', 'NBRUSAGE', 'NCERROR', 'ORDERID', 'PAYID', 'PM', 'SCO_CATEGORY', 'SCORING', 'STATUS', 'TRXDATE', 'VC'];

I made this method to make the hash:
/**
 * @return string
 */
protected function getShaOutSign()
{
    $hash = '';
    $values = \Input::all();
    $values = array_change_key_case($values, CASE_UPPER);
    ksort($values);

    foreach ($values as $key => $value) {
        if (in_array($key, $this->shaOut)) {

            if(!empty($value))
            {
                $hash .= $key . '=' . $values[$key] . $this->settings->shaout;
            }
        }
    }

    return  strtoupper(sha1($hash));
}

Im 100% sure the SHA out key is correct.
The string it makes before i do SHA1:
ACCEPTANCE=0000000000abcDEFghj1234560987654AMOUNT=90.82abcDEFghj1234560987654BRAND=iDEALabcDEFghj1234560987654ORDERID=476abcDEFghj1234560987654PAYID=43934127abcDEFghj1234560987654PM=iDEALabcDEFghj1234560987654STATUS=9abcDEFghj1234560987654

And the final hash i get is:
68E459CB933E04B582A5D564CE6F591D5819B7F1

No matter what i try, i just can't get it to match it with the one in the $_GET request. 
My sha-out key: abcDEFghj1234560987654
Could someone point me into the right direction?
","The sha out calculation is wrong. This is the code I use in my projects to calculate it, $sha_parms is the full response of Ogone. So $_POST or $_GET
            /**
            * Function to calculate the sha that is received from Ogone
            */
            public function getShaOut($sha_parms, $sha_out = null) {
                    $sha_out = $sha_out ?: self::PASS_PHRASE_OUT;
                    $sha_parms = $this->ogoneSort($sha_parms);

                    $sha_string = '';
                    foreach ($sha_parms as $key => $value) {
                            if ($key != 'SHASIGN' && $value != '') {
                                    $sha_string .= $key . '=' . $value . $sha_out;
                            }
                    }

                    //return($sha_string);
                    return strtoupper(sha1($sha_string));
            }              

            /**
            *
            *
            **/
            private function ogoneSort($array) {
                    $arrayToSort = array();
                    $origArray = array();
                    foreach ($array as $key => $value) {
                            $arrayToSort[strtolower($key)] = $value;
                            //stores the original value in an array
                            $origArray[strtolower($key)] = $key;
                    }

                    ksort($arrayToSort);

                    $sortedArray = array();
                    foreach($arrayToSort as $key => $value) {
                            //switch the lowercase keys back to their originals
                            $key = strtoupper($origArray[$key]);
                            $sortedArray[$key] = $value;
                    }

                    return $sortedArray;
            }

","750","<php><payment><sha>","1","0","2","2015-08-04 08:50:58","31403320","4","","2842458","","2015-07-14 10:02:00","2015-07-14 09:26:25",""
"31402742","Sha-out sign not matching Ogone, PHP","I'm trying to make a payment plugin for my webshop for Ogone ideal payments.
I can make a payment, but when i return i cannot get the SHA-signs to match.
I have the following get request on return:
orderID=476&amount=90%2E82&PM=iDEAL&ACCEPTANCE=0000000000&STATUS=9&PAYID=43934127&NCERROR=0&BRAND=iDEAL&SHASIGN=5AB0A065BAA83C5D807249A66E661ACBB6709B8F

According to the documentation, i have to order the keys alphabetically and only hash those that are allowed.
These are the allowed keys:
['AAVADDRESS', 'AAVCHECK', 'AAVZIP', 'ACCEPTANCE', 'ALIAS', 'AMOUNT', 'BRAND', 'CARDNO', 'CCCTY', 'CN', 'COMPLUS', 'CURRENCY', 'CVCCHECK', 'DCC_COMMPERCENTAGE', 'DCC_CONVAMOUNT', 'DCC_CONVCCY', 'DCC_EXCHRATE', 'DCC_EXCHRATESOURCE', 'DCC_EXCHRATETS', 'DCC_INDICATOR', 'DCC_MARGINPERCENTAGE', 'DCC_VALIDHOUS', 'DIGESTCARDNO', 'ECI', 'ED', 'ENCCARDNO', 'IP', 'IPCTY', 'NBREMAILUSAGE', 'NBRIPUSAGE', 'NBRIPUSAGE_ALLTX', 'NBRUSAGE', 'NCERROR', 'ORDERID', 'PAYID', 'PM', 'SCO_CATEGORY', 'SCORING', 'STATUS', 'TRXDATE', 'VC'];

I made this method to make the hash:
/**
 * @return string
 */
protected function getShaOutSign()
{
    $hash = '';
    $values = \Input::all();
    $values = array_change_key_case($values, CASE_UPPER);
    ksort($values);

    foreach ($values as $key => $value) {
        if (in_array($key, $this->shaOut)) {

            if(!empty($value))
            {
                $hash .= $key . '=' . $values[$key] . $this->settings->shaout;
            }
        }
    }

    return  strtoupper(sha1($hash));
}

Im 100% sure the SHA out key is correct.
The string it makes before i do SHA1:
ACCEPTANCE=0000000000abcDEFghj1234560987654AMOUNT=90.82abcDEFghj1234560987654BRAND=iDEALabcDEFghj1234560987654ORDERID=476abcDEFghj1234560987654PAYID=43934127abcDEFghj1234560987654PM=iDEALabcDEFghj1234560987654STATUS=9abcDEFghj1234560987654

And the final hash i get is:
68E459CB933E04B582A5D564CE6F591D5819B7F1

No matter what i try, i just can't get it to match it with the one in the $_GET request. 
My sha-out key: abcDEFghj1234560987654
Could someone point me into the right direction?
","The problem is clearly that part: 
if(!empty($value))
{
    $hash .= $key . '=' . $values[$key] . $this->settings->shaout;
}

Your request contains '...&NCERROR=0...'. 
So the value is 0. And 0 is empty. 
I had the same problem. But I used array_filter() function: 
$parameters = array_filter($parameters);

Also array_filter() removed my 'empty' ncerror field. 
","750","<php><payment><sha>","1","1","2","2015-08-04 08:50:58","31403320","4","","2842458","","2015-07-14 10:02:00","2015-07-14 09:26:25",""
"17283748","Java equivalent for creating hash","I have a piece of C# code, and I'm trying to rewrite it in java.
But I'm not getting the expected result in my Java code.
What am I doing wrong?
C# code:
string response = pwd + challenge;
System.Security.Cryptography.SHA1CryptoServiceProvider SHA1 = 
   new System.Security.Cryptography.SHA1CryptoServiceProvider(); 
SHA1.Initialize();
byte[] hash = SHA1.ComputeHash(System.Text.Encoding.Default.GetBytes(response));
System.Text.StringBuilder builder = new System.Text.StringBuilder(); 
foreach (byte b in hash)
    builder.Append(b.ToString(""x2""));

Java code:
MessageDigest messageDigest  = MessageDigest.getInstance(""SHA-1"");
    byte[] digest = messageDigest.digest((PASSWORD + challenge).getBytes());

    String result = new BigInteger(1, digest).toString(16);

","","745","<c#><java><hash><sha>","0","","0","2013-06-24 20:00:37","","7","2","14357","","2013-06-24 20:00:37","2013-06-24 19:43:01",""
"47041120","Convert string to Guid using SHA256 without truncating","Is there a way to convert a string to a GUID using SHA256 without truncating the 16 bytes?
Currently I have this:
using SHA256 sha2 = SHA256.Create())
{
     var hash = sha2.ComputeHash(Encoding.Default.GetBytes(string));
     return new Guid(hash.Take(16).ToArray());
}

","A hash is not the same as a Guid. Trying to equate the 2 is incorrect.
If you want a unique identifier:
return new Guid();

That'll give you one.
If you want the hash, store is as bytes or a string, not a Guid
","735","<c#><hash><guid><sha256><sha>","2","1","1","2017-10-31 17:47:04","","10","","","","","2017-10-31 17:21:43",""
"9850590","sqlite3 unrecognized token error for ( md5 or sha1)","how to create a table with sha1 or md5 as table name in sqlite3 using python, i am getting Exception OperationalError saying unrecognized token, is there any alternate method
","Works fine for me:
>>> import sqlite3
>>> conn = sqlite3.connect(':memory:')
>>> conn.execute('create table md5 (mycol)') # if you're being very literal
<sqlite3.Cursor object at 0x35b7dc0>
>>> import hashlib
>>> tbl_name = hashlib.sha1('test').hexdigest()
>>> conn.execute('create table {} (mycol)'.format(tbl_name)) # otherwise
<sqlite3.Cursor object at 0x35b7dc0>

Caveat: do not use string interpolation in any settings where you're getting user-input as you will be at risk for SQL-injection attacks.  
","729","<python><sqlite><md5><sha>","0","1","2","2012-03-24 16:18:03","9853270","1","","","","","2012-03-24 09:30:53",""
"9850590","sqlite3 unrecognized token error for ( md5 or sha1)","how to create a table with sha1 or md5 as table name in sqlite3 using python, i am getting Exception OperationalError saying unrecognized token, is there any alternate method
","I'm assuming you're using value of function like md5.hexdigest() as a table name. If so, then you need to take into account fact that hash value may start from a digit. SQLite doesn't allow you to start table name from a digit. The simplest solution would be to add some kind of prefix, like:
>>> table_name = ""table%s"" % hashlib.sha1('blurp').hexdigest()
>>> print(table_name)
table5187399948bdcff4fa10220cd8509257567c6b5a

","729","<python><sqlite><md5><sha>","0","2","2","2012-03-24 16:18:03","9853270","1","","","","","2012-03-24 09:30:53",""
"35180006",".Net signing with strong name key file and SHA256","We currently sign our assemblies using an SHA1 strong name key file in Visual Studio using the .Net 4.0 framework.  The main reason we use strong naming is the ability to use ""InternalsVisibleTo"" in our assemblies.  Since SHA1 is now deprecated I believe we should be switching to SHA256.
I have attempted to generate and use SHA256 as the strong name key file in Visual Studio in .Net 4.0 but it cannot generate one, although I can create an SHA256 through .Net 4.5 and then assign that to my .Net 4.0 project and it appears to accept it when I use the ""Sign the assembly"" feature in Visual Studio.
My question is does .Net 4.0 have the ability to correctly utilize the SHA256 strong name file generated in .Net 4.5?
Thanks for your help.
","There are 2 options to create Personal Exchange File (*.pfx), 

Using Makecert
""makecert.exe"" -n ""CN=Local"" - r -pe -a sha256 -len 2048 -cy authority -e 
03/03/2017 -sv Local.pvk Local.cer
""pvk2pfx.exe"" -pvk Local.pvk -spc Local.cer -pfx Local.pfx -po 
MyPassword -sy 24
Using OpenSSL
openssl.exe req -x509 -nodes -sha256 -days 3650 -subj ""/CN=Local"" -newkey 
rsa:2048 -keyout Local.key -out Local.crt
openssl.exe pkcs12 -export -in Local.crt -inkey Local.key -CSP ""Microsoft 
Enhanced RSA and AES Cryptographic Provider"" -out Local.pfx

The OpenSSL is more reliable way of doing this.
","725","<.net><.net-4.0><sha1><sha256><sha>","1","1","1","2016-08-17 16:43:05","","4","2","","","","2016-02-03 14:41:05",""
"20258473","C# - Converting a String with Length 128 to a 64 bytes array to compare with SHA-512's 64 bytes array","I am trying to get a 64 bytes array of my hashed password so I can match it against the salted and hashed (SHA-512) password.
I am currently storing the hashed password in a MySql database using a VARCHAR(128).
So I am storing for example 406f2c25c99fa980992a9704878072485bcca1316b46b3d6a05bbe468a87a8bda82db6ea44a95746d96519a296463175c8a584e49b86d94bd4a542ac03fb6dd7 in the database.
When I retrieve that value as a String using C#, its length is 128.
I have tried several Encodings to get the byte array from that string, but i never get a 64 bytes one to even try to match it against the salted and hashed password's 64 bytes array.
Had the same issue with SHA-256 (couldn't get a 32 bytes array).
Thanks a lot!
","You are correct that SHA-512 returns a 64 byte value. However, in your database, you're storing a hexadecimal string representation of that 64 byte value, which requires twice as many bytes.
For example, consider the case when you have a single byte with a value of 255. As an unsigned integer, 255 can be stored in one byte, but the hexadecimal string representation (FF), requires 2 bytes.
","717","<c#><security><hash><bytearray><sha>","-1","0","1","2013-11-28 05:45:30","20258575","0","","","","","2013-11-28 05:37:27",""
"14610451","Reversing SHA-1 or MD5 given (small) input length without brute force","I recall hearing that some weaknesses were discovered with SHA-1 making it easier to find the plaintext input given the output hash. I also know that MD5 has been determined to be weak for some applications. I'm trying to create a program to demonstrate the different complexities of 2 approaches: a brute force search to find the input, and an exploitation of a weakness in SHA-1 or MD5 to find the input.
The plaintext inputs will be of length <4 and will consist of only A-Z, so brute force isn't impractical.  
My questions are:
Is there a C/C++ implementation to reverse SHA-1 by exploiting the weaknesses?
Is there a C/C++ implementation to reverse MD5 by exploiting the weakness?
My current feeling is that any approach to exploitation of the weakness will not have enough of a difference in time-complexity to demonstrate a benefit for such a small sample size.
","No, this is not possible. While some weaknesses do exist in MD5 and SHA-1, they do not generally permit preimage attacks of this form -- most of the known weaknesses involve the construction of collision pairs.
","717","<c++><algorithm><hash><md5><sha>","2","7","2","2013-01-30 17:55:11","14610555","2","1","","","","2013-01-30 17:49:33",""
"14610451","Reversing SHA-1 or MD5 given (small) input length without brute force","I recall hearing that some weaknesses were discovered with SHA-1 making it easier to find the plaintext input given the output hash. I also know that MD5 has been determined to be weak for some applications. I'm trying to create a program to demonstrate the different complexities of 2 approaches: a brute force search to find the input, and an exploitation of a weakness in SHA-1 or MD5 to find the input.
The plaintext inputs will be of length <4 and will consist of only A-Z, so brute force isn't impractical.  
My questions are:
Is there a C/C++ implementation to reverse SHA-1 by exploiting the weaknesses?
Is there a C/C++ implementation to reverse MD5 by exploiting the weakness?
My current feeling is that any approach to exploitation of the weakness will not have enough of a difference in time-complexity to demonstrate a benefit for such a small sample size.
","For a very detailed outline of a SHA-1 exploit, see
https://hashcat.net/p12/js-sha1exp_169.pdf
For such a small input sample, you can build an in-memory rainbow table of all possible input values and their hashes in milliseconds.  I doubt you would measure any significant difference using an exploit vs. brute force.  
Further, for such a small input range, collisions are extremely unlikely (therefore there will almost certainly be no collision pairs).
","717","<c++><algorithm><hash><md5><sha>","2","2","2","2013-01-30 17:55:11","14610555","2","1","","","","2013-01-30 17:49:33",""
"44293192","Seeking information on hardware SHA-2 acceleration","This year AMD has released a new series of x86-64 CPUs named RyZen for desktop. RyZen's specification shows it provides new SSE based SHA1 and SHA-256 instructions wiki: Intel SHA extension:

sha1 instructions: SHA1RNDS4, SHA1NEXTE, SHA1MSG1, SHA1MSG2; 
sha-256 instructions: SHA256RNDS2, SHA256MSG1, SHA256MSG2

I am curious, Do any of the APIs/Libraries already exist that are able to laverage these instruction for ultra fast hashing to be used in PHP or other server side languages, when you use AMD RyZen CPU ? 
If not, when should we expect it to be available ?
Since Intel has provided specification for hardware SHA around year 2013, it seems at least a couple of compilers must have provied support for it.
","Support of hardware-accelerated SHA256 was added to openssl 1.0.2 [22 Jan 2015]:
https://git.openssl.org/gitweb/?p=openssl.git;a=blob;f=CHANGES

1962  Changes between 1.0.1l and 1.0.2 [22 Jan 2015]

2012   *) Support for new and upcoming Intel processors, including AVX2,
2013      BMI and SHA ISA extensions. This includes additional ""stitched""
2014      implementations, AESNI-SHA256 and GCM, and multi-buffer support
2015      for TLS encrypt.


So, with enabled hardware and recent openssl, any php/python library which uses openssl to compute SHA256 may use hardware accelerated SHA256 digest computation (if enabled in the openssl and if this implementation will be selected by the library). And command-line too: openssl dgst -sha256 -binary file_to_be_hashed.
There are some raw bindings of openssl library in php: http://php.net/manual/en/function.openssl-digest.php and OPENSSL_ALGO_SHA256 is there since PHP 5.5: which openssl version support for sha256 in php
Linux Kernel CryptoAPI may use hardware SHA1/SHA2 since 4.4 version: https://www.phoronix.com/scan.php?page=news_item&px=Linux-4.4-Crypto (http://lkml.iu.edu/hypermail/linux/kernel/1511.0/00383.html); but it is unlikely that PHP/other scripting library will use kernel cryptoapi.
","716","<hash><sha1><sha256><sha><sha2>","1","2","1","2017-05-31 20:06:33","44293460","1","2","5266667","","2017-05-31 20:06:33","2017-05-31 19:26:57",""
"24403597","Spring Security simulataneous usage of multiple PasswordEncoders","I have spring app with simple configuration of Spring Security using bcrypt (default parameters)  and the test works fine, however i want to plan that this application gives the  ability to the administrator or the user to change password and select authentication parameters to be used such as: 
1)bcrypt (BCryptPasswordEncoder)
2)hash function such as sha (StandardPasswordEncoder), 
So the question is how to change the following class (or the AuthenticationManagerBuilder specifically ) in order to reflect that some users could have they password stored as a sha hash but other as bcrypt, Taking into account that the database table already have a column that specify what kind of hash is being stored in the password column i.e. bcrypt or sha.  
@Configuration
@EnableWebMvcSecurity
@EnableGlobalMethodSecurity(prePostEnabled=true)
public class SecurityConfig extends WebSecurityConfigurerAdapter {
    @Autowired
    private UserDetailsService iUserDetailsService;


    @Override
    protected void configure(HttpSecurity http) throws Exception {

        http
//          .csrf().disable()
//          .headers().disable()
            .headers()
            .contentTypeOptions()
            .xssProtection()
            .cacheControl()
            .httpStrictTransportSecurity()
            .frameOptions()
                .addHeaderWriter(new StaticHeadersWriter(""X-Content-Security-Policy"",""script-src 'self""))
                .addHeaderWriter(new StaticHeadersWriter(""Content-Security-Policy"",""script-src 'self'""))
                .addHeaderWriter(new StaticHeadersWriter(""X-WebKit-CSP"",""default-src 'self'""))
            .and()
            .exceptionHandling()
                .accessDeniedHandler(syncAccessDeniedHandler())
            .and()
            .authorizeRequests()
                .antMatchers(   ""/register"",
                                ""/static/**"",
                                ""/h2/**"",
                                ""/resources/**"",
                                ""/static/css/**"", 
                                ""/static/img/**"" , 
                                ""/static/js/**"", 
                                ""/static/pdf/**"",
                                ""/resources/static/css/**"", 
                                ""/resources/static/img/**"" , 
                                ""/resources/static/js/**"", 
                                ""/resources/static/pdf/**"",
                                ""/pdf/**"",
                                ""/css/**"",
                                ""/js/**"",
                                ""/img/**""

                                ).permitAll()
                .antMatchers(""/admin/dashboard/**"").hasAnyRole(""STUDENT"", ""ADMIN"")
                .antMatchers(""/admin/network/**"").hasRole(""ADMIN"")
                .anyRequest().authenticated()
                .and()
            .formLogin()
                .loginPage(""/login"")
                .permitAll()
                .and()
            .logout()
                .permitAll();
    }



    @Autowired
    public void registerAuthentication(AuthenticationManagerBuilder auth) throws Exception {
        auth
        .userDetailsService(iUserDetailsService).passwordEncoder(pwEncoder());        
    }

    @Bean
    public BCryptPasswordEncoder pwEncoder() {
        return new BCryptPasswordEncoder();        
    }


    @Bean
    public SyncAccessDeniedHandler syncAccessDeniedHandler() {
        String uri = ""/403"";
        return new SyncAccessDeniedHandler(uri);
    }



}

","maybe you can use  DelegatingPasswordEncoder from spring 5.0 or extend it to create your own version.
https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/crypto/password/DelegatingPasswordEncoder.html
","716","<encoding><spring-security><passwords><bcrypt><sha>","1","0","1","2018-06-29 04:18:53","","5","","","","","2014-06-25 08:21:17",""
"43219682","Number of Characters in a SHA256 Hash","64 characters are used to render a SHA256 hash. Why isn't it 32 since 256 divided by 8 is 32?  Is the byte a raw byte that needs to be base64 encoded to be represented as ascii characters?
","Yes. Byte values 128-255 are not part of any ASCII code units. ASCII has only 128 codepoints so it can't cover all 256 byte values no matter what the mapping is. 
But the real reason for using Base16 is so that all the characters are printable/visible and none of them are control characters (regardless of the character set and encoding) or quote characters used as literal string delimeters in programming languages and document formats. This lets them pass through many contexts as is, without breaking any rules of the context.
There are other ways of achieving that goal. One is Base64. 
","711","<sha>","0","0","1","2017-04-05 02:53:27","","1","","","","","2017-04-04 23:58:22",""
"16201155","Difference of sha1 hashes in PHP and Node.JS for cyrillic","If i try to get sha1 from ""ABC"" they are same if PHP and Node.JS.
function sha1(input) {
  return crypto.createHash('sha1').update(input).digest('hex');
};

But if i try to take hash of something cyrillic like this: ""ЭЮЯЁ"" they are not.
How to fix it?
","The issue is likely that the character set/encodings aren't matching.
If the string in PHP is UTF-8 encoded, you can mirror that in Node.js by specifying 'utf8':
function sha1(input) {
  return crypto.createHash('sha1').update(input, 'utf8').digest('hex');
};

> crypto.createHash('sha1').update('ЭЮЯЁ').digest('hex')
'da7f63ac9a3b5c67c8920871145cb5904f3df29a'

> crypto.createHash('sha1').update('ЭЮЯЁ', 'utf8').digest('hex')
'f78c3521413a8321231e35665f8c4a16550e182a'

'ABC' will have a better chance of matching because these are all ASCII characters and ASCII is a starting point for many other character sets. It's when you get beyond ASCII that you'll more often run into conflicts.
","708","<php><node.js><sha>","2","4","1","2013-04-24 21:50:12","16201506","1","","","","","2013-04-24 20:04:25",""
"12246362","Looking for Signing algorithm that creates 32 or 16 byte keys in Java","Cannot match up the size of key generated using public/private keys for licensing application. Ive written a self contained example that creates public/private key, create a license by signing user emailaddress with public key, and then check using public key, license and email address that the license indeed was encoded using private key (Obviously this wouldn't all be in one class usually).
This all works but the hex version of the license key is 96 characters (i.e representing 48 bytes/384 bits) which  is a little longer than I wanted (In contrast the length of public/private keys is not a problem and the longer the better). What could I use to generate a 32 (64 hex chars) byte or maybe 16 byte (32 hex chars), and would the security of this be reasonable ?
Picking another algorithm is somewhat hard as I do not understand the the interaction between the algorithm picked for generating the keys
KeyPairGenerator.getInstance(""DSA"");

and the algorithm for signing
Signature.getInstance(""SHA/DSA"");

and I cant find a list for either.
One other point when I generate a public/private key pairs I specify key size of
keyGen.initialize(1024, new SecureRandom());

yet neither the public key (443 bytes) or the private key (335 bytes) or the sum of both (778 bytes) match this number.
import org.apache.commons.codec.binary.Hex;

import java.security.*;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;

/**
 *
 */
public class CreateLicense
{

    private String PUBLIC_KEY;
    private String PRIVATE_KEY;

    public static void main(final String[] args)
    {
        try
        {
            String email = args[0];
            System.out.println(""Creating license for:""+email);
            CreateLicense cl = new CreateLicense();
            cl.generatePublicPrivateKeyPair();
            String license = cl.createLicense(email);
            cl.checkLicense(email, license);

        }
        catch(Throwable t)
        {
            t.printStackTrace();
        }
    }

    //Would only be done once on server
    private void generatePublicPrivateKeyPair() throws Exception
    {
        final KeyPairGenerator keyGen = KeyPairGenerator.getInstance(""DSA"");
        keyGen.initialize(1024, new SecureRandom());
        final KeyPair pair = keyGen.generateKeyPair();
        PrivateKey privateKey = pair.getPrivate();
        PRIVATE_KEY=Hex.encodeHexString(privateKey.getEncoded());
        PublicKey  publicKey = pair.getPublic();
        PUBLIC_KEY=Hex.encodeHexString(publicKey.getEncoded());
        System.out.println(""PrivateKeyHexLength:""+privateKey.getEncoded().length);
        System.out.println(""PublicKeyHexLength:""+publicKey.getEncoded().length);

    }

    private PrivateKey reinflatePrivateKey(String keyAsHexString) throws Exception
    {
        byte[] keyBytes = Hex.decodeHex(keyAsHexString.toCharArray());
        final  PKCS8EncodedKeySpec privKeySpec = new PKCS8EncodedKeySpec(keyBytes);
        final  KeyFactory keyFactory = KeyFactory.getInstance(""DSA"");
        final  PrivateKey privateKey = keyFactory.generatePrivate(privKeySpec);
        return privateKey;
    }

    private PublicKey reinflatePublicKey(String keyAsHexString) throws Exception
    {
        byte[] keyBytes = Hex.decodeHex(keyAsHexString.toCharArray());
        final  X509EncodedKeySpec pubKeySpec = new X509EncodedKeySpec(keyBytes);
        final  KeyFactory keyFactory = KeyFactory.getInstance(""DSA"");
        final  PublicKey publicKey = keyFactory.generatePublic(pubKeySpec);
        return publicKey;
    }

    //License Create on server based on email address
    private String createLicense(String emailAddress) throws Exception
    {
        String message=emailAddress;
        PrivateKey privateKey =  reinflatePrivateKey(PRIVATE_KEY);
        final Signature dsa = Signature.getInstance(""SHA/DSA"");
        dsa.initSign(privateKey);
        dsa.update(message.getBytes());
        final byte[] m1 = dsa.sign();
        String license =  Hex.encodeHexString(m1);
        System.out.println(""CreateLicense:""+license+"":Size:""+license.length());
        return license;
    }

    //Client checks that given known emailaddress and public key that a if a license was derived from
    //that and corresponding privatekey it would match license.
    private boolean checkLicense(String  emailAddress, String license) throws Exception
    {
        String message=emailAddress;
        PublicKey publicKey =  reinflatePublicKey(PUBLIC_KEY);
        final Signature dsa = Signature.getInstance(""SHA/DSA"");
        dsa.initVerify(publicKey);
        dsa.update(message.getBytes());

        boolean result = dsa.verify(Hex.decodeHex(license.toCharArray()));
        System.out.println(""Result""+result);
        return result;
    }
}

gives output like
Creating license for:testuser@nowhere.com
PrivateKeyHexLength:335
PublicKeyHexLength:443
CreateLicense:302c021425f7ad7289b073f82a1d808838f43e0134c5591402140d2a7a4e3967706d4659dc73ace6455040a5fc6b:Size:92
Resulttrue

","@Paul - I think your solution here would be to use ECDSA.
Change your line of code 
final KeyPairGenerator keyGen = KeyPairGenerator.getInstance(""DSA"");

to
final KeyPairGenerator keyGen = KeyPairGenerator.getInstance(""ECDSA"");

The keys are much shorter than DSA - and I'm sure hex version signature would be shorter. I suggest you use a prime ECC curve of say 256 or 128 bits.
Please let us know if this solves the problem.
","707","<java><licensing><sha><public-key><dsa>","0","0","1","2013-02-26 16:44:11","","0","","1480018","","2012-09-03 10:59:03","2012-09-03 10:49:45",""
"34171540","sha1 is not working in password encryption","I am using sha1 encryption for encrypting my password, but I am facing problem with that. For some users, login is not working.
my code,(in sign up)
// all validation is done here
$password = sha1($_POST['password']);

// inserting data is here

in login my query is
$email     = $_POST['email'];
$password  = sha1($_POST['password']);

select * from users where email = $email and password = $password and status = 1 and deleted = 0;

one of the user facing problem with password,

im$$man

Am I doing some thing wrong.
please help me.
","Well the problem is here,
sha1 treats $man in im$$man as variable, so it will be evaluated as null since you dont have any value for that.
some thing like this,
sha1(""im$$man"");// will echo 17cf5ec2752a9a7f0077c904f60b64f23ba2534d

is also equal to 
sha1(""im$"");// will echo 17cf5ec2752a9a7f0077c904f60b64f23ba2534d
$man is evaluated to null.

Output is same for both the input(input is different though)    
To get expected result, avoid double quotes there,
sha1('im$$man');// this will give correct output

Output is
850caa44549443778fe005f466766d5d6d413692// correct output.

Similar problem with md5() here
","707","<php><sha><password-hash>","3","0","2","2015-12-09 07:19:08","34171597","2","","2224584","","2015-12-09 07:16:07","2015-12-09 05:44:25",""
"34171540","sha1 is not working in password encryption","I am using sha1 encryption for encrypting my password, but I am facing problem with that. For some users, login is not working.
my code,(in sign up)
// all validation is done here
$password = sha1($_POST['password']);

// inserting data is here

in login my query is
$email     = $_POST['email'];
$password  = sha1($_POST['password']);

select * from users where email = $email and password = $password and status = 1 and deleted = 0;

one of the user facing problem with password,

im$$man

Am I doing some thing wrong.
please help me.
","
I am using sha1 encryption for encrypting my password,

Nope. SHA1 isn't encryption, it's a hash function. Understanding the difference between encrypting and hashing is crucial to implementing this safely:

Doing it right: use password_hash() and password_verify()
Doing it wrong: Encrypting with TripleDES-ECB

Also, the way you wrote your query leads me to believe it is vulnerable to SQL injection.
","707","<php><sha><password-hash>","3","6","2","2015-12-09 07:19:08","34171597","2","","2224584","","2015-12-09 07:16:07","2015-12-09 05:44:25",""
"24307751","Is it possible to check if a hash was generated using SHA1 and is a valid hash?","I ran into an issue where I want to validate a hash which was generated using SHA1. Is it possible to reverse engineer and figure out if the hash was generated using HMACSHA1 algo?
","If you have the data that was hashed, then you can use a SHA1 hash on that data and compare the hash values to see if they are the same.  If they are equal then the SHA1 was used originally.
In short you can't go backwards by reverse engineering the hash function.
","707","<c#><sha><hmacsha1>","1","1","2","2014-06-19 13:53:44","24308337","3","","","","","2014-06-19 13:25:31",""
"24307751","Is it possible to check if a hash was generated using SHA1 and is a valid hash?","I ran into an issue where I want to validate a hash which was generated using SHA1. Is it possible to reverse engineer and figure out if the hash was generated using HMACSHA1 algo?
","No, there is nothing in a hash code that can tell you what algorithm was used to create it. Any strong hash code algorithm is specifically designed to not contain any traceable meta data in the hash code. There is no specific markers that identifies the hash code as being a hash code, or what kind of algorithm was used.
Basically a hash algorithm tries to create a strong pseuo-random number using all the input as seed. The output is just as random as possible, there are no recognisable patterns that could be used to identify the input data or the algorithm.
If you have the input data that was used to create the hash code, you could recreate it and compare the results. However, if just a single bit in the input is different you get a completely different hash code, so the input has to be exactly the same.
","707","<c#><sha><hmacsha1>","1","1","2","2014-06-19 13:53:44","24308337","3","","","","","2014-06-19 13:25:31",""
"28235569","Convert Encrypt code in java to Ruby","I have been trying to convert a code for encrypt in java to ruby, but I am not able to do it completely. I getting different values.
   passphrase = passphrase + STATIC_KEY;
   byte[] key = passphrase.getBytes(""UTF-8"");

   MessageDigest sha = MessageDigest.getInstance(""SHA-1"");
   key = sha.digest(key);
   key = Arrays.copyOf(key, 16);
   SecretKey secretKey = new SecretKeySpec(key, ""AES"");

   Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
   IvParameterSpec initialisationVector = new IvParameterSpec(
           new byte[16]);
   cipher.init(Cipher.ENCRYPT_MODE, secretKey, initialisationVector);

   byte[] encryptedData = cipher.doFinal(plainText.getBytes(""UTF-8""));

   return SimpleCrypto.toHex(encryptedData);

Can anyone let me know, how this can be done in it ruby.
  unencrypted = ""passphrase""
  c = OpenSSL::Cipher.new(""aes-128-cbc"")
  c.encrypt
  c.key = Digest::SHA1.hexdigest('secret_key')[0...32]
  e = c.update(unencrypted)
  e << c.final
  return e

","require 'openssl'

Encrypt:
unencrypted = ""I am a secret!""

initialize the Cipher for encrypt
cipher = OpenSSL::Cipher::AES.new(128, :CBC)
cipher.encrypt

create the key using SHA1
key = Digest::SHA1.hexdigest('secret_key')[0...32]
cipher.key = key

create the initialisationVector with an input
iv = Digest::SHA1.hexdigest('secret_iv')[0...32]
cipher.iv = iv

or create a random initialisationVector
iv = cipher.random_iv

run the encryption
encrypted = cipher.update(unencrypted) + cipher.final

Decrypt:
initialize the Cipher for decrypt
decipher = OpenSSL::Cipher::AES.new(128, :CBC)
decipher.decrypt

load the key and initialisationVector
decipher.key = key
decipher.iv = iv

decrypt the plaintext
plain = decipher.update(encrypted) + decipher.final

Does it match?
puts unencrypted == plain #=> true

For more information look at the Ruby Docs for the Class - OpenSSL::Cipher 
","706","<java><ruby><ruby-on-rails-3><aes><sha>","3","1","2","2015-02-09 07:27:37","28404768","2","5","","","","2015-01-30 12:06:30",""
"28235569","Convert Encrypt code in java to Ruby","I have been trying to convert a code for encrypt in java to ruby, but I am not able to do it completely. I getting different values.
   passphrase = passphrase + STATIC_KEY;
   byte[] key = passphrase.getBytes(""UTF-8"");

   MessageDigest sha = MessageDigest.getInstance(""SHA-1"");
   key = sha.digest(key);
   key = Arrays.copyOf(key, 16);
   SecretKey secretKey = new SecretKeySpec(key, ""AES"");

   Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
   IvParameterSpec initialisationVector = new IvParameterSpec(
           new byte[16]);
   cipher.init(Cipher.ENCRYPT_MODE, secretKey, initialisationVector);

   byte[] encryptedData = cipher.doFinal(plainText.getBytes(""UTF-8""));

   return SimpleCrypto.toHex(encryptedData);

Can anyone let me know, how this can be done in it ruby.
  unencrypted = ""passphrase""
  c = OpenSSL::Cipher.new(""aes-128-cbc"")
  c.encrypt
  c.key = Digest::SHA1.hexdigest('secret_key')[0...32]
  e = c.update(unencrypted)
  e << c.final
  return e

","Encrypt Code:
def aes(key,string)
  cipher = OpenSSL::Cipher::Cipher.new(""aes-128-cbc"")
  cipher.encrypt
  cipher.padding = 1
  cipher.key = hex_to_bin(Digest::SHA1.hexdigest('secret_key')[0..32])
  cipher_text = cipher.update(string)
  cipher_text << cipher.final
  return bin_to_hex(cipher_text).upcase
end

Decrypt Code:
def aes_decrypt(key, encrypted)
  encrypted = hex_to_bin(encrypted.downcase)
  cipher = OpenSSL::Cipher::Cipher.new(""aes-128-cbc"")
  cipher.decrypt
  cipher.padding = 1
  cipher.key = hex_to_bin(Digest::SHA1.hexdigest('secret_key')[0..32])
  d = cipher.update(encrypted)
  d << cipher.final
end

hex_to_bin and bin_to_hex
def hex_to_bin(str)
  [str].pack ""H*""
end

def bin_to_hex(s)
  s.unpack('C*').map{ |b| ""%02X"" % b }.join('')
end

In My case, The java code was using default initialization vector, So I did not set any iv, Also, there was hex_to_bin was a missing piece there. So after that, all started working properly.
I hope it helps someone if they come across this issue.
","706","<java><ruby><ruby-on-rails-3><aes><sha>","3","0","2","2015-02-09 07:27:37","28404768","2","5","","","","2015-01-30 12:06:30",""
"16046705","How are SHA-3 variants named?","How should we succinctly refer to SHA-3 variants of specific width?  The precedent set by SHA-2 naming is unfortunately ambiguous if applied to SHA-3.  Specifically, we have SHA-0 and SHA-1 (160 bits), followed by SHA-2 (224, 256, 384, or 512 bits), where SHA-224, SHA-256, SHA-384, and SHA-512 refer to the SHA-2 variants.  SHA-3 supports the same bit counts as SHA-2, but a different naming convention is needed to distinguish between SHA-2 and SHA-3.  SHA-3-224, SHA-3-256, SHA-3-384, and SHA-3-512 seem reasonable (if clumsy), but I can find no established naming convention of any sort.
","There is no convention yet. Even the standard itself is not published AFAIK.
I'd use SHA3-256 etc. (like MD6-256).
Same naming scheme is also used in BouncyCastle library.
As for SHA-3-256 and friends, I personally don't like the idea of using the same char - in algorithm name and as property separator. If you necessarily need to keep the dash in algorithm name, I'd go with SHA-3/256 -- similar scheme is used in cipher transformation naming in JCA.
","704","<hash><sha>","2","1","2","2015-11-12 17:32:06","","3","1","","","","2013-04-16 20:42:09",""
"16046705","How are SHA-3 variants named?","How should we succinctly refer to SHA-3 variants of specific width?  The precedent set by SHA-2 naming is unfortunately ambiguous if applied to SHA-3.  Specifically, we have SHA-0 and SHA-1 (160 bits), followed by SHA-2 (224, 256, 384, or 512 bits), where SHA-224, SHA-256, SHA-384, and SHA-512 refer to the SHA-2 variants.  SHA-3 supports the same bit counts as SHA-2, but a different naming convention is needed to distinguish between SHA-2 and SHA-3.  SHA-3-224, SHA-3-256, SHA-3-384, and SHA-3-512 seem reasonable (if clumsy), but I can find no established naming convention of any sort.
","I believe they have been finalized as follows
""SHA3-224"", ""SHA3-256"", ""SHA3-386"", ""SHA3-512""
SHA-3 Standard: Permutation-Based Hash and Extendable-Output Functions
","704","<hash><sha>","2","2","2","2015-11-12 17:32:06","","3","1","","","","2013-04-16 20:42:09",""
"16317635","SHA Encryption doesn't work","Below is the code I have written for SHA encryption. But compiling this, gives an exception 

java.security.NoSuchAlgorithmException: SHA SecretKeyFactory not available

Please some one help to solve this? Actually am not familiar with encryption techniques.
Code : 
public String encrypt(String password)
    {
        try
        {

            KeySpec ks=new PBEKeySpec(password.toCharArray());
            SecretKeyFactory skf=SecretKeyFactory.getInstance(algo);
            SecretKey key=skf.generateSecret(ks);
            MessageDigest md=MessageDigest.getInstance(""SHA-256"");
            md.update(password.getBytes());
            byte[] digest=md.digest();
            byte[] salt=Arrays.copyOf(digest, 16);
            AlgorithmParameterSpec aps=new PBEParameterSpec(salt, 20);
            Cipher cipher=Cipher.getInstance(algo);
            cipher.init(Cipher.ENCRYPT_MODE, key, aps);

        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        return password;
    }

    @Override
    public String decrypt(String password)
    {
        try
        {
            KeySpec ks=new PBEKeySpec(password.toCharArray());
            SecretKeyFactory skf=SecretKeyFactory.getInstance(algo);
            SecretKey key=skf.generateSecret(ks);
            MessageDigest md=MessageDigest.getInstance(""SHA-256"");
            md.update(password.getBytes());
            byte[] digest=md.digest();
            byte[] salt=Arrays.copyOf(digest, 16);
            AlgorithmParameterSpec aps=new PBEParameterSpec(salt, 20);
            Cipher cipher=Cipher.getInstance(algo);
            cipher.init(Cipher.DECRYPT_MODE, key, aps);

        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        return password;
    }

","If you don't want to waste your time re-inventing the wheel, you can always go for org.apache.commons. Specifically, this is how to do it:
String hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(password);

Add this to your POM and you're good to go:
<dependency>
    <groupId>commons-codec</groupId>
    <artifactId>commons-codec</artifactId>
    <version>1.7</version>
</dependency> 

This is the failure: MessageDigest.getInstance(""SHA-256"");. There is no default implementation of SHA256 hashing available. Also, how are you planning to decrypt SHA2? Maybe I fail to understand your intention, but the hash algorithms are meant to be irreversible by design.
Encryption
AFAIK the best encryption(not hashing/reversible) algorithm is AES. Here's a good answer on how to use AES.
Encrypt and decrypt with AES and Base64 encoding
","703","<java><encryption><sha>","-2","3","1","2014-01-01 13:51:51","","5","3","759866","","2014-01-01 13:51:51","2013-05-01 11:52:39","2013-05-03 09:38:55"
"32129441","Calculate SHA256 sum of file quickly","I have a piece of C code that takes as input a file and returns the SHAT256 hash of the contents:
int f_sha256(unsigned char* dest, char* filename){
  FILE* file;
  int read;
  int BUFFER_LENGTH = 1024;
  char buffer[BUFFER_LENGTH];
  EVP_MD_CTX *mdctx;
  const EVP_MD *md;
  unsigned int length;
  file = fopen(filename, ""r"");
  if(file <= 0){
    printf(""%s\n"", filename);
    perror(""No file"");
    return -1;
  }
  mdctx = EVP_MD_CTX_create();
  length = 0;
  OpenSSL_add_all_digests();
  md = EVP_get_digestbyname(""sha256"");
  EVP_DigestInit_ex(mdctx, md, NULL);
  while((read = fread((void*)buffer, 1, BUFFER_LENGTH, file)) != 0){
    EVP_DigestUpdate(mdctx, buffer, read);
    length += read;
    if(read < BUFFER_LENGTH){
      break;
    }
  }
  EVP_DigestFinal_ex(mdctx, dest, &length);
  EVP_MD_CTX_destroy(mdctx);
  EVP_cleanup();
  return 0;
}

It is VERY slow, according to valgrind 90% of the 5 seconds the entire program (there is other stuff involved, not relevant) is used in libcrypto, called from SHA256_Update. The function has no name (0x00...006af80), it is called 845 times, which I suppose is why it takes so much of the time.
However, if I run the command line sha256sum on the file, it finishes in around 0.05 seconds.
Why does using libcrypto take so long, how can I improve this performance?
","","694","<c><sha>","0","","0","2015-08-20 22:24:34","","7","","","","","2015-08-20 22:24:34",""
"12021384","Endianness of HMAC-SHA code","I am transmitting AES messages.  My understanding is that:  1. The AES algorithm treats messages as byte-wise and is endian-neutral.  2. The Initialization Vector is endian-neutral as far as transmission and reception is concerned.
I am also calculating an HMAC-SHA384 code for the message.  From my reading it sounds as though HMAC-SHA384 does need byte-swapping if the transmission endianness (big-endian in my case) does not match machine endianness.  The swapping should occur from byte 0 and 47, 1 and 46, so on?  Can anyone more knowledgeable in the subject than I confirm or contradict this please?
I am presently using the .NET HMACSHA384 class, but on the other end I will be writing C++ code and don't yet know what library will provide the HMAC code.
","leppie is right, both are send as byte arrays. And you can be pretty sure that the byte array received will conform to NIST specifications and test vectors. So you should not overly worry about endianness in this case.
If there are people that need to worry then it is the implementors of the hash function. E.g. NIST unfortunately specified a little endian machine (Intel processor) as reference platform for SHA-3. The first version of Skein had incorrect test vectors because of a bug regarding endianness in the first iteration (1.0).
","692","<encryption><sha><hmac><endianness>","2","0","1","2012-08-18 19:30:47","12021643","2","","","","","2012-08-18 18:57:44",""
"32162853","Convert C# SHA256 hash to Ruby","I have the C# code:
byte[] bytes = new UnicodeEncoding().GetBytes(input);
return Convert.ToBase64String(new SHA256Managed().ComputeHash(bytes));

that encodes a string to an SHA2 hash, which is then base 64 encoded. I need to convert this into Ruby.
I tried several ways. This is one of them:
hash = Digest::SHA256.digest(val.encode('utf-8'))
encoded = Base64.urlsafe_encode64(hash)

My code all produce the same result that doesn't match. I cannot get them to work. Any help on converting this would be appreciated.
Update
After some messing around I was able to get it working with a hard coded array, the issue is that the C# code adds a 0 after every element in the array. Here is the working ruby code (with the hard coded array):
Digest::SHA256.base64digest([99,0,104,0,97,0,100,0].pack('C*').force_encoding('utf-16'))

I suppose I could iterate through the array but that seems unnecessary.
","I think you should change  new UnicodeEncoding()to new UTF8Encoding() or just use Encoding.UTF8
Unicode is UTF-16 in C#
","690","<c#><ruby><sha>","3","1","3","2015-08-23 11:05:30","32165529","0","","531479","","2015-08-23 06:04:57","2015-08-23 03:22:02",""
"32162853","Convert C# SHA256 hash to Ruby","I have the C# code:
byte[] bytes = new UnicodeEncoding().GetBytes(input);
return Convert.ToBase64String(new SHA256Managed().ComputeHash(bytes));

that encodes a string to an SHA2 hash, which is then base 64 encoded. I need to convert this into Ruby.
I tried several ways. This is one of them:
hash = Digest::SHA256.digest(val.encode('utf-8'))
encoded = Base64.urlsafe_encode64(hash)

My code all produce the same result that doesn't match. I cannot get them to work. Any help on converting this would be appreciated.
Update
After some messing around I was able to get it working with a hard coded array, the issue is that the C# code adds a 0 after every element in the array. Here is the working ruby code (with the hard coded array):
Digest::SHA256.base64digest([99,0,104,0,97,0,100,0].pack('C*').force_encoding('utf-16'))

I suppose I could iterate through the array but that seems unnecessary.
","K so it was a multitude of items. In C# UnicodeEncoding().GetBytes(str) apparently adds a 0 after each character to the byte array. So I had to work around that in Ruby. Luckily I was able to use a little ruby magic to do this. The full working solution is below.
byte_array = input.bytes.zip(input.bytes.map{|b| 0}).flatten.compact
Digest::SHA256.base64digest(byte_array.pack('C*').force_encoding('utf-16'))

This gave me an identical hash output matching the value in the database.
","690","<c#><ruby><sha>","3","0","3","2015-08-23 11:05:30","32165529","0","","531479","","2015-08-23 06:04:57","2015-08-23 03:22:02",""
"32162853","Convert C# SHA256 hash to Ruby","I have the C# code:
byte[] bytes = new UnicodeEncoding().GetBytes(input);
return Convert.ToBase64String(new SHA256Managed().ComputeHash(bytes));

that encodes a string to an SHA2 hash, which is then base 64 encoded. I need to convert this into Ruby.
I tried several ways. This is one of them:
hash = Digest::SHA256.digest(val.encode('utf-8'))
encoded = Base64.urlsafe_encode64(hash)

My code all produce the same result that doesn't match. I cannot get them to work. Any help on converting this would be appreciated.
Update
After some messing around I was able to get it working with a hard coded array, the issue is that the C# code adds a 0 after every element in the array. Here is the working ruby code (with the hard coded array):
Digest::SHA256.base64digest([99,0,104,0,97,0,100,0].pack('C*').force_encoding('utf-16'))

I suppose I could iterate through the array but that seems unnecessary.
","Solution:
You need to use UTF-16LE encoding to get same SHA-256 Hash
p hash = Digest::SHA256.base64digest(""Hello"".encode('UTF-16LE'))

How did I find that?
I used Online C# Tool to create the hash of a string ""Hello"" using the code below:
using System.IO;
using System;
using System.Text;
using System.Security.Cryptography;

class Program
{
    static void Main()
    {
        byte[] bytes = new UnicodeEncoding().GetBytes(""Hello"");
        String s =  Convert.ToBase64String(new SHA256Managed().ComputeHash(bytes));
        Console.WriteLine(s);
    }
}

Above program produced the output oH5Pc0MkbIKybzLlb4VBjVGNiy8trnfx1W/nr1Dbl68=
Then, I wrote a Ruby Program to compute Base64-encoded SHA-256 hash of string ""Hello"", by encoding the string in all the supported char encodings of Ruby to figure out which char encoding will give exact same result.
require ""digest/sha2""
require ""base64""
s = ""Hello""
Encoding.list.each { |e| puts ""Encoding: #{e.to_s} => Hash: #{Digest::SHA256.base64digest(s.encode(e)) rescue ""error""}""}

After running the program, I came to conclude that if you use UTF-16LE encoding, you will get exact same output.
p hash = Digest::SHA256.base64digest(""Hello"".encode('UTF-16LE'))

As per documentation of UnicodeEncoding, it:

Represents a UTF-16 encoding of Unicode characters.

","690","<c#><ruby><sha>","3","3","3","2015-08-23 11:05:30","32165529","0","","531479","","2015-08-23 06:04:57","2015-08-23 03:22:02",""
"20238865","How to find SHA1 hash?","i got interesting task at school. I have to find message which sha-1 hash lasts with my birthday example. if i was born on 4th may 1932 then the hash must end with 040532. Any suggestions how to find it out?
","Start generating hashes from distinct messages1.
Eventually a hash will be generated with such a property. This is not that bad to brute-force as the range is only 224 (or ~16 million) and SHA is very fast.
There is no shortcut as SHA is a one way cryptographic hash function. In particular here, SHA has the property that ""it is infeasible to generate a message that has a given hash"".

1 The inputs should be distinct, and a simple counter will suffice. However, it may be more interesting to generate quasi-random messages based on the birthday being sought - e.g. including the date in various forms and sentences Mad Lib style. As long as this doesn't limit the domain, such that there is no qualifying hash, it'll work just as well as any other set of source messages.
","686","<sha>","3","2","2","2013-11-27 19:19:30","","1","","","","","2013-11-27 09:44:45",""
"20238865","How to find SHA1 hash?","i got interesting task at school. I have to find message which sha-1 hash lasts with my birthday example. if i was born on 4th may 1932 then the hash must end with 040532. Any suggestions how to find it out?
","my solution in C#:
//A create Sha1 function:
using System.Security.Cryptography;
public static string GetSHA1Hash(string text)
    {
        var SHA1 = new SHA1CryptoServiceProvider();

        byte[] arrayData;
        byte[] arrayResult;
        string result = null;
        string temp = null;

        arrayData = Encoding.ASCII.GetBytes(text);
        arrayResult = SHA1.ComputeHash(arrayData);
        for (int i = 0; i < arrayResult.Length; i++)
        {
            temp = Convert.ToString(arrayResult[i], 16);
            if (temp.Length == 1)
                temp = ""0"" + temp;
            result += temp;
        }
        return result;
    }

Source
Then a Random String generator:
 private static Random random = new Random((int)DateTime.Now.Ticks);//thanks to McAden
 private string RandomString(int size)
    {
        StringBuilder builder = new StringBuilder();
        char ch;
        for (int i = 0; i < size; i++)
        {
            ch = Convert.ToChar(Convert.ToInt32(Math.Floor(26 * random.NextDouble() + 65)));
            builder.Append(ch);
        }

        return builder.ToString();
    }

Source
and now you can bruteforce for your combination:
        string search = ""32"";
        string result = String.Empty;
        int slen = 5;
        string myTry = RandomString(slen);

        while (!result.EndsWith(search))
        {
            myTry = RandomString(slen);
            result = GetSHA1Hash(myTry);

        }

        MessageBox.Show(result + ""   "" + myTry);

This would search for a Hash String ending with 32. Happy Bruteforcing :)
EDIT: found one for your example: HXMQVNMRFT gives e5c9fa9f6acff07b89c617c7fd16a9a043040532
","686","<sha>","3","3","2","2013-11-27 19:19:30","","1","","","","","2013-11-27 09:44:45",""
"28149400","How can I set the SHA digest size in java.security.MessageDigest?","I am kinda playing with the SHA-1 algorithm. I want to find out differences and variations in the results if I change few values in the SHA-1 algorithm for a college report. I have found a piece of java code to generate hash of a text. Its done by importing 

java.security.MessageDigest

class. However, I want to change the h0-4 values and edit them but I don't know where can I find them? I had a look inside the MessageDigest class but couldn't find it there.  Please help me out!
Thanx in advance.
","I don't believe you can do that. Java doesn't provide any API for its MessageDigest Class, which can allow you change the values.
However, there are some workarounds (none of which I've ever tried). Take a look at this answer to the question ""How to edit Java Platform Package (Built-in API) source code?"" 
","675","<hash><java><sha>","0","0","3","2015-01-26 11:40:29","","0","","","","","2015-01-25 19:13:15",""
"28149400","How can I set the SHA digest size in java.security.MessageDigest?","I am kinda playing with the SHA-1 algorithm. I want to find out differences and variations in the results if I change few values in the SHA-1 algorithm for a college report. I have found a piece of java code to generate hash of a text. Its done by importing 

java.security.MessageDigest

class. However, I want to change the h0-4 values and edit them but I don't know where can I find them? I had a look inside the MessageDigest class but couldn't find it there.  Please help me out!
Thanx in advance.
","If you're playing around with tweaks to an algorithm, you shouldn't be using a built-in class implementing that algorithm. The class you mention is designed to implement standard algorithms for people who just want to use them in production; if you're using SHA-1 (or any cryptographic algorithm) instead of playing around and tweaking it, it's never a good idea to change the algorithm yourself (e.g. by changing the initial hash value), so the class does not support modifying those constants.
Just implement the algorithm yourself; from Wikipedia's pseudocode, it doesn't look like it's all that complicated. I know that ""don't implement your own crypto, use a standard and well-tested implementation"" is a common mantra here, but that only applies to production-type code -- if you're playing around with an algorithm to see what effect tweaking it has, you should implement it yourself, so you have more flexibility in modifying it and seeing the effect of the modifications.
","675","<hash><java><sha>","0","0","3","2015-01-26 11:40:29","","0","","","","","2015-01-25 19:13:15",""
"28149400","How can I set the SHA digest size in java.security.MessageDigest?","I am kinda playing with the SHA-1 algorithm. I want to find out differences and variations in the results if I change few values in the SHA-1 algorithm for a college report. I have found a piece of java code to generate hash of a text. Its done by importing 

java.security.MessageDigest

class. However, I want to change the h0-4 values and edit them but I don't know where can I find them? I had a look inside the MessageDigest class but couldn't find it there.  Please help me out!
Thanx in advance.
","Basically adding to @Rahil's answer but too much for comments:
Even without API access, if MessageDigest were the implementation you could use reflection. But it's not. 
Most of the java standard library is just commonly-useful classes in the usual way, e.g. java.util.ArrayList contains the implementation of ArrayList (or ArrayList<?> since 6), java.io.FileInputStream contains the implementation of FileInputStream (although it may use other classes in that implementation), etc. Java Cryptography uses a more complicated scheme where the implementations are not in the API classes but instead in ""providers"" that are mostly in their own jars (in JRE/lib and JRE/lib/ext) not rt.jar and mostly(?) don't have source in src.zip. 
Thus the java.security.MessageDigest class does not have the code to implement SHA1, or SHA256, or MD5, etc etc. Instead it has code to search the JVM's current list of crypto providers to find an implementation of whatever algorithm is asked for, and instantiate and use that. Normally the list of providers used is set to (the list of) those included in the JRE distribution, although an admin or program can change it.
With the normal JRE7 providers, SHA1 is implemented by sun.security.provider.SHA.
In effect the API classes like MessageDigest Signature Cipher KeyGenerator etc function more like interfaces or facades by presenting the behavior that is common to possibly multiple underlying implementations, although in Java code terms they are actual classes and not interfaces.
This was designed back in 1990 or so to cope with legal restrictions on crypto in effect then, especially on export from the US. It allowed the base Java platform to be distributed easily because by itself it did no crypto. To use it -- and even if you don't do ""real"" crypto on user data in Java you still need things like verification of signed code -- you need to add some providers; you might have one set of providers, with complete and strong algorithms, used in US installations, and a different set, with fewer and weaker algorithms, used elsewhere. This capability is now much less needed since the US officially relaxed and in practice basically dropped enforcement about 2000, although there are periodically calls to bring it back. There is still one residual bit, however: JCE (in Oracle JREs) contains a policy that does not allow symmetric keys over 128 bits; to enable that you must download from the Oracle website and install an additional (tiny) file ""JCE Unlimited Strength Policy"".
TLDR: don't try to alter the JCE implementation. As @cpast says, in this case where you want to play with something different from the standard algorithm, do write your own code.
","675","<hash><java><sha>","0","0","3","2015-01-26 11:40:29","","0","","","","","2015-01-25 19:13:15",""
"17508070","Can SHA2 or MD5 hash very large strings?","I'm assuming it can't, but after searching, I cannot find information on hashing very large strings. I understand it's 256 bits, but what if a string contains a MB of information? I know I can break it into pieces. I was wondering what's the largest string I can hash with SHA2, or perhaps with MD5, without breaking it into pieces.
","There is no problem with large strings. Such algorithms can be applied to whole files of GB of size.
","673","<hash><md5><sha>","0","0","1","2013-07-06 23:52:39","17508128","2","","","","","2013-07-06 23:43:20",""
"10363358","Simple login checking password","What am I doing wrong here:    
<?php
    if (isset($_POST['submitted'])) {

    $errors = array();
        require_once ('mysql_connect.php');

    session_start();
    $username = $_POST[""username""]; // This is the inputted username from the form in Login.html
    $password = $_POST[""password""]; // This is the inputted password from the form in Login.html


    if (empty($errors)) {
        $query=""SELECT username FROM users WHERE username='$username' AND password='SHA($password)'""; 

        $result = mysql_query($query);  

        // Mysql_num_row is counting table row

        if (mysql_num_rows($result) == 1) {
                $_SESSION[""username""] = $username; // Creates a cookie saving the username
                $_SESSION[""loggedIn""] = true; // Creates a cookie saying the user is logged in
            // Show thank you message
            echo '<h3 style=""color:green;"">Thank You!</h3>
            <span style=""color:green;"">You have been logged in.</span>';
        } else {
            echo '<font color=""red"">You could not be logged in, please make sure your username and password is correct.</font>';
            foreach ($errors as $msg) {
            echo "" - <font color=\""red\"">$msg</font><br />\n"";
            }
        }

} else {
        echo '<font color=""red""><h3>Error!</h3>
        The following error(s) occured:<br /></font>';

        foreach ($errors as $msg) {
            echo "" - <font color=\""red\"">$msg</font><br />\n"";
        }
    }
}
?>

I get a:
Warning: mysql_num_rows(): supplied argument is not a valid MySQL result resource in /login.php on line 19

Also is the way I SHA the password correct?
","Don't use '' by SHA function
$query=""SELECT username FROM users WHERE username='$username' AND password='SHA($password)'""; 

And offcourse don't remember escape your data.
","671","<php><mysql><sha>","4","1","3","2012-04-28 12:41:21","10363416","6","","199640","","2012-04-28 12:20:21","2012-04-28 12:10:03",""
"10363358","Simple login checking password","What am I doing wrong here:    
<?php
    if (isset($_POST['submitted'])) {

    $errors = array();
        require_once ('mysql_connect.php');

    session_start();
    $username = $_POST[""username""]; // This is the inputted username from the form in Login.html
    $password = $_POST[""password""]; // This is the inputted password from the form in Login.html


    if (empty($errors)) {
        $query=""SELECT username FROM users WHERE username='$username' AND password='SHA($password)'""; 

        $result = mysql_query($query);  

        // Mysql_num_row is counting table row

        if (mysql_num_rows($result) == 1) {
                $_SESSION[""username""] = $username; // Creates a cookie saving the username
                $_SESSION[""loggedIn""] = true; // Creates a cookie saying the user is logged in
            // Show thank you message
            echo '<h3 style=""color:green;"">Thank You!</h3>
            <span style=""color:green;"">You have been logged in.</span>';
        } else {
            echo '<font color=""red"">You could not be logged in, please make sure your username and password is correct.</font>';
            foreach ($errors as $msg) {
            echo "" - <font color=\""red\"">$msg</font><br />\n"";
            }
        }

} else {
        echo '<font color=""red""><h3>Error!</h3>
        The following error(s) occured:<br /></font>';

        foreach ($errors as $msg) {
            echo "" - <font color=\""red\"">$msg</font><br />\n"";
        }
    }
}
?>

I get a:
Warning: mysql_num_rows(): supplied argument is not a valid MySQL result resource in /login.php on line 19

Also is the way I SHA the password correct?
","Why did you put a @ in @mysql_query($query); ? If you have a MYSQL error you should handle it correctly and not ignore it (I assume you have an error there). It would help you understand where your bug is coming from.
Also, you can do the SHA in PHP (which depends on your architecture could be better or worse for your project).
http://php.net/manual/en/function.sha1.php
","671","<php><mysql><sha>","4","1","3","2012-04-28 12:41:21","10363416","6","","199640","","2012-04-28 12:20:21","2012-04-28 12:10:03",""
"10363358","Simple login checking password","What am I doing wrong here:    
<?php
    if (isset($_POST['submitted'])) {

    $errors = array();
        require_once ('mysql_connect.php');

    session_start();
    $username = $_POST[""username""]; // This is the inputted username from the form in Login.html
    $password = $_POST[""password""]; // This is the inputted password from the form in Login.html


    if (empty($errors)) {
        $query=""SELECT username FROM users WHERE username='$username' AND password='SHA($password)'""; 

        $result = mysql_query($query);  

        // Mysql_num_row is counting table row

        if (mysql_num_rows($result) == 1) {
                $_SESSION[""username""] = $username; // Creates a cookie saving the username
                $_SESSION[""loggedIn""] = true; // Creates a cookie saying the user is logged in
            // Show thank you message
            echo '<h3 style=""color:green;"">Thank You!</h3>
            <span style=""color:green;"">You have been logged in.</span>';
        } else {
            echo '<font color=""red"">You could not be logged in, please make sure your username and password is correct.</font>';
            foreach ($errors as $msg) {
            echo "" - <font color=\""red\"">$msg</font><br />\n"";
            }
        }

} else {
        echo '<font color=""red""><h3>Error!</h3>
        The following error(s) occured:<br /></font>';

        foreach ($errors as $msg) {
            echo "" - <font color=\""red\"">$msg</font><br />\n"";
        }
    }
}
?>

I get a:
Warning: mysql_num_rows(): supplied argument is not a valid MySQL result resource in /login.php on line 19

Also is the way I SHA the password correct?
","The problem is that your MySQL query is causing an error, which means that your $result doesn't actually contain a result resource.
You need to remove the '' from around SHA($password) in your query, and instead put them around the password value, like so:
$query=""SELECT username FROM users WHERE username='$username' AND password=SHA('$password')"";



Also is the way I SHA the password correct?

That depends on how the passwords were hashed when they were inserted into the database. MySQL's SHA() is the same as its SHA-1():

Calculates an SHA-1 160-bit checksum for the string, as described in RFC 3174

Which is also the same as PHP's sha1(); so, for example, if the passwords in the database are SHA-1 hashes that were created using PHP's sha1(), it should be fine.

Side Notes

You should use PHP's crypt() or hash() for hashing passwords, rather than SHA-1. For example usage, refer to the PHP documentation.
You should be cleaning/escaping all user-provided data before using any of it in a database query. This is to stop SQL injection attacks. Better yet, use prepared statements and parameterized queries. Refer to this answer for more information.

","671","<php><mysql><sha>","4","3","3","2012-04-28 12:41:21","10363416","6","","199640","","2012-04-28 12:20:21","2012-04-28 12:10:03",""
"23982425","C++ SHA256 is different from command line SHA256","I'm trying to compute a SHA256 hash of the string iEk21fuwZApXlz93750dmW22pw389dPwOkm198sOkJEn37DjqZ32lpRu76xmw288xSQ9
When I run my C++ code, I get a string that's not even a valid SHA256 hash. However, when I run echo -n iEk21fuwZApXlz93750dmW22pw389dPwOkm198sOkJEn37DjqZ32lpRu76xmw288xSQ9 | openssl sha256, I get the correct hash. Here's my C++ code:
#include <iostream>
#include <time.h>
#include <sstream>
#include <string>
#include <iomanip>
#include <typeinfo>
#include <openssl/sha.h>
#include <cstdio>
#include <cstring>

std::string hash256(std::string string) {
    unsigned char digest[SHA256_DIGEST_LENGTH];

    SHA256_CTX ctx;
    SHA256_Init(&ctx);
    SHA256_Update(&ctx, string.c_str(), std::strlen(string.c_str()));
    SHA256_Final(digest, &ctx);

    char mdString[SHA256_DIGEST_LENGTH*2+1];
    for (int i = 0; i < SHA256_DIGEST_LENGTH; i++)
        std::sprintf(&mdString[i*2], ""%02x"", (unsigned int)digest[i]);

    return std::string(mdString);
}

int main(int argc, char *argv[])
{
    const char *hash = hash256(""iEk21fuwZApXlz93750dmW22pw389dPwOkm198sOkJEn37DjqZ32lpRu76xmw288xSQ9"").c_str();
    std::cout << hash << std::endl;
    return 0;
}

Another thing to note: When I run my code in an online compiler, such as Coliru, I get the correct hash. I am compiling with G++ on Cygwin with OpenSSL version OpenSSL 1.0.1g 7 Apr 2014
","As pointed out by @Alan Stokes, you have Undefined Behavior due to a dangling reference to the internal structure of the string.  Change your declaration of hash in main: 
std::string hash = hash256(""..."");

","666","<c++><hash><openssl><sha><sha256>","1","1","1","2014-06-01 19:05:03","23983386","4","","","","","2014-06-01 17:17:19",""
"50150314","Wrong sha1hash realexpayments?","I'm trying to set an web application for paying and I'm using realexpayments sdk. Now i'm just testing to see if it works.
This is the error:

Fatal error: Uncaught exception 'com\realexpayments\remote
  sdk\RealexServerException'with message 'incorrect sha1hash: check your
  code and developer's documentation' in
  D:\home\site\wwwroot\Composer\vendor\realexpayments\rxp-remote-php\src\main\php\com-realexpayments-remote-sdk\RealexClient.php:206
  Stack trace: #0 D:\home\site\wwwroot\authorisation.php(35):
  com\realexpayments\remote\sdk\RealexClient-> send(Object(com\realexpayments\remote\sdk\domain\payment\PaymentRequest))
  1 {main} thrown in D:\home\site\wwwroot\Composer\vendor\realexpayments\rxp-remote-php\src\main\php\com-realexpayments-remote-sdk\RealexClient.php
  on line 206

And this is the authorisation.php:
    require_once ( 'Composer/vendor/autoload.php' );
    ini_set('display_errors', 1);
    ini_set('display_startup_errors', 1);
    error_reporting(E_ALL);

use com\realexpayments\remote\sdk\domain\Card;                                            
use com\realexpayments\remote\sdk\domain\CardType;
use com\realexpayments\remote\sdk\domain\PresenceIndicator;
use com\realexpayments\remote\sdk\domain\payment\AutoSettle;                              
use com\realexpayments\remote\sdk\domain\payment\AutoSettleFlag;
use com\realexpayments\remote\sdk\domain\payment\PaymentRequest;
use com\realexpayments\remote\sdk\domain\payment\PaymentResponse;                   
use com\realexpayments\remote\sdk\domain\payment\PaymentType;                             
use com\realexpayments\remote\sdk\RealexClient;

$card = ( new Card() )                                                            
    ->addType( CardType::VISA ) 
    ->addNumber( ""4263971921001307"" )                                         
    ->addExpiryDate( ""1220"" )
    ->addCvn( ""123"" )
    ->addCvnPresenceIndicator( PresenceIndicator::CVN_PRESENT )
    ->addCardHolderName( ""James Mason"" );                                     

$request = ( new PaymentRequest() )
    ->addMerchantId( ""Merchant ID"" )
    ->addAccount( ""internet"" )                                                  
    ->addType( PaymentType::AUTH )                                            
    ->addCard( $card )                                                                                      
    ->addAmount( 1001 )                                                         
    ->addCurrency( ""EUR"" )                                                    
    ->addAutoSettle( ( new AutoSettle() )->addFlag( AutoSettleFlag::TRUE ) ); 


$client   = new RealexClient( ""Shared Secret"" );                                     
$response = $client->send( $request );

// do something with the response
echo $response->toXML();

$resultCode = $response->getResult();
$message = $response->getMessage();

All the example are replaced by real values.
Thanks!
","In most cases a sha1hash error indicates the Shared Secret you have signed the request with is incorrect.
A member of the Global Payments support team will be able to assist you with confirming the Shared Secret.
Best,
Seán
Global Payments
","665","<php><hash><sha><realex-payments-api>","0","0","1","2019-10-04 13:18:35","","0","","11112788","","2019-10-04 13:18:35","2018-05-03 08:25:00",""
"36695661","Flatten deep nested hash to array for sha1 hashing","I want to compute an unique sha1 hash from a ruby hash. I thought about

(Deep) Converting the Hash into an array
Sorting the array
Join array by empty string
calculate sha1

Consider the following hash:
hash = {
  foo: ""test"",
  bar: [1,2,3]
  hello: {
    world: ""world"",
    arrays: [
      {foo: ""bar""}
    ]
  }
}

How can I get this kind of nested hash into an array like
[:foo, ""test"", :bar, 1, 2, 3, :hello, :world, ""earth"", :arrays, :my, ""example""]

I would then sort the array, join it with array.join("""") and compute the sha1 hash like this:
require 'digest/sha1'
Digest::SHA1.hexdigest hash_string


How could I flatten the hash like I described above?
Is there already a gem for this?
Is there a quicker / easier way to solve this? I have a large amount of objects to convert (~700k), so performance does matter.

EDIT
Another problem that I figured out by the answers below are this two hashes:
a = {a: ""a"", b: ""b""}
b = {a: ""b"", b: ""a""}

When flattening the hash and sorting it, this two hashes produce the same output, even when a == b => false.
EDIT 2
The use case for this whole thing is product data comparison. The product data is stored inside a hash, then serialized and sent to a service that creates / updates the product data.
I want to check if anything has changed inside the product data, so I generate a hash from the product content and store it in a database. The next time the same product is loaded, I calculate the hash again, compare it to the one in the DB and decide wether the product needs an update or not.
","EDIT : As you detailed, two hashes with keys in different order should give the same string. I would reopen the Hash class to add my new custom flatten method :
class Hash
  def custom_flatten()
    self.sort.map{|pair| [""key: #{pair[0]}"", pair[1]]}.flatten.map{ |elem| elem.is_a?(Hash) ? elem.custom_flatten : elem }.flatten
  end
end

Explanation :

sort converts the hash to a sorted array of pairs (for the comparison of hashes with different keys order)
.map{|pair| [""key: #{pair[0]}"", pair[1]]} is a trick to differentiate keys from values in the final flatten array, to avoid the problem of {a: {b: {c: :d}}}.custom_flatten == {a: :b, c: :d}.custom_flatten
flatten converts an array of arrays into a single array of values
map{ |elem| elem.is_a?(Hash) ? elem.custom_flatten : elem } calls back fully_flatten on any sub-hash left.

Then you just need to use :
require 'digest/sha1'
Digest::SHA1.hexdigest hash.custom_flatten.to_s

","662","<ruby><hash><sha1><sha>","0","2","5","2016-05-22 23:31:56","36697336","3","","228370","","2016-04-18 15:30:06","2016-04-18 13:38:59",""
"36695661","Flatten deep nested hash to array for sha1 hashing","I want to compute an unique sha1 hash from a ruby hash. I thought about

(Deep) Converting the Hash into an array
Sorting the array
Join array by empty string
calculate sha1

Consider the following hash:
hash = {
  foo: ""test"",
  bar: [1,2,3]
  hello: {
    world: ""world"",
    arrays: [
      {foo: ""bar""}
    ]
  }
}

How can I get this kind of nested hash into an array like
[:foo, ""test"", :bar, 1, 2, 3, :hello, :world, ""earth"", :arrays, :my, ""example""]

I would then sort the array, join it with array.join("""") and compute the sha1 hash like this:
require 'digest/sha1'
Digest::SHA1.hexdigest hash_string


How could I flatten the hash like I described above?
Is there already a gem for this?
Is there a quicker / easier way to solve this? I have a large amount of objects to convert (~700k), so performance does matter.

EDIT
Another problem that I figured out by the answers below are this two hashes:
a = {a: ""a"", b: ""b""}
b = {a: ""b"", b: ""a""}

When flattening the hash and sorting it, this two hashes produce the same output, even when a == b => false.
EDIT 2
The use case for this whole thing is product data comparison. The product data is stored inside a hash, then serialized and sent to a service that creates / updates the product data.
I want to check if anything has changed inside the product data, so I generate a hash from the product content and store it in a database. The next time the same product is loaded, I calculate the hash again, compare it to the one in the DB and decide wether the product needs an update or not.
","I am not aware of a gem that does something like what you are looking for. There is a Hash#flatten method in ruby, but it does not flatten nested hashes recursively. Here is a straight forward recursive function that will flatten in the way that you requested in your question:
def completely_flatten(hsh)
  hsh.flatten(-1).map{|el| el.is_a?(Hash) ? completely_flatten(el) : el}.flatten
end

This will yield
hash = {
  foo: ""test"",
  bar: [1,2,3]
  hello: {
    world: ""earth"",
    arrays: [
      {my: ""example""}
    ]
  }
}

completely_flatten(hash) 
#=> [:foo, ""test"", :bar, 1, 2, 3, :hello, :world, ""earth"", :arrays, :my, ""example""]

To get the string representation you are looking for (before making the sha1 hash) convert everything in the array to a string before sorting so that all of the elements can be meaningfully compared or else you will get an error:
hash_string = completely_flatten(hash).map(&:to_s).sort.join
#=> ""123arraysbarearthexamplefoohellomytestworld""

","662","<ruby><hash><sha1><sha>","0","1","5","2016-05-22 23:31:56","36697336","3","","228370","","2016-04-18 15:30:06","2016-04-18 13:38:59",""
"36695661","Flatten deep nested hash to array for sha1 hashing","I want to compute an unique sha1 hash from a ruby hash. I thought about

(Deep) Converting the Hash into an array
Sorting the array
Join array by empty string
calculate sha1

Consider the following hash:
hash = {
  foo: ""test"",
  bar: [1,2,3]
  hello: {
    world: ""world"",
    arrays: [
      {foo: ""bar""}
    ]
  }
}

How can I get this kind of nested hash into an array like
[:foo, ""test"", :bar, 1, 2, 3, :hello, :world, ""earth"", :arrays, :my, ""example""]

I would then sort the array, join it with array.join("""") and compute the sha1 hash like this:
require 'digest/sha1'
Digest::SHA1.hexdigest hash_string


How could I flatten the hash like I described above?
Is there already a gem for this?
Is there a quicker / easier way to solve this? I have a large amount of objects to convert (~700k), so performance does matter.

EDIT
Another problem that I figured out by the answers below are this two hashes:
a = {a: ""a"", b: ""b""}
b = {a: ""b"", b: ""a""}

When flattening the hash and sorting it, this two hashes produce the same output, even when a == b => false.
EDIT 2
The use case for this whole thing is product data comparison. The product data is stored inside a hash, then serialized and sent to a service that creates / updates the product data.
I want to check if anything has changed inside the product data, so I generate a hash from the product content and store it in a database. The next time the same product is loaded, I calculate the hash again, compare it to the one in the DB and decide wether the product needs an update or not.
","Use Marshal for Fast Serialization
You haven't articulated a useful reason to change your data structure before hashing. Therefore, you should consider marshaling for speed unless your data structures contain unsupported objects like bindings or procs. For example, using your hash variable with the syntax corrected:
require 'digest/sha1'

hash = {
  foo: ""test"",
  bar: [1,2,3],
  hello: {
    world: ""world"",
    arrays: [
      {foo: ""bar""}
    ]
  }
}
Digest::SHA1.hexdigest Marshal.dump(hash)
#=> ""f50bc3ceb514ae074a5ab9672ae5081251ae00ca""

Marshal is generally faster than other serialization options. If all you need is speed, that will be your best bet. However, you may find that JSON, YAML, or a simple #to_s or #inspect meet your needs better for other reasons. As long as you are comparing similar representations of your object, the internal format of the hashed object is largely irrelevant to ensuring you have a unique or unmodified object.
","662","<ruby><hash><sha1><sha>","0","0","5","2016-05-22 23:31:56","36697336","3","","228370","","2016-04-18 15:30:06","2016-04-18 13:38:59",""
"36695661","Flatten deep nested hash to array for sha1 hashing","I want to compute an unique sha1 hash from a ruby hash. I thought about

(Deep) Converting the Hash into an array
Sorting the array
Join array by empty string
calculate sha1

Consider the following hash:
hash = {
  foo: ""test"",
  bar: [1,2,3]
  hello: {
    world: ""world"",
    arrays: [
      {foo: ""bar""}
    ]
  }
}

How can I get this kind of nested hash into an array like
[:foo, ""test"", :bar, 1, 2, 3, :hello, :world, ""earth"", :arrays, :my, ""example""]

I would then sort the array, join it with array.join("""") and compute the sha1 hash like this:
require 'digest/sha1'
Digest::SHA1.hexdigest hash_string


How could I flatten the hash like I described above?
Is there already a gem for this?
Is there a quicker / easier way to solve this? I have a large amount of objects to convert (~700k), so performance does matter.

EDIT
Another problem that I figured out by the answers below are this two hashes:
a = {a: ""a"", b: ""b""}
b = {a: ""b"", b: ""a""}

When flattening the hash and sorting it, this two hashes produce the same output, even when a == b => false.
EDIT 2
The use case for this whole thing is product data comparison. The product data is stored inside a hash, then serialized and sent to a service that creates / updates the product data.
I want to check if anything has changed inside the product data, so I generate a hash from the product content and store it in a database. The next time the same product is loaded, I calculate the hash again, compare it to the one in the DB and decide wether the product needs an update or not.
","Any solution based on flattening the hash will fail for nested hashes. A robust solution is to explicitly sort the keys of each hash recursively (from ruby 1.9.x onwards, hash keys order is preserved), and then serialize it as a string and digest it.
  def canonize_hash(h)
    r = h.map { |k, v| [k, v.is_a?(Hash) ? canonize_hash(v) : v] }
    Hash[r.sort]
  end

  def digest_hash(hash)
    Digest::SHA1.hexdigest canonize_hash(hash).to_s
  end

  digest_hash({ foo: ""foo"", bar: ""bar"" })
  # => ""ea1154f35b34c518fda993e8bb0fe4dbb54ae74a""
  digest_hash({ bar: ""bar"", foo: ""foo"" })
  # => ""ea1154f35b34c518fda993e8bb0fe4dbb54ae74a""

","662","<ruby><hash><sha1><sha>","0","0","5","2016-05-22 23:31:56","36697336","3","","228370","","2016-04-18 15:30:06","2016-04-18 13:38:59",""
"36695661","Flatten deep nested hash to array for sha1 hashing","I want to compute an unique sha1 hash from a ruby hash. I thought about

(Deep) Converting the Hash into an array
Sorting the array
Join array by empty string
calculate sha1

Consider the following hash:
hash = {
  foo: ""test"",
  bar: [1,2,3]
  hello: {
    world: ""world"",
    arrays: [
      {foo: ""bar""}
    ]
  }
}

How can I get this kind of nested hash into an array like
[:foo, ""test"", :bar, 1, 2, 3, :hello, :world, ""earth"", :arrays, :my, ""example""]

I would then sort the array, join it with array.join("""") and compute the sha1 hash like this:
require 'digest/sha1'
Digest::SHA1.hexdigest hash_string


How could I flatten the hash like I described above?
Is there already a gem for this?
Is there a quicker / easier way to solve this? I have a large amount of objects to convert (~700k), so performance does matter.

EDIT
Another problem that I figured out by the answers below are this two hashes:
a = {a: ""a"", b: ""b""}
b = {a: ""b"", b: ""a""}

When flattening the hash and sorting it, this two hashes produce the same output, even when a == b => false.
EDIT 2
The use case for this whole thing is product data comparison. The product data is stored inside a hash, then serialized and sent to a service that creates / updates the product data.
I want to check if anything has changed inside the product data, so I generate a hash from the product content and store it in a database. The next time the same product is loaded, I calculate the hash again, compare it to the one in the DB and decide wether the product needs an update or not.
","The question is how to ""flatten"" a hash. There is a second, implicit, question concerning sha1, but, by SO rules, that needs to be addressed in a separate question. You can ""flatten"" any hash or array as follows.
Code
def crush(obj)
  recurse(obj).flatten
end

def recurse(obj)
  case obj
  when Array then obj.map { |e| recurse e }
  when Hash  then obj.map { |k,v| [k, recurse(v)] }
  else obj
  end
end

Example
crush({
  foo: ""test"",
  bar: [1,2,3],
  hello: {
    world: ""earth"",
    arrays: [{my: ""example""}]
  }
})
  #=> [:foo, ""test"", :bar, 1, 2, 3, :hello, :world, ""earth"", :arrays, :my, ""example""]

crush([[{ a:1, b:2 }, ""cat"", [3,4]], ""dog"", { c: [5,6] }])
  #=> [:a, 1, :b, 2, ""cat"", 3, 4, ""dog"", :c, 5, 6]

","662","<ruby><hash><sha1><sha>","0","1","5","2016-05-22 23:31:56","36697336","3","","228370","","2016-04-18 15:30:06","2016-04-18 13:38:59",""
"48042391","problems generating sha with keytool for ionic app","Im trying to generate sha to use facebook plugin and I tried to creat with severals tutorial but I cant do it, letme put the error:
C:\Program Files\Java\jdk-9.0.1\bin>keytool -list -v -keystore C:\Users\Gaston\.android\debug.keystore -alias androiddebugkey -storepass android -keypass android
Nombre de Alias: androiddebugkey
Fecha de Creación: 23 feb. 2016
Tipo de Entrada: PrivateKeyEntry
Longitud de la Cadena de Certificado: 1
Certificado[1]:
error de herramienta de claves: java.util.IllegalFormatConversionException: d != java.lang.String
java.util.IllegalFormatConversionException: d != java.lang.String
        at java.base/java.util.Formatter$FormatSpecifier.failConversion(Formatter.java:4331)
        at java.base/java.util.Formatter$FormatSpecifier.printInteger(Formatter.java:2846)
        at java.base/java.util.Formatter$FormatSpecifier.print(Formatter.java:2800)
        at java.base/java.util.Formatter.format(Formatter.java:2581)
        at java.base/java.util.Formatter.format(Formatter.java:2517)
        at java.base/java.lang.String.format(String.java:2747)
        at java.base/sun.security.tools.keytool.Main.withWeak(Main.java:3151)
        at java.base/sun.security.tools.keytool.Main.printX509Cert(Main.java:3182)
        at java.base/sun.security.tools.keytool.Main.doPrintEntry(Main.java:1995)
        at java.base/sun.security.tools.keytool.Main.doCommands(Main.java:1212)
        at java.base/sun.security.tools.keytool.Main.run(Main.java:397)
        at java.base/sun.security.tools.keytool.Main.main(Main.java:390)

","There is a problem wit java 8 and key tool so you need to force the language and it works:
keytool -J-Duser.language=en -exportcert -alias androiddebugkey -keystore C:\Users\Gaston/.android/debug.keystore -list -v -storepass android

","661","<android><facebook><ionic-framework><sha>","1","3","1","2018-01-05 23:29:55","","0","","","","","2017-12-31 12:22:23",""
"34396535","Crypt/Decrypt + SHA in UTF8 Postgres","I've a trouble with data crypted in postgres. I've a column with UTF data crypted :
convert_from(decrypt(name::bytea, 'salt', 'bf'), 'UTF-8') => ""mamanÃ©""

So, this is true, with ""é"" in UTF8. Now, if I hash this value :
encode(public.digest('mamanÃ©', 'sha1'), 'hex') => ""2bfb316cf461d1a884e0b24c4d90de0bfe25f04f""

So, I have to obtain the same hash with this :
encode(public.digest(convert_from(decrypt(name::bytea, 'salt', 'bf'), 'UTF-8'), 'sha1'), 'hex') => ""e16053f9fba5b1ef75b76eab82370c3264ee6263""

Why is it different?
I don't understand...
Thank you very much for all answers.
G.
","","659","<postgresql><sha><crypt>","0","","0","2015-12-21 13:12:49","","3","","","","","2015-12-21 13:12:49",""
"47017606","Is hashing really a irreversible process?","I've been using hash and RSA for a time(on a very superficial level, for ex: RSA authentication on a SSH connection), and I want to learn more about it.
To begin with, I know that encryption is a two-way process that can be reverted. And hashing is a one-way process that is irreversible.
That last point just doesn't make sense to me, if I use an algorithm to hash ""hello"", wouldn't the same algorithm, but ""reversed""(meaning, it works ""backwards""), be able to convert that hash to ""hello"" again.
EDIT:
Thanks to @GeorgDangl, @klutt, and Pete Kirkham for pointing out that I didn't understand at all the concept of ""irreversible math"". The examples were really helpful.
","It is irreversible in the sense that for each input you have exactly one output, but not the other way around. There are multiple inputs that yields the same output. 
For any given input, there's a lot (infinite in fact) different inputs that would yield the same hash. This is easy to realize since the output has a fixed size, but the input doesn't have size restrictions. 
To achieve this, irreversible math is used. For instance, it is easy to calculate 10%3. The answer to that is simply 10%3=1. But if I give you the equation x%3=1, what would you do? This equation is true for all x=3*k+1. Thus, you cannot get the number I started with. 
Another example of irreversible math is sine and cosine. For instance, cos(0)=1, but there are more input values that evaluates to 1. Actually, cos(n*2pi)=1. There are ""inverses"" to these functions, but they either gives an answer in a certain range or a multivalued answer. A third example is x²=1. This is true for both x=1 and x=-1. However, in this example you get a finite (and also rather small) number of possible answers.
When dealing with encryption, one could say that the private key is used to pick the right solution. You can always quite trivially decrypt an encrypted message, but you will get a huge load of possible answers. The key is used to find the right one, rather than actually decrypting. 
","655","<security><encryption><hash><aes><sha>","1","4","2","2019-03-12 03:02:44","47017666","6","0","6699433","","2017-11-16 16:07:51","2017-10-30 14:22:49",""
"47017606","Is hashing really a irreversible process?","I've been using hash and RSA for a time(on a very superficial level, for ex: RSA authentication on a SSH connection), and I want to learn more about it.
To begin with, I know that encryption is a two-way process that can be reverted. And hashing is a one-way process that is irreversible.
That last point just doesn't make sense to me, if I use an algorithm to hash ""hello"", wouldn't the same algorithm, but ""reversed""(meaning, it works ""backwards""), be able to convert that hash to ""hello"" again.
EDIT:
Thanks to @GeorgDangl, @klutt, and Pete Kirkham for pointing out that I didn't understand at all the concept of ""irreversible math"". The examples were really helpful.
","Trivial example - say that for our irreversible function, we take the number we are input and return the value modulo 7. 
   hash( 0) => 0
   hash( 1) => 1
   hash( 2) => 2
   hash( 3) => 3
   hash( 4) => 4
   hash( 5) => 5
   hash( 6) => 6
   hash( 7) => 0
   hash( 8) => 1
   hash( 9) => 2
   hash(10) => 3
   hash(12) => 4
   hash(13) => 5
   hash(14) => 6

so if the hash value is 6, you don't know if the input was 6, or 14, or any value of 6 + 7 * N where N is an integer.
","655","<security><encryption><hash><aes><sha>","1","3","2","2019-03-12 03:02:44","47017666","6","0","6699433","","2017-11-16 16:07:51","2017-10-30 14:22:49",""
"46279299","Maven and SHA-256","Is there a moderately painless way of generating SHA-256 of maven generated artifacts?
I have tried this plugin but I cannot make it work. The project builds but there is not SHA-256 deployed neither in my local repository nor our nexus server.
Without SHA-256 I will not be able to automate the artifact deployment with Chef in our nodes. Is there also a painless way of avoiding remote_file re-download in chef using SHA1 or MD5?
","The SHA256 isn't probably what you want anyway, remote_file uses the MD5 for an ETag and sends the last modified time so if Maven implements either of those conditional request type, you should be fine automatically.
","653","<chef><maven-3><sha>","0","1","1","2017-09-19 00:35:04","46290051","0","","","","","2017-09-18 12:28:18",""
"39117706","Swift decrypt SHA512 hash","I create an SHA512 Hash with following code:
func createSHA512(source:String) -> String {
    let rawstr:NSString = NSString(format: ""%@%@"", source, ""xxxxxxxxxxxxxx"");
    let data = rawstr.dataUsingEncoding(NSUTF8StringEncoding)!;
    var digest = [UInt8](count:Int(CC_SHA512_DIGEST_LENGTH), repeatedValue: 0);
    CC_SHA512(data.bytes, CC_LONG(data.length), &digest);
    let output = NSMutableString(capacity: Int(CC_SHA512_DIGEST_LENGTH));
    for byte in digest {
        output.appendFormat(""%02x"", byte);
    }
    return output as String;
}

Is it possible to decrypt this Hash with Swift 2 to the original String?
","SHA is a hash, not an encryption. A hash does not include all of the information in the original and it's a one-way function. It's a signature of the original data, not a version of it.
So no, it can not be undone to retrieve the original.
The only option to 'reverse' would be to create guesses of the original and try to hash them and see if the result matches. Note that hashes aren't unique, so even if you got a match you couldn't 100% guarantee that it matched the original, only that it hashes to the same value.
","648","<ios><objective-c><swift><sha>","-4","2","1","2016-08-24 08:10:27","39117832","3","","1988185","","2016-08-24 08:08:18","2016-08-24 08:04:40","2016-08-24 08:16:40"
"10632520","hashlib.sha256 returned some weird characters in python","In javascript the code below returned 
eec097af19ad461ac825ccce57a012543da33c986e4607475e1fe5c6dc098d0a 
<script src=""http://crypto-js.googlecode.com/svn/tags/3.0.1/build/rollups/hmac-sha512.js""></script>
<script>
   var hash = CryptoJS.HmacSHA256(""Message"", ""Secret"");
</script>

In python same logic returned some weird characters like �����F�%��W�T=�<�nFG^���   �
import hmac
import hashlib
import base64
hash = hmac.new('Secret', ""Message"", hashlib.sha256).digest()

I think they should return same hash as i have used same algorithm for both. Any suggestions ? Thanks
","try hexdigest()
import hmac
import hashlib
import base64
hash = hmac.new('Secret', ""Message"", hashlib.sha256).hexdigest()

","644","<python><encryption><sha><hmac>","0","3","1","2012-05-17 08:58:35","10632598","0","","","","","2012-05-17 08:53:19",""
"45999464","Sha256,Sha384,Sha512 is not working in WIndows XP?","this below code is worked fine in windows 8.1 and 10 and tested in
windows xp sp3 it's not working and return null value and also
same problem in sha1, sha384 but MD5 is working fine and get return output
but others could not,
 does windows xp sp3 support sha checksum functions
or need any special codes (sorry for poor english)
    Public Function GetSha512Hash()
    Dim _flexe$ = """"
    Dim _result$ = """"
    Try
        _flexe$ = IO.Path.Combine(Application.ExecutablePath)
        Using _sha512 As New System.Security.Cryptography.SHA512CryptoServiceProvider
            Using stream = File.OpenRead(_flexe$)
                Dim _hash = _sha512.ComputeHash(stream)
                _result$ = BitConverter.ToString(_hash).Replace(""-"", String.Empty)
                Trace.WriteLine(String.Format(""{0}"", _result$))
                Return _result$
            End Using
        End Using
    Catch ex As Exception
        Trace.WriteLine(Err.Description)
        Me.PEx = ex
        Return _result$
    End Try
End Function

'SHa384
Public Function GetSha384Hash()
    Dim _flexe$ = """"
    Dim _result$ = """"
    Try
        _flexe$ = IO.Path.Combine(Application.ExecutablePath)
        Using _sha512 As New System.Security.Cryptography.SHA384CryptoServiceProvider
            Using stream = File.OpenRead(_flexe$)
                Dim _hash = _sha512.ComputeHash(stream)
                _result$ = BitConverter.ToString(_hash).Replace(""-"", String.Empty)
                Trace.WriteLine(String.Format(""{0}"", _result$))
                Return _result$
            End Using
        End Using
    Catch ex As Exception
        Trace.WriteLine(Err.Description)
        Me.PEx = ex
        Return _result$
    End Try
End Function

","After reading some documentation, it seems that windows XP SP3 cannot obtain certificates if it is encrypted using a sha256/384/512 encryption. (Link)
Please be aware that Windows XP is not longer supported by Microsoft, which means that developping for the platform might be dangerous.
If you -do- want to continue with the development. You can try to the hotfix found on this page, which involves installing an official Microsoft dll, released in 2009. 
","643","<vb.net><sha>","1","1","2","2017-09-01 13:27:06","45999563","3","1","2982655","","2017-09-01 11:43:09","2017-09-01 11:37:53",""
"45999464","Sha256,Sha384,Sha512 is not working in WIndows XP?","this below code is worked fine in windows 8.1 and 10 and tested in
windows xp sp3 it's not working and return null value and also
same problem in sha1, sha384 but MD5 is working fine and get return output
but others could not,
 does windows xp sp3 support sha checksum functions
or need any special codes (sorry for poor english)
    Public Function GetSha512Hash()
    Dim _flexe$ = """"
    Dim _result$ = """"
    Try
        _flexe$ = IO.Path.Combine(Application.ExecutablePath)
        Using _sha512 As New System.Security.Cryptography.SHA512CryptoServiceProvider
            Using stream = File.OpenRead(_flexe$)
                Dim _hash = _sha512.ComputeHash(stream)
                _result$ = BitConverter.ToString(_hash).Replace(""-"", String.Empty)
                Trace.WriteLine(String.Format(""{0}"", _result$))
                Return _result$
            End Using
        End Using
    Catch ex As Exception
        Trace.WriteLine(Err.Description)
        Me.PEx = ex
        Return _result$
    End Try
End Function

'SHa384
Public Function GetSha384Hash()
    Dim _flexe$ = """"
    Dim _result$ = """"
    Try
        _flexe$ = IO.Path.Combine(Application.ExecutablePath)
        Using _sha512 As New System.Security.Cryptography.SHA384CryptoServiceProvider
            Using stream = File.OpenRead(_flexe$)
                Dim _hash = _sha512.ComputeHash(stream)
                _result$ = BitConverter.ToString(_hash).Replace(""-"", String.Empty)
                Trace.WriteLine(String.Format(""{0}"", _result$))
                Return _result$
            End Using
        End Using
    Catch ex As Exception
        Trace.WriteLine(Err.Description)
        Me.PEx = ex
        Return _result$
    End Try
End Function

","finally i got some information about Difference between SHA1, SHA1CryptoServiceProvider, SHA1Managed and SHA1Cng classes in .NET...

SHA1: this is abstract class. All other implementation of SHA1
(SHA1CryptoServiceProvider, SHA1Managed and SHA1Cng) implements this
abstract class. To create concreate SHA1 class, use SHA1.Create().
By default SHA1.Create() returns SHA1CryptoServiceProvider, which is
configurable. To configure default SHA1 implementation:
http://msdn.microsoft.com/en-us/library/693aff9y.aspx
SHA1CryptoServiceProvider: this is wrapper for unmanaged
CryptoAPI(CAPI). This is Federal Information Processing Standard
(FIPS) certified.
SHA1Managed: this is complete implementation of SHA1 using managed
code. This is fully managed but not FIPS certified and may be
slower.
SHA1Cng: this is wrapper for unmanaged Cryptography Next Generation
(CNG). These are newer implementation of cryptographic algorithms by
Microsoft with Windows 2008/Windows Vista or newer. This is also
FIPS certified.

","643","<vb.net><sha>","1","0","2","2017-09-01 13:27:06","45999563","3","1","2982655","","2017-09-01 11:43:09","2017-09-01 11:37:53",""
"30615187","multiple send from server to client python","First I am sending the requested file from the server to the client and after that I want to send the computed sha of the file from the server to the client, so that the client can check if both the sha from the sent and the received files are the same.
I manage to send the file but when I try to also send the sha (which is a variable) I receive a error ( i believe that the sha is also added to the file content)
How can i send them separately?
if (reqCommand == 'get'):
    with open (reqFile, 'rb') as in_file, open(encFile, ""wb"") as out_file:
        encrypt(in_file, out_file, ""abc"")
        f = open(encFile,'rb')
        for data in f:
            # print 'here3'
            conn.sendall(data)
        f.close()

        file_sh = hashfile(reqFile)
        print 'the sha1 function from the server: ', file_sh
        conn.send(file_sh)

and the client:
while True:
    data = sock.recv(1024)

    if not data:
        break
    #print data
    file_to_write.write(data)

","You should redesign a bit how your app works:

First the servers sends to the client the file size.
The client reads the file size (converts it to a number) and notifies the server (sends ""OK"" to the server for example).
The server reads the ""OK"" from the client and starts to send the file contents (preferably in smaller chunks).
The client keeps reading data until either it reads exactly file size bytes or error occurs.
If no error occurred the client computes the hash of the file that it just received and sends it to the server.
The server reads the hash from client and compares with the one of its local file; if they match it sends ""OK"" to the client ""ERROR"" otherwise.
The client reads the response from server: if ""ERROR"" is received the file is deleted.

","642","<python><file><client><server><sha>","0","1","2","2017-11-28 05:17:06","30615690","0","","","","","2015-06-03 08:51:17",""
"30615187","multiple send from server to client python","First I am sending the requested file from the server to the client and after that I want to send the computed sha of the file from the server to the client, so that the client can check if both the sha from the sent and the received files are the same.
I manage to send the file but when I try to also send the sha (which is a variable) I receive a error ( i believe that the sha is also added to the file content)
How can i send them separately?
if (reqCommand == 'get'):
    with open (reqFile, 'rb') as in_file, open(encFile, ""wb"") as out_file:
        encrypt(in_file, out_file, ""abc"")
        f = open(encFile,'rb')
        for data in f:
            # print 'here3'
            conn.sendall(data)
        f.close()

        file_sh = hashfile(reqFile)
        print 'the sha1 function from the server: ', file_sh
        conn.send(file_sh)

and the client:
while True:
    data = sock.recv(1024)

    if not data:
        break
    #print data
    file_to_write.write(data)

","A TCP stream needs to be formatted in both ends, since it is a stream not packets. I suppose you could look for a nullbyte ('\x00') which should signal end of file.
","642","<python><file><client><server><sha>","0","0","2","2017-11-28 05:17:06","30615690","0","","","","","2015-06-03 08:51:17",""
"7545431","Changing the hashing function on a pre-existing database","I'm doing a bit of reading on hashing for passwords.  I've seen that SHA-256 > MD5.
This got me thinking about how an app may deal with changing from one hashing function to another.  What happens if someone implements an app that hashes their passwords using MD5.  They then decide that SHA-256 is the way to go.  But of course the password hashes stored in the database are in MD5. 
What is the process for migrating the data in the database from one hashing function to another?
","It is not possible to ""unhash"" passwords (at least not in a general, efficient and reliable way -- you can guess some passwords, that's what attackers do, and you want to migrate from MD5 precisely because attackers may have some success at it). So the migration will be spread over time: some passwords will be hashed with MD5, other with SHA-256. When a password is to be verified:

If the SHA-256 of that password is known, SHA-256 is used. This password is already migrated.
Otherwise, MD5 is used to check the password. If it matches, then the password is good, and, since the password is known by the app at that time, the app also hashes the password with SHA-256 and replaces the MD5 hash with the SHA-256 hash in the database.

Thus, passwords are migrated dynamically; to get totally rid of MD5, you have to wait a long time and/or destroy accounts which have not been accessed for a long time. You need to be able to distinguish a MD5 hash from a SHA-256 hash, which is easy since they have distinct sizes (16 bytes for MD5, 32 bytes for SHA-256). YOu could also add a flag or any other similar gimmick.
Please note that hashing passwords with a raw single application of a hash function is a pretty lousy way of doing it, security-wise, and replacing MD5 with SHA-256 will not really improve things. You hash passwords so that an attacker who gains read access to the database will not learn the passwords themselves. To really prevent the attacker from guessing the passwords, you also need ""salts"" (per-password random data, stored alongside the hashed password) and a suitably slow hash function (i.e. thousands, possibly millions, of nested hash function invocations). See this answer for details. The short answer: since you are envisioning migration, do the smart thing and migrate to bcrypt, not SHA-256 (see that answer on security.stackexchange).
","639","<security><hash><passwords><md5><sha>","5","5","1","2011-09-25 14:15:32","7546062","1","1","","","","2011-09-25 12:17:58",""
"36532431","What is wrong with this sha 256 function?","I'm starting to use crypto++ lib and maybe I have some misconceptions. 
I don't realize why the following code produces a bad sha 256
# include <string>
# include <iostream>
# include ""cryptopp/cryptlib.h""
# include <cryptopp/sha.h>
# include <cryptopp/hex.h>

using namespace std;

string sha256_hex(const string & str)
{
  byte digest[CryptoPP::SHA256::DIGESTSIZE];
  CryptoPP::SHA256().CalculateDigest(digest, (byte*) &str[0], str.size());

  string ret;
  CryptoPP::HexEncoder encoder;
  encoder.Attach(new CryptoPP::StringSink(ret));
  encoder.Put(digest, sizeof(digest));
  encoder.MessageEnd();

  return ret;
}

int main(int argc, char *argv[])
{
  auto sha256 = sha256_hex(argv[1]);
  cout << ""str     = "" << argv[1] << endl
       << ""sha 256 = "" << sha256_hex(sha256) << endl;

  return 0;
}

The following command
./test-sha256 hello

produces the following output
str     = hello
sha 256 = DD9F20FF4F1DD817C567DE6C16915DC0A731A4DF51088F55CEF4CD2F89CF9620

However according to this online calculator enter link description here, the correct sha 256 for ""hello"" would be 2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824.
So my question is what am I doing wrong? 
I have an additional question: how and when the memory used by the StringSink object should be freed?
Thanks in advance
","Most probably, I see the problem is here:
CryptoPP::SHA256().CalculateDigest(digest, (byte*) &str[0], str.size());

You better pass str.c_str(). Use debugger to see what exactly is being passed - does it translate to hello ?
","639","<c++><sha><crypto++>","1","1","3","2016-04-11 06:16:31","36532611","1","","","","","2016-04-10 16:33:40",""
"36532431","What is wrong with this sha 256 function?","I'm starting to use crypto++ lib and maybe I have some misconceptions. 
I don't realize why the following code produces a bad sha 256
# include <string>
# include <iostream>
# include ""cryptopp/cryptlib.h""
# include <cryptopp/sha.h>
# include <cryptopp/hex.h>

using namespace std;

string sha256_hex(const string & str)
{
  byte digest[CryptoPP::SHA256::DIGESTSIZE];
  CryptoPP::SHA256().CalculateDigest(digest, (byte*) &str[0], str.size());

  string ret;
  CryptoPP::HexEncoder encoder;
  encoder.Attach(new CryptoPP::StringSink(ret));
  encoder.Put(digest, sizeof(digest));
  encoder.MessageEnd();

  return ret;
}

int main(int argc, char *argv[])
{
  auto sha256 = sha256_hex(argv[1]);
  cout << ""str     = "" << argv[1] << endl
       << ""sha 256 = "" << sha256_hex(sha256) << endl;

  return 0;
}

The following command
./test-sha256 hello

produces the following output
str     = hello
sha 256 = DD9F20FF4F1DD817C567DE6C16915DC0A731A4DF51088F55CEF4CD2F89CF9620

However according to this online calculator enter link description here, the correct sha 256 for ""hello"" would be 2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824.
So my question is what am I doing wrong? 
I have an additional question: how and when the memory used by the StringSink object should be freed?
Thanks in advance
","Aren't you computing the hash of the hash here? You call sha256_hex twice, once with argv[1] as argument, and once with sha256 itself as argument.
","639","<c++><sha><crypto++>","1","5","3","2016-04-11 06:16:31","36532611","1","","","","","2016-04-10 16:33:40",""
"36532431","What is wrong with this sha 256 function?","I'm starting to use crypto++ lib and maybe I have some misconceptions. 
I don't realize why the following code produces a bad sha 256
# include <string>
# include <iostream>
# include ""cryptopp/cryptlib.h""
# include <cryptopp/sha.h>
# include <cryptopp/hex.h>

using namespace std;

string sha256_hex(const string & str)
{
  byte digest[CryptoPP::SHA256::DIGESTSIZE];
  CryptoPP::SHA256().CalculateDigest(digest, (byte*) &str[0], str.size());

  string ret;
  CryptoPP::HexEncoder encoder;
  encoder.Attach(new CryptoPP::StringSink(ret));
  encoder.Put(digest, sizeof(digest));
  encoder.MessageEnd();

  return ret;
}

int main(int argc, char *argv[])
{
  auto sha256 = sha256_hex(argv[1]);
  cout << ""str     = "" << argv[1] << endl
       << ""sha 256 = "" << sha256_hex(sha256) << endl;

  return 0;
}

The following command
./test-sha256 hello

produces the following output
str     = hello
sha 256 = DD9F20FF4F1DD817C567DE6C16915DC0A731A4DF51088F55CEF4CD2F89CF9620

However according to this online calculator enter link description here, the correct sha 256 for ""hello"" would be 2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824.
So my question is what am I doing wrong? 
I have an additional question: how and when the memory used by the StringSink object should be freed?
Thanks in advance
","As for the second part of the question:
In the Crypto++ Pipelining system, filters and sinks are owned by the object they are attached to. They are automatically deleted by the destructor of that object.
And from ""Important Usage Notes"" in ReadMe.txt:

If a constructor for A takes a pointer to an object B (except primitive types such as int and char), then A owns B and will delete B at A's destruction. If a constructor for A takes a reference to an object B, then the caller retains ownership of B and should not destroy it until A no longer needs it.

","639","<c++><sha><crypto++>","1","2","3","2016-04-11 06:16:31","36532611","1","","","","","2016-04-10 16:33:40",""
"19988785","Which is preferable: sha1_file(f) or sha1(file_get_contents(f))?","I want to create a hash of a file which size minimum 5Mb and can extend to 1-2 Gb. Now tough choice arise in between these two methods although they work exactly same.
Method 1: sha1_file($file)
Method 2: sha1(file_get_contents($file))

I have tried with 10 Mb but there is no much difference in performance.
But on higher data scale. What's better way to go?
","Use the most high-level form offered unless there is a compelling reason otherwise.
In this case, the correct choice is sha1_file. Because sha1_file is a higher-level function that only works with files. This 'restriction' allows it to take advantage of the fact that the file/source can be processed as a stream1: only a small part of the file is ever read into memory at a time.
The second approach guarantees that 5MB-2GB of memory (the size of the file) is wasted/used as file_get_contents reads everything into memory before the hash is generated. As the size of the files increase and/or system resources become limited this can have a very detrimental effect on performance.

1 The source for sha1_file can be found on github. Here is an extract showing only lines relevant to stream processing:
PHP_FUNCTION(sha1_file)
{       
    stream = php_stream_open_wrapper(arg, ""rb"", REPORT_ERRORS, NULL);
    PHP_SHA1Init(&context);    
    while ((n = php_stream_read(stream, buf, sizeof(buf))) > 0) {
        PHP_SHA1Update(&context, buf, n);
    }    
    PHP_SHA1Final(digest, &context);    
    php_stream_close(stream);
}

By using higher-level functions, the onus of a suitable implementation is placed on the developers of the library. In this case it allowed the use of a scaling stream implementation.
","637","<php><hash><sha>","4","7","1","2017-07-05 15:35:05","19988952","0","1","2864740","","2013-11-14 22:13:58","2013-11-14 21:29:13",""
"30130284","Google+ Sign in Android Keytool","I am trying to learn Android development and I am having trouble following the Google+ sign in tutorial.https://developers.google.com/+/quickstart/android . I am stuck on step 6e-getting the SHA-1 fingerprint with the keytool.
I don't quite understand what this process is doing. In the command prompt, I have navigated to the Java/bin folder, and when I put in the command:
keytool -exportcert -alias androiddebugkey -keystore <C:/Users/Me/.android/debug.keystore> -list -v

it says access denied.
","This command should work:
keytool -exportcert -alias androiddebugkey -keystore %USERPROFILE%\.android\debug.keystore -list -v

","630","<android><google-plus><sha>","0","1","1","2015-05-08 18:19:50","","0","","2837959","","2015-05-08 18:19:50","2015-05-08 18:12:40",""
"29895779","Convert hash_hmac into android java","I'm trying to convert this php function:
string hash_hmac ( string $algo , string $data , string $key [, bool $raw_output = false ] )

where algo = SHA-256, data = dd-mm-yyy, key = ""password""
I have write a code with Message Digest that calculate sha-256 on the concatenation data + key, but the output it's different form the output of php function.
Any help for write this php function into android java?
In fact, I set for String key a personal password and for String s a date. Now when I run the app and generete the hmacsha256 that I add to a url get, the value hmacSha256 that I print it's different form a hmacSha256 calculate into iOS.
I used this code adapted from one answer  :
String PRIVATE_KEY = (String) ""asf"";
String dateInString = ""2015-04-26"";  // Start date
String sdf = new SimpleDateFormat(""yyyy-MM-dd"").format(new Date());
String Token = (String) sdf + PRIVATE_KEY;

private static String toHexString(final byte[] bytes) {
    final Formatter formatter = new Formatter();
    for (final byte b : bytes) {
        formatter.format(""%02x"", b);
    }
    return formatter.toString();
}

public static String hmacSha256(final String PRIVATE_KEY, final String sdf) {
    try {
        final Mac mac = Mac.getInstance(""HmacSHA256"");
        mac.init(new SecretKeySpec(PRIVATE_KEY.getBytes(), ""HmacSHA256""));
        return toHexString(mac.doFinal(sdf.getBytes()));
    }
    catch (final Exception e) {
        // ...
    }
    return PRIVATE_KEY;
}

But when I print hmacSha256(sdf,PRIVATE_KEY), my output is: 76934121da91e03df3ca531057cdca132ebc7fe37ba60fc12da11dba285e3ba2
and this value it's different respect to hmacSha256 genereted by iOS. What is wrong here.
","This is how I did a HmacSHA256 implementation:
private static String toHexString(final byte[] bytes) {
    final Formatter formatter = new Formatter();
    for (final byte b : bytes) {
        formatter.format(""%02x"", b);
    }
    return formatter.toString();
}

public static String hmacSha256(final String key, final String s) {
    try {
        final Mac mac = Mac.getInstance(""HmacSHA256"");
        mac.init(new SecretKeySpec(key.getBytes(), ""HmacSHA256"");
        return toHexString(mac.doFinal(s.getBytes()));
    }
    catch (final Exception e) {
        // ...
    }
}

","629","<java><php><android><sha>","0","4","1","2015-04-30 06:22:53","","2","4","3545273","","2015-04-30 06:22:53","2015-04-27 12:28:01",""
"12267547","iOS and RESTful web service encryption","So here is situation:
I have GPS based app with a lot of sensitive data sending to server - GPS coordinates, users address book phone numbers and so on.
So I need to have it really secure.
I decided to encrypt data sent to server with HMAC+SHA256, decrypt there, encrypt response, send response to client, and decrypt there.
Question is - does my app need CCATS review and approval since I'm not using HHTPS with SSL and just sending data encoded with SHA256?   
","Yes, it does. In theory any app that uses encryption needs CCATS review. If you ask directly to Apple, they will answer that (yes, I did ask them).
","628","<ios><encryption><gps><sha>","0","1","2","2012-09-04 20:46:03","12271107","3","0","1415038","","2012-09-04 19:16:39","2012-09-04 16:17:37",""
"12267547","iOS and RESTful web service encryption","So here is situation:
I have GPS based app with a lot of sensitive data sending to server - GPS coordinates, users address book phone numbers and so on.
So I need to have it really secure.
I decided to encrypt data sent to server with HMAC+SHA256, decrypt there, encrypt response, send response to client, and decrypt there.
Question is - does my app need CCATS review and approval since I'm not using HHTPS with SSL and just sending data encoded with SHA256?   
","Don't reinvent the wheel, use https - really.
You will have to have a 'real' certificate on your website as (last time I checked) the https built in to iOS will only work with 'real' certificates.  Note that this will probably cost you ~$100/year.
","628","<ios><encryption><gps><sha>","0","1","2","2012-09-04 20:46:03","12271107","3","0","1415038","","2012-09-04 19:16:39","2012-09-04 16:17:37",""
"1707369","Does this TPM emulator follow TPM spec for extending PCR register?","The following code is from TPM emulator from Mario Strasser. The spec says, 
PCR := SHA1(PCR || data) 

reads ""concatenate the old value of PCR with the data, hash the concatenated string and store the hash in PCR"". It's not PCR := PCR BITWISE-OR SHA1(data) nor PCR := SHA1(PCR BITWISE-OR data)
TPM_RESULT TPM_Extend(TPM_PCRINDEX pcrNum, TPM_DIGEST *inDigest, 
                      TPM_PCRVALUE *outDigest)
{
  tpm_sha1_ctx_t ctx;

  info(""TPM_Extend()"");
  if (pcrNum >= TPM_NUM_PCR) return TPM_BADINDEX;
  if (!(PCR_ATTRIB[pcrNum].pcrExtendLocal & (1 << LOCALITY))) return TPM_BAD_LOCALITY;
  /* compute new PCR value as SHA-1(old PCR value || inDigest) */
  tpm_sha1_init(&ctx);
  tpm_sha1_update(&ctx, PCR_VALUE[pcrNum].digest, sizeof(PCR_VALUE[pcrNum].digest));
  tpm_sha1_update(&ctx, inDigest->digest, sizeof(inDigest->digest));
  tpm_sha1_final(&ctx, PCR_VALUE[pcrNum].digest);  
  /* set output digest */
  if (tpmData.permanent.flags.disable) {
    memset(outDigest->digest, 0, sizeof(*outDigest->digest));
  } else {
    memcpy(outDigest, &PCR_VALUE[pcrNum], sizeof(TPM_PCRVALUE));
  }
  return TPM_SUCCESS;
}

","AFAIK, yes. See my comment in Perform OR on two hash outputs of sha1sum
","623","<c><sha><tpm>","1","1","1","2014-08-25 12:30:56","1707396","0","","832363","","2014-08-25 12:30:56","2009-11-10 11:43:17",""
"10769719","Shorten sha1 hash for database storage for later retrieval?","Is there a way I can shorten a sha1 hash to store in a database, and then upon retrieval perform a unshorten function on it to display the original?
I am not sure this is possible, my sha1 hashes are currently 40 characters long.
Thanks
","","619","<php><sha>","1","","0","2012-05-26 20:58:06","","12","","","","","2012-05-26 20:58:06",""
"28937109","Hex form for a sha1 hash of a String?","I need a sha1 hash of a string in HEX form. This is the basic code:
import Data.ByteString.UTF8
import Crypto.Hash.SHA1 (hash)

toArgs :: String -> (String,String)
toArgs str = let h = show .  hash . fromString $ str
    in (str,h)

Which produces the hash, but in a form like this:
$ toArgs ""Hejsan""
(""Hejsan"",""\""A\\CAN]]\\131\\168\\210|\\n\\NUL\\NAK\\187j\\181Q\\STX\\146o\\fP\"""")

I tried converting it to HEX using printf:
import Data.ByteString.UTF8
import Crypto.Hash.SHA1 (hash)
import Text.Printf (printf)

toArgs :: String -> (String,String)
toArgs str = let h = printf ""%02x"" $ show . hash . fromString $ str
    in (str,h)

which compiles, but throws an exception when executed:
toArgs ""Hejsan""
(""Hejsan"",""*** Exception: Printf.printf: bad argument

Any ideas?
","That particular implementation of printf in Haskell isn't type-safe. You've run into that problem. The %x specifier requires a number, but you're passing it a string.
Assuming you're using the cryptohash package, the best way to get a hex representation is using the functions in Crypto.Hash, something sort of like this:
import Crypto.Hash

sha1Hex :: ByteString -> ByteString
sha1Hex s = digestToHexByteString (hash s :: Digest SHA1)

","618","<string><haskell><hash><hex><sha>","1","3","2","2015-03-09 08:02:33","28937377","0","","","","","2015-03-09 07:37:44",""
"28937109","Hex form for a sha1 hash of a String?","I need a sha1 hash of a string in HEX form. This is the basic code:
import Data.ByteString.UTF8
import Crypto.Hash.SHA1 (hash)

toArgs :: String -> (String,String)
toArgs str = let h = show .  hash . fromString $ str
    in (str,h)

Which produces the hash, but in a form like this:
$ toArgs ""Hejsan""
(""Hejsan"",""\""A\\CAN]]\\131\\168\\210|\\n\\NUL\\NAK\\187j\\181Q\\STX\\146o\\fP\"""")

I tried converting it to HEX using printf:
import Data.ByteString.UTF8
import Crypto.Hash.SHA1 (hash)
import Text.Printf (printf)

toArgs :: String -> (String,String)
toArgs str = let h = printf ""%02x"" $ show . hash . fromString $ str
    in (str,h)

which compiles, but throws an exception when executed:
toArgs ""Hejsan""
(""Hejsan"",""*** Exception: Printf.printf: bad argument

Any ideas?
","I'd recommend using the base16-bytestring package. Note that you'll need to turn your String into a ByteString, which I'd recommend doing as a UTF8 encoding. Altogether, this would look something like:
Data.Text.unpack . decodeUtf8 . Base16.encode . encodeUtf8 . Data.Text.pack

If you just stick with Text instead of String (which I'd recommend), you can leave off the unpack and pack.
","618","<string><haskell><hash><hex><sha>","1","2","2","2015-03-09 08:02:33","28937377","0","","","","","2015-03-09 07:37:44",""
"46816280","Converting sha256 hash into decimal equivalent string","I am developing a secure communication between android and arduino with sha256.
Doing so i got successfully the HEX decimal equivalent string but my goal is to get Decimal equivalent string.i searched out a lot but did not get success.
Any help would be appreciated and thanks in advance
this is my android code for hashing  ""12345678901234567890123456789077""
 String hashfirst=""12345678901234567890123456789077"";
           MessageDigest digest = null;
        try {
            digest = MessageDigest.getInstance(""SHA-256"");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        byte[] hash = digest.digest(s.getBytes(StandardCharsets.UTF_8));
        System.out.println(bytesToHex(hash));
    }
    private static String bytesToHex(byte[] bytes) {
        StringBuffer result = new StringBuffer();
        for (byte b : bytes) result.append(Integer.toString((b & 0xFF) + 0x100, 16).substring(1));
        return result.toString();
    }

The Resultant Hash string is(through android)
21de5812f71df17b25a5124129ba1ccf5ba67121c548c9f8127f68d9d11293f8

","Use the build in hex conversion of BigInteger:
System.out.println(new BigInteger(bytesToHex(hash),16));

","608","<java><android><hash><sha>","0","0","2","2017-10-18 18:06:13","","1","3","","","","2017-10-18 17:51:51",""
"46816280","Converting sha256 hash into decimal equivalent string","I am developing a secure communication between android and arduino with sha256.
Doing so i got successfully the HEX decimal equivalent string but my goal is to get Decimal equivalent string.i searched out a lot but did not get success.
Any help would be appreciated and thanks in advance
this is my android code for hashing  ""12345678901234567890123456789077""
 String hashfirst=""12345678901234567890123456789077"";
           MessageDigest digest = null;
        try {
            digest = MessageDigest.getInstance(""SHA-256"");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        byte[] hash = digest.digest(s.getBytes(StandardCharsets.UTF_8));
        System.out.println(bytesToHex(hash));
    }
    private static String bytesToHex(byte[] bytes) {
        StringBuffer result = new StringBuffer();
        for (byte b : bytes) result.append(Integer.toString((b & 0xFF) + 0x100, 16).substring(1));
        return result.toString();
    }

The Resultant Hash string is(through android)
21de5812f71df17b25a5124129ba1ccf5ba67121c548c9f8127f68d9d11293f8

","Instead of:
Integer.toString((b & 0xFF) + 0x100, 16).substring(1)

Try to use:
String.format(""%03d"", (b & 0xFF) + 0x100);

","608","<java><android><hash><sha>","0","0","2","2017-10-18 18:06:13","","1","3","","","","2017-10-18 17:51:51",""
"25079290","crypt does not work in osx, returns wrong value","I'm using an OSX 10.9 (last version) with the last Xcode. When I execute the following command:
python -c 'import crypt; print crypt.crypt(""test"", ""$6$random_salt"")'

I get this as an answer:
$6asQOJRqB1i2

but if I execute the same in a debian machine (same version of python) I get the following:
$6$random_salt$sJ0ZOQCUESBs9rYCOLCqGV93zg1cSDgZV/FF6ZBzpnvNUVODwaaVoPV2SiL0ur7Sexh02hMmXdSBOa216GWoh.

What is wrong with my machine?
","The implementation of crypt() on Mac OS X does not support most of the ""advanced"" modes supported by the Linux glibc crypt(). It only supports ""traditional crypt()"", which is what you're getting here, and an ""extended crypt()"" mode which is not compatible with the Linux implementation either.
If you need to create strong password hashes portably across Linux and Mac OS X, you'll need to use something other than crypt().
","602","<python><macos><hash><sha><crypt>","4","3","2","2014-08-04 09:10:56","25115220","0","1","2208811","","2014-08-01 15:03:18","2014-08-01 11:30:58",""
"25079290","crypt does not work in osx, returns wrong value","I'm using an OSX 10.9 (last version) with the last Xcode. When I execute the following command:
python -c 'import crypt; print crypt.crypt(""test"", ""$6$random_salt"")'

I get this as an answer:
$6asQOJRqB1i2

but if I execute the same in a debian machine (same version of python) I get the following:
$6$random_salt$sJ0ZOQCUESBs9rYCOLCqGV93zg1cSDgZV/FF6ZBzpnvNUVODwaaVoPV2SiL0ur7Sexh02hMmXdSBOa216GWoh.

What is wrong with my machine?
","The problem seems to be in the crypt implementation as @dukswuff comments. If anyone ends up in the same problem, there is a python alternative solution you can read here: https://stackoverflow.com/a/17992126/2208811
","602","<python><macos><hash><sha><crypt>","4","2","2","2014-08-04 09:10:56","25115220","0","1","2208811","","2014-08-01 15:03:18","2014-08-01 11:30:58",""
"37342435","Password Hashing - Why salt 60,000 times","I'm working for a Fortune 100 company and I'm thrown into being tasked with security moving from SHA1 to SHA-2 .   This is not my area of expertise, but as I study cryptography I am questioning the outdated information etc...

SHA-2 is obviously needed over SHA-1 but when the security team KNOWS that the hashing of password + salt is using SHA,  with GPU being so ridiculously fast at cracking billions of hashes - I do not get why for passwords i'm not being told to use bcrypt or another equivalent that is slow   ,  WHY?
I'm shown a powerpoint slide in which i'm told to create my salt 60,000 times.  I searched all over the internet and I'm not seeing any such advise or examples.  Why?

I'm using C# 
string SaltAndPwd = string.Concat(plainTextPassword, salt);
SHA256 sha2 = SHA256Managed.Create();
byte[] buff = sha2.ComputeHash(Encoding.Unicode.GetBytes(SaltAndPwd));

I suppose that I'm not told to create a salt over and over, but to create the hash over and over.
Would this logic be appropriate?  
string plainTextPassword = ""aF7Cvs+QzZKM=4!"";  
string salt = ""o9kc5FvhWQU=="";
SHA256 sha2 = SHA256Managed.Create();

for(var i = 0; i <= 60000; i++)
{
   byte[] buff = sha2.ComputeHash(Encoding.Unicode.GetBytes(SaltAndPwd));
}

How do I make this hashing to work properly?
Update  found the powerpoint slide

Update with Code - Problem with implementation on verification of the hash
Problem is when I use the check on the code I'm trying 
if (resultHash.Equals(hassPassword))   and it does not match...
    public string BuildVerify()
    {

        string password = """";
        string salt = """";
        byte[] result;


        using (var sha256 = SHA256.Create())
        {
            password = ""hovercraft"";

            // step 1: you can use RNGCryptoServiceProvider for something worth using
            var passwordHashing = new PasswordHashing();
            salt = passwordHashing.CreateRandomSalt();

            // step 2
            string hash =
               Convert.ToBase64String(sha256.ComputeHash(Encoding.UTF8.GetBytes(salt + password)));

            // step 3
            result = sha256.ComputeHash(Encoding.UTF8.GetBytes(salt + hash));

            // step 4
            for (int i = 0; i < 60000; i++)
            {
                result =
                 sha256.ComputeHash(Encoding.UTF8.GetBytes(salt + Convert.ToBase64String(result)));
            }
        }


        // TESTING  VERIFY this works ..

        string SaltAndPwd = string.Concat(password, salt);
        SHA256 sha2 = SHA256Managed.Create();
        byte[] buff = sha2.ComputeHash(Encoding.Unicode.GetBytes(SaltAndPwd));
        string resultHash = Convert.ToBase64String(buff);
        string hassPassword = Convert.ToBase64String(result);

        if (resultHash.Equals(hassPassword))
        {
            // perfect 
        }




        return """";

    }


public class PasswordHashing
{

    public string CreateRandomSalt()
    {
        string password = """";
        password = HashPassword.CreateSalt(8) + ""="";
        password = password.Replace(""/"", ""c"");
        return password;
    }

}

/// 
    public static string CreateSalt(int size)
    {
        RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();

        byte[] buff = new byte[size];
        rng.GetBytes(buff);
        return Convert.ToBase64String(buff);
    }

NEW Question 
  figured that I would go ahead and create a new question , thanks everyone in advance.
Verification of Hashing password is not working
","
I do not get why for passwords i'm not being told to use bcrypt or another equivalent that is slow

I'm guessing this is why they're asking you to hash 60000 time. To add a work factor and slow down brute force attacks.

How do I make this hashing to work properly?

Something like this:
using (var sha256 = SHA256.Create())
{
    string password = ""hovercraft"";

    // step 1: you can use RNGCryptoServiceProvider for something worth using
    string salt = GenerateSalt();

    // step 2
    string hash = 
       Convert.ToBase64String(sha256.ComputeHash(Encoding.UTF8.GetBytes(salt + password)));

    // step 3
    byte[] result = sha256.ComputeHash(Encoding.UTF8.GetBytes(salt + hash));

    // step 4
    for (int i = 0; i < 60000; i++)
    {
        result = 
         sha256.ComputeHash(Encoding.UTF8.GetBytes(salt + Convert.ToBase64String(result)));
    }
}

","597","<c#><hash><sha256><sha>","5","9","2","2016-05-20 19:11:12","37343128","16","1","-1","","2017-05-23 12:07:59","2016-05-20 09:02:29",""
"37342435","Password Hashing - Why salt 60,000 times","I'm working for a Fortune 100 company and I'm thrown into being tasked with security moving from SHA1 to SHA-2 .   This is not my area of expertise, but as I study cryptography I am questioning the outdated information etc...

SHA-2 is obviously needed over SHA-1 but when the security team KNOWS that the hashing of password + salt is using SHA,  with GPU being so ridiculously fast at cracking billions of hashes - I do not get why for passwords i'm not being told to use bcrypt or another equivalent that is slow   ,  WHY?
I'm shown a powerpoint slide in which i'm told to create my salt 60,000 times.  I searched all over the internet and I'm not seeing any such advise or examples.  Why?

I'm using C# 
string SaltAndPwd = string.Concat(plainTextPassword, salt);
SHA256 sha2 = SHA256Managed.Create();
byte[] buff = sha2.ComputeHash(Encoding.Unicode.GetBytes(SaltAndPwd));

I suppose that I'm not told to create a salt over and over, but to create the hash over and over.
Would this logic be appropriate?  
string plainTextPassword = ""aF7Cvs+QzZKM=4!"";  
string salt = ""o9kc5FvhWQU=="";
SHA256 sha2 = SHA256Managed.Create();

for(var i = 0; i <= 60000; i++)
{
   byte[] buff = sha2.ComputeHash(Encoding.Unicode.GetBytes(SaltAndPwd));
}

How do I make this hashing to work properly?
Update  found the powerpoint slide

Update with Code - Problem with implementation on verification of the hash
Problem is when I use the check on the code I'm trying 
if (resultHash.Equals(hassPassword))   and it does not match...
    public string BuildVerify()
    {

        string password = """";
        string salt = """";
        byte[] result;


        using (var sha256 = SHA256.Create())
        {
            password = ""hovercraft"";

            // step 1: you can use RNGCryptoServiceProvider for something worth using
            var passwordHashing = new PasswordHashing();
            salt = passwordHashing.CreateRandomSalt();

            // step 2
            string hash =
               Convert.ToBase64String(sha256.ComputeHash(Encoding.UTF8.GetBytes(salt + password)));

            // step 3
            result = sha256.ComputeHash(Encoding.UTF8.GetBytes(salt + hash));

            // step 4
            for (int i = 0; i < 60000; i++)
            {
                result =
                 sha256.ComputeHash(Encoding.UTF8.GetBytes(salt + Convert.ToBase64String(result)));
            }
        }


        // TESTING  VERIFY this works ..

        string SaltAndPwd = string.Concat(password, salt);
        SHA256 sha2 = SHA256Managed.Create();
        byte[] buff = sha2.ComputeHash(Encoding.Unicode.GetBytes(SaltAndPwd));
        string resultHash = Convert.ToBase64String(buff);
        string hassPassword = Convert.ToBase64String(result);

        if (resultHash.Equals(hassPassword))
        {
            // perfect 
        }




        return """";

    }


public class PasswordHashing
{

    public string CreateRandomSalt()
    {
        string password = """";
        password = HashPassword.CreateSalt(8) + ""="";
        password = password.Replace(""/"", ""c"");
        return password;
    }

}

/// 
    public static string CreateSalt(int size)
    {
        RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();

        byte[] buff = new byte[size];
        rng.GetBytes(buff);
        return Convert.ToBase64String(buff);
    }

NEW Question 
  figured that I would go ahead and create a new question , thanks everyone in advance.
Verification of Hashing password is not working
","To me this looks like an attempt to reimplement a PBKDF2 algorithm, to get a cost factor.
Usually it is not recommended to make experiments with security functions, instead one should use a proven well tested algorithm. Your concern about the algorithm above is justified, try to convince your team to switch to BCrypt.Net or to PBKDF2.
When you go for PBKDF2, then you can either use the built in dotnet class Rfc2898DeriveBytes to calculate a PBKDF2 with HMACSHA1 (which is the standard even today), or you can use an implementation which supports other hash functions like PBKDF2 with SHA-256.
","597","<c#><hash><sha256><sha>","5","4","2","2016-05-20 19:11:12","37343128","16","1","-1","","2017-05-23 12:07:59","2016-05-20 09:02:29",""
"21360568","Difference in SHA Hash between git hash-object & git hash-object -t","I want to calculate git SHA hash without using the git hash object function, that is I want to use the shasum function to calculate it.
I know that for the following case
    body=""tree 491e9405120eaaa57cce3938fd38508d85a5e08b 
parent 8550f0f1a7e32fb1bb0933b0294c116a8dbe6dce 
author user <me@example.com> 1390718030 +0000 
committer user <me@example.com> 1390718030 +0000 
This is a test""

echo $body | git hash-object -w --stdin #755481b921f13bcfd731d74287a0c5847519ee81

l=`expr ${#body} + 1`
echo -e 'blob $l\0$body' | shasum #755481b921f13bcfd731d74287a0c5847519ee81

hashes are the same. But if I use -t commit option in hash-object I get a different Hash. How can I calculate the commit hash using shasum?
git hash-object -t commit --stdin <<< ""$body"" #b4c45adbbe35d3d3c73de48d039a8e3038f5ec54

","You changed the type of the object you wrote the hash with.
From git hash-object
-t <type>

    Specify the type (default: ""blob"").

You went from the default blob to commit.
And the object actually written start with the object type, which is part of what the sha1 has to compute.
See:

""Why does git hash-object return a different hash than openssl sha1?""
""Assigning Git SHA1's without Git""


Git calculates the SHA1 for a file (or, in Git terms, a ""blob""):

sha1(""blob "" + filesize + ""\0"" + data)

That changes the content of what is taken into account by the sha1.
With -t commit, you modify that prefix (it is no longer 'blob'), and since the content is different, the sha1 is also different.
You can do a: 
python -c ""import zlib,sys;print repr(zlib.decompress(sys.stdin.read()))"" < .git/objects/02/b365d4af3ef6f74b0b1f18c41507c82b3ee571: 

The first word will be the type of the content
For further reference check How Git Works
","594","<git><hash><sha>","2","2","1","2014-01-27 06:40:26","21361195","0","1","","","","2014-01-26 06:42:33",""
"9641609","Generate SHA1 (of Image) on iPhone? (Incorrect results)","I have looked everywhere and cannot find a solution to my problem.  I have written a program for Android and Windows both that calculates the SHA1 hash of a given image.  I confirmed these hashes with HashCalc that I downloaded.  However when I try to do the same for iPhone I get a completely different hash.  I believe it has something to do with converting the image to a byte array before I compute the hash.  Here is my code:    
- (void)imagePickerCotroller:(UIImagePickerController *)picker didFinishPickingMediaWithInfo:(NSDictionary *)info {
UIImage *image = [info objectForKey:UIImagePickerControllerOriginalImage];
[imageview setImage:image];

NSData* imageData = UIImageJPEGRepresentation(image, 1);
NSString *hash = makeSHA1(imageData);

[filepath setText: hash];
[self dismissModalViewControllerAnimated:YES];
}

- (void)imagePickerControllerDidCancel:(UIImagePickerController *)picker {

[self dismissModalViewControllerAnimated:YES];
}


NSString* makeSHA1(NSData *data) {       

uint8_t digest[CC_SHA1_DIGEST_LENGTH];

CC_SHA1(data.bytes, data.length, digest);    

NSMutableString* output = [NSMutableString stringWithCapacity:CC_SHA1_DIGEST_LENGTH * 2];    

for(int i = 0; i < CC_SHA1_DIGEST_LENGTH; i++)
    [output appendFormat:@""%02x"", digest[i]];    
return output;
}

","I suspect the problem here is that you're converting the data using UIImageJPEGRepresentation(). Even if you started with JPEG data, there isn't a promise that this returns exactly the same bytes as you started with.
My (untested) suggestion is that you ask the CGDataProvider for the raw data. Something like this:
CGImageRef cgImage = [image CGImage];
CGDataProviderRef provider = CGImageGetDataProvider(cgImage);
CFDataRef imageData = CGDataProviderCopyData(provider);
if (imageData != NULL) {
  ...
  CFRelease(imageData);
}

","591","<iphone><ios><hash><sha>","1","1","1","2012-03-12 14:07:52","","0","1","","user166390","2012-03-09 22:06:17","2012-03-09 22:02:05",""
"40704540","Detect SSL hash algorithm with Python","Now that SHA-1 will be banned next year by major browsers, I want to detect which sites are still using it. Is there a way to get this information using Python (such as Python's ssl library)? I can use openssl s_client but I'd prefer a Pythonic solution (that is compatible with my async framework). 
s_client example:
$ openssl s_client -connect winkel.vpro.nl:443 < /dev/null 2>/dev/null | openssl x509 -text -in /dev/stdin | grep -i sha
Signature Algorithm: sha1WithRSAEncryption

I dug through the ssl docs but couldn't find hash algo references. And I don't know how to get this info from the ssl context. TIA!
","The signature hash algorithm is not a property of the SSL connection but a property of the certificate. Once you have the certificate you can get the algorithm using get_signature_algorithm from OpenSSL.crypto:
import ssl, socket, OpenSSL

# connect to server and get certificate as binary (DER)
sock = socket.socket()
sock.connect(('www.google.com',443))
sslsock = ssl.wrap_socket(sock)
cert_der = sslsock.getpeercert(True)

# load binary certificate and get signature hash algorithm
cert = OpenSSL.crypto.load_certificate(OpenSSL.crypto.FILETYPE_ASN1, cert_der)
print cert.get_signature_algorithm()
# -> 'sha256WithRSAEncryption'

With Python3 one can also use signature_hash_algorithm from the cryptography package:
from cryptography import x509
from cryptography.hazmat.backends import default_backend

... get cert_der the same way as before ...
cert = x509.load_der_x509_certificate(cert_der, default_backend())
print(cert.signature_hash_algorithm.name)
#  -> 'sha256'

","587","<python><ssl><sha>","2","4","1","2016-11-20 15:18:14","40705626","0","1","","","","2016-11-20 13:25:42",""
"15044711","OpenSSL SHA256 equivalent in Objective-C","I'm having some trouble converting a command-line OpenSSL SHA256 Digest over to the equivalent in Objective-C. Any assistance would be tremendously appreciated.
When I run OpenSSL on the command-line like so:
    echo 'key=2fvmer3qbk7f9jnqneg58bu2&secret=qvxkmw57pec7&ts=1200603038' | openssl dgst -sha256

I get the (correct/expected) result:
1e673d58756f95fb938ddb42fd6242dc691803578a3503fedd5c0e92aac6c098

I've then created a function in Objective-C as follows -
SHA256HashClass.h:
@interface SHA256Hashclass : NSObject{
    unsigned char SHAInputValue[32];
}

SHA256Hashclass.m:
- (id)createSHA256HashWithBytes:(const void *)bytes length:(NSUInteger)length
{
    // hash
    CC_SHA256(bytes, length, SHAInputValue);

    NSInteger byteLength = sizeof(char value[CC_SHA256_DIGEST_LENGTH]); //sizeof() = 32 bytes

    NSMutableString *stringValue = [NSMutableString stringWithCapacity:byteLength * 2];

    // convert to string
    for (int i = 0; i < byteLength; i++)
    {
        [stringValue appendFormat:@""%02x"", SHAInputValue[i]];
    }

    return stringValue;
}

However when I call the above function like so:
NSData *dataIn = [@""key=2fvmer3qbk7f9jnqneg58bu2&secret=qvxkmw57pec7&ts=1200603038"" dataUsingEncoding:NSUTF8StringEncoding];

SHA256Hashclass *hashClass = [[SHA256Hashclass alloc] init];

NSLog(@""Result: %@"", [hashClass createSHA256HashWithBytes:dataIn.bytes length:dataIn.length]);

I get the following result which clearly differs from the expected OpenSSL SHA256 equivalent shown above:
d8a0771d41c6b9918048c4842415946bcda27c75b0b6ae4948b6ea081eb01196

I've tried changing the encoding from NSUTF8StringEncoding to NSASCIIStringEncoding but it  didn't help.
","echo adds an extra newline. If we use echo -n we get the expected output:
$ echo -n 'key=2fvmer3qbk7f9jnqneg58bu2&secret=qvxkmw57pec7&ts=1200603038' | openssl dgst -sha256
(stdin)= d8a0771d41c6b9918048c4842415946bcda27c75b0b6ae4948b6ea081eb01196

","586","<objective-c><encryption><openssl><sha>","2","2","1","2013-02-23 23:43:10","15044756","0","","885189","","2013-02-23 23:43:10","2013-02-23 19:35:05","2013-03-04 15:08:27"
"11838825","How do I apply SHA-1 to a large hex number byte by byte?","I'm trying to create a program that will enable me to convert a MEID (a hex number of length 14) to pseudo ESN (a hex number of length 8). The way to obtain a pESN from MEID is fairly simple in theory. For example, given MEID 0xA0000000002329, to make a pESN, SHA-1 needs to be applied to the MEID. SHA-1 on A0000000002329 gives e3be267a2cd5c861f3c7ea4224df829a3551f1ab. Take the last 6 hex numbers of this result, and append it to 0x80 - the result is 0x8051F1AB.
Now here is the code I have so far:
public void sha1() throws NoSuchAlgorithmException {

    String hexMEID = ""A0000000002329"";

    MessageDigest mDigest = MessageDigest.getInstance(""SHA1"");      
    byte[] b = new BigInteger(hexMEID,16).toByteArray();    

    byte[] result = mDigest.digest(b);
    StringBuilder sb = new StringBuilder();

    for (int i = 0; i < result.length; i++) {
        sb.append(Integer.toString((result[i] & 0xff) + 0x100, 16).substring(1));
    }

    System.out.println(sb.toString());
}

The problem is that using this method, SHA-1 on A0000000002329 gives 6ad447f040941bf43c0693d2b391c6c79fa58320 instead of e3be267a2cd5c861f3c7ea4224df829a3551f1ab. What am I doing wrong here??
Someone gave me a hint that

The trick is to apply SHA-1 to the number representing the MEID, not
  the string representing the MEID. You'll need to process it
  byte-by-byte, so you must give it two hex numbers at a time (since two
  hex numbers make a byte) and make sure they are interpreted as numbers
  and not ASCII characters.

If these instructions are true, then how do I apply SHA-1 to my hex number byte by byte??
","You have a tiny little issue which is the consequence of using BigInteger to get your byte array. Since the MEID is only 7 bytes long, when you pump it through the BigInteger, you will get a byte array of length 8 because the BigInteger outputs the exta byte which holds the sign. This extra byte causes the SHA-1 hash of your input to be completely different, of course. You need to strip it off. 
So here is what the HEX MEID to ESN code will look like:
String hexMEID = ""A0000000002329"";
MessageDigest mDigest = MessageDigest.getInstance( ""SHA1"" );

byte[] input = new byte[ 7 ]; // MEIDs are only 7 bytes

// Now copy the bytes from BigInteger skipping the extra byte added by it
System.arraycopy( new BigInteger( hexMEID, 16 ).toByteArray(), 1, input, 0, 7 );

// Get the SHA-1 bytes
byte[] result = mDigest.digest( input );

// Build the SHA-1 String
StringBuilder sb = new StringBuilder();
for ( int i = 0; i < result.length; i++ )
{
    String hex = Integer.toHexString( 0xFF & result[ i ] );
    if ( hex.length() == 1 )
    {
        sb.append( '0' );
    }
    sb.append( hex );
}

String sha1 = sb.toString();
// Grab the last 6 characters of the SHA-1 hash
String lastSix = sha1.substring( sha1.length() - 6 );
// And prepend '80', now you have the ESN
System.out.println( ""80"" + lastSix );
// Will print 8051f1ab which is exactly what you want

","580","<java><sha>","2","4","2","2012-08-07 16:02:13","11849684","4","2","2788","","2012-08-07 04:44:37","2012-08-07 03:24:43",""
"11838825","How do I apply SHA-1 to a large hex number byte by byte?","I'm trying to create a program that will enable me to convert a MEID (a hex number of length 14) to pseudo ESN (a hex number of length 8). The way to obtain a pESN from MEID is fairly simple in theory. For example, given MEID 0xA0000000002329, to make a pESN, SHA-1 needs to be applied to the MEID. SHA-1 on A0000000002329 gives e3be267a2cd5c861f3c7ea4224df829a3551f1ab. Take the last 6 hex numbers of this result, and append it to 0x80 - the result is 0x8051F1AB.
Now here is the code I have so far:
public void sha1() throws NoSuchAlgorithmException {

    String hexMEID = ""A0000000002329"";

    MessageDigest mDigest = MessageDigest.getInstance(""SHA1"");      
    byte[] b = new BigInteger(hexMEID,16).toByteArray();    

    byte[] result = mDigest.digest(b);
    StringBuilder sb = new StringBuilder();

    for (int i = 0; i < result.length; i++) {
        sb.append(Integer.toString((result[i] & 0xff) + 0x100, 16).substring(1));
    }

    System.out.println(sb.toString());
}

The problem is that using this method, SHA-1 on A0000000002329 gives 6ad447f040941bf43c0693d2b391c6c79fa58320 instead of e3be267a2cd5c861f3c7ea4224df829a3551f1ab. What am I doing wrong here??
Someone gave me a hint that

The trick is to apply SHA-1 to the number representing the MEID, not
  the string representing the MEID. You'll need to process it
  byte-by-byte, so you must give it two hex numbers at a time (since two
  hex numbers make a byte) and make sure they are interpreted as numbers
  and not ASCII characters.

If these instructions are true, then how do I apply SHA-1 to my hex number byte by byte??
","Strelok has found the problem about BigInteger adding an extra byte in the returned array. This simpler version also gives the expected result :
String hexMEID = ""A0000000002329"";

MessageDigest mDigest = MessageDigest.getInstance(""SHA1"");

byte[] b = new BigInteger(hexMEID,16).toByteArray();

// skip the first byte set by BigInteger and retain only 7 bytes (length of MEID)
byte[] result = mDigest.digest(Arrays.copyOfRange(b, 1, 8));

StringBuilder sb = new StringBuilder(""80"");

// need only the last 3 bytes
for (int i=17; i<20; i++) {
    sb.append(Integer.toHexString((result[i] & 0xff) | 0x100).substring(1));
}

String pESN = sb.toString();
System.out.println(pESN);
// -> 8051f1ab

","580","<java><sha>","2","2","2","2012-08-07 16:02:13","11849684","4","2","2788","","2012-08-07 04:44:37","2012-08-07 03:24:43",""
"28497331","What's wrong in this SHA-256 Javascript code?","var secure;
var authentic;
secure = prompt(""Enter password"","""");
alert(secure);

var c1 = CryptoJS.SHA256(secure);
alert(c1);


authentic = prompt(""Enter password"","""");
alert(authentic);
var c2=CryptoJS.SHA256(authentic);
alert(c2);

if(c1==c2)
{
    alert(""hi"");
}
else
{
    alert(""bye"");
}

I use the script ""http://crypto-js.googlecode.com/svn/tags/3.1.2/build/rollups/sha256.js""
EXPLANATION: What, I'm trying to do is to compare hashed passwords.If both the passwords entered (secure and authentic) that have been hashed (c1 and c2 respectively) are equal, It must display 'hi' to me. But I find that it displays 'bye' to me always.
PROBLEM: When I compare c1 and c2, the result I get always is 'bye', though the values of c1 and c2 are the same when I display them using the alert box.
I'm kinda new to hashing. A li'l help would be much appreciated!
","From the docs:

The hash you get back isn't a string yet. It's a WordArray object. When you use a WordArray object in a string context, it's automatically converted to a hex string.

When you compare objects in JavaScript you are testing to see if they are the same object, not if they are identical objects.
Since you have created two WordArrays, you are comparing two different (but probably identical) objects.
You need to convert them to strings.
if ( (''+c1) == (''+c2) ) 

or
if ( c1.toString() == c2.toString() )

","578","<javascript><hash><passwords><password-protection><sha>","2","2","1","2015-02-13 11:54:15","28497431","6","","445517","","2015-02-13 11:54:15","2015-02-13 10:21:57",""
"26334184","SHA1 returning hash of incorrect length in C++","In below C++ code, SHA1 should return 20 length hash values. 
Most of the times, id is of length 20 (which is correct). But sometimes it is 6 or 4. Not sure why. Please help.
#include <openssl/sha.h>
#include <limit.h>
#include <other common libraries>

void calc_id(char * ip, unsigned short port, unsigned char *id)
{
      char data[256];
      int len;

      //format print
      len = snprintf(data, 256,""%s%u"", ip, port);
      cout<<""length is :: ""<<len<<endl;
      cout<<""data is ::"" << data<<endl;

      //id is just the SHA1 of the ip and port string
      SHA1((unsigned char *) data, len, (unsigned char *) id);
      cout << ""SHA1 hash is :: "" << id << endl;
      cout << ""length of hash is"" << lengthOfU(id) <<endl;

      return;
}

int lengthOfU(unsigned char * str)
{
    int i = 0;
    while (*(str++))
    {
        i++;
        if (i == INT_MAX) //INT_MAX from limit.h
            return -1;
    }
    return i;
}

ip is like 127.0.0.1
port is like 6671
I am trying to calculate a unique id for ip port pair. SHA1 hash will be some ""special"" characters but the length should come as 20. 
","SHA1, like other hashes, is a binary sequence of bytes. Don't use strlen on it (and don't hand-write your own strlen either). If there is a \0 in there you're going to get truncation; if there is not a \0 in there you're going to start reading unallocated memory.
If you want it as a string, you need to convert it to hex; then it will have length 40.
","572","<c++><hash><openssl><sha>","0","1","2","2014-10-13 06:53:15","","0","","2558721","","2014-10-13 06:42:57","2014-10-13 06:34:36",""
"26334184","SHA1 returning hash of incorrect length in C++","In below C++ code, SHA1 should return 20 length hash values. 
Most of the times, id is of length 20 (which is correct). But sometimes it is 6 or 4. Not sure why. Please help.
#include <openssl/sha.h>
#include <limit.h>
#include <other common libraries>

void calc_id(char * ip, unsigned short port, unsigned char *id)
{
      char data[256];
      int len;

      //format print
      len = snprintf(data, 256,""%s%u"", ip, port);
      cout<<""length is :: ""<<len<<endl;
      cout<<""data is ::"" << data<<endl;

      //id is just the SHA1 of the ip and port string
      SHA1((unsigned char *) data, len, (unsigned char *) id);
      cout << ""SHA1 hash is :: "" << id << endl;
      cout << ""length of hash is"" << lengthOfU(id) <<endl;

      return;
}

int lengthOfU(unsigned char * str)
{
    int i = 0;
    while (*(str++))
    {
        i++;
        if (i == INT_MAX) //INT_MAX from limit.h
            return -1;
    }
    return i;
}

ip is like 127.0.0.1
port is like 6671
I am trying to calculate a unique id for ip port pair. SHA1 hash will be some ""special"" characters but the length should come as 20. 
","Because the id is not a string it's a collection of 20 bytes and zero is a perfectly valid value for one of the bytes to have.
You will need to turn it into a hex string before calling lengthOfU
","572","<c++><hash><openssl><sha>","0","0","2","2014-10-13 06:53:15","","0","","2558721","","2014-10-13 06:42:57","2014-10-13 06:34:36",""
"11041193","Unique SHA-1 digest generation","In Python I'm creating 3 objects each of whom has a unique identifier.
The way I generate this unique identifier in all these objects is the following:
class Foo(object):
    def __init__(self):
        unique_id = hashlib.sha1(str(time.time())).hexdigest()

I create these objects one after the other like this:
a = Foo()
b = Foo()
c = Foo()

All these instances end up having the same unique_id because not enough time lapses between their creation. 
I've resorted to putting a sleep(0.1) between object creations but I'm sure there's more elegant ways to solve this problem. 
Suggestions?
","Python objects already have a unique identifier, which is their id. This is only unique as long as the objects stay in existence, though; the id may be reused after an object is deleted.
You can also use the uuid module from the standard library, or just keep a counter in the class:
class Foo(object):
    __COUNT = 0
    # or: __COUNT = random.randint(0, 2**N - 1)

    def __init__(self):
        self.unique_id = self.__COUNT  # or take the SHA1 of the count
        type(self).__COUNT += 1

","567","<python><sha>","2","5","3","2012-06-14 22:15:40","11041223","4","","573083","","2012-06-14 22:15:40","2012-06-14 20:54:17",""
"11041193","Unique SHA-1 digest generation","In Python I'm creating 3 objects each of whom has a unique identifier.
The way I generate this unique identifier in all these objects is the following:
class Foo(object):
    def __init__(self):
        unique_id = hashlib.sha1(str(time.time())).hexdigest()

I create these objects one after the other like this:
a = Foo()
b = Foo()
c = Foo()

All these instances end up having the same unique_id because not enough time lapses between their creation. 
I've resorted to putting a sleep(0.1) between object creations but I'm sure there's more elegant ways to solve this problem. 
Suggestions?
","How about adding 1 to the first, and 2 to the second?
I don't know python well enough to fix it, but the idea would be to write
a = Foo(0)
b = Foo(1)
c = Foo(2)

and have the class compute
unique_id = hashlib.sha1(str(time.time()+offset)).hexdigest()

","567","<python><sha>","2","1","3","2012-06-14 22:15:40","11041223","4","","573083","","2012-06-14 22:15:40","2012-06-14 20:54:17",""
"11041193","Unique SHA-1 digest generation","In Python I'm creating 3 objects each of whom has a unique identifier.
The way I generate this unique identifier in all these objects is the following:
class Foo(object):
    def __init__(self):
        unique_id = hashlib.sha1(str(time.time())).hexdigest()

I create these objects one after the other like this:
a = Foo()
b = Foo()
c = Foo()

All these instances end up having the same unique_id because not enough time lapses between their creation. 
I've resorted to putting a sleep(0.1) between object creations but I'm sure there's more elegant ways to solve this problem. 
Suggestions?
","You have at least two ways to create unique identifiers:

Use incremental value, usually integer, to generate unique key
Use eg. UUID (Universally Unique Identifier)

Incremental identifiers
The first choice is obvious: whether you do it on the database layer or on the application layer, you need to store information on which identifier was generated last, so you can generate another by incrementing it.
Example solution is here:
>>> class Incremental(object):
    _last_id = 0
    def __init__(self):
        Incremental._last_id += 1
        self.id = Incremental._last_id


>>> class MyClass(Incremental):
    def __repr__(self):
        return 'MyClass with id=%s' % self.id


>>> a = MyClass()
>>> b = MyClass()
>>> c = MyClass()
>>> a, b, c
(MyClass with id=1, MyClass with id=2, MyClass with id=3)

Although take a look at what others proposed - their proposals may be better suited when it comes to incremental IDs.
Universally Unique Identifiers
The second choice is just using proper tool for proper task: UUID is specifically designed to give you unique identifier.
There is a module called UUID bundled with standard Python installation that you can use for this:
>>> import uuid
>>> str(uuid.uuid1())
'0baa65ea-b665-11e1-b721-b80305056d6a'

Translating them into hashes
You can translate both values to SHA-1 hashes, if you wish:
>>> import hashlib
>>> hashlib.sha1(str(1)).hexdigest()
'356a192b7913b04c54574d18c28d46e6395428ab'
>>> hashlib.sha1('0baa65ea-b665-11e1-b721-b80305056d6a').hexdigest()
'46bd64c5f4a81b90539d7302d030e01378ef6d6e'

","567","<python><sha>","2","3","3","2012-06-14 22:15:40","11041223","4","","573083","","2012-06-14 22:15:40","2012-06-14 20:54:17",""
"31021488","Why did Git and Mercurial use SHA1","Both Git and Mercurial use SHA1 extensively throughout the application.
Why was SHA1 chosen rather then another Cryptographic hash function? 
Both Git and mercurial are both 10 years old. What alternatives would be better suited now?
","","566","<git><version-control><mercurial><sha><cryptographic-hash-function>","2","","0","2015-06-24 08:28:31","","9","","","","","2015-06-24 08:28:31","2015-06-24 13:27:42"
"24572489","SNMP4J: SHA/AES-256 Communication to Network Element Failing - What all Parameters needs to set?","I tried to communicate to Network Element which is in AES-256/SHA(v3) mode using below SNMP4JClinet code. It's failing with the exception specified below. Please let me know whats wrong with the code that follows the exception. Do I need to set additional parameter on SNMP4J when NE is in AES256/SHA mode?
Exception:
org.snmp4j.MessageException: Message processing model 3 returned error: 1405
            at org.snmp4j.MessageDispatcherImpl.sendPdu(MessageDispatcherImpl.java:422)
            at org.snmp4j.Snmp.sendMessage(Snmp.java:955)
            at org.snmp4j.Snmp.send(Snmp.java:802)
            at org.snmp4j.Snmp.send(Snmp.java:758)
            at org.snmp4j.Snmp.getBulk(Snmp.java:571)
            at SNMP4JClinet.main(SNMP4JClinet.java:88)

Source:
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import org.snmp4j.CommunityTarget;
import org.snmp4j.PDU;
import org.snmp4j.Snmp;
import org.snmp4j.UserTarget;
import org.snmp4j.security.AuthMD5;
import org.snmp4j.security.AuthSHA;
import org.snmp4j.security.PrivAES128;
import org.snmp4j.security.PrivAES256;
import org.snmp4j.security.SecurityLevel;
import org.snmp4j.security.SecurityModels;
import org.snmp4j.security.Sec;urityProtocols;
import org.snmp4j.security.USM;
import org.snmp4j.security.UsmUser;
import org.snmp4j.smi.*;
import org.snmp4j.mp.*;
import org.snmp4j.transport.DefaultUdpTransportMapping;
import org.snmp4j.event.ResponseEvent;
import org.snmp4j.*; 
public class SNMP4JClinet
{

    public static void main(String[] args) {
        try {
            Snmp snmp = new Snmp(new DefaultUdpTransportMapping());

            USM usm = new USM(SecurityProtocols.getInstance(),
                                            new OctetString(MPv3.createLocalEngineID()), 0);
            SecurityModels.getInstance().addSecurityModel(usm);
            snmp.listen();

            List<String>  ipAddresses = new ArrayList<String>();
            ipAddresses.add(""x.x.x.x"");


            List<UserTarget>  target = new ArrayList<UserTarget>();
            for (String ipAddress : ipAddresses) {
                UserTarget userTarget = new UserTarget();
                userTarget.setAddress(GenericAddress.parse(""udp:""+ipAddress+""/161""));
                userTarget.setSecurityName(new OctetString(""v3userdeafult""));
                userTarget.setVersion(SnmpConstants.version3);
                userTarget.setSecurityLevel(SecurityLevel.AUTH_PRIV);
                userTarget.setTimeout(10000);
                userTarget.setRetries(0);

                target.add(userTarget);
            }

            UsmUser user1 = new UsmUser(new OctetString(""v3userdeafult""),
                    AuthSHA.ID,
                    new OctetString(""v3authapass""),
                    PrivAES256.ID,
                    new OctetString(""v3defprivpass""));


            System.out.println(target.get(0).getAddress());
            byte[] authEngineId0 =snmp.discoverAuthoritativeEngineID(target.get(0).getAddress(), 5000);


            OctetString o1=new OctetString(""v3DefaultUser"");
            OctetString o2 = new OctetString(authEngineId0);
            snmp.getUSM().addUser(o1, o2,user1);

            ResponseEvent responseEvent=null;
            PDU responsePDU=null;


            PDU pdu = new ScopedPDU();
            pdu.setNonRepeaters(1);
            pdu.setType(PDU.GETBULK);
            pdu.add(new VariableBinding(new OID(""1.3.6.1.4.1.7483.2.1.1.2.1.4"")));


            responseEvent = snmp.getBulk(pdu, target.get(0));

            if (responseEvent != null)
            {
                responsePDU = responseEvent.getResponse();
                if ( responsePDU != null)
                {
                    Vector <VariableBinding> tmpv =  (Vector<VariableBinding>) responsePDU.getVariableBindings();
                    if(tmpv != null)
                    {
                        for(int k=0; k <tmpv.size();k++)
                        {
                            VariableBinding vb = (VariableBinding) tmpv.get(k);
                            String output = null;
                            if ( vb.isException())
                            {
                                String errorstring = vb.getVariable().getSyntaxString();
                                System.out.println(""Error:""+errorstring);
                            }
                            else
                            {
                                String sOid = vb.getOid().toString();
                                Variable var = vb.getVariable();
                                //OctetString oct = new OctetString((OctetString)var);
                                String sVar =  var.toString();

                                System.out.println(""success:""+sVar);
                            }
                        }
                    }
                }
            }
        }
        catch (IOException e) {
            e.printStackTrace();
        }
    }
}

","","561","<networking><encryption><aes><sha><snmp4j>","0","","0","2014-07-09 14:51:29","","4","","3298545","","2014-07-09 14:51:29","2014-07-04 10:41:23",""
"18087222","All hash values are identical using Microsoft SHA256","Using the following code I always get the same hash regardless of the input. Any ideas why that might be?
    private static SHA256 sha256;
    internal static byte[] HashForCDCR(this string value)
    {
        byte[] hash;
        using (var myStream = new System.IO.MemoryStream())
        {
            using (var sw = new System.IO.StreamWriter(myStream))
            {
                sw.Write(value);
                hash = sha256.ComputeHash(myStream);
            }
        }

        return hash;
    }

","You may need to flush your stream. For optimal performance StreamWriter doesn't write to stream immediately . It waits for its internal buffer to fill. Flushing the writer immediately flush the content of the internal buffer to underline stream.
     sw.Write(value);
     sw.Flush();
     myStream.Position = 0;
     hash = sha256.ComputeHash(myStream);

","560","<c#><hash><sha><sha256>","1","1","3","2013-08-06 22:51:35","18087660","0","1","477420","","2013-08-06 18:22:54","2013-08-06 18:00:00",""
"18087222","All hash values are identical using Microsoft SHA256","Using the following code I always get the same hash regardless of the input. Any ideas why that might be?
    private static SHA256 sha256;
    internal static byte[] HashForCDCR(this string value)
    {
        byte[] hash;
        using (var myStream = new System.IO.MemoryStream())
        {
            using (var sw = new System.IO.StreamWriter(myStream))
            {
                sw.Write(value);
                hash = sha256.ComputeHash(myStream);
            }
        }

        return hash;
    }

","You are computing hash of empty portion of the stream (the one immediately after content you wrote with sw.Write) so it always the same.
Cheap fix: sw.Flush();myStream.Position = 0;. Better fix is to finish writing and create new read only stream for encryption based on original stream:
using (var myStream = new System.IO.MemoryStream())
{
    using (var sw = new System.IO.StreamWriter(myStream))
    {
        sw.Write(value);
    }
    using (var readonlyStream = new MemoryStream(myStream.ToArray(), writable:false)
    {
       hash = sha256.ComputeHash(readonlyStream);
    }
}

","560","<c#><hash><sha><sha256>","1","3","3","2013-08-06 22:51:35","18087660","0","1","477420","","2013-08-06 18:22:54","2013-08-06 18:00:00",""
"18087222","All hash values are identical using Microsoft SHA256","Using the following code I always get the same hash regardless of the input. Any ideas why that might be?
    private static SHA256 sha256;
    internal static byte[] HashForCDCR(this string value)
    {
        byte[] hash;
        using (var myStream = new System.IO.MemoryStream())
        {
            using (var sw = new System.IO.StreamWriter(myStream))
            {
                sw.Write(value);
                hash = sha256.ComputeHash(myStream);
            }
        }

        return hash;
    }

","I will probably use the solution that Alexei Levenkov called a ""cheap fix"". However, I did come across one other way to make it work, which I will post for future readers:
var encoding = new System.Text.UTF8Encoding();
var bytes = encoding.GetBytes(value);
var hash = sha256.ComputeHash(bytes);
return hash;

Jacob
","560","<c#><hash><sha><sha256>","1","0","3","2013-08-06 22:51:35","18087660","0","1","477420","","2013-08-06 18:22:54","2013-08-06 18:00:00",""
"50038666","How to convert a crypto::sha2::Sha256 hash into a &[u8] representation?","I'm currently trying to generate an ED25519 keypair from a SHA256 hash (via rust-crypto crate):
extern crate crypto; // rust-crypto = ""0.2.36""

use crypto::ed25519;
use crypto::sha2::Sha256;
use crypto::digest::Digest;

fn main() {
    let phrase = ""purchase hobby popular celery evil fantasy someone party position gossip host gather"";
    let mut seed = Sha256::new();
    seed.input_str(&phrase);
    let (_priv, _publ) = ed25519::keypair(&seed); // expects slice
}

However, I totally fail to understand how to correctly pass the SHA256 to the ed25519::keypair() function. I traced down that &seed.result_str() results in:
""fc37862cb425ca4368e8e368c54bb6ea0a1f305a225978564d1bdabdc7d99bdb""

This is the correct hash, while &seed.result_str().as_bytes() results in:
[102, 99, 51, 55, 56, 54, 50, 99, 98, 52, 50, 53, 99, 97, 52, 51, 54, 56, 101, 56, 101, 51, 54, 56, 99, 53, 52, 98, 98, 54, 101, 97, 48, 97, 49, 102, 51, 48, 53, 97, 50, 50, 53, 57, 55, 56, 53, 54, 52, 100, 49, 98, 100, 97, 98, 100, 99, 55, 100, 57, 57, 98, 100, 98]

Which is something I do not want, something entirely different. The question now breaks down to:
   |
36 |     let (_priv, _publ) = ed25519::keypair(&seed);
   |                                           ^^^^^ expected slice, found struct `crypto::sha2::Sha256`
   |
   = note: expected type `&[u8]`
              found type `&crypto::sha2::Sha256`

How to correctly convert the crypto::sha2::Sha256 hash into a [u8] representation?
","The Sha256 API may be a little confusing at first because it is designed so that it doesn't allocate any new memory for the data. That's to avoid wasting a memory allocation, in case you want to allocate it yourself. Instead, you give it a buffer to write to:
// Create a buffer in which to write the bytes, making sure it's
// big enough for the size of the hash
let mut bytes = vec![0; seed.output_bytes()];
// Write the raw bytes from the hash into the buffer
seed.result(&mut bytes);

// A reference to a Vec can be coerced to a slice
let (_priv, _publ) = ed25519::keypair(&bytes);

","560","<rust><sha256><sha>","7","3","1","2019-01-18 17:27:31","50042649","4","","493729","","2019-01-18 17:27:31","2018-04-26 08:47:37",""
"20289971","NSString from NSData always null","I would like to sign a request with HMAC SHA512, but I seem to mess up encoding and decoding from and to NSData and NSString. I desperately tried to figure out what is wrong, but I just don't seem to get it right. 
 PSEUDOCODE:
function hmac_512(msg, sec) {
    sec = Base64Decode(sec);
    result = hmac(msg, sec, sha512);
    return Base64Encode(result);
}


secret = ""7pgj8Dm6"";
message = ""Test\0Message"";

result = hmac_512(message, secret);
if (result == ""69H45OZkKcmR9LOszbajUUPGkGT8IqasGPAWqW/1stGC2Mex2qhIB6aDbuoy7eGfMsaZiU8Y0lO3mQxlsWNPrw=="")
    print(""Success!"");
else
    printf(""Error: %s"", result);


 My implementation:
+(void)doSomeMagic{

    NSString *message = @""Test\0Message"";
    NSString *signedRequest = [self signRequestForParameterString:message];

    //checking against CORRECT (from JAVA equivalent) signed request 
    if ([signedRequest isEqualToString:@""69H45OZkKcmR9LOszbajUUPGkGT8IqasGPAWqW/1stGC2Mex2qhIB6aDbuoy7eGfMsaZiU8Y0lO3mQxlsWNPrw=="" ])
        NSLog(@""Success!"");
    else
        NSLog(@""Error!"");
}

Here is the signing method: 
+(NSString *)signRequestForParameterString:(NSString*)paramStr{

    NSString *secret = @""7pgj8Dm6"";

    // secret is base64 encoded, so I decode it 
    NSData *decodedSecret = [secret base64DecodedData];
    NSString *decodedSecretString = [NSString stringWithUTF8String:[decodedSecret bytes]];

    NSData *data = [paramStr dataUsingEncoding:NSUTF8StringEncoding];
    NSString *dataString = [NSString stringWithUTF8String:[data bytes]];


    return [self generateHMACSHA512Hash:decodedSecretString data:dataString];

}

Here is the hashing function: 
+(NSString *)generateHMACSHA512Hash:(NSString *)key data:(NSString *)data{


    const char *cKey = [key cStringUsingEncoding:NSASCIIStringEncoding];
    const char *cData = [data cStringUsingEncoding:NSASCIIStringEncoding];

    unsigned char cHMAC[CC_SHA512_DIGEST_LENGTH];

    CCHmac(kCCHmacAlgSHA512, cKey, strlen(cKey), cData, strlen(cData), cHMAC);

    NSData *HMAC = [[NSData alloc] initWithBytes:cHMAC
                                          length:sizeof(cHMAC)];

    NSString *hash = [HMAC base64EncodedString];

    return hash;

} 

I am pretty sure it is due to the encoding of the strings (decodedSecretString and dataString). decodedSecretString (decoded base64) after decoding is encoded in ASCII. However, when I call the hashing method, I encode it in ascii again, which will result in a null error. Everything is confusing me right now. 
","Your secret doesn't decode to a valid UTF-8 string, and Java allows NUL bytes in strings, but when you're converting ""Test\0Message"" to a C string and using strlen, its length is 4.
Something like this should work:
+(NSString *)signRequestForParameterString:(NSString*)paramStr{
    NSString *secret = @""7pgj8Dm6"";
    NSData *data = [paramStr dataUsingEncoding:NSUTF8StringEncoding];
    return [self generateHMACSHA512Hash:[secret base64DecodedData] data:data];
}

+(NSString *)generateHMACSHA512Hash:(NSData *)key data:(NSData *)data{
    unsigned char cHMAC[CC_SHA512_DIGEST_LENGTH];
    CCHmac(kCCHmacAlgSHA512, key.bytes, key.length, data.bytes, data.length, cHMAC);
    NSData *HMAC = [[NSData alloc] initWithBytes:cHMAC length:sizeof(cHMAC)];
    return [HMAC base64EncodedString];
}

","560","<objective-c><macos><sha><hmac><nsstringencoding>","0","2","2","2013-11-29 17:09:58","20290222","3","","","","","2013-11-29 16:27:13",""
"20289971","NSString from NSData always null","I would like to sign a request with HMAC SHA512, but I seem to mess up encoding and decoding from and to NSData and NSString. I desperately tried to figure out what is wrong, but I just don't seem to get it right. 
 PSEUDOCODE:
function hmac_512(msg, sec) {
    sec = Base64Decode(sec);
    result = hmac(msg, sec, sha512);
    return Base64Encode(result);
}


secret = ""7pgj8Dm6"";
message = ""Test\0Message"";

result = hmac_512(message, secret);
if (result == ""69H45OZkKcmR9LOszbajUUPGkGT8IqasGPAWqW/1stGC2Mex2qhIB6aDbuoy7eGfMsaZiU8Y0lO3mQxlsWNPrw=="")
    print(""Success!"");
else
    printf(""Error: %s"", result);


 My implementation:
+(void)doSomeMagic{

    NSString *message = @""Test\0Message"";
    NSString *signedRequest = [self signRequestForParameterString:message];

    //checking against CORRECT (from JAVA equivalent) signed request 
    if ([signedRequest isEqualToString:@""69H45OZkKcmR9LOszbajUUPGkGT8IqasGPAWqW/1stGC2Mex2qhIB6aDbuoy7eGfMsaZiU8Y0lO3mQxlsWNPrw=="" ])
        NSLog(@""Success!"");
    else
        NSLog(@""Error!"");
}

Here is the signing method: 
+(NSString *)signRequestForParameterString:(NSString*)paramStr{

    NSString *secret = @""7pgj8Dm6"";

    // secret is base64 encoded, so I decode it 
    NSData *decodedSecret = [secret base64DecodedData];
    NSString *decodedSecretString = [NSString stringWithUTF8String:[decodedSecret bytes]];

    NSData *data = [paramStr dataUsingEncoding:NSUTF8StringEncoding];
    NSString *dataString = [NSString stringWithUTF8String:[data bytes]];


    return [self generateHMACSHA512Hash:decodedSecretString data:dataString];

}

Here is the hashing function: 
+(NSString *)generateHMACSHA512Hash:(NSString *)key data:(NSString *)data{


    const char *cKey = [key cStringUsingEncoding:NSASCIIStringEncoding];
    const char *cData = [data cStringUsingEncoding:NSASCIIStringEncoding];

    unsigned char cHMAC[CC_SHA512_DIGEST_LENGTH];

    CCHmac(kCCHmacAlgSHA512, cKey, strlen(cKey), cData, strlen(cData), cHMAC);

    NSData *HMAC = [[NSData alloc] initWithBytes:cHMAC
                                          length:sizeof(cHMAC)];

    NSString *hash = [HMAC base64EncodedString];

    return hash;

} 

I am pretty sure it is due to the encoding of the strings (decodedSecretString and dataString). decodedSecretString (decoded base64) after decoding is encoded in ASCII. However, when I call the hashing method, I encode it in ascii again, which will result in a null error. Everything is confusing me right now. 
","When doing HMAC or other cryptographic functions, you should build up some fundamental methods/functions that don't deal with strings first. Then you can create wrapper methods that decode/encode string data or digests in a convenient way.
+ (NSData *)dataBySigningData:(NSData *)data withKey:(NSData *)key
{
  unsigned char cHMAC[CC_SHA512_DIGEST_LENGTH];
  CCHmac(kCCHmacAlgSHA512, [key bytes], [key length], [data bytes], [data lenght], cHMAC);
  return [[NSData alloc] initWithBytes:cHMAC length:CC_SHA512_DIGEST_LENGTH];
}

+ (NSData *)dataBySigningMessage:(NSString *)message withKey:(NSData *)key
{
  return [self dataBySigningData:[message dataUsingEncoding:NSUTF8StringEncoding]
                         withKey:[key dataUsingEncoding:NSUTF8StringEncoding]];
}

(Note: this code is not tested, just hacked together in a text editor)
Don't worry about the string representation of your key or data. Then you can go from there, e.g. getting the base64 encoding of the digest.
Cryptographic functions DO NOT CARE about strings or text encodings. They care about bytes. Strings (in C, since they are null-terminated) are a mere subset of what can be represented in data. So it would be severely limiting to deal with strings.
","560","<objective-c><macos><sha><hmac><nsstringencoding>","0","0","2","2013-11-29 17:09:58","20290222","3","","","","","2013-11-29 16:27:13",""
"17445217","Unique ID for Android device","I need an ID which will be unique for each device.  This ID will be stored in the server and will be used to identify a device. I am thinking of using IMEI number but I dont want to send the IMEI number to server for privacy reason.
So, I am thinking of doing this


Get IMEI number.
Hash the IMEI number using SHA-1.
Send this to server


Is this a reliable way of getting unique device ID without privacy concerns? Please advice.
","You can use the ANDROID_ID but in certain devices it is a bug and it seems to return the same id. Check the reference for the same https://groups.google.com/forum/#!topic/android-developers/U4mOUI-rRPY. As a fall back i do the following:
 String deviceId = Secure.getString(ActivationActivity.this.getContentResolver(), Secure.ANDROID_ID);
                                      if (""9774d56d682e549c"".equals(deviceId)) {
                                        deviceId=  UUID.randomUUID().toString(); 
                                      }

","557","<android><sha><imei>","1","0","2","2013-07-03 10:31:36","","0","","","","","2013-07-03 10:11:11",""
"17445217","Unique ID for Android device","I need an ID which will be unique for each device.  This ID will be stored in the server and will be used to identify a device. I am thinking of using IMEI number but I dont want to send the IMEI number to server for privacy reason.
So, I am thinking of doing this


Get IMEI number.
Hash the IMEI number using SHA-1.
Send this to server


Is this a reliable way of getting unique device ID without privacy concerns? Please advice.
","Get IMEI number using following
 String identifier = null;
 TelephonyManager tm =   (TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE);
 if (tm != null)
  identifier = tm.getDeviceId();
 if (identifier == null || identifier .length() == 0)
  identifier = Secure.getString(activity.getContentResolver(),Secure.ANDROID_ID);

and add this permission :
 <uses-permission android:name=""android.permission.READ_PHONE_STATE"" />

","557","<android><sha><imei>","1","1","2","2013-07-03 10:31:36","","0","","","","","2013-07-03 10:11:11",""
"40398664","sha-256 without salt not always returning the same hash","Can anyone tell me why the following code does not always return the same hash? AFAIK the only way a hash can be different is due to a random salt, but according to the documentation I'm disabling salts by setting the salt size to 0.
public static void main(String[] args ) {
    char[] password = ""test_pass"".toCharArray();
    String str = encodePassword(password);

    System.out.printf(
        ""Byte digest '%s'\n"", 
        String.valueOf(Hex.encodeHex(Base64.decodeBase64(str)))
    );
}

static StandardByteDigester digester = new StandardByteDigester();
{
    digester.setAlgorithm(""SHA-256"");
    digester.setIterations(100000);
    digester.setSaltSizeBytes(0);
    digester.initialize();
}

public static String encodePassword(char[] rawPass) {
    return new String(Base64.encodeBase64(digester.digest(toBytes(rawPass))));
}

public static byte[] toBytes(char[] ch) { 
    Charset charset = Charset.defaultCharset();
    ByteBuffer buff = charset.encode(CharBuffer.wrap(ch));
    byte[] tmp = new byte[buff.limit()];
    buff.get(tmp);
    return tmp;    
}

","Your bug is related to the fact that you initialize your static field StandardByteDigester digester in an instance initializer block instead of a static initializer bloc such that it is never called as you never create an instance of your class so at the end it uses the default configuration with random salt.
Try this:
static {
    digester.setAlgorithm(""SHA-256"");
    digester.setIterations(100000);
    digester.setSaltSizeBytes(0);
    digester.initialize();
}


Your code could be simplified if your method encodePassword took a String instead of a char array as you could simply call getBytes(Charset) as next:
public static String encodePassword(String rawPass) {
    return new String(
        Base64.encodeBase64(digester.digest(rawPass.getBytes(StandardCharsets.UTF_8))),
        StandardCharsets.US_ASCII
    );
}

NB: It is not a good practice to rely on the platform's default charset as your code would then be platform's dependent so here as base 64 characters are all included in US_ASCII, let's use this charset to decode.
","553","<java><encryption><sha256><sha><jasypt>","1","3","1","2016-11-03 11:57:04","40399048","1","","1997376","","2016-11-03 10:07:12","2016-11-03 10:03:25",""
"46045821","Jenkins Invalid Git Revisions","In Jenkins I'm using the XML API to get the SHA(s) of a commit, e.g.
http://jenkins/view/job/test/470/api/xml?xpath=//lastBuiltRevision/SHA1&wrapper=SHAS
I put it in a wrapper because often it contains more than one SHA and I'm going to process these further.
However one of the SHAs always is invalid...
<SHAS>
<SHA1>cbf26ebac6b4b3860a794c0b1ad86758e7757a3a</SHA1>
<SHA1>7e861132ce428911585a818107ba35c44cf12bbf</SHA1>
</SHAS>

The second SHA is fine but when I check the first SHA here on our GIT repo commits it leads to an error page:

Commit 'cbf26ebac6b4b3860a794c0b1ad86758e7757a3a' does not exist in
  repository 'test'.

Does anyone know why we get invalid SHAs on Jenkins and how to resolve this issue?
UPDATE:
The complete lastBuiltRevision ...
<wrapped>
    <lastBuiltRevision>
        <SHA1>cbf26ebac6b4b3860a794c0b1ad86758e7757a3a</SHA1>
        <branch>
            <SHA1>cbf26ebac6b4b3860a794c0b1ad86758e7757a3a</SHA1>
            <name>origin/master</name>
        </branch>
    </lastBuiltRevision>
    <lastBuiltRevision>
        <SHA1>7e861132ce428911585a818107ba35c44cf12bbf</SHA1>
        <branch>
            <SHA1>7e861132ce428911585a818107ba35c44cf12bbf</SHA1>
            <name>refs/remotes/origin/develop</name>
        </branch>
    </lastBuiltRevision>
</wrapped>

","My guess is that the scm plugin parses the build log after the build run to extract the revision data. If you use the Multiple SCM plugin, a Jenkins Pipeline with multiple git or checkout commands or a Jenkins Shared Library it is very well possible to end up with multiple scm revisions from multiple repositories (we currently have 6 in our of jobs...).
I don't know if it is possible to ignore parts of the log for the SCM revision parsing, otherwise you'll have to do some filtering on your side of the request. If the different revisions happen in order in the log, then you can choose to always discard the first or second one. 
","552","<git><jenkins><continuous-integration><git-commit><sha>","3","0","2","2017-09-05 18:40:39","","3","1","356105","","2017-09-05 05:44:38","2017-09-05 01:30:02",""
"46045821","Jenkins Invalid Git Revisions","In Jenkins I'm using the XML API to get the SHA(s) of a commit, e.g.
http://jenkins/view/job/test/470/api/xml?xpath=//lastBuiltRevision/SHA1&wrapper=SHAS
I put it in a wrapper because often it contains more than one SHA and I'm going to process these further.
However one of the SHAs always is invalid...
<SHAS>
<SHA1>cbf26ebac6b4b3860a794c0b1ad86758e7757a3a</SHA1>
<SHA1>7e861132ce428911585a818107ba35c44cf12bbf</SHA1>
</SHAS>

The second SHA is fine but when I check the first SHA here on our GIT repo commits it leads to an error page:

Commit 'cbf26ebac6b4b3860a794c0b1ad86758e7757a3a' does not exist in
  repository 'test'.

Does anyone know why we get invalid SHAs on Jenkins and how to resolve this issue?
UPDATE:
The complete lastBuiltRevision ...
<wrapped>
    <lastBuiltRevision>
        <SHA1>cbf26ebac6b4b3860a794c0b1ad86758e7757a3a</SHA1>
        <branch>
            <SHA1>cbf26ebac6b4b3860a794c0b1ad86758e7757a3a</SHA1>
            <name>origin/master</name>
        </branch>
    </lastBuiltRevision>
    <lastBuiltRevision>
        <SHA1>7e861132ce428911585a818107ba35c44cf12bbf</SHA1>
        <branch>
            <SHA1>7e861132ce428911585a818107ba35c44cf12bbf</SHA1>
            <name>refs/remotes/origin/develop</name>
        </branch>
    </lastBuiltRevision>
</wrapped>

","One possible case is when:

Jenkins records a SHA1 for origin/master in its lastBuiltRevision
someone force push (git push --force) and overwrite the SHA1 with a new history

","552","<git><jenkins><continuous-integration><git-commit><sha>","3","0","2","2017-09-05 18:40:39","","3","1","356105","","2017-09-05 05:44:38","2017-09-05 01:30:02",""
"6468940","Variable of unspecified type in C#?","Is it possible for me to declare a variable, without a type, then specify the type based on some conditions? For example, I want to create a SHA Hash object based what size the user would like to use:
        //get the Sha hasher
        var shaHash;

        switch (this.HASH_ALGORITHM)
        {
            case HashAlgorithm.SHA256:  //HashAlgorithm is an enum.
                shaHash = SHA256.Create();
                break;
            case HashAlgorithm.SHA384:
                shaHash = SHA384.Create();
                break;
            case HashAlgorithm.SHA512:
                shaHash = SHA512.Create();
                break;
        }

        //... do hashing

Is this possible?
","In c# 4 you can declare a dynamic type.
","549","<c#><types><sha>","4","0","6","2012-04-19 13:53:17","6468976","5","0","","","","2011-06-24 14:06:56",""
"6468940","Variable of unspecified type in C#?","Is it possible for me to declare a variable, without a type, then specify the type based on some conditions? For example, I want to create a SHA Hash object based what size the user would like to use:
        //get the Sha hasher
        var shaHash;

        switch (this.HASH_ALGORITHM)
        {
            case HashAlgorithm.SHA256:  //HashAlgorithm is an enum.
                shaHash = SHA256.Create();
                break;
            case HashAlgorithm.SHA384:
                shaHash = SHA384.Create();
                break;
            case HashAlgorithm.SHA512:
                shaHash = SHA512.Create();
                break;
        }

        //... do hashing

Is this possible?
","No, that won't work. But, given that all three of those types inherit from System.Security.Cryptography.HashAlgorithm, you could declare the variable of that type:
HashAlgorithm shaHash;

switch(this.HASH_ALGORITHM)
{
    // snip
}

Edit
Just to add, the reason that var shaHash; will not work is because that var is just a shorthand way of saying ""I'm not sure of the best type to use here, so please infer it for me"". The compiler requires that you specify an initial value so that it can determine the best type to use.
","549","<c#><types><sha>","4","18","6","2012-04-19 13:53:17","6468976","5","0","","","","2011-06-24 14:06:56",""
"6468940","Variable of unspecified type in C#?","Is it possible for me to declare a variable, without a type, then specify the type based on some conditions? For example, I want to create a SHA Hash object based what size the user would like to use:
        //get the Sha hasher
        var shaHash;

        switch (this.HASH_ALGORITHM)
        {
            case HashAlgorithm.SHA256:  //HashAlgorithm is an enum.
                shaHash = SHA256.Create();
                break;
            case HashAlgorithm.SHA384:
                shaHash = SHA384.Create();
                break;
            case HashAlgorithm.SHA512:
                shaHash = SHA512.Create();
                break;
        }

        //... do hashing

Is this possible?
","Not without resorting to dynamic; you need to use inheritance or interfaces for this. So the type could be e.g. object, or if the different SHA classes have another common superclass or if they implement some interface, you could use that superclass or interface. Otherwise, you could create adapter classes with a common superclass and wrap the SHA objects in the adapters.
","549","<c#><types><sha>","4","2","6","2012-04-19 13:53:17","6468976","5","0","","","","2011-06-24 14:06:56",""
"6468940","Variable of unspecified type in C#?","Is it possible for me to declare a variable, without a type, then specify the type based on some conditions? For example, I want to create a SHA Hash object based what size the user would like to use:
        //get the Sha hasher
        var shaHash;

        switch (this.HASH_ALGORITHM)
        {
            case HashAlgorithm.SHA256:  //HashAlgorithm is an enum.
                shaHash = SHA256.Create();
                break;
            case HashAlgorithm.SHA384:
                shaHash = SHA384.Create();
                break;
            case HashAlgorithm.SHA512:
                shaHash = SHA512.Create();
                break;
        }

        //... do hashing

Is this possible?
","Use base type:    
HashAlgorithm shaHash = null;

","549","<c#><types><sha>","4","2","6","2012-04-19 13:53:17","6468976","5","0","","","","2011-06-24 14:06:56",""
"6468940","Variable of unspecified type in C#?","Is it possible for me to declare a variable, without a type, then specify the type based on some conditions? For example, I want to create a SHA Hash object based what size the user would like to use:
        //get the Sha hasher
        var shaHash;

        switch (this.HASH_ALGORITHM)
        {
            case HashAlgorithm.SHA256:  //HashAlgorithm is an enum.
                shaHash = SHA256.Create();
                break;
            case HashAlgorithm.SHA384:
                shaHash = SHA384.Create();
                break;
            case HashAlgorithm.SHA512:
                shaHash = SHA512.Create();
                break;
        }

        //... do hashing

Is this possible?
","It is not posible. In order to use var you need the compiler to know what will the type of your variable be and that is only posible when you assign a value. Also you cannot say var varname = null; because null does not define a type.
","549","<c#><types><sha>","4","1","6","2012-04-19 13:53:17","6468976","5","0","","","","2011-06-24 14:06:56",""
"6468940","Variable of unspecified type in C#?","Is it possible for me to declare a variable, without a type, then specify the type based on some conditions? For example, I want to create a SHA Hash object based what size the user would like to use:
        //get the Sha hasher
        var shaHash;

        switch (this.HASH_ALGORITHM)
        {
            case HashAlgorithm.SHA256:  //HashAlgorithm is an enum.
                shaHash = SHA256.Create();
                break;
            case HashAlgorithm.SHA384:
                shaHash = SHA384.Create();
                break;
            case HashAlgorithm.SHA512:
                shaHash = SHA512.Create();
                break;
        }

        //... do hashing

Is this possible?
","If you have a parent class in which you declare a type, and 3 other classes which inherit after the parent class (children), then you can create a method which would be declared as returning the parent type, but inside you would return each of the child types. 
This will work and compile as the parent type will be automatically casted on to a child type.
It will not work the other way round however (you cannot cast a type from a child to parent). 
","549","<c#><types><sha>","4","1","6","2012-04-19 13:53:17","6468976","5","0","","","","2011-06-24 14:06:56",""
"36813926","SHA1 not producing same hash value for same string input?","I am busy with a login JFrame where the system will request the user to enter a username and password. The passwords are hashed using SHA-1 and stored in MySQL
The problem I am having is that the output is not consistently the same for the exact same password string.
I need to have a hash using SHA1 that will produce the same output so that I can verify it against the hash in the database, to prove that the user has entered the correct password.
Here is my coding for the sha1. 
try
        {
            String password = txtPassword.getPassword().toString();

            MessageDigest md = MessageDigest.getInstance(""SHA-1"");
            md.update(password.getBytes());

            byte byteData[] = md.digest();

            //convert the byte to hex format
            StringBuffer sb = new StringBuffer();
            for (int i = 0; i < byteData.length; i++) {
             sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));
            }

            System.out.println(""Hex format : "" + sb.toString());


        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(this, e);
        }

Is there a problem with the coding above that will cause it to produce different outputs for the same string. 
","String password = txtPassword.getPassword().toString();

What is the code for this? This is most likely where the issue is, since setting password = ""test"" will give you the same results repeatedly.
Edit :
Try this :    String password = new String(txtPassword.getPassword());
","547","<java><mysql><netbeans><hash><sha>","1","1","2","2016-04-23 17:43:46","","4","2","6139543","","2016-04-23 17:16:08","2016-04-23 17:11:56",""
"36813926","SHA1 not producing same hash value for same string input?","I am busy with a login JFrame where the system will request the user to enter a username and password. The passwords are hashed using SHA-1 and stored in MySQL
The problem I am having is that the output is not consistently the same for the exact same password string.
I need to have a hash using SHA1 that will produce the same output so that I can verify it against the hash in the database, to prove that the user has entered the correct password.
Here is my coding for the sha1. 
try
        {
            String password = txtPassword.getPassword().toString();

            MessageDigest md = MessageDigest.getInstance(""SHA-1"");
            md.update(password.getBytes());

            byte byteData[] = md.digest();

            //convert the byte to hex format
            StringBuffer sb = new StringBuffer();
            for (int i = 0; i < byteData.length; i++) {
             sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));
            }

            System.out.println(""Hex format : "" + sb.toString());


        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(this, e);
        }

Is there a problem with the coding above that will cause it to produce different outputs for the same string. 
","I have been trying different coding and I have found that the problem was with the obtaining the password from  the JPasswordField.
The solution I came to which produced the same hash for the password was one line that I had to edit from  String password = txtPassword.getPassword().toString();  to this  String password = String.valueOf(txtPassword.getText());
I realized that the problem was with reading it as a string not as a value.
Thanks for responses 
","547","<java><mysql><netbeans><hash><sha>","1","1","2","2016-04-23 17:43:46","","4","2","6139543","","2016-04-23 17:16:08","2016-04-23 17:11:56",""
"20889675","Performance of File Hash algorithms","In my Perl application, I need compare two versions of a file and detect whether they have changed. 
I'm trying to choose between MD5 or SHA. This is not about security. This is about fastest way to compare files. I'm inclined towards MD5.
However, when I ran benchmarks, it suggests otherwise.
Any recommendations?
Here's a benchmark I ran with the largest file in my app.
Benchmark: timing 10000000 iterations of MD5, SHA...
   MD5: -0.199009 wallclock secs ( 0.07 usr +  0.01 sys =  0.08 CPU) @ 125000000.00/s (n=10000000)
        (warning: too few iterations for a reliable count)
   SHA: 0.494412 wallclock secs ( 0.06 usr +  0.00 sys =  0.06 CPU) @ 166666666.67/s (n=10000000)
        (warning: too few iterations for a reliable count)
       Rate  MD5  SHA
MD5 125000000/s   -- -25%
SHA 166666667/s  33%   --

","MD5 may be faster to compute than SHA1 because of its simpler structure. Then again, getting the data from the disk will be slower than keeping MD5 or SHA1 checksum up to date, so it will not really matter in practice.
","546","<perl><md5><benchmarking><sha><filecompare>","0","6","1","2014-01-02 18:52:38","","3","","","","","2014-01-02 18:48:00",""
"42237018","Bundle sha3/binary modules with Webpack","Webpack warns when I bundle my source as it can't resolve the 'sha3' module.
$ npm run build
WARNING in ./~/keccakjs/index.js
Module not found: Error: Can't resolve 'sha3' in '<PROJ>\node_modules\keccakjs'
 @ ./~/keccakjs/index.js 2:19-34
 @ ./~/<lib>/index.js
 @ ./lib/<file>.js

Reason being the sha3 library has no js files.

Creating library <proj>\node_modules\sha3\build\Release\sha3.lib and object <proj>\node_modules\sha3\build\Release\sha3.exp

I am able to run require('sha3') in my project, however webpack cannot resolve it.
I looked at the docs here, regarding how webpack resolves libs. 
Could someone point me to how I can include sha3 in/with my bundle.
My Webpack config:
module.exports = {
    target: 'node',
    entry: ""./<lib>.js"",
    devtool: ""source-map"",
    node: {
        __dirname: false,
        __filename: false,
    },
    output: {
        path: ""./dist"",
        filename: ""<lib>.min.js""
    },
    plugins: [
        new webpack.optimize.OccurrenceOrderPlugin(),
        new webpack.DefinePlugin({
            'process.env.NODE_ENV': JSON.stringify('production')
        })
    ]
}

","Try using the binary loader from webpack from here. Then you can:
1) Define loaders in your WebPack config:
module.exports = {
    target: 'node',
    entry: ""./<lib>.js"",
    devtool: ""source-map"",
    node: {
        __dirname: false,
        __filename: false,
    },
    output: {
        path: ""./dist"",
        filename: ""<lib>.min.js""
    },
    plugins: [
        new webpack.optimize.OccurrenceOrderPlugin(),
        new webpack.DefinePlugin({
            'process.env.NODE_ENV': JSON.stringify('production')
        })
    ],
    module: {
        loaders: [
            { test: /sha3$/, loader: 'binary' }
        ]
    }
}

2) Use the loader directly in your import:
require('binary!sha3');

","535","<node.js><webpack><sha>","0","1","2","2017-04-13 19:36:33","43287562","0","","2162893","","2017-04-13 19:36:33","2017-02-14 21:57:55",""
"42237018","Bundle sha3/binary modules with Webpack","Webpack warns when I bundle my source as it can't resolve the 'sha3' module.
$ npm run build
WARNING in ./~/keccakjs/index.js
Module not found: Error: Can't resolve 'sha3' in '<PROJ>\node_modules\keccakjs'
 @ ./~/keccakjs/index.js 2:19-34
 @ ./~/<lib>/index.js
 @ ./lib/<file>.js

Reason being the sha3 library has no js files.

Creating library <proj>\node_modules\sha3\build\Release\sha3.lib and object <proj>\node_modules\sha3\build\Release\sha3.exp

I am able to run require('sha3') in my project, however webpack cannot resolve it.
I looked at the docs here, regarding how webpack resolves libs. 
Could someone point me to how I can include sha3 in/with my bundle.
My Webpack config:
module.exports = {
    target: 'node',
    entry: ""./<lib>.js"",
    devtool: ""source-map"",
    node: {
        __dirname: false,
        __filename: false,
    },
    output: {
        path: ""./dist"",
        filename: ""<lib>.min.js""
    },
    plugins: [
        new webpack.optimize.OccurrenceOrderPlugin(),
        new webpack.DefinePlugin({
            'process.env.NODE_ENV': JSON.stringify('production')
        })
    ]
}

","What actually ended up working for me was:
resolve: {
    alias: {
        sha3: path.join(__dirname,'node_modules/sha3/build/Release/sha3.node')
    },
},
module: {
    rules: [
        {test: /\.node$/, use: 'node-loader'},
    ]
},

That way I told it which file to import, when it wasn't able to resolve sha3. And the node-loader packages in the .node file!
","535","<node.js><webpack><sha>","0","1","2","2017-04-13 19:36:33","43287562","0","","2162893","","2017-04-13 19:36:33","2017-02-14 21:57:55",""
"45394304","SHA256: different output in Swift and Java?","I´m trying to encode a String in SHA256. I know how the output should look like.
This I´ve got from a working Java:
string = ""1234nonce=1234""

SHA256 Hash from string in Java:

string.digest() =
[-29, -80, -60, 66, -104, -4, 28, 20, -102, -5, -12, -56, -103, 111,
-71, 36, 39, -82, 65, -28, 100, -101, -109, 76, -92, -107, -103, 27,
120, 82, -72, 85]

Now I need to get the same result in Swift:
 func sha256() {
        let string = ""1234nonce=1234""
        let intArray = [UInt8](string.utf8)
        let data = Data(bytes: intArray)

        var hash = [UInt8](repeating: 0,  count: Int(CC_SHA256_DIGEST_LENGTH))
        data.withUnsafeBytes {
            _ = CC_SHA256($0, CC_LONG(data.count), &hash)
        }
        print(hash)
        return Data(bytes: hash)
 }

But the result looks like this:
[218, 207, 142, 73, 87, 235, 210, 73, 201, 67, 19, 33, 57, 146, 69, 48, 51, 56, 0, 212, 172, 114, 118, 31, 102, 19, 175, 51, 153, 230, 143, 67]

How the first result is generated in Java, you can see here in the last answer. 
(There, nonce + data corrsponds to ""1234nonce=1234"")
I´m wondering if there is something I´m doing fundamentally wrong. Any kind of help is much appreciated.
","Short answer
It seems your SHA-256 hash algorithm implementation done in the Swift language is correct.
Long answer
The Java example you are referring to does not just contain the SHA-256 hash algorithm implementation, but also contains the HMAC-SHA-512 algorithm implementation to calculate the signature (?).
All in all, if there is a need of the SHA-256 algorithm only, please check the following draft Java implementation:
package com.thecompany.test;

import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

class Program {
    public static void main(final String[] args) throws NoSuchAlgorithmException {
        // Input.
        final String input = ""1234nonce=1234"";

        // Processing.
        final byte[] output = sha256(input);

        // Output.
        System.out.printf(""Signed output: %s.%n"", Arrays.toString(output));

        final List<Integer> unsignedOutput = unsignedIntStream(output)
            .boxed()
            .collect(Collectors.toList());
        System.out.printf(""Unsigned output: %s.%n"", unsignedOutput);
    }

    private static IntStream unsignedIntStream(final byte[] array) {
        return IntStream
            .range(0, array.length)
            .map(index -> Byte.toUnsignedInt(array[index]));
    }

    private static byte[] sha256(final String text) throws NoSuchAlgorithmException {
        final MessageDigest digest = MessageDigest.getInstance(""SHA-256"");
        return digest.digest(text.getBytes(StandardCharsets.UTF_8));
    }
}

The program produces the following output:
Signed output: [-38, -49, -114, 73, 87, -21, -46, 73, -55, 67, 19, 33, 57, -110, 69, 48, 51, 56, 0, -44, -84, 114, 118, 31, 102, 19, -81, 51, -103, -26, -113, 67].
Unsigned output: [218, 207, 142, 73, 87, 235, 210, 73, 201, 67, 19, 33, 57, 146, 69, 48, 51, 56, 0, 212, 172, 114, 118, 31, 102, 19, 175, 51, 153, 230, 143, 67].

Hope this helps.
","534","<java><ios><swift><cocoa><sha>","0","1","1","2017-07-29 22:51:38","45394799","0","3","8150354","","2017-07-29 21:42:52","2017-07-29 21:37:48",""
"48998952","C# RSACryptoServiceProvider - JWT RS256 Validation Fails","(I've already been thru a lot of Stackoverflow/google results trying to find a fix for this.)
I am validating JWTs signed with RS256 using the default C# JwtSecurityTokenHandler. In some cases, the validation fails when it shouldn't. Concretely, tokens from a given Authorization Server validate properly while tokens form another Authorization Server won't.
BUT... Using the same JWTs and RSA Certificates on JWT.IO validates ALL the tokens succesfully. This is the part that makes me believe that there's something wrong/unusual in the C# implementation. I am also able to validate the same JWTs using the same Certificates using the oidc-client JavaScript library. The one place where the validation sometimes fails is in C#.
I traced the error down to JwtSecurityTokenHandler's ValidateSignature method. Searching the original github code and googling about RSA, I came down with this bare-bone method which allows me to reproduce the problem in a plain console app:
static void ValidateJWT(string token, string modulus, string exponent)
{
    string tokenStr = token;
    JwtSecurityToken st = new JwtSecurityToken(tokenStr);
    string[] tokenParts = tokenStr.Split('.');

    RSACryptoServiceProvider rsa = new RSACryptoServiceProvider();
    rsa.ImportParameters(
        new RSAParameters()
        {
            Modulus = FromBase64Url(modulus),
            Exponent = FromBase64Url(exponent)
        });

    SHA256 sha256 = SHA256.Create();
    byte[] hash = sha256.ComputeHash(Encoding.UTF8.GetBytes(tokenParts[0] + '.' + tokenParts[1]));

    RSAPKCS1SignatureDeformatter rsaDeformatter = new RSAPKCS1SignatureDeformatter(rsa);
    rsaDeformatter.SetHashAlgorithm(""SHA256"");

    var valid = rsaDeformatter.VerifySignature(hash, FromBase64Url(tokenParts[2]));
    Console.WriteLine(valid); // sometimes false when it should be true
}

private static byte[] FromBase64Url(string base64Url)
{
    string padded = base64Url.Length % 4 == 0
        ? base64Url : base64Url + ""===="".Substring(base64Url.Length % 4);
    string base64 = padded.Replace(""_"", ""/"")
                            .Replace(""-"", ""+"");
    return Convert.FromBase64String(base64);
}

It is from that RSACryptoServiceProvider and using RSAKeys from here (https://gist.github.com/therightstuff/aa65356e95f8d0aae888e9f61aa29414) that I was able to Export the Public Key that allows me to validate JWTs successfully on JWT.IO.
string publicKey = RSAKeys.ExportPublicKey(rsa);

I can't provide actual JWTs to this post (they expire anyways), but does anyone knows of a crypto behavior specific to C# that could explain these validation errors, which don't happen in JavaScript nor on JWT.IO ?
And if so, any solution for this?
Thanks,
Martin
","https://tools.ietf.org/html/rfc7518#section-6.3.1.1

Note that implementers have found that some cryptographic libraries
     prefix an extra zero-valued octet to the modulus representations they
     return, for instance, returning 257 octets for a 2048-bit key, rather
     than 256.  Implementations using such libraries will need to take
     care to omit the extra octet from the base64url-encoded
     representation.

In the case of one of the tokens you provided on a copy of this issue elsewhere, the decode of the modulus includes a prefixed 0x00 byte.  This causes downstream problems.  But you can fix their non-conformance.
byte[] modulusBytes = FromBase64Url(modulus);

if (modulusBytes[0] == 0)
{
    byte[] tmp = new byte[modulusBytes.Length - 1];
    Buffer.BlockCopy(modulusBytes, 1, tmp, 0, tmp.Length);
    modulusBytes = tmp;
}

It looks like RS256 treats the signature as opaque bytes, so it will encode it as-is.  So you probably don't need this correction (though it's where my investigation started):
byte[] sig = FromBase64Url(tokenParts[2]);

if (sig.Length < modulusBytes.Length)
{
    byte[] tmp = new byte[modulusBytes.Length];
    Buffer.BlockCopy(sig, 0, tmp, tmp.Length - sig.Length, sig.Length);
    sig = tmp;
}

","530","<c#><.net><jwt><rsa><sha>","0","0","1","2018-03-01 21:33:43","49059037","0","1","","","","2018-02-26 23:51:17",""
"33867530","New SHA256 signature for Redsys in Ruby on Rails","I have a Ruby on Rails application with Redsys payment platform. They will migrate from old SHA1 to SHA256 in order to keep platform secure.
They give you some examples written in JAVA and PHP but when I write the code in Ruby on Rails, it doesn't work.
Merchant parameters
def get_merchant_parameters
  amount = @order.total * 100
  hash_params = {
    ""Ds_Merchant_Amount""=>amount,
    ""Ds_Merchant_Currency""=>""978"",
    ""Ds_Merchant_Order""=>@order.code,
    ""Ds_Merchant_ProductDescription""=>"" (cod. #{@order.code})"",
    ""Ds_Merchant_Titular""=>@order.bill_to_vat_code,
    ""Ds_Merchant_MerchantCode""=>tpv_commerce_key,
    ""Ds_Merchant_MerchantURL""=>payment_verification_url,
    ""Ds_Merchant_UrlOK""=>payment_ok_url,
    ""Ds_Merchant_UrlKO""=>payment_ko_url,
    ""Ds_Merchant_MerchantName""=>""xxxx"",
    ""Ds_Merchant_ConsumerLanguage""=>""001"",
    ""Ds_Merchant_Terminal""=>""001"",
    ""Ds_Merchant_TransactionType""=>""0""
  }
  Base64.encode64(hash_params.to_json)
end

Signature
def set_electronic_firm
  # 3DES
  des = OpenSSL::Cipher::Cipher.new('DES3')
  des.key = Base64.decode64(tpv_key)

  # ENCRYPTION
  des.encrypt
  key = des.update(@order.code) + des.final

  # SHA256
  Base64.encode64(OpenSSL::HMAC.digest(OpenSSL::Digest.new('sha256'), key, @merchant_parameters)).strip()
end

Post form values
@signature_version = ""HMAC_SHA256_V1""
@merchant_parameters = get_merchant_parameters
@signature = set_electronic_firm

Can anybody notice where am I wrong?
Thank you! 
","I found the solution!
Openssl does not support Zeros Padding out of the box but you can do this yourself by telling Openssl not to pad the data and ensuring the data is a multiple of the block size by adding ‘/0’ characters at the end of the data.
Solution
def set_electronic_firm
    # 3DES
    des = OpenSSL::Cipher::Cipher.new('des3')
    des.key = Base64.decode64(tpv_key)
    block_length = 8
    des.padding = 0

    # ENCRYPTION
    des.encrypt
    order = @order.code
    order += ""\0"" until order.bytesize % block_length == 0
    key = des.update(order) + des.final

    # SHA256
    return Base64.encode64(OpenSSL::HMAC.digest(OpenSSL::Digest.new('sha256'), key, @merchant_parameters)).gsub(""\n"",'').strip()
end

","530","<ruby-on-rails><sha>","1","0","1","2015-11-23 15:13:06","","0","","2075801","","2015-11-23 09:31:26","2015-11-23 09:28:45",""
"11731002","can't insert special hash code into database","I wanna save hashed password in mysql database,so I develop following method in CodeIgniter.
private function hashing($password = '',$mail = '')
{
    $hashcode = md5($password, $mail);
    return sha1($hashcode,md5($hashcode.$mail));
}

for insert:
$data = array('mail'=>$mail,'password'=>$password,'actived'=>1,'time'=>time());
$this->db->insert('users', $data);

other field inserted correctly instead password.
it will generate something like
òLmy­ÉZÔe+ú§3GèÇu‘
it can't be saved in mysql database.where is the problem?
edit database Collation is utf8_unicode_ci
edit I'm using CodeIgniter,so it doesn't need mysql_real_...
","You probably meant to do this:
return sha1($hashcode . md5($hashcode.$mail));

Instead of this:
return sha1($hashcode,md5($hashcode.$mail));

The second argument to sha1() is a boolean value, controlling whether it returns the hash in raw or string format (false = string, which is what you want to insert).
http://php.net/manual/en/function.sha1.php
","528","<php><mysql><hash><md5><sha>","-1","2","2","2012-07-30 23:24:37","11731081","2","","1041299","","2012-07-30 23:17:37","2012-07-30 23:11:35",""
"11731002","can't insert special hash code into database","I wanna save hashed password in mysql database,so I develop following method in CodeIgniter.
private function hashing($password = '',$mail = '')
{
    $hashcode = md5($password, $mail);
    return sha1($hashcode,md5($hashcode.$mail));
}

for insert:
$data = array('mail'=>$mail,'password'=>$password,'actived'=>1,'time'=>time());
$this->db->insert('users', $data);

other field inserted correctly instead password.
it will generate something like
òLmy­ÉZÔe+ú§3GèÇu‘
it can't be saved in mysql database.where is the problem?
edit database Collation is utf8_unicode_ci
edit I'm using CodeIgniter,so it doesn't need mysql_real_...
","You're not using the function sha1 correctly, its signature is
string sha1 ( string $str [, bool $raw_output = false ] )

because the md5 function will evaluate to something that's not false (some string) you'll get raw binary output.
By the way, you're making the same mistake with the md5 function, it has the same signature as sha1
string md5 ( string $str [, bool $raw_output = false ] )

","528","<php><mysql><hash><md5><sha>","-1","2","2","2012-07-30 23:24:37","11731081","2","","1041299","","2012-07-30 23:17:37","2012-07-30 23:11:35",""
"5399276","How to compute a reasonable number of bits for a checksum?","I have around 1500 bytes of data that I want to construct a checksum for so that if the data gets corrupted the chances of the checksum still matching the data is less than say 1 in 10^15, i.e. a low enough probability that I can treat it as it is never going to happen.
The question is how many bits should I compute?  I have a sha-160 computation that gives me a 160 bit hash of my data, but I expect this is way larger than necessary.  So I'm thinking I could truncate the resulting hash down to say the low 40 bits and use that as a sufficiently large bit pattern that if the data gets corrupted, I will most likely detect it.
So the question is two fold, how many bits is good enough and is taking the lower bits of a sha-160 hash a good approach to take?
","You can use the table here to determine approximately how many bits you need for your desired error detection rate.
","521","<hash><probability><checksum><sha>","1","2","1","2011-03-22 23:54:52","5399333","0","","115751","","2011-03-22 23:53:10","2011-03-22 23:48:01",""
"26445403","OpenSSL does not match Python hashlib","I am new to using the OpenSSL library and I cannot get its output to match the output from python's crypto libraries. Below is an example.
Python Code:
import hmac

secret = ""asdf1234""
string = '{""request""}'

hmac.new(secret, string, hashlib.sha384).hexdigest()
    '92904f1b3c210a4fb19f476c19f24452717e85329aa9ffaba4a5fbe1111c2e3fa7f5a5fb35fdc58b3d158f5f886c3d02'

OpenSSl:
echo -n {""request""} | openssl dgst -sha384 -hmac asdf1234 -hex

(stdin)= 4c3d525b8a7095b9063a3bd974e56f0a5872399365912297d6ee18e400d2b55d0142395ba5fb4f33655ceca209ba9570

What am I doing wrong? Is either implementation correct?
","To match the openssl output, the Python string should be '{request}' rather than '{""request""}'.
import hmac
import hashlib
secret = ""asdf1234""
string = '{request}'

hmac.new(secret, string, hashlib.sha384).hexdigest()

yields
'4c3d525b8a7095b9063a3bd974e56f0a5872399365912297d6ee18e400d2b55d0142395ba5fb4f33655ceca209ba9570'

Or, if you want the openssl command to match the Python output, use
echo -n '{""request""}' | openssl dgst -sha384 -hmac asdf1234 -hex

which yields
(stdin)= 92904f1b3c210a4fb19f476c19f24452717e85329aa9ffaba4a5fbe1111c2e3fa7f5a5fb35fdc58b3d158f5f886c3d02


After all, the inputs have to match for the outputs to have a chance at matching:
% echo -n {""request""}
{request}

and
>>> print('{""request""}')
{""request""}

","505","<python><openssl><sha><pyopenssl>","0","1","1","2014-10-18 23:13:58","26445474","0","","","","","2014-10-18 22:59:17",""
"42202446","How to make MSBuild sign all files in a Clickonce application","I have an application (WPF) installed by Clickonce and now I need to sign it, so Windows can recognize my company as a trusted issuer. The following command line was used in my C.I. tool (parameters with diamonds <> are used only to exemplify the situation):
C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\MSBuild.exe /target:clean;build;publish /p:ApplicationVersion=<VERSION> /p:SignAssembly=true /p:GenerateManifests=true /p:SignManifests=true /p:AssemblyOriginatorKeyFile=<PFX_PATH> /p:ManifestCertificateThumbprint=<CERTIFICATE_ID> /property:Configuration=<CONFIGURATION>;PublishDir=<PUBLISH_DIR>;BootstrapperEnabled=true;PublishUrl=<PUBLISH_URL>;InstallUrl=<INSTALL_URL>;UpdateUrl=<UPDATE_URL> C:\hudson\slave\workspace\NIMBUS-NFE-NFEasy2\NFeasy2\NFeasy2.sln

The problem is: only the setup.exe is signed, and only with SHA-256 algorithm. Thus, when the user run my application, the issuer is not recognized. Also, when running with Windows XP, the setup will never run because the SO doesn't recognize the signature (it seems that WinXP needs SHA-1).
How can I setup my project or command line to sign all files with both SHA-1 and SHA-256 algorithms? Also, will this stop prompting user's permission every time the application is run? If not, is there a way to do so?
Thanks!
","After reading a lot of solutions through the Internet, I managed to write a batch file to do the full signing. Note that this works only with specific versions, and I had to put them in my Path in the following order:
C:\Program Files (x86)\Windows Kits\8.1\bin\x86;

C:\Program Files (x86)\Microsoft SDKs\Windows\v7.0A\Bin;

The script is the following:
rem renaming the setup.exe because it will be treated separately
ren setup.exe setup._

rem removing the .DEPLOY extension, getting back the original one
for /r %%x in (*.deploy) do ren ""%%x"" *.

rem signing all files with my certificate
for /r %%x in (*.exe *.dll) do signtool.exe sign /fd sha1 /as /sha1 <MY_CERTIFICATE> ""%%x""
for /r %%x in (*.exe *.dll) do signtool.exe sign /fd sha256 /as /sha1 <MY_CERTIFICATE> ""%%x""

rem updating the manifest with the new signatures
for /r %%x in (*.manifest) do mage.exe -update ""%%x""

rem signing the manifest file
for /r %%x in (*.manifest) do mage.exe -sign ""%%x"" -ch <MY_CERTIFICATE>

rem putting the .DEPLOY extension in all files renamed previously
for /r %%x in (*.exe *.dll *.config *.cer *.ttf *.ico *.xml *.p7b) do ren ""%%x"" *.*.deploy

rem getting back setup.exe
ren setup._ setup.exe 

rem signing setup.exe file
signtool.exe sign /fd sha1 /as /sha1 <MY_CERTIFICATE> setup.exe
signtool.exe sign /fd sha256 /as /sha1 <MY_CERTIFICATE> setup.exe

rem updating MyApp.Application file
for /r %%x in (*.manifest) do mage.exe -update MyApp.Application -appm ""%%x""

rem signing MyApp.Application file
mage.exe -sign MyApp.Application -ch <MY_CERTIFICATE>

rem updating the new signed file to the destiny folder
for /r %%x in (*.application) do xcopy MyApp.Application ""%%x"" /y

","504","<c#><clickonce><sha>","3","3","1","2017-08-08 16:50:42","","0","1","","","","2017-02-13 11:00:55",""
"17852250","Git: How to keep SHAs in commit messages up-to-date after rebase?","Let's assume that I'm on a feature branch, created off master. I do a commit
Fix XYZ

whose SHA is, let's say, 389b04. Then, I do another commit, in whose commit message I mention the previous SHA.
Fix UVW

This fix is related to the fix in 389b04.

After that, I do a bunch of other commits. Now, I sync my feature branch with master, so I do git rebase master. However, as rebase changes history, it changes the SHA of the referenced commit 389b04, so the second commit now references a non-existing commit.
My question is: is it somehow possible to automatically fix such SHAs in commit messages while doing rebase? I know this could be solved by doing merge instead, but I'm wondering whether there is a way of doing this with rebase.
","Rebase will invariable change commit SHA, as rebase is an act of ""history Rewrite""
Therefore - Rebase should be done only on Un Published History.
","496","<git><git-rebase><sha>","3","-3","1","2013-07-25 12:20:29","","4","4","","","","2013-07-25 07:59:04",""
"42955461","BouncyCastle NONEwithRSA signature algorithm","I was changing Security Provider in Java to BouncyCastle Provider and now I have an exception that signature algorithm NONEwithRSA does not exists in BouncyCastle Provider.
I am using it through JcaContentSignerBuilder.
Is there any reason why there is no such algorithm and is there any way how to handle it using BouncyCastle Provider? I am providing hash functions externally and I need to only use RSA on it.
","","490","<hash><rsa><bouncycastle><sign><sha>","1","","0","2017-03-22 15:03:55","","6","","","","","2017-03-22 15:03:55",""
"30481370","Does a git commit hash equal a repository state?","Each git commit is attributed a hash which ""signs"" its content.
Does it also sign where the commit came from or is it just the commit data itself which is used for the hash calculation?
Differently phrased: is it impossible (apart from hash collisions) to forge a second repository with its head commit having the exact same hash and same content but the rest of the tree differing?
","The answer to the second question is yes (it is impossible, etc).
The first question is not as well formed as I think you might want, because a commit hash is in fact just based on the commit data.  The key that causes the second question's answer is that ""the commit data"" includes these key items, which you can see in an actual commit:
$ git cat-file -p HEAD
tree 22abd5c3fed5e2f49fb71e10b39d8c4929e51fc7
parent 4ebdeb68ba87282f87c39d790ba17fe1e021cc97
parent 9eabf5b536662000f79978c4d1b6e4eff5c8d785
[snip]

The tree line gives the hash of the tree (which depends only on the tree contents) and the parent lines—two, in this case, as HEAD is a merge commit—give the hashes of the parent commits.  Given that the hash of the current commit depends on the hash(es) of its tree and parent(s), if you were to construct a different repo with a different history or different tree, those would have different hashes so that the commit would also have a different hash.
(The technical term usually used here is Merkle Tree.)
","490","<git><hash><sha><data-integrity>","4","4","1","2015-05-27 11:45:52","30481519","2","","","","","2015-05-27 11:39:11",""
"21308350","I need to use System.Security.Cryptography in windows phone app","I'm trying to cast a string in a SHA-1 string. It's for a password.
I can't make a using System.Security.Cryptography in my class. I don't know what DLL I need.
Could you help me please ?
The class is in a portable library.
I'm not really good in english, sorry !
Thank in advance for your help.
","Cryptography functionality is platform specific and cannot be used in a portable class library.
Instead, you'll need to abstract that into libraries that were custom built for each platform. In your case, you'll need to write the Cryptography related code in an assembly specifically targeting Windows Phone. You cannot put the code in a portable class library.
For some guidance as to how to abstract the code, here's an idea on MSDN.
","489","<c#><.net><dll><windows-phone-8><sha>","-1","0","1","2014-01-23 13:48:04","","1","","309580","","2014-01-23 13:05:46","2014-01-23 12:37:03",""
"53205549","How to generate query string hash with query parameters","I am sending API requests to JIRA using JWT token authentication. I added the method (get, post, etc.) and the endpoint to SHA256 encoding. This succeeds:
qsh = Digest::SHA256.hexdigest(""GET&#{endpoint}&"")
jwt = JWT.encode({
                     qsh: qsh,
                     iat: issued_at,
                     exp: expires_at,
                     iss: key
                   }, secret)

However, I cannot add query parameters to the URI. If I append query parameters:
qsh = Digest::SHA256.hexdigest(""GET&#{endpoint}&start=50&limit=50"")
jwt = JWT.encode({
                     qsh: qsh,
                     iat: issued_at,
                     exp: expires_at,
                     iss: key
                   }, secret)

I receive unauthorized response 401.
MVP:
jira_request(:get,""/rest/servicedeskapi/servicedesk/#{serviceDeskId}/organization"", nil)
def jira_request(method, endpoint, data)
    request = Typhoeus::Request.new(jira_rest_api_url(method, endpoint),
                                    followlocation: true, method: method,
                                    body: data ? data.to_json : nil,
                                    headers: { 'X-ExperimentalApi' => 'opt-in',
                                               'Content-Type' => 'application/json' })

request.on_complete do |response|
  if response.success? && !response.body.blank?
    return JSON.parse(response.body)
  elsif response.code == 204
    return true
  else
    return false
  end
end
request.run


end

  # Creating JWT token to Auth for each request
  def jira_rest_api_url(method, endpoint)
    # Gets the ADDON details for generating JWT token
    jwt_auth = MyJToken.first

issued_at = Time.now.utc.to_i
expires_at = issued_at + 500

qsh = Digest::SHA256.hexdigest(""#{method.to_s.upcase}&#{endpoint}&"")

jwt = JWT.encode({   qsh: qsh,
                     iat: issued_at,
                     exp: expires_at,
                     iss: jwt_auth.key
                   }, jwt_auth.secret)

# return the service call URL with the JWT token added
  ""#{jwt_auth.api_base_url}#{endpoint}?jwt=#{jwt}""
end
  end

","The parameters that are hashed in:
qsh = Digest::SHA256.hexdigest(""GET&#{endpoint}&limit=50&start=50"")

should be added in the request url:
""#{jwt_auth.api_base_url}#{endpoint}?jwt=#{jwt}&start=50&limit=50""

","489","<ruby-on-rails><ruby><sha>","1","1","1","2018-11-26 11:18:26","53479979","7","2","6809067","","2018-11-08 11:09:01","2018-11-08 10:12:33",""
"29406857","Comparing SHA Checksum values in C","I am working on an assignment for creating a shell in C. The program have to read a config file, where the commands that are allowed in the shell are listed. Also in this config file, for every command that is allowed, it's sha1 checksum value is also listed. A sample line would look like this: (the file has other data too)
... other data ....
* /bin/ls 3848bdeada63dc59d2117a6ca1348fe0981ad2fc

When the user types a command, the program has to check if that command is in config file or not. If the command was within the list, then the program have to retrieve it's sha1 sum value, then calculate the sha1 sum value on the given file and compare both of them. 
I have problem with comparing these values. I read the sha1 value from file and store it in a char *pointer. Later on, I use SHA1() to calculate the checksum value. But the value that is returned by SHA1 is unsigned char *pointer. And I can't figure out how to compare these values. 
So, my question is, should I change how I read data?(considering that there are other data also in that file). How can I compare those two checksum values? 
(I have posted another question here that was part of this problem, but after getting comments, I realized my problem is something different).
Below are some relevant parts of the code.
READING DATA:
/** CODE DELETED */
while(fgets(line,MAXLINE,confFPtr) != NULL ){

    /** CODE DELTED */

    /** if a command line then process the command */
    else if(line[0] == CMNDSTARTER){
        char *pathCommand = NULL;               /** stores path+command string */
        char *sha = NULL;                       /** stores sha string */

        const char *separator = "" "";    /** delimiter between * command sha */
        char *arrayCommand[2];          /** stores path in one index and command in another string */

        /** tokenize the string */
        strtok(line,separator);
        pathCommand = strtok(NULL,separator);
        sha = strtok(NULL,separator);

        /** Remove trailing space from end of hash */
        sha = preProcess(sha);  


        /** separate pathcommand into path and command */
        getPathCmd(arrayCommand,pathCommand);

        /** add to list */
        /** List is a linked list */
        if(!addToList(cmdList,arrayCommand,sha)){

            printError(""Silent Exit: couldn't add to list"");
            exit(1);
        }


    }

COMPUTING CHECKSUM FOR FILE( command that is typed by user)
    while(1){


    /**
     * Read commands
     */
    if(emitPrompt){
        printf(""%s"",prompt);
        fflush(stdout);
    }

    if((fgets(cmdLine, MAXLINE, stdin) == NULL) && ferror(stdin))
        printError(""fgets error"");

    /** if ctrl-d pressed exit */
    if(feof(stdin)){
        fflush(stdout);
        exit(0);
    }

    /**
     * Remove trailing \n and preceding white space from user command
     */
    processedCmdLine =  preProcess(cmdLine);

    /** If no command, continue */
    if(*processedCmdLine == 0)
        continue;
    /** check if the command entered by user is in the list of allowed commands */
    struct CMDList *s = searchList(cmdList,processedCmdLine);

    /** if command was in the list, run checksum on the file and compare it with the stored checksum value */
    if(s != NULL){

        unsigned char hash[SHA_DIGEST_LENGTH];
        SHA1(processedCmdLine, sizeof(processedCmdLine),hash);


    }

}

CMDList Structure
struct CMDList{

char *command;
char *path;
char *hash;
struct CMDList *next;

};

","You need to use
memcmp(hash1, hash2, SHA_DIGEST_LENGTH)

It doesn't matter whether your hash1 and hash2 are char* or unsigned char* or any mix thereof. Though for consistency it's nice to have them of the same type:
struct CMDList{
  ....
  unsigned char* hash;
  ...
};

Since a sha1 hash is of fixed length, you can just as well use
  unsigned char hash[SHA_DIGEST_LENGTH];

and save a dynamic allocation.
Note also that SHA_DIGEST_LENGTH is 20 but 3848bdeada63dc59d2117a6ca1348fe0981ad2fc is a 40-character string. You need to convert readable hash values to binary representation before you can use them.
","488","<c><sha><unsigned-char>","0","2","2","2015-04-02 17:25:16","29418871","0","","-1","","2017-05-23 12:22:21","2015-04-02 06:57:45",""
"29406857","Comparing SHA Checksum values in C","I am working on an assignment for creating a shell in C. The program have to read a config file, where the commands that are allowed in the shell are listed. Also in this config file, for every command that is allowed, it's sha1 checksum value is also listed. A sample line would look like this: (the file has other data too)
... other data ....
* /bin/ls 3848bdeada63dc59d2117a6ca1348fe0981ad2fc

When the user types a command, the program has to check if that command is in config file or not. If the command was within the list, then the program have to retrieve it's sha1 sum value, then calculate the sha1 sum value on the given file and compare both of them. 
I have problem with comparing these values. I read the sha1 value from file and store it in a char *pointer. Later on, I use SHA1() to calculate the checksum value. But the value that is returned by SHA1 is unsigned char *pointer. And I can't figure out how to compare these values. 
So, my question is, should I change how I read data?(considering that there are other data also in that file). How can I compare those two checksum values? 
(I have posted another question here that was part of this problem, but after getting comments, I realized my problem is something different).
Below are some relevant parts of the code.
READING DATA:
/** CODE DELETED */
while(fgets(line,MAXLINE,confFPtr) != NULL ){

    /** CODE DELTED */

    /** if a command line then process the command */
    else if(line[0] == CMNDSTARTER){
        char *pathCommand = NULL;               /** stores path+command string */
        char *sha = NULL;                       /** stores sha string */

        const char *separator = "" "";    /** delimiter between * command sha */
        char *arrayCommand[2];          /** stores path in one index and command in another string */

        /** tokenize the string */
        strtok(line,separator);
        pathCommand = strtok(NULL,separator);
        sha = strtok(NULL,separator);

        /** Remove trailing space from end of hash */
        sha = preProcess(sha);  


        /** separate pathcommand into path and command */
        getPathCmd(arrayCommand,pathCommand);

        /** add to list */
        /** List is a linked list */
        if(!addToList(cmdList,arrayCommand,sha)){

            printError(""Silent Exit: couldn't add to list"");
            exit(1);
        }


    }

COMPUTING CHECKSUM FOR FILE( command that is typed by user)
    while(1){


    /**
     * Read commands
     */
    if(emitPrompt){
        printf(""%s"",prompt);
        fflush(stdout);
    }

    if((fgets(cmdLine, MAXLINE, stdin) == NULL) && ferror(stdin))
        printError(""fgets error"");

    /** if ctrl-d pressed exit */
    if(feof(stdin)){
        fflush(stdout);
        exit(0);
    }

    /**
     * Remove trailing \n and preceding white space from user command
     */
    processedCmdLine =  preProcess(cmdLine);

    /** If no command, continue */
    if(*processedCmdLine == 0)
        continue;
    /** check if the command entered by user is in the list of allowed commands */
    struct CMDList *s = searchList(cmdList,processedCmdLine);

    /** if command was in the list, run checksum on the file and compare it with the stored checksum value */
    if(s != NULL){

        unsigned char hash[SHA_DIGEST_LENGTH];
        SHA1(processedCmdLine, sizeof(processedCmdLine),hash);


    }

}

CMDList Structure
struct CMDList{

char *command;
char *path;
char *hash;
struct CMDList *next;

};

","I changed my code a bit(code can be seen here). The problem was I was storing checksum values in different forms. The checksum value from file is in plain text, while calculating the checksum would return an unsigned char. So I decided to convert the returned checksum value to its plain text reprsentation, and then compare them using strncmp(). As it can be seen here.
","488","<c><sha><unsigned-char>","0","1","2","2015-04-02 17:25:16","29418871","0","","-1","","2017-05-23 12:22:21","2015-04-02 06:57:45",""
"13490921","Checksum algorithm for SQL query?","I need to generate a checksum based on a SQL query and the string values of any parameters used in that query. The checksum is used in a caching scenario. If the checksum exists in cache, so does the result and then I don't need to hit the DB.
Req 1:
It's important that two different queries doesn't generate the same hash. Because that could lead to an unexpected result being returned.
Req 2:
It can't be tremendously slow, but again it's in memory and shouldn't have to much content.
Given the context, what algorithm is best fit? CRC32, MD5, SHA1 or anything else?
//Daniel
","Put the whole query string concatenated with the arguments in a regular HashTable / Dictionary / HashMap or whatever it is called in your language. Put the SQL query as the key and the result as the value.
Your HashTable will use an appropriate hashing function for your strings and resolve any hash collisions.
","488","<algorithm><md5><sha><crc32>","1","0","1","2012-11-21 15:43:05","","9","1","169388","","2012-11-21 10:43:55","2012-11-21 10:13:27",""
"48972597","How to use sha256sum --check option to fail if incorrect hash on a docker script","I'm writing a docker script and therefore I cannot rely on bash scripts. I need the docker script to fail if the sha256sum of a downloaded file (though wget) hash is incorrect. I see that there exists a check option in sha256sum, but I can't find how to use it.
It's something like sha256sum -c hash file but it won't work for me. I think I actually must supply a file to -c, something like using echo.
","Two Examples:
sha256sum /etc/passwd > checksum
sha256sum -c checksum

Output:

/etc/passwd: OK

or
sha256sum /etc/passwd > checksum
sha256sum --status -c checksum
echo ""$?""

Output:

0

","485","<bash><shell><docker><sha256><sha>","0","1","2","2019-09-12 11:34:37","48972723","1","","3776858","","2018-02-25 11:23:50","2018-02-25 10:47:53",""
"48972597","How to use sha256sum --check option to fail if incorrect hash on a docker script","I'm writing a docker script and therefore I cannot rely on bash scripts. I need the docker script to fail if the sha256sum of a downloaded file (though wget) hash is incorrect. I see that there exists a check option in sha256sum, but I can't find how to use it.
It's something like sha256sum -c hash file but it won't work for me. I think I actually must supply a file to -c, something like using echo.
","Here's an example of sha256sum -c used with a file.
echo ""68a2297eb099d1a76097905a2ce334e3155004ec08cdea85f24527be3c48e856  go1.13.linux-amd64.tar.gz""|sha256sum -c - 

go1.13.linux-amd64.tar.gz: OK
You pass in the checksum space filename as the above example shows for go1.13.
","485","<bash><shell><docker><sha256><sha>","0","0","2","2019-09-12 11:34:37","48972723","1","","3776858","","2018-02-25 11:23:50","2018-02-25 10:47:53",""
"39491107","Is it possible to have MD5 & SHA-0 Collisions both at the same?","I was studying about MD5 collisions and found that collisions were also found in SHA-0.
Now, Is it possible to have MD5 and SHA-0 colliosion in two Strings or Files at once?
Here is an image showing a comparison table which i found while searching:

Here, You can see in MD5 & SHA-0, on both possible collisions are found.
Can anyone explain if it is possible to have both collisions at the same?
I have got some example for MD5 Collisions. It would be better if someone can provide an example for MD5 & SHA-0 Collision both at the same?
","Collisions are possible in all hashes, it is a mathematical certainty. The reason it happens is called the Pigeonhole Principle, what it means is you only have X possible values for the hash to have, once you hash X+1 items, you are guaranteed to have a collision because you must have used every hash value at least once making the X+1 item you hash a guaranteed collision.
Now, apply this logic to MD5 and SHA1. Pretend you have a very long hash which is just the MD5 hash (2^128 possible hashes) concatenated  on to the SHA1 hash (2^160 possible hashes). You still have only have 2^128 * 2^160 possible hashes, once you hash 2^128 * 2^160 + 1 items you are guaranteed to have a item that had a collision in MD5 and a collision in SHA1 at the same time.
Would such a hash be easily found so that you could do a second-preimage attack so you could replace a existing hashed file with a 2nd one that had a matching hash? No, that attack would likely be unfeasible on the non-government level.
","485","<hash><md5><sha><hash-collision>","0","4","1","2016-09-14 18:55:52","39492016","0","","5837405","","2016-09-14 18:55:52","2016-09-14 12:59:37",""
"55242337","Hide password in form data while sending a post request","While submitting a form's data,the password is visible in encrypted format inside the form data and also in the parameters of the POST request.

I want to hide the password in the encrypted format.In Burp Suite,the following vulnerability issue was displayed.
[![enter image description here][2]][2]
I am using sha-512 for encryption and the url is https. I have been searching on this but all I have found is just to change the protocol to https from http.Please help me how to solve this issue of hiding the form data from showing the password in the POST request header parameters.
","
While submitting a form's data,the password is visible in encrypted format inside the form data and also in the parameters of the POST request

Indeed, the browser shows you all data that has been posted. Effectively the request has been done on behalve of user and you have to assume the user can see all information he/she has posted. 

I want to hide the password in the encrypted format. 
  just to change the protocol to https from http

Yes, this is the correct answer, https ensures the traffic is encrypted and server authenticated and anybody sniffing out the traffic would be unable to decrypt any of posted data. What you see in the browser are data before encryption and actual transmission.

I am using sha-512 for encryption 

Nope, seems you just hashed some data (please search and learn the difference between encryption and hashing), now the hash has became the password, now you need to protect the hash.

CWE-204

Nothing you've shown indicates the CWE-204 vulnerability. What you've shown is a normal post request and response with a session cookie and redirect url. Your system may or may not have the CWE-204 vulnerability, though it has nothing to do with the data you've provided.

Please help me how to solve this issue of hiding the form data from showing the password in the POST request header parameters

Now there's a question:
Is the password provided by the user and do you want to hide the password from any 3rd party (potentially sniffing out the traffic)? Then using https will do the trick. The user may still see the posted data (including the password), but well - the user provided the password, he knows it already.
If the ""password"" some system parameter you want to pass in the form without the user able to know it? In theory - you may encrypt the password on the server-side and decrypt the password on the target system. However - the user may just post the encrypted password again. Then you may rather use time-limited JWT token.
","483","<encryption><sha><web-development-server><burp>","0","2","1","2019-03-20 05:35:48","","1","","9396130","","2019-03-20 05:35:48","2019-03-19 13:36:09",""
"48081688","In Python, represent a SHA-256 hash using the fewest characters possible","What is the most dense way (fewest characters) that I can store a complete SHA-256 hash? 
","Calling .digest() on a hashlib.sha256 object will return a 32-byte string -- the shortest possible way (with 8-bit bytes as the relevant unit) to store 256 bits of data which is effectively random for compressibility purposes.
Since 8 * 32 == 256, this provably has no wastage -- every bit is used.
","480","<python><hash><sha>","0","3","2","2018-01-03 17:25:01","","4","2","","","","2018-01-03 16:50:29",""
"48081688","In Python, represent a SHA-256 hash using the fewest characters possible","What is the most dense way (fewest characters) that I can store a complete SHA-256 hash? 
","Charles' answer is absolutely correct. However, I'm assuming that you don't want with the shortest binary encoding of the SHA256 bash - the 32-octet string - and want something printable and somewhat human-readable.
Note: However, this does not exactly apply to barcodes. At least QR codes encode binary data, so just use digest() method of your hash - that would be the most efficient encoding you can use there. Your QR code generation library should most likely support generating codes for ""raw"" binary strings - check your library docs and find the correct method/invocation.
SHA hashes (and other hashes) don't produce or operate on characters, they work with binary data. SHA-256 produces 256 bits of data, commonly represented with 32 bytes. In particular, in Python 3 you should notice that hashlib.sha256(""..."").digest() returns bytes and not str.
There is a convenience method hexdigest, that produces hexadecimal (base16) string that represents those bytes. You can use base32, base58, base64, baseEmoji or any other encoding that fits your requirements.
Basically, your problem is actually ""I have a number and want a short encoding of it"". Decide on how many distinct characters you can use (encoding base) and use that. There are many libraries on PyPI that could help. python-baseconv may come handy.
","480","<python><hash><sha>","0","2","2","2018-01-03 17:25:01","","4","2","","","","2018-01-03 16:50:29",""
"20248532","How to generate the shortest possible (alpha)numeric unique ID out of a file path?","I would like to generate numeric or alphanumeric (whichever is easier) unique ID as a function of a file path in Python.  I am working on a file parsing application and there is a file entity in the DB with descendants and, in order to have a more compact foreign/primary key than the fully qualified path to a file, I would like to convert it into the shortest possible unique digest as possible.
What are my options to do this?  Can I use SHA?
How about if i just took an MD5 checksum out of the fully qualified path string and got something like 1736622845? On a command line, it can be done with 
echo -n '/my/path/filename' | cksum | cut -d' ' -f1 

Is that guaranteed to never repeat for two different inputs?  If yes, how would I translate the above bash piped command into pure Python so that I don't have to invoke a system call but get the same value?
","The shortest possible unique ID of a string is the string. 
You can try to use an alphabet that only contains the characters allowed in the path, so that you use less bits (a lot of work, not a lot of benefit, unless your paths really only contain a few characters)
What I think you want is a fairly good short hash function. As soon as you generate a hash function there's a risk of collision. For most hash functions a good rule of thumb is that you have far less entries than the hash value space. There's a theorem to prove that as soon as you have more than sqrt(key_space) entries you will (with the best hashes) get collisions half the time.
So if you take say 1000 paths, you should aim at having a hash pace of at least 1.000.000 entries to work with. You can chop up other hash functions (say take only the first 2 bytes of the md5). That should work, but note the increase in collisions (where 2 entries will generate the same value).
Also if you are so keen to save space, store the hash value in binary (large int). It's far shorter than the the usual encodings (base64, or hex) and all the DB functions should work fine.
So say you take md5 and store it as a large int, it will take only 16 bytes to store. But you can also only use 8 or 4 (I wouldn't dare go lower than that).
","479","<python><uniqueidentifier><sha>","0","2","1","2013-11-27 17:29:56","","13","","1312080","","2013-11-27 17:15:18","2013-11-27 16:58:37",""
"43107221","Equivalent of hashing SHA512 in PHP and MySQL","I am trying to find out the equivalent function/method to get the same result in both PHP and MySQL after hashing.
PHP
$passphrase = ""Information Technology"";
echo hash('sha512',$passphrase);


Result: 9cb5bdceae139111d733736127eb380516d9cfce50882de7883321980962e6464711935316801f5689c3119c5ea3f5b79077b99e17cd355c6d5a8ff190ccb49d

MySQL
SET @passphrase = 'Information Technology';
SELECT SHA2(@passphrase,512);


Result: 3963623562646365616531333931313164373333373336313237656233383035313664396366636535303838326465373838333332313938303936326536343634373131393335333136383031663536383963333131396335656133663562373930373762393965313763643335356336643561386666313930636362343964

Is it possible to have a function that works and give results the same as for both? Thanks in advanced!
","","478","<php><mysql><hash><sha>","1","","0","2017-03-30 02:02:26","","6","","","","","2017-03-30 02:02:26",""
"5926169","How do I convert the first 32 bits of the fractional part of a Float into a Word32?","Say I have a Float. I want the first 32 bits of the fractional part of this Float? Specifically, I am looking at getting this part of the sha256 pseudo-code working (from the wikipedia)
# Note 1: All variables are unsigned 32 bits and wrap modulo 232 when calculating
# Note 2: All constants in this pseudo code are in big endian

# Initialize variables
# (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):
h[0..7] := 0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19

I naively tried doing floor (((sqrt 2) - 1) * 2^32), and then converting the returned integer to a Word32. This does not at all appear to be the right answer. I figured that by multipling by 2^32 power, I was effectively left shifting it 32 places (after the floor). Obviously, not the case. Anyway, long and the short of it is, how do I generate h[0..7] ?
","The best way to get h[0..7] is to copy the hex constants from the Wikipedia page. That way you know you will have the correct ones.
But if you really want to compute them:
scaledFrac :: Integer -> Integer
scaledFrac x =
    let s = sqrt (fromIntegral x) :: Double
    in  floor ((s - fromInteger (floor s)) * 2^32)

[ printf ""%x"" (scaledFrac i) | i <- [2,3,5,7,11,13,17,19] ]

","477","<haskell><floating-point><sha256><sha>","4","5","1","2012-05-16 19:21:16","5926247","1","1","44390","","2012-05-16 19:21:16","2011-05-08 07:21:08",""
"16222197",".Net chatroom hash (eStreamChat)","I have a question specific to eStreamChat (An opensource Chatroom for .Net). There doesn't seem to be much in the way of documentation on their websites or any examples online so if anyone could help that would be great. I think that the problem is with my hash.
So far I have managed to download and import the project and set up a virtual IIS directory so that I can use it from my own application. I have created a link on one of my own webpages that brings me to their ChatRoom.aspx webpage. The link that brings me there is in the required format eg:
http://localhost:10833/eStreamChat/ChatRoom.aspx?id=lowens&timestamp=130425080917&hash=eb9fa849033cbf7b967ba472efb46363903f96dc

The page loads and I can see the chatroom but I get the following error popup: Unable to join room! Hash is invalid!
To get this far I have followed the instructions on this page: 
The only line I didn't understand was this: You can configure the secret key from the web.config file so maybe if somebody could explain what I'm supposed to be doing in the web.config it might help.
The error that is being thrown is from the RemoteAuthUserProvider.cs. Here is the code:
NameValueCollection hrefParams = HttpUtility.ParseQueryString(hrefUri.Query);

var calculatedHash = Miscellaneous.CalculateChatAuthHash(hrefParams[""id""] ?? String.Empty,
                hrefParams[""target""] ?? String.Empty, hrefParams[""timestamp""]);

if (hrefParams[""hash""] != calculatedHash)
{
    throw new SecurityException(""Hash is invalid!"");
}

After debugging:
hrefParams[""hash""] is ""eb9fa849033cbf7b967ba472efb46363903f96dc"" this is 
calculatedHash is ""5129cf1cf65350a387ce53a2b0d31c960f9d96d3""
So why is that hash not the same?
Cheers
","In the Web.config in appSettings a value is needed:
<appSettings> 
    <add key=""AuthSecretKey"" value=""ENTER A VALUE HERE""/>
</appSettings>

This value needs to match the secretKey in the click method provided on the website so that the hashes will match.
","476","<c#><.net><hash><chat><sha>","0","0","1","2013-04-25 20:00:28","16223694","0","1","1495929","","2013-04-25 19:24:33","2013-04-25 18:36:20",""
"28855540","normalize json in python (for sha256 check sum)","We need a fixed hash of a datastructure which is serializable to json.
I am unsure if this is going to be stay constant during the next years:
hashlib.sha256(json.dumps(data, sort_keys=True)).hexdigest()

Is there a way to normalize json, to make it unique hashable?
","","474","<python><json><hash><normalization><sha>","1","","0","2015-03-04 13:19:57","","1","","","","","2015-03-04 13:19:57",""
"10992262","Legacy app with md5 hashes: how to add salt and SHA1?","I've a legacy app where passwords are hashed using MD5 without salt. I'd like to switch to SHA1 with salt, but I'd like to keep current users' passwords.
My plan is to change hashing function to sha1(md5(password) + salt). I'll be able to batch process all existing hashes using sha1(<existing_pass> + salt).

Is it safe to keep md5 in this case?
Is it ok to have one single salt for all users?

","
As for question 1 I'm not quite sure but it seems to be OK.
For question 2: It is never OK to have same salt for all users. Salt has two functions. To prevent using pre-generated hashes / rainbow tables to search leaked database, and to prevent generation of dictionary-based hashes and searching databases with them too. Common salt will work in first case making rainbow tables unusable, but won't prevent cracker from dictionary attack. If cracker knows the global salt, he can generate frequent passwords, hash them and grep entire database. If salt is generated per user this scenario isn't possible. 

","474","<hash><md5><salt><sha>","2","1","2","2012-06-12 07:55:15","10992557","0","","","","","2012-06-12 07:32:44",""
"10992262","Legacy app with md5 hashes: how to add salt and SHA1?","I've a legacy app where passwords are hashed using MD5 without salt. I'd like to switch to SHA1 with salt, but I'd like to keep current users' passwords.
My plan is to change hashing function to sha1(md5(password) + salt). I'll be able to batch process all existing hashes using sha1(<existing_pass> + salt).

Is it safe to keep md5 in this case?
Is it ok to have one single salt for all users?

","
It's not a good idea to keep md5, read this question: Use SHA-512 and salt to hash an MD5 hashed password?.
It's better to have one salt for each user. With the same salt, users with the same password will have the same hash, and a rainbow table can be created for all your passwords at the same time.

","474","<hash><md5><salt><sha>","2","1","2","2012-06-12 07:55:15","10992557","0","","","","","2012-06-12 07:32:44",""
"45414302","Raw SHA1 in java does not match the one in PHP","I have checked for similar questions in SO but none of those could answer my question so posting my question here. 
I need to generate raw SHA for a password before making third party API call in my code. 
I am using DigestUtils present in apache codec library. Following is the java code
public static String sha1 (String input) 
    throws NoSuchAlgorithmException, 
        UnsupportedEncodingException {

    return new String(DigestUtils.sha(input));
}
// I suppose this gives me raw SHA. 

And the PHP code (i got in google) is below
$passwordSha = sha1($password, true);

// The boolean value gives the SHA in binary format.

For input ""PASSWORD"" , following are the outputs
JAVA : ""+��0G���i.)�\�I�_�7""
PHP  : ""+��0G���i.)�\�I�_�7""

I am not sure if am right in comparing these junk values however, my final password digest that i generate, which is dependent on above code is different in PHP and JAVA. (Getting right value in PHP). 
Please help me know the difference in generating raw SHA1 in PHP and JAVA.
UPDATE
Edited the outputs. My bad..
Some more results for different inputs
input : ""secretnonce101112015-09-30T14:12:15Z��a�����`�t�.�^X�""
JAVA : ""�s�� ���A�M��;���*""
PHP  : ""���i>�рq��������""
I see some extra characters in java output. Not sure if this is ruining my final password digest.
","I don't know if you're losing stuff in the type-casting to a String somehow, but can you please try the following and compare the outputs? This should represent both as a hex string.
public static String sha1 (String input) 
    throws NoSuchAlgorithmException, 
        UnsupportedEncodingException {

    return DigestUtils.sha1Hex(input);
}

vs
$passwordSha = sha1($password, false);

","473","<java><php><sha>","0","0","2","2017-09-29 22:16:49","45453350","2","1","4648372","","2017-07-31 11:49:15","2017-07-31 11:09:20",""
"45414302","Raw SHA1 in java does not match the one in PHP","I have checked for similar questions in SO but none of those could answer my question so posting my question here. 
I need to generate raw SHA for a password before making third party API call in my code. 
I am using DigestUtils present in apache codec library. Following is the java code
public static String sha1 (String input) 
    throws NoSuchAlgorithmException, 
        UnsupportedEncodingException {

    return new String(DigestUtils.sha(input));
}
// I suppose this gives me raw SHA. 

And the PHP code (i got in google) is below
$passwordSha = sha1($password, true);

// The boolean value gives the SHA in binary format.

For input ""PASSWORD"" , following are the outputs
JAVA : ""+��0G���i.)�\�I�_�7""
PHP  : ""+��0G���i.)�\�I�_�7""

I am not sure if am right in comparing these junk values however, my final password digest that i generate, which is dependent on above code is different in PHP and JAVA. (Getting right value in PHP). 
Please help me know the difference in generating raw SHA1 in PHP and JAVA.
UPDATE
Edited the outputs. My bad..
Some more results for different inputs
input : ""secretnonce101112015-09-30T14:12:15Z��a�����`�t�.�^X�""
JAVA : ""�s�� ���A�M��;���*""
PHP  : ""���i>�рq��������""
I see some extra characters in java output. Not sure if this is ruining my final password digest.
","After using ISO-8859-1 encoding while converting to String, i got the correct output. 
So the String should be converted to byte[] with ISO-8859-1 encoding 
byte[] passwordSha = sha(input.getBytes(""ISO-8859-1""));
This worked for me.. 
Referred PHP and Java hmac hash output matches in hex, doesn't match in raw binary. What's happening? for this. 
","473","<java><php><sha>","0","0","2","2017-09-29 22:16:49","45453350","2","1","4648372","","2017-07-31 11:49:15","2017-07-31 11:09:20",""
"30326370","snmp tls with sha256 certificate failed in net-snmp.5.7.3","The SNMPTLS with SHA1 certificate works fine in 5.7.3. I upgraded netsnmp to 5.7.3 for SHA256 support but the snmpd demon shows error
""error finding server identity keys""
Command :
snmpget -v 3 --defSecurityModel=tsm -u joecool -l authPriv -T our_identity=manager -T their_identity=snmpd tlstcp:192.168.1.125:10161 sysContact.0

The snmpget command throws following error
tlstcp: failed to ssl_connect
snmpget: Unknown host (tlstcp:192.168.1.125:10161)

snmpd demon throws error :
TLSTCP: Failed to create a SSL BIO

The configuration in snmpd.conf is shown below :
 master agentx
 agentXTimeout 100
 [snmp] localCert 0D:C1:CA:B7:2A:83:5E:43:42:1E:A1:0D:07:2C:97:2B:B5:75:20:2B
 rwcommunity public
 certSecName 10 9A:C9:59:BC:A8:C4:C1:01:4B:6F:0E:57:CB:3E:3E:6E:AD:08:E0:9E --cn
 rwuser -s tsm ""joecool""

starting snmpd 
 snmpd -f -Lo -C -c /usr/share/snmp/snmpd.conf -Dtsm,dtls,openssl,cert tlstcp:10161 dtlsudp:10161 udp:161

The detailed error log is given below :

Blockquote
Turning on AgentX master support.
  cert:util:config: parsing 10 9A:C9:59:BC:A8:C4:C1:01:4B:6F:0E:57:CB:3E:3E:6E:AD:08:E0:9E --cn
  cert:find:params: looking for remote_peer(2) in MULTIPLE(0x200), hint 3196293592
  cert:find:params: looking for remote_peer(2) in FINGERPRINT(0x2), hint 3196293592
  cert:find:params: hint = 9A:C9:59:BC:A8:C4:C1:01:4B:6F:0E:57:CB:3E:3E:6E:AD:08:E0:9E
  cert:find:params: looking for remote_peer(2) in FILE(0x1), hint 3196293592
  cert:find:params: hint = 9A:C9:59:BC:A8:C4:C1:01:4B:6F:0E:57:CB:3E:3E:6E:AD:08:E0:9E
  cert:map:add: pri 10, fp 9ac959bca8c4c1014b6f0e57cb3e3e6ead08e09e
  cert:find:params: looking for identity(1) in DEFAULT(0x0), hint 0
  cert:find:params: looking for identity(1) in MULTIPLE(0x200), hint 234144
  cert:find:params: looking for identity(1) in FINGERPRINT(0x2), hint 234144
  cert:find:params: hint = 0D:C1:CA:B7:2A:83:5E:43:42:1E:A1:0D:07:2C:97:2B:B5:75:20:2B
  cert:find:params: looking for identity(1) in FILE(0x1), hint 234144
  cert:find:params: hint = 0D:C1:CA:B7:2A:83:5E:43:42:1E:A1:0D:07:2C:97:2B:B5:75:20:2B
  error finding server identity keys
  dtlsudp: netsnmp_dtlsudp_transport(): transports/snmpDTLSUDPDomain.c, 1421:
  A SNMP version other than 3 was requested with (D)TLS; using 3 anyways
  tsm: TSM: Reached our session initialization callback
  NET-SNMP version 5.7.3
  `

","","473","<snmp><sha><sha256><net-snmp>","3","","0","2015-05-19 13:00:05","","0","1","","","","2015-05-19 13:00:05",""
"34952935","Sha256 salted is there any chance to use rainbow tables to ""decrypt"" it?","i want to ask is there any chance to use rainbow tables on salted hashes if we already know the salt. First of all i want to introduce the system of that hashes.
Each of this is computed using the SHA-256 hash of 3 distinct inputs.
First, is the server seed. This is a precomputed value generated some time in the past. Seeds are generated in a chain such that today's seed is the hash of tomorrow's seed.
seed 0 => seed 1 => seed 2 => seed 3
Next, the server seed is salted (scrambled) with the results of the New York Lottery's Take 5 game. Drawn daily at 11:21 pm EST, these results (0-padded) are appended to the server seed for use the following day.
Finally, each roll is salted with the unique round id ensuring a different hash each roll.
The round's hash is generated using SHA256(""serverseed-lottery-roundid""). Taking the first 8 hex digits of the resulting hash and converting to decimal yields an integer from 0-4294967295. Taking modulo 15 yields the final roll in the range 0-14.
And i add you few examples with these seeds and salts chronologically:
Seeds:
1# 08659e6ef7759d68c4a4d8b214217394c5f2b1a539cc51cc5f89be1f55ab737b
2# 6d7ef31d654c30b2113019de67b0bc5bd400c41fc1d916937f2aee378772480c
3# 37e9469b09afca5a985170684d18ece4e881bea5d5f22af8df1049129351b976
Salts:
1# 0406161724
2# 1020273438
3# 0111293436
Number of seed refer to number of salt and 1# starts from 19.01.2016
At the end this is some php implementation with these inputs.
$seed = ""39b7d32fcb743c244c569a56d6de4dc27577d6277d6cf155bdcba6d05befcb34"";
$salt = ""0422262831"";
$round_id = ""1"";
$hash = hash(""sha256"",$seed.""-"".$salt.""-"".$round_id);
$roll = hexdec(substr($hash,0,8)) % 15;
echo ""Round $round_id = $roll"";
I would be grateful if you help me with these statement :)
","","471","<hash><sha><rainbowtable>","0","","0","2016-01-22 18:38:57","","7","1","4921360","","2016-01-22 18:38:57","2016-01-22 17:48:19",""
"43956847","What character set do hash functions (eg. MD5, SHA) use...","...I'd like to ask how is it, and hopefully not asking an alrady asked question (I searched for it on the internet for a week, didn't find it... I know it's hidden somewhere in those long books... so if it's here please direct me to the thread, ty)... 
...I'd like to know what character base... or how exactly is it with character base which is used in hash functions like MD5, SHA... for example... what do they use base64, ascii, extended ascii... cose if I try to encode for example char alt 444 (╝) it encodes it... but there has to be a limit right, to how many indifferent chars can be used... cose otherwise the hash could not be unique, right? And many sites using these algorithms only let you use base64 character pool... I guess... please help... thank you
","Hash algorithms are taking a bunch of bytes, calculate the hash and return a predefined number of bytes. So it doesn't matter to them, if the input is a short encoded text or a large binary file.
It depends on the implementation of the hash function and of the programming environment, how the string is converted to a byte array. As long as it is always done the same way, the hashes will be comparable. If you need a cross-platform hash, it is a good idea to first convert the string to a byte array (preferably UTF-8 encoded) and then feeding it to the hash.
The output is often a hexadecimal representation of the hash, but sometimes you can also request the binary output.
Example with SHA-256
SHA256(""hello"") = ""2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824""


Returns 32 bytes which is the same as 256 bits, thus the name SHA-256.
The 32 bytes are hex encoded, every byte is represented as hexadecimal number with two characters (2c stands for one byte with the number 44).

","463","<hash><base64><ascii><md5><sha>","1","0","1","2017-05-14 15:35:40","43965769","0","1","","","","2017-05-13 18:52:19",""
"39098358","Creating same hashes like symfony2 does with java (SHA-512)","I have an old Symfony2 based application here and I am developing a replacement with Dropwizard in Java.
I migrated all User records from old DB into my new Datamodel.
I also added new fields for passwords and imported the old password and salt fields, too.
Now I want to make the well known procedure. Let the user login, try against new password field. If it fails try the migrated ones, if they work, encode the cleartext password with the new algorithm and store the new hash in the new pasword field. So that the users are porting there password hashes from old procedure to the new one.
Sounds simple and normaly it's work as usual, but this Symfony and PHP drives me crazy.
Where I stuck is to create the same hash with java as symfony does.
The old application uses the MessageDigestPasswordEncoder with ""sha512"", base64 encoding and 5000 iterations, all defaults ;)
The important methods are:
MessageDigestPasswordEncoder:
public function encodePassword($raw, $salt) {
  if ($this->isPasswordTooLong($raw)) {
    throw new BadCredentialsException('Invalid password.');
  }

  if (!in_array($this->algorithm, hash_algos(), true)) {
    throw new \LogicException(sprintf('The algorithm ""%s"" is not supported.', $this->algorithm));
  }

  $salted = $this->mergePasswordAndSalt($raw, $salt);
  $digest = hash($this->algorithm, $salted, true);

  // ""stretch"" hash
  for ($i = 1; $i < $this->iterations; ++$i) {
    $digest = hash($this->algorithm, $digest.$salted, true);
  }

  return $this->encodeHashAsBase64 ? base64_encode($digest) : bin2hex($digest);
}

And BasePasswordEncoder:
protected function mergePasswordAndSalt($password, $salt) {
  if (empty($salt)) {
    return $password;
  }

  if (false !== strrpos($salt, '{') || false !== strrpos($salt, '}')) {
    throw new \InvalidArgumentException('Cannot use { or } in salt.');
  }

  return $password.'{'.$salt.'}';
}

It's seems straight forward but I stuck with it.
As I read this it does:

Merge salt and clear text password to: ""password{salt}""
Hash this string with SHA-512 and return a binary string into digest variable
iterate 5k times and use digest concatenated with merged cleartext password to rehash into digest
encode digest to base64

So here are my try in Java:
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.slf4j.Logger;
import java.io.UnsupportedEncodingException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Base64;

public void legacyEncryption(String salt, String clearPassword) throws UnsupportedEncodingException, NoSuchAlgorithmException {
  // Get digester instance for algorithm ""SHA-512"" using BounceCastle
  MessageDigest digester = MessageDigest.getInstance(""SHA-512"", new BouncyCastleProvider());

  // Create salted password string
  String mergedPasswordAndSalt = clearPassword + ""{"" + salt + ""}"";

  // First time hash the input string by using UTF-8 encoded bytes.
  byte[] hash = digester.digest(mergedPasswordAndSalt.getBytes(""UTF-8""));

  // Loop 5k times
  for (int i = 0; i < 5000; i++) {
    // Concatenate the hash bytes with the clearPassword bytes and rehash
    hash = digester.digest(ArrayUtils.addAll(hash, mergedPasswordAndSalt.getBytes(""UTF-8"")));
  }

  // Log the resulting hash as base64 String
  logger.info(""Legace password digest: salt="" + salt + "" hash="" + Base64.getEncoder().encodeToString(hash));
}

Does anybody see the problem? I think the difference is in the result of the:
PHP: binary.binary
and the
JAVA: addAll(byte[],byte[])
Thanks in advance
","The implementation on php side is correctly doing 5k iterations by doing first round of hashing and then looping 4999 times.
$digest = hash($this->algorithm, $salted, true);

for ($i = 1; $i < $this->iterations; ++$i) {
  $digest = hash($this->algorithm, $digest.$salted, true);
}

In the the java implementation the for loop starts at 0 which results in 5k + 1 iteration.
By starting the for loop at 1 in java too, the resulting password hashes are then equals.
byte[] hash = digester.digest(mergedPasswordAndSalt.getBytes(""UTF-8""));

for (int i = 0; i < 5000; i++) {
  hash = digester.digest(ArrayUtils.addAll(hash, mergedPasswordAndSalt.getBytes(""UTF-8"")));
}

","460","<java><php><symfony><hash><sha>","4","4","1","2016-08-30 05:30:06","39209304","2","4","","","","2016-08-23 10:14:33",""
"41476370","java.lang.SecurityException: invalid SHA1 signature file digest for org/bouncycastle/tsp/TimeStampTokenInfo.class","I'm trying to run a spring boot application, but encounter below error:
2017-01-04 18:01:50 [Tomcat-startStop-1] ERROR o.apache.catalina.core.ContainerBase - A child container failed during start
java.util.concurrent.ExecutionException: org.apache.catalina.LifecycleException: Failed to start component [StandardEngine[Tomcat].StandardHost[localhost].StandardContext[]]
at java.util.concurrent.FutureTask.report(FutureTask.java:122)
at java.util.concurrent.FutureTask.get(FutureTask.java:192)
at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:916)
at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:871)
at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:147)
at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1408)
at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1398)
at java.util.concurrent.FutureTask.run(FutureTask.java:266)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
at java.lang.Thread.run(Thread.java:745)
Caused by: org.apache.catalina.LifecycleException: Failed to start component [StandardEngine[Tomcat].StandardHost[localhost].StandardContext[]]
at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:153)
... 6 common frames omitted
Caused by: java.lang.SecurityException: invalid SHA1 signature file digest for org/bouncycastle/tsp/TimeStampTokenInfo.class
at sun.security.util.SignatureFileVerifier.verifySection(SignatureFileVerifier.java:499)
at sun.security.util.SignatureFileVerifier.processImpl(SignatureFileVerifier.java:295)
at sun.security.util.SignatureFileVerifier.process(SignatureFileVerifier.java:238)
at java.util.jar.JarVerifier.processEntry(JarVerifier.java:273)
at java.util.jar.JarVerifier.update(JarVerifier.java:228)
at java.util.jar.JarFile.initializeVerifier(JarFile.java:383)
at java.util.jar.JarFile.getInputStream(JarFile.java:450)
at org.apache.tomcat.util.scan.JarFileUrlJar.getEntryInputStream(JarFileUrlJar.java:142)
at org.apache.catalina.startup.ContextConfig.processAnnotationsJar(ContextConfig.java:1987)
at org.apache.catalina.startup.ContextConfig.processAnnotationsUrl(ContextConfig.java:1958)
at org.apache.catalina.startup.ContextConfig.processAnnotations(ContextConfig.java:1912)
at org.apache.catalina.startup.ContextConfig.webConfig(ContextConfig.java:1157)
at org.apache.catalina.startup.ContextConfig.configureStart(ContextConfig.java:779)
at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:306)
at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:95)
at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90)
at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5150)
at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:147)
... 6 common frames omitted

Any ideas how to get over this? Or do I need to provide any other information.
","","460","<java><spring-boot><sha><jar-signing>","1","","0","2017-01-05 02:18:48","","0","","","","","2017-01-05 02:18:48",""
"51559181","SHA512 pure Lua 5.1 adaptation","I was searching for a pure Lua 5.1 adaptation for SHA512 and yielded no results anywhere I went. I found a similar question where someone tried to convert the SHA256 adaptation into SHA512 (except he was using Lua 5.3):
Adaptation of SHA2 512 gives incorrect results
Basically I couldn't use bitwise operators (not implemented in Lua 5.1) so I had to write my own implementations of them. 
This is my code:
local MOD               = 2^64;
local MODM              = MOD-1;


local function memoize(f)
local mt = {}
local t = setmetatable({}, mt)
function mt:__index(k)
    local v = f(k)
    t[k] = v
    return v
end
return t
end
local function make_bitop_uncached(t, m)
local function bitop(a, b)
    local res,p = 0,1
    while a ~= 0 and b ~= 0 do
        local am, bm = a % m, b % m
        res = res + t[am][bm] * p
        a = (a - am) / m
        b = (b - bm) / m
        p = p*m
    end
    res = res + (a + b) * p
    return res
 end
 return bitop
 end
 local function make_bitop(t)
 local op1 = make_bitop_uncached(t,2^1)
 local op2 = memoize(function(a) return memoize(function(b) return op1(a, b) 
 end) end)
 return make_bitop_uncached(op2, 2 ^ (t.n or 1))
 end
 local bxor1 = make_bitop({[0] = {[0] = 0,[1] = 1}, [1] = {[0] = 1, [1] = 0}, n = 4})
 local function bxor(a, b, c, ...)
 local z = nil
 if b then
    a = a % MOD
    b = b % MOD
    z = bxor1(a, b)
    if c then z = bxor(z, c, ...) end
    return z
elseif a then return a % MOD
else return 0 end
end
local function band(a, b, c, ...)
local z
if b then
    a = a % MOD
    b = b % MOD
    z = ((a + b) - bxor1(a,b)) / 2
    if c then z = bit32_band(z, c, ...) end
    return z
elseif a then return a % MOD
else return MODM end
end
local function bnot(x) return (-1 - x) % MOD end
local function rshift1(a, disp)
if disp < 0 then return lshift(a,-disp) end
return math.floor(a % 2 ^ 32 / 2 ^ disp)
end
local function rshift(x, disp)
if disp > 31 or disp < -31 then return 0 end
return rshift1(x % MOD, disp)
end
local function lshift(a, disp)
if disp < 0 then return rshift(a,-disp) end 
return (a * 2 ^ disp) % 2 ^ 32
end
-- UTILITY FUNCTIONS
--
-- transform a string of bytes in a string of hexadecimal digits
local function str2hexa (s)
local h = string.gsub(s, ""."", function(c)
    return string.format(""%02x"", string.byte(c))
end)
return h
end

-- transforms number 'l' into a big-endian sequence of 'n' bytes
--(coded as a string)
local function num2string(l, n)
local s = """"
for i = 1, n do
    --most significant byte of l
    local remainder = l % 256
    s = string.char(remainder) .. s
    --remove from l the bits we have already transformed
    l = (l-remainder) / 256;
end
return s
end

-- transform the big-endian sequence of eight bytes starting at
-- index 'i' in 's' into a number
local function s264num (s, i)
local n = 0
for i = i, i + 7 do
    n = n*256 + string.byte(s, i)
end
return n
end

--
-- MAIN SECTION
--

-- FIRST STEP: INITIALIZE HASH VALUES
--(second 32 bits of the fractional parts of the square roots of the first 
9th through 16th primes 23..53)

local HH = {}

local function initH512(H)
H = {0x6a09e667f3bcc908, 0xbb67ae8584caa73b, 0x3c6ef372fe94f82b, 0xa54ff53a5f1d36f1, 0x510e527fade682d1, 0x9b05688c2b3e6c1f, 0x1f83d9abfb41bd6b, 0x5be0cd19137e2179}
return H
end

-- SECOND STEP: INITIALIZE ROUND CONSTANTS
--(first 80 bits of the fractional parts of the cube roots of the first 80 primes 2..409)

local k = {
0x428a2f98d728ae22, 0x7137449123ef65cd, 0xb5c0fbcfec4d3b2f, 0xe9b5dba58189dbbc, 0x3956c25bf348b538,
0x59f111f1b605d019, 0x923f82a4af194f9b, 0xab1c5ed5da6d8118, 0xd807aa98a3030242, 0x12835b0145706fbe,
0x243185be4ee4b28c, 0x550c7dc3d5ffb4e2, 0x72be5d74f27b896f, 0x80deb1fe3b1696b1, 0x9bdc06a725c71235,
0xc19bf174cf692694, 0xe49b69c19ef14ad2, 0xefbe4786384f25e3, 0x0fc19dc68b8cd5b5, 0x240ca1cc77ac9c65,
0x2de92c6f592b0275, 0x4a7484aa6ea6e483, 0x5cb0a9dcbd41fbd4, 0x76f988da831153b5, 0x983e5152ee66dfab,
0xa831c66d2db43210, 0xb00327c898fb213f, 0xbf597fc7beef0ee4, 0xc6e00bf33da88fc2, 0xd5a79147930aa725,
0x06ca6351e003826f, 0x142929670a0e6e70, 0x27b70a8546d22ffc, 0x2e1b21385c26c926, 0x4d2c6dfc5ac42aed,
0x53380d139d95b3df, 0x650a73548baf63de, 0x766a0abb3c77b2a8, 0x81c2c92e47edaee6, 0x92722c851482353b,
0xa2bfe8a14cf10364, 0xa81a664bbc423001, 0xc24b8b70d0f89791, 0xc76c51a30654be30, 0xd192e819d6ef5218,
0xd69906245565a910, 0xf40e35855771202a, 0x106aa07032bbd1b8, 0x19a4c116b8d2d0c8, 0x1e376c085141ab53,
0x2748774cdf8eeb99, 0x34b0bcb5e19b48a8, 0x391c0cb3c5c95a63, 0x4ed8aa4ae3418acb, 0x5b9cca4f7763e373,
0x682e6ff3d6b2b8a3, 0x748f82ee5defb2fc, 0x78a5636f43172f60, 0x84c87814a1f0ab72, 0x8cc702081a6439ec,
0x90befffa23631e28, 0xa4506cebde82bde9, 0xbef9a3f7b2c67915, 0xc67178f2e372532b, 0xca273eceea26619c,
0xd186b8c721c0c207, 0xeada7dd6cde0eb1e, 0xf57d4f7fee6ed178, 0x06f067aa72176fba, 0x0a637dc5a2c898a6,
0x113f9804bef90dae, 0x1b710b35131c471b, 0x28db77f523047d84, 0x32caab7b40c72493, 0x3c9ebe0a15c9bebc,
0x431d67c49c100d4c, 0x4cc5d4becb3e42b6, 0x597f299cfc657e2a, 0x5fcb6fab3ad6faec, 0x6c44198c4a475817
 }

 -- THIRD STEP: PRE-PROCESSING (padding)

 local function preprocess(toProcess, len)
 --append a single '1' bit
 --append K '0' bits, where K is the minimum number >= 0 such that L + 1 + K = 896mod1024
local extra = - (len + 17) % 128 + 8
len = num2string(8 * len, 8)
toProcess = toProcess .. ""\128"" .. string.rep(""\0"", extra) .. len
assert(#toProcess % 128 == 0)
return toProcess
end

local function rrotate(rot, n)
return rshift(rot, n) or (rshift(rot, 64 - n))
end

local function digestblock(msg, i, H)
local w = {}
for j = 1, 16 do w[j] = s264num(msg, i + (j - 1) * 8) end
for j = 17, 80 do
    local v = w[j - 15] 
    local s0 = bxor(rrotate(v, 1), rrotate(v, 8), rshift(v, 7))
    v = w[j - 2] 
    w[j] = w[j - 16] + s0 + w[j - 7] + bxor(rrotate(v, 19), rrotate(v, 61), 
 rshift(v, 6))
end

local a, b, c, d, e, f, g, h = H[1], H[2], H[3], H[4], H[5], H[6], H[7], H[8]
for i = 1, 80 do
    a, b, c, d, e, f, g, h = a , b , c , d , e , f , g , h 
    local s0 = bxor(rrotate(a, 28), rrotate(a, 34), rrotate(a, 39))
    local maj = bxor(band(a, b), band(a, c), band(b, c))
    local t2 = s0 + maj
    local s1 = bxor(rrotate(e, 14), rrotate(e, 18), rrotate(e, 41))
    local ch = bxor (band(e, f), band(bnot(e), g))
    local t1 = h + s1 + ch + k[i] + w[i]
    h, g, f, e, d, c, b, a = g, f, e, d + t1, c, b, a, t1 + t2
end

H[1] = (H[1] + a) 
H[2] = (H[2] + b) 
H[3] = (H[3] + c) 
H[4] = (H[4] + d) 
H[5] = (H[5] + e) 
H[6] = (H[6] + f) 
H[7] = (H[7] + g) 
H[8] = (H[8] + h) 
end

local function finalresult512 (H)
-- Produce the final hash value:
return
str2hexa(num2string(H[1], 8)..num2string(H[2], 8)..num2string(H[3], 8)..num2string(H[4], 8)..
        num2string(H[5], 8)..num2string(H[6], 8)..num2string(H[7], 8)..num2string(H[8], 8))
end


-- Returns the hash512 for the given string.
local function hash512 (msg)
msg = preprocess(msg, #msg)
local H = initH512(HH)

-- Process the message in successive 1024-bit (128 bytes) chunks:
for i = 1, #msg, 128 do
    digestblock(msg, i, H)
end

return finalresult512(H)
end

print( hash512(""a"") )

At the end, when ""a"" is hashed, it turns into this:
8c14f3e36400000074d6c495c0000000fd2e4ad8b40000009a78880fb00000002c13f4fdc0000000bf50f67658000000cdf76c796c000000df8163cae8000000

Instead of the actual hash (which is this):
1F40FC92DA241694750979EE6CF582F2D5D7D28E18335DE05ABC54D0560E0F5302860C652BF08D560252AA5E74210546F369FBBBCE8C12CFC7957B2652FE9A75

So my question is, why is it wielding such different results. Is it a problem with the bitwise operator functions? I am stumped.
","Here is a working implementation of SHA512 for Lua 5.1
File sha2for51.lua
-- This module contains functions to calculate SHA2 digest.
--    Supported hashes: SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224, SHA-512/256
--    This is a pure-Lua module, compatible with Lua 5.1
--    It works on Lua 5.1/5.2/5.3/5.4/LuaJIT, but it doesn't use benefits of Lua versions 5.2+

--    Input data may must be provided either as a whole string or as a sequence of substrings (chunk-by-chunk).
--    Result (SHA2 digest) is a string of lowercase hex digits.
--
--    Simplest usage example:
--       local your_hash = require(""sha2for51"").sha512(""your string"")

--    See file ""sha2for51_test.lua"" for more examples.



local unpack, table_concat, byte, char, string_rep, sub, string_format, floor, ceil, min, max =
   table.unpack or unpack, table.concat, string.byte, string.char, string.rep, string.sub, string.format, math.floor, math.ceil, math.min, math.max

--------------------------------------------------------------------------------
-- BASIC BITWISE FUNCTIONS
--------------------------------------------------------------------------------

-- 32-bit bitwise functions
local AND, OR, XOR, SHL, SHR, ROL, ROR, HEX
-- Only low 32 bits of function arguments matter, high bits are ignored
-- The result of all functions (except HEX) is an integer (pair of integers) inside range 0..(2^32-1)

function SHL(x, n)
   return (x * 2^n) % 4294967296
end

function SHR(x, n)
   x = x % 4294967296 / 2^n
   return x - x % 1
end

function ROL(x, n)
   x = x % 4294967296 * 2^n
   local r = x % 4294967296
   return r + (x - r) / 4294967296
end

function ROR(x, n)
   x = x % 4294967296 / 2^n
   local r = x % 1
   return r * 4294967296 + (x - r)
end

local AND_of_two_bytes = {}  -- look-up table (256*256 entries)
for idx = 0, 65535 do
   local x = idx % 256
   local y = (idx - x) / 256
   local res = 0
   local w = 1
   while x * y ~= 0 do
      local rx = x % 2
      local ry = y % 2
      res = res + rx * ry * w
      x = (x - rx) / 2
      y = (y - ry) / 2
      w = w * 2
   end
   AND_of_two_bytes[idx] = res
end

local function and_or_xor(x, y, operation)
   -- operation: nil = AND, 1 = OR, 2 = XOR
   local x0 = x % 4294967296
   local y0 = y % 4294967296
   local rx = x0 % 256
   local ry = y0 % 256
   local res = AND_of_two_bytes[rx + ry * 256]
   x = x0 - rx
   y = (y0 - ry) / 256
   rx = x % 65536
   ry = y % 256
   res = res + AND_of_two_bytes[rx + ry] * 256
   x = (x - rx) / 256
   y = (y - ry) / 256
   rx = x % 65536 + y % 256
   res = res + AND_of_two_bytes[rx] * 65536
   res = res + AND_of_two_bytes[(x + y - rx) / 256] * 16777216
   if operation then
      res = x0 + y0 - operation * res
   end
   return res
end

function AND(x, y)
   return and_or_xor(x, y)
end

function OR(x, y)
   return and_or_xor(x, y, 1)
end

function XOR(x, y, z)          -- 2 or 3 arguments
   if z then
      y = and_or_xor(y, z, 2)
   end
   return and_or_xor(x, y, 2)
end

function HEX(x)
   return string_format(""%08x"", x % 4294967296)
end

-- Arrays of SHA2 ""magic numbers""
local sha2_K_lo, sha2_K_hi, sha2_H_lo, sha2_H_hi = {}, {}, {}, {}
local sha2_H_ext256 = {[224] = {}, [256] = sha2_H_hi}
local sha2_H_ext512_lo, sha2_H_ext512_hi = {[384] = {}, [512] = sha2_H_lo}, {[384] = {}, [512] = sha2_H_hi}

local common_W = {}  -- a temporary table shared between all calculations

local function sha256_feed_64(H, K, str, W, offs, size)
   -- offs >= 0, size >= 0, size is multiple of 64
   for pos = offs, size + offs - 1, 64 do
      for j = 1, 16 do
         pos = pos + 4
         local a, b, c, d = byte(str, pos - 3, pos)
         W[j] = ((a * 256 + b) * 256 + c) * 256 + d
      end
      for j = 17, 64 do
         local a, b = W[j-15], W[j-2]
         W[j] = XOR(ROR(a, 7), ROL(a, 14), SHR(a, 3)) + XOR(ROL(b, 15), ROL(b, 13), SHR(b, 10)) + W[j-7] + W[j-16]
      end
      local a, b, c, d, e, f, g, h, z = H[1], H[2], H[3], H[4], H[5], H[6], H[7], H[8]
      for j = 1, 64 do
         z = XOR(ROR(e, 6), ROR(e, 11), ROL(e, 7)) + AND(e, f) + AND(-1-e, g) + h + K[j] + W[j]
         h = g
         g = f
         f = e
         e = z + d
         d = c
         c = b
         b = a
         a = z + AND(d, c) + AND(a, XOR(d, c)) + XOR(ROR(a, 2), ROR(a, 13), ROL(a, 10))
      end
      H[1], H[2], H[3], H[4] = (a + H[1]) % 4294967296, (b + H[2]) % 4294967296, (c + H[3]) % 4294967296, (d + H[4]) % 4294967296
      H[5], H[6], H[7], H[8] = (e + H[5]) % 4294967296, (f + H[6]) % 4294967296, (g + H[7]) % 4294967296, (h + H[8]) % 4294967296
   end
end

local function sha512_feed_128(H_lo, H_hi, K_lo, K_hi, str, W, offs, size)
   -- offs >= 0, size >= 0, size is multiple of 128
   -- W1_hi, W1_lo, W2_hi, W2_lo, ...   Wk_hi = W[2*k-1], Wk_lo = W[2*k]
   for pos = offs, size + offs - 1, 128 do
      for j = 1, 32 do
         pos = pos + 4
         local a, b, c, d = byte(str, pos - 3, pos)
         W[j] = ((a * 256 + b) * 256 + c) * 256 + d
      end
      local tmp1, tmp2
      for jj = 17 * 2, 80 * 2, 2 do
         local a_lo, a_hi, b_lo, b_hi = W[jj-30], W[jj-31], W[jj-4], W[jj-5]
         tmp1 = XOR(SHR(a_lo, 1) + SHL(a_hi, 31), SHR(a_lo, 8) + SHL(a_hi, 24), SHR(a_lo, 7) + SHL(a_hi, 25)) + XOR(SHR(b_lo, 19) + SHL(b_hi, 13), SHL(b_lo, 3) + SHR(b_hi, 29), SHR(b_lo, 6) + SHL(b_hi, 26)) + W[jj-14] + W[jj-32]
         tmp2 = tmp1 % 4294967296
         W[jj-1] = XOR(SHR(a_hi, 1) + SHL(a_lo, 31), SHR(a_hi, 8) + SHL(a_lo, 24), SHR(a_hi, 7)) + XOR(SHR(b_hi, 19) + SHL(b_lo, 13), SHL(b_hi, 3) + SHR(b_lo, 29), SHR(b_hi, 6)) + W[jj-15] + W[jj-33] + (tmp1 - tmp2) / 4294967296
         W[jj] = tmp2
      end
      local a_lo, b_lo, c_lo, d_lo, e_lo, f_lo, g_lo, h_lo, z_lo = H_lo[1], H_lo[2], H_lo[3], H_lo[4], H_lo[5], H_lo[6], H_lo[7], H_lo[8]
      local a_hi, b_hi, c_hi, d_hi, e_hi, f_hi, g_hi, h_hi, z_hi = H_hi[1], H_hi[2], H_hi[3], H_hi[4], H_hi[5], H_hi[6], H_hi[7], H_hi[8]
      for j = 1, 80 do
         local jj = 2 * j
         tmp1 = XOR(SHR(e_lo, 14) + SHL(e_hi, 18), SHR(e_lo, 18) + SHL(e_hi, 14), SHL(e_lo, 23) + SHR(e_hi, 9)) + AND(e_lo, f_lo) + AND(-1-e_lo, g_lo) + h_lo + K_lo[j] + W[jj]
         z_lo = tmp1 % 4294967296
         z_hi = XOR(SHR(e_hi, 14) + SHL(e_lo, 18), SHR(e_hi, 18) + SHL(e_lo, 14), SHL(e_hi, 23) + SHR(e_lo, 9)) + AND(e_hi, f_hi) + AND(-1-e_hi, g_hi) + h_hi + K_hi[j] + W[jj-1] + (tmp1 - z_lo) / 4294967296
         h_lo = g_lo
         h_hi = g_hi
         g_lo = f_lo
         g_hi = f_hi
         f_lo = e_lo
         f_hi = e_hi
         tmp1 = z_lo + d_lo
         e_lo = tmp1 % 4294967296
         e_hi = z_hi + d_hi + (tmp1 - e_lo) / 4294967296
         d_lo = c_lo
         d_hi = c_hi
         c_lo = b_lo
         c_hi = b_hi
         b_lo = a_lo
         b_hi = a_hi
         tmp1 = z_lo + AND(d_lo, c_lo) + AND(b_lo, XOR(d_lo, c_lo)) + XOR(SHR(b_lo, 28) + SHL(b_hi, 4), SHL(b_lo, 30) + SHR(b_hi, 2), SHL(b_lo, 25) + SHR(b_hi, 7))
         a_lo = tmp1 % 4294967296
         a_hi = z_hi + (AND(d_hi, c_hi) + AND(b_hi, XOR(d_hi, c_hi))) + XOR(SHR(b_hi, 28) + SHL(b_lo, 4), SHL(b_hi, 30) + SHR(b_lo, 2), SHL(b_hi, 25) + SHR(b_lo, 7)) + (tmp1 - a_lo) / 4294967296
      end
      tmp1 = H_lo[1] + a_lo
      tmp2 = tmp1 % 4294967296
      H_lo[1], H_hi[1] = tmp2, (H_hi[1] + a_hi + (tmp1 - tmp2) / 4294967296) % 4294967296
      tmp1 = H_lo[2] + b_lo
      tmp2 = tmp1 % 4294967296
      H_lo[2], H_hi[2] = tmp2, (H_hi[2] + b_hi + (tmp1 - tmp2) / 4294967296) % 4294967296
      tmp1 = H_lo[3] + c_lo
      tmp2 = tmp1 % 4294967296
      H_lo[3], H_hi[3] = tmp2, (H_hi[3] + c_hi + (tmp1 - tmp2) / 4294967296) % 4294967296
      tmp1 = H_lo[4] + d_lo
      tmp2 = tmp1 % 4294967296
      H_lo[4], H_hi[4] = tmp2, (H_hi[4] + d_hi + (tmp1 - tmp2) / 4294967296) % 4294967296
      tmp1 = H_lo[5] + e_lo
      tmp2 = tmp1 % 4294967296
      H_lo[5], H_hi[5] = tmp2, (H_hi[5] + e_hi + (tmp1 - tmp2) / 4294967296) % 4294967296
      tmp1 = H_lo[6] + f_lo
      tmp2 = tmp1 % 4294967296
      H_lo[6], H_hi[6] = tmp2, (H_hi[6] + f_hi + (tmp1 - tmp2) / 4294967296) % 4294967296
      tmp1 = H_lo[7] + g_lo
      tmp2 = tmp1 % 4294967296
      H_lo[7], H_hi[7] = tmp2, (H_hi[7] + g_hi + (tmp1 - tmp2) / 4294967296) % 4294967296
      tmp1 = H_lo[8] + h_lo
      tmp2 = tmp1 % 4294967296
      H_lo[8], H_hi[8] = tmp2, (H_hi[8] + h_hi + (tmp1 - tmp2) / 4294967296) % 4294967296
   end
end

--------------------------------------------------------------------------------
-- CALCULATING THE MAGIC NUMBERS (roots of primes)
--------------------------------------------------------------------------------

do
   local function mul(src1, src2, factor, result_length)
      -- Long arithmetic multiplication: src1 * src2 * factor
      -- src1, src2 - long integers (arrays of digits in base 2^24)
      -- factor - short integer
      local result = {}
      local carry = 0
      local value = 0.0
      local weight = 1.0
      for j = 1, result_length do
         local prod = 0
         for k = max(1, j + 1 - #src2), min(j, #src1) do
            prod = prod + src1[k] * src2[j + 1 - k]
         end
         carry = carry + prod * factor
         local digit = carry % 16777216
         result[j] = digit
         carry = floor(carry / 16777216)
         value = value + digit * weight
         weight = weight * 2^24
      end
      return
         result,    -- long integer
         value      -- and its floating point approximation
   end

   local idx, step, p, one  = 0, {4, 1, 2, -2, 2}, 4, {1}
   local sqrt_hi, sqrt_lo, idx_disp = sha2_H_hi, sha2_H_lo, 0
   repeat
      p = p + step[p % 6]
      local d = 1
      repeat
         d = d + step[d % 6]
         if d * d > p then
            idx = idx + 1
            local root = p^(1/3)
            local R = mul({floor(root * 2^40)}, one, 1, 2)
            local _, delta = mul(R, mul(R, R, 1, 4), -1, 4)
            local hi = R[2] % 65536 * 65536 + floor(R[1] / 256)
            local lo = R[1] % 256 * 16777216 + floor(delta * (2^-56 / 3) * root / p)
            sha2_K_hi[idx], sha2_K_lo[idx] = hi, lo
            if idx < 17 then
               root = p^(1/2)
               R = mul({floor(root * 2^40)}, one, 1, 2)
               _, delta = mul(R, R, -1, 2)
               hi = R[2] % 65536 * 65536 + floor(R[1] / 256)
               lo = R[1] % 256 * 16777216 + floor(delta * 2^-17 / root)
               sha2_H_ext256[224][idx + idx_disp] = lo
               sqrt_hi[idx + idx_disp], sqrt_lo[idx + idx_disp] = hi, lo
               if idx == 8 then
                  sqrt_hi, sqrt_lo, idx_disp = sha2_H_ext512_hi[384], sha2_H_ext512_lo[384], -8
               end
            end
            break
         end
      until p % d == 0
   until idx > 79
end

-- Calculating IV for SHA512/224 and SHA512/256
for width = 224, 256, 32 do
   local H_lo, H_hi = {}, {}
   for j = 1, 8 do
      H_lo[j] = XOR(sha2_H_lo[j], 0xa5a5a5a5)
      H_hi[j] = XOR(sha2_H_hi[j], 0xa5a5a5a5)
   end
   sha512_feed_128(H_lo, H_hi, sha2_K_lo, sha2_K_hi, ""SHA-512/""..tonumber(width)..""\128""..string_rep(""\0"", 115)..""\88"", common_W, 0, 128)
   sha2_H_ext512_lo[width] = H_lo
   sha2_H_ext512_hi[width] = H_hi
end


--------------------------------------------------------------------------------
-- FINAL FUNCTIONS
--------------------------------------------------------------------------------

local function sha256ext(width, text)

   -- Create an instance (private objects for current calculation)
   local H, length, tail = {unpack(sha2_H_ext256[width])}, 0, """"

   local function partial(text_part)
      if text_part then
         if tail then
            length = length + #text_part
            local offs = 0
            if tail ~= """" and #tail + #text_part >= 64 then
               offs = 64 - #tail
               sha256_feed_64(H, sha2_K_hi, tail..sub(text_part, 1, offs), common_W, 0, 64)
               tail = """"
            end
            local size = #text_part - offs
            local size_tail = size % 64
            sha256_feed_64(H, sha2_K_hi, text_part, common_W, offs, size - size_tail)
            tail = tail..sub(text_part, #text_part + 1 - size_tail)
            return partial
         else
            error(""Adding more chunks is not allowed after asking for final result"", 2)
         end
      else
         if tail then
            local final_blocks = {tail, ""\128"", string_rep(""\0"", (-9 - length) % 64 + 1)}
            tail = nil
            -- Assuming user data length is shorter than 2^53 bytes
            -- Anyway, it looks very unrealistic that one would spend enough time to process a 2^53 bytes of data by using this Lua script :-)
            -- 2^53 bytes = 2^56 bits, so ""bit-counter"" fits in 7 bytes
            length = length * (8 / 256^7)  -- convert ""byte-counter"" to ""bit-counter"" and move floating point to the left
            for j = 4, 10 do
               length = length % 1 * 256
               final_blocks[j] = char(floor(length))
            end
            final_blocks = table_concat(final_blocks)
            sha256_feed_64(H, sha2_K_hi, final_blocks, common_W, 0, #final_blocks)
            local max_reg = width / 32
            for j = 1, max_reg do
               H[j] = HEX(H[j])
            end
            H = table_concat(H, """", 1, max_reg)
         end
         return H
      end
   end

   if text then
      -- Actually perform calculations and return the SHA256 digest of a message
      return partial(text)()
   else
      -- Return function for partial chunk loading
      -- User should feed every chunks of input data as single argument to this function and receive SHA256 digest by invoking this function without an argument
      return partial
   end

end


local function sha512ext(width, text)

   -- Create an instance (private objects for current calculation)
   local length, tail, H_lo, H_hi = 0, """", {unpack(sha2_H_ext512_lo[width])}, {unpack(sha2_H_ext512_hi[width])}

   local function partial(text_part)
      if text_part then
         if tail then
            length = length + #text_part
            local offs = 0
            if tail ~= """" and #tail + #text_part >= 128 then
               offs = 128 - #tail
               sha512_feed_128(H_lo, H_hi, sha2_K_lo, sha2_K_hi, tail..sub(text_part, 1, offs), common_W, 0, 128)
               tail = """"
            end
            local size = #text_part - offs
            local size_tail = size % 128
            sha512_feed_128(H_lo, H_hi, sha2_K_lo, sha2_K_hi, text_part, common_W, offs, size - size_tail)
            tail = tail..sub(text_part, #text_part + 1 - size_tail)
            return partial
         else
            error(""Adding more chunks is not allowed after asking for final result"", 2)
         end
      else
         if tail then
            local final_blocks = {tail, ""\128"", string_rep(""\0"", (-17-length) % 128 + 9)}
            tail = nil
            -- Assuming user data length is shorter than 2^53 bytes
            -- 2^53 bytes = 2^56 bits, so ""bit-counter"" fits in 7 bytes
            length = length * (8 / 256^7)  -- convert ""byte-counter"" to ""bit-counter"" and move floating point to the left
            for j = 4, 10 do
               length = length % 1 * 256
               final_blocks[j] = char(floor(length))
            end
            final_blocks = table_concat(final_blocks)
            sha512_feed_128(H_lo, H_hi, sha2_K_lo, sha2_K_hi, final_blocks, common_W, 0, #final_blocks)
            local max_reg = ceil(width / 64)
            for j = 1, max_reg do
               H_lo[j] = HEX(H_hi[j])..HEX(H_lo[j])
            end
            H_hi = nil
            H_lo = table_concat(H_lo, """", 1, max_reg):sub(1, width / 4)
         end
         return H_lo
      end
   end

   if text then
      -- Actually perform calculations and return the SHA256 digest of a message
      return partial(text)()
   else
      -- Return function for partial chunk loading
      -- User should feed every chunks of input data as single argument to this function and receive SHA256 digest by invoking this function without an argument
      return partial
   end

end

local sha2for51 = {
   sha224     = function (text) return sha256ext(224, text) end,  -- SHA-224
   sha256     = function (text) return sha256ext(256, text) end,  -- SHA-256
   sha384     = function (text) return sha512ext(384, text) end,  -- SHA-384
   sha512     = function (text) return sha512ext(512, text) end,  -- SHA-512
   sha512_224 = function (text) return sha512ext(224, text) end,  -- SHA-512/224
   sha512_256 = function (text) return sha512ext(256, text) end,  -- SHA-512/256
}

return sha2for51


File sha2for51_test.lua
--------------------------------------------------------------------------------
-- TESTS
--------------------------------------------------------------------------------

local sha2 = require""sha2for51""


local function test_sha256()

   local sha256 = sha2.sha256

   -- some test strings
   assert(sha256(""The quick brown fox jumps over the lazy dog"") == ""d7a8fbb307d7809469ca9abcb0082e4f8d5651e46d3cdb762d02d0bf37c9e592"")
   assert(sha256(""The quick brown fox jumps over the lazy cog"") == ""e4c4d8f3bf76b692de791a173e05321150f7a345b46484fe427f6acc7ecc81be"")
   assert(sha256(""abc"") == ""ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad"")
   assert(sha256(""123456"") == ""8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92"")
   assert(sha256(""abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq"") == ""248d6a61d20638b8e5c026930c3e6039a33ce45964ff2167f6ecedd419db06c1"")
   assert(sha256(""abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu"") == ""cf5b16a778af8380036ce59e7b0492370b249b11e8f07a51afac45037afee9d1"")

   -- chunk-by-chunk loading:   sha256(""string"") == sha256()(""st"")(""ri"")(""ng"")()
   local append_next_chunk = sha256() -- create a private closure for calculating digest of single string
   append_next_chunk(""The quick brown fox"")
   append_next_chunk("" jumps "")
   append_next_chunk("""")              -- chunk may be empty string
   append_next_chunk(""over the lazy dog"")
   assert(append_next_chunk() == ""d7a8fbb307d7809469ca9abcb0082e4f8d5651e46d3cdb762d02d0bf37c9e592"")  -- asking for final result (invocation without an argument)
   assert(append_next_chunk() == ""d7a8fbb307d7809469ca9abcb0082e4f8d5651e46d3cdb762d02d0bf37c9e592"")  -- you can ask the same result multiple times if needed
   -- append_next_chunk(""more text"") will fail here: no more chunks are allowed after receiving the result, the closure is useless now, let it be GC-ed
   assert(not pcall(append_next_chunk, ""more text""))

   -- one-liner is possible due to ""append_next_chunk(chunk)"" returns the function ""append_next_chunk""
   assert(sha256()(""The quick brown fox"")("" jumps "")("""")(""over the lazy dog"")() == ""d7a8fbb307d7809469ca9abcb0082e4f8d5651e46d3cdb762d02d0bf37c9e592"")

   -- empty string
   assert(sha256("""") == ""e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"")
   assert(sha256()() == ""e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"")

   -- computations of different strings don't interfere with each other
   local chunk_for_digits = sha256()
   chunk_for_digits(""123"")
   local chunk_for_fox = sha256()
   chunk_for_fox(""The quick brown fox jumps "")
   chunk_for_digits(""45"")
   chunk_for_fox(""over the lazy dog"")
   chunk_for_digits(""6"")
   assert(chunk_for_digits() == ""8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92"")
   assert(chunk_for_fox() == ""d7a8fbb307d7809469ca9abcb0082e4f8d5651e46d3cdb762d02d0bf37c9e592"")

   -- ""00...0\n""
   for i, dgst in pairs{  -- from 50 to 70 zeroes
      [50] = ""9660acb8046abf46cf27280e61abd174ebac98ad6855e093772b78df85523129"",
      [51] = ""31e1c552b357ace9bcb924691799a3c0d3aa10d8b428d9de28a278e3c79ecb7b"",
      [52] = ""0be5c4bcb6f47e30c13515594dbef4faa3a6485af67c177179fee8b33cd4f2a0"",
      [53] = ""d368c7f6038c1743bdbfe6a9c3a72d4e6916aa219ed8d559766c9e8f9845f3b8"",
      [54] = ""7080a4aa6ff030ae152fe610a62ee29464f92afeb176474551a69d35aab154a0"",
      [55] = ""149c1cda81fa9359c0c2a5e405ca972986f1d53e05f6282871dd1581046b3f44"",
      [56] = ""eb2d4d41948ce546c8adff07ee97342070c5b89789f616a33efe52c7d3ec73d4"",
      [57] = ""c831db596ccbbf248023461b1c05d3ae084bcc79bcb2626c5ec179fb34371f2a"",
      [58] = ""1345b8a930737b1069bbf9b891ce095850f6cdba6e25874ea526a2ccb611fe46"",
      [59] = ""380ad21e466885fae080ceeada75ac04944687e626e161c0b24e91af3eec2def"",
      [60] = ""b9ab06fa30ef8531c5eee11651aa86f8279a245e0a3c29bf6228c59475cc610a"",
      [61] = ""bcc187de6605d9e11a0cc6edf02b67fb651fe1779ec59438788093d8e376c07c"",
      [62] = ""ae0b3681157b83b34de8591d2453915e40c3105ae79434e241d82d4035218e01"",
      [63] = ""68a27b4735f6806fb5983c1805a23797aa93ea06e0ebcb6daada2ea1ab5a05af"",
      [64] = ""827d096d92f3deeaa0e8070d79f45beb176768e57a958a1cd325f5f4b754b048"",
      [65] = ""6c7bd8ec0fe9b4e05a2d27dd5e41a8687a9716a2e8926bdfa141266b12942ec1"",
      [66] = ""2f4b4c41017a2ddd1cc8cd75478a82e9452e445d4242f09782535376d6f4ba50"",
      [67] = ""b777b86e005807a446ead00986fcbf3bdd6c022524deabf017eeb3f0c30b6eed"",
      [68] = ""777da331f60c793f582e4ca33223778218ddfd241981f15be5886171fb8301b5"",
      [69] = ""06ed0c4cbf7d2b38de5f01eab2d2cd552d9cb87f97b714b96bb7a9d1b6117c6d"",
      [70] = ""e82223344d5f3c024514cfbe6d478b5df98bb878f34d7a07e7b064fa7fa91946""
   } do
      assert(sha256((""0""):rep(i)..""\n"") == dgst)
   end

   -- ""aa...a""
   assert(sha256((""a""):rep(55)) == ""9f4390f8d30c2dd92ec9f095b65e2b9ae9b0a925a5258e241c9f1e910f734318"")
   assert(sha256((""a""):rep(56)) == ""b35439a4ac6f0948b6d6f9e3c6af0f5f590ce20f1bde7090ef7970686ec6738a"")

   -- ""aa...a\n"" in chunk-by-chunk mode
   local next_chunk = sha256()
   for i = 1, 65 do
      next_chunk(""a"")
   end
   next_chunk(""\n"")
   assert(next_chunk() == ""574883a9977284a46845620eaa55c3fa8209eaa3ebffe44774b6eb2dba2cb325"")

   local function split_and_calculate_sha256(s, len) -- split string s in chunks of length len
      local next_chunk = sha256()
      for idx = 1, #s, len do
         next_chunk(s:sub(idx, idx + len - 1))
      end
      return next_chunk()
   end
   -- ""00...0\n00...0\n...00...0\n"" (80 lines of 80 zeroes each) in chunk-by-chunk mode with different chunk lengths
   local s = ((""0""):rep(80)..""\n""):rep(80)
   assert(split_and_calculate_sha256(s, 1)  == ""736c7a8b17e2cfd44a3267a844db1a8a3e8988d739e3e95b8dd32678fb599139"")
   assert(split_and_calculate_sha256(s, 2)  == ""736c7a8b17e2cfd44a3267a844db1a8a3e8988d739e3e95b8dd32678fb599139"")
   assert(split_and_calculate_sha256(s, 7)  == ""736c7a8b17e2cfd44a3267a844db1a8a3e8988d739e3e95b8dd32678fb599139"")
   assert(split_and_calculate_sha256(s, 70) == ""736c7a8b17e2cfd44a3267a844db1a8a3e8988d739e3e95b8dd32678fb599139"")

end


local function test_sha512()

   local sha512 = sha2.sha512

   assert(sha512(""abc"") == ""ddaf35a193617abacc417349ae20413112e6fa4e89a97ea20a9eeee64b55d39a2192992a274fc1a836ba3c23a3feebbd454d4423643ce80e2a9ac94fa54ca49f"")

   assert(sha512(""abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu"") ==
      ""8e959b75dae313da8cf4f72814fc143f8f7779c6eb9f7fa17299aeadb6889018501d289e4900f7e4331b99dec4b5433ac7d329eeb6dd26545e96e55b874be909"")

   -- ""aa...a""
   for i, dgst in pairs{  -- from 109 to 116 letters ""a""
      [109] = ""0cda6b04d9466bb7f3995c16732e1347f29c23a64fe0b085fadba0995644cc5aa71587423c274c10e09518310c5f866cfaceb229fabb574219f12182eb114182"",
      [110] = ""c825949632e509824543f7eaf159fb6041722fce3c1cdcbb613b3d37ff107c519417baac32f8e74fe29d7f4823bf6886956603dca5354a6ed6e4a542e06b7d28"",
      [111] = ""fa9121c7b32b9e01733d034cfc78cbf67f926c7ed83e82200ef86818196921760b4beff48404df811b953828274461673c68d04e297b0eb7b2b4d60fc6b566a2"",
      [112] = ""c01d080efd492776a1c43bd23dd99d0a2e626d481e16782e75d54c2503b5dc32bd05f0f1ba33e568b88fd2d970929b719ecbb152f58f130a407c8830604b70ca"",
      [113] = ""55ddd8ac210a6e18ba1ee055af84c966e0dbff091c43580ae1be703bdb85da31acf6948cf5bd90c55a20e5450f22fb89bd8d0085e39f85a86cc46abbca75e24d"",
      [114] = ""5e9eb0e4b270d086e77eeaf3ce8b1cfc615031b8c463dc34f5c139786f274f22accb4d89e8f40d1a0c2acc84c4dc0f2bab390a9d9495493bd617ed004271bb64"",
      [115] = ""eaa30f93760743ac7d0a6cb8ed5ef3b30c59097bc44d0ec337344301deba9fb92b20c488d55de415f6aaed0df4925b42894b81d2e1cde89d91ec7f6cc67262b4"",
      [116] = ""a8bff469314a1ce0c990bb3fd539d92accb6249cc674b559bc9d3898b7a126fee597197fa42c971443470053c7d7f54b09371a59b0f7af87b1917c5347e8f8e0"",
   } do
      assert(sha512((""a""):rep(i)) == dgst)
   end

end


local function all_tests_sha2()

   test_sha256()

   assert(sha2.sha224""abc"" == ""23097d223405d8228642a477bda255b32aadbce4bda0b3f7e36c9da7"")
   assert(sha2.sha224""abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq"" == ""75388b16512776cc5dba5da1fd890150b0c6455cb4f58b1952522525"")

   test_sha512()

   assert(sha2.sha384""abc"" == ""cb00753f45a35e8bb5a03d699ac65007272c32ab0eded1631a8b605a43ff5bed8086072ba1e7cc2358baeca134c825a7"")
   assert(sha2.sha384""abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu"" == ""09330c33f71147e83d192fc782cd1b4753111b173b3b05d22fa08086e3b0f712fcc7c71a557e2db966c3e9fa91746039"")

   assert(sha2.sha512_224""abc"" == ""4634270f707b6a54daae7530460842e20e37ed265ceee9a43e8924aa"")
   assert(sha2.sha512_224""abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu"" == ""23fec5bb94d60b23308192640b0c453335d664734fe40e7268674af9"")

   assert(sha2.sha512_256""abc"" == ""53048e2681941ef99b2e29b76b4c7dabe4c2d0c634fc6d46e0e2f13107e7af23"")
   assert(sha2.sha512_256""abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu"" == ""3928e184fb8690f840da3988121d31be65cb9d3ef83ee6146feac861e19b563a"")

   print""All tests passed""

end

all_tests_sha2()



local function benchmark()

   print(""Benchmarking (calculating SHA512 of 1MByte string of letters 'a')..."")

   local time_intervals = {}

   local length = 2^20
   local part = (""a""):rep(2^12)
   local N = length/#part
   local result

   local k = 2
   for j = 1, 2*k-1 do
      local clk0 = os.clock()
      local x = sha2.sha512()
      for j = 1, N do
         x(part)
      end
      result = x()
      time_intervals[j] = os.clock() - clk0
   end

   --print(""Result = ""..result)

   -- get median time
   table.sort(time_intervals)
   print('CPU seconds:', time_intervals[k])

end

benchmark()  -- about 15 seconds per megabyte

","459","<lua><sha>","1","3","1","2018-07-27 16:04:59","","1","","","","","2018-07-27 13:36:28",""
"34734463","How to validate password hash using a custom sh1 encryption and a custom salt in Yii 2.0?","Below is my account credentials.
id    username      password                          salt      status
1     test          qepoihadfnkdsgbkajb1358139jbdf    35asf24s  1

Below is my sql query what I would like to execute.
$sql = ""SELECT * FROM user WHERE username = :username AND password = 'SHA1(CONCAT(salt, SHA1(CONCAT(salt, SHA1(':password')))))' AND status = :status"";

Below is my code snippet to retrieve the user record.
$this->_user = User::findBySql($sql, [
            ':username' => $this->username,
            ':password' => $this->password,
            ':status'   => 1,
        ])->one(); 

The above code returns null. It seems like it cannot encrypt the entered password to compare with the password hash. Thus, I have tried the following code. 
 $this->_user = User::find()->where(""username = :username AND (password = 'SHA1(CONCAT(salt, SHA1(CONCAT(salt, SHA1(':password')))))' OR password = '"" . md5("":password"") . ""') AND status = :status"")
                                          ->addParams([
            ':username' => $this->username,
            ':password' => $this->password,
            ':status'   => 1,
        ])->one();

This also returns null as result. How can I encrypt the entered password using custom salt to compare with the password hash and return the record?  Even I am working with Yii 2 but I do not want to use Yii manner to log the user in because of some technical requirements.
","Don't use findBySql if you don't have specific reason. You loose abstractions. 
'"" . md5("":password"") . ""' is also bad and wrong: you hashed not sql request, but string :password.
Look this code:
$query = User::find()->where('password_hash = SHA1(:password)', [
    ':password' => 'password'
]);

$sql = $query->createCommand()->getRawSql();
$user = $query->one();

Use getRawSql for debug your request. You always can see what sended to sql server.
","455","<php><passwords><yii2><sha><password-hash>","1","0","2","2016-01-13 06:57:50","","2","","2224584","","2016-01-12 14:16:43","2016-01-12 02:09:15",""
"34734463","How to validate password hash using a custom sh1 encryption and a custom salt in Yii 2.0?","Below is my account credentials.
id    username      password                          salt      status
1     test          qepoihadfnkdsgbkajb1358139jbdf    35asf24s  1

Below is my sql query what I would like to execute.
$sql = ""SELECT * FROM user WHERE username = :username AND password = 'SHA1(CONCAT(salt, SHA1(CONCAT(salt, SHA1(':password')))))' AND status = :status"";

Below is my code snippet to retrieve the user record.
$this->_user = User::findBySql($sql, [
            ':username' => $this->username,
            ':password' => $this->password,
            ':status'   => 1,
        ])->one(); 

The above code returns null. It seems like it cannot encrypt the entered password to compare with the password hash. Thus, I have tried the following code. 
 $this->_user = User::find()->where(""username = :username AND (password = 'SHA1(CONCAT(salt, SHA1(CONCAT(salt, SHA1(':password')))))' OR password = '"" . md5("":password"") . ""') AND status = :status"")
                                          ->addParams([
            ':username' => $this->username,
            ':password' => $this->password,
            ':status'   => 1,
        ])->one();

This also returns null as result. How can I encrypt the entered password using custom salt to compare with the password hash and return the record?  Even I am working with Yii 2 but I do not want to use Yii manner to log the user in because of some technical requirements.
","This is the wrong way to check a password. It is not possible to verify a password inside an SQL statement, because of the salt which is hopefully applied. Also it is unsecure to use SHA-1 to store passwords, because this algorithm is ways too fast and can be brute-forced easily.
Instead you can do a query with only the username. If a row could be found, you can read and verify the password hash:
$sql = ""SELECT * FROM user WHERE username = :username AND status = :status"";

The Yii framework offers helper functions to generate and verify password hashes. This documentation may get you started. An alternative is to call the PHP functions password_hash() and password_verify() directly.
","455","<php><passwords><yii2><sha><password-hash>","1","0","2","2016-01-13 06:57:50","","2","","2224584","","2016-01-12 14:16:43","2016-01-12 02:09:15",""
"21355270","SHA-1 a string (git-hash-object string)","I am trying to encrypt SHA-1 the following string:
commit 218\0tree 64a7513fad0b86d34b6feedbf9c2e99135819861 parent 233634213baf3f40236233f28c6646f20786a80a author CTF user <me@example.com> 1390678027 +0000 committer CTF user <me@example.com> 1390678027 +0000 Give me a Gitcoin 200

It is a git hash-object input, with the header along with the commit message. The results I am getting are very different from one method to the other.
Using git hash-object, I get bed6b1001619ad84548d05db65a75ac80bf79f31.
Using Ruby's digest/sha1, I get e729e36abf0fa4da392b8f2acc1561ec5d298af9.
Using http://www.sha1-online.com, I get d543ddbfb7607464f5f964b9a3536eccedd1e1a4.
This is extremely confusing. Which one is it and why am I unable to mimic git-hash-object's functionality? I read http://git-scm.com/book/en/Git-Internals-Git-Objects and followed the instructions there but I cannot seem to get the right hash digest.
Here is my ruby snippet:
Digest::SHA1.hexdigest ""commit #{body.length}\0#{body}""
Is there a way in git to see the hash-object header, or the string it uses to hash out the SHA-1? What is wrong with my method above?
","hello fellow stripe capture the flag contestant :)
this is how you do it (make sure that there is a newline!)
require 'digest/sha1'

content = ""tree #{tree}
parent #{parent}
author CTF user <me@example.com> #{timestamp} +0000
committer CTF user <me@example.com> #{timestamp} +0000

Give me a Gitcoin

1
""

Digest::SHA1.hexdigest ""commit #{content.length}\0#{content}""

","454","<ruby><git><sha1><sha><digest>","-1","3","1","2014-01-26 01:50:15","21358650","6","","","","","2014-01-25 19:35:22",""
"34052467","How to build chrony with SHA hashes authentication?","I am trying to build chorny for an embedded linux system. I am able to compile, run and sync time currently. I can also enable authentication using MD5 and that works as well.
I can't figure out how to enable SHA hashes. Using it would be when build the package but there is no option in configure for that. Has anybody done this before?
Thanks
This is the output if i set the hash type in my chrony.keys file to SHA1:
root@gsdm:~# chronyd -d 
2000-01-08T00:54:56Z chronyd version 2.2 starting (+CMDMON +NTP +REFCLOCK +RTC -PRIVDROP -SCFILTER -SECHASH +ASYNCDNS +IPV6 -DEBUG)
2000-01-08T00:54:56Z Unknown hash function in key 12
2000-01-08T00:54:56Z Initial frequency 1.355 ppm

When I run ./configure -h i get this:
`configure' configures this package to adapt to many kinds of systems.

Usage: ./configure [OPTION]...

Defaults for the options are specified in brackets.

Configuration:
  -h, --help              display this help and exit

Installation directories:
  --prefix=PREFIX         install architecture-independent files in PREFIX
                          [/usr/local]
  --exec-prefix=EPREFIX   install architecture-dependent files in EPREFIX
                          [PREFIX]

By default, `make install' will install all the files in
`/usr/local/bin', `/usr/local/lib' etc.  You can specify
an installation prefix other than `/usr/local' using `--prefix',
for instance `--prefix=/home/user'.

For better control, use the options below.
  --disable-readline     Disable line editing support
  --without-readline     Don't use GNU readline even if it is available
  --without-editline     Don't use editline even if it is available
  --readline-dir=DIR     Specify parent of readline include and lib directories
  --readline-inc-dir=DIR Specify where readline include directory is
  --readline-lib-dir=DIR Specify where readline lib directory is
  --with-ncurses-library=DIR Specify where ncurses lib directory is
  --disable-sechash      Disable support for hashes other than MD5
  --without-nss          Don't use NSS even if it is available
  --without-tomcrypt     Don't use libtomcrypt even if it is available
  --disable-cmdmon       Disable command and monitoring support
  --disable-ntp          Disable NTP support
  --disable-refclock     Disable reference clock support
  --disable-phc          Disable PHC refclock driver
  --disable-pps          Disable PPS refclock driver
  --disable-ipv6         Disable IPv6 support
  --disable-rtc          Don't include RTC even on Linux
  --disable-privdrop     Disable support for dropping root privileges
  --without-libcap       Don't use libcap even if it is available
  --enable-scfilter      Enable support for system call filtering
  --without-seccomp      Don't use seccomp even if it is available
  --disable-asyncdns     Disable asynchronous name resolving
  --disable-forcednsretry Don't retry on permanent DNS error
  --with-ntp-era=SECONDS Specify earliest assumed NTP time in seconds
                         since 1970-01-01 [50*365 days ago]
  --with-user=USER       Specify default chronyd user [root]
  --with-hwclockfile=PATH Specify default path to hwclock(8) adjtime file
  --with-sendmail=PATH   Path to sendmail binary [/usr/lib/sendmail]
  --enable-debug         Enable debugging support

Fine tuning of the installation directories:
  --sysconfdir=DIR       chrony.conf location [/etc]
  --bindir=DIR           user executables [EPREFIX/bin]
  --sbindir=DIR          system admin executables [EPREFIX/sbin]
  --datarootdir=DIR      data root [PREFIX/share]
  --infodir=DIR          info documentation [DATAROOTDIR/info]
  --mandir=DIR           man documentation [DATAROOTDIR/man]
  --docdir=DIR           documentation root [DATAROOTDIR/doc/chrony]
  --localstatedir=DIR    modifiable single-machine data [/var]
  --chronysockdir=DIR    location for chrony sockets [LOCALSTATEDIR/run/chrony]
  --chronyvardir=DIR     location for chrony data [LOCALSTATEDIR/lib/chrony]

Overriding system detection when cross-compiling:
  --host-system=OS       Specify system name (uname -s)
  --host-release=REL     Specify system release (uname -r)
  --host-machine=CPU     Specify machine (uname -m)

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  CPPFLAGS    C preprocessor flags, e.g. -I<include dir> if you have
              headers in a nonstandard directory <include dir>
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

","Secure hashes require either tomcrypt or NSS and will be enabled by default at configure time if either of those libraries are present on your system.
There's no configure option to enable them, but there are options to disable them:
--disable-sechash      Disable support for hashes other than MD5
--without-nss          Don't use NSS even if it is available
--without-tomcrypt     Don't use libtomcrypt even if it is available

The -SECHASH in the first line of your chrony output indicates that either the secure hash options were disabled at configure time, or (more likely) you didn't have the necessary libraries installed.
","454","<hash><md5><sha><ntp>","0","0","2","2019-06-08 02:28:14","","0","","5632170","","2015-12-02 21:57:59","2015-12-02 20:33:50",""
"34052467","How to build chrony with SHA hashes authentication?","I am trying to build chorny for an embedded linux system. I am able to compile, run and sync time currently. I can also enable authentication using MD5 and that works as well.
I can't figure out how to enable SHA hashes. Using it would be when build the package but there is no option in configure for that. Has anybody done this before?
Thanks
This is the output if i set the hash type in my chrony.keys file to SHA1:
root@gsdm:~# chronyd -d 
2000-01-08T00:54:56Z chronyd version 2.2 starting (+CMDMON +NTP +REFCLOCK +RTC -PRIVDROP -SCFILTER -SECHASH +ASYNCDNS +IPV6 -DEBUG)
2000-01-08T00:54:56Z Unknown hash function in key 12
2000-01-08T00:54:56Z Initial frequency 1.355 ppm

When I run ./configure -h i get this:
`configure' configures this package to adapt to many kinds of systems.

Usage: ./configure [OPTION]...

Defaults for the options are specified in brackets.

Configuration:
  -h, --help              display this help and exit

Installation directories:
  --prefix=PREFIX         install architecture-independent files in PREFIX
                          [/usr/local]
  --exec-prefix=EPREFIX   install architecture-dependent files in EPREFIX
                          [PREFIX]

By default, `make install' will install all the files in
`/usr/local/bin', `/usr/local/lib' etc.  You can specify
an installation prefix other than `/usr/local' using `--prefix',
for instance `--prefix=/home/user'.

For better control, use the options below.
  --disable-readline     Disable line editing support
  --without-readline     Don't use GNU readline even if it is available
  --without-editline     Don't use editline even if it is available
  --readline-dir=DIR     Specify parent of readline include and lib directories
  --readline-inc-dir=DIR Specify where readline include directory is
  --readline-lib-dir=DIR Specify where readline lib directory is
  --with-ncurses-library=DIR Specify where ncurses lib directory is
  --disable-sechash      Disable support for hashes other than MD5
  --without-nss          Don't use NSS even if it is available
  --without-tomcrypt     Don't use libtomcrypt even if it is available
  --disable-cmdmon       Disable command and monitoring support
  --disable-ntp          Disable NTP support
  --disable-refclock     Disable reference clock support
  --disable-phc          Disable PHC refclock driver
  --disable-pps          Disable PPS refclock driver
  --disable-ipv6         Disable IPv6 support
  --disable-rtc          Don't include RTC even on Linux
  --disable-privdrop     Disable support for dropping root privileges
  --without-libcap       Don't use libcap even if it is available
  --enable-scfilter      Enable support for system call filtering
  --without-seccomp      Don't use seccomp even if it is available
  --disable-asyncdns     Disable asynchronous name resolving
  --disable-forcednsretry Don't retry on permanent DNS error
  --with-ntp-era=SECONDS Specify earliest assumed NTP time in seconds
                         since 1970-01-01 [50*365 days ago]
  --with-user=USER       Specify default chronyd user [root]
  --with-hwclockfile=PATH Specify default path to hwclock(8) adjtime file
  --with-sendmail=PATH   Path to sendmail binary [/usr/lib/sendmail]
  --enable-debug         Enable debugging support

Fine tuning of the installation directories:
  --sysconfdir=DIR       chrony.conf location [/etc]
  --bindir=DIR           user executables [EPREFIX/bin]
  --sbindir=DIR          system admin executables [EPREFIX/sbin]
  --datarootdir=DIR      data root [PREFIX/share]
  --infodir=DIR          info documentation [DATAROOTDIR/info]
  --mandir=DIR           man documentation [DATAROOTDIR/man]
  --docdir=DIR           documentation root [DATAROOTDIR/doc/chrony]
  --localstatedir=DIR    modifiable single-machine data [/var]
  --chronysockdir=DIR    location for chrony sockets [LOCALSTATEDIR/run/chrony]
  --chronyvardir=DIR     location for chrony data [LOCALSTATEDIR/lib/chrony]

Overriding system detection when cross-compiling:
  --host-system=OS       Specify system name (uname -s)
  --host-release=REL     Specify system release (uname -r)
  --host-machine=CPU     Specify machine (uname -m)

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  CPPFLAGS    C preprocessor flags, e.g. -I<include dir> if you have
              headers in a nonstandard directory <include dir>
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

","https://chrony.tuxfamily.org/doc/3.5/installation.html
If development files for the Nettle, NSS, or libtomcrypt library are available, chronyd will be built with support for other cryptographic hash functions than MD5, which can be used for NTP authentication with a symmetric key. 

The -SECHASH indicates the chrony version compiled without Nettle, NSS, or libtomcrypt, so if you want to use the SHA keys, you could install it through source code. 
While in Alpine 3.8, I install nettle-dev library:
apk add nettle-dev
./configure
... ...
Checking for nettle : Yes
Features : +CMDMON +NTP +REFCLOCK +RTC -PRIVDROP -SCFILTER -SIGND +ASYNCDNS -READLINE +SECHASH +IPV6 -DEBUG
Creating Makefile
Creating doc/Makefile
Creating test/unit/Makefile

make install

the Features show that SECHASH is enabled.
So this version does support SHA1
","454","<hash><md5><sha><ntp>","0","0","2","2019-06-08 02:28:14","","0","","5632170","","2015-12-02 21:57:59","2015-12-02 20:33:50",""
"10763603","Sha 1 php, possible variations and regex","First,
Is it possible for a sha1 hash to be all numbers or letters,
And second is there any need for the start and end delimiters when using a regex to check for a sha 1 hash, ie,
/^[0-9a-f]{40}$/i

inplace of
/[0-9a-f]{40}/i

Is there any need to use the delimeters?
I ask as should I check if the pattern has at least one number and at least one letter, or does this not matter?
","A sha1 hash is a 160 bit value that can be between all 0s and all 1s.  This means that yes, in theory it can be all numbers or all letters (more specifically, the hex representation of it can be).
As for the beginning and ending markers, they are required unless you check the string in other ways.  The two patterns you posted are not equivalent:
/^[0-9a-f]{40}$/i

A string that consists of and only of 40 character in 0-9 or a-f.
/[0-9a-f]{40}/i

A string that contains 40 character in 0-9 or a-f in a row.
In other words, the first pattern would consider this invalid whereas the second would not:
|0000000000000000000000000000000000000000|
The second pattern would match the 40 valid characters in the middle and not care about the rest of it.
You could effectively turn the second pattern into the first if you also used strlen to verify that the string is exactly 40 characters.  This would be a bit redundant though, as you'd essentially then have a pattern of:
A string that: (contains 40 characters in 0-9 or a-f in a row) and (is exactly 40 characters).
The first version expresses it more compactly, though the second is a bit more obvious.
","454","<php><regex><sha>","1","4","1","2012-05-26 05:01:55","10763716","1","0","","","","2012-05-26 04:32:29",""
"41861058","Error signing apk after moving to JDK 1.8 and SDK 25","In order to add some new features to our app, we had to upgrade to SDK & Build-Tools 25 which also require updating to JDK 1.8. After upgrading, we can no longer sign our APK, we get the following error:
The security strength of SHA-1 digest algorithm is not sufficient for this key size
Now we can correct this by creating a new key but that means that we can no longer update our APK in the store. Is there a better workaround? It seems like a lot of people are going to hit this sometime soon.
","","454","<android><java-8><apk><sha>","5","","0","2017-01-25 20:27:08","","1","","","","","2017-01-25 20:27:08",""
"41954906","SHA Hashing for training/validation/testing set split","Following is a small snippet from the full code
I am trying to understand the logical process of this methodology of split.

SHA1 encoding is 40 characters in hexadecimal. What kind of probability has been computed in the expression ? 
What is the reason for (MAX_NUM_IMAGES_PER_CLASS + 1) ? Why add 1 ?
Does setting different values to MAX_NUM_IMAGES_PER_CLASS have an effect on the split quality ?
How good a quality of split would we get out of this ? Is this is a recommended way of splitting datasets ?
# We want to ignore anything after '_nohash_' in the file name when
  # deciding which set to put an image in, the data set creator has a way of
  # grouping photos that are close variations of each other. For example
  # this is used in the plant disease data set to group multiple pictures of
  # the same leaf.
  hash_name = re.sub(r'_nohash_.*$', '', file_name)
  # This looks a bit magical, but we need to decide whether this file should
  # go into the training, testing, or validation sets, and we want to keep
  # existing files in the same set even if more files are subsequently
  # added.
  # To do that, we need a stable way of deciding based on just the file name
  # itself, so we do a hash of that and then use that to generate a
  # probability value that we use to assign it.
  hash_name_hashed = hashlib.sha1(compat.as_bytes(hash_name)).hexdigest()
  percentage_hash = ((int(hash_name_hashed, 16) %
                      (MAX_NUM_IMAGES_PER_CLASS + 1)) *
                     (100.0 / MAX_NUM_IMAGES_PER_CLASS))
  if percentage_hash < validation_percentage:
    validation_images.append(base_name)
  elif percentage_hash < (testing_percentage + validation_percentage):
    testing_images.append(base_name)
  else:
    training_images.append(base_name)

  result[label_name] = {
      'dir': dir_name,
      'training': training_images,
      'testing': testing_images,
      'validation': validation_images,
      }


","This code is simply distributing file names “randomly” (but reproducibly) over a number of bins and then grouping the bins into just the three categories.  The number of bits in the hash is irrelevant (so long as it’s “enough”, which is probably about 35 for this sort of work).
Reducing modulo n+1 produces a value on [0,n], and multiplying that by 100/n obviously produces a value on [0,100], which is being interpreted as a percentage.  n being MAX_NUM_IMAGES_PER_CLASS is meant to control the rounding error in the interpretation to be no more than “one image”.
This strategy is reasonable, but looks a bit more sophisticated than it is (since there is still rounding going on, and the remainder introduces a bias—although with numbers this large it is utterly unobservable).  You could make it simpler and more accurate by simply precalculating ranges over the whole space of 2^160 hashes for each class and just checking the hash against the two boundaries.  That still notionally involves rounding, but with 160 bits it’s only that intrinsic to representing decimals like 31% in floating point.
","454","<python><machine-learning><tensorflow><sha>","7","1","1","2019-05-04 17:43:37","","0","","4516106","","2017-05-24 08:19:51","2017-01-31 10:16:12",""
"4687518","How long can a hash left out in the open be considered safe?","If I were to leave a SHA2 family hash out on my website - how long would it be considered safe? How long would I have before I could be sure that someone would find a collision for it and know what was hashed?
I know that the amount of time would be based on the computational power of the one seeking to break it. It would also depend on the string length, but I'm curious just how secure hashes are.
Since many of us run web-servers we constantly have to be prepared for the day when someone might make it all the way to the database which stores the user hashes. So, move the server security out of the way and then what do you have?
This is a slightly theoretical area for many of the people I have talked with, so I would love to actually have some more information about average expectations for cracking.
hash('sha256', 'mytext');
hash('sha256', 'thisismytext');
hash('sha256', 'xx$1sw@the4e');
hash('sha256', 'thisismyslightlylongertext');

db695168e73ae294e9c4ea90ff593e211aa1b5693f49303a426148433400d23f
b62c6ac579abf8a29e71d98aeba1447c66c69002cfd847b148584f886fd297ef
501f1b26abbc75594d06f0935c8bc502d7bcccf5015227bd6ac95041770acb24
3debc12761bbeb5b4460978ac2be5b104163de02ea799f0705399d0e5b706334

","You're assuming no rainbow table targeting your setup would be available, which is not a given. IMNSHO, consider it broken the moment it's leaked. Even with bcrypt you cannot be sure about how much work was already done before your hash became public.
","450","<security><hash><sha>","6","0","3","2011-12-15 03:31:47","4691495","0","3","99923","","2011-01-14 16:59:24","2011-01-14 02:48:11",""
"4687518","How long can a hash left out in the open be considered safe?","If I were to leave a SHA2 family hash out on my website - how long would it be considered safe? How long would I have before I could be sure that someone would find a collision for it and know what was hashed?
I know that the amount of time would be based on the computational power of the one seeking to break it. It would also depend on the string length, but I'm curious just how secure hashes are.
Since many of us run web-servers we constantly have to be prepared for the day when someone might make it all the way to the database which stores the user hashes. So, move the server security out of the way and then what do you have?
This is a slightly theoretical area for many of the people I have talked with, so I would love to actually have some more information about average expectations for cracking.
hash('sha256', 'mytext');
hash('sha256', 'thisismytext');
hash('sha256', 'xx$1sw@the4e');
hash('sha256', 'thisismyslightlylongertext');

db695168e73ae294e9c4ea90ff593e211aa1b5693f49303a426148433400d23f
b62c6ac579abf8a29e71d98aeba1447c66c69002cfd847b148584f886fd297ef
501f1b26abbc75594d06f0935c8bc502d7bcccf5015227bd6ac95041770acb24
3debc12761bbeb5b4460978ac2be5b104163de02ea799f0705399d0e5b706334

","First, you are not talking about a collision. A collision is when someone finds two distinct messages which hash to the same value. Here you are not fearing someone finding another input which hash to the value you publish; indeed, you fear someone finding your input. The correct term is preimage attack. Sometimes, we say that the attacker is trying to ""invert"" the hash function (find an input matching a given output).
There are two ways to try to find a preimage for a given hash value: exploit a weakness of the hash function, or guess the input by trying out candidates.
There is no known weakness of SHA-2 with regards to preimage resistance. Come to that, there is no such known weakness for MD5 or even MD4, although those two functions are considered to be, cryptographically speaking, thoroughly broken. Therefore, barring stupendous advances in scientific research on hash function, chances are that your hash value will not be found through a hash function cryptographic weakness.
Trying candidates may be possible, or not, depending on what the attacker knows of the input. This is quite hard to accurately model. Suppose, for instance, that the input is a single word containing seven letters. There are 267 = 8031810176 such words. Trying out all of them with SHA-256, comparing each time with your hash value, takes a few minutes on a recent PC, with a naive implementation.
On a more general basis, exploring the set of possible inputs is called a dictionary attack because it is often applied on the problem of recovering a user password: users are depressingly unimaginative and often choose passwords from a limited set of, well, ""words"", and it seems logical to call ""dictionary"" that set of words. We also call it ""brute force"" or ""exhaustive search"".
Assuming that the dictionary is sufficiently small for an attacker to realistically try out all its words, then not only your hash value will be eventually inverted (if there is enough incentive for the attacker), but this also opens the way for cost sharing: the attacker may try to share his computing efforts across several similar attack situations (i.e. several hash values to invert, with the same hash function -- there again, a common password-related attack model). A basic cost sharing method is to make a precomputed table: the attacker computes all the hashes for his dictionary once; then, all subsequent hash values can be attacked by simply looking up the hash value in the table. A lookup is very fast (the attacker sorts his hashes in increasing order). Rainbow tables are a kind of precomputed table, in a smart way which allows for a compact representation: they make it possible for the attacker to ""keep"" a big precomputed table without needing a truckload of hard disks. Still, rainbow or not, all the values in the table (the one before compression in the case of a rainbow table) must be computed at least once by an attacker somewhere, i.e. that someone is able to do a full dictionary attack. This has two costs: the CPU cost (for computing all the hashes) and the storage cost (for storing the hash values). A rainbow table makes the storage cheaper, but does not improve things with regards to CPU.
Salting defeats precomputed tables (including rainbow tables). It makes small dictionaries more tolerable. That is, if we assume that inverting one hash value is doable, then the salt makes sure that, at least, the attacker will have to pay the full CPU cost of a dictionary attack each time, and he won't be able to share his cost across several attacks or with other attackers. Salting is needed for passwords, because it turned out to be impossible, in all generality, to make generic users choose and remember passwords from a large enough set of possible passwords.
It still is much better if your input is from a dictionary large enough to defeat a single brute forcing effort. The important thing is the size of the set of values which your input string may take; that set must be estimated with regards to what the attacker knows of the attacked data. For instance, if the attacker is trying to find a user password, then he knows that the input string is short (users have little patience) and consists only in characters that can be input (blindly !) on a keyboard; and he also knows that the sequence can be memorized, which makes things like "".%f*(.ds/~\d09j@"" quite improbable. There is no limit per se on the input size; we say that rainbow tables are limited to ""15 characters or so"" because users who accept to type more than 15 characters will also choose passwords from too large a set to allow the single brute force effort needed for table construction. Note that trying all sequences of 15 characters is already way too much (even all sequences of 15 lowercase letters imply more than 270 hash computations, and that's not really feasible with today's technology).
","450","<security><hash><sha>","6","17","3","2011-12-15 03:31:47","4691495","0","3","99923","","2011-01-14 16:59:24","2011-01-14 02:48:11",""
"4687518","How long can a hash left out in the open be considered safe?","If I were to leave a SHA2 family hash out on my website - how long would it be considered safe? How long would I have before I could be sure that someone would find a collision for it and know what was hashed?
I know that the amount of time would be based on the computational power of the one seeking to break it. It would also depend on the string length, but I'm curious just how secure hashes are.
Since many of us run web-servers we constantly have to be prepared for the day when someone might make it all the way to the database which stores the user hashes. So, move the server security out of the way and then what do you have?
This is a slightly theoretical area for many of the people I have talked with, so I would love to actually have some more information about average expectations for cracking.
hash('sha256', 'mytext');
hash('sha256', 'thisismytext');
hash('sha256', 'xx$1sw@the4e');
hash('sha256', 'thisismyslightlylongertext');

db695168e73ae294e9c4ea90ff593e211aa1b5693f49303a426148433400d23f
b62c6ac579abf8a29e71d98aeba1447c66c69002cfd847b148584f886fd297ef
501f1b26abbc75594d06f0935c8bc502d7bcccf5015227bd6ac95041770acb24
3debc12761bbeb5b4460978ac2be5b104163de02ea799f0705399d0e5b706334

","Thomas's answer is already very detailed, but I would add this  criteria: 

What is the benefit of breaking the hash?

Drop a penny on the street. How long does it take until someone picks it up?
Now drop a $20 bill and do the same experiment.
If the value of what you are trying to secure is low, it is possible that nobody will try to break the hash at all.
If the value and benefit of breaking the hash is high, it will only survive as long as it takes to buy the necessary computing power from the Amazon cloud. They now even sell GPUs.
","450","<security><hash><sha>","6","4","3","2011-12-15 03:31:47","4691495","0","3","99923","","2011-01-14 16:59:24","2011-01-14 02:48:11",""
"20438959","What's the exact SHA1 result for ""abc""?","Using the following command:
$ echo abc | sha1sum
I got the output:
03cfd743661f07975fa2f1220c5194cbaff48451
But according to the SHA standard 
http://www.itl.nist.gov/fipspubs/fip180-1.htm I should get:
a9993e364706816aba3e25717850c26c9cd0d89d
I suspect the incorrect result is caused by big or little-endian for w[0] and w[15]. w[0] should be 0x80636261 rather than 0x61626380. But I still can not get the correct result. 
Who can help me?
","You're calculating the SHA1 sum of ""abc\n"", i.e. that string with a new-line at the end.
Try:
echo -n abc | sha1sum

","450","<sha1><sha>","0","7","1","2013-12-07 07:49:05","20438977","0","","1214800","","2013-12-07 07:49:05","2013-12-07 07:36:53",""
"39406658","Can I replace a md5 signed SSL/TLS Root Certificate with a sha1 or 256 without re-signing the intermediate / end certificate?","I have an SSL / TSL certificate which is signed with sha1. However, the root certificate from thwatke is signed with the old and vulnerable md5 algorithm. After updating an enterprise application, I got an error because the root certificate using md5.
Now I have to replace the root certificate with a sha1 or sha256 (which is newer and safer) that the applications run again. 
Is it possible to just replace thwatke's root certificate with a version which is signed by sha1 or do I need to recreate the whole chain? Can thwatke do this for me? I bought the certificate just some months ago...
","To verify a signature of a certificate the public key of the issue as used. As long as this key is the same it does not matter which signature algorithm is used for the issuer certificate. It is not uncommon for CA to have the same public key in a certificate for different certificates signed with different signature algorithms. But since it is unknown about which specific certificates you are talking you have to check yourself if these have the same public key.

After updating an enterprise application, I got an error because the root certificate using md5.

That's strange or an error in the application. A root certificate is trusted because it is in the trust store and not because of its signature. Thus the signature algorithm should not matter at all since the signature of a root certificate does not need to be verified.
","444","<ssl-certificate><md5><sign><sha><thawte>","0","0","1","2016-09-09 19:52:46","","0","1","4261212","","2016-09-09 08:28:56","2016-09-09 08:00:23",""
"47050015","Changing MD5 to sha256 or AES-256 SHA","Can someone teach me on how to changing MD5 to sha256 or AES 256 SHA, right now iam using md5 encryption in register handler and login handler so how can I change the code? Is it any disadvantage when I change it?
register_handler.php
$password = """"; //password

//Password
$password = strip_tags($_POST['reg_password']); //Remove html tags
$password2 = strip_tags($_POST['reg_password2']); //Remove html tags

if(empty($error_array)) {
    $password = md5($password); //Encrypt password before sending to database

this is my login_handler.php
<?php

 if(isset($_POST['login_button'])){
 $email = filter_var($_POST['log_email'], FILTER_SANITIZE_EMAIL);

 $_SESSION['log_email'] = $email; //Store email into session variable 
$password = md5($_POST['log_password']); //Get password

","","443","<php><hash><aes><md5><sha>","0","","0","2017-11-01 07:21:18","","10","","","","","2017-11-01 07:21:18",""
"51014487","What do I import for SHA encryption in Node.js?","I'm trying to recreate some code from a website I found online. The code is supposed to create a blockchain in Node.js. However, when I run it, it does the recognize the command:
return sha(JSON.stringify(this.data) + this.prevHash + this.index + this.timestamp);

It returns the error:
return sha(JSON.stringify(this.data) + this.prevHash + this.index + this.timestamp);
                ^

ReferenceError: sha is not defined
    at Block.getHash (C:\Users\winst\OneDrive\Documents\Blockchain\main.js:12:3)
    at new Block (C:\Users\winst\OneDrive\Documents\Blockchain\main.js:8:19)
    at BlockChain.addBlock (C:\Users\winst\OneDrive\Documents\Blockchain\main.js:22:14)
    at Object.<anonymous> (C:\Users\winst\OneDrive\Documents\Blockchain\main.js:42:9)
    at Module._compile (internal/modules/cjs/loader.js:702:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:713:10)
    at Module.load (internal/modules/cjs/loader.js:612:32)
    at tryModuleLoad (internal/modules/cjs/loader.js:551:12)
    at Function.Module._load (internal/modules/cjs/loader.js:543:3)
    at Function.Module.runMain (internal/modules/cjs/loader.js:744:10)

What should I import in order to sha to be defined?
The whole code:
class Block{

    constructor(index, data, prevHash){
    this.index = index;
    this.timestamp = Math.floor(Date.now() / 1000);
    this.data = data;
    this.prevHash = prevHash;
    this.hash = this.getHash();
    }

    getHash(){
        return sha(JSON.stringify(this.data) + this.prevHash + this.index + this.timestamp);
    }
}
class BlockChain{
    constructor(){
        this.chain = [];
    }
    addBlock(data){
    let index = this.chain.length;
    let prevHash = this.chain.length !== 0 ? this.chain[this.chain.length - 1].hash : 0;
    let block = new Block(index, data, prevHash);

    this.chain.push(block);
    }
    chainIsValid(){

    for(var i=0;i<this.chain.length;i++){

        if(this.chain[i].hash !== this.chain[i].getHash()) 
            return false;

        if(i > 0 && this.chain[i].prevHash !== this.chain[i-1].hash)
            return false;
    }

    return true;
}   
}
const CILCoin = new BlockChain();

CILCoin.addBlock({sender: ""Bruce wayne"", reciver: ""Tony stark"", amount: 100});
CILCoin.addBlock({sender: ""Harrison wells"", reciver: ""Han solo"", amount: 50});
CILCoin.addBlock({sender: ""Tony stark"", reciver: ""Ned stark"", amount: 75});

console.log(JSON.stringify(CILCoin, null, 4));

Link to website I found this from: https://codingislove.com/simple-blockchain-javascript/
","You might need to create your own method here, as sha() is not a function built into node. You'll need to access the crypto module that's part of node.
https://nodejs.org/api/crypto.html#crypto_crypto
You can build a function 
const crypto = require('crypto');

const secret = 'abcdefg';
const hash = crypto.createHmac('sha256', secret)
                   .update('I love cupcakes')
                   .digest('hex');
console.log(hash);
// Prints:
//   c0fa1bc00531bd78ef38c628449c5102aeabd49b5dc3a2a516ea6ea959d6658e

","442","<javascript><node.js><encryption><blockchain><sha>","-1","-2","2","2018-06-24 22:50:16","51014542","1","","","","","2018-06-24 22:31:05",""
"51014487","What do I import for SHA encryption in Node.js?","I'm trying to recreate some code from a website I found online. The code is supposed to create a blockchain in Node.js. However, when I run it, it does the recognize the command:
return sha(JSON.stringify(this.data) + this.prevHash + this.index + this.timestamp);

It returns the error:
return sha(JSON.stringify(this.data) + this.prevHash + this.index + this.timestamp);
                ^

ReferenceError: sha is not defined
    at Block.getHash (C:\Users\winst\OneDrive\Documents\Blockchain\main.js:12:3)
    at new Block (C:\Users\winst\OneDrive\Documents\Blockchain\main.js:8:19)
    at BlockChain.addBlock (C:\Users\winst\OneDrive\Documents\Blockchain\main.js:22:14)
    at Object.<anonymous> (C:\Users\winst\OneDrive\Documents\Blockchain\main.js:42:9)
    at Module._compile (internal/modules/cjs/loader.js:702:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:713:10)
    at Module.load (internal/modules/cjs/loader.js:612:32)
    at tryModuleLoad (internal/modules/cjs/loader.js:551:12)
    at Function.Module._load (internal/modules/cjs/loader.js:543:3)
    at Function.Module.runMain (internal/modules/cjs/loader.js:744:10)

What should I import in order to sha to be defined?
The whole code:
class Block{

    constructor(index, data, prevHash){
    this.index = index;
    this.timestamp = Math.floor(Date.now() / 1000);
    this.data = data;
    this.prevHash = prevHash;
    this.hash = this.getHash();
    }

    getHash(){
        return sha(JSON.stringify(this.data) + this.prevHash + this.index + this.timestamp);
    }
}
class BlockChain{
    constructor(){
        this.chain = [];
    }
    addBlock(data){
    let index = this.chain.length;
    let prevHash = this.chain.length !== 0 ? this.chain[this.chain.length - 1].hash : 0;
    let block = new Block(index, data, prevHash);

    this.chain.push(block);
    }
    chainIsValid(){

    for(var i=0;i<this.chain.length;i++){

        if(this.chain[i].hash !== this.chain[i].getHash()) 
            return false;

        if(i > 0 && this.chain[i].prevHash !== this.chain[i-1].hash)
            return false;
    }

    return true;
}   
}
const CILCoin = new BlockChain();

CILCoin.addBlock({sender: ""Bruce wayne"", reciver: ""Tony stark"", amount: 100});
CILCoin.addBlock({sender: ""Harrison wells"", reciver: ""Han solo"", amount: 50});
CILCoin.addBlock({sender: ""Tony stark"", reciver: ""Ned stark"", amount: 75});

console.log(JSON.stringify(CILCoin, null, 4));

Link to website I found this from: https://codingislove.com/simple-blockchain-javascript/
","I like to use the sha256 package. Never mind, this has been deprecated. I would instead opt for use of the sha.js package.
var sha = require('sha.js');
//...
getHash() {
    return sha('sha256').update(JSON.stringify(this.data) + this.preHash + this.index + this.timestamp).digest('hex');
}

","442","<javascript><node.js><encryption><blockchain><sha>","-1","0","2","2018-06-24 22:50:16","51014542","1","","","","","2018-06-24 22:31:05",""
"25340532","Different results in Python and C++ when computing SHA-1 digest","I get different results when trying to compute SHA-1 digest in Python and C++.
Python code:
import hashlib

salt = 0xF0C020D239062F875C7BD8FB218D8102C9B37656F653E8DF0C655EF2D4A0CB61
password = 'pass1'

m = hashlib.sha1()
m.update( bytearray.fromhex(hex(salt)[2:-1]) )
m.update( password )

print m.hexdigest()
# output: e92f9504b2d46db0af7732c6e89e0260e63ae9b8

I extracted from the C++ code a snippet:
BigNumber salt, x;
Sha1Hash xhash;
uint8 password[] = ""pass1"";

// salt is received from a network packet (32 bytes)
// 2014-08-16 16:06:37 --> salt=F0C020D239062F875C7BD8FB218D8102C9B37656F653E8DF0C655EF2D4A0CB61
salt.SetBinary(lc.salt, 32);

xhash.UpdateData(salt.AsByteArray(), salt.GetNumBytes());
xhash.UpdateData(password, sizeof(password) - 1);
xhash.Finalize();

x.SetBinary(xhash.GetDigest(), xhash.GetLength());
logdebug(""--> x=%s"", x.AsHexStr());
// output: E5B463090B335BBC734BD3F4683F310E87ED6E4A

How must I modify my Python code to have the same results as in C++?
","SHAs are specifications, hence some initial state can be implementation dependent. 
I suggest to use the very same implementation if you need to compare Python and C++ codes.
","441","<python><c++><sha>","3","-3","2","2014-08-16 13:31:08","25340628","3","","","","","2014-08-16 13:16:34",""
"25340532","Different results in Python and C++ when computing SHA-1 digest","I get different results when trying to compute SHA-1 digest in Python and C++.
Python code:
import hashlib

salt = 0xF0C020D239062F875C7BD8FB218D8102C9B37656F653E8DF0C655EF2D4A0CB61
password = 'pass1'

m = hashlib.sha1()
m.update( bytearray.fromhex(hex(salt)[2:-1]) )
m.update( password )

print m.hexdigest()
# output: e92f9504b2d46db0af7732c6e89e0260e63ae9b8

I extracted from the C++ code a snippet:
BigNumber salt, x;
Sha1Hash xhash;
uint8 password[] = ""pass1"";

// salt is received from a network packet (32 bytes)
// 2014-08-16 16:06:37 --> salt=F0C020D239062F875C7BD8FB218D8102C9B37656F653E8DF0C655EF2D4A0CB61
salt.SetBinary(lc.salt, 32);

xhash.UpdateData(salt.AsByteArray(), salt.GetNumBytes());
xhash.UpdateData(password, sizeof(password) - 1);
xhash.Finalize();

x.SetBinary(xhash.GetDigest(), xhash.GetLength());
logdebug(""--> x=%s"", x.AsHexStr());
// output: E5B463090B335BBC734BD3F4683F310E87ED6E4A

How must I modify my Python code to have the same results as in C++?
","You use different endiness in C++ and python. So you have to reverse the bytes of your salt in python.
import hashlib

salt = 'F0C020D239062F875C7BD8FB218D8102C9B37656F653E8DF0C655EF2D4A0CB61'.decode('hex')
password = 'pass1'

m = hashlib.sha1()
m.update( salt[::-1] )
m.update( password )

print m.hexdigest()
# output: 4a6eed870e313f68f4d34b73bc5b330b0963b4e5 <- the reversed of the C++ result

","441","<python><c++><sha>","3","3","2","2014-08-16 13:31:08","25340628","3","","","","","2014-08-16 13:16:34",""
"43005212","Java RSA signature mechanism equivalent to emsa-pkcs1-v1_5 with SHA-256","I need to sign data using Java with the SHA-256 and EMSA-PKCS1-V1_5 encoding and RSA private key.
Also I need to use padding type 1 in EMSA-PKCS1-V1_5 which means that the data before signing should be appended by zeros (not random data, as in padding type 2).
The output of the signature on the same data should be the same.
What is equivalent in Java to this mechanism?
I was trying to sign using SHA256withRSA but the output on the same data is always different.
EDIT:
I am using the following code (data, sigAlg, and cert is always the same, so I assume that the signature should be always the same):
CMSSignedDataStreamGenerator generator = new CMSSignedDataStreamGenerator();
String sigAlg = ""SHA256withRSA"";
ContentSigner contentSigner = new JcaContentSignerBuilder(sigAlg).setProvider(""BC"").build(getPrivateKey());
generator.addSignerInfoGenerator(new JcaSignerInfoGeneratorBuilder(new JcaDigestCalculatorProviderBuilder().setProvider(""BC"").build()).build(contentSigner, cert));
generator.addCertificates(new JcaCertStore(certs));
OutputStream out = generator.open(responseOutputStream);
out.write(data);
out.close();

","","438","<java><rsa><sign><sha><pkcs#1>","0","","0","2017-03-27 13:00:17","","2","","1563721","","2017-03-27 13:00:17","2017-03-24 17:00:17",""
"4084563","password storage in mysql for user content website","To store user passwords I am going to SHA 256 + salting. Just wanted to confirm if these are correct. Business requirement is password should be minimum 8 inputs and maximum 32 inputs. (any input is valid except blank space)
So to meet these requirements the plan is:
Front end - validate max input of 32 & min input of 8.
Backend the Database (MySQL) schema will be:
pass_hash(64) CHAR    - store password hash
pass_slt(32) VARCHAR - store unique salt for each user
For salting I am not sure what value to use as yet. But i think when users create an account I will create a random character for each user and use that. Then the other question is: Do i store the salt as plain text or need to hash/encrypt that too?
Also I dont know if it matters but can passwords support multi-language with this current plan or will I run into any issues? (I am talking about funky characters like Arabic, Chinese, etc)
","That looks about right, except that the salt should be fixed length (e.g. always 32 bytes); you're correct that it should be random and per-user.  I don't see any real benefit to encrypting the salt.  Salts defend against a scenario when the attacker already has a cleartext version of your database.
As far as multi-language, you should just be consistent about what character encoding you use in your application, and what exactly you're calling SHA-256 on.
","436","<mysql><hash><passwords><sha>","1","-1","2","2010-11-03 13:51:32","","0","","","","","2010-11-03 06:04:38",""
"4084563","password storage in mysql for user content website","To store user passwords I am going to SHA 256 + salting. Just wanted to confirm if these are correct. Business requirement is password should be minimum 8 inputs and maximum 32 inputs. (any input is valid except blank space)
So to meet these requirements the plan is:
Front end - validate max input of 32 & min input of 8.
Backend the Database (MySQL) schema will be:
pass_hash(64) CHAR    - store password hash
pass_slt(32) VARCHAR - store unique salt for each user
For salting I am not sure what value to use as yet. But i think when users create an account I will create a random character for each user and use that. Then the other question is: Do i store the salt as plain text or need to hash/encrypt that too?
Also I dont know if it matters but can passwords support multi-language with this current plan or will I run into any issues? (I am talking about funky characters like Arabic, Chinese, etc)
","On salts:
The salt is public data (if it was meant to be confidential then it would not be called a ""salt"" but a ""key""). The salt must be known to verify a password (since it enters the hash function along with the password) so it is stored as cleartext, as you intend to do.
The point of the salt is to prevent an attacker from sharing attack costs between attack instances. Guessing a user-chosen password is often possible (users only have human brains and are rarely good at memorizing complex passwords). The salt makes sure that, at least, an attacker will have to pay the full price of password guessing (i.e. ""trying"" a big dictionary of possible passwords) for each attacked password.
The salt works well as long as it is unique for each password. Note that unique for each user is not sufficient: sometimes, users change their passwords, and you do not want the same salt to be used for the next password (otherwise, some level of cost sharing becomes available to the attacker). So you want the select a new salt any time a password is stored, i.e. when the account is created and whenever the password is changed.
Uniqueness of salts is easily ensured by using big enough random salts. 32-byte salts are more than enough for that: the risk of selecting twice the same salt (out of bad luck) is negligible.
An additional level of security, beyond salting, is to make password hashing ""expensive"". For instance, when you hash the (salted) password, you actually hash the concatenation of 10000 times the salt+password sequence. This makes password verification 10000 times more expensive, both for you and for the attacker. It is often the case that legitimate password verification can be made computationally heavier with no noticeable effect (even if you check 100 user passwords per second, you can still devote 100µs to that, and it will use only 1% of your processing time), but making things 10000 times harder for the attacker is a good idea.
On languages:
The main problem with non-ASCII passwords is that some glyphs may use several encodings. For instance, an 'é' can be encoded, with Unicode, as a single code point (U+00E9 LATIN SMALL LETTER E WITH ACUTE) or as two code points (U+0065 LATIN SMALL LETTER E, followed by U+0301 COMBINING ACUTE ACCENT). Note that this example is about a fairly common French letter, nothing as fancy (computer-wise) as Chinese or Korean. Encoding issues can be handled through Unicode Normalization Forms but this is not an easy programming tasks. Some programming environments can help (e.g., in Java, use java.text.Normalizer, which implements UNF).
Also, non-ASCII passwords can prove difficult to enter for users who switch keyboards, e.g. when the user wants to use a shared computer in an hotel or an airport (typing sensitive passwords on such systems is not a really good idea anyway).
I would recommend trying to enforce ASCII-only passwords if possible, or otherwise bite the bullet: perform UNF (with NFD form), then UTF-8 encoding. The resulting sequence of bytes is what goes to the hashing stage.
","436","<mysql><hash><passwords><sha>","1","1","2","2010-11-03 13:51:32","","0","","","","","2010-11-03 06:04:38",""
"50660299","Why do BouncyCastle Keccak sha-384 and MessageDigest sha-384 have different output?","Simple example hashing an array of just one byte:
import java.security.MessageDigest;
import java.util.Arrays;
import org.bouncycastle.jcajce.provider.digest.Keccak;

public class Program {
    public static void main(String[ ] args) {
        // MessageDigest:
        byte[] state = { (byte) 1};
        try {
            MessageDigest md5 = MessageDigest.getInstance(""SHA-384"");
            byte[] digest = md5.digest(state);
            System.out.println(""A: "" + Arrays.toString(digest));
        } catch (Exception e) {}

        // BouncyCastle Keccak:
        Keccak.Digest384 keccak = new Keccak.Digest384();
        keccak.update(state);
        try {
            byte[] digest = new byte[48];
            keccak.digest(digest, 0, 48);
            System.out.println(""B: "" + Arrays.toString(digest));
        } catch (Exception e) {}
    }
}

The output of this program is as follows:

A: [-115, 44, -24, 125, -122, -11, 95, -49, -85, 119, 10, 4, 123, 9, 13, -94, 50, 112, -6, 32, 104, 50, -33, -22, 126, 12, -108, 111, -1, 69, 31, -127, -102, -35, 36, 35, 116, -66, 85, 27, 13, 99, 24, -19, 108, 125, 65, -40]
B: [45, -11, 56, -101, -127, 15, 27, 78, 83, 13, 3, -41, 58, -24, 82, -74, 37, -120, -70, 20, 26, 16, 66, 76, 2, 104, -22, -24, -58, 79, -81, 58, -71, 1, -14, -115, -27, 85, 73, -70, -8, 113, -67, -93, -19, 62, -15, 65]

Shouldn't they be the same or am I missing something?
Version of BouncyCastle used: 
https://mvnrepository.com/artifact/org.bouncycastle/bcprov-jdk15on/1.58
Java: jdk1.8.0_121
","I believe your existing code is using Bouncy Castle to create a Keccak hash function. Keccak is a superset of SHA-3 digest functions, and SHA-3 requires particular settings to be configured on a Keccak function, so using a different Keccak configuration will give different results to SHA-3.
For your call to Bouncy Castle, try this instead:
import org.bouncycastle.jcajce.provider.digest.SHA3.DigestSHA3;
import org.bouncycastle.jcajce.provider.digest.SHA3.Digest384;

public class Program {
    public static void main(String[ ] args) {
        /* EARLIER CODE OMITTED */

        SHA3.DigestSHA3 sha3 = new SHA3.DigestSHA3(384);
        sha3.update(state);
        System.out.println(""B: "" + Arrays.toString(md.digest()));
    }
}

I don't have Bouncy Castle installed at the moment, but I believe that this will cause Bouncy Castle to use the SHA-3(384) hash function.
","431","<java><bouncycastle><sha><message-digest><sha-3>","1","2","2","2018-06-02 21:06:01","50661059","2","","","","","2018-06-02 19:12:42",""
"50660299","Why do BouncyCastle Keccak sha-384 and MessageDigest sha-384 have different output?","Simple example hashing an array of just one byte:
import java.security.MessageDigest;
import java.util.Arrays;
import org.bouncycastle.jcajce.provider.digest.Keccak;

public class Program {
    public static void main(String[ ] args) {
        // MessageDigest:
        byte[] state = { (byte) 1};
        try {
            MessageDigest md5 = MessageDigest.getInstance(""SHA-384"");
            byte[] digest = md5.digest(state);
            System.out.println(""A: "" + Arrays.toString(digest));
        } catch (Exception e) {}

        // BouncyCastle Keccak:
        Keccak.Digest384 keccak = new Keccak.Digest384();
        keccak.update(state);
        try {
            byte[] digest = new byte[48];
            keccak.digest(digest, 0, 48);
            System.out.println(""B: "" + Arrays.toString(digest));
        } catch (Exception e) {}
    }
}

The output of this program is as follows:

A: [-115, 44, -24, 125, -122, -11, 95, -49, -85, 119, 10, 4, 123, 9, 13, -94, 50, 112, -6, 32, 104, 50, -33, -22, 126, 12, -108, 111, -1, 69, 31, -127, -102, -35, 36, 35, 116, -66, 85, 27, 13, 99, 24, -19, 108, 125, 65, -40]
B: [45, -11, 56, -101, -127, 15, 27, 78, 83, 13, 3, -41, 58, -24, 82, -74, 37, -120, -70, 20, 26, 16, 66, 76, 2, 104, -22, -24, -58, 79, -81, 58, -71, 1, -14, -115, -27, 85, 73, -70, -8, 113, -67, -93, -19, 62, -15, 65]

Shouldn't they be the same or am I missing something?
Version of BouncyCastle used: 
https://mvnrepository.com/artifact/org.bouncycastle/bcprov-jdk15on/1.58
Java: jdk1.8.0_121
","""SHA-384"" is the hash function from the SHA2 family with a 384-bit output. You want ""SHA3-384"". Here some example code using your example and Bobulous' example.
import org.bouncycastle.jcajce.provider.digest.SHA3;
import org.bouncycastle.jce.provider.BouncyCastleProvider;

import java.security.MessageDigest;
import java.security.Security;
import java.util.Arrays;

public class Main {

    public static void main(String[] args) throws Exception {
        Security.addProvider(new BouncyCastleProvider());
        MessageDigest md5 = MessageDigest.getInstance(""SHA-384"");
        byte[] state = new byte[]{1};
        byte[] digest = md5.digest(state);
        System.out.println(""A: "" + Arrays.toString(digest));
        md5 = MessageDigest.getInstance(""SHA3-384"");
        digest = md5.digest(state);
        System.out.println(""B: "" + Arrays.toString(digest));
        SHA3.DigestSHA3 sha3 = new SHA3.DigestSHA3(384);
        digest = sha3.digest(state);
        System.out.println(""C: "" + Arrays.toString(digest));
    }
}

and the output is:
A: [-115, 44, -24, 125, -122, -11, 95, -49, -85, 119, 10, 4, 123, 9, 13, -94, 50, 112, -6, 32, 104, 50, -33, -22, 126, 12, -108, 111, -1, 69, 31, -127, -102, -35, 36, 35, 116, -66, 85, 27, 13, 99, 24, -19, 108, 125, 65, -40]
B: [49, 123, -48, 9, 32, 59, -57, -101, 6, 78, 83, -8, -20, -53, 99, 46, 5, 19, -121, 44, -98, -59, -64, -90, -108, -106, -82, -8, -106, 113, -81, 33, -19, -110, -93, -78, 85, 72, 12, 90, 9, 118, -22, 73, 37, -118, -64, -114]
C: [49, 123, -48, 9, 32, 59, -57, -101, 6, 78, 83, -8, -20, -53, 99, 46, 5, 19, -121, 44, -98, -59, -64, -90, -108, -106, -82, -8, -106, 113, -81, 33, -19, -110, -93, -78, 85, 72, 12, 90, 9, 118, -22, 73, 37, -118, -64, -114]

","431","<java><bouncycastle><sha><message-digest><sha-3>","1","3","2","2018-06-02 21:06:01","50661059","2","","","","","2018-06-02 19:12:42",""
"16676120","Java Generate Unique Surrogate alphanumeric key based on text","I wanted to generate a unique key based on few columns(one of them is the search word....so the length can very long). The volume of records is around 6 million. I have used MD5 and generated a 32-character alphanumeric string. How confident can we be that this will be unique? Can you suggest any other solution?
Thanks in advance
","Find MD5 data of that MD5 what you have got earlier of that word.
eg.
Converting from String to MD5
""password""=>""5f4dcc3b5aa765d61d8327deb882cf99""
""5f4dcc3b5aa765d61d8327deb882cf99""=>""696d29e0940a4957748fe3fc9efd22a3""
For getting back you have to do this for two times
eg
""696d29e0940a4957748fe3fc9efd22a3""=>""5f4dcc3b5aa765d61d8327deb882cf99
""5f4dcc3b5aa765d61d8327deb882cf99=>""password""
You may use this site for online testing 
http://md5.gromweb.com/
You may do this till you want.Hope this help you :)
","430","<java><security><md5><sha>","-2","0","2","2013-05-21 18:02:59","","3","","","","","2013-05-21 17:35:12",""
"16676120","Java Generate Unique Surrogate alphanumeric key based on text","I wanted to generate a unique key based on few columns(one of them is the search word....so the length can very long). The volume of records is around 6 million. I have used MD5 and generated a 32-character alphanumeric string. How confident can we be that this will be unique? Can you suggest any other solution?
Thanks in advance
","To really guarantee the uniqueness, you must check every new item agaist the whole history.
For instance, you can organize a table in RDB with primary key valued as your generated one and keep on generating until your insert actually succeeds. Sounds like a huge overhead but for most practical purposes it is not.
Another approach could be, again if a RDB is available and have a facility similar to sequence in Oracle, is to use this facility in conjunction with your algorithm.
","430","<java><security><md5><sha>","-2","0","2","2013-05-21 18:02:59","","3","","","","","2013-05-21 17:35:12",""
"50265843","Android Key password is missing however i do have keystore password","I am into a big issue. I have android key store password, but key password it is saying as 'Cannot recover Key'. When i create new key app is signed, but it is not uploaded to play store. It is showing SHA not matching
My recent activities involve
Android studio update Please specify is it because of this. 

I have also attached screenshot please see missing part and let me know how it can be found. Thanks
","my keystore file into C:\Program Files\Java\jdk1.7.0_71\bin folder. Then from the command prompt, I wrote: keytool -list -v -keystore . keystore It will also ask for keystore password then. Then it will show you the key alias and Certificate fingerprints and other info.
You can find more answer here also on Quora
","427","<android><google-play><sha><android-keystore>","1","1","2","2018-05-29 06:38:42","50265940","1","","","","","2018-05-10 05:05:24",""
"50265843","Android Key password is missing however i do have keystore password","I am into a big issue. I have android key store password, but key password it is saying as 'Cannot recover Key'. When i create new key app is signed, but it is not uploaded to play store. It is showing SHA not matching
My recent activities involve
Android studio update Please specify is it because of this. 

I have also attached screenshot please see missing part and let me know how it can be found. Thanks
","These are the ways you can find our your password

From the logs: If you have your logs intact, then you can find the password in the Android Studio log files : Go to ~/Library/Logs -> AndroidStudio ->idea.log.1 and search for Search for ""Pandroid.injected.signing.key.password"" and you can see the key password. (or simply search for a password using Ctrl + F)
From the taskArtifacts: You can retrieve the password from the taskArtifacts in your .gradle directory. Look in .gradle\2.4\taskArtifacts\taskArtifacts.bin. This doesn't seem to work for newer versions of Gradle (2.10 and above).

It really worked for me. Thanks
","427","<android><google-play><sha><android-keystore>","1","1","2","2018-05-29 06:38:42","50265940","1","","","","","2018-05-10 05:05:24",""
"45547534","MAC (message authentication code) standard size","Which is the standard size of the MAC generated with SHA-2?
it is safe if I trunk the message and then send it to destination ?
Thank you in advance for your consideration
","First of all, do not use only the SHA2 hash funcion, but use HMAC (with SHA2).
Now for answering your question: In theory, you can use any size for your MAC, depending on your security requirements. However, the most recommended standard tag size is 128 bits (16 bytes). 
","426","<macos><security><implementation><sha>","-1","1","1","2017-08-14 13:02:21","45648451","4","","3151567","","2017-08-07 14:32:03","2017-08-07 12:59:48",""
"43544072","Work around lack of Yz machine constraint under Clang?","We use inline assembly to make SHA instructions available if __SHA__ is not defined. Under GCC we use:
GCC_INLINE __m128i GCC_INLINE_ATTRIB
MM_SHA256RNDS2_EPU32(__m128i a, const __m128i b, const __m128i c)
{
    asm (""sha256rnds2 %2, %1, %0"" : ""+x""(a) : ""xm""(b), ""Yz"" (c));
    return a;
}

Clang does not consume GCC's Yz constraint (see Clang 3.2 Issue 13199 and Clang 3.9 Issue 32727), which is required by the sha256rnds2 instruction:

Yz

    First SSE register (%xmm0).


We added a mov for Clang:
asm (""mov %2, %%xmm0; sha256rnds2 %%xmm0, %1, %0"" : ""+x""(a) : ""xm""(b), ""x"" (c) : ""xmm0"");

Performance is off by about 3 cycles per byte. On my 2.2 GHz Celeron J3455 test machine (Goldmont with SHA extensions), that's about 230 MiB/s. Its non-trivial.
Looking at the disassembly, Clang is not optimizing around SHA's k when two rounds are performed:
Breakpoint 2, SHA256_SSE_SHA_HashBlocks (state=0xaaa3a0,
    data=0xaaa340, length=0x40) at sha.cpp:1101
1101        STATE1 = _mm_loadu_si128((__m128i*) &state[4]);
(gdb) disass
Dump of assembler code for function SHA256_SSE_SHA_HashBlocks(unsigned int*, unsigned int const*, unsigned long):
   0x000000000068cdd0 <+0>:     sub    $0x308,%rsp
   0x000000000068cdd7 <+7>:     movdqu (%rdi),%xmm0
   0x000000000068cddb <+11>:    movdqu 0x10(%rdi),%xmm1
   ...
   0x000000000068ce49 <+121>:   movq   %xmm2,%xmm0
   0x000000000068ce4d <+125>:   sha256rnds2 %xmm0,0x2f0(%rsp),%xmm1
   0x000000000068ce56 <+134>:   pshufd $0xe,%xmm2,%xmm3
   0x000000000068ce5b <+139>:   movdqa %xmm13,%xmm2
   0x000000000068ce60 <+144>:   movaps %xmm1,0x2e0(%rsp)
   0x000000000068ce68 <+152>:   movq   %xmm3,%xmm0
   0x000000000068ce6c <+156>:   sha256rnds2 %xmm0,0x2e0(%rsp),%xmm2
   0x000000000068ce75 <+165>:   movdqu 0x10(%rsi),%xmm3
   0x000000000068ce7a <+170>:   pshufb %xmm8,%xmm3
   0x000000000068ce80 <+176>:   movaps %xmm2,0x2d0(%rsp)
   0x000000000068ce88 <+184>:   movdqa %xmm3,%xmm4
   0x000000000068ce8c <+188>:   paddd  0x6729c(%rip),%xmm4        # 0x6f4130
   0x000000000068ce94 <+196>:   movq   %xmm4,%xmm0
   0x000000000068ce98 <+200>:   sha256rnds2 %xmm0,0x2d0(%rsp),%xmm1
   ...

For example, 0068ce8c though 0068ce98 should have been:
paddd  0x6729c(%rip),%xmm0        # 0x6f4130
sha256rnds2 %xmm0,0x2d0(%rsp),%xmm1

I'm guessing our choice of inline asm instructions are a bit off.
How do we work around the lack of Yz machine constraint under Clang? What pattern avoids the intermediate move in optimized code?

Attempting to use Explicit Register Variable:
const __m128i k asm(""xmm0"") = c;
asm (""sha256rnds2 %2, %1, %0"" : ""+x""(a) : ""xm""(b), ""x"" (k));
return a;

Results in:
In file included from sha.cpp:24:
./cpu.h:831:22: warning: ignored asm label 'xmm0' on automatic variable
        const __m128i k asm(""xmm0"") = c;
                            ^
./cpu.h:833:7: error: invalid operand for instruction
        asm (""sha256rnds2 %2, %1, %0"" : ""+x""(a) : ""xm""(b), ""x"" (k));
             ^
<inline asm>:1:21: note: instantiated into assembly here
        sha256rnds2 %xmm1, 752(%rsp), %xmm0
                           ^~~~~~~~~~
In file included from sha.cpp:24:
./cpu.h:833:7: error: invalid operand for instruction
        asm (""sha256rnds2 %2, %1, %0"" : ""+x""(a) : ""xm""(b), ""x"" (k));
             ^
<inline asm>:1:21: note: instantiated into assembly here
        sha256rnds2 %xmm3, 736(%rsp), %xmm1
                           ^~~~~~~~~~
...

","I created this answer based on the tag inline assembly with no specific language mentioned. Extended assembly templates already assume use of extensions to the languages.
If the Yz constraint isn't available you can attempt to create a temporary variable to tell CLANG what register to use rather than a constraint. You can do this through what is called an Explicit Register Variable:

You can define a local register variable and associate it with a specified register like this:
 register int *foo asm (""r12"");

Here r12 is the name of the register that should be used. Note that this is the same syntax used for defining global register variables, but for a local variable the declaration appears within a function. The register keyword is required, and cannot be combined with static. The register name must be a valid register name for the target platform.

In your case you wish to force usage of xmm0 register. You could assign the c parameter to a temporary variable using an explicit register and use that temporary as a parameter to the Extended Inline Assembly. This is the primary purpose of explicit registers in GCC/CLANG.
GCC_INLINE __m128i GCC_INLINE_ATTRIB
MM_SHA256RNDS2_EPU32(__m128i a, const __m128i b, const __m128i c)
{
   register const __m128i tmpc asm(""xmm0"") = c;
   __asm__(""sha256rnds2 %2, %1, %0"" : ""+x""(a) : ""x""(b), ""x"" (tmpc));
    return a;
}

The compiler should be able to provide some optimizations now since it has more knowledge as to how the xmm0 register is to be used.
When you placed mov %2, %%xmm0; into the template CLANG (and GCC) do not do any optimizations on the instructions. Basic Assembly and Extended Assembly templates are a black box that it only knows how to do basic substitution based on the constraints.

Here's a disassembly using the method above. It was compiled with clang++ and -std=c++03. The extra moves are no longer present:
Breakpoint 1, SHA256_SSE_SHA_HashBlocks (state=0x7fffffffae60,
    data=0x7fffffffae00, length=0x40) at sha.cpp:1101
1101        STATE1 = _mm_loadu_si128((__m128i*) &state[4]);
(gdb) disass
Dump of assembler code for function SHA256_SSE_SHA_HashBlocks(unsigned int*, unsigned int const*, unsigned long):
   0x000000000068cf60 <+0>:     sub    $0x308,%rsp
   0x000000000068cf67 <+7>:     movdqu (%rdi),%xmm0
   0x000000000068cf6b <+11>:    movdqu 0x10(%rdi),%xmm1
...
   0x000000000068cfe6 <+134>:   paddd  0x670e2(%rip),%xmm0        # 0x6f40d0
   0x000000000068cfee <+142>:   sha256rnds2 %xmm0,0x2f0(%rsp),%xmm2
   0x000000000068cff7 <+151>:   pshufd $0xe,%xmm0,%xmm1
   0x000000000068cffc <+156>:   movdqa %xmm1,%xmm0
   0x000000000068d000 <+160>:   movaps %xmm2,0x2e0(%rsp)
   0x000000000068d008 <+168>:   sha256rnds2 %xmm0,0x2e0(%rsp),%xmm3
   0x000000000068d011 <+177>:   movdqu 0x10(%rsi),%xmm5
   0x000000000068d016 <+182>:   pshufb %xmm9,%xmm5
   0x000000000068d01c <+188>:   movaps %xmm3,0x2d0(%rsp)
   0x000000000068d024 <+196>:   movdqa %xmm5,%xmm0
   0x000000000068d028 <+200>:   paddd  0x670b0(%rip),%xmm0        # 0x6f40e0
   0x000000000068d030 <+208>:   sha256rnds2 %xmm0,0x2d0(%rsp),%xmm2
...

","425","<c++><clang><sse><inline-assembly><sha>","5","3","1","2017-04-22 17:57:26","43547299","4","","608639","","2017-04-21 17:05:54","2017-04-21 13:31:17",""
"41855391","Passing a Base64 encoded String into sha512 function gives different result than when hard coded","I'm coding in Android Studio and I'm trying to create base64 encoded and sha512 hashed String.
The functions are:
private String getBase64(String data){

    try{

        byte[] enc = data.getBytes(""UTF-8"");
        return Base64.encodeToString(enc, Base64.DEFAULT);

    }catch (Exception e){
        e.printStackTrace();
        return null;
    }

}

private String getSHA(String data){

    try {

        MessageDigest mda = MessageDigest.getInstance(""SHA-512"");
        byte[] digesta = mda.digest(data.getBytes(""UTF-8""));

        return convertByteToHex(digesta);

    }catch(Exception e){
        e.printStackTrace();
        return null;
    }
}


public String convertByteToHex(byte data[]) {
    StringBuilder hexData = new StringBuilder();
    for (byte aData : data)
        hexData.append(String.format(""%02x"", aData));
    return hexData.toString();
}

Then calling them:
    // line below prints VGVzdDox as it should
    Log.d(""GO"", ""Working Base64: "" + getBase64(""Test:1""));

        // line below prints: 3553AF9EDC389314B0F7354B51FEA7EB089C039EA77A0FD7BD61798A8DD14B1292B353B9E00789B2698B072AF5B05417DDDAA1870ADF9E1DE9C1F96D9465DF56
    // as it should
    Log.d(""GO"", ""Working SHA: "" + getSHA(""VGVzdDox""));


    String b = getBase64(""Test:1"");

    // line below prints VGVzdDox again, as it should
    Log.d(""Base64"", b);

    String s = getSHA(b);

    // Now this line prints a7d1bdc5d6497d787b35ce52774365150a2e21084958ffc14570367f3764b938fc1191d06006f1908084518c9697cbff3f2830a1ac003ef8ace36a0667dce92d
    // Not sure why?
    Log.d(""SHA"", s);

So that last output is wrong. However the getBase64 is right and the getSHA also when hard coding the base64 encoded String. And I have no idea why.
This is just the main activity, no other code is executed.
","Found it, had to change:
return Base64.encodeToString(enc, Base64.DEFAULT);

to 
return Base64.encodeToString(enc, Base64.NO_WRAP);

","423","<java><android><hash><base64><sha>","0","0","2","2017-01-25 15:38:43","41855580","0","3","","","","2017-01-25 15:28:25",""
"41855391","Passing a Base64 encoded String into sha512 function gives different result than when hard coded","I'm coding in Android Studio and I'm trying to create base64 encoded and sha512 hashed String.
The functions are:
private String getBase64(String data){

    try{

        byte[] enc = data.getBytes(""UTF-8"");
        return Base64.encodeToString(enc, Base64.DEFAULT);

    }catch (Exception e){
        e.printStackTrace();
        return null;
    }

}

private String getSHA(String data){

    try {

        MessageDigest mda = MessageDigest.getInstance(""SHA-512"");
        byte[] digesta = mda.digest(data.getBytes(""UTF-8""));

        return convertByteToHex(digesta);

    }catch(Exception e){
        e.printStackTrace();
        return null;
    }
}


public String convertByteToHex(byte data[]) {
    StringBuilder hexData = new StringBuilder();
    for (byte aData : data)
        hexData.append(String.format(""%02x"", aData));
    return hexData.toString();
}

Then calling them:
    // line below prints VGVzdDox as it should
    Log.d(""GO"", ""Working Base64: "" + getBase64(""Test:1""));

        // line below prints: 3553AF9EDC389314B0F7354B51FEA7EB089C039EA77A0FD7BD61798A8DD14B1292B353B9E00789B2698B072AF5B05417DDDAA1870ADF9E1DE9C1F96D9465DF56
    // as it should
    Log.d(""GO"", ""Working SHA: "" + getSHA(""VGVzdDox""));


    String b = getBase64(""Test:1"");

    // line below prints VGVzdDox again, as it should
    Log.d(""Base64"", b);

    String s = getSHA(b);

    // Now this line prints a7d1bdc5d6497d787b35ce52774365150a2e21084958ffc14570367f3764b938fc1191d06006f1908084518c9697cbff3f2830a1ac003ef8ace36a0667dce92d
    // Not sure why?
    Log.d(""SHA"", s);

So that last output is wrong. However the getBase64 is right and the getSHA also when hard coding the base64 encoded String. And I have no idea why.
This is just the main activity, no other code is executed.
","it seems like your String 
b

have a new line at the end, i tested it with an online sha 512 generator with the String:
""VGVzdDox"" and 
""VGVzdDox
""
output of the first one is: 
3553AF9EDC389314B0F7354B51FEA7EB089C039EA77A0FD7BD61798A8DD14B1292B353B9E00789B2698B072AF5B05417DDDAA1870ADF9E1DE9C1F96D9465DF56

the out put for the second is:
A7D1BDC5D6497D787B35CE52774365150A2E21084958FFC14570367F3764B938FC1191D06006F1908084518C9697CBFF3F2830A1AC003EF8ACE36A0667DCE92D

so get rid of the line seperator maybe with the method Stirng.trim(), but i didn't tested it
","423","<java><android><hash><base64><sha>","0","1","2","2017-01-25 15:38:43","41855580","0","3","","","","2017-01-25 15:28:25",""
"45007908","Calculating SHA256 twice - what for?","I'm trying to understand Bitcoin protocol, and sometimes see instructions like this:

The TransactionId is defined by SHA256(SHA256(txbytes))

or

The hash of the public key is generated by performing a SHA256 hash on the public key, and then performing a RIPEMD160 hash on the result, with Big Endian notation. The function could look like this: RIPEMD160(SHA256(pubkey))

For what purpose do hash calculatig twice?
","""A common rationale for hashing twice is to guard against the length-extension property of the hash""
Full answer here https://crypto.stackexchange.com/questions/50017/why-hashing-twice
","417","<hash><bitcoin><sha256><sha><sha2>","0","1","1","2017-07-11 12:01:00","45034034","2","","","","","2017-07-10 09:06:11",""
"20013240","How to hash two strings together using SHA-512 to obtain a desired hash result","New to Java and SHA2 encrypting. I'm trying to obtain the correct resulting 128 digit hex number of a SHA-512 hashing of two strings in such a way that I obtain the full 128 hex code.  The purpose is to further use the full 128 digit hex for further application, but having trouble getting the correct result.
Method of hash:
STRING1 = ""[NONCE]:[(16 digit hex code)]:[NONCE]""
STRING2 = ""[NONCE]:[(16 digit hex code)]:[NONCE]""

Example - If I use: 
STRING1 = ""830:c187e23144f9f6fe:830""
STRING2 = ""830:8b905b04fd22d01a:830""

I want to hash STRING1 with STRING2 in such a way that I get a specific result. It's not as simple as:
    <?php
    echo hash_hmac('sha516', '830:c187e23144f9f6fe:830', '830:8b905b04fd22d01a:830');
    ?>

The first 30 digits of the resulting SHA-512 hash will be: 3B573EAB367A0F9096BB98C7E28240, but I need the full hex.  These first 30 digits are obtained through hand calculations and converting.
Any hints or complete coding work up is appreciated.  I'll post any results I find if I obtain the right method.
","","417","<php><hash><hex><sha>","0","","0","2013-11-16 00:57:43","","4","0","1491895","","2013-11-16 00:57:43","2013-11-16 00:52:35",""
"37219937","Upgrading from SHA1 to SHA2 breaks everything in C# application","I have been tasked with checkmarx and whitehat sentinel security fixes.  Problem is that changing from SHA1 to SHA2 doesn't automagically work.  The new Hash is NOT going to match all the hundreds of users passwords in the database table.
What am I suppose to do, make everyone change their password?
C# code change:
//SHA1 sha = SHA1.Create();
SHA256 sha = SHA256Managed.Create();

byte[] buff = sha.ComputeHash(Encoding.Unicode.GetBytes(SaltAndPwd));

","As you know well, hashing is one-way which means cannot be decrypted back to original value and nothing can convert without knowing original value. Even SHA2 has 'different' and more advanced hashing algorithm.  
One bad option is, marking users differently who were registered before SHA2. However, The users with old SHA1 might be exposed to hacking like LinkedIn site was hacked when using SHA1.  
My idea is same with you. Just like when we see Password Change Recommendation in Big internet sites, Just simply make short process like validating old password and get new password from users.
Nuget package like PWDTK which is of SHA2 might help..
","416","<c#><security><sha1><sha256><sha>","1","1","1","2016-05-14 09:39:59","37225083","2","","","","","2016-05-13 21:59:24",""
"28058173","Get a Public Key from Python String (SHA)","Let's say that I have a python string:
string_full = """"""
              -----BEGIN CERTIFICATE----- 
              GIBBERISH................
              ......................
              ........................
              -----END CERTIFICATE-----
              """"""

After removing the first line, newlines, and last line I got something like this:
 string = """""" GIBBERISH .................................. """"""

What I'm trying to do is to get the Public Key from that certificate.
I was having a look at this post, but it seems that the string must be formated as string_full but the real problem is that I'm reading that line from a user uploaded file (django), but since this file is structured by the Mexican Goverment, it would be really easy for me to calculate the public key from the string as shown in string.
a
Got any ideas? I was having a look at M2Cryptolib which implements a get_pukeybut it will only work on requests and I have no way to get this request from an external server. 
Any help would be appreciated. 
","I'm not sure why you are trying to get that string since to my knowledge most ssl functions will take the whole cert to verify. 
Have you seen this post? It looks like what you want.
Hope that helps.
EDIT:
I think this example will help you understand what's every
 argument and in what format should it be. 
","415","<python><sha><pycrypto>","0","1","1","2015-01-21 12:12:52","28058285","0","","-1","","2017-05-23 11:43:30","2015-01-21 01:32:49",""
"4683551","Generating a pseudo-natural phrase from a big integer in a reversible way","I have a large and ""unique"" integer (actually a SHA1 hash).
Note: While I'm talking here about SHA1 hashes, this is not a cryptography / security question! I'm not trying to break SHA1. Imagine a random 160-bit integer instead of SHA1 if that will help.
I want (for no other reason than to have fun) to find an algorithm to map that SHA1 hash to a computer-generated (pseudo-)English phrase. The mapping should be bidirectional (i.e., knowing the algorithm, one must be able to calculate the original SHA1 hash from that phrase.)
The phrase need not make sense. I would even settle for a whole paragraph of nonsense. (Though quality — englishness — of a paragraph should probably be better than for a mere phrase.)
A better algorithm would produce shorter, more natural-looking, more unique phrases. 
A variation: it is OK if I will be able to work only with a part of hash. Say, first six hex digits is fine.
The possible usage of the generated phrase: the human readable version of Git commit ID, to use as a motto for a given program version, which is built from that commit. (As I said, this is ""for fun"". I don't claim that this is very practical — or be much more readable than the SHA1 itself.)
Possible approach: In the past I've attempted to build a probability table (of words), and generate phrases as Markov chains, seeding the generator (picking branches from probability tree), according to the bits I read from the SHA. This was not very successful, the resulting phrases were too long and ugly. I'm not sure if this was a bug, or the general flaw in the algorithm, since I had to abandon it early enough.
Now I'm thinking about attempting to solve the problem once again. Any advice on how to approach this? Do you think Markov chain approach can work here? Something else?
","Hash function means it is not possible (within reasonable limits) to get a data from hash, unless it is broken (insecure).
Question should be about breaking SHA-1 hash algorithm - look at Google, it's not that broken. So no, you cannot create English phrase from SHA-1 hash code, if you can, please make a huge paper about that, lot of them are useless, this would be breakthrough :-)
Edit: if only part of hash is enough, I suggest just brute force (+ simple map of hash<->phrase, possibly in a file or db), breaking hash algorithm is very ""strong soup"" (difficult problem).
Edit2: guys be more specific when asking question, not my fault... I will not delete this so that it scares off any other crypto guys around :-)
","415","<sha><bignum><markov-chains>","5","0","4","2018-01-02 18:50:48","4684842","3","","995926","","2012-04-29 13:24:42","2011-01-13 18:10:21",""
"4683551","Generating a pseudo-natural phrase from a big integer in a reversible way","I have a large and ""unique"" integer (actually a SHA1 hash).
Note: While I'm talking here about SHA1 hashes, this is not a cryptography / security question! I'm not trying to break SHA1. Imagine a random 160-bit integer instead of SHA1 if that will help.
I want (for no other reason than to have fun) to find an algorithm to map that SHA1 hash to a computer-generated (pseudo-)English phrase. The mapping should be bidirectional (i.e., knowing the algorithm, one must be able to calculate the original SHA1 hash from that phrase.)
The phrase need not make sense. I would even settle for a whole paragraph of nonsense. (Though quality — englishness — of a paragraph should probably be better than for a mere phrase.)
A better algorithm would produce shorter, more natural-looking, more unique phrases. 
A variation: it is OK if I will be able to work only with a part of hash. Say, first six hex digits is fine.
The possible usage of the generated phrase: the human readable version of Git commit ID, to use as a motto for a given program version, which is built from that commit. (As I said, this is ""for fun"". I don't claim that this is very practical — or be much more readable than the SHA1 itself.)
Possible approach: In the past I've attempted to build a probability table (of words), and generate phrases as Markov chains, seeding the generator (picking branches from probability tree), according to the bits I read from the SHA. This was not very successful, the resulting phrases were too long and ugly. I'm not sure if this was a bug, or the general flaw in the algorithm, since I had to abandon it early enough.
Now I'm thinking about attempting to solve the problem once again. Any advice on how to approach this? Do you think Markov chain approach can work here? Something else?
","We'll, lets see... The english language has about 1,000,000 words. That's about 20 bits per word. SHA1 is 160 bits, so you'll need 8 words. Theoretically, All you'll have to do is to take the n'th word of the oxford english dictionary, where n is a group of 20 bits at a time.
Now, to make it more natural, you can try to add ""in/at/on/and/the..."" between words, according to their type (nouns,verbs...) using some simple algorithm. (You should remove all these words from your base dictionary, of course).
The algorithm is reversible: Just remove all the words you've added, and convert each word to it's 20-bit index.
Also, try google ""insult generator"". Some of those generators are pretty nice. I'm not sure about the number of combinations, though.
You can buy the Oxford English Dictionary on CD-ROM with more than 500,000 words (19-bit). I'm not sure if it would be easy to extract the words and their types, however. I'm not sure if it is legal, but I think you can't claim a patent on dictionary entries...
","415","<sha><bignum><markov-chains>","5","1","4","2018-01-02 18:50:48","4684842","3","","995926","","2012-04-29 13:24:42","2011-01-13 18:10:21",""
"4683551","Generating a pseudo-natural phrase from a big integer in a reversible way","I have a large and ""unique"" integer (actually a SHA1 hash).
Note: While I'm talking here about SHA1 hashes, this is not a cryptography / security question! I'm not trying to break SHA1. Imagine a random 160-bit integer instead of SHA1 if that will help.
I want (for no other reason than to have fun) to find an algorithm to map that SHA1 hash to a computer-generated (pseudo-)English phrase. The mapping should be bidirectional (i.e., knowing the algorithm, one must be able to calculate the original SHA1 hash from that phrase.)
The phrase need not make sense. I would even settle for a whole paragraph of nonsense. (Though quality — englishness — of a paragraph should probably be better than for a mere phrase.)
A better algorithm would produce shorter, more natural-looking, more unique phrases. 
A variation: it is OK if I will be able to work only with a part of hash. Say, first six hex digits is fine.
The possible usage of the generated phrase: the human readable version of Git commit ID, to use as a motto for a given program version, which is built from that commit. (As I said, this is ""for fun"". I don't claim that this is very practical — or be much more readable than the SHA1 itself.)
Possible approach: In the past I've attempted to build a probability table (of words), and generate phrases as Markov chains, seeding the generator (picking branches from probability tree), according to the bits I read from the SHA. This was not very successful, the resulting phrases were too long and ugly. I'm not sure if this was a bug, or the general flaw in the algorithm, since I had to abandon it early enough.
Now I'm thinking about attempting to solve the problem once again. Any advice on how to approach this? Do you think Markov chain approach can work here? Something else?
","A very simple approach would be:
 Take list of say 1024 nouns, 1024 verbs and 1024 adjectives each. Your phrase could then be  sentence of the form
noun[bits_01-10] verb[bits11-20] adjective[bits21-30] verb[bits31-40],
noun[bits_41-50] verb[bits51-60] adjective[bits61-70] verb[bits71-80],
noun[bits_81-90] verb[bits91-100] adjective[bits101-110] verb[bits111-120] and 
noun[bits_121-130] verb[bits131-140] adjective[bits141-150] verb[bits151-160].

With a bit more linguistic thought you can probably construct slightly more complicated ad thus not so repetitive looking sentences (say, a bit for singular / plural, a bit of two for different tenses,...). Longer word lists use up a few more bits but my guess is that you reach rather exotic words quite fast.  
","415","<sha><bignum><markov-chains>","5","3","4","2018-01-02 18:50:48","4684842","3","","995926","","2012-04-29 13:24:42","2011-01-13 18:10:21",""
"4683551","Generating a pseudo-natural phrase from a big integer in a reversible way","I have a large and ""unique"" integer (actually a SHA1 hash).
Note: While I'm talking here about SHA1 hashes, this is not a cryptography / security question! I'm not trying to break SHA1. Imagine a random 160-bit integer instead of SHA1 if that will help.
I want (for no other reason than to have fun) to find an algorithm to map that SHA1 hash to a computer-generated (pseudo-)English phrase. The mapping should be bidirectional (i.e., knowing the algorithm, one must be able to calculate the original SHA1 hash from that phrase.)
The phrase need not make sense. I would even settle for a whole paragraph of nonsense. (Though quality — englishness — of a paragraph should probably be better than for a mere phrase.)
A better algorithm would produce shorter, more natural-looking, more unique phrases. 
A variation: it is OK if I will be able to work only with a part of hash. Say, first six hex digits is fine.
The possible usage of the generated phrase: the human readable version of Git commit ID, to use as a motto for a given program version, which is built from that commit. (As I said, this is ""for fun"". I don't claim that this is very practical — or be much more readable than the SHA1 itself.)
Possible approach: In the past I've attempted to build a probability table (of words), and generate phrases as Markov chains, seeding the generator (picking branches from probability tree), according to the bits I read from the SHA. This was not very successful, the resulting phrases were too long and ugly. I'm not sure if this was a bug, or the general flaw in the algorithm, since I had to abandon it early enough.
Now I'm thinking about attempting to solve the problem once again. Any advice on how to approach this? Do you think Markov chain approach can work here? Something else?
","This is an old question but entropoetry is a JavaScript (Node/frontend) library that also solves this problem. It combines Markov poetry with Huffman coding, so given the same dictionary (i.e., the same version of the library), converting poetry↔︎numbers will be bidirectional.
Example, from the Node command line:
> var Poet = require('entropoetry'); var p = new Poet();
> p.stringify(Buffer.from('deadbeef', 'hex'))
'old trick of loving you\nif you but'
> console.log(p.parse(`old trick of loving you
... if you but`))
<Buffer de ad be ef>

And as technology marches on, what seemed like a “fun only” idea in 2011 has some real uses in 2017: memorizing cryptocurrency private keys (brain wallet), Dat/IPFS links, etc.
","415","<sha><bignum><markov-chains>","5","1","4","2018-01-02 18:50:48","4684842","3","","995926","","2012-04-29 13:24:42","2011-01-13 18:10:21",""
"8633203","Storing the result of an SHA hash as a db.StringProperty() property","I'm creating a small app using python 2.7 with google app engine and I'm trying to store a hash similar to...
import hashlib  
def PassHash(self):  
     return   hashlib.sha256(
               hashlib.sha256(self.username).digest() + self.password
              ).hexdigest() + ''

This returns a string of hexadecimal which I then try to store in a class like this:
class User(db.Model):
    UserName = db.StringProperty()
    Password = db.StringProperty(multiline = True)
    Email = db.EmailProperty()

    def Authenticate(self):
        UserList = User.gql(""WHERE UserName = :username and Password = :password"",  
                             username = self.UserName,  
                             password = self.PassHash())
        return UserList.count() == 1


    def Register(self):
        self.Password =  self.PassHash()
        print self.Password
        return db.put(self)

This worked for the first few test cases, but after that I got this exception:
UnicodeDecodeError: 'charmap' codec can't decode byte 0x8d in position 28: character maps to <undefined>

I suspect the problem may lie in the gql query, possibly. I've considered just using openid, but this would be useful to know how to do in general. I've tried several different variations of the hash function with no luck. Am I missing something about what can be stored in a StringProperty() property?
","I would try without the multiline attribute for the password. I could store sha hashed variables like the following:
crypted_password = db.StringProperty()  
salt = db.StringProperty() 

def __encrypt(self, plaintext, salt=''):
    """"""returns the SHA1 hexdigest of a plaintext and salt""""""

    phrase = hashlib.sha1()
    phrase.update('%s--%s' % (plaintext, salt))
    return phrase.hexdigest()

def set_password(self, new_password):
    """"""sets the user's crypted_password""""""

    import datetime
    if not self.salt:
        self.salt = self.__encrypt(str(datetime.datetime.now()))
    self.crypted_password = self.__encrypt(new_password, self.salt)

","414","<python><google-app-engine><sha>","0","0","1","2011-12-26 09:36:06","8634502","0","","","","","2011-12-26 05:37:09",""
"11820254","hasher not found","I'm trying to use different hashers with django 1.4. I have a hasher file 'hashers.py' in my app 'accounts', 
import hashlib

from pbkdf2 import pbkdf2
from django.contrib.auth.hashers import SHA1PasswordHasher
from django.utils.crypto import pbkdf2


class SHA512PasswordHasher(SHA1PasswordHasher):
    algorithm = ""sha512""

and i added to settings, 
PASSWORD_HASHERS = (
    'accounts.hashers.SHA512PasswordHasher',
)

I get the following exception value, 
Exception Value:    

hasher not found: accounts.hashers.SHA512PasswordHasher

also, if i don't have 

from pbkdf2 import pbkdf2

i get the following error, 

Exception Value:      
Unknown password hashing algorithm 'pbkdf2_sha256'. Did you specify it
  in the PASSWORD_HASHERS setting?

Even when i use any of the already written hashers in the main django library. Could be a bug? 
Anyway, why is my new hasher not being found. I followed what is written in the django documentation.
 https://docs.djangoproject.com/en/dev/topics/auth/
","For the settings, you should be adding your hasher to the list, not replacing it. So code it like this:
PASSWORD_HASHERS += (
    'accounts.hashers.SHA512PasswordHasher',
)

","414","<django><authentication><sha><pbkdf2>","2","0","1","2013-09-14 19:54:18","","1","1","","","","2012-08-05 21:34:18",""
"16893427","Using MessageDigest with J2ME Application","I'm unable to use the MessageDigest API in a J2ME application - it is giving ALERT NoSuchMethodError

digest()

My code is 
MessageDigest md= MessageDigest.getInstance(""SHA-1"");         
md.update(hashString.getBytes(""UTF-8""),0,0);
byte[] digest = null;
md.digest(digest,0,digest.length);
System.out.println(""digest of str is ""+new String(digest) );

The above code works fine in a Java application, but gives NoSuchMethodError in J2ME. 
Can I use MessageDigest in J2ME?  If yes, please tell me how.
","java.security.MessageDigest is not generally part of J2ME, so it's not directly available.
There are some J2ME devices that implement JSR 177, which would allow you to use MessageDigest.
Or, you could try an open source SHA1 implementation, such as this one.
Another alternative would be to use the BouncyCastle library, and use it to implement SHA1 digests for J2ME.
If you use BouncyCastle, make sure to get one of the releases (.jar or source code) that's designed for J2ME.
","414","<java><java-me><sha>","3","1","1","2013-06-07 06:09:00","16933267","0","5","119114","","2013-06-07 06:09:00","2013-06-03 09:14:32",""
"39128368","Get Git Commit / Revision SHA from within MATLAB script","I'm using Windows 7, I have MATLAB 2015b with git version 2.6.1.windows.1. MATLAB / Git integration is working.
I have a set of MATLAB tools that I use for data analysis that are being developed with source control using Git. These tools save log files when run which give dates, times, files used, commands, and variable values. I would like to add the GIT commit SHA value to these logs so I can track the data back to the version that was ran and therefore determine if some part of the data might be invalid due to a known bug.
I know MATLAB has access to the values, I can right click on a Git controlled file and select ""Source Control"" and then ""Show Revisions"" and see the SHA. Is there a MATLAB command or accessible object method that I can use to get this value so that I can put it in my log?
","As mentioned in the comments above you can use a system call. Just wrap it in a function:
function hash = get_git_hashobject( filename )
%get_git_hashobject Performs a system call to `git hash-object` and returnd
%the hash value.
    command = [ 'git hash-object -- ' filename ];
    [status,hash] = system(command);
    if( status ~= 0 )
        error('Unable to get hash from file.');
    end
end

Save it as get_git_hashobject.m and execute it like get_git_hashobject(<filename>).
","412","<git><matlab><sha>","0","1","1","2016-08-24 20:32:00","","5","","","","","2016-08-24 16:16:57",""
"27625705","crypto/sha1 not matching openssl command","I'm trying to compute sha1, but the sha1 is not matching with the openssl command.
I compute the hash for an empty file like so on my Macbook :
$ touch test.txt
$ openssl sha1 -hex test.txt
SHA1(test.txt)= da39a3ee5e6b4b0d3255bfef95601890afd80709

And here is the simple test code I have :
package main

import ""fmt""
import ""crypto/sha1""

func main() {
        hash := sha1.New()
        hash.Write([]byte{0x00})
        fmt.Printf(""Hash got %x, expected da39a3ee5e6b4b0d3255bfef95601890afd80709"", hash.Sum(nil))
}

Here is the output as you see the output does not match, anyone know what I'm doing wrong?
Hash got 5ba93c9db0cff93f52b521d7420e43f6eda2784f, expected da39a3ee5e6b4b0d3255bfef95601890afd80709

","Your Go code is computing the SHA of an input of length 1, with a value of [ 0 ].
The touch command actually creates an empty file (zero length), so the equivalent Go code would be:
hash := sha1.New()
// hash.Write([]byte{}) 
data := hash.Sum(nil)
fmt.Printf(""hash: %x"", data)

The (commented) Write call above is a no-op.  Playground
Your test code does not actually seem to read from a file.  Anyway, per your request, here is what a full sha utility would look like in Go:
package main

import (
        ""crypto/sha1""
        ""fmt""
        ""io""
        ""log""
        ""os""
)

func main() {
        if len(os.Args) < 2 {
                fmt.Printf(""usage: %s <file>\n"", os.Args[0])
                os.Exit(1)
        }

        file := os.Args[1]

        f, err := os.Open(file)

        if err != nil {
                log.Fatal(err)
        }

        defer f.Close()

        hash := sha1.New()

        _, err = io.Copy(hash, f)

        if err != nil {
                log.Fatal(err)
        }

        fmt.Printf(""%x\n"", hash.Sum(nil))
}

Testing it out, I get:
$ touch test.txt
$ go run sha.go test.txt
da39a3ee5e6b4b0d3255bfef95601890afd80709

","412","<go><openssl><sha>","1","5","1","2014-12-23 18:42:50","27625952","2","","220710","","2014-12-23 18:21:01","2014-12-23 18:04:13",""
"19652907","Android and Python different SHA1 checksum of the same file","The scenario is the next:
I want to upload image to the server. But before uploading the file I have to send the SHA1 checksum of that file so the server could check if the file is already uploaded so I don't upload it again.
The problem is that for the same file I don't get the same SHA1 checksum in my app and on the server side.
Here is the code in my Android app:
public static String getSHA1FromFileContent(String filename)
        throws NoSuchAlgorithmException, IOException {

    final MessageDigest messageDigest = MessageDigest.getInstance(""SHA-1"");

    InputStream is = new BufferedInputStream(new FileInputStream(filename));
    final byte[] buffer = new byte[1024];

    for (int read = 0; (read = is.read(buffer)) != -1;) {
        messageDigest.update(buffer, 0, read);
    }

    is.close();

    // Convert the byte to hex format
    Formatter formatter = new Formatter();

    for (final byte b : messageDigest.digest()) {
        formatter.format(""%02x"", b);
    }

    String res = formatter.toString();

    formatter.close();

    return res;
}

And here is the code on the server side:
def hashFile(f):

sha1 = hashlib.sha1()

if hasattr(f, 'multiple_chunks') and f.multiple_chunks():
    for c in f.chunks():
    sha1.update(c)
else:
    try:
    sha1.update(f.read())
    finally:
    f.close()

return sha1.hexdigest()

What is the problem and why do I get different SHA1 checksums?
","Turned out there was some server side image editing before generating the sha1 sum that wasn't meant to be done in this scenario. They made changes on the server side and now this is working perfectly.
","408","<android><python><sha1><checksum><sha>","0","0","1","2013-11-28 12:32:44","20266339","2","3","","","","2013-10-29 08:15:25",""
"5062204","What hash function should be used for passwords?","
Possible Duplicate:
What's the recommended hashing algorithm to use for stored passwords? 

Hello, I've recently been told that common hash functions such as SHA256 are insecure for use as a password hashing function because they are ""designed to be fast""(incidentally I asked earlier for faster hashing functions over at programmers.se). So my question, what should be used for websites or other general applications?
Also, secondary question: Is SHA256 really not a good choice for hashing passwords? I kind of don't believe it, but I've heard crazier things be true.
(note: assume all other proper actions are being taken such as unique salts)
","At the time of writing SHA256 is adequate for password protection, though it may not be in a year or so.  
I'd maybe use SHA512 as I'm not too well traversed in what is really secure at the moment, and I'm not sure if anything can be really secure, with the huge increases of computing power in CPU's and GPU's.
","406","<security><passwords><hash><sha>","1","1","3","2011-02-21 04:29:52","","1","","-1","","2017-05-23 10:24:25","2011-02-21 04:08:47","2011-02-23 00:59:33"
"5062204","What hash function should be used for passwords?","
Possible Duplicate:
What's the recommended hashing algorithm to use for stored passwords? 

Hello, I've recently been told that common hash functions such as SHA256 are insecure for use as a password hashing function because they are ""designed to be fast""(incidentally I asked earlier for faster hashing functions over at programmers.se). So my question, what should be used for websites or other general applications?
Also, secondary question: Is SHA256 really not a good choice for hashing passwords? I kind of don't believe it, but I've heard crazier things be true.
(note: assume all other proper actions are being taken such as unique salts)
","You should use bcrypt.
","406","<security><passwords><hash><sha>","1","3","3","2011-02-21 04:29:52","","1","","-1","","2017-05-23 10:24:25","2011-02-21 04:08:47","2011-02-23 00:59:33"
"5062204","What hash function should be used for passwords?","
Possible Duplicate:
What's the recommended hashing algorithm to use for stored passwords? 

Hello, I've recently been told that common hash functions such as SHA256 are insecure for use as a password hashing function because they are ""designed to be fast""(incidentally I asked earlier for faster hashing functions over at programmers.se). So my question, what should be used for websites or other general applications?
Also, secondary question: Is SHA256 really not a good choice for hashing passwords? I kind of don't believe it, but I've heard crazier things be true.
(note: assume all other proper actions are being taken such as unique salts)
","Mike Howard's answer on the question Mark linked to is the correct best practice.
Simply using a good hash is insufficient because:

it does not protect you from rainbow table attacks.  The same password will hash to the same result, every time.  An attacker can compromise on the time vs. space tradeoff, pre-compute the most popular passwords and simply look up the answer.  To defeat, you need to add a salt.  (Mike suggests user id)  
as you suggest, hashing algorithms are designed to be fast.  This is sometimes desired, (such as getting the hash of a 50MB file) but in the case of passwords it not.  Use a password-based key derivation function instead.  It will significantly slow down an attacker, but not impact your own speed.

","406","<security><passwords><hash><sha>","1","1","3","2011-02-21 04:29:52","","1","","-1","","2017-05-23 10:24:25","2011-02-21 04:08:47","2011-02-23 00:59:33"
"53511961","How to use digital signature algorithm RSASSA-PSS-2048-SHA256 in python","I'am trying to find RSASSA-PSS-2048-SHA256 digital signature algorithm in python2.7.
Currently my code like this:
def calc_rsassa_pss_2048_sha256(self, data):
    private_key = RSA.importKey(self.private_key)
    cipher = PKCS1_v1_5.new(private_key)
    h = SHA.new(data)
    signature = cipher.sign(h)
    return base64.b64encode(signature)

But got the signature not match error when we try to verify the generated signature.
In Java the code like this:
public static PrivateKey decodePrivateKey(String privateKeyStr) throws NoSuchAlgorithmException, InvalidKeySpecException {
    String privateKeyRaw = trimPrivateKey(privateKeyStr);
    byte[] buffer = decodeBase64(privateKeyRaw);
    PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(buffer);
    KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
    return (RSAPrivateKey) keyFactory.generatePrivate(keySpec);
}

public static String sha256withRSAPSS(String privateKeyStr, String content) throws InvalidKeySpecException, NoSuchAlgorithmException, InvalidKeyException, SignatureException {
    PrivateKey privateKey = decodePrivateKey(privateKeyStr);
    Signature signature = Signature.getInstance(""SHA256withRSA/PSS"", new BouncyCastleProvider());
    signature.initSign(privateKey);
    signature.update(content.getBytes(CHARSET));
    return encodeBase64(signature.sign());
}

I don't know what's wrong with the python signature code above. Or how to use RSASSA-PSS-2048-SHA256 algorithm in python2.7 ?
Many thanks.
","On the Python piece you are using PKCS#1 v1.5 padding for signing. On the Java piece you are using PSS. As you are using different schemes it's only natural that these two won't produce the same output. Generally it is more recommended to use PSS scheme over v1.5.
I'm no Python expert, but after quick look in internet, maybe Hazmat crypto library could help you with that on Python (https://cryptography.io/en/latest/hazmat/primitives/asymmetric/rsa/):
>>> from cryptography.hazmat.primitives import hashes
>>> from cryptography.hazmat.primitives.asymmetric import padding
>>> message = b""A message I want to sign""
>>> signature = private_key.sign(
...     message,
...     padding.PSS(
...         mgf=padding.MGF1(hashes.SHA256()),
...         salt_length=padding.PSS.MAX_LENGTH
...     ),
...     hashes.SHA256()
... )

Edit: If Hazmat won't suit you, take a look at the approved answer here: PKCS1_PSS sign() method
","396","<python><rsa><digital-signature><sha>","3","1","1","2018-11-29 08:32:27","","0","","","","","2018-11-28 04:05:30",""
"22533547","Generate file name from SHA hash","I want to use the output of a SHA hash to generate a filename.  Any recommended way to do that?  I tried Base64 encoding, but for some input that results in the filename containing forward slashes.  Obviously I would prefer a method whose output will never contain characters reserved by file systems.  Converting each byte to a two-digit hex number would work, but something that produces shorter output would be preferable.
","You could use Base32
It only uses alpha and numeric characters.
","396","<filenames><sha>","0","1","2","2014-03-20 13:02:16","22533849","0","","","","","2014-03-20 12:48:01",""
"22533547","Generate file name from SHA hash","I want to use the output of a SHA hash to generate a filename.  Any recommended way to do that?  I tried Base64 encoding, but for some input that results in the filename containing forward slashes.  Obviously I would prefer a method whose output will never contain characters reserved by file systems.  Converting each byte to a two-digit hex number would work, but something that produces shorter output would be preferable.
","You can use this
    function getfilename(){

   mt_srand((double)microtime()*10000);
   $token=mt_rand(1, mt_getrandmax());
   $uid=uniqid(md5($token),true);   
   if($uid!=false && $uid!='' && $uid !=NULL){ return $filename =sha1($uid);}   
    }

    //create file name
    $filename=getfilename();
    $filename = substr($filename, 0, 10);

The above code uses the current system time to generate the File Name and also uses mt_rand and MD5 so as to create a unique file name every time the code is run. The final filename is 10 characters, and you can adjust it to whatever number of characters you want.
","396","<filenames><sha>","0","0","2","2014-03-20 13:02:16","22533849","0","","","","","2014-03-20 12:48:01",""
"38897468","SHA1Managed UWP (C#)","I writing app for UWP
I have code
 private string Hash(string input)
 {
     using (SHA1Managed sha1 = new SHA1Managed())
     {
         var hash = sha1.ComputeHash(Encoding.UTF8.GetBytes(input));
         var sb = new StringBuilder(hash.Length * 2);

         foreach (byte b in hash)
         {
             // can be ""x2"" if you want lowercase
             sb.Append(b.ToString(""X2""));
         }

         return sb.ToString();
     }
}

But it not works and show this error

Severity  Code    Description Project File    Line    Suppression State
      Error   CS0246  The type or namespace name 'SHA1Managed' could not be found (are you missing a using directive or an assembly reference?)   Milano  C:\Users\nemes\Documents\GitHub\Milano_pizza\Milano\WoocommerceApiClient.cs 25  Active

How I can fix this?
","For UWP use HashAlgorithmProvider
    public string Hash(string input)
    {
        IBuffer buffer = CryptographicBuffer.ConvertStringToBinary(input, BinaryStringEncoding.Utf8);
        HashAlgorithmProvider hashAlgorithm = HashAlgorithmProvider.OpenAlgorithm(HashAlgorithmNames.Sha1);
        var hashByte = hashAlgorithm.HashData(buffer).ToArray();
        var sb = new StringBuilder(hashByte.Length * 2);
        foreach (byte b in hashByte)
        {
            sb.Append(b.ToString(""x2""));
        }
        return sb.ToString();
    }

Remember to add
using Windows.Security.Cryptography;
using Windows.Security.Cryptography.Core;

","393","<c#><visual-studio><uwp><sha>","0","3","2","2018-04-11 09:35:16","","1","","1938988","","2016-08-11 14:38:33","2016-08-11 13:15:06",""
"38897468","SHA1Managed UWP (C#)","I writing app for UWP
I have code
 private string Hash(string input)
 {
     using (SHA1Managed sha1 = new SHA1Managed())
     {
         var hash = sha1.ComputeHash(Encoding.UTF8.GetBytes(input));
         var sb = new StringBuilder(hash.Length * 2);

         foreach (byte b in hash)
         {
             // can be ""x2"" if you want lowercase
             sb.Append(b.ToString(""X2""));
         }

         return sb.ToString();
     }
}

But it not works and show this error

Severity  Code    Description Project File    Line    Suppression State
      Error   CS0246  The type or namespace name 'SHA1Managed' could not be found (are you missing a using directive or an assembly reference?)   Milano  C:\Users\nemes\Documents\GitHub\Milano_pizza\Milano\WoocommerceApiClient.cs 25  Active

How I can fix this?
","SHA1Managed is only available for Android and iOs, for Windows UWP use:
If you want as a result a byte array:
    public byte[] getSHA1MessageDigest(string originalKey)
    {
        IBuffer buffer = CryptographicBuffer.ConvertStringToBinary(originalKey, BinaryStringEncoding.Utf8);
        HashAlgorithmProvider hashAlgorithm = HashAlgorithmProvider.OpenAlgorithm(HashAlgorithmNames.Sha1);
        IBuffer sha1 = hashAlgorithm.HashData(buffer);
        byte[] newByteArray;
        CryptographicBuffer.CopyToByteArray(sha1, out newByteArray);
        return newByteArray;
    }

If you want as a result a string:
    public string getSHA1MessageDigest(string originalKey)
    {
        IBuffer buffer = CryptographicBuffer.ConvertStringToBinary(originalKey, BinaryStringEncoding.Utf8);
        HashAlgorithmProvider hashAlgorithm = HashAlgorithmProvider.OpenAlgorithm(HashAlgorithmNames.Sha1);
        IBuffer sha1 = hashAlgorithm.HashData(buffer);
        byte[] newByteArray;
        CryptographicBuffer.CopyToByteArray(sha1, out newByteArray);
        var sb = new StringBuilder(newByteArray.Length * 2);
        foreach (byte b in newByteArray)
        {
            sb.Append(b.ToString(""x2""));
        }
        return sb.ToString();
    }

","393","<c#><visual-studio><uwp><sha>","0","0","2","2018-04-11 09:35:16","","1","","1938988","","2016-08-11 14:38:33","2016-08-11 13:15:06",""
"7974681","Comparing password with random salt","I have a c# app and I'm trying to write a basic login form using php and mysql to store passwords.
I'm using SHA512 + random salt to store passwords so currently I'm doing this for the passwords.

hash(password+randomSalt)+randomSalt;

So the salt is appended to the hash then sent to the server and stored.
Now my problem is comparing when someone tries login. The user doesn't know the salt, and I don't want to send the plain text password to the server so I'm a little stuck.
Should I be encrypting the password and sending it to the server, having the server send the user the salt or is there a better way to implement this?
I just want to make sure anyone who makes an account password is moderately secure.
Thanks in advance
","In general, you should store the hashed passwords and random salt values in the database. 
When a user authenticates, his or her username and password are sent to the server (preferably, over an SSL secured connection). Form there, you use the username to retrieve the salt value and hashed password from the database to do your comparison with.
Bottom line, you should never store plain-text passwords or send them over an unsecured connection.
See Password hashing, salt and storage of hashed values for more info.
","393","<c#><security><login><password-protection><sha>","0","1","2","2011-11-02 01:22:54","7974762","1","","","","","2011-11-02 00:58:00",""
"7974681","Comparing password with random salt","I have a c# app and I'm trying to write a basic login form using php and mysql to store passwords.
I'm using SHA512 + random salt to store passwords so currently I'm doing this for the passwords.

hash(password+randomSalt)+randomSalt;

So the salt is appended to the hash then sent to the server and stored.
Now my problem is comparing when someone tries login. The user doesn't know the salt, and I don't want to send the plain text password to the server so I'm a little stuck.
Should I be encrypting the password and sending it to the server, having the server send the user the salt or is there a better way to implement this?
I just want to make sure anyone who makes an account password is moderately secure.
Thanks in advance
","It's pretty much impossible. Like Derek said, the right thing is get an SSL cert and send plain text passwords over that.
Salting is to protect a stolen password database from revealing everyones password. But if the hash step is done on the client, the value in the database is the exact string that is sent over the network.
If you really cannot use SSL, http://en.wikipedia.org/wiki/Challenge-response_authentication#Cryptographic_techniques describes a way to avoid sending the password (or the hash, which is almost the same).
","393","<c#><security><login><password-protection><sha>","0","0","2","2011-11-02 01:22:54","7974762","1","","","","","2011-11-02 00:58:00",""
"8626162","How to encrypt this file with PHP?","I have a php page (just one page - consist of security information and validation) that I want to create an encryption on it, actually in this case I don't have any DB to save data, so I must put the username and password on itself!
the question is how can I encrypt or hide username and pass in this file and how to check the validation for login ?
this page must be very secure, till if it lost, they can't access it?
I check the md5 method for username & Password but how can I hide it on the file :(
please help me because it's very important to me!
Thanks a lot ...
","
Store username/password in a variable/array inside the PHP file. Only people with access to your server can see the username then.
Storing the information in a file with a strange filename together with a hash algorithm + salt is also a possibility.
Using .htaccess to make sure that no one can actually visit it increases the security further.

Don't use this to protect something important as it's not really a good way to do it.
","392","<php><encryption><md5><sha>","0","1","2","2011-12-24 19:07:27","","2","","252518","","2011-12-24 18:36:48","2011-12-24 18:22:28",""
"8626162","How to encrypt this file with PHP?","I have a php page (just one page - consist of security information and validation) that I want to create an encryption on it, actually in this case I don't have any DB to save data, so I must put the username and password on itself!
the question is how can I encrypt or hide username and pass in this file and how to check the validation for login ?
this page must be very secure, till if it lost, they can't access it?
I check the md5 method for username & Password but how can I hide it on the file :(
please help me because it's very important to me!
Thanks a lot ...
","Hard-coding the password in the PHP file is not per se a huge security issue, as someone would need to access the PHP file anyway to read it: if someone gained access to your PHP files you would have a much bigger problem than your lost password.
However, avoid:

storing the password in clear text, save an hash instead.
storing the password in JS files, as the source of JS files is accessible by the client

There are different types of hashes, I would suggest not to use MD5, especially if your password is not very complex. Sites like this hold databases of MD5 hashes, so your hash could easily be cracked.
Use something a bit more secure, like SHA256.
NOTE: obviously whoever owns the server has the physical access to your files and DB, but if you stored the hash you should be fine. If you are really concerned about the possibility that whoever owns the server has a look through your ""secure"" stuff, you shouldn't be using a shared server as a start.
","392","<php><encryption><md5><sha>","0","2","2","2011-12-24 19:07:27","","2","","252518","","2011-12-24 18:36:48","2011-12-24 18:22:28",""
"19759645","How to reliably re-calculate blob sha1 hash (or another identity) from (user) text content and escape line-end/whitespace hell?","I have some code for Node.js that pull text files from Git (local Git or via the Github API) and uses the commit/tree/blob data in various scenarios. But I have problems with the line endings and recalculating sha hashes after I (or the user) uses the files. 
The data consist of source-code. It gets downloaded/used/linked/imported to a users project directory and used in development. I was hoping to use the git blob hashes to check for changes relative to the source blob.
My setup:
I'm on Windows but use Travis-CI and a VM to run builds.
I use this function to calculate the sha1-hash as hex-string:
var crypto = require('crypto');
function blobShaHex(data:NodeBuffer, encoding?:string):string {
    return crypto.createHash('sha1').update('blob ' + data.length + '\0').update(data, encoding).digest('hex');
}

So far this seems to work very well: data read as raw Buffers straight from the repos match their hashe, same with utf8 content.
Problem:
In practical user-use of the blob content the line endings break the blob sha1:
The file might get checked-in into a VCS and then get mangled by line-end conversions. Also the user's IDE may normalise line-breaks to user preference, even if the user never saves the file. Many other things may happen.
Note: my code is not pulling the blob from the Git repo where the files end up. Instead it is a separate thing (like dependency manager) that just moves blob-originating files around, which may-or-may not get checked in somewhere.
To make things extra messy I have no full control over the source-repo's line-endings so there is no guarantee about which style then come down with. Might even be mixed conventions (if that technically possible?).
Questions:
Is there some way to revert to the original linebreaks or otherwise verify a match? I could pull the original file again and do stuff with it.
Any advice on handling this would be welcome.
--
Now I typed this all up I'm starting to think it might be a really non-practical idea to attempt this. Maybe it'd be better to force normalise and create&track my own checksums or use some clever white-space ignoring diff thing? 
","I'll go with a custom hasher that normalises linebreaks and such instead of using Git's blobs sha hashes.
Like @gary-fixler commented on my question: 

""Out there the content is totally 'in the wild,' and has no connection to any blob sha-1.""

","392","<git><node.js><hash><newline><sha>","2","0","1","2013-11-04 22:27:33","19778488","2","","","","","2013-11-03 23:46:55",""
"32184917","Which SHA-2 function will Facebook use?","I read that Facebook on the 1st Oct 2015 will move from SHA-1 to SHA-2 and we have to update our applications: https://developers.facebook.com/blog/post/2015/06/02/SHA-2-Updates-Needed/ 
Do you know which function of SHA-2 will it use?
I read there are several (224, 256, 384 or 512) and one of these (SHA-224) doesn't work with the Windows XP SP3 which I use (http://blogs.msdn.com/b/alejacma/archive/2009/01/23/sha-2-support-on-windows-xp.aspx)
","You don't have to care that much because usage of the SHA-224 is quite limited.
In this question CBroe has pointed out an important remark:

That blog post is about SSL connections when your app is making API
  requests. This is not about anything you do with data within your app,
  it is about the transport layer.

According to the https://crypto.stackexchange.com/questions/15151/sha-224-purpose 
Answer by Ilmari Karonen:

Honestly, in practice, there are very few if any reasons to use
  SHA-224.
As fgrieu notes, SHA-224 is simply SHA-256 with a different IV and
  with 32 of the output bits thrown away. For most purposes, if you want
  a hash with more than 128 but less than 256 bits, simply using SHA-256
  and truncating the output yourself to the desired bit length is
  simpler and just as efficient as using SHA-224. As you observe,
  SHA-256 is also more likely to be available on different platforms
  than SHA-224, making it the better choice for portability.
Why would you ever want to use SHA-224, then?
The obvious use case is if you need to implement an existing protocol
  that specifies the use of SHA-224 hashes. While, for the reasons
  described above, it's not a very common choice, I'm sure such
  protocols do exist.
Also, a minor advantage of SHA-224 over truncated SHA-256 is that, due
  to the different IV, knowing the SHA-224 hash of a given message does
  not reveal anything useful about its SHA-256 hash, or vice versa. This
  is really more of an ""idiot-proofing"" feature; since the two hashes
  have different names, careless users might assume that their outputs
  have nothing in common, so NIST changed the IV to ensure that this is
  indeed the case.
However, this isn't really something you should generally rely on. If
  you really need to compute multiple unrelated hashes of the same input
  string, what you probably want instead is a keyed PRF like HMAC, which
  can be instantiated using any common hash function (such as SHA-256).

As you've mentioned, Windows XP with SP3 doesn't support SHA-224 but it supports SHA-256:

Check also: https://security.stackexchange.com/questions/1751/what-are-the-realistic-and-most-secure-crypto-for-symmetric-asymmetric-hash
Especially: https://stackoverflow.com/a/817121/3964066
And: https://security.stackexchange.com/a/1755
Part of the Thomas Pornin's answer:

ECDSA over a 256-bit curve already achieves an ""unbreakable"" level of
  security (i.e. roughly the same level than AES with a 128-bit key, or
  SHA-256 against collisions). Note that there are elliptic curves on
  prime fields, and curves on binary fields; which kind is most
  efficient depends on the involved hardware (for curves of similar
  size, a PC will prefer the curves on a prime field, but dedicated
  hardware will be easier to build with binary fields; the CLMUL
  instructions on the newer Intel and AMD processors may change that).
SHA-512 uses 64-bit operations. This is fast on a PC, not so fast on a
  smartcard. SHA-256 is often a better deal on small hardware (including
  32-bit architectures such as home routers or smartphones)

","388","<facebook><security><sha1><sha><sha2>","1","0","1","2015-08-24 16:01:30","32185583","2","","3964066","","2015-08-24 16:01:30","2015-08-24 14:32:49",""
"9840585","Is there a library that would produce a string that would hash (SHA1) to a given input?","I'm wondering if it's possible to find a block of text that would hash to a known value. In particular, I'm looking for a function CreateDataFromHash() that could be called as follows:
unsigned char myHash[] = ""da39a3ee5e6b4b0d3255bfef95601890afd80709"";
unsigned int length = 10000;
CreateDataFromHash(myHash, length);

Here CreateDataFromHash would return the string of the length 10000 containing arbitrary data, which would hash to myHash using SHA1.
Thanks.
","There's no known easy or even moderately difficult way to do this in general.
The entire point of hashes (or so-called one-way functions), is that it's easy to compute them, but next to impossible to reverse their computation (find input values based on output). That said, for some hash functions, there are known methods that may allow computing inputs for a given hash value in reasonable time.
For example, this MD5 sum technique will find collisions (but not input for a given output) in about 8 hours on a 1.6GHz computer.
For SHA-1 in particular you may be interested in reading this. 
","385","<c++><encryption><hash><sha1><sha>","2","5","5","2012-03-29 02:17:55","","10","","1257977","","2012-03-29 02:17:55","2012-03-23 14:06:08",""
"9840585","Is there a library that would produce a string that would hash (SHA1) to a given input?","I'm wondering if it's possible to find a block of text that would hash to a known value. In particular, I'm looking for a function CreateDataFromHash() that could be called as follows:
unsigned char myHash[] = ""da39a3ee5e6b4b0d3255bfef95601890afd80709"";
unsigned int length = 10000;
CreateDataFromHash(myHash, length);

Here CreateDataFromHash would return the string of the length 10000 containing arbitrary data, which would hash to myHash using SHA1.
Thanks.
","One of the purposes of SHA1 is that this should be very hard to do.
","385","<c++><encryption><hash><sha1><sha>","2","2","5","2012-03-29 02:17:55","","10","","1257977","","2012-03-29 02:17:55","2012-03-23 14:06:08",""
"9840585","Is there a library that would produce a string that would hash (SHA1) to a given input?","I'm wondering if it's possible to find a block of text that would hash to a known value. In particular, I'm looking for a function CreateDataFromHash() that could be called as follows:
unsigned char myHash[] = ""da39a3ee5e6b4b0d3255bfef95601890afd80709"";
unsigned int length = 10000;
CreateDataFromHash(myHash, length);

Here CreateDataFromHash would return the string of the length 10000 containing arbitrary data, which would hash to myHash using SHA1.
Thanks.
","hashing is a one way function. you can't get input from the output.
","385","<c++><encryption><hash><sha1><sha>","2","1","5","2012-03-29 02:17:55","","10","","1257977","","2012-03-29 02:17:55","2012-03-23 14:06:08",""
"9840585","Is there a library that would produce a string that would hash (SHA1) to a given input?","I'm wondering if it's possible to find a block of text that would hash to a known value. In particular, I'm looking for a function CreateDataFromHash() that could be called as follows:
unsigned char myHash[] = ""da39a3ee5e6b4b0d3255bfef95601890afd80709"";
unsigned int length = 10000;
CreateDataFromHash(myHash, length);

Here CreateDataFromHash would return the string of the length 10000 containing arbitrary data, which would hash to myHash using SHA1.
Thanks.
","You have to brute force it. See
PHP brute force password generator
Get string, do hash, compare, repeat
","385","<c++><encryption><hash><sha1><sha>","2","0","5","2012-03-29 02:17:55","","10","","1257977","","2012-03-29 02:17:55","2012-03-23 14:06:08",""
"9840585","Is there a library that would produce a string that would hash (SHA1) to a given input?","I'm wondering if it's possible to find a block of text that would hash to a known value. In particular, I'm looking for a function CreateDataFromHash() that could be called as follows:
unsigned char myHash[] = ""da39a3ee5e6b4b0d3255bfef95601890afd80709"";
unsigned int length = 10000;
CreateDataFromHash(myHash, length);

Here CreateDataFromHash would return the string of the length 10000 containing arbitrary data, which would hash to myHash using SHA1.
Thanks.
","This would be a ""preimage attack"". No such thing is publicly known against SHA-1.
The only attack known against SHA-1 is a collision attack. That means I find two inputs that produce the same result, but neither of them is pre-ordained, so to speak. Even so, this attack isn't really feasible for most people -- based on the amount of computation involved, the closest I can figure is that you'd have to spend somewhere in the range of a few million dollars to build a machine that would give you about one colliding pair of keys per week (assuming it ran, doing nothing else 24/7).
","385","<c++><encryption><hash><sha1><sha>","2","1","5","2012-03-29 02:17:55","","10","","1257977","","2012-03-29 02:17:55","2012-03-23 14:06:08",""
"12752107","Why does Git generate a random SHA?","If the SHA were generated by the data in the commit, then Git would know when two commits are the same.
This would solve problems when rebasing and generating commits that are really the same but Git thinks that they are different because they have different SHA's.
Is this logic correct or am I missing something?
","The SHA of a commit includes the parent SHA commit. That's why it changes when rebasing even if the commit itself doesn't change - it's parent changes (because that the whole point of a rebase).
","385","<git><version-control><sha>","1","13","2","2012-10-05 19:20:36","12752229","2","","336920","","2012-10-05 19:20:36","2012-10-05 18:35:07","2012-10-06 01:23:58"
"12752107","Why does Git generate a random SHA?","If the SHA were generated by the data in the commit, then Git would know when two commits are the same.
This would solve problems when rebasing and generating commits that are really the same but Git thinks that they are different because they have different SHA's.
Is this logic correct or am I missing something?
","If they were really the same commit, they would have the same random SHA.
Assuming your assertion that a random SHA is used is correct... If the commits are identical in terms of the diffs, they are still different because of time, who made them, and to which previous commit the diffs were applied. etc.
","385","<git><version-control><sha>","1","5","2","2012-10-05 19:20:36","12752229","2","","336920","","2012-10-05 19:20:36","2012-10-05 18:35:07","2012-10-06 01:23:58"
"38646069","Fast RSA-SHA1 implementation for NodeJS","As part of a NodeJS application, I'm regularly generating signed AWS CloudFront URLs. When a lot of simultaneous requests hit the server, I've noticed a performance bottleneck in our application during the generation of the signature. Specifically, the function from aws-cloudfront-sign here:
function _createPolicySignature(policy, privateKey) {
    var sign = crypto.createSign('RSA-SHA1');
    sign.update(policy.toJSON());

    return sign.sign(privateKey, 'base64');
}

Profiling the node app gives the following output:
 ticks parent  name
21043   98.4%  UNKNOWN
 1775    8.4%    LazyCompile: *_createPolicySignature node_modules\aws-cloudfront-sign\lib\cloudfrontUtil.js:157:32
 1775  100.0%      LazyCompile: ~getSignedUrl node_modules\aws-cloudfront-sign\lib\cloudfrontUtil.js:19:22
 1363   76.8%        LazyCompile: *getCDNDownloadURL
 1363  100.0%          LazyCompile: *getImageObject
 1305   95.7%            LazyCompile: ~<anonymous>
   58    4.3%            LazyCompile: ~<anonymous>
  412   23.2%        LazyCompile: ~getCDNDownloadURL
  206   50.0%          LazyCompile: ~getImageObject
  206  100.0%            LazyCompile: ~<anonymous>
  206   50.0%          LazyCompile: *getImageObject
  179   86.9%            LazyCompile: ~<anonymous>
   27   13.1%            LazyCompile: ~<anonymous>

I'm looking for ways to improve this. Is there a library I can use which will perform better in this case? The private key always remains the same, so maybe something which doesn't have to create new signing objects / buffers each time it is used? Unfortunately, as the profiler only gives an UNKNOWN for the code inside the crypto library, I'm not sure where the exact bottleneck is occurring. Is there a way to get the profiller to also show the stack trace when calling NodeJS libraries?
","","379","<javascript><node.js><amazon-web-services><rsa><sha>","1","","0","2016-07-28 20:23:55","","2","","","","","2016-07-28 20:23:55",""
"33097669","Same keystore, info, but different fingerprints and I can't update play app","My developer gave me the keystore files, and his passwords, I generate the signed apk, but when trying to update the apk in google play it says I have different fingerprints. I have tons of reviews, etc , and am panicking that I may have to start a whole new play listing. :(
Surely it can't be because of a different computer could it? Google knows people's computer's crash and they get new computers.
And what if my original developer died and I had to get a new one. They couldn't expect me to just forget about thousands and thousands of reviews could they?
Thank you guys for any help. Stack overflow has helped me countless number of times, but I'm just now signing up and asking my first question. :)
","","378","<android><keystore><sha><fingerprint>","0","","0","2015-10-13 08:25:24","","7","1","","","","2015-10-13 08:25:24",""
"49637116","""SHA256"" sum is not sha256","I have replaced an image inside of a TPK file (Tizen Install package) but it will not install.
Inside the TPK file, there are two signature files signature1.xml, and author-signature.xml.
In both of them, they have this:
<Reference URI=""shared/res/ACL-splash.png"">
<DigestMethod Algorithm=""http://www.w3.org/2001/04/xmlenc#sha256""></DigestMethod>
<DigestValue>wgvWtVSJns8mCgUPfBZ/2ZTBfKqR02zW0MD4tA3cIBE=</DigestValue>
</Reference>

It links to information about sha256 values, but when I find the sha256 value for my edited file I get this:
Sha1: 53f3002da277c92d86e1c356ded39ce3dd91512b
Sha256: 463e0102f54ee7370b84f5b1570ac0d77791244d5b2b06f023e0e4831a23bfe4
Neither of them are the right length
In addition, the original file has a different sha than what is listed:
Sha1: 4c3e051a5ef68c63a45b38abaa63e1038d318bc3
sha256: c20bd6b554899ecf260a050f7c167fd994c17caa91d36cd6d0c0f8b40ddc2011
When you install the modified files on a tizen phone, it says:
__return_cb req_id[29370002] pkg_type[tpk] pkgid[VZtRZw5cZM] key[error] val[79] error message: Invalid signature. Signed with wrong key, changed signature file or changed package file
__return_cb req_id[29370002] pkg_type[tpk] pkgid[VZtRZw5cZM] key[end] val[fail]
processing result : SIGNATURE_INVALID_HASH_SIGNATURE [79] failed
spend time for pkgcmd is [6309]ms

(ignore the pkgid part)
But when you add an equal sign to the end of the hash that you put in, it says:
__return_cb req_id[29870002] pkg_type[tpk] pkgid[VZtRZw5cZM] key[error] val[32]
__return_cb req_id[29870002] pkg_type[tpk] pkgid[VZtRZw5cZM] key[end] val[fail]
processing result : CERTIFICATE_INVALID [32] failed
spend time for pkgcmd is [6251]ms

","Your sample values are in hex, whereas the XML contains base64.
For example, your SHA-256 value is 64 hex digits, so 32 bytes - which makes sense for SHA-256, which is 256 bits.
The DigestValue in the XML is 44 characters including one padding character - which is what I'd expect for 32 bytes, where every 3 bytes require 4 characters.
For example, here's some C# code to take the base64 hash and convert it to (dash-separated) hex:
using System;
using System.Text;

class Test
{
    static void Main()
    {
        byte[] hash = Convert.FromBase64String(""wgvWtVSJns8mCgUPfBZ/2ZTBfKqR02zW0MD4tA3cIBE="");
        Console.WriteLine(BitConverter.ToString(hash));        
    }
}

The output is:
C2-0B-D6-B5-54-89-9E-CF-26-0A-05-0F-7C-16-7F-D9-94-C1-7C-AA-91-D3-6C-D6-D0-C0-F8-B4-0D-DC-20-11

... which matches the hash you computed for the original file, so at least you know you're computing it the right way.
I don't know anything about Tizen itself, but it sounds like you may need to update that XML file to include the base64 of the SHA-256 hash... or if you delete it, does the tooling replace it for you?
","377","<sha><tizen>","1","0","2","2018-04-05 00:03:40","","0","","","","","2018-04-03 18:45:08",""
"49637116","""SHA256"" sum is not sha256","I have replaced an image inside of a TPK file (Tizen Install package) but it will not install.
Inside the TPK file, there are two signature files signature1.xml, and author-signature.xml.
In both of them, they have this:
<Reference URI=""shared/res/ACL-splash.png"">
<DigestMethod Algorithm=""http://www.w3.org/2001/04/xmlenc#sha256""></DigestMethod>
<DigestValue>wgvWtVSJns8mCgUPfBZ/2ZTBfKqR02zW0MD4tA3cIBE=</DigestValue>
</Reference>

It links to information about sha256 values, but when I find the sha256 value for my edited file I get this:
Sha1: 53f3002da277c92d86e1c356ded39ce3dd91512b
Sha256: 463e0102f54ee7370b84f5b1570ac0d77791244d5b2b06f023e0e4831a23bfe4
Neither of them are the right length
In addition, the original file has a different sha than what is listed:
Sha1: 4c3e051a5ef68c63a45b38abaa63e1038d318bc3
sha256: c20bd6b554899ecf260a050f7c167fd994c17caa91d36cd6d0c0f8b40ddc2011
When you install the modified files on a tizen phone, it says:
__return_cb req_id[29370002] pkg_type[tpk] pkgid[VZtRZw5cZM] key[error] val[79] error message: Invalid signature. Signed with wrong key, changed signature file or changed package file
__return_cb req_id[29370002] pkg_type[tpk] pkgid[VZtRZw5cZM] key[end] val[fail]
processing result : SIGNATURE_INVALID_HASH_SIGNATURE [79] failed
spend time for pkgcmd is [6309]ms

(ignore the pkgid part)
But when you add an equal sign to the end of the hash that you put in, it says:
__return_cb req_id[29870002] pkg_type[tpk] pkgid[VZtRZw5cZM] key[error] val[32]
__return_cb req_id[29870002] pkg_type[tpk] pkgid[VZtRZw5cZM] key[end] val[fail]
processing result : CERTIFICATE_INVALID [32] failed
spend time for pkgcmd is [6251]ms

","To resign the tizen package (.tpk), you need to use tizen cli.
Re-sign the package.
Windows:
tizen package -t tpk -s MyProfile -- C:\Users\workspace\basic\Debug\org.tizen.basic-1.0.0-i386.tpk
Author certificate: C:\tizen-sdk-data\keystore\author\mycert.p12
Distributor1 certificate : C:\tizen-sdk\tools\certificate-generator\certificates\distributor\tizen-distributor-signer.p12
Package (C:\Users\workspace\basic\Debug\org.tizen.basic-1.0.0-i386.tpk) is created successfully.

Ubuntu and macOS:
$ tizen package -t tpk -s MyProfile -- ~/workspace/basic/Debug/org.tizen.basic-1.0.0-i386.tpk
Author certificate: ~/tizen-sdk-data/keystore/author/mycert.p12
Distributor1 certificate : ~/tizen-sdk/tools/certificate-generator/certificates/distributor/tizen-distributor-signer.p12
Package (~/workspace/basic/Debug/org.tizen.basic-1.0.0-i386.tpk) is created successfully.

For more detail, you can refer to below tizen cli guide.
https://developer.tizen.org/development/tizen-studio/native-tools/cli
","377","<sha><tizen>","1","1","2","2018-04-05 00:03:40","","0","","","","","2018-04-03 18:45:08",""
"27157636","SHA1 password encryption returns an undefined index","I am quite new to php and mysqli and I hope someone could help me. 
The following code inserts firstname, lastname, email and registration date successfully but I get an unidentified index warning with the password and nothing is inserted in mysql.
I know SHA1 is not the best encryption to use and I know this code is vulnerable, I still have a lot of work to do on it. I just need someone suggest where I am going wrong and what I need to do to correct this. Many thanks in advance.
    

$page_title = 'Register';
$q = 'query';


if (isset($_POST['submitted'])){

$errors = array();//initialise error array

//check for first name
if (empty($_POST['first_name'])) {
    $errors[] = 'you forgot to enter your first name';
} else {
    $fn=trim($_POST['first_name']);
}

//check for last name
if (empty($_POST['last_name'])) {
    $errors[] = 'you forgot to enter your last name';
} else {
    $fn=trim($_POST['last_name']);
}

//check for email
if (empty($_POST['email'])) {
    $errors[] = 'you forgot to enter your email';
} else {
    $fn=trim($_POST['email']);
}

//check passwords against each other
if (!empty($_POST['pass1'])){

    if(!empty($_POST['pass1'])) {
        if ($_POST['pass1'] != $_POST['pass2']) {
            $errors[] = 'Passwords dont match';
            } else {
                $p = trim($_POST['pass1']);
            }
        } else {
            $errors[] = 'You forgot to enter your password.';
        }

    if (empty($errors)) {

        require_once ('mysqli_connect.php');

        //make query
        $q = ""INSERT INTO users (first_name,last_name,email,pass,registration_date) VALUES 
        ('"".$_POST[""first_name""].""','"".$_POST[""last_name""].""','"".$_POST[""email""].""','"".$_POST[""SHA1('pass')""].""', NOW())"";

        $r = @mysqli_query ($dbc,$q); //run query

        if($r) {
            echo 'Registration complete';
        } else {
            echo 'System error, could not register you';

            //debug msg
            echo '<p>'.mysqli_error($dbc).
            '<br/><br/>Query: '.$q.
            '</p>';
        }

        mysqli_close($dbc);

    }else { //report errors
    echo 'The following errors occurred: <br/>';
    foreach ($errors as $msg) {
    echo ""- $msg<br/>/n"";
    }
    }
}
}
?>
<html>
<head></head>
<h1>Register</h1>
<body>
<form action=""register.php"" method=""post"">
<p>First Name: <input type=""text"" name=""first_name"" size=""15"" maxlength=""20""           value=""<?php if(isset($_POST['first_name'])) echo $_POST['first_name']; ?>""/></p>
<p>Last Name: <input type=""text"" name=""last_name"" size=""15"" maxlength=""20""  value=""<?php if(isset($_POST['last_name'])) echo $_POST['last_name']; ?>""/></p>
<p>Email Address: <input type=""text"" name=""email"" size=""15"" maxlength=""20""   value=""<?php if(isset($_POST['email'])) echo $_POST['email']; ?>""/></p>
<p>Password: <input type=""password"" name=""pass1"" size=""10"" maxlength=""20""/></p>
<p>Confirm Password: <input type=""password"" name=""pass2"" size=""10"" maxlength=""20""/></p>
<p><input type=""submit"" name=""submit"" value=""register""/></p>
<input type=""hidden"" name=""submitted"" value=""TRUE""/>
</form>
</body>
</html>

","In your query variable $q this value is wrong: $_POST[""SHA1('pass')""] change to your password variable like this:
//make query
$q = ""INSERT INTO users (first_name,last_name,email,pass,registration_date) VALUES 
('"".$_POST[""first_name""].""','"".$_POST[""last_name""].""','"".$_POST[""email""].""','"". sha1($p) .""', NOW())"";

Consider yourself making a better approach when storing passwords take a look at function password_hash() for better security.
","377","<php><mysqli><sha>","-1","0","1","2014-11-26 20:00:45","27157892","8","","","","","2014-11-26 19:44:19",""
"37354199","Verification of Hashing password is not working","I have asked a question of which I did get a lot of great feedback, along with a good answer.  I assume that I am doing something wrong with my verification check of the 2 hashes.  Perhaps the code in the loop is fine, but my code with understanding of bytes and base64 etc. is the problem? 
Here is the original question.
Password Hashing - Why salt 60,000 times
Problem is these hashes do not match  if (resultHash.Equals(hashPassword))
Code 
public string BuildVerify()
{

    string password = """";
    string salt = """";
    byte[] result;


    using (var sha256 = SHA256.Create())
    {
        password = ""hovercraft"";

        // step 1: you can use RNGCryptoServiceProvider for something worth using
        var passwordHashing = new PasswordHashing();
        salt = passwordHashing.CreateRandomSalt();

        // step 2
        string hash =
           Convert.ToBase64String(sha256.ComputeHash(Encoding.UTF8.GetBytes(salt + password)));

        // step 3
        result = sha256.ComputeHash(Encoding.UTF8.GetBytes(salt + hash));

        // step 4
        for (int i = 0; i < 60000; i++)
        {
            result =
             sha256.ComputeHash(Encoding.UTF8.GetBytes(salt + Convert.ToBase64String(result)));
        }
    }


    // TESTING  VERIFY this works ..

    string SaltAndPwd = string.Concat(password, salt);
    SHA256 sha2 = SHA256Managed.Create();
    byte[] buff = sha2.ComputeHash(Encoding.Unicode.GetBytes(SaltAndPwd));
    string resultHash = Convert.ToBase64String(buff);
    string hashPassword = Convert.ToBase64String(result);

    if (resultHash.Equals(hashPassword))
    {
        // perfect 
    }





    return """";

}


public class PasswordHashing
{

     public string CreateRandomSalt()
     {
        string password = """";
        password = HashPassword.CreateSalt(8) + ""="";
        password = password.Replace(""/"", ""c"");
        return password;
     }

  }

public static string CreateSalt(int size)
{
    RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();

    byte[] buff = new byte[size];
    rng.GetBytes(buff);
    return Convert.ToBase64String(buff);
}

Update - issue 
Ok, I'm using the code from the answer, but obviously my assumptions are not correct as I cannot use my code to verify 
            // This should be stored in your DB for example along with the hash result
            var newsalt = SOPasswordHasher.GetSalt();

            // We calculate the hash then store the result. Next time you want to authenticate someone
            // You'll have to reuse the same salt and recalculate the hash then compare 
            // the stored hash with the new one
            var result = Convert.ToBase64String(SOPasswordHasher.Hash(""hovercraft"", newsalt));

            string SaltAndPwd = string.Concat(""hovercraft"", newsalt);
            SHA256 sha2 = SHA256Managed.Create();
            byte[] buff = sha2.ComputeHash(Encoding.Unicode.GetBytes(SaltAndPwd));
            string resultHash = Convert.ToBase64String(buff);

            if (result.Equals(resultHash))
            {
                // perfect 
            }

","Here's a reusable class that you can use (relying less on converting to base64):
class SOPasswordHasher
{
    /// <summary>
    /// Password Hasher
    /// </summary>
    /// <param name=""password"">The password you want to hash</param>
    /// <param name=""salt"">byte array of (crypto-secure) random values</param>
    /// <param name=""iterations"">Number of iterations. default is 60,000</param>
    /// <returns>Byte array containing the hashed password</returns>

    public static byte[] Hash(string password, byte[] salt, int iterations = 60000)
    {
        using (var sha256 = SHA256.Create())
        {
            byte[] passwordBytes = Encoding.UTF8.GetBytes(password);

            // step 2
            byte[] hash = sha256.ComputeHash(passwordBytes.Concat(salt).ToArray());

            // step 3
            byte[] result = sha256.ComputeHash(salt.Concat(hash).ToArray());

            // step 4
            for (int i = 0; i < iterations; i++)
            {
                result =
                    sha256.ComputeHash(salt.Concat(result).ToArray());
            }

            return result;
        }
    }

    public static byte[] GetSalt(int size = 32)
    {
        byte[] salt = new byte[size];
        using (var cryptoServiceProvider = new RNGCryptoServiceProvider())
        {
            cryptoServiceProvider.GetBytes(salt);
        }
        return salt;
    }
}

and here's a usage example:
// This should be stored in your DB for example along with the hash result
var salt = SOPasswordHasher.GetSalt();

// We calculate the hash then store the result. Next time you want to authenticate someone
// You'll have to reuse the same salt and recalculate the hash then compare 
// the stored hash with the new one
var result = Convert.ToBase64String(SOPasswordHasher.Hash(""hovercraft"", salt));

Important: I make no guarantee that this code is safe to use since I'm not a security expert. Bruce Schneier said it best: ""Amateurs Produce Amateur Cryptography""
","376","<c#><security><hash><sha256><sha>","1","2","1","2016-05-20 19:59:46","37354671","13","","-1","","2017-05-23 11:52:44","2016-05-20 19:09:39",""
"20569905","info_hash calculated for torrent incorrect","OK I've searched all related questions, and source code where available, just stuck.
I'm using this code from a related question:
How to calculate the hash value of a torrent using Java
to build the SHA-1 hash.
Then I'm doing this to encode it, to be included in the tracker request:

URLCodec c = new org.apache.commons.codec.net.URLCodec();
  return new String(c.encode(info_hash));

But the tracker replies with no peers.  By tracing uTorrent, I can see the correct hash for my  torrent file is:
T%7f%bc%a6%92%bb%8a%8b%2aL%b9%a3%0f%a59%f3%98%e6%0c%eb
But my code outputs:
%E4%AF%3C%96%9E%D2%BAJt%C0%C3%B4%12%93%D4h%3B%9A%2CF
Any ideas why this won't work?
","private string encodeInfoHash(string code) 
{
      //string code = ""78820B24672757A60BEF15252E93F3D0C4DEB5C3"";
      byte[] codeB = Encoding.Default.GetBytes(code);
      string info_hash_encoded = null;
      for (int i = 0; i < code.Length; i += 2)
      {
            string tmpCode = code[i].ToString() + code[i + 1].ToString();
            int j = Convert.ToInt32(tmpCode, 16);
            char s1 = (char)j;
            bool isSpecChar = false;
            if (s1.ToString() == ""."" || s1.ToString() == ""-"" || s1.ToString() == ""~"")
                  isSpecChar = true;
            if ((Char.IsLetter(s1) || Char.IsNumber(s1) || isSpecChar) && !Char.IsControl(s1) && j <= 127)
            {
                  info_hash_encoded += s1.ToString();
            }
            else
            {
                  info_hash_encoded += ""%"" + tmpCode.ToLower();
            }
      }
      return info_hash_encoded;
}

I use C# , you can read my blog for more detail
http://hello.xiaoyezi.xyz/urlencode-the-info_hash.html
","375","<java><urlencode><bittorrent><sha>","0","1","1","2014-12-04 02:55:08","","1","","-1","","2017-05-23 12:29:16","2013-12-13 15:19:14",""
"10044536","quercus and PHP hmac 256 implementation","I am trying to use hash_hmac in quercus (php emulation under java), but unfortunately it has not been implemented!
Fatal Error: hash_init: 'HmacSHA-256' is an unknown algorithm [hash_hmac] 

I have 2 options:
1) create a custom php function that will replace the hash_hmac. I found one here, but it's NOT compatible with sha 256:
http://www.php.net/manual/en/function.hash-hmac.php#93440
Are you aware of any other custom implementation?
2) let java decode the string and pass it to php. It's doable:
http://php-apps.appspot.com/hmac-sha-256-signature-for-amazon-product-api-requests.html
but It's the first time that I am dealing with php classes and the debugger doesn't accept this php code given in the link:
<?php

import phpgae.HmacSHA256;

$c = new HmacSHA256;

echo $c->compute( 'your base string' ,  'your key' );

?>

how am I supposed to implement it?
","I was searching for hours myself to find a solution to this.
Turns out it was reported as a bug and fixed in version 4.0.29.
See http://bugs.caucho.com/bug_view_advanced_page.php?bug_id=4833#bugnotes
Upgrading to a newer version will fix this.
","373","<php><facebook><hmac><sha>","2","0","1","2013-04-06 22:00:35","","0","","1197544","","2012-04-06 19:06:45","2012-04-06 13:58:31",""
"45378341","C++ implementation of SHA-512 not working","I need to implement a couple versions of SHA in C++, mostly from the ground up, for a summer camp. Here's the docs for the algorithm. 
I've gotten SHA-1, SHA-224, and SHA-256 working perfectly, but I haven't managed to get 512 or its derivatives right. I'm supposed to be getting ddaf35a193617aba cc417349ae204131 12e6fa4e89a97ea2 0a9eeee64b55d39a 2192992a274fc1a8 36ba3c23a3feebbd 454d4423643ce80e 2a9ac94fa54ca49f, but my program gives me 21fb47208172306 4570d403444f23d 3fcab6a24097aaf4 7920558b5eea0ae8 7cfc6ce26543e3a6 8ba9c07d1b89d02 1e27ad9d5487df13 2e4a745e0e4df60.
main.cpp:
#include ""main.h""
#include <iostream>
#include <iomanip> 
#include <sstream>
int main(int argc, const char * argv[]) {
    std::string msg = ""abc"";
    std::string hashedMsg = hash(msg);
    std::cout << ""Hash:"" << std::endl << hashedMsg;
    std::cin.get();
}
std::string hash(std::string msg)
{
    //Preprocessing 
    const unsigned char eighty = 0x80;
    unsigned long long msgLength = msg.length() * 8;
    unsigned long long msgBitSize = _byteswap_uint64(msgLength);
    unsigned long long k = 1024 - ((msgLength + 64 + 1) % 1024);
    unsigned long long finalSize = msgLength + 1 + k + 64;
    unsigned long long hashValues[] = {
        0x6a09e667f3bcc908, 0xbb67ae8584caa73b, 0x3c6ef372fe94f82b, 0xa54ff53a5f1d36f1,
        0x510e527fade682d1, 0x9b05688c2b3e6c1f, 0x1f83d9abfb41bd6b, 0x5be0cd19137e2179
    };
    std::vector<unsigned long long> words(finalSize / 64);
    std::memcpy(words.data(), msg.c_str(), msg.length());
    std::memcpy((unsigned char *)words.data() + msg.length(), &eighty, 1);
    std::memcpy((unsigned char *)words.data() + msg.length()+1+((k-7)/8), &msgBitSize, 8);
    unsigned char* byte = (unsigned char*)words.data();
    for (int i = 0; i < words.size() * 8; i++) {
        std::bitset<8> b(byte[i]);
        std::cout << b << "" "" << std::hex << std::setfill('0') << std::setw(2) << (int)byte[i] << std::endl;
    }
    // Processing
    unsigned long long workingValues[8];
    unsigned long long a;
    unsigned long long b;
    unsigned long long c;
    unsigned long long d;
    unsigned long long e;
    unsigned long long f;
    unsigned long long g;
    unsigned long long h;
    unsigned long long temp1;
    unsigned long long temp2;
    for (int chunk = 0; chunk < words.size(); chunk += 16) {
        std::vector<unsigned long long> schedule(80);
        for (int i = 0; i < 16; i++) {
            schedule[i] = _byteswap_uint64(words[chunk + i]);
        }
        for (int i = 16; i < 80; i++) {
            schedule[i] = (s1(schedule[i - 2]) + schedule[i - 7] + s0(schedule[i - 15]) + schedule[i - 16]) % (long long)(pow(2, 64));
        }
        for (int i = 0; i < 8; i++) {
            workingValues[i] = hashValues[i];
        }
        a = workingValues[0];
        b = workingValues[1];
        c = workingValues[2];
        d = workingValues[3];
        e = workingValues[4];
        f = workingValues[5];
        g = workingValues[6];
        h = workingValues[7];
        for (int t = 0; t < 80; t++) {
            temp1 = (h + S1(e) + ch(e, f, g) + sha::words[t] + schedule[t]) % (long long)(pow(2, 64));
            temp2 = (S0(a) + maj(a, b, c)) % (long long)(pow(2, 64));
            h = g;
            g = f;
            f = e;
            e = (d + temp1) % (long long)(pow(2, 64));
            d = c;
            c = b;
            b = a;
            a = (temp1 + temp2) % (long long)(pow(2, 64));
        }
        hashValues[0] = (hashValues[0] + a) % (long long)(pow(2, 64));
        hashValues[1] = (hashValues[1] + b) % (long long)(pow(2, 64));
        hashValues[2] = (hashValues[2] + c) % (long long)(pow(2, 64));
        hashValues[3] = (hashValues[3] + d) % (long long)(pow(2, 64));
        hashValues[4] = (hashValues[4] + e) % (long long)(pow(2, 64));
        hashValues[5] = (hashValues[5] + f) % (long long)(pow(2, 64));
        hashValues[6] = (hashValues[6] + g) % (long long)(pow(2, 64));
        hashValues[7] = (hashValues[7] + h) % (long long)(pow(2, 64));
    }
    // Return final message
    std::stringstream ss; 
    for (int i = 0; i < 8; i++) { 
        ss << std::hex << hashValues[i]; 
    } 
    return ss.str();
}

main.h:
#pragma once
#include<string>
#include<vector>
#include<bitset>
namespace sha {
    const unsigned long long words[] = {
        0x428a2f98d728ae22, 0x7137449123ef65cd, 0xb5c0fbcfec4d3b2f, 0xe9b5dba58189dbbc,
        0x3956c25bf348b538, 0x59f111f1b605d019, 0x923f82a4af194f9b, 0xab1c5ed5da6d8118,
        0xd807aa98a3030242, 0x12835b0145706fbe, 0x243185be4ee4b28c, 0x550c7dc3d5ffb4e2,
        0x72be5d74f27b896f, 0x80deb1fe3b1696b1, 0x9bdc06a725c71235, 0xc19bf174cf692694,
        0xe49b69c19ef14ad2, 0xefbe4786384f25e3, 0x0fc19dc68b8cd5b5, 0x240ca1cc77ac9c65,
        0x2de92c6f592b0275, 0x4a7484aa6ea6e483, 0x5cb0a9dcbd41fbd4, 0x76f988da831153b5,
        0x983e5152ee66dfab, 0xa831c66d2db43210, 0xb00327c898fb213f, 0xbf597fc7beef0ee4,
        0xc6e00bf33da88fc2, 0xd5a79147930aa725, 0x06ca6351e003826f, 0x142929670a0e6e70,
        0x27b70a8546d22ffc, 0x2e1b21385c26c926, 0x4d2c6dfc5ac42aed, 0x53380d139d95b3df,
        0x650a73548baf63de, 0x766a0abb3c77b2a8, 0x81c2c92e47edaee6, 0x92722c851482353b,
        0xa2bfe8a14cf10364, 0xa81a664bbc423001, 0xc24b8b70d0f89791, 0xc76c51a30654be30,
        0xd192e819d6ef5218, 0xd69906245565a910, 0xf40e35855771202a, 0x106aa07032bbd1b8,
        0x19a4c116b8d2d0c8, 0x1e376c085141ab53, 0x2748774cdf8eeb99, 0x34b0bcb5e19b48a8,
        0x391c0cb3c5c95a63, 0x4ed8aa4ae3418acb, 0x5b9cca4f7763e373, 0x682e6ff3d6b2b8a3,
        0x748f82ee5defb2fc, 0x78a5636f43172f60, 0x84c87814a1f0ab72, 0x8cc702081a6439ec,
        0x90befffa23631e28, 0xa4506cebde82bde9, 0xbef9a3f7b2c67915, 0xc67178f2e372532b,
        0xca273eceea26619c, 0xd186b8c721c0c207, 0xeada7dd6cde0eb1e, 0xf57d4f7fee6ed178,
        0x06f067aa72176fba, 0x0a637dc5a2c898a6, 0x113f9804bef90dae, 0x1b710b35131c471b,
        0x28db77f523047d84, 0x32caab7b40c72493, 0x3c9ebe0a15c9bebc, 0x431d67c49c100d4c,
        0x4cc5d4becb3e42b6, 0x597f299cfc657e2a, 0x5fcb6fab3ad6faec, 0x6c44198c4a475817
    };
}
std::string hash(std::string msg);
unsigned long long rotr(unsigned long long x, unsigned int n) {
    return (x >> n) | (x << (32 - n));
}
unsigned long long ch(unsigned long long e, unsigned long long f, unsigned long long g) {
    return (e & f) ^ ((~e) & g);
}
unsigned long long maj(unsigned long long a, unsigned long long b, unsigned long long c) {
    return (a & b) ^ (a & c) ^ (b & c);
}
unsigned long long s0(unsigned long long x) {
    return rotr(x, 1) ^ rotr(x, 8) ^ (x >> 7);
}
unsigned long long s1(unsigned long long x) {
    return rotr(x, 19) ^ rotr(x, 61) ^ (x >> 6);
}
unsigned long long S0(unsigned long long x) {
    return rotr(x, 28) ^ rotr(x, 34) ^ rotr(x, 39);
}
unsigned long long S1(unsigned long long x) {
    return rotr(x, 14) ^ rotr(x, 18) ^ rotr(x, 41);
}

If it helps, I'm using Visual Studio 2015. I've tried using the built-in 64-bit cl.exe compiler, and while it does give me a different hash, it's still not the target one. What am I doing wrong here? 
","There are two bugs in this implementation:

In rotr, you should have 64 - n instead of 32 - n
You should remove all % (long long)(pow(2, 64));. If you used uint64_t instead of unsigned long long, these weren't needed. And they cause bug here, because long long is usually 64-bit, and it cannot store the number 2^64. Using uint64_t ""automatically"" uses modulo 2^64.

And it is questionable to put all these function definitions and data into the header file. You should use inline for function definitions, at least. But you'd better move them into the .cpp.
","372","<c++><hash><sha><sha512>","1","1","1","2017-07-28 17:30:19","","4","","","","","2017-07-28 16:27:01",""
"29843175","Convert SHA256 algorithm from VBScript to PHP","I have the following SHA256 algorithm implementation in vbscript which i found it here and i am trying to convert it to php. With a little bit of googling and luck i found here the implementation in php. 
Here is the vbscript: 
(you can run it from windows cmd eg: test.vbs passwordtohash) 
Private m_lOnBits(30)
Private m_l2Power(30)
Private K(63)

Private Const BITS_TO_A_BYTE = 8
Private Const BYTES_TO_A_WORD = 4
Private Const BITS_TO_A_WORD = 32

m_lOnBits(0) = CLng(1)
m_lOnBits(1) = CLng(3)
m_lOnBits(2) = CLng(7)
m_lOnBits(3) = CLng(15)
m_lOnBits(4) = CLng(31)
m_lOnBits(5) = CLng(63)
m_lOnBits(6) = CLng(127)
m_lOnBits(7) = CLng(255)
m_lOnBits(8) = CLng(511)
m_lOnBits(9) = CLng(1023)
m_lOnBits(10) = CLng(2047)
m_lOnBits(11) = CLng(4095)
m_lOnBits(12) = CLng(8191)
m_lOnBits(13) = CLng(16383)
m_lOnBits(14) = CLng(32767)
m_lOnBits(15) = CLng(65535)
m_lOnBits(16) = CLng(131071)
m_lOnBits(17) = CLng(262143)
m_lOnBits(18) = CLng(524287)
m_lOnBits(19) = CLng(1048575)
m_lOnBits(20) = CLng(2097151)
m_lOnBits(21) = CLng(4194303)
m_lOnBits(22) = CLng(8388607)
m_lOnBits(23) = CLng(16777215)
m_lOnBits(24) = CLng(33554431)
m_lOnBits(25) = CLng(67108863)
m_lOnBits(26) = CLng(134217727)
m_lOnBits(27) = CLng(268435455)
m_lOnBits(28) = CLng(536870911)
m_lOnBits(29) = CLng(1073741823)
m_lOnBits(30) = CLng(2147483647)

m_l2Power(0) = CLng(1)
m_l2Power(1) = CLng(2)
m_l2Power(2) = CLng(4)
m_l2Power(3) = CLng(8)
m_l2Power(4) = CLng(16)
m_l2Power(5) = CLng(32)
m_l2Power(6) = CLng(64)
m_l2Power(7) = CLng(128)
m_l2Power(8) = CLng(256)
m_l2Power(9) = CLng(512)
m_l2Power(10) = CLng(1024)
m_l2Power(11) = CLng(2048)
m_l2Power(12) = CLng(4096)
m_l2Power(13) = CLng(8192)
m_l2Power(14) = CLng(16384)
m_l2Power(15) = CLng(32768)
m_l2Power(16) = CLng(65536)
m_l2Power(17) = CLng(131072)
m_l2Power(18) = CLng(262144)
m_l2Power(19) = CLng(524288)
m_l2Power(20) = CLng(1048576)
m_l2Power(21) = CLng(2097152)
m_l2Power(22) = CLng(4194304)
m_l2Power(23) = CLng(8388608)
m_l2Power(24) = CLng(16777216)
m_l2Power(25) = CLng(33554432)
m_l2Power(26) = CLng(67108864)
m_l2Power(27) = CLng(134217728)
m_l2Power(28) = CLng(268435456)
m_l2Power(29) = CLng(536870912)
m_l2Power(30) = CLng(1073741824)

K(0) = &H428A2F98
K(1) = &H71374491
K(2) = &HB5C0FBCF
K(3) = &HE9B5DBA5
K(4) = &H3956C25B
K(5) = &H59F111F1
K(6) = &H923F82A4
K(7) = &HAB1C5ED5
K(8) = &HD807AA98
K(9) = &H12835B01
K(10) = &H243185BE
K(11) = &H550C7DC3
K(12) = &H72BE5D74
K(13) = &H80DEB1FE
K(14) = &H9BDC06A7
K(15) = &HC19BF174
K(16) = &HE49B69C1
K(17) = &HEFBE4786
K(18) = &HFC19DC6
K(19) = &H240CA1CC
K(20) = &H2DE92C6F
K(21) = &H4A7484AA
K(22) = &H5CB0A9DC
K(23) = &H76F988DA
K(24) = &H983E5152
K(25) = &HA831C66D
K(26) = &HB00327C8
K(27) = &HBF597FC7
K(28) = &HC6E00BF3
K(29) = &HD5A79147
K(30) = &H6CA6351
K(31) = &H14292967
K(32) = &H27B70A85
K(33) = &H2E1B2138
K(34) = &H4D2C6DFC
K(35) = &H53380D13
K(36) = &H650A7354
K(37) = &H766A0ABB
K(38) = &H81C2C92E
K(39) = &H92722C85
K(40) = &HA2BFE8A1
K(41) = &HA81A664B
K(42) = &HC24B8B70
K(43) = &HC76C51A3
K(44) = &HD192E819
K(45) = &HD6990624
K(46) = &HF40E3585
K(47) = &H106AA070
K(48) = &H19A4C116
K(49) = &H1E376C08
K(50) = &H2748774C
K(51) = &H34B0BCB5
K(52) = &H391C0CB3
K(53) = &H4ED8AA4A
K(54) = &H5B9CCA4F
K(55) = &H682E6FF3
K(56) = &H748F82EE
K(57) = &H78A5636F
K(58) = &H84C87814
K(59) = &H8CC70208
K(60) = &H90BEFFFA
K(61) = &HA4506CEB
K(62) = &HBEF9A3F7
K(63) = &HC67178F2

Private Function LShift(lValue, iShiftBits)
    If iShiftBits = 0 Then
        LShift = lValue
        Exit Function
    ElseIf iShiftBits = 31 Then
        If lValue And 1 Then
            LShift = &H80000000
        Else
            LShift = 0
        End If
        Exit Function
    ElseIf iShiftBits < 0 Or iShiftBits > 31 Then
        Err.Raise 6
    End If

    If (lValue And m_l2Power(31 - iShiftBits)) Then
        LShift = ((lValue And m_lOnBits(31 - (iShiftBits + 1))) * m_l2Power(iShiftBits)) Or &H80000000
    Else
        LShift = ((lValue And m_lOnBits(31 - iShiftBits)) * m_l2Power(iShiftBits))
    End If
End Function

Private Function RShift(lValue, iShiftBits)
    If iShiftBits = 0 Then
        RShift = lValue
        Exit Function
    ElseIf iShiftBits = 31 Then
        If lValue And &H80000000 Then
            RShift = 1
        Else
            RShift = 0
        End If
        Exit Function
    ElseIf iShiftBits < 0 Or iShiftBits > 31 Then
        Err.Raise 6
    End If

    RShift = (lValue And &H7FFFFFFE) \ m_l2Power(iShiftBits)

    If (lValue And &H80000000) Then
        RShift = (RShift Or (&H40000000 \ m_l2Power(iShiftBits - 1)))
    End If
End Function

Private Function AddUnsigned(lX, lY)
    Dim lX4
    Dim lY4
    Dim lX8
    Dim lY8
    Dim lResult

    lX8 = lX And &H80000000
    lY8 = lY And &H80000000
    lX4 = lX And &H40000000
    lY4 = lY And &H40000000

    lResult = (lX And &H3FFFFFFF) + (lY And &H3FFFFFFF)

    If lX4 And lY4 Then
        lResult = lResult Xor &H80000000 Xor lX8 Xor lY8
    ElseIf lX4 Or lY4 Then
        If lResult And &H40000000 Then
            lResult = lResult Xor &HC0000000 Xor lX8 Xor lY8
        Else
            lResult = lResult Xor &H40000000 Xor lX8 Xor lY8
        End If
    Else
        lResult = lResult Xor lX8 Xor lY8
    End If

    AddUnsigned = lResult
End Function

Private Function Ch(x, y, z)
    Ch = ((x And y) Xor ((Not x) And z))
End Function

Private Function Maj(x, y, z)
    Maj = ((x And y) Xor (x And z) Xor (y And z))
End Function

Private Function S(x, n)
    S = (RShift(x, (n And m_lOnBits(4))) Or LShift(x, (32 - (n And m_lOnBits(4)))))
End Function

Private Function R(x, n)
    R = RShift(x, CInt(n And m_lOnBits(4)))
End Function

Private Function Sigma0(x)
    Sigma0 = (S(x, 2) Xor S(x, 13) Xor S(x, 22))
End Function

Private Function Sigma1(x)
    Sigma1 = (S(x, 6) Xor S(x, 11) Xor S(x, 25))
End Function

Private Function Gamma0(x)
    Gamma0 = (S(x, 7) Xor S(x, 18) Xor R(x, 3))
End Function

Private Function Gamma1(x)
    Gamma1 = (S(x, 17) Xor S(x, 19) Xor R(x, 10))
End Function

Private Function ConvertToWordArray(sMessage)
    Dim lMessageLength
    Dim lNumberOfWords
    Dim lWordArray()
    Dim lBytePosition
    Dim lByteCount
    Dim lWordCount
    Dim lByte

    Const MODULUS_BITS = 512
    Const CONGRUENT_BITS = 448

    lMessageLength = Len(sMessage)

    lNumberOfWords = (((lMessageLength + ((MODULUS_BITS - CONGRUENT_BITS) \ BITS_TO_A_BYTE)) \ (MODULUS_BITS \ BITS_TO_A_BYTE)) + 1) * (MODULUS_BITS \ BITS_TO_A_WORD)
    ReDim lWordArray(lNumberOfWords - 1)

    lBytePosition = 0
    lByteCount = 0
    Do Until lByteCount >= lMessageLength
        lWordCount = lByteCount \ BYTES_TO_A_WORD

        lBytePosition = (3 - (lByteCount Mod BYTES_TO_A_WORD)) * BITS_TO_A_BYTE

        lByte = AscB(Mid(sMessage, lByteCount + 1, 1))

        lWordArray(lWordCount) = lWordArray(lWordCount) Or LShift(lByte, lBytePosition)
        lByteCount = lByteCount + 1
    Loop

    lWordCount = lByteCount \ BYTES_TO_A_WORD
    lBytePosition = (3 - (lByteCount Mod BYTES_TO_A_WORD)) * BITS_TO_A_BYTE

    lWordArray(lWordCount) = lWordArray(lWordCount) Or LShift(&H80, lBytePosition)

    lWordArray(lNumberOfWords - 1) = LShift(lMessageLength, 3)
    lWordArray(lNumberOfWords - 2) = RShift(lMessageLength, 29)

    ConvertToWordArray = lWordArray
End Function

Public Function SHA256(sMessage)
    Dim HASH(7)
    Dim M
    Dim W(63)
    Dim a
    Dim b
    Dim c
    Dim d
    Dim e
    Dim f
    Dim g
    Dim h
    Dim i
    Dim j
    Dim T1
    Dim T2

    HASH(0) = &H6A09E667
    HASH(1) = &HBB67AE85
    HASH(2) = &H3C6EF372
    HASH(3) = &HA54FF53A
    HASH(4) = &H510E527F
    HASH(5) = &H9B05688C
    HASH(6) = &H1F83D9AB
    HASH(7) = &H5BE0CD19

    M = ConvertToWordArray(sMessage)

    For i = 0 To UBound(M) Step 16
        a = HASH(0)
        b = HASH(1)
        c = HASH(2)
        d = HASH(3)
        e = HASH(4)
        f = HASH(5)
        g = HASH(6)
        h = HASH(7)

        For j = 0 To 63
            If j < 16 Then
                W(j) = M(j + i)
            Else
                W(j) = AddUnsigned(AddUnsigned(AddUnsigned(Gamma1(W(j - 2)), W(j - 7)), Gamma0(W(j - 15))), W(j - 16))
            End If

            T1 = AddUnsigned(AddUnsigned(AddUnsigned(AddUnsigned(h, Sigma1(e)), Ch(e, f, g)), K(j)), W(j))
            T2 = AddUnsigned(Sigma0(a), Maj(a, b, c))

            h = g
            g = f
            f = e
            e = AddUnsigned(d, T1)
            d = c
            c = b
            b = a
            a = AddUnsigned(T1, T2)
        Next

        HASH(0) = AddUnsigned(a, HASH(0))
        HASH(1) = AddUnsigned(b, HASH(1))
        HASH(2) = AddUnsigned(c, HASH(2))
        HASH(3) = AddUnsigned(d, HASH(3))
        HASH(4) = AddUnsigned(e, HASH(4))
        HASH(5) = AddUnsigned(f, HASH(5))
        HASH(6) = AddUnsigned(g, HASH(6))
        HASH(7) = AddUnsigned(h, HASH(7))
    Next

    SHA256 = LCase(Right(""00000000"" & Hex(HASH(0)), 8) & Right(""00000000"" & Hex(HASH(1)), 8) & Right(""00000000"" & Hex(HASH(2)), 8) & Right(""00000000"" & Hex(HASH(3)), 8) & Right(""00000000"" & Hex(HASH(4)), 8) & Right(""00000000"" & Hex(HASH(5)), 8) & Right(""00000000"" & Hex(HASH(6)), 8) & Right(""00000000"" & Hex(HASH(7)), 8))
End Function

Set args = Wscript.Arguments

For Each arg In args
  sDigest = SHA256(arg)
  Wscript.Echo ""#### ""&sDigest
Next

Here is the phpSha.php file:
<?php
class auth_sha256
{
    /**
      * On Bits for sha256 mapping
      *
      * @access    private
      * @var        array
      */
    private $m_lOnBits    = array(1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,32767,65535,131071,262143,524287,1048575,2097151,4194303,8388607,16777215,33554431,67108863,134217727,268435455,536870911,1073741823,2147483647);

    /**
      * 2nd power sha256 mapping
      *
      * @access    private
      * @var        array
      */
    private $m_l2Power    = array(1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768,65536,131072,262144,524288,1048576,2097152,4194304,8388608,16777216,33554432,67108864,134217728,268435456,536870912,1073741824);

    /**
      * Hex mapping sha256 mapping
      *
      * @access    private
      * @var        array
      */
    private $K            = array(0x428A2F98,0x71374491,0xB5C0FBCF,0xE9B5DBA5,0x3956C25B,0x59F111F1,0x923F82A4,0xAB1C5ED5,0xD807AA98,0x12835B01,0x243185BE,0x550C7DC3,0x72BE5D74,0x80DEB1FE,0x9BDC06A7,0xC19BF174,0xE49B69C1,0xEFBE4786,0xFC19DC6,0x240CA1CC,0x2DE92C6F,0x4A7484AA,0x5CB0A9DC,0x76F988DA,0x983E5152,0xA831C66D,0xB00327C8,0xBF597FC7,0xC6E00BF3,0xD5A79147,0x6CA6351,0x14292967,0x27B70A85,0x2E1B2138,0x4D2C6DFC,0x53380D13,0x650A7354,0x766A0ABB,0x81C2C92E,0x92722C85,0xA2BFE8A1,0xA81A664B,0xC24B8B70,0xC76C51A3,0xD192E819,0xD6990624,0xF40E3585,0x106AA070,0x19A4C116,0x1E376C08,0x2748774C,0x34B0BCB5,0x391C0CB3,0x4ED8AA4A,0x5B9CCA4F,0x682E6FF3,0x748F82EE,0x78A5636F,0x84C87814,0x8CC70208,0x90BEFFFA,0xA4506CEB,0xBEF9A3F7,0xC67178F2);

    /**
      * Perform SHA256 encoding
      *
      * @access    public
      * @param    string        String to encode
      * @return    string        Encoded string
      */
    public function SHA256($sMessage)
    {
        $HASH    = array( 0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A, 0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19);
        $M        = $this->ConvertToWordArray( $sMessage );

        for( $i = 0, $ij = count($M); $i < $ij; $i+=16 )
        {
            $a = $HASH[0];
            $b = $HASH[1];
            $c = $HASH[2];
            $d = $HASH[3];
            $e = $HASH[4];
            $f = $HASH[5];
            $g = $HASH[6];
            $h = $HASH[7];

            for( $j = 0; $j<63; $j++ )
            {
                if($j < 16) 
                {
                    $W[$j] = $M[$j + $i];
                }
                else
                {
                    $W[$j] = $this->AddUnsigned($this->AddUnsigned($this->AddUnsigned($this->Gamma1($W[$j - 2]), $W[$j - 7]), $this->Gamma0($W[$j - 15])), $W[$j - 16]);
                }

                $T1 = $this->AddUnsigned($this->AddUnsigned($this->AddUnsigned($this->AddUnsigned($h, $this->Sigma1($e)), $this->Ch($e, $f, $g)), $this->K[$j]), $W[$j]);
                $T2 = $this->AddUnsigned($this->Sigma0($a), $this->Maj($a, $b, $c));

                $h = $g;
                $g = $f;
                $f = $e;
                $e = $this->AddUnsigned($d, $T1);
                $d = $c;
                $c = $b;
                $b = $a;
                $a = $this->AddUnsigned($T1, $T2);
            }

            $HASH[0] = $this->AddUnsigned($a, $HASH[0]);
            $HASH[1] = $this->AddUnsigned($b, $HASH[1]);
            $HASH[2] = $this->AddUnsigned($c, $HASH[2]);
            $HASH[3] = $this->AddUnsigned($d, $HASH[3]);
            $HASH[4] = $this->AddUnsigned($e, $HASH[4]);
            $HASH[5] = $this->AddUnsigned($f, $HASH[5]);
            $HASH[6] = $this->AddUnsigned($g, $HASH[6]);
            $HASH[7] = $this->AddUnsigned($h, $HASH[7]);
        }

        for ($i=0; $i < 8; $i++)
        {
            $HASH[$i] = str_repeat(""0"",8-strlen(dechex($HASH[$i]))) . strtolower(dechex($HASH[$i]));
        }

        return $HASH[0].$HASH[1].$HASH[2].$HASH[3].$HASH[4].$HASH[5].$HASH[6].$HASH[7];
    }

    /**
      * Left shift a value x bits
      *
      * @access    private
      * @param    string        String to shift
      * @param    integer        Number of bits to shift
      * @return    string        Shifted string
      */
    private function LShift($lValue, $iShiftBits) 
    {
        if ($iShiftBits == 0) 
        {
            return $lValue;
        }
        elseif ($iShiftBits == 31) 
        {
            if ($lValue & 1) 
            {
                return 0x80000000;
            }
            else
            {
                return 0;
            }
        }
        elseif ($iShiftBits < 0 Or $iShiftBits > 31) 
        {
            exit();
        }

        if ($lValue & $this->m_l2Power[31 - $iShiftBits]) 
        {
            return (($lValue & $this->m_lOnBits[31 - ($iShiftBits + 1)]) * $this->m_l2Power[$iShiftBits]) | 0x80000000;
        }
        else 
        {
            return (($lValue & $this->m_lOnBits[31 - $iShiftBits]) * $this->m_l2Power[$iShiftBits]);
        }
    }

    /**
      * Right shift a value x bits
      *
      * @access    private
      * @param    string        String to shift
      * @param    integer        Number of bits to shift
      * @return    string        Shifted string
      */
    private function RShift($lValue, $iShiftBits)
    {
        if ($iShiftBits == 0) 
        {
            return $lValue;
        }
        elseif ($iShiftBits == 31) 
        {
            if ($lValue & 0x80000000) 
            {
                $RShift = 1;
            }
            else 
            {
                $RShift = 0;
            }
        }
        elseif ($iShiftBits < 0 Or $iShiftBits > 31) 
        {
            exit();
        }

        $RShift = floor(($lValue & 0x7FFFFFFE) / $this->m_l2Power[$iShiftBits]);

        if ($lValue & 0x80000000) 
        {
            $RShift = ($RShift | floor(0x40000000 / $this->m_l2Power[$iShiftBits - 1]));
        }

        return $RShift;
    }

    /**
      * Add unsigned
      *
      * @access    private
      * @param    integer        Number
      * @param    integer        Number
      * @return    string        Added unsigned integer
      */
    private function AddUnsigned($lX, $lY)
    {
        $lX8 = $lX & 0x80000000;
        $lY8 = $lY & 0x80000000;
        $lX4 = $lX & 0x40000000;
        $lY4 = $lY & 0x40000000;

        $lResult = ($lX & 0x3FFFFFFF) + ($lY & 0x3FFFFFFF);

        if ($lX4 & $lY4) 
         {
            $lResult = $lResult ^ 0x80000000 ^ $lX8 ^ $lY8;
        }
        elseif ($lX4 | $lY4) 
        {
            if ($lResult & 0x40000000) 
            {
                $lResult = $lResult ^ 0xC0000000 ^ $lX8 ^ $lY8;
            }
            else 
            {
                $lResult = $lResult ^ 0x40000000 ^ $lX8 ^ $lY8;
            }
        }
        else 
        {
            $lResult = $lResult ^ $lX8 ^ $lY8;
        }

        return $lResult;
    }

    /**
      * Ch
      *
      * @access    private
      * @param    integer        $x
      * @param    integer        $y
      * @param    integer        $z
      * @return    mixed        No idea...
      */
    private function Ch($x, $y, $z)
    {
        return (($x & $y) ^ ((~ $x) & $z));
    }

    /**
      * Maj
      *
      * @access    private
      * @param    integer        $x
      * @param    integer        $y
      * @param    integer        $z
      * @return    mixed        No idea...
      */
    private function Maj($x, $y, $z)
    {
        return (($x & $y) ^ ($x & $z) ^ ($y & $z));
    }

    /**
      * S
      *
      * @access    private
      * @param    integer        $x
      * @param    integer        $n
      * @return    mixed        No idea...
      */
    private function S($x, $n)
    {
        return ($this->RShift($x , ($n & $this->m_lOnBits[4])) | $this->LShift($x , (32 - ($n & $this->m_lOnBits[4]))));
    }

    /**
      * R
      *
      * @access    private
      * @param    integer        $x
      * @param    integer        $n
      * @return    mixed        No idea...
      */
    private function R($x, $n)
    {
        return $this->RShift($x , ($n & $this->m_lOnBits[4]));
    }

    /**
      * Sigma0
      *
      * @access    private
      * @param    integer        $x
      * @return    mixed        No idea...
      */
    private function Sigma0($x)
    {
        return ($this->S($x, 2) ^ $this->S($x, 13) ^ $this->S($x, 22));
    }

    /**
      * Sigma1
      *
      * @access    private
      * @param    integer        $x
      * @return    mixed        No idea...
      */
    private function Sigma1($x)
    {
        return ($this->S($x, 6) ^ $this->S($x, 11) ^ $this->S($x, 25));
    }

    /**
      * Gamma0
      *
      * @access    private
      * @param    integer        $x
      * @return    mixed        No idea...
      */
    private function Gamma0($x)
    {
        return ($this->S($x, 7) ^ $this->S($x, 18) ^ $this->R($x, 3));
    }

    /**
      * Gamma1
      *
      * @access    private
      * @param    integer        $x
      * @return    mixed        No idea...
      */
    private function Gamma1($x)
    {
        return ($this->S($x, 17) ^ $this->S($x, 19) ^ $this->R($x, 10));
    }

    /**
      * Convert to a word array
      *
      * @access    private
      * @param    string        Word to convert
      * @return    array        Word array
      */
    private function ConvertToWordArray($sMessage)
    {
        $BITS_TO_A_BYTE = 8;
        $BYTES_TO_A_WORD = 4;
        $BITS_TO_A_WORD = 32;
        $MODULUS_BITS = 512;
        $CONGRUENT_BITS = 448;

        $lMessageLength = strlen($sMessage);

        $lNumberOfWords = (floor(($lMessageLength + floor(($MODULUS_BITS - $CONGRUENT_BITS) / $BITS_TO_A_BYTE)) / floor($MODULUS_BITS / $BITS_TO_A_BYTE)) + 1) * floor($MODULUS_BITS / $BITS_TO_A_WORD);
        for($i = 0; $i < $lNumberOfWords; $i++)
        {
            $lWordArray[$i]="""";
        }

        $lBytePosition = 0;
        $lByteCount = 0;
        do
        {
            $lWordCount = floor($lByteCount / $BYTES_TO_A_WORD);

            $lBytePosition = (3 - ($lByteCount % $BYTES_TO_A_WORD)) * $BITS_TO_A_BYTE;

            $lByte = ord(substr($sMessage, $lByteCount, 1));

            $lWordArray[$lWordCount] = $lWordArray[$lWordCount] | $this->LShift($lByte , $lBytePosition);
            $lByteCount++;
        }
        while ($lByteCount < $lMessageLength);

        $lWordCount = floor($lByteCount / $BYTES_TO_A_WORD);
        $lBytePosition = (3 - ($lByteCount % $BYTES_TO_A_WORD)) * $BITS_TO_A_BYTE;

        $lWordArray[$lWordCount] = $lWordArray[$lWordCount] | $this->LShift(0x80 , $lBytePosition);

        $lWordArray[$lNumberOfWords - 1] = $this->LShift($lMessageLength , 3);
        $lWordArray[$lNumberOfWords - 2] = $this->RShift($lMessageLength , 29);

        return $lWordArray;
    }
} 

you can run it with the test.php file:
<?php 
     require_once ( 'phpSha.php');

     $sha = new auth_sha256();

     $password  = $sha->SHA256('hello');

     echo $password;

?>

When i run the vbscript with password hello the sha256 hash is the 2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824
and the result for the string hello with php sha256 implementation is: 0e52daf0a5e0f63d5cd8e0d63b667960d5b02c51ee85c243572ea4b636ea90c4
Can somebody help me to figure out what is wrong and the hashes don't match?
","Why don't you just use the PHP hash function?
echo hash('sha256','hello');

","369","<php><vbscript><sha><sha256><digest>","1","0","1","2015-04-24 10:10:58","","0","","","","","2015-04-24 09:06:01",""
"35650220","Calculate hash from huge stream","I have to calculate a hash from various streams (StringIO, File, chunked http responses...), and the sources are pretty big (around 100MB - 1GB). For example, I have the following code
require 'digest'

sha = Digest::SHA256.new
stream = StringIO.new(""test\nfoo\nbar\nhello world"")
# this could also be a File.open('my_file.txt')
# or a chunked http response

while content = stream.read(2)
  sha.update content
end

puts sha.to_s

This works so far, but I was wondering how the sha.update method works. Does it store a copy from the overall String in its instance, so that the whole content is hold in memory?
This could lead to some serious memory issues, when loading 1GB of data into RAM (and doing this on multiple processes on the same machine)
","","368","<ruby><sha>","3","","0","2016-02-26 11:21:59","","5","","125816","","2016-02-26 11:21:59","2016-02-26 11:12:11",""
"26802299","Convert simultaneously to a SHA512 hash","I have this app that generate ramdom strings since alphanumeric&punctuation characters per click. this is my view:
import string, random
from hashlib import sha512

def get_random_string(size):    
    chars = string.ascii_letters + string.digits + string.punctuation
    return ''.join(random.choice(chars) for _ in range(size))

def draegg_view(request):
    size = 40
    if request.method == 'POST':
        form = genSysForm(initial={'Key': get_random_string(size)})
    else:
        form = get_random_string(size)
    return render_to_response('synopticup/monodra.html', {'form': form}, context_instance=RequestContext(request))

My app works perfectly but I want to make a simultaneous SHA512 hash conversion of each random string generated of my app. I wanna see the two results (a field with the random string and other with it respective hash. I was trying in many ways but i can't do it.
I sincerely thank you for your help in advance
What should I change on my view for achieve this objective?

","import string, random
from hashlib import sha512

def get_random_string(size):    
    chars = string.ascii_letters + string.digits + string.punctuation
    return ''.join(random.choice(chars) for _ in range(size))

def draegg_view(request):
    size = 40
    if request.method == 'POST':
        text = get_random_string(size)
        hash = sha512(text).hexdigest()
        form = genSysForm(initial={'Key':text, 'Hash': hash })
    else:
        form = genSysForm()
    return render_to_response('synopticup/monodra.html', {'form': form}, context_instance=RequestContext(request))

Assuming the screenshot is a currently working form and you only need to fill in the values.
","367","<python><django><hash><django-views><sha>","1","1","1","2014-11-07 13:36:19","26802507","0","","4122339","","2014-11-07 13:29:24","2014-11-07 13:24:24",""
"42978771","HMAC SHA 256 decode/encode issues","Hey all I am trying to figure out why my HAC-SHA-256 encryption and decryption is not matching up from my Arduino code to my .net code:
C# code:
Dim message As String = ""Hi There""
Dim expectedHex As String = """"

TextBox1.Text = (Convert.ToString(""Ref : "") & expectedHex)

'Test out the HMAC hash method
Dim key As String = ""61574d6b157f757d02457573556645750e0341481b127a07476303136c005145436c7b46651c6e4f4f040e1569464a794e534309097258550c17616075060950""
Dim hashHMACHex__1 As String = HashHMACHex(key, message)

TextBox2.Text = (Convert.ToString(""HMAC: "") & hashHMACHex__1)

' Test out the SHA hash method
Dim innerKey As String = ""61574d6b157f757d02457573556645750e0341481b127a07476303136c005145436c7b46651c6e4f4f040e1569464a794e534309097258550c17616075060950""
Dim outerKey As String = ""0b3d27017f151f17682f1f193f0c2f1f64692b227178106d2d096979066a3b2f2906112c0f760425256e647f032c2013243929636318323f667d0b0a1f6c633a""
Dim hashSHAHex__2 As String = HashSHAHex(innerKey, outerKey, message)

TextBox3.Text=(Convert.ToString(""SHA : "") & hashSHAHex__2)

Arduino code:
char *myData = ""61574d6b157f757d02457573556645750e0341481b127a07476303136c005145436c7b46651c6e4f4f040e1569464a794e534309097258550c17616075060950#(128)"";

void printHash(uint8_t* hash) {
  int i;
  for (i=0; i<32; i++) {
    Serial.print(""0123456789abcdef""[hash[i]>>4]);
    Serial.print(""0123456789abcdef""[hash[i]&0xf]);
  }
  Serial.println();
}

uint8_t* hash;
  uint32_t a;
  unsigned long ms;
  Serial.println(""Test: RFC4231 4.2"");
  Serial.println("""");
  Serial.print(""Result:"");
  ms = micros();
  Sha256.initHmac((uint8_t *)myData,128);
  Sha256.print(""Hi There"");
  printHash(Sha256.resultHmac());
  Serial.print("" Hash took : "");
  Serial.print((micros() - ms));
  Serial.println("" micros"");
  Serial.println();

The output from the .net program is this:

HMAC: 2d484b68dae3866fbcbf182071c3bf5e86f40ab6c2f3bc72d69fe0d132bf771e
SHA : 5929bc8b6968e763c7f23090f7d6194c4f1377bd8f6e4b781a5ecdb8e8f91f8f

And the Arduino output:

Result:9a9f6119b41604441db0a75bad6c4e1653a4d00781d4b177e99fe850ad543051

I'm not sure what innerKey and outterKey is in the .net program. That may be the cause of me not getting the correct values?
Attached is the full code for both the .net program and the arduino sketch.
","","367","<vb.net><arduino><sha><arduino-ide><hmacsha1>","1","","0","2017-03-23 14:48:27","","6","","277480","","2017-03-23 14:48:27","2017-03-23 14:20:30",""
"38925962","Import / use SHA1 passwords on wordpress","I've just built a new Wordpress website and I'm trying to import my members from a previous website to the new one. The import was successful, except now all logins fail. My old website used SHA1 hash to encrypt passwords, whereas Wordpress uses MD5. Is it possible to convert all my SHA1 passwords to MD5 and keep the same passwords?
When the website goes live I want all my previous members to be able to login with the same passwords as before (seamless as possible).
","You can't convert sha1 pass to md5. Moreover wordpress use a salt to create it's hash.
You have 2 solutions:
The easy one: send a mailing to all users asking them for changing their password
The hard one: change wordpress auth mecanism.
","364","<wordpress><md5><sha><password-encryption>","1","1","1","2019-10-17 06:24:29","38926047","1","","5623385","","2016-08-13 00:10:57","2016-08-12 20:25:56",""
"30905180","Google Web Services HMAC-SHA1 algorithm in JavaScript","I am trying to get a HMAC-SHA1 encryption going using JavaScript so I can use it in my Google Web Services For Work GET requests. I've tried several libraries and solutions, such as the following example: 
Sign Key HMAC SHA1 with Javascript
and this other one:
https://gist.github.com/ncerminara/11257943#file-base64-js
as well as CryptoJS, but all of them give me different results, which none of them work. I was wondering if someone got this to work. I am aware of the python example posted here https://developers.google.com/maps/documentation/business/webservices/auth, which does work but unfortunately I need to achieve the same functionality in JavaScript to upload it to Cloud Code in Parse. 
I would greatly appreciate any advice regarding this matter.
Thank you for your help in advance!
Cheers!
","","363","<javascript><google-maps><sha><hmac><hmacsha1>","1","","0","2015-06-18 01:43:51","","1","","-1","","2017-05-23 11:43:46","2015-06-18 01:43:51",""
"31488803","libgit2sharp what is correct sha to supply to GitHub API merge pull-request?","GitHub API requires merge pull-request to be submitted as 
PUT /repos/:owner/:repo/pulls/:number/merge

with request body json
{
  ""commit_message"": ""blah"",
  ""sha"": ""{SHA that pull request head must match to allow merge}"",
}

Following a commit, push, create PR, what libgit2sharp property supplies the correct sha ?
For the current branch, it appears Branch.Tip.Sha is the correct value, but I'm receiving response error : 

{   ""message"": ""Head branch was modified. Review and try the merge
  again."",   ""documentation_url"":
  ""https://developer.github.com/v3/pulls/#merge-a-pull-request-merge-button""
  }

","Two different commits and shas come into play when it comes to Pull Request.

The tip of your branch (the very last commit you've pushed on your branch)

Syntax: GET /repos/:owner/:repo/git/refs/:ref (where :ref should be of the pull/{number}/head format)
Example: https://api.github.com/repos/libgit2/libgit2sharp/git/refs/pull/1123/head

The virtual merge commit that GitHub dynamically creates behind the scene to determine mergeability and allow CI servers to run your build/tests as if your branch was already merged (and thus, detect in advance any potential issue)

Syntax: GET /repos/:owner/:repo/git/refs/:ref (where :ref should be of the pull/{number}/merge format)
Example: https://api.github.com/repos/libgit2/libgit2sharp/git/refs/pull/1123/merge


When leveraging the GitHub API to merge an opened Pull Request, the optional sha property from the json payload is expected to match the sha of the branch tip as currently known by GitHub.
Provided your local repository is in sync with what GitHub knows about your repository, this should definitely be matching what repo.Branches[""your_topic_branch""].Tip.Sha returns.
Note: In order to ensure that the GitHub known head of the PR matches your local branch tip, using LibGit2Sharp, you can retrieve GitHub PR merge/head pointed at commits, by directly fetching a special reference namespace. The following code demonstrates this
var remoteName = ""origin""; // or whatever your remote is named
var remote = repo.Network.Remotes[remoteName];
var prNumber = ""1123""; // or whatever your pr number is

// Build the refspec
string refSpec = string.Format(""+refs/pull/{1}/*:refs/remotes/{0}/pull/{1}/*"", 
                        remoteName, prNumber);

// Perform the actual fetch
repo.Network.Fetch(remote, new[] { refSpec });

Console.WriteLine(repo.Branches[string.Format(""pull/{0}/merge"", prNumber)].Tip.Sha);

","362","<git><git-merge><github-api><sha><libgit2sharp>","2","3","1","2015-07-19 13:07:15","31490829","0","0","","","","2015-07-18 07:14:51",""
"50273289","PKCS11Interop Hash with SHA256 and Sign with RSA in two steps","I have two applications, one that calculates the SHA-256 hash of a document and the other which makes the RSA signing.
Trying different things i came to the conclusion that making CKM_SHA256 and then making CKM_RSA_PKCS give a different result than just making the CKM_SHA256_RSA_PKCS of the document itself.
So my question is, what is the difference between this two implementations? 
What information is added to the hash in CKM_SHA256_RSA_PKCS mechanism that turns in a complete different signature?
","Mechanims CKM_SHA256_RSA_PKCS does following things:

Computes SHA256 hash of the data just like CKM_SHA256 does
Constructs DER encoded DigestInfo structure defined in RFC 8017
Signs DigestInfo structure with private key just like CKM_RSA_PKCS does

Several approaches are possible when it comes to construction of DER encoded DigestInfo structure:

In Pkcs11Admin application I did use BouncyCastle library:

public static byte[] CreateDigestInfo(byte[] hash, string hashOid)
{
    DerObjectIdentifier derObjectIdentifier = new DerObjectIdentifier(hashOid);
    AlgorithmIdentifier algorithmIdentifier = new AlgorithmIdentifier(derObjectIdentifier, null);
    DigestInfo digestInfo = new DigestInfo(algorithmIdentifier, hash);
    return digestInfo.GetDerEncoded();
}


In Pkcs11Interop.X509Store library I did use precomputed arrays:

/// <summary>
/// Creates DER encoded PKCS#1 DigestInfo structure defined in RFC 8017
/// </summary>
/// <param name=""hash"">Hash value</param>
/// <param name=""hashAlgorithm"">Hash algorithm</param>
/// <returns>DER encoded PKCS#1 DigestInfo structure or null</returns>
private static byte[] CreatePkcs1DigestInfo(byte[] hash, HashAlgorithmName hashAlgorithm)
{
    if (hash == null || hash.Length == 0)
        throw new ArgumentNullException(nameof(hash));

    byte[] pkcs1DigestInfo = null;

    if (hashAlgorithm == HashAlgorithmName.MD5)
    {
        if (hash.Length != 16)
            throw new ArgumentException(""Invalid lenght of hash value"");

        pkcs1DigestInfo = new byte[] { 0x30, 0x20, 0x30, 0x0C, 0x06, 0x08, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x02, 0x05, 0x05, 0x00, 0x04, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
        Array.Copy(hash, 0, pkcs1DigestInfo, pkcs1DigestInfo.Length - hash.Length, hash.Length);
    }
    else if (hashAlgorithm == HashAlgorithmName.SHA1)
    {
        if (hash.Length != 20)
            throw new ArgumentException(""Invalid lenght of hash value"");

        pkcs1DigestInfo = new byte[] { 0x30, 0x21, 0x30, 0x09, 0x06, 0x05, 0x2B, 0x0E, 0x03, 0x02, 0x1A, 0x05, 0x00, 0x04, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
        Array.Copy(hash, 0, pkcs1DigestInfo, pkcs1DigestInfo.Length - hash.Length, hash.Length);
    }
    else if (hashAlgorithm == HashAlgorithmName.SHA256)
    {
        if (hash.Length != 32)
            throw new ArgumentException(""Invalid lenght of hash value"");

        pkcs1DigestInfo = new byte[] { 0x30, 0x31, 0x30, 0x0D, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x01, 0x05, 0x00, 0x04, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
        Array.Copy(hash, 0, pkcs1DigestInfo, pkcs1DigestInfo.Length - hash.Length, hash.Length);
    }
    else if (hashAlgorithm == HashAlgorithmName.SHA384)
    {
        if (hash.Length != 48)
            throw new ArgumentException(""Invalid lenght of hash value"");

        pkcs1DigestInfo = new byte[] { 0x30, 0x41, 0x30, 0x0D, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x02, 0x05, 0x00, 0x04, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
        Array.Copy(hash, 0, pkcs1DigestInfo, pkcs1DigestInfo.Length - hash.Length, hash.Length);
    }
    else if (hashAlgorithm == HashAlgorithmName.SHA512)
    {
        if (hash.Length != 64)
            throw new ArgumentException(""Invalid lenght of hash value"");

        pkcs1DigestInfo = new byte[] { 0x30, 0x51, 0x30, 0x0D, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x03, 0x05, 0x00, 0x04, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
        Array.Copy(hash, 0, pkcs1DigestInfo, pkcs1DigestInfo.Length - hash.Length, hash.Length);
    }

    return pkcs1DigestInfo;
}

","362","<rsa><sha><pkcs#11><pkcs11interop>","2","3","1","2018-05-11 21:17:01","50300381","0","","","","","2018-05-10 12:44:25",""
"45957488","How can I decrypt a SHA256 Hash string when I know the answer is a random number from a known nuimber range?","A random number is selected from a range of 1 to 50 (for example). 
This number then encrypted with a salt key to a SHA256 Hash string.
What I wanted to know is if there is any way I can decrypt this Hash String to get the encrypted random number behind it? 
Thank you in advance.
","","361","<encryption><hash><sha256><salt><sha>","0","","0","2017-08-30 10:04:42","","9","","","","","2017-08-30 10:04:42",""
"10923985","Proper way to use salt along with hashing","During a discussion with a couple of other people, I read the argument that

sha512(salt + username + password) is bad, 
sha512(username + password) is worse and 
sha512(password) is plain idiotic.

While I partly agree, what's really the best security? Is there anything safer than using an user unique salt along with a slow hashing method such as SHA512? What's the real way to go? Argue on!
Please edit the title if you find it bad.
","When discussing the recent LinkedIn leak, somebody brought up this link about bcrypt. I think I agree... we should be using functions that increase the calculation time exponentially according to a factor. That's the only way we can beat people trying to use clusters or GPUs to do their hashing calculations.
","357","<security><hash><salt><sha>","0","0","3","2012-06-08 19:35:47","10955056","3","","","","","2012-06-07 00:03:17",""
"10923985","Proper way to use salt along with hashing","During a discussion with a couple of other people, I read the argument that

sha512(salt + username + password) is bad, 
sha512(username + password) is worse and 
sha512(password) is plain idiotic.

While I partly agree, what's really the best security? Is there anything safer than using an user unique salt along with a slow hashing method such as SHA512? What's the real way to go? Argue on!
Please edit the title if you find it bad.
","My understanding is, that repeated hashing (for computational cost) & a good random salt, should defeat all but seriously determined cryptographic attackers.
Hashing passwords in the database, and over the network, avoids plaintext being recoverable (and usable elsewhere) by a snooper or attacker who does get in.
Basically this is more or less the scheme, used by the Wordpress authentication:
var SALT = 64 random characters;
var NUM_HASHES = about 1000;    // can be randomized
var hashedResult = inputPassword;
for (int i = 0; i < NUM_HASHES; i++) {
  var dataToHash = SALT + hashedResult;
  hashedResult = secureHash( dataToHash);
}
//... can now store or send.

This use of a random salt, and looping hash, defeats any rainbow tables or single-level 'hash collision', 'hash weakness' attack. Only brute-forcing the complete keyspace, each key through 1000 iterations of the hash function, is believed to defeat it :)
","357","<security><hash><salt><sha>","0","0","3","2012-06-08 19:35:47","10955056","3","","","","","2012-06-07 00:03:17",""
"10923985","Proper way to use salt along with hashing","During a discussion with a couple of other people, I read the argument that

sha512(salt + username + password) is bad, 
sha512(username + password) is worse and 
sha512(password) is plain idiotic.

While I partly agree, what's really the best security? Is there anything safer than using an user unique salt along with a slow hashing method such as SHA512? What's the real way to go? Argue on!
Please edit the title if you find it bad.
","
Generate random salt for each password.
Avoid MD5, and even SHA-1.
Use a slow hashing algorithm; SHA-256 seems to be a good choice for now.
Password storage is one of those rare occasions where there is some benefit to having your own (overall) algorithm.  Consider an attacker with a rainbow table; if your password storage algorithm varies from the one used to generate their rainbow table enough to change the generated values, that rainbow table is of no use.  The attacker would need to know your algorithm, then generate a new table.  If you choose a slow hashing algorithm, generating a new table is very expensive.

By ""overall"" algorithm, I mean the complete definition of how you transform the plaintext password into the stored value.  E.g. SHA-256(""mypassword"" + ""[["" + 40-char-random-alphanum-salt + ""]]"").  If you change that to use angle brackets instead of square brackets, you've changed the rainbow table necessary to exploit your stored passwords.  Note that I'm not advocating writing your own hash algorithm; you should still choose a cryptographically secure hash algorithm.
See this article by the author of MD5.  He makes the two main points I repeated above: 1) if you use a fast hashing algorithm, you're missing the point, and 2) reuse of overall algorithms allows re-use of rainbow tables.
","357","<security><hash><salt><sha>","0","0","3","2012-06-08 19:35:47","10955056","3","","","","","2012-06-07 00:03:17",""
"44827484","LotusScript How get MD5 or SHA-1 from NotesStream","I use Lotus Domino 
I need to get a checksum for class NotesStream how to do it on LotusScript without using Java?
It can by MD5 or SHA-1
Can eat what that LotusScript function?
If it does not work out, then you have to use JavaSession.
NotesStream->Base64->JavaSession->SHA-1

","Here's an implementation of SHA-1 in LotusScript: NCT1_SHA1_PROVIDER_CLASS.LSS. And there's also MD5 implementation for Lotus Script
It took about 2 minutes to find these in Google.
","357","<md5><lotusscript><sha><lotus>","0","0","1","2017-06-29 19:22:10","","0","","","","","2017-06-29 14:07:59",""
"10802746","char[] -> String -> bytes[] -> String... and I'm lost","What I'm trying to do is to convert a password typed into a jPasswordField into SHA-256 hash. I was wandering around and found how to do this if I've got password saved as a string but the field I'm using is returning char[] so I ended up just guessing what to do... at first I've got different results even if the password was the same but now I believe I'm closer as it's a constant; but it's still not it as the output of
echo -n 'abc' | sha256sum

is

ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad

while the output of my action (for the same input) is

86900f25bd2ee285bc6c22800cfb8f2c3411e45c9f53b3ba5a8017af9d6b6b05

My action looks like this:
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
        NoSuchAlgorithmException noSuchAlgorithmException = null;
        MessageDigest messageDigest = null;
        try {
            messageDigest = MessageDigest.getInstance(""SHA-256"");

        } catch (NoSuchAlgorithmException ex) {
            noSuchAlgorithmException = ex;
        }
        if (noSuchAlgorithmException != null) {
            System.out.println(noSuchAlgorithmException.toString());
        }
        else {
            UnsupportedEncodingException unsupportedEncodingException = null;
            byte[] hash = null;
            char[] password = jPasswordField1.getPassword();
            StringBuffer stringBuffer = new StringBuffer();
            for (char c : password) {
                if (c > 0 && c < 16) {
                    stringBuffer.append(""0"");
                }
                stringBuffer.append(Integer.toHexString(c & 0xff));
            }
            String passwordString = stringBuffer.toString();
            try {
                hash = messageDigest.digest(passwordString.getBytes(""UTF-8""));
            } catch (UnsupportedEncodingException ex) {
                unsupportedEncodingException = ex;
            }
            if (unsupportedEncodingException != null) {
                System.out.println(unsupportedEncodingException.toString());
            }
            else {
                stringBuffer = new StringBuffer();
                for (byte b : hash) {
                    stringBuffer.append(String.format(""%02x"", b));
                }
                String passwordHashed = stringBuffer.toString();
                System.out.println(passwordHashed);
            }
        }

Any ideas?
","You've pretty much nailed it.  just took the hard/wrong way converting from char[] to String -> new String(password) is all you need.  (hint, if you find yourself manually converting between bytes and chars, you're probably doing it wrong).
as a side note, exceptions are ""thrown"" for a reason.  that makes it easy to skip the following code which shouldn't be executed when the exception is thrown.  by catching and turning the exceptions into ""if"" blocks, you make the code more complex than it needs to be.
","347","<java><hash><sha>","1","1","2","2012-05-29 16:44:08","10802796","2","3","","","","2012-05-29 16:04:24",""
"10802746","char[] -> String -> bytes[] -> String... and I'm lost","What I'm trying to do is to convert a password typed into a jPasswordField into SHA-256 hash. I was wandering around and found how to do this if I've got password saved as a string but the field I'm using is returning char[] so I ended up just guessing what to do... at first I've got different results even if the password was the same but now I believe I'm closer as it's a constant; but it's still not it as the output of
echo -n 'abc' | sha256sum

is

ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad

while the output of my action (for the same input) is

86900f25bd2ee285bc6c22800cfb8f2c3411e45c9f53b3ba5a8017af9d6b6b05

My action looks like this:
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
        NoSuchAlgorithmException noSuchAlgorithmException = null;
        MessageDigest messageDigest = null;
        try {
            messageDigest = MessageDigest.getInstance(""SHA-256"");

        } catch (NoSuchAlgorithmException ex) {
            noSuchAlgorithmException = ex;
        }
        if (noSuchAlgorithmException != null) {
            System.out.println(noSuchAlgorithmException.toString());
        }
        else {
            UnsupportedEncodingException unsupportedEncodingException = null;
            byte[] hash = null;
            char[] password = jPasswordField1.getPassword();
            StringBuffer stringBuffer = new StringBuffer();
            for (char c : password) {
                if (c > 0 && c < 16) {
                    stringBuffer.append(""0"");
                }
                stringBuffer.append(Integer.toHexString(c & 0xff));
            }
            String passwordString = stringBuffer.toString();
            try {
                hash = messageDigest.digest(passwordString.getBytes(""UTF-8""));
            } catch (UnsupportedEncodingException ex) {
                unsupportedEncodingException = ex;
            }
            if (unsupportedEncodingException != null) {
                System.out.println(unsupportedEncodingException.toString());
            }
            else {
                stringBuffer = new StringBuffer();
                for (byte b : hash) {
                    stringBuffer.append(String.format(""%02x"", b));
                }
                String passwordHashed = stringBuffer.toString();
                System.out.println(passwordHashed);
            }
        }

Any ideas?
","This prints out the same hash as sha256sum
public static void main(String[] args) 
    throws NoSuchAlgorithmException, UnsupportedEncodingException {

    char[] password = new char[]{'a', 'b', 'c'};

    MessageDigest messageDigest = null;
    messageDigest = MessageDigest.getInstance(""SHA-256"");

    byte[] hash = null;

    // This is how you convert a char array into a String without reencoding it into a different set of characters.
    String passwordString = new String(password);

    hash = messageDigest.digest(passwordString.getBytes(""UTF-8""));
    StringBuilder sb = new StringBuilder();
    for (byte b : hash) {
        sb.append(String.format(""%02x"", b));
    }
    String passwordHashed = sb.toString();
    System.out.println(passwordHashed);
}

","347","<java><hash><sha>","1","0","2","2012-05-29 16:44:08","10802796","2","3","","","","2012-05-29 16:04:24",""
"9738577","Same code compiled two time generates files with different hash","When use make to compile my code and use MD5 or SHA1 to verify if the files are the same, the hash is different each time. Iam using OSX 10.7
My first guess was its because the files are created at different times so the time stamp which is save in the file is different therefore the file and hashes are different. But is this timestamp really hashed or left out like the filename?
If so, what is the best way to compare to compiled files to verify if they were compiled the same way?
EDIT:
Iam using the gcc 4.2.1
","","347","<macos><hash><makefile><md5><sha>","0","","0","2012-03-16 23:45:48","","3","","514134","","2012-03-16 23:45:48","2012-03-16 13:57:18",""
"11226043","Sha256 + salt algorithem in windows phone 7","I want to encrypt my userid and password using SHA256 algorithm and salt key for sending to the server through a xml. How can I achieve this ?
I did a sample code with SHA256 and pasted bleow. How I use salt key in this ?    
      void myBtn_Click(object sender, RoutedEventArgs e)
      {
        var sha = new  SHA256Managed();
        var bytes = System.Text.Encoding.UTF8.GetBytes(testPass.Text);
        byte[] resultHash = sha.ComputeHash(bytes);
        string sha256 = ConvertToString(resultHash);
      }

       public static string ConvertToString(byte[] buff)
       {
         string sbinary = """";

         for (int i = 0; i < buff.Length; i++)
         {
             //hex-formatted
            sbinary += buff[i].ToString(""X2"");
         }
         return (sbinary);
       }

","SHA is a hash algorithm and not an encryption algorithm. The password cannot be extracted from your result string. Are you sure you are taking the right approach? Would you care to explain the scenario a bit better?
","341","<windows-phone-7><encryption><salt><sha><sha256>","0","1","1","2012-06-27 12:25:59","","2","","","","","2012-06-27 12:19:43",""
"32839360","PayPal IPN SHA-256 server requirement","To begin with, I already posted the same question in serverfault.com and received no help, so I'm repeating it here out of desperation.
Recently PayPal is requiring servers to support SHA-256. Here's an article referring to this issue:
https://www.paypal-knowledge.com/infocenter/index?page=content&id=FAQ1766&expand=true&locale=en_US
At the top of the article, it states,

Update your integration to support certificates using the SHA-256 algorithm. PayPal is upgrading SSL certificates on all Live and Sandbox endpoints from SHA-1 to the stronger and more robust SHA-256 algorithm.

We have a dedicated CentOS server with numerous sites, mostly WordPress. Quite a few use PayPal IPN but do not have dedicated IPs or SSL Certificates. What needs to be changed to the server so these sites will support SHA-256? Our server is situated with Limestone Networks so I've created a ticket and asked repeatedly for assistance to no avail. They keep repeating SSL's need to be updated on the server. Would that be a wildcase SSL certificate in the usage case I described? Any assistance would be greatly appreciated.
","Based on your comments, it sounds like this is nothing to do with SHA256, but a simple CN mismatch. A certificate is only good for the names listed in it. You could try adding a subjectAltName for each of the required hosts, or a wildcard certificate for *.example.com (though I wouldn't trust one of those for my server.)
","339","<ssl><paypal><paypal-ipn><centos6><sha>","0","0","1","2015-09-29 16:48:44","","5","","","","","2015-09-29 08:32:30",""
"28238402","Facebook Android SDK Login not working with SSO for Second Time","I am integrating Facebook SDK with my app. First login works fine, but after logging off when I try to login again, Session State comes as CLOSED_LOGIN_FAILED. And user not able to login. I printed KeyHash and its same as I mentioned in Facebook Console.
If I use following line of code, it works but give user id, password console every time:
authButton.setLoginBehavior(SessionLoginBehavior.SUPPRESS_SSO);

Moreover I do not want to use it like this. Please help.
Thanks,
Rahul
","","339","<android><facebook><facebook-graph-api><facebook-login><sha>","2","","0","2015-01-30 14:49:41","","1","","","","","2015-01-30 14:49:41",""
"44038132","Difference between NodeJS and Python Hashing","I'm attempting to port some NodeJS code to Python 3, but am having trouble getting a SHA1 hash to behave identically.
This code in each language shows the problem:
NodeJS
var crypto = require('crypto');
crypto.createHash('sha1');
var h = crypto.createHash('sha1');
h.update(new Buffer('pXHepU2vIdYJuIAN', 'base64').toString('binary'));
console.log(h.digest('hex')); // ea70f5b1ec762290cefd37bc0f9a7421dcc93466

Python 3
import hashlib
import base64
h = hashlib.sha1()
h.update(base64.b64decode(b'pXHepU2vIdYJuIAN'))
print(h.hexdigest()) # 74161d2d37d9fff312dd396d5f779133c4bfd88d

I think I'm passing the Python input in the wrong format as if I remove the .toString('binary') from the NodeJS code it matches.
Could anyone explain to me what the Python code should be, and why they behave differently?
","The python code like this:
import hashlib
import base64

h = hashlib.sha1()
h.update(base64.b64decode(b'pXHepU2vIdYJuIAN').decode('latin1').encode())
print(h.hexdigest()) #result is ea70f5b1ec762290cefd37bc0f9a7421dcc93466

I have referred to this question Nodejs crypto vs python hashlib
Hope it helps you.
","337","<python><node.js><sha>","1","1","1","2017-05-18 05:26:01","44039237","1","2","","","","2017-05-18 03:32:45",""
"53080807","sha256 hash collisions between two strings","I have to find two string which are passed in URL as parameter 'str1' and 'str2' and satisfies these conditions ?
if($_GET['str1'] !== $_GET['str2'] and $_GET['str1'] and $_GET['str2']) 
{
    $hash1 = hash('sha256', $salt . $_GET['str1']);
    $hash2 = hash('sha256', $salt . $_GET['str2']);

    if($hash1 === $hash2) {
       #print str1 and str2
    }

}

How will I find out?
","The only possible solution to break that is to make the hash function not work.
Hash function expects string input (or typecast to string), so making input as array will break the hash and both return false/not working.
Meaning both is strictly the same.  
It's a cheat, but it satisfies all parts of the code as it currently is.
<?php
$_GET['str1'] = [""a""];
$_GET['str2'] = [""b""];
$salt = ""aaabdnelnFnekknfn"";

if($_GET['str1'] !== $_GET['str2'] and $_GET['str1'] and $_GET['str2']) 
{
    $hash1 = hash('sha256', $salt . $_GET['str1']);
    $hash2 = hash('sha256', $salt . $_GET['str2']);

    if($hash1 === $hash2) {
       var_dump($_GET['str1'],$_GET['str2']);
    }

}

https://3v4l.org/SPYKb
","334","<php><encryption><hash><sha256><sha>","2","5","1","2018-10-31 10:29:56","53081240","8","1","","","","2018-10-31 10:04:51",""
"49929834","How so I convert this SHA256 + BASE64 from Swift to PHP?","I've been given this Swift code to try and make work in PHP:
finalStr = Encryption.sha256(inputStr)

...

    class Encryption {
        static func sha256(_ data: Data) -> Data? {
            guard let res = NSMutableData(length: Int(CC_SHA256_DIGEST_LENGTH)) else { return nil }
            CC_SHA256((data as NSData).bytes, CC_LONG(data.count), res.mutableBytes.assumingMemoryBound(to: UInt8.self))
            return res as Data
        }

        static func sha256(_ str: String) -> String? {
            guard
                let data = str.data(using: String.Encoding.utf8),
                let shaData = Encryption.sha256(data)
                else { return nil }
            let rc = shaData.base64EncodedString(options: [])
            return rc
        }
    }

I'm doing the following in PHP, but the end result isn't matching:
$hashedStr = hash('sha256', $inputStr);
$finalStr = base64_encode($hashedStr);
echo $finalStr;

What am I missing on the PHP side?
","You should set raw output to true for hash method in PHP. Notice the third method argument in hash
$hashedStr = hash('sha256', $inputStr, true);
$finalStr = base64_encode($hashedStr);
echo $finalStr;

This way the base64_encoded raw value from PHP should be equal to the one that you get from base64EncodedString
","332","<php><swift><base64><sha>","0","2","1","2018-04-19 21:36:41","49930601","1","","","","","2018-04-19 20:37:05",""
"32838356","Creating hex string parameter in query string","I need to create a query string with the following structure:
https://api.company.com/api/hello.json?app_id=$name&hash=$hash
The $hash variable should be the SHA1 has of the current challenge string concatenated with my client secret.
I've tested my api credentials in the console by running the following bash script (which gives me the correct response)
$ challenge=$(curl -s ""http://www.company.com/api/hello.json?app_id=$name"" | head -1 | sed 's/.*""challenge"": *""\([0-9]*\)"".*/\1/')
$ hash=$(printf $challenge$key | openssl dgst -sha1 | sed 's/^.*\([a-f0-9]\{40\}\).*$/\1/')
$ curl ""http://www.company.com/api/hello.json?app_id=$name&hash=$hash""

However when I try to recreate the $hash variable programmatically with PHP the authentication fails due to incorrect hash parameter.
To create the $hash parameter I use:
$hash = sha1($challenge . $key);

But obviously I'm missing something here. I assume the expression in the bash script:
a-f0-9]\{40\}\).*$/\1/

checks if the string is a 40 characters hexadecimal string, but I'm not sure how to integrate this in my PHP code. 
If I check the value of $challenge variable in the console I ge ta 9 digit numeric value like : 244971205 whereas the same variable in my PHP script has a string value. Could this be the reason why my $hash parameter do not get properly formatted?
Worth noting that if I use the $hash variable value I get by running
echo ""$hash""

in the console directly in my query string the api call succeeds, but I want to get the same value programmatically.
Would be very grateful if someone could point me in the right direction.
","Turned out I was overcomplicating things. What I actually needed to do in order to get the correct value for the $challenge variable was to parse the JSON data with json_decode and after that just access the property that held the numeric value like this $challenge = $obj['object']['property']
","331","<php><bash><sha>","0","0","1","2015-09-30 07:42:55","","8","","5149645","","2015-09-29 08:13:48","2015-09-29 07:39:49",""
"48719957","what shasum: elasticsearch-5.0.0.deb.sha1: no properly formatted SHA1 checksum lines found means?","I want to install elasticsearch5.6.4 on ubuntu 17.10. So I downloaded elasticsearch.deb and elasticsearch.deb.sha1. As the sturcture said in this guide, after I run 
shasum -a 512 -c elasticsearch-6.2.1.tar.gz.sha512

I have gotten this error: 
shasum: elasticsearch-5.6.4.deb.sha1: no properly formatted SHA1 checksum lines found

What does this error mean? and what should I do?
","You are correct and I'm a bit puzzled (since I've written that section in the Elastic docs): shasum -a 512 works on other operating systems and checking the man page, I would have thought it should do the same on Ubuntu:
-a, --algorithm   1 (default), 224, 256, 384, 512, 512224, 512256

When verifying SHA-512/224 or SHA-512/256 checksums, indicate the
algorithm explicitly using the -a option, e.g.

  shasum -a 512224 -c checksumfile

I'm not sure why shasum -a 512 doesn't work here, but these 3 alternatives all give you the correct result:

shasum -c elasticsearch-6.2.1.deb.sha512 -a 512
shasum -a 512256 -c elasticsearch-6.2.1.deb.sha512
sha512sum -c elasticsearch-6.2.1.deb.sha512

","330","<elasticsearch><sha1><checksum><sha><elasticsearch-5>","1","0","2","2019-07-01 08:49:18","","0","1","1537925","","2018-02-10 15:59:13","2018-02-10 10:53:40",""
"48719957","what shasum: elasticsearch-5.0.0.deb.sha1: no properly formatted SHA1 checksum lines found means?","I want to install elasticsearch5.6.4 on ubuntu 17.10. So I downloaded elasticsearch.deb and elasticsearch.deb.sha1. As the sturcture said in this guide, after I run 
shasum -a 512 -c elasticsearch-6.2.1.tar.gz.sha512

I have gotten this error: 
shasum: elasticsearch-5.6.4.deb.sha1: no properly formatted SHA1 checksum lines found

What does this error mean? and what should I do?
","This answer is not so much for the OP (who is hopefully sorted now) but any passers by who encounter the error in the question.
The error 
shasum: [CHECKSUM_FILENAME] : no properly formatted SHA[TYPE] checksum lines found

indicates that the checksum file passed to the -c flag is not formatted as 
follows
a67eb6eeeff63ac77d34c2c86b0a3fa97f69a9d3f8c9d34c20036fa79cb4214d  ./kbld-linux-amd64

Where 

the first field is the expected checksum,
the second field is a ' ' character indicating that the file is to be checked as a text file (as opposed to being checked as a binary file or being checking in Universal mode which  ignores newlines) 
and the third field is the name of the file you likely just downloaded and whose integrity you want to verify

So in the example above the developers who created kbld supplied the above text on their release page to show the checksums that they calculated after they built the kbld binaries for various platforms.
I added the line for the linux build to a file called kbld_v0_7_0.checksum and then I ran the following in the directory where I downloaded the kbld-linux-amd64 binary 
$ shasum -c kbld_v0_7_0.checksum -a 256
./kbld-linux-amd64: OK

The OK from shasum shows that the binary that I downloaded, ./kbld-linux-amd64 , generates the same sha256 checksum that was produced when the developers did their build which indicates that the files are, in all likelihood, identical
","330","<elasticsearch><sha1><checksum><sha><elasticsearch-5>","1","0","2","2019-07-01 08:49:18","","0","1","1537925","","2018-02-10 15:59:13","2018-02-10 10:53:40",""
"10944118","Password SHA512 x twice","Ok, I am using MongoDB for my database, I want to know can I store this type of passwords in mongoDB
This is what my password gets saved as, Does anyone know if this password can be hacked?
æýÛ¯'éÀP‡ÙÏß¼„Šg€ÝÜ-…eÒ$T¨(OKñÅ£ÌùÚJÕµÔ¤D4#—)g½Ð¸èËæVêæ#¥

","Every password can ultimately be hacked so-to-speak. 
Remember hashing and encryption are two different things -> http://en.m.wikipedia.org/wiki/Cryptographic_hash_function & http://en.m.wikipedia.org/wiki/Salted_hash.
Hashing is a one-way function so typically what attackers do is run through a bunch of passwords in a wordlist, hash them and search for a match against the hashed password that they've stolen. The longer and more complex your password along with hashing the password with a random salt, then the harder it is to, as you say, hack the password.
If you want to learn more about passwords, check out this link - http://net.tutsplus.com/tutorials/php/understanding-hash-functions-and-keeping-passwords-safe/.
Here's information from the MongoDB website on security and authentication -  http://www.mongodb.org/display/DOCS/Security+and+Authentication#SecurityandAuthentication-ChangingPasswords
This type of question is more suited to http://security.stackexchange.com where there's a lot of discussion about the recent the LinkedIn and LastFM password issues.
","329","<mongodb><passwords><md5><sha>","1","2","1","2014-08-30 20:28:05","10948120","2","","3366929","","2014-08-30 20:28:05","2012-06-08 06:38:07",""
"38281621","My Web Host Doesn't Support SHA-3 or SHA-2 with PHP. What should I do?","So my web host only supports SHA-1 and MD5, which are both pretty broken and out-dated. What can I do in this situation. Will I have to use an external site to hash my password (using POST requests), or would it be safe to do it through JavaScript. I'm not too keen on hashing passwords on the client's side though.
Is there any way I can get a SHA-2, SHA-3 or MD6 algorithm for PHP and use that as a custom method? If not, what would you suggest is the best way to overcome this problem?
Thanks in advance, DibDibs
EDIT
Here are the errors I am receiving when using different methods of hashing...
When I call hash(""sha-256"", $str), I get this error: PHP Warning:  hash(): Unknown hashing algorithm: sha-256
And when I call any algorithm directly, for example sha2($str), I get this error: PHP Fatal error:  Uncaught Error: Call to undefined function sha2()
I don't know how the host has disabled them, to me it looks like the functions (hashing algorithms) just aren't there to begin with.
","Why don't you use password_hash() and password_verify()? They are built in php functions for this purpose.
","329","<php><security><hash><md5><sha>","0","3","2","2016-07-09 12:53:54","","5","","5410736","","2016-07-09 12:12:39","2016-07-09 12:03:28",""
"38281621","My Web Host Doesn't Support SHA-3 or SHA-2 with PHP. What should I do?","So my web host only supports SHA-1 and MD5, which are both pretty broken and out-dated. What can I do in this situation. Will I have to use an external site to hash my password (using POST requests), or would it be safe to do it through JavaScript. I'm not too keen on hashing passwords on the client's side though.
Is there any way I can get a SHA-2, SHA-3 or MD6 algorithm for PHP and use that as a custom method? If not, what would you suggest is the best way to overcome this problem?
Thanks in advance, DibDibs
EDIT
Here are the errors I am receiving when using different methods of hashing...
When I call hash(""sha-256"", $str), I get this error: PHP Warning:  hash(): Unknown hashing algorithm: sha-256
And when I call any algorithm directly, for example sha2($str), I get this error: PHP Fatal error:  Uncaught Error: Call to undefined function sha2()
I don't know how the host has disabled them, to me it looks like the functions (hashing algorithms) just aren't there to begin with.
","1)If you own the server you can try this method or use below libraries:

https://github.com/strawbrary/php-sha3.
https://github.com/0xbb/php-sha3.
https://github.com/Snack-X/md6/blob/master/md6.php
https://libraries.io/github/denji/php-sha3

2) Don't use outside service for hashing.
3) If you don't own it i.e if its shared hosting try talking to hosting provider if they could install it for you or try upgrading to some package which allows you to do so.
4) Or you could try nodejs for sha3 hashing & godaddy supports it.
5) Or try cloud hosting.
","329","<php><security><hash><md5><sha>","0","1","2","2016-07-09 12:53:54","","5","","5410736","","2016-07-09 12:12:39","2016-07-09 12:03:28",""
"33998819","What version of wget supports SHA2","I could not find any detailed information, about what is the minimum wget version to access/verify SHA2 certificates.
I found a very similar question at What version of curl supports SHA2 - where the solution seems to be it depends on the used openssl version.
Is it the same with wget? If yes, SHA2 / SHA256 should work from OpenSSL 0.9.8o on.
Does anyone have detailed information about that? Any pointer about where to verify this information?
","As far as I found out, it really depends on the used openssl version.
Check with:
    $ ldd $(which wget)
    ...
    libssl.so.1.0.0 => /lib/i386-linux-gnu/libssl.so.1.0.0 (0xb76d3000)
    ...

And with your openssl version
    $ openssl version
    OpenSSL 1.0.1f 6 Jan 2014

","329","<ssl><wget><x509><sha><sha2>","0","1","1","2017-09-05 13:16:18","34284747","0","0","1165144","","2017-09-05 13:16:18","2015-11-30 12:34:57",""
"37282351","Creating a SHA hash and salt and the bytes have strange characters in them","I have been working on some cryptography and I need to create a new SHA-2 (sha256) system in which I generate new salt and hash , so the hash will be based upon the user typed password + newly created salt as I understand it.  However, as I have downloaded a sample project,  of all the sha-1 and sha-2 code that I have played around with, i have never seen the chinese symbols and so I'm a little concerned and confused
This is the code  , 
    // utilty function to convert byte[] to string        
    public static string GetString(byte[] bytes)
    {
        char[] chars = new char[bytes.Length / sizeof(char)];
        System.Buffer.BlockCopy(bytes, 0, chars, 0, bytes.Length);
        return new string(chars);
    }

incoming bytes do not have any strange characters so what is causing them?
screenshot

bytes parameter is  byte[24] ....  [0] = 20  ,  1 = 101   etc..  just normal looking.   So it seems to be occurring on this line
System.Buffer.BlockCopy(bytes, 0, chars, 0, bytes.Length);
","You just found some unicode characters. I far more often see--instead of unicode--UTF8 used, as so:
var toString = System.Text.Encoding.UTF8.GetString(yourByteArray);
var backToBytes = System.Text.Encoding.UTF8.GetBytes(toString);

EDIT
Here's an example console program that uses the AES encryption/decryption wrapper I coded after scouring the web for best-practice examples.
namespace Sandbox
{
    class Program
    {
        static void Main(string[] args)
        {
            var originString = ""This is some example text"";

            var originBytes = System.Text.Encoding.UTF8.GetBytes(originString);

            var aes = new AesCryptoServiceProvider {KeySize = 256};
            aes.GenerateIV();
            aes.GenerateKey();
            var vectorBytes = aes.IV;
            var keyBytes = aes.Key;

            //Not going to use these in the code, but here's how to get the values if you
            //Want to save them off.
            var vectorString = System.Text.Encoding.UTF8.GetString(vectorBytes);
            var keyString = System.Text.Encoding.UTF8.GetString(keyBytes);

            var encryptedBytes = EncryptionService.Encrypt(keyBytes, vectorBytes, originBytes);

            var encyptedString = System.Text.Encoding.UTF8.GetString(encryptedBytes);

            var decryptedBytes = EncryptionService.Decrypt(keyBytes, vectorBytes, encryptedBytes);

            var decryptedString = System.Text.Encoding.UTF8.GetString(decryptedBytes);

            Console.WriteLine($""Origin:\t\t {originString}"");
            Console.WriteLine($""Vector:\t\t {vectorString}"");
            Console.WriteLine($""Key:\t\t {keyString}"");
            Console.WriteLine($""Encrypted:\t {encyptedString}"");
            Console.WriteLine($""Decrypted:\t {decryptedString}"");

            Console.ReadLine();

        }
    }

    public static class EncryptionService
    {
        public static byte[] Encrypt(byte[] key, byte[] vector, byte[] input)
        {
            if (key.Length == 0)
                throw new ArgumentException(""Cannot encrypt with empty key"");

            if (vector.Length == 0)
                throw new ArgumentException(""Cannot encrypt with empty vector"");

            if (input.Length == 0)
                throw new ArgumentException(""Cannot encrypt empty input"");

            var unencryptedBytes = input;

            using (AesCryptoServiceProvider aes = new AesCryptoServiceProvider { Key = key, IV = vector })
            using (ICryptoTransform encryptor = aes.CreateEncryptor())
            using (MemoryStream ms = new MemoryStream())
            using (CryptoStream writer = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))
            {
                writer.Write(unencryptedBytes, 0, unencryptedBytes.Length);
                writer.FlushFinalBlock();
                var byteArray = ms.ToArray();

                if (byteArray.Length == 0)
                    throw new Exception(""Attempted to encrypt but encryption resulted in a byte array of 0 length."");

                return byteArray;
            }
        }


        public static byte[] Decrypt(byte[] key, byte[] vector, byte[] encrypted)
        {
            if (key.Length == 0)
                throw new ArgumentException(""Cannot encrypt with empty key"");

            if (vector.Length == 0)
                throw new ArgumentException(""Cannot encrypt with empty vector"");

            if (encrypted == null || encrypted.Length == 0)
                throw new ArgumentException(""Cannot decrypt empty or null byte array"");

            byte[] unencrypted;

            using (AesCryptoServiceProvider aes = new AesCryptoServiceProvider { Key = key, IV = vector })
            using (ICryptoTransform decryptor = aes.CreateDecryptor(key, vector))
            using (MemoryStream ms = new MemoryStream(encrypted))
            using (CryptoStream cs = new CryptoStream(ms, decryptor, CryptoStreamMode.Read))
            {
                var decrypted = new byte[encrypted.Length];
                var bytesRead = cs.Read(decrypted, 0, encrypted.Length);

                return decrypted.Take(bytesRead).ToArray();
            }

        }
    }
}

","329","<c#><hash><byte><sha>","0","1","1","2016-05-17 18:47:10","","0","","","","","2016-05-17 17:04:50",""
"48758596","Unable to locate an executable at ""/usr/libexec/java_home/bin/keytool"" (-1)","Hi I want to generate SHA1 fingerprint to use firebase in my project. I tried to use keytool to generate SHA1 fingerprint using this command 
keytool -exportcert -list -v \
-alias androiddebugkey -keystore ~/.android/debug.keystore
But it is giving me following error
Unable to locate an executable at ""/usr/libexec/java_home/bin/keytool"" (-1)
Here I am telling you where is my jdk located and also my bash profile entries.
Jdk is not located in user/Library/Java but I opened it from here
file:///Applications/Android%20Studio.app/Contents/jre/jdk/Contents/Home/bin/keytool
Here are my bash-profile entries:
export JAVA_HOME=/usr/libexec/java_home 
export JAVA7_HOME=/usr/libexec/java_home -v 1.7
Kindly guide me in detail how can i set my jdk outside AndroidStudio contents also how to edit bash-profile.
Would be highly thankful to you.
Please help
","It's going to be easier for you to skip keytool and instead run this Gradle target to get the SHA-1 for your app:
./gradlew signingReport

It will dump the SHA-1 of each of the variants of your app.
","328","<bash><android-studio><firebase><keytool><sha>","0","1","2","2018-11-01 13:22:02","48758635","0","","","","","2018-02-13 02:34:20",""
"48758596","Unable to locate an executable at ""/usr/libexec/java_home/bin/keytool"" (-1)","Hi I want to generate SHA1 fingerprint to use firebase in my project. I tried to use keytool to generate SHA1 fingerprint using this command 
keytool -exportcert -list -v \
-alias androiddebugkey -keystore ~/.android/debug.keystore
But it is giving me following error
Unable to locate an executable at ""/usr/libexec/java_home/bin/keytool"" (-1)
Here I am telling you where is my jdk located and also my bash profile entries.
Jdk is not located in user/Library/Java but I opened it from here
file:///Applications/Android%20Studio.app/Contents/jre/jdk/Contents/Home/bin/keytool
Here are my bash-profile entries:
export JAVA_HOME=/usr/libexec/java_home 
export JAVA7_HOME=/usr/libexec/java_home -v 1.7
Kindly guide me in detail how can i set my jdk outside AndroidStudio contents also how to edit bash-profile.
Would be highly thankful to you.
Please help
","no wonder this isn't working, a lot has changed since 2013 !
","328","<bash><android-studio><firebase><keytool><sha>","0","0","2","2018-11-01 13:22:02","48758635","0","","","","","2018-02-13 02:34:20",""
"13220312","Applying different hashing algorithms to the same file at the same time","Is it possible to apply different hashing algorithms (MD4, MD5, SHA1, SHA256, SHA512, etc.) to the same file at the same time under Linux?
This is especially useful when processing large files to avoid reading from disk the same content multiple times, but it should be also very useful to distribute work on multi-core processors.
I suspect that I need something like tee but I can't figure out an easy solution to this problem.
EDIT:
Thanks to tink's answer, this is exactly what I was looking for:
#> time ( cat disk.img | tee >( md5sum > md5 ) | tee >( sha1sum > sha1 ) | tee >( sha256sum > sha256 ) | tee >( sha512sum > sha512 ) > /dev/null )

real    1m2.801s
user    0m1.272s
sys     0m18.505s

And this was the slow sequential method:
#> time ( md5sum disk.img && sha1sum disk.img && sha256sum disk.img && sha512sum disk.img )
34f3b8bc1b27777a31b7d46363062ae3  disk.img
85bed81808d6fe4c0ade68595d0f16b008cca57b  disk.img
255308c8887759479fe63b8bc93981001e909f7198593a023ccb0d8986a3a6ea  disk.img
86a2af98bdb9dfefbe54ecd941de614b773218e50dc9eea4ea8d79b443f3c1af50657085dcdbfd161e3f1ec3e91b2f9f7d5859b55f3aee44a7d554f1854e7890  disk.img

real    3m29.099s
user    1m53.459s
sys     0m10.573s

","Something like this should work:
cat iso-image  | tee >( md5sum  > md5 2>&1 ) |( sha256sum > sha256 2>&1)

Insert extra  tee > ( method > methodfile 2>&1 ) blocks for the others before
the sha256 at the end.
","326","<linux><hash><parallel-processing><md5><sha>","2","3","1","2012-11-05 09:42:32","13223308","1","2","-1","","2017-05-23 12:12:20","2012-11-04 16:13:47",""
"25785632","Getting mac from HMAC value and key","I am looking at this page on how to validate HMAC implementation on a platform: http://csrc.nist.gov/groups/STM/cavp/
Test Vectors:
HMAC Test Vectors - These files provide an electronic version of the test vectors
that can be used to informally verify the correctness of an HMAC algorithm 
implementation using the HMACVS. However, use of these vectors does not
take the place of validation obtained through the Cryptographic Algorithm
Validation Program (CAVP).

So I open up the file and view the test values:
http://pastebin.com/phJ4C0Fx
it is thousands of lines long but this is the start.
I focus on the first values:
[L=20]

Count = 0
Klen = 10
Tlen = 10
Key = 82f3b69a1bff4de15c33
Msg = fcd6d98bef45ed6850806e96f255fa0c8114b72873abe8f43c10bea7c1df706f10458e6d4e1c9201f057b8492fa10fe4b541d0fc9d41ef839acff1bc76e3fdfebf2235b5bd0347a9a6303e83152f9f8db941b1b94a8a1ce5c273b55dc94d99a171377969234134e7dad1ab4c8e46d18df4dc016764cf95a11ac4b491a2646be1
Mac = 1ba0e66cf72efc349207

My understanding is that with a key and value that openssl would get the mac, however I am not getting the same mac as that above?
echo -n ""<Msg here>"" | openssl sha1 -hmac ""82f3b69a1bff4de15c33""
(stdin)= 981c64f70b07634e01b3800447e6431dddb42530

Any ideas on what I am doing wrong? i am also just guessing sha1, other values don't match either, I don't know how to take from the file what way I should be doing this. The various lengths, and the count. How do I use this information? 
","","325","<encryption><sha><hmac>","1","","0","2014-09-11 10:55:30","","10","","","","","2014-09-11 10:55:30",""
"38831756","SHA-512 Database Datatype","For my exsting java application we are going to use SHA512 hash to store password(Hash & salt) to Oracle 11g DB.Since SHA512 will always have a fixed length of 128 and with a random 16 bit salt i am thinking of updating the column  datatype to VARCHAR2(150). Is this the standard or do you have any other suggestions.
","","325","<oracle><sha>","0","","0","2016-08-08 14:23:27","","3","","","","","2016-08-08 14:23:27",""
"6418579","Alphanumeric (sha1) Semaphore in PHP?","PHP's ""shm_get"" function requires an integer semaphore key, which I realise to be a restriction of the underlying OS.
I am using the ""sha1"" function to hash some user input and using the hash to uniquely identify a number of resulting files and and background processes.
Is there a way to convince shm_get to accept an alphanumeric key or to convert a sha1 hash to an acceptable integer?
","You can convert a hexadecimal number into a decimal number by using hexdec()
However if you have got a large number in your hash, this won't return an integer. But you need an integer. So you might want to cut it apart and only use a part of the hash.
$hash = sha1('http://www.hashcat.net/');
$hash = substr($hash, 0, 15); // ok on 64bit systems
$number = (int) hexdec($hash); // cap to PHP_INT_MAX anyway
var_dump($hash, $number);

","322","<php><hash><semaphore><sha>","3","2","1","2011-06-20 23:59:50","6418618","0","","","","","2011-06-20 23:07:22",""
"18962886","SHA MySQL compare stored value with input","There is a password column in my table of type VARCHAR
SHA('mypassword') is stored in it. e.g. a382w8328ur
To log in, I must compare SHA('mypassword') with the stored VARCHAR value.
My query is:
$query = ""SELECT * FROM mytable WHERE username='$username' AND password=SHA('$password');"";

this translates to:
SELECT * FROM mytable WHERE username='$username' AND password= SHA('mypassword');

i.e.
SELECT * FROM mytable WHERE username='$username' AND password= a382w8328ur;

but to compare, the query needs to be:
SELECT * FROM mytable WHERE username='$username' AND password='a382w8328ur';

i.e. ' ' around SHA() are needed
IF I use :
SELECT * FROM mytable WHERE username='$username' AND password= 'SHA('mypassword')';

then it treats SHA('mypassword') as a string, and doesn't find the value of SHA('mypassword')
What should my query be?
P.S. I know SHA() is not the way to store passwords, but I'm just learning.
my insert query works fine as:
INSERT INTO mytable(username, password) VALUES ('$username',SHA('$password'));"";

","","317","<mysql><mysqli><sha>","0","","0","2013-09-24 07:05:12","","12","1","1145666","","2013-09-23 15:19:13","2013-09-23 15:15:04",""
"10242231","How do I retrieve the sha of git commit being generated in a commit-msg hook?","Hoping there is a way to discover the sha for the commit being generated.  Im inside a commit-msg hook.  I'd like to append the sha to the end of the commit message so my git gui can build a link to GitHub for me.
","The SHA1 hash generation depends on the commit message, so appending the hash to the commit message would cause the hash to be different. You've got a chicken or egg problem.
","317","<git><githooks><sha>","1","7","2","2012-04-20 08:26:55","10242425","4","","484792","","2012-04-20 07:54:29","2012-04-20 07:47:09",""
"10242231","How do I retrieve the sha of git commit being generated in a commit-msg hook?","Hoping there is a way to discover the sha for the commit being generated.  Im inside a commit-msg hook.  I'd like to append the sha to the end of the commit message so my git gui can build a link to GitHub for me.
","The SHA1 has not yet been generated (the commit has not yet happened, because the hook can prevent it) and depends on the contents of the message.  So if your hook were to compute ""what it would be"" and then modify the message, the result would be different from the computed SHA1.
Thus, while it would be possible to compute ""what the SHA1 will be"", you can't then dump it into the commit message.
Here's how to compute the SHA1 of an actual commit, though, given the SHA1 of the commit :-) or a name that refers to it:
$ git cat-file -p HEAD > /tmp/t
$ git hash-object -t commit /tmp/t
ea5670c9d18fb1482ea2f3022c96e287afb3e906
$ git rev-parse HEAD
ea5670c9d18fb1482ea2f3022c96e287afb3e906

Thus, if you know the tree, all the parents, the author, and the committer strings and have the message text, you can figure out what the SHA1 will be.
","317","<git><githooks><sha>","1","2","2","2012-04-20 08:26:55","10242425","4","","484792","","2012-04-20 07:54:29","2012-04-20 07:47:09",""
"43112536","How to check formatting of a SHA-1 message-digest","I need some basic validation (sanitation checks) to determine if some input is a valid SHA1 sum or just a (random) string. If possible with simple parsing rules or a Regex.
Are there any rules to what a SHA1 sum should adhere? I cannot find any, but from quick tests, all seem to be hexadecimal and around 40 characters long[1].
I am not interested in tests that prove whether or not the SHA-1 sum was made in a secure, properly random or other manner. Just that the format is correct.
I am also not interested in testing that the digest is an actual representation of some message; Just that it has the format of digest in the first place.

For the curious: this is for an application where I build avatars for users based on a.o. their uuid. I don't, however, want to place those uuids in the URL, but obfuscate them a little. So instead of avatars/baa4833d-b962-4ab1-87c5-283c9820eac4.png, we request avatars/5f2a13cb1d84a2e019842cdb8d0c8b03c9e1e414.png. Where 5f2a... is e.g. Digest::SHA1.hexdigest(uuid + ""secrect""). 
On the receiving side, I am adding some basic protection that sends back a 400 bad request whenever something is obviously false. Such as avatars/haxor.png or avatars/traversal../../../../attempt.png. Note that this is a very much simplified example.

[1] Two tests with different outcome:
Using sha1sum on Ubuntu Linux: 
$ echo ""hello"" | sha1sum | cut -d"" "" -f1 | wc -c
41

using Ruby's Digest:   
Digest::SHA1.hexdigest(""hello"").length
=> 40

Edit: turns out this is me, being stupid, wc-c includes the newline, as kennytm points out in the comments. Still: is it safe to assume it will be 40 characters, always?
","SHA-1 has a 160 bits digest
160 bits rendered is 160 / 8 = 20 bytes.
20 bytes rendered in hexadecimal format has a length of 40 chars (digits), two chars for each byte.
Digits can be [0-9a-f]
So the following regex should correctly validate the Sha1sum rendered as a string in hexadecimal format:
/^[0-9a-f]{40}$/
","315","<regex><sha>","-1","1","1","2017-03-30 08:53:24","43112901","4","","73673","","2017-03-30 08:44:15","2017-03-30 08:35:22","2017-03-30 08:54:00"
"38356083","SRI hash not what is expected","I am trying to implement subresource integrity in our build process, so I'm generating the hash keys to our javascript files myself. On most of our files the hash I'm generating matches what the browsers expect and what srihash.org outputs. However, for jquery and jquery-ui I'm generating a different hash than the browser is expecting and srihash.org is outputting. Here is my hashing code:
private static string GetSriHash(string text) {
    var enc = Encoding.UTF8;
    var result = new SHA384Managed().ComputeHash(enc.GetBytes(text));
    return Convert.ToBase64String(result);
}

Where 'text' is the contents of the file. I thought it was some kind of encoding issue, but I tried every option in Encoding and none of them matched. I've tried reading the file off the file system and getting it from a server using WebClient.DownloadString and I get the same (incorrect) hash every time.
","I found the solution... If I change the code to get the file with File.ReadAllBytes() or WebClient.DownloadData() it works fine.
","315","<c#><hash><sha><subresource-integrity>","4","3","1","2016-07-13 19:11:37","","0","2","","","","2016-07-13 15:36:31",""
"30899181","How to get raw binary from hash function in ColdFusion 9?","In ColdFusion 9, I am hashing a string like so: hash(""bob"", ""SHA1""), I need it to return binary instead of a hex string. 
","Is this the sort of thing yer after?
<cfscript>
s = ""G'day World"";
hash1 = hash(s, ""SHA-1"");
bin = binaryDecode(hash1, ""hex"");
hash2 = binaryEncode(bin, ""hex"");

writeDump(variables);
</cfscript>


Docs:

BinaryDecode()
BinaryEncode()

","312","<coldfusion><coldfusion-9><sha>","3","1","2","2015-06-17 19:29:48","30900303","0","","1065868","","2015-06-17 18:35:52","2015-06-17 18:11:02",""
"30899181","How to get raw binary from hash function in ColdFusion 9?","In ColdFusion 9, I am hashing a string like so: hash(""bob"", ""SHA1""), I need it to return binary instead of a hex string. 
","Since you know the hashed string is in hex, simply decode it with the aptly named binaryDecode() function.
hashedString = hash(""bob"", ""SHA1"");
binaryData = binaryDecode(hashedString , ""Hex"");

","312","<coldfusion><coldfusion-9><sha>","3","3","2","2015-06-17 19:29:48","30900303","0","","1065868","","2015-06-17 18:35:52","2015-06-17 18:11:02",""
"16014282","Why CRYPT_BLOWFISH in PHP is considered better, when it produces shorter hashes than SHA","Why CRYPT_BLOWFISH in PHP is considered better for password hashing, when it produces shorter hashes than CRYPT_SHA-256/512? Isn't it more possible to find another word that computes the same BLOWFISH hash, than SHA256/512 hash?
Example hashes taken from php.net manual:
Blowfish: $2a$07$usesomesillystringfore2uDLvp1Ii2e./U9C8sBjqp8I90dH6hi
SHA-256:  $5$rounds=5000$usesomesillystri$KqJWpanXZHKq2BOB43TSaYhEWsQ1Lr5QNyPCDH/Tp.6
SHA-512:  $6$rounds=5000$usesomesillystri$D4IrlXatmP7rx3P3InaxBeoomnAihCKRVQP22JZ6EY47Wc6BkroIuUUBOov1i.S5KPgErtP/EN5mcO.ChWQW21

","The thing with bcrypt that makes it secure is that it's much slower to compute than any of the other algorithm.  
With what ever SHA version, you can just get better computers and you will be able to make a rainbow table in no time. With bcrypt it will still take ages, this algorithm is time expensive. Thus making it nearly impossible to retrieve the original passwords from the hash.
You can see this link for more information.
You can also see this thread from the Security StackExchange that covers it toroughly!

About the fact that the hash produce is smaller, well it doesn't really matters at all because as I said, if you want to find from which password does the hash comes from, it takes ages.
See this sandbox. Simply by putting the load factor over 15 will make it take more than 3 seconds to execute. Try playing around with it and you will understand why it's secure.
Code in the sandbox:
$time = microtime(true);
$pass =  crypt('myNewPassword', '$2y$15$usesomesillystringforsalt$');
$end_time = microtime(true);

$diff = $end_time - $time;
echo ""$pass\n$diff""

Ouput :

$2y$15$usesomesillystringforeTfp6/FuUgyb1HKFA36V9tf6Go5xlv/a
      2.4688489437103

It takes 2.5 seconds for 1 hash! Imagine trying to hash millions of password!
","312","<php><sha><blowfish><crypt>","4","2","1","2013-04-15 12:25:10","","1","","","","","2013-04-15 11:42:15","2013-04-15 12:23:27"
"36626450","What is SHA-256 for? And how to create it in Java?","I read SHA-256 from a book, but the book doesn't explain what it is for? The book explained how to create it in Java. However, I failed to understand what Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1)) is for. Can someone explain it to me in detail? 

","SHA-256 is called a hash algorithm, and its purpose is simple: it takes any data and generates a unique series of bytes to represent it.  There is no way to reverse this process, and there are no known instances of a SHA-256 hash being not unique.
The purpose of the line of code in question is to generate one character of the final SHA-256 output.  Java gives you the has in raw data (a byte array) and we typically convert it to hexadecimal to represent it as a string.  That line of code is pretty complex, so I'll go over what each part of it does separately.
sb.append(); is taking the imput and adding it to the result stored in a StringBuilder.
Integer.toString(); Takes a number and represents it as a literal string
byteData[i] & 0xff Selects the current byte of hash data and uses the bitwise and operation using 0xff (so for each bit in the byte, if the corresponding bit in 0xff is the same, the output is a 1, if not the output is a 0.
string.substring(1); Outputs the string starting after the first character.
","312","<java><security><hash><hex><sha>","0","0","2","2016-04-18 14:23:53","36628714","4","","2359687","","2016-04-14 14:47:15","2016-04-14 14:39:31",""
"36626450","What is SHA-256 for? And how to create it in Java?","I read SHA-256 from a book, but the book doesn't explain what it is for? The book explained how to create it in Java. However, I failed to understand what Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1)) is for. Can someone explain it to me in detail? 

","Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1))

is one way of converting a byte value to a string that's exacly two character wide, showing the byte's hexadecimal value. Having a look at String's Javadoc page will help.
The combination of 0x100 and substring(1) ensures that byte values < than 16 decimal (that is, 0 to F in hex) are also represented as two characters.
By the way:
String.format(""%02x"",byteData[i])

does exactly the same, and might be considered more readable, especially by people who are used to C printf style format strings.
Lastly, why (byteData[i] & 0xff) ? See here for a detailed explanation:

It works because Java will perform a widening conversion to int, using
  sign extension, so instead of a negative byte you will have a negative
  int. Masking with 0xff will leave only the lower 8 bits, thus making
  the number positive again (and what you initially intended).

","312","<java><security><hash><hex><sha>","0","0","2","2016-04-18 14:23:53","36628714","4","","2359687","","2016-04-14 14:47:15","2016-04-14 14:39:31",""
"4984479","Can the SHA-256 hash be derived from the SHA-512hash of the same data?","I am applying SHA-512 on data. Is it theoretically/practically possible to derive the SHA-256 hash for the original data from its SHA-512 hash?
","Since they have different number of rounds, different size of internal state and different block-size I'm pretty sure that the result of SHA-256 and SHA-512 are so different that you can't derive either of them from the other.
But if you are paranoid you could append/prepend different data for the different hash-functions. i.e. you calculate SHA-256(""A""+data+""B"") and SHA-512(""D""+data+""E"") (of course with longer strings instead of ABCD).
The only possibility I see is if the set of possible input values is small that you brute-force possible values until you hit the known hash and then calculate the other hash. Basically if the conditions are so that the attacker can reverse the known hash, he can also calculate the other hash.
","312","<security><hash><sha>","2","2","1","2011-02-13 15:53:55","4984492","7","","164165","","2011-02-13 15:53:55","2011-02-13 13:46:30",""
"48016431","Google Script HMAC SHA512 output differs when adding '\n'","I'm trying to create a google script that generates a HMAC signature using SHA512 for authentication to an API. Here is the code I'm using:
     var SystemTimeMilli = Date.now()

     var InputString = ('Some Text' + '\n' + SystemTimeMilli);

     var PrivateKey = 'bEDtDJnW0y/Ll4YZitxb+D5sTNnEpQKH67EJRCmQCqN9cvGiB8+IHzB7HjsOs3mSlxLmu4aiPDRpe9anuWzylw=='  //sample private key

     var signature = Utilities.base64Encode(Utilities.computeHmacSignature(Utilities.MacAlgorithm.HMAC_SHA_512, InputString, PrivateKey, Utilities.Charset.UTF_8));

     Logger.log(signature);

This generates a string to the log but when compared to results using web based hash generators the results differ.
However if I use
var InputString = ('Some Text' + SystemTimeMilli);

without the \n the results generated in my Google Script and the web based hash generators match.
So I'm assuming the way Google Script is handling the new line is different to the web base generators but I can't figure out how to get them match or which one is the correct result.
EDIT
To add some further information:
Lets say SystemTimeMilli = 1234567890123 
When I enter ('Some Text' + SystemTimeMilli) into my script using
bEDtDJnW0y/Ll4YZitxb+D5sTNnEpQKH67EJRCmQCqN9cvGiB8+IHzB7HjsOs3mSlxLmu4aiPDRpe9anuWzylw== as the PrivateKey
I get
oDVJk38b634G9Ykdqm+hVmSb5C8h6/re5/XG+MjyddTKygWcoZjWu0DfNGY/JWu5Be41zLDKfEZnuFcACrvs7w== returned.
Which is the same if I enter /account/balance1234567890123 into https://quickhash.com using SHA-512 (SHA2) as the Algorithm and Base64 Encoding as the Output Format.
However if I enter ('Some Text' + '\n' + SystemTimeMilli) in my script it returns 3sj1jbx1tQ4nc8XOkk3nW8TvG5zvCam2LN51fQWDXOKU5O/1KBAdzdp+YV+aAdYHWCY2x3jqCfbXKoOmfoD0KA==
But using 
/account/balance
1234567890123
in quickhash.com returns something different. I've tried a whole bunch of different combinations but I never get the same result as my script. 
I having trouble with getting my script to authenticate to the API so I really want to determine if I'm getting the correct HMAC to begin with.
","","311","<javascript><google-apps-script><sha><hmac><sha512>","1","","0","2017-12-29 06:24:23","","4","","4652706","","2017-12-29 06:24:23","2017-12-29 01:39:54",""
"12085116","Git: How is the SHA1 value of a tree object generated?","As the title suggest, is the value based on the content of all tree objects(recursively) inside?
Namely, can I regard two tree objects as the exactly same file tree (including all the subdirectories and files) if they have the same hash value?
","You can see some rough details about what is used to calculate the tree SHA here.
Further information about the binary format that the tree is stored in can be found here.
The actual SHA that is used is just the SHA of the buffer described in that detailed version.
The key points to take home is that the SHA is dependent on the filenames of all contained objects or trees, their SHAs and their permissions. Change any of those and you change the SHA. If two trees have the same SHAs then all those components must match (excluding the possibility of collisions as they're nigh on impossible).
","311","<git><sha>","0","1","2","2013-01-15 02:32:07","12085160","4","1","544806","","2012-08-23 05:25:30","2012-08-23 05:15:42",""
"12085116","Git: How is the SHA1 value of a tree object generated?","As the title suggest, is the value based on the content of all tree objects(recursively) inside?
Namely, can I regard two tree objects as the exactly same file tree (including all the subdirectories and files) if they have the same hash value?
","I don't think it's possible to have two tree objects that have the same hash since the object file is named by the hash in the repository. Also, in order for two tree objects to be the same, it would require that state of the commit be identical in both cases right down to the content of all the staged files since the tree object keeps SHA-1 references to the staged files.
This post might help clarify this.
Hope this helps.
","311","<git><sha>","0","0","2","2013-01-15 02:32:07","12085160","4","1","544806","","2012-08-23 05:25:30","2012-08-23 05:15:42",""
"50442185","Adaptation of SHA2 512 gives incorrect results","I am trying to adapt the pure Lua implementation of the SecureHashAlgorithm found here for SHA2 512 instead of SHA2 256. When I try to use the adaptation, it does not give the correct answer.
Here is the adaptation:
--
-- UTILITY FUNCTIONS
--
-- transform a string of bytes in a string of hexadecimal digits
local function str2hexa (s)
    local h = string.gsub(s, ""."", function(c)
        return string.format(""%02x"", string.byte(c))
    end)
    return h
end

-- transforms number 'l' into a big-endian sequence of 'n' bytes
--(coded as a string)
local function num2string(l, n)
    local s = """"
    for i = 1, n do
        --most significant byte of l
        local remainder = l % 256
        s = string.char(remainder) .. s
        --remove from l the bits we have already transformed
        l = (l-remainder) / 256
    end
    return s
end

-- transform the big-endian sequence of eight bytes starting at
-- index 'i' in 's' into a number
local function s264num (s, i)
    local n = 0
    for i = i, i + 7 do
        n = n*256 + string.byte(s, i)
    end
    return n
end

--
-- MAIN SECTION
--

-- FIRST STEP: INITIALIZE HASH VALUES
--(second 32 bits of the fractional parts of the square roots of the first 9th through 16th primes 23..53)

local HH = {}

local function initH512(H)
    H = {0x6a09e667f3bcc908, 0xbb67ae8584caa73b, 0x3c6ef372fe94f82b, 0xa54ff53a5f1d36f1, 0x510e527fade682d1, 0x9b05688c2b3e6c1f, 0x1f83d9abfb41bd6b, 0x5be0cd19137e2179}
    return H
end

-- SECOND STEP: INITIALIZE ROUND CONSTANTS
--(first 80 bits of the fractional parts of the cube roots of the first 80 primes 2..409)

local k = {
    0x428a2f98d728ae22, 0x7137449123ef65cd, 0xb5c0fbcfec4d3b2f, 0xe9b5dba58189dbbc, 0x3956c25bf348b538,
    0x59f111f1b605d019, 0x923f82a4af194f9b, 0xab1c5ed5da6d8118, 0xd807aa98a3030242, 0x12835b0145706fbe,
    0x243185be4ee4b28c, 0x550c7dc3d5ffb4e2, 0x72be5d74f27b896f, 0x80deb1fe3b1696b1, 0x9bdc06a725c71235,
    0xc19bf174cf692694, 0xe49b69c19ef14ad2, 0xefbe4786384f25e3, 0x0fc19dc68b8cd5b5, 0x240ca1cc77ac9c65,
    0x2de92c6f592b0275, 0x4a7484aa6ea6e483, 0x5cb0a9dcbd41fbd4, 0x76f988da831153b5, 0x983e5152ee66dfab,
    0xa831c66d2db43210, 0xb00327c898fb213f, 0xbf597fc7beef0ee4, 0xc6e00bf33da88fc2, 0xd5a79147930aa725,
    0x06ca6351e003826f, 0x142929670a0e6e70, 0x27b70a8546d22ffc, 0x2e1b21385c26c926, 0x4d2c6dfc5ac42aed,
    0x53380d139d95b3df, 0x650a73548baf63de, 0x766a0abb3c77b2a8, 0x81c2c92e47edaee6, 0x92722c851482353b,
    0xa2bfe8a14cf10364, 0xa81a664bbc423001, 0xc24b8b70d0f89791, 0xc76c51a30654be30, 0xd192e819d6ef5218,
    0xd69906245565a910, 0xf40e35855771202a, 0x106aa07032bbd1b8, 0x19a4c116b8d2d0c8, 0x1e376c085141ab53,
    0x2748774cdf8eeb99, 0x34b0bcb5e19b48a8, 0x391c0cb3c5c95a63, 0x4ed8aa4ae3418acb, 0x5b9cca4f7763e373,
    0x682e6ff3d6b2b8a3, 0x748f82ee5defb2fc, 0x78a5636f43172f60, 0x84c87814a1f0ab72, 0x8cc702081a6439ec,
    0x90befffa23631e28, 0xa4506cebde82bde9, 0xbef9a3f7b2c67915, 0xc67178f2e372532b, 0xca273eceea26619c,
    0xd186b8c721c0c207, 0xeada7dd6cde0eb1e, 0xf57d4f7fee6ed178, 0x06f067aa72176fba, 0x0a637dc5a2c898a6,
    0x113f9804bef90dae, 0x1b710b35131c471b, 0x28db77f523047d84, 0x32caab7b40c72493, 0x3c9ebe0a15c9bebc,
    0x431d67c49c100d4c, 0x4cc5d4becb3e42b6, 0x597f299cfc657e2a, 0x5fcb6fab3ad6faec, 0x6c44198c4a475817
}

-- THIRD STEP: PRE-PROCESSING (padding)

local function preprocess(toProcess, len)
    --append a single '1' bit
    --append K '0' bits, where K is the minimum number >= 0 such that L + 1 + K = 896mod1024
    local extra = 128 - (len + 9) % 128
    len = num2string(8 * len, 8)
    toProcess = toProcess .. ""\128"" .. string.rep(""\0"", extra) .. len
    assert(#toProcess % 128 == 0)
    return toProcess
end

local function rrotate(rot, n)
    return (rot >> n) | ((rot << 64 - n))
end

local function digestblock(msg, i, H)
    local w = {}
    for j = 1, 16 do w[j] = s264num(msg, i + (j - 1)*4) end
    for j = 17, 80 do
        local v = w[j - 15] 
        local s0 = rrotate(v, 1) ~ rrotate(v, 8) ~ (v >> 7)
        v = w[j - 2] 
        w[j] = w[j - 16] + s0 + w[j - 7] + ((rrotate(v, 19) ~ rrotate(v, 61)) ~ (v >> 6))
    end

    local a, b, c, d, e, f, g, h = H[1], H[2], H[3], H[4], H[5], H[6], H[7], H[8]
    for i = 1, 80 do
        a, b, c, d, e, f, g, h = a , b , c , d , e , f , g , h 
        local s0 = rrotate(a, 28) ~ (rrotate(a, 34) ~ rrotate(a, 39))
        local maj = ((a & b) ~ (a & c)) ~ (b & c)
        local t2 = s0 + maj
        local s1 = rrotate(e, 14) ~ (rrotate(e, 18) ~ rrotate(e, 41))
        local ch = (e & f) ~ (~e & g)
        local t1 = h + s1 + ch + k[i] + w[i]
        h, g, f, e, d, c, b, a = g, f, e, d + t1, c, b, a, t1 + t2
    end

    H[1] = (H[1] + a) 
    H[2] = (H[2] + b) 
    H[3] = (H[3] + c) 
    H[4] = (H[4] + d) 
    H[5] = (H[5] + e) 
    H[6] = (H[6] + f) 
    H[7] = (H[7] + g) 
    H[8] = (H[8] + h) 
end

local function finalresult512 (H)
    -- Produce the final hash value:
    return
    str2hexa(num2string(H[1], 8)..num2string(H[2], 8)..num2string(H[3], 8)..num2string(H[4], 8)..
            num2string(H[5], 8)..num2string(H[6], 8)..num2string(H[7], 8)..num2string(H[8], 8))
end


-- Returns the hash512 for the given string.
local function hash512 (msg)
    msg = preprocess(msg, #msg)
    local H = initH512(HH)

    -- Process the message in successive 1024-bit (128 bytes) chunks:
    for i = 1, #msg, 128 do
        digestblock(msg, i, H)
    end

    return finalresult512(H)
end

Given hash512(""a""):
Expect: 1f40fc92da241694750979ee6cf582f2d5d7d28e18335de05abc54d0560e0f5302860c652bf08d560252aa5e74210546f369fbbbce8c12cfc7957b2652fe9a75

Actual: e0b9623f2194cb81f2a62616a183edbe390be0d0b20430cadc3371efc237fa6bf7f8b48311f2fa249131c347fee3e8cde6acfdab286d648054541f92102cfc9c

I know that I am creating a message of the correct bit size (1024 bits) and also working in 1024-bit chunks, or at least I believe I am.
I am not sure if it has to do with the handling of the integers (the standard requires unsigned integers) or whether I made a mistake in one of the utility functions, or both. If it is indeed an issue with the handling of the integers, how would I go about taking care of the problem. I was able to resolve this when working on the 256-bit version of the adaptation by using mod 2^32 when working with numbers in the digestblock method. I attempted to do mod 2^64 and 2^63 with the 512-bit version and it does not correct the problem. I am stumped.
I should mention that I cannot use one of the many library implementations as I am using a sandboxed Lua that does not provide this access, which is why I need a pure lua implementation. Thanks in advance.
","Unfortunately, after introducing integers in Lua 5.3 writing scripts for Lua becomes a more complicated task.
You must always think about transformations between integers and floating point numbers.
ALWAYS.  Yes, that's boring.  
One of your mistakes is an excellent example of this ""dark corner of Lua"".   
  local remainder = l % 256
  s = string.char(remainder) .. s
  --remove from l the bits we have already transformed
  l = (l-remainder) / 256

Your value l is initially a 64-bit integer.
After cutting off its first byte l contains (64-8) = 56 bits, but now it's a floating point-number (with 53-bit precision, of course).
Possible solution: use l = l >> 8 or l = l // 256 instead of l = (l-remainder) / 256

Another mistake is using s264num(msg, i + (j - 1) * 4) instead of s264num(msg, i + (j - 1) * 8)

One more mistake is in the following line:
local extra = 128 - (len + 9) % 128

The correct code is 
local extra = - (len + 17) % 128 + 8

(Please note that -a%m+b is not the same as b-a%m due to operator precedence)

After fixing these 3 mistakes your code works correctly.
","309","<lua><sha>","2","4","1","2018-05-21 09:02:16","50444196","0","","9821157","","2018-05-21 05:03:31","2018-05-21 04:55:26",""
"7727033","Solr: Store SHA1-hashes efficient","I have to store, index and find a lot SHA1-Tokens in Solr.
Now I store them as 40-Chars-Hex-strings like 68ac906495480a3404beee4874ed853a037a7a8f. There are about 10,000+ unique SHA1-tokens in my Solr index.
Would it be better to store the values compressed as a 20-Byte BinaryField? (half size of index, more performance...?)
I have read about Krugle in the ""Lucene in action""-book who store just some characters in the middle of (compressed) MD5-strings. Would this be better to get maximum search performance?
","","307","<hash><lucene><solr><sha>","0","","0","2011-10-11 13:42:58","","2","","","","","2011-10-11 13:42:58",""
"20338864","AS3WebSocket library SHA1 error","I am trying to use https://github.com/Worlize/AS3WebSocket library.
When I create Flex project everything ok, but when I create AS3 project it can't connect to a websocket server. Function SHA1.hashToBase64 (adobe.crypto library) inside Websocket class throws error:
    [SWF] TestWS.swf - 506,881 bytes after decompression

    typecheck com.adobe.crypto::SHA1$/hashToBase64()
    outer-scope = [global Object$]
    [com.adobe.crypto::SHA1$~[O] String[S] *[A] *[A] *[A] *[A] *[A] *[A]] {} ()
    0:debugfile ""/Users/turtle/work/as3corelib/project/src;com/adobe/crypto;SHA1.as""
    [com.adobe.crypto::SHA1$~[O] String[S] *[A] *[A] *[A] *[A] *[A] *[A]] {} ()
    2:debugline 100
    [com.adobe.crypto::SHA1$~[O] String[S] *[A] *[A] *[A] *[A] *[A] *[A]] {} ()
    4:getlocal0
    [com.adobe.crypto::SHA1$~[O] String[S] *[A] *[A] *[A] *[A] *[A] *[A]] {} (com.adobe.crypto::SHA1$~[O])
  5:pushscope
                       [com.adobe.crypto::SHA1$~[O] String[S] *[A] *[A] *[A] *[A] *[A] *[A]] {com.adobe.crypto::SHA1$~[O]} ()
  6:pushbyte 0
                       [com.adobe.crypto::SHA1$~[O] String[S] *[A] *[A] *[A] *[A] *[A] *[A]] {com.adobe.crypto::SHA1$~[O]} (int[I])
  8:convert_u
                       [com.adobe.crypto::SHA1$~[O] String[S] *[A] *[A] *[A] *[A] *[A] *[A]] {com.adobe.crypto::SHA1$~[O]} (uint[U])
  9:setlocal 7
                       [com.adobe.crypto::SHA1$~[O] String[S] *[A] *[A] *[A] *[A] *[A] uint[U]] {com.adobe.crypto::SHA1$~[O]} ()
  11:debug
                       [com.adobe.crypto::SHA1$~[O] String[S] *[A] *[A] *[A] *[A] *[A] uint[U]] {com.adobe.crypto::SHA1$~[O]} ()
  16:debug
                       [com.adobe.crypto::SHA1$~[O] String[S] *[A] *[A] *[A] *[A] *[A] uint[U]] {com.adobe.crypto::SHA1$~[O]} ()
  21:debug
                       [com.adobe.crypto::SHA1$~[O] String[S] *[A] *[A] *[A] *[A] *[A] uint[U]] {com.adobe.crypto::SHA1$~[O]} ()
  26:debug
                       [com.adobe.crypto::SHA1$~[O] String[S] *[A] *[A] *[A] *[A] *[A] uint[U]] {com.adobe.crypto::SHA1$~[O]} ()
  31:debug
                       [com.adobe.crypto::SHA1$~[O] String[S] *[A] *[A] *[A] *[A] *[A] uint[U]] {com.adobe.crypto::SHA1$~[O]} ()
  36:debug
                       [com.adobe.crypto::SHA1$~[O] String[S] *[A] *[A] *[A] *[A] *[A] uint[U]] {com.adobe.crypto::SHA1$~[O]} ()
  41:debugline 102
                       [com.adobe.crypto::SHA1$~[O] String[S] *[A] *[A] *[A] *[A] *[A] uint[U]] {com.adobe.crypto::SHA1$~[O]} ()
  43:getglobalscope
                       [com.adobe.crypto::SHA1$~[O] String[S] *[A] *[A] *[A] *[A] *[A] uint[U]] {com.adobe.crypto::SHA1$~[O]} (global~[O])
  44:getslot 1
                       [com.adobe.crypto::SHA1$~[O] String[S] *[A] *[A] *[A] *[A] *[A] uint[U]] {com.adobe.crypto::SHA1$~[O]} (com.adobe.crypto::SHA1$[O])
  46:getlocal1
                       [com.adobe.crypto::SHA1$~[O] String[S] *[A] *[A] *[A] *[A] *[A] uint[U]] {com.adobe.crypto::SHA1$~[O]} (com.adobe.crypto::SHA1$[O] String[S])
  47:callproperty com.adobe.crypto:SHA1::createBlocksFromString 1
                       [com.adobe.crypto::SHA1$~[O] String[S] *[A] *[A] *[A] *[A] *[A] uint[U]] {com.adobe.crypto::SHA1$~[O]} (Array[O])
  50:coerce Array
                       [com.adobe.crypto::SHA1$~[O] String[S] *[A] *[A] *[A] *[A] *[A] uint[U]] {com.adobe.crypto::SHA1$~[O]} (Array[O])
  52:setlocal2
                       [com.adobe.crypto::SHA1$~[O] String[S] Array[O] *[A] *[A] *[A] *[A] uint[U]] {com.adobe.crypto::SHA1$~[O]} ()
  53:debugline 103
                       [com.adobe.crypto::SHA1$~[O] String[S] Array[O] *[A] *[A] *[A] *[A] uint[U]] {com.adobe.crypto::SHA1$~[O]} ()
  55:findpropstrict com.adobe.crypto:SHA1::hashBlocks
                       [com.adobe.crypto::SHA1$~[O] String[S] Array[O] *[A] *[A] *[A] *[A] uint[U]] {com.adobe.crypto::SHA1$~[O]} (com.adobe.crypto::SHA1$~[O])
  57:getlocal2
                       [com.adobe.crypto::SHA1$~[O] String[S] Array[O] *[A] *[A] *[A] *[A] uint[U]] {com.adobe.crypto::SHA1$~[O]} (com.adobe.crypto::SHA1$~[O] Array[O])
  58:callproperty com.adobe.crypto:SHA1::hashBlocks 1
                       [com.adobe.crypto::SHA1$~[O] String[S] Array[O] *[A] *[A] *[A] *[A] uint[U]] {com.adobe.crypto::SHA1$~[O]} (flash.utils::ByteArray[O])
  61:coerce flash.utils::ByteArray
                       [com.adobe.crypto::SHA1$~[O] String[S] Array[O] *[A] *[A] *[A] *[A] uint[U]] {com.adobe.crypto::SHA1$~[O]} (flash.utils::ByteArray[O])
  63:setlocal3
                       [com.adobe.crypto::SHA1$~[O] String[S] Array[O] flash.utils::ByteArray[O] *[A] *[A] *[A] uint[U]] {com.adobe.crypto::SHA1$~[O]} ()
  64:pushstring """"
                       [com.adobe.crypto::SHA1$~[O] String[S] Array[O] flash.utils::ByteArray[O] *[A] *[A] *[A] uint[U]] {com.adobe.crypto::SHA1$~[O]} (String~[S])
  66:debugline 109
                       [com.adobe.crypto::SHA1$~[O] String[S] Array[O] flash.utils::ByteArray[O] *[A] *[A] *[A] uint[U]] {com.adobe.crypto::SHA1$~[O]} (String~[S])
  68:coerce_s
                       [com.adobe.crypto::SHA1$~[O] String[S] Array[O] flash.utils::ByteArray[O] *[A] *[A] *[A] uint[U]] {com.adobe.crypto::SHA1$~[O]} (String~[S])
  69:setlocal 4
                       [com.adobe.crypto::SHA1$~[O] String[S] Array[O] flash.utils::ByteArray[O] String~[S] *[A] *[A] uint[U]] {com.adobe.crypto::SHA1$~[O]} ()
  71:debugline 110
                       [com.adobe.crypto::SHA1$~[O] String[S] Array[O] flash.utils::ByteArray[O] String~[S] *[A] *[A] uint[U]] {com.adobe.crypto::SHA1$~[O]} ()
  73:getlocal3
                       [com.adobe.crypto::SHA1$~[O] String[S] Array[O] flash.utils::ByteArray[O] String~[S] *[A] *[A] uint[U]] {com.adobe.crypto::SHA1$~[O]} (flash.utils::ByteArray[O])
  74:pushbyte 0
                       [com.adobe.crypto::SHA1$~[O] String[S] Array[O] flash.utils::ByteArray[O] String~[S] *[A] *[A] uint[U]] {com.adobe.crypto::SHA1$~[O]} (flash.utils::ByteArray[O] int[I])
  76:setproperty position
                       [com.adobe.crypto::SHA1$~[O] String[S] Array[O] flash.utils::ByteArray[O] String~[S] *[A] *[A] uint[U]] {com.adobe.crypto::SHA1$~[O]} ()
  78:debugline 111
                       [com.adobe.crypto::SHA1$~[O] String[S] Array[O] flash.utils::ByteArray[O] String~[S] *[A] *[A] uint[U]] {com.adobe.crypto::SHA1$~[O]} ()
  80:pushbyte 0
                       [com.adobe.crypto::SHA1$~[O] String[S] Array[O] flash.utils::ByteArray[O] String~[S] *[A] *[A] uint[U]] {com.adobe.crypto::SHA1$~[O]} (int[I])
  82:convert_i
                       [com.adobe.crypto::SHA1$~[O] String[S] Array[O] flash.utils::ByteArray[O] String~[S] *[A] *[A] uint[U]] {com.adobe.crypto::SHA1$~[O]} (int[I])
  83:setlocal 5
                       [com.adobe.crypto::SHA1$~[O] String[S] Array[O] flash.utils::ByteArray[O] String~[S] int[I] *[A] uint[U]] {com.adobe.crypto::SHA1$~[O]} ()
  85:jump 129
------------------------------------
MERGE FIRST B129:      [com.adobe.crypto::SHA1$~[O] String[S] Array[O] flash.utils::ByteArray[O] String~[S] int[I] *[A] uint[U]] {com.adobe.crypto::SHA1$~[O]} ()
------------------------------------
B129:                  [com.adobe.crypto::SHA1$~[O] String[S] Array[O] flash.utils::ByteArray[O] String~[S] int[I] *[A] uint[U]] {com.adobe.crypto::SHA1$~[O]} ()
  129:getlocal 5
                       [com.adobe.crypto::SHA1$~[O] String[S] Array[O] flash.utils::ByteArray[O] String~[S] int[I] *[A] uint[U]] {com.adobe.crypto::SHA1$~[O]} (int[I])
  131:getlocal3
                       [com.adobe.crypto::SHA1$~[O] String[S] Array[O] flash.utils::ByteArray[O] String~[S] int[I] *[A] uint[U]] {com.adobe.crypto::SHA1$~[O]} (int[I] flash.utils::ByteArray[O])
  132:getproperty length
                       [com.adobe.crypto::SHA1$~[O] String[S] Array[O] flash.utils::ByteArray[O] String~[S] int[I] *[A] uint[U]] {com.adobe.crypto::SHA1$~[O]} (int[I] uint[U])
  134:iflt 89
------------------------------------
MERGE FIRST B89:       [com.adobe.crypto::SHA1$~[O] String[S] Array[O] flash.utils::ByteArray[O] String~[S] int[I] *[A] uint[U]] {com.adobe.crypto::SHA1$~[O]} ()
------------------------------------
                       [com.adobe.crypto::SHA1$~[O] String[S] Array[O] flash.utils::ByteArray[O] String~[S] int[I] *[A] uint[U]] {com.adobe.crypto::SHA1$~[O]} ()
  138:debugline 117
                       [com.adobe.crypto::SHA1$~[O] String[S] Array[O] flash.utils::ByteArray[O] String~[S] int[I] *[A] uint[U]] {com.adobe.crypto::SHA1$~[O]} ()
  140:findpropstrict mx.utils::Base64Encoder
                       [com.adobe.crypto::SHA1$~[O] String[S] Array[O] flash.utils::ByteArray[O] String~[S] int[I] *[A] uint[U]] {com.adobe.crypto::SHA1$~[O]} (Object~[A])
  142:constructprop 14 0
                       [com.adobe.crypto::SHA1$~[O] String[S] Array[O] flash.utils::ByteArray[O] String~[S] int[I] *[A] uint[U]] {com.adobe.crypto::SHA1$~[O]} (*[A])
  145:coerce mx.utils::Base64Encoder
Connection Failure: There was an error while parsing the following HTTP Header line:
Sec-WebSocket-Accept: k9NwkeRGtpHKwr+kcSk29tHaAbs=
Disconnected

Any ideas why?
","I downloaded the as3corelib.swc being used by that project, and ran the following code.
SHA1.hashToBase64('k9NwkeRGtpHKwr+kcSk29tHaAbs=');

In addition to your output, which basically says Flash Player threw an error trying to construct a new Base64Encoder object, I got the following output.
VerifyError: Error #1014: Class mx.utils::Base64Encoder could not be found.

It seems to be a known issue with as3corelib that was never resolved. 
However, this dependency is also open source, so I just downloaded Base64Encoder.as, and added it to my project. After this, the code compiled fine. This should work for your project, as well.
","306","<actionscript-3><apache-flex><websocket><sha>","0","2","1","2013-12-02 22:44:40","20339411","0","","","","","2013-12-02 22:03:57",""
"51500378","SHA1 Message digest to plain-text","How can I turn my message digest into plain-text (getting the original message back). I compute a message digest using the following function. The SHA1 code can be found in https://github.com/tylabs/quicksand_lite/blob/master/sha1.c I can not find a function that will make the conversion for me. Is there any algorithm that can do this?
I am also trying to decrypt and encrypt messages this is where the problem comes from. 
int main()
{

  char qbits[5];
  char rbits[5];
  char ID[SIZE];   //User ID
  char message[SIZE];   //User message
  char shamessage[SIZE]; //The input message digest(sha1 result)

  char xor_result[SIZE]; //Sender XOR result---V
  char xor_result_receiver[SIZE];  //Receiver XOR result
  memset(xor_result, 0, sizeof(char)*SIZE);
  memset(xor_result_receiver, 0, sizeof(char)*SIZE);


  pairing_t pairing;   //The pair of bilinear map

  element_t P, Ppub, s, U, Qid, Sid;
  mpz_t messagehash;
  mpz_init(messagehash);

  printf(""\n############SETUP############\n"");
    printf(""Please enter rbits:"");
  scanf(""%[0-9]"", rbits);
    getchar();
  printf(""\nPlease enter qbits:"");
  scanf(""%[0-9]"", qbits);
    getchar();

  setup_sys(atoi(rbits), atoi(qbits), P, Ppub, pairing, s);
  printf(""System parameters have been set!\n"");
  element_printf(""P = %B\n"", P);
  element_printf(""Ppub = %B\n"", Ppub);


    printf(""###########EXTRACT###########\n"");
    element_init_G1(Qid, pairing);
  element_init_G1(Sid, pairing);
  printf(""Plase enter your ID:"");
  scanf(""%[ a-zA-Z0-9+*-!.,&*@{}$#]"", ID);
  printf(""\nID=%s\n"", ID);
    getchar();
    get_private_key(ID, pairing, s, Sid);
  get_public_key(ID, pairing, Qid);
  printf(""##########ENCRPTION##########\n"");
    printf(""\nPlase enter the message to encrypt:"");
  scanf(""%[ a-zA-Z0-9+*-!.,&*@{}$#]"", message);
  getchar();
  printf(""The original message=%s"", message);

    sha_fun(message, shamessage);   //Get the message digest
  printf(""\nThe message hash=%s\n"", shamessage);

    element_init_G1(U, pairing);
  encryption(shamessage, ID, P, Ppub, U, xor_result, pairing);
  printf(""Send <U,V> to the receiver!\n"");

  printf(""##########DECRYPTION##########"");
  decryption(Sid, pairing, U, xor_result, xor_result_receiver);
  printf(""\nThe recovery message digest is %s\n"", xor_result_receiver);
  printf(""The original message digest is %s\n"", shamessage);

  if (strcmp(xor_result_receiver, shamessage) == 0) {

    printf(""Yeah!The message has been decrpted!\n"");
  }

  else {
    printf(""Oops!The message can not be decrpted!\n"");
  }

  //Free space
  element_clear(P);
  element_clear(Ppub);
  element_clear(Qid);
  element_clear(Sid);
  element_clear(U);
  element_clear(s);
  pairing_clear(pairing);

  return 0;
}

And my output is a message digest but I need it to be plain-text. 
############SETUP############
Please enter rbits:6

Please enter qbits:6
System parameters have been set!
P = [456, 103]
Ppub = [176, 88]
###########EXTRACT###########
Plase enter your ID:friedrich12

ID=friedrich12
Private key Sid = [184, 383]

Public key Qid = [99, 84]
##########ENCRPTION##########

Plase enter the message to encrypt:code
The original message=code
The message hash=E6FB06210FAFC02FD7479DDBED2D042CC3A5155E
U = [456, 103]
Public key Qid = [99, 84]

V=3D958162F64322BFC65D7655DFE6B61D89945F35
Send <U,V> to the receiver!
##########DECRYPTION##########
The recovery message digest is E6FB06210FAFC02FD7479DDBED2D042CC3A5155E
The original message digest is E6FB06210FAFC02FD7479DDBED2D042CC3A5155E
Yeah!The message has been decrpted!

","First, it is mathematically impossible to recover an original message from a message digest. A message digest is a small amount of information that is intended to act as a sort of fingerprint for a large amount of information. For example, in one of the simplest forms, a message digest might be simply the sum of the numerical values of the characters in a message. You obviously cannot recover the original message just from the sum of its characters. (Two messages that are anagrams would have the same sum, so the sum would not tell you which of the two messages was the original. And a message changed by increasing one character and decreasing another would have the same sum as the original message, so, again, the sum would not distinguish them.) This is just an example—actual cryptographic hashes are more complicated than simple sums.
Second, cryptographic hashes and the message digests they produce are usually designed to be difficult to invert. It is intended to be difficult to find any message whose digest equals a given value.
If you want cryptographic functions that change a message to a cryptic form and then invert it, you are looking for encryption and decryption, not hashes or digests.
","305","<c><encryption><sha>","0","4","2","2018-07-24 17:24:09","51501073","13","","6748371","","2018-07-24 14:05:18","2018-07-24 13:50:54",""
"51500378","SHA1 Message digest to plain-text","How can I turn my message digest into plain-text (getting the original message back). I compute a message digest using the following function. The SHA1 code can be found in https://github.com/tylabs/quicksand_lite/blob/master/sha1.c I can not find a function that will make the conversion for me. Is there any algorithm that can do this?
I am also trying to decrypt and encrypt messages this is where the problem comes from. 
int main()
{

  char qbits[5];
  char rbits[5];
  char ID[SIZE];   //User ID
  char message[SIZE];   //User message
  char shamessage[SIZE]; //The input message digest(sha1 result)

  char xor_result[SIZE]; //Sender XOR result---V
  char xor_result_receiver[SIZE];  //Receiver XOR result
  memset(xor_result, 0, sizeof(char)*SIZE);
  memset(xor_result_receiver, 0, sizeof(char)*SIZE);


  pairing_t pairing;   //The pair of bilinear map

  element_t P, Ppub, s, U, Qid, Sid;
  mpz_t messagehash;
  mpz_init(messagehash);

  printf(""\n############SETUP############\n"");
    printf(""Please enter rbits:"");
  scanf(""%[0-9]"", rbits);
    getchar();
  printf(""\nPlease enter qbits:"");
  scanf(""%[0-9]"", qbits);
    getchar();

  setup_sys(atoi(rbits), atoi(qbits), P, Ppub, pairing, s);
  printf(""System parameters have been set!\n"");
  element_printf(""P = %B\n"", P);
  element_printf(""Ppub = %B\n"", Ppub);


    printf(""###########EXTRACT###########\n"");
    element_init_G1(Qid, pairing);
  element_init_G1(Sid, pairing);
  printf(""Plase enter your ID:"");
  scanf(""%[ a-zA-Z0-9+*-!.,&*@{}$#]"", ID);
  printf(""\nID=%s\n"", ID);
    getchar();
    get_private_key(ID, pairing, s, Sid);
  get_public_key(ID, pairing, Qid);
  printf(""##########ENCRPTION##########\n"");
    printf(""\nPlase enter the message to encrypt:"");
  scanf(""%[ a-zA-Z0-9+*-!.,&*@{}$#]"", message);
  getchar();
  printf(""The original message=%s"", message);

    sha_fun(message, shamessage);   //Get the message digest
  printf(""\nThe message hash=%s\n"", shamessage);

    element_init_G1(U, pairing);
  encryption(shamessage, ID, P, Ppub, U, xor_result, pairing);
  printf(""Send <U,V> to the receiver!\n"");

  printf(""##########DECRYPTION##########"");
  decryption(Sid, pairing, U, xor_result, xor_result_receiver);
  printf(""\nThe recovery message digest is %s\n"", xor_result_receiver);
  printf(""The original message digest is %s\n"", shamessage);

  if (strcmp(xor_result_receiver, shamessage) == 0) {

    printf(""Yeah!The message has been decrpted!\n"");
  }

  else {
    printf(""Oops!The message can not be decrpted!\n"");
  }

  //Free space
  element_clear(P);
  element_clear(Ppub);
  element_clear(Qid);
  element_clear(Sid);
  element_clear(U);
  element_clear(s);
  pairing_clear(pairing);

  return 0;
}

And my output is a message digest but I need it to be plain-text. 
############SETUP############
Please enter rbits:6

Please enter qbits:6
System parameters have been set!
P = [456, 103]
Ppub = [176, 88]
###########EXTRACT###########
Plase enter your ID:friedrich12

ID=friedrich12
Private key Sid = [184, 383]

Public key Qid = [99, 84]
##########ENCRPTION##########

Plase enter the message to encrypt:code
The original message=code
The message hash=E6FB06210FAFC02FD7479DDBED2D042CC3A5155E
U = [456, 103]
Public key Qid = [99, 84]

V=3D958162F64322BFC65D7655DFE6B61D89945F35
Send <U,V> to the receiver!
##########DECRYPTION##########
The recovery message digest is E6FB06210FAFC02FD7479DDBED2D042CC3A5155E
The original message digest is E6FB06210FAFC02FD7479DDBED2D042CC3A5155E
Yeah!The message has been decrpted!

","If you know every possible messages beforehand, you have the list of every of them, you can produces the SHA-1 digests for each, hoping there's no collision (btw, if you found one, please share). Then, at receive time, you lookup which SHA-1 you received and match with the known possible messages.
It's not secure, as an observer could identify the behavior of your system in the response of every SHA-1, or it could have access to the database of known message.
So it's almost pointless.
You could assign each message a arbitrary number, it would work the same, and it would be faster and shorter.
","305","<c><encryption><sha>","0","0","2","2018-07-24 17:24:09","51501073","13","","6748371","","2018-07-24 14:05:18","2018-07-24 13:50:54",""
"34522863","HMAC produces wrong results","All of this is new to me so please forgive my noobish question.
I'm trying to figure out HMAC step by step. 
Let's say I have a following SHA-1 method: 
public static string SHA_1(string input) 
{
    SHA1CryptoServiceProvider mySha = new SHA1CryptoServiceProvider();
    string temp = BitConverter.ToString(mySha.ComputeHash(Encoding.UTF8.GetBytes(input)));
    temp = temp.Replace(""-"", """").ToUpper();
    return temp;
} 

It receives a plain text string;
Let's say my secret key is """" (empty string) and so is the message;
The HMAC is supposed to be: fbdb1d1b18aa6c08324b7d64b71fb76370690e1d
Now that's where I am a bit lost. I'll write down the steps as I understand them and please correct me if I am wrong (or where I am wrong rather). 

If the key is shorter than 64 bytes I need to pad it with 0's. 
So the padded key is 0x00 (x64 - because the key is empty, otherwise it's 64-key.Length);
Two constants each 64 bytes long are:

ipad = 0x36 (x64)
opad = 0x5c (x64)

because the key is empty string XOR results in the same opad and ipad, i.e.

ipad XOR key = ipad
opad XOR key = opad

At this point all left to do is to compute the HMAC itself. 

So: HMAC = Hash(opad || Hash(ipad || message)) and that should be it. 
But I am not sure how to execute this. 
The message is a text string. opad and ipad are uint/byte arrays. I can convert them to ASCII as well and receive respectively:
ipad_str = ""6666666666..."" x64
opad_str = ""\\\\\\\...."" x64
Now my HMAC is supposed to be: 
HMAC = SHA_1(""\\\\\\....""+ SHA_1(""6666666....""))
but the result doesn't match. Instead it is: 
4DCF4B8D646EBD77EB704A9240BFA429078131A2 
What am I missing here? Does the empty message have to be padded as well? 
I suspect that I misinterpret the concatenation, but I am not sure what other options I have. Should I leave ipad and opad as hex? SHA1 methods receives string so I must convert to some sort of a string, I just can't figure out what type exactly.  
Any help would be greatly appreciated. 
Thanks in advance and Happy New Year!
","The problem with my method was so obvious, it's not even funny. While appending the result of the opad and inner hash I left the inner hash in hex format but treated it as ASCII, as a result 104 bytes were sent to the outer hash instead of 84. So the solution is something like: HMAC = SHA_1(opad + HexToASCII(SHA_1(ipad)));
","303","<c#><sha><hmac><hmacsha1>","2","2","1","2016-01-02 02:30:44","","10","","2006048","","2015-12-30 04:53:21","2015-12-30 04:22:51",""
"7636629","Hashing gone wrong","I'm using the same function to hash values for comparison during login as I am to hash the passwords when users register:
Public Shared Function Compute(ByVal text As String, ByVal algorithm As String, Optional ByVal salt() As Byte = Nothing) As String
    If salt Is Nothing Then
        Dim saltSize As Integer = 8
        salt = New Byte(saltSize - 1) {}

        Dim rng As New RNGCryptoServiceProvider
        rng.GetNonZeroBytes(salt)
    End If

    Dim textBytes As Byte() = Encoding.UTF8.GetBytes(text)
    Dim saltedTextBytes() As Byte = New Byte(textBytes.Length + salt.Length - 1) {}
    For i As Integer = 0 To textBytes.Length - 1
        saltedTextBytes(i) = textBytes(i)
    Next i

    For i As Integer = 0 To salt.Length - 1
        saltedTextBytes(textBytes.Length + i) = salt(i)
    Next i

    Dim hash As HashAlgorithm
    If algorithm Is Nothing Then
        algorithm = """"
    End If

    Select Case algorithm.ToUpper
        Case ""SHA1"" : hash = New SHA1Managed
        Case ""SHA256"" : hash = New SHA256Managed
        Case ""SHA384"" : hash = New SHA384Managed
        Case ""SHA512"" : hash = New SHA512Managed
        Case Else : hash = New MD5CryptoServiceProvider
    End Select

    Dim hashBytes As Byte() = hash.ComputeHash(saltedTextBytes)
    Dim saltedHash() As Byte = New Byte(hashBytes.Length + salt.Length - 1) {}
    For i As Integer = 0 To hashBytes.Length - 1
        saltedHash(i) = hashBytes(i)
    Next i

    For i As Integer = 0 To salt.Length - 1
        saltedHash(hashBytes.Length + i) = salt(i)
    Next i

    Dim hashValue As String = Convert.ToBase64String(saltedHash)

    Return Left(hashValue, 36)
End Function

My problem is that when I try to log in on an account whose password was hashed by this function, the hashed values don't match up. I think I'm skipping a step or something.
Here's the code for user account creation:
        ' The email address needs to be valid
        Dim pattern As String = ""^(?("""")("""".+?""""@)|(([0-9a-zA-Z]((\.(?!\.))|[-!#\$%&'\*\+/=\?\^`\{\}\|~\w])*)(?<=[0-9a-zA-Z])@))(?(\[)(\[(\d{1,3}\.){3}\d{1,3}\])|(([0-9a-zA-Z][-\w]*[0-9a-zA-Z]\.)+[a-zA-Z]{2,6}))$""
        Dim match As Match = Regex.Match(txtEmail.Text, pattern)
        If match.Success Then
            'Hash the user's password before entering it into the database.
            Dim pass As String = Crypt.Compute(txtPass.Text, ""SHA512"", Nothing)

            ' Enter the information from the form into the database.
            Dim sql As String = ""INSERT INTO Users(Username, Password, EmailAddress) "" & _
                ""VALUES(@User, @Pass, @Email)""
            Dim cmd As New SqlCommand(sql, conn)
            cmd.Parameters.AddWithValue(""@User"", txtName.Text)
            cmd.Parameters.AddWithValue(""@Pass"", pass)
            cmd.Parameters.AddWithValue(""@Email"", txtEmail.Text)

            conn.Open()
            cmd.ExecuteNonQuery()
            conn.Close()
        Else
            lblError.Text = ""Invalid email address. Please correct.""
            lblError.ForeColor = Drawing.Color.Red
        End If

There are more checks that aren't included here that aren't relevant to my problem.
Here's my user login:
            Dim pass As String = Crypt.Compute(txtPass.Text, ""SHA512"", Nothing)

            Dim UserData As New DataSet
            Dim UserAdapter As New SqlDataAdapter
            UserAdapter.SelectCommand = New SqlCommand(""SELECT * FROM Users "" & _
                                                       ""WHERE Username = @User AND Password = @Pass"", conn)
            UserAdapter.SelectCommand.Parameters.AddWithValue(""@User"", txtUser.Text)
            UserAdapter.SelectCommand.Parameters.AddWithValue(""@Pass"", pass)
            UserAdapter.Fill(UserData)

            If UserData.Tables(0).Rows.Count <> 1 Then
                lblError.Text = ""Invalid username or password.""
                lblError.ForeColor = Drawing.Color.Red
                Session(""LoginAttempt"") = CInt(Session(""LoginAttempt"")) + 1
            Else
                Session(""LoggedIn"") = True
                Response.Redirect(""Home.aspx"")
            End If

As far as I can see, there is no difference in the hashing I've done here.
Does anyone have any ideas?
","
When you creating an account by inserting into the table, you are using txtName.Text for the username, but when checking the credentials you are using txtUser.Text.
Why are you using a random salt?  Doesn't the salt have to be the same for every encryption?  I've pasted your code into a new project, and when I run the Compute method twice in a row for the same password, I get two different results... obviously that won't work.  Try passing in a salt value instead of Nothing, and use the same salt for creating accounts and comparing login.  Here's some sample code that works:
Dim thePass As String = ""MyPassword""
Dim theSalt As String = ""salt""

Dim pass As String = Compute(thePass, ""SHA512"", Encoding.UTF8.GetBytes(theSalt))
Console.WriteLine(pass)
Dim pass2 As String = Compute(thePass, ""SHA512"", Encoding.UTF8.GetBytes(theSalt))
Console.WriteLine(pass2) 'pass and pass2 are identical


Hope this helps!
","302","<vb.net><hash><salt><sha>","2","3","2","2011-10-03 15:07:52","7636702","2","","475766","","2011-10-03 15:02:44","2011-10-03 14:47:23",""
"7636629","Hashing gone wrong","I'm using the same function to hash values for comparison during login as I am to hash the passwords when users register:
Public Shared Function Compute(ByVal text As String, ByVal algorithm As String, Optional ByVal salt() As Byte = Nothing) As String
    If salt Is Nothing Then
        Dim saltSize As Integer = 8
        salt = New Byte(saltSize - 1) {}

        Dim rng As New RNGCryptoServiceProvider
        rng.GetNonZeroBytes(salt)
    End If

    Dim textBytes As Byte() = Encoding.UTF8.GetBytes(text)
    Dim saltedTextBytes() As Byte = New Byte(textBytes.Length + salt.Length - 1) {}
    For i As Integer = 0 To textBytes.Length - 1
        saltedTextBytes(i) = textBytes(i)
    Next i

    For i As Integer = 0 To salt.Length - 1
        saltedTextBytes(textBytes.Length + i) = salt(i)
    Next i

    Dim hash As HashAlgorithm
    If algorithm Is Nothing Then
        algorithm = """"
    End If

    Select Case algorithm.ToUpper
        Case ""SHA1"" : hash = New SHA1Managed
        Case ""SHA256"" : hash = New SHA256Managed
        Case ""SHA384"" : hash = New SHA384Managed
        Case ""SHA512"" : hash = New SHA512Managed
        Case Else : hash = New MD5CryptoServiceProvider
    End Select

    Dim hashBytes As Byte() = hash.ComputeHash(saltedTextBytes)
    Dim saltedHash() As Byte = New Byte(hashBytes.Length + salt.Length - 1) {}
    For i As Integer = 0 To hashBytes.Length - 1
        saltedHash(i) = hashBytes(i)
    Next i

    For i As Integer = 0 To salt.Length - 1
        saltedHash(hashBytes.Length + i) = salt(i)
    Next i

    Dim hashValue As String = Convert.ToBase64String(saltedHash)

    Return Left(hashValue, 36)
End Function

My problem is that when I try to log in on an account whose password was hashed by this function, the hashed values don't match up. I think I'm skipping a step or something.
Here's the code for user account creation:
        ' The email address needs to be valid
        Dim pattern As String = ""^(?("""")("""".+?""""@)|(([0-9a-zA-Z]((\.(?!\.))|[-!#\$%&'\*\+/=\?\^`\{\}\|~\w])*)(?<=[0-9a-zA-Z])@))(?(\[)(\[(\d{1,3}\.){3}\d{1,3}\])|(([0-9a-zA-Z][-\w]*[0-9a-zA-Z]\.)+[a-zA-Z]{2,6}))$""
        Dim match As Match = Regex.Match(txtEmail.Text, pattern)
        If match.Success Then
            'Hash the user's password before entering it into the database.
            Dim pass As String = Crypt.Compute(txtPass.Text, ""SHA512"", Nothing)

            ' Enter the information from the form into the database.
            Dim sql As String = ""INSERT INTO Users(Username, Password, EmailAddress) "" & _
                ""VALUES(@User, @Pass, @Email)""
            Dim cmd As New SqlCommand(sql, conn)
            cmd.Parameters.AddWithValue(""@User"", txtName.Text)
            cmd.Parameters.AddWithValue(""@Pass"", pass)
            cmd.Parameters.AddWithValue(""@Email"", txtEmail.Text)

            conn.Open()
            cmd.ExecuteNonQuery()
            conn.Close()
        Else
            lblError.Text = ""Invalid email address. Please correct.""
            lblError.ForeColor = Drawing.Color.Red
        End If

There are more checks that aren't included here that aren't relevant to my problem.
Here's my user login:
            Dim pass As String = Crypt.Compute(txtPass.Text, ""SHA512"", Nothing)

            Dim UserData As New DataSet
            Dim UserAdapter As New SqlDataAdapter
            UserAdapter.SelectCommand = New SqlCommand(""SELECT * FROM Users "" & _
                                                       ""WHERE Username = @User AND Password = @Pass"", conn)
            UserAdapter.SelectCommand.Parameters.AddWithValue(""@User"", txtUser.Text)
            UserAdapter.SelectCommand.Parameters.AddWithValue(""@Pass"", pass)
            UserAdapter.Fill(UserData)

            If UserData.Tables(0).Rows.Count <> 1 Then
                lblError.Text = ""Invalid username or password.""
                lblError.ForeColor = Drawing.Color.Red
                Session(""LoginAttempt"") = CInt(Session(""LoginAttempt"")) + 1
            Else
                Session(""LoggedIn"") = True
                Response.Redirect(""Home.aspx"")
            End If

As far as I can see, there is no difference in the hashing I've done here.
Does anyone have any ideas?
","Unless I'm missing it (not really familiar with the language), you don't store the salt anywhere.
You have to use the same salt you've used when creating the account for the verification.
On a side note: You can either generate a random salt for every user account or use a fixed salt for all accounts. Either method works. The first is theoretically more secure, but if the salt is long enough, both are fine for practical purposes.
","302","<vb.net><hash><salt><sha>","2","2","2","2011-10-03 15:07:52","7636702","2","","475766","","2011-10-03 15:02:44","2011-10-03 14:47:23",""
"45033876","what is difference between sha1 certificate and sha2 certificate?","I know the difference between sha1 and sha 2 algorithm but when we create a certificate specifying the sha1 vs sha2 makes what difference to the ssl certificate?
Let me know if you need more information.
Thanks,
Naga
","The difference between those certificates is the strength of the hash function used for the digital signature created by the issuer of the certificate. SHA-1 is considered too weak since hash collision attacks are possible. Such a collision would allow the creation of a new certificate by the attacker which uses an existing signature and is thus considered trusted. The SHA-2 family of hash functions is considered strong enough and thus used today, mostly  with SHA-256. 
","302","<ssl><openssl><ssl-certificate><sha><digital-certificate>","-1","0","1","2017-07-11 12:31:03","45034734","0","","","","","2017-07-11 11:54:18",""
"9616120","Securing rest service","I’m designing a REST service that needs to be well secured against unauthorized access. I’m thinking about requiring a security digest that’s generated by hashing all request parameters plus a secret key with sha-256 and making the service only available over https. Can anyone tell me if this is sufficient security? 
","First of all, make sure you are using en HMAC, not a plain SHA-256 to generate the ""security digest"".
Next, what are you going to put into the input of this digest? You'll want to have at least the method, the URI, the payload, and very possibly most of the headers of the request (there are many headers that affect the meaning of an HTTP request that are important in a REST context). That might be difficult depending on what HTTP client you are using because the client might set or change headers in a way that you do not directly control.
Finally, where are you going to put this digest? A custom header (e.g. X-Request-Authenticator) seems sensible, or maybe a cookie if the client is running in a web browser.
I would recommend using existing tools if you can, instead of creating something yourself. Using SSL already gives you message integrity protection so start with that. Then, if you just need simple access control, HTTP basic auth will work just fine with a REST request. Or you could have the client present a certificate and verify it.
","299","<security><rest><ssl><sha><digest>","0","0","1","2012-03-08 17:00:05","","3","","","","","2012-03-08 10:26:26",""
"28655553","Get Matching SHA256 Algorithm - Perl","Hi I'm trying to generate a similar sha256 hex, but I can't seem to get a matching one. I want to generate just about any password using a random key.
In this case, I'm using test123 : ecd71870d1963316a97e3ac3408c9835ad8cf0f3c1bc703527c30265534f75ae
Here is my code:
 print ""Final Hash: "" . generateHash(""ecd71870d1963316a97e3ac3408c9835ad8cf0f3c1bc703527c30265534f75ae"", ""fx4;)@?%"") . chr(10);

 sub generateHash {
   my ($strPass, $strLoginKey) = @_;
   my $strHash = encryptPass(uc($strPass), $strLoginKey);                            
   return $strHash;
 }

sub encryptPass {
   my ($strPassword, $strKey) = @_;
   my $strSalt = 'Y(02.>\'H}t"":E1';
   my $strSwapped = swapSHA($strPassword);
   print ""First Swap: "" . $strSwapped . chr(10);
   my $strHash = sha256_hex($strSwapped . $strKey . $strSalt);
   print ""Hashed Into: "" . $strHash . chr(10);
   my $strSwappedHash = swapSHA($strHash) . chr(10);
   print ""Last Swapped: "" . $strSwappedHash . chr(10);
   return $strSwappedHash;
}

sub swapSHA {
   my ($strHash) = @_;
   my $strSwapped = substr($strHash, 32, 32);
   $strSwapped .= substr($strHash, 0, 32);
   return $strSwapped;
}

Any help would be greatly appreciated! 
The output I get:
Original Hash: ecd71870d1963316a97e3ac3408c9835ad8cf0f3c1bc703527c30265534f75ae
Hashed Into: 34b6bdd73b3943d7baebf7d0ff54934849a38ee09c387435727e2b88566b4b85
     Last Swapped: 49a38ee09c387435727e2b88566b4b8534b6bdd73b3943d7baebf7d0ff549348 
    Final Hash: 34b6bdd73b3943d7baebf7d0ff54934849a38ee09c387435727e2b88566b4b85
I am trying to make the output have final value same as input
Final Hash: ecd71870d1963316a97e3ac3408c9835ad8cf0f3c1bc703527c30265534f75ae

and I want to do this by reversing the ""Hashed Into"" value.
","SHA, as a hashing algorithm, is designed to prevent collisions. i.e. part of its power, and usefulness, is in limiting the strings which will hash to the same resultant value.
It sounds like you want to find a second string which will hash to the same hashed value as test123 hashes to. This kind of goes the intent of using SHA in the first place.
It is possible to brute force the values with SHA, i.e. given a hashed value, you can brute force the value that was hashed by computing hashes and comparing the hashed value to the target value. This will take some time. Other algorithms, such as bcrypt, are more difficult to brute force, but are more computationally expensive for you also.
Here is another post related to brute forcing SHA-512, which is effectively equivalent in algorithm to SHA-256. The linked post is Java as opposed to Perl, but the concepts are language agnostic. How long to brute force a salted SHA-512 hash? (salt provided)
","297","<perl><sha>","0","1","3","2015-02-23 12:15:58","","5","","2524169","","2015-02-22 11:33:42","2015-02-22 07:27:56",""
"28655553","Get Matching SHA256 Algorithm - Perl","Hi I'm trying to generate a similar sha256 hex, but I can't seem to get a matching one. I want to generate just about any password using a random key.
In this case, I'm using test123 : ecd71870d1963316a97e3ac3408c9835ad8cf0f3c1bc703527c30265534f75ae
Here is my code:
 print ""Final Hash: "" . generateHash(""ecd71870d1963316a97e3ac3408c9835ad8cf0f3c1bc703527c30265534f75ae"", ""fx4;)@?%"") . chr(10);

 sub generateHash {
   my ($strPass, $strLoginKey) = @_;
   my $strHash = encryptPass(uc($strPass), $strLoginKey);                            
   return $strHash;
 }

sub encryptPass {
   my ($strPassword, $strKey) = @_;
   my $strSalt = 'Y(02.>\'H}t"":E1';
   my $strSwapped = swapSHA($strPassword);
   print ""First Swap: "" . $strSwapped . chr(10);
   my $strHash = sha256_hex($strSwapped . $strKey . $strSalt);
   print ""Hashed Into: "" . $strHash . chr(10);
   my $strSwappedHash = swapSHA($strHash) . chr(10);
   print ""Last Swapped: "" . $strSwappedHash . chr(10);
   return $strSwappedHash;
}

sub swapSHA {
   my ($strHash) = @_;
   my $strSwapped = substr($strHash, 32, 32);
   $strSwapped .= substr($strHash, 0, 32);
   return $strSwapped;
}

Any help would be greatly appreciated! 
The output I get:
Original Hash: ecd71870d1963316a97e3ac3408c9835ad8cf0f3c1bc703527c30265534f75ae
Hashed Into: 34b6bdd73b3943d7baebf7d0ff54934849a38ee09c387435727e2b88566b4b85
     Last Swapped: 49a38ee09c387435727e2b88566b4b8534b6bdd73b3943d7baebf7d0ff549348 
    Final Hash: 34b6bdd73b3943d7baebf7d0ff54934849a38ee09c387435727e2b88566b4b85
I am trying to make the output have final value same as input
Final Hash: ecd71870d1963316a97e3ac3408c9835ad8cf0f3c1bc703527c30265534f75ae

and I want to do this by reversing the ""Hashed Into"" value.
","You're badly misunderstanding what a hash is for. It's a ONE WAY street by design. It's also designed to have a very low probability of 'collision' - two source values that hash to the same result. And by 'very low' I mean 'for practical purposes, it doesn't'. A constrained string - such as a password - simply won't do it. 
So what typically happens for passwords - my client takes my password, generates a hash, sends it to the server. 
The server compares that against it's list - if the hash matches, we assume that my password was correct. This means at no point is my password sent 'in the clear' nor is possible to work out what it was by grabbing the hash. 
To avoid duplicates showing up (e.g. two people with the same password) usually you'll hash some unique values. Simplistically - username + password, when hashed.
The purpose of authenticating against hashes, is to ensure the cleartext password is never required to be held anywhere - and that is all. You still need to secure you communication channel (to avoid replay attacks) and you still need to protect against brute force guessing of password. 
But brute forcing hashes is by design an expensive thing to attempt. You will see places where 'rainbow tables' exist, where people have taken every valid password string, and hashed it, so they can rapidly crack retrieved hashes from the server. These are big, and took a long time to generate initially though, and are defeated at least partially by salting or embedding usernames into the hash. 
But I cannot re-iterate strongly enough - don't ever hand roll your own security unless you're REALLY sure what's going on. You'll build in weaknesses that you didn't even know existed, and your only 'security' is that no one's bothered to look yet. 
","297","<perl><sha>","0","1","3","2015-02-23 12:15:58","","5","","2524169","","2015-02-22 11:33:42","2015-02-22 07:27:56",""
"28655553","Get Matching SHA256 Algorithm - Perl","Hi I'm trying to generate a similar sha256 hex, but I can't seem to get a matching one. I want to generate just about any password using a random key.
In this case, I'm using test123 : ecd71870d1963316a97e3ac3408c9835ad8cf0f3c1bc703527c30265534f75ae
Here is my code:
 print ""Final Hash: "" . generateHash(""ecd71870d1963316a97e3ac3408c9835ad8cf0f3c1bc703527c30265534f75ae"", ""fx4;)@?%"") . chr(10);

 sub generateHash {
   my ($strPass, $strLoginKey) = @_;
   my $strHash = encryptPass(uc($strPass), $strLoginKey);                            
   return $strHash;
 }

sub encryptPass {
   my ($strPassword, $strKey) = @_;
   my $strSalt = 'Y(02.>\'H}t"":E1';
   my $strSwapped = swapSHA($strPassword);
   print ""First Swap: "" . $strSwapped . chr(10);
   my $strHash = sha256_hex($strSwapped . $strKey . $strSalt);
   print ""Hashed Into: "" . $strHash . chr(10);
   my $strSwappedHash = swapSHA($strHash) . chr(10);
   print ""Last Swapped: "" . $strSwappedHash . chr(10);
   return $strSwappedHash;
}

sub swapSHA {
   my ($strHash) = @_;
   my $strSwapped = substr($strHash, 32, 32);
   $strSwapped .= substr($strHash, 0, 32);
   return $strSwapped;
}

Any help would be greatly appreciated! 
The output I get:
Original Hash: ecd71870d1963316a97e3ac3408c9835ad8cf0f3c1bc703527c30265534f75ae
Hashed Into: 34b6bdd73b3943d7baebf7d0ff54934849a38ee09c387435727e2b88566b4b85
     Last Swapped: 49a38ee09c387435727e2b88566b4b8534b6bdd73b3943d7baebf7d0ff549348 
    Final Hash: 34b6bdd73b3943d7baebf7d0ff54934849a38ee09c387435727e2b88566b4b85
I am trying to make the output have final value same as input
Final Hash: ecd71870d1963316a97e3ac3408c9835ad8cf0f3c1bc703527c30265534f75ae

and I want to do this by reversing the ""Hashed Into"" value.
","You should not do this.  It is insecure and vulnerable to dictionary attacks.
The correct way to turn passwords into things you store, is to use a PBKDF like ""bcrypt""  (password-based-key-derivation-function).
Check out Digest::Bcrypt
Word of caution: if anyone ever tells you (or helps you) to use a ""hash"" for storing passwords, they do not know anything about security or cryptography.  Smile at them, and ignore everything they say next.
","297","<perl><sha>","0","0","3","2015-02-23 12:15:58","","5","","2524169","","2015-02-22 11:33:42","2015-02-22 07:27:56",""
"10985153","Hash Security Vulnerability - How to Fix?","I've developed my application to use salted SHA-512 password hashes.
If a hacker were to obtain the hash, what can I do to protect against the hacker using Greasemonkey to alter the login page so that the password is not hashed?  The attack vector I foresee would enable them to type the hash they've acquired into the password input and then the Greasemonkey-altered page sends that info as is (w/o hashing the entered password which is the actual hash).  
That is just one example of how an acquired hash could be used.  There are other ways the site's code could be altered with Greasemonkey to achieve the same result.
I can't think of any ways to prevent / protect against this type of attack.
Has anyone here come up with something?
","Hash your passwords on the server. Use SSL to protect over the wire.
","291","<javascript><security><greasemonkey><sha>","1","7","2","2012-06-11 21:08:05","10985183","5","","","","","2012-06-11 17:58:14",""
"10985153","Hash Security Vulnerability - How to Fix?","I've developed my application to use salted SHA-512 password hashes.
If a hacker were to obtain the hash, what can I do to protect against the hacker using Greasemonkey to alter the login page so that the password is not hashed?  The attack vector I foresee would enable them to type the hash they've acquired into the password input and then the Greasemonkey-altered page sends that info as is (w/o hashing the entered password which is the actual hash).  
That is just one example of how an acquired hash could be used.  There are other ways the site's code could be altered with Greasemonkey to achieve the same result.
I can't think of any ways to prevent / protect against this type of attack.
Has anyone here come up with something?
","This question is about vulnerability to Greasemonkey intercepting passwords, right?
In that case, SSL does nothing to protect against theft of the user's credentials, the password (or hash, or whatever) will be obtained right from the user's browser and transmitted to the bad guys via GM_xmlhttpRequest().
If you try to encode or hash the password, client-side, Greasemonkey can intercept or even replace the responsible JS.
See ""Can a website know if I am running a userscript?"", you can make it harder for a script writer but, ultimately, if the bad-guys can get the user to install a Greasemonkey script (or worse, a full-on add-on/extension) then you can only make it harder -- not impossible -- for the user's account to be compromised.
I wouldn't even worry about it until/unless you have evidence that a malicious script or add-on is in use.  Ultimately, the user is responsible for keeping his browser, and client-side interactions, secure.
Things you can do to make it harder (not impossible) for a scripter:

Monitor your logs, checking for unusual activity (should be doing this anyway).
Take protections against bots in general, see ""When the bots attack!"", for example.
Warn user(s) if an actual script or ploy is detected.  
Monitor the users' accounts/actions for unusual activity.
You can intercept the password, as it is typed, with JS and one-time encode some how.  This will filter out the causal scripters but not the determined ones. Note that I do not recommend this, just including it for completeness.
Put the password entry in a Flash dialog.  Pure Greasemonkey has a hard time interacting with Flash.  Again, I don't think this is cost-effective, but include it for completeness. 
Do NOT require any more tedious steps for legit users (one-time passwords, third channel authentication, etc.).  This will only annoy the ever-loving heck out of your victims until they find a better alternative or workarounds (which they will).

","291","<javascript><security><greasemonkey><sha>","1","1","2","2012-06-11 21:08:05","10985183","5","","","","","2012-06-11 17:58:14",""
"45573292","Is it possible to convert from one hash to another?","If I give you the MD5 checksum of a string, can you generate the SHA checksum?
Or Vice Versa?
If I give you an MD5 checksum and a SHA checksum, can you tell me whether they're generated from the same source string?
(Obviously I'm excluding anything like locating the source string from a rainbow table, etc. etc.)
","No. Both are one-way hashes, so the information contained in the original source string is lost in the checksum.
Even if you do have the ""original"" string as you say, there will be some other data out there that when hashed, results in a collision. This is because MD5 and SHA1 are not perfect hash functions. In the case of MD5, each hash can potentially have an infinite number of collisions. Then there is no guarantee that the generated SHA checksum of the ""original"" string is actually what you seek.
Disclaimer: I have very little experience with the theoretical side, so you may want to verify with other resources.
","288","<md5><sha>","1","2","1","2019-01-26 08:19:42","45573391","0","","1662268","","2019-01-26 08:19:42","2017-08-08 16:13:53",""
"46490323","Enable Java sha1 raw mode like php sha1","I get a problem with php.sha1 and my java code.
My php code
echo base64_encode(sha1(""test"", TRUE));
qUqP5cyxm6YcTAhz05Hph5gvu9M=

And my java code is:
 static String Hash(String input) throws Exception {

    MessageDigest mDigest = MessageDigest.getInstance(""SHA1"");
    byte[] result = mDigest.digest(input.getBytes());
    StringBuffer sb = new StringBuffer();
    for (int i = 0; i < result.length; i++) {
       sb.append((result[i / Byte.SIZE] << i % Byte.SIZE & 0x80) == 0 ? '0' : '1');
    }
    return base64_encode(sb.toString());

}

output MTAxMDEwMDEwMTAwMTAxMDEwMDA=
How should I change the loop to get equal strings?
","This one should works like RAW SHA-1
String base64 = 
Base64.getEncoder().encodeToString(MessageDigest.
getInstance(""SHA-1"").digest(s.getBytes(""ISO-8859-1"")));

","287","<java><php><binary><sha>","1","2","1","2017-09-30 09:12:12","46501204","0","2","1121249","","2017-09-30 09:12:12","2017-09-29 13:54:14",""
"49389298","command to get sha256 hash of certificate chain","I got my server certificate mycert.pem . 
I would like to see the certificate chain hash value.
My question is:
How can I use command line to get the SHA256 hash of certificate chain?
","","284","<openssl><certificate><ssl-certificate><sha256><sha>","1","","0","2018-03-20 16:19:33","","0","","","","","2018-03-20 16:19:33",""
"29450173","Calculating partial hash collisions in openCl","I would like to find 2 SHA-256 hashes of 2 strings (both of which start with ""helloworld"" and then have a number of random ascii characters following) where the first n characters of the hashes match, with n being as large as possible. 
for example:
String 1 = helloworld\V.T  ao>
String 2 = helloworld EF{B -QMl
Hash 1 = JRFqsbBDZBUx9Ot0LviMEr6rAdKmUai/kx8HD0EskxE=
Hash 2 = JRFnMO6jm0hzdZ+jYZybNl9yVnPl9g5Y0vlz0Rf/6UE=

the first three characters of the hashes match.
Currently I am using java and MessageDigest for this which is slow, so I was thinking if i could use my GPU and openCl it could run the program much faster, however i know nothing about openCL or how i would go about coding something like this.
Does anyone know of an existing tool which could do this, or maybe some code?
","","282","<hash><opencl><sha><hash-collision>","2","","0","2015-04-04 18:50:03","","1","1","","","","2015-04-04 18:50:03",""
"34802500","How does SHA generate unique codes for big files in git","Using Git I don't understand how using SHA you can generate just a 40 hexadecimal digit code that can then be mapped to any file which could be hundreds of lines long.
The way I'm thinking of it, lets say the string '1' -> 00...01, the string '2' -> 00..02, the string 'a34ed..fc' -> a34ed..fc etc so the hash map is returning itself then it's clear that all the hash codes get used up very quickly and any string 41 characters long will be reusing one of the codes.
Also I know it's known that SHA doesn't guarantee that it will always be unique but I don't see how it even comes close to being useful.
","A SHA-1 hash is 160 bits long. That gives you 2160, or exactly
1,461,501,637,330,902,918,203,684,832,716,283,019,655,932,542,976

possible hashes.
Assuming hash values are more or less unpredictable, the odds of two files accidentally having the same hash are infinitesimal to the point that it's just not worth worrying about it.
Quoting from Scott Chacon's book ""Pro Git"":

However, you should be aware of how ridiculously unlikely this
  scenario is. The SHA–1 digest is 20 bytes or 160 bits. The number of
  randomly hashed objects needed to ensure a 50% probability of a single
  collision is about 280.

...

Here’s an example to give you an idea of what it would take to get a
  SHA–1 collision. If all 6.5 billion humans on Earth were programming,
  and every second, each one was producing code that was the equivalent
  of the entire Linux kernel history (1 million Git objects) and pushing
  it into one enormous Git repository, it would take 5 years until that
  repository contained enough objects to have a 50% probability of a
  single SHA–1 object collision. A higher probability exists that every
  member of your programming team will be attacked and killed by wolves
  in unrelated incidents on the same night.

It's true that there must be two 21-byte files that have the same SHA-1 hash (since there are 2168 such files and only 2160 possible SHA-1 hashes). No such files have ever been discovered.
UPDATE : As of February 2017, two distinct PDF files with identical SHA-1 checksums have been generated, using a technique that's more than 100,000 times as fast as a brute force attack. Details here: https://security.googleblog.com/2017/02/announcing-first-sha1-collision.html
Linux Torvalds (the author of Git) has posted a (preliminary) response here: http://marc.info/?l=git&m=148787047422954
","282","<git><sha>","-5","4","3","2017-02-24 01:10:18","34827877","9","","","","","2016-01-15 00:44:35",""
"34802500","How does SHA generate unique codes for big files in git","Using Git I don't understand how using SHA you can generate just a 40 hexadecimal digit code that can then be mapped to any file which could be hundreds of lines long.
The way I'm thinking of it, lets say the string '1' -> 00...01, the string '2' -> 00..02, the string 'a34ed..fc' -> a34ed..fc etc so the hash map is returning itself then it's clear that all the hash codes get used up very quickly and any string 41 characters long will be reusing one of the codes.
Also I know it's known that SHA doesn't guarantee that it will always be unique but I don't see how it even comes close to being useful.
","In fact, what I call your ""margin of safety"" determines how many objects you can store.
The widely quoted ""about 280"" number is the point at which you have approximately a 50% chance of a hash collision.  To keep the chance below about 1 out of 1018, the number of distinct objects in the repository should not exceed about 1.7 quadrillion (1.71x1015).
(I did some math for a book I'm working on; I haven't had it checked by a real mathematician, but when I ran the same sort of numbers against other hash sizes, my outputs agreed with those on Wikipedia, for whatever that's worth. :-) )
Edit to add: here's the approximation formula.  Let r be the cardinality of the hash function (so r is 2160 for SHA-1) and U be the desired probability-of-uniqueness (so U is 0.5 for the usual ""50% chance of safety, 50% chance of collision"" statistic.  The maximum number of hash inputs is:
(1 + sqrt(1 + 8r ln (1 / U)) / 2
The natural log of 1 / .5 is about 0.693, so we have about sqrt(4r)/2, which is of course just about sqrt(r).  Hence for a k-bit hash, ""50% probability of uniqueness"" occurs after about k/2 hashes.
To see (ballpark) how I get my number—in the neighborhood of 1015 objects—let U = 1 - 10-18.  The natural log of this number is basically the original 10-18, which means we knock most of 260 off the range r, leaving about 2100.  The square root of that is about 250 which is about 1015.
","282","<git><sha>","-5","1","3","2017-02-24 01:10:18","34827877","9","","","","","2016-01-15 00:44:35",""
"34802500","How does SHA generate unique codes for big files in git","Using Git I don't understand how using SHA you can generate just a 40 hexadecimal digit code that can then be mapped to any file which could be hundreds of lines long.
The way I'm thinking of it, lets say the string '1' -> 00...01, the string '2' -> 00..02, the string 'a34ed..fc' -> a34ed..fc etc so the hash map is returning itself then it's clear that all the hash codes get used up very quickly and any string 41 characters long will be reusing one of the codes.
Also I know it's known that SHA doesn't guarantee that it will always be unique but I don't see how it even comes close to being useful.
","The mistake being made is that the SHA code is not used to generate the contents of any files, the contents are stored by Git separately. The SHA code is just used as a key to a commit. The reason commits can't just have keys just numbered from 1 and increasing is because with Git different people can work on different branches of the same project making commits without knowing about each other. When these get merged together we still need commits to have unique keys. The best way of making it so the keys will definitely be unique is using something like SHA which creates a unique code and as others have explained the probability of getting the same key is almost zero. 
","282","<git><sha>","-5","0","3","2017-02-24 01:10:18","34827877","9","","","","","2016-01-15 00:44:35",""
"46534429","How to convert Java MessageDigest with two update statements to C#","How can I convert this Java code to C#?
    byte[] a = ...some byte array...;
    byte[] b = ...some byte array...;

    MessageDigest m_Hash = MessageDigest.getInstance(""SHA-1"");
    m_Hash.update(a);
    m_Hash.update(b);
    byte[] ub = m_Hash.digest();

So far I have:
        var hash = HashAlgorithm.Create(""SHA-1"");
        hash.ComputeHash(a);
        hash.ComputeHash(b);

But I don't think this is going in the right direction because ComputeHash actually returns a byte[].
","So... it looks like update just appends the byte arrays... I wrote a function to do this and it looks like this:
    var hash = HashAlgorithm.Create(""SHA-1"");
    byte[] ub = hash.ComputeHash(AppendArrays(a, b));

    public byte[] AppendArrays(byte[] b1, params byte[][] others)
    {
        int n = b1.Length;
        foreach (var other in others)
            n += other.Length;

        var result = new byte[n];

        n = 0;
        Array.Copy(b1, 0, result, n, b1.Length);
        n += b1.Length;
        foreach (var other in others)
        {
            Array.Copy(other, 0, result, n, other.Length);
            n += other.Length;
        }

        return result;
    }

","279","<java><c#><sha><message-digest><hashalgorithm>","1","1","1","2017-10-03 04:26:37","46537213","0","2","","","","2017-10-02 22:07:59",""
"33586115","How to store a hashed password in SQL Server 2008 R2","I am trying to store a hashed password in SQL Server 2008 R2 but when I compare the stored version with original they do not match.
string password = ""12345"";
User user = new User();
user.USERNAME = ""JohnDoe"";

using (var rngCsp = new RNGCryptoServiceProvider())
{
            byte[] salt = new byte[32];
            rngCsp.GetBytes(salt);
            user.SALT = UTF8Encoding.UTF8.GetString(salt);
}

using (SHA256CryptoServiceProvider sha = new SHA256CryptoServiceProvider())
{
    user.PASSWORD = UTF32Encoding.UTF8.GetString(sha.ComputeHash(UTF8Encoding.UTF8.GetBytes(password + user.SALT)));
}

//store the user on db
db.UserUpdate(user);

// now get the db values that have been saved and compare with original
var userOnDB = db.UsersGet(user.USERNAME);
var passwordOnDb = userOnDB.PASSWORD;

//this returns false
if (passwordOnDb == user.PASSWORD)
{

}

The SQL Server table has the columns:
TABLE [dbo].[USERS]
(
    [ID] [int] IDENTITY(1,1) NOT NULL,
    [SALT] [nvarchar](50) NOT NULL,
    [PASSWORD] [nvarchar](50) NOT NULL,
    .........
)

This is my DB access code:
public USER UsersGet(string userName)
{
        using (MyEntities ctx = new MyEntities())
        {
            return ctx.USERS.Where(a => a.USERNAME == userName).FirstOrDefault();
        }
}

public void UserUpdate(USER user)
{
    try
    {
            using (MyEntities ctx = new MyEntities())
            {
                if (controller.ID == 0)
                {
                    ctx.Entry(user).State = System.Data.Entity.EntityState.Added;
                }
                else
                {
                    ctx.Entry(user).State = System.Data.Entity.EntityState.Modified;
                }

                ctx.SaveChanges();
            }
        }
        catch (Exception ex)
        {
            throw new Exception(ex.InnerException.InnerException.Message);
        }
    }

Here is my User object
public int ID { get; set; }
public string FIRSTNAME { get; set; }
public string LASTNAME { get; set; }
public string ADDRESS1 { get; set; }
public string ADDRESS2 { get; set; }
public string ADDRESS3 { get; set; }
public string TOWN { get; set; }
public string POCODE { get; set; }
public string MOBILE { get; set; }
public string COMMENTS { get; set; }
public bool ACTIVE { get; set; }
public string NIC { get; set; }
public string LANDLINE { get; set; }
public string USERNAME { get; set; }
public string EMAIL { get; set; }
public string SALT { get; set; }
public string PASSWORD { get; set; }

So I thought I must have wrong column types in SQL Server table. 
","If you want the password hash to match you need to use the salt saved in the database not create a new one
","278","<c#><sql-server><sha>","-1","2","1","2015-11-07 22:09:18","33586158","1","","13302","","2015-11-07 22:09:18","2015-11-07 18:14:57",""
"14274048","how to use libgit2 to get a SHA value when i want to commit a new file to git","how to use libgit2 to get a SHA value when i want to commit a new file to git
The command in shell is:
git add
git commit
git pull
git push

","The following libgit2 tests should get you started:

commitstagedfile.c: how to git add a file to the staging area, then perform a git commit and retrieve the sha of the created commit.
fetch.c: how to git fetch and update the content of the local repository with upstream changes
push.c: how to submit the local changes to the upstream repository, similarly to git push

Note: git pull is a combination of git fetch and git merge. The merging capabilities are not available yet in libgit2.
","278","<ios><sha><libgit2>","0","1","1","2013-01-11 10:28:11","14276157","0","1","","","","2013-01-11 08:07:15",""
"53054161","Generate HMAC SHA256 signature Powershell","For 3commas I tried to generate a HMAC SHA256 signature in Powershell with the example parameters from the documentation:
$secret = 'NhqPtmdSJYdKjVHjA7PZj4Mge3R5YNiP1e3UZjInClVN65XAbvqqM6A7H5fATj0j'
$message = '/public/api/ver1/accounts/new?type=binance&name=binance_account&api_key=XXXXXX&secret=YYYYYY'

$hmacsha = New-Object System.Security.Cryptography.HMACSHA256
$hmacsha.key = [Text.Encoding]::ASCII.GetBytes($secret)
$signature = $hmacsha.ComputeHash([Text.Encoding]::ASCII.GetBytes($message))
$signature = [Convert]::ToBase64String($signature)

$signature

It generates ""MPZ4oVcjApDgBHXP/8y8kq42WdlMFFosDp0Poo9BwRo=""
As described in the documentation it should generate ""30f678a157230290e00475cfffccbc92ae3659d94c145a2c0e9d0fa28f41c11a""
[linux]$ echo -n ""/public/api/ver1/accounts/new?type=binance&name=binance_account&api_key=XXXXXX&secret=YYYYYY"" | openssl dgst -sha256 -hmac ""NhqPtmdSJYdKjVHjA7PZj4Mge3R5YNiP1e3UZjInClVN65XAbvqqM6A7H5fATj0j""
(stdin)= 30f678a157230290e00475cfffccbc92ae3659d94c145a2c0e9d0fa28f41c11a

Can anyone help me out?
","Use the BitConverter class.
$secret = 'NhqPtmdSJYdKjVHjA7PZj4Mge3R5YNiP1e3UZjInClVN65XAbvqqM6A7H5fATj0j'
$message = '/public/api/ver1/accounts/new?type=binance&name=binance_account&api_key=XXXXXX&secret=YYYYYY'

$hmacsha = New-Object System.Security.Cryptography.HMACSHA256
$hmacsha.key = [Text.Encoding]::ASCII.GetBytes($secret)
$signature1 = $hmacsha.ComputeHash([Text.Encoding]::ASCII.GetBytes($message))
#$signature2 = [Convert]::ToBase64String($signature1)

[System.BitConverter]::ToString($signature1) -replace '-', ''

","276","<powershell><hmac><sha>","1","0","1","2018-10-29 22:14:02","53054659","0","","1806025","","2018-10-29 21:56:28","2018-10-29 21:34:07",""
"8731626","SHA hashes same string into different blobs","I am using the following code to hash an incoming string, in expecting that same thing applied to the method multiple times will always get the same results. The scenario will be for password hashing and later verification. But it doesn't seem to work - I got two different blobs for the same input string. Is there anything wrong or missing with my code?
public synchronized String encrypt(String token) {
    try {
        MessageDigest sha = MessageDigest.getInstance(""SHA"");
        sha.reset();
        sha.update(token.getBytes(""UTF-8""));
        byte[] raw = sha.digest();
        System.out.println(""raw = "" + raw.toString());
        String hash = Base64.encodeBase64(raw).toString();
        return hash;
    } catch (Exception e) {
    }

    return token;
}

","You haven't really given enough information, but I suspect you're being distracted by this:
System.out.println(""raw = "" + raw.toString());

That's going to print out something like [B@30a4effe which has nothing to do with the data in the byte array. You should print out hash instead - which should be the same for all calls, if your token is genuinely the same.
(As noted by Dan, your method is inappropriately named: hashing isn't encryption. Also, please don't catch Exception or just swallow exceptions like this. It seems pretty odd to just return token on failure, too.)
EDIT: As noted, I've assumed that Base64.encode actually returns a String, which it may not. I'd recommend this base64 implementation which is public domain and has a sensible API - the encoding calls return a String, which is entirely appropriate. Of course, you then don't need the explicit toString() call as well...
","272","<java><passwords><sha>","2","5","2","2012-01-04 19:01:04","8731685","3","2","999924","","2012-01-04 18:05:11","2012-01-04 17:59:51",""
"8731626","SHA hashes same string into different blobs","I am using the following code to hash an incoming string, in expecting that same thing applied to the method multiple times will always get the same results. The scenario will be for password hashing and later verification. But it doesn't seem to work - I got two different blobs for the same input string. Is there anything wrong or missing with my code?
public synchronized String encrypt(String token) {
    try {
        MessageDigest sha = MessageDigest.getInstance(""SHA"");
        sha.reset();
        sha.update(token.getBytes(""UTF-8""));
        byte[] raw = sha.digest();
        System.out.println(""raw = "" + raw.toString());
        String hash = Base64.encodeBase64(raw).toString();
        return hash;
    } catch (Exception e) {
    }

    return token;
}

","I don't know what Base64 class you are using, but I will assume the one from Apache Commons. You are doing this:
String hash = Base64.encodeBase64(raw).toString();

Which is calling the toString method on whatever random byte array is returned from the Base64.encodeBase64() method. That is why your result is random every time, you are just returning an object reference as a String. Try this instead:
String hash = Base64.encodeBase64String(raw);

EDIT
As pointed out in another post, converting directly to String is probably a bad idea. I edited my answer slightly to reflect that.
","272","<java><passwords><sha>","2","1","2","2012-01-04 19:01:04","8731685","3","2","999924","","2012-01-04 18:05:11","2012-01-04 17:59:51",""
"43965178","Digest value obtained programmatically different from soapUI?","I would like to sign a xml document  to send it to a soap web service. 
To begin, I am trying to sign a simple node like this: 
<test xmlns:wsu=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"" wsu:Id=""id-F4821D01E882FF4507149477187940483"">
    truc
</test>

The digest value of the test element is “pdB9Sx1CJ6Cj2z/FoqamVKkjxZ8= ».
Here is a simple python code to compute the digest value: 
from xml.dom import minidom
from xml.dom.ext import c14n
import base64
import hashlib
doc = minidom.parse('file2.xml')
canonical_xml = c14n.Canonicalize(doc)
print (canonical_xml)
print base64.b64encode(hashlib.sha1(canonical_xml).digest())
print ("" "".join(""{:02x}"".format(ord(c)) for c in canonical_xml))

The node «test«  is in the file named ‘file2.xml’.
To test the soap request, I create it with SoapUI but the digest value of this node is different.
I don’t understand why the digest value from SOAPUI is different. 
I have «ONNdniHbKnsMddcMR8rUuPWxbgw= ».
Here is a part from the document xml generated by SoapUI:
<ds:Reference URI=""#id-F4821D01E882FF4507149477187940483"">
<ds:Transforms>
<ds:Transform Algorithm=""http://www.w3.org/2001/10/xml-exc-c14n#"">
<ec:InclusiveNamespaces PrefixList=""soapenv urn"" xmlns:ec=""http://www.w3.org/2001/10/xml-exc-c14n#""/>
</ds:Transform>
</ds:Transforms>
<ds:DigestMethod Algorithm=""http://www.w3.org/2000/09/xmldsig#sha1""/>
<ds:DigestValue>ONNdniHbKnsMddcMR8rUuPWxbgw=</ds:DigestValue>
</ds:Reference>

Can someone explain to me why those digest values are different?
","","270","<python><xml><soap><sha><digest>","1","","0","2017-05-14 15:21:18","","3","","355230","","2017-05-14 15:21:18","2017-05-14 14:42:06",""
"50997849","How SHA and SHA1 certificates secure an API on your Android app like Facebook does?","I know what is a SHA and SHA1 cryptographic algorithm. I also know how to genarate these from a computer.
But I have searched a lot on the internet and still unable to get a proper explanation on how using these keys will secure an API that you are using on an Android app?
For example, Facebook needs your SHA1 key from your system along with your app's package name to be entered on their developer console and their API doesn't work on your app if the key you entered is wrong. 
How does this mechanism work? How do they verify this on your App?
","Facebook is leveraging Android application signing functionality to provide the same type of assurance in the context of API interactions.
When building your application, your private key is being used to digitally sign the result. The signature validates that the build was created by the key owner and not subsequently modified.
Within the application, a signing certificate is stored, which is programmatically accessible.
In the Facebook SDK, the signing certificate is extracted using the PackageManager class. The resultant keyhash is provided as a parameter to API calls, where it is compared with the hash you provided via their Developer ste.
So, by providing the keyhash out-of-band (i.e. exporting it and entering on the developer site), Facebook is able to validate the in-band instance (i.e. compiled into the application and included in API requests).
","268","<android><security><facebook-graph-api><sha1><sha>","2","2","1","2018-06-24 15:52:25","51011543","0","1","1724453","","2018-06-24 03:04:30","2018-06-23 04:05:00",""
"30097652","Hash and sha256 - Objective-c and Java. Return wrong","Why am i getting another hash? ObjC returns wrong hash. Why?
Objective-c:
NSString *key = @""rain"";
NSString *data = @""http://google.com"";
const char *cKey  = [key cStringUsingEncoding:NSUTF8StringEncoding];
const char *cData = [data cStringUsingEncoding:NSUTF8StringEncoding];
unsigned char cHMAC[CC_SHA256_DIGEST_LENGTH];

CCHmac(kCCHmacAlgSHA256, cKey, strlen(cKey), cData, strlen(cData), cHMAC);

NSData *HMAC = [[NSData alloc] initWithBytes:cHMAC length:sizeof(cHMAC)];
NSString *hash = [HMAC base64EncodedStringWithOptions:0];
NSLog(@""%@"", hash);

hash: J6PCNtA36h/6OdxdmKRFr0mLN3GgFQWAji2ciuTkmhE=
Java:
public class HelloWorld{

   public static String encode(String key, String data) throws Exception {
    Base64.Decoder decoder= Base64.getDecoder();
    Mac sha256_HMAC = Mac.getInstance(""HmacSHA256"");
    SecretKeySpec secret_key = new SecretKeySpec(decoder.decode(key), ""HmacSHA256"");
    sha256_HMAC.init(secret_key);
    byte[] mac_data = sha256_HMAC.doFinal(data.getBytes());
    Base64.Encoder encoder = Base64.getEncoder();
    return encoder.encodeToString(mac_data);
}

 public static void main(String []args){
     try{
    System.out.println(encode(""rain"", ""http://google.com""));
     }
     catch(Exception e)
     {

     }
 }
}

hash: Ua2G90mCKIlx2WF2U5VsOkZcEn6GzfONa4pL0waCLnY=
Help me please.
","","264","<java><objective-c><hash><sha><sha256>","1","","0","2015-05-07 10:28:30","","1","3","2246798","","2015-05-07 10:28:30","2015-05-07 09:56:38",""
"43090941","C# SHA-256 vs SQL Server SHA2","My C# code produces the same hash as the online hash calculator and as my old Basic library, and others:
var sha256 = SHA256.Create();
var hashed = sha256.ComputeHash(Encoding.UTF8.GetBytes(_checksum));
_checksum = BitConverter.ToString(hashed).Replace(""-"", """").ToLower();

For example, 
""test"" -> ""9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08""

I have to reproduce the same hash directly from a SQL Server command, if I use
SELECT master.dbo.fn_varbintohexsubstring(0, HashBytes('SHA2_256', 'test'), 1, 0)
=> ""9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08""

BUT if I try to use one of my columns, it produce a different result:
SELECT master.dbo.fn_varbintohexsubstring(0, HashBytes('SHA2_256', t.sMANAGER), 1, 0)
FROM EV_AGENCY t
=> ""fe520676b1a1d93dabab2319eea03674f3632eaeeb163d1e88244f5eb1de10eb""

The column is a nvarchar, collation is French_CI_AI.
I assumed that I have to cast correctly my column, so I try cast, convert, etc without success. 
Can someone help me with that ?
Thank you !
","","264","<c#><sql-server><sha>","0","","0","2017-03-29 11:23:59","","3","","13302","","2017-03-29 11:23:59","2017-03-29 10:26:51","2017-03-29 10:28:24"
"26167730","nodejs - shasum mismatch","There must be something simple I am missing. I am not sure, why the SHA sums wouldn't match. The sums are generated with nodejs and shasum on Linux command line.
user@host:~$ nodejs
> var c = require('crypto')
undefined
> c.createHash('sha1').update('Hello world!','ascii').digest('hex')
'd3486ae9136e7856bc42212385ea797094475802'

user@host:~$ shasum -
Hello world!
47a013e660d408619d894b20806b1d5086aab03b  -

I did try with different options such as ascii and utf-8 with nodejs and shasum; but, mismatch exists. Of course, for simple English text, ascii and utf-8 shouldn't matter.
Although, since the applications generating and using the hashes will be nodejs applications; and, so, it probably wouldn't matter. But, I cannot get around the fact that the sums would be different.
Can you please guide me ?
","Your shasum is getting an extra new line character (\n).
$ echo Hello world! | shasum
47a013e660d408619d894b20806b1d5086aab03b  -
-------------------------------------------
$ node
> var c = require('crypto')
undefined
> c.createHash('sha1').update('Hello world!').digest('hex')
'd3486ae9136e7856bc42212385ea797094475802'
> c.createHash('sha1').update('Hello world!\n').digest('hex')
'47a013e660d408619d894b20806b1d5086aab03b'

","262","<node.js><sha>","1","2","1","2014-10-02 19:36:09","26168288","0","","","","","2014-10-02 19:01:40",""
"49417735","How to convert a string (hex decimal string) to uint64 in Lua?","I need to convert a sip callId (eg. 1097074724_100640573@8.8,8.8) string into requestId and I am using sha1 digest to get a hash. I need to convert this hex-decimal into uint64_t due to internal compatibility:
--
-- Obtain request-id from callId
-- 
--  Returns hash
--
function common_get_request_id( callId )
   local command = ""echo -n \"""" .. callId .. ""\"" | openssl sha1 | sed 's/(stdin)= //g'""
   local handle = assert( io.popen( command, ""r"" ) )
   local output = handle:read( ""*all"" )
   local outputHash = string.gsub(output, ""\n"", """") -- strip newline
   handle:close()

   -- How to convert outputHash to uint64?  
end

I am not sure about uint64 support in Lua. Also, how to do the conversion?
","You can receive two 32-bit integer numbers from Lua as two ""double"" values and convert them to one ""uint64"" on C side.
outputHash = '317acf63c685455cfaaf1c3255eeefd6ca3c5571'

local p = 4241942993 -- some prime below 2^32
local c1, c2 = 0, 0

for a, b in outputHash:gmatch""(%x)(%x)"" do
   c1 = (c1 * 16 + tonumber(a, 16)) % p
   c2 = (c2 * 16 + tonumber(b, 16)) % p
end

return c1, c2  -- both numbers 0..(2^32-1)

","258","<lua><sha><uint64>","2","0","1","2018-03-22 08:38:26","","1","","","","","2018-03-21 22:44:43",""
"4464809","alternate different shas of the same file. why?","can somebody give me a reason why i get alternate shas of the same file? but the same for every second sha?
>>> f = open('480p.m4v')    
>>> sha1 = str(hashlib.sha224(str(f)).hexdigest())
>>> sha1
'4aa8cf11b849b77f608302fdcdad3703dce54c33ba4bac80fa0ef700'
>>> f.close()
>>> f = open('480p.m4v')
>>> sha2 = str(hashlib.sha224(str(f)).hexdigest())
>>> f.close()
>>> sha2
'ae60e45200c960f79d25049ef0135709ca6edf246b3f9e53cd084e58'
>>> f = open('480p.m4v')
>>> sha3 = str(hashlib.sha224(str(f)).hexdigest())
>>> f.close()
>>> sha3
'4aa8cf11b849b77f608302fdcdad3703dce54c33ba4bac80fa0ef700'
>>> f = open('480p.m4v')
>>> sha4 = str(hashlib.sha224(str(f)).hexdigest())
>>> f.close()
>>> sha4
'ae60e45200c960f79d25049ef0135709ca6edf246b3f9e53cd084e58'
>>> f = open('480p.m4v')
>>> sha5 = str(hashlib.sha224(str(f)).hexdigest())
>>> f.close()
>>> sha5
'4aa8cf11b849b77f608302fdcdad3703dce54c33ba4bac80fa0ef700'
>>> f = open('480p.m4v')
>>> sha6 = str(hashlib.sha224(str(f)).hexdigest())
>>> f.close()
>>> sha6
'ae60e45200c960f79d25049ef0135709ca6edf246b3f9e53cd084e58'

","str(f) doesn't give you the contents of the file, it will return something like:
""<open file '480p.m4v', mode 'r' at 0xb7855230>""

I'm not sure why this alternates, though.
","257","<python><sha>","1","2","3","2010-12-16 20:09:48","4464838","0","1","","","","2010-12-16 19:55:49",""
"4464809","alternate different shas of the same file. why?","can somebody give me a reason why i get alternate shas of the same file? but the same for every second sha?
>>> f = open('480p.m4v')    
>>> sha1 = str(hashlib.sha224(str(f)).hexdigest())
>>> sha1
'4aa8cf11b849b77f608302fdcdad3703dce54c33ba4bac80fa0ef700'
>>> f.close()
>>> f = open('480p.m4v')
>>> sha2 = str(hashlib.sha224(str(f)).hexdigest())
>>> f.close()
>>> sha2
'ae60e45200c960f79d25049ef0135709ca6edf246b3f9e53cd084e58'
>>> f = open('480p.m4v')
>>> sha3 = str(hashlib.sha224(str(f)).hexdigest())
>>> f.close()
>>> sha3
'4aa8cf11b849b77f608302fdcdad3703dce54c33ba4bac80fa0ef700'
>>> f = open('480p.m4v')
>>> sha4 = str(hashlib.sha224(str(f)).hexdigest())
>>> f.close()
>>> sha4
'ae60e45200c960f79d25049ef0135709ca6edf246b3f9e53cd084e58'
>>> f = open('480p.m4v')
>>> sha5 = str(hashlib.sha224(str(f)).hexdigest())
>>> f.close()
>>> sha5
'4aa8cf11b849b77f608302fdcdad3703dce54c33ba4bac80fa0ef700'
>>> f = open('480p.m4v')
>>> sha6 = str(hashlib.sha224(str(f)).hexdigest())
>>> f.close()
>>> sha6
'ae60e45200c960f79d25049ef0135709ca6edf246b3f9e53cd084e58'

","The reason you're getting different hashes is because you're not really hashing the contents of the file, only the file object's string representation. For example:
>>> f = open('480p.m4v')
>>> print str(f)
<open file '480p.m4v', mode 'r' at 0x0224C9D0>

You'll note that the address of the object is obviously changing between the different instances, causing the hash to change. Apparently the memory location of one file object is reused by every second other instance created, causing the hashes to coincide.
To hash the contents of the file, you can use this:
>>> sha = str(hashlib.sha224(f.read()).hexdigest())    # read() slurps the whole file into a string

","257","<python><sha>","1","8","3","2010-12-16 20:09:48","4464838","0","1","","","","2010-12-16 19:55:49",""
"4464809","alternate different shas of the same file. why?","can somebody give me a reason why i get alternate shas of the same file? but the same for every second sha?
>>> f = open('480p.m4v')    
>>> sha1 = str(hashlib.sha224(str(f)).hexdigest())
>>> sha1
'4aa8cf11b849b77f608302fdcdad3703dce54c33ba4bac80fa0ef700'
>>> f.close()
>>> f = open('480p.m4v')
>>> sha2 = str(hashlib.sha224(str(f)).hexdigest())
>>> f.close()
>>> sha2
'ae60e45200c960f79d25049ef0135709ca6edf246b3f9e53cd084e58'
>>> f = open('480p.m4v')
>>> sha3 = str(hashlib.sha224(str(f)).hexdigest())
>>> f.close()
>>> sha3
'4aa8cf11b849b77f608302fdcdad3703dce54c33ba4bac80fa0ef700'
>>> f = open('480p.m4v')
>>> sha4 = str(hashlib.sha224(str(f)).hexdigest())
>>> f.close()
>>> sha4
'ae60e45200c960f79d25049ef0135709ca6edf246b3f9e53cd084e58'
>>> f = open('480p.m4v')
>>> sha5 = str(hashlib.sha224(str(f)).hexdigest())
>>> f.close()
>>> sha5
'4aa8cf11b849b77f608302fdcdad3703dce54c33ba4bac80fa0ef700'
>>> f = open('480p.m4v')
>>> sha6 = str(hashlib.sha224(str(f)).hexdigest())
>>> f.close()
>>> sha6
'ae60e45200c960f79d25049ef0135709ca6edf246b3f9e53cd084e58'

","As the others said, the reason this is failing is that you're hashing the object's string representation. I expect the reason it's alternating is because the string representation includes the memory address the file object is stored at. When you do:
f = open(...)

you store that file object in f, pointing to memory X. When you do the same thing again, open() is called and allocates more memory. Since f is still pointing to memory X, that memory remains in use, and the second open() allocates new memory at Y instead. However, as soon as open() returns the result is assigned to f. Now the file object pointing to memory X is dangling and is garbage-collected. The next call to open() will reuse the memory at X since it's free now (this isn't guaranteed, but is common)
","257","<python><sha>","1","0","3","2010-12-16 20:09:48","4464838","0","1","","","","2010-12-16 19:55:49",""
"48364620","How was the initial hash value (H(0)) of SHA-224 obtained?","RFC 6234: US Secure Hash Algorithms (SHA and SHA-based HMAC and HKDF) explains only how the initial hash values (H(0)) for SHA-256, SHA-384, and SHA-512 were obtained. How was the H(0) for SHA-224 obtained?

§6.1.  SHA-224 and SHA-256 Initialization
For SHA-224, the initial hash value, H(0), consists of the following
    32-bit words in hex:
H(0)0 = c1059ed8
H(0)1 = 367cd507
H(0)2 = 3070dd17
H(0)3 = f70e5939
H(0)4 = ffc00b31
H(0)5 = 68581511
H(0)6 = 64f98fa7
H(0)7 = befa4fa4

For SHA-256, the initial hash value, H(0), consists of the following
    eight 32-bit words, in hex.  These words were obtained by taking the
    first 32 bits of the fractional parts of the square roots of the
    first eight prime numbers.
H(0)0 = 6a09e667
H(0)1 = bb67ae85
H(0)2 = 3c6ef372
H(0)3 = a54ff53a
H(0)4 = 510e527f
H(0)5 = 9b05688c
H(0)6 = 1f83d9ab
H(0)7 = 5be0cd19

§6.3.  SHA-384 and SHA-512 Initialization
For SHA-384, the initial hash value, H(0), consists of the
  following eight 64-bit words, in hex.  These words were obtained by
  taking the first 64 bits of the fractional parts of the square
  roots of the ninth through sixteenth prime numbers.
H(0)0 = cbbb9d5dc1059ed8
H(0)1 = 629a292a367cd507
H(0)2 = 9159015a3070dd17
H(0)3 = 152fecd8f70e5939
H(0)4 = 67332667ffc00b31
H(0)5 = 8eb44a8768581511
H(0)6 = db0c2e0d64f98fa7
H(0)7 = 47b5481dbefa4fa4

For SHA-512, the initial hash value, H(0), consists of the
  following eight 64-bit words, in hex.  These words were obtained by
  taking the first 64 bits of the fractional parts of the square
  roots of the first eight prime numbers.
H(0)0 = 6a09e667f3bcc908
H(0)1 = bb67ae8584caa73b
H(0)2 = 3c6ef372fe94f82b
H(0)3 = a54ff53a5f1d36f1
H(0)4 = 510e527fade682d1
H(0)5 = 9b05688c2b3e6c1f
H(0)6 = 1f83d9abfb41bd6b
H(0)7 = 5be0cd19137e2179


","This is the first component of initial value of SHA-224:
H(0)0 = c1059ed8

This is the first component of the initial value of SHA-384
H(0)0 = cbbb9d5dc1059ed8

Notice that the last 32 bits of SHA-384 is exactly the value of SHA-224.
","257","<hash><sha>","2","3","1","2018-01-22 16:39:18","48364663","0","","4510033","","2018-01-22 16:39:18","2018-01-21 07:33:38",""
"20582543","Calculate SHA1 fingerprint of (unsigned char *) in python","I am working on a project related to Data deduplication. I need to design a fingerprint calculation module (to calculate the fingerprint of file chunk) which will take two inputs and give an output.
Input : some_module(unsigned char*buffer, uint32 buffer_length)
output: unsigned char* fingerprint
I have been asked to design a class to implement above the module. I will use hashlib but my question is How do I select proper data-types to do this in Python ?
","
How do I select proper data-types to do this in Python ?

You could use Python strings (str) for both the input and the output.
If you do, you'll be able to use hashlib.sha1() directly, without needing any datatype conversions.
","256","<python><sha>","2","2","1","2013-12-14 11:15:26","20582584","4","","","","","2013-12-14 11:12:24",""
"54065781","How to generate SHA for integrity html tag?","I'm using this command to generate SHA hash in command line on my Mac:
openssl dgst -sha384 -binary FILENAME.js | openssl base64 -A

The result looks like this:
93Zn4wbvkSu+.......PksSwU4A+2a.....t0OOmyCompName:public

I then paste this sha with prefix in integrity html attribute: Like this:
<script type=""text/javascript"" integrity=""sha384-93Zn4wbvkSu+.......PksSwU4A+2a.....t0OOmyCompName:public"">

And Chrome gives me an error:
Error parsing 'integrity' attribute ('sha384-93Zn4wbvkSu+.......PksSwU4A+2a.....t0OOmyCompName:public'). The digest must be a valid, base64-encoded value.

I tried with myCompName:public and without. Help me please - how to correctly generate this integrity hash?
I don't use https://www.srihash.org/ because no cors enabled. Nginx serves my static files.
","I found an error. Do not include in your integrity token this text in the end:
myCompName:public

If you delete -A key from you command in the end it will give you the same result but without name of your local machine and :public word ending.
so the right hash will look like this:
sha384-93Zn4wbvkSu+.......PksSwU4A+2a.....t0OO

","253","<javascript><html><sha><integrity>","1","0","1","2019-05-02 09:19:57","","2","","","","","2019-01-06 20:43:47",""
"10070124","SHA2 - Why is it difficult (actually impossible without using brute-force) to recover the message if you have the Digest and the Key","I looked into the implementation of SHA2 in Python and it looks like it uses some default key for hashing. Once the key is known and the digest is known, is it possible to get the plain-text back? (pre-image attack without brute-force) http://en.wikipedia.org/wiki/Preimage_attack
My intuition says NO as the block size (input size) is 512 bit and the output size is 256 bit. It means that to be a good hashing function (cryptographically) the function should be many to one function (non-invertible). {This is the exact opposite to the requirement of a block cipher where the function should be invertible (one to one).}
As far as I understood the requirement is to have random many-to-one function!
","It's impossible, even with Brute Force, to recover the plain text for a given hash because there are many texts that map to the same N-bit key (for any value of N).  That is, there are different messages that have the same digest value.
","253","<encryption><hash><sha>","0","4","1","2012-04-09 14:21:34","10070147","0","1","15168","","2012-04-09 14:21:34","2012-04-09 07:15:19",""
"19903903","How can bcrypt be save?","Because Spring deprecated the old interface
org.springframework.security.crypto.password.PasswordEncoder;

I looked for alternatives that work with
org.springframework.security.authentication.encoding.PasswordEncoder;

My search points me to: https://stackoverflow.com/a/18678325
I tested bcrypt and I was interested how it works.
The explanation at https://stackoverflow.com/a/6833165 points me to one question.
If $2a$10$ZaDBCZaI59IMdKuBiRdubuMa2h/itIYIwqLHpS1q245ISD90xsjkW contains all information about the type of encoding and the salt and so on, and this is stored in my database why is it save?
If someone has this ""hash"" he can easily decrypt it with brute force.
Within my previous project I used a SHA encode with a system wide secret salt. In this scenario the hash stole from the database can't easily be decrypted.
So why is bcrypt preferred to a SHA with system wide salt?
","2 points:

Bcrypt is designed to resist brute force attacks by having a configurable complexity that makes the process arbitrarily slow. Refer to wikipedia for more details
Using the same hash for all passwords, as your existing system does, may be vulnerable to differential attacks, since each password in the database is known to contain a shared component.

","250","<spring-security><bcrypt><sha>","0","0","1","2013-11-11 10:31:16","","0","","-1","","2017-05-23 12:29:15","2013-11-11 10:20:41",""
"13254000","G-wan C Sha1 hashing","I'm having a small issue getting the sha1 function to work in G-WAN.
Basically i have the string i want to hash, I'm new to C in general so any pointers would be
great.
This is the string im trying to sha1 hash, I'v tried several approaches but I'm not sure what I'm doing wrong.
u8 *input = ""258EAFA5-E914-47DA-95CA-C5AB0DC85B11"";

I almost have websockets working with G-wan and the last thing is getting this sha1 function to cooperate with me.
Documentation on G-wans sha1 function is below 
// u8 dst[20]; // the resulting 160-bit hash
// sha1_t ctx;
// sha1_init(&ctx);
// int i = 10;
// while(i--)
//    sha1_add(&ctx, data[i].ptr, data[i].len);
// sha1_end(&ctx, dst);

typedef struct { u8 x[220]; } sha1_t;
void sha1_init(sha1_t *ctx);
void sha1_add (sha1_t *ctx, u8 *src, int srclen);
void sha1_end (sha1_t *ctx, u8 *dst);
// a wrapper on all the above SHA-160 calls
void sha1(u8 *input, int ilen, u8 *dst);

Link to there api http://gwan.com/api
If anyone could throw me a bone here It would make my last hours with C a tad bit forgiving.
","Here's a sample on how to use sha1 function.
u8 input[] = ""258EAFA5-E914-47DA-95CA-C5AB0DC85B11"";
u8 result[20];

sha1(input, sizeof(input) - 1, result);
xbuf_xcat(get_reply(argv), ""SHA1 Result: %20B"", result);

The result is binary so you need to convert it to B64 or HEX to make it readable.
'%B' is a B64 conversion in G-WAN. '%20B' tells it to convert the first 20 bytes.
Result:

SHA1 Result: Kfh9QIsMVZcl6xEPYxPHzW8SZ8w=

","249","<c><sha><g-wan>","2","1","1","2012-11-07 07:49:47","13255238","4","","1079036","","2012-11-07 07:49:47","2012-11-06 15:17:35",""
"7941475","How to get SHA of file after upload in PHP","I have a site which copies a file from a URL to my sever.  I need a way of getting a SHA of the file after it has been copied.
I was using @copy($url,$upload_path) to copy the file but this returns a boolean I need something that returns the file.  Does anything like that exist?
I need to get the file afterwards for sha1_file($file)
Thank!
","You can just
if (@copy($url,$upload_path)) {
  $hash = sha1_file($upload_path);
}

$upload_path already contains the value you would need to pass to sha1_file().
And, as a general rule, the @ operator is evil. I will admit that this particular usage of it is arguably valid, but as a rule of thumb it should treated as a last resort.
","247","<php><sha>","0","4","2","2011-10-29 20:34:06","7941498","0","","","","","2011-10-29 20:28:41",""
"7941475","How to get SHA of file after upload in PHP","I have a site which copies a file from a URL to my sever.  I need a way of getting a SHA of the file after it has been copied.
I was using @copy($url,$upload_path) to copy the file but this returns a boolean I need something that returns the file.  Does anything like that exist?
I need to get the file afterwards for sha1_file($file)
Thank!
","sha1_file takes a filename.  The $upload_path you've supplied to copy is a filename.  You should be able to do:
sha1_file($upload_path)

to get your sha1.
","247","<php><sha>","0","1","2","2011-10-29 20:34:06","7941498","0","","","","","2011-10-29 20:28:41",""
"43682324","Swift: Signing with SHA256 not working like in amazon aws example","Hello I want to create a signature for amazon-aws with swift but the given example is resulting other hashes than my functions. 
The example is given here:
http://docs.aws.amazon.com/general/latest/gr/signature-v4-examples.html
and looks like this with JS:
var crypto = require(""crypto-js"");

function getSignatureKey(Crypto, key, dateStamp, regionName, serviceName) {
    var kDate = Crypto.HmacSHA256(dateStamp, ""AWS4"" + key);
    var kRegion = Crypto.HmacSHA256(regionName, kDate);
    var kService = Crypto.HmacSHA256(serviceName, kRegion);
    var kSigning = Crypto.HmacSHA256(""aws4_request"", kService);
    return kSigning;
}

The input is this:
key = 'wJalrXUtnFEMI/K7MDENG+bPxRfiCYEXAMPLEKEY'
dateStamp = '20120215'
regionName = 'us-east-1'
serviceName = 'iam'

And it should result the following:
kSecret  = '41575334774a616c725855746e46454d492f4b374d44454e472b62507852666943594558414d504c454b4559'
kDate    = '969fbb94feb542b71ede6f87fe4d5fa29c789342b0f407474670f0c2489e0a0d'
kRegion  = '69daa0209cd9c5ff5c8ced464a696fd4252e981430b10e3d3fd8e2f197d7a70c'
kService = 'f72cfd46f26bc4643f06a11eabb6c0ba18780c19a8da0c31ace671265e3c87fa'
kSigning = 'f4780e2d9f65fa895f9c67b32ce1baf0b0d8a43505a000a1a9e090d414db404d'

So my swift solution looks like this:
    let kSecret = ""AWS4wJalrXUtnFEMI/K7MDENG+bPxRfiCYEXAMPLEKEY"".data(using: String.Encoding.utf8)?.hexEncodedString()
    let kDate = ""20120215"".hmac(algorithm: HMACAlgorithm.SHA256, key: kSecret!).data(using: String.Encoding.utf8)?.hexEncodedString()
    let kRegion = ""us-east-1"".hmac(algorithm: HMACAlgorithm.SHA256, key: kDate!).data(using: String.Encoding.utf8)?.hexEncodedString()
    let kService = ""iam"".hmac(algorithm: HMACAlgorithm.SHA256, key: kRegion!).data(using: String.Encoding.utf8)?.hexEncodedString()
    let kSigning = ""aws4_request"".hmac(algorithm: HMACAlgorithm.SHA256, key: kService!).data(using: String.Encoding.utf8)?.hexEncodedString()

But what I get as result is following:
kSecret: ""41575334774a616c725855746e46454d492f4b374d44454e472b62507852666943594558414d504c454b4559""
kDate: ""536c634e5047706e3276437146796a41722f677a6657637a68742b48364f755469772b72436363686868453d""
kRegion: ""416e524c31512b47434a624d4a2f4d4945755133574176622b65676c54475159576568674c6179414549383d""
kService: ""32624f4c5a514a517a796779626b485230775564583675687844796e66366147512f2f4d41304464506b4d3d""
kSigning: ""4652316463434b5472665476524254544245384d646653674a413377663053534e4554317a7a6f2b4f4b6f3d""

So the first hash matches but after that none of them match. I even think maybe the SHA256 encoding is not correctly because SHA256 encoding and parsing to hex will always result this length of hashes. But in the given example the hashes are not that long. 
What is the problem here? 
I also use these helper functions:
enum HMACAlgorithm {
    case MD5, SHA1, SHA224, SHA256, SHA384, SHA512

    func toCCHmacAlgorithm() -> CCHmacAlgorithm {
        var result: Int = 0
        switch self {
        case .MD5:
            result = kCCHmacAlgMD5
        case .SHA1:
            result = kCCHmacAlgSHA1
        case .SHA224:
            result = kCCHmacAlgSHA224
        case .SHA256:
            result = kCCHmacAlgSHA256
        case .SHA384:
            result = kCCHmacAlgSHA384
        case .SHA512:
            result = kCCHmacAlgSHA512
        }
        return CCHmacAlgorithm(result)
    }

    func digestLength() -> Int {
        var result: CInt = 0
        switch self {
        case .MD5:
            result = CC_MD5_DIGEST_LENGTH
        case .SHA1:
            result = CC_SHA1_DIGEST_LENGTH
        case .SHA224:
            result = CC_SHA224_DIGEST_LENGTH
        case .SHA256:
            result = CC_SHA256_DIGEST_LENGTH
        case .SHA384:
            result = CC_SHA384_DIGEST_LENGTH
        case .SHA512:
            result = CC_SHA512_DIGEST_LENGTH
        }
        return Int(result)
    }
}

extension String {
    func hmac(algorithm: HMACAlgorithm, key: String) -> String {
        let cKey = key.cString(using: String.Encoding.utf8)
        let cData = self.cString(using: String.Encoding.utf8)
        var result = [CUnsignedChar](repeating: 0, count: Int(algorithm.digestLength()))
        CCHmac(algorithm.toCCHmacAlgorithm(), cKey!, Int(strlen(cKey!)), cData!, Int(strlen(cData!)), &result)
        let hmacData:NSData = NSData(bytes: result, length: (Int(algorithm.digestLength())))
        let hmacBase64 = hmacData.base64EncodedString(options: NSData.Base64EncodingOptions.lineLength76Characters)
        return String(hmacBase64)
    }
}

extension Data {
    func hexEncodedString() -> String {
        return map { String(format: ""%02hhx"", $0) }.joined()
    }
}

","","244","<swift><amazon-web-services><hash><signature><sha>","1","","0","2017-04-28 14:32:01","","5","0","1771213","","2017-04-28 14:32:01","2017-04-28 14:12:29",""
"26694894","List of SHAs that are possible for checkout in git","I would like a complete list of SHAs that are available/possible to pass to the checkout operation
git checkout <sha-parameter-here>

similar to what I am getting from
git log --pretty=oneline

but a complete listing.
Here is a simple run through:

checkout earlier version in master branch using
git checkout ""sha-parameter-from-log""
make modifications and commit
git commit -a -m 'something'
at this point the log is ""truncated"" but contains most SHA of most recent commit.
git log --pretty=oneline
when back to master, the SHA is not listed anymore
git checkout master
git log --pretty=oneline
HOWEVER, if i remember the SHA from the commit I can STILL perform
git checkout ""sha-not-in-log""

Thanks for any help.
","The git rev-list should list all SHAs for all commits with some options.
--all will get ones locally and --remotes should show all the non-local commits.
git rev-list --all --remotes
More documentation here.
In addition, for your specific scenario regarding git log oneline, you can change the git log to include diverged branches using the following line:
git log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short --all

I've seen this aliased around the internet as 'git hist' on occasion.
","242","<git><sha><git-checkout>","0","3","1","2017-11-10 16:05:07","","5","","6296561","","2017-11-10 16:05:07","2014-11-02 00:51:21",""
"53960886","Generate a hash column for table columns on sap hana","I'll try to make it simple as possible as I can
I have a table TAB1 (ID, NAME, LASTNAME, AGE, DATEOFBIRTH, ID_CARD_NBR, SHA)
I need to generate a hash for these columns in a column SHA
the query to obtain that Hash on SAP Hana: 
SELECT hash_sha256(
to_varbinary(""ID""),
to_varbinary(IFNULL(""NAME"",'0')),
to_varbinary(IFNULL(""LASTNAME"",'0')),
to_varbinary(IFNULL(""AGE"",'0')),
to_varbinary(IFNULL(""DATEOFBIRTH"",'0')),
to_varbinary(IFNULL(""ID_CARD_NBR"",'0')) )

FROM ""MYSCHEMA"".""PERSONS""

The code should insert/update the SHA column 
Thank you 
","If Id is the primary key(can't be NULL) you can do this : 
UPDATE PERSONS
SET SHA = hash_sha256(to_varbinary(""ID""),to_varbinary(IFNULL(""NAME"",'0')),to_varbinary(IFNULL(""LASTNAME"",'0')),to_varbinary(IFNULL(""AGE"",'0')),to_varbinary(IFNULL(""DATEOFBIRTH"",'0')),to_varbinary(IFNULL(""ID_CARD_NBR"",'0')) )
WHERE SHA IS NULL;  -- or other condition

","241","<sql><hash><sap><hana><sha>","0","0","1","2018-12-28 15:55:34","53961107","2","","7447410","","2018-12-28 15:45:19","2018-12-28 15:37:36",""
"50139391","Generation SHA-256 key for android app","whenever i'm trying to generate SHA-256 key i'm only getting MD5 key And SHA-1 key what should i do for getting SHA-256 key?
i have tried generating APK converting into ZIP file and then using CERT.RSA i tried to get key from CMD Using 
command:C:\Program Files (x86)\Java\jdk1.7.0\bin>keytool -printcert -file C:\Users\vabs\Desktop\app-releaseSHA256Demo\META-INF\CERT.RSA
but i only got the response like :
","","240","<android><sha><digest>","0","","0","2018-05-02 22:21:29","","4","","7803195","","2018-05-02 22:21:29","2018-05-02 16:27:58",""
"50297634","SPECK Algorithm encryption","I Want to Encrypte a String with SPECK Algorithm.we have a password and we get its hash get a 128 bit key from that hash - hash algorithm is SHA256.
in decryption i get invallid String - block size : 128 and  key size 128 , round 32
public static void SpeckEnc(byte[] sha,String message){
byte[] data=message.getBytes();
byte[] newdata;
byte[] lastblock=new byte[16];
byte[] key=new byte[16];
int tool=data.length/16;
final int baghi=data.length%16;

for(int I = 0; I < 16; I++)
    key[I] = (byte) (sha[I] ^ sha[I + 16]);

if(baghi!=0){
    int toollast=data.length - tool*16;
    for(int ba=0;ba<16;ba++){
        if(ba<toollast)
            lastblock[ba]=data[tool*16+ba];
        else
            lastblock[ba]=0;
        }
    tool++;
    newdata=new byte[tool*16];
    System.arraycopy(data,0,newdata,0,(tool-1)*16);
    System.arraycopy(lastblock,0,newdata,(tool-1)*16,16);
}else
    newdata=data;
byte[] c=new byte[newdata.length];
byte[] k1 = Arrays.copyOfRange(key, 0, 8);
byte[] k2 = Arrays.copyOfRange(key, 8, 16);
byte[] pofd; 
for(int i=0;i<tool;i++){
    pofd=Arrays.copyOfRange(newdata,i*16,i*16+16);
    System.out.print(pofd[0]+"" "");
    pofd=enc(pofd,k1,k2);
    System.out.print(pofd[0]+"" |\n"");
    System.arraycopy( pofd,0,c,i*16,16);
}
String encoded = Base64.getEncoder().encodeToString(c);}

main encryption func:
public static byte[] enc(byte[] piecedata,byte[] k1,byte[] k2){
byte[] result=new byte[16];
byte[] pt1=new byte[8];
byte[] pt2=new byte[8];
for(int si = 0; si < 32; si++) {
     k1=generateKey(k1,k2,si);
     k2=generatekey2(k1,k2);
    pt1=circularBitShiftingRight(pt1,8);
    pt1=plus(pt1,pt2);
    for(int i=0;i<8;i++)
        pt1[i]=(byte) (pt1[i]^k2[i]);
    pt2=circularBitShiftingLeft(pt2,3);
    for(int i=0;i<8;i++)
        pt2[i]=(byte) (pt1[i]^pt2[i]);
   }    
System.arraycopy(pt1,0,result,0,8);
System.arraycopy(pt2,0,result,8,8);
return result;
} 

decryption section :
public static void SpeckDec(byte[] sha,String base64message){
byte[] decodedString = Base64.getDecoder().decode(base64message.getBytes());
byte[] data=new byte[decodedString.length];
byte[] keys=new byte[256];
byte[] key=new byte[16];
byte[] pofd,p;

final int tool=decodedString.length/16;
for(int I = 0; I < 16; I++)
    key[I] = (byte) (sha[I] ^ sha[I + 16]);
byte[] k1 = Arrays.copyOfRange(key, 0, 8);
byte[] k2 = Arrays.copyOfRange(key, 8, 16);
for (int i=0;i<32;i++)
{
    k1=generateKey(k1,k2,i);
    k2=generatekey2(k1,k2);
    System.arraycopy(k2,0,keys,i*8,8);
}    
for(int i=0;i<tool ;i++){
    pofd=Arrays.copyOfRange(decodedString,i*16,i*16+16);
    p=dec(pofd,keys);
    System.arraycopy(p, 0, data, i*16, 16);
}}

main decryption func:
public static byte[] dec(byte[] pieceofdata,byte[] keys){
byte[] result=new byte[16];
byte[] key;
byte[] ct1=new byte[8];
byte[] ct2=new byte[8];
int m;
for(int i=0;i<32;i++){
    m=256-((i+1)*8);
      key=Arrays.copyOfRange(keys,m,m+8);
    for(int j=0;j<8;j++)
        ct2[j]=(byte) (ct1[j]^ct2[j]);
    ct2=circularBitShiftingRight(ct2,3);
    for(int j=0;j<8;j++)
        ct1[j]=(byte) (ct1[j]^key[j]);
    for(int j=0;j<8;j++)
        ct1[j]=(byte) (ct1[j]-ct2[j]);
    ct1=circularBitShiftingLeft(ct1,8); 
}   
System.arraycopy(ct1, 0, result, 0, 8);
System.arraycopy(ct2, 0, result, 8, 8);
return result;}

generate key func:
public static byte[] generateKey(byte[] k1,byte[] k2,int x){
byte[] a=circularBitShiftingRight(k1,8);
a=plus(a,k2);
for(int i=0;i<8;i++)
    a[i]=(byte) (a[i]^x);
return a;}


public static byte[] generatekey2(byte[] k1,byte[] k2){
 byte[] t =circularBitShiftingLeft(k2,3);
  for(int i=0;i<8;i++)
    t[i]=(byte) (t[i]^k1[i]);
  return t;}

plus func :
public static byte[] plus(byte[] a,byte[] b){
    byte[] s=new byte[8];
    for(int i=0;i<8;i++){
        s[i]=(byte) (a[i]+b[i]);
    }
return s;}

you can read details of SPECK algorithm in :
https://en.wikipedia.org/wiki/Speck_(cipher)
","i forgot initial pt1 pt2 in enc function and ct1 ct2 in dec function
in enc func:
public static byte[] enc(byte[] piecedata,byte[] k1,byte[] k2){
byte[] result=new byte[16];
byte[] pt1,pt2;
pt1=Arrays.copyOfRange(piecedata, 0, 8);
pt2=Arrays.copyOfRange(piecedata, 8, 16);
for(int si = 0; si < 32; si++) {
     k1=generateKey(k1,k2,si);
     k2=generatekey2(k1,k2);
    pt1=circularBitShiftingRight(pt1,8);
    pt1=plus(pt1,pt2);
    for(int i=0;i<8;i++)
        pt1[i]=(byte) (pt1[i]^k2[i]);
    pt2=circularBitShiftingLeft(pt2,3);
    for(int i=0;i<8;i++)
        pt2[i]=(byte) (pt1[i]^pt2[i]);
   }    
System.arraycopy(pt1,0,result,0,8);
System.arraycopy(pt2,0,result,8,8);
return result;
} 

and in dec func :
public static byte[] dec(byte[] pieceofdata,byte[] keys){
byte[] result=new byte[16];
byte[] key;
byte[] ct1,ct2;
int m;
ct1=Arrays.copyOfRange(pieceofdata, 0, 8);
ct2=Arrays.copyOfRange(pieceofdata, 8, 16);
for(int i=0;i<32;i++){
    m=256-((i+1)*8);
      key=Arrays.copyOfRange(keys,m,m+8);
    for(int j=0;j<8;j++)
        ct2[j]=(byte) (ct1[j]^ct2[j]);
    ct2=circularBitShiftingRight(ct2,3);
    for(int j=0;j<8;j++)
        ct1[j]=(byte) (ct1[j]^key[j]);
    for(int j=0;j<8;j++)
        ct1[j]=(byte) (ct1[j]-ct2[j]);
    ct1=circularBitShiftingLeft(ct1,8); 
}   
System.arraycopy(ct1, 0, result, 0, 8);
System.arraycopy(ct2, 0, result, 8, 8);
return result;}

","239","<java><android><encryption><sha>","0","0","1","2018-05-12 13:52:56","50306958","5","","7483610","","2018-05-12 09:38:56","2018-05-11 17:46:36",""
"12035529","C sha1 implementation not working on Unix","I'm using this implementation of SHA1 in C. Works fine on Windows but it does not output correct hashes on Unix (tried it on Ubuntu and Mac OS 10.8). Furthermore, on Ubuntu it outputs different hash from the same message.
I guess I could use another implementation, just curious why that happens.
EDIT
Thanks, you guys are right. Changed it to
typedef unsigned int UINT4;

seems to work fine.
","Are these 64bit unix'es?
/* UINT4 defines a four byte word */
typedef unsigned long int UINT4;

will actually be 8 bytes on 64 bit Linux (but 4 bytes on 64 bit Windows)
https://en.wikipedia.org/wiki/64-bit_computing#64-bit_data_models
","237","<c><windows><unix><sha>","1","6","3","2016-12-02 20:44:18","12035691","1","","1611384","","2012-08-20 10:35:14","2012-08-20 09:51:30",""
"12035529","C sha1 implementation not working on Unix","I'm using this implementation of SHA1 in C. Works fine on Windows but it does not output correct hashes on Unix (tried it on Ubuntu and Mac OS 10.8). Furthermore, on Ubuntu it outputs different hash from the same message.
I guess I could use another implementation, just curious why that happens.
EDIT
Thanks, you guys are right. Changed it to
typedef unsigned int UINT4;

seems to work fine.
","
typedef unsigned long int UINT4;

Maybe your Unix implementation uses 64-bit unsigned longs.
Try
#include <stdint.h>

/* ... */

typedef uint32_t UINT4;

and use a C99 compiler.
","237","<c><windows><unix><sha>","1","1","3","2016-12-02 20:44:18","12035691","1","","1611384","","2012-08-20 10:35:14","2012-08-20 09:51:30",""
"12035529","C sha1 implementation not working on Unix","I'm using this implementation of SHA1 in C. Works fine on Windows but it does not output correct hashes on Unix (tried it on Ubuntu and Mac OS 10.8). Furthermore, on Ubuntu it outputs different hash from the same message.
I guess I could use another implementation, just curious why that happens.
EDIT
Thanks, you guys are right. Changed it to
typedef unsigned int UINT4;

seems to work fine.
","If any of the platforms is 64-bit and has a 64-bit unsigned long, this code might have issues:
/* UINT4 defines a four byte word */
typedef unsigned long int UINT4;

Didn't read the code closely enough to see if the way UINT4 is used would break if it's actually 8 bytes, but it sounds fishy.
","237","<c><windows><unix><sha>","1","2","3","2016-12-02 20:44:18","12035691","1","","1611384","","2012-08-20 10:35:14","2012-08-20 09:51:30",""
"26647675","How create SHA224SUM in java","I need create hash from my string using analog Linux command SHA224SUM in java under Android.
I try use:
      MessageDigest messageDigest224 = MessageDigest.getInstance( ""SHA-224"");
      byte[] bSHA224 = messageDigest224.digest( ""hello word"".getBytes());

But I get error
      MessageDigest SHA-224 implementation not found
      java.security.NoSuchAlgorithmException: MessageDigest SHA-224 implementation not found

SHA-512, SHA-1 algorithm work fine.
Please get me link to analog SHA224 in Java. Please any ideas.
","","236","<java><android><sha>","1","","0","2014-10-30 08:30:18","","7","4","1665964","","2014-10-30 08:30:18","2014-10-30 07:55:49",""
"29022578","C++ equivilent of SHA1Managed.ComputeHash","I have this C# code:
SHA1Managed hash = new SHA1Managed();
byte[] computedHash = hash.ComputeHash(_decryptedBytes);

I need to convert this code to C++, which functions should I be using? 
Particularly the equivilent of SHA1Managed.ComputeHash
","boost has an SHA1 implementation http://charette.no-ip.com:81/programming/doxygen/boost/classboost_1_1uuids_1_1detail_1_1sha1.html
","236","<c#><c++><sha>","-1","0","1","2015-03-13 00:08:23","","3","0","","","","2015-03-13 00:02:49",""
"24013127","Which is better to use and why? git format-patch or git bundle?","I basically have 3 questions:

Which is better to use and why? git format-patch or git bundle?
What all metadata is used by GIT to calculate SHA-1 key for commit and blobs/trees?
When I apply a patch which was created by format-patch, why does it have different SHA for same changes and commit?

","
this obviously depends on your use-case; git bundle only makes sense if you transfer a changeset from one git-repository to another, whereas git format-patch creates standard diff-files which can be inspected easily and applied to a non-gitified source tree as well.
on the other hand git bundle creates a single file, which is easier to transport than the multi-file output of git format-patch
this is possibly a duplicate of Is SHA-1 calculated based on content?
see #2

","235","<git><bundle><sha><format-patch>","0","1","1","2014-06-03 11:04:41","","1","1","","","","2014-06-03 10:44:31",""
"43102412","How does Git compute SHA hashes so quickly?","I know git is fast but I have only recently found how fast it really can be.
In one of my projects, I am trying to compute SHA-256 hashes of a huge file (82 MB with 850k rows) and it took over a minute to compute it (includes hashing and a couple of other small operations). 
Even with SHA-1, it took me 30+ seconds while git seems to be doing it in just a second or two.
I am computing the hash in Scala using java's Security API by combining all the lines of the file.
val lines = Source.fromFile(filePath, ""UTF-8"").getLines().toList
MessageDigest.getInstance(""SHA-256"")
.digest(lines.mkString(""\n"").getBytes).map(""%02x"".format(_)).mkString

So, how does Git do it so quickly, or rather the more important question, why is my method so slow?
Edit: For those not familiar with scala syntax, lines will have all the lines of the file in a List and mkString method returns a string of all the elements in the list combined with the given separator. 
","The hash computation is redirected at compile time to a specific implementation in cache.h.  The underlying platform may provide an optimized (e.g., assembler or machine-dependent C coded) hash routine.  Of course, your Java implementation may or may not also provide such a routine.
If the platform does not have its own implementation, Git provides one written in C that works on large memory blocks, and still has some hand-tweaks and inline asms with architecture and compiler ifdefs.
","235","<java><git><scala><hash><sha>","0","1","3","2017-03-30 05:56:38","43102860","9","4","3542989","","2017-03-29 19:36:02","2017-03-29 19:22:07",""
"43102412","How does Git compute SHA hashes so quickly?","I know git is fast but I have only recently found how fast it really can be.
In one of my projects, I am trying to compute SHA-256 hashes of a huge file (82 MB with 850k rows) and it took over a minute to compute it (includes hashing and a couple of other small operations). 
Even with SHA-1, it took me 30+ seconds while git seems to be doing it in just a second or two.
I am computing the hash in Scala using java's Security API by combining all the lines of the file.
val lines = Source.fromFile(filePath, ""UTF-8"").getLines().toList
MessageDigest.getInstance(""SHA-256"")
.digest(lines.mkString(""\n"").getBytes).map(""%02x"".format(_)).mkString

So, how does Git do it so quickly, or rather the more important question, why is my method so slow?
Edit: For those not familiar with scala syntax, lines will have all the lines of the file in a List and mkString method returns a string of all the elements in the list combined with the given separator. 
","Reposting my earlier comment (extended).
What you do is:

Read bytes
Convert them to characters
Split the character stream to lines
Store those lines into a list
Again concatenate those lines into a string
Take its bytes again
Compute hash of those bytes

Steps 2-6 seem unnecessary. I would recommend to read bytes from your initial FileInputStream in chunks (for example, of 4k) and feed them to the MessageDigest for update. That would just perform steps 1 and 7.
InputStream is = new FileInputStream(fileName);
byte[] buffer = new byte[4096];
while (true) {
    int read = is.read(buffer);
    if (read < 0) {
        break;
    }
    md.update(buffer, 0, read);
}
is.close(); // better be done in finally

As for sha1 performance, here is what I got for time sha1sum <file> where file is 179Mb:
real    0m0.607s
user    0m0.588s
sys 0m0.016s

","235","<java><git><scala><hash><sha>","0","7","3","2017-03-30 05:56:38","43102860","9","4","3542989","","2017-03-29 19:36:02","2017-03-29 19:22:07",""
"43102412","How does Git compute SHA hashes so quickly?","I know git is fast but I have only recently found how fast it really can be.
In one of my projects, I am trying to compute SHA-256 hashes of a huge file (82 MB with 850k rows) and it took over a minute to compute it (includes hashing and a couple of other small operations). 
Even with SHA-1, it took me 30+ seconds while git seems to be doing it in just a second or two.
I am computing the hash in Scala using java's Security API by combining all the lines of the file.
val lines = Source.fromFile(filePath, ""UTF-8"").getLines().toList
MessageDigest.getInstance(""SHA-256"")
.digest(lines.mkString(""\n"").getBytes).map(""%02x"".format(_)).mkString

So, how does Git do it so quickly, or rather the more important question, why is my method so slow?
Edit: For those not familiar with scala syntax, lines will have all the lines of the file in a List and mkString method returns a string of all the elements in the list combined with the given separator. 
","Git undoubtedly is faster, but 30 seconds for SHA-1 is not so great.
So I ran a test in java:
public static void main(String[] args) throws Exception{
    long startTime = System.currentTimeMillis();

    byte[] bytes = createSha1(new File(""src\\main\\resources\\200mb_file.zip""));
    System.out.println(new String(bytes));

    long endTime = System.currentTimeMillis();
    long duration = (endTime - startTime);
    System.out.format(""Duration: %dms\n"", duration);
}

private static byte[] createSha1(File file) throws Exception  {
    MessageDigest digest = MessageDigest.getInstance(""SHA-1"");
    InputStream fis = new FileInputStream(file);
    int n = 0;
    byte[] buffer = new byte[8192];
    while (n != -1) {
        n = fis.read(buffer);
        if (n > 0) {
            digest.update(buffer, 0, n);
        }
    }
    return digest.digest();
}

Output:
Duration: 1531

My guess what is causing your slowness is the fact you are inputting it to a list rather the directly using it as a stream.
","235","<java><git><scala><hash><sha>","0","1","3","2017-03-30 05:56:38","43102860","9","4","3542989","","2017-03-29 19:36:02","2017-03-29 19:22:07",""
"17101051","SHA-1 in Amazon Api Authorization in Javascript","I've been trying to get Authorization for Amazon's s3 rest api going.  It's pretty damn complicated.
Because I'm trying to make a simple GET request from an admin page on my website, I'm just trying to do this through Javascript.  Here are the instructions for constructing the Signature for the Authorization header:
Signature = Base64( HMAC-SHA1( YourSecretAccessKeyID, UTF-8-Encoding-Of( StringToSign )     ))

To keep us sane, they give us a few examples, with the following givens:
var AWSSecretAccessKey = wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY,
    StringToSign = 'GET\n\n\nTue, 27 Mar 2007 19:36:42 +0000\n/johnsmith/photos/puppy.jpg;'

The output for this in their docs is bWq2s1WEIj+Ydj0vQ697zp+IXMU=.  Based on the following I am getting ZGVjNzNmNTE0MGU4OWQxYTg3NTg0M2MxZDM5NjIyZDI0MGQxZGY0ZQ==:
function encode_utf8(s) {
  return unescape(encodeURIComponent(s));
}

I used code.google.com's CryptoJS.HmacSHA1 function for the SHA1 hashing.  My final Signature function looks like this:
var signature = btoa( CryptoJS.HmacSHA1( aws_secret, encode_utf8( StringToSign) ) );

What is going wrong here???
","I actually found the answer from an SO question with reference to google's older (2.0) CrytpoJs library.  You need:

2.0.0-crypto-sha1.js
2.0.0-hmac-min.js

Then you create your signature as so:
Signature = btoa( Crypto.HMAC(Crypto.SHA1, encode_utf8(StringToSign), aws_secret, { asString: true }) )

I couldn't find a way to to get Strings instead of Bits in the new version.
","234","<javascript><encryption><amazon-s3><authorization><sha>","0","1","1","2013-06-14 05:26:23","17101635","0","1","1149459","","2013-06-14 04:50:11","2013-06-14 04:23:46",""
"48344534","Unable to get matching SHA1 digest from bouncycastle and openssl dgst","Am i going crazy? Here's my scala code with ""org.bouncycastle"" % ""bcprov-jdk15on"" % ""1.59""
import java.util.Base64
import java.security.MessageDigest
import org.bouncycastle.jce.provider.BouncyCastleProvider
import java.security.Security
import java.nio.charset.Charset

Security.addProvider(new BouncyCastleProvider)
val sha1 = MessageDigest.getInstance(""SHA1"", ""BC"")
val digest = sha1.digest(""foo"".getBytes(Charset.forName(""UTF-8"")))

Base64.getEncoder.encodeToString(digest)

this produces, for foo input C+7Hteo/D9vJXQ3UfzxbwnXaijM=
Openssl:
openssl dgst -binary -sha1 <<< ""foo"" | openssl enc -base64

for foo input  8dLS+STphqyG/fezbJS83zK+7BU=
The same is happening for MD5 and SHA256
Obviously someone is doing something different than the other.. but what?
I verified base64 encoding in isolation between openssl enc -base64 and java.util.Base64, and it seems like there's an extra character(..) in the openssl output, plus java.util.Base64 pads, otherwise it's a match
scala> Base64.getEncoder.encodeToString(""foo,bar,etc"".getBytes(Charset.forName(""UTF-8"")))
res6: String = Zm9vLGJhcixldGM=

$ openssl enc -base64 <<< ""foo,bar,etc""
Zm9vLGJhcixldGMK

","That's because shell adds a newline to the end of <<< foo, so the string that openssl sees is not just ""foo"", but rather ""foo\n"".
Try echo -n foo | openssl dgst -binary -sha1 | base64
","233","<java><scala><shell><bouncycastle><sha>","0","3","1","2018-01-20 12:27:38","48344930","0","","608639","","2018-01-20 12:27:38","2018-01-19 15:35:40",""
"41744028","SHA512 hashing gives incorrect (?) results when ""salted""","I want to implement SHA512 hashing using a salt. I started here, leading to this mcve:
import java.security.MessageDigest;
import org.junit.Test;

public class Sha512Mcve {

    private final String ENCODING = ""ISO-8859-1"";

    @Test
    public void test() {
        System.out.println(computeHashFor(""whatever""));
    }

    private String computeHashFor(String toHash) {
        String salt = ""salt"";
        MessageDigest md;
        try {
            md = MessageDigest.getInstance(""SHA-512"");
//          md.update(salt.getBytes(ENCODING));
            byte[] bytes = md.digest(toHash.getBytes(ENCODING));

            return toUnixRepresentation(salt, bytes);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    private String toUnixRepresentation(String salt, byte[] bytes) {
        StringBuilder sb = new StringBuilder();
        sb.append(""$6$"");
        sb.append(salt);
        sb.append(""$"");

        for (int i = 0; i < bytes.length; i++) {
            int c = bytes[i] & 0xFF;
            if (c < 16) sb.append(""0"");
            sb.append(Integer.toHexString(c));
        }
        return sb.toString();
    }
}

Thing is: when I leave the line md.update() commented out, this code gives me the exact same results as some online hash generators (like this one).
For example, hashing the word ""whatever"" gives a hash value ae3d....63a.
But when I run my code with that salt operation; I get different results (again compared against that online tool, which allows to set a salt string, too).
My implementation results in 413...623; the online tool says F25...686.
Any explanation in which way ""salting"" leads to ""implementation specific"" results? 
Is there something I should do differently in my code?
","Salt before or after?
What the calculator does when you set the salt option

whateversalt

What you are doing in your code

saltwhatever

resutls from the calculator
whateversalt
F2527142C752B05467EE53B44735397F5B4C870DF0F154A0CF3AC23B31CF42EE7E1002D326B57DF60ED4B7449CF101290BDC0BECCB677AAAD846CFBE140DF686

saltwhatever
41333B9BAFC14CB3D1106D72A5D461F348B9EA1304A82989E00E5FC2D3239339492FCA12ED5EBF5F6802955C95B5F7ADA4CA035A911C2F29ABE905C3923CF623

Therefore to match the calculation you just have to reverse the order and add the salt last
        md.update(toHash.getBytes(ENCODING));
        byte[] bytes = md.digest(salt.getBytes(ENCODING));

Or even
        md.update(toHash.getBytes(ENCODING));
        md.update(salt.getBytes(ENCODING));
        byte[] bytes = md.digest();

","233","<java><hash><salt><sha>","2","3","1","2017-01-19 15:23:48","41745018","1","3","-1","","2017-05-23 12:16:28","2017-01-19 14:18:45",""
"26735580","C code openssl sha256 gives wrong output","I Have this code to perform a simple sha256 for a string.
theword are extracted from a textfile, line by line.
char sha256fromString()
{
SHA256_CTX ctx;
SHA256_Init(&ctx);
SHA256_Update(&ctx, keyword, strlen(keyword));
SHA256_Final(outkey, &ctx);
return outkey;
}

keyword is derived from :
FILE *fp;
char filename[] = ""file.txt"";

if ((fp = fopen(filename, ""r"")) == 0)
{
     fprintf(stderr, ""%s: failed to open file %s\n"", argv[0], filename);
     exit(1);
}

while (fgets(keyword, sizeof(keyword), fp) != NULL)

{

This gives me for input 
0:
9a271f2a916b0b6ee6cecb2426f0b3206ef074578be55d9bc94f6f3fe3ab86aa

I need:
5feceb66ffc86f38d952786c6d696c79c2dbc239dd4e91b46729d73a27fb57e9

","","231","<c++><c><openssl><sha><sha256>","0","","0","2014-11-04 12:49:32","","6","","","","","2014-11-04 12:49:32",""
"13291082","git download an ""anonymous"" zip file with only changed files from a date (SHA) and update the server","I need to update an old site.
My idea is to upload only modified files to an FTP server to save connection bandwidth.
In the same time I want to anonymise the files, putting them into a ""clean slate"" or anonymous archive that doesn't contain any operating system information whatsoever (mostly of these information is contained in hidden files like lists of file logs, system informations, icons data, etc..), it takes a few seconds, for any operating system to write in any downloaded folder, but it can not access an archive or zipped folder.
Is there a way to tell Git to make a package (zip archive) of all files and folders being committed (modified) since a particular revision number (SHA) to the most recent version (HEAD)? 
Let's say I've committed three files each one in a different folder in the last commit.
I want only those three files to be exported in an archive: 
changed_files-from-[SHA]-to-HEAD-[SHA].zip

The purpose is to upload this archive file via ftp to a server and to uncompress it using a shell command on the server form the right folder.
This will then overwrite the existing files only with the three new files.
","","229","<git><shell><operating-system><sha>","1","","0","2014-02-22 04:43:51","","3","","1423143","","2014-02-22 04:43:51","2012-11-08 14:36:36",""
"50282136","How do I represent uint8 literals in Java","I am trying to re-implement some code that uses libsodium in Java.
The original code declares an array of type uint8:
#define SECRET ((uint8_t[]){ 0xAA, 0xBB, 0xCC ... }) // not the real secret!

and feeds that to libsodium's crypto_hash_sha256_update
My challenge in implementing this in Java is that Java has no unsigned bytes, so I can't actually type 0xAA as a byte.
Things I've tried:

Declaring my array as short/int: I think this breaks because of 0 padding
Declaring the literals as 0b11110000... format, this doesn't give the right answers (I have some test data from the original implementation)
Declaring an array of char [] and concatenating the literals: final char[] salt = { 0xAABB, 0xCCDD, ...}`, doesn't give right answers either

EDIT
this is my short attempt
    final short[] salt = { 0xAA, 0xBB, ...};


    final Hasher hasher = Hashing.sha256().newHasher();
    hasher.putLong(input);
    for (int i=0; i < salt.length; i++) {
        hasher.putShort(salt[i]);
    }
    return hasher.hash().asBytes();

","Looks like my original code worked
final short[] salt = { 0xAA, 0xBB, ...};


final Hasher hasher = Hashing.sha256().newHasher();
hasher.putLong(input);
for (int i=0; i < salt.length; i++) {
    hasher.putShort(salt[i]);
}
return hasher.hash().asBytes();

The problem was I forgot to left-pad my result before comparing
","229","<java><sha><primitive><libsodium>","0","0","1","2018-05-11 20:29:50","50299843","6","","75857","","2018-05-10 22:09:34","2018-05-10 22:02:51",""
"47806381","HMAC Base64 Authentication?","I have no clue what's even going on in this but I am attempting to use an API and they have yet another different authentication standard called HMAC with Sha384 to base64. 
This is the example provided: 
class ICObenchAPI {

private $privateKey = 'private-key';
private $publicKey  = 'public-key';
private $apiUrl     = 'https://icobench.com/api/v1/';
public  $result;

public function getICOs($type = 'all', $data = ''){ 
    return $this->send('icos/' . $type, $data); 
}   
public function getICO($icoId, $data = ''){ 
    return $this->send('ico/' . $icoId, $data); 
}       
public function getOther($type){ 
    return $this->send('other/' . $type, ''); 
}

private function send($action, $data){

    $dataJson = json_encode($data);                 
    $sig = base64_encode(hash_hmac('sha384', $dataJson, $this->privateKey, true));  

    $ch = curl_init($this->apiUrl . $action);
    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, ""POST""); 
    curl_setopt($ch, CURLOPT_POSTFIELDS, $dataJson);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_HTTPHEADER, array(
        'Content-Type: application/json',
        'Content-Length: ' . strlen($dataJson),
        'X-ICObench-Key: ' . $this->publicKey,
        'X-ICObench-Sig: ' . $sig)
    );

    $reply = curl_exec($ch);
    $ff = $reply;
    $reply = json_decode($reply,true);

    if(isset($reply['error'])){
        $this->result = $reply['error'];
        return false;
    }else if(isset($reply['message'])){
        $this->result = $reply['message'];
        return true;
    }else if(isset($reply)){
        $this->result = json_encode($reply);
        return true;
    }else{
        $this->result = htmlspecialchars($ff);
        return false;
    }
}

public function result(){
    return $this->result;
}

}
I'm looking to take the PHP example provided and turn it into a nodeJS script, just really don't know where to start. I've looked at crypto-js and others but just don't comperhend what specifically is happening in the request to make since of what i'm even writing
","Crypto-js is the good way to do.
You need to first encrypt your data and then Base64 it to create a signature used in header
    let dataJSON = JSON.stringify(data);

    let sign = CryptoJS.HmacSHA384(dataJSON, this.privateKey);
    sign = CryptoJS.enc.Base64.stringify(sign);

I pushed on github a working example : ICObenchAPI.js
","227","<php><node.js><base64><sha><hmac>","0","1","2","2018-02-10 18:35:00","","0","","2256024","","2017-12-14 06:39:37","2017-12-14 05:24:22",""
"47806381","HMAC Base64 Authentication?","I have no clue what's even going on in this but I am attempting to use an API and they have yet another different authentication standard called HMAC with Sha384 to base64. 
This is the example provided: 
class ICObenchAPI {

private $privateKey = 'private-key';
private $publicKey  = 'public-key';
private $apiUrl     = 'https://icobench.com/api/v1/';
public  $result;

public function getICOs($type = 'all', $data = ''){ 
    return $this->send('icos/' . $type, $data); 
}   
public function getICO($icoId, $data = ''){ 
    return $this->send('ico/' . $icoId, $data); 
}       
public function getOther($type){ 
    return $this->send('other/' . $type, ''); 
}

private function send($action, $data){

    $dataJson = json_encode($data);                 
    $sig = base64_encode(hash_hmac('sha384', $dataJson, $this->privateKey, true));  

    $ch = curl_init($this->apiUrl . $action);
    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, ""POST""); 
    curl_setopt($ch, CURLOPT_POSTFIELDS, $dataJson);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_HTTPHEADER, array(
        'Content-Type: application/json',
        'Content-Length: ' . strlen($dataJson),
        'X-ICObench-Key: ' . $this->publicKey,
        'X-ICObench-Sig: ' . $sig)
    );

    $reply = curl_exec($ch);
    $ff = $reply;
    $reply = json_decode($reply,true);

    if(isset($reply['error'])){
        $this->result = $reply['error'];
        return false;
    }else if(isset($reply['message'])){
        $this->result = $reply['message'];
        return true;
    }else if(isset($reply)){
        $this->result = json_encode($reply);
        return true;
    }else{
        $this->result = htmlspecialchars($ff);
        return false;
    }
}

public function result(){
    return $this->result;
}

}
I'm looking to take the PHP example provided and turn it into a nodeJS script, just really don't know where to start. I've looked at crypto-js and others but just don't comperhend what specifically is happening in the request to make since of what i'm even writing
","I wrote a Node js wrapper library called node-icobench. You are welcome to use it.
npm install node-icobench
Here is a sneak peek to the HMAC part with a few alterations for the sake of this example:
const crypto = require('crypto');

// Stringify POST data
let jsonData = JSON.stringify(data);

// Create HMAC based on algo and private key
let hmac = crypto.createHmac('sha384', privateKey);

// Create HMAC Digest of json data
hmac.update(jsonData);

// return Base64 encoding of HMAC
let signedData = hmac.digest('base64');

","227","<php><node.js><base64><sha><hmac>","0","0","2","2018-02-10 18:35:00","","0","","2256024","","2017-12-14 06:39:37","2017-12-14 05:24:22",""
"36223827","Java to PHP code difference","I've been given a chunk of code which describes an ""algorithm"" for token generation. This code is written in Java and works as is correctly. The given Java code must remain exactly as is, however, my requirement is to have the same ""algorithm"" used within a PHP application and I'm having a hard time retrieving the same result.
Java code:
public static void main(String[] args)
        throws
        UnsupportedEncodingException,
        NoSuchAlgorithmException {

    // Let's stick to a fixed date for this SO question
    //DateFormat dateFormat = new SimpleDateFormat(""yyyyMMddHHmm"");
    //dateFormat.setTimeZone(TimeZone.getTimeZone(""UTC""));
    //String date = dateFormat.format(new Date());
    String date = ""201603251605"";
    String name = ""some_dummy_data_one"";
    String size = ""some_dummy_data_two"";

    // MD5 'name'
    MessageDigest md5 = MessageDigest.getInstance(""MD5"");
    md5.update(name.getBytes());
    byte[] md5name = md5.digest();

    // What happens here is beyond me - How would one translate this to PHP?
    byte[] sizeBytes = (size + date).getBytes();
    byte[] tokenBytes = new byte[md5name.length + sizeBytes.length];

    System.arraycopy(sizeBytes, 0, tokenBytes, 0, sizeBytes.length);
    System.arraycopy(md5name, 0, tokenBytes, sizeBytes.length, md5name.length);

    // SHA256
    MessageDigest sha256 = MessageDigest.getInstance(""SHA-256"");
    sha256.update(tokenBytes);
    byte[] tokenHash = sha256.digest();

    System.out.println(Base64.getEncoder().encodeToString(tokenHash));
}

This prints:

LsPw/5/4uKmQfVaU1LRASxG89mgMt7OxX+h7JGRo1ZU=

Ultimately and ideally I'd love a quick way to just get the same result with PHP code, but I've the urge to understand what's going on instead of just reaching the desired result.
Now to attempt to display that I have at least done a little homework and I'm not just seeking someone to do my work for me, up until the MD5 conversion of the strings, I've managed to get an identical base64 encoded  SHA256 string of a single string skipping the middle chunk of code containing the 'System.arrayCopy' bit:
Java code:
public static void main(String[] args)
        throws
        UnsupportedEncodingException,
        NoSuchAlgorithmException {

    String date = ""201603251605"";

    // MD5 'name'
    MessageDigest md5 = MessageDigest.getInstance(""MD5"");
    md5.update(date.getBytes());
    byte[] md5Date = md5.digest();

    // SHA256
    MessageDigest sha256 = MessageDigest.getInstance(""SHA-256"");
    sha256.update(md5Date);
    byte[] tokenHash = sha256.digest();

    System.out.println(Base64.getEncoder().encodeToString(tokenHash));
}

PHP code:
private function generateToken() {
    $md5Date = md5(""201603251605"", true);        
    $shaString = hash(""sha256"", $md5Date, true);

    return base64_encode($shaString); 
}

Java output:

mEkkRlBkwyoWFMsA+v/hP/m9sD6FdzM6LZHIORtr260=

PHP output:

mEkkRlBkwyoWFMsA+v/hP/m9sD6FdzM6LZHIORtr260=

So according to the above, my md5 and sha of a single string works fine, but that's not the problem. The problem is understanding what is happening when multiple strings are defined and are being mashed together in the Java code. Why does it seem overly complicated and is there a simple way of doing it in PHP?
Could somebody please explain what is happening in between the MD5 and SHA256 generation so that I can translate it to PHP code? I've attempted to read up on the Java System.arrayCopy documentation, but I feel as though I'm not experienced/smart enough to understand what is going on there. If there's a simple solution to this, I'd appreciate it very much.
","You'll kick yourself when you realize how simple what it's actually doing is.
<?php
$date = ""201603251605"";
$name = ""some_dummy_data_one"";
$size = ""some_dummy_data_two"";

$md5_name = md5($name, true);

$token_bytes = $size.$date.$md5_name;

$token_hash = hash(""sha256"", $token_bytes, true);

echo base64_encode($token_hash);

arraycopy is just a pretty confusing way of appending size, date and md5name. Why the Java code is so complicated I have no idea.
","227","<java><php><md5><sha>","1","1","2","2016-03-25 17:23:11","36224082","3","3","","","","2016-03-25 16:22:56",""
"36223827","Java to PHP code difference","I've been given a chunk of code which describes an ""algorithm"" for token generation. This code is written in Java and works as is correctly. The given Java code must remain exactly as is, however, my requirement is to have the same ""algorithm"" used within a PHP application and I'm having a hard time retrieving the same result.
Java code:
public static void main(String[] args)
        throws
        UnsupportedEncodingException,
        NoSuchAlgorithmException {

    // Let's stick to a fixed date for this SO question
    //DateFormat dateFormat = new SimpleDateFormat(""yyyyMMddHHmm"");
    //dateFormat.setTimeZone(TimeZone.getTimeZone(""UTC""));
    //String date = dateFormat.format(new Date());
    String date = ""201603251605"";
    String name = ""some_dummy_data_one"";
    String size = ""some_dummy_data_two"";

    // MD5 'name'
    MessageDigest md5 = MessageDigest.getInstance(""MD5"");
    md5.update(name.getBytes());
    byte[] md5name = md5.digest();

    // What happens here is beyond me - How would one translate this to PHP?
    byte[] sizeBytes = (size + date).getBytes();
    byte[] tokenBytes = new byte[md5name.length + sizeBytes.length];

    System.arraycopy(sizeBytes, 0, tokenBytes, 0, sizeBytes.length);
    System.arraycopy(md5name, 0, tokenBytes, sizeBytes.length, md5name.length);

    // SHA256
    MessageDigest sha256 = MessageDigest.getInstance(""SHA-256"");
    sha256.update(tokenBytes);
    byte[] tokenHash = sha256.digest();

    System.out.println(Base64.getEncoder().encodeToString(tokenHash));
}

This prints:

LsPw/5/4uKmQfVaU1LRASxG89mgMt7OxX+h7JGRo1ZU=

Ultimately and ideally I'd love a quick way to just get the same result with PHP code, but I've the urge to understand what's going on instead of just reaching the desired result.
Now to attempt to display that I have at least done a little homework and I'm not just seeking someone to do my work for me, up until the MD5 conversion of the strings, I've managed to get an identical base64 encoded  SHA256 string of a single string skipping the middle chunk of code containing the 'System.arrayCopy' bit:
Java code:
public static void main(String[] args)
        throws
        UnsupportedEncodingException,
        NoSuchAlgorithmException {

    String date = ""201603251605"";

    // MD5 'name'
    MessageDigest md5 = MessageDigest.getInstance(""MD5"");
    md5.update(date.getBytes());
    byte[] md5Date = md5.digest();

    // SHA256
    MessageDigest sha256 = MessageDigest.getInstance(""SHA-256"");
    sha256.update(md5Date);
    byte[] tokenHash = sha256.digest();

    System.out.println(Base64.getEncoder().encodeToString(tokenHash));
}

PHP code:
private function generateToken() {
    $md5Date = md5(""201603251605"", true);        
    $shaString = hash(""sha256"", $md5Date, true);

    return base64_encode($shaString); 
}

Java output:

mEkkRlBkwyoWFMsA+v/hP/m9sD6FdzM6LZHIORtr260=

PHP output:

mEkkRlBkwyoWFMsA+v/hP/m9sD6FdzM6LZHIORtr260=

So according to the above, my md5 and sha of a single string works fine, but that's not the problem. The problem is understanding what is happening when multiple strings are defined and are being mashed together in the Java code. Why does it seem overly complicated and is there a simple way of doing it in PHP?
Could somebody please explain what is happening in between the MD5 and SHA256 generation so that I can translate it to PHP code? I've attempted to read up on the Java System.arrayCopy documentation, but I feel as though I'm not experienced/smart enough to understand what is going on there. If there's a simple solution to this, I'd appreciate it very much.
","Sounds like you got the answer for how to do it in PHP. The java code does basically the same thing.  Here's what it's doing...
// This concatenates size+date and the md5 hash, and then creates a SHA-256 hash from that value.

byte[] sizeBytes = (size + date).getBytes();  //Get byte array of size and date concatenation
byte[] tokenBytes = new byte[md5name.length + sizeBytes.length]; //Create the right size byte array to fit md5 and size+date

System.arraycopy(sizeBytes, 0, tokenBytes, 0, sizeBytes.length); // copies the size+date byte array into the first part of the token bytes byte array.
System.arraycopy(md5name, 0, tokenBytes, sizeBytes.length, md5name.length); //concatenates the md5 hash and size+bytes into the tokenBytes array 

// SHA256
MessageDigest sha256 = MessageDigest.getInstance(""SHA-256"");//Get the SHA-256 algorithm instance
sha256.update(tokenBytes); // give it a value to hash
byte[] tokenHash = sha256.digest(); // create SHA-256 hash from token bytes

","227","<java><php><md5><sha>","1","1","2","2016-03-25 17:23:11","36224082","3","3","","","","2016-03-25 16:22:56",""
"37165930","Reasonable SHA1 hash length for a specific number of values","I have a list of approx. 2500 images. For each image I create a SHA1 hash with which i can reference each picture. I also use the hashes to find duplicate images in the list.
By default, SHA1 hashes are 40 characters long. Currently I cut the hashes down to the first 7 characters.
Is this a reasonable length or is the collision propability too high?
","What probability is acceptable?
Note: a SHA1 hash is 20-bytes, do you mean 40-hexadecimal characters?
7 hex characters would be 7*4 = 28-bits.
From the table, looking at 32-bits and 2900 elements the probability is .01% for a collision which IMO is not good enough.
Why not just use the full hash and 20-bytes instead of hexadecimal?
","227","<encryption><hash><sha>","1","2","1","2016-05-11 15:17:26","37166763","3","","","","","2016-05-11 14:37:42",""
"49051130","How to create a SHA-256 hash of a string in Mason code?","I am trying to create a SHA-256 hash of a string in
Mason
by following the answers to the Stack Overflow question
SHA256 digest in perl
and using the
Digest::SHA module
These are the contents of the file abc.mi that contains that code:
use Digest::SHA qw(sha256_hex);
<%init>
    my $message = 'random content';
    my $encryptedMsg = sha256_hex($message);
</%init>

But it's throwing the following error:
Undefined subroutine &Safe::Root0::HTML::Mason::Commands::sha256_hex called

Any idea why it is considering sha256_hex as undefined even though I defined it at the beginning of the file itself?
Has this got something to do with the fact this is Mason code with extension .mi?
========== EDIT ==========
Here is the solution to my query, after going through the answers posted for this question.
<%init>
    my $message = 'random content';
    my $encryptedMsg = Digest::SHA::sha256_hex($message);
</%init>

","In Mason, your Perl code needs to be inside your tags. Anything outside of a tag is just content to be included in the output. So you want something like:
<%init>
  use Digest::SHA qw(sha256_hex);
  my $message = 'random content';
  my $encryptedMsg = sha256_hex($message);
</%init>

","225","<perl><sha><mason>","1","3","1","2018-03-02 09:11:22","49054770","2","","5254764","","2018-03-02 09:11:22","2018-03-01 13:50:25",""
"6671926","Using an HMAC on an a already hashed value, good or bad practice?","Hi all I have a question on if this is good practice or not.  I am aware that simply double hashing a value can be bad for various reasons.
What I would like to do would be something like this, in php.
$val = hash_hmac('sha256', md5($password), $salt);

The reason for this is that we are authenticating with a trusted partner over a closed api.  The passwords are stored as an MD5 hash in our DB.  However, I don't want our partner to send this same value across the net.
This way I can compare the md5'd password inside our database to unique hash that our partner has sent.
What say ye?
","First of all, is this a user password (ie, you are authenticating on-behalf-of a user), or a shared secret between your two servers?
If it's a user password, stop. You are saving passwords in plaintext (or as an unsalted md5). Either way is bad. Save passwords as a salted hash and use OAuth or something to authenticate instead.
If it's a shared secret between two servers (not representing a user), you can still use oauth or something, but if you just want something simple, you should authenticate like this:
$val = hash_hmac('sha256', $nonce, $secret);

$nonce is a one-time-value chosen by the server randomly to prevent replay attacks.
Keep in mind that if you don't have a nonce, then whatever value you send across is your shared secret. It doesn't matter if you derive it from a hmac of a md5 or whatever; if it ends up being the same each time, it is equivalent to a password sent across the communications channel. And remember to secure the communications channel from MITMs as well!
","225","<md5><hash><hmac><sha>","0","0","1","2011-07-12 22:33:17","","0","","","","","2011-07-12 22:21:32",""
"15596477","Is there any chance of my SHA1'd string being non-unique?","I have the following snippet where I am constructing a string to send out to the user as an email confirmation code:
$confirmation_code = $user_id . time() . date('d-m-Y',time());
$confirmation_code = sha1($confirmation_code);

Is there any chance of $confirmation_code being duplicated at any step?
NOTE: Please remember that $user_id is unique for each user
","Given that $user_id is unique for each user, this should (in theory) mean that your confirmation codes should never clash (be ""un-unique"")
However, in reality, SHA1 hashes can clash (see this MSDN blog article for more info).
Therefore if the reason you're asking this question is so you can decided whether or not to make the column UNIQUE in a database, don't.
","224","<php><duplicates><unique><sha>","1","1","2","2013-03-24 10:21:25","","2","","1563422","","2013-03-24 10:21:25","2013-03-24 08:17:54","2013-03-24 10:52:39"
"15596477","Is there any chance of my SHA1'd string being non-unique?","I have the following snippet where I am constructing a string to send out to the user as an email confirmation code:
$confirmation_code = $user_id . time() . date('d-m-Y',time());
$confirmation_code = sha1($confirmation_code);

Is there any chance of $confirmation_code being duplicated at any step?
NOTE: Please remember that $user_id is unique for each user
","Yes, the code should be unique, unless you're generating more than one per user per second. It's also terrifically predictable. If an attacker knows the id of a user and the rough time of when the code is being generated, it's trivial to guess the code. If the attacker is allowed an unlimited number of guesses, even the rough time doesn't really matter, as he could easily try all valid codes for the last couple of years.
You should really generate a (pseudo) random code instead of a code based on rather static data. On Linux, just read from /dev/random:
$code = bin2hex(file_get_contents('/dev/random', false, null, -1, 32));
                                                                  ^^
                                                          desired length/2

","224","<php><duplicates><unique><sha>","1","1","2","2013-03-24 10:21:25","","2","","1563422","","2013-03-24 10:21:25","2013-03-24 08:17:54","2013-03-24 10:52:39"
"50985829","Generate HMAC SHA Algorithm using URI and Key","I wrote a Java program which generates HMAC SHA hash code, But due to some reason I have to write the same code in NodeJs/JavaScript. I tried googling around but did not get anything. In this Java code, I am passing URI and Key as arguments, to generate the hash code, where URI contains Timestamp. 
The java code is as :
    public static String calcMAC(String data, byte[] key) throws Exception {
    String result=null;
    SecretKeySpec signKey = new SecretKeySpec(key, SecurityConstants.HMAC_SHA1_ALGORITHM);
    Mac mac = Mac.getInstance(SecurityConstants.HMAC_SHA1_ALGORITHM);
    mac.init(signKey);
    byte[] rawHmac;
    try {
        rawHmac = mac.doFinal(data.getBytes(""US-ASCII""));
        result = Base64.encodeBase64String(rawHmac);
    } catch (Exception e) {
        e.printStackTrace();
    }
    return result.trim();
}

public static void main(String args[]) {
    String timestamp = args[0];
    String key = ""d134hjeefcgkahvg32ajkdbaff84ff180"";
    String out = null;
    try {
        out = calcMAC(""/req?app_id=47ca34"" + timestamp + ""=2018-05-22T12:02:15Z"", 
                key.getBytes());
        System.out.println(URLEncoder.encode(out, ""UTF-8""));
    } catch (Exception e) {
        e.printStackTrace();
    }
}

Is it possible to achieve the same goal in NodeJs/JavaScript?
Note:: I have to call this script from Postman pre-request script.
","The crypto module should do this for you, you can substitute the 'data' variable with whatever you want to hash: 
const crypto = require('crypto');

const data = 'The fault dear Brutus lies not in our stars';
const key = Buffer.from('d134hjeefcgkahvg32ajkdbaff84ff180', 'utf8');

const hash = crypto.createHmac('sha1', key).update(data).digest('base64');
const uriEncodedHash = encodeURIComponent(hash);
console.log('Hash: ' + uriEncodedHash);

Hashing the data in both Java and Node.js gives me the result (URI Encoded) of:
TJJ3xj93m8bfVpGoucluMQqkB0o%3D

The same Java code would be:
public static void main(String args[]) {
    String data = ""The fault dear Brutus lies not in our stars"";
    String key = ""d134hjeefcgkahvg32ajkdbaff84ff180"";
    String out = null;
    try {
        out = calcMAC(data, key.getBytes());
        System.out.println(URLEncoder.encode(out, ""UTF-8""));
    } catch (Exception e) {
        e.printStackTrace();
    }
}

Again, we can put anything into 'data' we want.
","222","<javascript><node.js><hmac><sha>","1","2","1","2018-06-22 10:56:50","50986321","2","","6720576","","2018-06-22 10:42:15","2018-06-22 10:21:05",""
"9128421","Why google asks MD5 instead of SHA1?","I am trying develop an Android app which uses Google maps. So for the maps APIkey, I read the document and got the MD5 fingerprint.
While searching the procedure to get MD5 fingerprint, I came to know that SHA1 is more secure than MD5, If it is right then why google uses MD5 instead of SHA1.
","In this case the MD5 is not used for a security reason but for the uniqueness of your app.
The probability to get a colision with an other key is very low.
","221","<google-maps><md5><sha>","1","3","1","2012-02-03 12:16:04","9128536","2","1","","","","2012-02-03 12:07:06",""
"33540897","Deprecation of SHA-1 Hashing Algorithm for Microsoft Root Certificate Program","
Microsoft Security Advisory 2880823 has been released along with the
  policy announcement that Microsoft will stop recognizing the validity
  of SHA-1 based certificates after 2016.  

Does it mean that all signatures created with SHA1 algorithm will be not valid?
Or only certificates used the SHA-1 algorithm will be not valid in newer operation systems?  
","The latter.
It would be very strange if the cryptographic security provider would not be able to handle PKCS#1 signatures with SHA1 anymore. What will happen is that certificate chain validation will not allow the SHA-1 signature to be used for certificate verification (except for the trusted/root certificate, because these are explicitly trusted in the first place).
As stated in the advisory:

The new policy will no longer allow root certificate authorities to issue X.509 certificates using the SHA-1 hashing algorithm for the purposes of SSL and code signing after January 1, 2016.

This seems to only affect intermediate CA certificates although I would not be surprised if e.g. IE would also disallow the use of SHA-1 for chain validation for lower intermediate CA's and end user certificates.
The updates also indicate that Microsoft won't allow any certificates to be signed using SHA-1 within a chain for TLS.
As for the ""newer operating systems"" part of the question: I would expect policy change to be implemented for all supported platforms (at the time the change is introduced).

Note that the use of SHA-1 for signature verification will be pretty dangerous, especially if the contents can be controlled. This is very much the case when the signature is used for non-repudiation. It is much less the case if the signature is used for e.g. challenge verification in a challenge response protocol where the input is ephemeral and generated by the party that performs the verification.
","220","<rsa><digital-signature><sha1><sha>","0","1","1","2015-11-08 23:30:48","","0","","","","","2015-11-05 09:31:56",""
"46035976","SQL Server 2012 password hash not matching","I'm no doubt doing something daft, but I'm struggling here!
Upgrading security on a users table. Converting all existing passwords using sqls built in hashbytes pw, for now not using salt until I can get this working.
Table: admin has 4 records
Current password: admin.password='test'
update admin 
set passwordenc = hashbytes('SHA2_256', password);

passwordenc is of type varbinary(50).
Entry now:
admin.passwordenc is 0x9F86D081884C7D659A2FEAA0C55AD015A3BF4F1B2B0B822CD15D6C15B0F00A08

which is what I want.
I have a .net cshtml website with login, some code:
var uname = Request[""username""];
var upass = Request[""password""];
var adsql = ""select user_id, firstname, surname, profile, username from admin where username=@0 and passwordenc= hashbytes('SHA2_256', @1) "";

No records are found.
In dev tools in Chrome I can see that 'admin' is passed across for username, and 'test' for the password.
SQL Server Profiler shows:
exec sp_executesql N'select user_id, firstname, surname, profile, username from admin where username=@0 and passwordenc= hashbytes(''SHA2_256'', @1) ',
                   N'@0 nvarchar(5),@1 nvarchar(4)',@0=N'admin',@1=N'test'

In my app, if I try this:
var adsql = ""select user_id, firstname, surname, profile, username from admin where username=@0 and passwordenc=hashbytes('SHA2_256', '""+ upass+""') "";

It works. 
And the profile log
exec sp_executesql N'select user_id, firstname, surname, profile, username from admin where username=@0 and passwordenc=hashbytes(''SHA2_256'', ''test'') ',N'@0 nvarchar(5),@1 nvarchar(4)',@0=N'admin',@1=N'test'

Similarly, if I do this 
var adsql = ""select user_id, firstname, surname, profile, username from admin where username=@0 and passwordenc= 0x9F86D081884C7D659A2FEAA0C55AD015A3BF4F1B2B0B822CD15D6C15B0F00A08 "";

passing a hardcoded hash it also works. 
So passing 'test' in a non parameterised was works, as does checking the hash, but @1 doesn't, and can't see nowt wrong in profiler. Have tried faffing about with the convert function incase its checking a string against a binary but get same results.
What daft thing am I doing wrong?
","","220","<c#><sql-server><parameters><sha>","0","","0","2017-09-04 11:36:27","","7","0","13302","","2017-09-04 11:36:27","2017-09-04 11:23:45",""
"50271652","maven repository download sha files","I am trying to setup maven as build tool on a platform without internet access. 
Is it ok if I just copy the contents of ~/.m2 in the target platform.
Except from jar files I also see following in the repository structure:
XX.jar.lastUpdated
#NOTE: This is an Aether internal implementation file, its format can be changed without prior notice.
#Wed May 09 12:54:27 EEST 2018
https\://repository.cloudera.com/artifactory/cloudera-repos/.error=
https\://repo.maven.apache.org/maven2/.lastUpdated=1525859667446
https\://repository.cloudera.com/artifactory/cloudera-repos/.lastUpdated=1525859553024

xx.jar/sha1:
5a3158b41dcc4d88b82d08b4b5802c54f396bd49p3700633
xx.pom:
<?xml version='1.0' encoding='UTF-8'?>
<project xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns=""http://maven.apache.org/POM/4.0.0"">
    <modelVersion>4.0.0</modelVersion>
    <groupId>org.scalatest</groupId>
    <artifactId>scalatest_2.10</artifactId>
    <packaging>bundle</packaging>
    <description>scalatest</description>
    <version>3.0.1</version>
    <name>scalatest</name>
    <organization>
        <name>org.scalatest</name>
    </organization>
    <url>http://www.scalatest.org</url>
    <licenses>
        <license>
            <name>the Apache License, ASL Version 2.0</name>
            <url>http://www.apache.org/licenses/LICENSE-2.0</url>
            <distribution>repo</distribution>
        </license>
    </licenses>
    <scm>
        <url>https://github.com/scalatest/scalatest</url>
        <connection>scm:git:git@github.com:scalatest/scalatest.git</connection>
        <developerConnection> scm:git:git@github.com:scalatest/scalatest.git </developerConnection>
    </scm>
    <developers>
        <developer>
            <id>bvenners</id>
            <name>Bill Venners</name>
            <email>bill@artima.com</email>
        </developer>
        <developer>
            <id>gcberger</id>
            <name>George Berger</name>
            <email>george.berger@gmail.com</email>
        </developer>
        <developer>
            <id>cheeseng</id>
            <name>Chua Chee Seng</name>
            <email>cheeseng@amaseng.com</email>
        </developer>
    </developers>
    <dependencies>
        <dependency>
            <groupId>org.scala-lang</groupId>
            <artifactId>scala-compiler</artifactId>
            <version>2.10.6</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.scala-lang</groupId>
            <artifactId>scala-library</artifactId>
            <version>2.10.6</version>
        </dependency>
        <dependency>
            <groupId>org.scalactic</groupId>
            <artifactId>scalactic_2.10</artifactId>
            <version>3.0.1</version>
        </dependency>
        <dependency>
            <groupId>org.scala-lang</groupId>
            <artifactId>scala-reflect</artifactId>
            <version>2.10.6</version>
        </dependency>
        <dependency>
            <groupId>org.scalacheck</groupId>
            <artifactId>scalacheck_2.10</artifactId>
            <version>1.13.4</version>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.scala-sbt</groupId>
            <artifactId>test-interface</artifactId>
            <version>1.0</version>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.easymock</groupId>
            <artifactId>easymockclassextension</artifactId>
            <version>3.1</version>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.jmock</groupId>
            <artifactId>jmock-legacy</artifactId>
            <version>2.5.1</version>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-all</artifactId>
            <version>1.9.0</version>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.testng</groupId>
            <artifactId>testng</artifactId>
            <version>6.8.7</version>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>com.google.inject</groupId>
            <artifactId>guice</artifactId>
            <version>2.0</version>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.10</version>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.seleniumhq.selenium</groupId>
            <artifactId>selenium-java</artifactId>
            <version>2.35.0</version>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.apache.ant</groupId>
            <artifactId>ant</artifactId>
            <version>1.7.1</version>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>1.3.2</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-server</artifactId>
            <version>8.1.8.v20121106</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-webapp</artifactId>
            <version>8.1.8.v20121106</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.ow2.asm</groupId>
            <artifactId>asm-all</artifactId>
            <version>4.1</version>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.pegdown</groupId>
            <artifactId>pegdown</artifactId>
            <version>1.4.2</version>
            <optional>true</optional>
        </dependency>
    </dependencies>
</project>

xx.pom.lastUpdated:
NOTE: This is an Aether internal implementation file, its format can be changed without prior notice.
#Wed May 09 12:51:01 EEST 2018
https\://repository.cloudera.com/artifactory/cloudera-repos/.error=
https\://repo.maven.apache.org/maven2/.lastUpdated=1525859461330
https\://repository.cloudera.com/artifactory/cloudera-repos/.lastUpdated=1525859461229

xx.pom.sha1:
8858e7d282548a9c0644cfe1e47d8189cb57f4a7p3700633
","","219","<maven><jar><repository><offline><sha>","1","","0","2018-05-10 11:15:19","","1","","","","","2018-05-10 11:15:19",""
"53892724","easiest way to get sha256 of mobile apps","Am trying to find a way to get SHA256 of a mobile app,i have search around but i didn't understand some of the things i came across. i tried
  MessageDigest md = MessageDigest.getInstance(""SHA"");

 try {
     md.update(toChapter1);
     MessageDigest tc1 = md.clone();
     byte[] toChapter1Digest = tc1.digest();
     md.update(toChapter2);
     ...etc.
 } catch (CloneNotSupportedException cnse) {
     throw new DigestException(""couldn't make digest of partial content"");
 }

and also if you can explain the concept i will be glad
","To access APIs in Android from Google API console you need to generate an API Key. This same API key can be used for accessing multiple APIs under the same project. To generate an API key you require, SHA1 fingerprint of your keystore. Keystore is basically a place where the private keys for your app are kept. In simple words its a certificate generated by a user or a program, used for signing an Android app.
In Android, there are two types of keystores. A debug keystore and a release keystore. Debug keystore is generated automatically when the Android SDK is installed or run for the first time. Release keystore has to be generated manually by the user for each application before release. As it requires private information such as name, password etc. To obtain an Android SHA1 fingerprint from your desired keystore.
","219","<android><android-studio><sha>","1","1","2","2019-01-05 23:30:28","54057269","0","","","","","2018-12-22 03:04:02",""
"53892724","easiest way to get sha256 of mobile apps","Am trying to find a way to get SHA256 of a mobile app,i have search around but i didn't understand some of the things i came across. i tried
  MessageDigest md = MessageDigest.getInstance(""SHA"");

 try {
     md.update(toChapter1);
     MessageDigest tc1 = md.clone();
     byte[] toChapter1Digest = tc1.digest();
     md.update(toChapter2);
     ...etc.
 } catch (CloneNotSupportedException cnse) {
     throw new DigestException(""couldn't make digest of partial content"");
 }

and also if you can explain the concept i will be glad
","i found a Hashing Library at android arsenal and its very easy,simple and just one line of code. can hash MD5, SHA-1, SHA-256, SHA-384, or SHA-512.
1.first add this to your gradle and sync
implementation 'com.github.1AboveAll:Hasher:1.2'

Start hashing...

Hasher.Companion.hash(""Hello"",HashType.SHA_1);
","219","<android><android-studio><sha>","1","0","2","2019-01-05 23:30:28","54057269","0","","","","","2018-12-22 03:04:02",""
"17122553","PHP hash function doing something strange with ""\v"" - how do I enable escaping from the command line?","If I run the following in PHP
<?=hash('sha256', ""\v"");?>
I get this hash:
e7cf46a078fed4fafd0b5e3aff144802b853f8ae459a4f0c14add3314b7cc3a6
However if I put \v into any of the online tools like http://www.xorbin.com/tools/sha256-hash-calculator, I get the following hash:
1b5cec8c46451b5375ea7e61f310fe831ad17f62098beb7a5bfce304821e3f78

I realise that PHP is obviously hashing the escaped value, rather than the actual string,

\v    vertical tab (VT or 0x0B (11) in ASCII) (since PHP 5.2.5)

(Reference: http://www.php.net/manual/en/language.types.string.php#language.types.string.syntax.double)
but what I'm trying to figure out is how to get the same result as the PHP function using the command line or one of the online tools - I've tried VT, vt, 0x0B and 11 - but none of them give me the same result.
Thanks for your help!
UPDATE: As @Alex-Info.net pointed out, changing the double quotes to single quotes will treat the \v as a string, but unfortunately I can't change the PHP in this instance.
","As I said, I'd favor chaing your PHP code to match the online/commandline apps. Single quotes will not escape, and gets the results you mentionned.
<?= hash('sha256', '\v'); ?>

EDIT: Since you can't change the PHP code, here's how to tweak the command line so that it escapes correctly like PHP does:
echo -e -n ""\v"" | openssl dgst -sha256 , -e enables escaping.
","219","<php><bash><hash><escaping><sha>","1","2","1","2013-06-17 21:34:30","17123186","2","1","2146738","","2013-06-17 20:49:07","2013-06-15 10:18:40",""
"48524689","How to connect different firebase databases to release/beta/alpha versions?","I have one app that supposed to have different Firebase database, Firebase storage for release and beta versions but i'm not able to connect Firebase to more than one project because SHA certificate fingerprints supposed to be different.
Here is error from Firebase:

At the same time I cannot upload on Google Play app with different signing certificates. 
Here is error from Google Play Console:

Is it possible to somehow have different Firebase database for one project? Both versions are going to Google Play, both supposed to be signed, so debug builds will not work in current situation.
","Yes it is possible to have different Firebase database for one project.
Do not add SHA1 keys. As mentioned in the error 'you can omit the SHA1'
in any one firebase project, go to authentication -> SIGN-IN METHOD-> GOOGLE , click edit option, it will open up a view, as in the pic below

Expand 'Whitelist client ids *' Click on add, add the client Id of the other firebase project, you can find this in the google-services.json.
""oauth_client"": [
        {
          ""client_id"": ""583957834728-jprivhot8johm3himgkmhqnnlmh1nldj.apps.googleusercontent.com"",
          ""client_type"": 3
        }
      ],

First initialize a FirebaseApp instance for that other Firebase project
    FirebaseOptions options = new FirebaseOptions.Builder()
       .setApplicationId(""1:530266078999:android:481c4ecf3253701e"") // Required for Analytics.
       .setApiKey(""AIzaSyBRxOyIj5dJkKgAVPXRLYFkdZwh2Xxq51k"") // Required for Auth.
       .setDatabaseUrl(""https://project-1765055333176374514.firebaseio.com/"") // Required for RTDB.
       .build();
FirebaseApp.initializeApp(this /* Context */, options, ""secondary"");

applicationid, Apikey and URL should be of secondary database. These can be found here settings->project settings->General tab
To authenticate secondary database.
AuthCredential credential = GoogleAuthProvider.getCredential(acct.getIdToken(), null);
            FirebaseApp app = FirebaseApp.getInstance(""secondary"");
            FirebaseAuth.getInstance(app).signInWithCredential(credential)
                    .addOnCompleteListener(this, new OnCompleteListener<AuthResult>() {
                        @Override
                        public void onComplete(@NonNull Task<AuthResult> task) {

                            // If sign in fails, display a message to the user. If sign in succeeds
                            // the auth state listener will be notified and logic to handle the
                            // signed in user can be handled in the listener.
                            if (!task.isSuccessful()) {
                                Log.w(TAG, getString(R.string.signin_authentication_failed_msg), task.getException());
                                Toast.makeText(SignInActivity.this,
                                        getString(R.string.signin_authentication_failed),
                                        Toast.LENGTH_SHORT).show();


                            }
                      else {
                               //do something - login sucess

                        }
                        }
                    });

this should fix the authentication part.
Next part how to access the second firebase database??
Accessing the secondary Firebase Project
FirebaseApp app = FirebaseApp.getInstance(""secondary"");
            FirebaseDatabase secondaryDatabase = FirebaseDatabase.getInstance(app);

            TestEntry testEntry = new TestEntry(orderId);

            DatabaseReference orderIdReference = secondaryDatabase.
                    getReference().child(orderId);

            Log.d(""Secondary db"", orderIdReference.toString());

            orderIdReference.setValue(testEntry);

source: https://firebase.googleblog.com/2016/12/working-with-multiple-firebase-projects-in-an-android-app.html
","218","<android><firebase><google-play><sha1><sha>","3","3","1","2018-01-30 16:42:22","48525608","1","3","","","","2018-01-30 15:13:54",""
"51400377","PBEWITHSHA256AND256BITAES-CBC-BC clarification","We are using PBEWITHSHA256AND256BITAES-CBC-BC algorithm for encrypting data.

What is the role of SHA-256 here?
Most of the forums states that PBKDF2 is a key derivation function? Does that use any algorithm internally to convert digest the plain text? 

","","218","<aes><sha><encryption-symmetric><jasypt><java-security>","0","","0","2018-07-18 11:03:16","","3","","","","","2018-07-18 11:03:16",""
"30548637","Modified SHA256 for PRNG seeding","Can I do this
1. Copy SHA hash constants to eight 32bit work variables.
2. Expand message.
3. Mix work variables (SHA inner loop).
4. Output work variables to PRNG state. 

instead of the normal procedure (single message block)
1. Pad message block.
2. Copy SHA hash constants to hash.
3. Read hash into eight 32bit work variables.
4. Expand message.
5. Mix work variables (SHA inner loop).
6. Add work variables to hash. 
7. Output hash to PRNG state. 

if I only want good bit mixing of some input entropy for seeding a non-cryptographic PRNG? Security is completely irrelevant. All I need is to generate a good PRNG state from a time stamp combined with some hardware bits (8 byte time stamp, 56 bytes from hardware).
","While I'm not sure about the specifics of how you want to simplify things, generally simplifying a cryptographic algorithm for non-cryptographic purposes is just fine provided you document very clearly that your use of a cryptographic primitive does not imply any cryptographic strength in the resulting code.
Normally you might implement the exact specification so that you can verify it against a third-party reference (ensuring that the code is connected as expected and that no data is discarded, etc.), and then reduce the number of rounds so it goes much faster.
A common motivation for doing this is when you have access to hardware acceleration for a cryptographic algorithm.
However, if your input is a fixed-length 64 bits then sha256 is typically more trouble than it's worth.
You haven't specified the size of the state of the PRNG.  If it's bigger than 64 bits then you probably just want to seed a simple 64-bit PRNG with your seed and then use that iteratively to fill in the larger PRNG state buffer.  If it's exactly 64-bits then something like the mix function of MurmurHash might be sufficient.
","217","<sha><seed><prng>","0","1","1","2016-06-26 22:34:44","38043817","2","","","","","2015-05-30 16:36:45",""
"31279493","Do you have to escape back slashes or do any special encoding with Rs Digest function within the Alteryx R tool","I'm using the Alteryx R tool to do some sha256 hash calculations, but I'm running into trouble with one of my inputs.  I'm trying to produce the sha256 hash for the following input:
POST\n/\n\ncontent_type:\nhost:dynamodb.us-east-1.amazonaws.com\nx-amz-date:20150707T201951Z\nx-amz-target:DynamoDB_20120810.CreateTable\n\ncontent_type;host;x-amz-date;x-amz-target\n09a8bcdeea1d20631f887235820bbff0a614679080a2e74a89ceb1a1bcc71b44

My r function is: 
 digest('POST\n/\n\ncontent_type:\nhost:dynamodb.us-east-1.amazonaws.com\nx-amz-date:20150707T201951Z\nx-amz-target:DynamoDB_20120810.CreateTable\n\ncontent_type;host;x-amz-date;x-amz-target\n09a8bcdeea1d20631f887235820bbff0a614679080a2e74a89ceb1a1bcc71b44', algo='sha256', serialize = FALSE)

and the hash produced by R is:
7fe2c3fc70134481217952f27bb5f4af95193645903ba3a6d4d7ad45c3adade1

This value is not correct.  The correct value is:
9a493c643eeb736decc195a8e0e84e08f45a00bdbc21feaafa94be5f0f299af0

You can see the correct value calculated below using Python;
Calculated With Python
I've also calculated the correct value using the R command line tool.  This leads me to believe that Alteryx is somehow altering the input and as a result is producing the wrong output. Has anyone come across this or know a possible workaround. 
My R tool script follows:

where c = 
POST\n/\n\ncontent_type:\nhost:dynamodb.us-east-1.amazonaws.com\nx-amz-date:20150707T201951Z\nx-amz-target:DynamoDB_20120810.CreateTable\n\ncontent_type;host;x-amz-date;x-amz-target\n09a8bcdeea1d20631f887235820bbff0a614679080a2e74a89ceb1a1bcc71b44

","If you replace all \ with \\ in your input string (in regular R or Python), it will digest to the value starting with ""7fe..."" so this suggests that indeed, Alteryx is doing something like that in the hand-off to R.
A work-around would be to run it through the Alteryx base64 tool prior to the R tool, then have the R tool base 64 decode, something like: 
library(""digest"")
library(""caTools"")
df <- as.data.frame(read.Alteryx(""#1"", mode=""data.frame""))
df$out <- digest(base64decode(as.character(df$b64),what=""character""), algo='sha256', serialize = FALSE)
write.Alteryx(df, 1)

While not ideal, it will give the correct output starting with ""9a493...""
","214","<r><sha><revolution-r><alteryx>","0","0","1","2017-01-23 17:51:04","","2","","292973","","2015-07-07 22:16:57","2015-07-07 21:21:11",""
"32376456","HMAC Hex Digest generated with GitHub not matching with the digest that Java gives","This is the code am using on the Java side
private String encodedHexString(String secretKey, String payload)
        throws NoSuchAlgorithmException, InvalidKeyException {

    SecretKeySpec keySpec = new SecretKeySpec(secretKey.getBytes(),""HmacSHA1"");
    Mac mac = Mac.getInstance(""HmacSHA1"");
    mac.init(keySpec);

    byte[] payloadDigest = mac.doFinal(payload.getBytes());
    String encodedDigest = DatatypeConverter.printHexBinary(payloadDigest);
    return encodedDigest;
}

where secretKey is the Secret token entered on GitHub side as well on my side and the payload is what I am getting in the request.getParameter(""payload"") for application/x-www-form-urlencoded Content-type.
matching this with request.getHeader(""X-Hub-Signature"") don't match unfortunately, even after appending ""sha1="" to it on Java side.
","I had success with simply encoding the whole request body, without any kind of parameter parsing, unescaping, etc:
String secret = ""73fcce1ecaeeb4136f27854eaaacb785929bb9a3"";
String payload = ""payload=%7B%22zen%22%3A%22It%27s+not+fully+shipped+until+it%27s+fast.%22%2C%22hook_id%2..."";
System.out.println(encodedHexString(secret, payload));

The result was:
0F026F9E5107F4BF377CA032C1431BFED687B6E9

This matched the X-Hub-Signature header very well:
X-Hub-Signature: sha1=0f026f9e5107f4bf377ca032c1431bfed687b6e9

","210","<java><github><sha>","1","1","1","2016-03-11 21:56:02","","0","","43582","","2016-03-11 21:56:02","2015-09-03 13:03:47",""
"24154900","Dynamically Selecting Signing Algorithm in OpenSSL","I am creating an android app which can perform basic email security operations like encryption, decryption, signing and verification. So far I am able to perform all 4 
operations successfully. But one thing I still haven't figured out is how to specify Signing Algorithm at runtime. 
I mean I want to have a drop downlist from which the user can select the signing algorithm algorithm. 
I know how to do this in case of encryption. But for signing we are not specifying any algorithm in the PKCS7_Sign function call. So how do I mention which signing algorithm I should use while signing the mail. 
Thanks in advance! 
","
But for signing we are not specifying any algorithm in the PKCS7_sign
  function call. So how do I mention which signing algorithm I should
  use while signing the mail.

Try PKCS7_add_signature. From <openssl dir>/crypto/pkcs7/pkcs7.h:
PKCS7_SIGNER_INFO *PKCS7_add_signature(PKCS7 *p7, X509 *x509,
                                       EVP_PKEY *pkey, const EVP_MD *dgst);

The implementation is in pk7_lib.c, which can be found at <openssl dir>/crypto/pkcs7/pk7_lib.c. There's not much to the function. It looks like the heavy lifting is done by PKCS7_SIGNER_INFO_set.
Its used in a few places in the library. There is no demo in apps/:
$ cd openssl-1.0.1h
$ grep -R PKCS7_add_signature *
crypto/pkcs7/enc.c: if (PKCS7_add_signature(p7,x509,pkey,EVP_sha1()) == NULL) goto err;
crypto/pkcs7/pk7_lib.c:PKCS7_SIGNER_INFO *PKCS7_add_signature(PKCS7 *p7, X509 *x509, EVP_PKEY *pkey,
crypto/pkcs7/pk7_smime.c:       if (!(si = PKCS7_add_signature(p7,signcert,pkey, md)))
crypto/pkcs7/pkcs7.h:PKCS7_SIGNER_INFO *PKCS7_add_signature(PKCS7 *p7, X509 *x509,
crypto/pkcs7/pkcs7err.c:{ERR_FUNC(PKCS7_F_PKCS7_ADD_SIGNATURE), ""PKCS7_add_signature""},
crypto/pkcs7/sign.c:    si=PKCS7_add_signature(p7,x509,pkey,EVP_sha1());
crypto/ts/ts_rsp_sign.c:        if (!(si = PKCS7_add_signature(p7, ctx->signer_cert, 

The openssl cms command should allow you to work from the command line. See ""openssl smime ... [-md digest] ..."" seems to be unknown option on the last version openssl. Its a bit old, but it should still hold.
","210","<android><openssl><md5><sha><sign>","1","0","1","2014-06-11 08:13:57","24157250","0","","","","","2014-06-11 04:52:52",""
"12153352","Which data encryption technology should I use?","I'm some newbie of data encryption. I goggling data encryption and mostly found md5 and SHA algorithms.Which technology do you consider to be the best for data storage/security and why? 
","MD5 and SHA are hash functions, they create fingerprint - fixed-length representation - from the bunch of data. For example, they are extensively used as a way to check consistency of your iso image downloads for many open-source products, but this means you can use them to create fingerprints from any selection of bytes. So they do not encrypt.
If you want to encrypt, you should check for encryption algorithms. The most feasible now I believe is AES (Advanced encryption Standard) if you look for symmetric encryption algorithms (eg. where key for encryption and decryption is the same or easily computed one from another) or RSA if you look for asymmetric (where you have 2 keys - public and private, and compute private key from public is hard task).
If you are about to create digital signatures, you may want to check things like DSA (digital signature algorithm) and ECDSA (DSA over elliptic curves.). Note that asymmetric algorithms work over numbers with extended precision - like 512, 1024, 2048 bits and so on. You need special libraries that can handle such numbers. If you use C++ I can recommend you trying Crypto++. Find something similar for other languages. 
I hope this was useful for you. 
","209","<encryption><md5><sha>","0","5","2","2012-08-28 06:09:36","12153412","3","1","","","","2012-08-28 05:38:28",""
"12153352","Which data encryption technology should I use?","I'm some newbie of data encryption. I goggling data encryption and mostly found md5 and SHA algorithms.Which technology do you consider to be the best for data storage/security and why? 
","If your data is password and you want to store it some where then Use MD5 or SHA Hash.
There are two advantages of these. 

A hash can not be decrypted to recover old value so your password will never ever will be cracked even if you provide MD5/SHA hash of password to some one :) 
A hash of particular string will be always same so you can compare passwords based on Hash.

AES :

Symmetric algorithm so faster
Use with PKCS5Padding and CBC mode 
Always store IV
Symmetric so you need same key while you are decrypting encrypted text so you can not at all share keys.

RSA

PKI Infrastructure to exchange Keys
Slow

There are other algorithms also Like DES(Not So Secure), 3DES(Often called Tripple DES- Not enough secure compared to DES)
","209","<encryption><md5><sha>","0","0","2","2012-08-28 06:09:36","12153412","3","1","","","","2012-08-28 05:38:28",""
"48815439","What is OpenSSL adding to my SHA256 hash during signing?","I am running into a problem with verifying a SHA256 hash signature generated using OpenSSL.
When I invoke
openssl dgst -sha256 -binary -out hash.sha256 in_file 

and I (xxd -g 1 hash.sha256), it looks like this -
00000000: d7 e6 1b 81 5c 32 28 30 7b 7b 45 e1 ef 40 6b 93  
00000010: 34 67 d0 a4 ee c0 64 d1 20 e7 c1 c3 a9 f2 a9 a9  

Similarly, when I invoke
openssl dgst -sha256 -out hash.sha256 -sign private.pem in_file 

to hash and sign all at once, and subsequently verify using
openssl rsautl -in hash.sha256 -out hash.verified -inkey private.pem -verify

and (xxd -g 1 hash.verified), (which should be the same as hash.sha256 from above, I believe) I see
00000000: 30 31 30 0d 06 09 60 86 48 01 65 03 04 02 01 05  
00000010: 00 04 20 d7 e6 1b 81 5c 32 28 30 7b 7b 45 e1 ef  
00000020: 40 6b 93 34 67 d0 a4 ee c0 64 d1 20 e7 c1 c3 a9  
00000030: f2 a9 a9 

If you look closely, it appears that hash.verified has 19 bytes of data prepended to it, followed by the correct hash (or at least the same as hash.sha256 from above).
What is it putting in my hash?
","","208","<hash><openssl><rsa><sha>","1","","0","2018-02-16 09:51:18","","4","","608639","","2018-02-16 09:51:18","2018-02-15 20:09:07",""
"43884896","How to transform hash_hmac function from PHP to iOS Swift exactly?","Hello i need to implement hash_hmac php method to swift and try like this:  
var hexString = """"
var result: [CUnsignedChar]
if let cKey = keyStr.cString(using: String.Encoding.utf8),
    let cData = messageStr.cString(using: String.Encoding.utf8)
{
    let algo  = CCHmacAlgorithm(kCCHmacAlgSHA256)
    result = Array(repeating: 0, count: Int(CC_SHA256_DIGEST_LENGTH))
    CCHmac(algo, cKey, cKey.count, cData, cData.count, &result)
} else {
    fatalError(""ERROR..."")
}

for byte in result {
    hexString += String(format:""%2hhx"", UInt8(byte))
}

print(hexString)

but this is not simulated like PHP exactly.  
And i tried this code : 
let secretData : Data = messageStr.data(using: .utf8)!
let signatureData : Data = keyStr.data(using: .utf8)!
let digest = UnsafeMutablePointer<UInt8>.allocate(capacity:Int(CC_SHA256_DIGEST_LENGTH))
var hmacContext = CCHmacContext()
CCHmacInit(&hmacContext, CCHmacAlgorithm(kCCHmacAlgSHA256), [UInt8](secretData), secretData.count)
CCHmacUpdate(&hmacContext, [UInt8](signatureData), [UInt8](signatureData).count)
CCHmacFinal(&hmacContext, digest)
let cryptData = Data(bytes: digest, count: Int(CC_SHA256_DIGEST_LENGTH))
macStr = cryptData.hexEncodedString()

But it does not work...  
edit:  

message: a3FQZHJ1Z0hnOFhpZ2xkWg==8v8Fs6LXKTJOha69tsvUew==
  key: 
  u6KuXJLIUwEUl7noY8J8H1ffDRwLC/5gjaWW1qTQ3hE=
  swift output: 
  37987524d1a379d67b2bae0a1618296d48b7a1f058a3b5816bf8070cb2fdf2ec
  php output: 
  30f39f78a24ae2e6037114708f97fae1f3fede8dabece012a12b6625f3329302

","There is an error in the Swift code:
CCHmacInit(&hmacContext, CCHmacAlgorithm(kCCHmacAlgSHA256), [UInt8](secretData), secretData.count)
CCHmacUpdate(&hmacContext, [UInt8](signatureData), [UInt8](signatureData).count)

CCHmacInit takes the key.
CCHmacUpdate takes the data.
The question code has that backwards.

Note:  

There is a one-shot HMAC function that is easier to use and harder to get wrong in this case:
CCHmac(CCHmacAlgorithm algorithm, const void *key, size_t keyLength, const void *data, size_t dataLength, void *macOut);
","206","<php><ios><swift><hash><sha>","-1","0","2","2017-05-13 11:45:18","","11","","3319132","","2017-05-10 08:19:57","2017-05-10 06:20:37",""
"43884896","How to transform hash_hmac function from PHP to iOS Swift exactly?","Hello i need to implement hash_hmac php method to swift and try like this:  
var hexString = """"
var result: [CUnsignedChar]
if let cKey = keyStr.cString(using: String.Encoding.utf8),
    let cData = messageStr.cString(using: String.Encoding.utf8)
{
    let algo  = CCHmacAlgorithm(kCCHmacAlgSHA256)
    result = Array(repeating: 0, count: Int(CC_SHA256_DIGEST_LENGTH))
    CCHmac(algo, cKey, cKey.count, cData, cData.count, &result)
} else {
    fatalError(""ERROR..."")
}

for byte in result {
    hexString += String(format:""%2hhx"", UInt8(byte))
}

print(hexString)

but this is not simulated like PHP exactly.  
And i tried this code : 
let secretData : Data = messageStr.data(using: .utf8)!
let signatureData : Data = keyStr.data(using: .utf8)!
let digest = UnsafeMutablePointer<UInt8>.allocate(capacity:Int(CC_SHA256_DIGEST_LENGTH))
var hmacContext = CCHmacContext()
CCHmacInit(&hmacContext, CCHmacAlgorithm(kCCHmacAlgSHA256), [UInt8](secretData), secretData.count)
CCHmacUpdate(&hmacContext, [UInt8](signatureData), [UInt8](signatureData).count)
CCHmacFinal(&hmacContext, digest)
let cryptData = Data(bytes: digest, count: Int(CC_SHA256_DIGEST_LENGTH))
macStr = cryptData.hexEncodedString()

But it does not work...  
edit:  

message: a3FQZHJ1Z0hnOFhpZ2xkWg==8v8Fs6LXKTJOha69tsvUew==
  key: 
  u6KuXJLIUwEUl7noY8J8H1ffDRwLC/5gjaWW1qTQ3hE=
  swift output: 
  37987524d1a379d67b2bae0a1618296d48b7a1f058a3b5816bf8070cb2fdf2ec
  php output: 
  30f39f78a24ae2e6037114708f97fae1f3fede8dabece012a12b6625f3329302

","I solved this problem :   (Swift 3)
extension Data {

    func hexEncodedString() -> String {
        return map { String(format: ""%02hhx"", $0) }.joined()
    }
}

func HMAC_CREATOR(MIX_STR mixStr:String,KEY_DATA_UINT8 keyDataUint8:Array<UInt8>) -> String {
        let signatureData : Data = mixStr.data(using: .utf8)!
        let digest = UnsafeMutablePointer<UInt8>.allocate(capacity:Int(CC_SHA256_DIGEST_LENGTH))
        var hmacContext = CCHmacContext()
        CCHmacInit(&hmacContext, CCHmacAlgorithm(kCCHmacAlgSHA256), (keyDataUint8), (keyDataUint8.count))
        CCHmacUpdate(&hmacContext, [UInt8](signatureData), [UInt8](signatureData).count)
        CCHmacFinal(&hmacContext, digest)
        let macData = Data(bytes: digest, count: Int(CC_SHA256_DIGEST_LENGTH))
        return  macData.hexEncodedString()
    }

","206","<php><ios><swift><hash><sha>","-1","0","2","2017-05-13 11:45:18","","11","","3319132","","2017-05-10 08:19:57","2017-05-10 06:20:37",""
"38314245","Why is there a '1' in the padding of SHA-2","I'm looking at the SHA-256 algorithm. The padding consists of a single '1', followed by as many 0's as needed to made the size of the block congruent to 448 mod(512), and then the size of the message (excluding the 1 and the padding) as a 64 bit unsigned integer. 
I'm unclear as to the reason for the '1'. A reason that pops-up in unofficial sources is that it serves to prevent birthday attacks but the lenght at the end seems suffiscient to that purpose. 
Elsewhere it is said that the 1 is needed to make the padding Merkle–Damgård-compliant (MD-compliant) but unless something really eluded me the size feild at the end is clearly suffiscient. 
see: 
https://en.wikipedia.org/wiki/Merkle%E2%80%93Damg%C3%A5rd_construction#MD-compliant_padding
Finally a source wrote that this was necessary to process an empty string (why?) and another to make the padding reversible (what for?).
I'm always suspicious when I find so many different explainations. Can anyone explain me this with an example.
BTW, this padding is defined in ISO/IEC 9797-1 as Padding Method 2 (with no explainations). 
","","206","<padding><sha256><sha><sha2>","1","","0","2016-07-11 18:58:35","","1","","","","","2016-07-11 18:58:35",""
"43157772","can anyone help me solving this sha256 512 in payubiz","Here is main page,
<?php
// Merchant key here as provided by Payu
$MERCHANT_KEY = ""gtKFFx""; //Please change this value with live key for production
$hash_string  = '';
// Merchant Salt as provided by Payu
$SALT = ""eCwWELxi""; //Please change this value with live salt for production
// End point - change to https://secure.payu.in for LIVE mode
$PAYU_BASE_URL = ""https://test.payu.in"";
$action        = '';
$posted        = array();
if (!empty($_POST)) {
    //print_r($_POST);
    foreach ($_POST as $key => $value) {
        $posted[$key] = $value;
    }
}
$formError = 0;
if (empty($posted['txnid'])) {
    // Generate random transaction id
    $txnid = substr(hash('sha256', mt_rand() . microtime()), 0, 20);
} else {
    $txnid = $posted['txnid'];
}
$hash = '';
// Hash Sequence
$hashSequence = ""key|txnid|amount|productinfo|firstname|email|phone|udf2|udf3|udf4|udf5|udf6|udf7|udf8|udf9|udf10||||||SALT"";
if (empty($posted['hash']) && sizeof($posted) > 0) {
    if (
        empty($posted['key'])
        || empty($posted['txnid'])
        || empty($posted['amount'])
        || empty($posted['firstname'])
        || empty($posted['email'])
        || empty($posted['phone'])
        || empty($posted['productinfo'])
    ) {
        $formError = 1;
    } else {
        $hashVarsSeq = explode('|', $hashSequence);
        foreach ($hashVarsSeq as $hash_var) {
            $hash_string .= isset($posted[$hash_var]) ? $posted[$hash_var] : '';
            $hash_string .= '|';
        }
        $hash_string .= $SALT;
        $hash   = strtolower(hash('sha512', $hash_string));
        $action = $PAYU_BASE_URL . '/_payment';
    }
} elseif (!empty($posted['hash'])) {
    $hash   = $posted['hash'];
    $action = $PAYU_BASE_URL . '/_payment';
}
?>

<html>
    <head>
        <script>
            var hash = '<?php echo $hash ?>';
            function submitPayuForm() {
                if (hash == '') {
                    return;
                }
                var payuForm = document.forms.payuForm;
                payuForm.submit();
            }
        </script>
    </head>
    <body onload=""submitPayuForm()"">
        <h2>PayU Form</h2>
        <br/>
        <?php if ($formError) { ?>
            <span style=""color:red"">Please fill all mandatory fields.</span>
            <br/>
            <br/>
        <?php } ?>
        <form action=""<?php echo $action; ?>"" method=""post"" name=""payuForm"" >
            <input type=""hidden"" name=""key"" value=""<?php echo $MERCHANT_KEY ?>"" />
            <input type=""hidden"" name=""hash"" value=""<?php echo $hash ?>""/>
            <input type=""hidden"" name=""txnid"" value=""<?php echo $txnid ?>"" />

            <input type=""hidden"" name=""surl"" value=""http://localhost/response.php"" />   <!--Please change this parameter value with your success page absolute url like http://mywebsite.com/response.php. -->
            <input type=""hidden"" name=""furl"" value=""http://localhost/failure.php"" /><!--Please change this parameter value with your failure page absolute url like http://mywebsite.com/response.php. -->

            <table>
                <tr>
                    <td><b>Mandatory Parameters</b></td>
                </tr>
                <tr>
                    <td>Amount: </td>
                    <td><input name=""amount"" value=""<?php echo (empty($posted['amount'])) ? '' : $posted['amount'] ?>"" /></td>
                    <td>First Name: </td>
                    <td><input name=""firstname"" id=""firstname"" value=""<?php echo (empty($posted['firstname'])) ? '' : $posted['firstname']; ?>"" /></td>
                </tr>
                <tr>
                    <td>Email: </td>
                    <td><input name=""email"" id=""email"" value=""<?php echo (empty($posted['email'])) ? '' : $posted['email']; ?>"" /></td>
                    <td>Phone: </td>
                    <td><input name=""phone"" value=""<?php echo (empty($posted['phone'])) ? '' : $posted['phone']; ?>"" /></td>
                </tr>
                <tr>
                    <td>Operator: </td>
                    <td colspan=""3""><textarea name=""productinfo""><?php echo (empty($posted['productinfo'])) ? '' : $posted['productinfo'] ?></textarea></td>
                </tr>
                <?php if (!$hash) { ?>
                    <td colspan=""4""><input type=""submit"" value=""Submit"" /></td>
                <?php } ?>
                </tr>
            </table>
        </form>
    </body>
</html>

I am trying to get better understanding of algorithim as am a basic developer not professional over here one userdefined variable in phone which I am getting from my previous form.
here is response php where am going wrong guide friends if you want give negative marking but help me understand this algorithm.
<?php
$status      = $_POST[""status""];
$firstname   = $_POST[""firstname""];
$amount      = $_POST[""amount""]; //Please use the amount value from database
$txnid       = $_POST[""txnid""];
$posted_hash = $_POST[""hash""];
$key         = $_POST[""key""];
$productinfo = $_POST[""productinfo""];
$email       = $_POST[""email""];
$salt        = ""eCwWELxi""; //Please change the value with the live salt for production environment
$phone       = ""phone"";
//Validating the reverse hash
if (isset($_POST[""additionalCharges""])) {
    $additionalCharges = $_POST[""additionalCharges""];
    $retHashSeq        = $additionalCharges . '|' . $salt . '|' . $status . '|' . $phone . '|||||||||||' . $email . '|' . $firstname . '|' . $productinfo . '|' . $amount . '|' . $txnid . '|' . $key;
} else {
    $retHashSeq = $salt . '|' . $status . '|' . $phone . '|||||||||||' . $email . '|' . $firstname . '|' . $productinfo . '|' . $amount . '|' . $txnid . '|' . $key;
}
$hash = hash(""sha512"", $retHashSeq);
if ($hash != $posted_hash) {
    echo ""Transaction has been tampered. Please try again"";
} else {
    echo ""<h3>Thank You, "" . $firstname . "".Your order status is "" . $status . "".</h3>"";
    echo ""<h4>Your Transaction ID for this transaction is "" . $txnid . "".</h4>"";
}

So please help me correcting this algorithim to get better understand of this payubiz. They charge for subcription but no proper support help me out with this team.
","","205","<php><algorithm><sha>","0","","0","2017-04-05 06:55:23","","2","","6556397","","2017-04-05 06:55:23","2017-04-01 13:56:29",""
"16614687","C using sha2 hashing function","How to use hashing function
void sha2( const unsigned char *input, int ilen,
           unsigned char output[32] )
{
    sha2_context ctx;

    sha2_starts( &ctx );
    sha2_update( &ctx, input, ilen );
    sha2_finish( &ctx, output );

    memset( &ctx, 0, sizeof( sha2_context ) );
}

I tried 
sha2(InpData, sizeof(InpData), OutData)

but as a result I get trashed data.
","Without seeing the declaration of InpData we can't know for sure, (Please, post a short, compilable example), but the probability is that InpData is a pointer of some sort, as opposed to an array. The sizeof() operator, when applied to a pointer, will not evaluate to the size of the pointed-at allocated storage, but to the size of the pointer: typically 4 or 8 bytes.
","204","<c><sha>","0","0","2","2013-05-17 17:57:56","","2","","1671066","","2013-05-17 17:27:42","2013-05-17 17:19:37",""
"16614687","C using sha2 hashing function","How to use hashing function
void sha2( const unsigned char *input, int ilen,
           unsigned char output[32] )
{
    sha2_context ctx;

    sha2_starts( &ctx );
    sha2_update( &ctx, input, ilen );
    sha2_finish( &ctx, output );

    memset( &ctx, 0, sizeof( sha2_context ) );
}

I tried 
sha2(InpData, sizeof(InpData), OutData)

but as a result I get trashed data.
","Just call it with the data, the length and the buffer where you want your output;
char* data = ""my data to hash"";
int datalen = strlen(data);       // or if binary data, the size of your input
unsigned char buffer[32];         // The buffer to receive the result

sha2(data,datalen,buffer);

Note that the data received in the buffer is binary data (32*8=256 bits if it's SHA-256), so you'll want to hex/base64/etc. encode it before displaying the result to a screen.
EDIT: Extremely simple and hackish hex encoding entirely without clean code points :)
char* hexencode(void* data, int len)
{
  char* outdata = malloc(len*2+1);
  char* tmp = outdata;
  unsigned char* indata = (char*)data;
  while(len--)
  {
    *tmp++ = ""0123456789abcdef""[(*indata)>>4];
    *tmp++ = ""0123456789abcdef""[(*indata++)&0xf];
  }
  *tmp = 0;
  return outdata;
}

","204","<c><sha>","0","0","2","2013-05-17 17:57:56","","2","","1671066","","2013-05-17 17:27:42","2013-05-17 17:19:37",""
"20629083","two of three byte different in sha256 hash function","I am using this function to calculate the SHA 256 
public static String getSHA1(String plainText) {
        MessageDigest md;
        try {
            md = MessageDigest.getInstance(""SHA-256"");

            md.update(plainText.getBytes(Charset.forName(""UTF-8"")));
            StringBuffer hexString = new StringBuffer();
            byte[] bytes = md.digest();
            for (int i = 0; i < bytes.length; i++) {
                hexString.append(Integer.toHexString(0xFF & bytes[i]));
            }
            return hexString.toString();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return null;
    }

And to be sure of my results, I check this online website
http://onlinemd5.com/
the results between my code and the online is almost the same, but you know that it must be equal. for instance
my plain testis:
1234567

the website result
8BB0CF6EB9B17D0F7D22B456F121257DC1254E1F01665370476383EA776DF414

 my code result
8bb0cf6eb9b17df7d22b456f121257dc1254e1f1665370476383ea776df414

and this is more examples:
7777777
8C1CDB9CB4DBAC6DBB6EBD118EC8F9523D22E4E4CB8CC9DF5F7E1E499BBA3C10
8c1cdb9cb4dbac6dbb6ebd118ec8f9523d22e4e4cb8cc9df5f7e1e499bba3c10


147258
7A2EC40FF8A1247C532309355F798A779E00ACFF579C63EEC3636FFB2902C1AC
7a2ec4ff8a1247c53239355f798a779e0acff579c63eec3636ffb292c1ac


888888
92925488B28AB12584AC8FCAA8A27A0F497B2C62940C8F4FBC8EF19EBC87C43E
92925488b28ab12584ac8fcaa8a27af497b2c6294c8f4fbc8ef19ebc87c43e

I do know that this is maybe about the encoding. but look i used utf-8 which is what the website used
","This is the problem:
hexString.append(Integer.toHexString(0xFF & bytes[i]));

This will lose any leading 0s - in other words, any byte less than 16 will come out as a single hex digit instead of two.
There are plenty of fixes for this. For example:

Manually append 0 if the value is between 0 and 15 (ick)
Use String.format(""%02x"", bytes[i] & 0xff)
Use a full ""byte array to hex conversion"" method in a utility library (there are loads around)

","204","<java><hash><sha><sha256>","0","3","1","2013-12-17 08:18:23","20629118","2","3","","","","2013-12-17 08:16:02",""
"5980965","What is SHA-2's role in internet security?","I'm doing some light and fun reading and I'd like to get some clarification, please.  
I know that SSL uses public-key cryptography and is the backbone behind the HTTPS connection.  The encryption used in SSL can be AES-128, 256, or whatever.  What part of the secure connection does SHA play in security?  If the connection is secured, and encrypted with AES, where does SHA come into play?
","SHA is a hash function.
Hash functions have nothing to do with encryption. They are used in digital signing and message integrity.
For example in certificates, there is the public key but there is also the hash to ensure that the certificate has not been altered
","203","<ssl><sha><aes>","3","3","2","2011-05-19 07:26:05","5982118","0","","","","","2011-05-12 16:06:19",""
"5980965","What is SHA-2's role in internet security?","I'm doing some light and fun reading and I'd like to get some clarification, please.  
I know that SSL uses public-key cryptography and is the backbone behind the HTTPS connection.  The encryption used in SSL can be AES-128, 256, or whatever.  What part of the secure connection does SHA play in security?  If the connection is secured, and encrypted with AES, where does SHA come into play?
","Beside their use in certificates mentioned by another poster, in SSL/TLS cryptographic hashs are used to contruct Message Authentication Code (MAC) using the HMAC construction. This is to ensure that the stream is not modified by an attacker, and to reject PDUs that are.
","203","<ssl><sha><aes>","3","0","2","2011-05-19 07:26:05","5982118","0","","","","","2011-05-12 16:06:19",""
"43492628","Not same hash SHA256 SQL Server/PHP?","I have an SQL Server database, and I want to start session in PHP for users.
I can interact with my database, but I have some problem with SQL Server hash.
I use Primavera for create user+password so the password is hashed and generated automatically by Primavera. I want to create an application with PHP, and I need to start session with these user+password informations.
(Primavera is an application which create the database on SQL Server)
For users I can see the password like this:

SHA-256:CB4F6845EDF88E23:2710:9FFB6G

And with PHP
echo hash(""SHA256"",""*thepass*"").""<br>"";

I have this:

76f7e6226e348ac43e2566ef1(...)

So I can't start session.
","","201","<php><sql-server><hash><sha256><sha>","0","","0","2017-05-04 08:30:32","","8","","157957","","2017-05-04 08:30:32","2017-04-19 10:09:19",""
"52828452","using javascript to return a SHA-256 hash from a string","I'm very noob at javascript and HTML. Any help is appreciated. 
This is a simple web page that is meant to return the SHA-256 has from a string input. The code has been ripped and simplified from here
https://www.fileformat.info/tool/hash.htm
code
<!DOCTYPE html>
<html>
<head>
<script src=""https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"" type=""text/javascript"" ></script>
<script src=""https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js""></script>
</head>
<body 
<hr />
        <legend>String hash</legend>
        <form action=""hash.htm"" class=""form-horizontal"" method=""post"" name=""theForm"">
            <fieldset>
                <div class=""control-group"">
                    <label class=""control-label"" for=""text"">Text:</label>
                    <div class=""controls"">
                        <input type=""text"" class=""span12"" name=""text"" value="""" />
                    </div>
                </div>
                <div class=""control-group"">
                    <div class=""controls"">
                        <input class=""btn btn-primary"" type=""submit"" value=""Hash"" />
                    </div>
                </div>
            </fieldset>
        </form>
    </div>
</div>
<table class=""table table-bordered table-striped table-auto"">
    <tr>
        <th colspan=""2"">Results</th>
    </tr>
    <tr>
        <td>SHA-256</td>
        <td></td>
    </tr>
</table>
</body>
</html>

When I save this code as .html and open it with my browser, then try to return a hash, I am taken to a 404 not found page.
I'm sure it's something simple!! Thanks!
","","199","<javascript><html><hash><sha>","0","","0","2018-10-16 05:26:01","","2","","","","","2018-10-16 05:26:01",""
"47581739","Android Keystore alias missing","A few months ago i uploaded a Android App to the App store which i singed with my keystore and an alias. (app1 for example)
Some times later now we decide to release a part as a new independent application.
So we used the same keystore file with an different alias. (app2 for example)
Now the problem is, that we forgott to safe the Keystore file, after the new alias was generated.
So we STILL have the .keystore file and the password, but there is only the key for the alias app1 and no alias for app2.
When we try to generate an new Keystore with the alias app2 its always different than the application in the Android Store
So is it possible to regenerate the alias with the SAME .keystore?
","","196","<android><keystore><sha><android-keystore>","0","","0","2017-11-30 20:45:14","","4","","4054896","","2017-11-30 20:45:14","2017-11-30 20:07:18",""
"39142539","Convert python code with sha to php","got a problem with converting python to php. I've got the following code in python: 
user = ""DdrkmK5uFKmaaeNqfqReMADSUJ4sVSLrV2A8Bvs8""
passing = ""K9hvwANSBW5tLYzuWptWMByTtzZZKHzm""

sha = hashlib.sha256()
sha.update(user)
sha.update(passing)
sha_A = [ord(x) for x in sha.digest()]

sha_A is the following array: 
[231, 13, 239, 136, 20, 198, 76, 121, 67, 163, 251, 153, 114, 13, 65, 203, 41, 37, 64, 168, 43, 69, 81, 103, 235, 161, 15, 58, 82, 57, 217, 178]

I already converted it to php:
$user = ""DdrkmK5uFKmaaeNqfqReMADSUJ4sVSLrV2A8Bvs8"";
$passing = ""K9hvwANSBW5tLYzuWptWMByTtzZZKHzm""

$sha = hash_init(""sha256"");
$sha = hash_update($sha, $user);
$sha = hash_update($sha, $passing);

$sha_A = [];
$i = 0;
$digest = openssl_digest($sha, ""sha256"");
$digest = str_split($digest);
foreach ($digest as $x) {
  $sha_A[$i] = ord($x);
  $i = $i + 1;
}

But the returned array $sha looks like this one:
[101, 51, 98, 48, 99, 52, 52, 50, 57, 56, 102, 99, 49, 99, 49, 52, 57, 97, 102, 98, 102, 52, 99, 56, 57, 57, 54, 102, 98, 57, 50, 52]
Maybe some of you will find my mistake?
","I saw few errors in your PHP code.
This is a python snippet:
>>> sha = hashlib.sha256()
>>> sha.update(user)
>>> sha.update(passing)
>>> sha_A = [ord(x) for x in sha.digest()]
[135, 146, 107, 215, 70, 126, 179, 21, 19, 177, 191, 236, 182, 136, 192, 53, 148, 42, 160, 24, 63, 224, 170, 211, 32, 131, 59, 146, 60, 162, 77, 2]

And the PHP version, corrected:
$ctx = hash_init('sha256');
hash_update($ctx, $user);
hash_update($ctx, $passing);
$digest = hash_final($ctx, true);

$sha_A = [];
foreach (str_split($digest) as $x) {
    $sha_A[] = ord($x);
}
[135, 146, 107, 215, 70, 126, 179, 21, 19, 177, 191, 236, 182, 136, 192, 53, 148, 42, 160, 24, 63, 224, 170, 211, 32, 131, 59, 146, 60, 162, 77, 2]

In your PHP version, $sha = hash_update($sha, $user); was bad because hash_update returns a boolean. The first argument is called the context and is the result of hash_init, the second one is the data to hash. Finally, you call hash_final with the last parameter (raw_output) to true to get binary data.
Last error, using openssl_digest on the SHA result's was computing the digest of the SHA digest's. Funny, isn't it? :).
","196","<php><python><hash><sha><digest>","0","0","1","2016-08-25 11:02:44","39143015","0","","4171219","","2016-08-25 10:34:43","2016-08-25 10:15:50",""
"22627193","What is the algorithm git uses to find a commit by a partial sha-1 (at least first 4 characters)?","What is the algorithm git uses to find a commit by a partial sha-1 (at least first 4 characters).
Are there any implementations of such algorithm out there?
","One very simple way (but ineffective) to find the full SHA1 given a partial ""01234"" one (a ""short SHA1"")is:
git rev-list --all --objects | grep ^01234

The actual way is:
git rev-parse --verify 01234

It is illustrated in commit 6269b6b

Teach get_describe_name() to pass the disambiguation hint down the
  callchain to get_short_sha1().

So you can see the algorithm in sha1_name.c#get_short_sha1() function, which will looks in:

objects: find_short_object_filename(len, hex_pfx, &ds);
and in pack files: find_short_packed_object(len, bin_pfx, &ds);
(See ""Git Internals - Packfiles"")

","194","<algorithm><git><sha>","0","3","1","2014-03-25 07:42:17","","3","1","","","","2014-03-25 06:44:38",""
"53536866","Microsoft ADFS with Powershell - Add Relying party trust with Secure Hash Algorithm SHA-1","I'm currently trying to create a Relying Party Trust which is configured to have the Secure Hash Algorithm ""SHA-1"" with the following PowerShell code (Windows Server 2012):
Add-ADFSRelyingPartyTrust -Name 'SAMLTest' -MetadataFile 'C:\Users\ap2admin\Desktop\SAML_MetaData.xml' -SignatureAlgorithm  'http://www.w3.org/2000/09/xmldsig#rsa-sha1'

unfortunately the code ignores the attribute and creates a relying party trust with SHA-256 algorithm. 
any suggestions how to get it fixed? 
","OK. I managed to make this operation work, although I'm still not sure why my original code didn't.
here is the code for adding a new Relying party trust with SHA-1
Add-ADFSRelyingPartyTrust -Name 'SAMLTest' -MetadataFile 'C:\Users\ap2admin\Desktop\SAML_MetaData.xml'
Set-AdfsRelyingPartyTrust -TargetName 'SAMLTest' -SignatureAlgorithm 'http://www.w3.org/2000/09/xmldsig#rsa-sha1'

","192","<powershell><saml><windows-server-2012><adfs><sha>","0","1","1","2018-11-29 13:06:22","53539734","0","","","","","2018-11-29 10:27:31",""
"47575371","Unable to install required package (rabbitmq-server) before Travis CI build","Since today I experience the following issue with Travis CI: the required package specified in before_install section of .travis.yml:
before_install:
  - sudo apt-get update -qq
  - sudo apt-get install -qq rabbitmq-server

cannot be installed, breaking the build.

Response as shown Travis console log:
$ sudo apt-get update -qq
W: http://ppa.launchpad.net/couchdb/stable/ubuntu/dists/trusty/Release.gpg: Signature by key 15866BAFD9BCC4F3C1E0DFC7D69548E1C17EAB57 uses weak digest algorithm (SHA1)
$ sudo apt-get install -qq rabbitmq-server
E: Unable to correct problems, you have held broken packages.
The command ""sudo apt-get install -qq rabbitmq-server"" failed and exited with 100 during .
Your build has been stopped.


How would I overcome this problem? I have tried to replicate the issue locally, but it seems to be not reproducible.
","I searched Google with this search string - ""failed and exited with 100"" apt install - this is the first hit:
https://github.com/travis-ci/travis-ci/issues/7998
","192","<rabbitmq><continuous-integration><travis-ci><sha>","1","-1","1","2017-12-02 18:02:48","","0","","2035262","","2017-12-01 07:11:53","2017-11-30 14:05:49",""
"40190282","Generate C* bucket hash from multipart primary key","I will have C* tables that will be very wide. To prevent them to become too wide  I have encountered a strategy that could suit me well. It was presented in this video.
Bucket Your Partitions Wisely
The good thing with this strategy is that there is no need for a ""look-up-table"" (it is fast), the bad part is that one needs to know the max amount of buckets and eventually end up with no more buckets to use (not scalable). I know my max bucket size so I will try this.
By calculating a hash from the tables primary keys this can be used as a bucket part together with the rest of the primary keys.
I have come up with the following method to be sure (I think?) that the hash always will be the same for a specific primary key.
Using Guava Hashing:
public static String bucket(List<String> primKeyParts, int maxBuckets) {

    StringBuilder combinedHashString = new StringBuilder();
    primKeyParts.forEach(part ->{
        combinedHashString.append(
            String.valueOf(
                Hashing.consistentHash(Hashing.sha512()
                    .hashBytes(part.getBytes()), maxBuckets)
            )
        );
    });
    return combinedHashString.toString();
}

The reason I use sha512 is to be able to have strings with max characters of 256 (512 bit) otherwise the result will never be the same (as it seems according to my tests).
I am far from being a hashing guru, hence I'm asking the following questions.
Requirement: Between different JVM executions on different nodes/machines the result should always be the same for a given Cassandra primary key?

Can I rely on the mentioned method to do the job?
Is there a better solution of hashing large strings so they always will produce the same result for a given string?
Do I always need to hash from string or could there be a better way of doing this for a C* primary key and always produce same result?

Please, I don't want to discuss data modeling for a specific table, I just want to have a bucket strategy.
EDIT:
Elaborated further and came up with this so the length of string can be arbitrary. What do you say about this one?
public static int murmur3_128_bucket(int maxBuckets, String... primKeyParts) {

    List<HashCode> hashCodes = new ArrayList();
    for(String part : primKeyParts) {
        hashCodes.add(Hashing.murmur3_128().hashString(part, StandardCharsets.UTF_8));
    };
    return Hashing.consistentHash(Hashing.combineOrdered(hashCodes), maxBuckets);
}

","I currently use a similar solution in production. So for your method I would change to:
public static int bucket(List<String> primKeyParts, int maxBuckets) {
  String keyParts = String.join("""", primKeyParts);
  return Hashing.consistentHash(
                     Hashing.murmur3_32().hashString(keyParts, Charsets.UTF_8),
                     maxBuckets);
}

So the differences

Send all the PK parts into the hash function at once.
We actually set the max buckets as a code constant since the consistent hash is only if the max buckets stay the same.
We use MurMur3 hash since we want it to be fast not cryptographically strong.

For your direct questions 1) Yes the method should do the job. 2) I think with the tweaks above you should be set. 3) The assumption is you need the whole PK? 
I'm not sure you need to use the whole primary key since the expectation is that your partition part of your primary key is gonna be the same for many things which is why you are bucketing. You could just hash the bits that will provide you with good buckets to use in your partition key. In our case we just hash some of the clustering key parts of the PK to generate the bucket id we use as part of the partition key.
","191","<hash><cassandra><datastax-enterprise><sha><murmurhash>","3","2","1","2016-10-22 12:59:07","40192398","0","1","1719123","","2016-10-22 12:59:07","2016-10-22 09:05:49",""
"52542803","Take sha number of commit by tig","I love to use tig client to navigate through git commits.
But I'm missing one thing for now.
Is there a key binding to take a sha number of a git commit I'm currently staying at?
","Check if the command proposed in jonas/tig issue 557 would work for you:
bind generic 9 !sh -c ""echo -n %(commit) | xclip -selection c && echo Copied %(commit) to clipboard""

That would copy the current commit SHA1 in your clipboard.
In the Wiki binding page, you also have example for Mac or Cygwin:
bind generic 9 !@sh -c ""git show -s --format=%s %(commit) | xclip -selection c"" # Linux
bind generic 9 !@sh -c ""git show -s --format=%s %(commit) | pbcopy"" # Mac
bind generic 9 !@sh -c ""git show -s --format=%s %(commit) > /dev/clipboard"" # Cygwin

The OP megas proposes in the comments to use git rev-parse:
bind generic 9 !@sh -c ""git rev-parse --short %(commit) | pbcopy""

","189","<git><sha><tig>","2","3","1","2018-10-01 11:54:04","52578478","0","1","","","","2018-09-27 18:07:48",""
"45756194","Hash collision in commits from all version control systems","I read Hash collision in git
from this it appears what very unlikely what two different commits in git will have same hash.
But what about all commits not only git? My application working with git,svn,hg - can i assume that there will be no different commits with same hash?
For now i'm trying to deside how stop my application from creation same commits from different forks of one repo in db.
I figure out what i can do hash column in db unique and if i already have commit with this hash - just skip it.
But i dont know is there is a big/small chance that i will skip unique commit and not the duplicate of already existing commit.
","Both git and mercurial use sha1 for generating hashes, so I would say that the probability of having the same hash by two different commits one from git and one from mercurial is the same of having the same hash by two different git commits.
Svn does not use hashes to identify commits but incremental revision numbers so you do not have any collision problem here
","187","<git><svn><mercurial><sha>","0","4","2","2017-08-19 21:49:30","45756862","0","","","","","2017-08-18 12:01:06",""
"45756194","Hash collision in commits from all version control systems","I read Hash collision in git
from this it appears what very unlikely what two different commits in git will have same hash.
But what about all commits not only git? My application working with git,svn,hg - can i assume that there will be no different commits with same hash?
For now i'm trying to deside how stop my application from creation same commits from different forks of one repo in db.
I figure out what i can do hash column in db unique and if i already have commit with this hash - just skip it.
But i dont know is there is a big/small chance that i will skip unique commit and not the duplicate of already existing commit.
","TL;DR: you are safe unless you mix VCSes.

The problem statement in your question is not quite right in the first place:

... it appears what very unlikely what two different commits in git will have same hash.

and this (indirectly) leads to a faulty further assumption:

But what about all commits not only git? My application working with git,svn,hg - can i assume that there will be no different commits with same hash?

Even if all VCSes were perfect, you could not really make this assumption.  Even if all VCSes were both perfect and used the same hash algorithm, you still could not make this assumption.  But for your particular problem, there is a much simpler (albeit imperfect) answer.

For now i'm trying to deside how stop my application from creation same commits from different forks of one repo in db ...

The main thing to consider here is the concept of ""forks of one repo"", and how you are going to identify a particular commit.
If we look at the identity of a commit in Git or Mercurial, we find that it is a hash ID.
Two objects in Git that have the same object-ID are the same object, by definition, because Git will store any object only once.  This is because the underlying storage model for Git is a simple key-value store, with the key being a hash ID.  There is only one value stored under any single key.
To allow for the four object types in Git—commit, annotated tag, tree, and blob—Git stores the object's type in a header prepended to all objects.  It makes the assumption that prepending the string commit <size>\0 to some data results in a different hash than prepending the string blob <size>\0 to the same data.  This assumption is largely true, though the pigeonhole principle tells us that there must be some data for which it is false.  (To the extent that SHA-1 is good, the chance of finding a data-pair that generates a collision is 1 in 2160.  The Stevens et al work shows that SHA-1 is not that good.)
In any case, though, Git's underlying storage model means that once a key has an associated value, that key/value pair is now occupied, and no pair with the same key can be stored again.  Hence, if some existing key k exists, and has type commit and represents some commit, no new object of any type with key k can be added to the repository database (at least not without first removing the existing object with key k).
What this means is that if you make the assumption that commits are not removed, and if you have seen that key k exists before in any clone of this repository, any other clone with key k has the same object.  The hash, in other words, is the object, in a very real sense.
This is not necessarily the case in Mercurial.  Mercurial's database can store new commits that have duplicate keys (the simple local sequence number associated with each object can disambiguate them).  However, such commits can never be transferred from one repository to another (and are likely to cause other problems), so you are certainly allowed to assume the problem away if the repository will be distributed.
Currently, both Git and Mercurial use SHA-1 as well—but they use them in different ways.  That is, the input message on which the hash is computed differs in Git vs Mercurial.  What this means is that if you have ""forks"" G (stored via Git) and M (stored via Mercurial) that represent the same repository, the keys kG in G are (numerically) unrelated to the keys kM in M.
Therefore, if you allow two different forks to use two different underlying VCSes, you cannot make the assumption that two different keys represent two different objects, nor that two identical keys represent the same object.  If you constrain them to the same VCS, though, you may make this assumption.
(SVN does not identify commits by hashes at all.  Since SVN repositories are centralized, they can and do use a simple unique integer to represent each commit.  By converting the SVN repository to a Git repository, however, you impose the Git restrictions: you now have a repository that meets any restrictions imposed by both VCSes.  Should someone add a new commit to the SVN repository that cannot be represented correctly in the Git repository, it simply never goes into the Git repository at all.)
","187","<git><svn><mercurial><sha>","0","2","2","2017-08-19 21:49:30","45756862","0","","","","","2017-08-18 12:01:06",""
"32390896","HTTPS api call not working with sha2 ssl","I have used an external api which can be accessible via https (sha1 ssl), And now the external api system upgraded to sha2. While I am hitting the api, i am getting below exception.
Connecting to test.demo.com|10.200.100.101|:8443... connected.
OpenSSL: error:140770FC:SSL routines:SSL23_GET_SERVER_HELLO:unknown protocol
Unable to establish `SSL connection`.

Update:
Comments from external api team (earlier we used SSL protocol and now TLS (TLSv1.2) is benign used in new setup (SSL was expired protocol)).
","Based on description above (without actual code snippet) you need to check if you client application has appropriate protocol specified (if they changed it on server to TLS v1.2, you need to change it in your client as well). Great link regarding different TLS versions.
","187","<ssl><https><sha>","0","1","1","2015-09-05 04:52:01","32409619","0","","3906185","","2015-09-04 08:32:06","2015-09-04 05:46:41",""
"45846798","Python (Filename + Sha1) generator","I have a problem with my algorithm apparently it skips a lot of sha1 hashes when executing.
No problem with the filename, but im having problem with having this output:
filename+sha1\n
For every each of them. I can guess it`s because of os.walk in some way but im not that expert ATM.
    txt = open('list','w')
for dirpath, dirnames, filenames in os.walk(dir_path):
    text = str(filenames)
    for tag in (""["", ""]"", "" "",""'""):
        text = text.replace(tag, '')
    text = str(text.replace(',','\n'))
    for i in filenames:
        m = hashlib.sha1(str(text).encode('utf-8')).hexdigest()
        txt.write(text+"" ""+str(m)+""\n"")
txt = txt.close()

Thanks
","Change:
txt = open('list','w')

to:
txt = open('list','a')

You are using ""w"" which overwrites any previous content. You need ""a"", which appends to the existing file without overwriting.
","186","<python><hash><sha>","0","0","2","2017-08-23 20:26:49","45848018","5","","","","","2017-08-23 18:15:59",""
"45846798","Python (Filename + Sha1) generator","I have a problem with my algorithm apparently it skips a lot of sha1 hashes when executing.
No problem with the filename, but im having problem with having this output:
filename+sha1\n
For every each of them. I can guess it`s because of os.walk in some way but im not that expert ATM.
    txt = open('list','w')
for dirpath, dirnames, filenames in os.walk(dir_path):
    text = str(filenames)
    for tag in (""["", ""]"", "" "",""'""):
        text = text.replace(tag, '')
    text = str(text.replace(',','\n'))
    for i in filenames:
        m = hashlib.sha1(str(text).encode('utf-8')).hexdigest()
        txt.write(text+"" ""+str(m)+""\n"")
txt = txt.close()

Thanks
","What looks like a potential issue is that you are converting filenames, which is a list of each individual file in the current folder, into a string and then performing replacements on that list.  I assume what you intended to do instead was replace within each filename string those special tags.  Try the below.
    txt = open('list','w')
for dirpath, dirnames, filenames in os.walk(dir_path):
    for text in filenames:
        text = re.sub('[\[\],"" ""]',"""",text)
        m = hashlib.sha1(str(text).encode('utf-8')).hexdigest()
        txt.write(text+"" ""+str(m)+""\n"")
txt = txt.close()

As requested, if you dont' want to use re, just do what you had originally done:
text = 'fjkla[]  k,, a,[,]dd,]'
for badchar in '[],"" ""]':
    text = text.replace(badchar,"""")

","186","<python><hash><sha>","0","0","2","2017-08-23 20:26:49","45848018","5","","","","","2017-08-23 18:15:59",""
"51484919","Possible CRC-32 Checksum Reverse Engineer Crack","I'm trying to change some data from an old PS1 game save file but the data keeps getting corrupted even though I isolated the exact bit I wanted to change and made sure nothing else was altered.
I changed some data for every save file and here's the possible checksum constant I found.
8A B5 2E CC
BD E6 AE 3A
B7 88 25 21
61 EC 03 37
35 3E 6D 59
11 48 91 D0
77 4B B2 85
85 55 F7 B5

Any advice or help is appreciated.
","","186","<md5><sha><crc><crc32>","0","","0","2018-07-23 19:48:16","","2","","4134099","","2018-07-23 19:48:16","2018-07-23 18:11:22",""
"26692922","Any ""out of band"" hashes in MD* or SHA-*?","Do any of the common hash algorithms define an ""out of band"" hash code, i.e. one that is guaranteed to never be the result of the algorithm?
","Neither the MD* or SHA-* family of algorithms has an out of band hash value.
If you wish to implement this yourself, you can use the following logic:

select a random hash value to be the out of band value.
compute the hash.
if the hash value (improbably) turns out to be the out of band hash value, assign another hash value.

In pseudocode:
OutOfBandHash = 0xdeadbeefdeadbeefdeadbeefdeadbeef
h = hash(stuff)
if h = OutOfBandHash
    h = OutOfBandHash + 1

","186","<performance><hash><md5><sha>","5","1","2","2016-05-11 05:56:55","26693950","5","1","116","","2016-05-11 05:56:55","2014-11-01 20:30:46",""
"26692922","Any ""out of band"" hashes in MD* or SHA-*?","Do any of the common hash algorithms define an ""out of band"" hash code, i.e. one that is guaranteed to never be the result of the algorithm?
","No, there are no out of band hash values for MD5, SHA-1 or one of the SHA-2 candidates. The output of cryptograhic hashes is guaranteed to be indistinguishable from random. That said, if you generate a value of the same size as e.g. SHA-256 (32 bytes) that is not already a known hash, then you are guaranteed that nobody else will generate the same value. This could even be 32 bytes set to all zeros. There are endless messages that will generate the hash value you chose, the point is that it is impossible to find one.
If anybody would be able to generate a hash that has the same value then they would be able to generate a collision. If a collision can be generated then the cryptographic hash is considered broken. MD5 does have collisions and is considered broken. For SHA-1 there have been no collisions yet, but the amount of work required to generate one is lower than expected for a hash with 160 bit output, and possibly already inside reach. Neither MD5 or SHA1 is currently so broken that you would be able to generate any random hash value, but attacks only get better, not worse.
So in the end you would be best off choosing SHA-256 or SHA-512 for this particular purpose. Note that although you can use just X leftmost bytes of the output, you should use at least 160 bits or so to be reasonably sure that there is no collision - for non-broken hash algorithms the output size determines the chance of collisions.
","186","<performance><hash><md5><sha>","5","0","2","2016-05-11 05:56:55","26693950","5","1","116","","2016-05-11 05:56:55","2014-11-01 20:30:46",""
"50724104","Get the SHA-512 of any SQL query","A common practice to compare two text file is to use the SHA-512 [or any other realted SHA algo]. If two SHA results are not the same then the files are not exactely the same.
I would like to do the same with two SQL queries. I just want to know if the queries gives 100% identical result or not with a SHA-512 [or sha-256 would be OK as well]?
Is that possible to perform that? I am using SQL Server...
","Just to help...
It's understood that both queries return the same columns in the same order.
You must do:
SELECT COUNT(*) FROM (
  ([YOUR_QUERY_A]
   EXCEPT
   [YOUR_QUERY_B]) -- A_B
  UNION ALL
  ([YOUR_QUERY_B]
   EXCEPT
   [YOUR_QUERY_A]) -- B_A
  ) EX

If returns 0, both queries return the same
For test purposes:
SELECT COUNT(*) FROM (
  (select 1 a
   EXCEPT
   select 1)
  UNION ALL
  (select 1
   EXCEPT
   select 1)
  ) EX

Change some inner query and look what changes
","186","<sql><sql-server><sha><sha512>","1","3","2","2018-06-06 17:07:13","50724328","12","","","","","2018-06-06 15:24:43",""
"50724104","Get the SHA-512 of any SQL query","A common practice to compare two text file is to use the SHA-512 [or any other realted SHA algo]. If two SHA results are not the same then the files are not exactely the same.
I would like to do the same with two SQL queries. I just want to know if the queries gives 100% identical result or not with a SHA-512 [or sha-256 would be OK as well]?
Is that possible to perform that? I am using SQL Server...
","Here's some example SQL that uses 2 methods.  

FOR
XML
&
HASHBYTES
EXCEPT

IF OBJECT_ID('tempdb..#tmpTest') IS NOT NULL DROP TABLE #tmpTest;
CREATE TABLE #tmpTest (
    id int identity(1,1) primary key, 
    col1 decimal(10,2), 
    col2 varchar(30)
);

insert into #tmpTest (col1, col2) values 
(1,'val1'),
(null,'val2'),
(3,null),
(4,'val4')
-- ,(5,'monkeywrench')
;

declare @SQL1 VARCHAR(1000);
declare @SQL2 VARCHAR(1000);
declare @SQLHASH VARCHAR(3000);
declare @SQLEXCEPT VARCHAR(5000);

set @SQL1 = 'select col1, col2 
from #tmpTest
where (col1 is null or col1 between 1 and 4)
';

set @SQL2 = 'select col1, col2 
from #tmpTest
where (col2 is null or col2 is not null)
';

set @SQLHASH = 'select 
IIF(LEN(query1.x) = LEN(query2.x) AND HASHBYTES(''SHA2_512'', query1.x) = HASHBYTES(''SHA2_512'', query2.x),''true'',''false'') as SameHash
from (
    '+ @SQL1 +'
    order by 1, 2
    for xml auto
) query1(x)
cross join (
    '+ @SQL2 +'
    order by 1, 2
    for xml auto
) query2(x)';

--select @SQLHASH as SQLHASH;
execute(@SQLHASH);

set @SQLEXCEPT = 'select 
IIF(count(*) = 0,''true'',''false'') as SameRecords
from (
    select * from
    (
        '+ @SQL1 +'
        except
        '+ @SQL2 +'
    ) as q1exceptq2

    union all

    select * from (
        '+ @SQL2 +'
        except
        '+ @SQL1 +'
    ) as q2exceptq1
) q';

--select @SQLEXCEPT as SQLEXCEPT;
execute(@SQLEXCEPT);

In this example, both dynamic queries return 'true'.
But do note that just because the result sets are the same, doesn't mean that the criteria used are equivalent.
It might just be bad luck that they are currently returning the same results.
(just uncomment the monkeywrench record to get false from both)
Also, about the FOR XML. When one of the ORDER BY is different, then the resulting XML and HASH will also be different.  
While with an EXCEPT you can only add an ORDER BY at the end, because it sorts the combined resultset.
","186","<sql><sql-server><sha><sha512>","1","0","2","2018-06-06 17:07:13","50724328","12","","","","","2018-06-06 15:24:43",""
"56080202","Change Filezilla user passwords with PHP SHA512 and Salt","We're trying to match our Filezilla Server 0.9.6 user passwords to those that the user chooses for logging into our site with.  All googling points to old solutions that implement MD5, but the newer versions use SHA512 and Salt.  The below code successfully updates the Server XML file, but the new passwords are not working after restarting Filezilla.
Does anyone have experience in this, and can point out where this code is incorrect?
My Code
From https://forum.filezilla-project.org/viewtopic.php?t=39934
<?php
$password = ""myNewPassword"";

$seed = str_split(""!\""#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"");
shuffle($seed);
$rand = '';
foreach (array_rand($seed, 64) as $k) {
    $rand .= $seed[$k];
}
$salt_raw = utf8_encode($rand);
$salt_html = htmlentities($salt_raw);
$password = utf8_encode($password);
$salted_password = $password . $salt_raw;
$encoded_password = strtoupper(hash('SHA512', $salted_password));

// For Filezilla
$FzPass = $encoded_password;
$FzSalt = $salt_html;

$xmlFile = 'C:\path-to\FileZilla Server.xml';
$xml = simplexml_load_file($xmlFile);
$Pass = $xml->xpath(""//User[@Name='TheUserName']//Option[@Name='Pass']"");
$Salt = $xml->xpath(""//User[@Name='TheUserName']//Option[@Name='Salt']"");

$Pass[0][0] = $FzPass;
$Salt[0][0] = $FzSalt;

$xml->formatOutput = true;
$saved = $xml->asXML($xmlFile);
chdir( 'C:\FileZilla Server' );
exec( '""C:\FileZilla Server\FileZilla Server.exe"" /reload-config' );

Before the PHP execution  Filezilla Server.xml
<?xml version=""1.0"" ?>
<FileZillaServer>
    <Users>
        <User Name=""TheUserName"">
            <Option Name=""Pass"">1ED89AFBA4FD8EF177EAAF21E6641C33FC870860D5F399CD9B0A79632B0F2B08B235DB7258DB2B6EB58402AF29A4C8491CC8F82ED9D2E74EABA8F7B240D0615F</Option>
            <Option Name=""Salt"">-Z5c@tci:e?E4E@H@(cq)/W1zDMs#F&gt;XsYd$M)0t#{/s,tc@]GJYf@{@T.&amp;O*5sF</Option>
            <Option Name=""Group""></Option>
            <Option Name=""Bypass server userlimit"">1</Option>
            <Option Name=""User Limit"">0</Option>
            <Option Name=""IP Limit"">0</Option>
            <Option Name=""Enabled"">1</Option>
            <Option Name=""ForceSsl"">0</Option>
        </User>
    </Users>
</FileZillaServer>

After the PHP execution
<?xml version=""1.0"" ?>
<FileZillaServer>
        <User Name=""producer"">
            <Option Name=""Pass"">57AECC6BBCCC8EE5A73F0E362E2434DBF617EC2C85404205D881B1B7A2D303405789F8B42DFE61EDD7CF197700B66307E998054615C8A9A1CA5A9988029F0EAD</Option>
            <Option Name=""Salt"">P,]mk&amp;amp;4N;v3`#&amp;lt;e8S?oj[U=Ja$}Q6~:\Z1{HuB&amp;gt;bnI/&amp;quot;M-pDh.qFylKfd0|LgT*G</Option>
            <Option Name=""Group""/>
            <Option Name=""Bypass server userlimit"">1</Option>
            <Option Name=""User Limit"">0</Option>
            <Option Name=""IP Limit"">0</Option>
            <Option Name=""Enabled"">1</Option>
            <Option Name=""ForceSsl"">0</Option>
        </User>
</FileZillaServer>

","SimpleXML will automatically encode* XML entities, so there's no need to do it in your PHP code with htmlentities(). In addition, I've updated your code to include a proper random salt generator. Give it a try!
<?php
$password = ""myNewPassword"";
$salt = """";
while (strlen($salt) !== 64) {
    $byte = ord(openssl_random_pseudo_bytes(1));
    if ($byte > 31 && $byte < 127) {
        $salt .= chr($byte);
    }
}

$hashed_password = strtoupper(hash('SHA512', $password . $salt));

$xmlFile = 'server.xml';
$xml = simplexml_load_file($xmlFile);
$Pass = $xml->xpath(""//User[@Name='TheUserName']//Option[@Name='Pass']"");
$Salt = $xml->xpath(""//User[@Name='TheUserName']//Option[@Name='Salt']"");

$Pass[0][0] = $hashed_password;
$Salt[0][0] = $salt;

$xml->formatOutput = true;
$saved = $xml->asXML($xmlFile);


*There are special characters (&, <, >, "") that need to be encoded so as not to be confused with part of the markup (not always, but it's easier to just always encode them.) These get encoded as &amp;, &lt;, &gt; and &quot;, respectively. Since there is a special character in the encoded value, you can see double-encoding happening by looking for things like &amp;lt; as we see in your sample XML.
","185","<php><xml><simplexml><sha><filezilla>","1","2","1","2019-05-10 17:15:08","56081954","11","","1255289","","2019-05-10 17:15:08","2019-05-10 14:59:56",""
"16634295","Password security","Currently I am using a particular scheme for securing passwords, and I think I have some points for improvement. The implementation is in Java, so I prefer to use SHA-2 512 as encryption form.
Currently I have a client-server model, so these things can happen:

Client wants to login, he sends his password with one time normal SHA-2 512 encryption over the network.
The server has the passwords stored in the database as for example SHA-2_512(SHA-2_512(password) + salt), with the inner SHA-2_512(password) being the 'encrypted' password it receives over the network.
Password checks are done server side and there is no way anything can leak out from the server, the only possible vulnerability would be if someone could read out the RAM I think.

I have these questions:

An attacker usually creates collision attacks when wanting to hack a password. However how are collision attacks sufficient? If the password needs to be used for other applications like Outlook.com, Facebook or whatever (which likely use another salt as they have nothing to do with my applications), how is a collision attack enough then? Don't you need the real password?
Does SHA-2 512 already use iteration? And even if so, should I change my encryption methods to automatically use a number of iterations plus how many iterations is preferred? I have also read about using a random number of iterations (in a range), how do I store the random factor determenistically?
Should I store system secrets for every iteration in the server code? See http://blog.mozilla.org/webappsec/2011/05/10/sha-512-w-per-user-salts-is-not-enough/ . I could store an array which would hold a static secret for every iteration, with the nth secret being for the nth iteration. Nobody can know the secrets, they are computed once (I guess as encrypting some random string), and then basically stored in the Server's RAM.
Currently I send the typed password from the client to the server as just SHA-2_512(password), should this process be improved, and if so, how? I cannot use salts, because the client does not have the salt available.

Regards.
","TLDR: You need to send the password using an encrypted channel, such as TLS.  Consider using bcrypt for password hashing.
SHA-2 512 is not an encryption algortihm, it is a message digest algorithm.  An encryption algorithm requires a key and a message to encrypt.  It produces ciphertext.  The important thing is that an encryption algorithm has a decryption algorithm.
ciphertext = E(key, plaintext);
plaintext = D(key, ciphertext);

A message digest takes a piece of plaintext and produces a message digest.  There is no corresponding reverse mechanism to take a message digest and retrieve the original message.  There is also no secret key.
digest = hash(plaintext);

If an attacker is able to access a database with hashes, the attacker can retrieve the original password by brute forcing, trying lots of guesses with the hash algorithm.
digest1 = hash(guess1);
digest2 = hash(guess2);    //repeat with lots of guesses

Firstly, sending a hash over a network is not secure.  It needs to be sent through some secure communications mechanism such as SSL.  If an attacker can intercept the hash over the communications they may be able to work out the orignal password.
A hash collision is not the same as brute forcing the password.  A hash collision is caused when two different messages produce the same message digest.
digest1 = hash(plaintext1);
digest2 = hash(plaintext2);
if ( ( plaintext1 != plaintext2 ) && ( digest1 == digest2 ) )  
    // hash collision

SHA-512 does not have iterations designed to prevent brute-forcing.  The SHA set of algorithms are designed to be efficient.  The reason for adding iterations when hashing passwords is to increase the time it takes to brute force a password.  The idea being the cost to perform a legitimate login attempt and perform 100 iterations is tiny compared to an attacker who has millions of passwords, each of which requires 100 iterations.  Adding more iterations helps reduce the impact of improved processor speeds (which would help an attacker try more iterations quicker).
You should make the number of iterations a configurable limit that is stored against each user.  So you store the password hash, salt and iteration count for each user.  This means that in the future you can increase the number of iterations to take into account increased hardware power.
Sending the SHA-2 512 in plaintext is not secure.  You should send it within an encrypted channel, such as SSL.
Having said all that, SHA-2 is not designed to be a password hashing algorithm.  It is designed for message validation and is to be efficient.  Consider using a purpose built password hashing algorithm.  One example is bcrypt.  It is designed to be computationally difficult and has salt and iterations built in.
","184","<security><passwords><sha>","1","5","1","2013-05-19 12:10:16","16634381","0","","","","","2013-05-19 11:43:03",""
"17789005","Generate Keytool Object from CSR","I have to develop an application which uses another application for generating a CSR. After generating the CSR I have to provide this CSR along with a SHA256 hash of the public key to a CA. The problem is the application which generates the CSR doesn't generate the hash. 
How do I generate the hashcode?
Can I create a keystore object using this particular CSR and then extract the hash from it? 
Or can anyone suggest any other technique?
","Your question is missing some details like what language you are developing in, if you need to do this programmatically or if command line OpenSSL is an option.
You can do this with the following OpenSSL command lines (I'm sure there is an equivalent way to do this with the OpenSSL C libraries).
# Extract public key from CSR
openssl req -noout -in my.csr -pubkey > pubkey.pem

# Convert public key to DER format
openssl rsa -in pubkey.pem -outform der -out pubkey.der

# Take the SHA256 hash of the public key
openssl dgst -sha256 pubkey.der

","179","<certificate><keystore><public-key-encryption><sha><csr>","1","1","1","2014-03-18 02:44:10","","0","","321731","","2014-03-18 02:44:10","2013-07-22 13:35:04",""
"11383153","How can I compute another bit pattern with identical SHA-160 sum?","I want to test my application when it gets tricked by a false passed SHA-160 sum and thus would like to compute a change to the data being summed which results in the original SHA-160 sum again and thus would be missed. I am using the Botan library in C++ to compute the sum.
How can I compute a change to a bit stream that is around 1500 bits such that its SHA-160 is identical to the original?
","The short answer is: you can't.
The long answer is: you can, but only with vast amounts of computation power.  The entire purpose of hash algorithms is to make it hard to find collisions.  If it were easy to find a collision, then there'd be little point in using the hash algorithm.
To solve your test problem, I suggest abstracting away the file-reading/hash-computing part of your application into a separate class, and then mocking it with a fake hash implementation in order to test the rest of the application.
","178","<c++><sha><false-positive><botan>","0","3","1","2012-07-08 13:07:11","11383279","2","","","","","2012-07-08 12:28:51",""
"29764754","Creating a SHA-256 hash in OrientDB Function","I need to store a password's SHA-256 hash in OrientDB REST function - so I can use it to authenticate the user. The incoming call to the REST function will contain the password (over HTTPS) but I want to generate a hash and store that instead of the password itself. 
However, OrientDB does not expose any helpers to do this. And straight javascript does not have helpers to do this either... any way I can make this happen?
(one obvious option is to SHA-256 it in the middle tier and pass that to OrientDB but I'd rather keep this in the database tier)
","You can use OSecurityManager from Javascript functions like this
return com.orientechnologies.orient.core.security.OSecurityManager.instance().digest2String(""password"");

","177","<orientdb><sha>","0","2","1","2015-04-21 10:53:54","29770177","0","","","","","2015-04-21 06:42:25",""
"11059773","Where does hashing take place with a webclient and LDAP","We are currently implementing several web application that requires the user to create a user login that will be authenticated through LDAP calls. The LDAP server and user accounts will be shared by all the applications and the user's credentials will be the same across all applications.
My question is where does the hashing take place in a standard LDAP scenario, on the client side or does the LDAP server take care of it. It was my understanding that the LDAP server takes in a user password, at the time of creation, and hashes it and stores it. (By the by we plan on using salted SHA512 hashing and SSL connections between the client > webserver > LDAp server)
It was my understanding that the hashing operation takes place centrally on the LDAP server, relieving the client of the trouble and avoiding any breakage on the client end to affect other apps.
","Modern, professional-quality servers use storage schemes for password attributes (usually userPassword and authPassword) that involve executing the hash on the server. Servers usually append or prepend a unique value (called a salt) to a password, then execute the hash function. The ""salt"" minimizes the effectiveness of dictionary attacks, that is, dictionaries are more difficult to create for salted, hashed passwords.
SSL (a secure connection) should be used, or a non-secure connection should be promoted using the StartTLS extended request. An encrypted connection should be used so that passwords can be transmitted in the clear with BIND requests. Passwords that are transmitted in the clear over a secure connection can be checked for history and quality by the servers' password policy enforcement mechanisms. For servers that enforce password history and quality checks, passwords should not be transmitted pre-encoded. Therefore, it is not so much the ""trouble"" to the LDAP client as it is the fact that the server can enforcement organization-wide and agreed-to password quality and history checks in a central location.
see also

LDAP: StartTLS request
LDAP: Programming Practices

","174","<ldap><sha><ssha>","0","0","1","2012-06-18 10:20:13","11062647","0","","","","","2012-06-16 00:31:58",""
"52870263","How to resize array 20 byte to 16 byte in Java","I have this hex array of 20 Byte which the output [Digest] of SAH-1:
b1d5781111d84f7b3fe45a0852e59758cd7a87e5 

How can I reuse it as 16 Byte to be the initialize IV in AES_CBC encryption algorithm as this: 
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 

The Utils class:
public class Utils
{
    private static String   digits = ""0123456789abcdef"";

    public static String toHex(byte[] data, int length)
    {
        StringBuffer    buf = new StringBuffer();

        for (int i = 0; i != length; i++)
        {
            int v = data[i] & 0xff;

            buf.append(digits.charAt(v >> 4));
            buf.append(digits.charAt(v & 0xf));
        }

        return buf.toString();
    }

    public static String toHex(byte[] data)
    {
        return toHex(data, data.length);
    }

        public static byte[] toByteArray(
        String string)
    {
        byte[]  bytes = new byte[string.length()];
        char[]  chars = string.toCharArray(); 

        for (int i = 0; i != chars.length; i++)
        {
            bytes[i] = (byte)chars[i];
        }
         return bytes;
    } }

","[EDIT: updated the code to use the code requested in comment]
Use Arrays.copyOf(keyBytes, 16):  
MessageDigest hash = MessageDigest.getInstance(""SHA1""); 
hash.update(Utils.toByteArray(input)); 
byte[] keyBytes = hash.digest();
keyBytes = Arrays.copyOf(keyBytes, 16); // use only first 128 bit
System.out.println(""digest : "" + Utils.toHex(keyBytes));

","174","<java><arrays><aes><sha1><sha>","-1","0","1","2018-10-30 13:51:17","","2","","10391072","","2018-10-30 13:51:17","2018-10-18 08:46:52",""
"18077729","Hashing and using time as salt to prevent access from un-authorized system and replay attacks","I am currently writing a user authentication API for a mobile game. I'd want to make sure that the user can only access the system from the mobile app. (That is, the server has to deny access if the Server API is accessed from browser or CURL (un-authorized system) even though the exact POST parameters are valid). Ideally, the system should not allow replay attacks as well.
Does anybody have idea or example of how this can be done?
I am thinking of adding a unique-per-user salt with current timestamp and SHA256-ing the parameters with a private key on the client app, which will then be validated on the server. This way will prevent the access from browser or CURL as attackers will need to get the private key in order to compute the SHA256 hash. The salt (which includes timestamp) will also be sent as one of the params, and the server will get the timestamp and deny access if it is past a certain time. But I am not very sure about the security and whether it is the common or correct practice, as I've never design secured app, or seen the source code of one before.
Thanks for your input!
","This will stop users from intercepting requests on network and using them with CURL. But both private key and signature algorithm can be extracted for your app and reimplemented, so this solution will not be totally secure. 
Alas, you can't have complete security here without some custom tamper-resistant hardware issued to users.
","170","<security><sha><hmac><hmacsha1>","1","0","1","2013-08-06 11:49:39","","0","1","","","","2013-08-06 10:32:44",""
"42930043","Getting error in cocapod installation CryptoSwift","i installed a pod successfully ""cryptoSwift' to get sha-2 in my xcode project using swift2. but after pod installation when i build project it shows me a lot of error in pod files. why i am getting this error. what's i am doing wrong?
Thanks in advance.
","Since there is no such thing as ""sha-2"" exaxctly which hash is really need is not clear. Assuming sha-2 means a SHA-2 series hash function the common choices are SHA-256 and SHA-512.

Example using Common Crypoto (Swift2)  

func sha256(string: String) -> [UInt8] {
    var digest = [UInt8](count: Int(CC_SHA256_DIGEST_LENGTH), repeatedValue: 0)
    if let data = string.dataUsingEncoding(NSUTF8StringEncoding) {
        CC_SHA256(data.bytes, CC_LONG(data.length), &digest)
    }
    return digest
}

Test
let testString = ""testString""
let testHash = sha256(testString)
print(""testHash: \(testHash)"")

let testHashNSData = NSData(bytes:testHash, length:testHash.count)
print(""testHashNSData: \(testHashNSData)"")

let testHashBase64 = testHashNSData.base64EncodedStringWithOptions([])
print(""testHashBase64: \(testHashBase64)"")

Output:
testHash: [74, 207, 11, 57, 217, 196, 118, 103, 9, 163, 104, 159, 85, 58, 192, 26, 181, 80, 84, 95, 250, 69, 68, 223, 192, 178, 206, 168, 47, 186, 2, 163]
testHashNSData: <4acf0b39 d9c47667 09a3689f 553ac01a b550545f fa4544df c0b2cea8 2fba02a3>
testHashBase64: Ss8LOdnEdmcJo2ifVTrAGrVQVF/6RUTfwLLOqC+6AqM=


Example using Common Crypoto (Swift3)  

func sha256(string: String) -> Data? {
    let messageData = string.data(using:String.Encoding.utf8)!
    var digestData = Data(count: Int(CC_SHA256_DIGEST_LENGTH))

    _ = digestData.withUnsafeMutableBytes {digestBytes in
        messageData.withUnsafeBytes {messageBytes in
            CC_SHA256(messageBytes, CC_LONG(messageData.count), digestBytes)
        }
    }
    return digestData
}

Test
let testString = ""testString""
let testHash = sha256(string:testString)
print(""testHash: \(testHash!.map { String(format: ""%02hhx"", $0) }.joined())"")

let testHashBase64 = testHash!.base64EncodedString()
print(""testHash: \(testHasBase64)"")

Output:  
testHash: 4acf0b39d9c4766709a3689f553ac01ab550545ffa4544dfc0b2cea82fba02a3  
testHashBase64: Ss8LOdnEdmcJo2ifVTrAGrVQVF/6RUTfwLLOqC+6AqM=

Note: Add to your Bridging Header:
#import <CommonCrypto/CommonCrypto.h>

","169","<ios><swift2><cocoapods><sha><cryptoswift>","1","0","1","2018-01-21 01:55:10","42931120","5","","608639","","2018-01-21 01:55:10","2017-03-21 14:32:02",""
"48410337","Can you SHA1 hash a file to a certain length","I need to compare two files. One file may be longer than the other and I need to check to see if the longer file contains all of the data of the shorter file. 
I could do a binary compare of the two something like this:
function compareFiles($file_a, $file_b){
  if (filesize($file_a) > filesize($file_b)){
    $fp_a = fopen($file_b, 'rb');
    $fp_b = fopen($file_a, 'rb');
  } else { // filesize($file_b) > filesize($file_a)
    $fp_a = fopen($file_a, 'rb');
    $fp_b = fopen($file_b, 'rb');
  }
  while (($b = fread($fp_a, 4096)) !== false){
    $b_b = fread($fp_b, 4096);
    if ($b !== $b_b){
      fclose($fp_a);
      fclose($fp_b);
      return false;
    }
  }
  fclose($fp_a);
  fclose($fp_b);
  return true;
}

but this would be slow. As an alternative, I could compare the SHA1 hash of the smaller file against the SHA1 hash of the larger file up and until the size of the smaller file, something like this:
function compareFiles($file_a, $file_b){
  $tmpfile = '/dev/shm/tmp_file_copy.bin';
  if (filesize($file_a) > filesize($file_b)){
    $readfromfile = $file_b;
    $bytes_to_copy = filesize($file_b);
  } else {
    $readfromfile = $file_a
    $bytes_to_copy = filesize($file_a);
  }
  $readfile = fopen($readfromfile, 'rb');
  $writefile = fopen($tmpfile, 'wb');
  while (!feof($readfile) && $bytes_to_copy> 0) {
    if ($bytes_to_copy <= 8192) {
      $contents = fread($readfile, $bytes_to_copy);
      $bytes_to_copy = 0;
    } else {
      $contents = fread($readfile, 8192);
      $bytes_to_copy =- 8192;
    }
    fwrite($writefile, $contents);
  }
  fclose($writefile);
  fclose($readfile);
  $result = sha1_file($readfromfile = $file_a ? $file_b : $file_a) === sha1_file($tmpfile);
  unlink($tmpfile);
  return $result;
}

but I fear that this would also be slow as it involves a lot of I/O (to /dev/shm).
In short, I'm looking for a better way...
","The byte-by-byte is the best method in your case. It only compares first x bytes of both files and stops if they are different. Hash function must process all bytes in file. Isn't that slower?
","169","<php><hash><sha>","1","1","2","2018-01-24 00:38:09","48413126","4","","","","","2018-01-23 20:34:30",""
"48410337","Can you SHA1 hash a file to a certain length","I need to compare two files. One file may be longer than the other and I need to check to see if the longer file contains all of the data of the shorter file. 
I could do a binary compare of the two something like this:
function compareFiles($file_a, $file_b){
  if (filesize($file_a) > filesize($file_b)){
    $fp_a = fopen($file_b, 'rb');
    $fp_b = fopen($file_a, 'rb');
  } else { // filesize($file_b) > filesize($file_a)
    $fp_a = fopen($file_a, 'rb');
    $fp_b = fopen($file_b, 'rb');
  }
  while (($b = fread($fp_a, 4096)) !== false){
    $b_b = fread($fp_b, 4096);
    if ($b !== $b_b){
      fclose($fp_a);
      fclose($fp_b);
      return false;
    }
  }
  fclose($fp_a);
  fclose($fp_b);
  return true;
}

but this would be slow. As an alternative, I could compare the SHA1 hash of the smaller file against the SHA1 hash of the larger file up and until the size of the smaller file, something like this:
function compareFiles($file_a, $file_b){
  $tmpfile = '/dev/shm/tmp_file_copy.bin';
  if (filesize($file_a) > filesize($file_b)){
    $readfromfile = $file_b;
    $bytes_to_copy = filesize($file_b);
  } else {
    $readfromfile = $file_a
    $bytes_to_copy = filesize($file_a);
  }
  $readfile = fopen($readfromfile, 'rb');
  $writefile = fopen($tmpfile, 'wb');
  while (!feof($readfile) && $bytes_to_copy> 0) {
    if ($bytes_to_copy <= 8192) {
      $contents = fread($readfile, $bytes_to_copy);
      $bytes_to_copy = 0;
    } else {
      $contents = fread($readfile, 8192);
      $bytes_to_copy =- 8192;
    }
    fwrite($writefile, $contents);
  }
  fclose($writefile);
  fclose($readfile);
  $result = sha1_file($readfromfile = $file_a ? $file_b : $file_a) === sha1_file($tmpfile);
  unlink($tmpfile);
  return $result;
}

but I fear that this would also be slow as it involves a lot of I/O (to /dev/shm).
In short, I'm looking for a better way...
","Hashing the files in this case will only be slower. Consider the following case.
File A.txt contents:
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

File B.txt contents:
AAAAAAAAAAAAAAAAAAAAABBBBBBBBBB

Note that A.txt is 40 characters total, 10 characters longer than B.txt at 30 characters
How much I/O do we have to do on each file to determine if A.txt contains all of B.txt? 40 bytes? 30 bytes? No, the answer is only 20 bytes, because that's how much the two files share have in common. You stream each file one byte (or chunk of bytes) at a time and compare them as you go. The results of such a comparison looks like this:
A.txt: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

B.txt: AAAAAAAAAAAAAAAAAAAAABBBBBBBBBB

Stream ---------------------^
Result ✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓X

And then you stop. Why compare the rest?
If you hash both files, you have to have the whole contents in memory to compute the hash. Even if you hash them in chunks while streaming them into memory, which do you think is faster: comparing each byte from each file or hashing the chunk? The complexity of the comparison is O(number of bytes) whereas the complexity of the SHA-1 hash algorithm is specified by RFC 3174.
","169","<php><hash><sha>","1","2","2","2018-01-24 00:38:09","48413126","4","","","","","2018-01-23 20:34:30",""
"12129995","Hashing Salting","Hello sorry if this may be a stupid question, I am gonna try a sha+salt for my site. wondering how to randomize my salt. Upon registering so both of them will be hashed into the database. Also is there a need for me to decrpyt both sha and salt for user validation. Would be nice if someone pointed me in the right detection or a good article. Thanks Also I'm new to security stuff on websites I'm still researching what security implementations i would use for my site currently these are what i will be doing.

password hashing
Anti-SQL injections
Hiding Values in URL

Would like to know more what should i add to my security. I am making a school management system as a Project.
So far i am looking Into. Anti-bruteforce and my professor gave me a hint about HTTPS.
Also how would i validate a log in if the password is sha+salt encrypted.
","Since this is quite a large question its probably easier for me to direct you to some useful resources rather than try to explain it all myself.
For an introduction to web cryptography A List Apart wrote a nice article. It doesn't discuss implementation very much, but provides a nice overview.
For a list of security flaws and how to combat them see the OWASP Top Ten Project.
Here's a guide to PHP Security that is pretty comprehensive.
Finally, see this question for more on creating a login system.
I'd recommend searching around Stack Overflow as there're probably some good answers to questions you may have.
","168","<php><security><encryption><hash><sha>","0","2","3","2012-08-26 12:42:47","12130170","1","","","","","2012-08-26 12:09:23",""
"12129995","Hashing Salting","Hello sorry if this may be a stupid question, I am gonna try a sha+salt for my site. wondering how to randomize my salt. Upon registering so both of them will be hashed into the database. Also is there a need for me to decrpyt both sha and salt for user validation. Would be nice if someone pointed me in the right detection or a good article. Thanks Also I'm new to security stuff on websites I'm still researching what security implementations i would use for my site currently these are what i will be doing.

password hashing
Anti-SQL injections
Hiding Values in URL

Would like to know more what should i add to my security. I am making a school management system as a Project.
So far i am looking Into. Anti-bruteforce and my professor gave me a hint about HTTPS.
Also how would i validate a log in if the password is sha+salt encrypted.
","Being the salt just a random string added to the hash of the string you want to encode, there are enough ways to generate it [e.g. this on SO].
You don't need and you can't decrypt any sha result because sha [like md5] is an hashing algorithm, not a crypt function, i.e. it's not meant to hide anything for later retrieval: this is important because I don't want the admin of a site I am registered to to read my password from database.
To hash is to map elements from a data set to shorter elements from another one, in an [almost total] injective way - you map arbitrary long strings to fixed-length keys: this lets you make comparison in the hashed domain without actually knowing the original value.
hash( value1 ) = hash ( value2 ) => value1 = value2

I said almost because hashing algorithms have some collisions [e.g. exceptions to previous statement such as hash(value1) = hash(value2) does not imply the 2 values being the same] - salts help in this regard too.
This said, this is how you save the password to db:

generate the salt;
prepend the salt to the actual password: it's important to put it before the pwd to prevent dictionary attacks;
hash the concatenated string with a proper algorithm [I chose sha1 just for example's sake];
save both the string and the salt to db.

In code:
$user -> salt = your_salt_generator();
$user -> hashedPwd = hash('sha1', $salt . $userChosenPwd);

Pwd checking against $username / $password is just:

get user with given $username from db;
if it exists, use process above with saved salt and given password and check if it equals stored hash.

In code:
hash('sha1', $user -> salt . $sentPassword) == $user -> hashedPwd;


About hiding values in URLs, it's more a SEO / readability topic than a security one: URLs should be made upon routing [e.g. http://somesite.com/products/:id to access the id-th product], and your server logic should not be vulnerable to stuff put into requests that are made to your site [regardless to totally crap cases I can't come with right now].

Regarding MySQL injections, we got rid of them since prepared statements from PDO extension.
There are millions of answers about this around SO, just have a look around.
Keep it up with your work!
","168","<php><security><encryption><hash><sha>","0","1","3","2012-08-26 12:42:47","12130170","1","","","","","2012-08-26 12:09:23",""
"12129995","Hashing Salting","Hello sorry if this may be a stupid question, I am gonna try a sha+salt for my site. wondering how to randomize my salt. Upon registering so both of them will be hashed into the database. Also is there a need for me to decrpyt both sha and salt for user validation. Would be nice if someone pointed me in the right detection or a good article. Thanks Also I'm new to security stuff on websites I'm still researching what security implementations i would use for my site currently these are what i will be doing.

password hashing
Anti-SQL injections
Hiding Values in URL

Would like to know more what should i add to my security. I am making a school management system as a Project.
So far i am looking Into. Anti-bruteforce and my professor gave me a hint about HTTPS.
Also how would i validate a log in if the password is sha+salt encrypted.
","Not really a direct answer to your question, but look into phpass
http://www.openwall.com/phpass/
It will handle the salting for you, and has been reviewed by many security experts and been deemed and extremely good password hashing tool
","168","<php><security><encryption><hash><sha>","0","1","3","2012-08-26 12:42:47","12130170","1","","","","","2012-08-26 12:09:23",""
"50572792","Getting the diff with name, status, and commit sha","I want to get the list of modified files in a pull request and group them by their commits sha.
I have only found the git diff --name-status but it doesn't return the commit sha:
I have a backup plan to use git format-patch -1 , but the results are large files that includes the content of the files, which makes it very inefficient to parse.
I was wondering if there is another way to approach this problem?
Thanks 
","To list files modified in commits run
git log --name-only

You can modify the output using huge number of git log options.
But that has nothing to do with backup so you perhaps need to change your backup plans.
","167","<git><diff><commit><sha>","0","0","2","2018-05-28 22:14:29","50573972","1","","","","","2018-05-28 19:55:33",""
"50572792","Getting the diff with name, status, and commit sha","I want to get the list of modified files in a pull request and group them by their commits sha.
I have only found the git diff --name-status but it doesn't return the commit sha:
I have a backup plan to use git format-patch -1 , but the results are large files that includes the content of the files, which makes it very inefficient to parse.
I was wondering if there is another way to approach this problem?
Thanks 
","I found what I needed:
git show --diff-filter=dr --name-only sha
--diff-filter=dr because I wanted to filter out deleted or renamed files.
Btw, I was asking this because the GitHub API has limitations on the number of files it returns for a commit. So, I needed to clone the repo and do it locally.
@phd:
Thanks for your help, it guided me in the right direction.
","167","<git><diff><commit><sha>","0","1","2","2018-05-28 22:14:29","50573972","1","","","","","2018-05-28 19:55:33",""
"52222545","Laravel 5.6 Hash","I know the question was already ask but i have tried without success.
We have an old database with SHA256 and double salt and we wan't to use this for Register and Login.
I have follow this tutorial and many more : https://conceptsandimplementation.wordpress.com/2017/03/07/replace-laravels-default-password-hash-bcrypt-with-base64-encode/
This my code : 
namespace App\Libs\CustomHash;

use Illuminate\Contracts\Hashing\Hasher as HasherContract;

class CustomHasher implements HasherContract {

    public function info($hashedValue) {

    }

    /**
     * Hash the given value.
     *
     * @param  string  $value
     * @return array   $options
     * @return string
     */
    public function make($value, array $options = array()) {
        $PasswordHashed = 'a5df5z' . $value . 'a45ee1a';
        $PasswordHashed = hash('sha256', $value);
        return $PasswordHashed;
    }

    /**
     * Check the given plain value against a hash.
     *
     * @param  string  $value
     * @param  string  $hashedValue
     * @param  array   $options
     * @return bool
     */
    public function check($value, $hashedValue, array $options = array()) {
        return $this->make($value) === $hashedValue;
    }

    /**
     * Check if the given hash has been hashed using the given options.
     *
     * @param  string  $hashedValue
     * @param  array   $options
     * @return bool
     */
    public function needsRehash($hashedValue, array $options = array()) {
        return false;
    }

}

And :
namespace App\Providers;

use Illuminate\Hashing\HashServiceProvider;
use App\Libs\CustomHash\CustomHasher as CustomHasher;

class CustomHashServiceProvider extends HashServiceProvider
{
    public function register()
    {
        $this->app->singleton('hash', function () {
            return new CustomHasher;
        });
    }
}

Here my providers list
//Illuminate\Hashing\HashServiceProvider::class,
App\Providers\CustomHashServiceProvider::class,

I know that's not a good practive to use SHA but i do not have the choice.
Thank's in advance for you're help.
","","167","<laravel><hash><passwords><sha>","0","","0","2018-09-07 12:24:52","","5","","","","","2018-09-07 12:24:52",""
"28630596","Convert python uuid hashing code to php","I'm trying to port large chunk of python code to php - while doing so I've found this one line which I can't find equivalent for:
    instance = resp.get(
        'instance',
        uuid.uuid4().hex.encode('utf-8')
    )

    sha = hashlib.sha1(
        self.username.encode('utf-8') + instance
    )
    self.params.update({'id': sha.hexdigest().upper()})

I've found https://github.com/ramsey/uuid to generate uuid4 and tried to mimic above like so:
    if (isset($resp['instance']))
    {
        $instance = $resp['instance'];
    }
    else
    {
        $uuid4 = Uuid::uuid4();
        $instance = utf8_encode(dechex($uuid4->toString()));
    }

    $sha = sha1(utf8_encode($this->username) . $instance);

    $this->params['id'] = strtoupper($sha);

This does not seem to provide same results. Can anyone help me out to produce same result in php as in python. Thanks.
","Turns out that dechex function is not the same as python's hex.
In this case result of hex function was removing dashes from uuid. Solved it with str_replace.
","167","<php><python><sha>","1","0","1","2015-02-20 14:43:45","28631638","0","","","","","2015-02-20 13:52:22",""
"28506243","MongoDB: Is it possible to SHA512 columns?","Basically what I want to do is something like:
SELECT * FROM myTable WHERE SHA2(myField, 512) =  'myValue';

Is this possible?
Scenario

I have this hashed string but I have a plain string in stored in DB.

","No, you can't do finds based on function evaluation on a field, in general. If you want to match on the hash and keep the plain string value, store the hash and the plain string value on the document.
","166","<sql><mongodb><sha>","0","1","1","2015-02-15 01:39:06","28522230","1","","","","","2015-02-13 18:27:19",""
"4813076","How do you detect a ""word"" on a line that contains both letters and numbers?","I need a regex that detects a ""word"" on a line that contains both letters and numbers and is a certain length, e.g. 812d555c726d10c77b05cd164705665a. The goal is to detect lines that contain sha1 digests. 
If a regex-only is too hard, a Ruby solution is OK.
","You can use the following regular expression.
s =~ /^[a-f0-9]{32,32}$/i

","165","<ruby><regex><validation><sha>","2","2","4","2011-02-03 17:10:13","4813094","0","2","322020","","2011-01-27 12:01:30","2011-01-27 05:31:59",""
"4813076","How do you detect a ""word"" on a line that contains both letters and numbers?","I need a regex that detects a ""word"" on a line that contains both letters and numbers and is a certain length, e.g. 812d555c726d10c77b05cd164705665a. The goal is to detect lines that contain sha1 digests. 
If a regex-only is too hard, a Ruby solution is OK.
","This should do it:
valid_sha1 = !((str =~ /\b[a-f0-9]{32,}\b/i).nil?)

","165","<ruby><regex><validation><sha>","2","5","4","2011-02-03 17:10:13","4813094","0","2","322020","","2011-01-27 12:01:30","2011-01-27 05:31:59",""
"4813076","How do you detect a ""word"" on a line that contains both letters and numbers?","I need a regex that detects a ""word"" on a line that contains both letters and numbers and is a certain length, e.g. 812d555c726d10c77b05cd164705665a. The goal is to detect lines that contain sha1 digests. 
If a regex-only is too hard, a Ruby solution is OK.
","Both the other answers require the line begin with the SHA1.  If the sha1 can be anywhere in the line, remove the ^
/[a-f0-9]{32}/i

You also don't need the second 32 in the curly braces, as if you only specify one number, it must match exactly that many.
","165","<ruby><regex><validation><sha>","2","1","4","2011-02-03 17:10:13","4813094","0","2","322020","","2011-01-27 12:01:30","2011-01-27 05:31:59",""
"4813076","How do you detect a ""word"" on a line that contains both letters and numbers?","I need a regex that detects a ""word"" on a line that contains both letters and numbers and is a certain length, e.g. 812d555c726d10c77b05cd164705665a. The goal is to detect lines that contain sha1 digests. 
If a regex-only is too hard, a Ruby solution is OK.
","If you really want to require that the word consist of BOTH letters and numbers (as you ask above), then you can use positive lookahead:
sha_array = line.scan(/(?=.{0,31}\d)(?=.{0,31}[a-f])\b[\da-f]{32}\b/i)

The (?= checks a condition in advance, without consuming anything.
","165","<ruby><regex><validation><sha>","2","0","4","2011-02-03 17:10:13","4813094","0","2","322020","","2011-01-27 12:01:30","2011-01-27 05:31:59",""
"42689193","Hexadecimal representation of double fractional part for SHA-256","I am trying to write  a SHA-256 hash function for practice. In the wikipedia stands that the initial hash values are given by the fractional parts of the square roots of the first 8 primes 2..19. Now i am trying to calculate them. What i have done so far:
#include <vector>
#include <cstdint>
#include <cmath>
#include <cstdio>

// fill primes with all prime values between min and max value
int getPrimes(uint32_t min, uint32_t max, std::vector<uint32_t>* primes)
{
  if (min < 1) min = 1;     // primes can only be >= 1
  if (min > max) return 0;  // max has to be larger than min


  for (uint32_t value = min; value <= max; value++)
  {

    uint32_t tmp;
    for (tmp = 2; tmp <= sqrt(value); tmp++)  // start to check with 2, because 1 is always going to work
    {
      if (value % tmp == 0)
      {
        break;
      }
    }
    if (tmp > sqrt(value)) primes->push_back(value);   // if no other integer divisor is found, add number to vector
  }

  return 0;
}

int main()
{
  std::vector<uint32_t> primes;

  getPrimes(2, 20, &primes);  // fills vector with all prime values between 2 and 20

  double tmp = sqrt(primes[0]);                       // get square root, returns double
  printf(""value %f\n"", tmp);                          // debug
  printf(""size of double %i\n"", sizeof(double));      // get representation byte size
  double * tmpOffset = &tmp;                          // get value offset
  unsigned char   * tmpChar   = (unsigned char*)tmpOffset;              // convert to char pointer

  printf(""address of variable %i\n"", &tmp);           // debug
  printf(""raw values\n1:%X\n2:%X\n3:%X\n4:%X\n5:%X\n6:%X\n7:%X\n8:%X\n"",
         (uint8_t)tmpChar[0], (uint8_t)tmpChar[1], (uint8_t)tmpChar[2], (uint8_t)tmpChar[3],
         (uint8_t)tmpChar[4], (uint8_t)tmpChar[5], (uint8_t)tmpChar[6], (uint8_t)tmpChar[7]);


  return 0;
}

This returns the first 8 primes, calculates the square root of 2 and fetches directly from the memory location where it is stored the actual byte values:
value 1.414214
size of double 8
address of variable 6881016
raw values
1:CD
2:3B
3:7F
4:66
5:9E
6:A0
7:F6
8:3F

Compared to the value given in the wikipedia article 0x6a09e667 it looks awfully wrong what i am doing here. Is there a remapping happening or how excatly is the binary reresentation of a double?Can someone point me in the right direction how to correctly calculate the fractional part in hex?
Edit:
Thanks for your help! It is not pretty but does work for now.
  printf(""raw fractional part:\n0x%02X %02X %02X %02X %02X %02X %02X\n"",
         (uint8_t)(0xf & tmpChar[6]), (uint8_t)tmpChar[5], (uint8_t)tmpChar[4], (uint8_t)tmpChar[3],
         (uint8_t)tmpChar[2], (uint8_t)tmpChar[1], (uint8_t)tmpChar[0]);


  uint32_t fracPart = (0xf & tmpChar[6]);
  fracPart <<= 8;
  fracPart |= tmpChar[5];
  fracPart <<= 8;
  fracPart |= tmpChar[4] ;
  fracPart <<= 8;
  fracPart |= tmpChar[3];
  fracPart <<= 4;
  fracPart |= (0xf0 & tmpChar[2]) >> 4;
  printf(""fractional part: %X\n"", fracPart);

Edit2
A little bit of a nicer implementation:
  uint32_t fracPart2 = *(uint32_t*)((char*)&tmp + 3);     // point to fractional part - 4 bit
  fracPart2 <<= 4;                                        // shift to correct value
  fracPart2 |= (0xf0 & *((char*)&tmp + 2)) >> 4;          // append last 4 bit
  printf(""beautiful fractional part: %X\n"", fracPart2);

This solution is highly platform dependant and in a second approach i am going for something like in the link of comment 2.
Edit3
So this is my final solution, which does not depend on the internal representation of a double and calculates the fraction just using math.
uint32_t getFractionalPart(double value)
{
  uint32_t retValue = 0;

  for (uint8_t i = 0; i < 8; i++)
  {
    value = value - floor(value);
    retValue <<= 4;
    value *= 16;
    retValue += floor(value);
  }

  return retValue;
}

","One thing to keep in mind is that the double here is 64 bits. 
If you look at the IEEE representation of doubles at the below link, it has 1 sign bit, 11 exponent bits and the remaining are the precision bits.
Now when you look at the output you've gotten, take a look at the nibbles I've put in quotes, do they look familiar?
The reason the number is backwards is because of endianness. The 12th bit is where the fractional part is starting in this case, and then it moves backwards.
1:CD
2:3B
3:'7'F
4:'66'
5:'9E'
6:'A0'
7:F'6'
8:3F

or
8:3F
7:F'6'
6:'A0'
5:'9E'
4:'66'
3:'7'F
2:3B
1:CD

https://en.wikipedia.org/wiki/Double-precision_floating-point_format
","165","<c++><sha><fractions>","0","0","1","2017-03-09 10:40:29","42689660","2","","7402897","","2017-03-09 10:40:29","2017-03-09 07:28:11",""
"45708750","How to hash and encode mpesa passcode in java","I am trying to dynamically generate a password to be sent with each api request to mpesa apis. According to documentation I need to first concatenate the provided passkey with timestamp and merchant id and then do a sha256 to get a hashed password which I should then encode to base 64 however doing this in Java returns a wrong encoded string whereas a similar process and code works in PHP, where could I be going wrong?
import org.apache.commons.codec.binary.Base64;
import org.apache.cxf.headers.Header;
import org.apache.cxf.jaxb.JAXBDataBinding;
import javax.xml.bind.JAXBException;
import javax.xml.namespace.QName;
import java.io.UnsupportedEncodingException;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.List;



public class CheckoutHeaderBuilder {

    public static Header buildHeader(String merchantId, String passKey, String timestamp) throws JAXBException, NoSuchAlgorithmException, UnsupportedEncodingException {
    String hashedEncodedPass = Base64.encodeBase64String(MessageDigest.getInstance(""SHA-256"").digest((merchantId + passKey + timestamp).getBytes(""utf-8"")));

    List<Header> headers = new ArrayList<>();
    CheckOutHeader checkOutHeader = new CheckOutHeader();
    checkOutHeader.setTIMESTAMP(timestamp);
    checkOutHeader.setMERCHANTID(merchantId);
    checkOutHeader.setPASSWORD(hashedEncodedPass);
    return new Header(new QName(""tns:ns"", ""CheckOutHeader""), checkOutHeader, new JAXBDataBinding(CheckOutHeader.class));

    }

}

","Hi Japheth Ongeri Inkalimeva, you do not have to encrypt using SHA256. You may not need to neccesarily set a new password when sending a Lipa na M-Pesa Online Payment API request.
I have ammended your code to remove SHA256 encryption.
import org.apache.commons.codec.binary.Base64;
import org.apache.cxf.headers.Header;
import org.apache.cxf.jaxb.JAXBDataBinding;
import javax.xml.bind.JAXBException;
import javax.xml.namespace.QName;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;


public class CheckoutHeaderBuilder  {

    public static Header buildHeader(String merchantId, String passKey, String timestamp) throws JAXBException, NoSuchAlgorithmException, UnsupportedEncodingException {
    String hashedEncodedPass = Base64.encodeBase64String((merchantId + passKey + timestamp).getBytes(""utf-8""));

    List<Header> headers = new ArrayList<>();
    CheckOutHeader checkOutHeader = new CheckOutHeader();
    checkOutHeader.setTIMESTAMP(timestamp);
    checkOutHeader.setMERCHANTID(merchantId);
    checkOutHeader.setPASSWORD(hashedEncodedPass);
    return new Header(new QName(""tns:ns"", ""CheckOutHeader""), checkOutHeader, new JAXBDataBinding(CheckOutHeader.class));

    }

}

","165","<java><sha><mpesa>","0","1","3","2019-06-28 06:33:13","","1","3","451475","","2017-12-19 12:43:57","2017-08-16 08:33:35",""
"45708750","How to hash and encode mpesa passcode in java","I am trying to dynamically generate a password to be sent with each api request to mpesa apis. According to documentation I need to first concatenate the provided passkey with timestamp and merchant id and then do a sha256 to get a hashed password which I should then encode to base 64 however doing this in Java returns a wrong encoded string whereas a similar process and code works in PHP, where could I be going wrong?
import org.apache.commons.codec.binary.Base64;
import org.apache.cxf.headers.Header;
import org.apache.cxf.jaxb.JAXBDataBinding;
import javax.xml.bind.JAXBException;
import javax.xml.namespace.QName;
import java.io.UnsupportedEncodingException;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.List;



public class CheckoutHeaderBuilder {

    public static Header buildHeader(String merchantId, String passKey, String timestamp) throws JAXBException, NoSuchAlgorithmException, UnsupportedEncodingException {
    String hashedEncodedPass = Base64.encodeBase64String(MessageDigest.getInstance(""SHA-256"").digest((merchantId + passKey + timestamp).getBytes(""utf-8"")));

    List<Header> headers = new ArrayList<>();
    CheckOutHeader checkOutHeader = new CheckOutHeader();
    checkOutHeader.setTIMESTAMP(timestamp);
    checkOutHeader.setMERCHANTID(merchantId);
    checkOutHeader.setPASSWORD(hashedEncodedPass);
    return new Header(new QName(""tns:ns"", ""CheckOutHeader""), checkOutHeader, new JAXBDataBinding(CheckOutHeader.class));

    }

}

","Example encode SHA256
import java.nio.charset.StandardCharsets;
import com.google.common.hash.Hashing;

String password = “123456”;
Hashing.sha256().hashString(password, StandardCharsets.UTF_8).toString();

Hope will help you
","165","<java><sha><mpesa>","0","1","3","2019-06-28 06:33:13","","1","3","451475","","2017-12-19 12:43:57","2017-08-16 08:33:35",""
"45708750","How to hash and encode mpesa passcode in java","I am trying to dynamically generate a password to be sent with each api request to mpesa apis. According to documentation I need to first concatenate the provided passkey with timestamp and merchant id and then do a sha256 to get a hashed password which I should then encode to base 64 however doing this in Java returns a wrong encoded string whereas a similar process and code works in PHP, where could I be going wrong?
import org.apache.commons.codec.binary.Base64;
import org.apache.cxf.headers.Header;
import org.apache.cxf.jaxb.JAXBDataBinding;
import javax.xml.bind.JAXBException;
import javax.xml.namespace.QName;
import java.io.UnsupportedEncodingException;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.List;



public class CheckoutHeaderBuilder {

    public static Header buildHeader(String merchantId, String passKey, String timestamp) throws JAXBException, NoSuchAlgorithmException, UnsupportedEncodingException {
    String hashedEncodedPass = Base64.encodeBase64String(MessageDigest.getInstance(""SHA-256"").digest((merchantId + passKey + timestamp).getBytes(""utf-8"")));

    List<Header> headers = new ArrayList<>();
    CheckOutHeader checkOutHeader = new CheckOutHeader();
    checkOutHeader.setTIMESTAMP(timestamp);
    checkOutHeader.setMERCHANTID(merchantId);
    checkOutHeader.setPASSWORD(hashedEncodedPass);
    return new Header(new QName(""tns:ns"", ""CheckOutHeader""), checkOutHeader, new JAXBDataBinding(CheckOutHeader.class));

    }

}

","You can encode the password for Mpesa in this way:
import java.nio.charset.StandardCharsets;
import java.util.Base64;

public class MpesaUtils {

    public static String getMpesaEncodedPassword(String lipaNaMpesaShortCode,
                              String password, String timeStamp) {
        StringBuilder sb = new StringBuilder();
        sb.append(lipaNaMpesaShortCode).append(password).append(timeStamp);

        byte[] bytes = sb.toString().getBytes(StandardCharsets.ISO_8859_1);
        return Base64.getEncoder().encodeToString(bytes);
    }
}

Usage example:
    String lnmShortCode = ""your lipa na mpesa short code here"";
    String password = ""your password here"";
    String timeStamp = getTimeStamp();

    String encodedPassword = MpesaUtils.getMpesaEncodedPassword(lnmShortCode, password, timeStamp);

","165","<java><sha><mpesa>","0","0","3","2019-06-28 06:33:13","","1","3","451475","","2017-12-19 12:43:57","2017-08-16 08:33:35",""
"52257884","firebase error while trying to get SHA certificate fingerprints?","While trying to get SHA certificate fingerprints I run this line and that was the result 
line:
keytool -list -v -keystore %USERPROFILE%\.android\debug.keystore -alias androiddebugkey -storepass android -keypass android 

What else should I do to solve this error?
C:\>keytool -list -v -keystore %USERPROFILE%\.android\debug.keystore -alias androiddebugkey -storepass android -keypass android
Illegal option:  sisy\.android\debug.keystore
keytool -list [OPTION]...

Lists entries in a keystore

Options:

 -rfc                    output in RFC style
 -alias <alias>          alias name of the entry to process
 -keystore <keystore>    keystore name
 -cacerts                access the cacerts keystore
 -storepass <arg>        keystore password
 -storetype <type>       keystore type
 -providername <name>    provider name
 -addprovider <name>     add security provider by name (e.g. SunPKCS11)
   [-providerarg <arg>]    configure argument for -addprovider
 -providerclass <class>  add security provider by fully-qualified class name
   [-providerarg <arg>]    configure argument for -providerclass
 -providerpath <list>    provider classpath
 -v                      verbose output
 -protected              password through protected mechanism

Use ""keytool -help"" for all available commands

","It looks like %USERPROFILE% returns a value with a space in it.
Try wrapping in quotes like
keytool -list -v -keystore ""%USERPROFILE%\.android\debug.keystore"" -alias androiddebugkey -storepass android -keypass android 

","163","<firebase><certificate><flutter><sha>","1","1","1","2018-09-10 13:02:18","52258434","1","","2753863","","2018-09-10 12:57:21","2018-09-10 12:32:13",""
"50970937","hashes in python and oracle sql not matching","I have to functions to generate a hash (sha512) of a random element. The first one is a oracle sql query:
select RAND, DBMS_CRYPTO.HASH(RAND, 6 /*SHA512*/) as sha512 from 
    (select DBMS_CRYPTO.RANDOMBYTES(5) as RAND from DUAL);

which returns
RAND




E4BD639D4726D294CB63B6DDC651C6B6F5708ED3FC9B2E08A71DD7D36958B7B13BD31ECA28039565121F3067167D719292A86B6CAD052EFC9A56923594946084

When I try to generate the hash for C1BEC41854 in python I use the following script
from hashlib import sha512
h = 'C1BEC41854'
b = bytes.fromhex(h)
print(sha512(b).hexdigest())

which returns
a63f4d25b5f0fc51fb27ae1e1c5f4ff19edc7b790d2373071ae8f454e63766a19b69a200690a32a65dd57be5b47fec29ee15c354f52ad5916127bb4cf674ab37

Can you please help me figure out why the both hashes are not identical?
","In your Oracle query, you're generating multiple random byte strings.
Try this to demonstrate: 
select RAND, RAND, RAND, DBMS_CRYPTO.HASH(RAND, 6 /*SHA512*/) as sha512 from 
    (select DBMS_CRYPTO.RANDOMBYTES(5) as RAND from DUAL);

Note the three different values for RAND. So the hash you are generating is actually for a different byte sequence than you think it is.
To fix it, you can use this bit of trickery courtesy of AskTom
select RAND,DBMS_CRYPTO.HASH(RAND, 6 /*SHA512*/) as sha512 from 
    (select rownum, DBMS_CRYPTO.RANDOMBYTES(5) as RAND from DUAL);

including rownum in the subquery makes RAND consistent each time you use it as a field in the top level SELECT.
AskTom Question on the subject
","163","<python><sql><oracle><sha><hashlib>","2","3","2","2018-06-21 19:39:44","50972779","6","1","","","","2018-06-21 14:25:38",""
"50970937","hashes in python and oracle sql not matching","I have to functions to generate a hash (sha512) of a random element. The first one is a oracle sql query:
select RAND, DBMS_CRYPTO.HASH(RAND, 6 /*SHA512*/) as sha512 from 
    (select DBMS_CRYPTO.RANDOMBYTES(5) as RAND from DUAL);

which returns
RAND




E4BD639D4726D294CB63B6DDC651C6B6F5708ED3FC9B2E08A71DD7D36958B7B13BD31ECA28039565121F3067167D719292A86B6CAD052EFC9A56923594946084

When I try to generate the hash for C1BEC41854 in python I use the following script
from hashlib import sha512
h = 'C1BEC41854'
b = bytes.fromhex(h)
print(sha512(b).hexdigest())

which returns
a63f4d25b5f0fc51fb27ae1e1c5f4ff19edc7b790d2373071ae8f454e63766a19b69a200690a32a65dd57be5b47fec29ee15c354f52ad5916127bb4cf674ab37

Can you please help me figure out why the both hashes are not identical?
","This will give you the same result (uppercased):
SELECT sys.dbms_crypto.hash(
  hextoraw('C1BEC41854'),
  6--HASH_SH512
) from dual;

Looks like your string is a hex value already, so I just did a hextoraw.  If it was a basic string like 'Hello' then I'd use utl_raw.cast_to_raw.
Output:
A63F4D25B5F0FC51FB27AE1E1C5F4FF19EDC7B790D2373071AE8F454E63766A19B69A200690A32A65DD57BE5B47FEC29EE15C354F52AD5916127BB4CF674AB37

","163","<python><sql><oracle><sha><hashlib>","2","1","2","2018-06-21 19:39:44","50972779","6","1","","","","2018-06-21 14:25:38",""
"24402660","F# converting hmac python into f#","How would I convert this Python code into F# ""
message = nonce + client_id + api_key
signature = hmac.new(API_SECRET, msg=message, digestmod=hashlib.sha256).hexdigest().upper()

My code so far to achieve this:
let message =string(nonce)+ client_id + api_key
let signature = HMACSHA256.Create(API_secret+message)

Simple issue is I cannot find what represents the hexdigest() function in F#.
Also, do I combine the API_Secret with the message as I have done or must they be separated?
","I think you need somethink like this:
let hexdigest (bytes : byte[]) =
   let sb = System.Text.StringBuilder()
   bytes |> Array.iter (fun b -> b.ToString(""X2"") |> sb.Append |> ignore)
   string sb

let signature =
   use hmac = new HMACSHA256.Create(API_secret)
   hmac.ComputeHash(message)
   |> hexdigest

The part with the StringBuilder is what hexdigest does in python (if I get hexdigest right)
","163","<hash><f#><sha>","2","4","1","2016-02-23 20:43:26","24403500","0","","636019","","2014-06-25 19:16:14","2014-06-25 07:28:42",""
"31495331","SHA256 an uploaded file in Yesod - Using Conduit and Data.Digest.Pure.SHA","I am handling a file upload using yesod, and would like to save the uploaded file to a file on my server with the name being the SHA256 of the contents.
I think the handler-level function will look like: 
fileMove fInfo (basePath <> generateSha fInfo)

This question is centered around how to write generateSha :: FileInfo -> String.
I see a few functions that are likely to be helpful:
fileSource :: MonadResource m => FileInfo -> Source m ByteString
sha256Incremental :: Decoder SHA256State
completeSha256Incremental :: Decoder SHA256State -> Int -> Digest SHA256State
showDigest :: Digest t-> String

But I'm unsure of a few things:

How to wire this up in the conduit. Ideally I'd have it stream the file.
Use the SHA interface to incrementally build up the hash. I can get the SHA256 of an empty string easily enough, but I'm not sure how to  add values.  Presumably it's something hidden in the Decoder type?
What the Int argument of completeSha256Incremental is.

Can somebody point me in the right direction?
","This is only a partial answer.  I am stuck in cabal hell right now and can't install sha-streams to see if things work right.
Calculating a SHA256 incrementally is done like this:
sha256FromChunks :: [ByteString] -> Digest SHA256State
sha256FromChunks cs = completeSHA256Incremental $
                          foldl pushChunk sha256Incremental cs

pushChunk is from Data.Binary.Get.  That shows you how all the function calls fit together, but isn't very practical for a streaming scenario.
To use this with conduit, you would need to turn it into a Sink.
","163","<haskell><yesod><sha><conduit>","0","1","1","2015-07-19 01:34:07","","1","","","","","2015-07-18 20:36:04",""
"15199250","sha: hashed values not matching,when hashed on different pages","I am using sha1 alogorithm for hashing password,& store it in DB.
I have tried following,in aspx page
1.
Login.aspx
  function enc()
  {
   var x=document.getElementById(""<%=txtPwd.ClientID %>"").value;
   var hash = CryptoJS.SHA1(x);
   alert(hash); 
   alert(typeof hash);
   return false;
  }

Changepwd.aspx
  function enc()
  {
   var confirmp=$(""#txtConfrimPassword"").val();
   var hash = CryptoJS.SHA1(confirmp);
   alert(hash);
   document.getElementById(""<%=txtConfrimPassword.ClientID%>"").value = hash; 
   document.getElementById(""<%=txtNewPassword.ClientID%>"").value = hash; 
   return false;
  }

2  tried:  var id2 = $.sha1(String(id)); alternative also..
but in both cases, changed password is not matching while logging in.
Observation: the values hashed by the pages for same values are different!
Problem: How can I get, same values from both the pages. or where I went wrong, am i missing somthing?
Please guide me.
edit:
outputs: for value: abc1234
1 login: c9b359951c09c5d04de4f852746671ab2b2d0994
2 changepwd: da39a3ee5e6b4b0d3255bfef95601890afd80709
","da39a3ee5e6b4b0d3255bfef95601890afd80709 is the SHA1 hash for a empty string. Your confirmp variable does not contain any password at all. You can verify it with any browser that supports console:
var confirmp=$(""#txtConfrimPassword"").val();
console.log(confirmp);

I have the impression that you've made a simple typo:
txtConfrimPassword
   ^^^^^^^

","161","<javascript><asp.net><sha>","0","0","1","2013-03-04 10:41:15","15199645","3","","2131245","","2013-03-04 10:34:28","2013-03-04 10:20:29",""
"53440696","SHA-1 in C on little-endian environment","Most implementations of SHA-1 (even on Wikipedia) I came across are coded for big-endian runtimes. So I'm trying to implement my own version for my machine (little-endian).
I've followed the pseudo-code form Wikipedia and have the following code. I found a function that converts the byte ordering but still not getting the correct output.
#include<stdio.h>
#include<string.h>
#include<math.h>
#include<stdlib.h>

#define rotateleft(x,n) ((x<<n) | (x>>(32-n)))

unsigned int endian_reverse(unsigned int n)
{
    unsigned int m = 0;
    m |= n << 24;
    m |= ((n >> 8) << 24) >> 8;
    m |= ((n << 8) >> 24) << 8;
    m |= n >> 24;
    return m;
}

void SHA1(unsigned char * str1)
{
    unsigned long int h0,h1,h2,h3,h4,a,b,c,d,e,f,k,temp;

    h0 = 0x67452301;
    h1 = 0xEFCDAB89;
    h2 = 0x98BADCFE;
    h3 = 0x10325476;
    h4 = 0xC3D2E1F0;

    unsigned char * str;

    str = (unsigned char *)malloc(strlen((const char *)str1)+100);
    strcpy((char *)str,(const char *)str1);

    int current_length = strlen((const char *)str);
    int original_length = current_length;

    str[current_length] = 0x80;
    str[current_length + 1] = '\0';

    char ic = str[current_length];

    current_length++;
    int ib = current_length % 64;

    int i, j;

    if(ib<56)
        ib = 56-ib;
    else
        ib = 120 - ib;

    for(i=0;i < ib;i++)
    {
        str[current_length]=0x00;
        current_length++;
    }

    str[current_length + 1]='\0';

    for(i=0;i<6;i++)
    {
        str[current_length]=0x0;
        current_length++;
    }

    str[current_length] = (original_length * 8) / 0x100 ;
    current_length++;
    str[current_length] = (original_length * 8) % 0x100;
    current_length++;
    str[current_length+i]='\0';

    int number_of_chunks = current_length/64;
    unsigned long int word[80];

    for(i=0;i<number_of_chunks;i++)
    {
        for(j=0;j<16;j++)
        {
            word[j] = 
                str[i*64 + j*4 + 0] * 0x1000000 + str[i*64 + j*4 + 1] * 0x10000 + 
                str[i*64 + j*4 + 2] * 0x100 + str[i*64 + j*4 + 3];
        }
        for(j=16;j<80;j++)
        {
            word[j] = rotateleft((word[j-3] ^ word[j-8] ^ word[j-14] ^ word[j-16]),1);
        }
        a = h0;
        b = h1;
        c = h2;
        d = h3;
        e = h4;
        for(int m=0;m<80;m++)
        {
            if(m<=19)
            {
                f = (b & c) | ((~b) & d);
                k = 0x5A827999;
            }
            else if(m<=39)
            {
                f = b ^ c ^ d;
                k = 0x6ED9EBA1;
            }
            else if(m<=59)
            {
                f = (b & c) | (b & d) | (c & d);
                k = 0x8F1BBCDC;
            }
            else
            {
                f = b ^ c ^ d;
                k = 0xCA62C1D6;
            }
            temp = (rotateleft(a,5) + f + e + k + word[m]) & 0xFFFFFFFF;
            e = d;
            d = c;
            c = rotateleft(b,30);
            b = a;
            a = temp;

        }

        h0 = h0 + a;
        h1 = h1 + b;
        h2 = h2 + c;
        h3 = h3 + d;
        h4 = h4 + e;

    }

    h0 = endian_reverse(h0);
    h1 = endian_reverse(h1);
    h2 = endian_reverse(h2);
    h3 = endian_reverse(h3);
    h4 = endian_reverse(h4);

    printf(""\n\n"");
    printf(""Hash: %x %x %x %x %x"",h0, h1, h2, h3, h4);
    printf(""\n\n"");
}

int main()
{
    SHA1((unsigned char *)""abc"");
    return 0;
}

SHA-1 (""abc""):
Resulting 
Hash: f7370736 e388302f 15815610 1ccacd49 e7649bb6

Correct (actual) 
Hash: a9993e36 4706816a ba3e2571 7850c26c 9cd0d89d

Am I doing my endianness conversion correctly or in the correct spot? 
","
Am I doing my endianness conversion correctly or in the correct spot?

Endianness conversion endian_reverse(() is incorrect when unsigned is not 32-bit.
Endianness conversion not used in correct spot.  Endian conversion not needed.
Other issues exists.

Code is assuming unsigned long int is 32-bit.  When unsigned long int is 64-bit, I can get the same answer as OP.
Save yourself time: There is no reason to use loose types here.  Use uint32_t, uint8_t.  For array sizing and string lengths use size_t.  Avoid signed types and constants.

By changing unsigned long --> uint32_t and dropping h0 = endian_reverse(h0); ... h7 = endian_reverse(h7); I came up with
Hash: a9993e36 4706816a ba3e2571 7850c26c 9cd0d89d


Other suggestions.
Multiple of 64
size in str = malloc(size) should be a multiple of 64
Stay within multiples of 64
str[current_length+i]='\0'; can write outside allocation.
Alternate size storing
Works for all size_t values up to 264-3 - 1.
  size_t current_length = ...

  // append length in bits
  uint64_t current_length_bits = current_length;
  current_length_bits *= 8;
  for (i = 8; i > 0; ) {
    i--;
    str[current_length + i] = (unsigned char) current_length_bits;
    current_length_bits >>= 8;
  }
  current_length += 8;

","159","<c><endianness><sha>","2","1","1","2018-11-23 07:01:59","53441380","10","","2410359","","2018-11-23 07:01:59","2018-11-23 04:34:16",""
"51818439","How To Convert Values Into Sha-1 And Base64 In Javascript","I want to convert these values into Sha-1 and after that I want to convert again into base64. I tried lots of methods. But , none of them work. 
var nonce = 5;
var unixtm = 6;
var pw = '123';
var shapw = nonce+ ' + ' +unixtm+ ' + ' +pw; //5 + 6 + 123

I mean , First of all I want to convert 'shapw' into Sha-1 and after that convert into Base64. Here is the formula -  

FinalPw = Base64 ( SHA-1 ( nonce + created + SHA-1 ( password ) ) )

How can I do this ??
","There are a lot of libraries which could help you to create SHA1 hash. Here for example https://github.com/emn178/js-sha1. Install it and use like
sha1('Message to hash');
var hash = sha1.create();
hash.update('Message to hash');
hash.hex(); 

For base64 there are btoa() (to base64) and atob() (from base64) functions.
","156","<javascript><base64><sha>","0","0","1","2018-08-13 08:55:24","","0","","","","","2018-08-13 08:47:03",""
"36276403","What is the best way to model key in DynamoDB (Migration from RDS to NoSql)","We are trying to migrate a Oracle based system to use DyanmoDBNoSQL.
Primary key in the Oracle is a complex object with multiple attributes (>6) and in DynamoDB there can be maximum 2 keys (Partition key and sort key) . How to model this in DynamoDB ?
We are considering generating a surrogate key using SHA 256 hashing. Is it a good design ?
Thanks,
Hareendra
","generate surrogate key is a good idea.
a good guide to design dynamodb tables is here:
http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GuidelinesForTables.html
","154","<oracle><amazon-dynamodb><sha><nosql>","0","1","1","2017-09-04 07:10:20","","0","","-1","","2017-09-22 18:01:22","2016-03-29 05:50:39",""
"37048478","Spring Web Application Login with Active Directory","I had configured active directory login with spring and able to do login and fetch attributes but the problem is I have to submit raw password from my browser to server as AD requires it. 
I just checked that when I posted from browser as SHA2 encoded password and passed it to AD login it gives me authentication failure. Due to security reason I need to encode password as SHA2 before posting it to Server. Is there any way to work around?
AndFilter filter = new AndFilter();
ldapTemplate.setIgnorePartialResultException(true);
                        filter.and(new EqualsFilter(""userPrincipalName"", authentication.getName()));
boolean authenticateUser = ldapTemplate.authenticate("""", filter.toString(),password);

","The documentation doesn't say anything about accepting an encrypted password.
The password may already be encrypted when transmitted, though I don't know off hand how that works. If you want to make extra sure, you can connect via LDAPS (LDAP with SSL). This page (under 8.1.1) makes it look as easy as replacing ""ldap://"" with ""ldaps://"" and adding the port on the end of the server name:
ldaps://myserver.example.com:636

Port 636 is the default port for LDAPS.
","153","<spring><active-directory><ldap><sha><spring-ldap>","0","0","1","2016-05-05 14:00:47","","0","","","","","2016-05-05 10:42:42",""
"18042195","Generating random numbers using SHA multiple times","There were similar question on stackoverflow but not exactly mine.
So i have a sequence of numbers (from 1 to ~5,000,000) (call this number N). I want to map every number to a number from [0, 99]. One solution is to take the reminder of N divided by 100. All good. I again want to do this a second time and see to which number from [0, 99] this N gets mapped to. The only requirement is that the information that the N got mapped to a number from [0, 99] (say 34) the first time should not decide anything about the number it gets mapped to the second time.
So I want to do this (SHA(N + 1) % 100) on the first time and (SHA(N + 2) % 100) the second time and so on ..
Is it guaranteed to work ? or am i missing out something?
Simply put:
Take any two arbitrary numbers x1, x2 from [0, 99].
Count all numbers from [0, 5000000] which gets mapped to x1 the first time and x2 the second time. Is this count going to be the same (more or less) for any choice of x1,x2?
","I cranked out the results for 5 million values of n, SHA1(N+1)%100, and SHA1(N+2)%100, then ran it through a stats package.  The sets of SHA results were uniformly distributed between 0 and 99, and the correlation matrix was:
           n      sha+1    sha+2
    n   1.0000  -0.0016  -0.0016
sha+1  -0.0016   1.0000  -0.0001
sha+2  -0.0016  -0.0001   1.0000

In other words, the SHA outcomes are effectively uncorrelated with each other.  A given number 0-99 from the first SHA calculation is equally likely to be paired with any of 0-99 as the second SHA result across the set.
","153","<random><sha><ab-testing><abtest>","0","1","1","2013-08-04 20:28:46","","0","1","760613","","2013-08-04 11:10:23","2013-08-04 10:59:43",""
"53205272","How to get algorithm field from signed PE PKCS#7 block","I've got PKCS#7 content extracted from PE file. 
The first part before the certificate chain (goes from the beginning up to the cert: label), contains info about the file integrity.
In particular, the hash that matches the file hash and the algorithm that use to generate this hash (worth FA0FE65F973A5709DC04EE18ABEF353EBEFEA669 and sha1 correspondingly on the example listed below). 
I'm using openssl and I'd like to extract the hash algorithm type from the X509 format. I tried something like printing md_algs struct from debugger, and hopefully find the field algorithm worth 1.3.14.3.2.26 but that's what I saw.. 
p *(Pkcs7->d.sign->md_algs)
(stack_st_X509_ALGOR) $6 = {
  stack = {
     num = 1
     data = 0x00000001024457f0
     sorted = 0
     num_alloc = 4
     comp = 0x0000000000000000
  }
}

Where can I see the algorithm field ? 
P.s. here's the relevant part of the pkcs7 struct : 
PKCS7: 
   type: pkcs7-signedData (1.2.840.113549.1.7.2)
   d.sign: 
     version: 1
     md_algs:
       algorithm: sha1 (1.3.14.3.2.26)
       parameter: NULL
     contents: 
       type: undefined (1.3.6.1.4.1.311.2.1.4)
     d.other: SEQUENCE:
        0:d=0  hl=2 l=  60 cons: SEQUENCE          
        2:d=1  hl=2 l=  23 cons:  SEQUENCE          
        4:d=2  hl=2 l=  10 prim:   OBJECT            :1.3.6.1.4.1.311.2.1.15
       16:d=2  hl=2 l=   9 cons:   SEQUENCE          
       18:d=3  hl=2 l=   1 prim:    BIT STRING        
       21:d=3  hl=2 l=   4 cons:    cont [ 0 ]        
       23:d=4  hl=2 l=   2 cons:     cont [ 2 ]        
       25:d=5  hl=2 l=   0 prim:      cont [ 0 ]        
       27:d=1  hl=2 l=  33 cons:  SEQUENCE          
       29:d=2  hl=2 l=   9 cons:   SEQUENCE          
       31:d=3  hl=2 l=   5 prim:    OBJECT            :sha1
       38:d=3  hl=2 l=   0 prim:    NULL              
       40:d=2  hl=2 l=  20 prim:   OCTET STRING      [HEX DUMP]:FA0FE65F973A5709DC04EE18ABEF353EBEFEA669
     cert:
      cert_info: 
      ...

thanks 
","Defined in pkcs7.h, the md_algs attribute that you are inspecting is a stack of X509_ALGOR instances:
typedef struct pkcs7_signed_st {
    ASN1_INTEGER *version;      /* version 1 */
    STACK_OF(X509_ALGOR) *md_algs; /* md used */
    STACK_OF(X509) *cert;       /* [ 0 ] */
    STACK_OF(X509_CRL) *crl;    /* [ 1 ] */
    STACK_OF(PKCS7_SIGNER_INFO) *signer_info;
    struct pkcs7_st *contents;
} PKCS7_SIGNED;

It can be safely accessed via the OpenSSL Stack API, for example using the function sk_X509_ALGOR_value() to inspect its element(s).
X509_ALGOR itself is defined in x509.h:
struct X509_algor_st {
    ASN1_OBJECT *algorithm;
    ASN1_TYPE *parameter;
} /* X509_ALGOR */ ;

The information you are looking for is stored in the property algorithm, which you can inspect using, for example, OBJ_obj2txt().
Tying it together, to get a textual representation of the first algorithm in the stack, you could do something like this:
char tbuf[20];
X509_ALGOR *algor = sk_X509_ALGOR_value(Pkcs7->d.sign->md_algs, 0);
int res = OBJ_obj2txt(tbuf, sizeof tbuf, algor->algorithm, 0);

After that, tbuf should contain a value like ""sha1"" and res contains the length of that string. For programmatic purposes, a function like OBJ_obj2nid() is probably more useful.

The debugger did not give you this information because the data field in the stack element is not strongly typed. You would have to cast it yourself to indicate that it is an array of pointers to X509_ALGOR structs. The OpenSSL Stack API provides you a set of macros that do the casting for you and access the array that way. And then, the ASN1_OBJECT that you end up with is hard to inspect or interpret in the debugger since it is just a bunch of bytes representing an object id in ASN.1 format.
","152","<encryption><openssl><sha><pkcs#7><asn1>","1","3","1","2018-11-08 19:18:23","53212465","0","","","","","2018-11-08 09:56:13",""
"29835621","Hash and Salt string in Windows Store App","I have been trying to do a Hash and salt on a password that I have to save on the device. This is a code that I have been using, but I can't find System.Security.Cryptography and the RNGCryptoServiceProvider in the Windows Store Framework.
public static string CreateSalt(int size)
{
    var rng = new RNGCryptoServiceProvider();
    var buff = new byte[size];
    rng.GetBytes(buff);
    return Convert.ToBase64String(buff);
}

public static string GenerateSHA256Hash(string input, string salt)
{
    byte[] bytes = System.Text.Encoding.UTF8.GetBytes(input + salt);
    SHA1Managed sha = new SHA1Managed();
    byte[] hash = sha.ComputeHash(bytes);

    return Convert.ToBase64String(hash);
}

Does anyone have an advise on how to do this on a Windows Store App?
Thanks
","There is an alternative to using RNGCryptoServiceProvider
var buffer = CryptographicBuffer.GenerateRandom(saltlength);
var string = CryptographicBuffer.EncodeToBase64String(buffer)

Windows.Security.Cryptography is the alternative to System.Security.Cryptography for windows store apps.
","151","<c#><hash><windows-store-apps><salt><sha>","2","0","1","2015-04-23 22:52:54","29835736","2","","209259","","2015-04-23 22:52:54","2015-04-23 22:40:26",""
"56405195","""Signature not valid"" when getting API data (VBA-Excel)","I have an issue when I try to retrieve some data in excel through VBA code.
I used the following as basis: https://github.com/BitMEX/api-connectors/tree/master/official-http/vba
and it works, I was able to update it according to my need and place an order (testnet) 
I now try to retrieve the book but I always get ""Signature not valid"" as response.
Can you please help understand what's I am doing wrong?
The data I want to receive is the following:
https://testnet.bitmex.com/api/explorer/#!/OrderBook/OrderBook_getL2
As Hash function, I use the HexHash function available in the link provided above (and it works for the 'Post' instruction but can't make it works for the ""GET"" instruction.
Thanks in advance
Bellow a working code (POST function):
Sub placeorder()
Dim Json, httpObject As Object
Dim nonce As Double
Dim verb, apiKey, apiSecret, signature, symbol, price, qty, url, postdata, replytext, nonceStr As String

' Set monotonically (w time) increasing nonce
nonce = DateDiff(""s"", ""1/1/1970"", Now)

' Set api key and secret
apiKey = ""aaa""
apiSecret = ""bbb""

' Build query
symbol = ""XBTUSD""
price = 8000
qty = 1

verb = ""POST""
url = ""/api/v1/order""
postdata = ""symbol="" & symbol & ""&price="" & price & ""&quantity="" & qty

' Stringize nonce
nonceStr = nonce

' Compute signature using hexhash script
signature = HexHash.HexHash(verb + url + nonceStr + postdata, apiSecret, ""SHA256"")

' Set up HTTP req with headers
Set httpObject = CreateObject(""MSXML2.XMLHTTP"")
httpObject.Open ""POST"", ""https://testnet.bitmex.com"" & url, False
httpObject.setRequestHeader ""Content-Type"", ""application/x-www-form-urlencoded""
httpObject.setRequestHeader ""api-nonce"", nonceStr
httpObject.setRequestHeader ""api-key"", apiKey
httpObject.setRequestHeader ""api-signature"", signature
httpObject.Send (postdata)

' Catch response
replytext = httpObject.ResponseText

end sub()

Bellow a NON-working code (GET function):
Sub getorderbook2()
Dim Json, httpObject As Object
Dim nonce As Double
Dim verb, apiKey, apiSecret, signature, symbol, url, getdata, replytext, 
depth As String
Dim nonceStr As String

' Set monotonically (w time) increasing nonce
nonce = DateDiff(""s"", ""1/1/1970"", Now)

' Set api key and secret
apiKey = ""aaa""
apiSecret = ""bbb""

' Build query
symbol = ""XBTUSD""
depth = 3

verb = ""GET""
url = ""/api/v1/orderBook/L2""
getdata = ""symbol="" & symbol & ""&depth="" & depth

' Stringize nonce
nonceStr = nonce

' Compute signature using hexhash script
signature = HexHash.HexHash(verb + url + nonceStr + getdata, apiSecret, ""SHA256"")

' Set up HTTP req with headers
Set httpObject = CreateObject(""MSXML2.XMLHTTP"")
httpObject.Open ""GET"", ""https://testnet.bitmex.com"" & url, False
httpObject.setRequestHeader ""Content-Type"", ""application/x-www-form-urlencoded""
httpObject.setRequestHeader ""api-nonce"", nonceStr
httpObject.setRequestHeader ""api-key"", apiKey
httpObject.setRequestHeader ""api-signature"", signature
httpObject.Send (getdata)

' Catch response
replytext = httpObject.ResponseText
end sub ()

In the second section, I always get an error message in return ""Signature not valid""
","Switching between GET and POST requires more than just changing the verb in the request. A GET request needs to have the data as part of the URL string so try:
url = url & ""?"" & getdata
getdata = """"
httpObject.Open ""GET"", ""https://testnet.bitmex.com"" & url, False

You also need to change this line from:
httpObject.Send (getdata)

to:
httpObject.Send

The way in which you construct the api-signature value is also different for GET requests to this API - see here for details. The changes I have suggested should lead to the correct signature being generated. If you need to URL encode data in VBA then this answer might help.
Other issues:

Dim a, b As String is equivalent to Dim a As Variant, b As String. To declare multiple String variables you need to write Dim a As String, b As String
CreateObject(""MSXML2.XMLHTTP"") accesses the older version 3.0 of MSXML2. To access the most recent version 6.0, you need CreateObject(""MSXML2.XMLHTTP.6.0"")

","151","<excel><vba><api><sha256><sha>","2","1","1","2019-06-02 01:48:09","56411679","5","","11586215","","2019-06-01 10:31:29","2019-06-01 08:50:10",""
"1993688","What algorithm should be used when doing filechecksums to find dupes?","Is taking a MD5 sum still suitable for checking for file dupes?  I know that it isn't secure, but does that really matter in the case of trying to find file dupes?
Should I be using something in the SHA family instead?
What is best practice in this use case?
","SHA1 is slightly better as a checksum than MD5. It is what Git uses.
","150","<language-agnostic><md5><checksum><duplicate-data><sha>","3","1","8","2010-01-03 06:17:20","","0","","90002","","2010-01-03 02:13:02","2010-01-03 02:06:40",""
"1993688","What algorithm should be used when doing filechecksums to find dupes?","Is taking a MD5 sum still suitable for checking for file dupes?  I know that it isn't secure, but does that really matter in the case of trying to find file dupes?
Should I be using something in the SHA family instead?
What is best practice in this use case?
","MD5 has known vulnerabilities at this point, but that may not be a problem for your application. It's still reasonably good for distinguishing piles of bits. If something comes up with no match, then you know you haven't already seen it, since the algorithm is deterministic. If something comes back as a match, you should actually compare it to the blob that it ostensibly matched before acting as if it's really a duplicate. MD5 is relatively fast, but if you can't afford full-text comparisons on hash collisions, you should probably use a stronger hash, like SHA-256.
","150","<language-agnostic><md5><checksum><duplicate-data><sha>","3","1","8","2010-01-03 06:17:20","","0","","90002","","2010-01-03 02:13:02","2010-01-03 02:06:40",""
"1993688","What algorithm should be used when doing filechecksums to find dupes?","Is taking a MD5 sum still suitable for checking for file dupes?  I know that it isn't secure, but does that really matter in the case of trying to find file dupes?
Should I be using something in the SHA family instead?
What is best practice in this use case?
","In this particular case, choice of algorithm probably isn't that significant. The key reasons for using SHA1 over MD5 all relate to creating cryptographically secure signatures.
MD5 should be perfectly acceptable for this task, as you probably don't need to worry about people maliciously crafting files to generate false duplicates.
","150","<language-agnostic><md5><checksum><duplicate-data><sha>","3","6","8","2010-01-03 06:17:20","","0","","90002","","2010-01-03 02:13:02","2010-01-03 02:06:40",""
"1993688","What algorithm should be used when doing filechecksums to find dupes?","Is taking a MD5 sum still suitable for checking for file dupes?  I know that it isn't secure, but does that really matter in the case of trying to find file dupes?
Should I be using something in the SHA family instead?
What is best practice in this use case?
","While MD5 does have a few collisions, I've always used it for files and it's worked just fine.
","150","<language-agnostic><md5><checksum><duplicate-data><sha>","3","0","8","2010-01-03 06:17:20","","0","","90002","","2010-01-03 02:13:02","2010-01-03 02:06:40",""
"1993688","What algorithm should be used when doing filechecksums to find dupes?","Is taking a MD5 sum still suitable for checking for file dupes?  I know that it isn't secure, but does that really matter in the case of trying to find file dupes?
Should I be using something in the SHA family instead?
What is best practice in this use case?
","For the describe purpose there is no real preferable solution, both hash-functions will solve the problem. Anyway, MD5 will usually be slightly faster than SHA1.
Example in python:
#!/usr/bin/env python

import hashlib, cProfile

def repeat(f, loops=10000000):
    def wrapper(): 
        for i in range(loops): f()
    return wrapper

@repeat
def test_md5():
    md5 = hashlib.md5(); md5.update(""hello""); md5.hexdigest()

@repeat 
def test_sha1():
    sha = hashlib.sha1(); sha.update(""hello""); sha.hexdigest()

cProfile.run('test_md5()')
cProfile.run('test_sha1()')

#
#         40000004 function calls in 59.841 CPU seconds
# 
# ....
#
#         40000004 function calls in 65.346 CPU seconds
# 
# ....

","150","<language-agnostic><md5><checksum><duplicate-data><sha>","3","1","8","2010-01-03 06:17:20","","0","","90002","","2010-01-03 02:13:02","2010-01-03 02:06:40",""
"1993688","What algorithm should be used when doing filechecksums to find dupes?","Is taking a MD5 sum still suitable for checking for file dupes?  I know that it isn't secure, but does that really matter in the case of trying to find file dupes?
Should I be using something in the SHA family instead?
What is best practice in this use case?
","What you are talking about is a checksum, which is related to (but not the same) as a cryptographic hash.  
Yes, both MD5 and even CRC work just fine as checksums, as long as you are not concerned with a malicious user intentionally crafting two different files with the same checksum.  If that is a concern, use SHA1 or, even better, some cryptographically unbroken hash.
","150","<language-agnostic><md5><checksum><duplicate-data><sha>","3","1","8","2010-01-03 06:17:20","","0","","90002","","2010-01-03 02:13:02","2010-01-03 02:06:40",""
"1993688","What algorithm should be used when doing filechecksums to find dupes?","Is taking a MD5 sum still suitable for checking for file dupes?  I know that it isn't secure, but does that really matter in the case of trying to find file dupes?
Should I be using something in the SHA family instead?
What is best practice in this use case?
","If you care about performances I think it would be better to check for matching file size first, then using a fast hash function (CRC32 or MD5 which should be faster than SHA1) and for possible duplicated files found this way trying with MD5, SHA1 or SHA256 (depending on the criticality of the task).
","150","<language-agnostic><md5><checksum><duplicate-data><sha>","3","2","8","2010-01-03 06:17:20","","0","","90002","","2010-01-03 02:13:02","2010-01-03 02:06:40",""
"1993688","What algorithm should be used when doing filechecksums to find dupes?","Is taking a MD5 sum still suitable for checking for file dupes?  I know that it isn't secure, but does that really matter in the case of trying to find file dupes?
Should I be using something in the SHA family instead?
What is best practice in this use case?
","We use MD5 at my work for exactly what you're considering.  Works great.  We only need to detect duplicates uploads on a per-customer basis, which reduces our exposure to the birthday problem, but md5 would still be sufficient for us if we had to detect duplicates across all uploads rather than per customer.  If you can believe the internet, the probability p of a collision given n samples and a hash size of b is bounded by:
p <= n (n - 1) / (2 * 2 ^ b)

A few years back I ran this calculation for n = 10^9 and b = 128 and came up with p <= 1.469E-21.  To put that in perspective, 10^9 files is one per second for 32 years.  So we don't compare files in the event of a collision.  If md5 says the uploads were the same, they're the same.
","150","<language-agnostic><md5><checksum><duplicate-data><sha>","3","0","8","2010-01-03 06:17:20","","0","","90002","","2010-01-03 02:13:02","2010-01-03 02:06:40",""
"28806664","Best algorithm to hash a string","I want to use algorithm to do hash to long string.
I need that to be unique, since I log changes, and don't want to keep the whole string (that may vary from 300 bytes to 1000 bytes).
I think of MD5 (maybe sha - I don't know), but does this algorithm ""promise"" that there won't be any repeating of algorithm (even one for astronomic chance - What is the chance?).
Is there any better algorithm especially for strings value (all the ascii values that are readable. mostly all the letters and all the number-digits, including '-' and '.')?
Thanks :)
","You can try Rabin-Karp Algorithm (RK)
Here is the tutorial from topcoder
You can learn a lot about hashing  from here
","150","<algorithm><md5><sha>","0","0","1","2015-03-02 09:57:59","28806890","2","1","","","","2015-03-02 09:46:36",""
"44360487","Native HMAC SHA512 support for Swift 3.1","I'm trying to implement HMAC SHA512 encryption to a data string before sending it to the server, as it's their requirement.
I have found many possible solutions for that online, however all of them require including some module or framework. 
Isn't HMAC and SHA512 not supported by swift 3.1 natively? 
Sorry if it's a stupid question, I'm relatively new to swift. 
If it's available, how can I simply encrypt some data using hmac sha512? 
Thanks.
","CommonCrypto is the native way to do encryption on Apple devices. You do not need any module or framework, you just add a bridging header and import CommonCrypto:
#import <CommonCrypto/CommonCrypto.h>

You then can compute your HMAC with a simple extension (Swift 4):
extension String {

    func hmac(key: String) -> String {
        var digest = [UInt8](repeating: 0, count: Int(CC_SHA256_DIGEST_LENGTH))
        CCHmac(CCHmacAlgorithm(kCCHmacAlgSHA256), key, key.count, self, self.count, &digest)
        let data = Data(bytes: digest)
        return data.map { String(format: ""%02hhx"", $0) }.joined()
    }

}

Example:
let result = ""test"".hmac(key: ""test"")

Result:
88cd2108b5347d973cf39cdf9053d7dd42704876d8c9a9bd8e2d168259d3ddf7

If you use Swift on a non-Apple device you indeed need to use an external framework to do encryption.
","149","<swift><sha><hmac>","1","1","1","2018-01-27 19:18:50","","0","","","","","2017-06-05 01:23:04",""
"23401965","Is there an especially unlikely SHA1 hash?","I've got a Map<SHA1, BinaryBlob>.  Very similar to Git.
I'd like to put a small, finite number of ""special"" entries into this map.  I'd like to be able to change the values of the binary blobs, but still refer to them by the same key.
The right way to do this is to use a Map<Either<SHA1, SpecialKey>, BinaryBlob>.
The hack way to do this (which is the way I'm actually doing this) is to define:
SHA1 specialKeyA = 0x00000 ... 00
SHA1 specialKeyB = 0x00000 ... 01

I understand that SHA1 produces values which are evenly distributed.  But I wonder if maybe there's an asterisk, and if there are a couple corner-case hashes (such as 0x00.. or maybe 0xFF...) which are guaranteed not to happen.
I feel pretty safe with my current design, but I was just curious :)
EDIT: I'm already counting on hash uniqueness, so I feel very safe with the design.  The question is for curiosity's sake: are there a handful of values which SHA1 happens to be incapable of generating.  Census in the comments so far seems to be no...
","To the best of my knowledge SHA1 does not have a known pre-image of 00…00 (and neither 00…01,00…02, or other ""special"" values). Even though it would not violate any of the formal definitions of a secure hash the IVs are designed to avoid such human recognizable patterns.
Still I would probably advise against the use of these values, because others might, too, have come up with the idea to use these special values, see this question about a git commit with all zeros for example. If it is all the same to you I would generate a random 80bit value, for example 83a…c3, and append your counter to it, for example 83a…c300…01, 83a…c300…02,etc.
","149","<git><sha1><sha>","0","1","1","2014-05-01 07:42:10","23403920","12","","1153071","","2014-05-01 04:44:59","2014-05-01 04:23:23",""
"17213837","Javascript cryptographic-hash-protected loader","We all know that there are security implications from loading javascript from public CDN networks.  On the other hand, there are benefits in being able to cache these resources.
So obviously there must be a javascript solution to this where an implementation of for example SHA-256 is used to check the integrity of jquery after loading it from a CDN, but before evaluating the javascript.
What are the best options for doing this?
","If the CDN server is sending CORS headers, you can retrieve the file with XHR and verify the contents before evaluating it. Note that this is a big change from how the script element is usually executed synchronously:
<script src=""//google.com/jquery""></script>
<script>//jQuery is available</script>

The above will no longer be possible so if you have already written lots of code under the traditional sequential synchronous assumptions it might not be feasible

If the CDN server is not sending CORS headers it is not possible to look at the contents. And I suppose any workarounds for this would defeat the purpose.
","148","<javascript><cdn><sha>","0","0","2","2016-06-01 12:56:22","37569354","2","","","","","2013-06-20 12:38:04",""
"17213837","Javascript cryptographic-hash-protected loader","We all know that there are security implications from loading javascript from public CDN networks.  On the other hand, there are benefits in being able to cache these resources.
So obviously there must be a javascript solution to this where an implementation of for example SHA-256 is used to check the integrity of jquery after loading it from a CDN, but before evaluating the javascript.
What are the best options for doing this?
","Subresource Integrity is a W3C draft specification that does exactly this:
<script src=""https://ajax.googleapis.com/ajax/libs/jquery/2.2.4/jquery.min.js""
        integrity=""sha384-rY/jv8mMhqDabXSo+UCggqKtdmBfd3qC2/KvyTDNQ6PcUJXaxK1tMepoQda4g5vB""
        crossorigin=""anonymous"">
</script>

","148","<javascript><cdn><sha>","0","0","2","2016-06-01 12:56:22","37569354","2","","","","","2013-06-20 12:38:04",""
"37527029","srihash.org not working for .js file from cesiumjs.org","I have generated the following code using srihash.org for URL https://cesiumjs.org/releases/1.21/Build/Cesium/Cesium.js:
<script src=""https://cesiumjs.org/releases/1.21/Build/Cesium/Cesium.js""
integrity=""sha384-CAN0Iz/H09oATWPeJZclEOAM/nF1cq3DSuAbxi9IMbZIx8m3ERInrpuk11n+lHRq""
crossorigin=""anonymous""></script>

When trying to load the page that contains the integrity-checked script, I get the following error in Chrome 50 on Windows:

Failed to find a valid digest in the 'integrity' attribute for
  resource 'https://cesiumjs.org/releases/1.21/Build/Cesium/Cesium.js'
  with computed SHA-256 integrity
  'vGCl/67DuYY5UzwNQGGpYh2gztA4PhvD+I4pcX7TWcU='. The resource has been
  blocked.

I also tried to generate the hash manually (again, on Windows, openssl-1.0.2h), using:
openssl dgst -sha384 -binary Cesium.js | openssl base64 -A

resulting in:
X5EHALkqk8r9hyCKwav7y+6BOUg2dRH90/qSxdytan2SQQB9g8jsYYWLDKzNeKx4

This hash works when loading Cesium.js with Chrome. However, this raises the question which of the two hashes is correct... Leaving out the unlikely possibility of a MITM-attack, I assume it has something to do with line endings or encoding. Cesium.js seems to have Windows line endings, and the HTTP response of loading it in Chrome is attached below.
How can the difference between the two hashes be explained, and which one is correct?

HTTP response headers for Cesium.js:
HTTP/1.1 200 OK
Cache-Control: max-age=172800
Content-Length: 494091
Content-Type: application/javascript
Content-Encoding: gzip
Last-Modified: Mon, 02 May 2016 15:12:32 GMT
Accept-Ranges: bytes
Server: Microsoft-IIS/8.5
x-amz-id-2: giU2DeYQi87OAkuyr2qKeZx8KRihIY7TV9qcJShi/YVl+C5K50mHeSLFWYhA8k5Oc+A50Oxjh/4=
x-amz-request-id: 112881D9D52248F6
X-Powered-By: ARR/3.0
X-UA-Compatible: IE=edge
Access-Control-Allow-Origin: *
Access-Control-Allow-Headers: Content-Type,X-Requested-With
Date: Mon, 30 May 2016 12:49:46 GMT

","As you suspected, this is apparently a chrome bug related to encoding. Other people report the issue for other scripts. 
Check out this bug page on inconsistencies between chrome and openssl. 
As a temporary workaround, I'd add

vGCl/67DuYY5UzwNQGGpYh2gztA4PhvD+I4pcX7TWcU=

to your trusted SHA256 integrity attributes (after having verified the downloaded script is actually the right one).
Chrome is probably computing this hash before the unzip, of with a special encoding.  
","148","<javascript><google-chrome><sha><subresource-integrity>","2","0","2","2016-06-08 10:53:28","37700476","0","","1805388","","2016-06-08 10:53:28","2016-05-30 13:34:18",""
"37527029","srihash.org not working for .js file from cesiumjs.org","I have generated the following code using srihash.org for URL https://cesiumjs.org/releases/1.21/Build/Cesium/Cesium.js:
<script src=""https://cesiumjs.org/releases/1.21/Build/Cesium/Cesium.js""
integrity=""sha384-CAN0Iz/H09oATWPeJZclEOAM/nF1cq3DSuAbxi9IMbZIx8m3ERInrpuk11n+lHRq""
crossorigin=""anonymous""></script>

When trying to load the page that contains the integrity-checked script, I get the following error in Chrome 50 on Windows:

Failed to find a valid digest in the 'integrity' attribute for
  resource 'https://cesiumjs.org/releases/1.21/Build/Cesium/Cesium.js'
  with computed SHA-256 integrity
  'vGCl/67DuYY5UzwNQGGpYh2gztA4PhvD+I4pcX7TWcU='. The resource has been
  blocked.

I also tried to generate the hash manually (again, on Windows, openssl-1.0.2h), using:
openssl dgst -sha384 -binary Cesium.js | openssl base64 -A

resulting in:
X5EHALkqk8r9hyCKwav7y+6BOUg2dRH90/qSxdytan2SQQB9g8jsYYWLDKzNeKx4

This hash works when loading Cesium.js with Chrome. However, this raises the question which of the two hashes is correct... Leaving out the unlikely possibility of a MITM-attack, I assume it has something to do with line endings or encoding. Cesium.js seems to have Windows line endings, and the HTTP response of loading it in Chrome is attached below.
How can the difference between the two hashes be explained, and which one is correct?

HTTP response headers for Cesium.js:
HTTP/1.1 200 OK
Cache-Control: max-age=172800
Content-Length: 494091
Content-Type: application/javascript
Content-Encoding: gzip
Last-Modified: Mon, 02 May 2016 15:12:32 GMT
Accept-Ranges: bytes
Server: Microsoft-IIS/8.5
x-amz-id-2: giU2DeYQi87OAkuyr2qKeZx8KRihIY7TV9qcJShi/YVl+C5K50mHeSLFWYhA8k5Oc+A50Oxjh/4=
x-amz-request-id: 112881D9D52248F6
X-Powered-By: ARR/3.0
X-UA-Compatible: IE=edge
Access-Control-Allow-Origin: *
Access-Control-Allow-Headers: Content-Type,X-Requested-With
Date: Mon, 30 May 2016 12:49:46 GMT

","After some digging, I found out that the hash generated by srihash.org is incorrect.
The incorrect result is due to the combination of two factors:

Cesium.js from cesiumjs.org is always served with Content-Encoding: gzip, even if the request does not contain Accept-Encoding: gzip.
srihash.org (see source) uses xhr2 to fetch resources, which does not support gzip encoding.

","148","<javascript><google-chrome><sha><subresource-integrity>","2","1","2","2016-06-08 10:53:28","37700476","0","","1805388","","2016-06-08 10:53:28","2016-05-30 13:34:18",""
"21192964","Using SHA to encrypt password input on a form","I know you like to see code, so here it is. All I want to do is to encrypt the password using SHA as it is entered. I have managed to encrypt the mysql database field to match it already.
I can't seem to find the correct syntax so I get a row of blobs instead of the password in clear text, which means it is not being sent to the server encrypted.
Thanks

<body>
<div id=""container"">

<div id=""logo""><img src=""images/Logo.jpg"" alt=""mycena""  />

<div id=""banner"">
    <h1>Shropshire Fungus Group</h1>
    <p>&nbsp;</p>
</div>
</div>
<div id=""ruler"">
<hr />
</div>
</div>
<div class=""menu""><ul class=""nav"" >
  <li><a href=""#"">Home</a></li>
  <li><a href=""#"">Membership</a></li>
  <li><a href=""#"">Resources</a></li>
  <li><a href=""#"">Gallery</a></li>
  <li><a href=""#"">Newsletters</a></li>
  <li><a href=""#"">Fixture List</a></li>
  <li><a href=""#"">Useful Links</a></li>
</ul>
</div>
<div id=""intro"">
<h2>Please complete your details to log in</h2>
<table>
<tr>
  <td> Username: </td>
  <td><input type=""text"" name=""user"" id=""user"" size=""35"" maxlength=""50""/></td>
</tr>
<!-- password should be 8 characters or more in length -->
<tr>
  <td> Password: </td>
  <td><input type=""text"" name=""upword"" id=""upword"" size=""40"" maxlength=""40""/></td>
</tr>
</table>
<p>&nbsp;</p>
<form  action=""loginphp170114.php"" method=""post"" id=""demo"">
<input type=""submit"" value=""Submit form"" />
</form>

","You'll need to use an external library such as this one, or else implement the sha1 algorithm yourself.
Note that sha1 is hashing, not encryption, and it's not a hash algorithm designed for storing passwords, so it's easily broken.
","148","<sha>","1","0","1","2014-01-17 18:17:39","","0","","","","","2014-01-17 18:14:17",""
"56017754","OpenSSL always fails verifying signature generated from Bouncy Castle in Java","I'am trying to generate signatures from files, in order to verify them by clients using OpenSSL, so to implement the corresponding openSSL command in Java using Bouncy Castle : 
openssl.exe dgst -sha256 -sign privateKey.pem -out \data.txt.sig \data.txt

using bouncy castle 1.57 and java, we get bytes array signature from file, which i could verify it in the code. Private, public and certificate are generated from openSSL. 
so to generate certificates : 
read the private key from the pem private key file:
PEMParser pemParser = new PEMParser(new FileReader(PRIVATE_FILE_PATH));
                    PKCS8EncryptedPrivateKeyInfo encryptedPrivateKeyInfo = (PKCS8EncryptedPrivateKeyInfo) pemParser.readObject();
JceOpenSSLPKCS8DecryptorProviderBuilder jce = new JceOpenSSLPKCS8DecryptorProviderBuilder();
jce.setProvider(""BC"");
InputDecryptorProvider decProv = jce.build(password.toCharArray());
PrivateKeyInfo info = encryptedPrivateKeyInfo.decryptPrivateKeyInfo(decProv);
JcaPEMKeyConverter pemKeyConverter = new JcaPEMKeyConverter();
PrivateKey pk = pemKeyConverter.getPrivateKey(info);

and generate the RSA SHA 256 signature and write the result in the signature file:
byte[] data = Files.readAllBytes(Paths.get(txtFileToSignPath));
Signature sig = Signature.getInstance(""SHA256withRSA"");
sig.initSign(pk);
sig.update(data);
byte[] signature = sig.sign();
FileOutputStream dfis = new FileOutputStream(SignaturefilePath);
dfis.write(bytesToWrite);
dfis.close();

programmatically i could verify signatures generated  from the code above as well as from open SSL: 
Signature verifySignature = Signature.getInstance(""SHA256withRSA""); 
byte[] signatureBytes =  
Files.readAllBytes(Paths.get(SignaturefilePath);
verifySignature.initVerify(getPublicKeyFromCertFile(CERT_PEM));
verifySignature.update(data);
verifySignature.verify(signatureBytes);

on the other hand openSSL is getting always ""verification failure"" by verifiying signatures generated from code. 
is OpenSSL able to verify array of bytes signatures directly, or am I missing anything ?
","code above works fine, was verifying the signature against another file. Question maitained for learning purpose. 
","146","<java><openssl><rsa><bouncycastle><sha>","0","0","1","2019-05-07 14:51:30","56025295","5","","","","","2019-05-07 07:40:38",""
"51928193","How to resolve an error uploaded apk is not signed with the upload certificate","
[![Blockquote][1]][1]


When I am uploading my apk to google play it shows an error [sha1 is not matching]
I have uploaded my app with different package names  twice into google play it was successfully uploaded to google play. But when  I update  my app and I changed the package name at third time it shows an error 

uploaded apk is not signed with the upload certificate

I am not aware  how to resolve these issue . Please help me out . I need to place my app in play store 
","Yes you cannot upload the next  release of app with different package name.so you need to put the same package name but version code  will be  different.
","145","<android><android-studio><sha><code-signing-certificate>","0","0","1","2018-08-20 10:11:29","","7","1","8889910","","2018-08-20 10:11:29","2018-08-20 09:55:03",""
"37148248","Dancer2 Auth::Extensible Not Accepting Hashed Password","I've generated a SHA-1 hash using Dancer2::Plugin::Passphrase with the following code:
get '/generate' => {
    my $phrase = passphrase('my_password')->generate({ algorithm => 'SHA-1'});
    return $phrase->rfc2307();
};

The result looks something like this:
{SSHA}+2Dro1/ntPchT93mgvYMKGjdzy+XKXK1agsG3//hKuLNrQAK

and that's what I store in my PostgreSQL database. 
I'm using Dancer2::Plugin::Auth::Extensible as my login solution, but I've yet to get it to work with encrypted passwords. I put a test account into my database where username='test' and password='test', and that works fine. But username='test2' and password='{SSHA}+2Dro1/ntPchT93mgvYMKGjdzy+XKXK1agsG3//hKuLNrQAK' doesn't work. The login page just silently fails and reloads. 
I turned on DBI_TRACE and don't seen much difference between the two except that the account with the plain text password returns this:
[glm::App:3515] debug @2016-05-10 21:02:23> users accepted user test in /usr/local/share/perl/5.20.2/Dancer2/Core/Route.pm l. 137

and the account with the encrypted password returns this:
[glm::App:3523] core @2016-05-10 21:04:21> looking for get /login in /usr/local/share/perl/5.20.2/Dancer2/Core/App.pm l. 1210
[glm::App:3523] core @2016-05-10 21:04:21> Entering hook core.app.before_request in (eval 62) l. 1
[glm::App:3523] core @2016-05-10 21:04:21> Entering hook core.app.after_request in (eval 62) l. 1
127.0.0.1 - - [10/May/2016:21:04:21 +0100] ""POST /login?return_url=%2F     HTTP/1.1"" 401 383 ""http://localhost:5000/login?return_url=%2F"" ""Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:41.0) Gecko/20100101 Firefox/41.0""

I'm sure I'm missing something, but the CPAN page doesn't detail how to handle encrypted passwords. It just says it will be easy. I guess I'm reading that as ""encrypted passwords will be handled automagically."" What am I missing?
Config
This is the relevant portion of my config
plugins: 
 Auth::Extensible:
   realms:
      users:
       provider: 'Database'
 Database:
  dsn: 'dbi:Pg:service=test'

App.pm
Below is what I'm doing in the App.pm. You can see that I'm just trying to require a login for the home page. Maybe I need some '/login' code?
package glm::App;

use Dancer2;
use Dancer2::Plugin::Database;
use Dancer2::Plugin::Auth::Extensible;
use Dancer2::Plugin::Passphrase;

use Template;

our $VERSION = '0.1';

get '/' => require_login sub {
    my $sth = database->prepare('SELECT name FROM product', { RaiseError => 1 });
    $sth->execute();

    template 'create_list', {
        'products' => $sth->fetchall_hashref('name'),
    };
};

get '/generate'=> sub {
    my $phrase = passphrase('my_password')->generate({ algorithm => 'SHA-1' });
    return $phrase->rfc2307(); # right now I just manually copy and paste this into the database
};

My database follows the suggested schema for users, passwords, and roles.
Maybe the only other relevant bit of information I can think of is that if I use an encryption scheme not recognized by Digest, I get an error from Digest.pm. That would seem to indicate that it's recognizing the hashed password and trying to decrypt it, but for whatever reason it's just not working. Or it's working and redirecting back to the home page... But why doesn't it do that with 'test,test'?
","TL;DR You're using two different methods for hashing, so the generated hashes are incompatible.
Dancer2::Plugin::Auth::Extensible::Provider::Database uses Crypt::SaltedHash:
sub encrypt_password {
    my ($self, $password, $algorithm) = @_;
    $algorithm ||= 'SHA-1';
    my $crypt = Crypt::SaltedHash->new(algorithm => $algorithm);
    $crypt->add($password);
    $crypt->generate;
}

This generates a hash like:
{SSHA}qTEaPf8KRPt6XBQXIlQhlWstgBz64coW

Compare that to what you got from Dancer2::Plugin::Passphrase:
{SSHA}+2Dro1/ntPchT93mgvYMKGjdzy+XKXK1agsG3//hKuLNrQAK

Notice that the lengths are different. Dancer2::Plugin::Passphrase uses a 16-byte salt by default, while Crypt::SaltedHash uses a 4-byte salt.

Although you could tell Dancer2::Plugin::Passphrase to use a 4-byte salt, it's much easier to just use Crypt::SaltedHash everywhere. The Dancer2::Plugin::Auth::Extensible documentation explains how to do this:

A simple script called generate-crypted-password to generate RFC2307-style hashed passwords is included, or you can use Crypt::SaltedHash yourself to do so, or use the slappasswd utility if you have it installed.

For example:
$ generate-crypted-password 
Enter plain-text password ?> foo
Result: {SSHA}zdXPS0QqxyKlzXwHxjJ3rsU19Td4ABzW

","145","<postgresql><perl><authentication><sha><dancer>","1","1","1","2016-05-21 00:43:58","37308056","2","","176646","","2016-05-21 00:43:58","2016-05-10 20:22:43",""
"35966850","sha256 implementation in javascript","I'm currently trying to implement sha256 from a scratch.
I'm implementing ch() function whose definition is
     ch(x,y,z) = (x&y) ^ (~x&z)
(&:indicate and gate, ^:indicate xor gate, ~:is negate)
I implemented like this:
function ch(x,y,z){
 (x&y) ^ (~x&z)
}

but after I implemented it, when I saw some other implementation such ashttp://point-at-infinity.org/jssha256/, the implementation is like this (below)
function SHA256_Ch(x, y, z) {
  return z ^ (x & (y ^ z));
}

what is this conversion?
can I obtain the same result from wikipedia's?
Could you tell me the path ?
---------------------------------------------------------
Thank you for answeing!

ch() stands for choose: x chooses y or z. When x is 0, z is chosen,
  and when x is 1, y is chosen

This is a critical sentence for me.
I wanted to know how the desiner find second form ch function.
but I guess, if I obtain the view of your advise then, that is obvious.
if a designer of sha256 want to use ch function like it, that makes sense.when x is zero, y is 0, and z is left, because x and z is connected with xor gate,and x and y is connected with and gate.when x is one, y is y and z is nothing, because there are two z connected with xor gate;
I should start my guess from the perspective of the one who structured SHA256 algorythm.
Thanks for teaching!!
kouji
","If you write out the truth table for x, y, z and the 2 expressions, you will see that they are identical.
In both cases (I've left out the intermediate results for brevity):
x  y  z  (x&y)^(~x&z)  z^(x&(y^z))
0  0  0  0             0
0  0  1  1             1
0  1  0  0             0  
0  1  1  1             1  
1  0  0  0             0  
1  0  1  0             0  
1  1  0  1             1  
1  1  1  1             1

ch() stands for choose:  x chooses y or z. When x is 0, z is chosen, and when x is 1, y is chosen
The second form uses 1 less bitwise operation; but I'd guess that any speed improvement would be implementation specific.
","144","<javascript><sha>","4","3","1","2016-03-15 14:37:40","35967459","3","","6055968","","2016-03-15 14:37:40","2016-03-13 05:26:37",""
"16725059","Drupal password hash not matching existing hash","When logging into a Drupal instance (Drupal 7.22) I've set up, I keep getting a invalid username/password error. I've tried changing passwords and other users to no avail.
What's especially odd is that I'm able to log in to the same Drupal instance when it's running on other servers (it connects to a remote database). The two computers I've been able to log in successfully have both been Linux machines, vs. the one that doesn't work (OS X running MAMP). The code base is also the same.
I did some debugging and found that the hash that's created on login to verify isn't the same as the one stored in the database. I got down to the _password_itoa64 method in password.inc, and gave up trying to debug the individual character matches.
Has anyone encountered anything similar, or have any idea why the hashes would be different?
","Reason is in different PHP versions. Older versions (5.2 or 5.3 AFAIK) had week hash algorithm in ""crypt"" module, later it was updated. 
","143","<php><drupal><encryption><hash><sha>","0","0","1","2015-08-15 11:41:13","","3","","1253333","","2013-05-24 14:10:00","2013-05-23 22:40:46",""
"22367209","PHP convert SHA to an int for random number generation","I'm trying to create fair random numbers in PHP, and I knew how to do it in other languages but I cannot work out how for the life of me in PHP.
I need to take the first 4 bytes/characters of it and turn it into an integer.
Please may someone help me out?
","","143","<php><string><parsing><random><sha>","1","","0","2014-03-13 01:12:37","","6","","","","","2014-03-13 01:12:37",""
"55856773","Python SHA256 hash computation","I'm writing a SHA256 implementation in Python, padding, parsing and message schedule seem to work fine, my problem lies in the hash computation. Currently I'm just trying to calculate the working variable 'a'.
This is the value I get (In hex)

5d6aebe0

Expected Output, according to this:

5D6AEBCD

Here is my code:
Set the working variables to the constants specified in FIPS-180
a = int('6a09e667', 16)
b = int('bb67ae85', 16)
c = int('3c6ef372', 16)
d = int('a54ff53a', 16)
e = int('510e527f', 16)
f = int('9b05688c', 16)
g = int('1f83d9ab', 16)
h = int('5be0cd19', 16)

Set the two important variables that depend on value t:
W = int('61626380', 16)
K = int('428a2f98', 16)

From the pseudo code on wikipedia:
S1 = hash.ROTR(e, 6) ^ hash.ROTR(e, 11) ^ hash.ROTR(e, 25)
ch = (e & f) ^ ((~e) & g)#((e1) & g)
temp1 = (h + S1 + ch + K + W) % math.pow(2, 32)
S0 = hash.ROTR(a, 2) ^ hash.ROTR(a, 13) ^ hash.ROTR(a, 22)
maj = (a & b) ^ (a & c) ^ (b & c)
temp2 = (S0 + maj) % math.pow(2, 32)
a = int((temp1 + temp2) % math.pow(2, 32))

ROTR function:
@staticmethod
def ROTR(x, n, w=32):
    return (x >> n) | (x << w - n)

Or, split into functions, like specified in FIPS-180 (Prodcuces the same output)
T1 = int((h + hash.SIGMA1(e) + hash.Ch(e, f, g) + hash.K[t] + W) % math.pow(2, 32))
T2 = int((hash.SIGMA0(a) + hash.Maj(a, b, c)) % math.pow(2, 32))
a = int((T1 + T2) % math.pow(2, 32))

Hash class:
@staticmethod
def ROTR(x, n, w=32):
    return (x >> n) | (x << w - n)
def SIGMA0(x):
    return hash.ROTR(x, 2) ^ hash.ROTR(x, 13) ^ hash.ROTR(x, 22)
def SIGMA1(x):
    return hash.ROTR(x, 6) ^ hash.ROTR(x, 11) ^ hash.ROTR(x, 25)
def Ch(x, y, z):
    return (x & y) ^ (~x & z)
def Maj(x, y, z):
    return (x & y) ^ (x & z) ^ (y & z)

I'm using Python 3 btw. Thanks in advance.
","You need to add a lot more masking here to cut down overflowing bits. For example, your ROTR:
def ROTR(x, n, w=32):
    return (x >> n) | (x << w - n)

leaves all the high bits of x intact above the w boundary; you'd want to construct a mask from w and mask off the high bits, e.g.:
def ROTR(x, n, w=32):
    return ((x >> n) | (x << w - n)) & ((1 << w) - 1)

Similar masks are needed anytime you might have overflowed the assumed ""register width"". They can also replace the error-prone use of % math.pow(2, 32) you've got going on, changing:
int((temp1 + temp2) % math.pow(2, 32))

to:
(temp1 + temp2) & ((1 << 32) - 1)

or equivalently:
(temp1 + temp2) % 2 ** 32

This also needs to happen for bitwise negation where the overflow isn't as obvious: Python's ints are infinite precision, and bitwise negation of a non-negative value makes a negative value, effectively adding infinite 1 bits on the left (in the pseudo-two's complement behavior the language specifies). So ~x must become ~x & ((1 << 32) - 1) or the like to force it back to a positive value containing only the low 32 bits.
This has to be done globally (so temp1 and temp2 are actually int, not float values when you compute with them). In general, math.pow is completely useless; you either want to use the ** operator (which doesn't coerce to float and executes more efficiently) or the built-in pow function (which is only needed for its three argument for doing efficient modular exponentiation).
","140","<python><python-3.x><hash><sha256><sha>","1","3","1","2019-04-25 20:13:16","55856886","3","","573034","","2019-04-25 19:59:30","2019-04-25 19:56:49",""
"19973287","TLS with SHA-2 support","How do I find out if a particular client supports SHA-2 or not?
Is this something that can be found out on the basis of CipherSuites present in the ClientHello?
Also,when Server sends Certificate, as part of TLS handshake, is it allowed to send SHA-2 certificate even though any of the algorithms associated with SHA-2 are not mentioned in ClientHello?
","","140","<ssl><sha>","2","","0","2014-09-29 11:51:56","","1","","207421","","2013-11-14 09:55:48","2013-11-14 08:55:07",""
"14044783","private key protection for Online signatures","Let's say we have a group of id/signature pairs like:
https://picasaweb.google.com/${ID1}?authkey=${SIGNATURE1}
https://picasaweb.google.com/${ID2}?authkey=${SIGNATURE2}
https://picasaweb.google.com/${ID3}?authkey=${SIGNATURE3}
https://picasaweb.google.com/${ID4}?authkey=${SIGNATURE4}
....

It is one way picasa shares the links, so they are all persistent.
If we can collect thousands or millions of those id/signature pairs, does it make the private key vulnerable? That we can generate signature for any new ID?
( Assuming the encryption method is sha1 or sha256. What if there is a salt or not?)
( picasa is just an example, please don't target at picasa. It is a general question as we saw many sites are using this method. )
( Let's say the signature is generated by this method: HMAC SHA1 Signature in Java )
","So what the question really boils down to is whether or not a signed hash actually ""leaks"" any information about the key that was used to sign the hash.  Assuming a strong key and a good hash function, no information about the key should be leaked by an HMAC, even if the plaintext is known.
Here's a link to a similar question on the cryptography stackexchange with a good answer:
https://crypto.stackexchange.com/questions/2538/is-my-hmac-secure-if-i-have-a-complete-series-of-hmacd-prefix-strings
","139","<digital-signature><sha1><sha><private-key><sha256>","0","0","1","2012-12-26 19:13:05","","4","","-1","","2017-05-23 12:09:49","2012-12-26 18:44:38",""
"35762788","Hex conversion invalid escape sequence (Python)","This is my code:
from Crypto.Hash import SHA
<Receive a variable from the user, 'var'>
hashed_var = SHA.new(var).digest()
fp = open(""file.txt"", 'a')
for i in range(0, len(hashed_var)):
    fp.write(hex(ord(hashed_var[i]))

This essentially writes the hex representation of the hashed variable in the file. Problem is, when I view the contents of the file, there are some hex characters like \xd, \x2, etc. This throws an error when I put it in a string, I get the error message invalid \x escape. How do I fix my code so that all the hex characters come in form \xhh?
","You can use string formatting instead of hex function:
...
fp.write(""\\x{0:02x}"".format(ord(hashed_var[i])))

","139","<python><hex><sha><digest>","1","1","1","2016-03-03 03:50:26","35762844","0","","","","","2016-03-03 03:44:14",""
"45679987","SHA256 doesn't yield same result","I'm following on this tutorial and in part 2 (picture below) it shows that the SHA256 yields a result different than what I get when I ran my python code:
the string is: 0450863AD64A87AE8A2FE83C1AF1A8403CB53F53E486D8511DAD8A04887E5B23522CD470243453A299FA9E77237716103ABC11A1DF38855ED6F2EE187E9C582BA6
While the tutorial SHA256 comes to: 600FFE422B4E00731A59557A5CCA46CC183944191006324A447BDB2D98D4B408
My short python shows: 
sha_result = sha256(bitconin_addresss).hexdigest().upper()
print sha_result

32511E82D56DCEA68EB774094E25BAB0F8BDD9BC1ECA1CEEDA38C7A43ACEDDCE

in fact, any online sha256 shows the same python result; so am I missing here something?

","You're hashing the string when you're supposed to be hashing the bytes represented by that string.
>>> hashlib.sha256('0450863AD64A87AE8A2FE83C1AF1A8403CB53F53E486D8511DAD8A04887E5B23522CD470243453A299FA9E77237716103ABC11A1DF38855ED6F2EE187E9C582BA6'.decode('hex')).hexdigest().upper()
'600FFE422B4E00731A59557A5CCA46CC183944191006324A447BDB2D98D4B408'

","138","<python><bitcoin><sha256><sha>","1","4","2","2017-09-11 14:54:09","45680054","0","0","","","","2017-08-14 17:39:09",""
"45679987","SHA256 doesn't yield same result","I'm following on this tutorial and in part 2 (picture below) it shows that the SHA256 yields a result different than what I get when I ran my python code:
the string is: 0450863AD64A87AE8A2FE83C1AF1A8403CB53F53E486D8511DAD8A04887E5B23522CD470243453A299FA9E77237716103ABC11A1DF38855ED6F2EE187E9C582BA6
While the tutorial SHA256 comes to: 600FFE422B4E00731A59557A5CCA46CC183944191006324A447BDB2D98D4B408
My short python shows: 
sha_result = sha256(bitconin_addresss).hexdigest().upper()
print sha_result

32511E82D56DCEA68EB774094E25BAB0F8BDD9BC1ECA1CEEDA38C7A43ACEDDCE

in fact, any online sha256 shows the same python result; so am I missing here something?

","You could use Gavin's ""base58.py"", which I believe he no longer shares it on his github page. However you probably could easily google and find different versions of it from github.
Here is one version edited a little by me:
#!/usr/bin/env python

""""""encode/decode base58 in the same way that Bitcoin does""""""

import math
import sys

__b58chars = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'
__b58base = len(__b58chars)

def b58encode(v):
  """""" encode v, which is a string of bytes, to base58.
  """"""

  long_value = 0L
  for (i, c) in enumerate(v[::-1]):
    long_value += ord(c) << (8*i) # 2x speedup vs. exponentiation

  result = ''
  while long_value >= __b58base:
    div, mod = divmod(long_value, __b58base)
    result = __b58chars[mod] + result
    long_value = div
  result = __b58chars[long_value] + result

  # Bitcoin does a little leading-zero-compression:
  # leading 0-bytes in the input become leading-1s
  nPad = 0
  for c in v:
    if c == '\0': nPad += 1
    else: break

  return (__b58chars[0]*nPad) + result

def b58decode(v):
  """""" decode v into a string of len bytes
  """"""
  long_value = 0L
  for (i, c) in enumerate(v[::-1]):
    long_value += __b58chars.find(c) * (__b58base**i)

  result = ''
  while long_value >= 256:
    div, mod = divmod(long_value, 256)
    result = chr(mod) + result
    long_value = div
  result = chr(long_value) + result

  nPad = 0
  for c in v:
    if c == __b58chars[0]: nPad += 1
    else: break

  result = chr(0)*nPad + result

  return result

try:
  import hashlib
  hashlib.new('ripemd160')
  have_crypto = True
except ImportError:
  have_crypto = False

def hash_160(public_key):
  if not have_crypto:
    return ''
  h1 = hashlib.sha256(public_key).digest()
  r160 = hashlib.new('ripemd160')
  r160.update(h1)
  h2 = r160.digest()
  return h2

def hash_160_to_bc_address(h160, version=""\x00""):
  if not have_crypto:
    return ''
  vh160 = version+h160
  h3=hashlib.sha256(hashlib.sha256(vh160).digest()).digest()
  addr=vh160+h3[0:4]
  return b58encode(addr)

def public_key_to_bc_address(public_key, version=""\x00""):
  if not have_crypto or public_key is None:
    return ''
  h160 = hash_160(public_key)
  return hash_160_to_bc_address(h160, version=version)

def sec_to_bc_key(sec, version=""\x80""):
    if not have_crypto or sec is None:
      return ''
    vsec = version+sec +""\x01""
    hvsec=hashlib.sha256(hashlib.sha256(vsec).digest()).digest()
    return b58encode(vsec+hvsec[0:4])

def bc_key_to_sec(prv):
    return b58decode(prv)[1:33]

def bc_address_to_hash_160(addr):
  bytes = b58decode(addr)
  return bytes[1:21]

if __name__ == '__main__':

    if len(sys.argv) > 1:
        if sys.argv[1] == '-en':
            print b58encode(sys.argv[2].decode('hex_codec'))
        if sys.argv[1] == '-de':
            print b58decode(sys.argv[2]).encode('hex_codec')

        if sys.argv[1] == '-pub':
            print public_key_to_bc_address(sys.argv[2].decode('hex_codec'))
        if sys.argv[1] == '-adr':
            print bc_address_to_hash_160(sys.argv[2]).encode('hex_codec')

        if sys.argv[1] == '-sec':
            print sec_to_bc_key(sys.argv[2].decode('hex_codec'))
        if sys.argv[1] == '-prv':
            print bc_key_to_sec(sys.argv[2]).encode('hex_codec')

    else:
        print ''
        print 'Usage: ./base58.py [options]'
        print ''
        print '       -en  converts hex to base58'
        print '       -de  converts base58 to hex'
        print
        print '       -pub public_key_to_bc_address'
        print '       -adr bc_address_to_hash_160'
        print
        print '       -sec sec_to_bc_key'
        print '       -prv bc_key_to_sec'
        print

To answer your specific question, based on above code you could use this command:
hashlib.sha256('0450863AD64A87AE8A2FE83C1AF1A8403CB53F53E486D8511DAD8A04887E5B23522CD470243453A299FA9E77237716103ABC11A1DF38855ED6F2EE187E9C582BA6'.decode('hex_codec')).digest().encode('hex_codec').upper()

","138","<python><bitcoin><sha256><sha>","1","0","2","2017-09-11 14:54:09","45680054","0","0","","","","2017-08-14 17:39:09",""
"29833838","sha3 algorithm encryption and backtracking it","I have three questions:
Q1: Suppose I have a transaction ID in sequence order 1,2,3,4 so on and so forth. If I am using SHA3 algorithm on each of these transaction ID, Is there a way where I can figure out before the transaction ID gets encrypted, whether the numbers will be picked up in sequence (1,2,3,4 .. ) and get encrypted? 
Q2: can I backtrack and see what transaction ID got encrypted ?
Q3: What type of characters are present in a hashcode?
","","138","<encryption><sha><sha-3>","0","","0","2015-04-23 20:48:08","","5","","2271895","","2015-04-23 20:48:08","2015-04-23 20:37:44",""
"20181714","PHP - What to use for database encryption if not MD5?","Okay, I don't know if this has been asked before, but there's a lot of sources stating that it's not recommended to use MD5 for hashing sensitive data like passwords for example. But nobody gave any recommendations or indications towards what other hashing function they would use. All that you see, including on this site is people ranting back and fourth that it is or it's not safe.
As we all know, Wikipedia says: 

""In 1996 a flaw was found in the design of MD5. While it was not a
  clearly fatal weakness, cryptographers began recommending the use of
  other algorithms, such as SHA-1—which has since been found to be
  vulnerable as well.""

This is quoted around by the people that tell you not to use md5 or sha1, but they don't want to enlighten everybody else towards what other alternatives you should consider.
Of course let's not forget that the way you design your application, where you store your keys, who has access to what, using a salt etc is also very and certainly more important. 
Of course verifying and validating all data, not leaving any back doors open for SQL injection, XSS vulnerabilities is key. But from what I learned, md5 can be easily ""brute forced"" or ""desalted"". I'm not a security guru, this is why I ask so I and anyone that's as experienced as I am can understand in more simple terms.
This is what I am doing at the moment but maybe somebody can give me pros and cons:
$hash = hash('sha256', $salt . hash('sha256', $_POST['pass']) );

I hope my question isn't out of line, I know there is a lot of articles and pages on this, but I just haven't found any answers, and I am sure others would like to know as well.
","Since PHP 5.5 you can use password_hash:
/**
 * In this case, we want to increase the default cost for BCRYPT to 12.
 * Note that we also switched to BCRYPT, which will always be 60 characters.
 */
$options = [
    'cost' => 12,
];

echo password_hash(""Stack Overflow"", PASSWORD_BCRYPT, $options).""\n"";

","137","<php><encryption><hash><md5><sha>","1","5","2","2015-06-24 19:40:05","","3","","","","","2013-11-24 22:08:30","2013-11-25 05:59:48"
"20181714","PHP - What to use for database encryption if not MD5?","Okay, I don't know if this has been asked before, but there's a lot of sources stating that it's not recommended to use MD5 for hashing sensitive data like passwords for example. But nobody gave any recommendations or indications towards what other hashing function they would use. All that you see, including on this site is people ranting back and fourth that it is or it's not safe.
As we all know, Wikipedia says: 

""In 1996 a flaw was found in the design of MD5. While it was not a
  clearly fatal weakness, cryptographers began recommending the use of
  other algorithms, such as SHA-1—which has since been found to be
  vulnerable as well.""

This is quoted around by the people that tell you not to use md5 or sha1, but they don't want to enlighten everybody else towards what other alternatives you should consider.
Of course let's not forget that the way you design your application, where you store your keys, who has access to what, using a salt etc is also very and certainly more important. 
Of course verifying and validating all data, not leaving any back doors open for SQL injection, XSS vulnerabilities is key. But from what I learned, md5 can be easily ""brute forced"" or ""desalted"". I'm not a security guru, this is why I ask so I and anyone that's as experienced as I am can understand in more simple terms.
This is what I am doing at the moment but maybe somebody can give me pros and cons:
$hash = hash('sha256', $salt . hash('sha256', $_POST['pass']) );

I hope my question isn't out of line, I know there is a lot of articles and pages on this, but I just haven't found any answers, and I am sure others would like to know as well.
","I have used this several times. many of my friends use it, as I said also because it has something good and there is a good explain things
Link
","137","<php><encryption><hash><md5><sha>","1","-1","2","2015-06-24 19:40:05","","3","","","","","2013-11-24 22:08:30","2013-11-25 05:59:48"
"53495713","F5 load balancer rejects a SHA256 encryption algorithm cipher suite?","I am investigating an issue where two end points are talking over TLSv1.2, the destination being the F5 load balancer. During the client server handshake, the client sent a set of cipher suites out of which the F5 server chose the following cipher to initiate communication :
Cipher Suite: TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 (0xc028)

The second time the client initiated a handshake the F5 rejected the cipher suite, on checking the cipher suites they did not have SHA384 ciphers:
Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 (0xc023)
Cipher Suite: TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 (0xc027)
Cipher Suite: TLS_RSA_WITH_AES_128_CBC_SHA256 (0x003c)
Cipher Suite: TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256 (0xc025)
Cipher Suite: TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256 (0xc029)
Cipher Suite: TLS_DHE_RSA_WITH_AES_128_CBC_SHA256 (0x0067)
Cipher Suite: TLS_DHE_DSS_WITH_AES_128_CBC_SHA256 (0x0040)
Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA (0xc009)
Cipher Suite: TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA (0xc013)
Cipher Suite: TLS_RSA_WITH_AES_128_CBC_SHA (0x002f)
Cipher Suite: TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA (0xc004)
Cipher Suite: TLS_ECDH_RSA_WITH_AES_128_CBC_SHA (0xc00e)
Cipher Suite: TLS_DHE_RSA_WITH_AES_128_CBC_SHA (0x0033)
Cipher Suite: TLS_DHE_DSS_WITH_AES_128_CBC_SHA (0x0032)
Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 (0xc02b)
Cipher Suite: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 (0xc02f)
Cipher Suite: TLS_RSA_WITH_AES_128_GCM_SHA256 (0x009c)
Cipher Suite: TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256 (0xc02d)
Cipher Suite: TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256 (0xc031)
Cipher Suite: TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 (0x009e)
Cipher Suite: TLS_DHE_DSS_WITH_AES_128_GCM_SHA256 (0x00a2)
Cipher Suite: TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA (0xc008)
Cipher Suite: TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA (0xc012)
Cipher Suite: TLS_RSA_WITH_3DES_EDE_CBC_SHA (0x000a)
Cipher Suite: TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA (0xc003)
Cipher Suite: TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA (0xc00d)
Cipher Suite: TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA (0x0016)
Cipher Suite: TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA (0x0013)
Cipher Suite: TLS_EMPTY_RENEGOTIATION_INFO_SCSV (0x00ff)

I am new to the F5 load balancers, and would like to understand why the F5 does not choose any of the SHA256 encrypted cipher suites. Where is this specified?
","A beginner could follow these steps :

Check your F5 BIG-IP version, and then read K13163 to know which cipher suites are supported for this version (follow the links if your version is not in this document). This is necessary to know whether your client and your server have a chance to succeed in the handshaking.
Go to K8802 and follow the link Configuring the cipher strength for SSL profiles for your F5 BIG-IP version. This will answer your question, on where it is specified.
If it's still not enough for you to get the right setup, you need to read K15292 to know how to debug your handshaking problem (some SSL knowledge is required).

","135","<security><ssl><tls1.2><sha><f5>","0","0","2","2018-12-24 08:05:58","53910775","0","","3694593","","2018-11-27 10:12:15","2018-11-27 08:44:41",""
"53495713","F5 load balancer rejects a SHA256 encryption algorithm cipher suite?","I am investigating an issue where two end points are talking over TLSv1.2, the destination being the F5 load balancer. During the client server handshake, the client sent a set of cipher suites out of which the F5 server chose the following cipher to initiate communication :
Cipher Suite: TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 (0xc028)

The second time the client initiated a handshake the F5 rejected the cipher suite, on checking the cipher suites they did not have SHA384 ciphers:
Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 (0xc023)
Cipher Suite: TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 (0xc027)
Cipher Suite: TLS_RSA_WITH_AES_128_CBC_SHA256 (0x003c)
Cipher Suite: TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256 (0xc025)
Cipher Suite: TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256 (0xc029)
Cipher Suite: TLS_DHE_RSA_WITH_AES_128_CBC_SHA256 (0x0067)
Cipher Suite: TLS_DHE_DSS_WITH_AES_128_CBC_SHA256 (0x0040)
Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA (0xc009)
Cipher Suite: TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA (0xc013)
Cipher Suite: TLS_RSA_WITH_AES_128_CBC_SHA (0x002f)
Cipher Suite: TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA (0xc004)
Cipher Suite: TLS_ECDH_RSA_WITH_AES_128_CBC_SHA (0xc00e)
Cipher Suite: TLS_DHE_RSA_WITH_AES_128_CBC_SHA (0x0033)
Cipher Suite: TLS_DHE_DSS_WITH_AES_128_CBC_SHA (0x0032)
Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 (0xc02b)
Cipher Suite: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 (0xc02f)
Cipher Suite: TLS_RSA_WITH_AES_128_GCM_SHA256 (0x009c)
Cipher Suite: TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256 (0xc02d)
Cipher Suite: TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256 (0xc031)
Cipher Suite: TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 (0x009e)
Cipher Suite: TLS_DHE_DSS_WITH_AES_128_GCM_SHA256 (0x00a2)
Cipher Suite: TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA (0xc008)
Cipher Suite: TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA (0xc012)
Cipher Suite: TLS_RSA_WITH_3DES_EDE_CBC_SHA (0x000a)
Cipher Suite: TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA (0xc003)
Cipher Suite: TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA (0xc00d)
Cipher Suite: TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA (0x0016)
Cipher Suite: TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA (0x0013)
Cipher Suite: TLS_EMPTY_RENEGOTIATION_INFO_SCSV (0x00ff)

I am new to the F5 load balancers, and would like to understand why the F5 does not choose any of the SHA256 encrypted cipher suites. Where is this specified?
","I figured it out by listing out the supported ciphers from the cipher string configured for that profile using below command

openssl ciphers Cipher_string

And the cipher suites received didn't have single one of them to what BIGIP was configured to accept.
","135","<security><ssl><tls1.2><sha><f5>","0","0","2","2018-12-24 08:05:58","53910775","0","","3694593","","2018-11-27 10:12:15","2018-11-27 08:44:41",""
"8393169","Why should't I use an encryption salt I enter myself and use a function to randomize a salt for me?","I am just typing a salt and on php documentations, people always use some random variable function. What is the disadvantage of typing a salt instead of generating it?
","
Why force your users to type something?
Randomly generated bytes will have much more entropy that user input (which is typically only alphanumeric ASCII).

","135","<encryption><salt><sha><crypt><sha512>","1","1","2","2011-12-06 00:33:14","8393395","3","","","","","2011-12-05 23:03:12",""
"8393169","Why should't I use an encryption salt I enter myself and use a function to randomize a salt for me?","I am just typing a salt and on php documentations, people always use some random variable function. What is the disadvantage of typing a salt instead of generating it?
","The point of salt is to add entropy to the hash.
Cryptographic hashes are designed so that a tiny change to the input makes a huge difference in the resulting hash, so (barring a flaw in the algorithm) it becomes impossible to know whether the original input was the same from checking the similarity between two differently salted hashes.
But if you use the same salt for everyone, you lose much of the benefit that provides.  Two identical passwords hashed with the same salt will give you the same hash. 

If you use the same salt for everyone, then at the very least, someone can figure out that two users have the same password.  
More importantly, it greatly lessens the time someone has to spend to crack passwords, since they can now check the same hash against every user at once.
At worst, someone could already have a lookup table for the salt you use, making it trivial to crack every user's password.  

While it's possible to use a simple salt (like the user's ID) to achieve the goal of making cracking harder, it's only a tiny bit more effort to use a random string, and makes cracking even harder (since the salt is nearly impossible to predict ahead of time, the chance of having a precomputed lookup table for that salt becomes much lower).
","135","<encryption><salt><sha><crypt><sha512>","1","1","2","2011-12-06 00:33:14","8393395","3","","","","","2011-12-05 23:03:12",""
"8307642","Should I encode the data before hashing it?","Should I encode the data before hashing it to avoid Invalid length for a Base-64 char array.
# my .cs :
Stream des = file.InputStream;
byte[] data = new byte[file.ContentLength];
des.Read(data, 0, file.ContentLength);
FileStream f = new FileStream(targetFileName, FileMode.Create, FileAccess.ReadWrite);
f.Write(data, 0, data.Length);
f.Flush();
f.Close();
///////////////////////////////////////////////////////////////////////////////////////////
var sha = new System.Security.Cryptography.SHA512Managed();
string hash2 = Convert.ToBase64String(sha.ComputeHash(data));

and if the answer is yes How to encode the byte array.
Note:
I use hashing to uniquely identify the uploaded files for any change.
","That error happens when decoding base-64, since a valid base-64 string is always a multiple of 4 characters (sometimes with a few padding chars). No, you do not need to encode/pad the input to ToBase64String. Rather, it sounds like you are losing some characters when you are transporting / storing it (are you perhaps passing it on a query-string, and having a + vs space issue?)
","134","<c#><asp.net><hash><encode><sha>","1","3","1","2011-11-29 08:23:25","8307731","9","","85371","","2011-11-29 08:22:13","2011-11-29 08:14:26",""
"37311206","Junit tests for Message hashing with Sha2","How can I test this message Hashing function? In fact, I am seeking for some tests using some Strings that will fail this method, I've got for now a test for a NoSuchAlgorithmException  and a NullExeption .. thank's in advance :)   
public String HashMessage(String message){

MessageDigest messageDigest messageDigest=MessageDigest.getInstance(""SHA-256"");
    messageDigest.update(message.getBytes());

    byte byteData[] = messageDigest.digest();

    StringBuffer hexString = new StringBuffer();
    for (int i=0;i<byteData.length;i++) {
        String hex=Integer.toHexString(mask & byteData[i]);
        if(hex.length()==1)
            hexString.append('0');
        hexString.append(hex);
    }
    return hexString.toString();

}

","","134","<java><junit><sha>","0","","0","2016-05-18 22:38:23","","2","3","","","","2016-05-18 22:38:23",""
"7804848","Converting Ruby SHA to javascript","I have this method on ruby which converts a string into a encrypted SHA code and I would like to know if it is somehow possible to achieve that using javascript?
The fact is that I don't know exactly what are the configurations for this SHA (I believe it is 512 but I'm not sure, I tried few javascript online tools but I couldn't achieve the same result)
require 'digest'
require 'iconv'
word = 'testing'
puts Digest::SHA2.new(512).hexdigest(Iconv.conv('UTF-16LE','ISO-8859-15', word))

#=> 6e42b2c2a6351036b78384212774135d99d849da3066264983e495b5f74dc922e3d361b8ea9c8527169757233ed0bd4e56b2c42aab0a21bbcca67219dc53b472

Perhaps by knowing what are the exact configurations used in the method above I could find it easier in javascript?
Thanks in advance

Just in case anybody needs that method to convert the string to hex UTF-16, here it is: 
function toHex(str) {
    var group = [], i;

    for (i = 0; i < str.length; i += 1) {
        group.push(str.charCodeAt(i).toString(16));
    }

    return group.join('00') + '00';
}

","The reason you're getting different results is because the Ruby code converts 'testing' into UTF-16, and the jsSHA example is using ASCII. If you expand ""testing"" into 16-bit Unicode, you get ""740065007300740069006e006700"" in hexadecimal, which gives the same answer as Ruby. Of course, you would also need to set it to SHA-512 like you mentioned.
","132","<javascript><ruby><encryption><sha>","3","2","1","2011-10-27 13:52:09","7807724","0","0","165750","","2011-10-27 13:52:09","2011-10-18 09:07:30",""
"47146723","How to create AWS signed cookies with elixir?","I've been trying to set up CloudFront with signed cookies using elixir. From what I learned the signature must use sha1 encoding. According to AWS in the terminal that would look like this:
cat policy.json | openssl sha1 -sign CloudFront_Key.pem |base64 |tr '+=/' '-_~'
I can't figure out how to do that in elixir. I've been looking into this dependency and tried using :sha1 instead in it's sign method. I did read through here and did see sha, not sha1. Is that how erlang calls it? (I have close to no knowledge about erlang). Tried :sha but I do not get the same key as in the terminal and it does not seem to work. I also noticed that base64 usually adds a few extra chars at the end than the terminal. Not sure what to do.. Resort to try using System.cmd ?
This is the AWS doc I'm following: create & verify signed cookies and create signature for signed cookie
","You can use :public_key.sign/3 for this.
For reference,
$ cat pk.pem
-----BEGIN RSA PRIVATE KEY-----
MIIEowIBAAKCAQEAknEbD26dg4w2JlaN2pmtz7sEBSEjFcfsgcUuV100L60Lz36s
EDySjiTMbhfhKRa46gBvGSEzb8G1l4iD1O5M5mfzEVg/shSOgwVfyvq5XShJBaz6
PcKJ4hsLh/aUIkvnfYWg5zdcPj5FBYT0I+jLnWvNevsolfGwN4rY5S/PuBCUwtVC
m1L3p5bVHvR33tjI4qenHkuRJUnJh4TMLCOTCGHdmZ+yyWJ2rLcYq7yciI0WlRh5
cCI1eYEehUsbcifOyazKNOAmO/9DzXZlo9S0TSYjxrG626mt+j9yD473t/FSfUeg
6Hn67wfGBWAk0HezJ3QGRl9jBAeYhSLbaX7DHQIDAQABAoIBAHo+Blu8d6oe+fjI
2cM389pq/7EUd0gwSmINamCtQenmZux/jjxDhAc5+piQQHlfKV7Um+j7SQeqSN7E
q1+syO6wqTu6UflipZADhXJYFzIHdeVR/tZdNWJUNyz5DbEPcZ7bVHSORucCbfVs
hawQISA4pB9b1wZL6VCEDAhM//ViRgBA3k6tBu5jNi+I1WXE9nrat4DSDV3uklfo
f5KfHLhbHgrl7R7jnAyWBya6O6Pw0r/3FeWrjo6W0wht5BprX4HSgJvpWtqjhodA
iucWjmWV7Gt++HBRX0NEQozajQ7fdfnCOpSD2g8QzVw/5whRBidYngJWLBNt1YQV
UMi7toECgYEAzw4i+m0PnqiExMOSLsvPcEQu0wScOe3vwXTBOcfOS0Uds0kWzZP2
BHQL7IATtN+OAMdtFi1xyN+auikTsZpy1hezUtamfeo75btFhgSrtRXQki5o3pX8
HgDh+31+Ox1RM/Qhm4DSPQ/YImw+HQD+lK9sw3yNZlmPmXwyCARxkCECgYEAtQ75
M5HcBG+zPbPHc4mrOgtQzaUTEs1onu/zDCuFZwYtyBB0RKSLLmacgh/Qcdu13Lli
fdTqego5asKztQfsB88aqkYtdY51dnm+H2sxQ2ef+1D2gbV+sdrsM7gUuVvxBMwv
itFizQ1rgZn/Vee4zfFXEoURjkKfTKT27Hn7A30CgYEAx4ugOiiRPR67lcXFREQ3
jsKnPcbbqRieT5rt/XmKXxAlJ3vw9f76wh/0veBRHae1exq3DwCNAEI/I9oimK94
rMv6joM/wWnUf/qTbi1iLgrwD3Gar6lsaJ4BLBYtaVs/vwowuWTVOPPkIIig8+LZ
dwH5mAyZWWJG+myu6vsdVwECgYAJqT/g4ZKU5gTxcOteneT2Fu572qgW48EGYhVc
++GFas38k+wwUXtfwXfudZYgzTF6EqZPwpG0a2E+8h62tTKCBCoPFemNEUnxRXPA
p26cgyYFOf+9UhrtkJnz9Imejmpg8ChFRwD3ohSveLEoO1IgIxWbVmBmb+WiKFdI
rQWY3QKBgA6Gw/8KB7LxqR3N9/1xgW5b02WVhG7gvFNlSYZMmdd8H3w8MdXCdk22
kJBfrIfkDS6nbF6w4+8q309NPwOqdkt2QNPq6Il1ugWuxFMiNEGHjjT21PrsgEJS
q6K6c+znrnI7O/wijdvEC2n+q+S9h8yv1bT6QfC1Vx88SC9GCBuq
-----END RSA PRIVATE KEY-----
$ cat policy.json
{""Statement"":[{""Resource"":""https://mycloudfront.net/a.png"",""​Condition"":{""DateLes​sThan"":{""AWS:EpochTi​me"":1512086400}}}]}

First, read the key:
iex(1)> key = File.read!(""pk.pem"") |> :public_key.pem_decode |> hd |> :public_key.pem_entry_decode
...

Then sign the data using :public_key.sign/3:
iex(2)> File.read!(""policy.json"") |> :public_key.sign(:sha, key) |> Base.encode64
""QjLmx3LASRb1zt9eW/EMywGMXB1SwX/0JrTnLOFulYjcRJ1dpacUZBB/AYI1zwaXPEQTgQ8crNDFgje6fqbLKoNwgcpE9mOK/RdDKi963ztJnD6EmtM60YbROSpjQ/LDupEYgipPNZbjCnRCJcqDX43BadbVR75G3B5mFmAwtRSPdslJ5irVnt9PjoDMdi9DYe1wGhgQkoym1tiKEyaTrH5lyrw+KPdAi1tpzuZ60ZEcQFJJbKqYYdA0SslbUFL71mdLLkQ9xz95JPNpsSY3ZJyJsKpRGFJuaL1aMsdNLxlLD91PpNW15FitBpBnAwuiiEfPrwU14zIxsfFszaM6KA==""

The output is identical to openssl:
$ cat policy.json | openssl sha1 -sign pk.pem | base64
QjLmx3LASRb1zt9eW/EMywGMXB1SwX/0JrTnLOFulYjcRJ1dpacUZBB/AYI1zwaXPEQTgQ8crNDFgje6fqbLKoNwgcpE9mOK/RdDKi963ztJnD6EmtM60YbROSpjQ/LDupEYgipPNZbjCnRCJcqDX43BadbVR75G3B5mFmAwtRSPdslJ5irVnt9PjoDMdi9DYe1wGhgQkoym1tiKEyaTrH5lyrw+KPdAi1tpzuZ60ZEcQFJJbKqYYdA0SslbUFL71mdLLkQ9xz95JPNpsSY3ZJyJsKpRGFJuaL1aMsdNLxlLD91PpNW15FitBpBnAwuiiEfPrwU14zIxsfFszaM6KA==

","131","<amazon-web-services><cookies><elixir><sha><signed>","0","3","1","2017-11-06 23:13:09","47147418","2","","","","","2017-11-06 22:13:23",""
"55898375","Using SHA3 algorithm in crypto package node js?","I want to use below algorithm for encoding as  
SHA-256, SHA3-224, SHA3-256, SHA3-
384, SHA3-512

For encoding purpose i used crypto package of node js by which i can use sha256 encryption. I have gone through this post which explains what algos are supported. 
I could not find any SHA3 algorithm in that list. I have found to npm packages as SHA3 and js-sha3 which implement SHA3 encryption. 
So i would like to which is the best way to implement SHA3 encryption.
","","131","<node.js><encryption><npm><sha><sha-3>","0","","0","2019-04-29 06:57:58","","1","","","","","2019-04-29 06:57:58",""
"46083243","How to validate dates in Hash format in MySQL or C++","I need to validate dates in Hash (SHA256) format in MySQL or C++.
For example: date1 < date2 or date1 > date2.
I have this query in MySQL:
SELECT SHA1(CURDATE()) -->'2017-09-06'

and:
SELECT SHA1('2017-09-06') --> '34152f3661d73490ac89b0fe15cb3170aac06bb8'

SELECT SHA1('2017-09-07') --> '0b10f03fb245a6486d6ab5b25a2f050bf87093a5'

But, if I use:
SELECT IF (SHA1('2017-09-06') <= SHA1('2017-09-07') ,'True','False') AS Test;

the result is False, therefore, incorrect!
","Don't know why you'd do this, but here's a solution for you.
Here's some assumptions.

You were given two date hashes (two inputs)
You know exactly how the date hashes were created (EG: always in the format of YYYY-MM-DD)
You know the range of your target date (So you can reverse the hash back to the original date)

So in psudocode, you'd do something like this.
date getDateFromHash(string inputHash) {
  date startDate = '1911-01-01';
  date endDate = '2017-12-31';
  for(date checkDate = startDate; checkDate < endDate; checkDate + 1 day) {
    if (sha1(checkDate) = inputHash) { return checkDate }
  }
  return null;
}
date firstDate = getDateFromHash(""0b10f03fb245a6486d6ab5b25a2f050bf87093a5""); // 2017-09-07
date secondDate = getDateFromHash(""34152f3661d73490ac89b0fe15cb3170aac06bb8""); // 2017-09-06
if (firstDate > secondDate) {
    return true;
} else {
    return false;
} // compare using default date operators

But honestly speaking, like the comment says, there's no point of hashing date values. Hence why I'm only dropping a quich psudo code for you just to point you in the right direction, if you seriously want to tread down this path.
","130","<c++><mysql><hash><sha256><sha>","-2","-1","1","2017-09-07 07:18:02","","7","","207421","","2017-09-07 01:38:05","2017-09-06 19:46:31",""
"13808562","How ssl collision finder works?","I was studying md5 ssl collision vulnerability and can't solve some questions.
If md5 ssl became vulnerable why there is still Thawte certificate signed by md5 in browsers?
And also, how does ssl collision finding algorythm works? Is it the same as finding md5/sha hash collision, or it's just a part of it? I am confused because of two files: key and cert.
My thoughts:
We are creating key file with text ""a"", then sign certificate with this key and check md5 sum if it equals needed md5 sum. Then change ""a"" to ""b"". But it seems to be bruteforce, not collision finding. Is it correct?
","","129","<ssl><certificate><md5><collision><sha>","1","","0","2012-12-10 20:27:40","","0","","68587","","2012-12-10 20:27:40","2012-12-10 20:20:12",""
"22056397","Is it possible to create Django passwords with Perl?","So an emergency project was dumped on me to merge a MySQL user database into an existing Django user database.
I've figured just about everything out except how to handle the passwords as they use different hashes. I don't know Python, the Django backend, or very much about hashing techniques. 
I do have a way to verify users with their emails, I just need a way to take the passwords they give me and save them into the database in a Django-acceptable way.  It will be have to be done in Perl since that's the only language I know on the server.
I found this page talking about how Django handles passwords, but I sadly don't understand most of what they're saying.  Also, I don't know if it's any help, but the admin area of the Django site gives the ""hint"" of  

""Use '[algo]$[salt]$[hexdigest]'"" for the password.

That doesn't mean much to me either, but maybe it does to one of you?
","There are basically two ways to handle this: convert existing passwords to a format acceptable by Django, or write your own Django password hasher.
For the first way, as you found, the password field consists of three parts, each separated by a $. (Django 1.6 passwords may have 4 parts, but let's ignore that extra part for now, since Django 1.6 also supports the more traditional 3-part passwords.) The parts are

algorithm, which describes the password hashing algorithm; it will look like md5, pbkdf2, etc.
salt, the salt for the hash algorithm
hexdigest, the hashed password

So, assuming your passwords are already salted and hashed, your script needs to take the hashed/salted passwords in your existing database, separate the salt from the hash, then store them into the database with the appropriate algorithm string prefixed. There should be Perl modules for doing password hashing using various algorithms. Django's recommended algorithm is PBKDF2. bcrypt is also good. Any hash algorithm is fine, though, as far as Django is concerned, as long as it has a built-in hasher for that algorithm (Django has hashers for the most common hashing algorithms).
If your existing passwords are not salted and hashed…well, now would be a good time to do that. ;-)

The alternative way is to just copy the passwords over to the new database as-is, and write your own password hasher to handle them in your Django app. Of course, that would require writing some Python code.
","129","<python><django><perl><sha>","0","0","1","2014-02-27 07:03:14","","9","","2313887","","2014-02-27 00:54:48","2014-02-27 00:12:58",""
"17795035","SSL certificate on woothemes e-commerce website","I need to get SSL certificate for my website which is running on woothemes.
I am using FirstData as my payment gateway
GoDaddy is offering 2 types of encryption: SHA-1 or SHA-2.
Which one should apply to peroxywhite.com?
Also, should we install SSL on peroxywhite.com/cart or peroxywhite.com?
","This is according to my knowledge
Sha1
Some collision attacks against Sha1 exist but are not currently practical as the CPU power required is estimated as costing almost $3 million for each hash.
Even if Sha1 can be considered acceptable for most uses, Sha2 is all-around a better alternative: it is just as fast, more secure, and the only potential downside is the larger space required for storing the hash. If for some reason this is a concern (we’re talking about 32 bytes instead of 20) truncating Sha2′s output is still more secure than using Sha1.
The only reason Sha1 should be chosen is for interoperability reasons.
Sha2
Sha2 is the successor of Sha1 and has 4 different variants, each with a different digest size (output size):

Sha-256 should be chosen in most cases where a high speed hash
  function is desired. It is considered secure with no known theoretical
  vulnerabilities and it has a reasonable digest size of 32 bytes. For
  things like hashing user password, though, a function designed to be
  slow is preferred: a great one is bcrypt.
Sha-224 uses the same algorithm as Sha-256 (except for the initial
  seed values) simply truncating its output. It was created because its
  digest size has the same length as two-key Triple DES keys which can
  be handy.
Sha-512 is different, using 64 bit numbers and having 80 rounds
  (versus 32 bit numbers and 64 rounds of Sha-256). Its digest size – 64
  bytes – is very large and it is probably overkill for most uses.
Sha-384 is the same as Sha-512 (again, except for the initial seed
  values) but truncated to reduce its digest size.

And if you observe all ecommerce web sites they will incluude ssl in the check out page only, not for the entire site. But some banking site will maintain ssl for whole website.
As peroxywhite is a ecommerce web site we can place ssl only in the checkout page ie. only in 
http://www.peroxywhite.com/checkout/
","127","<ssl><e-commerce><ssl-certificate><sha><woothemes>","0","1","1","2013-07-23 05:17:04","17801971","0","","","","","2013-07-22 18:44:03",""
"55940223","How to cache dependencies when using git pull in Dockerfile","Say we have this in a docker image:
RUN git clone <url>
RUN git pull
RUN npm install

we need the git pull to always run. But if package.json doesn't change, we don't need to re-install. 
I have two questions - how can we get the git pull to always run? I believe we can cache bust using a --build-arg
However, if git pull always runs, then according to docker, so will the npm install command.
One thing we could do is use some custom logic to compare the sha-sum of the package.json files.
RUN git clone <url>
RUN git pull
ENV package_shasum $(sha1sum package.json)
RUN compare-shasums && npm install

does anybody know how to do this with Docker?
The reason why we are doing the git stuff in Docker instead of outside the container and copying files into the container is for making Jenkins easier to work with.
","Normally if we COPY code from the host to image, we can use this trick to cache dependencies:
COPY package.json .
RUN npm install
COPY . .

and that will only run npm install if the package.json file has changed.
But if we do the git pull in the Dockerfile, then it's a bit different, but we can do this:
RUN git clone git@github.com:ORESoftware/live-mutex.git
ADD https://raw.githubusercontent.com/ORESoftware/live-mutex/master/package.json package.json
RUN npm install
RUN git fetch origin/master
RUN git checkout master

and for bitbucket, the url would be:
https://bitbucket.org/<account>/<repo-name>/raw/<commit-sha-or-HEAD>/<filename>

","127","<docker><ssh><sha1><sha>","-1","0","1","2019-05-07 20:31:23","","2","","1223975","","2019-05-07 20:31:23","2019-05-01 17:33:44",""
"56416277","Jenkins plugins installation giving SHA-256 mismatch error","I started a fresh container from jenkinsci/blueocean docker image in my Ubuntu 16.04 LTS server. Container started fine and I am able to see Jenkins console perfectly. When I am trying to install any plugin which isnt bundled with this image it is giving SHA-256 mismatch error like below:-
java.io.IOException: Downloaded file /var/jenkins_home/plugins/build-pipeline-plugin.jpi.tmp does not match expected SHA-256, expected 'Ci0bq1rxqEDWF1RklJvBZANp75727gH13+5cFr5HDbs=', actual 'c0qvGjbwCXYFueMfd77NFvIfRPG21Dxt4OxbZ+Gc/7c='
at hudson.model.UpdateCenter.throwVerificationFailure(UpdateCenter.java:1902)
at hudson.model.UpdateCenter.verifyChecksums(UpdateCenter.java:1934)
at hudson.model.UpdateCenter$InstallationJob.replace(UpdateCenter.java:2104)
at hudson.model.UpdateCenter$UpdateCenterConfiguration.install(UpdateCenter.java:1237)
at hudson.model.UpdateCenter$DownloadJob._run(UpdateCenter.java:1755)
at hudson.model.UpdateCenter$InstallationJob._run(UpdateCenter.java:2015)
at hudson.model.UpdateCenter$DownloadJob.run(UpdateCenter.java:1726)
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
at java.util.concurrent.FutureTask.run(FutureTask.java:266)
at hudson.remoting.AtmostOneThreadExecutor$Worker.run(AtmostOneThreadExecutor.java:112)
at java.lang.Thread.run(Thread.java:748)

This is happening with all the plugins I am trying to install or update. I googled about it but couldn't get anything constructive.
I also installed Jenkins as standalone in the server but I am getting the same error again, which seems that it could be related to my server itself.
I was thinking to install plugins as well while the container is built through the Blue Ocean or Jenkins official image to make everything go as a code, but it seems I'll end up with the same issue.
Can someone help me to resolve it or find an alternative way to install plugins?
","","126","<docker><jenkins><jenkins-plugins><ubuntu-16.04><sha>","1","","0","2019-06-02 15:10:30","","0","","","","","2019-06-02 15:10:30",""
"36580584","SHA-256 Differing Results","I'll do my best to describe my predicament. 
I'm writing a python script that will take an input file and perform a SHA-256 hash on it.
If I take the raw binary image and run it through the command prompt (on my mac: shasum -a 256 somefile.bin), I get the 'correct' digest: 'bda1ca...'
I've run this binary through an online calculator and get the same result.
If I open this hash in a hex editor, extract all of the bytes into my clipboard and paste them into a SHA256 calculator I get a different result: '689035...'
What am I missing here? I've tried upper/lower cash, spaces between each byte. I'm not sure what else to try.
This problem started because I'm implementing this in Python, but before I even worry about the code I'm trying to understand why this is different.
","When you copy on your keyboard the ""bytes"" from your hex editor, you are most likely just copying a string representation of it.
maybe those commands will help you to get it :
$ echo ""Hello, world"" > my_bin

$ shasum -a 256 my_bin
37980c33951de6b0e450c3701b219bfeee930544705f637cd1158b63827bb390  -


$ cat my_bin | shasum -a 256
37980c33951de6b0e450c3701b219bfeee930544705f637cd1158b63827bb390  -

$ cat my_bin | xxd -p | shasum -a 256
0e535a1a279db9753bcbc226b9305e6e6a39ba2d866c01a44cb9aac8d5fc9833  -

(xxd is a hex editor i used to display content of the file)
","126","<sha256><sha><rsa-sha256>","0","1","1","2016-04-12 18:27:41","","1","","","","","2016-04-12 17:49:53",""
"41756454","what contents are converted to Git SHA-1","I have few doubt regarding git operation/workflow:
1.The Git SHA-1 is formed on each commit. I need to be clear regarding, which files are used for making that SHA?,

The files which have changes in that commit (or)
All the files in the Repository

2.I am having Windows machine. I have installed Sourcetree(GitClient) alone, not git software. And I created a repo at Github.com(remote repository), and by these, I am achieving my workspace as versioning process. My workspace is at remote.
Please correct my thought if I am wrong -> ""Without Installing Git server in our machine, we can achieve code versioning via Remote repository. And, if we need Local Repository, we should need Git server."" 
Please, someone, clarify my doubt's. Thank you :)
","SHA calculation
The SHA is a result of the parent object(s) hashes, the tree hash, the name and email of the author, the timestamp, the commit message text, and the files involved in the commit. (And the GPG signature, if one is present.)
That is why if you change the commit message, or rebase a commit, you end up with a new SHA.
The rest of the files in the repository are not directly involved in that SHA, but the SHA of the parent(s) of the commit are part of the calculation, so they are indirectly involved.
You can see the metadata involved by using cat-file. Take a commit ID and do this:
$ git cat-file -p 3d911c37dc7cc6d50af9cbc66aa36084158308f5
tree 487660899e53bef8b15d3e1692172f689ed965c5
parent aa3b68973e845b7a900ab164603f154c8a1ba1c5
author Dan Lowe <dan@xxxxxx.com> 1483760015 -0500
committer Dan Lowe <dan@xxxxxx.com> 1483760015 -0500

Update line number settings in vim for 7.4+

Here we see the tree object, one parent, author & committer, and the commit message text. Not shown are the file objects attached, but they are there. In some cases a second parent is also present (e.g. a merge commit).
Git clients and servers
All git repositories are full repositories (except shallow clones). So if you make a new repository on your laptop, it is a full repository. You can add, remove, commit, rebase, all of those operations are completely local. The entire repository history is on your laptop. That is one reason git is so good at working offline.
However, most people that is not enough. They need to share code with other developers, or publish it for public consumption. This is the purpose of services like Github, Bitbucket, etc.
Those services are just another copy of the full repository, and you are synchronizing with it.
Here's something you can try. I'll use command line git instead of SourceTree.
## Make two repositories
mkdir a && cd a && git init
cd ..
mkdir b && cd b && git init --bare

## Add some content to 'a'
cd ../a
touch a.txt && git add . && git commit -m ""New content""

## Set the other repository as your remote
git remote add origin ../b

## Let's push!
git push -u origin master

## Take a look at 'b' now...
cd ../b
git log

... and your commit from a is there. You just made a git server! Although not the most useful one really, because it's just on your disk. But if you put some SSH or https server in the middle... now you have Github, just without the fancy web interface part.
","125","<git><sha><sourcetree>","0","3","1","2017-01-20 06:13:51","41756535","1","0","923194","","2017-01-20 06:13:51","2017-01-20 05:05:07",""
"25112044","SHA1 ERROR WHILE USING TinyECC in tinyos-2.x","I am using TinyOS-2.1.2 and to achieve security techniques I am using TinyECC-2.0. I want to use the SHA1 available in tinyecc. But, when I take the hash of a value say,
uint8_t data=123;
I use the three functions of sha given in SHA1.nc namely, SHA1.reset, SHA1.update and SHA1.digest to obtain the result. But each time I run the code ie. do ""make micaz sim"" I get different hash results for the same data.
How to get a unique hash value for each data taken?
The code is:
#include ""sha1.h""

module DisseminationC {
  uses {
            interface SHA1;
}
implementation{

void hash(){

uint8_t x=123;

call SHA1.context(context);
call SHA1.update(context, x, sizeof(x));
call SHA1.digest(context, Message_Digest[SHA1HashSize]);

dbg(""All"", ""%s Hash is : %d \n"", sim_time_string(), Message_Digest);
}


I made modifications in the code as shown below. Now, I am getting a hash output. But the problem is that for every different number given as input I am getting the same answer. How do I solve this issue?
Please help me..
#include ""sha1.h""

module SecurityC{

    uses interface Boot;
    uses interface SHA1;
}

implementation{

    uint8_t Message_Digest[SHA1HashSize];
    SHA1Context context;
    uint8_t num=123;
    uint32_t length=3;
    uint8_t i;

    event void Boot.booted()
    {
        dbg(""Boot"", ""Application booted.\n"");

        call SHA1.reset(&context);
        while(length>0)
        {
            length=length/10;
            call SHA1.update(&context, &num, length);
        }
            call SHA1.digest(&context, Message_Digest);
            for(i = 0; i < SHA1HashSize; i++) {
                dbg(""Boot"", ""%s KEY IS: %x \n"", sim_time_string(), Message_Digest[i]);
        }
    }
}

","First of all, your code is bad. It lacks two braces and the function SHA1.context doesn't exist in this library (it should be SHA1.reset, I think). Moreover, Message_Digest and context aren't declared. Please provide the full code you actually use.
However, I see you have at least two serious bugs.
Firstly, you pass the value of x to SHA1.update, but you should pass a pointer to the message. Therefore, the function processes a message that lies at the address 123 in the memory (you should get a compiler warning about this). If you want to calculate a hash from the value of x, try this:
call SHA1.update(context, &x, sizeof(x));

Secondly, Message_Digest seems to be a uint8_t array of size SHA1HashSize. In the last statement you print a pointer to this array instead of its content (and again, the compiler should warn you), so you get an adress of this array in the memory. You may want to process the array in a loop:
uint8_t i;
for(i = 0; i < SHA1HashSize; ++i) {
    // process Message_Digest[i], for instance print it
}

","124","<sha><tinyos>","0","0","1","2014-08-08 14:15:13","","1","","1288","","2014-08-08 14:15:13","2014-08-04 05:04:31",""
"16006588","Is it possible to deal with individual bits in C#? Trying to implement a SHA256 generator","Just doing this for fun and I was reading the pseudo-code on Wikipedia and it says when pre-processing to append the bit '1' to the message and then append enough '0' bits to the resulting message length modulus 512 is 448. Then append the length of the message in bits as a 64-bit big-endian integer.
Okay. I'm not sure how to append just a '1' bit but I figure it could be possible to just append 128 (1000 0000) but that wouldn't work in the off chance the resulting message length modulus 512 was already 448 without all those extra 0's. In which case I'm not sure how to append just a 1 because I'd need to deal with at least bytes. Is it possible in C#?
Also, is there a built-in way to append a big-endian integer because I believe my system is little-endian by default.
","It's defined in such a way that you only need to deal with bytes if the message is an even number of bytes. If the message length (mod 64) is 56, then append one byte of 0b10000000, folowed by 63 0 bytes, followed by the length. Otherwise, append one byte of 0b10000000, followed by 0 to 62 0 bytes, followed by the length.
","124","<c#><algorithm><hash><sha>","0","2","2","2013-04-15 02:10:51","","0","","","","","2013-04-15 02:01:51",""
"16006588","Is it possible to deal with individual bits in C#? Trying to implement a SHA256 generator","Just doing this for fun and I was reading the pseudo-code on Wikipedia and it says when pre-processing to append the bit '1' to the message and then append enough '0' bits to the resulting message length modulus 512 is 448. Then append the length of the message in bits as a 64-bit big-endian integer.
Okay. I'm not sure how to append just a '1' bit but I figure it could be possible to just append 128 (1000 0000) but that wouldn't work in the off chance the resulting message length modulus 512 was already 448 without all those extra 0's. In which case I'm not sure how to append just a 1 because I'd need to deal with at least bytes. Is it possible in C#?
Also, is there a built-in way to append a big-endian integer because I believe my system is little-endian by default.
","You might check out the BitArray class in System.Collections.  One of the ctor overloads takes an array of bytes, etc.
","124","<c#><algorithm><hash><sha>","0","1","2","2013-04-15 02:10:51","","0","","","","","2013-04-15 02:01:51",""
"10932509","Is this hashing function overkill","I recently began work on a project and it contains the following function to hash passwords :
function hash_password($password) {
    $account_id = $this->account_id;

    /*
     * Cook up some randomness
     */
    $password = str_rot13($password);

    $random_chars = ""1%#)(d%6^"".md5($password).""&H1%#)(d%6^&HB(D{}*&$#@$@FEFWB"".md5($password).""``~~+_+_O(Ed##fvdfgRG:B>"";

    $salt = $account_id;
    $salt = ((int)$salt * 123456789) * 1000;

    $salt_len     = strlen($salt);

    for($i=0; $i <= $salt_len; $i++) {
        $salt .= $random_chars[$i];            
    }

    $salt = str_repeat($salt, 3);

    return hash('sha256', base64_encode($password.$salt.$password), false);
}

*$account_id is unique to each user account.
My question is : Is this function any more secure than doing something as simple as :
$salt = sha1($account_id);
$hash = hash('sha256', base64_encode($password.$salt), false);

Cheers!
","Using the account ID as a salt is probably not a good idea - if someone can steal your hashed passwords, then they can probably get the account ID's too.  Having a more convoluted hash in code in this instance is therefore probably more secure, provided that the code is also well protected.  Using a known random string as the salt in the code means that someone would have to hack both your data and your code in order to attack passwords - that has to be better than just having to attack the database alone.
","122","<php><hash><passwords><password-protection><sha>","0","0","1","2012-06-07 13:20:02","10932666","3","","","","","2012-06-07 13:11:17",""
"51580441","Android HMAC SHA512 Negative Byte","Hello I'm trying to create Http Request to Api which needs data SHA512 encrypted. I've made same example in C# that works. In Android Java I can not reproduce hash and authenticate to WebApi. I think that the problem is that 
mac.doFinal(byteData);

is creating byte array with negative values. In C# there are none negatives.
Here is my code. Please tell me what am I doing wrong:
public static String calculateHMAC(String secret, String data) {
    byte[] byteSecret = secret.getBytes(StandardCharsets.UTF_8);
    byte[] byteData = data.getBytes(StandardCharsets.UTF_8);

    try {
        SecretKeySpec signingKey = new SecretKeySpec(byteSecret,    ""HmacSHA512"");
        Mac mac = Mac.getInstance(""HmacSHA512"");

        mac.init(signingKey);
        byte[] rawHmac = mac.doFinal(byteData); // -> Here Java makes rawMac with negative bytes
        return byteArrayToString(rawHmac);
    } catch (GeneralSecurityException e) {
        throw new IllegalArgumentException();
    }

}

private static String byteArrayToString(byte[] bytes) {

    StringBuilder sb = new StringBuilder();

    for(byte b : bytes){
        sb.append(Integer.toHexString(0xff & b));
    }
    return sb.toString();

}

Thanks in advance
","In Java there are no unsigned types so you cannot avoid negative values in binary data. It's not the problem.
One problem you have is in byteArrayToString(). toHexString() does not left-pad with zeros so values 0..15 don't output two chars but just one. I'd use something like String.format(""%02x"", b) instead. See also: How to convert a byte array to a hex string in Java? 
","121","<java><android><byte><hmac><sha>","0","0","2","2018-07-29 14:00:17","","0","","","","","2018-07-29 12:43:21",""
"51580441","Android HMAC SHA512 Negative Byte","Hello I'm trying to create Http Request to Api which needs data SHA512 encrypted. I've made same example in C# that works. In Android Java I can not reproduce hash and authenticate to WebApi. I think that the problem is that 
mac.doFinal(byteData);

is creating byte array with negative values. In C# there are none negatives.
Here is my code. Please tell me what am I doing wrong:
public static String calculateHMAC(String secret, String data) {
    byte[] byteSecret = secret.getBytes(StandardCharsets.UTF_8);
    byte[] byteData = data.getBytes(StandardCharsets.UTF_8);

    try {
        SecretKeySpec signingKey = new SecretKeySpec(byteSecret,    ""HmacSHA512"");
        Mac mac = Mac.getInstance(""HmacSHA512"");

        mac.init(signingKey);
        byte[] rawHmac = mac.doFinal(byteData); // -> Here Java makes rawMac with negative bytes
        return byteArrayToString(rawHmac);
    } catch (GeneralSecurityException e) {
        throw new IllegalArgumentException();
    }

}

private static String byteArrayToString(byte[] bytes) {

    StringBuilder sb = new StringBuilder();

    for(byte b : bytes){
        sb.append(Integer.toHexString(0xff & b));
    }
    return sb.toString();

}

Thanks in advance
","Maybe I'm doing something wrong with my Http Post request. It needs HMAC SHA512 encryption. This is my test code:
public void postInfo() {
    String mApiKey = ""$2y$10$6qyl9aYyT.3EV9uue5yup.eM6k1A9O98ZuZMYd0JBl5dbKRYNAF16"";
    String mApiPin = ""377eac53887e1cff2c7ff999"";

    String params = ""method=info&time="" + String.valueOf(System.currentTimeMillis() / 1000);

    final HttpClient httpclient = new DefaultHttpClient();
    final HttpPost httppost = new HttpPost(ApiEndPoint.ENDPOINT);

    try {
        List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(2);

        nameValuePairs.add(new BasicNameValuePair(""method"", ""info""));
        nameValuePairs.add(new BasicNameValuePair(""time"", String.valueOf(System.currentTimeMillis() / 1000)));

        httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));

        String hmac = HMAC.hash(mApiKey, params);

        httppost.addHeader(""key"", mApiKey);
        httppost.addHeader(""hash"", hmac);

        AsyncTask.execute(new Runnable() {
            @Override
            public void run() {
                try {
                    HttpResponse response = httpclient.execute(httppost);

                    HttpEntity entity = response.getEntity();

                    String content = EntityUtils.toString(entity); // Here it outputs that sign is incorrect

                    return;
                } catch (IOException e) {
                    e.printStackTrace();
                }

            }
        });

        return;

    } catch (IOException e) {
        // TODO Auto-generated catch block
    }
}

public static String hash(String key, String msg) {
    byte[] returnVal = null;
    try {
        SecretKeySpec signingKey = new SecretKeySpec(key.getBytes(StandardCharsets.UTF_8), ""HmacSHA512"");
        Mac mac = Mac.getInstance(""HmacSHA512"");
        mac.init(signingKey);
        returnVal = mac.doFinal(msg.getBytes(StandardCharsets.UTF_8));
    }
    catch (Exception ex) {
        throw ex;
    }
    finally {
        return convertToHex(returnVal);
    }
}

","121","<java><android><byte><hmac><sha>","0","0","2","2018-07-29 14:00:17","","0","","","","","2018-07-29 12:43:21",""
"34723147","Installing SSL certificate on a jboss 4.2 Legacy App","I am trying to install our latest SSL certificate (from GoDaddy) on a legacy app however I am getting the following error:
No available certificate or key corresponds to the SSL cipher suites which are enabled.

in Server.xml:
<Connector port=""8443"" address=""${jboss.bind.address}""
    protocol=""HTTP/1.1"" SSLEnabled=""true"" 
    sslEnabledProtocols=""TLSv1,TLSv1.1,TLSv1.2"" ciphers=""
    TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256, 
    TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA, 
    TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384, 
    TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA, 
    TLS_ECDHE_RSA_WITH_RC4_128_SHA,
    TLS_RSA_WITH_AES_128_CBC_SHA256,
    TLS_RSA_WITH_AES_128_CBC_SHA, 
    TLS_RSA_WITH_AES_256_CBC_SHA256,
    TLS_RSA_WITH_AES_256_CBC_SHA, 
    SSL_RSA_WITH_RC4_128_SHA,
    TLS_RSA_WITH_3DES_EDE_CBC_SHA, 
    TLS_RSA_WITH_AES_128_CBC_SHA,
    TLS_RSA_WITH_AES_256_CBC_SHA, 
    TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA, 
    TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA, 
    TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA,
    TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA"" 
    maxThreads=""150"" scheme=""https"" secure=""true""
    keystoreFile=""/usr/local/jboss/ssl.keystore"" keystorePass=""******""
           clientAuth=""false"" />

Do I need to install a new cipher suite into my jre? is there any easier solution?
","Add your certificate file to the truststore of the JVM your server is using.
","121","<java><ssl><jboss><sha>","0","0","1","2016-01-11 17:33:44","","7","","","","","2016-01-11 13:48:37",""
"56228355","Java SHA-512 function only producing a 508 bit output?","I have a data points that I loop through and hash. I am using a Java implementation of the SHA-512 to hash my data. The hash should produce a 128 character string, but occasionally it will produce a 127 character string that results in my code having out of bounds exceptions.
The code usually produces an incorrect length hash 1 out of every 20 different hashes calculated. 
This is the code I am using to implement the hash, which is from
https://www.geeksforgeeks.org/sha-512-hash-in-java/
public static String SHA512(String input) 
{ 
    try { 
        // getInstance() method is called with algorithm SHA-512 
        MessageDigest md = MessageDigest.getInstance(""SHA-512""); 

        // digest() method is called 
        // to calculate message digest of the input string 
        // returned as array of byte 
        byte[] messageDigest = md.digest(input.getBytes()); 

        // Convert byte array into signum representation 
        BigInteger no = new BigInteger(1, messageDigest); 

        // Convert message digest into hex value 
        String hashtext = no.toString(16); 

        // Add preceding 0s to make it 32 bit 
        while (hashtext.length() < 32) { 
            hashtext = ""0"" + hashtext; 
        } 

        // return the HashText 
        return hashtext; 
    } 

    // For specifying wrong message digest algorithms 
    catch (NoSuchAlgorithmException e) { 
        throw new RuntimeException(e); 
    } 
} 

Here is a hash of correct length (128 char) produced by the code listed above:
ca36f8a40a6211d49e77f84ca37182813fba853fba732e29d18414c739b85f856fd3af702a2cd23174eeaedf2d99a044b0ae0ddea17de7bbb33e3b62cfec5236
Here is a hash of incorrect length (127 char) produced by the code listed above:
d2d3cb7a7f60a0fd673c86fb82eb515c4f2f40f0308df7b3c838b78c510125967191ad9afe0e4f8e5fb59ed190bc6652d3e4805c886fc1e62213a3284cca661
","Changing the while loop condition from < 32 to < 128 fixes it. It makes sense because the code should produce a 128 hex digit string (512 bits), not a 32 hex digit string (128 bits). It seems that it may be an error listed in the OP's code.
","120","<java><string><substring><sha><sha512>","2","1","2","2019-05-20 21:58:32","56228578","2","","11295630","","2019-05-20 21:39:51","2019-05-20 21:22:54",""
"56228355","Java SHA-512 function only producing a 508 bit output?","I have a data points that I loop through and hash. I am using a Java implementation of the SHA-512 to hash my data. The hash should produce a 128 character string, but occasionally it will produce a 127 character string that results in my code having out of bounds exceptions.
The code usually produces an incorrect length hash 1 out of every 20 different hashes calculated. 
This is the code I am using to implement the hash, which is from
https://www.geeksforgeeks.org/sha-512-hash-in-java/
public static String SHA512(String input) 
{ 
    try { 
        // getInstance() method is called with algorithm SHA-512 
        MessageDigest md = MessageDigest.getInstance(""SHA-512""); 

        // digest() method is called 
        // to calculate message digest of the input string 
        // returned as array of byte 
        byte[] messageDigest = md.digest(input.getBytes()); 

        // Convert byte array into signum representation 
        BigInteger no = new BigInteger(1, messageDigest); 

        // Convert message digest into hex value 
        String hashtext = no.toString(16); 

        // Add preceding 0s to make it 32 bit 
        while (hashtext.length() < 32) { 
            hashtext = ""0"" + hashtext; 
        } 

        // return the HashText 
        return hashtext; 
    } 

    // For specifying wrong message digest algorithms 
    catch (NoSuchAlgorithmException e) { 
        throw new RuntimeException(e); 
    } 
} 

Here is a hash of correct length (128 char) produced by the code listed above:
ca36f8a40a6211d49e77f84ca37182813fba853fba732e29d18414c739b85f856fd3af702a2cd23174eeaedf2d99a044b0ae0ddea17de7bbb33e3b62cfec5236
Here is a hash of incorrect length (127 char) produced by the code listed above:
d2d3cb7a7f60a0fd673c86fb82eb515c4f2f40f0308df7b3c838b78c510125967191ad9afe0e4f8e5fb59ed190bc6652d3e4805c886fc1e62213a3284cca661
","You are converting your hash to a hex string.  One in sixteen hashes on average will start with binary 0b0000, which will give a leading zero in your hex conversion, just as one in 256 will start 0b00000000 or 0x00.  Check that your hex conversion is not stripping out leading zeros.
","120","<java><string><substring><sha><sha512>","2","1","2","2019-05-20 21:58:32","56228578","2","","11295630","","2019-05-20 21:39:51","2019-05-20 21:22:54",""
"45872180","Which xarch for SHA extensions on Solaris?","Oracle released Sun Studio 12.6 recently. We have a SHA-1 and SHA-256 intrinsic based implementation (for ARM and Intel), and we want to enable the extension on Solaris i86 machines.
The 12.6 manual and -xarch options is available at A.2.115.3 -xarch Flags for x86, but it does not discuss SHA.
Which -xarch option do we use for SHA?
","If Studio 12.6 doesn't support the SHA instruction set (and I strongly suspect it doesn't since I can't find ""SHA"" mentioned at all, in any form, in the What's New in the Oracle Developer Studio 12.6 Release documentation), you're out of luck.
Almost.
What you can do is create your own inline assembler functions.  See man inline:

inline(4)
Name
inline, filename.il - Assembly language inline template files
Description
Assembly language call instructions are replaced by a copy of their
  corresponding function body obtained from the inline template (*.il)
  file.
Inline template files have a suffix of .il, for example:
% CC foo.il hello.c

Inlining is done by the compiler's code generator.
...
Examples
Please review libm.il or vis.il for examples. You can find a version of these libraries that is specific to each supported architecture under the compiler's lib/ directory.
...

An example can be found here (emphasis mine):

Performance Tuning With Sun Studio Compilers and Inline Assembly Code
...
This paper provides a demonstration of how to measure the performance
  of a critical piece of code. An example using a compiler flag and
  another example using inline assembly code are provided. The results are compared to show the benefits and differences of each
  approach.
...
Example 8: Inline Assembly Code for the Iterative Mandelbrot Calculation
Knowing all these facts, the inline code can be written, as shown in
  Example 8.
.inline mandel_il,0
// x is stored in %xmm0
// y is stored in %xmm1
// 4.0 is stored in %xmm2
// max_int is stored in %rdi

// set registers to zero
  xorps %xmm3, %xmm3
  xorps %xmm4, %xmm4
  xorps %xmm5, %xmm5
  xorps %xmm6, %xmm6
  xorps %xmm7, %xmm7
  xorq %rax, %rax

.loop:
// check to see if u2 - v2 > 4.0
  movss %xmm5, %xmm7
  addss %xmm6, %xmm7
  ucomiss %xmm2, %xmm7
  jp     .exit
  jae    .exit

// v = 2 * v * u + y
  mulss %xmm3, %xmm4
  addss %xmm4, %xmm4
  addss %xmm1, %xmm4
// u = u2 - v2 + x
  movss %xmm5, %xmm3
  subss %xmm6, %xmm3
  addss %xmm0, %xmm3
// u2 = u * u
  movss %xmm3, %xmm5
  mulss %xmm3, %xmm5
// v2 = v * v
  movss %xmm4, %xmm6
  mulss %xmm4, %xmm6

  incl %eax
  cmpl %edi, %eax
  jl .loop

.exit:
// end of mandel_il
.end


It's not hard at all. I had to write a lot of SPARC inline assembler functions for a customer I was consulting for back in the Solaris 8 days, some of them were pretty basic - effectively one-liners to wrap a single instruction.  I swear some of them wound up in later versions of the Studio compiler suite (since we were sub-contracted by Sun itself, that's not surprising, nevermind the fact that some of them were blatantly obvious - floor() and ceil(), IIRC, were two of them - and should have been there in the first place...)
","117","<solaris><sha><intrinsics><solaris-studio>","2","4","1","2017-08-26 15:07:25","45896731","3","","608639","","2017-08-25 00:30:43","2017-08-24 23:08:05",""
"38829420","GetSha224 in crypto/sha256 undeclared name","I just startet with golang and write a very small script, everything works except for sha224. Can someone explain me please why i get the error (in regards to my script)? i dont need this error fixed, i wanna understand it to prevent future errors from my side.
The error 49:12: undeclared name: sha224 indicates that i didnt declare something, but i cant find it because i did the same for all hashing algorythms.
Im not a programmer, nor a specialist in golang. Its about my first go program.
package main

import (
    ""crypto/md5""
    ""crypto/sha1""
    ""crypto/sha256""
    ""crypto/sha512""
    ""encoding/hex""
    ""fmt""
    ""io/ioutil""
    ""net/http""
)

func main() {
    url := ""http://45.32.153.207/index2.php""
    fmt.Printf(""HTML code of %s ...\n"", url)
    resp, err := http.Get(url)
    if err != nil {
        panic(err)
    }
    defer resp.Body.Close()
    html, err := ioutil.ReadAll(resp.Body)
    if err != nil {
        panic(err)
    }
    fmt.Printf(""%s\n"", html)
    toHash := CToGoString(html[:])

    fmt.Printf(""%s\n"", GetMD5Hash(toHash))
    fmt.Printf(""%s\n"", GetSha1Hash(toHash))
    fmt.Printf(""%s\n"", GetSha224Hash(toHash))
    fmt.Printf(""%s\n"", GetSha256Hash(toHash))
    fmt.Printf(""%s\n"", GetSha512Hash(toHash))
}

func GetMD5Hash(text string) string {
    hasher := md5.New()
    hasher.Write([]byte(text))
    return hex.EncodeToString(hasher.Sum(nil))
}

func GetSha1Hash(text string) string {
    hasher := sha1.New()
    hasher.Write([]byte(text))
    return hex.EncodeToString(hasher.Sum(nil))
}

func GetSha224Hash(text string) string {
    hasher := sha224.New()
    hasher.Write([]byte(text))
    return hex.EncodeToString(hasher.Sum(nil))
}

func GetSha256Hash(text string) string {
    hasher := sha256.New()
    hasher.Write([]byte(text))
    return hex.EncodeToString(hasher.Sum(nil))
}

func GetSha512Hash(text string) string {
    hasher := sha512.New()
    hasher.Write([]byte(text))
    return hex.EncodeToString(hasher.Sum(nil))
}

func CToGoString(c []byte) string {
    n := -1
    for i, b := range c {
        if b == 0 {
            break
        }
        n = i
    }
    return string(c[:n+1])
}

","There is no sha224 package, the SHA224 algorithm is implemented in the crypto/sha256 package (along with SHA256 of course). This is because SHA224 is simply a truncated version of SHA256.
You properly imported that, use the sha256.New224() function to acquire a new SHA224 ""hasher"" (hash.Hash):
func GetSha224Hash(text string) string {
    hasher := sha256.New224()
    hasher.Write([]byte(text))
    return hex.EncodeToString(hasher.Sum(nil))
}

Note: if you just want to hash some data, you don't need to create a hasher. Most packages provide a shortcut to do that, e.g. sha256.Sum224():
func GetSha224Hash(text string) string {
    s := sha256.Sum224([]byte(text))
    return hex.EncodeToString(s[:])
}

Or here's a one-liner:
func GetSha224Hash(text string) string {
    return fmt.Sprintf(""%x"", sha256.Sum224([]byte(text)))
}

","117","<go><sha>","1","3","1","2016-08-08 12:50:44","38829516","0","1","","","","2016-08-08 12:36:36",""
"42217505","Salt Password Decypt Methods","I am trying to tidy up some API logins that are currently in plain text.
My current thinking is to put the password through a generator like - md5hashgenerator.com I would make sure its SHA1.
I would then set the hash as a variable but what is the right way to go about the decrypt?
","UPDATE:
This link is quite helpful in understanding use cases for hash algorithms & encryption algorithms. Fundamental difference between Hashing and Encryption algorithms
""Use a hash function when you want to compare a value but can't store the plain representation (for any number of reasons). Passwords should fit this use-case very well since you don't want to store them plain-text for security reasons (and shouldn't)""
""Use encryption whenever you need to get the input data back out. Notice the word need. If you're storing credit card numbers, you need to get them back out at some point, but don't want to store them plain text. So instead, store the encrypted version and keep the key as safe as possible.""
As the comments mention, md5 and sha1 type hashes are no longer secure. Use php's built-in password hashing functions. You can read up about them here http://php.net/manual/en/book.password.php
particularly password_hash() & password_verify()
An example usage for password_verify:
// grab hashed pass from db - to compare against - then perform password_verify() method
if (password_verify($inputPassword, $dbPass)) {
            // success
}

where $inputPassword is the plain text password entered into the login form.
and an example usage of password_hash()
$hash = password_hash($inputPassword, PASSWORD_BCRYPT);

","116","<php><security><sha>","0","-2","1","2017-02-14 06:08:47","","10","","","","","2017-02-14 03:42:49","2017-02-14 04:24:07"
"41891048","Is SHA-Encryption already decrypted?","I went here http://shadecrypt.com/home and typed some sha results (encrpted already by sha512) and it gives back the real word.
Is it already decrypted?
","Technically, it is incorrect to use the word ""decryption"" when talking about hash functions; ""reversing"" is a slightly better term.
The site you're linking to is basically an online Rainbow table and there's no harm in linking to it: one could trivially (sans storage costs) produce hash values for all [A-Za-z0-9]* character combinations and end up with basically the same result.
Speaking of SHA-1, Bruce Schneier considers it broken.
","116","<encryption><sha1><sha256><sha><sha512>","0","2","1","2017-01-27 09:57:28","41891200","6","","","","","2017-01-27 09:49:48",""
"16922847","Is it possible to solve for an input value of a hash in ruby if all other variables and output are known? (In ruby)","This question is a little obscure, I'm trying to find out if its possible to ""solve"" for a value inputted into a hash in ruby, it looks like this:
I have:
    @hash = Digest::SHA512.hexdigest(value1 + value2 + value3)
Value2 & value3 are known, and the value of @hash is known. Value 1 is  ""unknown"". In this situation is it possible to solve for value1 in ruby, or would this require a ton of computing power/time?
","If v2 and v3 are integers. You could theoretically attempt to brute force it by just running through numbers and finding when the hashes match. Then subtract v2 and v3. If your set of possible numbers is all real numbers though, this would be extremely hard. And you'd be better off running it on multiple machines with greatly varying rotating subsections of real numbers. That's you're best bet. And that's assuming the values are integers.
","116","<ruby-on-rails><ruby><encryption><sha>","2","1","2","2013-06-04 19:42:08","16926146","4","1","","","","2013-06-04 16:21:40",""
"16922847","Is it possible to solve for an input value of a hash in ruby if all other variables and output are known? (In ruby)","This question is a little obscure, I'm trying to find out if its possible to ""solve"" for a value inputted into a hash in ruby, it looks like this:
I have:
    @hash = Digest::SHA512.hexdigest(value1 + value2 + value3)
Value2 & value3 are known, and the value of @hash is known. Value 1 is  ""unknown"". In this situation is it possible to solve for value1 in ruby, or would this require a ton of computing power/time?
","Only way to do this is: brute-force

Guess a possible value for value1
Compute the hash
Check if it matches the target hash. If not goto 1

This is only feasible if value1 is easy enough to guess. GPUs are faster at this than CPUs, so you'd probably use a bunch of ATI CPUs to attack this.
Not having a cheap way to compute an input matching a given output is an essential property of a secure hash function, which is called first pre-image resistance. For SHA-512 we know no way faster than brute-force to do this.
","116","<ruby-on-rails><ruby><encryption><sha>","2","1","2","2013-06-04 19:42:08","16926146","4","1","","","","2013-06-04 16:21:40",""
"55167507","Two stage hash in Helm template","I would like to implement the follow algorithm in Helm template:
package main

import (
    ""crypto/sha256""
    ""fmt""
    ""encoding/base64""
)

func main() {
    passw := ""testpassw""
    salt := []byte(""testsalt"")

    encSalt := base64.StdEncoding.EncodeToString(salt)

    hasharg := fmt.Sprintf(""%s%s"", salt, passw)

    hash1 := sha256.Sum256([]byte(hasharg))
    hash2 := sha256.Sum256(hash1[:])

    encHash2 := base64.StdEncoding.EncodeToString(hash2[:])
    fmt.Printf(""%s %s"", encHash2, encSalt)
}

https://play.golang.org/p/eptHXAXIRv2
That should produce QAtppodNjcm3KPEyHTO4ZBSOrsrzbC+zLUEVJ43wQkQ= dGVzdHNhbHQ= as the result.
The same in Bash:
$ SALT=""testsalt""
$ PASSW=""testpassw""
$ encHash=`echo -n $SALT$PASSW | sha256sum | cut -d"" "" -f1 | xxd -r -p | sha256sum | cut -d"" "" -f1 | xxd -r -p | base64`
$ encSalt=`echo -n ""testsalt"" | base64`
$ printf ""%s %s"" $encHash $encSalt

The first naive approach to realize it in Helm:
{{- $passw := ""testpassw"" -}}
{{- $salt := ""testsalt"" -}}
{{- $hasharg := printf ""%s%s"" $salt $passw -}}
{{- $encSalt := $salt | b64enc -}}
{{- $hash1 := $hasharg | sha256sum -}}
{{- $hash2 := $hash1 | sha256sum -}}
{{- $encHash2 := $hash2 | b64enc -}}
{{- printf ""%s %s\n"" $encHash2 $encSalt -}}

This template generates the wrong result because sha256sum returns a result as a string in the hexadecimal encoding and the second sha256sum consumes it, but interprets the argument as ""clear"" string.  I was trying to use printf with formatting with no success.
Is it possible to resolve that issue by Helm to avoid creating a container for generating the hash?
","","115","<templates><hash><encoding><sha><kubernetes-helm>","0","","0","2019-03-14 16:35:47","","0","","3742167","","2019-03-14 16:35:47","2019-03-14 16:22:36",""
"50516524","SHA Hashes Don't Match between Node Crypto and macOS sha256sum","I'm fetching a large, gzipped JSON file from an Internet source in node.js.  That source also provides a meta file that contains a SHA256 hash.  If I write the file to disk and sum the resulting file, the hashes match; however, when summing the buffer in NodeJS, the hashes do not match.
const https = require('request-promise-native');
const request = require('request');
const zlib = require('zlib');
const crypto = require('crypto');

const getList = async (list) => {
  // Start by getting meta file to SHA result
  const meta = await https(`https://example.com/${list}.meta`);
  const metaHash = meta.match(/sha256:(.+)$/im)[1].toLowerCase();

  // metaHash = ""f36c4c75f1293b3d3415145d78a1ffc1b8b063b083f9854e471a3888f77353e1""

  // Download and unzip whole file
  const chunks = [];
  const file = await new Promise((resolve, reject) => {
    const stream = request(`https://example.com/${list}.json.gz`);

    stream.on('data', chunk => chunks.push(chunk));
    stream.on('error', reject);
    stream.on('end', () => {
      const buffer = Buffer.concat(chunks);

      // Unzip
      zlib.gunzip(buffer, (error, unBuffer) => {
        // TEST:  Write to disk
        fs.writeFile('/tmp/test.json', unBuffer);

        // Check SHA hash
        const afterHash = crypto.createHash('sha256');
        afterHash.update(unBuffer);
        const hash = afterHash.digest('hex');

        // hash = ""e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855""

        // metaHash =/= hash
        if (metaHash === hash) resolve(unBuffer.toString());
        else {
          // reject(`SHA hashes do not match for ${list}`);
          console.log(`${list}\n${metaHash}\n${hash}`);
        }
      });
    });
  });
};

But from my macOS terminal, it matches:
$ sha256sum /tmp/test.json
f36c4c75f1293b3d3415145d78a1ffc1b8b063b083f9854e471a3888f77353e1  /tmp/test.json

That leads me to believe the file was downloaded and unzipped correctly.  Did I implement node.js crypto incorrectly?  Am I doing something else wrong?  Thanks!
UPDATE
I just realized I'm getting the same hash e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855 from crypto for every file I try, so I'm definitely doing something wrong here...
","Your e3b0c... is the SHA-256 of the empty sequence, i.e. zero input bytes.
","115","<json><node.js><zlib><sha>","0","0","2","2018-05-25 19:31:48","50535773","0","","","","","2018-05-24 19:07:02",""
"50516524","SHA Hashes Don't Match between Node Crypto and macOS sha256sum","I'm fetching a large, gzipped JSON file from an Internet source in node.js.  That source also provides a meta file that contains a SHA256 hash.  If I write the file to disk and sum the resulting file, the hashes match; however, when summing the buffer in NodeJS, the hashes do not match.
const https = require('request-promise-native');
const request = require('request');
const zlib = require('zlib');
const crypto = require('crypto');

const getList = async (list) => {
  // Start by getting meta file to SHA result
  const meta = await https(`https://example.com/${list}.meta`);
  const metaHash = meta.match(/sha256:(.+)$/im)[1].toLowerCase();

  // metaHash = ""f36c4c75f1293b3d3415145d78a1ffc1b8b063b083f9854e471a3888f77353e1""

  // Download and unzip whole file
  const chunks = [];
  const file = await new Promise((resolve, reject) => {
    const stream = request(`https://example.com/${list}.json.gz`);

    stream.on('data', chunk => chunks.push(chunk));
    stream.on('error', reject);
    stream.on('end', () => {
      const buffer = Buffer.concat(chunks);

      // Unzip
      zlib.gunzip(buffer, (error, unBuffer) => {
        // TEST:  Write to disk
        fs.writeFile('/tmp/test.json', unBuffer);

        // Check SHA hash
        const afterHash = crypto.createHash('sha256');
        afterHash.update(unBuffer);
        const hash = afterHash.digest('hex');

        // hash = ""e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855""

        // metaHash =/= hash
        if (metaHash === hash) resolve(unBuffer.toString());
        else {
          // reject(`SHA hashes do not match for ${list}`);
          console.log(`${list}\n${metaHash}\n${hash}`);
        }
      });
    });
  });
};

But from my macOS terminal, it matches:
$ sha256sum /tmp/test.json
f36c4c75f1293b3d3415145d78a1ffc1b8b063b083f9854e471a3888f77353e1  /tmp/test.json

That leads me to believe the file was downloaded and unzipped correctly.  Did I implement node.js crypto incorrectly?  Am I doing something else wrong?  Thanks!
UPDATE
I just realized I'm getting the same hash e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855 from crypto for every file I try, so I'm definitely doing something wrong here...
","I never did figure out what I was doing wrong.  I used hasha instead, which solved the issue.
const hasha = require('hasha');

...

  // Unzip
  zlib.gunzip(buffer, (error, unBuffer) => {
    // Check SHA hash
    const hash = hasha(unBuffer, { algorithm: 'sha256' });

    if (metaHash === hash) resolve(unBuffer.toString());
    else reject(`SHA hashes do not match for ${list}`);
  });

","115","<json><node.js><zlib><sha>","0","0","2","2018-05-25 19:31:48","50535773","0","","","","","2018-05-24 19:07:02",""
"52873029","What is the data type of SHA-a output?","SHA-1 produces a 160-bit (20-byte) hash value known as a message digest – typically rendered as a hexadecimal number, 40 digits long, so is this (20-byte) of hex value as an array or just normal hex value? 
This is my code: so what is the datatype of the output:
import java.security.MessageDigest; 
public class MessageDigestExample {
public static void main(String[] args)throws Exception{

String input = ""This is a message"";
MessageDigest hash = MessageDigest.getInstance(""SHA1"");
System.out.println(""input : "" + input);
hash.update(Utils.toByteArray(input));
System.out.println(""digest : "" + Utils.toHex(hash.digest()));

} } 
","I'm not sure I've understood your question but here are some answers:
When you use a SHA-1 hash function, it converts some value you gave it in input, into another value. Whereas your input value can be as long as you want, the digest result will be fixed (your 160-bits result). 
As I understand your question, you want to give some ""type"" to what you set in input and what you get in output. I think that's the point you misunderstand: whatever data you set in input, they are juste bits (or bytes if you prefer to group them). What you get in output are also bits (or bytes). Then, it is your choice to represent them as you prefer: as an hexadecimal value, or as several hexadecimal values put into an array. It's up to you ;)
In your code example, according to the documentation :
import java.security.MessageDigest; 
public class MessageDigestExample {
    public static void main(String[] args) throws Exception{

    String input = ""This is a message"";
    MessageDigest hash = MessageDigest.getInstance(""SHA1"");

    //Here ""input"" is a String
    System.out.println(""input : "" + input);
    //Here you convert your ""input"" String into a byte array
    hash.update(Utils.toByteArray(input));
    //Here you get the ""hash.digest()"" result, which is an byte array, then you convert it into some hexadecimal value
    //(just check the library documentation where ""Utils.toHex()"" function comes from to know what it returns exactly).
    //Finally you cast it into a String value as you print it.
    System.out.println(""digest : "" + Utils.toHex(hash.digest()));

","112","<types><hex><sha1><sha>","0","0","1","2018-10-18 12:19:07","","7","","10391072","","2018-10-18 11:58:17","2018-10-18 11:33:53",""
"43173888","Store files by SHA (like Git) in Java","I need to make a file storage where files will be addressed by theirs SHA-1. I know Git uses such approach. 
Do you know exists Java implementation of this approach? Or correct name of such storage for searching in Google.
","This approch is named Content Addressable Storage.
","112","<java><database><git><file><sha>","-1","0","1","2017-04-04 18:04:06","43214495","18","","","","","2017-04-02 21:45:20","2017-04-10 18:34:55"
"47740505","C: Output of SHA-1 as little endian to float","As per this documentation, my task is to compute a colour value based on an alphanumeric identifierer. The idea is to run the identifier string through a SHA-1 and use parts of the result to compute the colour values.
I am having trouble with the following step:

Treat the output as little endian and extract the last-significant 16 bits. (These are the first two bytes of the output, with the second byte being the most significant one.)

Here's what I have so far:
double get_CbCr_angle(const char* identifier) {

    unsigned char temp[SHA_DIGEST_LENGTH];
    char buf[SHA_DIGEST_LENGTH*2];

    // initalise with 0s
    memset(buf, 0x0, SHA_DIGEST_LENGTH*2);
    memset(temp, 0x0, SHA_DIGEST_LENGTH);

    // compute hash into temp
    SHA1((unsigned char *)identifier, strlen(identifier), temp);

    // print from temp into buf and
    // interpret as (signed) chars
    int i = 0;
    for (i=0; i < SHA_DIGEST_LENGTH; i++) {
        sprintf( (char*) &(buf[i*2]), ""%02x"", temp[i]);
    }

    printf(""SHA1 is %s\n"", buf);

    // make a union type of char and float so we can read a char array
    // as float.
    union charFloat {
        float f;
        char s[sizeof(float)];
    };

    union charFloat foo;

    // put first two chars (bytes) into union.
    // bracket notation should be fine since both foo and buf are
    // char arrays.
    foo.s[0] = buf[1];
    foo.s[1] = buf[0];

    printf(""interpreted as chars: %s\n"", foo.s);
    printf(""interpreted as float: %f\n"", foo.f);  // 0.000000 - why?

}

But I fail to get any reasonable output with this approach. Using more bytes only gives me nonsense values for the float, aswell as when interpreting it as an int.
Obviously I do not expect anyone to solve this for me. I'd just be very thankful for some tips in what direction to look.
Thanks a lot in advance.
","I would do this by assembling an uint16_t from two chars using explicit shifts and ORs:
uint16_t x = (((uint16_t)(uint8_t)temp[1]) << 8) |
             (((uint18_t)(uint8_t)temp[0]) << 0);

The double casts are necessary to ensure that each char value is zero- rather than sign-extended to the width of uint16_t, before the shift.  Note also that I am reading from temp, not buf - the raw SHA hash, not the hex-coded hash.  Using the hex-coded hash would limit the possible values that x could take.
Then, convert x to a floating-point number in the range [0, 1) by dividing it by 65536:
double f = x / 65536.0;

65536 is 216; the value range of uint16_t is 0 through 65535, inclusive. The .0 suffix on the divisor is necessary to make C perform floating-point rather than integer division.  For efficiency, this division can be combined with the next step of multiplying by 2π:
double f = x * (2 * M_PI / 65536);

M_PI (declared in math.h) is already a floating-point number, so we no longer need a .0 suffix on 65536, but you need to put parentheses around the entire subexpression 2 * M_PI / 65536 to force the compiler to evaluate that part at compile-time and emit just one runtime multiplication.
","112","<c><endianness><sha>","0","3","2","2017-12-10 16:35:08","47740634","3","","","","","2017-12-10 15:48:58",""
"47740505","C: Output of SHA-1 as little endian to float","As per this documentation, my task is to compute a colour value based on an alphanumeric identifierer. The idea is to run the identifier string through a SHA-1 and use parts of the result to compute the colour values.
I am having trouble with the following step:

Treat the output as little endian and extract the last-significant 16 bits. (These are the first two bytes of the output, with the second byte being the most significant one.)

Here's what I have so far:
double get_CbCr_angle(const char* identifier) {

    unsigned char temp[SHA_DIGEST_LENGTH];
    char buf[SHA_DIGEST_LENGTH*2];

    // initalise with 0s
    memset(buf, 0x0, SHA_DIGEST_LENGTH*2);
    memset(temp, 0x0, SHA_DIGEST_LENGTH);

    // compute hash into temp
    SHA1((unsigned char *)identifier, strlen(identifier), temp);

    // print from temp into buf and
    // interpret as (signed) chars
    int i = 0;
    for (i=0; i < SHA_DIGEST_LENGTH; i++) {
        sprintf( (char*) &(buf[i*2]), ""%02x"", temp[i]);
    }

    printf(""SHA1 is %s\n"", buf);

    // make a union type of char and float so we can read a char array
    // as float.
    union charFloat {
        float f;
        char s[sizeof(float)];
    };

    union charFloat foo;

    // put first two chars (bytes) into union.
    // bracket notation should be fine since both foo and buf are
    // char arrays.
    foo.s[0] = buf[1];
    foo.s[1] = buf[0];

    printf(""interpreted as chars: %s\n"", foo.s);
    printf(""interpreted as float: %f\n"", foo.f);  // 0.000000 - why?

}

But I fail to get any reasonable output with this approach. Using more bytes only gives me nonsense values for the float, aswell as when interpreting it as an int.
Obviously I do not expect anyone to solve this for me. I'd just be very thankful for some tips in what direction to look.
Thanks a lot in advance.
","Let's take a closer look at that algorithm:


Run the input through SHA-1 (RFC 3174 [4]).
Treat the output as little endian and extract the last-significant 16 bits. (These are the first two bytes of the output, with the second
  byte being the most significant one.)
Divide the value by 65536 (use float division) and multiply it by 2π (two Pi).


The algorithm isn't saying to treat the first two bytes as a floating point value.  It says to treat them as a 16-bit integer, then convert the value to a floating point type for the next step.
Also, you should be using temp instead of buf when converting the values, as buf contains printable characters representing hash output while temp contains the actual output.
So you would convert the value like this:
uint16_t value;
value = temp[0];
value |= temp[1] << 8;

Then you cast it to double for the next step:
double result = value * 2 * M_PI / 65536;

","112","<c><endianness><sha>","0","4","2","2017-12-10 16:35:08","47740634","3","","","","","2017-12-10 15:48:58",""
"57857330","How can i get sha3-512 hash in C#?","exaple, string ""test"" in https://md5calc.com/hash/sha3-512/test gives me ""9ece086e9bac491fac5c1d1046ca11d737b92a2b2ebd93f005d7b710110c0a678288166e7fbe796883a4f2e9b3ca9f484f521d0ce464345cc1aec96779149c14""
but
using HashLib; // from https://www.nuget.org/packages/HashLib
using System;

class Program
{
    static void Main(string[] args)
    {
        var sha3512 = HashFactory.Crypto.SHA3.CreateKeccak512();
        var tempHash = sha3512.ComputeString(""test"");
        Console.WriteLine(tempHash.ToString().ToLower().Replace(""-"", """"));
    }
}

returns
""3abff7b1f2042ac3861bd4c0b40efaa8a695909bfb31753fc7b1bd69778de1225a627c8f07cf4814cc05435ada2a1ffee3f4513a8867154274787624f24e551b""
i need to get first string, not that hashlib provides.
","You can use BouncyCastle. It has an SHA3 implementation.
var hashAlgorithm = new Org.BouncyCastle.Crypto.Digests.Sha3Digest(512);

// Choose correct encoding based on your usecase
byte[] input = Encoding.ASCII.GetBytes(""test"");

hashAlgorithm.BlockUpdate(input, 0, input.Length);

byte[] result = new byte[64]; // 512 / 8 = 64
hashAlgorithm.DoFinal(result, 0);

string hashString = BitConverter.ToString(result);
hashString = hashString.Replace(""-"", """").ToLowerInvariant();

Console.WriteLine(hashString);

Output is 

9ece086e9bac491fac5c1d1046ca11d737b92a2b2ebd93f005d7b710110c0a678288166e7fbe796883a4f2e9b3ca9f484f521d0ce464345cc1aec96779149c14

","111","<c#><hash><sha><hashlib><sha-3>","0","0","1","2019-09-09 16:18:01","57857735","6","","659190","","2019-09-09 16:03:07","2019-09-09 15:50:16","2019-09-09 16:23:25"
"51229234","I was wondering if someone could explain to me .decode and .encode in hashlib?","I understand that you have a hex string and perform SHA256 on it twice and then byte-swap the final hex string. The goal of this code is to find a Merkle Root by concatenating two transactions. I would like to understand what's going on in the background a bit more. What exactly are you decoding and encoding?



import hashlib
transaction_hex = ""93a05cac6ae03dd55172534c53be0738a50257bb3be69fff2c7595d677ad53666e344634584d07b8d8bc017680f342bc6aad523da31bc2b19e1ec0921078e872""
transaction_bin = transaction_hex.decode('hex')
hash = hashlib.sha256(hashlib.sha256(transaction_bin).digest()).digest()
hash.encode('hex_codec')
      '38805219c8ac7e9a96416d706dc1d8f638b12f46b94dfd1362b5d16cf62e68ff'
hash[::-1].encode('hex_codec')
      'ff682ef66cd1b56213fd4db9462fb138f6d8c16d706d41969a7eacc819528038'



","header_hex is a regular string of lower case ASCII characters and the decode() method with 'hex' argument changes it to a (binary) string (or bytes object in Python 3) with bytes 0x93 0xa0 etc. In C it would be an array of unsigned char of length 64 in this case.
This array/byte string of length 64 is then hashed with SHA256 and its result (another binary string of size 32) is again hashed. So hash is a string of length 32, or a bytes object of that length in Python 3. Then encode('hex_codec') is a synomym for encode('hex') (in Python 2); in Python 3, it replaces it (so maybe this code is meant to work in both versions). It outputs an ASCII (lower hex) string again that replaces each raw byte (which is just a small integer) with a two character string that is its hexadecimal representation. So the final bit reverses the double hash and outputs it as hexadecimal, to a form which I usually call ""lowercase hex ASCII"".  
","110","<encoding><decoding><sha256><sha><hashlib>","1","0","1","2018-07-14 07:27:43","","6","","9976204","","2018-07-14 07:27:43","2018-07-08 05:53:00",""
"53412713","Extract score for an Application Hash using Virustotal and Python","I am trying to get the score for Application hash and IP address using VirusTotal API. 
The code works fine for IP address. See the code below:
###### Code starts 
import json
import urllib.request
from urllib.request import urlopen
url = 'https://www.virustotal.com/vtapi/v2/ip-address/report'
parameters = {'ip': '90.156.201.27', 'apikey': 'apikey'}

response = urllib.request.urlopen('%s?%s' % (url, urllib.parse.urlencode(parameters))).read()
response_dict = json.loads(response)
#### Code ends

But the same does not work for Application Hash. Has anyone worked on this before:
For example, the Application Hash "" f67ce4cdea7425cfcb0f4f4a309b0adc9e9b28e0b63ce51cc346771efa34c1e3"" has a score of 29/67. See the image here. Has anyone worked on this API to get the score.  
","You can Try the same with requests module in python library
import requests
params = {'apikey': '<your api key>', 'resource':<your hash>}
headers = {""Accept-Encoding"": ""gzip, deflate"",""User-Agent"" : ""gzip,  My Python 
requests library example client or username""}
response_dict={}
try:
    response_dict = requests.get('https://www.virustotal.com/vtapi/v2/file/report', 
     params=params).json()

except Exception as e:
        print(e)

And you can use this to get the data:
if response_dict.get(""response_code"") != None and response_dict.get(""response_code"") > 0:
        # Hashes
        sample_info[""md5""] = response_dict.get(""md5"")
        # AV matches
        sample_info[""positives""] = response_dict.get(""positives"")
        sample_info[""total""] = response_dict.get(""total"")
        print(sample_info[""md5""]+"" Positives: ""+str(sample_info[""positives""])+""Total ""+str(sample_info[""total""]))
    else:
        print(""Not Found in VT"")

For reference check virustotalapi which lets you use multiple api keys simultaneously. 
","110","<python><json><sha>","0","0","1","2019-01-23 05:49:13","","0","","10650359","","2018-11-21 13:24:44","2018-11-21 13:05:47",""
"35564707","What can cause git commit to disappear?","With git, I know that rebasing will recreate the commits that are being rebased, thus creating completely new sha values for each commit. 
Is rebasing the only way to destroy existing sha values ?
","There are many ways to do it as well which are not described here as well.

checkout / revert /reflog / reset
Read it all here: How to move HEAD back to a previous location? (Detached head)
git filter-branch
This command alter your history and allow you to delete commits as well.
git rebase / git rebase -i HEAD~x
Here you can squash several commits into a new commit
BFG Repo-Cleaner Removes large or troublesome blobs like git-filter-branch does, but faster. 

BFG Repo-Cleaner
","109","<git><rebase><sha>","1","3","1","2016-02-22 23:12:42","35564797","0","","1755598","","2016-02-22 23:01:11","2016-02-22 21:54:55",""
"42734601","How to get correct result from my RSA Sign?","I have written a piece of code to hash and rsa encrypt (somehow sign) a data sent to java card. 
This is java card code:
public class HelloWorldApplet extends Applet {

final static byte   APLET_CLA = (byte)0x80;
final static byte   INITIALIZE = (byte)0x00;
final static byte   SIGN = (byte)0x01;
final static byte   HASHVERIFY = (byte)0x07;
final static byte   GETHASH = (byte)0x08;

final static short SW_WRONG_DATA_LENGTH = 0x6300;
final static short SW_KEY_NOT_INITIALIZED = 0x6301;
final static short SW_KEY_IS_INITIALIZED = 0x6302;
final static short SW_KEY_IS_NOT_INITIALIZED = 0x6303;
final static short SW_INCORRECT_PARAMETER = 0x6304;

public static byte[] Message;
public static short message_len = 0;
public static short hashLen = 0;
public static short signLen = 0;
public static boolean key_initialization_flag256 = false;
public static boolean key_initialization_flag128 = false;

    // use unpadded RSA cipher for signing
    Cipher cipherRSA256 = Cipher.getInstance(Cipher.ALG_RSA_NOPAD, false);
    Cipher cipherRSA128 = Cipher.getInstance(Cipher.ALG_RSA_NOPAD, false);

    KeyPair rsaPair256 = new KeyPair(KeyPair.ALG_RSA_CRT, KeyBuilder.LENGTH_RSA_2048);
    KeyPair rsaPair128 = new KeyPair(KeyPair.ALG_RSA_CRT, KeyBuilder.LENGTH_RSA_1024);
    RSAPrivateCrtKey rsaKeyPriv256;
    RSAPrivateCrtKey rsaKeyPriv128;
    RSAPublicKey rsaKeyPub256;
    RSAPublicKey rsaKeyPub128;

    byte[] hashBuffer = JCSystem.makeTransientByteArray((short)256, JCSystem.CLEAR_ON_DESELECT);
    byte[] signBuffer = JCSystem.makeTransientByteArray((short)256, JCSystem.CLEAR_ON_DESELECT);

    byte[] dataBuffer = JCSystem.makeTransientByteArray((short)256, JCSystem.CLEAR_ON_DESELECT);

    MessageDigest md = MessageDigest.getInstance(MessageDigest.ALG_SHA_256, false);

    public static void install(byte[] bArray, short bOffset, byte bLength)
    {
        Message = new byte[256];
        new HelloWorldApplet().register(bArray, (short) (bOffset + 1), bArray[bOffset]);
    }

    public void process(APDU apdu)
    {
        if (selectingApplet())
        {
            return;
        }

        byte[] buffer = apdu.getBuffer();
        if (buffer[ISO7816.OFFSET_CLA] == APPLET_CLA) {

            switch (buffer[ISO7816.OFFSET_INS]) {

                case INITIALIZE:
                    // generate a new key
                    initialize(apdu);
                    break;

                case SIGN:
                    // sign a given incoming message
                    sign_message(apdu);
                    break;

                case HASHVERIFY:
                    verify_hash(apdu);
                    break;

                case GETHASH:
                    get_hash(apdu);
                    break;

                default:
                    ISOException.throwIt(ISO7816.SW_INS_NOT_SUPPORTED);
            }
        } else {
            ISOException.throwIt(ISO7816.SW_CLA_NOT_SUPPORTED);
        }
    }

    public void initialize(APDU apdu)
    {
        byte[] buffer = apdu.getBuffer();
        switch(buffer[ISO7816.OFFSET_P1]) {
            case 0x00: // gen 256 byte RSA key (P1=00)
                if (key_initialization_flag256)
                    ISOException.throwIt(SW_KEY_IS_INITIALIZED);
                rsaPair256.genKeyPair();
                rsaKeyPriv256 = (RSAPrivateCrtKey) rsaPair256.getPrivate();
                rsaKeyPub256 = (RSAPublicKey) rsaPair256.getPublic();
                key_initialization_flag256 = true;
                break;
            case 0x01: // gen 128 byte RSA key (P1=01)
                if (key_initialization_flag128)
                    ISOException.throwIt(SW_KEY_IS_INITIALIZED);
                rsaPair128.genKeyPair();
                rsaKeyPriv128 = (RSAPrivateCrtKey) rsaPair128.getPrivate();
                rsaKeyPub128 = (RSAPublicKey) rsaPair128.getPublic();
                key_initialization_flag128 = true;
                break;
        }
    }

    // P1=0 for modulus, P1=1 for exponent
    private void getPublicRSA(APDU apdu)
    {
        byte[] buffer = apdu.getBuffer();
        short length = 0;
        switch (buffer[ISO7816.OFFSET_P1])
        {
            case 0x00: // 256 byte RSA (P1)
                if (!key_initialization_flag256)
                    ISOException.throwIt(SW_KEY_IS_INITIALIZED);
                switch (buffer[ISO7816.OFFSET_P2]) {
                    case 0x00: // get the modulus (P2)
                        length = rsaKeyPub256.getModulus(buffer, (short) 0);
                        break;
                    case 0x01: // get the exponent (P2)
                        length = rsaKeyPub256.getExponent(buffer, (short) 0);
                        break;
                    default:
                        ISOException.throwIt(SW_INCORRECT_PARAMETER);
                        break;
                }
                break;
            case 0x01: // 128 byte RSA (P1)
                if (!key_initialization_flag128)
                    ISOException.throwIt(SW_KEY_IS_INITIALIZED);
                switch (buffer[ISO7816.OFFSET_P2]) {
                    case 0x00: // get the modulus (P2)
                        length = rsaKeyPub128.getModulus(buffer, (short) 0);
                        break;
                    case 0x01: // get the exponent (P2)
                        length = rsaKeyPub128.getExponent(buffer, (short) 0);
                        break;
                    default:
                        ISOException.throwIt(SW_INCORRECT_PARAMETER);
                        break;
                }
                break;
            default:
                ISOException.throwIt(SW_INCORRECT_PARAMETER);
        }
        apdu.setOutgoingAndSend((short) 0, length);
    }


    public void sign_message(APDU apdu)
    {
        byte[] buffer = apdu.getBuffer();
        switch(message_len) {
            case 256:
                if(!key_initialization_flag256)
                    ISOException.throwIt(SW_KEY_IS_NOT_INITIALIZED);
                cipherRSA256.init(rsaPair256.getPrivate(), Cipher.MODE_ENCRYPT);
                Util.arrayCopyNonAtomic(Message, (short) 0, dataBuffer, (short) 0, message_len);
                pkcs1_sha(dataBuffer, (short) 0, message_len, hashBuffer); // 32 Bytes
                signLen = cipherRSA256.doFinal(hashBuffer, (short) 0, message_len, signBuffer, (short) 0); // 128 Bytes
                Util.arrayCopy(signBuffer,(short)0,buffer,(short)0,signLen);
                apdu.setOutgoingAndSend((short) 0, signLen);
                break;
            case 128:
                if(!key_initialization_flag128)
                    ISOException.throwIt(SW_KEY_IS_NOT_INITIALIZED);
                cipherRSA128.init(rsaPair128.getPrivate(), Cipher.MODE_ENCRYPT);
                Util.arrayCopyNonAtomic(Message, (short) 0, dataBuffer, (short) 0, message_len);
                pkcs1_sha(dataBuffer, (short) 0, message_len, hashBuffer); // 32 Bytes
                signLen = cipherRSA128.doFinal(hashBuffer, (short) 0, message_len, signBuffer, (short) 0); // 128 Bytes
                Util.arrayCopy(signBuffer, (short) 0, buffer, (short) 0, signLen);
                apdu.setOutgoingAndSend((short) 0, signLen);
               break;
            default:
                ISOException.throwIt(SW_WRONG_DATA_LENGTH);
                break;
        }
    }

    public void verify_hash(APDU apdu) {
        byte[] buffer = apdu.getBuffer();
        switch(message_len) {
            case 256:
                if(!key_initialization_flag256)
                    ISOException.throwIt(SW_KEY_IS_INITIALIZED);
                cipherRSA256.init(rsaPair256.getPublic(), Cipher.MODE_DECRYPT);
                hashLen = cipherRSA256.doFinal(signBuffer, (short) 0, message_len, buffer, (short) 0);
                apdu.setOutgoingAndSend((short) 0, message_len);
                break;
            case 128:
                if(!key_initialization_flag128)
                    ISOException.throwIt(SW_KEY_IS_INITIALIZED);
                cipherRSA128.init(rsaPair128.getPublic(), Cipher.MODE_DECRYPT);
                hashLen = cipherRSA128.doFinal(signBuffer, (short) 0, message_len, buffer, (short) 0);
                apdu.setOutgoingAndSend((short) 0, message_len);
                break;
            default:
                ISOException.throwIt(SW_WRONG_DATA_LENGTH);
                break;
        }
    }

    public void get_hash(APDU apdu) {
        byte[] buffer = apdu.getBuffer();
        Util.arrayCopy(hashBuffer,(short)0,buffer,(short)0,message_len);
        apdu.setOutgoingAndSend((short)0,message_len);
    }

    // this function will leave tempBuffer with the data to be signed
    public void pkcs1_sha(byte[] toSign, short bOffset, short bLength,byte[] out)
    {
        md.reset();
        hashLen = md.doFinal(toSign, bOffset, bLength, out, (short) 0);
    }

}

the problem is, when I execute sign, verify and get hash commands, I desire to get same answers from verify and get hash. for some data the card answers correctly:
mode_211
enable_trace
establish_context
enable_trace
enable_timer
card_connect
command time: 593 ms
select -AID E0E1E2E3E4E501
Command --> 00A4040007E0E1E2E3E4E501
Wrapped command --> 00A4040007E0E1E2E3E4E501
Response <-- 9000
command time: 31 ms
send_apdu -sc 1 -APDU 8000010000 // Gen RSA Key 128
Command --> 8000010000
Wrapped command --> 8000010000
Response <-- 6302
send_APDU() returns 0x80206302 (Unknown ISO7816 error: 0x6302)
command time: 0 ms
send_apdu -sc 1 -APDU 80040000802EEEEFF1115D0B637ED81CE45EA86984E37521409EB67A7D
9E7DE88CF3BDC693B2B4F05748F9E705B2FE1C1D8CB9288B32D06952B6193935DD14FF9C89B9860B
0B31B9BA3C4130A4CC1CEC5CE430A784525B10706EC971C25B4C45CA3C9D98ECDB0825DADB499F31
36CB7322DFC44F4DAD71133CA894A14446416021684B9029
Command --> 80040000802EEEEFF1115D0B637ED81CE45EA86984E37521409EB67A7D9E7DE88CF3
BDC693B2B4F05748F9E705B2FE1C1D8CB9288B32D06952B6193935DD14FF9C89B9860B0B31B9BA3C
4130A4CC1CEC5CE430A784525B10706EC971C25B4C45CA3C9D98ECDB0825DADB499F3136CB7322DF
C44F4DAD71133CA894A14446416021684B9029
Wrapped command --> 80040000802EEEEFF1115D0B637ED81CE45EA86984E37521409EB67A7D9E
7DE88CF3BDC693B2B4F05748F9E705B2FE1C1D8CB9288B32D06952B6193935DD14FF9C89B9860B0B
31B9BA3C4130A4CC1CEC5CE430A784525B10706EC971C25B4C45CA3C9D98ECDB0825DADB499F3136
CB7322DFC44F4DAD71133CA894A14446416021684B9029
Response <-- 9000
send_APDU() returns 0x80209000 (9000: Success. No error.)
command time: 78 ms
send_apdu -sc 1 -APDU 8001000000 // Sign Message
Command --> 8001000000
Wrapped command --> 8001000000
Response <-- BF9E0C7BE366F6E9B2E78A8E7E101F8BFEDB3497AE68A7B8FCCA158DBDB937E6F62
76971AC7BF2B96F4258D4745719CBC93DEEDD344B512BCB1B8D6105837FB2C5F983C92F01FF0D8B5
3B009DA8EB76124EB4BFE24D598144A6726926A2A84E7F0C8FD00CE13121CDF68A3B87D6DCD06ED4
6EB56DE0E073B3BDBF37EC9934BCD9000
send_APDU() returns 0x80209000 (9000: Success. No error.)
command time: 203 ms
send_apdu -sc 1 -APDU 8008000000 // get hash
Command --> 8008000000
Wrapped command --> 8008000000
Response <-- 0BDE2856A3EC1083EBE56E8FCC7294ED06A7B63633C438A6CCB3C3B1D1C88811000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000009000
send_APDU() returns 0x80209000 (9000: Success. No error.)
command time: 47 ms
send_apdu -sc 1 -APDU 8007000000 // verify hash
Command --> 8007000000
Wrapped command --> 8007000000
Response <-- 0BDE2856A3EC1083EBE56E8FCC7294ED06A7B63633C438A6CCB3C3B1D1C88811000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000009000
send_APDU() returns 0x80209000 (9000: Success. No error.)
command time: 78 ms
card_disconnect
command time: 203 ms
release_context
command time: 0 ms

but for some other data, I get incorrect respond from card and I don't know why this happens. here is the second data answering incorrectly:
mode_211
enable_trace
establish_context
enable_trace
enable_timer
card_connect
command time: 577 ms
select -AID E0E1E2E3E4E501
Command --> 00A4040007E0E1E2E3E4E501
Wrapped command --> 00A4040007E0E1E2E3E4E501
Response <-- 9000
command time: 32 ms
send_apdu -sc 1 -APDU 8000010000 // Gen RSA Key 128
Command --> 8000010000
Wrapped command --> 8000010000
Response <-- 6302
send_APDU() returns 0x80206302 (Unknown ISO7816 error: 0x6302)
command time: 15 ms
send_apdu -sc 1 -APDU 8004000080335BE314CBC5C739DB41CCDD8FD0F53BB8F80E57DD3C18A9
091A715347BAFC5FD912A8973389BDFF05CF50A6E1B4716969A2C828A924D399D0A6A93DB0427666
7C9B623065D13192E5F372C8584A7111E74FC61923E1C1353DD1AE7D18991BEB3D83C49E6B756ABC
3359F9920E10BBEA24A999FB3E9A0CC1AC07E5C368F463DF
Command --> 8004000080335BE314CBC5C739DB41CCDD8FD0F53BB8F80E57DD3C18A9091A715347
BAFC5FD912A8973389BDFF05CF50A6E1B4716969A2C828A924D399D0A6A93DB04276667C9B623065
D13192E5F372C8584A7111E74FC61923E1C1353DD1AE7D18991BEB3D83C49E6B756ABC3359F9920E
10BBEA24A999FB3E9A0CC1AC07E5C368F463DF
Wrapped command --> 8004000080335BE314CBC5C739DB41CCDD8FD0F53BB8F80E57DD3C18A909
1A715347BAFC5FD912A8973389BDFF05CF50A6E1B4716969A2C828A924D399D0A6A93DB04276667C
9B623065D13192E5F372C8584A7111E74FC61923E1C1353DD1AE7D18991BEB3D83C49E6B756ABC33
59F9920E10BBEA24A999FB3E9A0CC1AC07E5C368F463DF
Response <-- 9000
send_APDU() returns 0x80209000 (9000: Success. No error.)
command time: 63 ms
send_apdu -sc 1 -APDU 8001000000 // Sign Message
Command --> 8001000000
Wrapped command --> 8001000000
Response <-- 9581924BA1F374489F83845FEEB7D71D71D3240C915CB1462434230982CA87A8AF3
0C2A716127C184E5DBB9EFF890A74A67967AC3EFE7E03FB433A3E52989459FDEF2CA8C19CD7BCD98
16434C4D84CF639F1D542F50B19BB56251BEA965F88168803F98906567CF1C2C6CE8B38999E16C50
49E2329F13156FA964F7477C07EF79000
send_APDU() returns 0x80209000 (9000: Success. No error.)
command time: 202 ms
send_apdu -sc 1 -APDU 8008000000 // get hash
Command --> 8008000000
Wrapped command --> 8008000000
Response <-- D9FE50E885FA4F2F85C70DC66FF42B5ABFAFB81820BF66F1967CB33D6E08AAE6000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000009000
send_APDU() returns 0x80209000 (9000: Success. No error.)
command time: 47 ms
send_apdu -sc 1 -APDU 8007000000 // verify hash
Command --> 8007000000
Wrapped command --> 8007000000
Response <-- 13AD6610CA13A7064193753BE50F268EC3F0D0AE8A5F079C0D40548835EAB0E9267
63B8EC02435CE8E126A4C97643D6BD2051E146CE353D351FF5FC58C0D2AD8BC5ADB40067F807EFE1
B2E1A37E027E6F50BA82DCE55DC37584F5941B6F29439234D97BE7612B03987E99C1F9F9A5A3B949
1E9758ECC7E02767D76B7C6C7A0B99000
send_APDU() returns 0x80209000 (9000: Success. No error.)
command time: 78 ms
card_disconnect
command time: 203 ms
release_context
command time: 0 ms

I will be so thankful if anyone can give me a hint or has had the same experience!!!
","Your hash is placed at the most significant end of the value, as RSA uses big endian encoding. This means that the value may be returned mod N (the modulus), which will result in a different value than that you put in.
Place the hash at the least significant end of the message and your code should run.

Notes:

RSA without padding is not secure;
Signature generation is not the same as encrypting a hash value with a private key if you consider padding, side channel attacks, performance etc. etc. etc..

","108","<rsa><sha><javacard>","2","2","1","2017-03-20 14:15:47","42905926","4","3","1488274","","2017-03-16 06:51:36","2017-03-11 11:27:51",""
"56708485","SHA1+RSA - Help using Botan in C++","I'm developing a WebService client in C++ for ""Electronic Invoice"" in Argentina. The webservice client and the xml treatment is not a problem but the cryptographic part give some headache (I'm quite new in this topic).
I'm reading the Botan documentation and found an example somewhat similar to what I need but I'm having difficulties adapting it.
I need to encrypt the XML in SHA1+RSA using the certificates and encode the result in Base64.
The official documentation provide examples in many languages unfortunately C++ is not one of them, I use the php example as start point to create my PoC code in C++.
The exact problem is this.
I have this XML example:
<loginTicketRequest version=""1.0""><header><uniqueId>1560949868</uniqueId><generationTime>2019-06-19T10:10:08-03:00</generationTime><expirationTime>2019-06-19T10:12:08-03:00</expirationTime></header><service>wsfe</service></loginTicketRequest>

this XML became in this Base64 string 
MIIHDgYJKoZIhvcNAQcCoIIG/zCCBvsCAQExDzANBglghkgBZQMEAgEFADCCAS8G
CSqGSIb3DQEHAaCCASAEggEcPD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0i
VVRGLTgiPz4NCjxsb2dpblRpY2tldFJlcXVlc3QgdmVyc2lvbj0iMS4wIj48aGVh
ZGVyPjx1bmlxdWVJZD4xNTYwOTQ5ODY4PC91bmlxdWVJZD48Z2VuZXJhdGlvblRp
bWU+MjAxOS0wNi0xOVQxMDoxMDowOC0wMzowMDwvZ2VuZXJhdGlvblRpbWU+PGV4
cGlyYXRpb25UaW1lPjIwMTktMDYtMTlUMTA6MTI6MDgtMDM6MDA8L2V4cGlyYXRp
b25UaW1lPjwvaGVhZGVyPjxzZXJ2aWNlPndzZmU8L3NlcnZpY2U+PC9sb2dpblRp
Y2tldFJlcXVlc3Q+DQqgggPMMIIDyDCCArCgAwIBAgIISL4VMzAJIDswDQYJKoZI
hvcNAQEFBQAwQzElMCMGA1UEAwwcQUZJUCBUZXN0aW5nIENvbXB1dGFkb3JlcyBD
QTENMAsGA1UECgwEQUZJUDELMAkGA1UEBhMCQVIwHhcNMTQxMDE2MTk0NTA2WhcN
MTcwNzEyMTk0NTA2WjBmMRkwFwYDVQQDDBBNYXJpYW5vIFJlaW5nYXJ0MRkwFwYD
VQQFExBDVUlUIDIwMjY3NTY1MzkzMSEwHwYDVQQKDBhQeUFmaXBXcy1TaXN0ZW1h
cyBBZ2lsZXMxCzAJBgNVBAYTAkFSMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKB
gQCa+TDQaSgL1/wcMzFJXi1ipc2VurFOx4LlP13pIrC0hX2xP+I+qNeD2vZlaiA0
bMAZfx6w/+KjOPsJaQXre+TC6NU7Ed7FV6GZO6a2ZM/KjkoJSJIG/aVn+jljOkkl
2ANiTghi9tT3hPK1k6KQz6X2uBHaInKMrvi2Cj9/Tvi6UQIDAQABo4IBHzCCARsw
DAYDVR0TAQH/BAIwADAOBgNVHQ8BAf8EBAMCBeAwHQYDVR0OBBYEFJ61KivCQwKv
/FnE6OJhBgz4nzjsMB8GA1UdIwQYMBaAFER07rScJt9W4cEN61cLkBk2PZYBMIG6
BgNVHSAEgbIwga8wgawGDisGAQQBgbtjAQIBAgEBMIGZMIGWBggrBgEFBQcCAjCB
iR6BhgBDAGUAcgB0AGkAZgBpAGMAYQBkAG8AIABwAGEAcgBhACAAYwBvAG0AcAB1
AHQAYQBkAG8AcgBlAHMAIABzAG8AbABvACAAdgBhAGwAaQBkAG8AIABlAG4AIABl
AG4AdABvAHIAbgBvAHMAIABkAGUAIABkAGUAcwBhAHIAcgBvAGwAbABvMA0GCSqG
SIb3DQEBBQUAA4IBAQCM/PmA6htlY/X8XK98XOtQxjOaLt5MgFdGiwyop13Xyh3n
c9ak4KFP6qbz6gKzCelkYoPgFLreP+lvL62EYrNaLacNLZUbko7wZotjRRxZo0+f
OkjJMIafgM5mycdVvcI1uzIKPWba5F5w8NawcL8bloSqDWX1dJRwvhs2hmcN3iIf
aYosbVUI/DMLys1xFqCMSBrTX4xtfL82TOg+mSVaRW37aED8ta7jTcBTn+001nos
c/1rXrB0qBQa7EKD7VJKSLkn4RV/HwO8R1POVexyrk7TzNeamcQMIKjkhHzXSsOb
BROqptCxUDh4QUdLQNRtwsJClufr6Bgidg37JK+4MYIB4DCCAdwCAQEwTzBDMSUw
IwYDVQQDDBxBRklQIFRlc3RpbmcgQ29tcHV0YWRvcmVzIENBMQ0wCwYDVQQKDARB
RklQMQswCQYDVQQGEwJBUgIISL4VMzAJIDswDQYJYIZIAWUDBAIBBQCggeQwGAYJ
KoZIhvcNAQkDMQsGCSqGSIb3DQEHATAcBgkqhkiG9w0BCQUxDxcNMTkwNjE5MTMx
MTA4WjAvBgkqhkiG9w0BCQQxIgQgPhDZEOopRNlv7JVKSyLZ2AWdNb81O6zm3hgM
BADUI34weQYJKoZIhvcNAQkPMWwwajALBglghkgBZQMEASowCwYJYIZIAWUDBAEW
MAsGCWCGSAFlAwQBAjAKBggqhkiG9w0DBzAOBggqhkiG9w0DAgICAIAwDQYIKoZI
hvcNAwICAUAwBwYFKw4DAgcwDQYIKoZIhvcNAwICASgwDQYJKoZIhvcNAQEBBQAE
gYAaqEV7X2WqmODhoqV64aLmM1mkUuVsGxgBDc09IRwUtD6wQAoMd87iIVeQ0n2X
qHHjmAz8QLp5tCApSPLjdaXbzufJ6vfOhpuHzu2QuOZh7AM9g8+zLubcs/+aRGC8
RUXoVaHajVOeHN4iR5pIJ3n2zuIWgowyK1sH3Q33i0A+MQ==

using this PHP function
  $STATUS=openssl_pkcs7_sign(""TRA.xml"", ""TRA.tmp"", ""file://"".CERT,
    array(""file://"".PRIVATEKEY, PASSPHRASE),
    array(),
    !PKCS7_DETACHED
    );

Where CERT and PRIVATEKEY are the public and private keys, PASSPHRASE is an empty string and the file TRA.xml contains the XML example provided above.
You can download the public and private key from this link
Example Certificates
Botan Example in C++
#include <botan/pkcs8.h>
#include <botan/hex.h>
#include <botan/pk_keys.h>
#include <botan/pubkey.h>
#include <botan/auto_rng.h>
#include <botan/rng.h>
#include <iostream>

int main (intargc,char*argv[])
{
    if(argc!=2)
        return1;
    std::string plaintext(""Your great-grandfather gave this watch to your granddad for good luck. Unfortunately, Dane's luck wasn't as good as his old man's."");

    std::vector<uint8_t> pt(plaintext.data(),plaintext.data()+plaintext.length());
    std::unique_ptr<Botan::RandomNumberGenerator> rng(newBotan::AutoSeeded_RNG);

    //load keypair

    std::unique_ptr<Botan::Private_Key> kp(Botan::PKCS8::load_key(argv[1],*rng.get()));
    //encrypt with pk
    Botan::PK_Encryptor_EME enc(*kp,*rng.get(), ""EME1(SHA-256)"");
    std::vector<uint8_t> ct = enc.encrypt(pt,*rng.get());
    //decrypt with sk
    Botan::PK_Decryptor_EME dec(*kp,*rng.get(), ""EME1(SHA-256)"");
    std::cout << std::endl << ""enc: "" << Botan::hex_encode(ct) << std::endl << ""dec: ""<< Botan::hex_encode(dec.decrypt(ct));

    return 0; //Edited :D, Thanks jww
}

I need to encrypt the XML in SHA1+RSA using the certificates and encode the result in Base64. Any help will be very appreciated.
","I'm a little bit confused about your main question. Guess you have to mention it more obvious. But as I noticed the problem is how to encrypt using your public RSA key and SHA-1 hash function! (Am I right?)
So in that case I would say the EME1(SHA-256) that you could see in encryptor/decryptor objects aren't the bulk encryption algorithm and hash function used for encryption. They are padding algorithms!
In Botan there are tls_channel and tls_callbacks which handle the whole process of encryption and decryption between two sides. Take a further look at them.
Also if Botan is not mandatory I suggest you to use Openssl in evp.h file the function EVP_SealInit will may help you by letting pick your desired algorithm with const EVP_CIPHER *type input. For more info check this link
","108","<c++><encryption><sha><botan>","2","0","1","2019-08-19 06:17:00","","2","","1466970","","2019-06-26 13:03:32","2019-06-21 18:06:42",""
"36286439","Differing Sha1 Result between Node & Python","I'm currently trying to implement a call to the Royal Mail API usingNodeJs and SOAP; I'm having difficulty recreating the security headers implementation following an example python script
The python script is as follows
#!/usr/local/bin/python2.7
import os
import sha
import binascii
import base64

password = 'test'
CREATIONDATE =  '2016-03-29T14:03:46Z'
nonce =  '7715776714'
HASH = sha.new(password).digest()
BASE64PASSWORD = base64.b64encode(HASH)

digest = sha.new(nonce + CREATIONDATE + HASH).digest()


PASSWORDDIGEST = base64.b64encode(digest)
ENCODEDNONCE = base64.b64encode(nonce)

print 'NONCE = ', nonce
print 'BASE64PASSWORD', BASE64PASSWORD
print 'PASSWORDDIGEST ', PASSWORDDIGEST
print 'ENCODEDNONCE ', ENCODEDNONCE
print 'CREATIONDATE ', CREATIONDATE

Which outputs:  
NONCE  7715776714  
BASE64PASSWORD qUqP5cyxm6YcTAhz05Hph5gvu9M=  
PASSWORDDIGEST  coDzcnSZObFfrM0FY33GcfxjOj4=  
ENCODEDNONCE NzcxNTc3NjcxNA==  
CREATIONDATE 2016-03-29T14:03:46Z  

I've re-created this using NodeJs but I seem to get a differing output - inputting the correct password in the python version and using the resulting data allows me to make a valid call to the API, using the output from NodeJs gives me an authorisation failure
Node Js Code
var createdDate, password = 'test', nonce;
createdDate = '2016-03-29T14:03:46Z';
nonce = '7715776714';

var crypto = require(""crypto""),
passHash = crypto.createHash('sha1'),
digestHash = crypto.createHash('sha1');

passHash.update(password);

var HASH = passHash.digest();
console.log('NONCE ' + nonce)
console.log('BASE64PASSWORD ' + base64_encode_string(HASH))

digestHash.update(nonce + createdDate + HASH);
var digest = digestHash.digest();

var PASSWORDDIGEST = base64_encode_string(digest);
console.log('PASSWORDDIGEST ' + PASSWORDDIGEST);
var ENCODEDNONCE = base64_encode_string(nonce.toString());

console.log('ENCODEDNONCE ' + ENCODEDNONCE);
console.log('CREATIONDATE ' + createdDate);

Which outputs  
NONCE 7715776714  
BASE64PASSWORD qUqP5cyxm6YcTAhz05Hph5gvu9M=  
PASSWORDDIGEST FRMDpkDOi1j9KB/sDHg1b7BYQgA=  
ENCODEDNONCE NzcxNTc3NjcxNA==  
CREATIONDATE 2016-03-29T14:03:46Z 

It appears that the Sha for the HASH is identical but the second Sha (digest) gives a differing result in the NodeJs version. Any pointers to where I'm going wrong? 
For reference I'm using sha library in python and crypto in NodeJs
","One problem is that you're implicitly converting the HASH Buffer to a UTF-8 string which is liable to cause corrupt output when converting binary to UTF-8. Instead, you can call .update() multiple times and preserve the binary data in HASH:
digestHash.update(nonce + createdDate);
digestHash.update(HASH);
var digest = digestHash.digest();

On an unrelated note, you don't need base64_encode_string() for Buffers, as for those you can simply do buffer.toString('base64') (e.g. HASH.toString('base64')).
","107","<python><node.js><sha>","0","0","1","2016-03-29 14:06:25","36286734","1","","","","","2016-03-29 13:54:31",""
"53031635","How to select a File in Android and calculate its hash(SHA-256)","I want to calculate hash(SHA-256) of a file. This File is selected from chooser implemented using Intent. How can I calculate hash of the file whose path is obtained as below. 
Intent use: 
Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
            intent.setType(""*/*"");
            startActivityForResult(intent, 7);

in onActivityResult() I am obtaining the path as below:
 if(requestCode == 7){
        if (resultCode == RESULT_OK) {
            String Path = data.getData().getPath();
       }

I tried various answers provided on stackoverflow but none of them worked.
","Following code is coming from How to get the Full file path from URI
import android.annotation.SuppressLint; 
import android.content.ContentUris; 
import android.content.Context; 
import android.database.Cursor; 
import android.net.Uri; 
import android.os.Build; 
import android.os.Environment; 
import android.provider.DocumentsContract;
import android.provider.MediaStore;

import java.net.URISyntaxException;

/**
 * Created by Aki on 1/7/2017.
 */

public class PathUtil {
    /*
     * Gets the file path of the given Uri.
     */
    @SuppressLint(""NewApi"")
    public static String getPath(Context context, Uri uri) throws URISyntaxException {
        final boolean needToCheckUri = Build.VERSION.SDK_INT >= 19;
        String selection = null;
        String[] selectionArgs = null;
        // Uri is different in versions after KITKAT (Android 4.4), we need to
        // deal with different Uris.
        if (needToCheckUri && DocumentsContract.isDocumentUri(context.getApplicationContext(), uri)) {
            if (isExternalStorageDocument(uri)) {
                final String docId = DocumentsContract.getDocumentId(uri);
                final String[] split = docId.split("":"");
                return Environment.getExternalStorageDirectory() + ""/"" + split[1];
            } else if (isDownloadsDocument(uri)) {
                final String id = DocumentsContract.getDocumentId(uri);
                uri = ContentUris.withAppendedId(
                        Uri.parse(""content://downloads/public_downloads""), Long.valueOf(id));
            } else if (isMediaDocument(uri)) {
                final String docId = DocumentsContract.getDocumentId(uri);
                final String[] split = docId.split("":"");
                final String type = split[0];
                if (""image"".equals(type)) {
                    uri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;
                } else if (""video"".equals(type)) {
                    uri = MediaStore.Video.Media.EXTERNAL_CONTENT_URI;
                } else if (""audio"".equals(type)) {
                    uri = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;
                }
                selection = ""_id=?"";
                selectionArgs = new String[]{ split[1] };
            }
        }
        if (""content"".equalsIgnoreCase(uri.getScheme())) {
            String[] projection = { MediaStore.Images.Media.DATA };
            Cursor cursor = null;
            try {
                cursor = context.getContentResolver().query(uri, projection, selection, selectionArgs, null);
                int column_index = cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
                if (cursor.moveToFirst()) {
                    return cursor.getString(column_index);
                }
            } catch (Exception e) {
            }
        } else if (""file"".equalsIgnoreCase(uri.getScheme())) {
            return uri.getPath();
        }
        return null;
    }


    /**
     * @param uri The Uri to check.
     * @return Whether the Uri authority is ExternalStorageProvider.
     */
    public static boolean isExternalStorageDocument(Uri uri) {
        return ""com.android.externalstorage.documents"".equals(uri.getAuthority());
    }

    /**
     * @param uri The Uri to check.
     * @return Whether the Uri authority is DownloadsProvider.
     */
    public static boolean isDownloadsDocument(Uri uri) {
        return ""com.android.providers.downloads.documents"".equals(uri.getAuthority());
    }

    /**
     * @param uri The Uri to check.
     * @return Whether the Uri authority is MediaProvider.
     */
    public static boolean isMediaDocument(Uri uri) {
        return ""com.android.providers.media.documents"".equals(uri.getAuthority());
    }
}

","107","<android><file><sha>","2","0","1","2018-10-29 14:39:30","","2","","","","","2018-10-28 12:41:22",""
"19506718","PHP condition doesn't work","I have this code
$nick = $_POST[""user""];
$pass = sha1($_POST[""pass""]);

$user = pg_query($dbconn, ""SELECT * FROM users"");
$user = pg_fetch_object($user);

if($user->nick != $nick || $user->pass != $pass) {
    echo 'Wrong user or password';
}

nick in database is character type and is quite hashed, but I still get 'Wrong user or password' on output.
Is there any type conflict?
","$nick = $_POST[""user""];
$pass = sha1($_POST[""pass""]);

$user = pg_query($dbconn, ""SELECT * FROM users WHERE nick = '$nick' and pass='$pass'"");
$num = pg_num_rows($user);
$user = pg_fetch_object($user);

if($num==0) {
    echo 'Wrong user or password';
}

When do query with some value that the client will interact, make sure he will not use some methods of injection
Change code:
$nick = pg_escape_string(strip_tags($_POST[""user""]));
$pass = sha1($_POST[""pass""]);

","105","<php><conditional-statements><sha>","0","1","1","2013-10-22 09:40:30","19506853","4","","","","","2013-10-21 23:48:07",""
"42968302","Arduino C/C++ changing function name","Hey all I'm new to the C world so here is my question.
I have the following .h and .cpp file that looks like the following:
.h:
#ifndef Sha256_h
#define Sha256_h
#include ""sha256_config.h""

#if defined(SHA256_LINUX)
    class Sha256Class
#else
    class Sha256Class : public Print
#endif
{
  public:
    union _buffer {
        uint8_t b[BLOCK_LENGTH];
        uint32_t w[BLOCK_LENGTH/4];
    };

    union _state {
        uint8_t b[HASH_LENGTH];
        uint32_t w[HASH_LENGTH/4];
    };

    void init(void);
    void initHmac(const uint8_t* secret, int secretLength);
    uint8_t* result(void);
    uint8_t* resultHmac(void);

    #if  defined(SHA256_LINUX)
        virtual size_t write(uint8_t);
        size_t write_L(const char *str);
        size_t write_L(const uint8_t *buffer, size_t size);
        size_t print(const char* str);  
        double millis();
    #else
        virtual size_t write(uint8_t);
        using Print::write;
    #endif

  private:
    void pad();
    void addUncounted(uint8_t data);
    void hashBlock();
    uint32_t ror32(uint32_t number, uint8_t bits);
    _buffer buffer;
    uint8_t bufferOffset;
    _state state;
    uint32_t byteCount;
    uint8_t keyBuffer[BLOCK_LENGTH];
    uint8_t innerHash[HASH_LENGTH];

    #if defined(SHA256_LINUX)
        timeval tv;
    #endif
};

extern Sha256Class Sha256;
#endif

.cpp:
#include ""sha256.h""

uint32_t sha256K[] PROGMEM = {
  0x428a2f98,0x71374491,0xb5c0fbcf,0xe9b5dba5,0x3956c25b,0x59f111f1,0x923f82a4,0xab1c5ed5,
  0xd807aa98,0x12835b01,0x243185be,0x550c7dc3,0x72be5d74,0x80deb1fe,0x9bdc06a7,0xc19bf174,
  0xe49b69c1,0xefbe4786,0x0fc19dc6,0x240ca1cc,0x2de92c6f,0x4a7484aa,0x5cb0a9dc,0x76f988da,
  0x983e5152,0xa831c66d,0xb00327c8,0xbf597fc7,0xc6e00bf3,0xd5a79147,0x06ca6351,0x14292967,
  0x27b70a85,0x2e1b2138,0x4d2c6dfc,0x53380d13,0x650a7354,0x766a0abb,0x81c2c92e,0x92722c85,
  0xa2bfe8a1,0xa81a664b,0xc24b8b70,0xc76c51a3,0xd192e819,0xd6990624,0xf40e3585,0x106aa070,
  0x19a4c116,0x1e376c08,0x2748774c,0x34b0bcb5,0x391c0cb3,0x4ed8aa4a,0x5b9cca4f,0x682e6ff3,
  0x748f82ee,0x78a5636f,0x84c87814,0x8cc70208,0x90befffa,0xa4506ceb,0xbef9a3f7,0xc67178f2
};

#define BUFFER_SIZE 64

uint8_t sha256InitState[] PROGMEM = {
  0x67,0xe6,0x09,0x6a,
  0x85,0xae,0x67,0xbb,
  0x72,0xf3,0x6e,0x3c,
  0x3a,0xf5,0x4f,0xa5,
  0x7f,0x52,0x0e,0x51,
  0x8c,0x68,0x05,0x9b,
  0xab,0xd9,0x83,0x1f,
  0x19,0xcd,0xe0,0x5b
};

void Sha256Class::init(void) {
  memcpy_P(state.b,sha256InitState,32);
  byteCount = 0;
  bufferOffset = 0;
}

uint32_t Sha256Class::ror32(uint32_t number, uint8_t bits) {
  return ((number << (32-bits)) | (number >> bits));
}

void Sha256Class::hashBlock() {
  uint8_t i;
  uint32_t a,b,c,d,e,f,g,h,t1,t2;

  a=state.w[0];
  b=state.w[1];
  c=state.w[2];
  d=state.w[3];
  e=state.w[4];
  f=state.w[5];
  g=state.w[6];
  h=state.w[7];

  for (i=0; i<64; i++) {
    if (i>=16) {
      t1 = buffer.w[i&15] + buffer.w[(i-7)&15];
      t2 = buffer.w[(i-2)&15];
      t1 += ror32(t2,17) ^ ror32(t2,19) ^ (t2>>10);
      t2 = buffer.w[(i-15)&15];
      t1 += ror32(t2,7) ^ ror32(t2,18) ^ (t2>>3);
      buffer.w[i&15] = t1;
    }

    t1 = h;
    t1 += ror32(e,6) ^ ror32(e,11) ^ ror32(e,25);
    t1 += g ^ (e & (g ^ f));
    t1 += pgm_read_dword(sha256K+i);
    t1 += buffer.w[i&15];
    t2 = ror32(a,2) ^ ror32(a,13) ^ ror32(a,22);
    t2 += ((b & c) | (a & (b | c)));
    h=g; g=f; f=e; e=d+t1; d=c; c=b; b=a; a=t1+t2;
  }

  state.w[0] += a;
  state.w[1] += b;
  state.w[2] += c;
  state.w[3] += d;
  state.w[4] += e;
  state.w[5] += f;
  state.w[6] += g;
  state.w[7] += h;
}

void Sha256Class::addUncounted(uint8_t data) {
  buffer.b[bufferOffset ^ 3] = data;
  bufferOffset++;

  if (bufferOffset == BUFFER_SIZE) {
    hashBlock();
    bufferOffset = 0;
  }
}

size_t Sha256Class::write(uint8_t data) {
  ++byteCount;
  addUncounted(data);

  return 1;
}

void Sha256Class::pad() {
  addUncounted(0x80);

  while (bufferOffset != 56) addUncounted(0x00);

  addUncounted(0);
  addUncounted(0);
  addUncounted(0);
  addUncounted(byteCount >> 29);
  addUncounted(byteCount >> 21);
  addUncounted(byteCount >> 13);
  addUncounted(byteCount >> 5);
  addUncounted(byteCount << 3);
}


uint8_t* Sha256Class::result(void) {
  pad();

  for (int i=0; i<8; i++) {
    uint32_t a,b;

    a=state.w[i];
    b=a<<24;
    b|=(a<<8) & 0x00ff0000;
    b|=(a>>8) & 0x0000ff00;
    b|=a>>24;
    state.w[i]=b;
  }

  return state.b;
}

#define HMAC_IPAD 0x36
#define HMAC_OPAD 0x5c

uint8_t keyBuffer[BLOCK_LENGTH];
uint8_t innerHash[HASH_LENGTH];

void Sha256Class::initHmac(const uint8_t* key, int keyLength) {
  uint8_t i;

  memset(keyBuffer,0,BLOCK_LENGTH);

  if (keyLength > BLOCK_LENGTH) {
    init();
    for (;keyLength--;) write(*key++);

    memcpy(keyBuffer,result(),HASH_LENGTH);
  } else {
    memcpy(keyBuffer,key,keyLength);
  }

  init();

  for (i=0; i<BLOCK_LENGTH; i++) {
    write(keyBuffer[i] ^ HMAC_IPAD);
  }
}

uint8_t* Sha256Class::resultHmac(void) {
  uint8_t i;

  memcpy(innerHash,result(),HASH_LENGTH);
  init();

  for (i=0; i<BLOCK_LENGTH; i++) write(keyBuffer[i] ^ HMAC_OPAD);
  for (i=0; i<HASH_LENGTH; i++) write(innerHash[i]);

  return result();
}

#if defined(SHA256_LINUX)
    size_t Sha256Class::write_L(const char *str){
        if (str == NULL) return 0;

        return write_L((const uint8_t *)str, strlen(str));
    }   

    size_t Sha256Class::write_L(const uint8_t *buffer,size_t size){
        size_t n = 0;

        while (size--){
            n +=write(*buffer++);
        }

        return n;
    }

    size_t Sha256Class::print(const char *str){
        return write_L(str);
    }

    double Sha256Class::millis(){
        gettimeofday(&tv, NULL);

        return (tv.tv_sec + 0.000001 * tv.tv_usec);
    }
#endif

Sha256Class Sha256;

And how I go about calling it from my Arduino code is this:
uint8_t* hash;
uint32_t a;
unsigned long ms;
Serial.println(""Test: RFC4231 4.2"");
Serial.println(""Expect:b0344c61d8db38535ca8afceaf0bf12b881dc200c9833da726e9376c2e32cff7"");
Serial.print(""Result:"");
ms = micros();
Sha256.initHmac(hmacKey1,20);
Sha256.print(""Hi There"");
printHash(Sha256.resultHmac());
Serial.print("" Hash took : "");
Serial.print((micros() - ms));
Serial.println("" micros"");
Serial.println();

What I am wanting to do is to rename the Sha256.print to Sha256.Msg. I have tried to rename the class Sha256Class : public Print to class Sha256Class : public Msg but that did not work. I also referenced anything called print and renamed it to Msg as well - still will not being able to get it working.
","You should simply just have to change the name of the prototype in the header file, then change the name of the definition of the implementation in the cpp file, and finally remember to change the name where you are using it. 
.h:
size_t print(const char* str); to size_t Msg(const char * str)

.cpp:
size_t Sha256Class::print(const char *str){
    return write_L(str);
}

to

size_t Sha256Class::Msg(const char *str){
    return write_L(str);
}

arduino file:
uint8_t* hash;
uint32_t a;
unsigned long ms;
Serial.println(""Test: RFC4231 4.2"");
Serial.println(""Expect:b0344c61d8db38535ca8afceaf0bf12b881dc200c9833da726e9376c2e32cff7"");
Serial.print(""Result:"");
ms = micros();
Sha256.initHmac(hmacKey1,20);
/* change from Sha256.print(""Hi There"") to */
Sha256.Msg(""Hi There"");
printHash(Sha256.resultHmac());
Serial.print("" Hash took : "");
Serial.print((micros() - ms));
Serial.println("" micros"");
Serial.println();

However, since you have a #if  defined(SHA256_LINUX) around the prototype in the header file it could possibly not be declared as Msg(const char *str) instead of print(const char *str) so the best solution would just be to leave the print function implemented and create a second method that does the same thing.
In response to the comment.
.h:
// Add this somewhere in the code wherever you see fit
size_t Msg(const char * str);

.cpp:
//Add this somewhere in the cide wherever you see fit
size_t Sha256Class::Msg(const char *str){
    return write_L(str);
}

And in the arduino file just call the function as you wanted it to be with the new name Sha256.Msg(""Hi There"");
","104","<c++><arduino><sha256><sha>","0","0","1","2017-03-23 06:13:35","","0","","929459","","2017-03-23 06:11:07","2017-03-23 05:59:20",""
"15323333","php PDO query doesn't work with hash_hmac()","I just read about hash_hmac() function,
i tried to use it for storing password in DB :
<?php
$dsn = 'mysql:host=localhost;dbname=test';
$username = 'root';
$pass = 'password';

$conn = new PDO($dsn, $username, $pass);
$conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
$conn->setAttribute(PDO::ATTR_PERSISTENT, TRUE);

$password = '123MonyeTSahuR456';

    $p = addslashes(hash_hmac('sha256', $password, '13#slP3mK;""dA$@m', TRUE));    

    $query = ""INSERT INTO table_one VALUES(NULL, :password)"";

try
{
    $pdo = $conn->prepare($query);
    $pdo->bindValue(':password', $p);

    if($pdo->execute())
    {
        echo $pdo->rowCount();
    }
    else
    {
        echo 'fail';    
    }
}
catch(PDOException $e)
{
    echo $e->getMessage();
}

the DB details:
id INT NOT NULL AUTO INCREMENT
password VARBINARY(32) NOT NULL

after that i manually check my DB and found a row with BLOB(i never work/use with VARBINARY or BLOB data type before, so this is my first time)
so there's 1 row exist and i try to select the row :
    $query = ""SELECT * FROM table_one WHERE password = :password"";

the value returned by pdo->rowCount() is 0 , it doesn't find the password im looking for, anyone can tell me why? how to fix this?
another details : 
PHP version : 5.4
OS : Ubuntu 12.04 64 bit
thanks 
","SOLVED
by using PDO::PARAM_LOB in the query, it works..
1 more thing in my mind is :

should i use addslashes() before the query? i just follow the tutorial for the addslashes() thing

","103","<php><hash><pdo><sha>","0","0","1","2013-03-10 14:48:47","","5","","","","","2013-03-10 14:32:30",""
"25212490","does my dba know what he is doing?","I am new to all the encryption, hashing etc.
I received email from my dba, telling me to read admin un, password from .properties file and it looks something like this:
ldap.provider.admin.password=fc34f78f665b60c5b99bad0ee1b228269e10e9cdd81c1a

Then in his email he specifies:
ldap.provider.admin.password is actual password encrypted with “SHA256”.

Telling me in my java programm I will have to decrypt this password in order to be able to use it.
Is it me or does he have it confused with crypto hash algorithm?
Can I actually get it decrypted?
","""Encrypted"" is a misleading term, because that implies that it can be decrypted.  Something transformed with the ""SHA256"" algorithm is actually cryptographically hashed.  There is no ""decrypt"" functionality for a cryptographic hashing algorithm.
But you can still use it.  When a user submits a password, perform ""SHA256"" on the user's submitted password, and compare it with the stored, hashed password.  By the looks of the string above, you may need to convert the hash output to a hex string to compare it.
Additionally, you may first need to find out if a salt is applied to the hash (additional random content added on a per-user basis to increase security).  If so, then you'll need to apply the salt to the user's submitted password before hashing it.
","102","<java><encryption><sha>","3","8","1","2014-08-09 01:35:51","25212547","4","1","2084209","","2014-08-09 01:35:51","2014-08-08 21:25:23",""
"32319466","authorize.net production certificate upgrades","I have a website that integrates with authorize.net and received a notice that they are upgrading their certificates so that they are signed using Security Hash Algorithm 2 (SHA-2). Specifically, that their API services will use EnTrust’s SHA-256, 2048-bit certificate. 
It goes on: ""Please contact your solution provider and web hosting company to ensure your solution has these certificates installed and is capable of using them to secure your connection to Authorize.Net. ""
When users connect to the payment pages on my site, they are on a secure connection (DigiCert SHA-256 certificate), but I'm not sure if that means that my site's connection to api.authorize.net is similarly secured. 
Sorry for asking what is probably a very dumb question, but how can I find out if this change will require any re-coding on my end, and how can I check that my site's certificate is going to work? 
Thanks so much for your help!
","I also got the notice from authorize.net, but fortunately for me our hosting site's admins took care of it.  I got a similar notice from PayPal, which is also upgrading their certificates for SHA-256 compliance. In researching that one I came across this related Stack Overflow question: How can I tell if my paypal certificate is SHA-256? - PayPal service upgrades. 
One answer links to this github gist which uses openssl and awk to check the installed certs. If you run it and see the certs that authorize.net has upgraded too listed, that should tell you your server will work.  This is a assuming you're on a Linux server.  Disclaimer: I'm no expert on dealing with SSL and servers - I'm chiming in only because no one else has. 
","101","<ssl><ssl-certificate><authorize.net><sha>","0","0","1","2015-09-17 01:29:33","","0","","","","","2015-08-31 20:29:37",""
"41468604","git rebase and SHAs mentioned in log messages","Sometimes the log message for a git commit will mention the SHA of other commits.  This happens in the suggested log message for git revert and you also may add it by hand ('fixed bug introduced in abcd0123').
When rebasing, the SHAs of commits change.  Is there a way I can automatically fix up the log messages to have the new SHAs?  In general, this might not be possible in 100% of cases (a commit might disappear altogether, be squashed, etc).  But 90% of the time a simple rebase leaves a one-to-one correspondence between the original and the rebased commits, so it should be possible to remap the SHAs in log messages.
I have tried git rebase --verbose, which I hoped would print something like
Applying: My log message here.
  old commit was 01234
  new commit is abcde

I could then use that to manually fiddle the log messages (with a further rebase... which would in turn change the SHAs... so it would be awkward, but nonetheless possible).  But as far as I can tell --verbose doesn't print more information than the normal mode.
Is there some magic tool which will rebase and rewrite the log messages for me?  In the absence of ponies, can I convince git rebase to print more information about old and new SHAs so I can do the job myself?
","
Sometimes the log message for a git commit will mention the SHA of other commits[...]When rebasing, the SHAs of commits change. Is there a way I can automatically fix up the log messages to have the new SHAs?

You can use git patch-id to find commits that apply the same changes, the most brute-force method would be
git rev-list --no-merges --reflog --all \
| git diff-tree --stdin -p \
| git patch-id | sort > patch-ids

awk '{print $2,$1}' patch-ids | uniq -Df1

to find every set of commits in your repo that apply similar patches.  A bit of git log --grep= applied to the results, and perhaps some restraint on your rev-list args, should get you where you want to go.
On GNU/anything replacing the uniq with
uniq -f1 --all-repeated=separate | awk '{print $1}' | awk '{$1=$1; print}' RS=

groups the commit ids for you.  You could use join or some more awking to achieve the same effect elsewhere.
You can add git notes to a commit (or to any object), that might help if you're trying to distribute warnings about what happened.
","101","<git><logging><rebase><sha>","3","1","1","2017-01-05 10:19:08","41470856","3","2","","","","2017-01-04 16:22:04",""
"32550395","How the cipher negotiation in snmpv3 will happen?","I'm working on snmpv3. In the RFC and internet I haven't seen any documentation regarding how the encryption and hashing algorithms exchanged between the entities. I wonder will there be any cipher negotiation happens in SNMPv3 or both parties should agree upon a specific set of algorithms prior to the communication and use them?
","I wonder whether you are reading the proper RFC documents. For SNMP v3 there is no cipher negotiation at all. You have to know exactly how a device is configured so as to manage it.
It is not something like HTTP over SSL.
","100","<security><aes><snmp><sha><privacy>","2","1","1","2015-09-13 14:06:52","32550482","0","","","","","2015-09-13 13:58:02",""
"27084096","Ruby SHA2 digest incorrect doc or issue in my IRB?","The doc @ http://www.ruby-doc.org/stdlib-1.9.3/libdoc/digest/rdoc/Digest/SHA2.html shows:
Digest::SHA256.new.digest_length * 8
 #=> 512
Digest::SHA384.new.digest_length * 8
 #=> 1024
Digest::SHA512.new.digest_length * 8
 #=> 1024

Here's my output in 2.1.3:
Digest::SHA256.new.digest_length * 8
 #=> 256 
Digest::SHA384.new.digest_length * 8
 #=> 384 
Digest::SHA512.new.digest_length * 8
 #=> 512

Why does my block length output differ from Ruby docs?
","Seems like there is a typo in docs, look, 
block_length → Integer
Returns the block length of the digest in bytes.

Digest::SHA256.new.digest_length * 8
# => 512
Digest::SHA384.new.digest_length * 8
# => 1024
Digest::SHA512.new.digest_length * 8
# => 1024

digest_length → Integer
Returns the length of the hash value of the digest in bytes.

Digest::SHA256.new.digest_length * 8
# => 256
Digest::SHA384.new.digest_length * 8
# => 384
Digest::SHA512.new.digest_length * 8
# => 512

Both are using digest_length in examples. 
But instead it should be,
block_length → Integer
Returns the block length of the digest in bytes.

Digest::SHA256.new.block_length * 8
# => 512
Digest::SHA384.new.block_length * 8
# => 1024
Digest::SHA512.new.block_length * 8
# => 1024

digest_length → Integer
Returns the length of the hash value of the digest in bytes.

Digest::SHA256.new.digest_length * 8
# => 256
Digest::SHA384.new.digest_length * 8
# => 384
Digest::SHA512.new.digest_length * 8
# => 512

","99","<ruby><sha>","2","0","2","2014-11-23 00:40:25","","0","","","","","2014-11-23 00:19:48",""
"27084096","Ruby SHA2 digest incorrect doc or issue in my IRB?","The doc @ http://www.ruby-doc.org/stdlib-1.9.3/libdoc/digest/rdoc/Digest/SHA2.html shows:
Digest::SHA256.new.digest_length * 8
 #=> 512
Digest::SHA384.new.digest_length * 8
 #=> 1024
Digest::SHA512.new.digest_length * 8
 #=> 1024

Here's my output in 2.1.3:
Digest::SHA256.new.digest_length * 8
 #=> 256 
Digest::SHA384.new.digest_length * 8
 #=> 384 
Digest::SHA512.new.digest_length * 8
 #=> 512

Why does my block length output differ from Ruby docs?
","This has been fixed in the 2.0.0 documentation (commit)
There appears to be  mistake in the Ruby 1.9.3 documentation for the method Digest::SHA2#block_length, as they are using the digest_length method instead of block_length in the examples.
Using digest_block actually gets the shown values 512, 1024, and 1024:
Digest::SHA256.new.block_length * 8
# => 512

Digest::SHA384.new.block_length * 8
# => 1024

Digest::SHA512.new.block_length * 8
# => 1024

","99","<ruby><sha>","2","0","2","2014-11-23 00:40:25","","0","","","","","2014-11-23 00:19:48",""
"23803764","Sha1 signature of saved file and source FileStreamResult are different","I have an ASP.NET MVC4 app where users can generate a PDF file. This PDF file is created from an HTML view using iTextSharp.
I want to ensure that users don't manipulate the original PDF, so it's secured. I also want to be able to identify any forgery, so when the document is generated I store it's sha1 signature on database.
I create this signature from the FileStreamResult returned from the method that creates de PDF file. This FileStreamResult is just later returned to the browser, where the PDF file is shown.
My problem is that, after saving the PDF file to disk the sha1 signature of this file is different from the one on the database.
Also... if I generate exactly the same document in Firefox and in Chrome, when I save them to disk both have different signatures.
Keep in mind that I'm creating once and again the document, with the same process, same data and same filename (once I check the signature I write it down and delete the file to try with the other browser). 
I suspect that browsers' PDF plugins are adding some type of comment inside the stream, invisible to the user, that makes each file different from the other (and from the original FileStreamResult whose signature I stored on DB).
I wonder if anyone know other causes than could be causing this result and if there is any way to get the correct signature on my database.
Any insight on this matter will be much appreciated.
","","97","<c#><asp.net-mvc-4><pdf><encryption><sha>","0","","0","2014-05-22 10:08:02","","4","","","","","2014-05-22 10:08:02",""
"37840373","SHA1 inconsistant between Play Game Services Log and Google Publishing?","I'm trying to get Google Play Game Services to work but I get the following error:

06-15 15:53:20.599 17069-17069/? W/Prime31-GH: disconnect() called
  when client was already disconnected. 06-15 15:53:20.599 17069-17069/?
  W/GameHelper: **** 06-15 15:53:20.599 17069-17069/? W/GameHelper: ****
  06-15 15:53:20.599 17069-17069/? W/GameHelper: **** APP NOT CORRECTLY
  CONFIGURED TO USE GOOGLE PLAY GAME SERVICES 06-15 15:53:20.599
  17069-17069/? W/GameHelper: **** This is usually caused by one of
  these reasons: 06-15 15:53:20.599 17069-17069/? W/GameHelper: **** (1)
  Your package name and certificate fingerprint do not match 06-15
  15:53:20.599 17069-17069/? W/GameHelper: ****     the client ID you
  registered in Developer Console. 06-15 15:53:20.599 17069-17069/?
  W/GameHelper: **** (2) Your App ID was incorrectly entered. 06-15
  15:53:20.599 17069-17069/? W/GameHelper: **** (3) Your game settings
  have not been published and you are  06-15 15:53:20.599 17069-17069/?
  W/GameHelper: ****     trying to log in with an account that is not
  listed as 06-15 15:53:20.599 17069-17069/? W/GameHelper: ****     a
  test account. 06-15 15:53:20.599 17069-17069/? W/GameHelper: ****
  06-15 15:53:20.599 17069-17069/? W/GameHelper: **** To help you debug,
  here is the information about this app 06-15 15:53:20.599
  17069-17069/? W/GameHelper: **** Package name         :
  net.jabberworx.saisai 06-15 15:53:20.607 17069-17069/? W/GameHelper:
  **** Cert SHA1 fingerprint: E5:E0:84:E6:B7:74:78:4F:6C:DA:E7:C9:56:69:81:10:6C:12:04:E8 06-15
  15:53:20.607 17069-17069/? W/ResourceType: No package identifier when
  getting value for resource number 0x00000000 06-15 15:53:20.607
  17069-17069/? W/System.err:
  android.content.res.Resources$NotFoundException: String resource ID
0x0 06-15 15:53:20.607 17069-17069/? W/System.err:     at android.content.res.Resources.getText(Resources.java:229) 06-15
15:53:20.615 17069-17069/? W/System.err:     at
  android.content.res.Resources.getString(Resources.java:313) 06-15
  15:53:20.615 17069-17069/? W/System.err:     at
  com.prime31.GameHelperUtils.getAppIdFromResource(GameHelperUtils.java:122)
  06-15 15:53:20.615 17069-17069/? W/System.err:     at
  com.prime31.GameHelperUtils.printMisconfiguredDebugInfo(GameHelperUtils.java:106)
  06-15 15:53:20.615 17069-17069/? W/System.err:     at
  com.prime31.GameHelper.giveUp(GameHelper.java:893) 06-15 15:53:20.615
  17069-17069/? W/System.err:     at
  com.prime31.GameHelper.onActivityResult(GameHelper.java:602) 06-15
  15:53:20.615 17069-17069/? W/System.err:     at
  com.prime31.PlayGameServicesPlugin.onActivityResult(PlayGameServicesPlugin.java:597)
  06-15 15:53:20.615 17069-17069/? W/System.err:     at
  java.lang.reflect.Method.invokeNative(Native Method) 06-15
  15:53:20.615 17069-17069/? W/System.err:     at
  java.lang.reflect.Method.invoke(Method.java:511) 06-15 15:53:20.615
  17069-17069/? W/System.err:     at
  com.prime31.ActivityProxyObjectHelper.onActivityResult(ActivityProxyObjectHelper.java:111)
  06-15 15:53:20.615 17069-17069/? W/System.err:     at
  com.prime31.UnityPlayerNativeActivity.onActivityResult(UnityPlayerNativeActivity.java:35)
  06-15 15:53:20.623 17069-17069/? W/System.err:     at
  android.app.Activity.dispatchActivityResult(Activity.java:5192) 06-15
  15:53:20.623 17069-17069/? W/System.err:     at
  android.app.ActivityThread.deliverResults(ActivityThread.java:3137)
  06-15 15:53:20.623 17069-17069/? W/System.err:     at
  android.app.ActivityThread.handleSendResult(ActivityThread.java:3184)
  06-15 15:53:20.623 17069-17069/? W/System.err:     at
  android.app.ActivityThread.access$1100(ActivityThread.java:130) 06-15
  15:53:20.623 17069-17069/? W/System.err:     at
  android.app.ActivityThread$H.handleMessage(ActivityThread.java:1243)
  06-15 15:53:20.623 17069-17069/? W/System.err:     at
  android.os.Handler.dispatchMessage(Handler.java:99) 06-15 15:53:20.623
  17069-17069/? W/System.err:     at
  android.os.Looper.loop(Looper.java:137) 06-15 15:53:20.631
  17069-17069/? W/System.err:     at
  android.app.ActivityThread.main(ActivityThread.java:4745) 06-15
  15:53:20.631 17069-17069/? W/System.err:     at
  java.lang.reflect.Method.invokeNative(Native Method) 06-15
  15:53:20.631 17069-17069/? W/System.err:     at
  java.lang.reflect.Method.invoke(Method.java:511) 06-15 15:53:20.631
  17069-17069/? W/System.err:     at
  com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:786)
  06-15 15:53:20.631 17069-17069/? W/System.err:     at
  com.android.internal.os.ZygoteInit.main(ZygoteInit.java:553) 06-15
  15:53:20.638 17069-17069/? W/System.err:     at
  dalvik.system.NativeStart.main(Native Method) 06-15 15:53:20.638
  17069-17069/? W/GameHelper: **** App ID from          : ??? (failed to
  retrieve APP ID) 06-15 15:53:20.638 17069-17069/? W/GameHelper: ****
  06-15 15:53:20.638 17069-17069/? W/GameHelper: **** Check that the
  above information matches your setup in  06-15 15:53:20.638
  17069-17069/? W/GameHelper: **** Developer Console. Also, check that
  you're logging in with the 06-15 15:53:20.638 17069-17069/?
  W/GameHelper: **** right account (it should be listed in the Testers
  section if 06-15 15:53:20.638 17069-17069/? W/GameHelper: **** your
  project is not yet published). 06-15 15:53:20.638 17069-17069/?
  W/GameHelper: **** 06-15 15:53:20.638 17069-17069/? W/GameHelper: ****
  For more information, refer to the troubleshooting guide: 06-15
  15:53:20.638 17069-17069/? W/GameHelper: ****
http://developers.google.com/games/services/android/troubleshooting

I've absoloutely made sure I'm using a test account, it's uploaded to google play and the APP Id is correct.
However the SHA1 fingerprint it gives me in the log is different to the one on googles servers even though it's the same APK I've installed on the device (E5:E0:84:E6:B7:74:78:4F:6C:DA:E7:C9:56:69:81:10:6C:12:04:E8 vs 45ad218212bb6ce583421e7506774612acb37909)
Any ideas how to resolve?
","This is likely a problem with Drive API being disabled. You have to enable it on the  Google Play Developer Console.
","97","<android><unity3d><google-play-services><sha><prime31>","0","1","1","2016-06-15 16:13:09","37840661","0","","","","","2016-06-15 15:57:30",""
"46457340","Changing order of sha 256 update change the value","if i creat a messagedigist then update it with bytes values, change order change the ouput of the hash
Example
    BigInteger d_KGC = new BigInteger(""773182302672421767750165305491852205951657281488"");
    BigInteger r_KGC = new BigInteger(""1354751385705862203270732046669540660812388894970"");
    String C_ID = ""id_c"";

    hash_h_c.update(r_KGC.toByteArray());
    hash_h_c.update(d_KGC.toByteArray());
    hash_h_c.update(C_ID.getBytes());
    BigInteger h_c = new BigInteger(1, hash_h_c.digest());
    System.out.println(h_c);

output

49379655005878985488511725474312101658690290667242109419474456484341588492679

But if I change the order of updates like:
    hash_h_c.update(d_KGC.toByteArray());
    hash_h_c.update(r_KGC.toByteArray());
    hash_h_c.update(C_ID.getBytes());
    BigInteger h_c = new BigInteger(1, hash_h_c.digest());
    System.out.println(h_c);

output

74931638923759682675388497216517269416730536285702508607436092426996570518730

Isn't the overall result must be the same?
or changing order result in diffrent hash 
","It's actually a good thing if changing the order of input changes the hash value. Otherwise you'd run into issues where ""bat"" and ""tab"" both hashed to the same value, for example. For cryptographic hashes like SHA-256, the goal is to make it impossible (with a very large but not infinite amount of resources) to find any other input that produces the same hash value, and ""bat"" and ""tab"" are two different inputs, so it would be both surprising and unfortunate if they had the same hash value.
","97","<java><hash><sha><message-digest>","0","1","1","2017-09-28 03:39:38","46460586","1","","","","","2017-09-27 21:16:13",""
"45545971","Key length error of AES input in MATLAB","I am trying to implement AES in matlab by using the matlab files from this website: http://buchholz.hs-bremen.de/aes/aes.htm
I put my secret key in a hash function (SHA-256) and I have a key in 64 char format:
CD00E292C5970D3C5E2F0FFA5171E555BC46BFC4FADDFB4A418B6840B86E79A3

Whenever I want to feed the AES function with this input, it gives me this error:

Error using cipher function
  w has to be an array (not a cell array) with [44 x 4] elements.

I think my input's format is wrong, but I am confused. Can anyone help me to solve the error above? Thank you in advance.
function ciphertext = cipher (plaintext, w, s_box, poly_mat, vargin)
%CIPHER  Convert 16 bytes of plaintext to 16 bytes of ciphertext.
%   CIPHERTEXT = CIPHER (PLAINTEXT, W, S_BOX, POLY_MAT) 
%   converts PLAINTEXT to CIPHERTEXT,
%   using the expanded cipher key W, 
%   the byte substitution table S_BOX, and
%   the transformation matrix POLY_MAT.
%   CIPHERTEXT = CIPHER (PLAINTEXT, W, S_BOX, POLY_MAT, 1) 
%   switches verbose mode on, which displays intermediate results.
%   PLAINTEXT has to be a vector of 16 bytes (0 <= PLAINTEXT(i) <= 255).
%   W has to be a [44 x 4]-matrix of bytes (0 <= W(i,j) <= 255).

% If there is an optional ""verbose mode"" argument
if nargin > 4

% Switch the verbose mode flag on
verbose_mode = 1;

% If there is no optional ""verbose mode"" argument
else

% Switch the verbose mode flag off
verbose_mode = 0;

end

% If the input vector is a cell array or does not have 16 elements
if iscell (plaintext) | prod (size (plaintext)) ~= 16

% Inform user and abort
error ('Plaintext has to be a vector (not a cell array) with 16 elements.')

end

% If any element of the input vector cannot be represented by 8 bits
if any (plaintext < 0 | plaintext > 255)

% Inform user and abort
error ('Elements of plaintext vector have to be bytes (0 <= plaintext(i) <=    255).')

end

% If the expanded key array is a cell arrray or does not have the correct size
if iscell (w) | any (size (w) ~= [44, 4])

% Inform user and abort
error ('w has to be an array (not a cell array) with [44 x 4] elements.')

end

% If any element of the expanded key array can not be represented by 8 bits
if any (w < 0 | w > 255)

% Inform user and abort
error ('Elements of key array w have to be bytes (0 <= w(i,j) <= 255).')

end

% Display headline if requested
if verbose_mode
disp (' ')
disp ('********************************************')
disp ('*                                          *')
disp ('*               C I P H E R                *')
disp ('*                                          *')
disp ('********************************************')
disp (' ')
end

% Copy the 16 elements of the input vector 
% column-wise into the 4 x 4 state matrix
state = reshape (plaintext, 4, 4);

% Display intermediate result if requested
if verbose_mode
disp_hex ('Initial state :                  ', state)
end

% Copy the first 4 rows (4 x 4 elements) of the expanded key 
% into the current round key.
% Transpose to make this column-wise
round_key = (w(1:4, :))';

% Display intermediate result if requested
if verbose_mode
    disp_hex ('Initial round key :              ', round_key)
end

% Add (xor) the current round key (matrix) to the state (matrix)
state = add_round_key (state, round_key);

% Loop over 9 rounds
for i_round = 1 : 9

% Display intermediate result if requested
    if verbose_mode
        disp_hex (['State at start of round ', num2str(i_round),' :      '],   state)
    end

% Substitute all 16 elements of the state matrix
% by shoving them through the S-box
    state = sub_bytes (state, s_box);

% Display intermediate result if requested
    if verbose_mode
        disp_hex ('After sub_bytes :                ', state)
    end

% Cyclically shift the last three rows of the state matrix
    state = shift_rows (state);

% Display intermediate result if requested
    if verbose_mode
        disp_hex ('After shift_rows :               ', state)
    end

% Transform the columns of the state matrix via a four-term polynomial
    state = mix_columns (state, poly_mat);

% Display intermediate result if requested
    if verbose_mode
        disp_hex ('After mix_columns :              ', state)
    end

% Extract the current round key (4 x 4 matrix) from the expanded key
    round_key = (w((1:4) + 4*i_round, :))';

% Display intermediate result if requested
    if verbose_mode
        disp_hex ('Round key :                      ', round_key)
    end

% Add (XOR) the current round key (matrix) to the state (matrix)
    state = add_round_key (state, round_key);

end

% Display intermediate result if requested
if verbose_mode
disp_hex ('State at start of final round :  ', state)
end

% Substitute all 16 elements of the state matrix
% by shoving them through the S-box
state = sub_bytes (state, s_box);

% Display intermediate result if requested
if verbose_mode
disp_hex ('After sub_bytes :                ', state)
end

% Cyclically shift the last three rows of the state matrix
state = shift_rows (state);

% Display intermediate result if requested
if verbose_mode
    disp_hex ('After shift_rows :               ', state)
end

% Extract the last round key (4 x 4 matrix) from the expanded key
round_key = (w(41:44, :))';

% Display intermediate result if requested
if verbose_mode
    disp_hex ('Round key :                      ', round_key)
end

% Add (xor) the current round key (matrix) to the state (matrix)
state = add_round_key (state, round_key);

% Display intermediate result if requested
if verbose_mode
    disp_hex ('Final state :                    ', state)
end

% reshape the 4 x 4 state matrix into a 16 element row vector
ciphertext = reshape (state, 1, 16);

","This implementation does only do the encryption of AES. It assumes you will implement the key schedule yourself.
Executing the key schedule will give you 11 keys of 16 bytes each. In this implementation this is represented as an array of [44 x 4] numbers from 0 to 256. You should pass this array to the cipher function.

Note: When you are implementing this yourself, it is a good idea to familiarize yourself with the AES block cipher first. Understand what the cipher function does before implementing parts, because otherwise you will surely get stuck.

","96","<matlab><encryption><aes><sha>","0","0","1","2017-08-14 06:59:06","","4","","8405078","","2017-08-08 11:07:02","2017-08-07 11:35:14",""
"30429087","Port PHP SHA1 Encrypted Password database to NODE application?","A customer of mine is using Open Cart as an eCommerce platform. They are moving to a custom node-based system and the question has been asked can we port the customers and their logins including sha1 encrypted password which also uses an MD5 salt.
Here is the query that saves the password: 

$this->db->query(""UPDATE "" . DB_PREFIX . ""customer SET salt = '"" . $this->db->escape($salt = substr(md5(uniqid(rand(), true)), 0, 9)) . ""', password = '"" . $this->db->escape(sha1($salt . sha1($salt . sha1($password)))) . ""' WHERE LOWER(email) = '"" . $this->db->escape(utf8_strtolower($email)) . ""'"");
 
So if i retrieve the salt for each customer by email address and encrypt the input password with sha1 using the same salt, would I in fact be able to match the input password with the one previously encrypted in PHP and stored in mysql? 
","","96","<node.js><passwords><sha>","0","","0","2015-05-24 22:43:50","","2","","","","","2015-05-24 22:43:50",""
"49132339","What does ""vperm v0,v0,v0,v17"" with unused v0 do?","I'm working on an SHA-256 implementation using Power8 built-ins. The performance is off a bit. I estimate it is off by about 2 cycles per byte (cpb).
The C/C++ code to perform SHA on a block looks like so:
// Schedule 64-byte message
SHA256_SCHEDULE(W, data);

uint32x4_p8 a = abcd, e = efgh;
uint32x4_p8 b = VectorShiftLeft<4>(a);
uint32x4_p8 f = VectorShiftLeft<4>(e);
uint32x4_p8 c = VectorShiftLeft<4>(b);
uint32x4_p8 g = VectorShiftLeft<4>(f);
uint32x4_p8 d = VectorShiftLeft<4>(c);
uint32x4_p8 h = VectorShiftLeft<4>(g);

for (unsigned int i=0; i<64; i+=4)
{
    const uint32x4_p8 k = VectorLoad32x4u(K, i*4);
    const uint32x4_p8 w = VectorLoad32x4u(W, i*4);
    SHA256_ROUND<0>(w,k, a,b,c,d,e,f,g,h);
    SHA256_ROUND<1>(w,k, a,b,c,d,e,f,g,h);
    SHA256_ROUND<2>(w,k, a,b,c,d,e,f,g,h);
    SHA256_ROUND<3>(w,k, a,b,c,d,e,f,g,h);
}

I compile the program with GCC using -O3 and -mcpu=power8 on a ppc64-le machine. When I look at the disassembly I see a several of these:
...
10000b0c:   a6 03 09 7d     mtctr   r8
10000b10:   57 02 00 f0     xxswapd vs32,vs32
10000b14:   6b 04 00 10     vperm   v0,v0,v0,v17
10000b18:   57 02 00 f0     xxswapd vs32,vs32
10000b1c:   99 57 00 7c     stxvd2x vs32,0,r10
10000b20:   99 26 0c 7c     lxvd2x  vs32,r12,r4
10000b24:   57 02 00 f0     xxswapd vs32,vs32
10000b28:   6b 04 00 10     vperm   v0,v0,v0,v17
10000b2c:   57 02 00 f0     xxswapd vs32,vs32
10000b30:   99 67 0a 7c     stxvd2x vs32,r10,r12
10000b34:   99 26 0b 7c     lxvd2x  vs32,r11,r4
10000b38:   57 02 00 f0     xxswapd vs32,vs32
10000b3c:   6b 04 00 10     vperm   v0,v0,v0,v17
10000b40:   57 02 00 f0     xxswapd vs32,vs32
10000b44:   99 5f 0a 7c     stxvd2x vs32,r10,r11
10000b48:   99 26 05 7c     lxvd2x  vs32,r5,r4
10000b4c:   57 02 00 f0     xxswapd vs32,vs32
10000b50:   6b 04 00 10     vperm   v0,v0,v0,v17
10000b54:   57 02 00 f0     xxswapd vs32,vs32
10000b58:   99 2f 0a 7c     stxvd2x vs32,r10,r5
...

The vperm v0,v0,v0,v17 seem like dead instructions because v0 is not used after the permutation.
What does vperm v0,v0,v0,v17 do?

The C++ source code is available at sha256-p8.cxx.
The source file was compiled with g++ -g3 -O3 -Wall -DTEST_MAIN -mcpu=power8 sha256-2-p8.cxx -o sha256-2-p8.exe.
The complete disassembly s available at PPC64 SHA-256 disassembly.

I think the fragment above is being produced by SHA256_SCHEDULE. I see the collection of VectorShiftLeft (vsldoi) after the block in question.
To zero in even more I'm fairly certain it is the endian-swapper for the first 16-words:
const uint8x16_p8 mask = {3,2,1,0, 7,6,5,4, 11,10,9,8, 15,14,13,12};
for (unsigned int i=0; i<16; i+=4)
    VectorStore32x4u(VectorPermute32x4(VectorLoad32x4u(data, i*4), mask), W, i*4);

SHA256_SCHEDULE looks like so:
// +2 because Schedule reads beyond the last element
void SHA256_SCHEDULE(uint32_t W[64+2], const uint8_t* data)
{
#if (__LITTLE_ENDIAN__)
    const uint8x16_p8 mask = {3,2,1,0, 7,6,5,4, 11,10,9,8, 15,14,13,12};
    for (unsigned int i=0; i<16; i+=4)
        VectorStore32x4u(VectorPermute32x4(VectorLoad32x4u(data, i*4), mask), W, i*4);
#else
    for (unsigned int i=0; i<16; i+=4)
        VectorStore32x4u(VectorLoad32x4u(data, i*4), W, i*4);
#endif

    // At i=62, W[i-2] reads the 65th and 66th elements. W[] has 2 extra ""don't care"" elements.
    for (unsigned int i = 16; i < 64; i+=2)
    {
        const uint32x4_p8 s0 = Vector_sigma0(VectorLoad32x4u(W, (i-15)*4));
        const uint32x4_p8 w0 = VectorLoad32x4u(W, (i-16)*4);
        const uint32x4_p8 s1 = Vector_sigma1(VectorLoad32x4u(W, (i-2)*4));
        const uint32x4_p8 w1 = VectorLoad32x4u(W, (i-7)*4);

        const uint32x4_p8 r = vec_add(s1, vec_add(w1, vec_add(s0, w0)));
        VectorStore32x4u(r, W, i*4);
    }
}


Here is an image of the section in question with v0 highlighted. 

","At first glance you've done all the heavy lifting, that screenshot looks a lot like its going to be the LE endian swapper section. I'm assuming you're spot on here. I expect that v17 is the mask variable - it's loaded as vs49 from the TOC earlier on.
The key piece of information you're missing is that v0 is vs32 (endlessly confusing I know). I'm not sure where the best place to demonstrate this is but the ABI will do. You can download it here: https://members.openpowerfoundation.org/document/dl/576.
Figure 2-17. Vector Registers as Part of VSRs on page 44 should help to illustrate what I mean, this is how it is in the hardware.
","96","<c++><gcc><sha><intrinsics><powerpc>","5","7","1","2018-03-06 21:55:25","49137459","0","1","608639","","2018-03-06 13:51:37","2018-03-06 13:46:11",""
"46635882","Generating a SHA signature using a private key using Python 3","I'm trying to create a wrapper for a bitcoin exchange API in python. However, the API requires you to generate signature with each request. I'm having difficulty generating the SHA394 signature correctly using the hmac module in python. Here's how my following code looks like so far: 
# private_client.py
# Mohammad Usman
#
# A python wrapper for Gemini's public API

from cached import Cached
import requests
import json
import uuid
import hmac
import hashlib
import base64
from datetime import datetime


class PrivateClient(metaclass=Cached):
    def __init__(self, PUBLIC_API_KEY, PRIVATE_API_KEY):
        self._public_key = PUBLIC_API_KEY
        self._private_key = PRIVATE_API_KEY
        self._base_url = 'https://api.gemini.com/'

    def api_query(self, method, payload=None):
        if payload is None:
            payload = {}
        request_url = self._base_url + method

        payload['request'] = method
        payload['nonce'] = str(uuid.uuid4())

        b64_payload = base64.b64encode(json.dumps(payload).encode('utf-8'))
        signature = hmac.new(self._private_key.encode('utf-8'), msg=b64_payload, digestmod=hashlib.sha256).digest()
        headers = {
            'Content-Type': ""text/plain"",
            'Content-Length': ""0"",
            'X-GEMINI-APIKEY': self._public_key,
            'X-GEMINI-PAYLOAD': b64_payload,
            'X-GEMINI-SIGNATURE': signature,
            'Cache-Control': ""no-cache""
        }

        r = requests.request('POST', request_url, headers=headers)
        return r.json()

    def new_order(self, symbol, amount, price, side, options):
        payload = {
            'symbol': symbol,
            'amount': amount,
            'price': amount,
            'side': side,
            'options': options,
            'type': 'exchange limit'
        }
        return self.api_query('/v1/order/new', payload)


a = PrivateClient('public_key', 'private_key')
b = a.new_order('BTCUSD', '20.2', '4500.2', 'buy', [""immediate-or-cancel""])
print(b)

However, I keep getting the following error: 
Traceback (most recent call last):
  File ""C:\Users\uzman\Documents\Python\Gemini- Python API Wrapper\gemini\private_client.py"", line 58, in <module>
    b = a.new_order('BTCUSD', '20.2', '4500.2', 'buy', [""immediate-or-cancel""])
  File ""C:\Users\uzman\Documents\Python\Gemini- Python API Wrapper\gemini\private_client.py"", line 54, in new_order
    return self.api_query('/v1/order/new', payload)
  File ""C:\Users\uzman\Documents\Python\Gemini- Python API Wrapper\gemini\private_client.py"", line 42, in api_query
    r = requests.request('POST', request_url, headers=headers)
  File ""C:\Users\uzman\AppData\Local\Programs\Python\Python36\lib\site-packages\requests\api.py"", line 58, in request
    return session.request(method=method, url=url, **kwargs)
  File ""C:\Users\uzman\AppData\Local\Programs\Python\Python36\lib\site-packages\requests\sessions.py"", line 488, in request
    prep = self.prepare_request(req)
  File ""C:\Users\uzman\AppData\Local\Programs\Python\Python36\lib\site-packages\requests\sessions.py"", line 431, in prepare_request
    hooks=merge_hooks(request.hooks, self.hooks),
  File ""C:\Users\uzman\AppData\Local\Programs\Python\Python36\lib\site-packages\requests\models.py"", line 306, in prepare
    self.prepare_headers(headers)
  File ""C:\Users\uzman\AppData\Local\Programs\Python\Python36\lib\site-packages\requests\models.py"", line 440, in prepare_headers
    check_header_validity(header)
  File ""C:\Users\uzman\AppData\Local\Programs\Python\Python36\lib\site-packages\requests\utils.py"", line 869, in check_header_validity
    raise InvalidHeader(""Invalid return character or leading space in header: %s"" % name)
requests.exceptions.InvalidHeader: Invalid return character or leading space in header: X-GEMINI-SIGNATURE

Any help ?
","","95","<python><api><sha>","0","","0","2017-10-08 21:09:10","","7","","7418764","","2017-10-08 21:09:10","2017-10-08 20:45:27","2017-10-08 20:49:41"
"53324308","Different HMAC result for JAVA and iOS","I'm trying to generate HMAC based on string value and key
public static byte[] hmacSha1(String value, String key) throws NoSuchAlgorithmException, InvalidKeyException {

    // some values hardcoded for simplicity of this code sample
    key = ""GET\\n?nodeList\\nThu, 10 Jul 2014 13:35:32 GMT\\nda39a3ee5e6b4b0d3255bfef95601890afd80709\\n"";;
    value = ""6020834c535670ab1da86f7697241cb43ab6fb90"";
    final String type = ""HmacSHA1"";
    final String charset = ""ASCII"";

    byte[] keyBytes = new byte[0];
    try {
        keyBytes = key.getBytes(charset);
    } catch (UnsupportedEncodingException e) {
        e.printStackTrace();
    }

    SecretKeySpec secret = new SecretKeySpec(keyBytes, type);
    Mac mac = Mac.getInstance(type);
    mac.init(secret);

    byte[] bytes = new byte[0];
    try {
        bytes = mac.doFinal(value.getBytes(charset));
    } catch (UnsupportedEncodingException e) {
        e.printStackTrace();
    }

    Log.d(TAG, ""bytes to hex: "" + bytesToHex(bytes));
    // result Android:  512B5CE2EA1CD71FF34C9DDB693F59288EF71B42
    // iOS: 96f852a08d3ee255b77364a6bbd106be0dc0e44e

    return bytes;
}

And Android result (hex value) doesn't match the one that has iOS app (using same string value and key).
(NSString *)HMAC_SHA1WithKeyData:(NSData* )key
{
const char * cData = [self cStringUsingEncoding:NSASCIIStringEncoding];

unsigned char cHMAC[CC_SHA1_DIGEST_LENGTH];

CCHmac(kCCHmacAlgSHA1, [key bytes], [key length], cData, strlen(cData), cHMAC);

NSData *HMAC = [[NSData alloc] initWithBytes:cHMAC
                                      length:sizeof(cHMAC)];

const unsigned char * buffer = (const unsigned char *)[HMAC bytes];
NSMutableString *HMACString = [NSMutableString stringWithCapacity:HMAC.length* 2];
for (int i = 0; i < HMAC.length; i++) {
    [HMACString appendFormat:@“%02x”, buffer[i]];
}

return HMACString;
}

Android HMAC (hex): 512B5CE2EA1CD71FF34C9DDB693F59288EF71B42
iOS HMAC:  96f852a08d3ee255b77364a6bbd106be0dc0e44e
Can someone clarify please how can i get the same HMAC as iOS does (cause it matches the back-end result).
","","95","<java><android><ios><hmac><sha>","1","","0","2018-11-15 17:04:14","","1","2","1784011","","2018-11-15 17:04:14","2018-11-15 16:52:21",""
"45756085","netbsd version of openssh has support for ""diffie-hellman-group-exchange-sha256"" but not for SHA256 for macs","I have an old version of netbsd which I am using. I wanted to configure the openssh to use strong ciphers and macs, but when saw the available macs it did not have support for SHA256 and higher. macs supported are
macs[] = {
    { ""hmac-sha1"",          SSH_EVP, EVP_sha1, 0, -1, -1 },
    { ""hmac-sha1-96"",       SSH_EVP, EVP_sha1, 96, -1, -1 },
    { ""hmac-md5"",           SSH_EVP, EVP_md5, 0, -1, -1 },
    { ""hmac-md5-96"",        SSH_EVP, EVP_md5, 96, -1, -1 },
    { ""hmac-ripemd160"",     SSH_EVP, EVP_ripemd160, 0, -1, -1 },
    { ""hmac-ripemd160@openssh.com"", SSH_EVP, EVP_ripemd160, 0, -1, -1 },
#ifdef UMAC_HAS_BEEN_UNBROKEN
    { ""umac-64@openssh.com"",    SSH_UMAC, NULL, 0, 128, 64 },
#endif
    { NULL,             0, NULL, 0, -1, -1 }
};

But when I check for supported ciphers for key exchange, I find that SHA256 can be used
#define KEX_DH1         ""diffie-hellman-group1-sha1""
#define KEX_DH14        ""diffie-hellman-group14-sha1""
#define KEX_DHGEX_SHA1      ""diffie-hellman-group-exchange-sha1""
#define KEX_DHGEX_SHA256    ""diffie-hellman-group-exchange-sha256""

How is that. If there is an implementation of SHA256 in my netbsd openssh, why isn't it available as a mac cipher?
","OpenSSH 5.0 had support for SHA-256 key exchange algorithm, but not for MACs with SHA-256 hashes. For the reference, there is a source code:
https://github.com/openssh/openssh-portable/blob/V_5_0_P1/myproposal.h
The SHA256 usage in MAC and in Key exchange is totally distinct and one does not affect the other. If SHA256 is used in either of them depends on the availability of this hash in underlying OpenSSL, but also if the OpenSSH implemented such algorithm. 10 years ago (2007), it was implemented only as a key exchange algorithm (the MAC were standardized later).
The original RFC4253 does not list any SHA256 algorithms. The DH key exchange method was standardized in RFC4419 (2006), but the HMACS using SHA2 were standardized as late as in 2012 in RFC6668.
Your version is between them, where there was no standard for this so it was not implemented.
","95","<c><hash><sha><openssh><netbsd>","2","2","1","2017-08-18 13:29:13","45757888","3","","","","","2017-08-18 11:55:57",""
"34895272","SHA-1 Code Xamarin","I have one question. I writing Android app in Xamarin. I published it on Google Play.
As I understand when I reinstall Windows and Xamarin SHA-1 code will change. And I cannot publish my app updates?
Or how I can publish app without creating new in Google Play? 
","","95","<c#><android><xamarin><sha>","0","","0","2016-01-20 08:46:04","","4","","","","","2016-01-20 08:46:04",""
"43904634","Wrong hash in C implementation of Sha-1","My file input  contains the chars ""abc""  and is supposed to generate the hash: ""a9993e364706816aba3e25717850c26c9cd0d89d"" Instead, my output is 2474716729 148412417 414899454 2419217526 3285377520. My bit shifting should be correct but when I print out my W[t] I'm pretty sure the numbers are wrong. 
#include <stdio.h>
#define MAX_SIZE  1048576
static unsigned char buffer[MAX_SIZE];
static unsigned int message[MAX_SIZE];

unsigned int readFile(unsigned char buffer[])
{

size_t length = 0;
int b = 0;
for (b = 0; b < MAX_SIZE; b++)
{
    buffer[b]= '\0';
}
int i = 0;
char *fileName = ""abc.txt"";
FILE *filePointer = fopen(fileName, ""r"");
if (filePointer != NULL)
{
    length = fread(buffer, sizeof(char), MAX_SIZE, filePointer);
    if (ferror(filePointer)!= 0)
    {
        fputs(""Error"", stderr);
    }
    if (length > MAX_SIZE)
    {
         fputs(""Input file too big for program"", stderr);
    }

    //add one bit;
    buffer[length] = 0x80;
    //length++;

}

/*for (i = 0; i < MAX_SIZE; i++)
{
    printf(""%c"", buffer[i]);
}
*/

fclose(filePointer);
return length;
}

unsigned int calculateBlocks(unsigned int sizeOfFileInBytes)
{
int blockCount = (((8 * sizeOfFileInBytes) + 1) / 512) + 1;

if((((8 * sizeOfFileInBytes) + 1) % 512) > (512 - 64))
{
    blockCount = blockCount + 1;
}
//printf(""here's block count: %i"", blockCount);
return blockCount;
}

void convertCharArrayToIntArray(unsigned char buffer[], unsigned int 
message[], unsigned int sizeOfFileInBytes)
 {
int e = 0;
int d = 0;
//buffLength shows me how many chars are in array
size_t buffLength= strlen((char*)buffer);
//printf(""this is bufflength: %zu   -done"", buffLength);


buffLength = buffLength/4;
for (e=0 ; e< buffLength; e++)
{
    message[e] |= (buffer[e] <<24);
    message[e] |= (buffer[e+1] <<16);
    message[e] |= (buffer[e+2] <<8);
    message[e] |= (buffer[e+3]);
}

/*for (d = 0; d <MAX_SIZE; d++)
{
    printf(""%i"", message[d]);
} */
//printf(""- done with message[d]"");
}

void addBitCountToLastBlock(unsigned int message[], unsigned int 
sizeOfFileInBytes, unsigned int blockCount)
{
int indexOfEndOfLastBlock = blockCount* 16 -1;
//printf(""the size of file in bytes is: %i   -done"", 
sizeOfFileInBytes);
sizeOfFileInBytes = sizeOfFileInBytes * 8;
message[indexOfEndOfLastBlock] = sizeOfFileInBytes;
 //printf(""index of last block is %i"", message[indexOfEndOfLastBlock]);

  int d = 0;

  /* for (d = 0; d <MAX_SIZE; d++)
 {
 printf(""%i"", message[d]);

 }
   printf(""- done with message[d]""); */
 }

unsigned int K(unsigned int t)
{
unsigned int kHex[] = {0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xCA62C1D6};
if (t>= 0 && t <= 19)
{
    return kHex[0];
}
else if (t>= 20 && t <= 39)
{
    return kHex[1];
}
else if (t>= 40 && t <= 59)
{
    return kHex[2];
}
else if (t>= 60 && t <= 79)
{
    return kHex[3];
}

return 0;
}

unsigned int f(unsigned int t, unsigned int B, unsigned int C, unsigned 
int D)
{
if (t>= 0 && t <= 19)
{
    return (B & C) |((~B)&D);
}
else if (t>= 20 && t <= 39)
{
    return B^C^D;
}
else if (t>= 40 && t <= 59)
{
    return (B & C) | (B & D) | (C & D);
}
else if (t>= 60 && t <= 79)
{
    return B^C^D;
}
return 0 ;
}

void computeMessageDigest(unsigned int message[], unsigned int 
blockCount)
void computeMessageDigest(unsigned int message[], unsigned int 
blockCount)
{
unsigned int A, B, C, D, E;
unsigned int h[5];
unsigned int W[80];
unsigned int t = 0;
unsigned int temp; //temporary word value
unsigned int bCounter = 0;
int i = 0;
int d = 0 ;
// int z = 0;
//int blCount = 0;

/* for (d = 0; d <MAX_SIZE; d++)
{
    printf(""%i"", message[d]);

}
printf(""- done with message[d]""); */

int wInc = 0;


h[0] = 0x67452301;
h[1] = 0xefcdab89;
h[2] = 0x98badcfe;
h[3] = 0x10325476;
h[4] = 0xc3d2e1f0;

while ( bCounter < blockCount)
{
    for (i= 16 * bCounter; i < 16 *bCounter +16; i++)
    {
        W[wInc] = message[i];
        wInc++; //block one
    }
    wInc = 0;
   /*for (z = 0; z < 16; z++)
  {
    printf(""%i"", W[z]);
  } */

  for (t = 16; t < 80; t++)
   {
    W[t] = (W[t-3] ^ W[t-8] ^ W[t-14] ^ W[t-16]) << 1;

   // printf(""%u  "", W[t]);
   }



A = h[0];
B = h[1];
C = h[2];
D = h[3];
E = h[4];

  for (t = 0; t < 80; t++)
  {

    temp = (A << 5) + f(t, B, C, D) + E + W[t] + K(t);
    E = D;
    D = C;
    C = B << 30;
    B = A;
    A = temp;
  }

    printf(""Hex values for A, B, C, D, E""); 
    printf(""%u, %u, %u, %u, %u"", A, B, C, D, E) ;


h[0] += A;
h[1] += B;
h[2] += C;
h[3] += D;
h[4] += E;

int b = 0;
for (b = 0; b <5; b++)
printf(""%u "", h[b]);
   bCounter++;
}

int main(int argc, const char * argv[]) {
// insert code here...


unsigned int blockCount = 0;
unsigned int sizeOfFile = 0;

sizeOfFile = readFile(buffer);
/*for (i = 0; i < MAX_SIZE; i++)
 {
 printf(""%c"", buffer[i]);
 } */

//printf(""%i is the size"", readFile(buffer));
blockCount = calculateBlocks(sizeOfFile);
convertCharArrayToIntArray(buffer, message, sizeOfFile);
//printf(""\n"");

addBitCountToLastBlock(message, sizeOfFile, blockCount);
computeMessageDigest(message, blockCount);

return 0;

","","95","<c><hash><bit-shift><sha>","1","","0","2017-05-11 11:36:54","","13","","7688491","","2017-05-11 11:36:54","2017-05-11 00:30:14",""
"15079714","Does having access to an application that implements encryption and decryption make it easier to crack?","Say I have an application that is to read and write files which are protected with a hash (to detect tampering and corruption) and optionally encryption with a user's key.  The application will necessarily include compiled code to hash, encrypt and decrypt the data.
Assuming we are using rigorous algorithms like salted and stretched AES-256 and SHA-256, is the fact that the user has the application in compiled form (and with some effort could presumably work out the algorithms being used) make it any easier for them to crack the encryption, or generate a fake hash?
If this is in fact a serious vulnerability, what measures would anyone suggest to mitigate the vulnerablity?
","The only case when having an application source would be a vulnerability is when the application itself has a serious flaw, for example

Is employing a security through obscurity technique,
Embeds a secret in the body of the program,
Makes a mistake in implementing a well-known algorithm that opens up the implementation to an attack.

Essentially, your product becomes more vulnerable when an attacker has its source, because the attacker can more easily spot your coding mistakes. However, it's coding mistakes that make your application crackable, not the fact that an attacker has your source code.
","93","<encryption><hash><aes><sha><cracking>","2","4","1","2013-02-26 01:36:51","15079850","7","","","","","2013-02-26 01:23:12",""
"37560786","Incorrect output from my implementation of SHA-256","For a personal project, I'm working on implementing SHA-256 in Python 3, without using the hashlib module (since that would defeat the purpose of learning how SHA-256 works). I've been working from the Wikipedia pseudocode, but my code gives incorrect output (compared to the hashlib output). I've been staring at the code for an hour, and besides a headache, I've made no headway on figuring out what I've done wrong.
The code:
#!/usr/bin/env python3

import hashlib
import sys

# ror function taken from http://stackoverflow.com/a/27229191/2508324
def ror(val, r_bits, max_bits=32):
    return ((val & (2**max_bits-1)) >> r_bits%max_bits)|(val << (max_bits-(r_bits%max_bits)) & (2**max_bits-1))

h = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19]

k = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
   0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
   0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
   0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
   0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
   0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
   0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
   0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2]

s = sys.stdin.read().encode()
msg = [int(x,2) for c in s for x in '{:08b}'.format(c)]
msg.append(1)
while len(msg) % 512 != 448:
    msg.append(0)
msg.extend([int(x,2) for x in '{:064b}'.format(len(s))])

for i in range(len(msg)//512):
    chunk = msg[512*i:512*(i+1)] # sloth love chunk
    w = [0 for _ in range(64)]
    for j in range(16):
        w[j] = int(''.join(str(x) for x in chunk[32*j:32*(j+1)]),2)
    for j in range(16, 64):
        s0 = ror(w[j-15], 7) ^ ror(w[j-15], 18) ^ (w[j-15] >> 3)
        s1 = ror(w[j-2], 17) ^ ror(w[j-2], 19) ^ (w[j-2] >> 10)
        w[j] = (w[j-16] + s0 + w[j-7] + s1) % 2**32
    work = h[:]
    for j in range(64):
        S1 = ror(work[4], 6) ^ ror(work[4], 11) ^ ror(work[4], 25)
        ch = (work[4] & work[5]) ^ (~work[4] & work[6])
        temp1 = (work[7] + S1 + ch + k[j] + w[j]) % 2**32
        S0 = ror(work[0], 2) ^ ror(work[0], 13) ^ ror(work[0], 22)
        maj = (work[0] & work[1]) ^ (work[0] & work[2]) ^ (work[1] & work[2])
        temp2 = (S0 + maj) % 2**32
        work = [(temp1 + temp2) % 2**32] + work[:-1]
        work[4] = (work[4] + temp1) % 2**32
    h = [(H+W)%2**32 for H,W in zip(h,work)]

print(''.join('{:08x}'.format(H) for H in h))
print(hashlib.sha256(s).hexdigest())

If the implementation was correct, the two outputs would match. Instead, I get this (with input abc):
$ echo -n abc | ./sha256.py
203b1d9016060802fe5ef80436611159de1868b58d44940e3d3979eab5f4d193
ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad

I have thoroughly examined the code, but I do not see any differences between it and the Wikipedia pseudocode. I suspect the error is in the compression loop (for j in range(64):). I've manually debugged and reviewed the state of the program up through initializing the first 16 words of the w array, and it all checks out.
Any help would be greatly appreciated!
","SHA1 works on bits, not bytes. Therefore, the 64 bit length at the end of the padding is expressed in bits as well; the mistake is in the line
msg.extend([int(x,2) for x in '{:064b}'.format(len(s))])

which should be
msg.extend([int(x,2) for x in '{:064b}'.format(len(s) * 8)])

","93","<python><python-3.x><sha256><sha>","0","0","1","2016-06-02 10:57:00","37589888","4","","","user2508324","2016-06-02 10:07:02","2016-06-01 06:15:35",""
"31122760","Method for storing users passwords for other services","I run a service that integrates with a few other cloud platforms via their apis.  In order to do this, we have to store the login credentials for OTHER sites in our database. Obviously security is a bit of a risk here.
So far, we have been storing the passwords using AES encryption and a salted version of the user's password(for our site) as the cipher.  When a user requests something from the api, they must input their password.  The password checked for validity against the sha hash that we store, and once confirmed, is used to decrypt the password.
The problem is, we would like to start offering a service that retrieves data from the apis we interact with at scheduled intervals(outside the scope of synchronous user requests.).  If we do this, our current security structure will no longer be viable.
My question is, are there any ways to allow for this type of api interaction without storing recoverable versions the passwords in our database?  If not, what are my options for securely storing passwords?
","
we would like to start offering a service that retrieves data from the apis we interact with at scheduled intervals(outside the scope of synchronous user requests.). 

This is what the OAuth protocol is designed for. The OAuth 2.0 code grant gives a client application an access token and a refresh token. The refresh token allows the application to get an access token even when the user is not there to authorize the request.
","93","<security><encryption><aes><sha>","0","0","1","2015-06-29 18:47:45","","3","","","","","2015-06-29 18:17:32",""
"54348876","Hash collision/limitation in IPFS: is it possible?","Let´s say that IPFS becomes an evolution of internet as we understand today, and the entire model (mainly websites and files that they store) migrates to be as decentralized as possible. 
I am not sure about the entire procedure of how IPFS works under the hood, but I understood that the files will be stored mainly based on their hash. 
Is there a possibility that, due to the amount of files that a worldwide IPFS model can store (so then same amount of hashes will be generated), algorithms like SHA-2 reach a limit about the amount of unique hashes that it can generate (knowing that 2^256, which is pretty big)? 
","You would have to generate hashes for about 2^128 different files in order to find a single collision in a 256-bit hash by chance.
That number is much larger than the number of atoms in the universe, so the probability of that happening is extremely small.
It's much more likely that some problem will eventually be found in the hash function, allowing someone to create collisions on purpose.
","92","<algorithm><hash><sha><ipfs>","0","1","1","2019-01-24 16:46:23","54349061","0","","10632401","","2019-01-24 16:46:23","2019-01-24 14:25:35",""
"13966852","Change hash function values in round table","Let's say I want to use SHA512 as my hashing function for whatever reason. Let's assume that I also have it's source code.
SHA512 contains constant table of rounds. What if I change few values (5 for example) here and there in this table?
How will this affect hashing function reliability and ""resistance"" to attacks (it's no longer standard algorithm and attacker might not know that round values have been changed)?
","The round constants in SHA512 were chosen at random. (More accurately, they are the fractional parts of the cube roots of the first 64 prime numbers -- this method was used as a way of showing that the numbers did not conceal a vulnerability; the specific method is not critical to the security proof.)
Unless you choose really degenerate values, like zero, changing them should have no impact on the security of the algorithm.
","91","<security><hash><sha>","3","3","1","2012-12-20 07:26:25","13967171","4","","","","","2012-12-20 07:01:32",""
"54110150","how to view the certificate fingerprint of application from google play store？","I have  downloaded an chrome browser apk file from apkpure.com. And i have installed in my smartphone. But, i am not sure if it is the same as the google play store download and installation file. I got some certificate fingerprint informations of this apk file by an jdk tool that called “keytool”. 

C:\xxx\openjdk-11.0.1_windows-x64_bin\jdk-11.0.1\bin>keytool 
  -printcert -file ""C:\xxx\Deskt op\Google Chrome Fast Secure_v71.0.3578.99_apkpure.com\META-INF\CERT.RSA""

output:
owner: CN=Android, OU=Android, O=Google Inc., L=Mountain View, ST=California, C=US
announcer: CN=Android, OU=Android, O=Google Inc., L=Mountain View, ST=California, C=US
serial number: c2e08746644a308d
Effective time: Fri Aug 22 07:13:34 CST 2008, Failure time: Tue Jan 08 07:13:34 CST 2036
Certificate fingerprint:
         SHA1: 38:91:8A:45:3D:07:19:93:54:F8:B1:9A:F0:5E:C6:56:2C:ED:57:88
         SHA256: F0:FD:6C:5B:41:0F:25:CB:25:C3:B5:33:46:C8:97:2F:AE:30:F8:EE:74:11:DF:91:04:80:AD:6B:2D:60:DB:83
Signature algorithm name: MD5withRSA (weak)
Subject public key algorithm: 2048 bit RSA Key
version: 3

Expansion:

#1: ObjectId: 2.5.29.35 Criticality=false
AuthorityKeyIdentifier [
KeyIdentifier [
0000: C7 7D 8C C2 21 17 56 25   9A 7F D3 82 DF 6B E3 98  ....!.V%.....k..
0010: E4 D7 86 A5                                        ....
]
[CN=Android, OU=Android, O=Google Inc., L=Mountain View, ST=California, C=US]
SerialNumber: [    c2e08746 644a308d]
]

#2: ObjectId: 2.5.29.19 Criticality=false
BasicConstraints:[
  CA:true
  PathLen:2147483647
]

#3: ObjectId: 2.5.29.14 Criticality=false
SubjectKeyIdentifier [
KeyIdentifier [
0000: C7 7D 8C C2 21 17 56 25   9A 7F D3 82 DF 6B E3 98  ....!.V%.....k..
0010: E4 D7 86 A5                                        ....
]
]


Warning:
The MD5withRSA signature algorithm used by the certificate poses a security risk.

But, i have'nt certificate fingerprint information from google play store's  installtion file ,so my question is ： can I view  the certificate fingerprint information of an  application  from google play store  ?  If so, what should I do?
","","91","<google-chrome><certificate><key><md5><sha>","0","","0","2019-01-10 04:44:22","","0","","-1","","2019-01-10 04:44:22","2019-01-09 12:26:02",""
"48352311","Trouble getting HMACsha256 to produce expected results","I'm trying to hook into the Binance API and have discovered that my implementation of HMACsha256 isn't producing the results that the sample documentation (and doing it in the command line) can. I'm trying to improve my knowledge of Go, but can't seem to crack this one.
Here's the documentation (Relevant Sample at ""SIGNED Endpoint Examples for POST /api/v1/order""): https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md
Without looking at the doc, here is the gist, my key is the following:
NhqPtmdSJYdKjVHjA7PZj4Mge3R5YNiP1e3UZjInClVN65XAbvqqM6A7H5fATj0j

my value is the following:
symbol=LTCBTC&side=BUY&type=LIMIT&timeInForce=GTC&quantity=1&price=0.1&recvWindow=5000&timestamp=1499827319559

When I use the terminal with the following command:
echo -n ""symbol=LTCBTC&side=BUY&type=LIMIT&timeInForce=GTC&quantity=1&price=0.1&recvWindow=5000&timestamp=1499827319559"" | openssl dgst -sha256 -hmac ""NhqPtmdSJYdKjVHjA7PZj4Mge3R5YNiP1e3UZjInClVN65XAbvqqM6A7H5fATj0j""

I receive the result
c8db56825ae71d6d79447849e617115f4a920fa2acdcab2b053c4b2838bd6b71

Which is what the documentation suggests. But when I use the following go program: 
package main

import (
    ""crypto/hmac""
    ""crypto/sha256""
    ""encoding/base64""
    ""fmt""
)

func main() {
    docSecret := ""NhqPtmdSJYdKjVHjA7PZj4Mge3R5YNiP1e3UZjInClVN65XAbvqqM6A7H5fATj0j""
    docQuery := ""symbol=LTCBTC&side=BUY&type=LIMIT&timeInForce=GTC&quantity=1&price=0.1&recvWindow=5000&timestamp=1499827319559""
    result := hmacify(docQuery, docSecret)
    fmt.Println(result)
}

func hmacify(message string, secret string) string {
    key := []byte(secret)
    h := hmac.New(sha256.New, key)
    h.Write([]byte(message))
    return base64.StdEncoding.EncodeToString(h.Sum(nil))
}

produces the result:
yNtWglrnHW15RHhJ5hcRX0qSD6Ks3KsrBTxLKDi9a3E=

What am I misunderstanding that's causing such a massive difference from the sample and command line?
","Result is displayed in hex not in base64. Here is the play ground link to the modified code
","88","<rest><go><encryption><hmac><sha>","1","0","2","2018-01-20 04:21:58","48352559","1","","","","","2018-01-20 03:28:56",""
"48352311","Trouble getting HMACsha256 to produce expected results","I'm trying to hook into the Binance API and have discovered that my implementation of HMACsha256 isn't producing the results that the sample documentation (and doing it in the command line) can. I'm trying to improve my knowledge of Go, but can't seem to crack this one.
Here's the documentation (Relevant Sample at ""SIGNED Endpoint Examples for POST /api/v1/order""): https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md
Without looking at the doc, here is the gist, my key is the following:
NhqPtmdSJYdKjVHjA7PZj4Mge3R5YNiP1e3UZjInClVN65XAbvqqM6A7H5fATj0j

my value is the following:
symbol=LTCBTC&side=BUY&type=LIMIT&timeInForce=GTC&quantity=1&price=0.1&recvWindow=5000&timestamp=1499827319559

When I use the terminal with the following command:
echo -n ""symbol=LTCBTC&side=BUY&type=LIMIT&timeInForce=GTC&quantity=1&price=0.1&recvWindow=5000&timestamp=1499827319559"" | openssl dgst -sha256 -hmac ""NhqPtmdSJYdKjVHjA7PZj4Mge3R5YNiP1e3UZjInClVN65XAbvqqM6A7H5fATj0j""

I receive the result
c8db56825ae71d6d79447849e617115f4a920fa2acdcab2b053c4b2838bd6b71

Which is what the documentation suggests. But when I use the following go program: 
package main

import (
    ""crypto/hmac""
    ""crypto/sha256""
    ""encoding/base64""
    ""fmt""
)

func main() {
    docSecret := ""NhqPtmdSJYdKjVHjA7PZj4Mge3R5YNiP1e3UZjInClVN65XAbvqqM6A7H5fATj0j""
    docQuery := ""symbol=LTCBTC&side=BUY&type=LIMIT&timeInForce=GTC&quantity=1&price=0.1&recvWindow=5000&timestamp=1499827319559""
    result := hmacify(docQuery, docSecret)
    fmt.Println(result)
}

func hmacify(message string, secret string) string {
    key := []byte(secret)
    h := hmac.New(sha256.New, key)
    h.Write([]byte(message))
    return base64.StdEncoding.EncodeToString(h.Sum(nil))
}

produces the result:
yNtWglrnHW15RHhJ5hcRX0qSD6Ks3KsrBTxLKDi9a3E=

What am I misunderstanding that's causing such a massive difference from the sample and command line?
","You got the same result in both cases. It's just encoded differently. The openssl command encodes it as hex and your function uses base64.StdEncoding.EncodeToString() to encode it as base64.
Here's a small Python 2 snippet showing this:
>>> x = ""c8db56825ae71d6d79447849e617115f4a920fa2acdcab2b053c4b2838bd6b71""
>>> y = ""yNtWglrnHW15RHhJ5hcRX0qSD6Ks3KsrBTxLKDi9a3E="".decode('base64').encode('hex')
>>> y
'c8db56825ae71d6d79447849e617115f4a920fa2acdcab2b053c4b2838bd6b71'
>>> x == y
True

To get the exact same result as the command line use hex.EncodeToString() as @Anuruddha suggested.
import ""encoding/hex""

func hmacify(message string, secret string) string {
    key := []byte(secret)
    h := hmac.New(sha256.New, key)
    h.Write([]byte(message))
    return hex.EncodeToString(h.Sum(nil))  // <--- change is HERE
}

","88","<rest><go><encryption><hmac><sha>","1","2","2","2018-01-20 04:21:58","48352559","1","","","","","2018-01-20 03:28:56",""
"41707503","Changing from SHA-1 to SHA-512","I am trying to change from SHA-1 to SHA-512 to have a better security but I am not totally clear how I can do the change. 
This is my method with SHA-1:
public static String sha1Convert(String password) {
            try {
                MessageDigest crypt = MessageDigest.getInstance(""SHA-1"");
                crypt.reset();
                crypt.update(password.getBytes(""UTF-8""));
                return byteToHex(crypt.digest());
            } catch (NoSuchAlgorithmException | UnsupportedEncodingException ex) {
                Logger.getLogger(UserLoginManaged.class.getName()).log(Level.SEVERE, null, ex);
                return null;
            }
        }

This is the method I have been doing but I am not sure if its working totally good because (and I am sorry if I am doing something wrong). I am changing the sha-1 to the sha-512, but then when I try to log on to my applications it tells me that the password is wrong. So I am not sure if it is that I hace the method wrong or if I am just ignorant about something. 
public static String sha512Convert(String password) {
    try {
        MessageDigest sh = MessageDigest.getInstance(""SHA-512"");
        sh.reset();
        sh.update(password.getBytes());
        StringBuilder sb = new StringBuilder();
        for (byte b : sh.digest()) sb.append(Integer.toHexString(0xff & b));
        return sb.toString();
    } catch (NoSuchAlgorithmException e) {
        Logger.getLogger(UserLoginManaged.class.getName()).log(Level.SEVERE, null, e);
        throw new RuntimeException(e);
    }
}

","There is little difference between SHA-1 and SHA-512 from a password security viewpoint, both can be computed in under 1us. There are reasons to upgrade from SHA-1 but this isn't one. 
Don't use a hash for password protection, use functions such as PBKDF2 (aka Rfc2898DeriveBytes), password_hash/password_verify, Bcrypt and similar functions.
Passwords are ""cracked"" these days by trying passwords from a 10 million word list. The time to hash a password is < 1us on a laptop, and attacker will be orders of magnitude faster. Unless it is spearfishing an attacker will be happy with the easiest 90%.
The point is to make the attacker spend a lot of time finding passwords by brute force. 
Protecting your users is important, please use secure password methods. 
","88","<java><security><sha>","0","2","1","2017-01-17 22:21:29","","0","3","1848654","","2017-01-17 21:47:21","2017-01-17 21:40:23",""
"46825370","Android Google Login - Developer Error","I have a problem with the Google Login. 
I've implemented the google-services.json file. The File contains two SHAs, the debug and release SHA. I've inserted both SHA on the firebase settings menu. Downloaded the google-services.json and placed it into the /app folder. 
The release SHA has to be the right one because I followed all steps to get the release SHA with the keytool! 
When testing my App on the Emulator everything works fine but when uploading to the Google Play Store (Beta Build), I get the Developer Error.
--> I know that the Developer Error means that it must be a Problem with the SHA.
I've already used Google Login in another App and there it works fine and I've done the same steps in my current Application.
Can you guys please help me!
Elias
","Make sure your sha is valid. Note that debug and release builds should be signed with different keys, so you actually need to provide 2 sha chekcksums. Also, look here: https://support.google.com/googleplay/android-developer/answer/7384423?hl=en
I hope you are not going to upload to Google Play app signed with debug key (which is wrong)
","87","<java><android><google-play-services><sha>","0","1","1","2017-10-19 09:40:18","46826983","0","1","","","","2017-10-19 08:12:21",""
"17153100","SHA-1 not giving the same answer","I'm trying to implement SHA-1 on Android with the following code
String name = ""potato"";

MessageDigest md = MessageDigest.getInstance(""SHA-1"");
md.update(name.getBytes(""iso-8859-1""), 0 , name.getBytes( ""iso-8859-1"").length );
Bytes[] sha1hash = md.digest();

textview.setText(sha1hash.toString());

but when i run this code twice, it gives me different hash codes to ""potato"". As far as i know they should give me the same answer every time i run the program, anyone have any idea what problem could it be?
","You can use this Code for getting SHA-1 value.
public class sha1Calculate {

        public static void main(String[] args)throws Exception
        {
             File file = new File(""D:\\Android Links.txt"");
            String outputTxt= """";
            String hashcode = null;

            try {

                FileInputStream input = new FileInputStream(file);

                ByteArrayOutputStream output = new ByteArrayOutputStream ();
                byte [] buffer = new byte [65536];
                int l;

                while ((l = input.read (buffer)) > 0)
                    output.write (buffer, 0, l);

                input.close ();
                output.close ();

                byte [] data = output.toByteArray ();


                    MessageDigest digest = MessageDigest.getInstance( ""SHA-1"" ); 

                byte[] bytes = data;

                digest.update(bytes, 0, bytes.length);
                bytes = digest.digest();

                StringBuilder sb = new StringBuilder();

                for( byte b : bytes )
                {
                    sb.append( String.format(""%02X"", b) );
                }

                    System.out.println(""Digest(in hex format):: "" + sb.toString());


            }catch (FileNotFoundException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (NoSuchAlgorithmException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        }

    }

Try this Link for any Help.
http://www.mkyong.com/java/how-to-generate-a-file-checksum-value-in-java/
","87","<md5><sha><sha1>","3","0","1","2014-01-27 09:21:35","","2","2","2133099","","2013-06-17 17:56:12","2013-06-17 17:12:19",""
"11715522","Can I safely distribute a hashed password?","I have an application whose source code is checked into a public repository. This source code includes configuration files, and in those configuration files are SHA-256 hashed passwords.
My understanding is that when it comes to hashed passwords, an end user doesn't actually have to enter the password you used to generate the hash, but any password that generates the same hash value. I believe this is called a collision.
So can I display my hashed passwords in public with a reasonable assurance that someone can't take that hash and then generate a password (or generate a collection) that can be used to get access to my application? Is that a guarantee that these hashing algorithms try to make? 
","There are no known practical attacks against SHA-2 in the general case. It's generally considered better to keep hashed passwords secret, though, because there are rainbow tables, dictionary attacks, and other such things. If you took the proper precautions such as salting, round robin hashing, and having a nice long passphrase, it should be perfectly safe.
It's still better to not do this, though. You never know what cryptographic attacks might be developed in the future.
","87","<security><sha>","0","1","2","2012-07-30 04:56:23","11715542","3","","","","","2012-07-30 04:46:53",""
"11715522","Can I safely distribute a hashed password?","I have an application whose source code is checked into a public repository. This source code includes configuration files, and in those configuration files are SHA-256 hashed passwords.
My understanding is that when it comes to hashed passwords, an end user doesn't actually have to enter the password you used to generate the hash, but any password that generates the same hash value. I believe this is called a collision.
So can I display my hashed passwords in public with a reasonable assurance that someone can't take that hash and then generate a password (or generate a collection) that can be used to get access to my application? Is that a guarantee that these hashing algorithms try to make? 
","It is not likely for someone to reverse a HASH, SHA1, SALT etc. There are some ways out there to reverse one, but if you think your at that much of a risk I'd use SHA1 and SALT for maximum security. Having a long password makes it difficult to reverse, but unless they are real seasoned coders, your not very like to be a victim of it.
Read up on the algorithms at Wikipedia...
SHA1: http://en.wikipedia.org/wiki/SHA-1
SALT: http://en.wikipedia.org/wiki/Salt_(cryptography)
Just use a unique password and you should be fine ;-)
","87","<security><sha>","0","0","2","2012-07-30 04:56:23","11715542","3","","","","","2012-07-30 04:46:53",""
"25393133","TFS : Deposit 5 pounds, get back 5 pounds?","Q1 : Does TFS gaurentee it's storage?
For instance, if I commit a file with content
printfn ""%s"" ""fizz buzz""

will I get back a file with content
printfn ""%s"" ""fizz buzz""

or will I get back file with content
printfn ""%s"" ""fizz bUzz""

and an error or a way of identifying the content checked out was incorrect.
Git uses SHA-1 to do this kind of thing.
Q2 : What happens on a git checkout when the content of file in the .git store becomes corrupted, and it's sha pointer is now 'incorrect'? I have never tried, but what would happen at the git command line when the bits on the disk of a git repo get corrupted?
Q3 : Similarly, what would happen on a TFS checkout when the content of files in the TFS database become corrupted?
","TFS uses MD5 for its checksum.  When you upload a file as part of a changeset or shelveset, you also send the MD5 that you calculated.  The server will also calculate the MD5 of your upload contents to validate that there was no corruption on the wire.  Similarly, when you perform a Get from the server, it will deliver the MD5 of the content and clients will validate that the checksum matches.
As to your question about corruption, I can only speak hypothetically and only from having worked on TFS.  Obviously if your database is corrupt, all bets are off and we make no guarantees as to anything.
When you say ""a TFS checkout"" (after having discussed ""a git checkout"" above it), I assume you mean ""a TFS working folder mapping"".  The only problem should be when you try to do a get of the corrupted file.  For example, if you had a corrupt $/Foo.cs at changeset 42 and you did a get of changeset 42, then it would fail.  Your local version would not be updated on-disk or on the server and you would not be at version 42 locally.
If, however, there existed a $/Foo.cs at version 43 and it was not corrupt, then you should be able to get changeset 43 without problems.  The server would not examine that previous version.
If you had gotten $/Foo.cs at changeset 42 before the database became corrupt, you should be able to check the file out (in the TFS terminology of ""checkout"", meaning to pend an edit), make changes, then check the file in, but there's certainly no guarantee of this.  You would need to make changes, since if a client tries to produce a changeset or shelveset that includes a file with the MD5 of the current shelveset, the server will instruct the client not to bother sending the changes.
Again, this is all fairly hypothetical.  We didn't exhaustively test data corruption scenarios.  Realistically, if your database is corrupt, all bets are off and you should restore from a backup.
","86","<git><tfs><sha><monotone>","0","2","1","2014-08-19 22:37:25","25394099","3","","870953","","2014-08-19 21:39:09","2014-08-19 21:17:45",""
"47266449","SHA checksum for +2GB file using FileStream","Why in this soulution which I found there is no Loop to use buffor few times?
using System.IO;
using System.Security.Cryptography;

private static string GetChecksum(string file)
{
    using (FileStream stream = File.OpenRead(file))
    {
        SHA256Managed sha = new SHA256Managed();
        byte[] checksum = sha.ComputeHash(stream);
        return BitConverter.ToString(checksum).Replace(""-"", String.Empty);
    }
}

I'm trying to generate SHA checksum for +2GB file. How it should be?
","You are using HashAlgorithm.ComputeHash(Stream) override. 
The loop is under the hood. 
Here is simplified source code of ComputeHash method:
public byte[] ComputeHash(Stream inputStream) 
{
    ...
    // Default the buffer size to 4K.
    byte[] buffer = new byte[4096]; 
    int bytesRead;
    do { 
        bytesRead = inputStream.Read(buffer, 0, 4096); 
        if (bytesRead > 0) {
            HashCore(buffer, 0, bytesRead);  // Actual hashing
        }
    } while (bytesRead > 0);
    ...
}

As you can see ComputeHash is actually hashing by 4096 byte chunks.
","85","<c#><.net><sha>","0","0","2","2017-11-13 14:30:26","47266709","4","","","","","2017-11-13 14:18:50",""
"47266449","SHA checksum for +2GB file using FileStream","Why in this soulution which I found there is no Loop to use buffor few times?
using System.IO;
using System.Security.Cryptography;

private static string GetChecksum(string file)
{
    using (FileStream stream = File.OpenRead(file))
    {
        SHA256Managed sha = new SHA256Managed();
        byte[] checksum = sha.ComputeHash(stream);
        return BitConverter.ToString(checksum).Replace(""-"", String.Empty);
    }
}

I'm trying to generate SHA checksum for +2GB file. How it should be?
","
Why in this soulution which I found there is no Loop to use buffor few times?

Because ComputeHash takes care of reading the entire stream and computing the hash value.
","85","<c#><.net><sha>","0","0","2","2017-11-13 14:30:26","47266709","4","","","","","2017-11-13 14:18:50",""
"51606276","hmac in python not matching hmac in PHP and node","I create an HMAC in Node like below:
const check = crypto.createHmac(""sha1"", ""mysecret"");
check.update(JSON.stringify(""mybody""));
const digest = check.digest(""hex"");

Then I create the HMAC in PHP:
hash_hmac(""sha1"",""mybody"",""mysecret"")

Then I create the HMAC in Python 3
key = bytes(""mysecret"", 'utf-8')
message = bytes(""mybody"", 'utf-8')
digester = hmac.new(key, message, hashlib.sha1).hexdigest():

Then HMAC from Node and PHP match, no issues. But the HMAC from Python is always different and I cant figure out why. 
Any help will be appreciated.
","","85","<php><python><hmac><sha>","0","","0","2018-07-31 05:56:41","","3","","","","","2018-07-31 05:56:41",""
"17399457","Encoding an SHA-1 string based on post variables","I'm trying to find a service that will allow me to POST to that will return an SHA-1 encoded string based off of the variables that I pass to it.
I haven't been able to find one so I've thought about writing my own PHP solution.
If I end up going this route, is there a specific best practice in PHP for creating SHA-1 stings?
","Here is an example from the php manual
$str = 'apple';

if (sha1($str) === 'd0be2dc421be4fcd0172e5afceea3970e2f3d940') {
    echo ""Would you like a green or red apple?"";
}

","84","<php><post><http-post><sha>","0","0","2","2013-07-01 07:40:35","17399527","5","","","","","2013-07-01 07:35:58",""
"17399457","Encoding an SHA-1 string based on post variables","I'm trying to find a service that will allow me to POST to that will return an SHA-1 encoded string based off of the variables that I pass to it.
I haven't been able to find one so I've thought about writing my own PHP solution.
If I end up going this route, is there a specific best practice in PHP for creating SHA-1 stings?
","Use sha1():

sha1 — Calculate the sha1 hash of a string

An example:
<?php
$str = 'apple';

if (sha1($str) === 'd0be2dc421be4fcd0172e5afceea3970e2f3d940') {
    echo ""Would you like a green or red apple?"";
}
?>

(source: sha1() documentation)
Hope this helps.
","84","<php><post><http-post><sha>","0","0","2","2013-07-01 07:40:35","17399527","5","","","","","2013-07-01 07:35:58",""
"49050919","How can I identify RSA Private key uniquely in C#","I am using bouncy castle RsaPrivateCrtKeyParameter to read RSA private key. 
I want to get some property to identify the RSA private key uniquely.
privateKey = bytes of the RSA privatekey
using (Stream stream = new MemoryStream(privateKey))
{
    using (var reader = new StreamReader(stream))
    {
        RsaPrivateCrtKeyParameters rsaPrivatekey;

        var privateKeyObject = new PemReader(reader).ReadObject();
        rsaPrivatekey = (RsaPrivateCrtKeyParameters) privateKeyObject;

        //KeyId = here some property of rsaPrivatekey to indentify this key uniquely 
    }
} 

I am casting the rsaPrivatekey to Org.BouncyCastle.Crypto.Parameters.RsaPrivateCrtKeyParameters. 
Can I use any of this class property to identify the key uniquely?
Can I use any of this methods - DP, DQ, P, PublicExponent, Q, QInv or GetHashCode
to get the unique data to indentify the key. 
My requirment is to get human readable string from the rsa key (like KeyId) so has to identify each rsa key uniquely. It might be some KeyId or thumbprint/fingureprint 
","He is wanting to store the Private keys, but give them an index parameter that is unique based on the content of the key.
In which case- I would recommend using Sha256 hashing of the private or public key associated with the private key, and then store both in a database.
","84","<c#><rsa><bouncycastle><sha>","0","1","2","2018-03-02 07:44:59","","12","","4828578","","2018-03-02 07:44:59","2018-03-01 13:39:03",""
"49050919","How can I identify RSA Private key uniquely in C#","I am using bouncy castle RsaPrivateCrtKeyParameter to read RSA private key. 
I want to get some property to identify the RSA private key uniquely.
privateKey = bytes of the RSA privatekey
using (Stream stream = new MemoryStream(privateKey))
{
    using (var reader = new StreamReader(stream))
    {
        RsaPrivateCrtKeyParameters rsaPrivatekey;

        var privateKeyObject = new PemReader(reader).ReadObject();
        rsaPrivatekey = (RsaPrivateCrtKeyParameters) privateKeyObject;

        //KeyId = here some property of rsaPrivatekey to indentify this key uniquely 
    }
} 

I am casting the rsaPrivatekey to Org.BouncyCastle.Crypto.Parameters.RsaPrivateCrtKeyParameters. 
Can I use any of this class property to identify the key uniquely?
Can I use any of this methods - DP, DQ, P, PublicExponent, Q, QInv or GetHashCode
to get the unique data to indentify the key. 
My requirment is to get human readable string from the rsa key (like KeyId) so has to identify each rsa key uniquely. It might be some KeyId or thumbprint/fingureprint 
","If the public exponent is fixed (usually 65537) you should just use some of the low-order bits of the public key modulus to form an index, but don't bother with the very lowest-order bit because it's always ""1"". This is of course very fast.
By using only the public key you don't risk leaking information about the private key into the index. If you are storing both private and public keys in the same database then you can do something like append a ""1"" bit then take the original index and append either a ""1"" bit or a ""0"" bit depending on whether the public or private key is being indexed.
","84","<c#><rsa><bouncycastle><sha>","0","1","2","2018-03-02 07:44:59","","12","","4828578","","2018-03-02 07:44:59","2018-03-01 13:39:03",""
"53660986","Java - The value of a salt stored in a file and the value of the same salt retrieved from file are different","I'm making a basic user authentication system on console in java. The user enters their username and password and I store the encrypted password with SHA-512 in a file. Then I prompt the user to ""log in"" and i need to validate that the password they input this time is the password they entered when they ""signed up"". The problem arises in the validation part. When i store the password, I store the salt along with it in the file. But because the salt is a byte[] array, it shows the same [B@232204a1 when i convert it to a string and store it in the file.
Through this answer what i did was that i stored the salt byte array values in a string by concatenating them together so it'd be a continuous value and easier to read during validation.
In the validation part, i read the stored salt correctly, but when i use .getBytes() and then use the same code from the link above, it ouputs a different value than the one i had stored. And hence when i use it to calculate the hashed password, it obviously gives me the wrong answer.
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.Scanner;

public class authenticationSystem {
     private byte[] salt;
    public static void main(String[] args) throws NoSuchAlgorithmException
    {
        Scanner sc = new Scanner(System.in);

        byte[] salt = getSalt();

        System.out.println(""Enter 1 for Sign up and 2 for log in and -1 to exit"");
        int option = Integer.parseInt(sc.nextLine());

        switch(option) {
            case 1:
                System.out.println(""Enter Username: "");
                String username = sc.nextLine();

                System.out.println(""Enter Password: "");
                String passwordToHash = sc.nextLine();

                boolean signupResult = signUp(username, passwordToHash, salt);

                if(signupResult == false) {
                    System.exit(0);
                }

                else {
                    System.out.println(""SignUp Successful"");
                    break;
                }
            case 2:

                System.out.println(""Enter Username: "");
                username = sc.nextLine();

                System.out.println(""Enter Password: "");
                passwordToHash = sc.nextLine();

                boolean loginResult = logIn(username, passwordToHash);

                if(loginResult == false) {
                    System.out.println(""Authentication Failed!"");
                    break;
                }

                else {
                    System.out.println(""Authentication Successful!"");
                    break;
                }

        }
}




   private static boolean logIn(String username, String password) {

       String absolutePath = ""C:\\Users\\asadn\\eclipse-workspace\\output.txt"";

       File file = new File(absolutePath);


       try(BufferedReader bufferedReader = new BufferedReader(new FileReader(absolutePath))) {  
        String currentLine = null;
        int count=1;
           while((currentLine = bufferedReader.readLine()) != null) {
               if(currentLine.equals(username)) {

                   currentLine = bufferedReader.readLine(); //get to line with salt
                   System.out.println(currentLine);
                   byte[] salt = currentLine.getBytes();
                   System.out.println(salt);

                   for(int i = 0; i<salt.length; i++) {
                        System.out.print(salt[i] & 0x00FF);
                        System.out.print("""");
                    }
                   System.out.println("""");
                   currentLine = bufferedReader.readLine(); //get to line with hashedPassword

                   String passwordToMatch = currentLine; //store in a string variable for comparison

                   System.out.println(passwordToMatch);

                   String passwordRetrieved = get_SHA_512_SecurePassword(password, salt);
                   System.out.println(passwordRetrieved);
                   if(passwordToMatch.equals(passwordRetrieved)){
                       return true;
                   }
               }
           }


       } catch (FileNotFoundException e) {
           // exception handling
       } catch (IOException e) {
           // exception handling
       }
       return false;
   } 

    private static boolean signUp(String username, String hashedPassword, byte[] salt) {

        String absolutePath = ""C:\\Users\\asadn\\eclipse-workspace\\output.txt"";

        File file = new File(absolutePath);

        String saltInStringFormat = """";

        for(int i = 0; i<salt.length; i++) {
            saltInStringFormat+=Integer.toString(salt[i] & 0x00FF);
        }
     // write the content in file 
        try(BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(file, true))) {  
            String securePassword = get_SHA_512_SecurePassword(hashedPassword, salt);
            bufferedWriter.write(username);
            bufferedWriter.newLine();
            bufferedWriter.write(saltInStringFormat);
            bufferedWriter.newLine();
            bufferedWriter.write(securePassword);
            bufferedWriter.newLine();
            bufferedWriter.close();
        } catch (IOException e) {
            // exception handling
            return false;
        }
        return true;
    }


    private static String get_SHA_512_SecurePassword(String passwordToHash, byte[] salt)
    {
        //Use MessageDigest md = MessageDigest.getInstance(""SHA-512"");
        String generatedPassword = null;
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA-512"");
            md.update(salt);
            byte[] bytes = md.digest(passwordToHash.getBytes());
            StringBuilder sb = new StringBuilder();
            for(int i=0; i< bytes.length ;i++)
            {
                sb.append(Integer.toString((bytes[i] & 0xff + 0x100), 16).substring(1));
            }
            generatedPassword = sb.toString();
        }
        catch (NoSuchAlgorithmException e)
        {
            e.printStackTrace();
        }
        return generatedPassword;
    }

    //Add salt
    private static byte[] getSalt() throws NoSuchAlgorithmException
    {
        SecureRandom sr = SecureRandom.getInstance(""SHA1PRNG"");
        byte[] salt = new byte[16];
        sr.nextBytes(salt);
        return salt;
    }
}

Now I understand that I'm going wrong in the conversion of byte to string and back but I have no other idea of how to make this work with a file. I'd really appreciate it if someone could help me.
","","84","<java><hash><sha>","1","","0","2018-12-06 23:02:30","","8","","","","","2018-12-06 23:02:30",""
"56708138","Java generated password not working on LDIF file","I am trying a simple LDAP example using LDIF from here [LDIF example][1]. I was able to setup everything and run it correctly using the default user/pass. 
However, I am trying to generate new users and I used the Java code below to generate passwords for ""joe"" but it doesn't seem to work :
 import java.nio.charset.StandardCharsets;
    import java.security.MessageDigest;
    import java.security.NoSuchAlgorithmException;

   private static String get_SHA_1_SecurePassword(String passwordToHash)
    {
        String generatedPassword = null;

        try {
            MessageDigest md = MessageDigest.getInstance(""SHA-1"");
            byte[] bytes = md.digest(passwordToHash.getBytes());
            StringBuilder sb = new StringBuilder();
            for(int i=0; i< bytes.length ;i++)
            {
                sb.append(Integer.toString((bytes[i] & 0xff) + 0x100, 16).substring(1));
            }
            generatedPassword = sb.toString();

        }
        catch (NoSuchAlgorithmException e)
        {
            e.printStackTrace();
        }
        return generatedPassword;
    }

Code for checking password from the sample link above:
public void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth
            .ldapAuthentication()
                .userDnPatterns(""uid={0},ou=people"")
                .groupSearchBase(""ou=groups"")
                .contextSource()
                    .url(""ldap://localhost:8389/dc=springframework,dc=org"")
                    .and()
                .passwordCompare()
                    .passwordEncoder(new LdapShaPasswordEncoder())
                    .passwordAttribute(""userPassword"");
    }

Here is the LDIF file snippet with the passwords:
  //working copy for ben from example
    dn: uid=ben,ou=people,dc=springframework,dc=org
    dn: uid=ben,ou=people,dc=springframework,dc=org
objectclass: top
objectclass: person
objectclass: organizationalPerson
objectclass: inetOrgPerson
cn: Ben Alex
sn: Alex
uid: ben
userPassword: {SHA}nFCebWjxfaLbHHG1Qk5UU4trbvQ=

    //new user ""joe""
    dn: uid=joe,ou=people,dc=springframework,dc=org
objectclass: top
objectclass: person
objectclass: organizationalPerson
objectclass: inetOrgPerson
cn: Joe S
sn: joe
uid: joe
userPassword: {SHA}9c509e6d68f17da2db1c71b5424e54538b6b6ef4

The password I used for joe is ""joe"" and I cant seem to get it accepted. Is the encryption different? I am using Windows by the way. 
","you can use this for SHA-512
You use instance of MessageDigest.getInstance(""SHA-1"") -->MessageDigest.getInstance(""SHA-512"");
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

public String get_SHA_512_SecurePassword(String passwordToHash, String   salt){
String generatedPassword = null;
    try {
         MessageDigest md = MessageDigest.getInstance(""SHA-512"");
         md.update(salt.getBytes(StandardCharsets.UTF_8));
         byte[] bytes = md.digest(passwordToHash.getBytes(StandardCharsets.UTF_8));
         StringBuilder sb = new StringBuilder();
         for(int i=0; i< bytes.length ;i++){
            sb.append(Integer.toString((bytes[i] & 0xff) + 0x100, 16).substring(1));
         }
         generatedPassword = sb.toString();
        } 
       catch (NoSuchAlgorithmException e){
        e.printStackTrace();
       }
    return generatedPassword;
}

Please check this question how-to-hash-a-password-with-sha-512-in-java
","84","<java><spring><ldap><sha>","1","0","2","2019-06-24 16:18:00","56714602","1","","4347600","","2019-06-24 12:50:50","2019-06-21 17:38:32",""
"56708138","Java generated password not working on LDIF file","I am trying a simple LDAP example using LDIF from here [LDIF example][1]. I was able to setup everything and run it correctly using the default user/pass. 
However, I am trying to generate new users and I used the Java code below to generate passwords for ""joe"" but it doesn't seem to work :
 import java.nio.charset.StandardCharsets;
    import java.security.MessageDigest;
    import java.security.NoSuchAlgorithmException;

   private static String get_SHA_1_SecurePassword(String passwordToHash)
    {
        String generatedPassword = null;

        try {
            MessageDigest md = MessageDigest.getInstance(""SHA-1"");
            byte[] bytes = md.digest(passwordToHash.getBytes());
            StringBuilder sb = new StringBuilder();
            for(int i=0; i< bytes.length ;i++)
            {
                sb.append(Integer.toString((bytes[i] & 0xff) + 0x100, 16).substring(1));
            }
            generatedPassword = sb.toString();

        }
        catch (NoSuchAlgorithmException e)
        {
            e.printStackTrace();
        }
        return generatedPassword;
    }

Code for checking password from the sample link above:
public void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth
            .ldapAuthentication()
                .userDnPatterns(""uid={0},ou=people"")
                .groupSearchBase(""ou=groups"")
                .contextSource()
                    .url(""ldap://localhost:8389/dc=springframework,dc=org"")
                    .and()
                .passwordCompare()
                    .passwordEncoder(new LdapShaPasswordEncoder())
                    .passwordAttribute(""userPassword"");
    }

Here is the LDIF file snippet with the passwords:
  //working copy for ben from example
    dn: uid=ben,ou=people,dc=springframework,dc=org
    dn: uid=ben,ou=people,dc=springframework,dc=org
objectclass: top
objectclass: person
objectclass: organizationalPerson
objectclass: inetOrgPerson
cn: Ben Alex
sn: Alex
uid: ben
userPassword: {SHA}nFCebWjxfaLbHHG1Qk5UU4trbvQ=

    //new user ""joe""
    dn: uid=joe,ou=people,dc=springframework,dc=org
objectclass: top
objectclass: person
objectclass: organizationalPerson
objectclass: inetOrgPerson
cn: Joe S
sn: joe
uid: joe
userPassword: {SHA}9c509e6d68f17da2db1c71b5424e54538b6b6ef4

The password I used for joe is ""joe"" and I cant seem to get it accepted. Is the encryption different? I am using Windows by the way. 
","Your function looks fine and should output a correct salted SHA-1 hash.
However, the storage scheme prefix in your LDIF file should be {SSHA} (for salted SHA1) instead of {SHA} - or you did not intend to use salt (?).
Also, the actual output of a hash algorithm is binary data which can be represented in hexadecimal or base64 strings. LDAP storage schemes use base64 encoding.
What can you do ? 

In your LDIF we can recognize hex strings, so the first thing is to make that hash encoded in base64 instead of hexadecimal, depending on imported base64 package : 
// Using org.apache.commons.codec.binary.Base64 
generatedPassword = Base64.encodeBase64String(bytes);

// Using java.util.Base64 
generatedPassword = Base64.getEncoder().encodeToString(bytes);

If you don't want to salt, you need to comment out the following line (with an empty salt string it is still ""salt"" and won't yield the same output as no salting) : 
md.update(salt.getBytes(StandardCharsets.UTF_8));

Set the proper storage scheme prefix according to the point above. For example, using SHA-1 with salt, the password attribute value in ldif should look like this :
userPassword: {SSHA}<base64_encoded_hash>


A few other things to consider :

OpenLDAP supports the following encryption scheme : SHA, SSHA, MD5, SMD5 and CRYPT. 
SHA and SSHA both use SHA-1 algorithm. 
To bring support for SHA-2 and its variants, use slapd's pw-sha2 overlay (support for SHA-224, SHA-256, SHA-384, SSHA-224, SSHA-256, SSHA-384). It can be either compiled statically with slapd, or loaded dynamically since it has module support enabled.

See also : 14.4. Password Storage from https://www.openldap.org/doc/admin24/security.html
","84","<java><spring><ldap><sha>","1","1","2","2019-06-24 16:18:00","56714602","1","","4347600","","2019-06-24 12:50:50","2019-06-21 17:38:32",""
"44344026","PHP/MySQL: Hashing common data","I am looking at my current database set up and it consists of a silly amount of user full home addresses in about 7 different tables, all with a varying degree of inconsistent data (due to the way people can type their postcode with/without spaces, for example).
The application in question is not yet live - not far off full completion but still not live, so any change now would be much easier than say 6 months down the line when there's a ridiculous amount of data in the tables.
Would it be worth my while to spend a few hours refactoring the code/database that handles user home addresses and instead of inserting the full one every time, using a hashing algorithm?
This would give us much greater consistency and could obviously be set up in a way that users could share an address hash and so therefore we could even search them by address much easier.
We currently use this method with storing user agents - hash the UA String and store it in its own separate table alongside a Medium Text column for the actual UA string to go, then instead we store the UA Hash in tables that require it (see below), and use SHA1. However, what options are available to me in terms of non-collision based hashing, but you've also seen to execute in the quickest possible time in a small-medium scale production environment?

This means that the two obvious ones, MD5/SHA1 are 100% not happening, and I don't really work with hashes bigger than that unfortunately. 
For the record, for the password encryption I use password_hash so don't freak out!
Obviously a user's home address is much more important than a user agent string which is why I'm asking what you'd recommend.
Thanks
","For those of you wondering, I went with SHA256.  
I didn't realise there's actually a function in openssl to benchmark hashing algorithms, which can be used like: openssl speed alg1 alg2 alg3 etc
Looking at the 64/256 byte results in the table below, although obviously it doesn't perform as quick as MD5/SHA1, I've decided its still quick enough for the production anyway.
I thought I'd post this and let anyone who doesn't know about openssl speed have a go.
[root@prod-use1a ec2-user]# openssl speed md5 sha1 sha256 sha512
Doing md5 for 3s on 16 size blocks: 9785239 md5's in 3.00s
Doing md5 for 3s on 64 size blocks: 7076501 md5's in 2.99s
Doing md5 for 3s on 256 size blocks: 3832312 md5's in 3.00s
Doing md5 for 3s on 1024 size blocks: 1363911 md5's in 3.00s
Doing md5 for 3s on 8192 size blocks: 194888 md5's in 3.00s
Doing sha1 for 3s on 16 size blocks: 10839355 sha1's in 3.00s
Doing sha1 for 3s on 64 size blocks: 7479305 sha1's in 2.99s
Doing sha1 for 3s on 256 size blocks: 4024302 sha1's in 3.00s
Doing sha1 for 3s on 1024 size blocks: 1478185 sha1's in 3.00s
Doing sha1 for 3s on 8192 size blocks: 227631 sha1's in 3.00s
Doing sha256 for 3s on 16 size blocks: 7984178 sha256's in 3.00s
Doing sha256 for 3s on 64 size blocks: 4370920 sha256's in 3.00s
Doing sha256 for 3s on 256 size blocks: 1904856 sha256's in 3.00s
Doing sha256 for 3s on 1024 size blocks: 589307 sha256's in 3.00s
Doing sha256 for 3s on 8192 size blocks: 77639 sha256's in 2.99s
Doing sha512 for 3s on 16 size blocks: 6481869 sha512's in 3.00s
Doing sha512 for 3s on 64 size blocks: 6479426 sha512's in 3.00s
Doing sha512 for 3s on 256 size blocks: 2425680 sha512's in 3.00s
Doing sha512 for 3s on 1024 size blocks: 869702 sha512's in 3.00s
Doing sha512 for 3s on 8192 size blocks: 120660 sha512's in 3.00s


The 'numbers' are in 1000s of bytes per second processed.
type             16 bytes     64 bytes    256 bytes   1024 bytes   8192 bytes
md5              52187.94k   151470.26k   327023.96k   465548.29k   532174.17k
sha1             57809.89k   160092.15k   343407.10k   504553.81k   621584.38k
sha256           42582.28k    93246.29k   162547.71k   201150.12k   212715.28k
sha512           34569.97k   138227.75k   206991.36k   296858.28k   329482.24k
[root@prod-use1a ec2-user]#

","84","<php><mysql><hash><sha>","0","0","1","2017-06-04 17:12:33","44356745","12","1","","","","2017-06-03 12:39:03",""
"56142850","How to create a Hash Code from Source Code in C#?","The problem:
I am trying to create a function that creates a hash code of the source code of my asp.net web application backend.
As long as nothing gets changed, this hash code needs to be identical. Even if I rebuild my project.
Does someone know, how I can do that?
What I tried:
The only working solution I found is to concat all important files to a big string and create a hash code out of it.
The problem of this solution is, that I have to add all the source files to the output directory, what shouldn't be done for security reasons.
Hope someone has a great idea =)
Thanks in advance!
Update:
I could solve my problem by enabling deterministic build as Renat suggested.
Just added the deterministic flag to my .csproj file as follows:
<Deterministic>True</Deterministic>

","
Even if I rebuild my project

You may use Deterministic Build, then it will produce the same binaries in each build being made out of same source codes. Then you may get the hash of binaries.
","84","<c#><asp.net><hashcode><sha>","4","4","1","2019-05-15 09:23:01","56142944","8","","6924674","","2019-05-15 09:23:01","2019-05-15 06:21:27",""
"50158759","Illegal keysize using BouncyCastleProdiver while signing PDF with ItextPDF","I am following the examples of this whitepaper
I made a method that signes the PDF using directly the KeyStore and it works great. the method signs the PDF correctly with no errors whatsoever
Now in the next example, the method is modified to use a .p12 file, and I have that method like this:
public void signp12() throws...
{
    BouncyCastleProvider provider = new BouncyCastleProvider();
        Security.addProvider(provider);

        KeyStore ks = KeyStore.getInstance(""pkcs12"", provider.getName());
        ks.load(new FileInputStream(PRIVATE), PASSWORD);
        String alias = (String) ks.aliases().nextElement();
        PrivateKey pk = (PrivateKey) ks.getKey(alias, PASSWORD);
        Certificate[] chain = ks.getCertificateChain(alias);
        Proveedor app = new Proveedor();
        app.firmar(SRC, String.format(DEST, 1), chain, pk, DigestAlgorithms.SHA256, provider.getName(), MakeSignature.CryptoStandard.CMS, ""test1"", ""bla bla"", PdfSignatureAppearance.NOT_CERTIFIED);
}

The method throws this exception
exception unwrapping private key - java.security.InvalidKeyException: Illegal key size
java.io.IOException
    at org.bouncycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi.unwrapKey(Unknown Source)
    at org.bouncycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi.engineLoad(Unknown Source)
    at java.security.KeyStore.load(KeyStore.java:1445)

I read in this link that It can be a problem with the JavaSecurity, so I have tested the maxlengh with int maxKeyLength = Cipher.getMaxAllowedKeyLength(""SHA"");
And I got that the maximun length is 128.
I followed then the instructions to copy the  local_policy.jar and US_export_policy.jar extracted from this file to the C:\Program Files (x86)\Java\jre6\lib\security then I recompile , I try again and get the same error and I also got the same maxlenght.
Any ideas of what is happening and how can I solve it?
I am using windows7 and JDK8
","I solve it using this solution
Basically the answer where the poster makes a refelction method to remove al restrictions
","83","<java><netbeans><itext><cypher><sha>","0","0","1","2018-05-03 16:00:45","","0","","","","","2018-05-03 15:28:04","2018-05-03 20:40:46"
"20851065","Do I need to 'fetch' before checking what the current SHA on a Git remote is?","I (think) I understand that I can use git rev-parse to determine the SHA of the current commit on any of my local Git branches, including those that begin with remotes/...; but I gather that this will not reflect the state at remote repositories corresponding to the latter unless I first git fetch. Is that correct? Is 
git fetch origin master
git rev-parse remotes/origin/master

the correct idiom for determining the SHA of the current commit on a remote branch? Are there side effects to performing the fetch that make this overdone? Is there another way?
","You are correct. Unlike tools like SVN, Git only stores and uses information locally.
If you want to see the very latest activity that may have been performed on a remote repo you can either:

git fetch
Remotely browse the repo, if the owner has enabled it.

Running git fetch regularly may not be a problem depending on you network etc. However, even with SVN, most people don't care about other commits until they themselves are ready to commit so having your repo updated every 60s is probably overkill.
Git users often commit and push their feature branch and so also don't care about other branches until integration time, which might be later and done in a different repo.
You need to make a choice that makes sense for your workflow and setup. However if you are migrating from a centralised model (such as SVN) don't be afraid to let go and try something more ""Git'sh"" for a time :-)
With regard to remote browsing. Git comes with a subcommand called instaweb git instaweb --help that will be able to serve repo info via browser
","81","<git><fetch><sha><git-remote>","0","1","2","2013-12-31 14:04:21","20851144","0","1","656912","","2013-12-31 14:04:21","2013-12-31 02:57:51",""
"20851065","Do I need to 'fetch' before checking what the current SHA on a Git remote is?","I (think) I understand that I can use git rev-parse to determine the SHA of the current commit on any of my local Git branches, including those that begin with remotes/...; but I gather that this will not reflect the state at remote repositories corresponding to the latter unless I first git fetch. Is that correct? Is 
git fetch origin master
git rev-parse remotes/origin/master

the correct idiom for determining the SHA of the current commit on a remote branch? Are there side effects to performing the fetch that make this overdone? Is there another way?
","git ls-remote origin master would also give you the sha of origin/master without actually performing a fetch (it won't download any objects or update anything in refs/remotes) but it's not part of any ordinary git workflow, probably because a sha isn't very useful without the commit that it refers to.
","81","<git><fetch><sha><git-remote>","0","1","2","2013-12-31 14:04:21","20851144","0","1","656912","","2013-12-31 14:04:21","2013-12-31 02:57:51",""
"18396975","How signature validation would be checked on server side?","Sorry, It may be posible few things are repeated in my question. 
I have gone through some documentation/discussion signing an API request and twitter signature documentation
As per the discussion here signing an API request With a signed request the password is kept safe and an attacker cannot use the information in the query to sign another request. 
But for signature generation uses SHA-1 non reverting hash function.
My Question is:- 
If signature used to authorizes /authenticate client request, how that signature used on server side to check and validate the user request? 
","","81","<api><hash><signature><sha>","2","","0","2013-08-23 07:12:17","","0","1","-1","","2017-05-23 12:13:11","2013-08-23 07:12:17",""
"20144278","how to work at the same time with multiple files inside file name array in linux shell script?","I have a shell script and i read all .s files in the specified folder first and then compile them to object file with a loop and after that link them to executable file.
this:
FILES=PTscalar_1.0/mibenchforpt/security/sha/*.s

for sfile in $FILES 
do

echo ""------------------------------------------------""
    echo $sfile
    objectFile=""${sfile%.s}.o""
    exefile=""${objectFile%.o}.ex""

    simplescalar/bin/sslittle-na-sstrix-as -o  $objectFile $sfile

done

but I have a problem: in sha mibench program we have 2 files that  each of them is in this flow:
.c -> .s -> .o

but at the last stage two .o files should be linked into one executable file.
how I can get two file names at the same time and create a command to link them.
main code is this:
simplescalar/bin/sslittle-na-sstrix-ld -o __sha.ex _sha.o _sha_driver.o

is there any way to see inside of FILES like this:
OFILES=PTscalar_1.0/mibenchforpt/security/sha/*.o
simplescalar/bin/sslittle-na-sstrix-ld -o $exefile OFILES[0] OFILES[1]

and after that doing that in a loop for all files with this pattern
first file is like *.o or *_main.o
second is: *_driver.o
Thanks
","Obviously this is possible in shell.  However many people find that the make utility is better for building software than shell scripts simply because of these dependencies.  take a look at GNU Make.  Its documentation contains numerous examples of what you're trying to do.
","81","<shell><filenames><sha>","1","1","3","2013-12-14 21:35:20","20588521","3","","3010110","","2013-11-22 12:19:20","2013-11-22 11:51:54",""
"20144278","how to work at the same time with multiple files inside file name array in linux shell script?","I have a shell script and i read all .s files in the specified folder first and then compile them to object file with a loop and after that link them to executable file.
this:
FILES=PTscalar_1.0/mibenchforpt/security/sha/*.s

for sfile in $FILES 
do

echo ""------------------------------------------------""
    echo $sfile
    objectFile=""${sfile%.s}.o""
    exefile=""${objectFile%.o}.ex""

    simplescalar/bin/sslittle-na-sstrix-as -o  $objectFile $sfile

done

but I have a problem: in sha mibench program we have 2 files that  each of them is in this flow:
.c -> .s -> .o

but at the last stage two .o files should be linked into one executable file.
how I can get two file names at the same time and create a command to link them.
main code is this:
simplescalar/bin/sslittle-na-sstrix-ld -o __sha.ex _sha.o _sha_driver.o

is there any way to see inside of FILES like this:
OFILES=PTscalar_1.0/mibenchforpt/security/sha/*.o
simplescalar/bin/sslittle-na-sstrix-ld -o $exefile OFILES[0] OFILES[1]

and after that doing that in a loop for all files with this pattern
first file is like *.o or *_main.o
second is: *_driver.o
Thanks
","Caveat: Your tags ""linux shell"" do not specify a specific shell. POSIX sh, the standard specifying minimum required behavior for /bin/sh, does not support arrays; you should use a specific shell, such as bash or ksh, which does. To do this, you need to start your script with an appropriate shebang (such as #!/bin/bash instead of #!/bin/sh), and do any manual invocations with the correct shell (so bash -x myscript if you would otherwise use sh -x myscript... though if you've set the shebang correctly and have +x permissions, you can always just ./myscript)

# this is broken
FILES=PTscalar_1.0/mibenchforpt/security/sha/*.s

...does not create an array.
# this works in bash, ksh, and zsh
files=( PTscalar_1.0/mibenchforpt/security/sha/*.s )

does create an array, which can be expanded as ""${files[@]}"". So:
# this works in bash and ksh, and probably zsh
for file in ""${files[@]}""; do
  ...
done

However, in this particular case, you don't have a reason to use an array at all:
# this works with absolutely any POSIX-compatible shell
for file in PTscalar_1.0/mibenchforpt/security/sha/*.s; do
  echo ""$sfile""
  objectFile=${sfile%.s}.o
  exefile=${objectFile%.o}.ex

  simplescalar/bin/sslittle-na-sstrix-as -o ""$objectFile"" ""$sfile""
done

Note a few corrections made in the above:

The right-hand-side of assignments in with no literal whitespace in their syntax do not need to be quoted.
All expansions (such as $objectFile) do need to be quoted, so, ""$objectFile"".
...yes, this does include echo; to test this, run s='*' and compare the output of echo $s to echo ""$s"".


To address the follow-up question you edited in:
ofiles=( PTscalar_1.0/mibenchforpt/security/sha/*.o )
simplescalar/bin/sslittle-na-sstrix-ld -o ""$exefile"" ""${ofiles[0]}"" ""${ofiles[1]}""

...is a literal answer, but this would need to be edited if you had two or more outputs. Much better to do it this way instead:
ofiles=( PTscalar_1.0/mibenchforpt/security/sha/*.o )
simplescalar/bin/sslittle-na-sstrix-ld -o ""$exefile"" ""${ofiles[@]}""

","81","<shell><filenames><sha>","1","1","3","2013-12-14 21:35:20","20588521","3","","3010110","","2013-11-22 12:19:20","2013-11-22 11:51:54",""
"20144278","how to work at the same time with multiple files inside file name array in linux shell script?","I have a shell script and i read all .s files in the specified folder first and then compile them to object file with a loop and after that link them to executable file.
this:
FILES=PTscalar_1.0/mibenchforpt/security/sha/*.s

for sfile in $FILES 
do

echo ""------------------------------------------------""
    echo $sfile
    objectFile=""${sfile%.s}.o""
    exefile=""${objectFile%.o}.ex""

    simplescalar/bin/sslittle-na-sstrix-as -o  $objectFile $sfile

done

but I have a problem: in sha mibench program we have 2 files that  each of them is in this flow:
.c -> .s -> .o

but at the last stage two .o files should be linked into one executable file.
how I can get two file names at the same time and create a command to link them.
main code is this:
simplescalar/bin/sslittle-na-sstrix-ld -o __sha.ex _sha.o _sha_driver.o

is there any way to see inside of FILES like this:
OFILES=PTscalar_1.0/mibenchforpt/security/sha/*.o
simplescalar/bin/sslittle-na-sstrix-ld -o $exefile OFILES[0] OFILES[1]

and after that doing that in a loop for all files with this pattern
first file is like *.o or *_main.o
second is: *_driver.o
Thanks
","I created this file and it worked:
#!/bin/bash
#compile to assembly:

FILES=*_driver.s

for sdriverfile in $FILES 
do

echo ""------------------------------------------------""
# s file
    echo $sdriverfile
    sfile=""${sdriverfile%_driver.s}.s""
    echo $sfile

# object files
    obj=""${sfile%.s}.o""
    obj_driver=""${sdriverfile%.s}.o""

#exe file
    exefile=""${sfile%.s}_as.ex""
    echo $exefile

#compile
    /home/mahdi/programs/simplescalar/bin/sslittle-na-sstrix-as -o  $obj $sfile
    /home/mahdi/programs/simplescalar/bin/sslittle-na-sstrix-as -o  $obj_driver $sdriverfile

#link
    /home/mahdi/programs/simplescalar/bin/sslittle-na-sstrix-ld -o $exefile $obj $obj_driver -L /home/mahdi/programs/simplescalar/sslittle-na-sstrix/lib -lc -L /home/mahdi/programs/simplescalar/lib/gcc-lib/sslittle-na-sstrix/2.7.2.3/ -lgcc



done

thanks for answers.
","81","<shell><filenames><sha>","1","0","3","2013-12-14 21:35:20","20588521","3","","3010110","","2013-11-22 12:19:20","2013-11-22 11:51:54",""
"54798726","What is the probability of finding the possible passwords if the first 5 digits of the SHA-1 hashed value is known?","happened to read about a service that checks a password against commonly used / breached ones. 
https://www.troyhunt.com/ive-just-launched-pwned-passwords-version-2/
A given password is hashed (SHA-1) and then the first 5 characters of the hash is compared against the commonly used ones. This service is exposed via API. This could mean that the first 5 digits of the hash is exposed to the outside world. Isn't that a risk the API users are taking?
What is the probability of finding the possible passwords (eg: rainbow tables) if the first 5 digits of the SHA-1 hashed value is known?
Also if we don't find a matching record - that indicates that the password is not in the list of pwned set. Isn't that a clue that the password is outside this set?
","Everything you've asked (and why the first comment in response to your question isn't relevant) is either answered in the blog post you linked to or in the ensuing discussion in the comments. In short:
The first 5 chars means there are 16^35 different possible suffixes. The total possible values the original password could be is infinite.
You could make an argument that the law of probability dictates the underlying password is more likely to be one already in HIBP and in there with a higher prevalence count, but from the hash prefix alone you have absolutely nothing to verify that assumption.
And even if you could reliably guess the actual password, there's no context of the username it's associated to. Depending on how it's queried, there may also be no context as to which service is checking the API hence no information about where the password is actually used.
And if you're still paranoid after all that, just download the hashes and use them locally 🙂
","80","<security><sha1><password-protection><sha>","0","0","1","2019-03-03 03:14:14","","2","","2857756","","2019-03-02 06:47:09","2019-02-21 03:21:04",""
"25547473","How can i pad the message in sha family","I'm trying to understand padding in sha family.
padded message abc is 61626380000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000018
a=61 , b=62 and c=63 I got it. 18 means 24 in hex which is abc => 3.8
what is 8 and the whole zeros for?
Thanks for the answers
","To extend someWhereElse's comment.  SHA padding extends the message to the next block boundary.  At the end of the message add a 1 bit (not byte) followed by zero bits until 64 bits from the end of the block.  Use the last 64 bits of the block to hold the length of the message in binary.
Your padded block is made up of:
616263 : ""abc"" - the message text.
8      : ""1000"" - the 1 bit to start the padding, followed by padding zeros.
0...0  : The rest of the padding zero bits.
0000000000000018 : 64 bit message length, 24 bits in this case.

If the message ends within 65 bits of the block boundary, then the padding needs to include a whole extra block.
","80","<algorithm><hash><padding><sha>","0","0","1","2014-08-28 16:39:54","25553864","1","1","1860929","","2014-08-28 11:18:08","2014-08-28 11:15:11",""
"54136939","Generate SAS Token for Azure Blob Storage with VBA","I know this is not the most secure way to access a blob storage but I am not too worried about security, at the moment. The files I will be storing are not confidential and I will be keeping a close eye on the usage of the blob.
I found code that will allow me to upload a file to a blob from a VBA solution but I am currently unable to do an upload/download because I need to be able to generate the hashed signature that will go inside of the token I will be sending along with the URL in order to upload/download a file from the blob. Even though I am not too concerned about security, I would rather not generate a token from Azure that wouldn't expire a long time into the future. I'd like to have the token expire after a short period of time.
Would it be possible to generate this hashed signature in VBA? From what I could find online, I am currently unsure if it is even possible at this time.
","","79","<vba><sha><azure-blob-storage>","0","","0","2019-01-10 21:11:19","","2","","","","","2019-01-10 21:11:19",""
"21586322","More secure S3 URLs","I am currently following Amazon's documentation to sign S3 URL's for download. Using hmac-sha1 is good but I want something more secure since there are inherent flaws as of 2010. Also, it is good marketing too to use strong encryption. I KNOW that others are using 256-bit encryption when signing their URLs. I too would like to use sha256 or sha512, but it seems like Amazon's docs don't tell you how this is possible. They only reference hmac-sha1 (which I'm currently using w/ succcess).
Signature = URL-Encode( Base64( HMAC-SHA1( YourSecretAccessKeyID, UTF-8-Encoding-Of( StringToSign ) ) ) );

How would I go about using something more secure?
Thanks
","There are inherent flaws to sha-1 but they don't carry over to hmac-sha-1, so there's no need to worry.
That being said, I actually did find the documentation you were looking for here.
","77","<encryption><amazon-web-services><amazon-s3><sha>","0","2","1","2014-02-05 23:08:12","21590134","0","","","","","2014-02-05 19:09:46",""
"22764457","Different hashes for (apparently) identical strings","I'm getting different hash values for database-retrieved string and same value submitted through html form.
What am I doing wrong?
database:
SET NAMES utf8;
SET foreign_key_checks = 0;
SET time_zone = '+05:30';
SET sql_mode = 'NO_AUTO_VALUE_ON_ZERO';

DROP TABLE IF EXISTS `fcb_task`;
CREATE TABLE `fcb_task` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `state` enum('unlocked','locked') CHARACTER SET latin1 NOT NULL,
  `task_specific_notes` text CHARACTER SET latin1,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=ascii;

INSERT INTO `fcb_task` (`id`, `state`, `task_specific_notes`) VALUES
(529,   'unlocked', 'INCLUDED USERS:ONE USER PER LINE:\n1001921: Sudhamayi  Gill\n1001931: Ananga  Gupta\n----------------------------------------------------------------\nDESCRIPTION:\n elit ac molestie praesent convallis etiam metus in, augue sapien praesent pulvinar imperdiet class. sed fringilla eget pellentesque ullamcorper tincidunt congue dolor aliquet nulla, rutrum varius tortor dapibus mi gravida a sociosqu, cras ut sed curabitur sodales nibh feugiat sit. ipsum felis nam neque ultricies nibh libero luctus magna, mi arcu hendrerit purus consectetur duis etiam. molestie feugiat hac per semper sapien nisi etiam mollis, est sagittis auctor aliquet curae per pellentesque. luctus dolor magna eros dapibus facilisis massa cras molestie pulvinar, consequat suscipit rhoncus quisque lorem nulla diam odio ac nulla, tristique fermentum ut tempor faucibus fringilla eleifend scelerisque. \r\n erat sodales litora laoreet cursus mattis turpis duis metus ut iaculis, ipsum habitant fusce dui morbi in elit dictumst nisi tellus iaculis, praesent auctor senectus habitant pulvinar augue etiam augue ut. ad accumsan nunc etiam platea tempor at, enim aenean ultrices eleifend litora ad donec, gravida eleifend quis fames non. ut massa feugiat elementum ipsum rhoncus eleifend elit nibh etiam, semper dictumst adipiscing pulvinar nunc torquent eleifend donec. porttitor in et mauris dui ullamcorper at et tellus at, praesent neque turpis nisl arcu elit etiam ut consectetur, platea mauris gravida ante posuere sed accumsan mauris.\r\n\r\nnostra dapibus leo facilisis, iaculis. \r\n ut congue taciti suspendisse praesent auctor mauris massa vulputate, euismod nam tempus massa donec ornare dui nisi eleifend, augue suspendisse pharetra lectus conubia potenti lorem. in ad consequat consectetur integer odio hac, ipsum lobortis fames dolor aenean urna dictumst, vitae porta rhoncus netus hendrerit. accumsan vestibulum accumsan potenti convallis ullamcorper diam molestie, aliquam amet placerat neque faucibus magna sociosqu, praesent turpis odio praesent bibendum semper. lacinia mauris tellus dolor turpis cursus cubilia condimentum, aliquet neque lacus habitasse ultricies eget, dictum inceptos tincidunt consectetur nisi egestas. imperdiet nisl congue etiam accumsan felis, aliquet ornare fringilla curae rutrum, pellentesque risus maecenas eget. ');][1]

weirdsha1.php
<?php
$conn = mysqli_connect('localhost','root','toor','problem') or die(""Connection Failed"");
$result = mysqli_query($conn,""SELECT `task_specific_notes` FROM `fcb_task` LIMIT 1"") or die(""query failed"");
$task_specific_notes = null;
while($row = mysqli_fetch_assoc($result)){
    $task_specific_notes = $row['task_specific_notes'];
}

$post_SHA256 = 'Not calculated';
if($_SERVER['REQUEST_METHOD']=='POST'){
    $post_SHA256 = hash('sha256',$_POST['task_specific_notes']);
}


?>
<!DOCTYPE html>
<html>
<body>
<form method=""post"">
<textarea readonly=""readonly"" name=""task_specific_notes"" rows=""15"" cols=""80""><?php echo $task_specific_notes;?></textarea>
<br>
<input type=""submit"">
</form>
<p>sha256 of database value: <?php echo hash('sha256',$task_specific_notes); ?></p>
<p>sha256 of string submitted :<?php if(isset($post_SHA256)) echo $post_SHA256; ?></p>
</body>
</html>

I think character encoding is involved, but can't figure the exact problem.

","Take a look at the byte stream of the strings via
foo($_POST['task_specific_notes']);
foo($task_specific_notes);

function foo($s) {
    echo '<pre>';
    for($i=0;$i<strlen($s); $i++) {
        printf('%02X ', ord($s[$i]));
    }
    echo '</pre>';
}

The connection to the MySQL server has an encoding ""attached"" to it as well.
So if for example the input from the browser is utf-8 encoded but the MySQL connection uses latin-1 you can easily get differently encoded strings.
see also:

http://dev.mysql.com/doc/refman/5.5/en/charset-connection.html
http://docs.php.net/mysqli.set-charset

","77","<php><mysql><character-encoding><sha>","0","1","1","2014-03-31 14:44:16","22764633","8","","1066726","","2014-03-31 14:42:03","2014-03-31 14:36:08",""
"36404833","Barclaycard ePDQ - custom user generated amounts","Can you set up Barclaycard ePDQ to accept manual payments from customers? As opposed to using it for purely product based e-commerce purposes. 
For example - customer a visits the website, clicks payment section, then enters the amount they want to pay for - e.g £121.50 - then on submit goes to Authorisation/Barclaycard section.
Is there a way that ePDQ can work in this format? I am familiar with how ePDQ would work with an online store but not for a service based business.
... I have read through the guides, forums and FAQ's to try and find out but can't find any further info on this and the support team are not responding, so hope someone can help! Thankyou
","No it won't.  But you can generate a pay by link email.  The recipient clicks on the link and is taken to the ePDQ payment page which is already pre-filled with the amount, ready to take the card details.  Don't know if this might fulfil your need.  You can set this up from the ePDQ back office.
You should be sending your emails to epdqsupport@barclaycard.co.uk. I'm confident you'll get a reply.
","76","<paypal><e-commerce><payment-gateway><sha><payment-processing>","0","2","1","2016-04-05 07:24:17","36419711","0","","","","","2016-04-04 14:01:45",""
"52069243","Is there a SHA that's guaranteed to produce a unique hash?","I am looking for a way to hash a user id, obtained from a 3rd party service, such that I can use the hash as a primary key.
My understanding is that the usual SHA-512 style algorithms, given an input string that is guaranteed to be unique, are not guaranteed to produce a hash value that is also guaranteed to be unique.
Is there a hashing algorithm that will produce an unique hash?
More specifically is there such an algorithm supported out of the box by NodeJS 10.9 or better
","Most hashing algorithms are doing their best to avoid collisions. SHA 512 ought to be fine for you, if not SHA 256. Note that if you can see collisions in the input data, there will be collisions in the hashes, in which case I recommend appending something else likely unique to two separate accounts - such as the timestamp they were created - before inputting the value into the hash. This will work just fine so long as both inputs are immutable and they never change on the account. 
You can use crypto.getHashes() to view available hashes and pick the one you want. You are asking after uniqueness and not security so faster is better.
This answer is also related:
When using SHA-256 hashes as a primary key, is it OK to ignore the possibility of collisions?
","75","<node.js><encryption><sha><cryptojs>","1","1","2","2018-08-29 04:31:26","52069433","4","","","","","2018-08-29 03:56:58",""
"52069243","Is there a SHA that's guaranteed to produce a unique hash?","I am looking for a way to hash a user id, obtained from a 3rd party service, such that I can use the hash as a primary key.
My understanding is that the usual SHA-512 style algorithms, given an input string that is guaranteed to be unique, are not guaranteed to produce a hash value that is also guaranteed to be unique.
Is there a hashing algorithm that will produce an unique hash?
More specifically is there such an algorithm supported out of the box by NodeJS 10.9 or better
","Length of a SHA-512 hash is 64 bytes(512 bits) long which gives you 10154 combinations of values. So it has a very less (i mean a very very less ) chance of getting same hash. 
How much very less it is, think of the weight of the sun from grams (which is weigh million times like the earch). If any other planet weight 10154 of grams, not even a millions of millions suns combined can be equals to that amount.
So by very less, it means never. Even the bitcoin addresses are using this method as the wallet address. If you by any chance can find that one combination, you will be a billionaire. I promise

","75","<node.js><encryption><sha><cryptojs>","1","1","2","2018-08-29 04:31:26","52069433","4","","","","","2018-08-29 03:56:58",""
"28785419","Google API Key for every possible App","So i'm building an app on appcelerator that uses Google Maps API to show some information on Maps (for android).. I've read all the tutorials, and instructions from Google Developers Console about requesting an API Key. As far as I know, an API Key depends on a SHA1 Fingerprint of the keystore you're using to test your app. That's just fine, I got my API Key and everything works on my Development environment. 
The problem is that my boss, at the moment of testing, can't get to see the maps, I think cause his ""dev_keystore"" SHA1 defers from mine, so there must be an Authentication problem. (that i know right)
But what bothers me the most is that there is another app that he (or someone on his team) builded, I get that app to my development environment, runs it with his API Key, and it works... even using my dev_keystore i guess...
So my question is: is it possible to create an API Key that works on every environment, regarthless the key_store SHA1 and stuffs ? I mean, how in hell is that API Key configured that works fine on my computer, as well as in his.?
","Ok, i figured out what's going on.. The default keystore that comes with titanium studio is the same for every installment of it. So the other developers might have (and the did) created an API Key for those apps with the default keystore, and that's why it is working on every environment. 
I bet that when my boss tries to publish that app, it will not work at all. he'll need to create a more app-related API Key, but that's another story to tell.
","75","<api><google-maps><titanium><sha><android-keystore>","0","0","1","2015-02-28 20:12:46","","4","","","","","2015-02-28 18:42:35",""
"54030452","NPM 'crypto' returning different hash values than online generators (node)","I am probably not using the crypto module correctly, maybe someone can help me out.
The goal is to find the sha-256 hash of a file dropped in a dropzone. The problem is that the hash being returned is different from online hash checkers (which are returning the seemingly correct values). Here is my code:
const crypto = require(""crypto"");
const hash = crypto.createHash(""sha256"");

handleOnDrop = file => {
    hash.update(file);
    const hashOutput = hash.digest(""hex"");
    console.log(hashOutput);
  };

Crypto docs - https://nodejs.org/api/crypto.html#crypto_node_js_crypto_constants
I am fairly sure the hash values I am getting from this code is not just the file name, I checked a few permutations with the online checkers.
Any ideas? Thanks!
","Dropzone events return a File class object, this object is based on the Blob class and doesn't provide direct access to the data of the file.  In order to use the data in the file, you must use the FileReader class as outlined in the Mozilla examples
Crypto is expecting a buffer when you call hash.update, but file isn't a Buffer like it would be in these examples. Dropping a Blob into hash.update probably doesn't have the behavior you are expecting.
So, assuming you're using WebPack to provide access to the Node standard libraries, your code should need to do something like this:
  handleOnDrop = ((file) => {
    const reader = new FileReader();
    reader.onload = ((event) => {
      hash.update(Buffer.from(event.target.result));
      const hashOutput = hash.digest(""hex"");
      console.log(hashOutput);
    });
    reader.readAsArrayBuffer(file);
  });

","75","<node.js><hash><sha>","0","1","1","2019-01-03 23:49:51","54030860","3","","6815505","","2019-01-03 23:49:51","2019-01-03 22:06:55",""
"43860600","C# Duplicate '\' with SQL Server 2008","I have a problem when I run a SQL command and the result is a hashed password sha 256
Password in database: ""Z?VU??u2???f?[??\n?Mn??=1???<3?\v?""
Password returned by c# after the query: ""Z?VU??u2???f?[??\ \n?Mn??=1???<3?\ \v?""(I put a space because it is deleted by the page)
This is my code: 
byte[] data = System.Text.Encoding.ASCII.GetBytes(txtPassword.Text);
data = new System.Security.Cryptography.SHA256Managed().ComputeHash(data);

String hash = System.Text.Encoding.ASCII.GetString(data);

SqlDataAdapter da = new SqlDataAdapter();

string Command = ""Select * From Users where Status=1 and Username='"" + txtUser.Text + ""'"" + "" and Password='"" + hash + ""'"";
da.SelectCommand = new SqlCommand(Command, Database.Connection);

da.Fill(dsResult);

if (dsResult.Tables[0].Rows.Count != 0)
{
    DoSomething();
}

I saw the error when I try this 
Select Password 
From Users 
Where Status = 1 
  And Username = '"" + txtUser.Text + ""'""

and the result was the password but with duplicate \.
In SQL Server Management Studio, this query: 
Select * 
From Users 
Where Status = 1 
  And Username = 'Rick' 
  And Password = 'Z?VU??u2???f?[??\n?Mn??=1???<3?\v?'

works perfectly.
Thank you.
Edit: Injection Changes.
New Code:
                SqlDataReader da;
                string Command= @""Select * From Users where Status=1 and Username=@User and Password=@Password"";
                SqlCommand cmd = new SqlCommand(Command, Database.Connection);
                cmd.Parameters.Add(""@Password"", SqlDbType.NVarChar).Value = ""Z?VU??u2???f?[??\n?Mn??=1???<3?\v?"";
                cmd.Parameters.Add(""@User"", SqlDbType.NVarChar).Value = txtUsuario.Text.Replace("" "", """");
                da = cmd.ExecuteReader();
                if (da.HasRows)
                {
                    da.Read();
                    DoSomething();
                }

But the problem persists. When C # executes the query interprets that the password in the database has the double slash then it never matches with the input password
","By using SqlParameter you can send variable without loosing data and avoid SQL Injection like this:
string insertString = @""Select * From Users where Status=1 and Username='Rick' and Password=@pass"";
SqlCeCommand cmd = new SqlCeCommand(insertString, c);
cmd.Parameters.Add(""@pass"", SqlDbType.NVarchar).Value = ""Z?VU??u2???f?[??\n?Mn??=1???<3?\v?"";
//And the rest

","74","<c#><sql><sql-server><sql-server-2005><sha>","0","1","1","2017-05-09 14:30:21","","4","","6501199","","2017-05-09 14:30:21","2017-05-09 03:32:07","2017-05-09 09:58:38"
"11379425","HDI: Determine how a string was encoded?","When checking audit logs for a proxy server, I see huge amounts of login POSTs that include information regarding usernames or passwords that look like they're Base64 encoded.  It's clearly from some kind of malware activity, since traffic shows any successful logins result in forum spam, but that's not the focus of the question.
Take a look at these real examples (minus usernames, to protect the innocent):

2012-07-07 15:04:49,741 POST Data (bitstudyclub.org):
  username=ANONYMIZED&password=kc1ahpXXE&remember=yes&submit=Login&action=do_login&url=
2012-07-07 15:06:52,081 POST Data (www.vampirediaries.org):
  username=ANONYMIZED&password=KDbcZ75fg&remember=yes&submit=Login&action=do_login&url=
2012-07-07 15:08:37,983 POST Data (www.missionmountain.com):
  XID=52ee69654fddd13d2a0323c95eaca5c7b736bdd8&ACT=9&FROM=forum&mbase=http:
%2F%2Fwww.missionmountain.com%2Findex.php%2Fforums%2Fmember2%2F&boa 
rd_id=1&RET=http:%2F%2Fwww.missionmountain.com%2Findex.php%2Fforums%2F&site_id=1&
username=ANONYMIZED&auto_login=1&password= yn2b4ne9VC &sub 
mit=Login
2012-07-07 15:19:47,476 POST Data (www.diecutdesigner.com):
  username=ANONYMIZED&password=8zcs13hzYH&remember=yes&submit=Login&action=do_login&url=
2012-07-07 15:20:36,729 POST Data (classjuice.com):
  username=ANONYMIZED&password=8zcs13hzYH&remember=yes&submit=Login&action=do_login&url=
2012-07-07 15:20:43,866 POST Data (wodrpg.com):
  username=ANONYMIZED&password=8zcs13hzYH&remember=yes&submit=Login&action=do_login&url=

After seeing this kind of thing over and over again, my question becomes how do I figure out the encoding of the Base64-looking ""password"" strings?  If these strings were actual (MD5/SHA1-looking) hashes, it seems like one could try and recover the plaintext by checking rainbow tables, but I don't see anyway to get from the point of ""I have a random non-hex string"" to ""Here's how I know (x) is the hash from which that random string was derived.""
How does one identify ""password"" strings from POST entries (like the above) as a given encoding, and then convert them back to actual password hashes?
","They probably are not hashes. They are random strings.
If they were Base64 encoded, they would have a different length (it would be divisible by 4).
So probably these are attempts to login into accounts the spammers created earlier (or believe they created earlier)?
HTTP forms usually submit passwords in plaintext, which is why you should use https.
","74","<post><passwords><base64><md5><sha>","0","0","1","2012-07-08 10:25:45","11382392","0","","265597","","2012-07-08 10:17:10","2012-07-07 23:18:43",""
"54274593","How to compute key hash for Facebook from deployment_cert.der file?","I have uploaded my app APK to google and enabled app signing key to let google sign  up my app .Now ,I need the deployment key hash requested by facebook ,I did downloaded the deployment_cert.der file used to generate fingerprints but i don't know how to compute the required Key hash by facebook.Please do not tell me how to generate key hash from key store since I already have generated the key hash for the testing purposes ,what I want know is the Key hash for the release version of my app APK which is signed by google .
","
from SHA-1 hash in hex format (as found in Play console) you can convert it into base64 hash code
example:
echo 00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00 | xxd -r -p | openssl base64
and then copy generated code to 
    facebook dev account -> your app -> Basic Steeings -> Android -> Key Hashes
","74","<android><facebook><android-studio><sha><android-keystore>","1","1","1","2019-10-14 10:07:17","58374495","0","","8820190","","2019-01-20 08:13:23","2019-01-20 08:02:03",""
"39368227","Optimize SHA256 checking in php","I have SHA256 hash text, and i know original text is a string and consist of 0-9 numbers and letters a-z, A-Z  that is in range (000000-ZZZZZZ).
This code checks all possible options, and returns the original text
This code working long time (for example if string length is 5 then it works 30 minutes, for case if length 6 it works 30*62 minutes ) and i think this is not best solution for this case.
Please help optimize it.
    $count=0;
    $start_date =microtime(true); 

$s=array(0,1,2,3,4,5,6,7,8,9,""a"",""b"",""c"",""d"",""e"",""f"",""g"",""h"",""i"",""j"",""k"",""l"",""m"",""n"",""o"",""p"",""q"",""r"",""s"",""t"",""u"",""v"",""w"",""x"",""y"",""z"",""A"",""B"",""C"",""D"",""E"",""F"",""G"",""H"",""I"",""J"",""K"",""L"",""M"",""N"",""O"",""P"",""Q"",""R"",""S"",""T"",""U"",""V"",""W"",""X"",""Y"",""Z"");
for($g=0;$g<62;$g++)
{
    for($h=0;$h<62;$h++)
    {
        for($i=0;$i<62;$i++)
        {
            for($j=0;$j<62;$j++)
            {
                for($k=0;$k<62;$k++)
                {
                    for($l=0;$l<62;$l++)
                    {
                        $count++;
                        if (hash(""sha256"",$s[$g].$s[$h].$s[$i].$s[$j].$s[$k].$s[$l])=='0a482c589594109cea209233a1f3bfa51f8a52e4534c40e9511c6030ee0f594a')// string is ZZZZZZ
                        {
                            echo $s[$g].$s[$h].$s[$i].$s[$j].$s[$k].$s[$l].""<br/>"";
                            echo $count.""<br/>"";
                            $end_date =microtime(true);
                            echo ($end_date-$start_date)/60;
                            break(6);
                        }
                    }
                }
            }
        }   
    }   
}

","You can't optimize it to break 0-9a-zA-Z fastest. Of course You can optimize this code a little (also change PHP for Python or something faster), but only gave You boost from 30 minutes to 10 minutes for 5 chars. 6 chars needs much about 6 hours. And 7 chars measured in days. 8 chars in years etc. It's impossible to do it faster.
You should know that an sha256 is a method of encryption, that in assumption do not allow to decrypt, that's the purpose of this method. Unfortunately (fortunately for You), in the case of short strings it's possible to decrypt in short time.
","74","<php><optimization><cycle><sha256><sha>","-1","0","1","2016-09-08 06:47:34","","5","","2873907","","2016-09-07 11:26:32","2016-09-07 11:06:24",""
"47600978","SSE2 SHA1 Problems","I am trying to implement SHA1 with SSE2 instructions in C.
The initialization seems to work, but if i try
round1(testhashe, testhasha, testhashb, testhashc, testhashd, loadConstant(b[z]));

as first round of my algorithm, i get errors. Constants and Values before are checked to be right, but the last value will be wrong. My Macros are
#define rotthirty(val) (_mm_or_si128(_mm_slli_epi32(val,30),_mm_srli_epi32(val,2)))

#define f1(b,c,d) (_mm_xor_si128(d,_mm_and_si128(b, _mm_xor_si128(c, d))))

// Round functions
#define round1(A,B,C,D,E,w) \
temp = rotthirty(A);\
temp = _mm_add_epi32(temp,f1(B, C, D));\
temp = _mm_add_epi32(temp,k1);\
temp = _mm_add_epi32(temp,w);\
E = _mm_add_epi32(temp, E);\
B = rotthirty(B);\

These worked before i changed to the SSE2 functions without problems, i just changed the operators to functions. What am i doing wrong?
Output after this function from with intrinsics and 4 sha calculations at a time
Vector: 67452301 67452301 67452301 67452301
Vector: 7bf36ae2 7bf36ae2 7bf36ae2 7bf36ae2
Vector: 98badcfe 98badcfe 98badcfe 98badcfe
Vector: 10325476 10325476 10325476 10325476
Vector: 734fe2b5 724fe2b5 8b4ee2b5 8a4ee2b5

which except the last line contains the right values, as can be seen in executing SSE2 free working code after Round1
67452301
7bf36ae2
98badcfe
10325476
122fa21

","Instead of rot 30 it had to be rot 5 of A.
But also, if someone else faces this problem i wanted to adress @jww answer, as it seems to be a missconception i heard some times.
If you use only SSE2 intrinsics, you can not use those mentioned SHA functions, as those were not part of this. You do not have to swap the byte pattern by loading the values into the vectors, this can stay as shown above
","74","<c><sse><sha><intrinsics>","0","0","1","2017-12-14 19:36:04","47820860","2","","224132","","2017-12-02 00:27:24","2017-12-01 20:24:18",""
"14934737","Is it worth encrypting a password hash?","I was wondering if it is common practice to encrypt a password hash, and/or the salt, does it necessarily make it more secure or just increase the time it'd take to ""guess"" the password?
Thanks!
","Generally, you don't need to encrypt hash as long as you use good cryptographic hash function. As for salt, salting is done best before encrypting, ie. salt does get encrypted. The exception would be one-time table, in which case you can easily salt afterwards. As for the third question, whole encryption is nothing but increasing the time it takes to ""guess"" the plaintext, exception being again one-time table. Now what's your concrete problem? Can you formulate it as a task in some concrete computer language?
","74","<encryption><hash><passwords><sha><password-encryption>","0","2","3","2013-02-19 12:34:48","14934865","0","","","","","2013-02-18 11:02:01",""
"14934737","Is it worth encrypting a password hash?","I was wondering if it is common practice to encrypt a password hash, and/or the salt, does it necessarily make it more secure or just increase the time it'd take to ""guess"" the password?
Thanks!
","It's not common practice to encrypt a salted hash. It may slightly increase security but realistically it's not worth it, since you'd have to manage the key in some way, complicating the whole process. If I were you, using a salted hash with a secure hashing algorithm will do fine.
","74","<encryption><hash><passwords><sha><password-encryption>","0","3","3","2013-02-19 12:34:48","14934865","0","","","","","2013-02-18 11:02:01",""
"14934737","Is it worth encrypting a password hash?","I was wondering if it is common practice to encrypt a password hash, and/or the salt, does it necessarily make it more secure or just increase the time it'd take to ""guess"" the password?
Thanks!
","If the hash was produced by a ""good"" algorithm, than it doesn't make any sense to cipher it, since you would be essentially ciphering something that in theory only the rightful user can generate.
Ciphering the salt doesn't add any kind of real security.
","74","<encryption><hash><passwords><sha><password-encryption>","0","1","3","2013-02-19 12:34:48","14934865","0","","","","","2013-02-18 11:02:01",""
"39184256","sha256 result dosen't change","First time using sha256.
With this code, the result always equals to 4aa6892909e369933b9f1babc10519121e2dfd1042551f6b9bdd4eae51f1f0c2
what is wrong?
def signning(self,D_path):
    BUF_SIZE = 65536 
    hashed = hashlib.sha256()

    with open(D_path, 'rb') as f:
        while True:
            data = f.read(BUF_SIZE)
            if not data:
                break
            hashed.update(data)

    hashed_D = hashed.hexdigest()
    print hashed_D

","Yeah, there is nothing wrong with your code, here's a little example showing that hashlib.sha256 is deterministic:
import random
import string
import hashlib

random.seed(1)

for i in range(5):
    data = ''.join(random.choice(string.ascii_uppercase + string.digits)
                   for _ in range(10))

    hashed = hashlib.sha256()
    hashed.update(data)
    print data, ""->"", hashed.hexdigest()

Run this script over and over and you'll be getting the same output cos the input is always the same ;)
","74","<python><python-2.7><sha256><sha>","-1","0","1","2016-08-27 21:13:37","39184317","4","","3689166","","2016-08-27 21:13:37","2016-08-27 18:09:29",""
"42353760","PHP to Java (hash sha-1 and base64)","Code in php:
$hash = base64_encode(sha1( $password, TRUE ));
I need this in Java.
String hash = """";
    try {
        MessageDigest crypt =  MessageDigest.getInstance(""SHA-1"");
        crypt.reset();
        crypt.update(pass.getBytes(""UTF-8"")); 
        hash = Base64.getEncoder().encodeToString(crypt.digest(pass.getBytes()));
    } catch (NoSuchAlgorithmException | UnsupportedEncodingException ex) {
        Utilit.LoggingBD(Utilit.getIP(), 12, ex.toString());
        Logger.getLogger(Guard.class.getName()).log(Level.SEVERE, null, ex);
        JOptionPane.showMessageDialog(null, ""Ошибка хэширования пароля"");
    }
    return hash;

Codes have different results. I need the result of php-code
","","73","<java><php><base64><sha>","1","","0","2017-02-20 20:36:24","","0","2","","","","2017-02-20 20:36:24",""
"41498262","Is there any secure improvement if I hash IV value?","I generate randomly IV value everytime I encrypt when doing AES/CBC.
private static IvParameterSpec getRandomIvParameterSpec() {
    byte[] iv = new byte[16];
    new SecureRandom().nextBytes(iv);
    return new IvParameterSpec(iv);
}

And I concat IV Value to cipher byte everytime I encrypt.
Is there any secure improvement if I hash (SHA-256) IV value before concat to cipher byte?
","SHA-256 is injective. You give it the same input, it will give you the same output. It is not surjective, however. If m1 and m2 both hash to h, you cannot conclude that m1 = m2, even if you know that |m1| = |m2| (both messages are of the same length).
Therefore, applying SHA-256 (or any deterministic function) cannot increase the entropy of your data. At best, it won't decrease it. In other words: If your data is 16 purely random bytes, it won't be “more than purely random” after you hash it. And if your data was not purely random to begin with, then hashing it won't help making it random. You have to use a better entropy source in the first place.
Another problem that you didn't mention is that you currently have 16 random bytes but if you put them into your SHA-256 hash function, you'll get 32 bytes out. Which ones are you going to use? If you only use every second byte – due to injectivity – you won't get all possible bit patterns even if your input was perfectly random and the hash function was flawless. (If you did, then this would – by the pidgin hole principle – mean that the other half of the bytes would always be a function of the bytes you did chose. Only a really crappy hash function, which SHA-256 of course is not, would have such property.) If you try to be clever and combine the bytes in some “smart” way, chances are that you'll make things even worse.
So the short answer is: just don't do it. Generate as many random bytes as you need using the strongest non-deterministic entropy source you have available and use them directly.
","73","<java><aes><sha><cbc-mode><initialization-vector>","2","3","1","2017-01-06 03:26:23","41498437","1","3","","","","2017-01-06 03:03:17",""
"46561517","TI sha256 on cc26xx returning the wrong value","I am trying to implement SHA256 on a TI cc26xx sensor tag. I am using the TI_SHA_256 API provided here: http://www.ti.com/tool/crypto.
My main test code is the following:
...
/* Crypto APIs Header */
#include ""lib/TI_SHA_256.h""
#include <stdio.h>

uint32_t M[32] =  { 0xe8 , 0x9d , 0xa1 , 0xd1 , 0xc7 , 0x4d , 0xee , 0x16 , 0x75 , 0x30 , 0x07 , 0x9a , 0x19 , 0xd1 , 0x5d , 0x76,
                    0x12 , 0x97 , 0xe4 , 0xb6 , 0xc8 , 0x03 , 0x38 , 0x1a , 0x41 , 0x6d , 0xac , 0x92 , 0xbf , 0x63 , 0x51 , 0x7a };
uint32_t Ha[8];
uint32_t *H_Array;
volatile uint64_t L = 0x800;

void uint32_print(char name[], uint32_t *data, int c)
{
    uint32_t i;
    if (c == 1){
      printf(name);
      for(i = 0; i < 32; i++) {
        printf(""%x"", data[i]);
      }
      printf(""\r\n"");
  }
  else {
      printf(name);
      for(i = 0; i < 8; i++) {
        printf(""%x "", data[i]);
      }
      printf(""\r\n"");
  }
}

/*---------------------------------------------------------------------------*/
PROCESS(test_process, ""Test process"");
/*---------------------------------------------------------------------------*/
PROCESS_THREAD(test_process, ev, data)
{
  PROCESS_BEGIN();

  printf(""\r\n ---------------- TEST OF SHA API ------------------------ \r\n"");
  uint32_print(""Original text:"", M, 1);
  L= 0x200;
  SHA_256(M, L, Ha, 1);
  uint32_print(""text:"", M, 1);
  uint32_print(""Hashed text:  "", Ha, 2);
  printf(""\r\n ---------------- \r\n"");

  PROCESS_END();
}
AUTOSTART_PROCESSES(&test_process);

According to various online SHA256 calculators such (http://www.fileformat.info/tool/hash.htm), the checksum is supposed to be:
73411b58707db59d6bc3cd854850eca62058d0d9f74a1ea8260d5ccdd9ac5f87
Where as my code prints the following:
---------------- TEST OF SHA API ------------------------ 
text:e89da1d1c74dee16753079a19d15d761297e4b6c83381a416dac92bf63517a
text:e89da1d1c74dee16753079a19d15d768000000000000000000000200
Hashed text:  91da5dd5 6cbfcca9 85fcf373 90ae73e0 9e27a4d9 c42b100c 6e746091 eda68da7
----------------

My question is the following: why is my code returning the wrong hash-sum?
","Your code computes the SHA-256 hash of the first half (0x200=512 bits or 64 bytes) of the array M, initialized to 0xe8 , 0x9d , ... , 0x76.
However, your array M has elements of type uint32_t, which mean that in memory it looks like this (assuming big-endian architecture):
000000e80000009d000000a1000000d1000000c70000004d000000ee000000160000007500000030000000070000009a00000019000000d10000005d00000076

As one can check in your online calculator, the hash of this is 91da5dd56cbfcca985fcf37390ae73e09e27a4d9c42b100c6e746091eda68da7. This is the correct value computed by the SHA_256() function in the code.
","72","<c><sha><contiki><texas-instruments>","0","0","1","2017-10-04 10:14:35","46562345","0","","","","","2017-10-04 09:32:07",""
"58364971","Is it possible to generate (and then store) SHA-256 hashes using MySQL?","I've tried to use the following SQL query, in order to generate (and then store) SHA-256 hashes:
CREATE TABLE IF NOT EXISTS hashes (
  id int NOT NULL AUTO_INCREMENT,
  text varchar(50) NOT NULL,
  hash varchar(64) AS (SHA2(CONCAT(text), 256)) STORED  NOT NULL ,
  PRIMARY KEY (id)
) DEFAULT CHARSET=utf8;

INSERT INTO `hashes` (`text`) VALUES ('testing');

But I get the following error:
#1064 - You have an error in your SQL syntax; check the manual that corresponds
to your MySQL server version for the right syntax to use
near 'AS (SHA2(CONCAT(text), 256)) STORED  NOT NULL ,
  PRIMARY KEY (id)
) DEFAULT C' at line 4

I've found that query here on SO (it's an accepted answer):
Using MySQL to Generate SHA-256 Hashes?
What's wrong? Is it really possible to generate (and then store) SHA-256 hashes using MySQL?
Thanks.
","","72","<mysql><hash><sha>","0","","0","2019-10-13 15:27:21","","0","","10668052","","2019-10-13 15:27:21","2019-10-13 15:21:51",""
"43473407","Use strong algorithm in ScramSha1Authenticator - as per Veracode?","We are using Mongo DB java driver 3.4.1 jar. When we did Veracode testing we found that:

ScramSha1Authenticator.java line no 215 is using broken or risky cryptographic algorithm

Is there any know resolution/workaround for this?
Since it is a critical issue, we have to address it before moving to production.
","This can't be easily changed, because it is not just the driver: SCRAM-SHA-1 is the current username-password authentication protocol in the latest version of MongoDB, and it uses SHA-1; the driver can't just unilaterally decide to use SHA-256 instead.
I don't know how committed you are to passing the Veracode tests, but I can see two possible options which let you carry on using MongoDB securely despite the Veracode security report:

Get assurance from MongoDB that the SCRAM-SHA-1 mechanism is not vulnerable to the well-known security problems with the SHA-1 algorithm
Instead of using this authentication mechanism, instead use a different mechanism; perhaps x.509 Certificate Authentication, or Kerberos Authentication

","71","<java><mongodb><sha><veracode>","0","1","1","2017-04-18 14:21:53","","4","","174843","","2017-04-18 14:12:09","2017-04-18 13:19:19",""
"30424405","Is there a specific difference in the one-time-password algorithm when using sha512 to using sha1","I am writing a pam module, that does authentication with one time passwords.
I started writing it with sha512 as algorithm for the hmac and ran into a problem. I also did it with sha1, which works.
The code is at: https://github.com/Ongy/pam_totp
I tested the hmac with sha512, as far as I can tell that is correct, so the error should be in the get_truncate function, which does work with sha1, but not with sha512.
static int get_truncate(const uint8_t * hash, size_t len, char * buffer,
        size_t maxlen)
{
    uint32_t value;
    uint8_t offset;
    offset = hash[len-1] & 0x0F;
    value = *((uint32_t *) (hash+offset));
    value = be32toh(value) & 0x7FFFFFFF;
    value %= 100000000;

    return snprintf(buffer, maxlen, ""%08d"", value);
}

which is called in 
static int get_totp_sha512(const uint8_t * hashdata, size_t len, uint64_t time,
            char * dst, size_t maxlen)
{
    uint8_t buffer[64];
    uint64_t counter = htobe64(time);

    memset(buffer, 0, sizeof(buffer));

    calculate_hmac_sha512(hashdata, len, (uint8_t *) &counter,
                     sizeof(counter), buffer, sizeof(buffer));

    return get_truncate(buffer, sizeof(buffer), dst, maxlen);
}

Most of the relevant code should be in src/main.c.
The rfcs relevent are: 6238 and 4226. (The second one describes the general algorithm, the first one also allows other hashes than sha1)
","Ok so the thing I had to fix was my testcase, I used the test vectors given in https://tools.ietf.org/html/rfc6238#appendix-B. What I had to change:
The key is not actually ""12345678901234567890"" for sha512 but ""1234567890123456789012345678901234567890123456789012345678901234"".
","71","<c><sha><hmac><pam><one-time-password>","0","0","1","2015-05-27 06:35:33","30474870","0","","","","","2015-05-24 14:07:04",""
"50978378","How can sha512 create hashes bigger than the string it is supplied with?","I have found it strange that sha512 can create a string so much smaller than what it is supplied with.
Here is an example (in python):
Python 3.6.0 (default, Jan 13 2017, 00:00:00) 
[GCC 4.8.4] on linux
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> import hashlib
>>> string='-'*10000
>>> hash=hashlib.sha512(string.encode('utf-8'))
>>> hash.hexdigest()
'0d1e23b51e718f4e67c371a16e0f91fefce2802c0b674374e0e0e3309f0e10936a3b96aa0e29d44ad0ba23d0a019f3ff57bfd260b2ed4b6a06c2d343a6dc1800'
>>> len(string)
10000
>>> len(hash.hexdigest())
128

How is it possible to create a hash over 78 times smaller than the raw string?
","SHA-256 is non-reversable so it can be shorter. But the real answer is google SHA-256 (or another cryptographic hash) and examine the code. Here is a real-world example of a hash. A bottle club has over 1000 members but has only 100 bins to store member's bottles. It just uses the last 2 digits of the membership ID number for the bin number, a simple hash. That reduces the 1000+ bottle to 100 pigeonholes.
See SHA-2 family for detailed information and pseudo-code.
","70","<security><hash><sha><sha512><cryptographic-hash-function>","-2","1","1","2018-06-23 18:01:05","51000276","8","","451475","","2018-06-23 18:01:05","2018-06-21 22:43:15",""
"36260120","Always return false on authentication with hashed password","Working with hashing password with sha256 and salt, my validate method always return false. While debugging I had noticed that on return it compare first 32 bite arrays with 64. And I don't know where I did mistake.
    public static byte[] Hash(string value, byte[] salt)
    {
        salt = new byte[64];
        using (var rng = new RNGCryptoServiceProvider())
        {
            rng.GetBytes(salt);
        }
        return Hash(Encoding.UTF8.GetBytes(value), salt);
    }

    public static byte[] Hash(byte[] value, byte[] salt)
    {
        var saltedValue = value.Concat(salt).ToArray();

        return new SHA256Managed().ComputeHash(saltedValue);
    }

    public bool ConfirmPassword(string password)
    {
        var passwordSalt = new byte[64];
        using (var context = new DbConnection())
        {
            context.Connection.Open();
            context.SqlCommand.Connection = context.Connection;

            context.SqlCommand.CommandText = ""select salt from users where name='test'"";
            var reader = context.SqlCommand.ExecuteReader();
            while (reader.Read())
            {
                passwordSalt = reader[""salt""] as byte[];
            }
        }
        var passwordHash = Hash(password, passwordSalt);

        return passwordHash.SequenceEqual(passwordSalt);
    }

UPDATE
So if I get it right: 
public bool ConfirmPassword(string password)
{
    var userSalt = new byte[64];
    var temp = new byte[64];
    using (var context = new DbConnection())
    {
        context.Connection.Open();
        context.SqlCommand.Connection = context.Connection;

        context.SqlCommand.CommandText = ""select password from users where name='test'"";
        var reader = context.SqlCommand.ExecuteReader();
        while (reader.Read())
        {
            temp = reader[""password""] as byte[];
        }
    }
    var passwordHash = Hash(password, userSalt);

    return passwordHash.SequenceEqual(temp);
}

But it also return me false 
","Lets assume your password is ""Hello"" and your name=""test"".
Storing
You need to generate a random salt. Than you can use the salt and the plain password (""Hello"") with your Hash function. To save now the result in your database you MUST store the generated salt and the hashed password.
Checking
Load the salt and hashed password from the database. Use again your Hash function with the user input (the plain password you want to check) and the salt from the database. Afterwards you can compare the result with the hashed password from the database. And thats it ...
","70","<c#><security><hash><sha>","0","2","1","2016-03-28 11:03:01","36260328","6","","3052382","","2016-03-28 10:35:02","2016-03-28 10:08:56",""
"55678487","Methods to speed up sha 512 hashing?","Through the use of openssl's sha 512 algorithm I'm currently able to calculate the hash of a 2GB file in between 3 - 3.3 seconds (my CPU is an i7-5820k) - including the time it takes to open, write to, and close files (open the input & write hash to text file). 
I wondered if there are any known methods to speed this process up, or whether my HDD is entirely at fault, creating a bottleneck (Seagate BarraCuda Green 2TB 5900RPM SATA 6Gb/s 64MB Cache).
            FILE *ftest=fopen(hashInBuf, ""rb"");
            FILE *ftest2=fopen(hashOutBuf, ""wt"");
            //HASH FUNCTION
            SHA512_Init (&mdContext);
            while ((bytes = fread (data, 1, 1024, ftest)) != 0)
            SHA512_Update (&mdContext, data, bytes);
            SHA512_Final (c,&mdContext);
            for(i = 0; i < SHA512_DIGEST_LENGTH; i++){
              fprintf(ftest2, ""%02x"", c[i]);
              printf(""%02x"", c[i]);

(the code I'm currently using to calculate the sha 512)
","","70","<c><hash><openssl><sha>","1","","0","2019-04-14 18:30:52","","15","","10101999","","2019-04-14 18:30:52","2019-04-14 18:14:18",""
"46856459","How can I create a commit with a new SHA in git?","I need to create an equivalent commit object with a different SHA in Git. All commits are GPG signed. I know that I can change author + commit timestamps, but the resolution is only a second, and we are not permitted to deviate from the system clock by more than a second. I also cannot change commit messages, author / commiter names and emails and / or the key used to sign the commit. Which other fields of the commit can I change in order to get a different commit message?

Motivation: We are using an internal tool which for some reason does not work if two properties reference the same commit, even though we are setting it intentionally.
","The technical answer to the question is this:
The hashed data includes:

a header you don't control (and that is, in any case, derived from the other data I'm about to mention)
the commit's TREE object hash - a reflection of the commit content
the parent COMMIT object(s) hash(es)
Author name,email,timestamp
Committer name,email,timestamp
Commit message

Varying the TREE may stretch the definition of ""equivalent"" commit.  You've explicitly ruled out changing the commit message or author / committer info.  The remaining option is the commit parent list, but whether that makes any sense to talk about depends on what it is you're doing.
So since options are limited, let's take a quick look at each of these (even the ones that seem to be excluded):
TREE object: This uniquely represents the content - i.e. what data you would see in what files at what paths in the working tree.  At a glance, this seems like the thing that must be unchanged to meet the most basic definition of ""equivalent commit"".  Of course, any change - no matter how small, no matter where in the work tree - would change the hash, so maybe you could wedge in a file or directory specifically for nonce values to vary the hash?
Author or committer Info: First thing to think about: How sensitive is the requirement not to touch names?  Could you stick an invisible character at the end of the name and be ok, or do they have to match bit-for-bit?
Alternately, those time stamps... Saying you can't vary from the system clock, when the commit timestamp is defined to refer to commit creation time anyway, seems pedantic unless you're trying to create several equivalent commits all at once.  Even if you need two at the same time, you should be able to do that without exceeding your tolerance.
Commit Message: Again, how strict is the requirement not to change this?  Could you get by with a newline, or at least an invisible character?
Parent Commit: If you're still at brick walls with all of the above, then here's what's left.  And this really boils down to, what are the commits for?  Is the duplicate commit going to have the same parent?
P -- A
 \
  A'

In that case you can't really do anything here.  But alternately, if it's parallel trees of commits:
P -- A

P' -- A'

Well, then all you need to do is seed each tree with a root commit that differs in some way.  Commit messages like ""Root commit 1"", ""Root commit 2"", ..., for example?
","70","<git><commit><gnupg><sha>","-1","3","1","2017-10-20 20:35:32","46856880","3","","3666591","","2017-10-20 20:35:32","2017-10-20 19:59:24",""
"55693172","Trying to pass a random string to SHA in Haskell","I'm trying to pass a random string (which happens to be a number) ""4176730.5"" to SHA in Haskell to get a larger random string like ""2d711642b726b04401627ca9fbac32f5c8530fb1903cc4db02258717921a4881"".
I have this code to generate a random number and cast it to a string
  num <- randomIO :: IO Float

  let x = C.pack (show (num*10000000))

  print x

but when I pass it to SHA with
  let a = sha256 x

I get the error 
Couldn't match expected type ‘Data.ByteString.Lazy.Internal.ByteString’
            with actual type ‘C.ByteString’

I've tried casting my number to C.ByteString, but I think there are two types of Bytestring, according to the Haskell compiler. 
The full code is: 
import Data.Digest.Pure.SHA
import System.Random
import qualified Data.ByteString.Char8 as C

main :: IO ()

main = do
  num <- randomIO :: IO Float

  let x = C.pack (show (num*10000000))

  print x

  let a = sha256 x

      b = hmacSha256 ""key"" ""some test message""
  mapM_ print [showDigest a, showDigest b]

Seeing as how there are apparently two types of Bytestring, and I'm casting to the wrong one, how do I cast my random string correctly?
Further to @Cubic's answer below if I replace 
    import qualified Data.ByteString.Char8 as C
with 
import qualified Data.ByteString.Lazy as C

I just get these errors
Couldn't match type ‘Char’ with ‘GHC.Word.Word8’
Expected type: [GHC.Word.Word8]
  Actual type: String

and
Couldn't match expected type ‘C.ByteString’
            with actual type ‘[Char]’

","You need Data.ByteString.Lazy, not Data.ByteString.Char8.
In general, you almost never want Data.ByteString.Char8.
","70","<haskell><random><sha><bytestring>","1","0","3","2019-04-15 17:53:55","55694804","0","","336879","","2019-04-15 16:33:21","2019-04-15 16:04:46",""
"55693172","Trying to pass a random string to SHA in Haskell","I'm trying to pass a random string (which happens to be a number) ""4176730.5"" to SHA in Haskell to get a larger random string like ""2d711642b726b04401627ca9fbac32f5c8530fb1903cc4db02258717921a4881"".
I have this code to generate a random number and cast it to a string
  num <- randomIO :: IO Float

  let x = C.pack (show (num*10000000))

  print x

but when I pass it to SHA with
  let a = sha256 x

I get the error 
Couldn't match expected type ‘Data.ByteString.Lazy.Internal.ByteString’
            with actual type ‘C.ByteString’

I've tried casting my number to C.ByteString, but I think there are two types of Bytestring, according to the Haskell compiler. 
The full code is: 
import Data.Digest.Pure.SHA
import System.Random
import qualified Data.ByteString.Char8 as C

main :: IO ()

main = do
  num <- randomIO :: IO Float

  let x = C.pack (show (num*10000000))

  print x

  let a = sha256 x

      b = hmacSha256 ""key"" ""some test message""
  mapM_ print [showDigest a, showDigest b]

Seeing as how there are apparently two types of Bytestring, and I'm casting to the wrong one, how do I cast my random string correctly?
Further to @Cubic's answer below if I replace 
    import qualified Data.ByteString.Char8 as C
with 
import qualified Data.ByteString.Lazy as C

I just get these errors
Couldn't match type ‘Char’ with ‘GHC.Word.Word8’
Expected type: [GHC.Word.Word8]
  Actual type: String

and
Couldn't match expected type ‘C.ByteString’
            with actual type ‘[Char]’

","Just use the lazy bytestrings as @leftaroundabout mentioned.  Your try didn't work because you want to pack from Strings, so you need to import the .Char8 module to achieve that:
import Data.ByteString.Lazy.Char8 as C

","70","<haskell><random><sha><bytestring>","1","0","3","2019-04-15 17:53:55","55694804","0","","336879","","2019-04-15 16:33:21","2019-04-15 16:04:46",""
"55693172","Trying to pass a random string to SHA in Haskell","I'm trying to pass a random string (which happens to be a number) ""4176730.5"" to SHA in Haskell to get a larger random string like ""2d711642b726b04401627ca9fbac32f5c8530fb1903cc4db02258717921a4881"".
I have this code to generate a random number and cast it to a string
  num <- randomIO :: IO Float

  let x = C.pack (show (num*10000000))

  print x

but when I pass it to SHA with
  let a = sha256 x

I get the error 
Couldn't match expected type ‘Data.ByteString.Lazy.Internal.ByteString’
            with actual type ‘C.ByteString’

I've tried casting my number to C.ByteString, but I think there are two types of Bytestring, according to the Haskell compiler. 
The full code is: 
import Data.Digest.Pure.SHA
import System.Random
import qualified Data.ByteString.Char8 as C

main :: IO ()

main = do
  num <- randomIO :: IO Float

  let x = C.pack (show (num*10000000))

  print x

  let a = sha256 x

      b = hmacSha256 ""key"" ""some test message""
  mapM_ print [showDigest a, showDigest b]

Seeing as how there are apparently two types of Bytestring, and I'm casting to the wrong one, how do I cast my random string correctly?
Further to @Cubic's answer below if I replace 
    import qualified Data.ByteString.Char8 as C
with 
import qualified Data.ByteString.Lazy as C

I just get these errors
Couldn't match type ‘Char’ with ‘GHC.Word.Word8’
Expected type: [GHC.Word.Word8]
  Actual type: String

and
Couldn't match expected type ‘C.ByteString’
            with actual type ‘[Char]’

","The issue is that a ByteString is a sequence of bytes, while a String is a sequence of chars. There are many ways to turn chars into bytes, so you need to specify which encoding you want. Most likely, you want an ASCII or UTF8 encoding. If so, you can use this solution below, which converts strings into ""UTF8 bytes"" as needed.
import Data.Digest.Pure.SHA
import System.Random
import qualified Data.ByteString.Lazy as C
import qualified Data.ByteString.Lazy.UTF8 as U

main :: IO ()

main = do
  num <- randomIO :: IO Float

  let x = U.fromString (show (num*10000000))

  print x

  let a = sha256 x

      b = hmacSha256 (U.fromString ""key"") (U.fromString ""some test message"")
  mapM_ print [showDigest a, showDigest b]

","70","<haskell><random><sha><bytestring>","1","2","3","2019-04-15 17:53:55","55694804","0","","336879","","2019-04-15 16:33:21","2019-04-15 16:04:46",""
"52110882","Same Hash value on different input","I have got this html form:


<form action=""seite2.php"" method=""post"">
    Benutzername:<br />
    <input type=""Text"" name=""username""><br /><br />

    Passwort:<br />
    <input type=""Password"" name=""passwort"" />

    <input type=""Submit"" value=""Absenden"" />
</form>



on seite2.php I have got this code first, to check the Hash value:
$username = $_POST[""username""];
$passwort = $_POST[""passwort""];

$pass = sha1($passwort);

echo $pass;

then, I want to check wether username&&password is correct and compare the hashs. Lets say username is: mue. and password is: pass. I get this hash: da39a3ee5e6b4b0d3255bfef95601890afd80709. 
if($username == ""mue"" AND $pass==""da39a3ee5e6b4b0d3255bfef95601890afd80709"")
{
    echo '<p>';
    echo ""Herzlich Willkommen"";
    echo '</p>';
}
else
{
    echo '<p>';
    echo ""Login failed"";
    echo '</p>';

But in my Browser, I get following response:
da39a3ee5e6b4b0d3255bfef95601890afd80709
Login failed.
And no matter which user or password I'll take, the hash given back from the browser is always the same. 
","The code is ok,i try it and work but the sha1 of ""pass"" is:
   9d4e1e23bd5b727046a9e3b4b7db57bd8d6ee684

maybe you modify the worse file. see your editor and see if you change the right ""seite2.php"". if you change the path location of this file maybe the old file remained in the IDE and you edit this one and no the new one.
","69","<php><forms><post><hash><sha>","0","0","1","2018-08-31 08:10:30","","13","","","","","2018-08-31 07:51:30",""
"39278976","Calculation of hash of a string (MD5, SHA) as a basis for CPU benchmarking","I know that there are many applications and tools available for benching the computational power of CPUs especially in terms of floating point and integer calculations.
What I want to know is that how good is to use the hashing functions such as MD5, SHA, ... for benchmarking CPUs? Does these functions include enough floating point and integer calculations that applying a series of those hashing functions could be a good basis for cpu becnhmarking?
In case platform matters, I'm concerned with Windows and .Net.
","MD5 and SHA hash  functions do not use floating point at all. They are completely implemented using discrete math 
","69","<hash><md5><cpu><benchmarking><sha>","-1","1","1","2016-09-01 19:04:28","39279091","0","","","","","2016-09-01 18:57:12",""
"12711266","Save Unique Representation of an NSString","In my application, I need to compare vcards and figure out if there are changes between them.
I don't want to keep in memory a whole vcard, since this could be quite massive. What I would like to do is to keep a hashed value of that vcard, but the hash value has to be very precise as to not repeat itself in cases of very close/similar vcards (e.g. where differences are by a character).
I have tried Objective-C's hash method for strings, but that doesn't really work well, as it will create duplicates in case of similar vcards.
I am now thinking of using SHA256 to encrypt the vcards and then compare the SHA's (similar to how one would do password comparison).
Would that be a good idea? Any other ideas of how I can save a smaller version of a big string and then be able to compare it with another one for changes?
","","69","<objective-c><nsstring><sha>","0","","0","2012-10-03 15:01:32","","3","","","","","2012-10-03 15:01:32",""
"46367380","Hash different data into SHA 256 - same results","Existing SHA-256, how to update it with another or multiple different data types
    BigInteger d = new BigInteger(""773182302672421767750165305491852205951657281488"");
    BigInteger r = new BigInteger(""1354751385705862203270732046669540660812388894970"");
    String R_ID = ""id_b"";
    String C_ID = ""id_b"";

    MessageDigest sha_c = MessageDigest.getInstance(""SHA-256"");
    sha_c.update(r.toByteArray());
    sha_c.update(d.toByteArray());
    sha_c.update(C_ID.getBytes());
    System.out.println(Arrays.toString(sha_c.digest()));

    MessageDigest sha_b = MessageDigest.getInstance(""SHA-256"");
    sha_b.update(r.toByteArray());
    sha_b.update(d.toByteArray());
    sha_b.update(R_ID.getBytes());
    System.out.println(Arrays.toString(sha_b.digest()));

Same results:
result with update with sha_c.update(C_ID.getBytes());

[114, -62, 50, -44, -118, 20, -29, 34, -112, 99, -17, -6, 97, -64,
  -121, 20, 30, -55, 110, 54, 9, -90, 100, 125, -28, 75, 106, -15, -87, -109, -51, 46]

result with update with sha_b.update(R_ID.getBytes());

[114, -62, 50, -44, -118, 20, -29, 34, -112, 99, -17, -6, 97, -64,
  -121, 20, 30, -55, 110, 54, 9, -90, 100, 125, -28, 75, 106, -15, -87, -109, -51, 46]

","You got the same results because you did the exact same thing twice.
BigInteger d = new BigInteger(""773182302672421767750165305491852205951657281488"");
BigInteger r = new BigInteger(""1354751385705862203270732046669540660812388894970"");
String R_ID = ""id_b"";
String C_ID = ""id_b"";

R_ID and C_ID contain the same value, so
MessageDigest sha_c = MessageDigest.getInstance(""SHA-256"");
sha_c.update(r.toByteArray());
sha_c.update(d.toByteArray());
sha_c.update(C_ID.getBytes());
System.out.println(Arrays.toString(sha_c.digest()));

MessageDigest sha_b = MessageDigest.getInstance(""SHA-256"");
sha_b.update(r.toByteArray());
sha_b.update(d.toByteArray());
sha_b.update(R_ID.getBytes());
System.out.println(Arrays.toString(sha_b.digest()));

is the exact same thing done twice. I assume this was not what you intended.
","68","<java><hash><java-8><sha>","-1","0","1","2017-09-22 23:13:30","46374370","5","3","1439733","","2017-09-22 21:39:28","2017-09-22 14:41:37",""
"55507452","Hashing SHA-256 for C# and Java","I needed to generate the hash in Java and then check it in C#. How to get the same output from these two algorithms when converting back to a string?
------------C#------------
    ?

------------Java------------
public static String encrypt(String value) throws NoSuchAlgorithmException {

    private static final String ALGORITHM = ""SHA-256"";
    private static final String[] UPDATES = ""goKpRF61ApDDJN9m0OOwHtU9G56psEqJjPUdiH3kZto="";

    MessageDigest md = MessageDigest.getInstance(ALGORITHM);

    for (int i = 0; i < UPDATES.length; i++) {
        md.update(UPDATES[i].getBytes());
    }

    return Base64.getEncoder().encodeToString(md.digest(value.getBytes()));
}

","Let me comment on the Java part of your question (I don't know C#).
private static final String[] UPDATES = ""goKpRF61ApDDJN9m0OOwHtU9G56psEqJjPUdiH3kZto="";

This does not look right. If you have just one string, the declaration should be:
private static final String UPDATES = ""goKpRF61ApDDJN9m0OOwHtU9G56psEqJjPUdiH3kZto="";

And the rest of the code:
MessageDigest md = MessageDigest.getInstance(ALGORITHM);

md.update(UPDATES.getBytes());

return Base64.getEncoder().encodeToString(md.digest());

If you have multiple strings to digest:
MessageDigest          md = MessageDigest.getInstance(ALGORITHM) ;
String                 str[] = {""A"", ""B"", ""C"", ""D""} ;

for (String s : str)
    md.update(s.getBytes()) ;

return Base64.getEncoder().encodeToString(md.digest());

(I ignored the Base64 bit because there are way too many Base64 libraries and I am guessing that you are using one that works alright)
","68","<c#><asp.net><encryption><sha><message-digest>","-2","0","1","2019-04-04 04:17:52","","1","","107625","","2019-04-04 04:17:52","2019-04-04 03:36:18",""
"10943487","Deriving hash of a file from hashes of pieces of that file","I have a file say foo.txt. Say, it's SHA-256 is SHA(foo.txt). Now, I divide the file into multiple pieces say p1, p2, ... pn. Hashes of each of these pieces is SHA(p1), SHA(p2), ... SHA(pn).
My question is, Is it possible in some way to derive SHA(foo.txt), given only SHA(p1), SHA(p2), ..., SHA(pn)?
I am working on a problem where I have hashes of each of the pieces of a file. But, I need to derive SHA of the actual file without having access to at any of the pieces or the actual file.
","No, that is impossible. It would go against the nature of a secure hash function.
The only thing you can do is store the hashes of all the pieces (along with information how long they are), and then check the ""combined"" hash by checking all the corresponding pieces of the complete file in the same manner.
","68","<algorithm><hash><sha>","0","0","1","2012-06-08 05:40:33","10943505","0","","","","","2012-06-08 05:26:24",""
"53972301","Calculating hashes of raw image data and writing it to the image file","I am trying to write hashes to the metadata part of my image files. In the Exiftool Forum I saw this
exiftool FILE -rawimagedigest=`exiftool FILE -all= -o - | md5`

However, I would rather not run it manually for each file, and I do prefer SHA.
I tried this
find . -name ""*"" -exec sh -c '
    md5hash=$(exiftool ""$1"" -all= -m -o - | md5)
    sha256hash=$(exiftool ""$1"" -all= -m -o - | shasum -a 256)
    exiftool -overwrite_original ""$1"" -FileImageMd5=$md5hash;
    exiftool -overwrite_original ""$1"" -FileImageSha256=$sha256hash
    ' _ {} \;

Using the example file I created a config making it possibly to write to FileImageMd5 and FileImageSha256. However, the script only works without the line 
exiftool -overwrite_original ""$1"" -FileImageSha256=$sha256hash

If I substitute the variable in the end with $md5hash it runs as expected.
The config file is named .ExifTool_config and placed in $HOME. It consist of the following
%Image::ExifTool::UserDefined = (
    'Image::ExifTool::XMP::Main' => {
        rlp => {
            SubDirectory => {
                TagTable => 'Image::ExifTool::UserDefined::rlp',
            },
        },
    },
);

%Image::ExifTool::UserDefined::rlp = (
    GROUPS => { 0 => 'XMP', 1 => 'XMP-rlp', 2 => 'Image' },
    NAMESPACE => { 'rlp' => 'http://ns.ladekjaer.org/rlp/1.0/' },
    WRITABLE => 'string',
    FileUniqueId => { Writable => 'lang-alt' },
    FileImageSha256 => { Writable => 'lang-alt' },
    FileImageMd5 => { Writable => 'lang-alt' },
);

1;  #end

","Apparently the script failed due to
shasum -a 256

ending its output with
  -

Since a SHA256 written in hex is always 64 characters, can this be solved by adding
 | head -c 64

Thus making the script
find . -name ""*"" -exec sh -c '
    md5hash=$(exiftool ""$1"" -q -all= -m -o - | md5)
    sha256hash=$(exiftool ""$1"" -q -all= -m -o - | shasum -a 256 | head -c 64)
    exiftool -overwrite_original -q ""$1"" -FileImageMd5=$md5hash;
    exiftool -overwrite_original -q ""$1"" -FileImageSha256=$sha256hash
    ' _ {} \;

","67","<sha><exiftool>","0","0","1","2018-12-31 01:48:13","53982882","1","","1803966","","2018-12-30 01:51:37","2018-12-29 18:34:04",""
"38499802","Secure password hashing web application","I'm currently building a web application and I have to store some passwords.
So I want to know what the securest way of hashing and storing passwords is!
My idea was
sha256($a+sha256($b+sha256($c+sha256(password))))
$c=random, unique salt --> which is stored into the database next to my password
$b=random String which is hard coded into my source code
$a=random String which I have to read from a file
The idea behind that is, that the attacker has to get access to my database, my source code, and my file-system which is pretty hard I think.
Is that secure?
Do I hash everything to often?
Is sha256 secure enough?
Thanks for your help! 
","","66","<database><security><hash><passwords><sha>","0","","0","2016-07-21 09:09:16","","3","","","","","2016-07-21 09:09:16",""
"51388174","Is there a conda command to hash/sign a conda package and verify while installing if the hash is correct?","I wasn't able to find any documentation on any conda API that would allow users to verify if the package that they are installing using conda install is correct and unaltered. For example maybe a --md5 flag during conda install <package> that would allow them to see if the package is indeed is the correct one. Does conda provide any such functionality? 
","","66","<python><anaconda><md5><conda><sha>","1","","0","2018-07-17 18:31:47","","0","","","","","2018-07-17 18:31:47",""
"55520426","How to compare base64 encoded SHA256 fingerprints with padding","I'm automating some virtual machine creation and ssh connection, and it requires validation of the server public ssh key. My issue comes down to how to determine that host keys are equivalent.
The following is the result of hashing a public key (RSA 4096 bit private key) with SHA256, and using base64 encoding:
MF5MVt5D6WRRc3pdZDQDTQ78FFsY7TOdJOdQ8fMTnnk=

However, when I use the same public key in another piece of software, it outputs:
MF5MVt5D6WRRc3pdZDQDTQ78FFsY7TOdJOdQ8fMTnnk

That is, without the padding character (I've already read the many SO questions regarding padding).
What is the right way to compare host fingerprints automatically? As strings, as bytes, before or after decoding, etc.
","","65","<hash><base64><sha>","0","","0","2019-04-04 16:04:52","","0","","8126390","","2019-04-04 16:04:52","2019-04-04 16:00:55",""
"22744343","Secure Random in Login Process","I have been trying to do some Password verification module, I got stuck up in verification process. I create Salt bytes by Secure Random. And stored it in database in BINARY format.
random = SecureRandom.getInstance(""SHA1PRNG"");
random.nextBytes(salt);

I hashed my password using
SecretKeyFactory factory = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"");
PBEKeySpec pbeKeySpec = new PBEKeySpec(charData,salt,iterations,bitLength);
hash = factory.generateSecret(pbeKeySpec).getEncoded();

When I tried to verify the Password (i.e. Generating hash using the salt value from db). I'm not getting same hash value. Is there something i'm doing wrong. 
","The problem here is storing data in BINARY format. It will take the actual data and append 0's at the end to fill up the remaining bytes. So if you don't know the actual size of the binary data use BLOB Datatype it will store only the actual data.
","64","<java><hash><sha><javax.crypto>","1","0","1","2014-03-30 19:07:02","","1","","","","","2014-03-30 13:07:07",""
"55940183","How to compare sha1sum sum to file","Say I have
shasum=$(sha1sum <file>)

how can I compare that value to a sha1sum from another file:
if [[ $shasum == `cat <other-file>` ]]; then
   echo ""values are the same""
fi

that can't be right, anybody know?
","If I understand correctly, you have to files, say test1.txt & test2.txt, and you want to compare the sha1 sum of thoose files.
You need to get the sha1sum of both of thoose files:
shasum1=$(sha1sum test1.txt)
shasum2=$(sha1sum test2.txt)

Then you compare thoose values:
if [ ""$shasum1"" = ""$shasum2"" ]; then
    echo ""Files are the same!""
else
    echo ""Files are different!""
fi

However, you shouldn't use SHA1 anymore.
","64","<bash><shell><sha><sha1sum>","0","1","1","2019-05-02 12:25:12","","0","","11110290","","2019-05-02 01:00:38","2019-05-01 17:31:27",""
"53587932","Implementing TLS server/client using book ""Implementing SSL / TLS Using Cryptography and PKI"" by Joshua Davies","I was implementing an HTTPS client/server example just for learning purpose using the book ""Implementing SSL / TLS Using Cryptography and PKI"" by Joshua Davies. It contains an example implementation with C source code. I just tried to build a HTTPS client using that source code. But, in tls.c file it uses two macros MD5_BYTE_SIZE and SHA1_BYTE_SIZE and I can't see any values defined for these macros in that book. I tried with permutations of 16,24,32 for both macros but failed in SSL handshaking, and greater values causes segmentation fault. I hope if anybody familiar with this book can help me
","The publisher keeps two source bundles for the book: GCC and VS.
From {before,after}/ch04/sha.h:
#define SHA1_RESULT_SIZE 5
#define SHA1_BYTE_SIZE SHA1_RESULT_SIZE * sizeof( int )

From {before,after}/ch04/md5.h:
#define MD5_RESULT_SIZE 4
#define MD5_BYTE_SIZE MD5_RESULT_SIZE * sizeof( int )

","64","<c><ssl><https><md5><sha>","1","2","1","2019-02-18 18:42:54","54753523","0","","","","","2018-12-03 05:26:27",""
"38627391","Working CAS, now not working after replacing SHA1 certificate with sha256","We had a perfectly working CAS (4.0) when we replaced an SSL cert with SHA1 encryption to SHA256.
We installed the cert and the new CA chain into the cacerts file.  The subject (CN and all)  are identical.  
I go to my CAS protected site, I am correctly redirected to CAS, I can log in, and I get redirected to my site,  but at that point I am redirected back to CAS, which thinks I am logged in...  and endless loop.
Like I said, this was a perfectly working CAS before.  Here is the relevant log:
FINE: Attempting to retrieve ticket [TGT-2-d7Z3hwQdJl4jWt0ZW1xCewqjgcdxxaCvIWzIvxueYcPJTuKXmN-XX.XX.XX.XX]
Jul 27, 2016 6:19:06 PM org.jasig.cas.ticket.registry.DefaultTicketRegistry getTicket
FINE: Ticket [TGT-2-d7Z3hwQdJl4jWt0ZW1xCewqjgcdxxaCvIWzIvxueYcPJTuKXmN-XX.XX.XX.XX] found in registry.
Jul 27, 2016 6:19:06 PM org.jasig.cas.web.flow.TerminateWebSessionListener sessionEnded
FINE: Terminate web session pC0up4YeyUpNO_e_CD_6NyJxMSq752luD8i9d3b8pZO_wR6Q9g3-!325246342!1469661546014 in 2 seconds

You can see it finds the ticket in the registry,  but then terminates the session.  
There are no errors or exceptions in the logs at all.
Any Ideas?
","Look closer at the logs, and I will see that the service ticket has expired. Turns out,  the bump from SHA-1 to SHA256  made the network trip from 6 seconds 13 seconds, and the TTL for the service ticket expired.
","64","<ssl-certificate><cas><sha>","0","0","1","2016-07-28 16:54:47","","0","","","user6643982","2016-07-28 05:23:38","2016-07-28 04:57:46",""
"35631847","Can one build a new release APK file using the original SHA1 key when using a reverse engineered app?","I am concerned that users may reverse engineer my app, edit it, and publish it using the same SHA1 key. That way Google Play Games would verify the unofficial app and would make it able to post invalid scores to the leaderboard.
Is this possible?
","SHA-1 is designed so that creating a different input (app in this example) with the same signature is VERY VERY difficult - Don't worry about that.
On the other hand, reverse engineering it and creating their own version with a different key would be much more feasible.  I don't know how Google Play Games would handle that, but I suspect Google has planned for this situation.
","63","<android><google-play-services><apk><reverse-engineering><sha>","0","1","1","2016-02-25 15:52:58","35632121","0","","","","","2016-02-25 15:41:53",""
"38041543","Signing every file created in a folder","I wrote a program in Java that creates an AVI file but i need help detecting every new AVI file that drops in the folder. For every new AVI file created it should be signed with a private key and an Hash should be created over it. I appreciate any assistance. Thanks in advance
","","63","<java><hash><private-key><sha>","0","","0","2016-06-26 18:42:30","","3","","6497307","","2016-06-26 18:37:00","2016-06-26 18:04:49",""
"43927374","readFile and convertCharToIntArray methods affecting my hash implementation of Sha-1","I'm trying to implement the hash implementation of Sha-1 from the txt file ""abc"" and get a9993e36 4706816a ba3e2571 7850c26c 9cd0d89d , but I'm getting the output E66882F9  DF84C901  18BADCFE  90325476  C3D2E1F0. I know that the problem is in either my reading or convertChar method, but I'm having trouble figuring out what my issue is. 
For readfile, I need to append the 1 bit at the end of the buffer[]array and return the number of characters in the file. variable length is const unsigned int. 
For convertArrayToIntArray, I need to convert from unsigned char into an equivalent array of unsigned ints by packing 4 chars into the 1 inter-variable. 
unsigned int readFile (unsigned char buffer[])
{
    length = 0;
    int b = 0;
    int i = 0;
    char *fileName = ""abc.txt"";
    FILE *filePointer = fopen (fileName, ""rb"");

    if (filePointer != NULL) 
    {
        length = fread (buffer, sizeof (char), MAX_SIZE, filePointer);

        if (ferror (filePointer) != 0) {
            fputs (""Error"", stderr);
        }

        if (length > MAX_SIZE) {
            fputs (""Input file too big for program"", stderr);
        }
        i = length - 1;

        if (i < 0 && buffer[i] == '\n') {
            buffer[i] = '\0';
        }
        length++;
        buffer[length - 1] = 0x80;
    }

    fclose (filePointer);
    return length;
}

void convertCharArrayToIntArray (unsigned char buffer[], unsigned int
                                message[], unsigned int sizeOfFileInBytes)
{
    int e = 0;
    size_t buffLength = length;

    buffLength = (buffLength + 3) / 4;
    for (e = 0; e < buffLength; e++) {

        message[e] |= (buffer[e] << 24);
        message[e] |= (buffer[e + 1] << 16);
        message[e] |= (buffer[e + 2] << 8);
        message[e] |= (buffer[e + 3]);
    }
}

","You were also forgetting that there is a space every 8 characters, this would cause an error in the packing of the chars.
#define MAX_SIZE 256
unsigned int length = 0;
void convertCharArrayToIntArray(unsigned char buffer[], unsigned int message[])
{ 
    int e = 0;
    int cnt=0;
    //int d = 0; 
    //buffLength shows me how many chars are in array
    size_t buffLength= length;
    //printf(""%i tot"", buffLength); 
    buffLength = (buffLength+ 3)/4;
    printf(""%d\n"",buffLength);
    int crs=0;
    for (e=0 ; e< buffLength-1; e++)
    {
        unsigned int n=0;
        n |= (buffer[crs  ] << 24);
        n |= (buffer[crs+1] << 16);
        n |= (buffer[crs+2] << 8 );
        n |= (buffer[crs+3]      );
        printf(""4 chars :>%c%c%c%c to uint=%d\n"",buffer[crs  ],buffer[crs+1],buffer[crs+2],buffer[crs+3],n );

        crs+=4;
        cnt++;
        if(cnt==2)/*We can not forget that there is a space between every 8 characters ...*/
        {
            cnt=0;
            crs++;
        }

        message[e]=n;/*Save our uint in buffer*/
    }

}

unsigned int readFile(unsigned char buffer[])
{ 
    //int sizer;
    int b = 0; 
    int i = 0;
    char *fileName = ""abc.txt"";
    FILE *filePointer = fopen(fileName, ""rb"");
    if (filePointer != NULL)
    {
        length = fread(buffer, sizeof(char), MAX_SIZE , filePointer);
        if (ferror(filePointer)!= 0)
        {
            fputs(""Error"", stderr);
            return 0;/*error*/
        }
        if (length > MAX_SIZE )
        {
            fputs(""Input file too big for program"", stderr);
            return 0;/*error*/
        }
        /*
        It is not necessary to add a null at the end, the buffer is already initialized with zeros
        */
        /*Did not display the content correctly because it was in hexadecimal*/
        for (i = 0; i < length; i++) 
            printf(""%c"", buffer[i]);/*use %c show real data, it is rubbish but work */

        /*for (i = 0; i < length; i++) 
        printf(""%08x"", buffer[i]); */

    }

    /*OR print*/
    printf(""\n\n%s\n"",buffer);
    fclose(filePointer);
    return length;
}


void main()
{
    unsigned char szbuffer[1024]={0};/*initialized to zeroes*/
    if(readFile(szbuffer))
    {
      unsigned int message[100];
      convertCharArrayToIntArray(szbuffer,message);
    }
    else
       printf(""error...\n"");
    return;
}

","63","<c><hash><sha1><sha>","-1","0","1","2017-05-13 04:29:38","","3","","3422102","","2017-05-13 03:07:12","2017-05-11 23:59:35",""
"25784871","How do for-lops exactly work in C++ example: calculating hashes","I was trying to find out how many hashes I can calculate in  which time. I am using SHA-512 (SHA-2 with 512 Bit Output). I did not code this Hashfunction, but I did a foor loop to test it. I am not really farmiliar with C++ so I do not know why the following situation occured.
When I executed the program the calculations took longer and longer. While I had about 10000 Hashes withint he first few seconds, a few hours later it took my PC about a minute to calculate 1000 Hashes... Can anybody tell me why and how to ""solve"" this?
This is the relevant code, I guess:
int fortschritt = 0;
int prozent = 0;
string temp;
stringstream convert;
string loeschen;

for (int i = 1; i <= 4294967295; i++)
{
    convert << i;
    temp = convert.str();

    loeschen = sha512(temp);

    if (((int)(i/1000)) > fortschritt)
    {
        fortschritt = (int)(i/1000);

        if (((int)(i*100)/4294967295) > prozent)
        {
            prozent = ((int)(i*100)/4294967295);
        }

        cout << fortschritt*1000 << "" von 4294967295 - "" << prozent << "" %"" << endl;
    }
}

The output looks like this:
1000 von 4294967295 - 0 %
2000 von 4294967295 - 0 %
3000 von 4294967295 - 0 %
4000 von 4294967295 - 0 %
5000 von 4294967295 - 0 %
6000 von 4294967295 - 0 %
7000 von 4294967295 - 0 %
8000 von 4294967295 - 0 %
9000 von 4294967295 - 0 %
10000 von 4294967295 - 0 %
[...]

I think it has something to do with the way I use the variables, but I am not sure and neither have an idea how to do it correctly.
Forgive me if this is a stupid question, but it bothered me for some time now.
Thanks in advance for any help :)
John
","It looks like your convert stream grows continuously for each iteration, appending the new value each time. The easiest fix is to move the declaration of stringstream convert; inside the for loop to create a new one each time. 
Further optimisations are certainly possible as it's not efficient to convert numbers to strings the way you are doing it for the large number of iterations in the main loop.
","63","<c++><hash><sha><execution-time><sha512>","1","3","1","2014-09-11 10:22:59","25784981","1","1","","","","2014-09-11 10:18:17",""
"51734312","RSA or different information encryption method when work on Javascript side","I am building a service which is using a powerful client-side script to execute actions. All communications with a server are done via WebSockets. I am looking for a way to protect information which is transferring between server and client, so nobody with beginning/medium knowledge in Chrome debugging and HTTP scrapping can simply decode these data. The script itself will be deeply obfuscated.
I read there are some RSA libraries for javascript to encrypt/decrypt data, but I hear like RSA is old and slow and that's why I need someone's advice who is the guru in such things. I need for simple MIT library, no need for paid solutions and giant-sized packages. 
","
I am looking for a way to protect information which is transferring between server and client, 

That is SSL (https) for. There is no reason not to use SSL

so nobody with beginning/medium knowledge in Chrome debugging and HTTP scrapping can simply decode these data. The script itself will be deeply obfuscated.

Often it is not so effective. If data are user entered or displayed,  there is no reason to encrypt them. If data are provided from the server and  not to be displayed, you can encrypt the data properly on the server side. 
client-side encryption is usually feasible if you want to store or resend data encrypted or signed to other systems. 
Usually adding more complexity doesn't add security. 

I read there are some RSA libraries for javascript to encrypt/decrypt data

Just search for some https://gist.github.com/jo/8619441 or there is CryptoWebAPI https://developer.mozilla.org/en-US/docs/Web/API/Web_Crypto_API
the issue is - are you sure you need RSA? How would you manage and exchange keys? How would you ensure key authenticity? 

but I hear like RSA is old and slow 

RSA is old and slow and yet used and secure (when implemented properly). RSA is used along other (symmetric) ciphers to ensure speed and effectiveness. It is called hybrid cryptosystem 
There are two used asymetric systems, RSA and ECC. Regardless that using ssl will ensure confidentiality and integrity, in most of the cases you would need to really justify using RSA on the client side
","62","<javascript><encryption><glassfish><rsa><sha>","0","0","1","2018-08-07 20:41:06","","5","","","","","2018-08-07 19:41:19",""
"46911058","Why SHA2 has a 384 bit version?","I understand that there is a 256 and 512 versions because they are all powers of 2. But where 384 came from? 
I know that binary representation of 384 is 110000000 but I can't understand the logic. 
It is not in the middle between 256 and 512. It is not even a logarithmic middle. 
Why 384?
","256 + 128 = 384

It is nothing but addition of two values which are above mentioned powers of 2 !!
","62","<algorithm><hash><sha>","0","1","2","2017-10-24 14:38:30","","2","","","","","2017-10-24 12:48:29",""
"46911058","Why SHA2 has a 384 bit version?","I understand that there is a 256 and 512 versions because they are all powers of 2. But where 384 came from? 
I know that binary representation of 384 is 110000000 but I can't understand the logic. 
It is not in the middle between 256 and 512. It is not even a logarithmic middle. 
Why 384?
","A quick look on Wikipedia finds this: 

SHA-256 and SHA-512 are novel hash functions computed with 32-bit and
  64-bit words, respectively. They use different shift amounts and
  additive constants, but their structures are otherwise virtually
  identical, differing only in the number of rounds. SHA-224 and SHA-384
  are simply truncated versions of the first two, computed with
  different initial values.

Looking at the comparison between all the variants, it seems that SHA-384 is more resistant to length extension attacks than SHA-512 (its longer version).
You can find a more detailed answer on Cryptography Stack Exchange: here.
","62","<algorithm><hash><sha>","0","2","2","2017-10-24 14:38:30","","2","","","","","2017-10-24 12:48:29",""
"52825710","Restore corrupt 128-bit key from SHA-1","Disclaimer: This is a section from a uni assignment
I have been given the following AES-128-CBC key and told that up to 3 bits in the key have been changed/corrupt.
d9124e6bbc124029572d42937573bab4

The original key's SHA-1 hash is provided;  
439090331bd3fad8dc398a417264efe28dba1b60

and I have to find the original key by trying all combinations of up to 3 bit flips.
Supposedly this is possible in 349633 guesses however I don't have a clue where that number came from; I would have assumed it would be closer to 128*127*126 which would be over 2M combinations, that's where my first problem lies.
Secondly, I created the python script below containing a triple nested loop (I know, far from the best code...) to iterate over all 2M possibilities however, after completion an hour later, it hadn't found any matches which I really don't understand. 
Hoping someone can atleast point me in the right direction, cheers
#!/usr/bin/python2

import sys
import commands

global binary

def inverseBit(index):
    global binary
    if binary[index] == ""0"":
        return ""1""
    return ""0""

if __name__ == '__main__':
    if len(sys.argv) != 3:
        print ""Usage: bitflip.py <hex> <sha-1>""
        sys.exit()

    global binary
    binary = """"

    sha = str(sys.argv[2])
    binary = str(bin(int(sys.argv[1], 16)))
    binary = binary[2:]
    print binary

    b2 = binary
    tries = 0
    file = open(""shas"", ""w"")

    for x in range(-2, 128):
        for y in range(-1,128):
            for z in range(0,128):
                if x >= 0:
                    b2 = b2[:x] + inverseBit(x) + b2[x+1:]
                if y >= 0:
                    b2 = b2[:y] + inverseBit(y) + b2[y+1:]
                b2 = b2[:z] + inverseBit(z) + b2[z+1:]
                #print b2
                hexOut = hex(int(b2,2))
                command = ""echo -n \"""" + hexOut + ""\"" | openssl sha1""
                cmdOut = str(commands.getstatusoutput(command))
                cmdOut = cmdOut[cmdOut.index('=')+2:]
                cmdOut = cmdOut[:cmdOut.index('\'')]
                file.write(str(hexOut) + "" | "" + str(cmdOut) + ""\n"")
                if len(cmdOut) != 40:
                    print cmdOut
                if cmdOut == sha:
                    print ""Found bit reversals in "" + str(tries) + "" tries. Corrected key:""
                    print hexOut
                    sys.exit()
                b2 = binary
                tries = tries + 1
                if tries % 10000 == 0:
                    print tries

EDIT:
Changing for loop to
for x in range(-2, 128):
            for y in range(x+1,128):
                for z in range(y+1,128):

drastically cuts down on the number of guesses while (I think?) still covering the whole space. Still getting some duplicates and still no luck finding the match though..
","Your code, if not very efficient, looks fine except for one thing:
hexOut = hex(int(b2,2))

as the output of hex
>>> hex(int('01110110000101',2))
'0x1d85'

starts with 'Ox', which shouldn't be part of the key. So, you should be fine by removing these two characters.
For the number of possible keys to try, you have:

1 with no bit flipped
128 with 1 bit flipped
128*127/2 = 8128 with 2 bits flipped (128 ways to choose the first one, 127 ways to choose the second, and each pair will appear twice)
128*127*126/6 = 341376 with 3 bits flipped (each triplet appears 6 times). This is the number of combinations of 128 bits taken 3 at a time.

So, the total is 1 + 128 + 8128 + 341376 = 349633 possibilities.
Your code tests each of them many times. You could avoid a the useless repetitions by looping like this (for 3 bits):
for x in range (0, 128):
    for y in range(x+1, 128):
        for z in range(y+1, 128):
            .....

You could adapt your trick of starting at -2 with:
for x in range (-2, 128):
    for y in range(x+1, 128):
        for z in range(y+1, 128):
            .... same code you used ...


You could also generate the combinations with itertools.combinations:
from itertools import combinations
for x, y, z in combinations(range(128), 3):  # for 3 bits
    ......

but you'd need a bit more work to manage the cases with 0, 1, 2 and 3 flipped bits in this case.
","62","<python><encryption><aes><sha>","2","2","1","2018-10-16 16:32:31","52825997","0","","1816580","","2018-10-16 16:32:31","2018-10-15 22:47:38",""
"25583401","Does racket plt have an equivalent to Python's sha1.update()","I'd like to hash stdin in chunks using racket but can't find an equivalent to Python's hashlib's sha1.update function is there an equivalent or alternative?
","Take a look at Greg Hendershott's sha library, which adds Racket support for SHA-1 and SHA-2 by providing a Racket interface to the OpenSSL implementation of SHA-1 and SHA-2.
(require sha)

(sha1 bstr) -> sha1?    
  bstr : bytes?

Although it doesn't have an update() procedure, as stated in Python's own documentation a call like this:
m.update(a); m.update(b)

Is equivalent to this:
m.update(a+b)

","60","<racket><sha>","1","2","2","2014-08-30 16:51:29","25584584","0","","","","","2014-08-30 14:25:13",""
"25583401","Does racket plt have an equivalent to Python's sha1.update()","I'd like to hash stdin in chunks using racket but can't find an equivalent to Python's hashlib's sha1.update function is there an equivalent or alternative?
","Here is one way to do it:
#lang racket
(require (planet soegaard/digest:1:2/digest))

(define a #""The quick brown fox jumps "")
(define b #""over the lazy dog"")
(define a+b (bytes-append a b))

(digest a+b 'sha1)

(define c (make-digest-context 'sha1))
(update-context c a)
(update-context c b)
(final-context->hex-string c)

The output is:
""2fd4e1c67a2d28fced849ee1bb76e7391b93eb12""
""2fd4e1c67a2d28fced849ee1bb76e7391b93eb12""

You can find documentation on the digest collection here:
http://planet.racket-lang.org/package-source/soegaard/digest.plt/1/2/doc.txt
Use it something like this:
(define c (make-digest-context 'sha1))
(define in (open-input-file ""foo""))
(let loop ()
  (define chunk (read-bytes 4096 in))
  (cond [(eof-object? chunk) (final-context->hex-string c)]
        [else                (update-context c chunk)
                             (loop)]))

","60","<racket><sha>","1","2","2","2014-08-30 16:51:29","25584584","0","","","","","2014-08-30 14:25:13",""
"32536886","Implementing Base 64 and SHA","I have tried following code so far:
+(NSString*)encodeString:(NSString*)origString{
    /* Here we can choose the algorithm */
    NSData *keyData = [@""secret_key"" dataUsingEncoding:NSUTF8StringEncoding];

    NSData *textData = [origString dataUsingEncoding:NSUTF8StringEncoding];
    uint8_t digest[CC_SHA1_DIGEST_LENGTH] = {0};

    CCHmacContext hmacContext;
    CCHmacInit(&hmacContext, kCCHmacAlgSHA1, keyData.bytes, keyData.length);
    CCHmacUpdate(&hmacContext, textData.bytes, textData.length);
    CCHmacFinal(&hmacContext, digest);

    /* out is HMAC */
    NSData *out = [NSData dataWithBytes:digest length:CC_SHA1_DIGEST_LENGTH];

    /* resultString is Base64 encoded HMAC */
    NSString *resultString = [out base64EncodedString];
    return resultString;
}

This is giving correct result as wanted. But my android and Back-end partner want me to clone following code into objective-c:
private String encryptString(String origString) {
    String encryptedString = """";
    Cipher cipher = null;
    byte[] encoded = null;
    byte[] rawEnc =null;
    try {
        //Code which is working
        cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"", ""SunJCE"");
        SecretKeySpec key = new SecretKeySpec(SECRET_KEY.getBytes(""UTF-8""), ""AES"");
        cipher.init(Cipher.ENCRYPT_MODE, key, new IvParameterSpec(INITIALIZATIO_VECTOR.getBytes(""UTF-8"")));
        rawEnc = cipher.doFinal(origString.getBytes(""UTF-8""));
        encoded = Base64.encodeBase64(rawEnc);
        encryptedString = new String(encoded, ""UTF-8"");

    } catch (NoSuchAlgorithmException e) {
        System.out.println(""No Such Algorithm Exception:"" + e.getMessage());
    } catch (NoSuchProviderException e) {
        System.out.println(""No Such Provider Exception:"" + e.getMessage());
    } catch (NoSuchPaddingException e) {
        System.out.println(""No Such Padding Exception:"" + e.getMessage());
    } catch (InvalidKeyException | InvalidAlgorithmParameterException
             | UnsupportedEncodingException e) {
        System.out.println(""Exception:"" + e.getMessage());
    } catch (Exception e) {
        System.out.println(""Exception:"" + e.getMessage());
    }
    return encryptedString;
}
private static final String SECRET_KEY = ""secret_key"";
private static final String INITIALIZATIO_VECTOR = ""123456"";

}

And android's output is different than iOS and is as required by back-end developer. So, I have to convert code according to theirs.
The only things differs is INITIALIZATIO_VECTOR.
I want above code in objective-C.
","The question contains: ""Implementing Base 64"".  
There is no need on iOS, just use the Apple NSData Base64 APIs:

Create a Base-64 encoded NSString from the receiver's contents using the given options:

- base64EncodedStringWithOptions:


Returns a data object initialized with the given Base-64 encoded data:

- initWithBase64EncodedData:options:


Returns a data object initialized with the given Base-64 encoded string:

- initWithBase64EncodedString:options:

etc.
","60","<android><ios><objective-c><base64><sha>","0","1","1","2015-09-12 17:26:49","","4","3","","","","2015-09-12 08:41:51",""
"42093773","C#: Hash Multiple Strings from a Form to Class, back to the form to SQL","I'm trying to figure out a way to do this.
I want to hash with a salt from my main form and post it to an SQL Server, My issue is currently I cannot seem to figure out how to call the hashed code for an SQL statement.
The issue is I can't seem to figure out how to call the hashed string into a variable or so. One of the errors I get is:

An Object of reference for the non-static field, method, or
  property'Functions.UniqueID'

If I tried Functions myFunction = new Functions();
I got:

There is no argument given that corresponds to the required formal
  parameter

I tried looking it up, but really just came up blank since I'm new to coding and don't quite understand all the terminology everyone throws out.
The reason why I was wanting it in a class was that I will be using this hash/salt in multiple instances of the application.
Let me show the code and maybe someone can help:
Main Form:
Getters and Setters:
        public string IdentifyOrder
        {
            get { return txtOrder.Text; }
            set { txtOrder.Text = value; }
        }
        public string IdentifyStandard
        {
            get { return cmbStandard.Text; }
            set { cmbStandard.Text = value; }
        }
        public string IdentifyNote
        {
            get { return cmbNote.Text; }
            set { cmbNote.Text = value; }
        }

SQL Statement:
private void btnSubmitInfo_Click(object sender, EventArgs e)
        {
            try
            {
                using (SqlConnection con = new SqlConnection(Connection.MTRDataBaseConn))
                {

                    con.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.CommandText = ""INSERT INTO dbo.[myDatabase] ([Purchase Order], [Standard], [Notes], [Unique Identifier]) VALUES(@PurchaseOrder,@Standard,@Notes,@UniqueIdentifier)"";

                    cmd.Connection = con;

                    SqlParameter pPurchaseOrder = new SqlParameter(""@PurchaseOrder"", SqlDbType.VarChar, 50);
                    SqlParameter pStandard = new SqlParameter(""@Standard"", SqlDbType.VarChar, 50);
                    SqlParameter pNotes = new SqlParameter(""@Notes"", SqlDbType.VarChar, 50);
                    SqlParameter pUID = new SqlParameter(""@UniqueIdentifier"", SqlDbType.VarChar, 50);


                    pPurchaseOrder.Value = txtPurchaseOrder.Text;
                    pStandard.Value = cmbStandard.Text;
                    pNotes.Value = txtNotes.Text;
                    pUID.Value = Functions.UniqueID;

                    cmd.Parameters.Add(pPurchaseOrder);
                    cmd.Parameters.Add(pStandard);
                    cmd.Parameters.Add(pNotes);
                    cmd.Parameters.Add(pUID);

                    //execute
                    cmd.ExecuteNonQuery();

                }
            }
            catch (SqlException ex)
            {
                //catch error
                MessageBox.Show(ex.Message);
            }
       }

My Class""Functions"":
public class Functions
    {
        public readonly MainForm Identifiers;
        public Functions(MainForm Identifiers)
        {
            this.Identifiers = Identifiers;
        }

        public void GenerateUniqueIdentifier()
        {
            string orderID = Identifiers.IdentifyOrder;
            string standardID = Identifiers.IdentifyStandard;
            string noteID = Identifiers.IdentiftNote;

           string salt = """" + orderID + """" + standardID + """" + noteID + """";
        }

        public String GenHash(String input, String salt)
        {
            byte[] bytes = Encoding.UTF8.GetBytes(input + salt);
            System.Security.Cryptography.SHA256Managed sha256hashstring =
                new System.Security.Cryptography.SHA256Managed();
            byte[] hash = sha256hashstring.ComputeHash(bytes);

            return Convert.ToBase64String(hash);
        }

        public string UniqueID { get; set; }

    }

","You need to create an object of Functions class and then call methods on it or access properties of it.
Something like as following.
//Previous code...

var functionsObj = new Functions(mainForm); // You need to pass the
     // object of class MainForm as argument to Functions constructor 
     //If this code is running in code behind for ""MainForm"" then you can do as following.
var functionObj = new Functions(this);
pPurchaseOrder.Value = txtPurchaseOrder.Text;
pStandard.Value = cmbStandard.Text;
pNotes.Value = txtNotes.Text;
pUID.Value = functionsObj.UniqueID;

//Next Code....

This should resolve the issue.
","60","<c#><sql><sql-server><class><sha>","0","1","1","2017-02-07 15:51:51","42094105","5","","7066880","","2017-02-07 15:40:02","2017-02-07 15:33:10",""
"25122730","Securing web application","I am working on an application which has both web and mobile java interface. Web is only a ""spectator"", therefore can't alter database in any way. On the other hand, the java interface can (and it often does). I don't want to use self-signed certificate so I came up with this solution. What I want to ask is whether it could be considered secure or if there is any better, more efficient way to do this. I am a bit paranoid person so please take this in account.
When an android device registers itself, I save pasword as sha256(pass + pass). This is the only time the device has to send password as a plain text. This function produces what I'll call [hash] and it will be stored in my database.
When logging in, the device sends new hash created by sha256([hash] + unixTime) as well as the unixTime. I need to use the [hash], otherwise I would not be able to verify the password. The server will try to reproduce the product of the function and if it succeeds, user is verified. Sent unixTime will be inserted into database afterwards, so I can also check, whether this time hasn't been used yet (if unixTime is less OR equal than saved, therefore forged / from past, I can safely discard it as invalid)
Similarly, all other packets which need authentication will be validated this way (so every packet = new hash)
Note: all hashes are converted to hex, just to spare a few bits.
","
What I want to ask is whether it could be considered secure or if there is any better, more efficient way to do this.

""Could be considered secure"" isn't asking much. I consider it secure against unauthorized login, as long as an attacker doesn't have access to the device, the network, or the database. A straightforward system that transmits and stores the password in cleartext would also be secure in that kind of situation. It would make more sense to ask with a specific security goal and threat model in mind.
Here are a few key problems that this design:

If an attacker can get the hashes from the database, they can log in by computing sha256([hash] + unixTime) without knowing the password.
An attacker that controls the network can intercept a sha256([hash] + unixTime), unixTime pair and use it verbatim. SSL would prevent such an attacker from obtaining those values.
If an attacker can get the hashes from the database, they can quickly try hashing passwords and see which users' hashes match. Salted hashes would prevent this.

","59","<security><https><sha>","0","0","2","2014-08-04 20:42:09","25126927","0","","","","","2014-08-04 15:54:17","2014-08-05 15:34:32"
"25122730","Securing web application","I am working on an application which has both web and mobile java interface. Web is only a ""spectator"", therefore can't alter database in any way. On the other hand, the java interface can (and it often does). I don't want to use self-signed certificate so I came up with this solution. What I want to ask is whether it could be considered secure or if there is any better, more efficient way to do this. I am a bit paranoid person so please take this in account.
When an android device registers itself, I save pasword as sha256(pass + pass). This is the only time the device has to send password as a plain text. This function produces what I'll call [hash] and it will be stored in my database.
When logging in, the device sends new hash created by sha256([hash] + unixTime) as well as the unixTime. I need to use the [hash], otherwise I would not be able to verify the password. The server will try to reproduce the product of the function and if it succeeds, user is verified. Sent unixTime will be inserted into database afterwards, so I can also check, whether this time hasn't been used yet (if unixTime is less OR equal than saved, therefore forged / from past, I can safely discard it as invalid)
Similarly, all other packets which need authentication will be validated this way (so every packet = new hash)
Note: all hashes are converted to hex, just to spare a few bits.
","It sounds like in addition to saying you don't want to use a self signed cert that you're also oppossed to using https even if it was a certificate issued from a trusted certificate authority; is that so and if so why? Having your password in plaintext even once is a significant vulnerability; that plaintext password is free game to anyone running packet capture software on machines that your network traffic traverses, not to mention that if you've chosen the wrong http method then those passwords will definitely end up sitting in the logs of any proxies along the way. 
I'd also suggest that at the least you store your passwords properly salted. Not doing so results in a number of security weaknesses if your database is retrieved by a malicious party; for example pre generated rainbow table attacks would be feasible as well as an attacker being able to easily identify which users have identical passwords thanks to the hashes matching. There's a great Owasp writeup on the key things you should look out for here.
Is using a solution like oauth an option? I recently implemented Google OAuth in a mobile application and it was pretty straightforward in combination with ssl. No need to reinvent the wheel, especially when it comes to crypto and user auth ;)
","59","<security><https><sha>","0","0","2","2014-08-04 20:42:09","25126927","0","","","","","2014-08-04 15:54:17","2014-08-05 15:34:32"
"57224870","Generating a SHA1 Signature with Different Results Between Ubuntu/Bash and Windows/Powershell","Why would these respective bash and powershell scripts return different signatures:
## (Ubuntu) Bash
now='Fri, 26 Jul 2019 12:32:36 -0400'
bucket=""mybucket""
path=""/""
awsKey=""MSB0M3K06ELMOI65QXI1""
awsSsecret=""706Fdj+LFKf8pf/2Wh5V8Q8jbgGUUQo3xSXr5sbt""

## Create the signature
message=""GET\n\n\n${now}\n/${bucket}${path}""
messageSignature=$(echo -en ""${message}"" | openssl sha1 -hmac ""${awsSsecret}"" -binary | openssl base64)
echo $messageSignature

Returns >> 5oJM2L06LeTcbYSfN3fDFZ9yt5k=

## Powershell
$OutputEncoding = [Text.UTF8Encoding]::UTF8

$now='Fri, 26 Jul 2019 12:32:36 -0400'
$bucket=""mybucket""
$path=""/""
$awsKey=""MSB0M3K06ELMOI65QXI1""
$awsSsecret=""706Fdj+LFKf8pf/2Wh5V8Q8jbgGUUQo3xSXr5sbt""

## Create the signature
$message=""GET\n\n\n${now}\n/${bucket}${path}""
$messageSignature=$(echo -en ""${message}"" | openssl sha1 -hmac ""${awsSsecret}"" -binary | openssl base64)
echo $messageSignature

Returns >> 77u/W8O5RwJeBsOodDddXeKUlCQD4pSUduKVrD3ilIxADQo=
]2
On Ubuntu, my shell is running ""en_US.UTF-8"".
I've run into the case where the signature is different on different systems: AIX, Windows w/Ubuntu, Windows w/Powershell, etc. I'm trying to figure out why.
","There are at least three problems here: Powershell pipelines aren't binary-safe, you have the wrong variable name, and echo isn't portable/reliable.

At least according to this question, you can't pipe binary data in Powershell. The output of openssl (which is raw binary data) is getting treated as UTF-8 text (presumably due to $OutputEncoding), and mangled in the process. You can tell by decoding from base64 and looking in hex instead:
$ echo '77u/W8O5RwJeBsOodDddXeKUlCQD4pSUduKVrD3ilIxADQo=' | base64 -D | xxd
00000000: efbb bf5b c3b9 4702 5e06 c3a8 7437 5d5d  ...[..G.^...t7]]
00000010: e294 9424 03e2 9494 76e2 95ac 3de2 948c  ...$....v...=...
00000020: 400d 0a                                  @..

It starts with EF BB BF, which is a UTF-8 byte order mark; and it ends with 0D 0A, which is a DOS/Windows line ending (ASCII carriage return and linefeed characters). Something else bad is happening as well, since it's much too long for a sha1 hash, even if you account for the BOM and line ending.
The output of echo is probably getting mangled similarly, so even if the hash wasn't mangled it'd be the hash of the wrong byte sequence.
See this question (and its answer) for an example of using Powershell's  own tools to compute the HMAC-SHA1 of a string.
The message to be signed is in $message, but you actually sign $string_to_sign, which is undefined. The Ubuntu result is the correct HMAC-SHA1 for the null string:
$ </dev/null openssl sha1 -hmac ""706Fdj+LFKf8pf/2Wh5V8Q8jbgGUUQo3xSXr5sbt"" -binary | openssl base64
NCRRWG4nL9sN8QMrdmCPmUvNlYA=

As Lorinczy Zsigmond pointed out, echo -en isn't predictable. Under some implementations/OSes/shells/compile & runtime options/phases of moon/etc, it might or might not print ""-en"" as part of its output, and maybe also print a newline (or something) at the end. Use printf instead:
printf 'GET\n\n\n%s\n/%s%s' ""${now}"" ""${bucket}"" ""${path}"" | openssl sha1 ...

Or (in bash, but not all other shells):
printf -v message 'GET\n\n\n%s\n/%s%s' ""${now}"" ""${bucket}"" ""${path}""
printf '%s' ""$message"" | openssl sha1 ...

Or (bash again):
nl=$'\n'
message=""GET${nl}${nl}${nl}${now}${nl}/${bucket}${path}""
printf '%s' ""$message"" | openssl sha1 ...


","58","<bash><powershell><ubuntu><openssl><sha>","0","2","2","2019-07-27 11:05:42","57228308","2","","8803234","","2019-07-27 02:48:22","2019-07-26 17:48:11",""
"57224870","Generating a SHA1 Signature with Different Results Between Ubuntu/Bash and Windows/Powershell","Why would these respective bash and powershell scripts return different signatures:
## (Ubuntu) Bash
now='Fri, 26 Jul 2019 12:32:36 -0400'
bucket=""mybucket""
path=""/""
awsKey=""MSB0M3K06ELMOI65QXI1""
awsSsecret=""706Fdj+LFKf8pf/2Wh5V8Q8jbgGUUQo3xSXr5sbt""

## Create the signature
message=""GET\n\n\n${now}\n/${bucket}${path}""
messageSignature=$(echo -en ""${message}"" | openssl sha1 -hmac ""${awsSsecret}"" -binary | openssl base64)
echo $messageSignature

Returns >> 5oJM2L06LeTcbYSfN3fDFZ9yt5k=

## Powershell
$OutputEncoding = [Text.UTF8Encoding]::UTF8

$now='Fri, 26 Jul 2019 12:32:36 -0400'
$bucket=""mybucket""
$path=""/""
$awsKey=""MSB0M3K06ELMOI65QXI1""
$awsSsecret=""706Fdj+LFKf8pf/2Wh5V8Q8jbgGUUQo3xSXr5sbt""

## Create the signature
$message=""GET\n\n\n${now}\n/${bucket}${path}""
$messageSignature=$(echo -en ""${message}"" | openssl sha1 -hmac ""${awsSsecret}"" -binary | openssl base64)
echo $messageSignature

Returns >> 77u/W8O5RwJeBsOodDddXeKUlCQD4pSUduKVrD3ilIxADQo=
]2
On Ubuntu, my shell is running ""en_US.UTF-8"".
I've run into the case where the signature is different on different systems: AIX, Windows w/Ubuntu, Windows w/Powershell, etc. I'm trying to figure out why.
","Providing a summary for anyone who stumbled onto this thread. The problem problems were....

Cannot pass binary data through the pipeline as noted by Gordon Davisson
Need to represent newlines with ""`n"" instead of ""\n""

The Powershell script that ultimately replicated my results in Ubuntu/Bash was...
$now='Fri, 26 Jul 2019 12:32:36 -0400'
$bucket=""mybucket""
$path=""/""
$awsKey=""MSB0M3K06ELMOI65QXI1""
$awsSsecret=""706Fdj+LFKf8pf/2Wh5V8Q8jbgGUUQo3xSXr5sbt""
$message=""GET`n`n`n${now}`n/${bucket}${path}""

## Create the signature
$sha = [System.Security.Cryptography.KeyedHashAlgorithm]::Create(""HMACSHA1"")
$sha.Key = [System.Text.Encoding]::UTF8.Getbytes($awsSsecret)
[Convert]::Tobase64String($sha.ComputeHash([System.Text.Encoding]::UTF8.Getbytes($message)))


While it's a better idea to use printf over echo on Linux/Unix systems, that difference wasn't material in this use-case.
","58","<bash><powershell><ubuntu><openssl><sha>","0","1","2","2019-07-27 11:05:42","57228308","2","","8803234","","2019-07-27 02:48:22","2019-07-26 17:48:11",""
"42810344","Distinguish SHA-1 and SHA-2","We got a programm which encrypts data and need to know wether it's using SHA-1 or SHA-2. Unfortunately the only hint is a table with hash values.
Can someone please tell me how I can distinguish the two encryption types and tell which one is used here?
","
We got a programm which encrypts data and need to know wether it's using SHA-1 or SHA-2.

I assume you mean that you're hashing data. SHA is a family of hashing algorithms, not encryption algorithms.
The primary way you would distinguish is their lengths. SHA-1 is 160 bits (20 bytes). SHA-2 comes in several forms, from 224 to 512 bits (28-64 bytes). Note that there are some truncated versions of SHA-2, so it can be difficult to be certain exactly which one is being used, but they're all longer than SHA-1.
","57","<encryption><sha>","2","2","2","2017-03-15 18:40:46","","0","","218890","","2017-03-15 13:30:36","2017-03-15 12:51:42",""
"42810344","Distinguish SHA-1 and SHA-2","We got a programm which encrypts data and need to know wether it's using SHA-1 or SHA-2. Unfortunately the only hint is a table with hash values.
Can someone please tell me how I can distinguish the two encryption types and tell which one is used here?
","You probably mean hashing not encryption. encryption is reversible, hashing is not, encryption is like random permutation as opposed to hash which tries to be like a random function. 
SHA-1 is 160bit (20 bytes) long, while SHA-2 is a family of hash functions 224-512 bits long (28-32 bytes). 
Note you may have hex-encoding or base64 encoding which will give you 4 or 6 bits per encoded character. 
In some cases (for example password hashing) it is customary to prefix hashes with information on how they were created and you would see hash strings start with some special prefix such as $1$ which tells you what you are looking at. 
If you do not have an extra prefix and have the data truncated to the same length, and you do not know anything about the input before the hashing I do not believe you can discern between the two by any practical means. An ability to tell the difference between SHA-1 and truncated SHA-2 would mean at least one of them can be separated from random data which we require secure cryptographic functions to be undistingishable from. 
I am unaware of a practical distinguishing attack. 
Regardless of computational complexity you can't tell where a single hash came from with high probability since most hashes have a pre-image also from the other function.
","57","<encryption><sha>","2","0","2","2017-03-15 18:40:46","","0","","218890","","2017-03-15 13:30:36","2017-03-15 12:51:42",""
"55909086","SHA512/t IV Generation function pseudo-code","FIPS 180-4 Section 5.3.6, Page 16
Denote H(0)' to be the initial hash value of SHA-512 as specified in Section 5.3.5 above. 

Denote H(0)'' to be the initial hash value computed below. 

H(0) is the IV for SHA-512/t.

For i= 0 to 7{
    Hi(0)'' = Hi(0)' XOR a5a5a5a5a5a5a5a5 (in hex).
}

H(0) = SHA-512 (“SHA-512/t”) using H(0)'' as the IV, where *t* is the specific truncation value. 

This explanation is a little bit confusing if you ask me.
","H(0)' = [
    0x6a09e667f3bcc908,
    0xbb67ae8584caa73b,
    0x3c6ef372fe94f82b,
    0xa54ff53a5f1d36f1,
    0x510e527fade682d1,
    0x9b05688c2b3e6c1f,
    0x1f83d9abfb41bd6b,
    0x5be0cd19137e2179
]
H(0)'' = [
    0x6a09e667f3bcc908 XOR 0xa5a5a5a5a5a5a5a5,
    0xbb67ae8584caa73b XOR 0xa5a5a5a5a5a5a5a5,
    0x3c6ef372fe94f82b XOR 0xa5a5a5a5a5a5a5a5,
    0xa54ff53a5f1d36f1 XOR 0xa5a5a5a5a5a5a5a5,
    0x510e527fade682d1 XOR 0xa5a5a5a5a5a5a5a5,
    0x9b05688c2b3e6c1f XOR 0xa5a5a5a5a5a5a5a5,
    0x1f83d9abfb41bd6b XOR 0xa5a5a5a5a5a5a5a5,
    0x5be0cd19137e2179 XOR 0xa5a5a5a5a5a5a5a5
]

Which means, H(0)'' is now:
['cfac43c256196cad',
'1ec20b20216f029e',
'99cb56d75b315d8e',
'00ea509ffab89354',
'f4abf7da08432774',
'3ea0cd298e9bc9ba',
'ba267c0e5ee418ce',
'fe4568bcb6db84dc']

variable s = 'SHA-512/t' REPLACE t with value of t, for example 256:
variable s = 'SHA-512/256'

Now perform the normal SHA-512 algorithm on that string, but use the previously generated H(0)'' values as H for SHA-512
variable H(0) = SHA-512(s)

This results in 8 64 bit words, use thoose words as H values for your SHA-512/t algorithm.
For Example:
SHA-512 with H(0)'' as H on the string 'SHA-512/256' results in this string (In Hex):
22312194FC2BF72C9F555FA3C84C64C22393B86B6F53B151963877195940EABD96283EE2A88EFFE3BE5E1E25538639922B0199FC2C85B8AA0EB72DDC81C52CA2

Or in these 8 words (Also in hex):
22312194FC2BF72C 
9F555FA3C84C64C2 
2393B86B6F53B151 
963877195940EABD 
96283EE2A88EFFE3 
BE5E1E2553863992 
2B0199FC2C85B8AA 
0EB72DDC81C52CA2 

These are the H(0) values for SHA-512/256 specifed in FIPS 180-4 Section 5.3.6.2, Page 17.
","56","<pseudocode><sha><sha512><sha2>","0","0","1","2019-04-29 18:39:27","55909087","0","","","","","2019-04-29 18:39:27",""
"13252692","Editing file using SHA - git","My question is perhaps very basic, but how do I edit a specific file from a version commit (whose author is a colleague working on the same remote repo as me) from which I know the SHA ?
","If what you want is to get the content of the file, you can do
 git show someHash:pathToFile

If you want to see the differences between current version of the file with the one of the commit, you may do
 git diff someHash pathToFile

If you want to replace current version of the file with the one of the commit, you may do
 git reset --hard someHash pathToFile

","55","<git><sha>","2","3","2","2012-11-06 14:09:03","13252747","2","0","","","","2012-11-06 14:04:19",""
"13252692","Editing file using SHA - git","My question is perhaps very basic, but how do I edit a specific file from a version commit (whose author is a colleague working on the same remote repo as me) from which I know the SHA ?
","git checkout hashOfCommit path/to/file
You can then edit the file and commit your changes to the branch you are on currently.
","55","<git><sha>","2","2","2","2012-11-06 14:09:03","13252747","2","0","","","","2012-11-06 14:04:19",""
"34713824","MySQL SHA-256 Double Hashing Fails Truncating Data","I am trying to do the following following MYSQL script:
INSERT INTO `loop`.`User`
(`userID`,
`firstName`,
`lastName`,
`email`,
`password`,
`userName`,
`bio`,
`spamCount`)
VALUES
('gZvTtlPtjGRqeMBaLji3HxoKB5EZCsNL',
'Sarah',
'Joane',
'test0@email.com',
 SHA2(SHA2('test0',256)+'gZvTtlPtjGRqeMBaLji3HxoKB5EZCsNL', 256),
'test0@email.com',
'My....e',
0)

The problem is the I am getting the error:
1 row(s) affected, 1 warning(s): 1292 Truncated incorrect DOUBLE value: 'xRgkwBC9f0MXTgpb5nrNpRevaMYRlKpH'  0.00045 sec
I am confused as the row does not even have any double values in it. Is the double hashing somehow causing this?
","To concatenate strings, you want to use CONCAT(string1, string1), rather than the + operator.
","55","<mysql><hash><sha>","0","3","1","2016-01-11 03:40:22","34713871","0","","","","","2016-01-11 03:34:49",""
"39634484","Periodicity of hash functions","Consider the naive hash function: HASH = INPUT % 4. This function is periodic in the sense that if we call it with sequential numbers 0, 1, 2, 3, 4, 5, ... the produced hashed sequence will have periodicity of four: 0, 1, 2, 3, 0, 1, 2, 3, 0, ....
My question is whether modern cryptographic hash functions, such as SHA256, are periodic in this sense? In other words, are there some integers 0 <= n and 0 < k such that HASH(n + b) = HASH(n + b + ak) for all integers b in [0, k - 1] and all positive integers a? For example, will the sequence SHA256(0), SHA256(1), SHA256(2), SHA256(3), ... be periodic after some point?
","Absolutely not. If that was the case it would be trivial to find a collision. The strength of a cryptographic hash function is defined by how hard it is to find Hash(a) == Hash(b). Ideally you need to find all values of Hash(b) to find a collision, which is infeasible if Hash is a lot of bits. 
","53","<hash><sha>","1","1","1","2016-09-22 09:14:00","39634663","0","","4019025","","2016-09-22 09:14:00","2016-09-22 08:55:15",""
"55526708","SHA1 Verification Function","My professor recently posted an example function for us to use, that checks an in put, in this case ""name"", and runs several tests to to either return true or false. However he kind of threw us in the deep end in understanding why it does what it does. I understand individually what the actual lines do, but I dont understand why they do them, so if it could be explained to me why each line does what it does it would be greatly appreciated. How is this SHA1 verification?
import hashlib

def enc_check(name):
    hash = hashlib.sha1()
    for i in xrange(10):
        hash.update(name[i::10])
        dig = map(ord, hash.digest())
        if sum(dig[::2]) != sum(dig[1::2]) or sum(dig[:len(dig)/2]) != sum(dig[len(dig)/2:]):
            return False
    return True

","Nothing about this function makes any kind of actual sense. If you understand the individual lines, you're not missing some deeper meaning.
It basically seems to be a test to find some special value that exhibits a difficult to achieve set of properties, specifically that if you take every tenth character from the input starting from index 0, then every tenth from index 0 followed by every tenth from index 1, and so on and so on until you've got the complete data from indexes in this order: 0, 10, ... 10n, 1, 11, ..., 10n+1, 2, 12, ..., 10n+2, ......, 9, 19, ..., 10n+9, that each of those 10 progressively larger strings will have a hash where:

The sum of the even bytes is the same as the sum of the odd bytes, and
The sum of the first half of the bytes is the same as the sum of the last half.

I don't know the precise odds of both conditions holding true for all 10 hashes, but it can't be very high. I assume your professor has some example that meets the criteria, but I don't know what they expect you to make of this nonsense.
","53","<python><python-2.7><python-2.x><sha><hashlib>","1","2","1","2019-04-05 01:31:36","","0","","364696","","2019-04-05 00:45:20","2019-04-05 00:31:34",""
"58150281","Error ""EVP_DecryptFinal_ex:bad decrypt:crypto\evp\evp_enc.c:570"" appears even after specifying -md5 sha256 in command line","I have the following query. Could anyone please suggest me a solution.
I'm working on decryption of .ts file for the first time. I have downloaded multiple .ts files from the source and have merged them but not able to decrypt the file. Even if it gets decrypted the size of the file is zero bytes.
Command I'm using: 
aes-128-cbc -d -in D:\Test\joined_files.ts -out D:\Test\decrypt_I00100000.ts -iv 0 -K 313863756468736b63646b6a616b -md SHA256

The error I'm getting:
the hex string is too short, padding with zero bytes to the length
the hex string is too short, padding with zero bytes to the length
bad decrypt
1132:error:06065064:digital envelope routines:EVP_DecryptFinal_ex:bad decrypt:crypto\evp\evp_enc.c:570:
error in aes-128-cbc
enter image description here
","","53","<encryption><ffmpeg><openssl><md5><sha>","0","","0","2019-09-29 04:58:42","","4","","10316689","","2019-09-29 04:58:42","2019-09-28 21:03:37",""
"32168858","Hash payloads like form data or json in ruby","for caching purpose, I want to generate a sha256 hash for various payloads. The hash should be safe enough, to ignore changes in the order of fields.
For form data, this would be fairly easy, e.g. this body foo=bar&test=data can be splitted by & and = sorted, joined and then hashed like this:
require 'digest'
data = ""test=data&foo=bar""
joined_data = data.split(""&"").map {|pair| pair.split(""="") }.sort { |a,b| a[0] <=> b[0] }.flatten.join
Digest::SHA256.hexdigest joined_data
# => ""cf0bb2aa96a34e404a2901eec34214033dbf73f4242330f0e77c534bf38da585""

But for JSON data, this is much more difficult. First, the order of the keys doesn't matter for the content, but the order inside arrays does matter, keys and arrays can be nested and so on...
I could implement a JSON.parse(body), then convert the ruby hash to an array, sort the keys and do everything recursivly (also inside arrays) until we are finished.
1st question: Is there already a solution for hashing JSON data?
2nd question: Besides JSON, form data, plain strings and binary data, what other data structures should I consider, where the order is unimportant? XML? Anything else?
","","53","<ruby><json><hash><multipartform-data><sha>","0","","0","2015-08-23 16:26:28","","2","","","","","2015-08-23 16:26:28","2015-08-24 07:02:40"
"56417329","How do I take the first 4 bytes of SHA256 in Rust?","How do I elegantly take first 4 bytes of SHA256 in Rust? Specifically from generic_array produced by:
sha2::Sha256::new().chain(b""blabla_93794926"").result();
(without using unsafe Rust)
","This should work:
let first_bytes = &(Sha256::new().chain(b""blabla_93794926"").result()[0..4]);

","52","<rust><sha>","-3","0","1","2019-06-02 17:54:56","","1","","","","","2019-06-02 17:25:04",""
"28455852","How to see a collision from an algorithm?","I need to find a string I can put into my program to have the same hash value as;
HOTTEST LINDA ONE OF THE MANY ABSTRACT PAINTINGS BY THIS FAB ROCKER DEPICTS   HIS FIRST WIFE SUNBATHING""
hash value -> 0x1bfdbfe8

Here is the algorithm;
Input{inStr: a binary string of bytes}
Output{outHash: 32-bit hashcode for the inStr in a series of hex values}
Mask: 0x3FFFFFFF
outHash: 0
for byte in input
  intermediate_value = ((byte XOR 0xCC) Left Shift 24) OR
  ((byte XOR 0x33) Left Shift 16) OR
  ((byte XOR 0xAA) Left Shift 8) OR
  (byte XOR 0x55)
  outHash =(outHash AND Mask) + (intermediate_value AND Mask)
return outHash

How do you just look at this algorithm and  find the results are the same no matter what bytes you perform the operation on first. I an't see it...
THANKS
","
How do you just look at this algorithm and find the results are the same no matter what bytes you perform the operation on first.

intermediate_value is a pure function of byte. Neither the position of the byte nor what values precede or follow it affect the intermediate_value.
outHash is the sum of the intermediate values.
The commutative law of addition tells us that the sum will be the same regardless of the order of the bytes.
So you can re-order the input as you wish - the hash value will stay the same.
","51","<algorithm><python-2.7><encryption><hash><sha>","0","1","1","2015-02-11 15:02:21","","2","","646887","","2015-02-11 14:52:35","2015-02-11 13:41:45",""
"42099706","What is the best memory model in java for referencing Hash values?","I am reading a file which contains a list of sha encrypted Hashes.  I could just read them in memory as List<String>.
This is a very large list and a String maybe a very wasteful memory model...so I would like to figure out if there is a better way to store this list in memory.
For example, if it was a list of UUID strings, I would turn them into a List<UUID>.
Is there an equivalent for Hash?

Sorry - here is some background.  I'm doing some spark-map/reduce comparisons, and I'd like to make sure the hash's in memory are stored as efficiently as possible.

from the comments it sounds like I should store them in byte-array.  So that would mean converting the string to hash-object and then getting the byte array...
","You can convert a String to a byte array simply by using the String.getBytes() method. Note that this returns the bytes that compose the string representation of the hash value, not the numeric value of the hash.
Instead, assuming your hash values are hexadecimal (base 16) encoded strings then you can use Google's guava library. It has a Hashing class with hashing utilities. It has a HashCode class that stores the hash value, e.g. in byte array (BytesHashCode). This class has a fromString(string) method to create a HashCode instance from which you can get the byte array / long / int representation of the actual value. This class is more-or-less equivalent to UUID in your example.
","51","<java><hash><sha>","1","0","1","2017-02-07 21:24:36","","6","","317027","","2017-02-07 21:15:27","2017-02-07 20:48:12",""
"32912633","How can I generate a valid (but unaccessible) custom bitcoin address?","I want to generate a bitcoin address with a long prefix (like https://blockchain.info/address/1CounterpartyXXXXXXXXXXXXXXXUWLpVr) but am unsure how to do so.
I understand I won't be able to access any bitcoins. 
I understand there is some SHA-256 hashing involved. If you are able to help please provide some example code.
Thanks!
Edit: These need to be valid bitcoin addresses with a custom long prefix.
","If you use Ruby, you can make some fake ones. https://github.com/stympy/faker#fakerbitcoin Faker::Bitcoin.address
","51","<sha><bitcoin>","0","0","1","2015-10-07 16:08:25","","0","","2304595","","2015-10-02 19:02:15","2015-10-02 17:27:15",""
"48054990","NumberFormatException in SHA-256 project","I am working on a research project which includes developing and implementing code for the SHA-256 hash algorithm. I am getting a NumberFormatException in my test program as shown here:
    Exception in thread ""main"" java.lang.NumberFormatException: For input string: ""11100010111000101100001110001110""
    at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
    at java.lang.Integer.parseInt(Integer.java:583)
    at SHA2.processHash(SHA2.java:70)
    at SHA2.<init>(SHA2.java:30)
    at SHATest.main(SHATest.java:4)

These are lines 60-75 in my SHA2 class:
   public void processHash(String[] blocks, String[] W)
   {
     for(int i=0; i<16; i++)
     {
       W[i]=blocks[i];
     }
    for(int i=16; i<64; i++)
    {
      int binaryW = Integer.parseInt(W[i-15], 2);
      int s0 = delta0(binaryW);
      binaryW = Integer.parseInt(W[i-2], 2);
      int s1 = delta1(binaryW);
      int sum = s0 + (Integer.parseInt(W[i-16], 2)) + s1 + 
      (Integer.parseInt(W[i-7], 2));
      W[i] = Integer.toBinaryString(sum);
      }
  }

Not sure exactly what is going on here. I figured that my values were exceeding 2^31-1 so I used a long instead but still got the same error with a larger number. 
Here is the code to my entire SHA-2 Class: GitHub Project
I am somewhat new to coding so I am sure that I have butchered most of the code.
","The binary value ""11100010111000101100001110001110"" that is 32 bit long, is too big for a signed interger, as the sign uses one bit.
To be able to handle all 32 bits you might use long binaryW = Long.parseLong(W[i-15], 2); instead.
","51","<encryption><hash><sha>","0","0","1","2018-01-02 11:14:12","","2","","","","","2018-01-02 02:39:13",""
"56194879","Implementation of SHA-1 yields different hashes that the `java.security` implementation","I am trying to implement the SHA-1 algorithm in Java 11, and while testing the hashing algorithm I get different hashes than when hashing with the java.security implementation of SHA-1.
The pseudocode I attempted to follow can be found on Wikipedia.
public static byte[] hash(byte[] message) {
    int h0 = 0x67452301;
    int h1 = 0xEFCDAB89;
    int h2 = 0x98BADCFE;
    int h3 = 0x10325476;
    int h4 = 0xC3D2E1F0;

    ByteArrayOutputStream out = new ByteArrayOutputStream();
    out.writeBytes(message);
    out.write(0x00000080);
    while (out.size() % 64 != 56) out.write(0x00000000);
    out.writeBytes(ByteBuffer.allocate(8).putLong(message.length).array());
    byte[] data = out.toByteArray();

    for (int j = 0; j < data.length / 64; ++j) {
        int[] w = new int[80];
        for (int i = 0; i < 16; ++i) {
            w[i] = ByteBuffer.wrap(data, j * 64 + i * 4, 4).getInt();
        }

        for (int i = 16; i < 80; ++i) {
            w[i] = leftrotate((w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16]), 1);
        }

        int a = h0;
        int b = h1;
        int c = h2;
        int d = h3;
        int e = h4;

        for (int i = 0; i < 80; ++i) {
            final int f, k;
            if (i < 20) {
                f = (b & c) | ((~b) & d);
                k = 0x5A827999;
            } else if (i < 40) {
                f = b ^ c ^ d;
                k = 0x6ED9EBA1;
            } else if (i < 60) {
                f = (b & c) | (b & d) | (c & d);
                k = 0x8F1BBCDC;
            } else {
                f = b ^ c ^ d;
                k = 0xCA62C1D6;
            }

            int t = leftrotate(a, 5) + f + e + k + w[i];
            e = d;
            d = c;
            c = leftrotate(b, 30);
            b = a;
            a = t;
        }

        h0 += a;
        h1 += b;
        h2 += c;
        h3 += d;
        h4 += e;
    }

    ByteBuffer buffer = ByteBuffer.allocate(20);
    buffer.putInt(h0);
    buffer.putInt(h1);
    buffer.putInt(h2);
    buffer.putInt(h3);
    buffer.putInt(h4);

    return buffer.array();
}

public static int leftrotate(int x, int c) {
    return (x << c) | (x >> (32 - c));
}

To test this out, I attempt to hash a random array of n bytes, and compare the hash to the one obtained by
MessageDigest.getInstance(""SHA-1"").digest(message)

I get different hashes.
Is there any mistake in my implementation above? Could the error come from somewhere else?
","There were two problems with the implementation. First, I was writing the size of the initial message in bytes and not in bits. Second, the leftrotate method was using the arithmetic right shift when it should have been using the logical right shift.
","51","<java><algorithm><hash><sha>","-2","0","1","2019-05-18 03:06:22","56195649","8","","10361608","","2019-05-18 01:30:21","2019-05-18 00:01:03",""
"50292684","Convert C# Sha1 to php","I am trying to convert a c# code to php but since I am from a php background I am unable to find the relevant code.
Here is the code.
  static string sha1Hash(string password)
    {
        return string.Join("""", SHA1CryptoServiceProvider.Create().ComputeHash(Encoding.UTF8.GetBytes(password)));
    }

I tried use sha1() of php but the output is very different.c
","","50","<c#><php><character-encoding><sha>","1","","0","2018-05-11 12:50:45","","3","","7478530","","2018-05-11 12:49:58","2018-05-11 12:46:10",""
"55795980","How to get SHA256 code for object in dart?","I need to get sha256 code (hex string) for Object. I can get this for String - the result will be equal (verified on some online sites); But I dont know how to get sha256 for dart Object, not for string. In java this possible to do when you make byte[] from Object, dart doesn't support object serialization. so If somebody knows how can i handle with this, please?
","","50","<serialization><hash><dart><flutter><sha>","0","","0","2019-04-22 14:26:44","","6","","","","","2019-04-22 14:26:44",""
"19770185","hashing redirected DOS output","I'm trying to hash the result of a command line parameter using SHA1 from openssl and it works fine. the problem is that i need to compare this result from other that i got from SHA1 PHP function, and the result that i get is not the same. when i try to hash with a fix parameter lets say ""police"" the result is the same, so i think the problem is that the result that i get from DOS console is encoded with Unicode or ASCII.
this is how i get DOS result
std::string exec(char* cmd) {
FILE* pipe = _popen(cmd, ""r"");
if (!pipe) return ""ERROR"";
char buffer[128];
std::string result = """";
while(!feof(pipe)) {
    if(fgets(buffer, 128, pipe) != NULL)
        result += buffer;
}
_pclose(pipe);
return result;
}

everything works fine and i'm able to hash the data i got from result.
std::string tag = exec_result.substr (found+2,11);
SHA1((unsigned char *)tag.c_str(), strlen(tag.c_str()), temp);

the problem is that the hashed value is not the same i got from PHP SHA1 function, so i thought may be the implementation of both functions were no the same, but then i tried the SHA1 C++ function with a fixed parameter and the results were equals, so i think the difference may be on the characters set of the output i'm getting from DOS console. can somebody please helpme
","See if this is related to the newline conventions. UNIX is using LF whereas DOS/Windows is using CR/LF. 
Try it on a single string with no newline/linefeed characters first and if it works, add logic to ""standardize"" your data..
","50","<c++><sha>","1","2","1","2013-11-04 14:59:52","","2","","2214693","","2013-11-04 14:59:52","2013-11-04 14:43:06",""
"53799024","Standalone sha256 and ripemd160 hash implementations","I've been looking for standalone header-only sha256 and ripemd160 hash functions, preferably MIT licence, but GPL and others are fine too.
I found pico256, header only, I can integrate into a project.  But I can't find both hash functions I need.  I am not sure if I can just rip the bits out I want from OpenSSL, it's too big and complex.
If I can find a reasonable description of sha256 and ripemd160, I might have a go at implementing them myself.
Until then, does anyone know of either
a) standalone sha256 and ripemd160 C or C++ code I can compile into a project, or
b) a small library I can static link into a project?
I'm not sure how to do that with OpenSSL; I'm on Windows 10 and it always seems to want a DLL it generates for shared libraries.  Maybe I'm just not building correctly for static linking without DLLs.
Thank you for any pointers or tips.
","","50","<hash><sha256><sha><ripemd>","0","","0","2018-12-16 02:44:48","","1","","","","","2018-12-16 02:44:48",""
"58134269","SHA1 hash of an array of structs in Swift","I need to produce an SHA1 hash of an array of custom structs in Swift. The app receives the array from an external source at periodic intervals. The objective is to be able to tell if the data changed after last update, without holding a full copy of the data.
How can I do this?
struct Person {
    let firstName: String
    let lastName: String
}

let people = [
    Person(firstName: ""John"", lastName: ""Appleseed""),
    Person(firstName: ""Mike"", lastName: ""Doe"")
]

// Produce an SHA1 digest of `people` here?

","One way to do this could be using JSON with sorted keys:
struct Person: Encodable {
    let firstName: String
    let lastName: String
}

let people = [
    Person(firstName: ""John"", lastName: ""Appleseed""),
    Person(firstName: ""Mike"", lastName: ""Doe"")
]

let encoder = JSONEncoder()
encoder.outputFormatting = .sortedKeys
let data = try! encoder.encode(people)

var digest = [UInt8](repeating: 0, count: Int(CC_SHA1_DIGEST_LENGTH))
data.withUnsafeBytes { ptr in
    CC_SHA1(ptr.baseAddress, CC_LONG(data.count), &digest)
}

","49","<ios><arrays><swift><hash><sha>","-1","1","1","2019-09-27 17:28:12","","4","","1712145","","2019-09-27 12:16:05","2019-09-27 12:09:13",""
"52114114","SHA2-256 of entire SQL Server database","Can I calculate hash for an entire database in SQL Server, in order to compare hash after duplicating it?
For example, I send the .mdf file to a my friend, he mounts the .mdf file on his SQL Server. I calculate the hash of the entire content and structure of my database and I send the hash to my friend. He make same calculation and compare hashes, now we are sure we have same data and structure in database.
","","49","<sql-server><sha>","0","","0","2018-08-31 11:25:55","","4","","13302","","2018-08-31 11:25:55","2018-08-31 11:04:50",""
"57676333","How to verify if a certificate is hashed with SHA-1 in Java","In Java to get the signature algorithm associated with an X509 certificate I can do:
X509Certificate.getSigAlgName()to return a human-friendly algorithm name, e.g SHA1WithRSA.
Is there a way to find out if the signature algorithm returned by the function above is using SHA-1 as it's hashing function? other than having a list of algorithms like so [SHA1WithRSA, SHA1WithDSA, SHA1WithECSDA...] and verifying if the algorithm name is in the list .
","","49","<java><sha>","1","","0","2019-08-27 14:13:37","","3","","2884309","","2019-08-27 14:13:37","2019-08-27 13:58:28",""
"53794912","Problems with SHA-256 hash of file passed through PHP SoapClient","I'm trying to use PHP SoapClient to call a web service function which these two parameters (taken from documentation):
byte[] file,     // byte array of file
byte[] hashFile // byte array of hash SHA-256 of the original file

It's a XML file, but I don't have the file, i just generate its content on-the-fly with : $fileContent = $this->xmlDocument->saveXML()

The problem is that when I do the call to the function the server answers: invalid file hash

I can't understand what's my mistake.
This is the WSDL part which defines these parameters:
<wsdl:part name=""file"" type=""xsd:base64Binary""/>
<wsdl:part name=""hashFile"" type=""xsd:base64Binary""/>

And this is my code :
<?php
function sendDocument($xmlDocument,$soapClient)
{
    $fileContent = $xmlDocument->saveXML()
    $params = [
        ""file""     => getByteArray($fileContent),
        ""hashFile"" => getByteArray(getHash($fileContent)),
    ];
    $response = $soapClient->__soapCall(""sendDocument"", $params);
}
function getByteArray($string)
{
    return base64_encode($string);
}
function getHash($string)
{
    return hash(""sha256"", $string);
}
?>

","","48","<php><soap-client><sha>","0","","0","2018-12-15 17:56:49","","3","","10096230","","2018-12-15 17:56:49","2018-12-15 16:08:43",""
"28327069","Number of SHA-1 Iterations?","I'm currently working with an API system that requires all variables to be submitted using SHA-1 hashes with 38,000 iterations.  Their API system and my script uses PHP.
Here's my question:  is there a specific reason to use a certain number of iterations?
I'm not asking necessarily for this API, but would like to know for future reference.  Why not use just 20,000 iterations or as many as 50,000?  Is there any sort of ""limit"" on how many should be used?
","","48","<php><hash><sha>","1","","0","2015-02-04 16:57:52","","2","","","","","2015-02-04 16:57:52",""
"36409095","Finding algorithm from encrypted code","I have a word (can't provide it here) and its encrypted code: 
1C6FC813B5D83F96BB5A4B62F421225E060AC2FCD3A2C4C31B029D92C96444AB6F943DE9B6D83764C8AC5DF743DF9A1FFAC14686B531BF2CDA551F561

I should find the encryption algorithm used for it. I tried SHA-512 and generated me the same code as below but by including some zeroes.
I tried many online SHA generators and they all provided the same below encrypted code.
1c6fc813b5d83f960bb5a4b62f421225e060ac2fcd3a2c4c31b029d92c96444ab6f943de09b6d83764c8ac5df743df9a1ffac146860b05031bf2cd0a551f5601

Any idea about how some zeros are excluded?
","That are the same SHA-512 hashes displayed in hexadecimal with the following exception: In the top hash all bytes that in hex would have a leading 0 it was dropped, probably the binary to hexadecimal conversion was incorrect. Perhaps the format was %x instead of %02x.
Example:
printf(""%x%x%x%x\n"",         0x55, 0x02, 0x40, 0x66);
printf(""%02x%02x%02x%02x\n"", 0x55, 0x02, 0x40, 0x66);

Output:

5524066     <-- Notice the missing 0
  55024066

","48","<security><encryption><sha>","-6","1","1","2016-04-04 19:51:45","","1","","1738331","","2016-04-04 17:36:05","2016-04-04 17:28:52","2016-04-09 18:29:25"
"47411088","Android Google Places API issue with key","I am beginner in Android. We are facing issues with Google Places API. We generated a SHA key for keystore file and added it to Google console. And use same file for building release apk, and released app. The app is working fine.
With few minor changes we update another version of app, then we got issues with places. Places API is not working. 
We need to generate release build from same system, where we generated a SHA key from keystore file? I feel no need because from any system the SHA key is same for release keystore file.
And not added any configurations in Gradle file. 
signingConfigs {
        release {
            storeFile file(""my-release-key.jks"")
            storePassword ""password""
            keyAlias ""my-alias""
            keyPassword ""password""
        }
    }

Because we used Sign an APK procedure from this documentation  https://developer.android.com/studio/publish/app-signing.html
I am nor getting what exactly we are missing.
","I think you are working as a group on project, might be due to code merging. Project got deleted and it will cause problem for you. Just try to configure the place API again. It's the only hope for solving problem.
","48","<android><google-places-api><production-environment><sha>","0","1","1","2018-07-16 22:34:37","","0","","472495","","2018-07-12 19:47:06","2017-11-21 10:42:26",""
"45048872","In PBKDF2 is INT (i) signed?","Page 11 of RFC 2898 states that for U_1 = PRF (P, S || INT (i)), INT (i) is a four-octet encoding of the integer i, most significant octet first.
Does that mean that i is a signed value and if so what happens on overflow?
","Nothing says that it would be signed.  The fact that dkLen is capped at (2^32 - 1) * hLen suggests that it's an unsigned integer, and that it cannot roll over from 0xFFFFFFFF (2^32 - 1) to 0x00000000.
Of course, PBKDF2(MD5) wouldn't hit 2^31 until you've asked for 34,359,738,368 bytes.  That's an awful lot of bytes.

SHA-1: 42,949,672,960
SHA-2-256 / SHA-3-256: 68,719,476,736
SHA-2-384 / SHA-3-384: 103,079,215,104
SHA-2-512 / SHA-3-512: 137,438,953,472

Since the .NET implementation (in Rfc2898DeriveBytes) is an iterative stream it could be polled for 32GB via a (long) series of calls.  Most platforms expose PBKDF2 as a one-shot, so you'd need to give them a memory range of 32GB (or more) to identify if they had an error that far out.  So even if most platforms get the sign bit wrong... it doesn't really matter.
PBKDF2 is a KDF (key derivation function), so used for deriving keys.  AES-256 is 32 bytes, or 48 if you use the same PBKDF2 to generate an IV (which you really shouldn't).  Generating a private key for the ECC curve with a 34,093 digit prime is (if I did my math right) 14,157 bytes.  Well below the 32GB mark.
","48","<security><sha><hmac><integer-overflow><pbkdf2>","0","1","2","2017-07-12 15:36:15","","0","","","","","2017-07-12 05:09:40",""
"45048872","In PBKDF2 is INT (i) signed?","Page 11 of RFC 2898 states that for U_1 = PRF (P, S || INT (i)), INT (i) is a four-octet encoding of the integer i, most significant octet first.
Does that mean that i is a signed value and if so what happens on overflow?
","i ranges from 1 to l = CEIL (dkLen / hLen), and dkLen and hLen are positive integers. Therefore, i is strictly positive.
You can, however, store i in a signed, 32-bit integer type without any special handling. If i rolls over (increments from 0x7FFFFFFF to 0xF0000000), it will continue to be encoded correctly, and continue to increment correctly. With two's complement encoding, bitwise results for addition, subtraction, and multiplication are the same as long as all values are treated as either signed or unsigned.
","48","<security><sha><hmac><integer-overflow><pbkdf2>","0","0","2","2017-07-12 15:36:15","","0","","","","","2017-07-12 05:09:40",""
"57964425","How do you create SHA-2 and AES encrypted string to use in HTTP request header in .NET?","I am trying to write client code that requests for information from an external API over the web.
The API is simple enough (to me) except for the stipulations of how to generate the authorisation key.
First some context:
There are 6 string values required to start with:

token
password
devId
salt
orgId
givenKey

Now for the encryption stuff. First up SHA2.
hashedString = SHA2(token + password + devId)

Followed by AES.
authKey = AES(salt + orgId + ""="" + hashedString)

The AES parameters are specified as follows:

Mode = ECB
Padding = PKCS5Padding
Secret Key = givenKey

My problem is that I know next to nothing about cryptography.
Below is the code I have attempting to accomplish the above.
// Generate Authorisation key
            byte[] fieldsBytes = Encoding.ASCII.GetBytes(token + password + devId);
            byte[] keyBytes = Encoding.ASCII.GetBytes(secretKey);
            SHA512 shaM = new SHA512Managed();
            string hashedFields = Encoding.ASCII.GetString(shaM.ComputeHash(fieldsBytes));
            byte[] encryptedBytes = EncryptStringToBytes_Aes(salt + orgId + ""="" + hashedfields,
                keyBytes, keyBytes);
            string encryptedString = Encoding.ASCII.GetString(encryptedBytes);


private byte[] EncryptStringToBytes_Aes(string plainText, byte[] Key, byte[] IV)
        {
            // Check arguments.
            if (plainText == null || plainText.Length <= 0)
                throw new ArgumentNullException(""plainText"");
            if (Key == null || Key.Length <= 0)
                throw new ArgumentNullException(""Key"");
            if (IV == null || IV.Length <= 0)
                throw new ArgumentNullException(""IV"");
            byte[] encrypted;

            // Create an Aes object
            // with the specified key and IV.
            using (Aes aesAlg = Aes.Create())
            {
                aesAlg.Key = Key;
                aesAlg.IV = IV;
                aesAlg.Padding = PaddingMode.PKCS7;
                aesAlg.Mode = CipherMode.ECB;

                // Create an encryptor to perform the stream transform.
                ICryptoTransform encryptor = aesAlg.CreateEncryptor();

                // Create the streams used for encryption.
                using (MemoryStream msEncrypt = new MemoryStream())
                {
                    using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))
                    {
                        using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))
                        {
                            //Write all data to the stream.
                            swEncrypt.Write(plainText);
                        }
                        encrypted = msEncrypt.ToArray();
                    }
                }
            }

            // Return the encrypted bytes from the memory stream.
            return encrypted;
        }

This code gets a ""401"" from the external service.
My first issue is that there does not seem to be a NET method named SHA2. The closest I could find is SHA512 and I am not sure if SHA512 is a .NET implementation of SHA2.
Secondly, padding for AES has been specified as PKCS5Padding but again the closest (naming-wise) I could find is PKCS7 which I am not sure about how similar it is to PKCS5.
There is also the matter of an Initialisation Vector (IV), which the AES parameters don't specify but I see C# AES examples including. In the code, I have set it to have the same value as the Key (which I believe
is what the API calls ""secret key"") out of sheer desperation but I have tried making the request without setting IV to any value and still get back a 401.
I should probably also mention that I am using ASCII encoding to convert to-and-from bytes because I first tried using UTF8 but when it came to actually making the HTTP request, I was getting an exception
saying that header values (remember we are generating an authorisation key that will be tucked in a HTTP request header) should only be encoded in ASCII.
Any help pointing me in the right direction will be immensely appreciated as I am woefully out of my depth with this cryptography stuff.
","Don't worry, crypto can feel overwhelmingly complicated. I think you're close.

SHA2 is a family of hash functions. In practice, ""SHA2"" usually means SHA2-256 or occasionally SHA2-512. My guess is that your external API is probably using the more common SHA2-256.
This answer on crypto.stackexchange explains that PKCS#5 is essentially a subset of PKCS#7. I'd be willing to bet that the API you're calling made the same mistake described in that answer and should really be calling it PKCS7Padding. Your code is fine!
The IV isn't the same thing as the secret key (or just the ""key"" for AES). The IV should be random for every encryption run. You aren't supposed to derive it from the input plaintext or the input key. Fortunately, AesCryptoServiceProvider.GenerateIV() will generate one for you. It's up to you to prepend it to your output stream, though.
Using Encoding.ASCII.GetBytes() to get the plaintext and secret key bytes makes sense to me. I don't think that's causing a problem.

Stealing from this excellent answer to a similar question (go give them a vote!), I'd try code like this:
static byte[] AesEncrypt(byte[] data, byte[] key)
{
    if (data == null || data.Length <= 0)
    {
        throw new ArgumentNullException($""{nameof(data)} cannot be empty"");
    }

    if (key == null || key.Length != AesKeySize)
    {
        throw new ArgumentException($""{nameof(key)} must be length of {AesKeySize}"");
    }

    using (var aes = new AesCryptoServiceProvider
    {
        Key = key,
        Mode = CipherMode.CBC,
        Padding = PaddingMode.PKCS7
    })
    {
        aes.GenerateIV();
        var iv = aes.IV;
        using (var encrypter = aes.CreateEncryptor(aes.Key, iv))
        using (var cipherStream = new MemoryStream())
        {
            using (var tCryptoStream = new CryptoStream(cipherStream, encrypter, CryptoStreamMode.Write))
            using (var tBinaryWriter = new BinaryWriter(tCryptoStream))
            {
                // prepend IV to data
                cipherStream.Write(iv);
                tBinaryWriter.Write(data);
                tCryptoStream.FlushFinalBlock();
            }
            var cipherBytes = cipherStream.ToArray();

            return cipherBytes;
        }
    }
}

Unless there's something else weird going on with this API, I'd guess it's probably #3 above that is causing your request to fail.
","47","<c#><.net><aes><sha>","1","1","2","2019-09-20 21:30:37","58035392","2","","539022","","2019-09-16 21:09:54","2019-09-16 21:06:57",""
"57964425","How do you create SHA-2 and AES encrypted string to use in HTTP request header in .NET?","I am trying to write client code that requests for information from an external API over the web.
The API is simple enough (to me) except for the stipulations of how to generate the authorisation key.
First some context:
There are 6 string values required to start with:

token
password
devId
salt
orgId
givenKey

Now for the encryption stuff. First up SHA2.
hashedString = SHA2(token + password + devId)

Followed by AES.
authKey = AES(salt + orgId + ""="" + hashedString)

The AES parameters are specified as follows:

Mode = ECB
Padding = PKCS5Padding
Secret Key = givenKey

My problem is that I know next to nothing about cryptography.
Below is the code I have attempting to accomplish the above.
// Generate Authorisation key
            byte[] fieldsBytes = Encoding.ASCII.GetBytes(token + password + devId);
            byte[] keyBytes = Encoding.ASCII.GetBytes(secretKey);
            SHA512 shaM = new SHA512Managed();
            string hashedFields = Encoding.ASCII.GetString(shaM.ComputeHash(fieldsBytes));
            byte[] encryptedBytes = EncryptStringToBytes_Aes(salt + orgId + ""="" + hashedfields,
                keyBytes, keyBytes);
            string encryptedString = Encoding.ASCII.GetString(encryptedBytes);


private byte[] EncryptStringToBytes_Aes(string plainText, byte[] Key, byte[] IV)
        {
            // Check arguments.
            if (plainText == null || plainText.Length <= 0)
                throw new ArgumentNullException(""plainText"");
            if (Key == null || Key.Length <= 0)
                throw new ArgumentNullException(""Key"");
            if (IV == null || IV.Length <= 0)
                throw new ArgumentNullException(""IV"");
            byte[] encrypted;

            // Create an Aes object
            // with the specified key and IV.
            using (Aes aesAlg = Aes.Create())
            {
                aesAlg.Key = Key;
                aesAlg.IV = IV;
                aesAlg.Padding = PaddingMode.PKCS7;
                aesAlg.Mode = CipherMode.ECB;

                // Create an encryptor to perform the stream transform.
                ICryptoTransform encryptor = aesAlg.CreateEncryptor();

                // Create the streams used for encryption.
                using (MemoryStream msEncrypt = new MemoryStream())
                {
                    using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))
                    {
                        using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))
                        {
                            //Write all data to the stream.
                            swEncrypt.Write(plainText);
                        }
                        encrypted = msEncrypt.ToArray();
                    }
                }
            }

            // Return the encrypted bytes from the memory stream.
            return encrypted;
        }

This code gets a ""401"" from the external service.
My first issue is that there does not seem to be a NET method named SHA2. The closest I could find is SHA512 and I am not sure if SHA512 is a .NET implementation of SHA2.
Secondly, padding for AES has been specified as PKCS5Padding but again the closest (naming-wise) I could find is PKCS7 which I am not sure about how similar it is to PKCS5.
There is also the matter of an Initialisation Vector (IV), which the AES parameters don't specify but I see C# AES examples including. In the code, I have set it to have the same value as the Key (which I believe
is what the API calls ""secret key"") out of sheer desperation but I have tried making the request without setting IV to any value and still get back a 401.
I should probably also mention that I am using ASCII encoding to convert to-and-from bytes because I first tried using UTF8 but when it came to actually making the HTTP request, I was getting an exception
saying that header values (remember we are generating an authorisation key that will be tucked in a HTTP request header) should only be encoded in ASCII.
Any help pointing me in the right direction will be immensely appreciated as I am woefully out of my depth with this cryptography stuff.
","I finally managed to get it to work.
A big part of the problem was that API documentation did not specify that hashedString has to
be composed of hexadecimal characters.
It also didn't say that authKey should be a base64 string.
I don't know if this is so standard that it goes without saying but knowing this could have 
saved me hours of agony. I was converting the hashed/encrypted bytes back to ASCII
and much of it was unprintable characters that were causing the server to send back
a HTTP response with status 400 BAD_REQUEST.
It also required hashedString to be hashed using SHA256 but the documentation does not mention it.
Thanks to @Nate Barbettini's answer for steering me in the right direction on this.
Also, it appears that AES ECB mode does not require an initialisation vector unlike other
modes like CBC so I didn't specify an IV.
For padding I specified PKCS7 (again thanks to @Nate Barbettini for that).
With that here's the code that finally worked out for me.
 string hashedFields = ComputeSha256HashHex(authToken + password + devId);

 string encryptedString = AesEncryptToBase64String(saltString + orgId + ""="" + hashedFields, secretKey);

        private string AesEncryptToBase64String(string plainText, string key)
        {
            // Convert string arguments into byte arrays
            byte[] keyBytes = Encoding.ASCII.GetBytes(key);
            byte[] plainTextBytes = Encoding.ASCII.GetBytes(plainText);

            // Check arguments.
            if (plainText == null || plainText.Length <= 0)
                throw new ArgumentNullException(""plainText"");
            if (key == null || key.Length <= 0)
                throw new ArgumentNullException(""key"");
            byte[] encrypted;

            // Create an Aes object
            // with the specified key and IV.
            using (Aes aesAlg = Aes.Create())
            {
                aesAlg.Key = keyBytes;
                aesAlg.Padding = PaddingMode.PKCS7;
                aesAlg.Mode = CipherMode.ECB;

                // Create an encryptor to perform the stream transform.
                ICryptoTransform encryptor = aesAlg.CreateEncryptor();

                // Create the streams used for encryption.
                using (MemoryStream msEncrypt = new MemoryStream())
                {
                    using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))
                    {
                        using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))
                        {
                            //Write all data to the stream.
                            swEncrypt.Write(plainText);
                        }
                        encrypted = msEncrypt.ToArray();
                    }
                }
            }

            // Return encrypted bytes as Base 64 string
            return Convert.ToBase64String(encrypted);
        }


        private string ComputeSha256HashHex(string plainText)
        {
            using (SHA256 sha256Hash = SHA256.Create())
            {
                // ComputeHash - returns byte array  
                byte[] bytes = sha256Hash.ComputeHash(Encoding.UTF8.GetBytes(plainText));

                // Convert byte array to a string   
                return BytesToHexString(bytes);
            }
        }


        private string BytesToHexString(byte[] bytes)
        {
            // Convert byte array to a string   
            StringBuilder builder = new StringBuilder();
            for (int i = 0; i < bytes.Length; i++)
            {
                builder.Append(bytes[i].ToString(""x2""));
            }
            return builder.ToString();
        }

","47","<c#><.net><aes><sha>","1","1","2","2019-09-20 21:30:37","58035392","2","","539022","","2019-09-16 21:09:54","2019-09-16 21:06:57",""
"36192660","Obfuscation and SHAs?","I'm trying to determine whether it's possible to utilize SHAs for obfuscating and still maintain a decent/full amount of functionality. I'm asking because I can't find anything pertaining to SHAs being used for obfuscating real run-time codes. Every answer I find refers to SHAs for just obfuscating variables into hash for comparison, but not for obfuscating run-time functions and the functionality of the codes.
Thank you everyone and thank you for this lovely site.
","Obfuscation is a two way street. You want to be able to both obfuscate something and after deobfuscate and use it.
SHA is a hash function. It's one way street. If you took a hash of something, you can't go back to original value.
As result. You can't use SHA for obfuscation.
BTW. ""obfuscating variables into hash"" is wrong usage of terminology.
","47","<obfuscation><sha>","-2","0","1","2016-03-30 03:56:33","","0","","634576","","2016-03-30 03:24:46","2016-03-24 03:14:00",""
"22718683","Error when comparing hashes when logging in","i'm creating a simple login system, i has the passwords using sha256 and store a salt using a random number in the database. However when i try to log in, when it goes to compare the hashes it fails. Can anyone see why?
   <?php
session_start();

$username = $_POST['username'];
$password = $_POST['password'];

$mysql_db_hostname = ""localhost"";
$mysql_db_user = ""root"";
$mysql_db_database = ""login"";

$con = mysql_connect($mysql_db_hostname, $mysql_db_user) or die(""Could not connect database"");
mysql_select_db($mysql_db_database, $con) or die(""Could not select database"");

$query = ""SELECT password, salt FROM registered_users WHERE username='$username'"";
$result = mysql_query($query);
if(mysql_num_rows($result) < 1) //no such user exists
{

            echo 'false';
            header('Location: index.php');
}
$userData = mysql_fetch_array($result, MYSQL_ASSOC);
$hash = hash('sha256', $userData['salt'] . hash('sha256', $password) );
if($hash != $userData['password']) //incorrect password
{   

            echo 'false';
            header('Location: index.php');

}
else
{
    echo 'true';
     $_SESSION['username']=$row['username'];    

}
session_write_close();

Heres how i hash my pass
// hash the password using sha256 a string of 64 characters
$hash = hash('sha256', $password);
// create the salt, random string of characters appened to hash
function createSalt()
{
    $string = md5(uniqid(rand(), true));
    return substr($string, 0, 3);
}
$salt = createSalt();
$hash = hash('sha256', $salt . $hash);

Heres how i insert my data
mysql_query(""INSERT INTO registered_users(username, name, email, password,salt)VALUES('$username', '$name', '$email', '$hash', '$salt')"");
header(""location: index.php?remarks-success"");
mysql_close($con);
?>

","Make sure you are storing the password in the database the same way you are checking it here.
So to put it in you should create the hash by first hashing the password, then rehashing it with a salt. If they don't match, then there is your problem.
","47","<javascript><php><mysql><encryption><sha>","-1","1","1","2014-03-28 18:53:51","22718799","18","","1301435","","2014-03-28 17:40:48","2014-03-28 16:48:06",""
"21231085","Masking phone numbers in big data","We have large dataset (many columns) which has almost 50 million unique phone numbers. We are intending to upload the data into Amazon S3 on a routine basis (daily or weekly). But first, it is vital that we scramble or mask the phone numbers, the other fields can be left as is.
Using fruits as analogus to the phone numbers, I explain my below problems.
Options considered. 
1) Aggregate all the data by phone numbers and assign each number a unique value. 
The problem is that this is a not a consistent approach.
1st Time             2nd time 
apple - v1           apple - v1
banana -v2         cherry -v2
cherry -v3 
This can only be an one-off solution at best.
2) Use SHA-1 to generate a hash and store it in some local table. Then we can use this local table to reference the original values from the keys later.
The problem is that SHA-1 might have duplicate hashes even with salt added.Not sure whether possible to maintain unique hash table
apple -  asjdfaslkdfj 
banana - blajsdfkljas 
cherry - blajsdfkljas (is this possible)
3) Use AES to encrypt the data. 
Is it possible to encrypt just a column, cos AES seems to be able to encrypt the whole file.
Another issue, is that speed might become very slow to encrypt so much data. I am just Thinking Out Aloud here.
Can anyone recommend a suitable solution for this problem ?
","","47","<encryption><aes><bigdata><sha>","0","","0","2014-01-20 10:07:17","","5","0","","","","2014-01-20 10:07:17",""
"37711184","TLS 1.1 with non-SHA-1 message authentication code (MAC) implementation?","I have a business requirement to use TLS 1.1 or greater and to not use SHA-1 (or RC4).  
Are there any known-secure implementations of TLS 1.1 that do not use SHA-1 for the MAC?  I can't seem to find any. I am thinking I should just skip past TLS 1.1 at the moment if there are no secure MACs available.  
","","47","<ssl><encryption><sha>","0","","0","2016-06-08 19:24:11","","3","","","","","2016-06-08 19:24:11",""
"56180627","Trying to convert SHA from javascript to c#","I am trying to verify a seed sent to me from a server. the seed is used to shuffle decks of cards with MersenneTwister. At the end of the game the deck of cards is sent to me from the server, so I can check the deck with the seed.
I know I have the seed correct, but I get a different deck than the one provided by the server after I hash.
I tried all different kinds of text encoding, no combination produces the same deck that I get from the server. I know the SHA they're using is from http://caligatio.github.com/jsSHA/ , mayber there is an error in there somewhere?

// Next, perform the shuffle on a deck of cards and verify the deck is exactly the one that we got.
// 1. Python's random module first hashes the game seed using SHA
// 2. The hash is turned into a sequence of bytes
// 3. The bytes are appended to the seed
// 4. The result is used to seed a Mersenne Twister

// Concat the original seed with the hash of the seed
                var hash_bytes = new Array()
                for( var i = 0; i < game_info_package.game_seed.length; i++ ) {
                    hash_bytes.push(game_info_package.game_seed.charCodeAt(i));
                }

                var hashed_game_seed = (new jsSHA(game_info_package.game_seed, ""ASCII"")).getHash(""SHA-512"", ""HEX"");
                for( var i = 0; i < 128; i += 2 ) {
                    hash_bytes.push(parseInt(hashed_game_seed.substring(i, i+2), 16));
                }

                // Convert the hash_bytes into an array of 32-bit words starting from the right
                var word_array = byte_array_to_words(hash_bytes);

                // Create a MT rng
                var twister = new MersenneTwister();
                twister.init_by_array(word_array, word_array.length);

                // At this point we need to shuffle the deck (it must match the one on the server or else we'll get the wrong answer)
                var check_cards = new Array();
                for( var deck = 0; deck < this.RULESET['number_of_decks']; deck++ ) {
                    check_cards = check_cards.concat(this.STANDARD_CARDS.slice(0));
                }
                shuffle(twister, check_cards)
                check_cards_string = check_cards.join("""");

                // Get the deck out of the deal_hash_source (deck should be part of the game hash)
                var first_close_paren = game_info_package.deal_hash_source.indexOf(')');
                var game_cards        = game_info_package.deal_hash_source.slice(1, first_close_paren);

                // This verifies the deck order hasn't changed
                if( check_cards_string == game_cards ) {//...}

List<byte> hash_bytes = new List<byte>();//all bytes

byte[] seedbytes = System.Text.Encoding.BigEndianUnicode.GetBytes( game_seed );
foreach(byte b in seedbytes){
    hash_bytes.Add(b);
}

//1.  hashes the game seed using SHA
byte[] bytes = System.Text.Encoding.BigEndianUnicode.GetBytes( game_seed );
SHA512 sha = SHA512.Create();
byte[] hashed_ = sha.ComputeHash(bytes);//2. The hash is turned into a sequence of bytes

//append to hash_bytes
foreach(byte b in hashed_){
    hash_bytes.Add(b);
}
//List -> Array
byte[] _bytes = new byte[hash_bytes.Count];
for(int i = 0; i < hash_bytes.Count; i++){
    _bytes[i] = hash_bytes[i];
}

// Convert the hash_bytes into an array of 32-bit words starting from the right
uint[] word_array = byte_array_to_words_fromright(_bytes);

// Create a MT rng
//MersenneTwister.RandomMersenne twister;
RandomMersenne twister = new RandomMersenne();
twister.RandomInitByArray(word_array, word_array.Length);

// At this point we need to shuffle the deck (it must match the one on the server or else we'll get the wrong answer)
string[] check_cards = new string[(STANDARD_CARDS.Length * numberofdecks)];
string deckcheckstring = """";
for( int deck = 0; deck < numberofdecks; deck++ ) {
    for(int i = 0; i<52; i++){
        int cardspace = (deck*52) + i;
        check_cards[cardspace] = STANDARD_CARDS[i];
        deckcheckstring += check_cards[cardspace];
    }
}
//Debug.Log(deckcheckstring);

string[] shuf = shuffle(twister, check_cards);

Both blocks of code should produce the same shuffle
","","46","<javascript><c#><sha256><sha><sha512>","0","","0","2019-05-17 06:18:22","","0","","","","","2019-05-17 06:18:22",""
"57574344","Python RSA: Will ""crypto.sign"" sign a String with lowercase hex digest","I used the python lib OpenSSL.crypto to load a .p12 file, and then I used the hashlib.sha256 to generate a digest of my data. The question is that I cannot get the ""signature"" I want. Is it because the python lib, crypto.sign(pkey, data, digest) used the lowercase a-z rather than the uppercase A-Z in the hexdigest? The code is shown here.
The signature is different from the one generated by another method of JAVA-RSASHA256.
Java used the digest below: The final String is with upper format A-F.
import java.security.MessageDigest;
char hexDigits[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
try {
    byte[] btInput = content.getBytes(""UTF-8"");
    MessageDigest mdInst = MessageDigest.getInstance(""SHA-256"");
    mdInst.update(btInput);
    byte[] md = mdInst.digest();
    int j = md.length;
    char str[] = new char[j * 2];
    int k = 0;
    for (int i = 0; i < j; i++) {
        byte byte0 = md[i];
        str[k++] = hexDigits[byte0 >>> 4 & 0xf];
        str[k++] = hexDigits[byte0 & 0xf];
    }
    return new String(str);
} catch(Exception e) {
    return null;
}

While I used the python code to generate the digest below.
from OpenSSL import crypto
from Crypto.Hash import SHA256

data = 'hello world!'
hash_256 = hashlib.sha256()
h_sha256 = hash_256.copy()
h_sha256.update(data.encode('utf-8'))
sha256_str = h_sha256.hexdigest()
print('output:', sha256_str)
#The ""print-result"" contains only lower-format 'a-f'.

Will crypto.sign(pkey, data, digest) of Python uses the lowercase digest to generate a signature? So the signature is different from that of java because java takes the uppercase?
The following code is how I import my .p12 file to sign a String.
# -*- coding: utf-8 -*-
# load OpenSSL.crypto
from OpenSSL import crypto
import hashlib

psw = b'123456'
p12 = crypto.load_pkcs12(open(r""D:\tasks\private_key.p12"", 'rb').read(), psw)
pkey = p12.get_privatekey()
data = 'hello world!'
my_signature = crypto.sign(pkey, str.encode(data), 'sha256')

","","46","<python><rsa><sha>","2","","0","2019-08-20 15:08:29","","2","","238704","","2019-08-20 15:08:29","2019-08-20 13:03:28",""
"49021878","Access to byte stream while deserializing JSON","I've been trying to find a mechanism to provide access to the raw json while deserialising a field in json.net. My class is something like this:
public class Message {
    public Signature Signature { get; set; }
    public string Payload { get; set; }
}

This currently gets serialised to:
{
  ""$type"": ""SignedMessage"",
  ""Signature"": {
    // Signature details here
  },
  ""Payload"": ""{\""$type\"": \""Foo\"", \""value\"":\""Bar\"" }""
}

The payload itself is json that has currently must be produced in a prior serialisation step, and conversely has to be deserialised in a following seperate step, this also means the json produced isn't particularly clean since it gets encapsulated within the outer wrapper. The current arrangement allows me to hash the Payload so i can either produce a signature or validate an existing one.
I'd like to be able to make Message generic:
public class Message<T> {
    public Signature Signature { get; set; }
    public <T> Payload { get; set; }
}

Which I can certainly do but then Payload is automatically deserialized (which is good) and I miss my opportunity to calculate a hash for signature verification (which is bad). It leaves me with two options:

Add conditions to T so it implements some interface aiding hash calculation.
While deserializing perform a hash on the raw json of Payload.

The first option sounded OK until i realized that i'd have to the method on EVERY class being serialized and then it sounded terrible.
The deserialisation calculation sounds a lot nicer and makes things more flexible for how and where that hash gets calculated.
The problem is thus far I can't seem to find anything allowing me access to the raw json within the json.net conversion process. Does json.net even feature that capability?
For the most part I'd like to minimize the custom code required for deserialisation, though I have written a few minimal effort converters to make the json neater.
Thanks.
","","46","<c#><.net><json.net><sha>","1","","0","2018-02-28 13:54:02","","7","","9421915","","2018-02-28 13:54:02","2018-02-28 04:16:03",""
"25713416","Keeping user's API secret of SHA secured in db","I have a mobile app communicating with server over HTTPS. Upon successful signup I return the app a unique API secret to be saved locally on the device. This API secret is used for all private method calls made to server following successful signup from this user.
In the header of each request made to server I put:
""key"":  username
""sign"": (SHA256 of post_parameters using API secret)

Server takes the post_parameters and SHA256 using the username's unique API secret found in db. If result matches ""sign"" then access is granted.
My question is this:
How do I keep each user's unique API secret safe on server db? If someone gets access to usernames and their API secrets, he has full control of user's account.
","You need to store the hash of the secret in the database, but require the user to provide the secret. That way, if the database leaks, then an attacker has the hash, but doesn't have the secret itself. When the user logs on, hash the secret that the user provides, and check whether it matches the stored hash.
To make it more secure yet, you could consider using salt: store a random value (in plaintext) in the database for each user as well, and then when you calculate the hash, you hash the salt plus the secret. So you store
salt_value  H(salt_value . secret)

where . denotes concatenation. This is more secure because if the attacker has a hash dictionary (i.e., has worked out the hash of millions of likely passwords) then he still can't break the hash: his dictionary won't have factored every possible salt value into it.
For ultra-modern security, you can also hash repeatedly. Rather than storing
H(salt_value . secret)

you store
H(H(H(H(...H(salt_value . secret) ...))))

i.e., you hash it a large number of times (say, 10,000 times). When the user logs on, hash the salt and secret repeatedly, and then compare the final result with the stored value. This is even more secure because it takes a lot longer to mount a brute force attack: the attacker will have to calculate 10,000 hashes to try a single guess at a secret.
","45","<security><hash><client-server><sha>","0","1","1","2014-09-07 18:29:30","25713443","0","","","","","2014-09-07 18:26:50",""
"26748725","Equality of two different arrays","How can I compare the result in t2(hash value) 
unsigned char t2[128];

SHA1(t1, strlen(t1),t2);

with another hash value unsigned char t3[128];  that I have as a 'string'( character sequence)?
Elementwise equality fails and weird symbols appear when printing t1
","Your question needs more clarification. However, 
Elementwise equality fails and weird symbols appear when printing t1
From this line, it appears that the array t1 is not properly NULL terminated, i.e., not qualified to be used as a string. 
","45","<c><hash><openssl><sha>","2","0","2","2014-11-05 08:26:23","","0","","4216810","","2014-11-05 03:19:13","2014-11-05 02:24:06",""
"26748725","Equality of two different arrays","How can I compare the result in t2(hash value) 
unsigned char t2[128];

SHA1(t1, strlen(t1),t2);

with another hash value unsigned char t3[128];  that I have as a 'string'( character sequence)?
Elementwise equality fails and weird symbols appear when printing t1
","I am assuming that all your tx arrays are hash values: looking at SHA1 manpage there is no information about a NULL-terminating byte or character encoding. It just about bytes so I guess you shouldn't try to print it as a string (i.e. with %s). 
// print t1 bytes
for(size_t i=0; i<128; i++)
{
    printf(""0x%2X "", t1[i]);
}

AND, strlen is likely to return garbage, use explicit length instead:
SHA1(t1, 128, t2);

So to compare your hash values (of same length) you can use :
int res = memcmp(t2, t3, 128);

Or:
for(size_t i=0; i<128; i++)
{
    if(t2[i] != t3[i])
    {
        printf(""Mismatch at index %zu\n"", i);
        break;
    }
}

","45","<c><hash><openssl><sha>","2","0","2","2014-11-05 08:26:23","","0","","4216810","","2014-11-05 03:19:13","2014-11-05 02:24:06",""
"47728891","git shasum and node sha1 do not produce the same hashe","$ echo -e 'blob 14\0Hello, World!' | shasum

produces: 8ab686eafeb1f44702738c8b0f24f2567c36da6d
running this in js/node:
var sha1 = require('sha1');

const fileContents = ""Hello, World!"";
const length = fileContents.length + 1;

const blobString = `blob ${length}\0${fileContents}`;

const hash = sha1(blobString);

console.log(blobString);
console.log(hash);

produces:
blob 14Hello, World!
d4fcfe4d339d4e59d168fdf3c0ad445fa980a7d6

why are the hashes not equal ? (8ab686eafeb1f44702738c8b0f24f2567c36da6d != d4fcfe4d339d4e59d168fdf3c0ad445fa980a7d6)
","The hashes are not equal because of the difference of a newline character in the input.
echo adds a newline. Use printf instead:
printf 'blob 14\0Hello, World!' | shasum
# prints: d4fcfe4d339d4e59d168fdf3c0ad445fa980a7d6

This works too, but not as portable, because the flags of echo are not supported predictably in all systems:
echo -ne 'blob 14\0Hello, World!' | shasum

","45","<javascript><node.js><git><md5><sha>","0","5","1","2017-12-09 13:29:34","47729072","0","","","","","2017-12-09 13:07:22",""
"50632444","Is there a universal function F that F(sha(a),sha(b)) = sha(ab)","I am faced with a need to send my data in parts, and at the same time I am expected to provide sha256 for my WHOLE data.
Something like this cat large file | chunker | receiver
where receiver is an application that is expected to receive the data, possibly in chunks having in the header sha256 of the payload, and then following payload. After collecting all chunks, it is supposed to store the whole transmitted data, and the sha256 of all data (particular sha256 will be used only to rehash and confirm integrity of the data.)
Of course, the simplest thing would be if the receiver generated sha256 from whole the streamed data, but I was wondering if there is a simpler way by collecting all hashes of all chunks, and combine them to generate one final hash, which would be the same as the hash calculated from all the data.
In other words - and I copy this from the title - I wonder if there is a function F that would receive a list of hashes of chunks of data, and then generated final hash that would be equal to the hash generated on all the data.
And again, in other words, having this formula:
F(sha256(data[0]), sha256(data[1]), ... sha256(data[N])) = sha256(data[0..N])
What would be the function F?
Would it be a universal function or there is no such thing for the way hashing is calculated?
I suspect there is no such function or this is too complicated question to answer.
","AFAIK there are still no known collisions for SHA-256 but I bet that once some is found, i.e. someone finds two messages m1 and m2 such that SHA-256(m1) = SHA-256(m2), then for almost any prefix a hashes SHA-256(a || m1) and SHA-256(a || m2) will be different i.e. the function you ask is actually not a function (has different outputs for the same inputs). Or to put it otherwise SHA-2 is susceptible to length extension attacks but AFAIK not to prefixing attacks. Still even if this actually a function, it is not enough for you for such a function to exist, you also want it to be fast. And I believe there is no such fast to compute function. 
On the other hand SHA-256 works by splitting the original message into 512-bit chunks and processing them using a well defined process (which is based on the state from all the previous chunks) so theoretically you can modify some implementation of SHA-256 to compute two hashes at the same time (by applying the same logic to different initial states):

Hash of your application-defined chunk (using standard initial state)
Hash of all chunks up to this point (using the state passed from the previous output of the same step as the initial state).

This probably will be slightly faster than doing those things independently but I don't know whether it will be so much faster to justify such a custom implementation.
","45","<math><hash><sha>","1","0","1","2018-06-01 02:10:03","","1","","","","","2018-05-31 20:39:58",""
"58403398","How to encode a string to SHA-1 on windows using the command line?","I can only use the command line for this task, how would you convert echo -n ""mystringtoencode"" | sha1sum so it works on windows?
Or more broadly, what is the command to encode a string with sha-1  on windows?
Thanks!
","According to a Microsoft Support page:
FCIV -md5 -sha1 path\filename.ext

It doesn't look like it's available normally (my up-to-date Win10 doesn't have it). You'll have to download it.
If your scenario lets you use PowerShell, there's the Get-FileHash command which has MD5 and a number of versions of SHA. This might be your best no-download option.
If you really want Windows to have all the small tools that Linux has, you can get a big list of them by downloading GOW (GNU On Windows) and adding it's binaries to your path. This includes sha1sum. These are Windows binaries running in the Windows kernel.
There's always the Windows Subsystem for Linux (WSL) which also has a lot of Linux tools running in a more Linux-like environment but I think that might be a bit over kill for hashing files. These will be Linux binaries running on a version of the Linux kernel. It's actually not bad.
","45","<windows><shell><encryption><sha>","0","1","1","2019-10-15 23:16:49","58403721","1","","3579289","","2019-10-15 22:44:39","2019-10-15 22:30:01",""
"27087269","SHA-1 keeps changing every couple of days","I'm building an Android app based on google maps V2 api, using the api console. To do that I need to generate a key using my SHA-1 that's generated through the debug keystore locally. Only then I get the desired key which I put in my Android Manifest, but every now and then it doesn't work because my SHA-1 have changed so I need to replace the old one with the new. 
Any chance to make it stay the same ?
","If you are using the same keystore file, the SHA-1 fingerprint should not be changing. You may need to look into to whether you are creating/deleting debug keystore files or perhaps the expiration on it has been set to be only a few days.
To better avoid the issue, you should generate your own keystore file specifically for your application. You can use the newly generate keystore file to build the application and only that application. No other application should use that keystore file and the application you're working on should only use that keystore file.
","44","<android><android-manifest><android-maps-v2><sha>","0","1","1","2014-11-25 20:58:43","27136549","0","","","","","2014-11-23 09:06:23",""
"54931152","how to iterate over files within a directory and compute a sha512 hash for each?","This code below creates a hash of a file that is created, however I wondered where I should begin to convert this into a program that will scan a folder for files and automatically hash them? Tips, hints, and pointers on where to look to understand how to do this would be much appreciated!
#include <stdio.h>
#include <openssl/sha.h>

int main()
{
    unsigned char c[SHA512_DIGEST_LENGTH];
    char *filename=""sha512.c"";
    int i;
    FILE *inFile = fopen (filename, ""rb"");
    SHA512_CTX mdContext;
    int bytes;
    unsigned char data[1024];

    SHA512_Init (&mdContext);
    while ((bytes = fread (data, 1, 1024, inFile)) != 0)
        SHA512_Update (&mdContext, data, bytes);
    SHA512_Final (c,&mdContext);
    for(i = 0; i < SHA512_DIGEST_LENGTH; i++) printf(""%02x"", c[i]);
    printf ("" %s\n"", filename);
    fclose (inFile);
    return 0;
}

Understandably a loop is required, however I am unsure how to go about calculate each file only once (as opposed to continuously calculating files that have already been hashed). This code is utilising openssl.
Thank you in advance.
","","43","<c><hash><openssl><sha><sha512>","0","","0","2019-02-28 17:43:49","","3","","8869937","","2019-02-28 17:43:49","2019-02-28 17:27:28",""
"58522574","How do I Convert java to C# (certification, (RSA, SHA))","The following code is the java code working by importing the JKS(java key store) file.
I converted JKS to PFX. Also I have Key Alias and KeyPassword.
I have the following code and want to convert it in C#.
There is a clogged part inside the code, and I can't go any further.
public String setCertCode(String jsonParameter, boolean filterYn){

        String certValue = jsonParameter;

        try{        
            KeyStore keyStore = KeyStore.getInstance(""JKS"");
            keyStore.load(new FileInputStream(/* jks file location (string) */), /* keyPassword (char array)*/);

            java.security.cert.Certificate cf = keyStore.getCertificate(/* Key Alias (string) */);
            Key k1 = keyStore.getKey(keyAlias, keyPassword.toCharArray()); 
            //I think that get a private key in this part. But C# doesn't know how to do it.
            KeyPair kp1 = new KeyPair(cf.getPublicKey(), (PrivateKey)k1);
            //I don't know how to get k1. Therefore, this code is too. 

            Cipher cipher = Cipher.getInstance(""RSA"");

            String data = /* some data */;

            Signature sigA = Signature.getInstance(""SHA256withRSA""); 
            sigA.initSign(kp1.getPrivate()); 
            sigA.update(data.getBytes());
            byte[] sign = sigA.sign();
            md.update(sign);

            Calendar cal = Calendar.getInstance();
            long sysdate = cal.getTimeInMillis();
            String time = Long.toString(sysdate);

            MessageDigest md = MessageDigest.getInstance(""SHA-256"");
            byte bs[] = md.digest();
            StringBuffer sb = new StringBuffer();
            for(int i=0;i<bs.length;i++){
                sb.append(Integer.toString((bs[i]&0xff)+ 0x100, 16).substring(1));
            }
            String rtn = sb.toString();

            //
            cipher.init(Cipher.ENCRYPT_MODE, kp1.getPublic());
            byte[] bCipher = cipher.doFinal(time.getBytes());
            String sCipherAscii = toAscii(BinaryCodec.toAsciiString(bCipher)); 


            //json parameter + code + certification value
            certValue = certValue.substring(0, certValue.length()-1) + "",\""certCryp\"":\""""+rtn+""\"",\""time\"":\""""+sCipherAscii+""\""}"";

        }catch(Exception e){
            e.printStackTrace();
        }
        return certValue;
    }

I can't get out of this problem for three days. Please help me.
","","43","<java><c#><rsa><sha><message-digest>","-3","","0","2019-10-23 12:33:51","","4","0","","","","2019-10-23 12:10:42",""
"55483200","How to convert hexString to actual String with respect to md5,sha-1 and sha-256","I have a class converting string to hexString according to the value named for md5,sha1 sha 256. 
How can I convert hexString to String according to these security algoritm.
MD5 Hash: 06c219e5bc8378f3a8a3f83b4b7e4649
SHA-1 Hash: e9fe51f94eadabf54dbf2fbbd57188b9abee436e
SHA-256 Hash: 652c7dc687d98c9889304ed2e408c74b611e86a40caa51c4b43f1dd5913c5cd0
Actual String : mysecret
Here is my code snippet shown below.
public class HashGenerator {
    private HashGenerator() {

    }

    public static String generateMD5(String message) throws HashGenerationException {
        return hashString(message, ""MD5"");
    }

    public static String generateSHA1(String message) throws HashGenerationException {
        return hashString(message, ""SHA-1"");
    }

    public static String generateSHA256(String message) throws HashGenerationException {
        return hashString(message, ""SHA-256"");
    }

    public static String convertFromMD5(String message) throws HashGenerationException{
        return hexStringtoByteArray(message, ""MD5"");
    }

    public static String convertFromSHA1(String message) throws HashGenerationException{
        return hexStringtoByteArray(message, ""SHA-1"");
    }

    public static String convertFromSHA256(String message) throws HashGenerationException{
        return hexStringtoByteArray(message, ""SHA-256"");
    }

    private static String hashString(String message, String algorithm)
            throws HashGenerationException {

        try {
            MessageDigest digest = MessageDigest.getInstance(algorithm);
            byte[] hashedBytes = digest.digest(message.getBytes(""UTF-8""));

            return convertByteArrayToHexString(hashedBytes);
        } catch (NoSuchAlgorithmException | UnsupportedEncodingException ex) {
            throw new HashGenerationException(
                    ""Could not generate hash from String"", ex);
        }
    }


    private static String convertByteArrayToHexString(byte[] arrayBytes) {
        StringBuffer stringBuffer = new StringBuffer();
        for (int i = 0; i < arrayBytes.length; i++) {
            stringBuffer.append(Integer.toString((arrayBytes[i] & 0xff) + 0x100, 16)
                    .substring(1));
        }
        return stringBuffer.toString();
    }

    public static String hexStringtoByteArray(String str, String algorithm)
    {
       byte[] bytes = new byte[str.length() / 2];
       for (int i = 0; i < bytes.length; i++)
       {
          bytes[i] = (byte) Integer
                .parseInt(str.substring(2 * i, 2 * i + 2), 16);
       }

       try {
           MessageDigest digest = MessageDigest.getInstance(algorithm);
           byte[] hashedBytes = digest.digest(bytes);
           return new String(hashedBytes);
       } catch (Exception ex) {
           throw new HashGenerationException(
                   ""Could not generate hash from String"", ex);
       }

    }
}

","Once you have a byte array from your hex string using hexStringtoByteArray, you can make a string using new String(bytes, ""UTF-8"") where bytes is the byte array from your method. By specifying UTF-8 when creating the string you get characters other than hex.
Therefore the new method would be as follows: 
public String hexStringtoByteArray(String str) { 
    byte[] bytes = new byte[str.length() / 2]; 
    for (int i = 0; i < bytes.length; i++) { 
        bytes[i] = (byte) Integer.parseInt(str.substring(2 * i, 2 * i + 2), 16); 
    } 
    return new String(bytes, ""UTF-8""); 
}

","43","<java><security><hash><md5><sha>","-1","1","1","2019-04-02 20:48:46","55483262","5","0","11241900","","2019-04-02 20:45:25","2019-04-02 20:37:42",""
"53452410","Do I need MD5 as a companion to SHA-1?","Do I need both MD5 and SHA-1 values to be sure the downloaded file is
a) Untouched by hackers. For example, when I need to download some app's .iso via torrents
and
b) Not corrupted during technical issues? For example, some unstable network connection during download.
Or, probably, SHA-1 value will be enough for both checks?
Also, is SHA-1 (without MD5) enough to be sure that some file downloaded years ago and stored somewhere on my HDD haven't degradated?
","From a security perspective MD-5 is utterly broken. 
SHA-1 is considered suspicious, and avoided for most uses if at all possible. For new projects: don't use it at all.
SHA-2 (aka SHA-256, SHA-512, etc.) is still widely used for fast hashes.
SHA-3 is the future since 2012, nothing is stopping you from using it already. I see little reason not to use it for new projects.
What's the problem with older ones:

Their resistance to finding collisions is below par: This is an attacker creating 2 contents that have the same hash. These are constructed at the same time. This problem is there for MD5 and SHA-1, and it's BAD, but requires the attacker creating both versions (and then they can do a switch at any time they want undetected).
Their resistance to length extension attacks is relatively weak. This is especially true for MD5, but SHA-1 and even SHA-2 to some degree suffer from it.

When is it not a problem: to ensure your disk has not produced an error: and hash will do, even a simple CRC32 will work wonders (and I'd recommend the simpler CRC check), or a RAID array, as these can fix errors, not just detect them.
Use both ?
Well if you have to find a collision on one hash and have that same set of plaintexts also produce a collision on another hash, is probably more difficult. This approach has been used in the past, The original PGP did something like it. If I'm not mistaken it had a number of things it calculated, one of them simply the length (which would prevent the extension attack above).
So yes, it likely adds something, but the way md5 and SHA-1 and SHA-2 work internally is quite similar, and that's the worrisome part: they are too much alike to be sure just how much it adds against a highly sophisticated attacker (think the level of the NSA and their counterparts).  
So why not use one of the more modern versions of SHA-2, or even better SHA-3 ? They've no known weaknesses and have been peer-reviewed heavily. As such for any commercial level use, they should be more than enough.
Refs:

https://en.wikipedia.org/wiki/Length_extension_attack
https://en.wikipedia.org/wiki/Collision_attack
https://stackoverflow.com/questions/tagged/sha-3

","42","<security><hash><md5><sha1><sha>","0","1","1","2018-11-23 20:42:07","","1","","5587480","","2018-11-23 20:13:02","2018-11-23 20:06:55",""
"54158780","Rewriteing hashing function from php to java - other result","I have to rewrite hashing function from php to java.
I've rewrite functions used in php code to java and main algorithm. Thre is a problem, because result in java is other than in php.
PHP code:
$salt = ""ddedca658b683479cc779fc31def17c79e73dcd4b842ec335d49696cb64d8fda"";
function calculateControlData($salt, $controlString)
{
    $hexLenght = strlen($salt);
    $saltBin = """";
    for ($x = 1; $x <= $hexLenght/2; $x++)
    {
        $saltBin .= (packH(""H*"", substr($salt,2 * $x - 2,2)));
    }
    return hashSHA256(""sha256"", $controlString.$saltBin);
}

version for debuging:
function calculateControlData($salt, $controlString)
{
                    $hexLenght = strlen($salt);

                    $saltBin = """";
                    for ($x = 1; $x <= $hexLenght/2; $x++)
                    {
                            $magicChar=(pack(""H*"", substr($salt,2 * $x - 2,2)));

                            echo $x.' -> '.substr($salt,2 * $x - 2,2).' -> ';
                            echo $magicChar.' -> ';
                            echo ord($magicChar).' | ';

                            $saltBin .= $magicChar;                                
                    }


                    echo '<br>saltBin = '.$saltBin.'<br>';
                    echo '$controlString.$saltBin = '.$controlString.$saltBin.'<br>';
                    echo 'controlData = '.hash(""sha256"", $controlString.$saltBin).'<br>';

                    echo 'SHA256 for T3$T123456 = '.hash(""sha256"", 'T3$T123456').'<br><br>';

                    return hash(""sha256"", $controlString.$saltBin);
}

result:
1 -> dd -> � -> 221 | 2 -> ed -> � -> 237 | 3 -> ca -> � -> 202 | 4 -> 65 -> e -> 101 | 5 -> 8b -> � -> 139 | 6 -> 68 -> h -> 104 | 7 -> 34 -> 4 -> 52 | 8 -> 79 -> y -> 121 | 9 -> cc -> � -> 204 | 10 -> 77 -> w -> 119 | 11 -> 9f -> � -> 159 | 12 -> c3 -> � -> 195 | 13 -> 1d ->  -> 29 | 14 -> ef -> � -> 239 | 15 -> 17 ->  -> 23 | 16 -> c7 -> � -> 199 | 17 -> 9e -> � -> 158 | 18 -> 73 -> s -> 115 | 19 -> dc -> � -> 220 | 20 -> d4 -> � -> 212 | 21 -> b8 -> � -> 184 | 22 -> 42 -> B -> 66 | 23 -> ec -> � -> 236 | 24 -> 33 -> 3 -> 51 | 25 -> 5d -> ] -> 93 | 26 -> 49 -> I -> 73 | 27 -> 69 -> i -> 105 | 28 -> 6c -> l -> 108 | 29 -> b6 -> � -> 182 | 30 -> 4d -> M -> 77 | 31 -> 8f -> � -> 143 | 32 -> da -> � -> 218 | 

saltBin = ���e�h4y�w���Ǟs�ԸB�3]Iil�M��

$controlString.$saltBin = pos_id=74294910&order_id=REZ_1234&session_id=999&amount=100¤cy=PLN&test=Y&language=PL&client_ip=127.0.0.1&email=a.lacek@testmail.pl&ba_firstname=Aleksander&ba_lastname=Lacek���e�h4y�w���Ǟs�ԸB�3]Iil�M��

controlData = f27b95a152da64c27958d16e6a48cd98ddfefaf49a8e28552cc67388cf36c353

SHA256 for T3$T123456 = b11866fcf57e9419c747de9f23380bb1c6b23a9b189cc2ef14840bf40ce19a8f

Code in java:
final String SALT = ""ddedca658b683479cc779fc31def17c79e73dcd4b842ec335d49696cb64d8fda"";

private String calculateControlData(String request)
        throws UnsupportedEncodingException, NoSuchAlgorithmException {

    System.out.println(""request: "" + request);

    int hexLenght = SALT.length();
    String saltBin = """";
    for (int x = 1; x <= hexLenght / 2; x++) {
        int beginIndex = 2 * x - 2;
        String literki = SALT.substring(beginIndex, beginIndex + 2);
        char packLiterki = packH(literki); // (packH(""H*"", substr($salt,2 * $x - 2,2)));
        saltBin += packLiterki;

        System.out.println(x + "": "" + literki + "" -> "" + packLiterki + "" -> "" + (int) packLiterki);
    }
    System.out.println(""saltBin = "" + saltBin);
    String stringForHash = request + saltBin;
    System.out.println(""stringForHash = "" + stringForHash);
    String hashedString = hashSHA256(stringForHash);
    System.out.println(""hashedString = ""+hashedString);
    return hashedString;
}

private char packH(String hex) {
    String input = hex.length() % 2 == 0 ? hex : hex + ""0"";
    StringBuilder output = new StringBuilder();
    for (int i = 0; i < input.length(); i += 2) {
        String str = input.substring(i, i + 2);
        output.append((char) Integer.parseInt(str, 16));
    }
    return output.toString().charAt(0);
}

private String hashSHA256(String originalString) throws NoSuchAlgorithmException {

    MessageDigest digest = MessageDigest.getInstance(""SHA-256"");
    byte[] encodedhash = digest.digest(
            originalString.getBytes(StandardCharsets.UTF_8));

    StringBuffer hexString = new StringBuffer();
    for (int i = 0; i < encodedhash.length; i++) {
        String hex = Integer.toHexString(0xff & encodedhash[i]);
        if (hex.length() == 1) hexString.append('0');
        hexString.append(hex);
    }
    return hexString.toString();
}

result:
request: pos_id=74294910&order_id=REZ_1234&session_id=999&amount=100&currency=PLN&test=Y&language=PL&client_ip=127.0.0.1&email=a.lacek@testmail.pl&ba_firstname=Aleksander&ba_lastname=Lacek

1: dd -> Ý -> 221
2: ed -> í -> 237
3: ca -> Ê -> 202
4: 65 -> e -> 101
5: 8b ->  -> 139
6: 68 -> h -> 104
7: 34 -> 4 -> 52
8: 79 -> y -> 121
9: cc -> Ì -> 204
10: 77 -> w -> 119
11: 9f ->  -> 159
12: c3 -> Ã -> 195
13: 1d ->  -> 29
14: ef -> ï -> 239
15: 17 ->  -> 23
16: c7 -> Ç -> 199
17: 9e ->  -> 158
18: 73 -> s -> 115
19: dc -> Ü -> 220
20: d4 -> Ô -> 212
21: b8 -> ¸ -> 184
22: 42 -> B -> 66
23: ec -> ì -> 236
24: 33 -> 3 -> 51
25: 5d -> ] -> 93
26: 49 -> I -> 73
27: 69 -> i -> 105
28: 6c -> l -> 108
29: b6 -> ¶ -> 182
30: 4d -> M -> 77
31: 8f ->  -> 143
32: da -> Ú -> 218

saltBin = ÝíÊeh4yÌwÃïÇsÜÔ¸Bì3]Iil¶MÚ

stringForHash = pos_id=74294910&order_id=REZ_1234&session_id=999&amount=100&currency=PLN&test=Y&language=PL&client_ip=127.0.0.1&email=a.lacek@testmail.pl&ba_firstname=Aleksander&ba_lastname=LacekÝíÊeh4yÌwÃïÇsÜÔ¸Bì3]Iil¶MÚ

hashedString = 6d47c2e1688f87bf7c65a1a2be6a9329611a381dafd0d8cfefcaca57e29e5eb6
controlData: 6d47c2e1688f87bf7c65a1a2be6a9329611a381dafd0d8cfefcaca57e29e5eb6

SHA-256 for T3$T123456: b11866fcf57e9419c747de9f23380bb1c6b23a9b189cc2ef14840bf40ce19a8f

I found that ord values generated by both packH in java and pack(""H*"", $str) in php results are the same, but saltBin string looks diffrent. I think that there is a problem, beacause hashSHA256 in java and hashSHA256(""sha256"", $str) in php gives the same result. How to solve this??
","
The operation of string in Java is different from php
Some operation in your Java's code is not correct.
The follow's code is a solution(passes test):

import java.io.UnsupportedEncodingException;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

public class Main {

    public static void main(String[] args) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        String s = new Main().calculateControlData(""pos_id=74294910&order_id=REZ_1234&session_id=999&amount=100&currency=PLN&test=Y&language=PL&client_ip=127.0.0.1&email=a.lacek@testmail.pl&ba_firstname=Aleksander&ba_lastname=Lacek"");
        System.out.println(s);
    }

    final String SALT = ""ddedca658b683479cc779fc31def17c79e73dcd4b842ec335d49696cb64d8fda"";

    private String calculateControlData(String request)
            throws NoSuchAlgorithmException, UnsupportedEncodingException {

        int hexLenght = SALT.length();
        byte[] saltBinBytes = new byte[32];
        for (int x = 1; x <= hexLenght / 2; x++) {
            int beginIndex = 2 * x - 2;
            String literki = SALT.substring(beginIndex, beginIndex + 2);
            char packLiterki = packH(literki); // (packH(""H*"", substr($salt,2 * $x - 2,2)));

//            saltBin += packLiterki;
            // 1. this should use byte array to save the result
            saltBinBytes[x - 1] = ((byte) packLiterki);
        }

        // 2. concat bytes of two string
        byte[] requestBytes = request.getBytes(StandardCharsets.UTF_8);
        byte[] bytes = new byte[requestBytes.length + saltBinBytes.length];
        System.arraycopy(requestBytes, 0, bytes, 0, requestBytes.length);
        System.arraycopy(saltBinBytes, 0, bytes, requestBytes.length, saltBinBytes.length);

        return hashSHA256(bytes);
    }

    private char packH(String hex) {
        String input = hex.length() % 2 == 0 ? hex : hex + ""0"";
        StringBuilder output = new StringBuilder();
        for (int i = 0; i < input.length(); i += 2) {
            String str = input.substring(i, i + 2);
            output.append((char) Integer.parseInt(str, 16));
        }
        return output.toString().charAt(0);
    }

    // 3. arguments changes to byte array
    private String hashSHA256(byte[] bytes) throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance(""SHA-256"");
        byte[] encodedhash = digest.digest(bytes);

        StringBuffer hexString = new StringBuffer();
        for (byte b : encodedhash) {
            // 4. convert sha256 result to compatible php
            hexString.append(String.format(""%02x"", b));
        }

        return hexString.toString();
    }
}

The output is f27b95a152da64c27958d16e6a48cd98ddfefaf49a8e28552cc67388cf36c353, same as php

php code(remove echoes)

<?php

$salt = ""ddedca658b683479cc779fc31def17c79e73dcd4b842ec335d49696cb64d8fda"";

function calculateControlData($salt, $controlString)
{
    $hexLenght = strlen($salt);

    $saltBin = """";
    for ($x = 1; $x <= $hexLenght/2; $x++)
    {
        $magicChar=(pack(""H*"", substr($salt,2 * $x - 2,2)));
        $saltBin .= $magicChar;
    }

    return hash(""sha256"", $controlString.$saltBin);
}

echo  calculateControlData($salt, 'pos_id=74294910&order_id=REZ_1234&session_id=999&amount=100&currency=PLN&test=Y&language=PL&client_ip=127.0.0.1&email=a.lacek@testmail.pl&ba_firstname=Aleksander&ba_lastname=Lacek');

output also f27b95a152da64c27958d16e6a48cd98ddfefaf49a8e28552cc67388cf36c353
","42","<java><php><sha><pack>","0","1","1","2019-01-12 13:15:35","","0","","","","","2019-01-12 10:39:07",""
"51991416","Firebase Log in on debug application SHA Fingerprint","What is the best way to enable firebase login in the debug version of my android app? Should I use the same signing Config used for generating the apk for the play store and get the sha fingerprint that way, or is there an easier solution for debug android apps?
","Just use the SHA-1 from your debug key.  You can add multiple SHA-1 for each of your build environments in the Firebase console, and they will all work at the same time.  No need to force all debug builds to use a release signing key.
","42","<android><firebase><debugging><fingerprint><sha>","0","0","1","2018-08-23 17:58:34","51991723","0","","","","","2018-08-23 17:37:29",""
"52987479","Digest::SHA Cannot use sha512256_hex","I am testing out the Perl module Digest::SHA:
use strict;
use warnings;
use Digest::SHA qw(sha256_hex sha512_hex sha512256_hex);

I would like to use the function sha512256_hex. However the code above is not working! I get the error message:
sha512256_hex"" is not exported by the Digest::SHA module
Can't continue after import errors...

When I look at the webpage https://perldoc.perl.org/Digest/SHA.html in the EXPORTABLE FUNCTIONS section one of the usages listed is:
sha512256_hex($data, ...)

I can use the sha256_hex and sha512_hex options with no problem so why not the other one that I want to test?
","","42","<perl><sha>","0","","0","2018-10-25 11:08:59","","4","","1331451","","2018-10-25 11:08:59","2018-10-25 10:49:56",""
"33351775","Get full URL of web page with php","I have been asked to build a program that measures the time it takes to enter certain web page , the problem is that the URLs are the same as they are masked with SHA how could get the URL's real?
Example:
https://10.12.0.1/Apps/WebObjects/AccountManagement.woa/2/wo/HZrjmzCtLPIMMQoew742x0/0.4
It's the only number to changed.
Thanks!
","","40","<php><url><sha>","0","","0","2015-10-26 17:20:49","","2","","","","","2015-10-26 17:20:49",""
"50499785","HMAC-SHA2-224 Lua implementation not giving correct output","I have an issue with an HMAC implementation I am trying to write in Lua. The underlying has function I am testing with is SHA2-224. Look at the code below, assuming a correct SHA2-224 implementation:
        local print = print
        local byte = string.byte
        local char = string.char
        local concat = table.concat

        local function toBytes(str)
            local tmp = {}
            for i = 1, string.len(str) do
                tmp[i] = byte(str, i)
            end
            return tmp
        end

        local function toString(bArray)
            local tmp = {}
            for i = 1, #bArray do
                tmp[i] = char(bArray[i])
            end
            tmp = concat(tmp)
            return tmp
        end

        -- ignore hFun for now
        local hash = function(hFun, key, message)

            local hasher = require 'sha224'
            local blockSize = hasher.blockSize()
            local outputSize = hasher.outputSize()

            -- if the length of the key is longer than the block size, we hash it first
            -- to shorten it
            -- if its too large, we pad it with 0s until its as big as the block size
            if #key > blockSize then
                key = hasher.hash(key)
            elseif #key < blockSize then
                key = key .. string.rep(""\0"", (blockSize - #key))
            end

            local keyBytes = toBytes(key)
            assert(#keyBytes == blockSize)

            local opad = {}
            local ipad = {}

            for i = 1, 64 do
                opad[i] = keyBytes[i] ~ 0x5c
                ipad[i] = keyBytes[i] ~ 0x36
            end

            opad = toString(opad)
            ipad = toString(ipad)

            local inner = hasher.hash(ipad .. message)

            return hasher.hash(opad .. inner)

        end
        return {hash = hash}
    end

Testing with a test vector from NIST, this code produces the following output (w/ some debug code that is not included above):
For key: ""Jefe"", message: ""what do ya want for nothing?"":
OPAD 1: 74 XOR 92 --> 22
IPAD 1: 74 XOR 54 --> 124
OPAD 2: 101 XOR 92 --> 57
IPAD 2: 101 XOR 54 --> 83
OPAD 3: 102 XOR 92 --> 58
IPAD 3: 102 XOR 54 --> 80
OPAD 4: 101 XOR 92 --> 57
IPAD 4: 101 XOR 54 --> 83
OPAD 5: 0 XOR 92 --> 92
IPAD 5: 0 XOR 54 --> 54
OPAD 6: 0 XOR 92 --> 92
IPAD 6: 0 XOR 54 --> 54
OPAD 7: 0 XOR 92 --> 92
IPAD 7: 0 XOR 54 --> 54
OPAD 8: 0 XOR 92 --> 92
IPAD 8: 0 XOR 54 --> 54
OPAD 9: 0 XOR 92 --> 92
IPAD 9: 0 XOR 54 --> 54
OPAD 10: 0 XOR 92 --> 92
IPAD 10: 0 XOR 54 --> 54
OPAD 11: 0 XOR 92 --> 92
IPAD 11: 0 XOR 54 --> 54
OPAD 12: 0 XOR 92 --> 92
IPAD 12: 0 XOR 54 --> 54
OPAD 13: 0 XOR 92 --> 92
IPAD 13: 0 XOR 54 --> 54
OPAD 14: 0 XOR 92 --> 92
IPAD 14: 0 XOR 54 --> 54
OPAD 15: 0 XOR 92 --> 92
IPAD 15: 0 XOR 54 --> 54
OPAD 16: 0 XOR 92 --> 92
IPAD 16: 0 XOR 54 --> 54
OPAD 17: 0 XOR 92 --> 92
IPAD 17: 0 XOR 54 --> 54
OPAD 18: 0 XOR 92 --> 92
IPAD 18: 0 XOR 54 --> 54
OPAD 19: 0 XOR 92 --> 92
IPAD 19: 0 XOR 54 --> 54
OPAD 20: 0 XOR 92 --> 92
IPAD 20: 0 XOR 54 --> 54
OPAD 21: 0 XOR 92 --> 92
IPAD 21: 0 XOR 54 --> 54
OPAD 22: 0 XOR 92 --> 92
IPAD 22: 0 XOR 54 --> 54
OPAD 23: 0 XOR 92 --> 92
IPAD 23: 0 XOR 54 --> 54
OPAD 24: 0 XOR 92 --> 92
IPAD 24: 0 XOR 54 --> 54
OPAD 25: 0 XOR 92 --> 92
IPAD 25: 0 XOR 54 --> 54
OPAD 26: 0 XOR 92 --> 92
IPAD 26: 0 XOR 54 --> 54
OPAD 27: 0 XOR 92 --> 92
IPAD 27: 0 XOR 54 --> 54
OPAD 28: 0 XOR 92 --> 92
IPAD 28: 0 XOR 54 --> 54
OPAD 29: 0 XOR 92 --> 92
IPAD 29: 0 XOR 54 --> 54
OPAD 30: 0 XOR 92 --> 92
IPAD 30: 0 XOR 54 --> 54
OPAD 31: 0 XOR 92 --> 92
IPAD 31: 0 XOR 54 --> 54
OPAD 32: 0 XOR 92 --> 92
IPAD 32: 0 XOR 54 --> 54
OPAD 33: 0 XOR 92 --> 92
IPAD 33: 0 XOR 54 --> 54
OPAD 34: 0 XOR 92 --> 92
IPAD 34: 0 XOR 54 --> 54
OPAD 35: 0 XOR 92 --> 92
IPAD 35: 0 XOR 54 --> 54
OPAD 36: 0 XOR 92 --> 92
IPAD 36: 0 XOR 54 --> 54
OPAD 37: 0 XOR 92 --> 92
IPAD 37: 0 XOR 54 --> 54
OPAD 38: 0 XOR 92 --> 92
IPAD 38: 0 XOR 54 --> 54
OPAD 39: 0 XOR 92 --> 92
IPAD 39: 0 XOR 54 --> 54
OPAD 40: 0 XOR 92 --> 92
IPAD 40: 0 XOR 54 --> 54
OPAD 41: 0 XOR 92 --> 92
IPAD 41: 0 XOR 54 --> 54
OPAD 42: 0 XOR 92 --> 92
IPAD 42: 0 XOR 54 --> 54
OPAD 43: 0 XOR 92 --> 92
IPAD 43: 0 XOR 54 --> 54
OPAD 44: 0 XOR 92 --> 92
IPAD 44: 0 XOR 54 --> 54
OPAD 45: 0 XOR 92 --> 92
IPAD 45: 0 XOR 54 --> 54
OPAD 46: 0 XOR 92 --> 92
IPAD 46: 0 XOR 54 --> 54
OPAD 47: 0 XOR 92 --> 92
IPAD 47: 0 XOR 54 --> 54
OPAD 48: 0 XOR 92 --> 92
IPAD 48: 0 XOR 54 --> 54
OPAD 49: 0 XOR 92 --> 92
IPAD 49: 0 XOR 54 --> 54
OPAD 50: 0 XOR 92 --> 92
IPAD 50: 0 XOR 54 --> 54
OPAD 51: 0 XOR 92 --> 92
IPAD 51: 0 XOR 54 --> 54
OPAD 52: 0 XOR 92 --> 92
IPAD 52: 0 XOR 54 --> 54
OPAD 53: 0 XOR 92 --> 92
IPAD 53: 0 XOR 54 --> 54
OPAD 54: 0 XOR 92 --> 92
IPAD 54: 0 XOR 54 --> 54
OPAD 55: 0 XOR 92 --> 92
IPAD 55: 0 XOR 54 --> 54
OPAD 56: 0 XOR 92 --> 92
IPAD 56: 0 XOR 54 --> 54
OPAD 57: 0 XOR 92 --> 92
IPAD 57: 0 XOR 54 --> 54
OPAD 58: 0 XOR 92 --> 92
IPAD 58: 0 XOR 54 --> 54
OPAD 59: 0 XOR 92 --> 92
IPAD 59: 0 XOR 54 --> 54
OPAD 60: 0 XOR 92 --> 92
IPAD 60: 0 XOR 54 --> 54
OPAD 61: 0 XOR 92 --> 92
IPAD 61: 0 XOR 54 --> 54
OPAD 62: 0 XOR 92 --> 92
IPAD 62: 0 XOR 54 --> 54
OPAD 63: 0 XOR 92 --> 92
IPAD 63: 0 XOR 54 --> 54
OPAD 64: 0 XOR 92 --> 92
IPAD 64: 0 XOR 54 --> 54
OPAD: 9:9\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
IPAD: |SPS666666666666666666666666666666666666666666666666666666666666
INNER HASH:  9:9\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\what do ya want for nothing? ----> 9d7a0c2abbbd5d81645ba9aff01a112bb1d1ec878072e2953110cc71
FINAL HASH INPUT: 9:9\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\9d7a0c2abbbd5d81645ba9aff01a112bb1d1ec878072e2953110cc71
FINAL RESULT: 770df99ad235e32bc5e2aacfbbfdedddeac7628a5882920863e920ee
EXPECTED RESULT: a30e01098bc6dbbf45690f3a7e9e6d0f8bbea2a39e6148008fd05e44

I am pretty sure that I am not doing anything wrong when it comes to the padding as well as the creation of the opad and ipad tables. Perhaps my string to int conversions are off. Perhaps its a weird quirk with Lua 5.3 that I don't know about. I don't know what I am missing here. It could be very obvious, but I am not seeing it at the moment. Thanks in advance for your assistance.
I should add that this implementation is needed for a lua sandbox in which I cannot use other libraries.
","","40","<lua><hmac><sha>","1","","0","2018-05-24 01:57:59","","1","","9821157","","2018-05-24 01:57:59","2018-05-24 01:51:40",""
"56150673","HTTP Public Key Pinning (HPKP) without Openssl","I am planning to generate following pin-sha256 :
Public-Key-Pins: 
  pin-sha256=""cUPcTAZWKaASuYWhhneDttWpY3oBAkE3h2+soZS7sWs=""; 
  pin-sha256=""M8HztCzM3elUxkcjR2S5P4hhyBNf6lHkmjAHKhpGPWE=""; 
  max-age=5184000; includeSubDomains; 
  report-uri=""https://www.example.org/hpkp-report""

So that i can keep in IIS for security reasons as below:
<system.webServer>
  ...

  <httpProtocol>
    <customHeaders>
      <add name=""Public-Key-Pins"" value=""pin-sha256=&quot;base64+primary==&quot;; pin-sha256=&quot;base64+backup==&quot;; max-age=5184000; includeSubDomains"" />
    </customHeaders>
  </httpProtocol>

  ...
</system.webServ

But my server lacks open ssl and take long time to install because of process issues.
Could you please let me know is there any alternative without these openssl that i can generate pins?
See this link for more details 
These are the pin generation commands, i need to do this without openssl , is it possible?
openssl rsa -in my-rsa-key-file.key -outform der -pubout | openssl dgst -sha256 -binary | openssl enc -base64

","Here is an example of the openssl command chain above converted into openssl API calls that output the base64 result to the screen.
The main calls are 

PEM_read_bio_PrivateKey to read in the private key in PEM format.
i2d_RSA_PUBKEY_bio to convert the RSA public key into DER format
EVP_Digest to create the SHA256 digest (hidden behind the BIO_f_md BIO usage)
BIO_f_base64 BIO usage to convert the digest into base64 format

There are lots of ways to do the same job using variations of the above OPENSSL API's depending on your situation.
Below is a C++ usage of the OpenSSL C API.  You can easily strip the C++ bits if required.
template<typename T, typename D>
std::unique_ptr<T, D> make_handle(T* handle, D deleter)
{
    return std::unique_ptr<T, D>{handle, deleter};
}

bool load_rsa_private_key_and_base64_sha256_hash_public_key()
{
    // load rsa private key in PEM format
    auto bio = make_handle(BIO_new_file(""privatekey.pem"", ""rb""), BIO_free);
    if(!bio) return false;
    auto const key = make_handle(PEM_read_bio_PrivateKey(bio.get(), nullptr, nullptr, (void*)(""password"")), EVP_PKEY_free);
    bio.reset();

    if(!key) return false;

    // extract private key from loaded certificate
    auto const rsa = EVP_PKEY_get0_RSA(key.get());
    if (!rsa) return false;

    // setup sha256 bio chain
    auto const bmd = make_handle(BIO_new(BIO_f_md()), BIO_free);
    if(!bmd) return false;
    if (!BIO_set_md(bmd.get(), EVP_sha256())) return false;

    auto const null_bio = make_handle(BIO_new(BIO_s_null()), BIO_free);
    auto in = BIO_push(bmd.get(), null_bio.get());

    // write RSA Public Key into DER format to the SHA256 digest BIO chain
    i2d_RSA_PUBKEY_bio(in, rsa);

    // extract the SHA256 digest
    auto mdtmp = BIO_find_type(in, BIO_TYPE_MD);
    if (!mdtmp) return false;
    std::array<char, EVP_MAX_MD_SIZE> buffer;
    auto const length = BIO_gets(mdtmp, buffer.data(), buffer.size());

    if(length <= 0)  return false;

    // convert the digest to base64 and output to the stdio
    auto const b64 = make_handle(BIO_new(BIO_f_base64()), BIO_free);
    auto const bio_out = BIO_new_fp(stdout, BIO_NOCLOSE);
    auto out = BIO_push(b64.get(), bio_out);

    BIO_write(out, buffer.data(), length);
    BIO_flush(out);

    return true;
}

","40","<ssl><openssl><base64><ssl-certificate><sha>","0","0","1","2019-05-17 20:19:03","","0","","106528","","2019-05-15 13:54:25","2019-05-15 13:33:17",""
"55087325","Getting checksum for .zip file in GitHub","I'm downloading a zip file from GitHub with the contents of branch. In order to verify the download, I'm generating a local checksum in order to compare the an hypothetical ""remote"" checksum that GitHub should give me (in order to validate both are identical), but I don't know how to get that checskum.
Is there any way to get that checksum for the file generated by GitHub?
","","38","<c#><.net><github><checksum><sha>","0","","0","2019-03-10 11:47:41","","0","","","","","2019-03-10 11:47:41","2019-03-10 19:36:23"
"41353060","How to verify that only my app is communicating to server (UNIX)","I am creating an android app that will communicate to my UNIX server. Server side language is PHP and for Android I am using CORDOVA.
Now the question is when I send AJAX call from my APP to server, then how will server know whether its my APP or someone else APP.
I have self signed my APP by creating keystore. Is there any way my server can find details of SHA  fingerprint of my APP while communicating with server?
","","38","<android><cordova><ssl><keystore><sha>","0","","0","2016-12-28 00:48:37","","4","","","","","2016-12-27 22:37:31",""
"27967227","Hashing algorithms for Internal application","I am not sure whether this is the right place to ask this question as there is no right and wrong answer.
I have a MVC5 application with WCF service and it will be used internally. However it requires some security as it involves finance stuffs and cannot ignore even though it is internal.
So how can I ensure that the application is secure??
Do I need to use hashing algorithms > SHA1
","Using a hash algorithm like SHA1 does not secure your application. 
It just respond to one good practice ""hash your password on your database with a good algorithm"". 
If you want a secure application, I recommend you to read OWASP Application Verification Standard (https://www.owasp.org/index.php/Category:OWASP_Application_Security_Verification_Standard_Project) and implement all the level4 requirements 
","37","<security><model-view-controller><sha><owasp>","0","0","1","2015-01-16 21:05:56","","7","2","4458217","","2015-01-15 16:46:49","2015-01-15 15:42:05",""
"37215591","Sending multiple sha1 checksums in a single file?","I'm working on an application that needs to verify a large number of files that have been transferred over the web. Our current thinking is to put the checksums for multiple files into a single file and name is foobar.sha1
I have some hesitation about using this extension as it seems to mostly be used for communicating a single checksum (as opposed to a large batch). Is this common usage?
Google has not yielded a clear answer.
Thanks
","","36","<sha>","1","","0","2016-05-13 17:00:49","","0","","","","","2016-05-13 17:00:49",""
"48372022","Retrieve native length of hash from HMACSHA1 and HMACSHA512","I would like to get (programmatically) the native length of the HMAC function from an instance (or static method) of that class. (160 bits for SHA1, 512 for SHA512. AFAIK) Is there a way?
If not, perhaps there's a way to get it from SHA1Managed or SHA1 (and their SHA512 counterparts)?
","A quick search shows the HashAlgorithm.HashSize property that those classes implement.
","36","<c#><.net><sha><hmac><hmacsha1>","0","2","1","2018-01-22 13:36:37","48373293","1","","939213","","2018-01-22 13:36:37","2018-01-21 21:44:26",""
"36466112","SHA-2 cert for objective-c app","I was using a webservice endpoint like this http://someurl.com in my app to get some data. Now they have made this webservices SHA-2 enabled and asking us to ensure we have the SHA-2 Entrust root certs across all the servers in all environments.
How can we ensure this? 
Also the urls are now changed to https://someurl.com. Do we just need to authenticate it with didReceiveChallenge method as we do for SSL or there is some other way to handle this?
Thanks :)
","","34","<ios><objective-c><ssl><sha>","1","","0","2016-04-07 03:18:14","","0","","","","","2016-04-07 03:18:14",""
"55917889","how to match sha256 output","I have a device using a compiled binary to generate a sha256 key, which needs to be authenticated on the server which uses php (7.3) and with same data the resulting keys are different while they should match.
The binary is same as the .sh file posted here.
What am I missing?
Here is the .sh code
#!/bin/sh

SEC=""xyxyxyxyxyxyxyxyxyxyxyxyxyxyxy""
if [ -z $1 ]
then
    PROD=$(cat prod.txt)
else
    PROD=$1
    EXPIRE=$2
fi
SDATA=""${PROD}\$${SEC}\$${EXPIRE}""
KEY=$(echo -n ${SDATA} | openssl sha256 -binary | base64)

echo ""ABC TXYZ Gen""
echo ""Code: ${PROD}""
[ ! -z ""${EXPIRE}"" ] && echo ""Expire date : ${EXPIRE}""
echo ""Activate code:""
echo ${KEY%%=} | tee activate.txt

And this is the php
public function generateActivate($params = [])
{
    if (!isset($params['Mod'])) {
        return false;
    }
    if (!isset($params['Prod'])) {
        return false;
    }
    if (!isset($params['Vers'])) {
        return false;
    }

    $sec=""xyxyxyxyxyxyxyxyxyxyxyxyxyxyxy
    $data = $params['Prod'].$sec;
    $params['Activate'] = base64_encode(hash('sha256', $data, true));

Unfortunatelly I can't run a compiled binary on the server as it asks for glib2.28 version not available on the server (Centos 7).
","Your shell code has
SDATA=""${PROD}\$${SEC}\$${EXPIRE}""

whereas your php has:
$data = $params['Prod'].$sec;

Either remove the dollars and the expiry from the shell code:
SDATA=""${PROD}${SEC}""

or add them to the php:
$data = $params['Prod'] . '$' . $sec . '$' . $params['Expire'];

","34","<php><sh><sha>","0","2","1","2019-05-02 00:27:59","55944251","0","","","","","2019-04-30 09:29:23",""
"20839926","Adding a signature even over HTTPS","I am creating a webservice that comunicates over HTTPS.
Security is very important for me, as I cannot accept modified data, so I am thinking about adding a message diggest (signature) to check integrity... but is it needed having it over HTTPS?
","HTTPS already has sufficient signing to prevent accidental modifications.
A straight message digest with no secrets provides no protection against deliberate tampering. An active man-in-the-middle attacker could easily replace the digest with their own value, recalculated to match any alterations they made.
For a signature to have value against tampering it must have been created using a secret key on the sender, and the signature must be verifiable on the receiver, which means you must have a way to pre-exchange keys between parties before use.
For the case where the client is a general purpose web browser there is no channel to do that, other than transferring it over HTTPS at which point that interaction is just as vulnerable to man-in-the-middle attacks and you gain nothing. This is a bootstrap problem.
For the case where you have a custom application client you have distributed to your users through a channel more trusted than HTTPS (eg you physically handing them copies of the code), then yes, adding a server-to-client signature based on public key crypto could theoretically provide some value. But rolling your own crypto is prone to implementation errors and best avoided.
What's the attack you're trying to counter here, that HTTPS together with the commercial CA infrastructure doesn't address well enough?
If your concern is that the PKI of commercial CAs is historically prone to occasional fraudulently-issued certificates and state-level spying, then a much simpler way of defending against that would be to run your own private CA for application use, and have your client accept only certs issued by that CA (and not the certificates built into the system like Verisign et al).
Whether through running a CA, or ad hoc signature checking, running your own PKI securely and effectively is a bunch of ongoing overhead. Be sure the public commercial PKI really can't meet your needs before going that route.
","34","<security><https><sha>","0","5","1","2013-12-30 13:20:17","20840306","1","1","","","","2013-12-30 12:49:19",""
"56945404","define hash cod SHA256 NodeJS","How to select the hash code on NodeJS?
I have a system made in another language with passwords on SHA256
The function there is:
#define HASH_CODE = 'WEASDSAEWEWAEAWEAWEWA';
SHA256_PassHash(HASH_CODE, password, 64);

First, param is the hash code, second is the var will be encrypted, third is the base64
I made the encrypt on NodeJS, but I have no control on hash code, so the systems don't make the same hash, how to select the code on the register on NodeJS so the system communicates with others?
const code = 'WEASDSAEWEWAEAWEAWEWA';
const normal = 'anne';
const crypto = require('crypto');
const encrypted = crypto
     .createHash('sha256')
     .update(normal)
     .digest('base64');
console.log(encrypted);

A exemple of compatibly code, this login on PHP
login.php
<?php require_once('../mysql_conn.php'); ?> 
    <?php
    session_start();
    $HASH_SENHA = 'WEASDSAEWEWAEAWEAWEWA';

    if(isset($_SESSION['Username']))
    {
        header(""location: ../myaccount.php"");
        exit();
    } 
    if(isset($_POST['usr']) && isset($_POST['psw']) && isset($_POST['botao'])) 
    { 
        $usuario = mysqli_real_escape_string($MYSQL_CONNECT, $_POST['usr']);  
        $senha = strtoupper(hash(""sha256"", $_POST['psw'] . $HASH_SENHA));  
        $query = mysqli_query($MYSQL_CONNECT, ""SELECT * FROM accounts WHERE Username='$usuario' AND Senha='$senha' LIMIT 1"");  

        if(mysqli_num_rows($query) < 1)  
        {
            echo ""<script type=\""text/javascript\"">
                        alert('Incorrect Username or Password.');
                        window.location = '../login.php';
                  </script>"";
            exit();
        }
        else 
        {
            //login efetuado 
            $dados = mysqli_fetch_assoc($query);  


            if (isset($_SESSION['loc'])) {
                header(""location:"".$_SESSION['loc']);
            }
            else header(""location:../index.php"");

        }  
    }
    ?> 

","By looking at the PHP code you've provided.
hash(""sha256"", $_POST['psw'] . $HASH_SENHA)

It's hashing the string concatenation of $_POST['psw'] and $HASH_SENHA
So, the equivalent code in Node.js should look like below
Node.js
const crypto = require('crypto');
const code = 'WEASDSAEWEWAEAWEAWEWA';
const input = 'password 123';

const encrypted = crypto
     .createHash('sha256')
     .update(input + code)  // concatenation
     .digest('hex');        // get hash in hex format

console.log(encrypted);

Output
3b3107f01da624da6bb014abe532aa7416869811ebe321784b26770cd2dd74ff

","34","<node.js><sha256><sha>","0","0","1","2019-07-10 04:47:58","56963565","3","","11751693","","2019-07-09 17:04:57","2019-07-09 04:34:48",""
"39426590","Get the same SHA-224 sum in Factor as coreutils sha224sum","$ echo *
a b c
$ cat *
file 1
file 2
file 3
$ factor -e="" \ 
> USING: globs io sequences sorting io.files io.encodings.utf8 ; \ 
> \""*\"" glob natural-sort [ utf8 file-lines ] map concat [ print ] each ""
file 1
file 2
file 3

The outputs are the same using Factor's glob and the shell's glob. A diff on the outputs shows they match exactly.
$ factor -e="" \
> USING: math.parser checksums checksums.sha globs io sequences sorting io.files io.encodings.utf8 ; \
> \""*\"" glob natural-sort [ utf8 file-lines ] map concat sha-224 checksum-lines bytes>hex-string print ""

0feaf7d5c46b802404760778091ed1312ba82d4206b9f93c35570a1a
$ cat * | sha224sum
d1240479399e5a37f8e62e2935a7ac4b9352e41d6274067b27a36101

But the checksums don't match, nor will md5 checksums. Why is this? How do I get the same checksum in Factor as in coreutils sha224sum?
Changing the encoding to ascii doesn't change the output, nor does ""\n"" join sha-224 checksum-bytes instead of checksum-lines. 
","This odd behaviour is due to a bug in checksum-lines. factor/factor#1708
Thanks to jonenst for finding the problem, and calsioro for this code on the Factor mailing list:

This code:
[
    { ""a"" ""b"" ""c"" } 3 [1,b]
    [ number>string ""file "" prepend [ write ] curry
      ascii swap with-file-writer ] 2each

    ""*"" glob natural-sort [ utf8 file-lines ] map concat
    [ ""\n"" append ] map """" join  ! Add newlines between and at the end

    sha-224 checksum-bytes bytes>hex-string print
] with-test-directory

gives the same hash:
d1240479399e5a37f8e62e2935a7ac4b9352e41d6274067b27a36101

","34","<glob><checksum><sha><factor-lang>","2","2","2","2016-09-11 12:02:32","39430394","6","","4532996","","2016-09-10 15:04:22","2016-09-10 13:34:15",""
"39426590","Get the same SHA-224 sum in Factor as coreutils sha224sum","$ echo *
a b c
$ cat *
file 1
file 2
file 3
$ factor -e="" \ 
> USING: globs io sequences sorting io.files io.encodings.utf8 ; \ 
> \""*\"" glob natural-sort [ utf8 file-lines ] map concat [ print ] each ""
file 1
file 2
file 3

The outputs are the same using Factor's glob and the shell's glob. A diff on the outputs shows they match exactly.
$ factor -e="" \
> USING: math.parser checksums checksums.sha globs io sequences sorting io.files io.encodings.utf8 ; \
> \""*\"" glob natural-sort [ utf8 file-lines ] map concat sha-224 checksum-lines bytes>hex-string print ""

0feaf7d5c46b802404760778091ed1312ba82d4206b9f93c35570a1a
$ cat * | sha224sum
d1240479399e5a37f8e62e2935a7ac4b9352e41d6274067b27a36101

But the checksums don't match, nor will md5 checksums. Why is this? How do I get the same checksum in Factor as in coreutils sha224sum?
Changing the encoding to ascii doesn't change the output, nor does ""\n"" join sha-224 checksum-bytes instead of checksum-lines. 
","jonenst also pointed out that:

Also, regarding the three different lengths you get, ""exercism/self-update/self-update.factor"" is missing a '\n' char at the end of the last line. That's why you get surprising results.

If you're trying to checksum files, make sure they all end with a trailing newline.
","34","<glob><checksum><sha><factor-lang>","2","0","2","2016-09-11 12:02:32","39430394","6","","4532996","","2016-09-10 15:04:22","2016-09-10 13:34:15",""
"39224726","Bash Whitespace being calculated","I am having issues with this script taking using the whitespace from my file that contains a list of words with each word on a separate line, I have double check and after each word there is a simple (return) no space yet the script is still calculating with whitespace 
ok at that hash then type in:
""hello
""
So hello followed by enter to start a new line. Look at that hash value
That is what I am getting a hash value that is a sting + the enter. As a result my script isnt working the way it is supposed to. Can anyone help.
","echo outputs with enter
You can use 
 echo -n ""$test2"" | sha256sum

","33","<bash><hash><sha256><sha>","0","1","1","2016-08-30 13:21:50","","0","","6773778","","2016-08-30 13:21:50","2016-08-30 10:15:06",""
"34920735","Comparing String Value","I am trying to build hash of SHA256 from the string using hash_hmac
$key = chr(hexdec('17'));
// value of key is blank 
$test = chr(hexdec('17')) == '' ? true : false
// value of test is false

so I want to know what is the value of $key how can I compare this 
$signature1 = hash_hmac('SHA256', ""st=1453362060~exp=1453363260~acl=/*"", chr(hexdec('17')));
$signature2 = hash_hmac('SHA256', ""st=1453362060~exp=1453363260~acl=/*"", """");

// signature1 == 020cb911b6415b14f6b1f955adf55be3b17bcbd77a3987408cb41406e39bfc82
// signature2 == 9356975e2119102a773dbd45e4f06d124246794a451c4aee320888bd3f857377

why is it generating different key ?
","The value of $key is not directly printable but has a length different to an empty string so you are not supplying the same parameters to the hash_hmac function on both occasions. Perhaps the $test variable needs to be used?
if( !defined( 'BR' ) ) define('BR','<br />' );

$key = chr(hexdec('17'));
$test = chr(hexdec('17')) == '' ? true : false; 


$signature1 = hash_hmac('SHA256', ""st=1453362060~exp=1453363260~acl=/*"", $test );
$signature2 = hash_hmac('SHA256', ""st=1453362060~exp=1453363260~acl=/*"", '' );

echo 'key:'.$key.' length:'.strlen($key).' length:'.strlen('').BR;
echo $signature1.BR.$signature2;

output
key: length:1 length:0
728079ac9885314df2cc1207e8eb79ada329d7d4172ce6574a561c540f039c02
728079ac9885314df2cc1207e8eb79ada329d7d4172ce6574a561c540f039c02

","33","<php><algorithm><sha>","0","0","1","2016-01-21 10:25:42","","0","","4595675","","2016-01-21 10:15:00","2016-01-21 10:08:55",""
"57859621","Secure Communication Between Tomcat Servers","Note: this question was sort of asked here, but not answered.
I need to communicate securely between two Tomcat servers running in two different environments. I have control of both servers.
I would like to do this through a simple REST call from Server-B to Server-A.
On the server I am communicating to, Server-A, I can easily set up HTTPS with a self-signed certificate. If I import this certificate into the Java Keystore on Server-B, I can make a trusted HTTPS Rest call from my Java code on Server-B.
Good instructions for doing this can be found here:
https://blog.10pines.com/2017/09/25/how-to-communicate-via-https-between-two-tomcat-servers-using-a-self-signed-certificate/ 
I would also like to add a confirmation that the Rest call to Server-A is certainly coming from Server-B and the message has integrity.
My plan is to generate a self-signed certificate on Server-B and  import this certificate into the Java Keystore on Server-A. Then for any REST call from Server-B I will first generate an SHA-512 hash of the message and sign the hash with the private key associated with the Server-B certificate. When Server-A receives the message, the SHA-512 hash will be recalculated and checked for accuracy of the hash (no message tampering). I will then check the signature of the Hash against the public key of the certificate from Server-B.
For a little bit of extra paranoia I may encrypt the REST message with the public key of the certificate from Server-A; for short messages this should be fine (no need for Symmetric encryption).
Does this seem like a good plan? Does Tomcat have a simpler mechanism for doing this?
The Java Messaging API seems a little ""heavy"" for this use case.
","","33","<java><tomcat><encryption><public-key-encryption><sha>","2","","0","2019-09-09 18:54:35","","1","","3001761","","2019-09-09 18:54:35","2019-09-09 18:44:03",""
"40706506","Connection between RC4 removal and SHA 1 removal","Is there any connection between the removal of RC4 stream cipher and SHA 1 certificate removal?
Meaning - did the removal of one force the other one to be removed or it just happened to be that they both have been removed at the same time?
","TL;DR: There is no such connection. The purpose of each of these algorithms is different, and they have no such effect on each other.
SHA1 is a cryptographic hash function, its purpose is to create a one way hash of the data in the certificate. There are several properties of cryptographic hash functions, the ones being important in this case are second pre-image resistance (given data1, it should be very difficult to find a different data2 such that h(data1)=h(data2)) and collision resistance (it should be very difficult to find data1 and data2 such that h(data1)=h(data2)).
If these requirements are not met in a hash function used for hashing certificates, one would be able to come up with a different certificate that has the same hash. That would be bad.
The problem with SHA1 is that it is easier to find a collision that it was supposed to be. To shed some ligh on the degree of the problem, it should be around 2^80 hashing operations (expected value) for a 160 bit hash function to find a collision. As opposed to that, for SHA1 it is around 2^63 according to an attack published in 2005. That is still a huge number and still practically infeasible, but people thought there may be a feasible attack in a few years, so it seemed better to just retire SHA1 now when people still have time to change certificates to a better hash function while SHA1 is still pratically secure.
RC4 is a stream cipher, it's input is a data stream and a key, the output is an encrypted stream. There have been known weaknesses for a long time, but those did not make it possible to actually break RC4 as it is used in SSL/TLS (attacks were not computationally feasible). Then in 2015, multiple researchers presented different attacks against RC4 (the Bar-mitzvah attack, the NOMORE attack, the improved Royal Holloway attack) that made it much more feasible to break RC4 in TLS in real life. Actually, most probably there are now organizations that can crack TLS if RC4 is used as the stream cipher, so it was removed based on the recommendation of IETF.
","33","<security><ssl><sha><tls1.2><rc4-cipher>","1","1","1","2016-11-20 23:00:37","40710463","0","","","","","2016-11-20 16:32:21",""
"46146031","Store user IP, but make it non traceable","I am working on a project where users (in a given and relativity short time period) answers statements, and i would like to store the entries anonymously.
After the collection period is over, i would like to be able to run statics on the answers. But it is very important that the users answers can not be traced back to a specific user/ip.
The reason that i would still like to store ip, regardless of my desire for the users to be anonymously, is that i would like to exclude entries where the user (with malicious intent or by accident), take the same test multiple times in a short span.
I have ruled out using encryptions, as it is, to my limited knowledge, not possible to compare a large set of encrypted strings like that.
My currently self proposed method is then to store: The user agent, a session identifier and a hashed ip address.
Regarding to the hashing method, i am thinking to use sha512 where the ip is prepended with a 16 character long salt (same salt for all entries). 
I know that when hashing simple and common strings, that sha512 and other hashing methods can be broken with tools like: http://md5decrypt.net/en/Sha512/ and good old brute forcing.
My idea to then guarantee user anonymity, is that after the collection period is over, i will delete the salt. Making it (to my knowledge) near impossible to brute force the hash. Even if a malicious party got hand on my source code.
I know it seems like a low tech solution, and that party of the security is based on my own action of actually deleting, where i en theory could forget or change my mind. But it is the only solution i could come up with.
Thanks in advance
","Don't hash the IP's, HMAC them. That's conceptually the same than what you want to do, but cryptographically robust.
https://en.wikipedia.org/wiki/Hash-based_message_authentication_code
","32","<security><ip><sha><password-encryption>","0","0","1","2017-09-10 22:22:47","46146101","0","","","","","2017-09-10 22:13:08",""
"54064665","Authentification with salt","i'm trying to write a sign in activity , i wrote the hashPassword function below. Why does it give a different result for the same salt and password? 
  import javax.crypto.SecretKeyFactory;

import javax.crypto.spec.PBEKeySpec;
import java.security.NoSuchAlgorithmException;
import java.security.spec.InvalidKeySpecException;

public class Main {

    public static void main(String[] args) {


        System.out.println(""Hello World!"");
       try { System.out.println(""test1: ""+hashPassword(""[B@2b1e4124"",""bfnfnfjfjf""));
           System.out.println(""test2: ""+hashPassword(""[B@2b1e4124"",""bfnfnfjfjf""));}
       catch (NoSuchAlgorithmException | InvalidKeySpecException e){}

    }
     public static  String hashPassword(String password, String salt) throws NoSuchAlgorithmException, InvalidKeySpecException {

        char[] passwordChars = password.toCharArray();
        byte[] saltBytes =salt.getBytes();
        PBEKeySpec spec = new PBEKeySpec(
                passwordChars,
                saltBytes,
                5000,
                10
        );
        SecretKeyFactory key = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA512"");
        byte[] hashedPassword = key.generateSecret(spec).getEncoded();
        return hashedPassword.toString();
    }

}

","Your hash is actually calculating the same result each time, but you're calling toString on the resulting byte array. This returns a debug string, which is different for each instance (see this question for details).
Instead of 
return hashedPassword.toString();

You should 
return hashedPassword;

... and use the byte[] directly.
If you want to display the hash in a human readable format, you could print it like this:
String hashString = new BigInteger(1, hashedPassword).toString(16);
System.out.println(hashString);

There is a second mistake in your code. The forth argument to the PBEKeySpec constructor is the length in bits. 10 is way too short to be useful. You probably want 512 (the SHA512 output length).
","31","<java><authentication><salt><sha>","3","1","1","2019-01-06 19:54:08","","0","","5031762","","2019-01-06 19:24:23","2019-01-06 18:36:03",""
"54655696","Create SHA hash and compare it when the source has moved location","I've created a simple C# program that can hash a file (I'm focusing on images, as opposed to PDF's, text etc) that displays the hash only on the command line. I will create a function to output a file (unsure what type?) so that this can be referenced later.
The idea is that an image will travel from one location to another, and once it reaches the second destination it will be checked by the hashing program once more, locating the hash file associated with it, comparing it, and then producing the result (i.e. it is identical or not). The code I have is not very relevant, hence why I've not posted it - I'm mainly just looking for tips/hints or any documentation that might be of use here!
Thank you in advance.
Edit: Code is important so here it is
using System;
using System.IO;
using System.Security.Cryptography;

class Hash
{
    static void Main(string[] args)
    {
        if (args.Length != 2)
        {
            byte[] hashValue = null;
            if (!File.Exists(args[1]))
            {
                try
                {
                    FileStream fileStream = File.OpenRead(args[1]);
                    fileStream.Position = 0;
                    switch (args[0].ToUpper())
                    {
                        case ""SHA512"":
                            // Compute the SHA512 hash of the fileStream.
                            hashValue = SHA512.Create().ComputeHash(fileStream);
                            return;
                    }
                    if (hashValue != null)
                    {
                        PrintHashData(args[0].ToUpper(), fileStream.Name, hashValue);
                    }
                    fileStream.Close();
                }
                catch (Exception ex)
                {
                    Console.WriteLine(""Error: {0}"", ex.Message);
                }
            }
        }
    }

    private static void PrintHashData(string algorithm, string fileName, byte[] array)
    {
        Console.Write(""File: {0}\r\n{1} Hash: "", fileName, algorithm);
        for (int i = 0; i < array.Length; i++)
        {
            Console.Write(String.Format(""{0:X2}"", array[i]));
        }
        Console.WriteLine();
    }
}

","","30","<c#><hash><sha>","0","","0","2019-02-12 18:01:49","","3","","10101999","","2019-02-12 18:01:49","2019-02-12 17:36:03",""
"16698025","Getting back to an erroneous git reset","Say I'm working on a project and I'm making various commits as I go along
A - B - C - D - E
And I realise that I made a mistake and need to do git reset to go back to version C.
So I then carry on making commits like this: C - D2 - E2 - F2 - G2 etc.
Where D2 is different to D, E2 is different to E etc.
I then realise that I was right in the beginning, and I need to get back to E.
As long as I have kept a note of the SHA of version E, is this possible by doing git reset hjsdkgjdfg where hjsdkgjdfg is the hash of E? I've heard git 'cleans up' (deletes) loose ends every now and then - would D and E be classed as 'loose ends'? Does it depend on the type of reset I have done: soft, mixed, hard?
Bearing in mind I'm a beginner, is this the correct sort of workflow? Or is this a terrible way of working?
Thanks
","Yes, if you remember the hash you can get back to it.  You might want to use git checkout or git branch rather than git reset, though.  You're right that git cleans up occasionally - you'll see it when it happens, because you'll get some messages about ""garbage collecting.""
To be safe, you can keep a branch pointing at your old commit, and then you'll be able to access it symbolically rather than by remembering the hash.
If you need to find an old hash, but you don't remember it, git reflog can help you find it.  You can also do tricks like:
 git checkout @{yesterday.at.3.pm}

If you know roughly the time you want to go back to.
","30","<git><sha><git-reset>","0","2","1","2013-05-22 17:28:38","16698092","0","","","","","2013-05-22 17:24:47",""
"55018477","How to convert raw rsa key to RFC 7468 format in php","I have public key and private key in raw string format like
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA1WWRykdXuvMOnRyYCesJpozgaRSoA....

I want to convert this to below format 
-----BEGIN PRIVATE KEY-----
........................
........................
........................
-----END PRIVATE KEY-----

In the php openssl_get_privatekey not able to read public and private key from raw string
If is there any other way to read private and public key from the raw string in php, Please let me how i can do this.
","","30","<php><encryption><openssl><rsa><sha>","0","","0","2019-03-06 08:20:33","","2","","","","","2019-03-06 08:20:33",""
"27782458","Which SHA-1 shortening technique maintains relatively best resistance to collisions?","Say that I have a SHA-1 like de9f2c7fd25e1b3afad3e85a0bd17d9b100db4b3 and need to create a shorter version of it, e.g., 10 characters long (let's consider the SHA-1 a string that corresponds to the hex representation; I am not asking about things like base64 encoding etc.). I know the probability of collisions will be much higher, but still, which algorithm will be relatively the best?
For example, I can take first 10 characters, some random 10 characters, maybe do some other mathematical operation on it etc. Are all these approaches roughly equivalent or will some yield much better collision resilience?
","","29","<hash><sha><hash-collision>","1","","0","2015-01-05 15:18:21","","0","1","","","","2015-01-05 15:18:21",""
"56511862","How can I Sign My Phonegap App Without Resetting the Security Signature?","I built and signed my android app made with phonegap, and I turned on App Signing from Google, but I'm not sure how to create updated apks without resetting the SHA signature. I am using phonegap/cordova not android studio and I signed using jarsigner so I would need to know how to do this through the Windows cmd prompt.
","","29","<sha><jarsigner><phonegap-cli><android-app-signing><app-signing>","0","","0","2019-06-09 04:12:08","","0","","9890258","","2019-06-09 04:12:08","2019-06-09 03:58:59",""
"54359155","Performance issue while generating shasum for every individual row in a given file","I am trying to generate a sha256 hash for a particular column in every row. I tried generating the a sha256hash using the solution provided by fellow members in this group. Thanks to Ravinder Singh. I used the same exact code except for the actual sha command. For AIX it is shasum -a 256.
Code:
awk -F""|"" -v var=""10"" '
    NR==1;
    NR>1{
        ""echo ""$2""|shasum -a 256"" | getline shaoutput;
        split(shaoutput, sha, "" "");
        print $1, $2, sha[1]
    }' OFS=""|"" inputfile.dat >outputfile.dat

This works perfectly. the only problem is that the performance of this code is very slow. It is currently taking a minute for 1000 records. I need to generate a large amount of hash as a one time thing for over 10 million records. Is there anyway the performance can be improved?
I tried using perl like Lorinczy Zsigmond suggested. Now i can process a million rows in under 10 secs.
Code: 
#!/usr/bin/perl
use strict;
use warnings;
use Digest::SHA qw(sha256_hex);
my $inputfile = 'inputfile.dat';
open(my $fh,'<',$inputfile)
 or die ""Could not open file '$inputfile' $!"";
while (my $row = <$fh>){
chomp $row;
my @fields=split /\|/,$row;
print $fields[0];
print ""|"";
print $fields[1];
print ""|"";
print sha256_hex($fields[1]);
print ""\n"";
}

","","28","<performance><aix><sha>","1","","0","2019-01-25 21:43:13","","2","","10959532","","2019-01-25 21:43:13","2019-01-25 04:58:50",""
"53429095","Git patch and calculate SHA","To avoid XY I will explain my goal:
I am writing a RunManager which should execute a process of given version. I want to add an option to run the process with the current directory contents (including uncommitted changes), and tag those changes somehow with a deterministic name.
What I'm thinking is to create a git patch, give it a SHA as if it was a commit, copy it to the remote server and apply.
How can I acheive the SHA part?
","","28","<git><sha><git-patch>","0","","0","2018-11-22 10:50:38","","4","","5470144","","2018-11-22 10:50:38","2018-11-22 10:40:32",""
"58604628","How can I select the text inside the DOM using CSS Selectors","I am using Google Tag Manager and I would like to use the variable ""DOM element"" (that relays CSS selectors), to catch text1 inside the span tag and use it as a variable. I can't get the text using the selectors
I have tried using span#widgetBirdset.pxs-attribute as a selector. Here's the span tag where i want to get it:
<span id=""widgetBirdset.pxs-attribute class=""pxs-attribute"">
                    <div class=""pxs-dot"">
                        <svg width=""20"" height=""20"" xmlns=""http://www.w3.org/2000/svg"" viewBox=""0 0 303.68 469.22"">
                           <g class=""Calque_2"" data-name=""Calque 2"">
                                <g class=""Layer_1"" data-name=""Layer 1"">
                                    <path class=""pxs-html5"" d=""M151.83,469.22a13,13,0,0,1-12.68-10L99.43,294.36a151.1,151.1,0,0,1-17.26-7.61,148.42,148.42,0,0,1-22.55-14.31,151.83,151.83,0,1,1,199.59-228,152.06,152.06,0,0,1,38.09,151,154.42,154.42,0,0,1-8.9,22.76,152.79,152.79,0,0,1-84.16,76.1L164.51,459.25A13,13,0,0,1,151.83,469.22Zm0-441A123.69,123.69,0,0,0,95.14,261.7a125.85,125.85,0,0,0,20.33,8.3,14.08,14.08,0,0,1,9.43,9.54l26.93,111.8,26.78-111.15c0-.06.19-.72.2-.78a13,13,0,0,1,8.89-9.26,123.43,123.43,0,0,0,87.74-117.6c0-.24,0-.47,0-.71s0-.48,0-.72A123.65,123.65,0,0,0,151.83,28.22Z""></path>
                                    <path class=""pxs-html5"" d=""M151.83,207.16a56,56,0,1,1,56-55.95A56,56,0,0,1,151.83,207.16Zm0-85.82a29.87,29.87,0,1,0,29.87,29.87A29.9,29.9,0,0,0,151.83,121.34Z""></path>
                                </g>
                            </g>
                        </svg>
                    </div>text1</span>

I expect the output text1 and want to hash it SHA-1 in Google Tag Manager
Thanks,
","","28","<html><dom><css-selectors><google-tag-manager><sha>","0","","0","2019-10-29 10:00:46","","1","","12290496","","2019-10-29 10:00:46","2019-10-29 09:31:52","2019-10-29 09:37:30"
"56324918","How can I use the SHA's on installing Ruby ? What's the risk if I don't verify them?","I'm installing Ruby (in order to eventually be able to use Redmine) on my Win 10 laptop. 
I realize how critical the whole install process is and I'm wondering if there are real threats not to check the various SHA given there : https://www.ruby-lang.org/en/news/2015/04/13/ruby-2-2-2-released/.
I guess it's needed if you don't trust the source you're downloading from, but I found it through my usual search engine (ie qwant).
If this verification is really a must-do, how can I do it ? 
One of the SHA's given is :
SHA1:   7d26835cb7711dfe75f2c10fe38cb85f5ed56df5

I'm on Win 10, so I picked one from the .zip list.
","To prevent tampering (but if the download is through https you are safe).
Theory is pretty well introduced here.
Hands on side, in short, you need to execute $>sha1sum my_file.exe in PowerShell, and check if the hash is the expected one.
https://imgur.com/q3yYVXO
","27","<ruby><install><sha>","1","0","1","2019-05-27 11:46:22","","0","","","","","2019-05-27 11:09:41",""
"55615607","Hash function returning different result after deleting & replacing file","My issue is that when I have the program running, and delete a file in said directory, when it (the same file) is placed back it returns a different value. I wondered whether this code below is the issue?
int main (int argc, char *argv[])
{
        int fd;
        int wd;
        unsigned char c[SHA512_DIGEST_LENGTH];
        int i;
        SHA512_CTX mdContext;
        int bytes;
        unsigned char data[1024];
        const int event_size = sizeof(struct inotify_event);
        const int buf_len = 1024 * (event_size + FILENAME_MAX);
        char *directory = ""/home/joe/Documents/"";
        char *hashDirectory = ""/home/joe/Documents/_Hash/"";
        char hashInBuf[500];
        char hashOutBuf[500];
        fd = inotify_init();

        if (fd < 0) {
          perror(""inotify_init"");
        }

        wd = inotify_add_watch(fd, ""/home/joe/Documents"", IN_CREATE);

        while (1) {
          char buff[buf_len];
          int no_of_events, count = 0;
          //SEARCH FOR NEW FILES WITHIN DIRECTORY
          no_of_events = read (fd, buff, buf_len);
          while (count < no_of_events) {
            struct inotify_event *event = (struct inotify_event *)&buff[count];
            if (event->len) {
              if ((event->mask & IN_CREATE))
              if(!(event->mask & IN_ISDIR)) {
                    snprintf(hashInBuf, sizeof(hashInBuf), ""%s/%s"", directory, event->name);
                    snprintf(hashOutBuf, sizeof(hashOutBuf), ""%s/%s.txt"", hashDirectory, event->name);
                    //OPEN FILES
                    FILE *ftest=fopen(hashInBuf, ""rb"");    //ORIGINAL FILE
                    FILE *ftest2=fopen(hashOutBuf, ""wt"");  //HASH FILE (stored in separate directory)
                    //HASH FUNCTION
                    SHA512_Init (&mdContext);
                    while ((bytes = fread (data, 1, 1024, ftest)) != 0)
                        SHA512_Update (&mdContext, data, bytes);
                    SHA512_Final (c,&mdContext);
                    for(i = 0; i < SHA512_DIGEST_LENGTH; i++){
                      fprintf(ftest2, ""%02x"", c[i]);
                      printf(""%02x"", c[i]);
                    }
                    fclose (ftest);
                    fclose (ftest2);
                    fflush (stdout);
                  }}
                  count += event_size + event->len;
                 }}
                 return 0;
         } //CLOSES INT MAIN

I can assure you the variables are defined correctly as for all intensive purposes it does work, just not correctly... 
","You never set hashInBuf nor hashOutBuf so there contents is undefined and when you do 

               FILE *ftest=fopen(hashInBuf, ""rb"");    //ORIGINAL FILE
               FILE *ftest2=fopen(hashOutBuf, ""wt"");  //HASH FILE (stored in separate directory)


you try to open files whose names was never set, and unfortunately you do not check the open failed, so 

while ((bytes = fread (data, 1, 1024, ftest)) != 0)


reads nothing and because ftest values NULL, SHA512_Update (&mdContext, data, bytes); is never called etc
Several variables are never used :

file512
hashDirectory
directory
wd
argc
argv

","27","<c><loops><while-loop><openssl><sha>","0","1","1","2019-04-10 16:01:56","","3","","10101999","","2019-04-10 16:01:40","2019-04-10 14:52:59",""
"42656813","New SSL certificate is 2 years old","I have installed a new certificate on an existing webserver.
Ran ""https://www.sslshopper.com/ssl-checker.html"". says the certificate
is 700+ days old.
The domain is ""www.infocon-inc.com""
Certificate is SHA2.
Created a free certificated made sure sha256.
  using both the configure file and the command line -sha256.
running Apache 2.2+ with openssl 1+
Checked IP Address
checked the firewall https is open port.
restart Apache, everytime I updated the certificate.
Still get ""ERR_CERT_AUTHORITY_INVALID"" error in the browser.
Site has been up for years.
Any ideas as to where to look for the problem?
","The problem was there was in ssl.conf referenced localhost.crt and localhost.key.
","26","<apache><ssl><sha>","0","0","1","2017-03-08 02:12:16","","0","","","","","2017-03-07 19:35:08",""
"55048512","Apache IOT2040 https to http SHA1 to SHA2/3","I started to program an IOT2040 using apache to make a connection from an old Win Xp device to a Server. 
The Problem is that the Win Xp is not able to use SHA2 and https but the sever doesn't allow insecure traffic. 
I want to use the IOT2040 as a middle man forwarding http request as https request to the sever.
But I got following problem:
The reverse Proxy just allows my to forward one website to the other but I need two. 
 <VirtualHost *:8082>
                ServerName TargetServer.com/
                SSLProxyEngine On RequestHeader set Front-End-Https ""On""
                ProxyPass / http://TargetServer.com/
                ProxyPassReverse / http://TargetServer.com/
          </VirtualHost>

I would like to be able to go on XXX.TargetServer.com as well. Is there any way to forward any http request to the IOT? 
Thanks a lot.
","","26","<apache><http><https><iot><sha>","0","","0","2019-03-07 16:25:05","","0","","","","","2019-03-07 16:25:05",""
"58334743","crypt module not outputting a SHA512 hash as expected","I'm currently using the crypt module in Python to try and create a SHA512 hash in the following manner.
When I run the following line of code from this SO post:
>>> import crypt
>>> crypt.crypt('password', '$6$' + 'salt1234')

Instead of seeing the following output of the salt followed by the SHA512 hash per this SO post:
'$6$salt1234$Zr07alHmuONZlfKILiGKKULQZaBG6Qmf5smHCNH35KnciTapZ7dItwaCv5SKZ1xH9ydG59SCgkdtsTqVWGhk81'

I get the following:
$6FMi11BJFsAc

Below is a screenshot as proof:

Why is it that I'm unable to obtain the SHA512 hash that I'm expecting?
","From https://docs.python.org/3/library/crypt.html:

This module implements an interface to the crypt(3) routine, which is a one-way hash function based upon a modified DES algorithm; see the Unix man page for further details. […]
Notice that the behavior of this module depends on the actual implementation of the crypt(3) routine in the running system. Therefore, any extensions available on the current implementation will also be available on this module.

and from the documentation of the function itself (emphasis mine):

The optional salt is either a string as returned from mksalt(), one of the crypt.METHOD_* values (though not all may be available on all platforms)

The crypt of the platform you’re on probably doesn’t support SHA-512. You can confirm this by checking whether crypt.METHOD_SHA512 is in crypt.methods.
>>> crypt.methods
[<crypt.METHOD_CRYPT>]
>>> ""\N{CRYING FACE}""
'😢'

One could look at a description of SHAcrypt and make an implementation based on it, or use someone else’s.
from passlib.hash import sha512_crypt
sha512_crypt.hash('password')

","26","<python><security><hash><sha><crypt>","0","1","1","2019-10-11 05:41:21","58334873","0","","707111","","2019-10-11 05:29:56","2019-10-11 05:26:17",""
"58674561","Is there any way in python to do SHA-1 hashing with key?","I need to use SHA-1 as a PRNG so that is why it needs some key, but in python libs such as hashlib and pycryptodome I didn't find any opportunity for this. Are there any ready solutions? Or maybe there's another way to use SHA-1 as PRNG in python? The quistion is asked because the code of SHA-1 PRNG in NIST tests confused me a bit.(the code is from NIST tests, it's in sts-2.1.2/sts-2.1.2/src/generators.c in the end). To be honest,I expected that SHA-1 PRNG works like this:

we have some starting value(let it be x), after that we do something like r=sha1(x)
now we have r as a new member of the pseudo-random sequence
and to have another member we do r=sha1(r)
But with that NIST code I really don't understand how to implement SHA-1 PRNG on python. 

//  Uses 160 bit Xkey and no XSeed (b=160)
//  This is the generic form of the generator found on the last page of the Change Notice for FIPS 186-2
void
SHA1()
{
    ULONG   A, B, C, D, E, temp, Wbuff[16];
    BYTE    Xkey[20], G[20], M[64];
    BYTE    One[1] = { 0x01 };
    int     i, num_0s, num_1s, bitsRead;
    int     done;
    ULONG   tx[5] = { 0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0 };

    if ( ((epsilon = (BitSequence *) calloc(tp.n,sizeof(BitSequence))) == NULL) ) {
        printf(""Insufficient memory available.\n"");
        exit(1);
    }

    ahtopb(""ec822a619d6ed5d9492218a7a4c5b15d57c61601"", Xkey, 20);
//  ahtopb(""E65097BAEC92E70478CAF4ED0ED94E1C94B15446"", Xkey, 20);
//  ahtopb(""6BFB9EC9BE37B2B0FF8526C222B76E0E91501753"", Xkey, 20);
//  ahtopb(""5AE8B9207250257D0A0C87C0DACEF78E17D1EF9D"", Xkey, 20);
//  ahtopb(""D99CB53DD5FA9BC1D0176F5DF8D9110FD16EE21F"", Xkey, 20);

    for ( i=0; i<tp.numOfBitStreams; i++ ) {
        num_0s = 0;
        num_1s = 0;
        bitsRead = 0;
        do {
            memcpy(M, Xkey, 20);
            memset(M+20, 0x00, 44);

            // Start: SHA Steps A-E
            A = tx[0];
            B = tx[1];
            C = tx[2];
            D = tx[3];
            E = tx[4];

            memcpy((BYTE *)Wbuff, M, 64);
#ifdef LITTLE_ENDIAN
            byteReverse(Wbuff, 20);
#endif
            sub1Round1( 0 );  sub1Round1( 1 );  sub1Round1( 2 );  sub1Round1( 3 );
            sub1Round1( 4 );  sub1Round1( 5 );  sub1Round1( 6 );  sub1Round1( 7 );
            sub1Round1( 8 );  sub1Round1( 9 );  sub1Round1( 10 ); sub1Round1( 11 );
            sub1Round1( 12 ); sub1Round1( 13 ); sub1Round1( 14 ); sub1Round1( 15 );
            sub2Round1( 16 ); sub2Round1( 17 ); sub2Round1( 18 ); sub2Round1( 19 );
            Round2( 20 ); Round2( 21 ); Round2( 22 ); Round2( 23 );
            Round2( 24 ); Round2( 25 ); Round2( 26 ); Round2( 27 );
            Round2( 28 ); Round2( 29 ); Round2( 30 ); Round2( 31 );
            Round2( 32 ); Round2( 33 ); Round2( 34 ); Round2( 35 );
            Round2( 36 ); Round2( 37 ); Round2( 38 ); Round2( 39 );
            Round3( 40 ); Round3( 41 ); Round3( 42 ); Round3( 43 );
            Round3( 44 ); Round3( 45 ); Round3( 46 ); Round3( 47 );
            Round3( 48 ); Round3( 49 ); Round3( 50 ); Round3( 51 );
            Round3( 52 ); Round3( 53 ); Round3( 54 ); Round3( 55 );
            Round3( 56 ); Round3( 57 ); Round3( 58 ); Round3( 59 );
            Round4( 60 ); Round4( 61 ); Round4( 62 ); Round4( 63 );
            Round4( 64 ); Round4( 65 ); Round4( 66 ); Round4( 67 );
            Round4( 68 ); Round4( 69 ); Round4( 70 ); Round4( 71 );
            Round4( 72 ); Round4( 73 ); Round4( 74 ); Round4( 75 );
            Round4( 76 ); Round4( 77 ); Round4( 78 ); Round4( 79 );

            A += tx[0];
            B += tx[1];
            C += tx[2];
            D += tx[3];
            E += tx[4];

            memcpy(G, (BYTE *)&A, 4);
            memcpy(G+4, (BYTE *)&B, 4);
            memcpy(G+8, (BYTE *)&C, 4);
            memcpy(G+12, (BYTE *)&D, 4);
            memcpy(G+16, (BYTE *)&E, 4);
#ifdef LITTLE_ENDIAN
            byteReverse((ULONG *)G, 20);
#endif
            // End: SHA Steps A-E

            done = convertToBits(G, 160, tp.n, &num_0s, &num_1s, &bitsRead);
            add(Xkey, 20, G, 20);
            add(Xkey, 20, One, 1);
        } while ( !done );
        fprintf(freqfp, ""\t\tBITSREAD = %d 0s = %d 1s = %d\n"", bitsRead, num_0s, num_1s); fflush(freqfp);
        nist_test_suite();
    }
    free(epsilon);
}

","","26","<python><random><sha>","0","","0","2019-11-02 19:29:14","","1","","","","","2019-11-02 19:29:14",""
"23266791","Apply hashing to secure passwords generated within the app","I have a created 150 odd predefined passwords and usernames in my windows phone 8 app.
They get initialized whenever the app starts.
Whenever a user enters the password and username, the app checks its authenticity and acts accordingly.
For obvious security reasons, i would like to protect my passwords so that the ""extra-genius minds"" don't find a way to manipulate them in their own app.
Could anyone tell how to use SHA-1 hashing and store those passwords into hashed formats.
Thanks!
","var sha = new SHA1Managed(); 
var bytes = System.Text.Encoding.UTF8.GetBytes(password);
byte[] hashedPassword = sha.ComputeHash(bytes);

","26","<c#><visual-studio-2012><windows-phone-8><sha>","0","0","1","2014-04-24 10:57:21","","0","","","","","2014-04-24 10:51:13",""
"56049943","Sha hash file comparison issues on OSX","We have our own in-house patching solution, using Node JS with our client appliation being Electron.
Our Patcher assembles a diff list of filepath changes between versions, and pairs them with a generated Sha sum to save to a JSON. The source files are being stored on a local server on the network that all build machines can access. Currently, our Windows build machine is assembling the filepaths and Sha hashes for both Windows and OSX builds due to it being much faster than our OSX build machine, and then passes off the JSON information to the OSX build machine to complete the process.
When uploading files from OSX to AWS using the following commands using the following libraries, we are seeing that the resulting SHA's generated after subsequent download no longer matches the original file that operations were being done on. Does anyone know what's happening here or what commands are messing up? We are only seeing this on OSX, whereas the exact same code is being run on windows with no issue. 
The Sha generation method we're using on both Patcher and Client is from Node's native crypto library.
https://nodejs.org/api/crypto.html
Our Patcher upload to S3 is using the uploadFile function of:
https://github.com/andrewrk/node-s3-client
While Client Download is using Electron's internal downloader:
https://electronjs.org/docs/api/download-item
For Client-side file moving, we're using:
https://github.com/jprichardson/node-fs-extra
In this fashion:
fs.copySync(cpFROM, cpTO, { overwrite: true, preserveTimestamps: true })
fs.removeSync(cpFROM);

I tried using the move operations, but that resulted in crashes on OSX.
Thank you.
","","25","<javascript><macos><amazon-s3><electron><sha>","0","","0","2019-05-08 22:38:31","","1","","","","","2019-05-08 22:38:31",""
"24511936","hash function return not hexa value","I'm just trying some benchmark on hash functions and their speed and in one case I encoutred strange issue. Code is easy, i create hash from random number, then another hash from random and the i put this together with few serverand local values and take how much execution take.
I know that it's crazy code, nut it's just for benchmark and question is out of my curiosity:
CODE:
$salt1 = hash( 'sha1', uniqid( mt_rand( 1, mt_getrandmax() ), true ) );
$token1 = hash( 'sha1', uniqid( mt_rand( 1, mt_getrandmax() ), true ) );
$token2 = hash( 'sha1', $_SERVER['HTTP_ACCEPT_ENCODING'] . $salt1 . $_SERVER['HTTP_ACCEPT_LANGUAGE'] . $token1 . $_SERVER['REMOTE_ADDR'] , true  );

After this code is finished I end up with time and values salt1, token1 and token2. I was not looking at values, but just from luck i encoutred this values:
$salt1 = e93edda7d1810efb661fe0b4eb85c92256516302
$token1 = ca43d77821ddc90b6b0bfebe1a20f1985547dbeb
$token2 = >)c³‡Ìq£Vé‘Æä¯ËÊü*

As you cen see, in token2 there is no hexa value. How is it possible if this function should return hexa values?
","You have to remove the true at the end. Having this boolean parameter set to true as you can see from the documentation means that the output value is in raw binary format
","25","<php><hash><benchmarking><sha>","0","1","1","2014-07-01 13:55:32","24512076","2","","","","","2014-07-01 13:48:27",""
"51508668","SHA of SHA as signatures of composite objects","I have a bunch of large objects, and structures of those, and vectors of those. It's important to check integrity of the composite objects sometimes; for that I'm using Sha256 ""signature"" of the objects.
There are at least two ways to define a signature of a composite object: by computing sha of concatenation of components, or by computing sha of the concatenations of shas of the components.
That is, the 1st method signature of a vector Object0, Object1, Object2 would be sha(Object0 Object1 Object2), and the 2nd method would be sha(sha(Object0) sha(Object1) sha(Object2)).
It's a lot faster in what I'm doing to sign composite objects with the 2nd method. The question is, does this method, computing shas of shas, increase the chances of collisions? Do I sacrifice any security because I'm hashing not the objects but hashes of the objects?
","Although I can't provide a mathematical proof for this, I'd say: No, it doesn't matter.
","24","<hash><signature><sha>","2","0","2","2018-07-24 23:09:47","51508784","0","","","","","2018-07-24 22:58:22",""
"51508668","SHA of SHA as signatures of composite objects","I have a bunch of large objects, and structures of those, and vectors of those. It's important to check integrity of the composite objects sometimes; for that I'm using Sha256 ""signature"" of the objects.
There are at least two ways to define a signature of a composite object: by computing sha of concatenation of components, or by computing sha of the concatenations of shas of the components.
That is, the 1st method signature of a vector Object0, Object1, Object2 would be sha(Object0 Object1 Object2), and the 2nd method would be sha(sha(Object0) sha(Object1) sha(Object2)).
It's a lot faster in what I'm doing to sign composite objects with the 2nd method. The question is, does this method, computing shas of shas, increase the chances of collisions? Do I sacrifice any security because I'm hashing not the objects but hashes of the objects?
","What you have described there is well known structure of Merkle tree or hash tree. Git repository is basically giant Merkle tree.
Security of such structure is as strong as preimage resistance of hash function of your choice.
","24","<hash><signature><sha>","2","1","2","2018-07-24 23:09:47","51508784","0","","","","","2018-07-24 22:58:22",""
"55127037","openssl build with sha extension support","I'm trying to build openssl library with sha extension. I know there is a sha512-x86_64.pl has a code for multiple funtions including sha256_block_data_order_shaext in the perl script (crypto/sha/asm/sha512-x86_64.pl). When I execute that code on my ubuntu machine, it creates an assembly file without that function. I don't see any configure option to pass to enable extension support. Do I need to pass in any arguments to enable this code?
Any help/hint is appreciated.
Thanks,
","","24","<openssl><sha>","0","","0","2019-03-12 17:04:38","","0","","","","","2019-03-12 17:04:38",""
"57154006","Bad credentials error when login using Sha1 encrypted and Base64 encoded password Spring Security","We have a legacy system which saved passwords in sha1 encrypted and base64 encoded format in sql database.
For example, Welcome1 is stored as 0xj0Rznc7WZ5OxpgMCgTOnauaA4= .
We are trying to migrate our app to spring security and planning to use bcrypt going forward.
For existing users we are getting a Bad credentials error when trying to login using spring security. 
Tried using StandardPasswordEncoder but got Bad credentials error.
`public PasswordEncoder userPasswordEncoder() { 
    PasswordEncoder defaultEncoder = new 
                    StandardPasswordEncoder(); 
    Map<String, PasswordEncoder> encoders = new HashMap<>(); 
    encoders.put(""bcrypt"", new BCryptPasswordEncoder(4)); 
    encoders.put(""sha1"", new StandardPasswordEncoder());

    DelegatingPasswordEncoder passwordEncoder = new 
               DelegatingPasswordEncoder(""bcrypt"", encoders);


      passwordEncoder.setDefaultPasswordEncoderForMatches(defaultEncoder);

    return passwordEncoder; 
}`

How do we authenticate for old users?
","","24","<java><spring><spring-boot><spring-security><sha>","0","","0","2019-07-22 21:30:48","","0","","","","","2019-07-22 21:30:48",""
"33997442","Twitter OAuth integration without HTTPS on my side","Do I need HTTPS on my server with some SHA-2 certificate for Twitter OAuth integration?
Or may I simply send HTTPS requests to the Twitter API after receiving OAuth access token?
","","23","<oauth><https><twitter-oauth><sha><sha2>","1","","0","2015-11-30 11:22:23","","0","","","","","2015-11-30 11:22:23",""
"57362326","unable to debug my app on a device, it starts writing console instead","Before I did what I am going to explain everything worked fine.  
I needed to get my app SHA1 and I followed the instructions of this post:
SHA-1 fingerprint of keystore certificate
Specifically I:

Clicked on the ""Gradle"" menu on the right of Android Studio
Navigated :app > Tasks > Android
Double clicked on ""signingReport"" menu voice

Indeed the command ""signingReport"" was executed and in the console I got SHA1 code (both for debug and for release).
My problem is that right now I am not able to debug my app in the device anymore.
If I click on the ""Debug"" button of the top menu of Android Studio it calls ""signingReport"" command execute, instead of let me choose the device to debug app with.
I do not know howto comeback to the previous debug option.
UPDATED 
I solved: what I've done is just going to the ""Gradle"" menu on the right and delete all ""Run configuration"" voices that Android Studio created after I run the command.
","Sounds like you have the signingReport selected as the current 'run configuration'.  If you look up in the top menu bar of Android studio, you'll see a lot of little icons on the right side.  If you go to the third icon from the left side of the group, you will see a little down-pointing arrow.  I'm guessing it will also have the text signingReport.  Click the down arrow and select the 'app' run configuration.  Then, hitting play should start the App and prompt for a device.
","23","<android><android-studio><debugging><adb><sha>","0","1","1","2019-08-05 16:27:21","57362580","0","","4641073","","2019-08-05 16:25:15","2019-08-05 16:08:18",""
"18506318","What Good is Sharing Security Keys along with Downloads","Sometimes I see a list of keys along with a download that I believe are meant to verify if a downloaded file is legit. For example here 
http://cdimage.ubuntu.com/releases/12.04/release/
There are SHA1 sums at the end of the download page. 
I assume the process is, you download file, verify it using these sums. However, if someone hacked the page and installed a modified version of download files, wouldn't they change the SHA sums as well? Then what is the purpose of sharing the sums / keys along with downloads?
","""That they can also be used to verify the integrity of the dl, check if your file wan't corrupted, and to verify authenticity of remote mirrors"" are good enough for me.
","23","<security><sha>","0","0","1","2013-12-03 08:54:42","20346622","2","","","","","2013-08-29 08:52:48",""
"58638784","Python sample script to setup webhook with sha1 signature","I am trying to setup python flask based server to setup webhook with sha1 signature. I could able to use simple verification token but not able to use sha1 algorithm.
  Could someone share the sample python script reference ?
","","22","<python><python-3.x><flask><webhooks><sha>","0","","0","2019-11-02 01:27:38","","1","","2057709","","2019-11-02 01:27:38","2019-10-31 07:41:02",""
"58651441","How can you create a shared secret for IdentityServer4?","All the documentation and examples I've seen all use C# code to generate the secret, like this:
new Secret(""secret"".Sha256())

This is fine for an initial setup and inserting into the database on startup, but what if I want to add a secret directly to the database at run time. Preferably I'd like to give instructions to a customer that doesn't involve any code.
I've tried using online tools to hash the string then Base64 encode the string but it's not matching what the code generates so I think I'm missing a step.
","The code for that function is here:
https://github.com/IdentityServer/IdentityServer4/blob/master/src/IdentityServer4/src/Extensions/HashExtensions.cs
You could create a tool or library of your own that meets your requirements. We have a SQL implementation so we can easily import clients directly into our DB should we need to.
","22","<identityserver4><sha><shared-secret>","0","1","1","2019-11-01 09:42:00","","0","","","","","2019-10-31 21:35:44",""
"56880235","How to automate enabling DHCP of HikVision cameras?","I'm writing a script to automate enabling DHCP of HikVision cameras. In order to do it, I'm trying to do some reverse engineering of SADP Tool to know how it works. I capture the communcation between SADP Tool and a camera. And here is one of the packets:
<?xml version=""1.0"" encoding=""utf-8""?>
<Probe>
    <Uuid>0000008A-00E6-0048-A54A-F64BE0AA9F26</Uuid>
    <Types>update</Types>
    <PWErrorParse>true</PWErrorParse>
    <MAC>54-c4-15-1b-06-67</MAC>
    <Password bSalt=""true"">DJ5WSs/jb1G1S1BQdB81HBFxxulih6kpzhajqN3/3jgnKmB9DKWwJqx0NnxejDhWO1j0bOoVubzQ7IvNeaxgVg==</Password>
    <IPv4Address>192.168.1.64</IPv4Address>
    <CommandPort>8000</CommandPort>
    <HttpPort>80</HttpPort>
    <IPv4SubnetMask>255.255.255.0</IPv4SubnetMask>
    <IPv4Gateway>192.168.1.1</IPv4Gateway>
    <IPv6Address>::</IPv6Address>
    <IPv6Gateway>::</IPv6Gateway>
    <IPv6MaskLen>64</IPv6MaskLen>
    <DHCP>true</DHCP>
    <SDKOverTLSPort>0</SDKOverTLSPort>
</Probe>

In the above packet, some info is encrypted in
<Password bSalt=""true"">DJ5WSs/jb1G1S1BQdB81HBFxxulih6kpzhajqN3/3jgnKmB9DKWwJqx0NnxejDhWO1j0bOoVubzQ7IvNeaxgVg==</Password>

which, I guess, is base64 encoding of hashes generated from:
 - admin's password: simple123
 - camera salt: b68053c65b06b1b322b6cbc53fce1f614eee9366384a12aa01188bdaa8f14ac3
 - and uuid: 0000009A-0087-004C-A898-6E131DE7E584
 - (and maybe other info like MAC, IP...)

However, after many tries with some hashing functions, I still could not reproduce that hash. Does anyone know how HikVision SADP generates this password?
","","22","<hash><md5><reverse-engineering><sha><hikvision>","0","","0","2019-07-04 03:22:41","","0","","","","","2019-07-04 03:22:41",""
"58314997","If https already encrypted GET request, is sha encryption important?","I'm looking at Weixin's document, I found that they are using SHA-1. I feel like it's not secure, but then my friend said 'never mind, we use https', so I am wondering, is it important to use SHA-1 or others? When will https encrypt our request?
Thanks!
This is Weixin's document:
https://developers.weixin.qq.com/doc/offiaccount/en/Basic_Information/Access_Overview.html
private function checkSignature()
{
    $signature = $\GET[""signature""];
    $timestamp = $\GET[""timestamp""];
    $nonce = $\GET[""nonce""];
    $token = TOKEN;
    $tmpArr = array($token, $timestamp, $nonce);
    sort($tmpArr, SORT_STRING);
    $tmpStr = implode( $tmpArr );
    $tmpStr = sha1( $tmpStr );
    if( $tmpStr == $signature ){
        return true;
    }else{
        return false;
    }
}

","SHA-1 is a one way hash function... though it should not be used in most of the cases but in your case since you are using it for WeChat you have no other option but to use it , unless WeChat modifies there implementation.
Also to answer your other question , which is when HTTPS encrypts your request , so HTTPS is a protocol which insures that the data in motion is secured and encrypted.
When a browser attempts to access a website that is secured by SSL, the browser and the web server establish an SSL connection using a process called an “SSL Handshake” (see diagram below). Note that the SSL Handshake is invisible to the user and happens instantaneously.

Essentially, three keys are used to set up the SSL connection: the public, private, and session keys. Anything encrypted with the public key can only be decrypted with the private key, and vice versa.
Because encrypting and decrypting with private and public key takes a lot of processing power, they are only used during the SSL Handshake to create a symmetric session key. After the secure connection is made, the session key is used to encrypt all transmitted data.
","22","<security><https><sha>","0","0","1","2019-10-10 09:07:25","58319255","3","","12192471","","2019-10-10 03:55:14","2019-10-10 03:23:24",""
"54223326","Which SHA-1 cert key should I use to generate a Google Places API key when testing on an Android Emulator?","I'm testing an Autocomplete widget using the Google Places API. I generated a Places API key using keytool -list -v -keystore <location of keystore> to get the SHA-1 cert key that Google requires. I'm now getting the error {""code"":403,""errors"":[{""reason"":""forbidden"",""domain"":""global"",""message"":""Requests from this Android client application <package name> are blocked.""}]} in the emulator. Should I have used the debug.keystore to create the Places API to test on the emulator?
","","22","<android><google-places-api><keystore><sha><android-keystore>","0","","0","2019-01-16 18:38:24","","1","","","","","2019-01-16 18:38:24",""
"49445562","How to retrieve a unique signature of the OS installed?","I would like to get a footprint of my operating system + hardware installed. I have several RaspberryPi that are connected to a MQTT broker. The topic of each system should have a unique header: 
mypi/da39a3ee5e6b4b0d3255bfef95601890afd80709/kitchen/light

How could I get a shasum or equivalent of my hardware + operating system. 
A naive approach is this one
$ ifconfig -a eth0 | egrep -o '([0-9a-f]{2}:){5}[0-9a-f]{2}' | shasum

But using the MAC address is perhaps too naive. 
Ideally I would like the hash to change if the hardware is physically different. In the case of a Raspberry, the hash will change is I change my raspberry.
After a second though I am not use it is worth including the operating system in the HASH. If I update my Kernel, the hash should be the same. 
","
How could I get a shasum or equivalent of my hardware + operating system. 

You don't define what that means:
Should that hash change if you add some RAM, or some SD card, or some USB device, in your system?
Should that hash change if you replace the hardware by some identical one (e.g. one RaspberryPi burned, and you replace it with another one with the same SD card)? Or by a similar hardware faking to be the original one?
Should that hash change if you (or some adversary) make a minor upgrade of your OS kernel, or if you add some additional package or program in your system?
Should that hash change if you make some minor configuration (e.g. change some configuration file under /etc/, assuming some Linux-like system)?
Notice that on many systems, you can change the MAC address by some software tricks (I don't know if that applies to your RaspberryPi).
So I think that there is no failproof solution to your question.
(in other words, with enough efforts and skills, you can always fake some existing system; you might want that to be difficult enough to be not worth the effort, but that makes a different question; is your typical adversary as powerful as the NSA, or do you just care about a teenager hacker?).
BTW /proc/cpuinfo (see proc(5)) could change with a kernel upgrade, and can be faked quite simply (to stay the same) by some kernel patch even after a hardware change.
Read about trusted computing base.
","22","<linux><sha>","0","-1","1","2018-03-23 09:34:01","49445627","2","","2612235","","2018-03-23 08:52:14","2018-03-23 08:46:49",""
"58191371","Strange representation of Bytes in Python","I've a simple program that hashes a string.
from Crypto.Hash import SHA512

PAYLOAD = ""Hello world""

def sha(message):
    h = SHA512.new()
    h.update(message.encode('ascii'))
    return h.digest()


if __name__ == '__main__':
    print(sha(PAYLOAD))
    print(type(sha(PAYLOAD)))

This is the output,
b'\xb7\xf7\x83\xba\xed\x82\x97\xf0\xdb\x91tb\x18O\xf4\xf0\x8ei\xc2\xd5\xe5\xf7\x9a\x94&\x00\xf9r_X\xce\x1f)\xc1\x819\xbf\x80\xb0l\x0f\xff+\xdd4s\x84R\xec\xf4\x0cH\x8c""\xa7\xe3\xd8\x0c\xdfo\x9c\x1c\rG'

I fail to understand how is this a byte array?
","digest() is documented to return a bytes object, and a bytes object is exactly what you're getting: https://docs.python.org/3/library/stdtypes.html#bytes-objects
bytearray is similar to bytes but isn't quite the same (it's basically a mutable version of bytes).
If you need a list of integers, you could simply call list()
>>> list(b'\xb7\xf7\x83\xba\xed\x82\x97\xf0\xdb\x91tb\x18O\xf4\xf0\x8ei\xc2\xd5\xe5\xf7\x9a\x94&\x00\xf9r_X\xce\x1f)\xc1\x819\xbf\x80\xb0l\x0f\xff+\xdd4s\x84R\xec\xf4\x0cH\x8c""\xa7\xe3\xd8\x0c\xdfo\x9c\x1c\rG')
[183, 247, 131, 186, 237, 130, 151, 240, 219, 145, 116, 98, 24, 79, 244, 240, 142, 105, 194, 213, 229, 247, 154, 148, 38, 0, 249, 114, 95, 88, 206, 31, 41, 193, 129, 57, 191, 128, 176, 108, 15, 255, 43, 221, 52, 115, 132, 82, 236, 244, 12, 72, 140, 34, 167, 227, 216, 12, 223, 111, 156, 28, 13, 71]

If you need a hex representation of the SHA digest, there's hexdigest().
","21","<python><byte><sha>","0","1","1","2019-10-20 12:26:48","58191468","3","","472495","","2019-10-20 12:26:48","2019-10-01 19:47:43",""
"58041008","Openssl fipsld usage in static library","
I have build a FIPS capable openssl library. 
Openssl Version 1.0.2t and FIPS object module 2.0.16.
I was reading the user guide for FIPS object module which told that the last step in building a program with FIPS capable openssl was to use fipsld to link my program with openssl rather than gcc/ld as it computes sha1sum of fipscansiter.o using fipsprelim.c.
After this I need to call FIPS_mode_set(1) which enables fips mode. 
This works if I am generating a executable. But in my project we provide a static library to our customers and we resolve all dependencies at our end, so we unpack libcrypto.a using ar x libcrypto.a and add all the openssl object files to our static library libapi.a.
There is one class(API_DigitalSignature.cpp) which is build as a wrapper around openssl api for digital signature. 

Now the problem is I am confused on how should I use fipsld in my project because I am not generating a program but rather just an archive?
Also I clarified with some security persons that unpacking libcrypto.a doesn't  affect FIPS validation unless we are changing any ciphers.
","","21","<static><openssl><sha><fips><sha1sum>","0","","0","2019-09-21 14:01:19","","0","","","","","2019-09-21 14:01:19",""
"57052898","Can SHA256 EVP_DigestUpdate be used for small data blocks?","My plain C application collects data blocks and concatenates them to a multi-GB file. The size of the incoming data blocks is random between 1 byte and 256KB, and is out of my control. 
I'd like to calculate the sha256 hash while collecting incoming blocks, such that it matches the sha256sum hash of the large resulting file. My starting point is the openssl example at https://www.openssl.org/docs/man1.1.0/man3/EVP_DigestUpdate.html . Whenever a new block arrives, I call my update routine below.
void AddToReadResults(uint32_t bytes)
{
    if(bytes) EVP_DigestUpdate(RdrMdContext, GetHeadBuffer(), bytes);
    TotalBytes += bytes;
}

Given the same set of data blocks as input, I get a consistent repeatable hash. But it does not match the sha256sum of the large concatenated file.
","","21","<c><sha>","0","","0","2019-07-16 08:16:54","","2","","","","","2019-07-16 08:16:54",""
"48332738","Best way to select an array value using a hash? Same value must be selected each time for the same hash","Say I have a regular Javascript array of around 500 words
ie
var words = ['apple', 'banana', cherry'... and a Keccak256 (SHA-3) hash that is generated then stored. I need to use the hash to select a value in the array. Every time the same hash is given, the same value must be selected again. It does not matter which word is initially selected, but all words must have a roughly equal chance of being selected.
The hash is made up of numbers 0-9 and letters a-f, example:
5f16f4c7f149ac4f9510d9cf8cf384038ad348b3bcdc01915f95de12df9d1b02

I would like to use the first 3 characters of the hash to do this, ie 5f1, but if more characters are needed, that's okay.
Tried a few things here, but it hasn't worked out too well, and I end up picking some words more than others. What would be a good way to go about doing this?
Thanks in advance!
","","20","<javascript><arrays><hash><sha><keccak>","0","","0","2018-01-19 01:13:03","","5","","","","","2018-01-19 01:13:03",""
"58469677","Use SHA1 for the purpose of shorting a string","Had a scenario where I need to call a vendor rest api, a key attribute has a definition of 40 in length however my upstream mapping field is of length ~500, was thinking to use SHA1 to hash it, so that the upstream value always able to map to the shorter version of downstream field. Any flaw with this design? Thanks!
","Collisions. H(a) == H(b) can hold when a != b. 
It might be better to have a map table of upstream value to vendor value which would work at least as long as there are less than 256**40 distinct values in the upstream field of a 500 bytes.
","20","<sha>","0","0","1","2019-10-20 03:26:05","","1","","","","","2019-10-20 02:54:56",""
"53348450","Can we specify the number of output tokens generated by sha in java?","I want to check file duplication using token generation. For tokens I am using SHA but the tokens returned have a long length. so can I specify the number of tokens to be returned by sha in java?
","","19","<java><token><sha>","0","","0","2018-11-17 05:37:55","","2","","3235048","","2018-11-17 05:37:55","2018-11-17 05:13:50",""
"53375105","Tell from PGP signature which algorithms served in its creation","I am dealing with a Debian repository that apparently contains an InRelease file that may have been signed in a way that is no longer appropriate. The symptom is that clients receive the warning The repository '... InRelease is not signed when they run apt-get update.
InRelease contains sections starting with -----BEGIN PGP SIGNED MESSAGE----- and -----BEGIN PGP SIGNATURE-----, so it is signed, and I've already adjusted my PGP personal-digest-preferences and personal-cipher-preferences settings to exclude SHA-1 from use. But something is still lacking.
My question is this: When I inspect the actual signature (the ASCII armor between ----BEGIN PGP SIGNATURE----- and -----END PGP SIGNATURE-----) is there a way to tell which algorithms served in its creation, and specifically whether SHA-1 served in its creation? I guess the answer is no, but I'd like to hear an expert's opinion.
UPDATE The first line after -----BEGIN PGP SIGNATURE----- reads Hash: SHA256 so that looks good (since I've chosen SHA256 first in the preferences settings), but the problem still persists.
UPDATE I've now excluded SHA-1 also from indices by calling apt-ftparchive packages and apt-ftparchive release (for creating files Packages and Releases respectively) with additional parameters --no-sha1, but the problem still persists.
","So now it looks as if the signature was already valid (after removing SHA-1 digests as described), but the signing key was not yet known. 
So adding the signing key to clients with add-key add key.pub made the problem disappear.
","18","<security><sha><apt><pgp>","0","0","1","2018-11-19 14:44:30","53377029","0","","9164810","","2018-11-19 13:36:50","2018-11-19 12:54:23",""
"38236884","Do two hash output of same iteration count from different input always different?","I think I believe that a hash output of same iteration count of a same input always yields same.
Let's say two different inputs.
static byte[] hash(byte[] bytes, final int count)
    throws NoSuchAlgorithmException {
    final MessageDigest digest = MessageDigest.getInstance(""SHA-256"");
    for (int i = 0; i < count; i++) {
        bytes = digest.digest(bytes);
    }
    return bytes;
}

With two different input, will two outputs with same count always different?
byte[] john = digest(""john"".getBytes(), 1024);
byte[] jane = digest(""jane"".getBytes(), 1024);

I'm planning to define my database's username column as BINARY(32) and I wonder whether I should set the column UNIQUE or not.
","All hashes obviously collide eventually, for input of length greater than the size of the digest. Moreover, few attempt to guarantee lack-of-collisions even for input that is close to the size of the digest
How often that happens - under typical, pedantic, or similar inputs - is a result of the quality of the hash.
(for example, a CRC is guaranteed to have distinct hashes for input that changes by a single bit - but secure hashes can't offer that)
","18","<database><hash><unique-constraint><sha>","0","1","1","2016-07-07 03:18:52","38237076","0","3","","","","2016-07-07 02:50:54",""
"58536494","On Chrome Viewing Certificate Signature Algorithm for SHA224WITHRSA is displaying OID instead of SHA224","I am using a self signed X509Certificate with version V1 and sha224 as signature algorithm, on a https server and upon accessing the server URL from chrome, the webpage loads successfully. When I try to view the certificate on chrome, I can see that the Signature Algorithm field contains the OID value and not SHA224 (Attached the screenshot of the same). When I export the same certificate to local system and print its contents on the command line using openssl, the signature algorithm shows correctly as SHA224WITHRSA and not the OID. 
I tried using another certificate having sha256 as signature algorithm on my server and the View certificate on chrome correctly shows the Signature Algorithm field as SHA256RSA as expected and not OID.
Why does chrome show the OID in the Signature Algorithm field of the View Certificate ONLY FOR sha224?
 
","It is simple: object identifier for SHA224 is not registered in Windows OID database, so it shows raw OID value, instead of mapped friendly name.
Update:
OID database is hidden and you can register OID mapping using CryptRegisterOIDInfo function: https://docs.microsoft.com/en-us/windows/win32/api/wincrypt/nf-wincrypt-cryptregisteroidinfo. There are no other built-in tools to register OID mapping I'm aware of.
","18","<google-chrome><ssl-certificate><x509certificate><sha>","0","0","1","2019-10-24 08:52:16","","0","","","","","2019-10-24 07:44:04",""
"58465471","What is the alphanumeric hyphen pattern we find in IDs sometimes?","I was doing a git course in Pluralsight and realized there`s a clipID value inside of the url header that uniquely identify a learning course.
Like that 5a64eace-6ebd-4db1-b0c0-921dbba2d0b9.
The ID has a pattern that is 8alpha-4alpha-4alpha-4alpha-12alpha characters.
Why is that? Is each of the alphanumeric element the hash representation of some data like SHA(Name)-SHA(date)-SHA(time)? Is it a good practice to create an ID like that?
","","17","<hash><pattern-matching><sha><alphanumeric><id>","0","","0","2019-10-19 16:01:53","","3","","","","","2019-10-19 16:01:53",""
"52827217","checksum is same for different images","I am sending thousands of images from one system to another over FTP. Initially, I'll dump all the images, but later on, I want to send only those images which are changed.
I haven't found any concrete solution to figure out changed images based on the updated timestamp in windows. Therefore, I decided the following approach: 
1.) Generate checksums for all the files and store them somewhere. Maybe database or filesystem.
2.) Every time I send files to another system, compare the checksums and send only the files which have different checksums.
In order to test the above, I tried to generate a checksum (SHA and MD5) for two different images, and the checksum was the same.
Following is the sample code: 
package com.test;

import java.io.FileInputStream;
import java.io.IOException;

import org.apache.commons.codec.digest.DigestUtils;

public class TestHash {
     public static void main(String[] args) throws IOException {

            String checksumSHA256 = DigestUtils.sha256Hex(new FileInputStream(""monkey_11.jpg""));
            System.out.println(""checksumSHA256 : "" + checksumSHA256);

            String checksumMD5 = DigestUtils.md5Hex(new FileInputStream(""monkey_11.jpg""));
            System.out.println(""checksumMD5 : "" + checksumMD5);


            String checksumSHA256_1 = DigestUtils.sha256Hex(new FileInputStream(""monkey.jpg""));
            System.out.println(""checksumSHA256 : "" + checksumSHA256_1);

            String checksumMD5_1 = DigestUtils.md5Hex(new FileInputStream(""monkey.jpg""));
            System.out.println(""checksumMD5 : "" + checksumMD5_1);

        }
}

I'm wondering why the checksums are the same? Is there another way to identify updated images?
","","17","<hashtable><md5><checksum><sha><java-security>","0","","0","2018-10-16 02:42:07","","4","","","","","2018-10-16 02:42:07",""
"57280706","How to get the revision at a specific date, of a file from a Github repository?","How many of you ever clicked on a Github link to a file version, just to find out that who made the link didn't care of putting a fixed commit sha (or, protip: simply pressing Y) when copying it from Github, and that the link is expired because now the master branch points to a different commit that at the time when the link was made, and the file was moved and changed in the meanwhile?
🖐✋🏿🙋🏽‍♀️🖐🙋🏼‍♀️🤚🏽🤚🏻🙋🏿‍♂️🙋🏻‍♂️🖐
I see...
So is there any Github url parameter or a way to specify the branch path, that would allow me to display the version of the branch at a specific time in the past?
Somethinge like https://github.com/repo/master/old/path/to/file?date=2019-07-31T00:15:43+00:00.
The alternative is to find out the date from the, let's say, Github issue's comment where you copied/clicked the link from and start to scroll through the branch's Commits pagination, until (almost at the last page..) you finally find the most recent commit closer to the date you found, so you can start to Browse files for the commit just found in order to get, after wasting 10/15 minutes, at the version of the file that the initial link author intended to actually lead to.
Or you need to ask an answer on SO.
Not really convenient.
Is there such a parameter supported by Github? 🧐
","You could make a curl, using the GitHub API, in order to list commits.
That particular API (GET /repos/:owner/:repo/commits) has a until parameter:

Only commits before this date will be returned. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.

The first commit listed would be the one you are looking for.
You can see examples here and here.
","17","<date><github><commit><sha><revision>","1","1","1","2019-07-31 12:42:37","","2","1","3088045","","2019-07-31 12:42:37","2019-07-30 22:12:43",""
"57443741","Why is MessageDigest returning same byte[] value for different strings","I am trying to practice java cryptography, but I noticed when I try to get the byte array of certain strings the byte array is always the same, why is this?
Here is my code snippet :
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

public class Main {

    public static void main(String[] args) {
        try {
            MessageDigest messageDigest = MessageDigest.getInstance(""SHA-1"");
            String message = ""you are welcome"";
            messageDigest.update(message.getBytes());
            byte[] md = messageDigest.digest();

            System.out.println(md);

        } catch (NoSuchAlgorithmException e) {

            System.out.println(""no such algorithm"");
            e.printStackTrace();
        }
    }
}

and no matter the value of my message variable, the result always printed out is [B@1540e19d
but what makes me more curious is when I convert my byte[] md into hex values,
    import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

public class Main {

    public static void main(String[] args) {
        try {
            MessageDigest messageDigest = MessageDigest.getInstance(""SHA-1"");
            String message = ""thank you"";
            messageDigest.update(message.getBytes());
            byte[] md = messageDigest.digest();

            System.out.println(md);

            //Converting the byte array in to HexString format
            StringBuffer hexString = new StringBuffer();

            for (int i = 0;i< md.length;i++) {
                hexString.append(Integer.toHexString(0xFF & md[i]));
            }
            System.out.println(""Hex format : "" + hexString.toString());

        } catch (NoSuchAlgorithmException e) {

            System.out.println(""no such algorithm"");
            e.printStackTrace();
        }
    }


}

it produces totally different values for my StringBuffer hexString even the byte[] md is the same for two different strings. Please, could someone explain?
","","16","<java><sha>","0","","0","2019-08-10 16:11:51","","3","1","","","","2019-08-10 16:11:51","2019-08-10 16:37:02"
"41283317","Is it better to hash individual parts instead of hashing hashes of the individual part?","I have several byte arrays from which I have to calculate the SHA hash. Something like this:
(b1, b2, ..., bn) -> SHA hash

If I know instead hash the individual byte arrays and then calculate the SHA hash from this, does this have the same ""security"", or chance of a collision?
b1 -> H1,
b2 -> H2
(H1, H2) -> Final Hash

Or simpler asked: Which method is ""better""? **
** I'm not sure how a should formulate this question (-:
","","16","<hash><sha>","0","","0","2016-12-22 12:34:26","","5","","","","","2016-12-22 12:34:26",""
"58499287","Create a sha1 signature with sha2 (256) certificate. It's possible. Why?","I am currently working on improving the signing of our .NET applications. So far I have always created a sha1 signature. Now I want to create an additional sha2 (256) signature. I stumbled across this article:
https://www.digicert.com/code-signing/code-signing-dual-signing-sha256-sha1.htm
There is talk about the fact that you need a corresponding certificate of the same type for the sha1 or sha2 signing.
So I checked my certificate and saw that it was issued with the ""Signature hash algorithm"" sha256.
But with this certificate I always created sha1 signatures for our .NET applications without any problems (with signtool.exe).
My question: Why can I create a sha1 signature with a sha256 certificate and is that a problem? Would it be better to use a sha1 certiifkat (I could download one from my certification authority)?
Translated with www.DeepL.com/Translator
","","15","<.net><sha><signtool>","0","","0","2019-10-22 07:40:27","","0","","","","","2019-10-22 07:40:27",""
"51083025","Replicating `git hash-object` with non-ascii characters","Trying to replicate hash-object I found that is not working when using non-ascii characters.
$ printf hola | git hash-object -w --stdin
b8b4a4e2a5db3ebed5f5e02beb3e2d27bca9fc9a
$ printf ""blob 4\0hola"" | shasum
b8b4a4e2a5db3ebed5f5e02beb3e2d27bca9fc9a

But if I add the Pound symbol
$ printf hola£ | git hash-object -w --stdin
8f9852933655612593d0bbd43c9f7c6f25d947a0
$ printf ""blob 5\0hola£"" | shasum
54386ef126fcfc9e8242c6d6bade401b1f27999a

Any idea why is this happening?
Related: How to assign a Git SHA1's to a file without Git?
","The number defines number of bytes, not characters
£ in UTF-8 is 2-byte wide (0xc2 0xa3), thus:
printf ""blob 6\0hola£"" | shasum is what you want
which returns 8f9852933655612593d0bbd43c9f7c6f25d947a0 as expected.
Check yourself:
Unpack the content of the just written object:
printf ""\x1f\x8b\x08\x00\x00\x00\x00\x00"" | cat - .git/objects/8f/9852933655612593d0bbd43c9f7c6f25d947a0 | gzip -dc | xxd

(or use pigz: Deflate command line tool)
","14","<git><hash><character-encoding><sha>","0","4","1","2018-06-28 12:43:52","51083282","0","","","","","2018-06-28 12:32:30",""
"46569866","how to keep all files by unduplicating them","This is a bit of an odd request as its not necessarily coding related, but I have been using SHA256 to spot duplicate files. Unfortunately for one reason or another all duplicate files need to be kept and need to be amended slightly for a new SHA256 to be generated.
There are many solutions out there that will delete duplicate files etc, but I need a solution that will look for duplicates and as it finds a duplicate, try to unduplicate it.
As I am using pdf, doc and docx files, I was thinking of a solution that adds a blank page at the end of the document with a character. I have been doing this currently manually but something automated would be of much help.
Has anyone come across this issue or know of a possible solution?
Thank you for your help in advance,
Panos 
","","14","<sha>","0","","0","2017-10-04 16:33:14","","2","","","","","2017-10-04 16:33:14",""
"58392040","Get file stored to Subversion (SVN) via Checksum (SHA Hash)","Subversion info shows the checksum (SHA1 hash since 1.8) of comitted files. Is there a command to get the file info via its checksum? 
I would like to (mis?)use Subversion as a Key-Value-Store.
","","13","<svn><checksum><sha><key-value-store>","1","","0","2019-10-15 10:00:55","","0","","","","","2019-10-15 10:00:55",""
"58301698","SHA256 hash of binary data using Forge","I want to use Forge to create a SHA256 hash. My test uses the binary data ""\x01\x02\x03\x04\x05\x06\x07\x08"" which is in a file. This produces the SHA256 using sha256sum on a Linux shell: 
66840dda154e8a113c31dd0ad32f7f3a366a80e8136979d8f5a101d3d29d6f72

I than used the Web Crypto API (crypto.subtle.digest()) to calculate the hash. I'm using the ArrayBuffer from the Uint8Array here. Still OK, calculates the same hash:
let data = new Uint8Array([1, 2, 3, 4, 5, 6, 7, 8]);
const digest = await crypto.subtle.digest('SHA-256', data.buffer);
const array = Array.from(new Uint8Array(digest));
const hex = array.map(byte => ('00' + byte.toString(16)).slice(-2)).join('');
// 66840dda154e8a113c31dd0ad32f7f3a366a80e8136979d8f5a101d3d29d6f72

Now I want to use Forge library to calculate the hash and I can't get it to produce the correct hash:
let data = new Uint8Array([1, 2, 3, 4, 5, 6, 7, 8]);
const md = forge.md.sha256.create();
md.update(data);
let hex = md.digest().toHex();
// 181e2276640163cbb29a50fa846412edb6489b3c73e82ca4b64ae114b752a542

let data = new Uint8Array([1, 2, 3, 4, 5, 6, 7, 8]);
const md = forge.md.sha256.create();
let buffer = forge.util.createBuffer(data);
md.update(buffer);
let hex = md.digest().toHex();
// 1d4e1124c22199ab44fc3acb57e2f68f18bee390d8a52d62b15c23d3fc157846

How to create a SHA256 hash from binary data using Forge?
","Ok, I found the solution in an issue on Github:
let data = new Uint8Array([1, 2, 3, 4, 5, 6, 7, 8]);
const md = forge.md.sha256.create();
let buffer = String.fromCharCode.apply(null, data); // <-- HERE
md.update(buffer);
let hex = md.digest().toHex();
// 66840dda154e8a113c31dd0ad32f7f3a366a80e8136979d8f5a101d3d29d6f72

","12","<javascript><hash><sha>","0","0","1","2019-10-09 10:16:06","","0","","","","","2019-10-09 10:03:12",""
"55108313","Hoes does Firebase and Google protect their API's using Android's SHA-1 and package name?","When you signup for Firebase or any Google service for Android, it requires you to provide an SHA-1 from the keystone that you will use to sign and release your application. 
I am wondering how do they use this to verify that it is the trusted application that is making API calls. How can I incorporate similar behaviour in my backend API's?
","","10","<android><api><sha>","0","","0","2019-03-11 18:37:48","","0","","","","","2019-03-11 18:37:48",""
