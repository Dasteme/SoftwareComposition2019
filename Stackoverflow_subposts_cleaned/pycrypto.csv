post_link,title,body_question,body_answer,viewcount,tags,score,score_answer,answercount,LastActivityDate,AcceptedAnswerId,CommentCount,FavoriteCount,LastEditorUserId,LastEditorDisplayName,LastEditDate,CreationDate,ClosedDate
"12524994","Encrypt & Decrypt using PyCrypto AES 256","I'm trying to build two functions using PyCrypto that accept two parameters: the message and the key, and then encrypt/decrypt the message.
I found several links on the web to help me out, but each one of them has flaws:
This one at codekoala uses os.urandom, which is discouraged by PyCrypto.
Moreover, the key I give to the function is not guaranteed to have the exact length expected. What can I do to make that happen ?
Also, there are several modes, which one is recommended? I don't know what to use :/
Finally, what exactly is the IV? Can I provide a different IV for encrypting and decrypting, or will this return in a different result?
Here's what I've done so far:
from Crypto import Random
from Crypto.Cipher import AES
import base64

BLOCK_SIZE=32

def encrypt(message, passphrase):
    # passphrase MUST be 16, 24 or 32 bytes long, how can I do that ?
    IV = Random.new().read(BLOCK_SIZE)
    aes = AES.new(passphrase, AES.MODE_CFB, IV)
    return base64.b64encode(aes.encrypt(message))

def decrypt(encrypted, passphrase):
    IV = Random.new().read(BLOCK_SIZE)
    aes = AES.new(passphrase, AES.MODE_CFB, IV)
    return aes.decrypt(base64.b64decode(encrypted))

","You can get a passphrase out of an arbitrary password by using a cryptographic hash function (NOT Python's builtin hash) like SHA-1 or SHA-256. Python includes support for both in its standard library:
import hashlib

hashlib.sha1(""this is my awesome password"").digest() # => a 20 byte string
hashlib.sha256(""another awesome password"").digest() # => a 32 byte string

You can truncate a cryptographic hash value just by using [:16] or [:24] and it will retain its security up to the length you specify.
","340716","<python><encryption><padding><pycrypto><initialization-vector>","152","6","12","2019-10-01 06:34:46","21928790","6","87","1816580","","2015-12-22 22:59:57","2012-09-21 05:54:41",""
"12524994","Encrypt & Decrypt using PyCrypto AES 256","I'm trying to build two functions using PyCrypto that accept two parameters: the message and the key, and then encrypt/decrypt the message.
I found several links on the web to help me out, but each one of them has flaws:
This one at codekoala uses os.urandom, which is discouraged by PyCrypto.
Moreover, the key I give to the function is not guaranteed to have the exact length expected. What can I do to make that happen ?
Also, there are several modes, which one is recommended? I don't know what to use :/
Finally, what exactly is the IV? Can I provide a different IV for encrypting and decrypting, or will this return in a different result?
Here's what I've done so far:
from Crypto import Random
from Crypto.Cipher import AES
import base64

BLOCK_SIZE=32

def encrypt(message, passphrase):
    # passphrase MUST be 16, 24 or 32 bytes long, how can I do that ?
    IV = Random.new().read(BLOCK_SIZE)
    aes = AES.new(passphrase, AES.MODE_CFB, IV)
    return base64.b64encode(aes.encrypt(message))

def decrypt(encrypted, passphrase):
    IV = Random.new().read(BLOCK_SIZE)
    aes = AES.new(passphrase, AES.MODE_CFB, IV)
    return aes.decrypt(base64.b64decode(encrypted))

","You may need the following two functions to pad(when do encryption) and unpad(when do decryption) when the length of input is not a multiple of BLOCK_SIZE.
BS = 16
pad = lambda s: s + (BS - len(s) % BS) * chr(BS - len(s) % BS) 
unpad = lambda s : s[:-ord(s[len(s)-1:])]

So you're asking the length of key? You can use the md5sum of the key rather than use it directly.
More, according to my little experience of using PyCrypto, the IV is used to mix up the output of a encryption when input is same, so the IV is chosen as a random string, and use it as part of the encryption output, and then use it to decrypt the message.
And here's my implementation, hope it will be useful for you:
import base64
from Crypto.Cipher import AES
from Crypto import Random

class AESCipher:
    def __init__( self, key ):
        self.key = key

    def encrypt( self, raw ):
        raw = pad(raw)
        iv = Random.new().read( AES.block_size )
        cipher = AES.new( self.key, AES.MODE_CBC, iv )
        return base64.b64encode( iv + cipher.encrypt( raw ) ) 

    def decrypt( self, enc ):
        enc = base64.b64decode(enc)
        iv = enc[:16]
        cipher = AES.new(self.key, AES.MODE_CBC, iv )
        return unpad(cipher.decrypt( enc[16:] ))

","340716","<python><encryption><padding><pycrypto><initialization-vector>","152","142","12","2019-10-01 06:34:46","21928790","6","87","1816580","","2015-12-22 22:59:57","2012-09-21 05:54:41",""
"12524994","Encrypt & Decrypt using PyCrypto AES 256","I'm trying to build two functions using PyCrypto that accept two parameters: the message and the key, and then encrypt/decrypt the message.
I found several links on the web to help me out, but each one of them has flaws:
This one at codekoala uses os.urandom, which is discouraged by PyCrypto.
Moreover, the key I give to the function is not guaranteed to have the exact length expected. What can I do to make that happen ?
Also, there are several modes, which one is recommended? I don't know what to use :/
Finally, what exactly is the IV? Can I provide a different IV for encrypting and decrypting, or will this return in a different result?
Here's what I've done so far:
from Crypto import Random
from Crypto.Cipher import AES
import base64

BLOCK_SIZE=32

def encrypt(message, passphrase):
    # passphrase MUST be 16, 24 or 32 bytes long, how can I do that ?
    IV = Random.new().read(BLOCK_SIZE)
    aes = AES.new(passphrase, AES.MODE_CFB, IV)
    return base64.b64encode(aes.encrypt(message))

def decrypt(encrypted, passphrase):
    IV = Random.new().read(BLOCK_SIZE)
    aes = AES.new(passphrase, AES.MODE_CFB, IV)
    return aes.decrypt(base64.b64decode(encrypted))

","For the benefit of others, here is my decryption implementation which I got to by combining the answers of @Cyril and @Marcus.  This assumes that this coming in via HTTP Request with the encryptedText quoted and base64 encoded.
import base64
import urllib2
from Crypto.Cipher import AES


def decrypt(quotedEncodedEncrypted):
    key = 'SecretKey'

    encodedEncrypted = urllib2.unquote(quotedEncodedEncrypted)

    cipher = AES.new(key)
    decrypted = cipher.decrypt(base64.b64decode(encodedEncrypted))[:16]

    for i in range(1, len(base64.b64decode(encodedEncrypted))/16):
        cipher = AES.new(key, AES.MODE_CBC, base64.b64decode(encodedEncrypted)[(i-1)*16:i*16])
        decrypted += cipher.decrypt(base64.b64decode(encodedEncrypted)[i*16:])[:16]

    return decrypted.strip()

","340716","<python><encryption><padding><pycrypto><initialization-vector>","152","5","12","2019-10-01 06:34:46","21928790","6","87","1816580","","2015-12-22 22:59:57","2012-09-21 05:54:41",""
"12524994","Encrypt & Decrypt using PyCrypto AES 256","I'm trying to build two functions using PyCrypto that accept two parameters: the message and the key, and then encrypt/decrypt the message.
I found several links on the web to help me out, but each one of them has flaws:
This one at codekoala uses os.urandom, which is discouraged by PyCrypto.
Moreover, the key I give to the function is not guaranteed to have the exact length expected. What can I do to make that happen ?
Also, there are several modes, which one is recommended? I don't know what to use :/
Finally, what exactly is the IV? Can I provide a different IV for encrypting and decrypting, or will this return in a different result?
Here's what I've done so far:
from Crypto import Random
from Crypto.Cipher import AES
import base64

BLOCK_SIZE=32

def encrypt(message, passphrase):
    # passphrase MUST be 16, 24 or 32 bytes long, how can I do that ?
    IV = Random.new().read(BLOCK_SIZE)
    aes = AES.new(passphrase, AES.MODE_CFB, IV)
    return base64.b64encode(aes.encrypt(message))

def decrypt(encrypted, passphrase):
    IV = Random.new().read(BLOCK_SIZE)
    aes = AES.new(passphrase, AES.MODE_CFB, IV)
    return aes.decrypt(base64.b64decode(encrypted))

","Here is my implementation and works for me with some fixes and enhances the alignment of the key and secret phrase with 32 bytes and iv to 16 bytes:
import base64
import hashlib
from Crypto import Random
from Crypto.Cipher import AES

class AESCipher(object):

    def __init__(self, key): 
        self.bs = AES.block_size
        self.key = hashlib.sha256(key.encode()).digest()

    def encrypt(self, raw):
        raw = self._pad(raw)
        iv = Random.new().read(AES.block_size)
        cipher = AES.new(self.key, AES.MODE_CBC, iv)
        return base64.b64encode(iv + cipher.encrypt(raw))

    def decrypt(self, enc):
        enc = base64.b64decode(enc)
        iv = enc[:AES.block_size]
        cipher = AES.new(self.key, AES.MODE_CBC, iv)
        return self._unpad(cipher.decrypt(enc[AES.block_size:])).decode('utf-8')

    def _pad(self, s):
        return s + (self.bs - len(s) % self.bs) * chr(self.bs - len(s) % self.bs)

    @staticmethod
    def _unpad(s):
        return s[:-ord(s[len(s)-1:])]

","340716","<python><encryption><padding><pycrypto><initialization-vector>","152","134","12","2019-10-01 06:34:46","21928790","6","87","1816580","","2015-12-22 22:59:57","2012-09-21 05:54:41",""
"12524994","Encrypt & Decrypt using PyCrypto AES 256","I'm trying to build two functions using PyCrypto that accept two parameters: the message and the key, and then encrypt/decrypt the message.
I found several links on the web to help me out, but each one of them has flaws:
This one at codekoala uses os.urandom, which is discouraged by PyCrypto.
Moreover, the key I give to the function is not guaranteed to have the exact length expected. What can I do to make that happen ?
Also, there are several modes, which one is recommended? I don't know what to use :/
Finally, what exactly is the IV? Can I provide a different IV for encrypting and decrypting, or will this return in a different result?
Here's what I've done so far:
from Crypto import Random
from Crypto.Cipher import AES
import base64

BLOCK_SIZE=32

def encrypt(message, passphrase):
    # passphrase MUST be 16, 24 or 32 bytes long, how can I do that ?
    IV = Random.new().read(BLOCK_SIZE)
    aes = AES.new(passphrase, AES.MODE_CFB, IV)
    return base64.b64encode(aes.encrypt(message))

def decrypt(encrypted, passphrase):
    IV = Random.new().read(BLOCK_SIZE)
    aes = AES.new(passphrase, AES.MODE_CFB, IV)
    return aes.decrypt(base64.b64decode(encrypted))

","For someone who would like to use urlsafe_b64encode and urlsafe_b64decode, here are the version that're working for me (after spending some time with the unicode issue)
BS = 16
key = hashlib.md5(settings.SECRET_KEY).hexdigest()[:BS]
pad = lambda s: s + (BS - len(s) % BS) * chr(BS - len(s) % BS)
unpad = lambda s : s[:-ord(s[len(s)-1:])]

class AESCipher:
    def __init__(self, key):
        self.key = key

    def encrypt(self, raw):
        raw = pad(raw)
        iv = Random.new().read(AES.block_size)
        cipher = AES.new(self.key, AES.MODE_CBC, iv)
        return base64.urlsafe_b64encode(iv + cipher.encrypt(raw)) 

    def decrypt(self, enc):
        enc = base64.urlsafe_b64decode(enc.encode('utf-8'))
        iv = enc[:BS]
        cipher = AES.new(self.key, AES.MODE_CBC, iv)
        return unpad(cipher.decrypt(enc[BS:]))

","340716","<python><encryption><padding><pycrypto><initialization-vector>","152","6","12","2019-10-01 06:34:46","21928790","6","87","1816580","","2015-12-22 22:59:57","2012-09-21 05:54:41",""
"12524994","Encrypt & Decrypt using PyCrypto AES 256","I'm trying to build two functions using PyCrypto that accept two parameters: the message and the key, and then encrypt/decrypt the message.
I found several links on the web to help me out, but each one of them has flaws:
This one at codekoala uses os.urandom, which is discouraged by PyCrypto.
Moreover, the key I give to the function is not guaranteed to have the exact length expected. What can I do to make that happen ?
Also, there are several modes, which one is recommended? I don't know what to use :/
Finally, what exactly is the IV? Can I provide a different IV for encrypting and decrypting, or will this return in a different result?
Here's what I've done so far:
from Crypto import Random
from Crypto.Cipher import AES
import base64

BLOCK_SIZE=32

def encrypt(message, passphrase):
    # passphrase MUST be 16, 24 or 32 bytes long, how can I do that ?
    IV = Random.new().read(BLOCK_SIZE)
    aes = AES.new(passphrase, AES.MODE_CFB, IV)
    return base64.b64encode(aes.encrypt(message))

def decrypt(encrypted, passphrase):
    IV = Random.new().read(BLOCK_SIZE)
    aes = AES.new(passphrase, AES.MODE_CFB, IV)
    return aes.decrypt(base64.b64decode(encrypted))

","from Crypto import Random
from Crypto.Cipher import AES
import base64

BLOCK_SIZE=16
def trans(key):
     return md5.new(key).digest()

def encrypt(message, passphrase):
    passphrase = trans(passphrase)
    IV = Random.new().read(BLOCK_SIZE)
    aes = AES.new(passphrase, AES.MODE_CFB, IV)
    return base64.b64encode(IV + aes.encrypt(message))

def decrypt(encrypted, passphrase):
    passphrase = trans(passphrase)
    encrypted = base64.b64decode(encrypted)
    IV = encrypted[:BLOCK_SIZE]
    aes = AES.new(passphrase, AES.MODE_CFB, IV)
    return aes.decrypt(encrypted[BLOCK_SIZE:])

","340716","<python><encryption><padding><pycrypto><initialization-vector>","152","1","12","2019-10-01 06:34:46","21928790","6","87","1816580","","2015-12-22 22:59:57","2012-09-21 05:54:41",""
"12524994","Encrypt & Decrypt using PyCrypto AES 256","I'm trying to build two functions using PyCrypto that accept two parameters: the message and the key, and then encrypt/decrypt the message.
I found several links on the web to help me out, but each one of them has flaws:
This one at codekoala uses os.urandom, which is discouraged by PyCrypto.
Moreover, the key I give to the function is not guaranteed to have the exact length expected. What can I do to make that happen ?
Also, there are several modes, which one is recommended? I don't know what to use :/
Finally, what exactly is the IV? Can I provide a different IV for encrypting and decrypting, or will this return in a different result?
Here's what I've done so far:
from Crypto import Random
from Crypto.Cipher import AES
import base64

BLOCK_SIZE=32

def encrypt(message, passphrase):
    # passphrase MUST be 16, 24 or 32 bytes long, how can I do that ?
    IV = Random.new().read(BLOCK_SIZE)
    aes = AES.new(passphrase, AES.MODE_CFB, IV)
    return base64.b64encode(aes.encrypt(message))

def decrypt(encrypted, passphrase):
    IV = Random.new().read(BLOCK_SIZE)
    aes = AES.new(passphrase, AES.MODE_CFB, IV)
    return aes.decrypt(base64.b64decode(encrypted))

","It's little late but i think this will be very helpful. No one mention about use  scheme like PKCS#7 padding. You can use it instead the previous functions to pad(when do encryption) and unpad(when do decryption).i will provide the full Source Code below.
import base64
import hashlib
from Crypto import Random
from Crypto.Cipher import AES
import pkcs7
class Encryption:

    def __init__(self):
        pass

    def Encrypt(self, PlainText, SecurePassword):
        pw_encode = SecurePassword.encode('utf-8')
        text_encode = PlainText.encode('utf-8')

        key = hashlib.sha256(pw_encode).digest()
        iv = Random.new().read(AES.block_size)

        cipher = AES.new(key, AES.MODE_CBC, iv)
        pad_text = pkcs7.encode(text_encode)
        msg = iv + cipher.encrypt(pad_text)

        EncodeMsg = base64.b64encode(msg)
        return EncodeMsg

    def Decrypt(self, Encrypted, SecurePassword):
        decodbase64 = base64.b64decode(Encrypted.decode(""utf-8""))
        pw_encode = SecurePassword.decode('utf-8')

        iv = decodbase64[:AES.block_size]
        key = hashlib.sha256(pw_encode).digest()

        cipher = AES.new(key, AES.MODE_CBC, iv)
        msg = cipher.decrypt(decodbase64[AES.block_size:])
        pad_text = pkcs7.decode(msg)

        decryptedString = pad_text.decode('utf-8')
        return decryptedString


import StringIO
import binascii


def decode(text, k=16):
    nl = len(text)
    val = int(binascii.hexlify(text[-1]), 16)
    if val > k:
        raise ValueError('Input is not padded or padding is corrupt')

    l = nl - val
    return text[:l]


def encode(text, k=16):
    l = len(text)
    output = StringIO.StringIO()
    val = k - (l % k)
    for _ in xrange(val):
        output.write('%02x' % val)
    return text + binascii.unhexlify(output.getvalue())


","340716","<python><encryption><padding><pycrypto><initialization-vector>","152","2","12","2019-10-01 06:34:46","21928790","6","87","1816580","","2015-12-22 22:59:57","2012-09-21 05:54:41",""
"12524994","Encrypt & Decrypt using PyCrypto AES 256","I'm trying to build two functions using PyCrypto that accept two parameters: the message and the key, and then encrypt/decrypt the message.
I found several links on the web to help me out, but each one of them has flaws:
This one at codekoala uses os.urandom, which is discouraged by PyCrypto.
Moreover, the key I give to the function is not guaranteed to have the exact length expected. What can I do to make that happen ?
Also, there are several modes, which one is recommended? I don't know what to use :/
Finally, what exactly is the IV? Can I provide a different IV for encrypting and decrypting, or will this return in a different result?
Here's what I've done so far:
from Crypto import Random
from Crypto.Cipher import AES
import base64

BLOCK_SIZE=32

def encrypt(message, passphrase):
    # passphrase MUST be 16, 24 or 32 bytes long, how can I do that ?
    IV = Random.new().read(BLOCK_SIZE)
    aes = AES.new(passphrase, AES.MODE_CFB, IV)
    return base64.b64encode(aes.encrypt(message))

def decrypt(encrypted, passphrase):
    IV = Random.new().read(BLOCK_SIZE)
    aes = AES.new(passphrase, AES.MODE_CFB, IV)
    return aes.decrypt(base64.b64decode(encrypted))

","Another take on this (heavily derived from solutions above) but

uses null for padding 
does not use lambda (never been a fan)
tested with python 2.7 and 3.6.5
#!/usr/bin/python2.7
# you'll have to adjust for your setup, e.g., #!/usr/bin/python3


import base64, re
from Crypto.Cipher import AES
from Crypto import Random
from django.conf import settings

class AESCipher:
    """"""
      Usage:
      aes = AESCipher( settings.SECRET_KEY[:16], 32)
      encryp_msg = aes.encrypt( 'ppppppppppppppppppppppppppppppppppppppppppppppppppppppp' )
      msg = aes.decrypt( encryp_msg )
      print(""'{}'"".format(msg))
    """"""
    def __init__(self, key, blk_sz):
        self.key = key
        self.blk_sz = blk_sz

    def encrypt( self, raw ):
        if raw is None or len(raw) == 0:
            raise NameError(""No value given to encrypt"")
        raw = raw + '\0' * (self.blk_sz - len(raw) % self.blk_sz)
        raw = raw.encode('utf-8')
        iv = Random.new().read( AES.block_size )
        cipher = AES.new( self.key.encode('utf-8'), AES.MODE_CBC, iv )
        return base64.b64encode( iv + cipher.encrypt( raw ) ).decode('utf-8')

    def decrypt( self, enc ):
        if enc is None or len(enc) == 0:
            raise NameError(""No value given to decrypt"")
        enc = base64.b64decode(enc)
        iv = enc[:16]
        cipher = AES.new(self.key.encode('utf-8'), AES.MODE_CBC, iv )
        return re.sub(b'\x00*$', b'', cipher.decrypt( enc[16:])).decode('utf-8')


","340716","<python><encryption><padding><pycrypto><initialization-vector>","152","3","12","2019-10-01 06:34:46","21928790","6","87","1816580","","2015-12-22 22:59:57","2012-09-21 05:54:41",""
"12524994","Encrypt & Decrypt using PyCrypto AES 256","I'm trying to build two functions using PyCrypto that accept two parameters: the message and the key, and then encrypt/decrypt the message.
I found several links on the web to help me out, but each one of them has flaws:
This one at codekoala uses os.urandom, which is discouraged by PyCrypto.
Moreover, the key I give to the function is not guaranteed to have the exact length expected. What can I do to make that happen ?
Also, there are several modes, which one is recommended? I don't know what to use :/
Finally, what exactly is the IV? Can I provide a different IV for encrypting and decrypting, or will this return in a different result?
Here's what I've done so far:
from Crypto import Random
from Crypto.Cipher import AES
import base64

BLOCK_SIZE=32

def encrypt(message, passphrase):
    # passphrase MUST be 16, 24 or 32 bytes long, how can I do that ?
    IV = Random.new().read(BLOCK_SIZE)
    aes = AES.new(passphrase, AES.MODE_CFB, IV)
    return base64.b64encode(aes.encrypt(message))

def decrypt(encrypted, passphrase):
    IV = Random.new().read(BLOCK_SIZE)
    aes = AES.new(passphrase, AES.MODE_CFB, IV)
    return aes.decrypt(base64.b64decode(encrypted))

","Let me address your question about ""modes."" AES256 is a kind of block cipher. It takes as input a 32-byte key and a 16-byte string, called the block and outputs a block. We use AES in a mode of operation in order to encrypt. The solutions above suggest using CBC, which is one example. Another is called CTR, and it's somewhat easier to use:
from Crypto.Cipher import AES
from Crypto.Util import Counter
from Crypto import Random

# AES supports multiple key sizes: 16 (AES128), 24 (AES192), or 32 (AES256).
key_bytes = 32

# Takes as input a 32-byte key and an arbitrary-length plaintext and returns a
# pair (iv, ciphtertext). ""iv"" stands for initialization vector.
def encrypt(key, plaintext):
    assert len(key) == key_bytes

    # Choose a random, 16-byte IV.
    iv = Random.new().read(AES.block_size)

    # Convert the IV to a Python integer.
    iv_int = int(binascii.hexlify(iv), 16) 

    # Create a new Counter object with IV = iv_int.
    ctr = Counter.new(AES.block_size * 8, initial_value=iv_int)

    # Create AES-CTR cipher.
    aes = AES.new(key, AES.MODE_CTR, counter=ctr)

    # Encrypt and return IV and ciphertext.
    ciphertext = aes.encrypt(plaintext)
    return (iv, ciphertext)

# Takes as input a 32-byte key, a 16-byte IV, and a ciphertext, and outputs the
# corresponding plaintext.
def decrypt(key, iv, ciphertext):
    assert len(key) == key_bytes

    # Initialize counter for decryption. iv should be the same as the output of
    # encrypt().
    iv_int = int(iv.encode('hex'), 16) 
    ctr = Counter.new(AES.block_size * 8, initial_value=iv_int)

    # Create AES-CTR cipher.
    aes = AES.new(key, AES.MODE_CTR, counter=ctr)

    # Decrypt and return the plaintext.
    plaintext = aes.decrypt(ciphertext)
    return plaintext

(iv, ciphertext) = encrypt(key, 'hella')
print decrypt(key, iv, ciphertext)

This is often referred to as AES-CTR. I would advise caution in using AES-CBC with PyCrypto. The reason is that it requires you to specify the padding scheme, as exemplified by the other solutions given. In general, if you're not very careful about the padding, there are attacks that completely break encryption! 
Now, it's important to note that the key must be a random, 32-byte string; a password does not suffice. Normally, the key is generated like so:
# Nominal way to generate a fresh key. This calls the system's random number
# generator (RNG).
key1 = Random.new().read(key_bytes)

A key may be derived from a password, too:
# It's also possible to derive a key from a password, but it's important that
# the password have high entropy, meaning difficult to predict.
password = ""This is a rather weak password.""

# For added # security, we add a ""salt"", which increases the entropy.
#
# In this example, we use the same RNG to produce the salt that we used to
# produce key1.
salt_bytes = 8 
salt = Random.new().read(salt_bytes)

# Stands for ""Password-based key derivation function 2""
key2 = PBKDF2(password, salt, key_bytes)

Some solutions above suggest using SHA256 for deriving the key, but this is generally considered bad cryptographic practice.
Check out wikipedia for more on modes of operation.
","340716","<python><encryption><padding><pycrypto><initialization-vector>","152","11","12","2019-10-01 06:34:46","21928790","6","87","1816580","","2015-12-22 22:59:57","2012-09-21 05:54:41",""
"12524994","Encrypt & Decrypt using PyCrypto AES 256","I'm trying to build two functions using PyCrypto that accept two parameters: the message and the key, and then encrypt/decrypt the message.
I found several links on the web to help me out, but each one of them has flaws:
This one at codekoala uses os.urandom, which is discouraged by PyCrypto.
Moreover, the key I give to the function is not guaranteed to have the exact length expected. What can I do to make that happen ?
Also, there are several modes, which one is recommended? I don't know what to use :/
Finally, what exactly is the IV? Can I provide a different IV for encrypting and decrypting, or will this return in a different result?
Here's what I've done so far:
from Crypto import Random
from Crypto.Cipher import AES
import base64

BLOCK_SIZE=32

def encrypt(message, passphrase):
    # passphrase MUST be 16, 24 or 32 bytes long, how can I do that ?
    IV = Random.new().read(BLOCK_SIZE)
    aes = AES.new(passphrase, AES.MODE_CFB, IV)
    return base64.b64encode(aes.encrypt(message))

def decrypt(encrypted, passphrase):
    IV = Random.new().read(BLOCK_SIZE)
    aes = AES.new(passphrase, AES.MODE_CFB, IV)
    return aes.decrypt(base64.b64decode(encrypted))

","Grateful for the other answers which inspired but didn't work for me.  After spending hours trying to figure out how it works, I came up with the implementation below with the newest PyCryptodomex library (it is another story how I managed to set it up behind proxy, on Windows, in a virtualenv.. phew)  Working on your implementation, remember to write down padding, encoding, encrypting steps (and vice versa). You have to pack and unpack keeping in mind the order.

import base64
import hashlib
from Cryptodome.Cipher import AES
from Cryptodome.Random import get_random_bytes

__key__ = hashlib.sha256(b'16-character key').digest()

def encrypt(raw):
    BS = AES.block_size
    pad = lambda s: s + (BS - len(s) % BS) * chr(BS - len(s) % BS)

    raw = base64.b64encode(pad(raw).encode('utf8'))
    iv = get_random_bytes(AES.block_size)
    cipher = AES.new(key= __key__, mode= AES.MODE_CFB,iv= iv)
    return base64.b64encode(iv + cipher.encrypt(raw))

def decrypt(enc):
    unpad = lambda s: s[:-ord(s[-1:])]

    enc = base64.b64decode(enc)
    iv = enc[:AES.block_size]
    cipher = AES.new(__key__, AES.MODE_CFB, iv)
    return unpad(base64.b64decode(cipher.decrypt(enc[AES.block_size:])).decode('utf8'))

","340716","<python><encryption><padding><pycrypto><initialization-vector>","152","4","12","2019-10-01 06:34:46","21928790","6","87","1816580","","2015-12-22 22:59:57","2012-09-21 05:54:41",""
"12524994","Encrypt & Decrypt using PyCrypto AES 256","I'm trying to build two functions using PyCrypto that accept two parameters: the message and the key, and then encrypt/decrypt the message.
I found several links on the web to help me out, but each one of them has flaws:
This one at codekoala uses os.urandom, which is discouraged by PyCrypto.
Moreover, the key I give to the function is not guaranteed to have the exact length expected. What can I do to make that happen ?
Also, there are several modes, which one is recommended? I don't know what to use :/
Finally, what exactly is the IV? Can I provide a different IV for encrypting and decrypting, or will this return in a different result?
Here's what I've done so far:
from Crypto import Random
from Crypto.Cipher import AES
import base64

BLOCK_SIZE=32

def encrypt(message, passphrase):
    # passphrase MUST be 16, 24 or 32 bytes long, how can I do that ?
    IV = Random.new().read(BLOCK_SIZE)
    aes = AES.new(passphrase, AES.MODE_CFB, IV)
    return base64.b64encode(aes.encrypt(message))

def decrypt(encrypted, passphrase):
    IV = Random.new().read(BLOCK_SIZE)
    aes = AES.new(passphrase, AES.MODE_CFB, IV)
    return aes.decrypt(base64.b64decode(encrypted))

","
https://stackoverflow.com/a/21928790/11402877

compatible utf-8 encoding
def _pad(self, s):
    s = s.encode()
    res = s + (self.bs - len(s) % self.bs) * chr(self.bs - len(s) % self.bs).encode()
    return res

","340716","<python><encryption><padding><pycrypto><initialization-vector>","152","1","12","2019-10-01 06:34:46","21928790","6","87","1816580","","2015-12-22 22:59:57","2012-09-21 05:54:41",""
"12524994","Encrypt & Decrypt using PyCrypto AES 256","I'm trying to build two functions using PyCrypto that accept two parameters: the message and the key, and then encrypt/decrypt the message.
I found several links on the web to help me out, but each one of them has flaws:
This one at codekoala uses os.urandom, which is discouraged by PyCrypto.
Moreover, the key I give to the function is not guaranteed to have the exact length expected. What can I do to make that happen ?
Also, there are several modes, which one is recommended? I don't know what to use :/
Finally, what exactly is the IV? Can I provide a different IV for encrypting and decrypting, or will this return in a different result?
Here's what I've done so far:
from Crypto import Random
from Crypto.Cipher import AES
import base64

BLOCK_SIZE=32

def encrypt(message, passphrase):
    # passphrase MUST be 16, 24 or 32 bytes long, how can I do that ?
    IV = Random.new().read(BLOCK_SIZE)
    aes = AES.new(passphrase, AES.MODE_CFB, IV)
    return base64.b64encode(aes.encrypt(message))

def decrypt(encrypted, passphrase):
    IV = Random.new().read(BLOCK_SIZE)
    aes = AES.new(passphrase, AES.MODE_CFB, IV)
    return aes.decrypt(base64.b64decode(encrypted))

","I have used both Crypto and PyCryptodomex library and it is blazing fast...
import base64
import hashlib
from Cryptodome.Cipher import AES as domeAES
from Cryptodome.Random import get_random_bytes
from Crypto import Random
from Crypto.Cipher import AES as cryptoAES

BLOCK_SIZE = AES.block_size

key = ""my_secret_key"".encode()
__key__ = hashlib.sha256(key).digest()
print(__key__)

def encrypt(raw):
    BS = cryptoAES.block_size
    pad = lambda s: s + (BS - len(s) % BS) * chr(BS - len(s) % BS)
    raw = base64.b64encode(pad(raw).encode('utf8'))
    iv = get_random_bytes(cryptoAES.block_size)
    cipher = cryptoAES.new(key= __key__, mode= cryptoAES.MODE_CFB,iv= iv)
    a= base64.b64encode(iv + cipher.encrypt(raw))
    IV = Random.new().read(BLOCK_SIZE)
    aes = domeAES.new(__key__, domeAES.MODE_CFB, IV)
    b = base64.b64encode(IV + aes.encrypt(a))
    return b

def decrypt(enc):
    passphrase = __key__
    encrypted = base64.b64decode(enc)
    IV = encrypted[:BLOCK_SIZE]
    aes = domeAES.new(passphrase, domeAES.MODE_CFB, IV)
    enc = aes.decrypt(encrypted[BLOCK_SIZE:])
    unpad = lambda s: s[:-ord(s[-1:])]
    enc = base64.b64decode(enc)
    iv = enc[:cryptoAES.block_size]
    cipher = cryptoAES.new(__key__, cryptoAES.MODE_CFB, iv)
    b=  unpad(base64.b64decode(cipher.decrypt(enc[cryptoAES.block_size:])).decode('utf8'))
    return b

encrypted_data =encrypt(""Hi Steven!!!!!"")
print(encrypted_data)
print(""======="")
decrypted_data = decrypt(encrypted_data)
print(decrypted_data)

","340716","<python><encryption><padding><pycrypto><initialization-vector>","152","2","12","2019-10-01 06:34:46","21928790","6","87","1816580","","2015-12-22 22:59:57","2012-09-21 05:54:41",""
"19623267","ImportError: No module named Crypto.Cipher","When I try to run app.py (Python 3.3, PyCrypto 2.6) my virtualenv keeps returning the error listed above. My import statement is just from Crypto.Cipher import AES. I looked for duplicates and you might say that there are some, but I tried the solutions (although most are not even solutions) and nothing worked.
You can see what the files are like for PyCrypto below:

","I had the same problem (though on Linux). The solution was quite simple - add:
libraries:
- name: pycrypto
  version: ""2.6""

to my app.yaml file. Since this worked correctly in the past, I assume this is a new requirement.
","325663","<python><virtualenv><pip><easy-install><pycrypto>","110","58","21","2019-09-24 09:38:58","20014293","7","18","","","","2013-10-27 20:39:10",""
"19623267","ImportError: No module named Crypto.Cipher","When I try to run app.py (Python 3.3, PyCrypto 2.6) my virtualenv keeps returning the error listed above. My import statement is just from Crypto.Cipher import AES. I looked for duplicates and you might say that there are some, but I tried the solutions (although most are not even solutions) and nothing worked.
You can see what the files are like for PyCrypto below:

","type command:
sudo pip install pycrypto

","325663","<python><virtualenv><pip><easy-install><pycrypto>","110","19","21","2019-09-24 09:38:58","20014293","7","18","","","","2013-10-27 20:39:10",""
"19623267","ImportError: No module named Crypto.Cipher","When I try to run app.py (Python 3.3, PyCrypto 2.6) my virtualenv keeps returning the error listed above. My import statement is just from Crypto.Cipher import AES. I looked for duplicates and you might say that there are some, but I tried the solutions (although most are not even solutions) and nothing worked.
You can see what the files are like for PyCrypto below:

","I had the same problem on my Mac when installing with pip. I then removed pycrypto and installed it again with easy_install, like this:
pip uninstall pycrypto
easy_install pycrypto

also as Luke commented: If you have trouble running these commands, be sure to run them as admin (sudo) 
Hope this helps!
","325663","<python><virtualenv><pip><easy-install><pycrypto>","110","183","21","2019-09-24 09:38:58","20014293","7","18","","","","2013-10-27 20:39:10",""
"19623267","ImportError: No module named Crypto.Cipher","When I try to run app.py (Python 3.3, PyCrypto 2.6) my virtualenv keeps returning the error listed above. My import statement is just from Crypto.Cipher import AES. I looked for duplicates and you might say that there are some, but I tried the solutions (although most are not even solutions) and nothing worked.
You can see what the files are like for PyCrypto below:

","On the mac... if you run into this.. try to see if you can import crypto instead?
If so.. the package name is the issue C vs c.  To get around this.. just add these lines to the top of your script.
import crypto
import sys
sys.modules['Crypto'] = crypto

You know should be able to import paramiko successfully.
","325663","<python><virtualenv><pip><easy-install><pycrypto>","110","30","21","2019-09-24 09:38:58","20014293","7","18","","","","2013-10-27 20:39:10",""
"19623267","ImportError: No module named Crypto.Cipher","When I try to run app.py (Python 3.3, PyCrypto 2.6) my virtualenv keeps returning the error listed above. My import statement is just from Crypto.Cipher import AES. I looked for duplicates and you might say that there are some, but I tried the solutions (although most are not even solutions) and nothing worked.
You can see what the files are like for PyCrypto below:

","if you are using redhat,fedora, centos :
sudo yum  install pycrypto
for my case I coouldnot install it using pip
","325663","<python><virtualenv><pip><easy-install><pycrypto>","110","8","21","2019-09-24 09:38:58","20014293","7","18","","","","2013-10-27 20:39:10",""
"19623267","ImportError: No module named Crypto.Cipher","When I try to run app.py (Python 3.3, PyCrypto 2.6) my virtualenv keeps returning the error listed above. My import statement is just from Crypto.Cipher import AES. I looked for duplicates and you might say that there are some, but I tried the solutions (although most are not even solutions) and nothing worked.
You can see what the files are like for PyCrypto below:

","I've had the same problem 'ImportError: No module named Crypto.Cipher', since using GoogleAppEngineLauncher (version > 1.8.X) with GAE Boilerplate on OSX 10.8.5 (Mountain Lion). In Google App Engine SDK with python 2.7 runtime, pyCrypto 2.6 is the suggested version. 
The solution that worked for me was...
1) Download pycrypto2.6 source extract it somewhere(~/Downloads/pycrypto26)
e.g., git clone https://github.com/dlitz/pycrypto.git
2) cd (cd ~/Downloads/pycrypto26)  then 
3) Execute the following terminal command inside the previous folder in order to install pyCrypto 2.6 manually in GAE folder.  
sudo python setup.py install --install-lib /Applications/GoogleAppEngineLauncher.app/Contents/Resources/GoogleAppEngine-default.bundle/Contents/Resources/google_appengine

","325663","<python><virtualenv><pip><easy-install><pycrypto>","110","8","21","2019-09-24 09:38:58","20014293","7","18","","","","2013-10-27 20:39:10",""
"19623267","ImportError: No module named Crypto.Cipher","When I try to run app.py (Python 3.3, PyCrypto 2.6) my virtualenv keeps returning the error listed above. My import statement is just from Crypto.Cipher import AES. I looked for duplicates and you might say that there are some, but I tried the solutions (although most are not even solutions) and nothing worked.
You can see what the files are like for PyCrypto below:

","For Windows 7:
I got through this error ""Module error Crypo.Cipher import AES""
To install Pycrypto in Windows,
Try this in Command Prompt,
Set path=C:\Python27\Scripts  (i.e path where easy_install is located)
Then execute the following,
easy_install pycrypto
For Ubuntu:
Try this,
Download Pycrypto from ""https://pypi.python.org/pypi/pycrypto""
Then change your current path to downloaded path using your terminal:
Eg: root@xyz-virtual-machine:~/pycrypto-2.6.1#
Then execute the following using the terminal: 
python setup.py install
It's worked for me. Hope works for all..
","325663","<python><virtualenv><pip><easy-install><pycrypto>","110","1","21","2019-09-24 09:38:58","20014293","7","18","","","","2013-10-27 20:39:10",""
"19623267","ImportError: No module named Crypto.Cipher","When I try to run app.py (Python 3.3, PyCrypto 2.6) my virtualenv keeps returning the error listed above. My import statement is just from Crypto.Cipher import AES. I looked for duplicates and you might say that there are some, but I tried the solutions (although most are not even solutions) and nothing worked.
You can see what the files are like for PyCrypto below:

","I solve this problem by change the first letter case to upper.
Make sure ''from Crypto.Cipher import AES'' not ''from crypto.Cipher import AES''.
","325663","<python><virtualenv><pip><easy-install><pycrypto>","110","1","21","2019-09-24 09:38:58","20014293","7","18","","","","2013-10-27 20:39:10",""
"19623267","ImportError: No module named Crypto.Cipher","When I try to run app.py (Python 3.3, PyCrypto 2.6) my virtualenv keeps returning the error listed above. My import statement is just from Crypto.Cipher import AES. I looked for duplicates and you might say that there are some, but I tried the solutions (although most are not even solutions) and nothing worked.
You can see what the files are like for PyCrypto below:

","I found the solution. Issue is probably in case sensitivity (on Windows).
Just change the name of the folder: 

C:\Python27\Lib\site-packages\crypto
to: C:\Python27\Lib\site-packages\Crypto

This is how folder was named after installation of pycrypto:

I've changed it to:

And now the following code works fine:

","325663","<python><virtualenv><pip><easy-install><pycrypto>","110","16","21","2019-09-24 09:38:58","20014293","7","18","","","","2013-10-27 20:39:10",""
"19623267","ImportError: No module named Crypto.Cipher","When I try to run app.py (Python 3.3, PyCrypto 2.6) my virtualenv keeps returning the error listed above. My import statement is just from Crypto.Cipher import AES. I looked for duplicates and you might say that there are some, but I tried the solutions (although most are not even solutions) and nothing worked.
You can see what the files are like for PyCrypto below:

","I ran into this on Mac as well, and it seems to be related to having an unfortunately similarly named ""crypto"" module (not sure what that is for) installed alongside of pycrypto via pip.
The fix seems to be removing both crypto and pycrypto with pip:
sudo pip uninstall crypto
sudo pip uninstall pycrypto

and reinstalling pycrypto:
sudo pip install pycrypto

Now it works as expected when I do something like:
from Crypto.Cipher import AES

","325663","<python><virtualenv><pip><easy-install><pycrypto>","110","92","21","2019-09-24 09:38:58","20014293","7","18","","","","2013-10-27 20:39:10",""
"19623267","ImportError: No module named Crypto.Cipher","When I try to run app.py (Python 3.3, PyCrypto 2.6) my virtualenv keeps returning the error listed above. My import statement is just from Crypto.Cipher import AES. I looked for duplicates and you might say that there are some, but I tried the solutions (although most are not even solutions) and nothing worked.
You can see what the files are like for PyCrypto below:

","This problem can be fixed by installing the C++ compiler (python27 or python26). Download it from Microsoft https://www.microsoft.com/en-us/download/details.aspx?id=44266 and re-run the command : pip install pycrypto to run the gui web access when you kill the process of easy_install.exe.
","325663","<python><virtualenv><pip><easy-install><pycrypto>","110","1","21","2019-09-24 09:38:58","20014293","7","18","","","","2013-10-27 20:39:10",""
"19623267","ImportError: No module named Crypto.Cipher","When I try to run app.py (Python 3.3, PyCrypto 2.6) my virtualenv keeps returning the error listed above. My import statement is just from Crypto.Cipher import AES. I looked for duplicates and you might say that there are some, but I tried the solutions (although most are not even solutions) and nothing worked.
You can see what the files are like for PyCrypto below:

","Try with pip3:
sudo pip3 install pycrypto

","325663","<python><virtualenv><pip><easy-install><pycrypto>","110","3","21","2019-09-24 09:38:58","20014293","7","18","","","","2013-10-27 20:39:10",""
"19623267","ImportError: No module named Crypto.Cipher","When I try to run app.py (Python 3.3, PyCrypto 2.6) my virtualenv keeps returning the error listed above. My import statement is just from Crypto.Cipher import AES. I looked for duplicates and you might say that there are some, but I tried the solutions (although most are not even solutions) and nothing worked.
You can see what the files are like for PyCrypto below:

","Uninstalling crypto and pycrypto works on me. Then install only pycrypto:
pip uninstall crypto 
pip uninstall pycrypto 
pip install pycrypto

","325663","<python><virtualenv><pip><easy-install><pycrypto>","110","18","21","2019-09-24 09:38:58","20014293","7","18","","","","2013-10-27 20:39:10",""
"19623267","ImportError: No module named Crypto.Cipher","When I try to run app.py (Python 3.3, PyCrypto 2.6) my virtualenv keeps returning the error listed above. My import statement is just from Crypto.Cipher import AES. I looked for duplicates and you might say that there are some, but I tried the solutions (although most are not even solutions) and nothing worked.
You can see what the files are like for PyCrypto below:

","It could be a problem of loading python modules installed via pip. Refer to this answer Can't load Python modules installed via pip from site-packages directory and try something like
python -m pip install pycrypto

","325663","<python><virtualenv><pip><easy-install><pycrypto>","110","2","21","2019-09-24 09:38:58","20014293","7","18","","","","2013-10-27 20:39:10",""
"19623267","ImportError: No module named Crypto.Cipher","When I try to run app.py (Python 3.3, PyCrypto 2.6) my virtualenv keeps returning the error listed above. My import statement is just from Crypto.Cipher import AES. I looked for duplicates and you might say that there are some, but I tried the solutions (although most are not even solutions) and nothing worked.
You can see what the files are like for PyCrypto below:

","For CentOS 7.4 I first installed pip and then pycrypto using pip:
> sudo yum -y install python-pip 
> sudo python -m pip install pycrypto

","325663","<python><virtualenv><pip><easy-install><pycrypto>","110","2","21","2019-09-24 09:38:58","20014293","7","18","","","","2013-10-27 20:39:10",""
"19623267","ImportError: No module named Crypto.Cipher","When I try to run app.py (Python 3.3, PyCrypto 2.6) my virtualenv keeps returning the error listed above. My import statement is just from Crypto.Cipher import AES. I looked for duplicates and you might say that there are some, but I tried the solutions (although most are not even solutions) and nothing worked.
You can see what the files are like for PyCrypto below:

","Worked for me (Ubuntu 17.10)
Removing venv and creating it again with python v3.6
pip3 install PyJWT
sudo apt-get install build-essential libgmp3-dev python3-dev
pip3 install cryptography
pip3 install pycryptodome
pip3 install pycryptodomex

Pycrypto is deprecated, had problems with it, used Pycryptodome
","325663","<python><virtualenv><pip><easy-install><pycrypto>","110","2","21","2019-09-24 09:38:58","20014293","7","18","","","","2013-10-27 20:39:10",""
"19623267","ImportError: No module named Crypto.Cipher","When I try to run app.py (Python 3.3, PyCrypto 2.6) my virtualenv keeps returning the error listed above. My import statement is just from Crypto.Cipher import AES. I looked for duplicates and you might say that there are some, but I tried the solutions (although most are not even solutions) and nothing worked.
You can see what the files are like for PyCrypto below:

","To date, I'm having same issue when importing from Crypto.Cipher import AES even i've installed/reinstalled pycrypto few times. End up it's because pip defaulted to python3. 

~ pip --version
pip 18.0 from /usr/local/lib/python3.7/site-packages/pip (python 3.7)

installing pycrypo with pip2 should solve this issue.
","325663","<python><virtualenv><pip><easy-install><pycrypto>","110","1","21","2019-09-24 09:38:58","20014293","7","18","","","","2013-10-27 20:39:10",""
"19623267","ImportError: No module named Crypto.Cipher","When I try to run app.py (Python 3.3, PyCrypto 2.6) my virtualenv keeps returning the error listed above. My import statement is just from Crypto.Cipher import AES. I looked for duplicates and you might say that there are some, but I tried the solutions (although most are not even solutions) and nothing worked.
You can see what the files are like for PyCrypto below:

","Maybe you should this:
pycryptodome==3.6.1
add it to requirements.txt and install, which should eliminate the error report.
it works for me!
","325663","<python><virtualenv><pip><easy-install><pycrypto>","110","1","21","2019-09-24 09:38:58","20014293","7","18","","","","2013-10-27 20:39:10",""
"19623267","ImportError: No module named Crypto.Cipher","When I try to run app.py (Python 3.3, PyCrypto 2.6) my virtualenv keeps returning the error listed above. My import statement is just from Crypto.Cipher import AES. I looked for duplicates and you might say that there are some, but I tried the solutions (although most are not even solutions) and nothing worked.
You can see what the files are like for PyCrypto below:

","If you an macos, rename lib folder lib/python3.7/site-packages/crypto to lib/python3.7/site-packages/Crypto
","325663","<python><virtualenv><pip><easy-install><pycrypto>","110","2","21","2019-09-24 09:38:58","20014293","7","18","","","","2013-10-27 20:39:10",""
"19623267","ImportError: No module named Crypto.Cipher","When I try to run app.py (Python 3.3, PyCrypto 2.6) my virtualenv keeps returning the error listed above. My import statement is just from Crypto.Cipher import AES. I looked for duplicates and you might say that there are some, but I tried the solutions (although most are not even solutions) and nothing worked.
You can see what the files are like for PyCrypto below:

","I'm with 3.7. The issue remains after I try to install crypto. And pycrypto just fails in my case. So in the end my build passed via package below: 
pip install pycryptodome
","325663","<python><virtualenv><pip><easy-install><pycrypto>","110","0","21","2019-09-24 09:38:58","20014293","7","18","","","","2013-10-27 20:39:10",""
"19623267","ImportError: No module named Crypto.Cipher","When I try to run app.py (Python 3.3, PyCrypto 2.6) my virtualenv keeps returning the error listed above. My import statement is just from Crypto.Cipher import AES. I looked for duplicates and you might say that there are some, but I tried the solutions (although most are not even solutions) and nothing worked.
You can see what the files are like for PyCrypto below:

","WARNING: Don't use pycrypto anymore!
As you can read on this page, the usage of pycrypto is not safe anymore:

Pycrypto is vulnerable to a heap-based buffer overflow in the ALGnew function in block_templace.c. It allows remote attackers to execute arbitrary code in the python application. It was assigned the CVE-2013-7459 number.
Pycrypto didn’t release any fix to that vulnerability and no commit was made to the project since Jun 20, 2014.

SOLUTION: Use Python3 and pycryptodome!
TL;DR: pip3 install pycryptodome
Setting up a new virtual environment
To install a virtual environment and setup everything, use the following commands:
# install python3 and pip3
sudo apt update
sudo apt upgrade
sudo apt install python3
sudo apt install python3-pip

# install and create a virtual environment
# cd to or mkdir the folder where you want your venv
pip3 install virtualenv
python3 -m virtualenv .

# now activate your venv and install pycryptodome
source bin/activate
pip3 install pycryptodome

# check if everything worked: 
# start the interactive python console and import the Crypto module
# when there is no import error then it worked
python
>>> from Crypto.Cipher import AES
>>> exit()

# don't forget to deactivate your venv again
deactivate

For more information, see pycryptodome.org
","325663","<python><virtualenv><pip><easy-install><pycrypto>","110","2","21","2019-09-24 09:38:58","20014293","7","18","","","","2013-10-27 20:39:10",""
"11405549","How do I install PyCrypto on Windows?","I've read every other google source and SO thread, with nothing working.
Python 2.7.3 32bit installed on Windows 7 64bit. Download, extracting, and then trying to install PyCrypto results in ""Unable to find vcvarsall.bat"".
So I install MinGW and tack that on the install line as the compiler of choice. But then I get the error ""RuntimeError: chmod error"".
How in the world do I get around this? I've tried using pip, which gives the same result. I found a prebuilt PyCrypto 2.3 binary and installed that, but it's nowhere to be found on the system (not working).
Any ideas?
","This probably isn't the optimal solution but you might download and install the free Visual C++ Express package from MS. This will give you the C++ compiler you need to compile the PyCrypto code.
","268575","<python><windows><python-2.7><pycrypto>","137","2","20","2019-05-22 08:30:05","11405769","9","63","1203437","","2012-07-11 02:06:23","2012-07-10 01:44:52",""
"11405549","How do I install PyCrypto on Windows?","I've read every other google source and SO thread, with nothing working.
Python 2.7.3 32bit installed on Windows 7 64bit. Download, extracting, and then trying to install PyCrypto results in ""Unable to find vcvarsall.bat"".
So I install MinGW and tack that on the install line as the compiler of choice. But then I get the error ""RuntimeError: chmod error"".
How in the world do I get around this? I've tried using pip, which gives the same result. I found a prebuilt PyCrypto 2.3 binary and installed that, but it's nowhere to be found on the system (not working).
Any ideas?
","In general
vcvarsall.bat is part of the Visual C++ compiler, you need that to install what you are trying to install. Don't even try to deal with MingGW if your Python was compiled with Visual Studio toolchain and vice versa. Even the version of the Microsoft tool chain is important. Python compiled with VS 2008 won't work with extensions compiled with VS 2010!
You have to compile PyCrypto with the same compiler that the version of Python was compiled with. Google for ""Unable to find vcvarsall.bat"" because that is the root of your problem, it is a very common problem with compiling Python extensions on Windows.
There is a lot of information and a lot to read to get this right on whatever system you are on with this link. 
Beware using Visual Studio 2010 or not using Visual Studio 2008
As far as I know the following is still true. This was posted in the link above in June, 2010 referring to trying to build extensions with VS 2010 Express against the Python installers available on python.org.

Be careful if you do this. Python 2.6 and 2.7 from python.org are
  built with Visual Studio 2008 compilers. You will need to link with
  the same CRT (msvcr90.dll) as Python.
Visual Studio 2010 Express links with the wrong CRT version:
  msvcr100.dll.
If you do this, you must also re-build Python with Visual Studio 2010
  Express. You cannot use the standard Python binary installer for
  Windows. Nor can you use any C/C++ extensions built with a different
  compiler than Visual Studio 2010 (Express).

Opinion: This is one reason I abandoned Windows for all serious development work for OSX!
","268575","<python><windows><python-2.7><pycrypto>","137","18","20","2019-05-22 08:30:05","11405769","9","63","1203437","","2012-07-11 02:06:23","2012-07-10 01:44:52",""
"11405549","How do I install PyCrypto on Windows?","I've read every other google source and SO thread, with nothing working.
Python 2.7.3 32bit installed on Windows 7 64bit. Download, extracting, and then trying to install PyCrypto results in ""Unable to find vcvarsall.bat"".
So I install MinGW and tack that on the install line as the compiler of choice. But then I get the error ""RuntimeError: chmod error"".
How in the world do I get around this? I've tried using pip, which gives the same result. I found a prebuilt PyCrypto 2.3 binary and installed that, but it's nowhere to be found on the system (not working).
Any ideas?
","If you don't already have a C/C++ development environment installed that is compatible with the Visual Studio binaries distributed by Python.org, then you should stick to installing only pure Python packages or packages for which a Windows binary is available.
Fortunately, there are PyCrypto binaries available for Windows:
http://www.voidspace.org.uk/python/modules.shtml#pycrypto
UPDATE:
As @Udi suggests in the comment below, the following command also installs pycrypto and can be used in virtualenv as well:
easy_install http://www.voidspace.org.uk/python/pycrypto-2.6.1/pycrypto-2.6.1.win32-py2.7.exe

Notice to choose the relevant link for your setup from this list
If you're looking for builds for Python 3.5, see PyCrypto on python 3.5
","268575","<python><windows><python-2.7><pycrypto>","137","180","20","2019-05-22 08:30:05","11405769","9","63","1203437","","2012-07-11 02:06:23","2012-07-10 01:44:52",""
"11405549","How do I install PyCrypto on Windows?","I've read every other google source and SO thread, with nothing working.
Python 2.7.3 32bit installed on Windows 7 64bit. Download, extracting, and then trying to install PyCrypto results in ""Unable to find vcvarsall.bat"".
So I install MinGW and tack that on the install line as the compiler of choice. But then I get the error ""RuntimeError: chmod error"".
How in the world do I get around this? I've tried using pip, which gives the same result. I found a prebuilt PyCrypto 2.3 binary and installed that, but it's nowhere to be found on the system (not working).
Any ideas?
","It's possible to build PyCrypto using the Windows 7 SDK toolkits. There are two versions of the Windows 7 SDK. The original version (for .Net 3.5) includes the VS 2008 command-line compilers. Both 32- and 64-bit compilers can be installed.
The first step is to compile mpir to provide fast arithmetic. I've documented the process I use in the gmpy library. Detailed instructions for building mpir using the SDK compiler can be found at sdk_build
The key steps to use the SDK compilers from a DOS prompt are:
1) Run either vcvars32.bat or vcvars64.bat as appropriate.
2) At the prompt, execute ""set MSSdk=1""
3) At the prompt, execute ""set DISTUTILS_USE_SDK=1""
This should allow ""python setup.py install"" to succeed assuming there are no other issues  with the C code. But I vaaguely remember that I had to edit a couple of PyCrypto files to enable mpir and to find the mpir libraries but I don't have my Windows system up at the moment. It will be a couple of days before I'll have time to recreate the steps. If you haven't reported success by then, I'll post the PyCrypto steps. The steps will assume you were able to compile mpir.
I hope this helps. 
","268575","<python><windows><python-2.7><pycrypto>","137","4","20","2019-05-22 08:30:05","11405769","9","63","1203437","","2012-07-11 02:06:23","2012-07-10 01:44:52",""
"11405549","How do I install PyCrypto on Windows?","I've read every other google source and SO thread, with nothing working.
Python 2.7.3 32bit installed on Windows 7 64bit. Download, extracting, and then trying to install PyCrypto results in ""Unable to find vcvarsall.bat"".
So I install MinGW and tack that on the install line as the compiler of choice. But then I get the error ""RuntimeError: chmod error"".
How in the world do I get around this? I've tried using pip, which gives the same result. I found a prebuilt PyCrypto 2.3 binary and installed that, but it's nowhere to be found on the system (not working).
Any ideas?
","For VS2010:
SET VS90COMNTOOLS=%VS100COMNTOOLS%

For VS2012:
SET VS90COMNTOOLS=%VS110COMNTOOLS%

then Call:
pip install pyCrypto 

","268575","<python><windows><python-2.7><pycrypto>","137","19","20","2019-05-22 08:30:05","11405769","9","63","1203437","","2012-07-11 02:06:23","2012-07-10 01:44:52",""
"11405549","How do I install PyCrypto on Windows?","I've read every other google source and SO thread, with nothing working.
Python 2.7.3 32bit installed on Windows 7 64bit. Download, extracting, and then trying to install PyCrypto results in ""Unable to find vcvarsall.bat"".
So I install MinGW and tack that on the install line as the compiler of choice. But then I get the error ""RuntimeError: chmod error"".
How in the world do I get around this? I've tried using pip, which gives the same result. I found a prebuilt PyCrypto 2.3 binary and installed that, but it's nowhere to be found on the system (not working).
Any ideas?
","I have managed to get pycrypto to compile by using MinGW32 and MSYS. This presumes that you have pip or easy_install installed.
Here's how I did it:
1) Install MinGW32. For the sake of this explanation, let's assume it's installed in C:\MinGW. When using the installer, which I recommend, select the C++ compiler.  MSYS should install with MinGW
2) Add c:\mingw\bin,c:\mingw\mingw32\bin,C:\MinGW\msys\1.0, c:\mingw\msys\1.0\bin and c:\mingw\msys\1.0\sbin to your %PATH%. If you aren't familiar, this article is very helpful.
3) From the search bar, run msys and the MSYS terminal will open. For those familiar with Cygwin, it works in a similar fashion.
4) From within the MSYS terminal pip install pycrypto should run without error after this.  
","268575","<python><windows><python-2.7><pycrypto>","137","6","20","2019-05-22 08:30:05","11405769","9","63","1203437","","2012-07-11 02:06:23","2012-07-10 01:44:52",""
"11405549","How do I install PyCrypto on Windows?","I've read every other google source and SO thread, with nothing working.
Python 2.7.3 32bit installed on Windows 7 64bit. Download, extracting, and then trying to install PyCrypto results in ""Unable to find vcvarsall.bat"".
So I install MinGW and tack that on the install line as the compiler of choice. But then I get the error ""RuntimeError: chmod error"".
How in the world do I get around this? I've tried using pip, which gives the same result. I found a prebuilt PyCrypto 2.3 binary and installed that, but it's nowhere to be found on the system (not working).
Any ideas?
","Due to weird legal reasons, binaries are not published the normal way. Voidspace is normally the best second source. But since quite some time, voidspace maintainer did not update. 
Use the zip from [https://www.dropbox.com/s/n6rckn0k6u4nqke/pycrypto-2.6.1.zip?dl=0]
","268575","<python><windows><python-2.7><pycrypto>","137","0","20","2019-05-22 08:30:05","11405769","9","63","1203437","","2012-07-11 02:06:23","2012-07-10 01:44:52",""
"11405549","How do I install PyCrypto on Windows?","I've read every other google source and SO thread, with nothing working.
Python 2.7.3 32bit installed on Windows 7 64bit. Download, extracting, and then trying to install PyCrypto results in ""Unable to find vcvarsall.bat"".
So I install MinGW and tack that on the install line as the compiler of choice. But then I get the error ""RuntimeError: chmod error"".
How in the world do I get around this? I've tried using pip, which gives the same result. I found a prebuilt PyCrypto 2.3 binary and installed that, but it's nowhere to be found on the system (not working).
Any ideas?
","
So I install MinGW and tack that on the install line as the compiler
  of choice. But then I get the error ""RuntimeError: chmod error"".

This error ""RuntimeError: chmod error"" occurs because the install script didn't find the chmod command.

How in the world do I get around this?

Solution
You only need to add the MSYS binaries to the PATH and re-run the install script.
(N.B: Note that MinGW comes with MSYS so )
Example
For example, if we are in folder C:\<..>\pycrypto-2.6.1\dist\pycrypto-2.6.1>
C:\.....>set PATH=C:\MinGW\msys\1.0\bin;%PATH%
C:\.....>python setup.py install
Optional: you might need to clean before you re-run the script:
`C:\<..>\pycrypto-2.6.1\dist\pycrypto-2.6.1> python setup.py clean`

","268575","<python><windows><python-2.7><pycrypto>","137","3","20","2019-05-22 08:30:05","11405769","9","63","1203437","","2012-07-11 02:06:23","2012-07-10 01:44:52",""
"11405549","How do I install PyCrypto on Windows?","I've read every other google source and SO thread, with nothing working.
Python 2.7.3 32bit installed on Windows 7 64bit. Download, extracting, and then trying to install PyCrypto results in ""Unable to find vcvarsall.bat"".
So I install MinGW and tack that on the install line as the compiler of choice. But then I get the error ""RuntimeError: chmod error"".
How in the world do I get around this? I've tried using pip, which gives the same result. I found a prebuilt PyCrypto 2.3 binary and installed that, but it's nowhere to be found on the system (not working).
Any ideas?
","Microsoft has recently recently released a standalone, dedicated Microsoft Visual C++ Compiler for Python 2.7. If you're using Python 2.7, simply install that compiler and Setuptools 6.0 or later, and most packages with C extensions will now compile readily.
","268575","<python><windows><python-2.7><pycrypto>","137","32","20","2019-05-22 08:30:05","11405769","9","63","1203437","","2012-07-11 02:06:23","2012-07-10 01:44:52",""
"11405549","How do I install PyCrypto on Windows?","I've read every other google source and SO thread, with nothing working.
Python 2.7.3 32bit installed on Windows 7 64bit. Download, extracting, and then trying to install PyCrypto results in ""Unable to find vcvarsall.bat"".
So I install MinGW and tack that on the install line as the compiler of choice. But then I get the error ""RuntimeError: chmod error"".
How in the world do I get around this? I've tried using pip, which gives the same result. I found a prebuilt PyCrypto 2.3 binary and installed that, but it's nowhere to be found on the system (not working).
Any ideas?
","After years and years, python finally agreed for a binary disribution called wheel which allows to install even binary extensions on Windows without having a compiler with simple pip install packagename. There is a list of popular packages with their status. Pycrypto is not there yet, but lxml, PySide and Scrapy for example. 
Edited Nov 2015: pip uninstall pycrypto & pip install pycryptodome. It is a pycrypto fork with new features and it supports wheel. It replaces pycrypto, so existing code will continue to work (see https://pycryptodome.readthedocs.org/en/latest/src/examples.html)
","268575","<python><windows><python-2.7><pycrypto>","137","25","20","2019-05-22 08:30:05","11405769","9","63","1203437","","2012-07-11 02:06:23","2012-07-10 01:44:52",""
"11405549","How do I install PyCrypto on Windows?","I've read every other google source and SO thread, with nothing working.
Python 2.7.3 32bit installed on Windows 7 64bit. Download, extracting, and then trying to install PyCrypto results in ""Unable to find vcvarsall.bat"".
So I install MinGW and tack that on the install line as the compiler of choice. But then I get the error ""RuntimeError: chmod error"".
How in the world do I get around this? I've tried using pip, which gives the same result. I found a prebuilt PyCrypto 2.3 binary and installed that, but it's nowhere to be found on the system (not working).
Any ideas?
","For Windows 7:
To install Pycrypto in Windows,
Try this in Command Prompt,
Set path=C:\Python27\Scripts (i.e path where easy_install is located)
Then execute the following,
easy_install pycrypto
For Ubuntu:
Try this,
Download Pycrypto from ""https://pypi.python.org/pypi/pycrypto""
Then change your current path to downloaded path using your terminal and user should be root:
Eg: root@xyz-virtual-machine:~/pycrypto-2.6.1#
Then execute the following using the terminal:
python setup.py install
It's worked for me. Hope works for all..
","268575","<python><windows><python-2.7><pycrypto>","137","5","20","2019-05-22 08:30:05","11405769","9","63","1203437","","2012-07-11 02:06:23","2012-07-10 01:44:52",""
"11405549","How do I install PyCrypto on Windows?","I've read every other google source and SO thread, with nothing working.
Python 2.7.3 32bit installed on Windows 7 64bit. Download, extracting, and then trying to install PyCrypto results in ""Unable to find vcvarsall.bat"".
So I install MinGW and tack that on the install line as the compiler of choice. But then I get the error ""RuntimeError: chmod error"".
How in the world do I get around this? I've tried using pip, which gives the same result. I found a prebuilt PyCrypto 2.3 binary and installed that, but it's nowhere to be found on the system (not working).
Any ideas?
","
So I install MinGW and tack that on the install line as the compiler of choice. But then I get the error ""RuntimeError: chmod error"".

You need to install msys package under MinGW 

and add following entries in your PATH env variable.

C:\MinGW\bin
C:\MinGW\msys\1.0\bin [This is where you will find chmod executable]

Then run your command from normal windows command prompt.
","268575","<python><windows><python-2.7><pycrypto>","137","1","20","2019-05-22 08:30:05","11405769","9","63","1203437","","2012-07-11 02:06:23","2012-07-10 01:44:52",""
"11405549","How do I install PyCrypto on Windows?","I've read every other google source and SO thread, with nothing working.
Python 2.7.3 32bit installed on Windows 7 64bit. Download, extracting, and then trying to install PyCrypto results in ""Unable to find vcvarsall.bat"".
So I install MinGW and tack that on the install line as the compiler of choice. But then I get the error ""RuntimeError: chmod error"".
How in the world do I get around this? I've tried using pip, which gives the same result. I found a prebuilt PyCrypto 2.3 binary and installed that, but it's nowhere to be found on the system (not working).
Any ideas?
","For those of you looking for python 3.4 I found a git repo with an installer that just works. Here are the direct links for x64 and x32
","268575","<python><windows><python-2.7><pycrypto>","137","5","20","2019-05-22 08:30:05","11405769","9","63","1203437","","2012-07-11 02:06:23","2012-07-10 01:44:52",""
"11405549","How do I install PyCrypto on Windows?","I've read every other google source and SO thread, with nothing working.
Python 2.7.3 32bit installed on Windows 7 64bit. Download, extracting, and then trying to install PyCrypto results in ""Unable to find vcvarsall.bat"".
So I install MinGW and tack that on the install line as the compiler of choice. But then I get the error ""RuntimeError: chmod error"".
How in the world do I get around this? I've tried using pip, which gives the same result. I found a prebuilt PyCrypto 2.3 binary and installed that, but it's nowhere to be found on the system (not working).
Any ideas?
","PyCryptodome is an almost-compatible fork of PyCrypto with Windows wheels available on pypi.
You can install it with a simple:
pip install pycryptodome

The website includes instructions to build it from sources with the Microsoft compilers too.
","268575","<python><windows><python-2.7><pycrypto>","137","14","20","2019-05-22 08:30:05","11405769","9","63","1203437","","2012-07-11 02:06:23","2012-07-10 01:44:52",""
"11405549","How do I install PyCrypto on Windows?","I've read every other google source and SO thread, with nothing working.
Python 2.7.3 32bit installed on Windows 7 64bit. Download, extracting, and then trying to install PyCrypto results in ""Unable to find vcvarsall.bat"".
So I install MinGW and tack that on the install line as the compiler of choice. But then I get the error ""RuntimeError: chmod error"".
How in the world do I get around this? I've tried using pip, which gives the same result. I found a prebuilt PyCrypto 2.3 binary and installed that, but it's nowhere to be found on the system (not working).
Any ideas?
","
Go to ""Microsoft Visual C++ Compiler for Python 2.7"" and continue based on ""System Requirements"" (this is what I did to put below steps together).
Install setuptools (setuptools 6.0 or later is required for Python to automatically detect this compiler package)
either by: pip install setuptools
or download ""Setuptools bootstrapping installer"" source from, save this file somwhere on your filestystem as ""ez_python.py"" and install with: python ez_python.py
Install wheel (wheel is recommended for producing pre-built binary packages). You can install it with: pip install wheel
Open Windows elevated Command Prompt cmd.exe (with ""Run as administrator"") to install ""Microsoft Visual C++ Compiler for Python 2.7"" for all users. You can use following command to do so: msiexec /i C:\users\jozko\download\VCForPython27.msi ALLUSERS=1 just use your own path to file: msiexec /i <path to MSI> ALLUSERS=1
Now you should be able to install pycrypto with: pip install pycrypto

","268575","<python><windows><python-2.7><pycrypto>","137","3","20","2019-05-22 08:30:05","11405769","9","63","1203437","","2012-07-11 02:06:23","2012-07-10 01:44:52",""
"11405549","How do I install PyCrypto on Windows?","I've read every other google source and SO thread, with nothing working.
Python 2.7.3 32bit installed on Windows 7 64bit. Download, extracting, and then trying to install PyCrypto results in ""Unable to find vcvarsall.bat"".
So I install MinGW and tack that on the install line as the compiler of choice. But then I get the error ""RuntimeError: chmod error"".
How in the world do I get around this? I've tried using pip, which gives the same result. I found a prebuilt PyCrypto 2.3 binary and installed that, but it's nowhere to be found on the system (not working).
Any ideas?
","Try just using:
pip install pycryptodome

or:
pip install pycryptodomex

Source: https://pypi.python.org/pypi/pycryptodome
","268575","<python><windows><python-2.7><pycrypto>","137","3","20","2019-05-22 08:30:05","11405769","9","63","1203437","","2012-07-11 02:06:23","2012-07-10 01:44:52",""
"11405549","How do I install PyCrypto on Windows?","I've read every other google source and SO thread, with nothing working.
Python 2.7.3 32bit installed on Windows 7 64bit. Download, extracting, and then trying to install PyCrypto results in ""Unable to find vcvarsall.bat"".
So I install MinGW and tack that on the install line as the compiler of choice. But then I get the error ""RuntimeError: chmod error"".
How in the world do I get around this? I've tried using pip, which gives the same result. I found a prebuilt PyCrypto 2.3 binary and installed that, but it's nowhere to be found on the system (not working).
Any ideas?
","My answer might not be related to problem mention here, but I had same problem with Python 3.4 where Crypto.Cipher wasn't a valid import. So I tried installing PyCrypto and went into problems.
After some research I found with 3.4 you should use pycryptodome.
I install pycryptodome using pycharm and I was good.
from Crypto.Cipher import AES
","268575","<python><windows><python-2.7><pycrypto>","137","1","20","2019-05-22 08:30:05","11405769","9","63","1203437","","2012-07-11 02:06:23","2012-07-10 01:44:52",""
"11405549","How do I install PyCrypto on Windows?","I've read every other google source and SO thread, with nothing working.
Python 2.7.3 32bit installed on Windows 7 64bit. Download, extracting, and then trying to install PyCrypto results in ""Unable to find vcvarsall.bat"".
So I install MinGW and tack that on the install line as the compiler of choice. But then I get the error ""RuntimeError: chmod error"".
How in the world do I get around this? I've tried using pip, which gives the same result. I found a prebuilt PyCrypto 2.3 binary and installed that, but it's nowhere to be found on the system (not working).
Any ideas?
"," Step 1: Install Visual C++ 2010 Express from 
here. 
(Do not install Microsoft Visual Studio 2010 Service Pack 1 ) 
Step 2: Remove all the Microsoft Visual C++ 2010 Redistributable packages from Control Panel\Programs and Features. If you don't do those then the install is going to fail with an obscure ""Fatal error during installation"" error.
Step 3: Install offline version of Windows SDK for Visual Studio 2010 (v7.1) from here.
This is required for 64bit extensions. Windows has builtin mounting for ISOs like Pismo. 
Step 4: You need to install the ISO file with Pismo File Mount Audit Package. Download Pismo from here 
Step 5: Right click the downloaded ISO file and choose mount with Pismo. Thereafter, install the Setup\SDKSetup.exe instead of setup.exe.
Step 6a: Create a vcvars64.bat file in C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\bin\amd64 by changing directory to C:\Program Files (x86)\Microsoft Visual Studio version\VC\ on the command prompt.
Type command on the command prompt:
cd C:\Program Files (x86)\Microsoft Visual Studio version\VC\r 
Step 6b:
To configure this Command Prompt window for 64-bit command-line builds that target x86 platforms, at the command prompt, enter:
vcvarsall x86 Click here for more options.
 Step 7: At the command prompt, install the PyCrypto by typing:
C:\Python3X>pip install -U your_wh_file

","268575","<python><windows><python-2.7><pycrypto>","137","0","20","2019-05-22 08:30:05","11405769","9","63","1203437","","2012-07-11 02:06:23","2012-07-10 01:44:52",""
"11405549","How do I install PyCrypto on Windows?","I've read every other google source and SO thread, with nothing working.
Python 2.7.3 32bit installed on Windows 7 64bit. Download, extracting, and then trying to install PyCrypto results in ""Unable to find vcvarsall.bat"".
So I install MinGW and tack that on the install line as the compiler of choice. But then I get the error ""RuntimeError: chmod error"".
How in the world do I get around this? I've tried using pip, which gives the same result. I found a prebuilt PyCrypto 2.3 binary and installed that, but it's nowhere to be found on the system (not working).
Any ideas?
","I had Pycharm for python.

Go to pycharm -> file -> setting -> project interpreter
Click on +
Search for ""pycrypto"" and install the package

Note: If you don't have ""Microsoft Visual C++ Compiler for Python 2.7"" installed then it will prompt for installation, once installation finished try the above steps it should work fine. 
","268575","<python><windows><python-2.7><pycrypto>","137","0","20","2019-05-22 08:30:05","11405769","9","63","1203437","","2012-07-11 02:06:23","2012-07-10 01:44:52",""
"11405549","How do I install PyCrypto on Windows?","I've read every other google source and SO thread, with nothing working.
Python 2.7.3 32bit installed on Windows 7 64bit. Download, extracting, and then trying to install PyCrypto results in ""Unable to find vcvarsall.bat"".
So I install MinGW and tack that on the install line as the compiler of choice. But then I get the error ""RuntimeError: chmod error"".
How in the world do I get around this? I've tried using pip, which gives the same result. I found a prebuilt PyCrypto 2.3 binary and installed that, but it's nowhere to be found on the system (not working).
Any ideas?
","If you are on Windows and struggling with installing Pycrypcto just use the:
pip install pycryptodome.
It works like a miracle and it will make your life much easier than trying to do a lot of configurations and tweaks.
","268575","<python><windows><python-2.7><pycrypto>","137","2","20","2019-05-22 08:30:05","11405769","9","63","1203437","","2012-07-11 02:06:23","2012-07-10 01:44:52",""
"30056762","RSA encryption and decryption in Python","I need help using RSA encryption and decryption in Python. 
I am creating a private/public key pair, encrypting a message with keys and writing message to a file. Then I am reading ciphertext from file and decrypting text using key. 
I am having trouble with the decryption portion. As you can see in my code below, when I put in decrypted = key.decrypt(message) that the program works, yet the decrypted message is encrypted again. It seems like it is not reading the ciphertext from the file. 
Can anyone help me write this code so decryption reads ciphertext from file and then uses key to decrypt ciphertext?
import Crypto
from Crypto.PublicKey import RSA
from Crypto import Random

random_generator = Random.new().read
key = RSA.generate(1024, random_generator) #generate public and private keys

publickey = key.publickey # pub key export for exchange

encrypted = publickey.encrypt('encrypt this message', 32)
#message to encrypt is in the above line 'encrypt this message'

print 'encrypted message:', encrypted #ciphertext

f = open ('encryption.txt', 'w'w)
f.write(str(encrypted)) #write ciphertext to file
f.close()

#decrypted code below

f = open ('encryption.txt', 'r')
message = f.read()

decrypted = key.decrypt(message)

print 'decrypted', decrypted

f = open ('encryption.txt', 'w')
f.write(str(message))
f.write(str(decrypted))
f.close()

","In order to make it work you need to convert key from str to tuple before decryption(ast.literal_eval function). Here is fixed code:
import Crypto
from Crypto.PublicKey import RSA
from Crypto import Random
import ast

random_generator = Random.new().read
key = RSA.generate(1024, random_generator) #generate pub and priv key

publickey = key.publickey() # pub key export for exchange

encrypted = publickey.encrypt('encrypt this message', 32)
#message to encrypt is in the above line 'encrypt this message'

print 'encrypted message:', encrypted #ciphertext
f = open ('encryption.txt', 'w')
f.write(str(encrypted)) #write ciphertext to file
f.close()

#decrypted code below

f = open('encryption.txt', 'r')
message = f.read()


decrypted = key.decrypt(ast.literal_eval(str(encrypted)))

print 'decrypted', decrypted

f = open ('encryption.txt', 'w')
f.write(str(message))
f.write(str(decrypted))
f.close()

","118321","<python><encryption><rsa><pycrypto>","23","44","5","2019-10-29 09:47:54","","5","12","1576794","","2016-05-07 16:48:25","2015-05-05 15:08:38",""
"30056762","RSA encryption and decryption in Python","I need help using RSA encryption and decryption in Python. 
I am creating a private/public key pair, encrypting a message with keys and writing message to a file. Then I am reading ciphertext from file and decrypting text using key. 
I am having trouble with the decryption portion. As you can see in my code below, when I put in decrypted = key.decrypt(message) that the program works, yet the decrypted message is encrypted again. It seems like it is not reading the ciphertext from the file. 
Can anyone help me write this code so decryption reads ciphertext from file and then uses key to decrypt ciphertext?
import Crypto
from Crypto.PublicKey import RSA
from Crypto import Random

random_generator = Random.new().read
key = RSA.generate(1024, random_generator) #generate public and private keys

publickey = key.publickey # pub key export for exchange

encrypted = publickey.encrypt('encrypt this message', 32)
#message to encrypt is in the above line 'encrypt this message'

print 'encrypted message:', encrypted #ciphertext

f = open ('encryption.txt', 'w'w)
f.write(str(encrypted)) #write ciphertext to file
f.close()

#decrypted code below

f = open ('encryption.txt', 'r')
message = f.read()

decrypted = key.decrypt(message)

print 'decrypted', decrypted

f = open ('encryption.txt', 'w')
f.write(str(message))
f.write(str(decrypted))
f.close()

","# coding: utf-8
from __future__ import unicode_literals
import base64
import os

import six
from Crypto import Random
from Crypto.PublicKey import RSA


class PublicKeyFileExists(Exception): pass


class RSAEncryption(object):
    PRIVATE_KEY_FILE_PATH = None
    PUBLIC_KEY_FILE_PATH = None

    def encrypt(self, message):
        public_key = self._get_public_key()
        public_key_object = RSA.importKey(public_key)
        random_phrase = 'M'
        encrypted_message = public_key_object.encrypt(self._to_format_for_encrypt(message), random_phrase)[0]
        # use base64 for save encrypted_message in database without problems with encoding
        return base64.b64encode(encrypted_message)

    def decrypt(self, encoded_encrypted_message):
        encrypted_message = base64.b64decode(encoded_encrypted_message)
        private_key = self._get_private_key()
        private_key_object = RSA.importKey(private_key)
        decrypted_message = private_key_object.decrypt(encrypted_message)
        return six.text_type(decrypted_message, encoding='utf8')

    def generate_keys(self):
        """"""Be careful rewrite your keys""""""
        random_generator = Random.new().read
        key = RSA.generate(1024, random_generator)
        private, public = key.exportKey(), key.publickey().exportKey()

        if os.path.isfile(self.PUBLIC_KEY_FILE_PATH):
            raise PublicKeyFileExists('Файл с публичным ключом существует. Удалите ключ')
        self.create_directories()

        with open(self.PRIVATE_KEY_FILE_PATH, 'w') as private_file:
            private_file.write(private)
        with open(self.PUBLIC_KEY_FILE_PATH, 'w') as public_file:
            public_file.write(public)
        return private, public

    def create_directories(self, for_private_key=True):
        public_key_path = self.PUBLIC_KEY_FILE_PATH.rsplit('/', 1)
        if not os.path.exists(public_key_path):
            os.makedirs(public_key_path)
        if for_private_key:
            private_key_path = self.PRIVATE_KEY_FILE_PATH.rsplit('/', 1)
            if not os.path.exists(private_key_path):
                os.makedirs(private_key_path)

    def _get_public_key(self):
        """"""run generate_keys() before get keys """"""
        with open(self.PUBLIC_KEY_FILE_PATH, 'r') as _file:
            return _file.read()

    def _get_private_key(self):
        """"""run generate_keys() before get keys """"""
        with open(self.PRIVATE_KEY_FILE_PATH, 'r') as _file:
            return _file.read()

    def _to_format_for_encrypt(value):
        if isinstance(value, int):
            return six.binary_type(value)
        for str_type in six.string_types:
            if isinstance(value, str_type):
                return value.encode('utf8')
        if isinstance(value, six.binary_type):
            return value

And use
KEYS_DIRECTORY = settings.SURVEY_DIR_WITH_ENCRYPTED_KEYS

class TestingEncryption(RSAEncryption):
    PRIVATE_KEY_FILE_PATH = KEYS_DIRECTORY + 'private.key'
    PUBLIC_KEY_FILE_PATH = KEYS_DIRECTORY + 'public.key'


# django/flask
from django.core.files import File

class ProductionEncryption(RSAEncryption):
    PUBLIC_KEY_FILE_PATH = settings.SURVEY_DIR_WITH_ENCRYPTED_KEYS + 'public.key'

    def _get_private_key(self):
        """"""run generate_keys() before get keys """"""
        from corportal.utils import global_elements
        private_key = global_elements.request.FILES.get('private_key')
        if private_key:
            private_key_file = File(private_key)
            return private_key_file.read()

message = 'Hello мой friend'
encrypted_mes = ProductionEncryption().encrypt(message)
decrypted_mes = ProductionEncryption().decrypt(message)

","118321","<python><encryption><rsa><pycrypto>","23","6","5","2019-10-29 09:47:54","","5","12","1576794","","2016-05-07 16:48:25","2015-05-05 15:08:38",""
"30056762","RSA encryption and decryption in Python","I need help using RSA encryption and decryption in Python. 
I am creating a private/public key pair, encrypting a message with keys and writing message to a file. Then I am reading ciphertext from file and decrypting text using key. 
I am having trouble with the decryption portion. As you can see in my code below, when I put in decrypted = key.decrypt(message) that the program works, yet the decrypted message is encrypted again. It seems like it is not reading the ciphertext from the file. 
Can anyone help me write this code so decryption reads ciphertext from file and then uses key to decrypt ciphertext?
import Crypto
from Crypto.PublicKey import RSA
from Crypto import Random

random_generator = Random.new().read
key = RSA.generate(1024, random_generator) #generate public and private keys

publickey = key.publickey # pub key export for exchange

encrypted = publickey.encrypt('encrypt this message', 32)
#message to encrypt is in the above line 'encrypt this message'

print 'encrypted message:', encrypted #ciphertext

f = open ('encryption.txt', 'w'w)
f.write(str(encrypted)) #write ciphertext to file
f.close()

#decrypted code below

f = open ('encryption.txt', 'r')
message = f.read()

decrypted = key.decrypt(message)

print 'decrypted', decrypted

f = open ('encryption.txt', 'w')
f.write(str(message))
f.write(str(decrypted))
f.close()

","from Crypto.Cipher import DES

des = DES.new('01234567', DES.MODE_ECB)
text = ""abcdefgh8""
leno = len(text)
if leno % 8 != 0:
    for i in range(0, 8 -leno%8):
        text += "" ""

cipher_text = des.encrypt(text)

des.decrypt(cipher_text)

In above code basically, you can encrypte your text with a password like ""01234567"" and decrypte it again with that password. It is simple. The only caution is, your text length should be power of 8, so there is a little for loop that adds enough space to make your text's length divisible by 8. Thats it. 
","118321","<python><encryption><rsa><pycrypto>","23","-1","5","2019-10-29 09:47:54","","5","12","1576794","","2016-05-07 16:48:25","2015-05-05 15:08:38",""
"30056762","RSA encryption and decryption in Python","I need help using RSA encryption and decryption in Python. 
I am creating a private/public key pair, encrypting a message with keys and writing message to a file. Then I am reading ciphertext from file and decrypting text using key. 
I am having trouble with the decryption portion. As you can see in my code below, when I put in decrypted = key.decrypt(message) that the program works, yet the decrypted message is encrypted again. It seems like it is not reading the ciphertext from the file. 
Can anyone help me write this code so decryption reads ciphertext from file and then uses key to decrypt ciphertext?
import Crypto
from Crypto.PublicKey import RSA
from Crypto import Random

random_generator = Random.new().read
key = RSA.generate(1024, random_generator) #generate public and private keys

publickey = key.publickey # pub key export for exchange

encrypted = publickey.encrypt('encrypt this message', 32)
#message to encrypt is in the above line 'encrypt this message'

print 'encrypted message:', encrypted #ciphertext

f = open ('encryption.txt', 'w'w)
f.write(str(encrypted)) #write ciphertext to file
f.close()

#decrypted code below

f = open ('encryption.txt', 'r')
message = f.read()

decrypted = key.decrypt(message)

print 'decrypted', decrypted

f = open ('encryption.txt', 'w')
f.write(str(message))
f.write(str(decrypted))
f.close()

","Here is my implementation for python 3 and pycrypto
from Crypto.PublicKey import RSA
key = RSA.generate(4096)
f = open('/home/john/Desktop/my_rsa_public.pem', 'wb')
f.write(key.publickey().exportKey('PEM'))
f.close()
f = open('/home/john/Desktop/my_rsa_private.pem', 'wb')
f.write(key.exportKey('PEM'))
f.close()

f = open('/home/john/Desktop/my_rsa_public.pem', 'rb')
f1 = open('/home/john/Desktop/my_rsa_private.pem', 'rb')
key = RSA.importKey(f.read())
key1 = RSA.importKey(f1.read())

x = key.encrypt(b""dddddd"",32)

print(x)
z = key1.decrypt(x)
print(z)

","118321","<python><encryption><rsa><pycrypto>","23","2","5","2019-10-29 09:47:54","","5","12","1576794","","2016-05-07 16:48:25","2015-05-05 15:08:38",""
"30056762","RSA encryption and decryption in Python","I need help using RSA encryption and decryption in Python. 
I am creating a private/public key pair, encrypting a message with keys and writing message to a file. Then I am reading ciphertext from file and decrypting text using key. 
I am having trouble with the decryption portion. As you can see in my code below, when I put in decrypted = key.decrypt(message) that the program works, yet the decrypted message is encrypted again. It seems like it is not reading the ciphertext from the file. 
Can anyone help me write this code so decryption reads ciphertext from file and then uses key to decrypt ciphertext?
import Crypto
from Crypto.PublicKey import RSA
from Crypto import Random

random_generator = Random.new().read
key = RSA.generate(1024, random_generator) #generate public and private keys

publickey = key.publickey # pub key export for exchange

encrypted = publickey.encrypt('encrypt this message', 32)
#message to encrypt is in the above line 'encrypt this message'

print 'encrypted message:', encrypted #ciphertext

f = open ('encryption.txt', 'w'w)
f.write(str(encrypted)) #write ciphertext to file
f.close()

#decrypted code below

f = open ('encryption.txt', 'r')
message = f.read()

decrypted = key.decrypt(message)

print 'decrypted', decrypted

f = open ('encryption.txt', 'w')
f.write(str(message))
f.write(str(decrypted))
f.close()

","PKCS#1 OAEP is an asymmetric cipher based on RSA and the OAEP padding
from Crypto.PublicKey import RSA
from Crypto import Random
from Crypto.Cipher import PKCS1_OAEP


def rsa_encrypt_decrypt():
    key = RSA.generate(2048)
    private_key = key.export_key('PEM')
    public_key = key.publickey().exportKey('PEM')
    message = input('plain text for RSA encryption and decryption:')
    message = str.encode(message)

    rsa_public_key = RSA.importKey(public_key)
    rsa_public_key = PKCS1_OAEP.new(rsa_public_key)
    encrypted_text = rsa_public_key.encrypt(message)
    #encrypted_text = b64encode(encrypted_text)

    print('your encrypted_text is : {}'.format(encrypted_text))


    rsa_private_key = RSA.importKey(private_key)
    rsa_private_key = PKCS1_OAEP.new(rsa_private_key)
    decrypted_text = rsa_private_key.decrypt(encrypted_text)

    print('your decrypted_text is : {}'.format(decrypted_text))

","118321","<python><encryption><rsa><pycrypto>","23","4","5","2019-10-29 09:47:54","","5","12","1576794","","2016-05-07 16:48:25","2015-05-05 15:08:38",""
"16761458","How to decrypt OpenSSL AES-encrypted files in Python?","OpenSSL provides a popular (but insecure – see below!) command line interface for AES encryption:
openssl aes-256-cbc -salt -in filename -out filename.enc

Python has support for AES in the shape of the PyCrypto package, but it only provides the tools. How to use Python/PyCrypto to decrypt files that have been encrypted using OpenSSL?
Notice
This question used to also concern encryption in Python using the same scheme. I have since removed that part to discourage anyone from using it. Do NOT encrypt any more data in this way, because it is NOT secure by today's standards. You should ONLY use decryption, for no other reasons than BACKWARD COMPATIBILITY, i.e. when you have no other choice. Want to encrypt? Use NaCl/libsodium if you possibly can.
","Given the popularity of Python, at first I was disappointed that there was no complete answer to this question to be found. It took me a fair amount of reading different answers on this board, as well as other resources, to get it right. I thought I might share the result for future reference and perhaps review; I'm by no means a cryptography expert! However, the code below appears to work seamlessly:
from hashlib import md5
from Crypto.Cipher import AES
from Crypto import Random

def derive_key_and_iv(password, salt, key_length, iv_length):
    d = d_i = ''
    while len(d) < key_length + iv_length:
        d_i = md5(d_i + password + salt).digest()
        d += d_i
    return d[:key_length], d[key_length:key_length+iv_length]

def decrypt(in_file, out_file, password, key_length=32):
    bs = AES.block_size
    salt = in_file.read(bs)[len('Salted__'):]
    key, iv = derive_key_and_iv(password, salt, key_length, bs)
    cipher = AES.new(key, AES.MODE_CBC, iv)
    next_chunk = ''
    finished = False
    while not finished:
        chunk, next_chunk = next_chunk, cipher.decrypt(in_file.read(1024 * bs))
        if len(next_chunk) == 0:
            padding_length = ord(chunk[-1])
            chunk = chunk[:-padding_length]
            finished = True
        out_file.write(chunk)

Usage:
with open(in_filename, 'rb') as in_file, open(out_filename, 'wb') as out_file:
    decrypt(in_file, out_file, password)

If you see a chance to improve on this or extend it to be more flexible (e.g. make it work without salt, or provide Python 3 compatibility), please feel free to do so.
Notice
This answer used to also concern encryption in Python using the same scheme. I have since removed that part to discourage anyone from using it. Do NOT encrypt any more data in this way, because it is NOT secure by today's standards. You should ONLY use decryption, for no other reasons than BACKWARD COMPATIBILITY, i.e. when you have no other choice. Want to encrypt? Use NaCl/libsodium if you possibly can.
","84547","<python><encryption><openssl><aes><pycrypto>","52","88","5","2017-12-11 13:47:46","16761459","8","52","1163893","","2017-12-06 15:50:56","2013-05-26 16:47:41",""
"16761458","How to decrypt OpenSSL AES-encrypted files in Python?","OpenSSL provides a popular (but insecure – see below!) command line interface for AES encryption:
openssl aes-256-cbc -salt -in filename -out filename.enc

Python has support for AES in the shape of the PyCrypto package, but it only provides the tools. How to use Python/PyCrypto to decrypt files that have been encrypted using OpenSSL?
Notice
This question used to also concern encryption in Python using the same scheme. I have since removed that part to discourage anyone from using it. Do NOT encrypt any more data in this way, because it is NOT secure by today's standards. You should ONLY use decryption, for no other reasons than BACKWARD COMPATIBILITY, i.e. when you have no other choice. Want to encrypt? Use NaCl/libsodium if you possibly can.
","I am re-posting your code with a couple of corrections (I didn't want to obscure your version). While your code works, it does not detect some errors around padding. In particular, if the decryption key provided is incorrect, your padding logic may do something odd. If you agree with my change, you may update your solution.
from hashlib import md5
from Crypto.Cipher import AES
from Crypto import Random

def derive_key_and_iv(password, salt, key_length, iv_length):
    d = d_i = ''
    while len(d) < key_length + iv_length:
        d_i = md5(d_i + password + salt).digest()
        d += d_i
    return d[:key_length], d[key_length:key_length+iv_length]

# This encryption mode is no longer secure by today's standards.
# See note in original question above.
def obsolete_encrypt(in_file, out_file, password, key_length=32):
    bs = AES.block_size
    salt = Random.new().read(bs - len('Salted__'))
    key, iv = derive_key_and_iv(password, salt, key_length, bs)
    cipher = AES.new(key, AES.MODE_CBC, iv)
    out_file.write('Salted__' + salt)
    finished = False
    while not finished:
        chunk = in_file.read(1024 * bs)
        if len(chunk) == 0 or len(chunk) % bs != 0:
            padding_length = bs - (len(chunk) % bs)
            chunk += padding_length * chr(padding_length)
            finished = True
        out_file.write(cipher.encrypt(chunk))

def decrypt(in_file, out_file, password, key_length=32):
    bs = AES.block_size
    salt = in_file.read(bs)[len('Salted__'):]
    key, iv = derive_key_and_iv(password, salt, key_length, bs)
    cipher = AES.new(key, AES.MODE_CBC, iv)
    next_chunk = ''
    finished = False
    while not finished:
        chunk, next_chunk = next_chunk, cipher.decrypt(in_file.read(1024 * bs))
        if len(next_chunk) == 0:
            padding_length = ord(chunk[-1])
            if padding_length < 1 or padding_length > bs:
               raise ValueError(""bad decrypt pad (%d)"" % padding_length)
            # all the pad-bytes must be the same
            if chunk[-padding_length:] != (padding_length * chr(padding_length)):
               # this is similar to the bad decrypt:evp_enc.c from openssl program
               raise ValueError(""bad decrypt"")
            chunk = chunk[:-padding_length]
            finished = True
        out_file.write(chunk)

","84547","<python><encryption><openssl><aes><pycrypto>","52","21","5","2017-12-11 13:47:46","16761459","8","52","1163893","","2017-12-06 15:50:56","2013-05-26 16:47:41",""
"16761458","How to decrypt OpenSSL AES-encrypted files in Python?","OpenSSL provides a popular (but insecure – see below!) command line interface for AES encryption:
openssl aes-256-cbc -salt -in filename -out filename.enc

Python has support for AES in the shape of the PyCrypto package, but it only provides the tools. How to use Python/PyCrypto to decrypt files that have been encrypted using OpenSSL?
Notice
This question used to also concern encryption in Python using the same scheme. I have since removed that part to discourage anyone from using it. Do NOT encrypt any more data in this way, because it is NOT secure by today's standards. You should ONLY use decryption, for no other reasons than BACKWARD COMPATIBILITY, i.e. when you have no other choice. Want to encrypt? Use NaCl/libsodium if you possibly can.
","The code below should be Python 3 compatible with the small changes documented in the code. Also wanted to use os.urandom instead of Crypto.Random. 'Salted__' is replaced with salt_header that can be tailored or left empty if needed.
from os import urandom
from hashlib import md5

from Crypto.Cipher import AES

def derive_key_and_iv(password, salt, key_length, iv_length):
    d = d_i = b''  # changed '' to b''
    while len(d) < key_length + iv_length:
        # changed password to str.encode(password)
        d_i = md5(d_i + str.encode(password) + salt).digest()
        d += d_i
    return d[:key_length], d[key_length:key_length+iv_length]

def encrypt(in_file, out_file, password, salt_header='', key_length=32):
    # added salt_header=''
    bs = AES.block_size
    # replaced Crypt.Random with os.urandom
    salt = urandom(bs - len(salt_header))
    key, iv = derive_key_and_iv(password, salt, key_length, bs)
    cipher = AES.new(key, AES.MODE_CBC, iv)
    # changed 'Salted__' to str.encode(salt_header)
    out_file.write(str.encode(salt_header) + salt)
    finished = False
    while not finished:
        chunk = in_file.read(1024 * bs) 
        if len(chunk) == 0 or len(chunk) % bs != 0:
            padding_length = (bs - len(chunk) % bs) or bs
            # changed right side to str.encode(...)
            chunk += str.encode(
                padding_length * chr(padding_length))
            finished = True
        out_file.write(cipher.encrypt(chunk))

def decrypt(in_file, out_file, password, salt_header='', key_length=32):
    # added salt_header=''
    bs = AES.block_size
    # changed 'Salted__' to salt_header
    salt = in_file.read(bs)[len(salt_header):]
    key, iv = derive_key_and_iv(password, salt, key_length, bs)
    cipher = AES.new(key, AES.MODE_CBC, iv)
    next_chunk = ''
    finished = False
    while not finished:
        chunk, next_chunk = next_chunk, cipher.decrypt(
            in_file.read(1024 * bs))
        if len(next_chunk) == 0:
            padding_length = chunk[-1]  # removed ord(...) as unnecessary
            chunk = chunk[:-padding_length]
            finished = True 
        out_file.write(bytes(x for x in chunk))  # changed chunk to bytes(...)

","84547","<python><encryption><openssl><aes><pycrypto>","52","13","5","2017-12-11 13:47:46","16761459","8","52","1163893","","2017-12-06 15:50:56","2013-05-26 16:47:41",""
"16761458","How to decrypt OpenSSL AES-encrypted files in Python?","OpenSSL provides a popular (but insecure – see below!) command line interface for AES encryption:
openssl aes-256-cbc -salt -in filename -out filename.enc

Python has support for AES in the shape of the PyCrypto package, but it only provides the tools. How to use Python/PyCrypto to decrypt files that have been encrypted using OpenSSL?
Notice
This question used to also concern encryption in Python using the same scheme. I have since removed that part to discourage anyone from using it. Do NOT encrypt any more data in this way, because it is NOT secure by today's standards. You should ONLY use decryption, for no other reasons than BACKWARD COMPATIBILITY, i.e. when you have no other choice. Want to encrypt? Use NaCl/libsodium if you possibly can.
","I know this is a bit late but here is a solution that I blogged in 2013 about how to use the python pycrypto package to encrypt/decrypt in an openssl compatible way. It has been tested on python2.7 and python3.x. The source code and a test script can be found here.
One of the key differences between this solution and the excellent solutions presented above is that it differentiates between pipe and file I/O which can cause problems in some applications.
The key functions from that blog are shown below.
# ================================================================
# get_key_and_iv
# ================================================================
def get_key_and_iv(password, salt, klen=32, ilen=16, msgdgst='md5'):
    '''
    Derive the key and the IV from the given password and salt.

    This is a niftier implementation than my direct transliteration of
    the C++ code although I modified to support different digests.

    CITATION: http://stackoverflow.com/questions/13907841/implement-openssl-aes-encryption-in-python

    @param password  The password to use as the seed.
    @param salt      The salt.
    @param klen      The key length.
    @param ilen      The initialization vector length.
    @param msgdgst   The message digest algorithm to use.
    '''
    # equivalent to:
    #   from hashlib import <mdi> as mdf
    #   from hashlib import md5 as mdf
    #   from hashlib import sha512 as mdf
    mdf = getattr(__import__('hashlib', fromlist=[msgdgst]), msgdgst)
    password = password.encode('ascii', 'ignore')  # convert to ASCII

    try:
        maxlen = klen + ilen
        keyiv = mdf(password + salt).digest()
        tmp = [keyiv]
        while len(tmp) < maxlen:
            tmp.append( mdf(tmp[-1] + password + salt).digest() )
            keyiv += tmp[-1]  # append the last byte
        key = keyiv[:klen]
        iv = keyiv[klen:klen+ilen]
        return key, iv
    except UnicodeDecodeError:
        return None, None


# ================================================================
# encrypt
# ================================================================
def encrypt(password, plaintext, chunkit=True, msgdgst='md5'):
    '''
    Encrypt the plaintext using the password using an openssl
    compatible encryption algorithm. It is the same as creating a file
    with plaintext contents and running openssl like this:

    $ cat plaintext
    <plaintext>
    $ openssl enc -e -aes-256-cbc -base64 -salt \\
        -pass pass:<password> -n plaintext

    @param password  The password.
    @param plaintext The plaintext to encrypt.
    @param chunkit   Flag that tells encrypt to split the ciphertext
                     into 64 character (MIME encoded) lines.
                     This does not affect the decrypt operation.
    @param msgdgst   The message digest algorithm.
    '''
    salt = os.urandom(8)
    key, iv = get_key_and_iv(password, salt, msgdgst=msgdgst)
    if key is None:
        return None

    # PKCS#7 padding
    padding_len = 16 - (len(plaintext) % 16)
    if isinstance(plaintext, str):
        padded_plaintext = plaintext + (chr(padding_len) * padding_len)
    else: # assume bytes
        padded_plaintext = plaintext + (bytearray([padding_len] * padding_len))

    # Encrypt
    cipher = AES.new(key, AES.MODE_CBC, iv)
    ciphertext = cipher.encrypt(padded_plaintext)

    # Make openssl compatible.
    # I first discovered this when I wrote the C++ Cipher class.
    # CITATION: http://projects.joelinoff.com/cipher-1.1/doxydocs/html/
    openssl_ciphertext = b'Salted__' + salt + ciphertext
    b64 = base64.b64encode(openssl_ciphertext)
    if not chunkit:
        return b64

    LINELEN = 64
    chunk = lambda s: b'\n'.join(s[i:min(i+LINELEN, len(s))]
                                for i in range(0, len(s), LINELEN))
    return chunk(b64)


# ================================================================
# decrypt
# ================================================================
def decrypt(password, ciphertext, msgdgst='md5'):
    '''
    Decrypt the ciphertext using the password using an openssl
    compatible decryption algorithm. It is the same as creating a file
    with ciphertext contents and running openssl like this:

    $ cat ciphertext
    # ENCRYPTED
    <ciphertext>
    $ egrep -v '^#|^$' | \\
        openssl enc -d -aes-256-cbc -base64 -salt -pass pass:<password> -in ciphertext
    @param password   The password.
    @param ciphertext The ciphertext to decrypt.
    @param msgdgst    The message digest algorithm.
    @returns the decrypted data.
    '''

    # unfilter -- ignore blank lines and comments
    if isinstance(ciphertext, str):
        filtered = ''
        nl = '\n'
        re1 = r'^\s*$'
        re2 = r'^\s*#'
    else:
        filtered = b''
        nl = b'\n'
        re1 = b'^\\s*$'
        re2 = b'^\\s*#'

    for line in ciphertext.split(nl):
        line = line.strip()
        if re.search(re1,line) or re.search(re2, line):
            continue
        filtered += line + nl

    # Base64 decode
    raw = base64.b64decode(filtered)
    assert(raw[:8] == b'Salted__' )
    salt = raw[8:16]  # get the salt

    # Now create the key and iv.
    key, iv = get_key_and_iv(password, salt, msgdgst=msgdgst)
    if key is None:
        return None

    # The original ciphertext
    ciphertext = raw[16:]

    # Decrypt
    cipher = AES.new(key, AES.MODE_CBC, iv)
    padded_plaintext = cipher.decrypt(ciphertext)

    if isinstance(padded_plaintext, str):
        padding_len = ord(padded_plaintext[-1])
    else:
        padding_len = padded_plaintext[-1]
    plaintext = padded_plaintext[:-padding_len]
    return plaintext

","84547","<python><encryption><openssl><aes><pycrypto>","52","0","5","2017-12-11 13:47:46","16761459","8","52","1163893","","2017-12-06 15:50:56","2013-05-26 16:47:41",""
"16761458","How to decrypt OpenSSL AES-encrypted files in Python?","OpenSSL provides a popular (but insecure – see below!) command line interface for AES encryption:
openssl aes-256-cbc -salt -in filename -out filename.enc

Python has support for AES in the shape of the PyCrypto package, but it only provides the tools. How to use Python/PyCrypto to decrypt files that have been encrypted using OpenSSL?
Notice
This question used to also concern encryption in Python using the same scheme. I have since removed that part to discourage anyone from using it. Do NOT encrypt any more data in this way, because it is NOT secure by today's standards. You should ONLY use decryption, for no other reasons than BACKWARD COMPATIBILITY, i.e. when you have no other choice. Want to encrypt? Use NaCl/libsodium if you possibly can.
","Note: this method is not OpenSSL compatible
But it is suitable if all you want to do is encrypt and decrypt files.
A self-answer I copied from here. I think this is, perhaps, a simpler and more secure option. Although I would be interested in some expert opinion on how secure it is.
I used Python 3.6 and SimpleCrypt to encrypt the file and then uploaded it. 
I think this is the code I used to encrypt the file:
from simplecrypt import encrypt, decrypt
f = open('file.csv','r').read()
ciphertext = encrypt('USERPASSWORD',f.encode('utf8')) # I am not certain of whether I used the .encode('utf8')
e = open('file.enc','wb') # file.enc doesn't need to exist, python will create it
e.write(ciphertext)
e.close

This is the code I use to decrypt at runtime, I run getpass(""password: "") as an argument so I don't have to store a password variable in memory
from simplecrypt import encrypt, decrypt
from getpass import getpass

# opens the file
f = open('file.enc','rb').read()

print('Please enter the password and press the enter key \n Decryption may take some time')

# Decrypts the data, requires a user-input password
plaintext = decrypt(getpass(""password: ""), f).decode('utf8')
print('Data have been Decrypted')

Note, the UTF-8 encoding behaviour is different in python 2.7 so the code will be slightly different.
","84547","<python><encryption><openssl><aes><pycrypto>","52","-1","5","2017-12-11 13:47:46","16761459","8","52","1163893","","2017-12-06 15:50:56","2013-05-26 16:47:41",""
"20538685","Install paramiko on Windows","OK. I read installing paramiko on Windows.
All mentioned methods simply do not work.
Authors have different environments with different components/libraries installed. Or may be they don't test their solutions before posting an answer :)
I removed all python versions and libs from my machine (Windows 8 x64) and tried to install python and paramiko from scratch.
Method number 1 (FAILED)

Install python-2.7.3.amd64.msi
Install pycrypto-2.6.win-amd64-py2.7.exe
Download https://github.com/paramiko/paramiko/archive/master.zip, unpack it.
Run setup.py install
Go to IDLE, run import paramiko.

Result:
Traceback (most recent call last):   File ""<pyshell#0>"", line 1, in
<module>
  import paramiko   File ""C:\Python27\lib\site-packages\paramiko\__init__.py"", line 65, in
<module>
    from transport import SecurityOptions, Transport   File ""C:\Python27\lib\site-packages\paramiko\transport.py"", line 45, in
<module>
   from paramiko.ecdsakey import ECDSAKey   File ""C:\Python27\lib\site-packages\paramiko\ecdsakey.py"", line 24, in
<module>
  from ecdsa import SigningKey, VerifyingKey, der, curves ImportError: No module named ecdsa

Method number 2 (FAILED)

Install python-2.7.3.amd64.msi
Install setuptools-1.4.2.win-amd64-py2.7.exe
Install pip-1.4.1.win-amd64-py2.7.exe
pip install paramiko
Go to IDLE, run import paramiko.

Result:
Traceback (most recent call last):
  File ""<pyshell#0>"", line 1, in <module>
    import paramiko
  File ""C:\Python27\lib\site-packages\paramiko\__init__.py"", line 64, in <module>
    from transport import SecurityOptions, Transport
  File ""C:\Python27\lib\site-packages\paramiko\transport.py"", line 33, in <module>
    from paramiko import util
  File ""C:\Python27\lib\site-packages\paramiko\util.py"", line 33, in <module>
    from paramiko.common import *
  File ""C:\Python27\lib\site-packages\paramiko\common.py"", line 98, in <module>
    from Crypto import Random
ImportError: No module named Crypto

Method number 3 (SUCCESS)

Install python-2.7.3.amd64.msi
Install pycrypto-2.6.win-amd64-py2.7.exe
Install setuptools-1.4.2.win-amd64-py2.7.exe
Install pip-1.4.1.win-amd64-py2.7.exe
Run pip install ecdsa
Download and extract https://github.com/paramiko/paramiko/archive/master.zip
Run setup.py install
Open IDLE, run import paramiko

Result: no errors
Please, help me to find step-by-step algorithm for installing python and paramiko on clean windows 8 machine. Thanx.
UPD: Solution has been found.
","You're missing the pycrypto dependency. pip is the easiest way:
pip install pycrypto
pip install paramiko

Alternatively, you can install from source, with:
easy_install ./

(See: https://github.com/paramiko/paramiko)
","69571","<python><pip><paramiko><easy-install><pycrypto>","10","4","5","2016-12-31 14:44:09","","1","7","-1","","2017-05-23 12:24:40","2013-12-12 08:44:49",""
"20538685","Install paramiko on Windows","OK. I read installing paramiko on Windows.
All mentioned methods simply do not work.
Authors have different environments with different components/libraries installed. Or may be they don't test their solutions before posting an answer :)
I removed all python versions and libs from my machine (Windows 8 x64) and tried to install python and paramiko from scratch.
Method number 1 (FAILED)

Install python-2.7.3.amd64.msi
Install pycrypto-2.6.win-amd64-py2.7.exe
Download https://github.com/paramiko/paramiko/archive/master.zip, unpack it.
Run setup.py install
Go to IDLE, run import paramiko.

Result:
Traceback (most recent call last):   File ""<pyshell#0>"", line 1, in
<module>
  import paramiko   File ""C:\Python27\lib\site-packages\paramiko\__init__.py"", line 65, in
<module>
    from transport import SecurityOptions, Transport   File ""C:\Python27\lib\site-packages\paramiko\transport.py"", line 45, in
<module>
   from paramiko.ecdsakey import ECDSAKey   File ""C:\Python27\lib\site-packages\paramiko\ecdsakey.py"", line 24, in
<module>
  from ecdsa import SigningKey, VerifyingKey, der, curves ImportError: No module named ecdsa

Method number 2 (FAILED)

Install python-2.7.3.amd64.msi
Install setuptools-1.4.2.win-amd64-py2.7.exe
Install pip-1.4.1.win-amd64-py2.7.exe
pip install paramiko
Go to IDLE, run import paramiko.

Result:
Traceback (most recent call last):
  File ""<pyshell#0>"", line 1, in <module>
    import paramiko
  File ""C:\Python27\lib\site-packages\paramiko\__init__.py"", line 64, in <module>
    from transport import SecurityOptions, Transport
  File ""C:\Python27\lib\site-packages\paramiko\transport.py"", line 33, in <module>
    from paramiko import util
  File ""C:\Python27\lib\site-packages\paramiko\util.py"", line 33, in <module>
    from paramiko.common import *
  File ""C:\Python27\lib\site-packages\paramiko\common.py"", line 98, in <module>
    from Crypto import Random
ImportError: No module named Crypto

Method number 3 (SUCCESS)

Install python-2.7.3.amd64.msi
Install pycrypto-2.6.win-amd64-py2.7.exe
Install setuptools-1.4.2.win-amd64-py2.7.exe
Install pip-1.4.1.win-amd64-py2.7.exe
Run pip install ecdsa
Download and extract https://github.com/paramiko/paramiko/archive/master.zip
Run setup.py install
Open IDLE, run import paramiko

Result: no errors
Please, help me to find step-by-step algorithm for installing python and paramiko on clean windows 8 machine. Thanx.
UPD: Solution has been found.
","
For the first sequence you need to install 'ecdsa' with pip because paramiko compilation does not automatically resolve its dependencies (as your working solution)
The second failed, as stated already, because you did not install pycrypto before running pip install paramiko. I would recommend to use this option rather than installing from source to enable easier upgrade path using pip. Also pip is the easiest to install using their standalone install script: http://pip.readthedocs.org/en/latest/installing.html

","69571","<python><pip><paramiko><easy-install><pycrypto>","10","0","5","2016-12-31 14:44:09","","1","7","-1","","2017-05-23 12:24:40","2013-12-12 08:44:49",""
"20538685","Install paramiko on Windows","OK. I read installing paramiko on Windows.
All mentioned methods simply do not work.
Authors have different environments with different components/libraries installed. Or may be they don't test their solutions before posting an answer :)
I removed all python versions and libs from my machine (Windows 8 x64) and tried to install python and paramiko from scratch.
Method number 1 (FAILED)

Install python-2.7.3.amd64.msi
Install pycrypto-2.6.win-amd64-py2.7.exe
Download https://github.com/paramiko/paramiko/archive/master.zip, unpack it.
Run setup.py install
Go to IDLE, run import paramiko.

Result:
Traceback (most recent call last):   File ""<pyshell#0>"", line 1, in
<module>
  import paramiko   File ""C:\Python27\lib\site-packages\paramiko\__init__.py"", line 65, in
<module>
    from transport import SecurityOptions, Transport   File ""C:\Python27\lib\site-packages\paramiko\transport.py"", line 45, in
<module>
   from paramiko.ecdsakey import ECDSAKey   File ""C:\Python27\lib\site-packages\paramiko\ecdsakey.py"", line 24, in
<module>
  from ecdsa import SigningKey, VerifyingKey, der, curves ImportError: No module named ecdsa

Method number 2 (FAILED)

Install python-2.7.3.amd64.msi
Install setuptools-1.4.2.win-amd64-py2.7.exe
Install pip-1.4.1.win-amd64-py2.7.exe
pip install paramiko
Go to IDLE, run import paramiko.

Result:
Traceback (most recent call last):
  File ""<pyshell#0>"", line 1, in <module>
    import paramiko
  File ""C:\Python27\lib\site-packages\paramiko\__init__.py"", line 64, in <module>
    from transport import SecurityOptions, Transport
  File ""C:\Python27\lib\site-packages\paramiko\transport.py"", line 33, in <module>
    from paramiko import util
  File ""C:\Python27\lib\site-packages\paramiko\util.py"", line 33, in <module>
    from paramiko.common import *
  File ""C:\Python27\lib\site-packages\paramiko\common.py"", line 98, in <module>
    from Crypto import Random
ImportError: No module named Crypto

Method number 3 (SUCCESS)

Install python-2.7.3.amd64.msi
Install pycrypto-2.6.win-amd64-py2.7.exe
Install setuptools-1.4.2.win-amd64-py2.7.exe
Install pip-1.4.1.win-amd64-py2.7.exe
Run pip install ecdsa
Download and extract https://github.com/paramiko/paramiko/archive/master.zip
Run setup.py install
Open IDLE, run import paramiko

Result: no errors
Please, help me to find step-by-step algorithm for installing python and paramiko on clean windows 8 machine. Thanx.
UPD: Solution has been found.
","For installing paramiko, Visual Basic Compiler is needed.
First download it from Microcsoft: Microsoft Visual C++ Compiler for Python 2.7
Open the paramiko directory and run     python setup.py install    . And it will download dependencies from internet; especially pycrypto and installation will be successful.
","69571","<python><pip><paramiko><easy-install><pycrypto>","10","5","5","2016-12-31 14:44:09","","1","7","-1","","2017-05-23 12:24:40","2013-12-12 08:44:49",""
"20538685","Install paramiko on Windows","OK. I read installing paramiko on Windows.
All mentioned methods simply do not work.
Authors have different environments with different components/libraries installed. Or may be they don't test their solutions before posting an answer :)
I removed all python versions and libs from my machine (Windows 8 x64) and tried to install python and paramiko from scratch.
Method number 1 (FAILED)

Install python-2.7.3.amd64.msi
Install pycrypto-2.6.win-amd64-py2.7.exe
Download https://github.com/paramiko/paramiko/archive/master.zip, unpack it.
Run setup.py install
Go to IDLE, run import paramiko.

Result:
Traceback (most recent call last):   File ""<pyshell#0>"", line 1, in
<module>
  import paramiko   File ""C:\Python27\lib\site-packages\paramiko\__init__.py"", line 65, in
<module>
    from transport import SecurityOptions, Transport   File ""C:\Python27\lib\site-packages\paramiko\transport.py"", line 45, in
<module>
   from paramiko.ecdsakey import ECDSAKey   File ""C:\Python27\lib\site-packages\paramiko\ecdsakey.py"", line 24, in
<module>
  from ecdsa import SigningKey, VerifyingKey, der, curves ImportError: No module named ecdsa

Method number 2 (FAILED)

Install python-2.7.3.amd64.msi
Install setuptools-1.4.2.win-amd64-py2.7.exe
Install pip-1.4.1.win-amd64-py2.7.exe
pip install paramiko
Go to IDLE, run import paramiko.

Result:
Traceback (most recent call last):
  File ""<pyshell#0>"", line 1, in <module>
    import paramiko
  File ""C:\Python27\lib\site-packages\paramiko\__init__.py"", line 64, in <module>
    from transport import SecurityOptions, Transport
  File ""C:\Python27\lib\site-packages\paramiko\transport.py"", line 33, in <module>
    from paramiko import util
  File ""C:\Python27\lib\site-packages\paramiko\util.py"", line 33, in <module>
    from paramiko.common import *
  File ""C:\Python27\lib\site-packages\paramiko\common.py"", line 98, in <module>
    from Crypto import Random
ImportError: No module named Crypto

Method number 3 (SUCCESS)

Install python-2.7.3.amd64.msi
Install pycrypto-2.6.win-amd64-py2.7.exe
Install setuptools-1.4.2.win-amd64-py2.7.exe
Install pip-1.4.1.win-amd64-py2.7.exe
Run pip install ecdsa
Download and extract https://github.com/paramiko/paramiko/archive/master.zip
Run setup.py install
Open IDLE, run import paramiko

Result: no errors
Please, help me to find step-by-step algorithm for installing python and paramiko on clean windows 8 machine. Thanx.
UPD: Solution has been found.
","For windows users:

Install Python 2.7.11
Download and install pycrypto win-amd64-py2.7.exe
Now open a command prompt. If you have installed python at the following location:
c:\Python27 then change directory and go to Scripts directory.
Now type the following command:
pip install paramiko


That's it, you have successfully installed Paramiko.
","69571","<python><pip><paramiko><easy-install><pycrypto>","10","2","5","2016-12-31 14:44:09","","1","7","-1","","2017-05-23 12:24:40","2013-12-12 08:44:49",""
"20538685","Install paramiko on Windows","OK. I read installing paramiko on Windows.
All mentioned methods simply do not work.
Authors have different environments with different components/libraries installed. Or may be they don't test their solutions before posting an answer :)
I removed all python versions and libs from my machine (Windows 8 x64) and tried to install python and paramiko from scratch.
Method number 1 (FAILED)

Install python-2.7.3.amd64.msi
Install pycrypto-2.6.win-amd64-py2.7.exe
Download https://github.com/paramiko/paramiko/archive/master.zip, unpack it.
Run setup.py install
Go to IDLE, run import paramiko.

Result:
Traceback (most recent call last):   File ""<pyshell#0>"", line 1, in
<module>
  import paramiko   File ""C:\Python27\lib\site-packages\paramiko\__init__.py"", line 65, in
<module>
    from transport import SecurityOptions, Transport   File ""C:\Python27\lib\site-packages\paramiko\transport.py"", line 45, in
<module>
   from paramiko.ecdsakey import ECDSAKey   File ""C:\Python27\lib\site-packages\paramiko\ecdsakey.py"", line 24, in
<module>
  from ecdsa import SigningKey, VerifyingKey, der, curves ImportError: No module named ecdsa

Method number 2 (FAILED)

Install python-2.7.3.amd64.msi
Install setuptools-1.4.2.win-amd64-py2.7.exe
Install pip-1.4.1.win-amd64-py2.7.exe
pip install paramiko
Go to IDLE, run import paramiko.

Result:
Traceback (most recent call last):
  File ""<pyshell#0>"", line 1, in <module>
    import paramiko
  File ""C:\Python27\lib\site-packages\paramiko\__init__.py"", line 64, in <module>
    from transport import SecurityOptions, Transport
  File ""C:\Python27\lib\site-packages\paramiko\transport.py"", line 33, in <module>
    from paramiko import util
  File ""C:\Python27\lib\site-packages\paramiko\util.py"", line 33, in <module>
    from paramiko.common import *
  File ""C:\Python27\lib\site-packages\paramiko\common.py"", line 98, in <module>
    from Crypto import Random
ImportError: No module named Crypto

Method number 3 (SUCCESS)

Install python-2.7.3.amd64.msi
Install pycrypto-2.6.win-amd64-py2.7.exe
Install setuptools-1.4.2.win-amd64-py2.7.exe
Install pip-1.4.1.win-amd64-py2.7.exe
Run pip install ecdsa
Download and extract https://github.com/paramiko/paramiko/archive/master.zip
Run setup.py install
Open IDLE, run import paramiko

Result: no errors
Please, help me to find step-by-step algorithm for installing python and paramiko on clean windows 8 machine. Thanx.
UPD: Solution has been found.
","Also, I faced with the following errors like:
C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\BIN\cl.exe /c /nologo /Ox /MD /W3 /GS- /DNDEBUG -IC:\Python27-x86\include -IC:\Python27-x86\PC /Tcbuild\temp.win32-2.7\Release_openssl.c /Fobuild\temp.win32-2.7\Release\build\temp.win32-2.7\Release_openssl.obj
_openssl.c
build\temp.win32-2.7\Release_openssl.c(423) : fatal error C1083: Cannot open include file: 'openssl/opensslv.h': No such file or directory
error: command 'C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\BIN\cl.exe' failed with exit status 2
missed this file: 'openssl/opensslv.h'
it will be happens because while installation paramiko/cryptography/pyOpenSSL packages, they all needed distribution package of OpenSSL-Win32 with *.lib and headers files like: openssl\opensslv.h
so, after installation appropriate OpenSSL app. version, took from here: 
http://code.x2go.org/releases/binary-win32/3rd-party/Win32OpenSSL/
and copied all headers from C:\OpenSSL-Win32\include\openssl*.* to C:\Pyhton27\inclide*.*
and copied all libs from C:\OpenSSL-win32\lib to C:\Python27\Lib*.*
paramiko package was installed successfully. !
I hope it will be helpful somebody.:) 
good luck:) 
","69571","<python><pip><paramiko><easy-install><pycrypto>","10","0","5","2016-12-31 14:44:09","","1","7","-1","","2017-05-23 12:24:40","2013-12-12 08:44:49",""
"11596839","Installing PyCrypto on Ubuntu - fatal error on build","Having looked at other similar threads, I still can't get pycrypto running.
I'm trying to get it working on my Ubuntu laptop - but I couldn't manage it on my Windows PC either.
I downloaded pycrypto-2.6, extracted it, and ran
    python setup.py build

but then this happened
warning: GMP or MPIR library not found; Not building Crypto.PublicKey._fastmath.
building 'Crypto.Hash._MD2' extension
gcc -pthread -fno-strict-aliasing -fwrapv -Wall -Wstrict-prototypes -fPIC -std=c99 -O3 - fomit-frame-pointer -Isrc/ -I/usr/include/python2.7 -c src/MD2.c -o build/temp.linux-i686-?2.7/src/MD2.o
src/MD2.c:31:20: fatal error: Python.h: No such file or directory
compilation terminated.
error: command 'gcc' failed with exit status 1

Would appreciate any help.
","You need to install the Python development files.  I believe this will do it:
sudo apt-get install python-dev

","69562","<python><pycrypto>","60","144","3","2018-02-13 14:37:43","11596845","3","16","1446048","","2014-06-15 20:38:00","2012-07-22 00:17:37",""
"11596839","Installing PyCrypto on Ubuntu - fatal error on build","Having looked at other similar threads, I still can't get pycrypto running.
I'm trying to get it working on my Ubuntu laptop - but I couldn't manage it on my Windows PC either.
I downloaded pycrypto-2.6, extracted it, and ran
    python setup.py build

but then this happened
warning: GMP or MPIR library not found; Not building Crypto.PublicKey._fastmath.
building 'Crypto.Hash._MD2' extension
gcc -pthread -fno-strict-aliasing -fwrapv -Wall -Wstrict-prototypes -fPIC -std=c99 -O3 - fomit-frame-pointer -Isrc/ -I/usr/include/python2.7 -c src/MD2.c -o build/temp.linux-i686-?2.7/src/MD2.o
src/MD2.c:31:20: fatal error: Python.h: No such file or directory
compilation terminated.
error: command 'gcc' failed with exit status 1

Would appreciate any help.
","On Ubuntu, I needed some other packages for it to succeed:
apt-get install autoconf g++ python2.7-dev
pip install pycrypto

","69562","<python><pycrypto>","60","20","3","2018-02-13 14:37:43","11596845","3","16","1446048","","2014-06-15 20:38:00","2012-07-22 00:17:37",""
"11596839","Installing PyCrypto on Ubuntu - fatal error on build","Having looked at other similar threads, I still can't get pycrypto running.
I'm trying to get it working on my Ubuntu laptop - but I couldn't manage it on my Windows PC either.
I downloaded pycrypto-2.6, extracted it, and ran
    python setup.py build

but then this happened
warning: GMP or MPIR library not found; Not building Crypto.PublicKey._fastmath.
building 'Crypto.Hash._MD2' extension
gcc -pthread -fno-strict-aliasing -fwrapv -Wall -Wstrict-prototypes -fPIC -std=c99 -O3 - fomit-frame-pointer -Isrc/ -I/usr/include/python2.7 -c src/MD2.c -o build/temp.linux-i686-?2.7/src/MD2.o
src/MD2.c:31:20: fatal error: Python.h: No such file or directory
compilation terminated.
error: command 'gcc' failed with exit status 1

Would appreciate any help.
","On Ubuntu and if you use Python 3.x you will need:
sudo apt-get install gcc python3-dev

you probably already have gcc but just in case if you are trying this command from Dockerfile with base image python:3.6.4-slim-jessie then you will also need gcc.
","69562","<python><pycrypto>","60","6","3","2018-02-13 14:37:43","11596845","3","16","1446048","","2014-06-15 20:38:00","2012-07-22 00:17:37",""
"44951456","Pip error: Microsoft Visual C++ 14.0 is required","I just ran the ""pip install -U steem""-command and the installation worked well until it failed to install pycrypto. 
Afterwards I did the ""pip install cryptography"" command because I thought it was the missing package. 
So my question is, how I can install steem without the pycrypto-error (or the pycrypto-package in addition) and how to deinstall the cryptography-Package which I don't need. 
(I'm using Windows 7 and Python 3)
Requirement already up-to-date: python-dateutil in c:\users\***\appdata\lo
cal\programs\python\python36\lib\site-packages (from dateparser->maya->steem)
Collecting regex (from dateparser->maya->steem)
Downloading regex-2017.06.23-cp36-none-win_amd64.whl (245kB)
100% |████████████████████████████████| 245kB 499kB/s
Collecting pytzdata (from pendulum->maya->steem)
Downloading pytzdata-2017.2-py2.py3-none-any.whl (462kB)
100% |████████████████████████████████| 471kB 965kB/s
Installing collected packages: urllib3, idna, chardet, certifi, requests, pycryp
to, funcy, w3lib, voluptuous, diff-match-patch, scrypt, prettytable, appdirs, la
ngdetect, ruamel.yaml, humanize, tzlocal, regex, dateparser, pytzdata, pendulum,
maya, ecdsa, pylibscrypt, ujson, toolz, steem
Running setup.py install for pycrypto ... error
Complete output from command c:\users\***\appdata\local\programs\pytho
n\python36\python.exe -u -c ""import setuptools, tokenize;__file__='C:\\Users\\
***~1\\AppData\\Local\\Temp\\pip-build-k6flhu5k\\pycrypto\\setup.py';f=getattr(
tokenize, 'open', open)(__file__);code=f.read().replace('\r\n', '\n');f.close();
exec(compile(code, __file__, 'exec'))"" install --record C:\Users\***N~1\AppDat
a\Local\Temp\pip-igpkll6u-record\install-record.txt --single-version-externally-
managed --compile:
running install
running build
running build_py
creating build
creating build\lib.win-amd64-3.6
creating build\lib.win-amd64-3.6\Crypto
copying lib\Crypto\pct_warnings.py -> build\lib.win-amd64-3.6\Crypto
copying lib\Crypto\__init__.py -> build\lib.win-amd64-3.6\Crypto
creating build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\hashalgo.py -> build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\HMAC.py -> build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\MD2.py -> build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\MD4.py -> build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\MD5.py -> build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\RIPEMD.py -> build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\SHA.py -> build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\SHA224.py -> build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\SHA256.py -> build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\SHA384.py -> build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\SHA512.py -> build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\__init__.py -> build\lib.win-amd64-3.6\Crypto\Hash
creating build\lib.win-amd64-3.6\Crypto\Cipher
copying lib\Crypto\Cipher\AES.py -> build\lib.win-amd64-3.6\Crypto\Cipher
copying lib\Crypto\Cipher\ARC2.py -> build\lib.win-amd64-3.6\Crypto\Cipher
copying lib\Crypto\Cipher\ARC4.py -> build\lib.win-amd64-3.6\Crypto\Cipher
copying lib\Crypto\Cipher\blockalgo.py -> build\lib.win-amd64-3.6\Crypto\Cip
her
copying lib\Crypto\Cipher\Blowfish.py -> build\lib.win-amd64-3.6\Crypto\Ciph
er
copying lib\Crypto\Cipher\CAST.py -> build\lib.win-amd64-3.6\Crypto\Cipher
copying lib\Crypto\Cipher\DES.py -> build\lib.win-amd64-3.6\Crypto\Cipher
copying lib\Crypto\Cipher\DES3.py -> build\lib.win-amd64-3.6\Crypto\Cipher
copying lib\Crypto\Cipher\PKCS1_OAEP.py -> build\lib.win-amd64-3.6\Crypto\Ci
pher
copying lib\Crypto\Cipher\PKCS1_v1_5.py -> build\lib.win-amd64-3.6\Crypto\Ci
pher
copying lib\Crypto\Cipher\XOR.py -> build\lib.win-amd64-3.6\Crypto\Cipher
copying lib\Crypto\Cipher\__init__.py -> build\lib.win-amd64-3.6\Crypto\Ciph
er
creating build\lib.win-amd64-3.6\Crypto\Util
copying lib\Crypto\Util\asn1.py -> build\lib.win-amd64-3.6\Crypto\Util
copying lib\Crypto\Util\Counter.py -> build\lib.win-amd64-3.6\Crypto\Util
copying lib\Crypto\Util\number.py -> build\lib.win-amd64-3.6\Crypto\Util
copying lib\Crypto\Util\py3compat.py -> build\lib.win-amd64-3.6\Crypto\Util
copying lib\Crypto\Util\randpool.py -> build\lib.win-amd64-3.6\Crypto\Util
copying lib\Crypto\Util\RFC1751.py -> build\lib.win-amd64-3.6\Crypto\Util
copying lib\Crypto\Util\winrandom.py -> build\lib.win-amd64-3.6\Crypto\Util
copying lib\Crypto\Util\_number_new.py -> build\lib.win-amd64-3.6\Crypto\Uti
l
copying lib\Crypto\Util\__init__.py -> build\lib.win-amd64-3.6\Crypto\Util
creating build\lib.win-amd64-3.6\Crypto\Random
copying lib\Crypto\Random\random.py -> build\lib.win-amd64-3.6\Crypto\Random

copying lib\Crypto\Random\_UserFriendlyRNG.py -> build\lib.win-amd64-3.6\Cry
pto\Random
copying lib\Crypto\Random\__init__.py -> build\lib.win-amd64-3.6\Crypto\Rand
om
creating build\lib.win-amd64-3.6\Crypto\Random\Fortuna
copying lib\Crypto\Random\Fortuna\FortunaAccumulator.py -> build\lib.win-amd
64-3.6\Crypto\Random\Fortuna
copying lib\Crypto\Random\Fortuna\FortunaGenerator.py -> build\lib.win-amd64
-3.6\Crypto\Random\Fortuna
copying lib\Crypto\Random\Fortuna\SHAd256.py -> build\lib.win-amd64-3.6\Cryp
to\Random\Fortuna
copying lib\Crypto\Random\Fortuna\__init__.py -> build\lib.win-amd64-3.6\Cry
pto\Random\Fortuna
creating build\lib.win-amd64-3.6\Crypto\Random\OSRNG
copying lib\Crypto\Random\OSRNG\fallback.py -> build\lib.win-amd64-3.6\Crypt
o\Random\OSRNG
copying lib\Crypto\Random\OSRNG\nt.py -> build\lib.win-amd64-3.6\Crypto\Rand
om\OSRNG
copying lib\Crypto\Random\OSRNG\posix.py -> build\lib.win-amd64-3.6\Crypto\R
andom\OSRNG
copying lib\Crypto\Random\OSRNG\rng_base.py -> build\lib.win-amd64-3.6\Crypt
o\Random\OSRNG
copying lib\Crypto\Random\OSRNG\__init__.py -> build\lib.win-amd64-3.6\Crypt
o\Random\OSRNG
creating build\lib.win-amd64-3.6\Crypto\SelfTest
copying lib\Crypto\SelfTest\st_common.py -> build\lib.win-amd64-3.6\Crypto\S
elfTest
copying lib\Crypto\SelfTest\__init__.py -> build\lib.win-amd64-3.6\Crypto\Se
lfTest
creating build\lib.win-amd64-3.6\Crypto\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\common.py -> build\lib.win-amd64-3.6\Cryp
to\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\test_AES.py -> build\lib.win-amd64-3.6\Cr
ypto\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\test_ARC2.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\test_ARC4.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\test_Blowfish.py -> build\lib.win-amd64-3
.6\Crypto\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\test_CAST.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\test_DES.py -> build\lib.win-amd64-3.6\Cr
ypto\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\test_DES3.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\test_pkcs1_15.py -> build\lib.win-amd64-3
.6\Crypto\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\test_pkcs1_oaep.py -> build\lib.win-amd64
-3.6\Crypto\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\test_XOR.py -> build\lib.win-amd64-3.6\Cr
ypto\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\__init__.py -> build\lib.win-amd64-3.6\Cr
ypto\SelfTest\Cipher
creating build\lib.win-amd64-3.6\Crypto\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\common.py -> build\lib.win-amd64-3.6\Crypto
\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\test_HMAC.py -> build\lib.win-amd64-3.6\Cry
pto\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\test_MD2.py -> build\lib.win-amd64-3.6\Cryp
to\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\test_MD4.py -> build\lib.win-amd64-3.6\Cryp
to\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\test_MD5.py -> build\lib.win-amd64-3.6\Cryp
to\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\test_RIPEMD.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\test_SHA.py -> build\lib.win-amd64-3.6\Cryp
to\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\test_SHA224.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\test_SHA256.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\test_SHA384.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\test_SHA512.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\__init__.py -> build\lib.win-amd64-3.6\Cryp
to\SelfTest\Hash
creating build\lib.win-amd64-3.6\Crypto\SelfTest\Protocol
copying lib\Crypto\SelfTest\Protocol\test_AllOrNothing.py -> build\lib.win-a
md64-3.6\Crypto\SelfTest\Protocol
copying lib\Crypto\SelfTest\Protocol\test_chaffing.py -> build\lib.win-amd64
-3.6\Crypto\SelfTest\Protocol
copying lib\Crypto\SelfTest\Protocol\test_KDF.py -> build\lib.win-amd64-3.6\
Crypto\SelfTest\Protocol
copying lib\Crypto\SelfTest\Protocol\test_rfc1751.py -> build\lib.win-amd64-
3.6\Crypto\SelfTest\Protocol
copying lib\Crypto\SelfTest\Protocol\__init__.py -> build\lib.win-amd64-3.6\
Crypto\SelfTest\Protocol
creating build\lib.win-amd64-3.6\Crypto\SelfTest\PublicKey
copying lib\Crypto\SelfTest\PublicKey\test_DSA.py -> build\lib.win-amd64-3.6
\Crypto\SelfTest\PublicKey
copying lib\Crypto\SelfTest\PublicKey\test_ElGamal.py -> build\lib.win-amd64
-3.6\Crypto\SelfTest\PublicKey
copying lib\Crypto\SelfTest\PublicKey\test_importKey.py -> build\lib.win-amd
64-3.6\Crypto\SelfTest\PublicKey
copying lib\Crypto\SelfTest\PublicKey\test_RSA.py -> build\lib.win-amd64-3.6
\Crypto\SelfTest\PublicKey
copying lib\Crypto\SelfTest\PublicKey\__init__.py -> build\lib.win-amd64-3.6
\Crypto\SelfTest\PublicKey
creating build\lib.win-amd64-3.6\Crypto\SelfTest\Random
copying lib\Crypto\SelfTest\Random\test_random.py -> build\lib.win-amd64-3.6
\Crypto\SelfTest\Random
copying lib\Crypto\SelfTest\Random\test_rpoolcompat.py -> build\lib.win-amd6
4-3.6\Crypto\SelfTest\Random
copying lib\Crypto\SelfTest\Random\test__UserFriendlyRNG.py -> build\lib.win
-amd64-3.6\Crypto\SelfTest\Random
copying lib\Crypto\SelfTest\Random\__init__.py -> build\lib.win-amd64-3.6\Cr
ypto\SelfTest\Random
creating build\lib.win-amd64-3.6\Crypto\SelfTest\Random\Fortuna
copying lib\Crypto\SelfTest\Random\Fortuna\test_FortunaAccumulator.py -> bui
ld\lib.win-amd64-3.6\Crypto\SelfTest\Random\Fortuna
copying lib\Crypto\SelfTest\Random\Fortuna\test_FortunaGenerator.py -> build
\lib.win-amd64-3.6\Crypto\SelfTest\Random\Fortuna
copying lib\Crypto\SelfTest\Random\Fortuna\test_SHAd256.py -> build\lib.win-
amd64-3.6\Crypto\SelfTest\Random\Fortuna
copying lib\Crypto\SelfTest\Random\Fortuna\__init__.py -> build\lib.win-amd6
4-3.6\Crypto\SelfTest\Random\Fortuna
creating build\lib.win-amd64-3.6\Crypto\SelfTest\Random\OSRNG
copying lib\Crypto\SelfTest\Random\OSRNG\test_fallback.py -> build\lib.win-a
md  64-3.6\Crypto\SelfTest\Random\OSRNG
copying lib\Crypto\SelfTest\Random\OSRNG\test_generic.py -> build\lib.win-am
d64-3.6\Crypto\SelfTest\Random\OSRNG
copying lib\Crypto\SelfTest\Random\OSRNG\test_nt.py -> build\lib.win-amd64-3
.6\Crypto\SelfTest\Random\OSRNG
copying lib\Crypto\SelfTest\Random\OSRNG\test_posix.py -> build\lib.win-amd6
4-3.6\Crypto\SelfTest\Random\OSRNG
copying lib\Crypto\SelfTest\Random\OSRNG\test_winrandom.py -> build\lib.win-
amd64-3.6\Crypto\SelfTest\Random\OSRNG
copying lib\Crypto\SelfTest\Random\OSRNG\__init__.py -> build\lib.win-amd64-
3.6\Crypto\SelfTest\Random\OSRNG
creating build\lib.win-amd64-3.6\Crypto\SelfTest\Util
copying lib\Crypto\SelfTest\Util\test_asn1.py -> build\lib.win-amd64-3.6\Cry
pto\SelfTest\Util
copying lib\Crypto\SelfTest\Util\test_Counter.py -> build\lib.win-amd64-3.6\
Crypto\SelfTest\Util
copying lib\Crypto\SelfTest\Util\test_number.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Util
copying lib\Crypto\SelfTest\Util\test_winrandom.py -> build\lib.win-amd64-3.
6\Crypto\SelfTest\Util
copying lib\Crypto\SelfTest\Util\__init__.py -> build\lib.win-amd64-3.6\Cryp
to\SelfTest\Util
creating build\lib.win-amd64-3.6\Crypto\SelfTest\Signature
copying lib\Crypto\SelfTest\Signature\test_pkcs1_15.py -> build\lib.win-amd6
4-3.6\Crypto\SelfTest\Signature
copying lib\Crypto\SelfTest\Signature\test_pkcs1_pss.py -> build\lib.win-amd
64-3.6\Crypto\SelfTest\Signature
copying lib\Crypto\SelfTest\Signature\__init__.py -> build\lib.win-amd64-3.6
\Crypto\SelfTest\Signature
creating build\lib.win-amd64-3.6\Crypto\Protocol
copying lib\Crypto\Protocol\AllOrNothing.py -> build\lib.win-amd64-3.6\Crypt
o\Protocol
copying lib\Crypto\Protocol\Chaffing.py -> build\lib.win-amd64-3.6\Crypto\Pr
otocol
copying lib\Crypto\Protocol\KDF.py -> build\lib.win-amd64-3.6\Crypto\Protoco
l
copying lib\Crypto\Protocol\__init__.py -> build\lib.win-amd64-3.6\Crypto\Pr
otocol
creating build\lib.win-amd64-3.6\Crypto\PublicKey
copying lib\Crypto\PublicKey\DSA.py -> build\lib.win-amd64-3.6\Crypto\Public
Key
copying lib\Crypto\PublicKey\ElGamal.py -> build\lib.win-amd64-3.6\Crypto\Pu
blicKey
copying lib\Crypto\PublicKey\pubkey.py -> build\lib.win-amd64-3.6\Crypto\Pub
licKey
copying lib\Crypto\PublicKey\RSA.py -> build\lib.win-amd64-3.6\Crypto\Public
Key
copying lib\Crypto\PublicKey\_DSA.py -> build\lib.win-amd64-3.6\Crypto\Publi
cKey
copying lib\Crypto\PublicKey\_RSA.py -> build\lib.win-amd64-3.6\Crypto\Publi
cKey
copying lib\Crypto\PublicKey\_slowmath.py -> build\lib.win-amd64-3.6\Crypto\
PublicKey
copying lib\Crypto\PublicKey\__init__.py -> build\lib.win-amd64-3.6\Crypto\P
ublicKey
creating build\lib.win-amd64-3.6\Crypto\Signature
copying lib\Crypto\Signature\PKCS1_PSS.py -> build\lib.win-amd64-3.6\Crypto\
Signature
copying lib\Crypto\Signature\PKCS1_v1_5.py -> build\lib.win-amd64-3.6\Crypto
\Signature
copying lib\Crypto\Signature\__init__.py -> build\lib.win-amd64-3.6\Crypto\S
ignature
Skipping optional fixer: buffer
Skipping optional fixer: idioms
Skipping optional fixer: set_literal
Skipping optional fixer: ws_comma
running build_ext
warning: GMP or MPIR library not found; Not building Crypto.PublicKey._fastm
ath.
building 'Crypto.Random.OSRNG.winrandom' extension
error: Microsoft Visual C++ 14.0 is required. Get it with ""Microsoft Visual
C++ Build Tools"": http://landinghub.visualstudio.com/visual-cpp-build-tools

----------------------------------------
Command ""c:\users\***\appdata\local\programs\python\python36\python.exe -u
-c ""import setuptools, tokenize;__file__='C:\\Users\\***N~1\\AppData\\Local\\
Temp\\pip-build-k6flhu5k\\pycrypto\\setup.py';f=getattr(tokenize, 'open', open)(
__file__);code=f.read().replace('\r\n', '\n');f.close();exec(compile(code,   __fil
e__, 'exec'))"" install --record C:\Users\***N~1\AppData\Local\Temp\pip-igpkll6
u-record\install-record.txt --single-version-externally-managed --compile""   faile
d with error code 1 in C:\Users\***N~1\AppData\Local\Temp\pip-build-    k6flhu5k\p
ycrypto\

C:\Users\***>pip install cryptography
Collecting cryptography
Downloading cryptography-1.9-cp36-cp36m-win_amd64.whl (1.3MB)
100% |████████████████████████████████| 1.3MB 581kB/s
Requirement already satisfied: six>=1.4.1 in c:\users\***\appdata\local\pr
ograms\python\python36\lib\site-packages (from cryptography)
Collecting cffi>=1.7 (from cryptography)
Downloading cffi-1.10.0-cp36-cp36m-win_amd64.whl (160kB)
100% |████████████████████████████████| 163kB 736kB/s
Collecting asn1crypto>=0.21.0 (from cryptography)
Downloading asn1crypto-0.22.0-py2.py3-none-any.whl (97kB)
100% |████████████████████████████████| 102kB 1.0MB/s
Requirement already satisfied: idna>=2.1 in c:\users\***\appdata\local\pro
grams\python\python36\lib\site-packages (from cryptography)
Collecting pycparser (from cffi>=1.7->cryptography)
Downloading pycparser-2.18.tar.gz (245kB)
100% |████████████████████████████████| 256kB 639kB/s
Installing collected packages: pycparser, cffi, asn1crypto, cryptography
Running setup.py install for pycparser ... done
Successfully installed asn1crypto-0.22.0 cffi-1.10.0 cryptography-1.9      pycparser-
2.18

C:\Users\***>

","You need to install Microsoft Visual C++ 14.0 to install pycrypto:
error: Microsoft Visual C++ 14.0 is required. Get it with ""Microsoft Visual
C++ Build Tools"": http://landinghub.visualstudio.com/visual-cpp-build-tools

In the comments you ask which link to use. Use the link to Visual C++ 2015 Build Tools. That will install Visual C++ 14.0 without installing Visual Studio.
In the comments you ask about methods of installing pycrypto that do not require installing a compiler. The binaries in the links appear to be for earlier versions of Python than you are using. One link is to a binary in a DropBox account.
I do not recommend downloading binary versions of cryptography libraries provided by third parties. The only way to guarantee that you are getting a version of pycrypto that is compatible with your version of Python and has not been built with any backdoors is to build it from the source.
After you have installed Visual C++, just re-run the original command:
pip install -U steem

To find out what the various install options mean, run this command:
pip help install

The help for the -U option says
-U, --upgrade        Upgrade all specified packages to the newest available
                     version. The handling of dependencies depends on the
                     upgrade-strategy used.

If you do not already have the steem library installed, you can run the command without the -U option.
","60793","<python><pycrypto>","21","32","6","2019-11-08 05:33:58","44953739","1","6","3657941","","2017-07-11 15:28:31","2017-07-06 14:15:04",""
"44951456","Pip error: Microsoft Visual C++ 14.0 is required","I just ran the ""pip install -U steem""-command and the installation worked well until it failed to install pycrypto. 
Afterwards I did the ""pip install cryptography"" command because I thought it was the missing package. 
So my question is, how I can install steem without the pycrypto-error (or the pycrypto-package in addition) and how to deinstall the cryptography-Package which I don't need. 
(I'm using Windows 7 and Python 3)
Requirement already up-to-date: python-dateutil in c:\users\***\appdata\lo
cal\programs\python\python36\lib\site-packages (from dateparser->maya->steem)
Collecting regex (from dateparser->maya->steem)
Downloading regex-2017.06.23-cp36-none-win_amd64.whl (245kB)
100% |████████████████████████████████| 245kB 499kB/s
Collecting pytzdata (from pendulum->maya->steem)
Downloading pytzdata-2017.2-py2.py3-none-any.whl (462kB)
100% |████████████████████████████████| 471kB 965kB/s
Installing collected packages: urllib3, idna, chardet, certifi, requests, pycryp
to, funcy, w3lib, voluptuous, diff-match-patch, scrypt, prettytable, appdirs, la
ngdetect, ruamel.yaml, humanize, tzlocal, regex, dateparser, pytzdata, pendulum,
maya, ecdsa, pylibscrypt, ujson, toolz, steem
Running setup.py install for pycrypto ... error
Complete output from command c:\users\***\appdata\local\programs\pytho
n\python36\python.exe -u -c ""import setuptools, tokenize;__file__='C:\\Users\\
***~1\\AppData\\Local\\Temp\\pip-build-k6flhu5k\\pycrypto\\setup.py';f=getattr(
tokenize, 'open', open)(__file__);code=f.read().replace('\r\n', '\n');f.close();
exec(compile(code, __file__, 'exec'))"" install --record C:\Users\***N~1\AppDat
a\Local\Temp\pip-igpkll6u-record\install-record.txt --single-version-externally-
managed --compile:
running install
running build
running build_py
creating build
creating build\lib.win-amd64-3.6
creating build\lib.win-amd64-3.6\Crypto
copying lib\Crypto\pct_warnings.py -> build\lib.win-amd64-3.6\Crypto
copying lib\Crypto\__init__.py -> build\lib.win-amd64-3.6\Crypto
creating build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\hashalgo.py -> build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\HMAC.py -> build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\MD2.py -> build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\MD4.py -> build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\MD5.py -> build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\RIPEMD.py -> build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\SHA.py -> build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\SHA224.py -> build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\SHA256.py -> build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\SHA384.py -> build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\SHA512.py -> build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\__init__.py -> build\lib.win-amd64-3.6\Crypto\Hash
creating build\lib.win-amd64-3.6\Crypto\Cipher
copying lib\Crypto\Cipher\AES.py -> build\lib.win-amd64-3.6\Crypto\Cipher
copying lib\Crypto\Cipher\ARC2.py -> build\lib.win-amd64-3.6\Crypto\Cipher
copying lib\Crypto\Cipher\ARC4.py -> build\lib.win-amd64-3.6\Crypto\Cipher
copying lib\Crypto\Cipher\blockalgo.py -> build\lib.win-amd64-3.6\Crypto\Cip
her
copying lib\Crypto\Cipher\Blowfish.py -> build\lib.win-amd64-3.6\Crypto\Ciph
er
copying lib\Crypto\Cipher\CAST.py -> build\lib.win-amd64-3.6\Crypto\Cipher
copying lib\Crypto\Cipher\DES.py -> build\lib.win-amd64-3.6\Crypto\Cipher
copying lib\Crypto\Cipher\DES3.py -> build\lib.win-amd64-3.6\Crypto\Cipher
copying lib\Crypto\Cipher\PKCS1_OAEP.py -> build\lib.win-amd64-3.6\Crypto\Ci
pher
copying lib\Crypto\Cipher\PKCS1_v1_5.py -> build\lib.win-amd64-3.6\Crypto\Ci
pher
copying lib\Crypto\Cipher\XOR.py -> build\lib.win-amd64-3.6\Crypto\Cipher
copying lib\Crypto\Cipher\__init__.py -> build\lib.win-amd64-3.6\Crypto\Ciph
er
creating build\lib.win-amd64-3.6\Crypto\Util
copying lib\Crypto\Util\asn1.py -> build\lib.win-amd64-3.6\Crypto\Util
copying lib\Crypto\Util\Counter.py -> build\lib.win-amd64-3.6\Crypto\Util
copying lib\Crypto\Util\number.py -> build\lib.win-amd64-3.6\Crypto\Util
copying lib\Crypto\Util\py3compat.py -> build\lib.win-amd64-3.6\Crypto\Util
copying lib\Crypto\Util\randpool.py -> build\lib.win-amd64-3.6\Crypto\Util
copying lib\Crypto\Util\RFC1751.py -> build\lib.win-amd64-3.6\Crypto\Util
copying lib\Crypto\Util\winrandom.py -> build\lib.win-amd64-3.6\Crypto\Util
copying lib\Crypto\Util\_number_new.py -> build\lib.win-amd64-3.6\Crypto\Uti
l
copying lib\Crypto\Util\__init__.py -> build\lib.win-amd64-3.6\Crypto\Util
creating build\lib.win-amd64-3.6\Crypto\Random
copying lib\Crypto\Random\random.py -> build\lib.win-amd64-3.6\Crypto\Random

copying lib\Crypto\Random\_UserFriendlyRNG.py -> build\lib.win-amd64-3.6\Cry
pto\Random
copying lib\Crypto\Random\__init__.py -> build\lib.win-amd64-3.6\Crypto\Rand
om
creating build\lib.win-amd64-3.6\Crypto\Random\Fortuna
copying lib\Crypto\Random\Fortuna\FortunaAccumulator.py -> build\lib.win-amd
64-3.6\Crypto\Random\Fortuna
copying lib\Crypto\Random\Fortuna\FortunaGenerator.py -> build\lib.win-amd64
-3.6\Crypto\Random\Fortuna
copying lib\Crypto\Random\Fortuna\SHAd256.py -> build\lib.win-amd64-3.6\Cryp
to\Random\Fortuna
copying lib\Crypto\Random\Fortuna\__init__.py -> build\lib.win-amd64-3.6\Cry
pto\Random\Fortuna
creating build\lib.win-amd64-3.6\Crypto\Random\OSRNG
copying lib\Crypto\Random\OSRNG\fallback.py -> build\lib.win-amd64-3.6\Crypt
o\Random\OSRNG
copying lib\Crypto\Random\OSRNG\nt.py -> build\lib.win-amd64-3.6\Crypto\Rand
om\OSRNG
copying lib\Crypto\Random\OSRNG\posix.py -> build\lib.win-amd64-3.6\Crypto\R
andom\OSRNG
copying lib\Crypto\Random\OSRNG\rng_base.py -> build\lib.win-amd64-3.6\Crypt
o\Random\OSRNG
copying lib\Crypto\Random\OSRNG\__init__.py -> build\lib.win-amd64-3.6\Crypt
o\Random\OSRNG
creating build\lib.win-amd64-3.6\Crypto\SelfTest
copying lib\Crypto\SelfTest\st_common.py -> build\lib.win-amd64-3.6\Crypto\S
elfTest
copying lib\Crypto\SelfTest\__init__.py -> build\lib.win-amd64-3.6\Crypto\Se
lfTest
creating build\lib.win-amd64-3.6\Crypto\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\common.py -> build\lib.win-amd64-3.6\Cryp
to\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\test_AES.py -> build\lib.win-amd64-3.6\Cr
ypto\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\test_ARC2.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\test_ARC4.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\test_Blowfish.py -> build\lib.win-amd64-3
.6\Crypto\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\test_CAST.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\test_DES.py -> build\lib.win-amd64-3.6\Cr
ypto\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\test_DES3.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\test_pkcs1_15.py -> build\lib.win-amd64-3
.6\Crypto\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\test_pkcs1_oaep.py -> build\lib.win-amd64
-3.6\Crypto\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\test_XOR.py -> build\lib.win-amd64-3.6\Cr
ypto\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\__init__.py -> build\lib.win-amd64-3.6\Cr
ypto\SelfTest\Cipher
creating build\lib.win-amd64-3.6\Crypto\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\common.py -> build\lib.win-amd64-3.6\Crypto
\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\test_HMAC.py -> build\lib.win-amd64-3.6\Cry
pto\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\test_MD2.py -> build\lib.win-amd64-3.6\Cryp
to\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\test_MD4.py -> build\lib.win-amd64-3.6\Cryp
to\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\test_MD5.py -> build\lib.win-amd64-3.6\Cryp
to\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\test_RIPEMD.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\test_SHA.py -> build\lib.win-amd64-3.6\Cryp
to\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\test_SHA224.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\test_SHA256.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\test_SHA384.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\test_SHA512.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\__init__.py -> build\lib.win-amd64-3.6\Cryp
to\SelfTest\Hash
creating build\lib.win-amd64-3.6\Crypto\SelfTest\Protocol
copying lib\Crypto\SelfTest\Protocol\test_AllOrNothing.py -> build\lib.win-a
md64-3.6\Crypto\SelfTest\Protocol
copying lib\Crypto\SelfTest\Protocol\test_chaffing.py -> build\lib.win-amd64
-3.6\Crypto\SelfTest\Protocol
copying lib\Crypto\SelfTest\Protocol\test_KDF.py -> build\lib.win-amd64-3.6\
Crypto\SelfTest\Protocol
copying lib\Crypto\SelfTest\Protocol\test_rfc1751.py -> build\lib.win-amd64-
3.6\Crypto\SelfTest\Protocol
copying lib\Crypto\SelfTest\Protocol\__init__.py -> build\lib.win-amd64-3.6\
Crypto\SelfTest\Protocol
creating build\lib.win-amd64-3.6\Crypto\SelfTest\PublicKey
copying lib\Crypto\SelfTest\PublicKey\test_DSA.py -> build\lib.win-amd64-3.6
\Crypto\SelfTest\PublicKey
copying lib\Crypto\SelfTest\PublicKey\test_ElGamal.py -> build\lib.win-amd64
-3.6\Crypto\SelfTest\PublicKey
copying lib\Crypto\SelfTest\PublicKey\test_importKey.py -> build\lib.win-amd
64-3.6\Crypto\SelfTest\PublicKey
copying lib\Crypto\SelfTest\PublicKey\test_RSA.py -> build\lib.win-amd64-3.6
\Crypto\SelfTest\PublicKey
copying lib\Crypto\SelfTest\PublicKey\__init__.py -> build\lib.win-amd64-3.6
\Crypto\SelfTest\PublicKey
creating build\lib.win-amd64-3.6\Crypto\SelfTest\Random
copying lib\Crypto\SelfTest\Random\test_random.py -> build\lib.win-amd64-3.6
\Crypto\SelfTest\Random
copying lib\Crypto\SelfTest\Random\test_rpoolcompat.py -> build\lib.win-amd6
4-3.6\Crypto\SelfTest\Random
copying lib\Crypto\SelfTest\Random\test__UserFriendlyRNG.py -> build\lib.win
-amd64-3.6\Crypto\SelfTest\Random
copying lib\Crypto\SelfTest\Random\__init__.py -> build\lib.win-amd64-3.6\Cr
ypto\SelfTest\Random
creating build\lib.win-amd64-3.6\Crypto\SelfTest\Random\Fortuna
copying lib\Crypto\SelfTest\Random\Fortuna\test_FortunaAccumulator.py -> bui
ld\lib.win-amd64-3.6\Crypto\SelfTest\Random\Fortuna
copying lib\Crypto\SelfTest\Random\Fortuna\test_FortunaGenerator.py -> build
\lib.win-amd64-3.6\Crypto\SelfTest\Random\Fortuna
copying lib\Crypto\SelfTest\Random\Fortuna\test_SHAd256.py -> build\lib.win-
amd64-3.6\Crypto\SelfTest\Random\Fortuna
copying lib\Crypto\SelfTest\Random\Fortuna\__init__.py -> build\lib.win-amd6
4-3.6\Crypto\SelfTest\Random\Fortuna
creating build\lib.win-amd64-3.6\Crypto\SelfTest\Random\OSRNG
copying lib\Crypto\SelfTest\Random\OSRNG\test_fallback.py -> build\lib.win-a
md  64-3.6\Crypto\SelfTest\Random\OSRNG
copying lib\Crypto\SelfTest\Random\OSRNG\test_generic.py -> build\lib.win-am
d64-3.6\Crypto\SelfTest\Random\OSRNG
copying lib\Crypto\SelfTest\Random\OSRNG\test_nt.py -> build\lib.win-amd64-3
.6\Crypto\SelfTest\Random\OSRNG
copying lib\Crypto\SelfTest\Random\OSRNG\test_posix.py -> build\lib.win-amd6
4-3.6\Crypto\SelfTest\Random\OSRNG
copying lib\Crypto\SelfTest\Random\OSRNG\test_winrandom.py -> build\lib.win-
amd64-3.6\Crypto\SelfTest\Random\OSRNG
copying lib\Crypto\SelfTest\Random\OSRNG\__init__.py -> build\lib.win-amd64-
3.6\Crypto\SelfTest\Random\OSRNG
creating build\lib.win-amd64-3.6\Crypto\SelfTest\Util
copying lib\Crypto\SelfTest\Util\test_asn1.py -> build\lib.win-amd64-3.6\Cry
pto\SelfTest\Util
copying lib\Crypto\SelfTest\Util\test_Counter.py -> build\lib.win-amd64-3.6\
Crypto\SelfTest\Util
copying lib\Crypto\SelfTest\Util\test_number.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Util
copying lib\Crypto\SelfTest\Util\test_winrandom.py -> build\lib.win-amd64-3.
6\Crypto\SelfTest\Util
copying lib\Crypto\SelfTest\Util\__init__.py -> build\lib.win-amd64-3.6\Cryp
to\SelfTest\Util
creating build\lib.win-amd64-3.6\Crypto\SelfTest\Signature
copying lib\Crypto\SelfTest\Signature\test_pkcs1_15.py -> build\lib.win-amd6
4-3.6\Crypto\SelfTest\Signature
copying lib\Crypto\SelfTest\Signature\test_pkcs1_pss.py -> build\lib.win-amd
64-3.6\Crypto\SelfTest\Signature
copying lib\Crypto\SelfTest\Signature\__init__.py -> build\lib.win-amd64-3.6
\Crypto\SelfTest\Signature
creating build\lib.win-amd64-3.6\Crypto\Protocol
copying lib\Crypto\Protocol\AllOrNothing.py -> build\lib.win-amd64-3.6\Crypt
o\Protocol
copying lib\Crypto\Protocol\Chaffing.py -> build\lib.win-amd64-3.6\Crypto\Pr
otocol
copying lib\Crypto\Protocol\KDF.py -> build\lib.win-amd64-3.6\Crypto\Protoco
l
copying lib\Crypto\Protocol\__init__.py -> build\lib.win-amd64-3.6\Crypto\Pr
otocol
creating build\lib.win-amd64-3.6\Crypto\PublicKey
copying lib\Crypto\PublicKey\DSA.py -> build\lib.win-amd64-3.6\Crypto\Public
Key
copying lib\Crypto\PublicKey\ElGamal.py -> build\lib.win-amd64-3.6\Crypto\Pu
blicKey
copying lib\Crypto\PublicKey\pubkey.py -> build\lib.win-amd64-3.6\Crypto\Pub
licKey
copying lib\Crypto\PublicKey\RSA.py -> build\lib.win-amd64-3.6\Crypto\Public
Key
copying lib\Crypto\PublicKey\_DSA.py -> build\lib.win-amd64-3.6\Crypto\Publi
cKey
copying lib\Crypto\PublicKey\_RSA.py -> build\lib.win-amd64-3.6\Crypto\Publi
cKey
copying lib\Crypto\PublicKey\_slowmath.py -> build\lib.win-amd64-3.6\Crypto\
PublicKey
copying lib\Crypto\PublicKey\__init__.py -> build\lib.win-amd64-3.6\Crypto\P
ublicKey
creating build\lib.win-amd64-3.6\Crypto\Signature
copying lib\Crypto\Signature\PKCS1_PSS.py -> build\lib.win-amd64-3.6\Crypto\
Signature
copying lib\Crypto\Signature\PKCS1_v1_5.py -> build\lib.win-amd64-3.6\Crypto
\Signature
copying lib\Crypto\Signature\__init__.py -> build\lib.win-amd64-3.6\Crypto\S
ignature
Skipping optional fixer: buffer
Skipping optional fixer: idioms
Skipping optional fixer: set_literal
Skipping optional fixer: ws_comma
running build_ext
warning: GMP or MPIR library not found; Not building Crypto.PublicKey._fastm
ath.
building 'Crypto.Random.OSRNG.winrandom' extension
error: Microsoft Visual C++ 14.0 is required. Get it with ""Microsoft Visual
C++ Build Tools"": http://landinghub.visualstudio.com/visual-cpp-build-tools

----------------------------------------
Command ""c:\users\***\appdata\local\programs\python\python36\python.exe -u
-c ""import setuptools, tokenize;__file__='C:\\Users\\***N~1\\AppData\\Local\\
Temp\\pip-build-k6flhu5k\\pycrypto\\setup.py';f=getattr(tokenize, 'open', open)(
__file__);code=f.read().replace('\r\n', '\n');f.close();exec(compile(code,   __fil
e__, 'exec'))"" install --record C:\Users\***N~1\AppData\Local\Temp\pip-igpkll6
u-record\install-record.txt --single-version-externally-managed --compile""   faile
d with error code 1 in C:\Users\***N~1\AppData\Local\Temp\pip-build-    k6flhu5k\p
ycrypto\

C:\Users\***>pip install cryptography
Collecting cryptography
Downloading cryptography-1.9-cp36-cp36m-win_amd64.whl (1.3MB)
100% |████████████████████████████████| 1.3MB 581kB/s
Requirement already satisfied: six>=1.4.1 in c:\users\***\appdata\local\pr
ograms\python\python36\lib\site-packages (from cryptography)
Collecting cffi>=1.7 (from cryptography)
Downloading cffi-1.10.0-cp36-cp36m-win_amd64.whl (160kB)
100% |████████████████████████████████| 163kB 736kB/s
Collecting asn1crypto>=0.21.0 (from cryptography)
Downloading asn1crypto-0.22.0-py2.py3-none-any.whl (97kB)
100% |████████████████████████████████| 102kB 1.0MB/s
Requirement already satisfied: idna>=2.1 in c:\users\***\appdata\local\pro
grams\python\python36\lib\site-packages (from cryptography)
Collecting pycparser (from cffi>=1.7->cryptography)
Downloading pycparser-2.18.tar.gz (245kB)
100% |████████████████████████████████| 256kB 639kB/s
Installing collected packages: pycparser, cffi, asn1crypto, cryptography
Running setup.py install for pycparser ... done
Successfully installed asn1crypto-0.22.0 cffi-1.10.0 cryptography-1.9      pycparser-
2.18

C:\Users\***>

","I got this error when I tried to install pymssql even though Visual C++ 2015 (14.0) is installed in my system.
I resolved this error by downloading the .whl file of pymssql from https://www.lfd.uci.edu/~gohlke/pythonlibs/
Once downloaded, it can be installed by the following command :
pip install python_package.whl

Hope this helps
","60793","<python><pycrypto>","21","5","6","2019-11-08 05:33:58","44953739","1","6","3657941","","2017-07-11 15:28:31","2017-07-06 14:15:04",""
"44951456","Pip error: Microsoft Visual C++ 14.0 is required","I just ran the ""pip install -U steem""-command and the installation worked well until it failed to install pycrypto. 
Afterwards I did the ""pip install cryptography"" command because I thought it was the missing package. 
So my question is, how I can install steem without the pycrypto-error (or the pycrypto-package in addition) and how to deinstall the cryptography-Package which I don't need. 
(I'm using Windows 7 and Python 3)
Requirement already up-to-date: python-dateutil in c:\users\***\appdata\lo
cal\programs\python\python36\lib\site-packages (from dateparser->maya->steem)
Collecting regex (from dateparser->maya->steem)
Downloading regex-2017.06.23-cp36-none-win_amd64.whl (245kB)
100% |████████████████████████████████| 245kB 499kB/s
Collecting pytzdata (from pendulum->maya->steem)
Downloading pytzdata-2017.2-py2.py3-none-any.whl (462kB)
100% |████████████████████████████████| 471kB 965kB/s
Installing collected packages: urllib3, idna, chardet, certifi, requests, pycryp
to, funcy, w3lib, voluptuous, diff-match-patch, scrypt, prettytable, appdirs, la
ngdetect, ruamel.yaml, humanize, tzlocal, regex, dateparser, pytzdata, pendulum,
maya, ecdsa, pylibscrypt, ujson, toolz, steem
Running setup.py install for pycrypto ... error
Complete output from command c:\users\***\appdata\local\programs\pytho
n\python36\python.exe -u -c ""import setuptools, tokenize;__file__='C:\\Users\\
***~1\\AppData\\Local\\Temp\\pip-build-k6flhu5k\\pycrypto\\setup.py';f=getattr(
tokenize, 'open', open)(__file__);code=f.read().replace('\r\n', '\n');f.close();
exec(compile(code, __file__, 'exec'))"" install --record C:\Users\***N~1\AppDat
a\Local\Temp\pip-igpkll6u-record\install-record.txt --single-version-externally-
managed --compile:
running install
running build
running build_py
creating build
creating build\lib.win-amd64-3.6
creating build\lib.win-amd64-3.6\Crypto
copying lib\Crypto\pct_warnings.py -> build\lib.win-amd64-3.6\Crypto
copying lib\Crypto\__init__.py -> build\lib.win-amd64-3.6\Crypto
creating build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\hashalgo.py -> build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\HMAC.py -> build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\MD2.py -> build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\MD4.py -> build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\MD5.py -> build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\RIPEMD.py -> build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\SHA.py -> build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\SHA224.py -> build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\SHA256.py -> build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\SHA384.py -> build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\SHA512.py -> build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\__init__.py -> build\lib.win-amd64-3.6\Crypto\Hash
creating build\lib.win-amd64-3.6\Crypto\Cipher
copying lib\Crypto\Cipher\AES.py -> build\lib.win-amd64-3.6\Crypto\Cipher
copying lib\Crypto\Cipher\ARC2.py -> build\lib.win-amd64-3.6\Crypto\Cipher
copying lib\Crypto\Cipher\ARC4.py -> build\lib.win-amd64-3.6\Crypto\Cipher
copying lib\Crypto\Cipher\blockalgo.py -> build\lib.win-amd64-3.6\Crypto\Cip
her
copying lib\Crypto\Cipher\Blowfish.py -> build\lib.win-amd64-3.6\Crypto\Ciph
er
copying lib\Crypto\Cipher\CAST.py -> build\lib.win-amd64-3.6\Crypto\Cipher
copying lib\Crypto\Cipher\DES.py -> build\lib.win-amd64-3.6\Crypto\Cipher
copying lib\Crypto\Cipher\DES3.py -> build\lib.win-amd64-3.6\Crypto\Cipher
copying lib\Crypto\Cipher\PKCS1_OAEP.py -> build\lib.win-amd64-3.6\Crypto\Ci
pher
copying lib\Crypto\Cipher\PKCS1_v1_5.py -> build\lib.win-amd64-3.6\Crypto\Ci
pher
copying lib\Crypto\Cipher\XOR.py -> build\lib.win-amd64-3.6\Crypto\Cipher
copying lib\Crypto\Cipher\__init__.py -> build\lib.win-amd64-3.6\Crypto\Ciph
er
creating build\lib.win-amd64-3.6\Crypto\Util
copying lib\Crypto\Util\asn1.py -> build\lib.win-amd64-3.6\Crypto\Util
copying lib\Crypto\Util\Counter.py -> build\lib.win-amd64-3.6\Crypto\Util
copying lib\Crypto\Util\number.py -> build\lib.win-amd64-3.6\Crypto\Util
copying lib\Crypto\Util\py3compat.py -> build\lib.win-amd64-3.6\Crypto\Util
copying lib\Crypto\Util\randpool.py -> build\lib.win-amd64-3.6\Crypto\Util
copying lib\Crypto\Util\RFC1751.py -> build\lib.win-amd64-3.6\Crypto\Util
copying lib\Crypto\Util\winrandom.py -> build\lib.win-amd64-3.6\Crypto\Util
copying lib\Crypto\Util\_number_new.py -> build\lib.win-amd64-3.6\Crypto\Uti
l
copying lib\Crypto\Util\__init__.py -> build\lib.win-amd64-3.6\Crypto\Util
creating build\lib.win-amd64-3.6\Crypto\Random
copying lib\Crypto\Random\random.py -> build\lib.win-amd64-3.6\Crypto\Random

copying lib\Crypto\Random\_UserFriendlyRNG.py -> build\lib.win-amd64-3.6\Cry
pto\Random
copying lib\Crypto\Random\__init__.py -> build\lib.win-amd64-3.6\Crypto\Rand
om
creating build\lib.win-amd64-3.6\Crypto\Random\Fortuna
copying lib\Crypto\Random\Fortuna\FortunaAccumulator.py -> build\lib.win-amd
64-3.6\Crypto\Random\Fortuna
copying lib\Crypto\Random\Fortuna\FortunaGenerator.py -> build\lib.win-amd64
-3.6\Crypto\Random\Fortuna
copying lib\Crypto\Random\Fortuna\SHAd256.py -> build\lib.win-amd64-3.6\Cryp
to\Random\Fortuna
copying lib\Crypto\Random\Fortuna\__init__.py -> build\lib.win-amd64-3.6\Cry
pto\Random\Fortuna
creating build\lib.win-amd64-3.6\Crypto\Random\OSRNG
copying lib\Crypto\Random\OSRNG\fallback.py -> build\lib.win-amd64-3.6\Crypt
o\Random\OSRNG
copying lib\Crypto\Random\OSRNG\nt.py -> build\lib.win-amd64-3.6\Crypto\Rand
om\OSRNG
copying lib\Crypto\Random\OSRNG\posix.py -> build\lib.win-amd64-3.6\Crypto\R
andom\OSRNG
copying lib\Crypto\Random\OSRNG\rng_base.py -> build\lib.win-amd64-3.6\Crypt
o\Random\OSRNG
copying lib\Crypto\Random\OSRNG\__init__.py -> build\lib.win-amd64-3.6\Crypt
o\Random\OSRNG
creating build\lib.win-amd64-3.6\Crypto\SelfTest
copying lib\Crypto\SelfTest\st_common.py -> build\lib.win-amd64-3.6\Crypto\S
elfTest
copying lib\Crypto\SelfTest\__init__.py -> build\lib.win-amd64-3.6\Crypto\Se
lfTest
creating build\lib.win-amd64-3.6\Crypto\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\common.py -> build\lib.win-amd64-3.6\Cryp
to\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\test_AES.py -> build\lib.win-amd64-3.6\Cr
ypto\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\test_ARC2.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\test_ARC4.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\test_Blowfish.py -> build\lib.win-amd64-3
.6\Crypto\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\test_CAST.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\test_DES.py -> build\lib.win-amd64-3.6\Cr
ypto\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\test_DES3.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\test_pkcs1_15.py -> build\lib.win-amd64-3
.6\Crypto\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\test_pkcs1_oaep.py -> build\lib.win-amd64
-3.6\Crypto\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\test_XOR.py -> build\lib.win-amd64-3.6\Cr
ypto\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\__init__.py -> build\lib.win-amd64-3.6\Cr
ypto\SelfTest\Cipher
creating build\lib.win-amd64-3.6\Crypto\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\common.py -> build\lib.win-amd64-3.6\Crypto
\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\test_HMAC.py -> build\lib.win-amd64-3.6\Cry
pto\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\test_MD2.py -> build\lib.win-amd64-3.6\Cryp
to\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\test_MD4.py -> build\lib.win-amd64-3.6\Cryp
to\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\test_MD5.py -> build\lib.win-amd64-3.6\Cryp
to\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\test_RIPEMD.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\test_SHA.py -> build\lib.win-amd64-3.6\Cryp
to\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\test_SHA224.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\test_SHA256.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\test_SHA384.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\test_SHA512.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\__init__.py -> build\lib.win-amd64-3.6\Cryp
to\SelfTest\Hash
creating build\lib.win-amd64-3.6\Crypto\SelfTest\Protocol
copying lib\Crypto\SelfTest\Protocol\test_AllOrNothing.py -> build\lib.win-a
md64-3.6\Crypto\SelfTest\Protocol
copying lib\Crypto\SelfTest\Protocol\test_chaffing.py -> build\lib.win-amd64
-3.6\Crypto\SelfTest\Protocol
copying lib\Crypto\SelfTest\Protocol\test_KDF.py -> build\lib.win-amd64-3.6\
Crypto\SelfTest\Protocol
copying lib\Crypto\SelfTest\Protocol\test_rfc1751.py -> build\lib.win-amd64-
3.6\Crypto\SelfTest\Protocol
copying lib\Crypto\SelfTest\Protocol\__init__.py -> build\lib.win-amd64-3.6\
Crypto\SelfTest\Protocol
creating build\lib.win-amd64-3.6\Crypto\SelfTest\PublicKey
copying lib\Crypto\SelfTest\PublicKey\test_DSA.py -> build\lib.win-amd64-3.6
\Crypto\SelfTest\PublicKey
copying lib\Crypto\SelfTest\PublicKey\test_ElGamal.py -> build\lib.win-amd64
-3.6\Crypto\SelfTest\PublicKey
copying lib\Crypto\SelfTest\PublicKey\test_importKey.py -> build\lib.win-amd
64-3.6\Crypto\SelfTest\PublicKey
copying lib\Crypto\SelfTest\PublicKey\test_RSA.py -> build\lib.win-amd64-3.6
\Crypto\SelfTest\PublicKey
copying lib\Crypto\SelfTest\PublicKey\__init__.py -> build\lib.win-amd64-3.6
\Crypto\SelfTest\PublicKey
creating build\lib.win-amd64-3.6\Crypto\SelfTest\Random
copying lib\Crypto\SelfTest\Random\test_random.py -> build\lib.win-amd64-3.6
\Crypto\SelfTest\Random
copying lib\Crypto\SelfTest\Random\test_rpoolcompat.py -> build\lib.win-amd6
4-3.6\Crypto\SelfTest\Random
copying lib\Crypto\SelfTest\Random\test__UserFriendlyRNG.py -> build\lib.win
-amd64-3.6\Crypto\SelfTest\Random
copying lib\Crypto\SelfTest\Random\__init__.py -> build\lib.win-amd64-3.6\Cr
ypto\SelfTest\Random
creating build\lib.win-amd64-3.6\Crypto\SelfTest\Random\Fortuna
copying lib\Crypto\SelfTest\Random\Fortuna\test_FortunaAccumulator.py -> bui
ld\lib.win-amd64-3.6\Crypto\SelfTest\Random\Fortuna
copying lib\Crypto\SelfTest\Random\Fortuna\test_FortunaGenerator.py -> build
\lib.win-amd64-3.6\Crypto\SelfTest\Random\Fortuna
copying lib\Crypto\SelfTest\Random\Fortuna\test_SHAd256.py -> build\lib.win-
amd64-3.6\Crypto\SelfTest\Random\Fortuna
copying lib\Crypto\SelfTest\Random\Fortuna\__init__.py -> build\lib.win-amd6
4-3.6\Crypto\SelfTest\Random\Fortuna
creating build\lib.win-amd64-3.6\Crypto\SelfTest\Random\OSRNG
copying lib\Crypto\SelfTest\Random\OSRNG\test_fallback.py -> build\lib.win-a
md  64-3.6\Crypto\SelfTest\Random\OSRNG
copying lib\Crypto\SelfTest\Random\OSRNG\test_generic.py -> build\lib.win-am
d64-3.6\Crypto\SelfTest\Random\OSRNG
copying lib\Crypto\SelfTest\Random\OSRNG\test_nt.py -> build\lib.win-amd64-3
.6\Crypto\SelfTest\Random\OSRNG
copying lib\Crypto\SelfTest\Random\OSRNG\test_posix.py -> build\lib.win-amd6
4-3.6\Crypto\SelfTest\Random\OSRNG
copying lib\Crypto\SelfTest\Random\OSRNG\test_winrandom.py -> build\lib.win-
amd64-3.6\Crypto\SelfTest\Random\OSRNG
copying lib\Crypto\SelfTest\Random\OSRNG\__init__.py -> build\lib.win-amd64-
3.6\Crypto\SelfTest\Random\OSRNG
creating build\lib.win-amd64-3.6\Crypto\SelfTest\Util
copying lib\Crypto\SelfTest\Util\test_asn1.py -> build\lib.win-amd64-3.6\Cry
pto\SelfTest\Util
copying lib\Crypto\SelfTest\Util\test_Counter.py -> build\lib.win-amd64-3.6\
Crypto\SelfTest\Util
copying lib\Crypto\SelfTest\Util\test_number.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Util
copying lib\Crypto\SelfTest\Util\test_winrandom.py -> build\lib.win-amd64-3.
6\Crypto\SelfTest\Util
copying lib\Crypto\SelfTest\Util\__init__.py -> build\lib.win-amd64-3.6\Cryp
to\SelfTest\Util
creating build\lib.win-amd64-3.6\Crypto\SelfTest\Signature
copying lib\Crypto\SelfTest\Signature\test_pkcs1_15.py -> build\lib.win-amd6
4-3.6\Crypto\SelfTest\Signature
copying lib\Crypto\SelfTest\Signature\test_pkcs1_pss.py -> build\lib.win-amd
64-3.6\Crypto\SelfTest\Signature
copying lib\Crypto\SelfTest\Signature\__init__.py -> build\lib.win-amd64-3.6
\Crypto\SelfTest\Signature
creating build\lib.win-amd64-3.6\Crypto\Protocol
copying lib\Crypto\Protocol\AllOrNothing.py -> build\lib.win-amd64-3.6\Crypt
o\Protocol
copying lib\Crypto\Protocol\Chaffing.py -> build\lib.win-amd64-3.6\Crypto\Pr
otocol
copying lib\Crypto\Protocol\KDF.py -> build\lib.win-amd64-3.6\Crypto\Protoco
l
copying lib\Crypto\Protocol\__init__.py -> build\lib.win-amd64-3.6\Crypto\Pr
otocol
creating build\lib.win-amd64-3.6\Crypto\PublicKey
copying lib\Crypto\PublicKey\DSA.py -> build\lib.win-amd64-3.6\Crypto\Public
Key
copying lib\Crypto\PublicKey\ElGamal.py -> build\lib.win-amd64-3.6\Crypto\Pu
blicKey
copying lib\Crypto\PublicKey\pubkey.py -> build\lib.win-amd64-3.6\Crypto\Pub
licKey
copying lib\Crypto\PublicKey\RSA.py -> build\lib.win-amd64-3.6\Crypto\Public
Key
copying lib\Crypto\PublicKey\_DSA.py -> build\lib.win-amd64-3.6\Crypto\Publi
cKey
copying lib\Crypto\PublicKey\_RSA.py -> build\lib.win-amd64-3.6\Crypto\Publi
cKey
copying lib\Crypto\PublicKey\_slowmath.py -> build\lib.win-amd64-3.6\Crypto\
PublicKey
copying lib\Crypto\PublicKey\__init__.py -> build\lib.win-amd64-3.6\Crypto\P
ublicKey
creating build\lib.win-amd64-3.6\Crypto\Signature
copying lib\Crypto\Signature\PKCS1_PSS.py -> build\lib.win-amd64-3.6\Crypto\
Signature
copying lib\Crypto\Signature\PKCS1_v1_5.py -> build\lib.win-amd64-3.6\Crypto
\Signature
copying lib\Crypto\Signature\__init__.py -> build\lib.win-amd64-3.6\Crypto\S
ignature
Skipping optional fixer: buffer
Skipping optional fixer: idioms
Skipping optional fixer: set_literal
Skipping optional fixer: ws_comma
running build_ext
warning: GMP or MPIR library not found; Not building Crypto.PublicKey._fastm
ath.
building 'Crypto.Random.OSRNG.winrandom' extension
error: Microsoft Visual C++ 14.0 is required. Get it with ""Microsoft Visual
C++ Build Tools"": http://landinghub.visualstudio.com/visual-cpp-build-tools

----------------------------------------
Command ""c:\users\***\appdata\local\programs\python\python36\python.exe -u
-c ""import setuptools, tokenize;__file__='C:\\Users\\***N~1\\AppData\\Local\\
Temp\\pip-build-k6flhu5k\\pycrypto\\setup.py';f=getattr(tokenize, 'open', open)(
__file__);code=f.read().replace('\r\n', '\n');f.close();exec(compile(code,   __fil
e__, 'exec'))"" install --record C:\Users\***N~1\AppData\Local\Temp\pip-igpkll6
u-record\install-record.txt --single-version-externally-managed --compile""   faile
d with error code 1 in C:\Users\***N~1\AppData\Local\Temp\pip-build-    k6flhu5k\p
ycrypto\

C:\Users\***>pip install cryptography
Collecting cryptography
Downloading cryptography-1.9-cp36-cp36m-win_amd64.whl (1.3MB)
100% |████████████████████████████████| 1.3MB 581kB/s
Requirement already satisfied: six>=1.4.1 in c:\users\***\appdata\local\pr
ograms\python\python36\lib\site-packages (from cryptography)
Collecting cffi>=1.7 (from cryptography)
Downloading cffi-1.10.0-cp36-cp36m-win_amd64.whl (160kB)
100% |████████████████████████████████| 163kB 736kB/s
Collecting asn1crypto>=0.21.0 (from cryptography)
Downloading asn1crypto-0.22.0-py2.py3-none-any.whl (97kB)
100% |████████████████████████████████| 102kB 1.0MB/s
Requirement already satisfied: idna>=2.1 in c:\users\***\appdata\local\pro
grams\python\python36\lib\site-packages (from cryptography)
Collecting pycparser (from cffi>=1.7->cryptography)
Downloading pycparser-2.18.tar.gz (245kB)
100% |████████████████████████████████| 256kB 639kB/s
Installing collected packages: pycparser, cffi, asn1crypto, cryptography
Running setup.py install for pycparser ... done
Successfully installed asn1crypto-0.22.0 cffi-1.10.0 cryptography-1.9      pycparser-
2.18

C:\Users\***>

","On Windows, I strongly recommand installing latest Visual Stuido Community, it's free, you will maybe miss some build tools if you only install vc_redist, so you can easily install package by pip instead of wheel, it save lot of time
","60793","<python><pycrypto>","21","1","6","2019-11-08 05:33:58","44953739","1","6","3657941","","2017-07-11 15:28:31","2017-07-06 14:15:04",""
"44951456","Pip error: Microsoft Visual C++ 14.0 is required","I just ran the ""pip install -U steem""-command and the installation worked well until it failed to install pycrypto. 
Afterwards I did the ""pip install cryptography"" command because I thought it was the missing package. 
So my question is, how I can install steem without the pycrypto-error (or the pycrypto-package in addition) and how to deinstall the cryptography-Package which I don't need. 
(I'm using Windows 7 and Python 3)
Requirement already up-to-date: python-dateutil in c:\users\***\appdata\lo
cal\programs\python\python36\lib\site-packages (from dateparser->maya->steem)
Collecting regex (from dateparser->maya->steem)
Downloading regex-2017.06.23-cp36-none-win_amd64.whl (245kB)
100% |████████████████████████████████| 245kB 499kB/s
Collecting pytzdata (from pendulum->maya->steem)
Downloading pytzdata-2017.2-py2.py3-none-any.whl (462kB)
100% |████████████████████████████████| 471kB 965kB/s
Installing collected packages: urllib3, idna, chardet, certifi, requests, pycryp
to, funcy, w3lib, voluptuous, diff-match-patch, scrypt, prettytable, appdirs, la
ngdetect, ruamel.yaml, humanize, tzlocal, regex, dateparser, pytzdata, pendulum,
maya, ecdsa, pylibscrypt, ujson, toolz, steem
Running setup.py install for pycrypto ... error
Complete output from command c:\users\***\appdata\local\programs\pytho
n\python36\python.exe -u -c ""import setuptools, tokenize;__file__='C:\\Users\\
***~1\\AppData\\Local\\Temp\\pip-build-k6flhu5k\\pycrypto\\setup.py';f=getattr(
tokenize, 'open', open)(__file__);code=f.read().replace('\r\n', '\n');f.close();
exec(compile(code, __file__, 'exec'))"" install --record C:\Users\***N~1\AppDat
a\Local\Temp\pip-igpkll6u-record\install-record.txt --single-version-externally-
managed --compile:
running install
running build
running build_py
creating build
creating build\lib.win-amd64-3.6
creating build\lib.win-amd64-3.6\Crypto
copying lib\Crypto\pct_warnings.py -> build\lib.win-amd64-3.6\Crypto
copying lib\Crypto\__init__.py -> build\lib.win-amd64-3.6\Crypto
creating build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\hashalgo.py -> build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\HMAC.py -> build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\MD2.py -> build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\MD4.py -> build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\MD5.py -> build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\RIPEMD.py -> build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\SHA.py -> build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\SHA224.py -> build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\SHA256.py -> build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\SHA384.py -> build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\SHA512.py -> build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\__init__.py -> build\lib.win-amd64-3.6\Crypto\Hash
creating build\lib.win-amd64-3.6\Crypto\Cipher
copying lib\Crypto\Cipher\AES.py -> build\lib.win-amd64-3.6\Crypto\Cipher
copying lib\Crypto\Cipher\ARC2.py -> build\lib.win-amd64-3.6\Crypto\Cipher
copying lib\Crypto\Cipher\ARC4.py -> build\lib.win-amd64-3.6\Crypto\Cipher
copying lib\Crypto\Cipher\blockalgo.py -> build\lib.win-amd64-3.6\Crypto\Cip
her
copying lib\Crypto\Cipher\Blowfish.py -> build\lib.win-amd64-3.6\Crypto\Ciph
er
copying lib\Crypto\Cipher\CAST.py -> build\lib.win-amd64-3.6\Crypto\Cipher
copying lib\Crypto\Cipher\DES.py -> build\lib.win-amd64-3.6\Crypto\Cipher
copying lib\Crypto\Cipher\DES3.py -> build\lib.win-amd64-3.6\Crypto\Cipher
copying lib\Crypto\Cipher\PKCS1_OAEP.py -> build\lib.win-amd64-3.6\Crypto\Ci
pher
copying lib\Crypto\Cipher\PKCS1_v1_5.py -> build\lib.win-amd64-3.6\Crypto\Ci
pher
copying lib\Crypto\Cipher\XOR.py -> build\lib.win-amd64-3.6\Crypto\Cipher
copying lib\Crypto\Cipher\__init__.py -> build\lib.win-amd64-3.6\Crypto\Ciph
er
creating build\lib.win-amd64-3.6\Crypto\Util
copying lib\Crypto\Util\asn1.py -> build\lib.win-amd64-3.6\Crypto\Util
copying lib\Crypto\Util\Counter.py -> build\lib.win-amd64-3.6\Crypto\Util
copying lib\Crypto\Util\number.py -> build\lib.win-amd64-3.6\Crypto\Util
copying lib\Crypto\Util\py3compat.py -> build\lib.win-amd64-3.6\Crypto\Util
copying lib\Crypto\Util\randpool.py -> build\lib.win-amd64-3.6\Crypto\Util
copying lib\Crypto\Util\RFC1751.py -> build\lib.win-amd64-3.6\Crypto\Util
copying lib\Crypto\Util\winrandom.py -> build\lib.win-amd64-3.6\Crypto\Util
copying lib\Crypto\Util\_number_new.py -> build\lib.win-amd64-3.6\Crypto\Uti
l
copying lib\Crypto\Util\__init__.py -> build\lib.win-amd64-3.6\Crypto\Util
creating build\lib.win-amd64-3.6\Crypto\Random
copying lib\Crypto\Random\random.py -> build\lib.win-amd64-3.6\Crypto\Random

copying lib\Crypto\Random\_UserFriendlyRNG.py -> build\lib.win-amd64-3.6\Cry
pto\Random
copying lib\Crypto\Random\__init__.py -> build\lib.win-amd64-3.6\Crypto\Rand
om
creating build\lib.win-amd64-3.6\Crypto\Random\Fortuna
copying lib\Crypto\Random\Fortuna\FortunaAccumulator.py -> build\lib.win-amd
64-3.6\Crypto\Random\Fortuna
copying lib\Crypto\Random\Fortuna\FortunaGenerator.py -> build\lib.win-amd64
-3.6\Crypto\Random\Fortuna
copying lib\Crypto\Random\Fortuna\SHAd256.py -> build\lib.win-amd64-3.6\Cryp
to\Random\Fortuna
copying lib\Crypto\Random\Fortuna\__init__.py -> build\lib.win-amd64-3.6\Cry
pto\Random\Fortuna
creating build\lib.win-amd64-3.6\Crypto\Random\OSRNG
copying lib\Crypto\Random\OSRNG\fallback.py -> build\lib.win-amd64-3.6\Crypt
o\Random\OSRNG
copying lib\Crypto\Random\OSRNG\nt.py -> build\lib.win-amd64-3.6\Crypto\Rand
om\OSRNG
copying lib\Crypto\Random\OSRNG\posix.py -> build\lib.win-amd64-3.6\Crypto\R
andom\OSRNG
copying lib\Crypto\Random\OSRNG\rng_base.py -> build\lib.win-amd64-3.6\Crypt
o\Random\OSRNG
copying lib\Crypto\Random\OSRNG\__init__.py -> build\lib.win-amd64-3.6\Crypt
o\Random\OSRNG
creating build\lib.win-amd64-3.6\Crypto\SelfTest
copying lib\Crypto\SelfTest\st_common.py -> build\lib.win-amd64-3.6\Crypto\S
elfTest
copying lib\Crypto\SelfTest\__init__.py -> build\lib.win-amd64-3.6\Crypto\Se
lfTest
creating build\lib.win-amd64-3.6\Crypto\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\common.py -> build\lib.win-amd64-3.6\Cryp
to\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\test_AES.py -> build\lib.win-amd64-3.6\Cr
ypto\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\test_ARC2.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\test_ARC4.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\test_Blowfish.py -> build\lib.win-amd64-3
.6\Crypto\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\test_CAST.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\test_DES.py -> build\lib.win-amd64-3.6\Cr
ypto\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\test_DES3.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\test_pkcs1_15.py -> build\lib.win-amd64-3
.6\Crypto\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\test_pkcs1_oaep.py -> build\lib.win-amd64
-3.6\Crypto\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\test_XOR.py -> build\lib.win-amd64-3.6\Cr
ypto\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\__init__.py -> build\lib.win-amd64-3.6\Cr
ypto\SelfTest\Cipher
creating build\lib.win-amd64-3.6\Crypto\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\common.py -> build\lib.win-amd64-3.6\Crypto
\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\test_HMAC.py -> build\lib.win-amd64-3.6\Cry
pto\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\test_MD2.py -> build\lib.win-amd64-3.6\Cryp
to\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\test_MD4.py -> build\lib.win-amd64-3.6\Cryp
to\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\test_MD5.py -> build\lib.win-amd64-3.6\Cryp
to\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\test_RIPEMD.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\test_SHA.py -> build\lib.win-amd64-3.6\Cryp
to\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\test_SHA224.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\test_SHA256.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\test_SHA384.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\test_SHA512.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\__init__.py -> build\lib.win-amd64-3.6\Cryp
to\SelfTest\Hash
creating build\lib.win-amd64-3.6\Crypto\SelfTest\Protocol
copying lib\Crypto\SelfTest\Protocol\test_AllOrNothing.py -> build\lib.win-a
md64-3.6\Crypto\SelfTest\Protocol
copying lib\Crypto\SelfTest\Protocol\test_chaffing.py -> build\lib.win-amd64
-3.6\Crypto\SelfTest\Protocol
copying lib\Crypto\SelfTest\Protocol\test_KDF.py -> build\lib.win-amd64-3.6\
Crypto\SelfTest\Protocol
copying lib\Crypto\SelfTest\Protocol\test_rfc1751.py -> build\lib.win-amd64-
3.6\Crypto\SelfTest\Protocol
copying lib\Crypto\SelfTest\Protocol\__init__.py -> build\lib.win-amd64-3.6\
Crypto\SelfTest\Protocol
creating build\lib.win-amd64-3.6\Crypto\SelfTest\PublicKey
copying lib\Crypto\SelfTest\PublicKey\test_DSA.py -> build\lib.win-amd64-3.6
\Crypto\SelfTest\PublicKey
copying lib\Crypto\SelfTest\PublicKey\test_ElGamal.py -> build\lib.win-amd64
-3.6\Crypto\SelfTest\PublicKey
copying lib\Crypto\SelfTest\PublicKey\test_importKey.py -> build\lib.win-amd
64-3.6\Crypto\SelfTest\PublicKey
copying lib\Crypto\SelfTest\PublicKey\test_RSA.py -> build\lib.win-amd64-3.6
\Crypto\SelfTest\PublicKey
copying lib\Crypto\SelfTest\PublicKey\__init__.py -> build\lib.win-amd64-3.6
\Crypto\SelfTest\PublicKey
creating build\lib.win-amd64-3.6\Crypto\SelfTest\Random
copying lib\Crypto\SelfTest\Random\test_random.py -> build\lib.win-amd64-3.6
\Crypto\SelfTest\Random
copying lib\Crypto\SelfTest\Random\test_rpoolcompat.py -> build\lib.win-amd6
4-3.6\Crypto\SelfTest\Random
copying lib\Crypto\SelfTest\Random\test__UserFriendlyRNG.py -> build\lib.win
-amd64-3.6\Crypto\SelfTest\Random
copying lib\Crypto\SelfTest\Random\__init__.py -> build\lib.win-amd64-3.6\Cr
ypto\SelfTest\Random
creating build\lib.win-amd64-3.6\Crypto\SelfTest\Random\Fortuna
copying lib\Crypto\SelfTest\Random\Fortuna\test_FortunaAccumulator.py -> bui
ld\lib.win-amd64-3.6\Crypto\SelfTest\Random\Fortuna
copying lib\Crypto\SelfTest\Random\Fortuna\test_FortunaGenerator.py -> build
\lib.win-amd64-3.6\Crypto\SelfTest\Random\Fortuna
copying lib\Crypto\SelfTest\Random\Fortuna\test_SHAd256.py -> build\lib.win-
amd64-3.6\Crypto\SelfTest\Random\Fortuna
copying lib\Crypto\SelfTest\Random\Fortuna\__init__.py -> build\lib.win-amd6
4-3.6\Crypto\SelfTest\Random\Fortuna
creating build\lib.win-amd64-3.6\Crypto\SelfTest\Random\OSRNG
copying lib\Crypto\SelfTest\Random\OSRNG\test_fallback.py -> build\lib.win-a
md  64-3.6\Crypto\SelfTest\Random\OSRNG
copying lib\Crypto\SelfTest\Random\OSRNG\test_generic.py -> build\lib.win-am
d64-3.6\Crypto\SelfTest\Random\OSRNG
copying lib\Crypto\SelfTest\Random\OSRNG\test_nt.py -> build\lib.win-amd64-3
.6\Crypto\SelfTest\Random\OSRNG
copying lib\Crypto\SelfTest\Random\OSRNG\test_posix.py -> build\lib.win-amd6
4-3.6\Crypto\SelfTest\Random\OSRNG
copying lib\Crypto\SelfTest\Random\OSRNG\test_winrandom.py -> build\lib.win-
amd64-3.6\Crypto\SelfTest\Random\OSRNG
copying lib\Crypto\SelfTest\Random\OSRNG\__init__.py -> build\lib.win-amd64-
3.6\Crypto\SelfTest\Random\OSRNG
creating build\lib.win-amd64-3.6\Crypto\SelfTest\Util
copying lib\Crypto\SelfTest\Util\test_asn1.py -> build\lib.win-amd64-3.6\Cry
pto\SelfTest\Util
copying lib\Crypto\SelfTest\Util\test_Counter.py -> build\lib.win-amd64-3.6\
Crypto\SelfTest\Util
copying lib\Crypto\SelfTest\Util\test_number.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Util
copying lib\Crypto\SelfTest\Util\test_winrandom.py -> build\lib.win-amd64-3.
6\Crypto\SelfTest\Util
copying lib\Crypto\SelfTest\Util\__init__.py -> build\lib.win-amd64-3.6\Cryp
to\SelfTest\Util
creating build\lib.win-amd64-3.6\Crypto\SelfTest\Signature
copying lib\Crypto\SelfTest\Signature\test_pkcs1_15.py -> build\lib.win-amd6
4-3.6\Crypto\SelfTest\Signature
copying lib\Crypto\SelfTest\Signature\test_pkcs1_pss.py -> build\lib.win-amd
64-3.6\Crypto\SelfTest\Signature
copying lib\Crypto\SelfTest\Signature\__init__.py -> build\lib.win-amd64-3.6
\Crypto\SelfTest\Signature
creating build\lib.win-amd64-3.6\Crypto\Protocol
copying lib\Crypto\Protocol\AllOrNothing.py -> build\lib.win-amd64-3.6\Crypt
o\Protocol
copying lib\Crypto\Protocol\Chaffing.py -> build\lib.win-amd64-3.6\Crypto\Pr
otocol
copying lib\Crypto\Protocol\KDF.py -> build\lib.win-amd64-3.6\Crypto\Protoco
l
copying lib\Crypto\Protocol\__init__.py -> build\lib.win-amd64-3.6\Crypto\Pr
otocol
creating build\lib.win-amd64-3.6\Crypto\PublicKey
copying lib\Crypto\PublicKey\DSA.py -> build\lib.win-amd64-3.6\Crypto\Public
Key
copying lib\Crypto\PublicKey\ElGamal.py -> build\lib.win-amd64-3.6\Crypto\Pu
blicKey
copying lib\Crypto\PublicKey\pubkey.py -> build\lib.win-amd64-3.6\Crypto\Pub
licKey
copying lib\Crypto\PublicKey\RSA.py -> build\lib.win-amd64-3.6\Crypto\Public
Key
copying lib\Crypto\PublicKey\_DSA.py -> build\lib.win-amd64-3.6\Crypto\Publi
cKey
copying lib\Crypto\PublicKey\_RSA.py -> build\lib.win-amd64-3.6\Crypto\Publi
cKey
copying lib\Crypto\PublicKey\_slowmath.py -> build\lib.win-amd64-3.6\Crypto\
PublicKey
copying lib\Crypto\PublicKey\__init__.py -> build\lib.win-amd64-3.6\Crypto\P
ublicKey
creating build\lib.win-amd64-3.6\Crypto\Signature
copying lib\Crypto\Signature\PKCS1_PSS.py -> build\lib.win-amd64-3.6\Crypto\
Signature
copying lib\Crypto\Signature\PKCS1_v1_5.py -> build\lib.win-amd64-3.6\Crypto
\Signature
copying lib\Crypto\Signature\__init__.py -> build\lib.win-amd64-3.6\Crypto\S
ignature
Skipping optional fixer: buffer
Skipping optional fixer: idioms
Skipping optional fixer: set_literal
Skipping optional fixer: ws_comma
running build_ext
warning: GMP or MPIR library not found; Not building Crypto.PublicKey._fastm
ath.
building 'Crypto.Random.OSRNG.winrandom' extension
error: Microsoft Visual C++ 14.0 is required. Get it with ""Microsoft Visual
C++ Build Tools"": http://landinghub.visualstudio.com/visual-cpp-build-tools

----------------------------------------
Command ""c:\users\***\appdata\local\programs\python\python36\python.exe -u
-c ""import setuptools, tokenize;__file__='C:\\Users\\***N~1\\AppData\\Local\\
Temp\\pip-build-k6flhu5k\\pycrypto\\setup.py';f=getattr(tokenize, 'open', open)(
__file__);code=f.read().replace('\r\n', '\n');f.close();exec(compile(code,   __fil
e__, 'exec'))"" install --record C:\Users\***N~1\AppData\Local\Temp\pip-igpkll6
u-record\install-record.txt --single-version-externally-managed --compile""   faile
d with error code 1 in C:\Users\***N~1\AppData\Local\Temp\pip-build-    k6flhu5k\p
ycrypto\

C:\Users\***>pip install cryptography
Collecting cryptography
Downloading cryptography-1.9-cp36-cp36m-win_amd64.whl (1.3MB)
100% |████████████████████████████████| 1.3MB 581kB/s
Requirement already satisfied: six>=1.4.1 in c:\users\***\appdata\local\pr
ograms\python\python36\lib\site-packages (from cryptography)
Collecting cffi>=1.7 (from cryptography)
Downloading cffi-1.10.0-cp36-cp36m-win_amd64.whl (160kB)
100% |████████████████████████████████| 163kB 736kB/s
Collecting asn1crypto>=0.21.0 (from cryptography)
Downloading asn1crypto-0.22.0-py2.py3-none-any.whl (97kB)
100% |████████████████████████████████| 102kB 1.0MB/s
Requirement already satisfied: idna>=2.1 in c:\users\***\appdata\local\pro
grams\python\python36\lib\site-packages (from cryptography)
Collecting pycparser (from cffi>=1.7->cryptography)
Downloading pycparser-2.18.tar.gz (245kB)
100% |████████████████████████████████| 256kB 639kB/s
Installing collected packages: pycparser, cffi, asn1crypto, cryptography
Running setup.py install for pycparser ... done
Successfully installed asn1crypto-0.22.0 cffi-1.10.0 cryptography-1.9      pycparser-
2.18

C:\Users\***>

","If you already have Visual Studio Build Tools installed but you're still getting that error, then you may need to ""Modify"" your installation to include the Visual C++ build tools.
To do that:

Open up the Visual Studio Installer (you can search for it in the Start Menu if needed).
Find Visual Studio Build Tools and click ""Modify"":



Add a checkmark to Visual C++ build tools and then click ""Modify"" in the bottom right to install them:


After the C++ tools finish installing, run the pip command again and it should work.
","60793","<python><pycrypto>","21","5","6","2019-11-08 05:33:58","44953739","1","6","3657941","","2017-07-11 15:28:31","2017-07-06 14:15:04",""
"44951456","Pip error: Microsoft Visual C++ 14.0 is required","I just ran the ""pip install -U steem""-command and the installation worked well until it failed to install pycrypto. 
Afterwards I did the ""pip install cryptography"" command because I thought it was the missing package. 
So my question is, how I can install steem without the pycrypto-error (or the pycrypto-package in addition) and how to deinstall the cryptography-Package which I don't need. 
(I'm using Windows 7 and Python 3)
Requirement already up-to-date: python-dateutil in c:\users\***\appdata\lo
cal\programs\python\python36\lib\site-packages (from dateparser->maya->steem)
Collecting regex (from dateparser->maya->steem)
Downloading regex-2017.06.23-cp36-none-win_amd64.whl (245kB)
100% |████████████████████████████████| 245kB 499kB/s
Collecting pytzdata (from pendulum->maya->steem)
Downloading pytzdata-2017.2-py2.py3-none-any.whl (462kB)
100% |████████████████████████████████| 471kB 965kB/s
Installing collected packages: urllib3, idna, chardet, certifi, requests, pycryp
to, funcy, w3lib, voluptuous, diff-match-patch, scrypt, prettytable, appdirs, la
ngdetect, ruamel.yaml, humanize, tzlocal, regex, dateparser, pytzdata, pendulum,
maya, ecdsa, pylibscrypt, ujson, toolz, steem
Running setup.py install for pycrypto ... error
Complete output from command c:\users\***\appdata\local\programs\pytho
n\python36\python.exe -u -c ""import setuptools, tokenize;__file__='C:\\Users\\
***~1\\AppData\\Local\\Temp\\pip-build-k6flhu5k\\pycrypto\\setup.py';f=getattr(
tokenize, 'open', open)(__file__);code=f.read().replace('\r\n', '\n');f.close();
exec(compile(code, __file__, 'exec'))"" install --record C:\Users\***N~1\AppDat
a\Local\Temp\pip-igpkll6u-record\install-record.txt --single-version-externally-
managed --compile:
running install
running build
running build_py
creating build
creating build\lib.win-amd64-3.6
creating build\lib.win-amd64-3.6\Crypto
copying lib\Crypto\pct_warnings.py -> build\lib.win-amd64-3.6\Crypto
copying lib\Crypto\__init__.py -> build\lib.win-amd64-3.6\Crypto
creating build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\hashalgo.py -> build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\HMAC.py -> build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\MD2.py -> build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\MD4.py -> build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\MD5.py -> build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\RIPEMD.py -> build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\SHA.py -> build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\SHA224.py -> build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\SHA256.py -> build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\SHA384.py -> build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\SHA512.py -> build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\__init__.py -> build\lib.win-amd64-3.6\Crypto\Hash
creating build\lib.win-amd64-3.6\Crypto\Cipher
copying lib\Crypto\Cipher\AES.py -> build\lib.win-amd64-3.6\Crypto\Cipher
copying lib\Crypto\Cipher\ARC2.py -> build\lib.win-amd64-3.6\Crypto\Cipher
copying lib\Crypto\Cipher\ARC4.py -> build\lib.win-amd64-3.6\Crypto\Cipher
copying lib\Crypto\Cipher\blockalgo.py -> build\lib.win-amd64-3.6\Crypto\Cip
her
copying lib\Crypto\Cipher\Blowfish.py -> build\lib.win-amd64-3.6\Crypto\Ciph
er
copying lib\Crypto\Cipher\CAST.py -> build\lib.win-amd64-3.6\Crypto\Cipher
copying lib\Crypto\Cipher\DES.py -> build\lib.win-amd64-3.6\Crypto\Cipher
copying lib\Crypto\Cipher\DES3.py -> build\lib.win-amd64-3.6\Crypto\Cipher
copying lib\Crypto\Cipher\PKCS1_OAEP.py -> build\lib.win-amd64-3.6\Crypto\Ci
pher
copying lib\Crypto\Cipher\PKCS1_v1_5.py -> build\lib.win-amd64-3.6\Crypto\Ci
pher
copying lib\Crypto\Cipher\XOR.py -> build\lib.win-amd64-3.6\Crypto\Cipher
copying lib\Crypto\Cipher\__init__.py -> build\lib.win-amd64-3.6\Crypto\Ciph
er
creating build\lib.win-amd64-3.6\Crypto\Util
copying lib\Crypto\Util\asn1.py -> build\lib.win-amd64-3.6\Crypto\Util
copying lib\Crypto\Util\Counter.py -> build\lib.win-amd64-3.6\Crypto\Util
copying lib\Crypto\Util\number.py -> build\lib.win-amd64-3.6\Crypto\Util
copying lib\Crypto\Util\py3compat.py -> build\lib.win-amd64-3.6\Crypto\Util
copying lib\Crypto\Util\randpool.py -> build\lib.win-amd64-3.6\Crypto\Util
copying lib\Crypto\Util\RFC1751.py -> build\lib.win-amd64-3.6\Crypto\Util
copying lib\Crypto\Util\winrandom.py -> build\lib.win-amd64-3.6\Crypto\Util
copying lib\Crypto\Util\_number_new.py -> build\lib.win-amd64-3.6\Crypto\Uti
l
copying lib\Crypto\Util\__init__.py -> build\lib.win-amd64-3.6\Crypto\Util
creating build\lib.win-amd64-3.6\Crypto\Random
copying lib\Crypto\Random\random.py -> build\lib.win-amd64-3.6\Crypto\Random

copying lib\Crypto\Random\_UserFriendlyRNG.py -> build\lib.win-amd64-3.6\Cry
pto\Random
copying lib\Crypto\Random\__init__.py -> build\lib.win-amd64-3.6\Crypto\Rand
om
creating build\lib.win-amd64-3.6\Crypto\Random\Fortuna
copying lib\Crypto\Random\Fortuna\FortunaAccumulator.py -> build\lib.win-amd
64-3.6\Crypto\Random\Fortuna
copying lib\Crypto\Random\Fortuna\FortunaGenerator.py -> build\lib.win-amd64
-3.6\Crypto\Random\Fortuna
copying lib\Crypto\Random\Fortuna\SHAd256.py -> build\lib.win-amd64-3.6\Cryp
to\Random\Fortuna
copying lib\Crypto\Random\Fortuna\__init__.py -> build\lib.win-amd64-3.6\Cry
pto\Random\Fortuna
creating build\lib.win-amd64-3.6\Crypto\Random\OSRNG
copying lib\Crypto\Random\OSRNG\fallback.py -> build\lib.win-amd64-3.6\Crypt
o\Random\OSRNG
copying lib\Crypto\Random\OSRNG\nt.py -> build\lib.win-amd64-3.6\Crypto\Rand
om\OSRNG
copying lib\Crypto\Random\OSRNG\posix.py -> build\lib.win-amd64-3.6\Crypto\R
andom\OSRNG
copying lib\Crypto\Random\OSRNG\rng_base.py -> build\lib.win-amd64-3.6\Crypt
o\Random\OSRNG
copying lib\Crypto\Random\OSRNG\__init__.py -> build\lib.win-amd64-3.6\Crypt
o\Random\OSRNG
creating build\lib.win-amd64-3.6\Crypto\SelfTest
copying lib\Crypto\SelfTest\st_common.py -> build\lib.win-amd64-3.6\Crypto\S
elfTest
copying lib\Crypto\SelfTest\__init__.py -> build\lib.win-amd64-3.6\Crypto\Se
lfTest
creating build\lib.win-amd64-3.6\Crypto\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\common.py -> build\lib.win-amd64-3.6\Cryp
to\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\test_AES.py -> build\lib.win-amd64-3.6\Cr
ypto\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\test_ARC2.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\test_ARC4.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\test_Blowfish.py -> build\lib.win-amd64-3
.6\Crypto\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\test_CAST.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\test_DES.py -> build\lib.win-amd64-3.6\Cr
ypto\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\test_DES3.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\test_pkcs1_15.py -> build\lib.win-amd64-3
.6\Crypto\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\test_pkcs1_oaep.py -> build\lib.win-amd64
-3.6\Crypto\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\test_XOR.py -> build\lib.win-amd64-3.6\Cr
ypto\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\__init__.py -> build\lib.win-amd64-3.6\Cr
ypto\SelfTest\Cipher
creating build\lib.win-amd64-3.6\Crypto\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\common.py -> build\lib.win-amd64-3.6\Crypto
\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\test_HMAC.py -> build\lib.win-amd64-3.6\Cry
pto\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\test_MD2.py -> build\lib.win-amd64-3.6\Cryp
to\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\test_MD4.py -> build\lib.win-amd64-3.6\Cryp
to\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\test_MD5.py -> build\lib.win-amd64-3.6\Cryp
to\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\test_RIPEMD.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\test_SHA.py -> build\lib.win-amd64-3.6\Cryp
to\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\test_SHA224.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\test_SHA256.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\test_SHA384.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\test_SHA512.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\__init__.py -> build\lib.win-amd64-3.6\Cryp
to\SelfTest\Hash
creating build\lib.win-amd64-3.6\Crypto\SelfTest\Protocol
copying lib\Crypto\SelfTest\Protocol\test_AllOrNothing.py -> build\lib.win-a
md64-3.6\Crypto\SelfTest\Protocol
copying lib\Crypto\SelfTest\Protocol\test_chaffing.py -> build\lib.win-amd64
-3.6\Crypto\SelfTest\Protocol
copying lib\Crypto\SelfTest\Protocol\test_KDF.py -> build\lib.win-amd64-3.6\
Crypto\SelfTest\Protocol
copying lib\Crypto\SelfTest\Protocol\test_rfc1751.py -> build\lib.win-amd64-
3.6\Crypto\SelfTest\Protocol
copying lib\Crypto\SelfTest\Protocol\__init__.py -> build\lib.win-amd64-3.6\
Crypto\SelfTest\Protocol
creating build\lib.win-amd64-3.6\Crypto\SelfTest\PublicKey
copying lib\Crypto\SelfTest\PublicKey\test_DSA.py -> build\lib.win-amd64-3.6
\Crypto\SelfTest\PublicKey
copying lib\Crypto\SelfTest\PublicKey\test_ElGamal.py -> build\lib.win-amd64
-3.6\Crypto\SelfTest\PublicKey
copying lib\Crypto\SelfTest\PublicKey\test_importKey.py -> build\lib.win-amd
64-3.6\Crypto\SelfTest\PublicKey
copying lib\Crypto\SelfTest\PublicKey\test_RSA.py -> build\lib.win-amd64-3.6
\Crypto\SelfTest\PublicKey
copying lib\Crypto\SelfTest\PublicKey\__init__.py -> build\lib.win-amd64-3.6
\Crypto\SelfTest\PublicKey
creating build\lib.win-amd64-3.6\Crypto\SelfTest\Random
copying lib\Crypto\SelfTest\Random\test_random.py -> build\lib.win-amd64-3.6
\Crypto\SelfTest\Random
copying lib\Crypto\SelfTest\Random\test_rpoolcompat.py -> build\lib.win-amd6
4-3.6\Crypto\SelfTest\Random
copying lib\Crypto\SelfTest\Random\test__UserFriendlyRNG.py -> build\lib.win
-amd64-3.6\Crypto\SelfTest\Random
copying lib\Crypto\SelfTest\Random\__init__.py -> build\lib.win-amd64-3.6\Cr
ypto\SelfTest\Random
creating build\lib.win-amd64-3.6\Crypto\SelfTest\Random\Fortuna
copying lib\Crypto\SelfTest\Random\Fortuna\test_FortunaAccumulator.py -> bui
ld\lib.win-amd64-3.6\Crypto\SelfTest\Random\Fortuna
copying lib\Crypto\SelfTest\Random\Fortuna\test_FortunaGenerator.py -> build
\lib.win-amd64-3.6\Crypto\SelfTest\Random\Fortuna
copying lib\Crypto\SelfTest\Random\Fortuna\test_SHAd256.py -> build\lib.win-
amd64-3.6\Crypto\SelfTest\Random\Fortuna
copying lib\Crypto\SelfTest\Random\Fortuna\__init__.py -> build\lib.win-amd6
4-3.6\Crypto\SelfTest\Random\Fortuna
creating build\lib.win-amd64-3.6\Crypto\SelfTest\Random\OSRNG
copying lib\Crypto\SelfTest\Random\OSRNG\test_fallback.py -> build\lib.win-a
md  64-3.6\Crypto\SelfTest\Random\OSRNG
copying lib\Crypto\SelfTest\Random\OSRNG\test_generic.py -> build\lib.win-am
d64-3.6\Crypto\SelfTest\Random\OSRNG
copying lib\Crypto\SelfTest\Random\OSRNG\test_nt.py -> build\lib.win-amd64-3
.6\Crypto\SelfTest\Random\OSRNG
copying lib\Crypto\SelfTest\Random\OSRNG\test_posix.py -> build\lib.win-amd6
4-3.6\Crypto\SelfTest\Random\OSRNG
copying lib\Crypto\SelfTest\Random\OSRNG\test_winrandom.py -> build\lib.win-
amd64-3.6\Crypto\SelfTest\Random\OSRNG
copying lib\Crypto\SelfTest\Random\OSRNG\__init__.py -> build\lib.win-amd64-
3.6\Crypto\SelfTest\Random\OSRNG
creating build\lib.win-amd64-3.6\Crypto\SelfTest\Util
copying lib\Crypto\SelfTest\Util\test_asn1.py -> build\lib.win-amd64-3.6\Cry
pto\SelfTest\Util
copying lib\Crypto\SelfTest\Util\test_Counter.py -> build\lib.win-amd64-3.6\
Crypto\SelfTest\Util
copying lib\Crypto\SelfTest\Util\test_number.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Util
copying lib\Crypto\SelfTest\Util\test_winrandom.py -> build\lib.win-amd64-3.
6\Crypto\SelfTest\Util
copying lib\Crypto\SelfTest\Util\__init__.py -> build\lib.win-amd64-3.6\Cryp
to\SelfTest\Util
creating build\lib.win-amd64-3.6\Crypto\SelfTest\Signature
copying lib\Crypto\SelfTest\Signature\test_pkcs1_15.py -> build\lib.win-amd6
4-3.6\Crypto\SelfTest\Signature
copying lib\Crypto\SelfTest\Signature\test_pkcs1_pss.py -> build\lib.win-amd
64-3.6\Crypto\SelfTest\Signature
copying lib\Crypto\SelfTest\Signature\__init__.py -> build\lib.win-amd64-3.6
\Crypto\SelfTest\Signature
creating build\lib.win-amd64-3.6\Crypto\Protocol
copying lib\Crypto\Protocol\AllOrNothing.py -> build\lib.win-amd64-3.6\Crypt
o\Protocol
copying lib\Crypto\Protocol\Chaffing.py -> build\lib.win-amd64-3.6\Crypto\Pr
otocol
copying lib\Crypto\Protocol\KDF.py -> build\lib.win-amd64-3.6\Crypto\Protoco
l
copying lib\Crypto\Protocol\__init__.py -> build\lib.win-amd64-3.6\Crypto\Pr
otocol
creating build\lib.win-amd64-3.6\Crypto\PublicKey
copying lib\Crypto\PublicKey\DSA.py -> build\lib.win-amd64-3.6\Crypto\Public
Key
copying lib\Crypto\PublicKey\ElGamal.py -> build\lib.win-amd64-3.6\Crypto\Pu
blicKey
copying lib\Crypto\PublicKey\pubkey.py -> build\lib.win-amd64-3.6\Crypto\Pub
licKey
copying lib\Crypto\PublicKey\RSA.py -> build\lib.win-amd64-3.6\Crypto\Public
Key
copying lib\Crypto\PublicKey\_DSA.py -> build\lib.win-amd64-3.6\Crypto\Publi
cKey
copying lib\Crypto\PublicKey\_RSA.py -> build\lib.win-amd64-3.6\Crypto\Publi
cKey
copying lib\Crypto\PublicKey\_slowmath.py -> build\lib.win-amd64-3.6\Crypto\
PublicKey
copying lib\Crypto\PublicKey\__init__.py -> build\lib.win-amd64-3.6\Crypto\P
ublicKey
creating build\lib.win-amd64-3.6\Crypto\Signature
copying lib\Crypto\Signature\PKCS1_PSS.py -> build\lib.win-amd64-3.6\Crypto\
Signature
copying lib\Crypto\Signature\PKCS1_v1_5.py -> build\lib.win-amd64-3.6\Crypto
\Signature
copying lib\Crypto\Signature\__init__.py -> build\lib.win-amd64-3.6\Crypto\S
ignature
Skipping optional fixer: buffer
Skipping optional fixer: idioms
Skipping optional fixer: set_literal
Skipping optional fixer: ws_comma
running build_ext
warning: GMP or MPIR library not found; Not building Crypto.PublicKey._fastm
ath.
building 'Crypto.Random.OSRNG.winrandom' extension
error: Microsoft Visual C++ 14.0 is required. Get it with ""Microsoft Visual
C++ Build Tools"": http://landinghub.visualstudio.com/visual-cpp-build-tools

----------------------------------------
Command ""c:\users\***\appdata\local\programs\python\python36\python.exe -u
-c ""import setuptools, tokenize;__file__='C:\\Users\\***N~1\\AppData\\Local\\
Temp\\pip-build-k6flhu5k\\pycrypto\\setup.py';f=getattr(tokenize, 'open', open)(
__file__);code=f.read().replace('\r\n', '\n');f.close();exec(compile(code,   __fil
e__, 'exec'))"" install --record C:\Users\***N~1\AppData\Local\Temp\pip-igpkll6
u-record\install-record.txt --single-version-externally-managed --compile""   faile
d with error code 1 in C:\Users\***N~1\AppData\Local\Temp\pip-build-    k6flhu5k\p
ycrypto\

C:\Users\***>pip install cryptography
Collecting cryptography
Downloading cryptography-1.9-cp36-cp36m-win_amd64.whl (1.3MB)
100% |████████████████████████████████| 1.3MB 581kB/s
Requirement already satisfied: six>=1.4.1 in c:\users\***\appdata\local\pr
ograms\python\python36\lib\site-packages (from cryptography)
Collecting cffi>=1.7 (from cryptography)
Downloading cffi-1.10.0-cp36-cp36m-win_amd64.whl (160kB)
100% |████████████████████████████████| 163kB 736kB/s
Collecting asn1crypto>=0.21.0 (from cryptography)
Downloading asn1crypto-0.22.0-py2.py3-none-any.whl (97kB)
100% |████████████████████████████████| 102kB 1.0MB/s
Requirement already satisfied: idna>=2.1 in c:\users\***\appdata\local\pro
grams\python\python36\lib\site-packages (from cryptography)
Collecting pycparser (from cffi>=1.7->cryptography)
Downloading pycparser-2.18.tar.gz (245kB)
100% |████████████████████████████████| 256kB 639kB/s
Installing collected packages: pycparser, cffi, asn1crypto, cryptography
Running setup.py install for pycparser ... done
Successfully installed asn1crypto-0.22.0 cffi-1.10.0 cryptography-1.9      pycparser-
2.18

C:\Users\***>

","I faced the same problem. Found the fix here.
https://github.com/statsmodels/statsmodels/issues/4160
Basically just install
http://go.microsoft.com/fwlink/?LinkId=691126&fixForIE=.exe
shasum output:
3e0de8af516c15547602977db939d8c2e44fcc0b  visualcppbuildtools_full.exe
md5sum output:
MD5 (visualcppbuildtools_full.exe) = 8d4afd3b226babecaa4effb10d69eb2e
Run your pip installation command again. If everything works fine, its good. Or you might face the following error like me:
Finished generating code
    LINK : fatal error LNK1158: cannot run 'rc.exe'
    error: command 'C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\BIN\\x86_amd64\\link.exe' failed with exit status 1158

Found the fix for the above problem here:
Visual Studio can't build due to rc.exe
That basically says
Add this to your PATH environment variables:

C:\Program Files (x86)\Windows Kits\8.1\bin\x86

Copy these files:

rc.exe
rcdll.dll

From

C:\Program Files (x86)\Windows Kits\8.1\bin\x86

To

C:\Program Files (x86)\Microsoft Visual Studio 11.0\VC\bin

It works like a charm
","60793","<python><pycrypto>","21","1","6","2019-11-08 05:33:58","44953739","1","6","3657941","","2017-07-11 15:28:31","2017-07-06 14:15:04",""
"44951456","Pip error: Microsoft Visual C++ 14.0 is required","I just ran the ""pip install -U steem""-command and the installation worked well until it failed to install pycrypto. 
Afterwards I did the ""pip install cryptography"" command because I thought it was the missing package. 
So my question is, how I can install steem without the pycrypto-error (or the pycrypto-package in addition) and how to deinstall the cryptography-Package which I don't need. 
(I'm using Windows 7 and Python 3)
Requirement already up-to-date: python-dateutil in c:\users\***\appdata\lo
cal\programs\python\python36\lib\site-packages (from dateparser->maya->steem)
Collecting regex (from dateparser->maya->steem)
Downloading regex-2017.06.23-cp36-none-win_amd64.whl (245kB)
100% |████████████████████████████████| 245kB 499kB/s
Collecting pytzdata (from pendulum->maya->steem)
Downloading pytzdata-2017.2-py2.py3-none-any.whl (462kB)
100% |████████████████████████████████| 471kB 965kB/s
Installing collected packages: urllib3, idna, chardet, certifi, requests, pycryp
to, funcy, w3lib, voluptuous, diff-match-patch, scrypt, prettytable, appdirs, la
ngdetect, ruamel.yaml, humanize, tzlocal, regex, dateparser, pytzdata, pendulum,
maya, ecdsa, pylibscrypt, ujson, toolz, steem
Running setup.py install for pycrypto ... error
Complete output from command c:\users\***\appdata\local\programs\pytho
n\python36\python.exe -u -c ""import setuptools, tokenize;__file__='C:\\Users\\
***~1\\AppData\\Local\\Temp\\pip-build-k6flhu5k\\pycrypto\\setup.py';f=getattr(
tokenize, 'open', open)(__file__);code=f.read().replace('\r\n', '\n');f.close();
exec(compile(code, __file__, 'exec'))"" install --record C:\Users\***N~1\AppDat
a\Local\Temp\pip-igpkll6u-record\install-record.txt --single-version-externally-
managed --compile:
running install
running build
running build_py
creating build
creating build\lib.win-amd64-3.6
creating build\lib.win-amd64-3.6\Crypto
copying lib\Crypto\pct_warnings.py -> build\lib.win-amd64-3.6\Crypto
copying lib\Crypto\__init__.py -> build\lib.win-amd64-3.6\Crypto
creating build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\hashalgo.py -> build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\HMAC.py -> build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\MD2.py -> build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\MD4.py -> build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\MD5.py -> build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\RIPEMD.py -> build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\SHA.py -> build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\SHA224.py -> build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\SHA256.py -> build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\SHA384.py -> build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\SHA512.py -> build\lib.win-amd64-3.6\Crypto\Hash
copying lib\Crypto\Hash\__init__.py -> build\lib.win-amd64-3.6\Crypto\Hash
creating build\lib.win-amd64-3.6\Crypto\Cipher
copying lib\Crypto\Cipher\AES.py -> build\lib.win-amd64-3.6\Crypto\Cipher
copying lib\Crypto\Cipher\ARC2.py -> build\lib.win-amd64-3.6\Crypto\Cipher
copying lib\Crypto\Cipher\ARC4.py -> build\lib.win-amd64-3.6\Crypto\Cipher
copying lib\Crypto\Cipher\blockalgo.py -> build\lib.win-amd64-3.6\Crypto\Cip
her
copying lib\Crypto\Cipher\Blowfish.py -> build\lib.win-amd64-3.6\Crypto\Ciph
er
copying lib\Crypto\Cipher\CAST.py -> build\lib.win-amd64-3.6\Crypto\Cipher
copying lib\Crypto\Cipher\DES.py -> build\lib.win-amd64-3.6\Crypto\Cipher
copying lib\Crypto\Cipher\DES3.py -> build\lib.win-amd64-3.6\Crypto\Cipher
copying lib\Crypto\Cipher\PKCS1_OAEP.py -> build\lib.win-amd64-3.6\Crypto\Ci
pher
copying lib\Crypto\Cipher\PKCS1_v1_5.py -> build\lib.win-amd64-3.6\Crypto\Ci
pher
copying lib\Crypto\Cipher\XOR.py -> build\lib.win-amd64-3.6\Crypto\Cipher
copying lib\Crypto\Cipher\__init__.py -> build\lib.win-amd64-3.6\Crypto\Ciph
er
creating build\lib.win-amd64-3.6\Crypto\Util
copying lib\Crypto\Util\asn1.py -> build\lib.win-amd64-3.6\Crypto\Util
copying lib\Crypto\Util\Counter.py -> build\lib.win-amd64-3.6\Crypto\Util
copying lib\Crypto\Util\number.py -> build\lib.win-amd64-3.6\Crypto\Util
copying lib\Crypto\Util\py3compat.py -> build\lib.win-amd64-3.6\Crypto\Util
copying lib\Crypto\Util\randpool.py -> build\lib.win-amd64-3.6\Crypto\Util
copying lib\Crypto\Util\RFC1751.py -> build\lib.win-amd64-3.6\Crypto\Util
copying lib\Crypto\Util\winrandom.py -> build\lib.win-amd64-3.6\Crypto\Util
copying lib\Crypto\Util\_number_new.py -> build\lib.win-amd64-3.6\Crypto\Uti
l
copying lib\Crypto\Util\__init__.py -> build\lib.win-amd64-3.6\Crypto\Util
creating build\lib.win-amd64-3.6\Crypto\Random
copying lib\Crypto\Random\random.py -> build\lib.win-amd64-3.6\Crypto\Random

copying lib\Crypto\Random\_UserFriendlyRNG.py -> build\lib.win-amd64-3.6\Cry
pto\Random
copying lib\Crypto\Random\__init__.py -> build\lib.win-amd64-3.6\Crypto\Rand
om
creating build\lib.win-amd64-3.6\Crypto\Random\Fortuna
copying lib\Crypto\Random\Fortuna\FortunaAccumulator.py -> build\lib.win-amd
64-3.6\Crypto\Random\Fortuna
copying lib\Crypto\Random\Fortuna\FortunaGenerator.py -> build\lib.win-amd64
-3.6\Crypto\Random\Fortuna
copying lib\Crypto\Random\Fortuna\SHAd256.py -> build\lib.win-amd64-3.6\Cryp
to\Random\Fortuna
copying lib\Crypto\Random\Fortuna\__init__.py -> build\lib.win-amd64-3.6\Cry
pto\Random\Fortuna
creating build\lib.win-amd64-3.6\Crypto\Random\OSRNG
copying lib\Crypto\Random\OSRNG\fallback.py -> build\lib.win-amd64-3.6\Crypt
o\Random\OSRNG
copying lib\Crypto\Random\OSRNG\nt.py -> build\lib.win-amd64-3.6\Crypto\Rand
om\OSRNG
copying lib\Crypto\Random\OSRNG\posix.py -> build\lib.win-amd64-3.6\Crypto\R
andom\OSRNG
copying lib\Crypto\Random\OSRNG\rng_base.py -> build\lib.win-amd64-3.6\Crypt
o\Random\OSRNG
copying lib\Crypto\Random\OSRNG\__init__.py -> build\lib.win-amd64-3.6\Crypt
o\Random\OSRNG
creating build\lib.win-amd64-3.6\Crypto\SelfTest
copying lib\Crypto\SelfTest\st_common.py -> build\lib.win-amd64-3.6\Crypto\S
elfTest
copying lib\Crypto\SelfTest\__init__.py -> build\lib.win-amd64-3.6\Crypto\Se
lfTest
creating build\lib.win-amd64-3.6\Crypto\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\common.py -> build\lib.win-amd64-3.6\Cryp
to\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\test_AES.py -> build\lib.win-amd64-3.6\Cr
ypto\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\test_ARC2.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\test_ARC4.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\test_Blowfish.py -> build\lib.win-amd64-3
.6\Crypto\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\test_CAST.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\test_DES.py -> build\lib.win-amd64-3.6\Cr
ypto\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\test_DES3.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\test_pkcs1_15.py -> build\lib.win-amd64-3
.6\Crypto\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\test_pkcs1_oaep.py -> build\lib.win-amd64
-3.6\Crypto\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\test_XOR.py -> build\lib.win-amd64-3.6\Cr
ypto\SelfTest\Cipher
copying lib\Crypto\SelfTest\Cipher\__init__.py -> build\lib.win-amd64-3.6\Cr
ypto\SelfTest\Cipher
creating build\lib.win-amd64-3.6\Crypto\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\common.py -> build\lib.win-amd64-3.6\Crypto
\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\test_HMAC.py -> build\lib.win-amd64-3.6\Cry
pto\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\test_MD2.py -> build\lib.win-amd64-3.6\Cryp
to\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\test_MD4.py -> build\lib.win-amd64-3.6\Cryp
to\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\test_MD5.py -> build\lib.win-amd64-3.6\Cryp
to\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\test_RIPEMD.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\test_SHA.py -> build\lib.win-amd64-3.6\Cryp
to\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\test_SHA224.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\test_SHA256.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\test_SHA384.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\test_SHA512.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Hash
copying lib\Crypto\SelfTest\Hash\__init__.py -> build\lib.win-amd64-3.6\Cryp
to\SelfTest\Hash
creating build\lib.win-amd64-3.6\Crypto\SelfTest\Protocol
copying lib\Crypto\SelfTest\Protocol\test_AllOrNothing.py -> build\lib.win-a
md64-3.6\Crypto\SelfTest\Protocol
copying lib\Crypto\SelfTest\Protocol\test_chaffing.py -> build\lib.win-amd64
-3.6\Crypto\SelfTest\Protocol
copying lib\Crypto\SelfTest\Protocol\test_KDF.py -> build\lib.win-amd64-3.6\
Crypto\SelfTest\Protocol
copying lib\Crypto\SelfTest\Protocol\test_rfc1751.py -> build\lib.win-amd64-
3.6\Crypto\SelfTest\Protocol
copying lib\Crypto\SelfTest\Protocol\__init__.py -> build\lib.win-amd64-3.6\
Crypto\SelfTest\Protocol
creating build\lib.win-amd64-3.6\Crypto\SelfTest\PublicKey
copying lib\Crypto\SelfTest\PublicKey\test_DSA.py -> build\lib.win-amd64-3.6
\Crypto\SelfTest\PublicKey
copying lib\Crypto\SelfTest\PublicKey\test_ElGamal.py -> build\lib.win-amd64
-3.6\Crypto\SelfTest\PublicKey
copying lib\Crypto\SelfTest\PublicKey\test_importKey.py -> build\lib.win-amd
64-3.6\Crypto\SelfTest\PublicKey
copying lib\Crypto\SelfTest\PublicKey\test_RSA.py -> build\lib.win-amd64-3.6
\Crypto\SelfTest\PublicKey
copying lib\Crypto\SelfTest\PublicKey\__init__.py -> build\lib.win-amd64-3.6
\Crypto\SelfTest\PublicKey
creating build\lib.win-amd64-3.6\Crypto\SelfTest\Random
copying lib\Crypto\SelfTest\Random\test_random.py -> build\lib.win-amd64-3.6
\Crypto\SelfTest\Random
copying lib\Crypto\SelfTest\Random\test_rpoolcompat.py -> build\lib.win-amd6
4-3.6\Crypto\SelfTest\Random
copying lib\Crypto\SelfTest\Random\test__UserFriendlyRNG.py -> build\lib.win
-amd64-3.6\Crypto\SelfTest\Random
copying lib\Crypto\SelfTest\Random\__init__.py -> build\lib.win-amd64-3.6\Cr
ypto\SelfTest\Random
creating build\lib.win-amd64-3.6\Crypto\SelfTest\Random\Fortuna
copying lib\Crypto\SelfTest\Random\Fortuna\test_FortunaAccumulator.py -> bui
ld\lib.win-amd64-3.6\Crypto\SelfTest\Random\Fortuna
copying lib\Crypto\SelfTest\Random\Fortuna\test_FortunaGenerator.py -> build
\lib.win-amd64-3.6\Crypto\SelfTest\Random\Fortuna
copying lib\Crypto\SelfTest\Random\Fortuna\test_SHAd256.py -> build\lib.win-
amd64-3.6\Crypto\SelfTest\Random\Fortuna
copying lib\Crypto\SelfTest\Random\Fortuna\__init__.py -> build\lib.win-amd6
4-3.6\Crypto\SelfTest\Random\Fortuna
creating build\lib.win-amd64-3.6\Crypto\SelfTest\Random\OSRNG
copying lib\Crypto\SelfTest\Random\OSRNG\test_fallback.py -> build\lib.win-a
md  64-3.6\Crypto\SelfTest\Random\OSRNG
copying lib\Crypto\SelfTest\Random\OSRNG\test_generic.py -> build\lib.win-am
d64-3.6\Crypto\SelfTest\Random\OSRNG
copying lib\Crypto\SelfTest\Random\OSRNG\test_nt.py -> build\lib.win-amd64-3
.6\Crypto\SelfTest\Random\OSRNG
copying lib\Crypto\SelfTest\Random\OSRNG\test_posix.py -> build\lib.win-amd6
4-3.6\Crypto\SelfTest\Random\OSRNG
copying lib\Crypto\SelfTest\Random\OSRNG\test_winrandom.py -> build\lib.win-
amd64-3.6\Crypto\SelfTest\Random\OSRNG
copying lib\Crypto\SelfTest\Random\OSRNG\__init__.py -> build\lib.win-amd64-
3.6\Crypto\SelfTest\Random\OSRNG
creating build\lib.win-amd64-3.6\Crypto\SelfTest\Util
copying lib\Crypto\SelfTest\Util\test_asn1.py -> build\lib.win-amd64-3.6\Cry
pto\SelfTest\Util
copying lib\Crypto\SelfTest\Util\test_Counter.py -> build\lib.win-amd64-3.6\
Crypto\SelfTest\Util
copying lib\Crypto\SelfTest\Util\test_number.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Util
copying lib\Crypto\SelfTest\Util\test_winrandom.py -> build\lib.win-amd64-3.
6\Crypto\SelfTest\Util
copying lib\Crypto\SelfTest\Util\__init__.py -> build\lib.win-amd64-3.6\Cryp
to\SelfTest\Util
creating build\lib.win-amd64-3.6\Crypto\SelfTest\Signature
copying lib\Crypto\SelfTest\Signature\test_pkcs1_15.py -> build\lib.win-amd6
4-3.6\Crypto\SelfTest\Signature
copying lib\Crypto\SelfTest\Signature\test_pkcs1_pss.py -> build\lib.win-amd
64-3.6\Crypto\SelfTest\Signature
copying lib\Crypto\SelfTest\Signature\__init__.py -> build\lib.win-amd64-3.6
\Crypto\SelfTest\Signature
creating build\lib.win-amd64-3.6\Crypto\Protocol
copying lib\Crypto\Protocol\AllOrNothing.py -> build\lib.win-amd64-3.6\Crypt
o\Protocol
copying lib\Crypto\Protocol\Chaffing.py -> build\lib.win-amd64-3.6\Crypto\Pr
otocol
copying lib\Crypto\Protocol\KDF.py -> build\lib.win-amd64-3.6\Crypto\Protoco
l
copying lib\Crypto\Protocol\__init__.py -> build\lib.win-amd64-3.6\Crypto\Pr
otocol
creating build\lib.win-amd64-3.6\Crypto\PublicKey
copying lib\Crypto\PublicKey\DSA.py -> build\lib.win-amd64-3.6\Crypto\Public
Key
copying lib\Crypto\PublicKey\ElGamal.py -> build\lib.win-amd64-3.6\Crypto\Pu
blicKey
copying lib\Crypto\PublicKey\pubkey.py -> build\lib.win-amd64-3.6\Crypto\Pub
licKey
copying lib\Crypto\PublicKey\RSA.py -> build\lib.win-amd64-3.6\Crypto\Public
Key
copying lib\Crypto\PublicKey\_DSA.py -> build\lib.win-amd64-3.6\Crypto\Publi
cKey
copying lib\Crypto\PublicKey\_RSA.py -> build\lib.win-amd64-3.6\Crypto\Publi
cKey
copying lib\Crypto\PublicKey\_slowmath.py -> build\lib.win-amd64-3.6\Crypto\
PublicKey
copying lib\Crypto\PublicKey\__init__.py -> build\lib.win-amd64-3.6\Crypto\P
ublicKey
creating build\lib.win-amd64-3.6\Crypto\Signature
copying lib\Crypto\Signature\PKCS1_PSS.py -> build\lib.win-amd64-3.6\Crypto\
Signature
copying lib\Crypto\Signature\PKCS1_v1_5.py -> build\lib.win-amd64-3.6\Crypto
\Signature
copying lib\Crypto\Signature\__init__.py -> build\lib.win-amd64-3.6\Crypto\S
ignature
Skipping optional fixer: buffer
Skipping optional fixer: idioms
Skipping optional fixer: set_literal
Skipping optional fixer: ws_comma
running build_ext
warning: GMP or MPIR library not found; Not building Crypto.PublicKey._fastm
ath.
building 'Crypto.Random.OSRNG.winrandom' extension
error: Microsoft Visual C++ 14.0 is required. Get it with ""Microsoft Visual
C++ Build Tools"": http://landinghub.visualstudio.com/visual-cpp-build-tools

----------------------------------------
Command ""c:\users\***\appdata\local\programs\python\python36\python.exe -u
-c ""import setuptools, tokenize;__file__='C:\\Users\\***N~1\\AppData\\Local\\
Temp\\pip-build-k6flhu5k\\pycrypto\\setup.py';f=getattr(tokenize, 'open', open)(
__file__);code=f.read().replace('\r\n', '\n');f.close();exec(compile(code,   __fil
e__, 'exec'))"" install --record C:\Users\***N~1\AppData\Local\Temp\pip-igpkll6
u-record\install-record.txt --single-version-externally-managed --compile""   faile
d with error code 1 in C:\Users\***N~1\AppData\Local\Temp\pip-build-    k6flhu5k\p
ycrypto\

C:\Users\***>pip install cryptography
Collecting cryptography
Downloading cryptography-1.9-cp36-cp36m-win_amd64.whl (1.3MB)
100% |████████████████████████████████| 1.3MB 581kB/s
Requirement already satisfied: six>=1.4.1 in c:\users\***\appdata\local\pr
ograms\python\python36\lib\site-packages (from cryptography)
Collecting cffi>=1.7 (from cryptography)
Downloading cffi-1.10.0-cp36-cp36m-win_amd64.whl (160kB)
100% |████████████████████████████████| 163kB 736kB/s
Collecting asn1crypto>=0.21.0 (from cryptography)
Downloading asn1crypto-0.22.0-py2.py3-none-any.whl (97kB)
100% |████████████████████████████████| 102kB 1.0MB/s
Requirement already satisfied: idna>=2.1 in c:\users\***\appdata\local\pro
grams\python\python36\lib\site-packages (from cryptography)
Collecting pycparser (from cffi>=1.7->cryptography)
Downloading pycparser-2.18.tar.gz (245kB)
100% |████████████████████████████████| 256kB 639kB/s
Installing collected packages: pycparser, cffi, asn1crypto, cryptography
Running setup.py install for pycparser ... done
Successfully installed asn1crypto-0.22.0 cffi-1.10.0 cryptography-1.9      pycparser-
2.18

C:\Users\***>

","Pycrypto has vulnerabilities assigned the CVE-2013-7459 number, and the repo hasn't accept PRs since June 23, 2014.
Pycryptodome is a drop-in replacement for the PyCrypto library, which exposes almost the same API as the old PyCrypto, see  Compatibility with PyCrypto.
If you haven't install pycrypto yet, you can use pip install pycryptodome to install pycryptodome in which you won't get Microsoft Visual C++ 14.0 issue.
","60793","<python><pycrypto>","21","1","6","2019-11-08 05:33:58","44953739","1","6","3657941","","2017-07-11 15:28:31","2017-07-06 14:15:04",""
"32800336","PyCrypto on python 3.5","I found some PyCrypto installers for Python 3.3 and 3.4, but nothing for Python 3.5.
When I try to install PyCrypton using pip install, it says:  
warning: GMP or MPIR library not found; Not building Crypto.PublicKey._fastmath.  

Is there any way to install PyCrypto on Python 3.5 in Windows 10? Thanks!
","You can try PyCryptodome, a fork of PyCrypto. It has Windows wheels for Python 3.5.
","57138","<python><pycrypto>","24","2","4","2017-07-03 23:49:25","33338523","1","15","975624","","2017-07-03 20:41:51","2015-09-26 18:07:07",""
"32800336","PyCrypto on python 3.5","I found some PyCrypto installers for Python 3.3 and 3.4, but nothing for Python 3.5.
When I try to install PyCrypton using pip install, it says:  
warning: GMP or MPIR library not found; Not building Crypto.PublicKey._fastmath.  

Is there any way to install PyCrypto on Python 3.5 in Windows 10? Thanks!
","That warning shouldn't stop the build, more likely you are lacking the Visual Studio 2015 compiler which is necessary to build binary extensions (which PyCrypto has). See the Python Packaging User Guide for which compiler you need for your version of Python.
The reason you need the compiler is PyCrypto only offers a Source Distribution officially. So, you have two options for installing PyCrypto:
1. Build from source:
This is actually fairly simple, but it requires that you install some extra software. Again, refer to the Python Packaging User Guide linked above to find the suitable compiler for your version of Python. I think that there is an option to only install the relevant compiler for Python if you do a custom install of Visual Studio.
Then, after the installation is completed, and you probably had to restart your computer, you should be able to simply run pip install pycrypto and pip will download the source and compile it for you.
If you also installed wheel (pip install wheel) then pip will create a wheel from the source and cache it, which is how I created the wheels that I'm sharing in option 2.
2. Install a Built Distribution from a 3rd party
I happen to be a 3rd party and have shared wheels I compiled for PyCrypto 2.6.1 w/ Python 3.5 for 32 and 64-bit Windows on my GitHub repo. I included installation instructions on the readme of that repo.
If you're looking for a built distribution for an older version of Python and/or PyCrypto, I've also linked to Voidspace on my repo's readme (sorry, I'm limited to 2 links here).
","57138","<python><pycrypto>","24","42","4","2017-07-03 23:49:25","33338523","1","15","975624","","2017-07-03 20:41:51","2015-09-26 18:07:07",""
"32800336","PyCrypto on python 3.5","I found some PyCrypto installers for Python 3.3 and 3.4, but nothing for Python 3.5.
When I try to install PyCrypton using pip install, it says:  
warning: GMP or MPIR library not found; Not building Crypto.PublicKey._fastmath.  

Is there any way to install PyCrypto on Python 3.5 in Windows 10? Thanks!
","Use this post as a reference to do this procedure over Windows systems:
http://codeyarns.com/2012/04/28/python-version-not-found-in-registry-error/
Using that, we can do this:

Using the Windows Run dialog, open the regedit program.
Export from HKEY_LOCAL_MACHINE\SOFTWARE\Python (python_install_35.reg). Go to this location and execute ""export"" in the context menu.
Edit the reg file and replace HKEY_LOCAL_MACHINE with HKEY_CURRENT_USER
Execute a console (cmd) prompt as admin and execute 
regedit python_install_35.reg
Add the entries to the registry
See the modified entries with regedit and change HKEY_CURRENT_USER\SOFTWARE\Python\PythonCore\3.5 to HKEY_CURRENT_USER\SOFTWARE\Python\PythonCore\3.3. 
Re-run the installer

","57138","<python><pycrypto>","24","0","4","2017-07-03 23:49:25","33338523","1","15","975624","","2017-07-03 20:41:51","2015-09-26 18:07:07",""
"32800336","PyCrypto on python 3.5","I found some PyCrypto installers for Python 3.3 and 3.4, but nothing for Python 3.5.
When I try to install PyCrypton using pip install, it says:  
warning: GMP or MPIR library not found; Not building Crypto.PublicKey._fastmath.  

Is there any way to install PyCrypto on Python 3.5 in Windows 10? Thanks!
","Use pycryptodome instead! It is a project still maintained (june 2017) and includes the functions of pycrypto for python 3.xx (It worked for me on python 3.6)
Project Page:
https://www.pycryptodome.org/en/latest/index.html
","57138","<python><pycrypto>","24","13","4","2017-07-03 23:49:25","33338523","1","15","975624","","2017-07-03 20:41:51","2015-09-26 18:07:07",""
"1687283","PyCrypto not fully installed on Windows XP","I ran python setup.py install in a Windows XP console, and it reported as follows:
running install
running build
running build_py
running build_ext
warning: GMP library not found; Not building Crypto.PublicKey._fastmath.
building 'Crypto.Random.OSRNG.winrandom' extension
error: None

When I try to run a script with import Crypto.Cipher.AES, it doesn't work, saying:
ImportError: cannot import name AES

How can I fix this?
","On windows, it may just be easier installing PyCrypto via a prebuilt windows installer. The Voidspace site has PyCrypto 2.1 and 2.3 installers for Python 2.2-2.7.
","55032","<python><windows><pycrypto>","29","43","3","2014-12-15 22:12:32","1687516","0","14","2581872","","2014-12-15 22:12:01","2009-11-06 12:32:11",""
"1687283","PyCrypto not fully installed on Windows XP","I ran python setup.py install in a Windows XP console, and it reported as follows:
running install
running build
running build_py
running build_ext
warning: GMP library not found; Not building Crypto.PublicKey._fastmath.
building 'Crypto.Random.OSRNG.winrandom' extension
error: None

When I try to run a script with import Crypto.Cipher.AES, it doesn't work, saying:
ImportError: cannot import name AES

How can I fix this?
","You may use PyPM to install (pre-built binary package of) pycrypto:
C:> pypm install pycrypto
Ready to perform these actions:
The following packages will be installed:
 pycrypto-2.0.1
Get: [pypm.activestate.com] pycrypto 2.0.1-1
Installing pycrypto-2.0.1

To list the files installed, type:

C:> pypm files pycrypto
C:\Users\sridharr\AppData\Roaming\Python\Python26
C:\Users\sridharr\AppData\Roaming\Python\Python26\site-packages
C:\Users\sridharr\AppData\Roaming\Python\Python26\site-packages\Crypto
C:\Users\sridharr\AppData\Roaming\Python\Python26\site-packages\Crypto\Cipher
C:\Users\sridharr\AppData\Roaming\Python\Python26\site-packages\Crypto\Cipher\AES.pyd
C:\Users\sridharr\AppData\Roaming\Python\Python26\site-packages\Crypto\Cipher\ARC2.pyd
C:\Users\sridharr\AppData\Roaming\Python\Python26\site-packages\Crypto\Cipher\ARC4.pyd
C:\Users\sridharr\AppData\Roaming\Python\Python26\site-packages\Crypto\Cipher\Blowfish.pyd
C:\Users\sridharr\AppData\Roaming\Python\Python26\site-packages\Crypto\Cipher\CAST.pyd
C:\Users\sridharr\AppData\Roaming\Python\Python26\site-packages\Crypto\Cipher\DES.pyd
C:\Users\sridharr\AppData\Roaming\Python\Python26\site-packages\Crypto\Cipher\DES3.pyd
C:\Users\sridharr\AppData\Roaming\Python\Python26\site-packages\Crypto\Cipher\IDEA.pyd
C:\Users\sridharr\AppData\Roaming\Python\Python26\site-packages\Crypto\Cipher\RC5.pyd
C:\Users\sridharr\AppData\Roaming\Python\Python26\site-packages\Crypto\Cipher\XOR.pyd
C:\Users\sridharr\AppData\Roaming\Python\Python26\site-packages\Crypto\Cipher\__init__.py
C:\Users\sridharr\AppData\Roaming\Python\Python26\site-packages\Crypto\Hash
C:\Users\sridharr\AppData\Roaming\Python\Python26\site-packages\Crypto\Hash\HMAC.py
C:\Users\sridharr\AppData\Roaming\Python\Python26\site-packages\Crypto\Hash\MD2.pyd
C:\Users\sridharr\AppData\Roaming\Python\Python26\site-packages\Crypto\Hash\MD4.pyd
C:\Users\sridharr\AppData\Roaming\Python\Python26\site-packages\Crypto\Hash\MD5.py
C:\Users\sridharr\AppData\Roaming\Python\Python26\site-packages\Crypto\Hash\RIPEMD.pyd
C:\Users\sridharr\AppData\Roaming\Python\Python26\site-packages\Crypto\Hash\SHA.py
C:\Users\sridharr\AppData\Roaming\Python\Python26\site-packages\Crypto\Hash\SHA256.pyd
C:\Users\sridharr\AppData\Roaming\Python\Python26\site-packages\Crypto\Hash\__init__.py
C:\Users\sridharr\AppData\Roaming\Python\Python26\site-packages\Crypto\Protocol
C:\Users\sridharr\AppData\Roaming\Python\Python26\site-packages\Crypto\Protocol\AllOrNothing.py
C:\Users\sridharr\AppData\Roaming\Python\Python26\site-packages\Crypto\Protocol\Chaffing.py
C:\Users\sridharr\AppData\Roaming\Python\Python26\site-packages\Crypto\Protocol\__init__.py
C:\Users\sridharr\AppData\Roaming\Python\Python26\site-packages\Crypto\PublicKey
C:\Users\sridharr\AppData\Roaming\Python\Python26\site-packages\Crypto\PublicKey\DSA.py
C:\Users\sridharr\AppData\Roaming\Python\Python26\site-packages\Crypto\PublicKey\ElGamal.py
C:\Users\sridharr\AppData\Roaming\Python\Python26\site-packages\Crypto\PublicKey\RSA.py
C:\Users\sridharr\AppData\Roaming\Python\Python26\site-packages\Crypto\PublicKey\__init__.py
C:\Users\sridharr\AppData\Roaming\Python\Python26\site-packages\Crypto\PublicKey\pubkey.py
C:\Users\sridharr\AppData\Roaming\Python\Python26\site-packages\Crypto\PublicKey\qNEW.py
C:\Users\sridharr\AppData\Roaming\Python\Python26\site-packages\Crypto\Util
C:\Users\sridharr\AppData\Roaming\Python\Python26\site-packages\Crypto\Util\RFC1751.py
C:\Users\sridharr\AppData\Roaming\Python\Python26\site-packages\Crypto\Util\__init__.py
C:\Users\sridharr\AppData\Roaming\Python\Python26\site-packages\Crypto\Util\number.py
C:\Users\sridharr\AppData\Roaming\Python\Python26\site-packages\Crypto\Util\randpool.py
C:\Users\sridharr\AppData\Roaming\Python\Python26\site-packages\Crypto\Util\test.py
C:\Users\sridharr\AppData\Roaming\Python\Python26\site-packages\Crypto\__init__.py
C:\Users\sridharr\AppData\Roaming\Python\Python26\site-packages\Crypto\test.py
C:\Users\sridharr\AppData\Roaming\Python\Python26\site-packages\pycrypto-2.0.1-py2.6.egg-info


PyPM can be installed by installing ActivePython.
","55032","<python><windows><pycrypto>","29","0","3","2014-12-15 22:12:32","1687516","0","14","2581872","","2014-12-15 22:12:01","2009-11-06 12:32:11",""
"1687283","PyCrypto not fully installed on Windows XP","I ran python setup.py install in a Windows XP console, and it reported as follows:
running install
running build
running build_py
running build_ext
warning: GMP library not found; Not building Crypto.PublicKey._fastmath.
building 'Crypto.Random.OSRNG.winrandom' extension
error: None

When I try to run a script with import Crypto.Cipher.AES, it doesn't work, saying:
ImportError: cannot import name AES

How can I fix this?
","For other people like me on 64 bit windows 7:
Short version:
Follow this instructions.
Long version:
Install VC++ 2008 SP1 Express. you can get it from here.
You also need the Windows SDK, specifically the Win7 + Net 3.5 SDK.
Maybe the issue was already solved in your python version, if not get the diff file from the issue page
download patch.py (or any other tool to patch diff files)
if you downloaded the patch.py and diff file in c:\Python27 just run:
python patch-11.01.py vcvars3.diff

Finally install using pip:
pip install pycrypto

","55032","<python><windows><pycrypto>","29","3","3","2014-12-15 22:12:32","1687516","0","14","2581872","","2014-12-15 22:12:01","2009-11-06 12:32:11",""
"14179784","Python Encrypting with PyCrypto AES","I just found pycrypto today, and I've been working on my AES encryption class. Unfortunately it only half-works. self.h.md5 outputs md5 hash in hex format, and is 32byte.
This is the output. It seems to decrypt the message, but it puts random characters after decryption, in this case \n\n\n... I think I have a problem with block size of self.data, anyone know how to fix this?

Jans-MacBook-Pro:test2 jan$ ../../bin/python3 data.py 
  b'RLfGmn5jf5WTJphnmW0hXG7IaIYcCRpjaTTqwXR6yiJCUytnDib+GQYlFORm+jIctest
  1 2 3 4 5 endtest\n\n\n\n\n\n\n\n\n\n'

from Crypto.Cipher import AES
from base64 import b64encode, b64decode
from os import urandom

class Encryption():
    def __init__(self):
        self.h = Hash()

    def values(self, data, key):
        self.data = data
        self.key = key
        self.mode = AES.MODE_CBC
        self.iv = urandom(16)
        if not self.key:
            self.key = Cfg_Encrypt_Key
        self.key = self.h.md5(self.key, True)

    def encrypt(self, data, key):
        self.values(data, key)
        return b64encode(self.iv + AES.new(self.key, self.mode, self.iv).encrypt(self.data))

    def decrypt(self, data, key):
        self.values(data, key)
        self.iv = b64decode(self.data)[:16]
        return AES.new(self.key, self.mode, self.iv).decrypt(b64decode(self.data)[16:])

","AES.new().encrypt() and .decrypt() take as both input and output strings whose length is a multiple of 16.  You have to fix it in one way or another.  For example you can store the real length at the start, and use that to truncate the decrypted string.
Note also that while it's the only restriction for AES, other modules (notably in Crypto.PublicKey) have additional restrictions that comes from their mathematical implementation and that shouldn't (in my opinion) be visible to the end user, but are.  For example Crypto.PublicKey.ElGamal will encrypt any short string, but if it starts with null characters, they are lost upon decryption.
","52425","<python><pycrypto>","15","-1","4","2018-06-08 07:32:00","14205319","1","10","","","","2013-01-06 06:05:03",""
"14179784","Python Encrypting with PyCrypto AES","I just found pycrypto today, and I've been working on my AES encryption class. Unfortunately it only half-works. self.h.md5 outputs md5 hash in hex format, and is 32byte.
This is the output. It seems to decrypt the message, but it puts random characters after decryption, in this case \n\n\n... I think I have a problem with block size of self.data, anyone know how to fix this?

Jans-MacBook-Pro:test2 jan$ ../../bin/python3 data.py 
  b'RLfGmn5jf5WTJphnmW0hXG7IaIYcCRpjaTTqwXR6yiJCUytnDib+GQYlFORm+jIctest
  1 2 3 4 5 endtest\n\n\n\n\n\n\n\n\n\n'

from Crypto.Cipher import AES
from base64 import b64encode, b64decode
from os import urandom

class Encryption():
    def __init__(self):
        self.h = Hash()

    def values(self, data, key):
        self.data = data
        self.key = key
        self.mode = AES.MODE_CBC
        self.iv = urandom(16)
        if not self.key:
            self.key = Cfg_Encrypt_Key
        self.key = self.h.md5(self.key, True)

    def encrypt(self, data, key):
        self.values(data, key)
        return b64encode(self.iv + AES.new(self.key, self.mode, self.iv).encrypt(self.data))

    def decrypt(self, data, key):
        self.values(data, key)
        self.iv = b64decode(self.data)[:16]
        return AES.new(self.key, self.mode, self.iv).decrypt(b64decode(self.data)[16:])

","To be honest, the characters ""\n\n\n\n\n\n\n\n\n\n"" don't look that random to me. ;-)
You are using AES in CBC mode. That requires length of plaintext and ciphertext to be always a multiple of 16 bytes. With the code you show, you should actually see an exception being raised when data passed to encrypt() does not fulfill such condition. It looks like you added enough new line characters ('\n' to whatever the input is until the plaintext happened to be aligned.
Apart from that, there are two common ways to solve the alignment issue:

Switch from CBC (AES.MODE_CBC) to CFB (AES.MODE_CFB). With the default segment_size used by PyCrypto, you will not have any restriction on plaintext and ciphertext lengths.
Keep CBC and use a padding scheme like PKCS#7, that is:

before encrypting a plaintext of X bytes, append to the back as many bytes you need to to reach the next 16 byte boundary. All padding bytes have the same value: the number of bytes that you are adding:
length = 16 - (len(data) % 16)
data += bytes([length])*length

That's Python 3 style. In Python 2, you would have:
length = 16 - (len(data) % 16)
data += chr(length)*length

after decrypting, remove from the back of the plaintext as many bytes as indicated by padding:
data = data[:-data[-1]]



Even though I understand in your case it is just a class exercise, I would like to point out that it is insecure to send data without any form of authentication (e.g. a MAC).
","52425","<python><pycrypto>","15","69","4","2018-06-08 07:32:00","14205319","1","10","","","","2013-01-06 06:05:03",""
"14179784","Python Encrypting with PyCrypto AES","I just found pycrypto today, and I've been working on my AES encryption class. Unfortunately it only half-works. self.h.md5 outputs md5 hash in hex format, and is 32byte.
This is the output. It seems to decrypt the message, but it puts random characters after decryption, in this case \n\n\n... I think I have a problem with block size of self.data, anyone know how to fix this?

Jans-MacBook-Pro:test2 jan$ ../../bin/python3 data.py 
  b'RLfGmn5jf5WTJphnmW0hXG7IaIYcCRpjaTTqwXR6yiJCUytnDib+GQYlFORm+jIctest
  1 2 3 4 5 endtest\n\n\n\n\n\n\n\n\n\n'

from Crypto.Cipher import AES
from base64 import b64encode, b64decode
from os import urandom

class Encryption():
    def __init__(self):
        self.h = Hash()

    def values(self, data, key):
        self.data = data
        self.key = key
        self.mode = AES.MODE_CBC
        self.iv = urandom(16)
        if not self.key:
            self.key = Cfg_Encrypt_Key
        self.key = self.h.md5(self.key, True)

    def encrypt(self, data, key):
        self.values(data, key)
        return b64encode(self.iv + AES.new(self.key, self.mode, self.iv).encrypt(self.data))

    def decrypt(self, data, key):
        self.values(data, key)
        self.iv = b64decode(self.data)[:16]
        return AES.new(self.key, self.mode, self.iv).decrypt(b64decode(self.data)[16:])

","from hashlib import md5
from Crypto.Cipher import AES
from Crypto import Random
import base64

def derive_key_and_iv(password, salt, key_length, iv_length):
    d = d_i = ''
    while len(d) < key_length + iv_length:
        d_i = md5(d_i + password + salt).digest()
        d += d_i
    return d[:key_length], d[key_length:key_length+iv_length]

def encrypt(in_file, out_file, password, key_length=32):
    bs = AES.block_size
    salt = Random.new().read(bs - len('Salted__'))
    key, iv = derive_key_and_iv(password, salt, key_length, bs)
    cipher = AES.new(key, AES.MODE_CBC, iv)
    #print in_file
    in_file = file(in_file, 'rb')
    out_file = file(out_file, 'wb')
    out_file.write('Salted__' + salt)
    finished = False
    while not finished:
        chunk = in_file.read(1024 * bs)
        if len(chunk) == 0 or len(chunk) % bs != 0:
            padding_length = bs - (len(chunk) % bs)
            chunk += padding_length * chr(padding_length)
            finished = True
        out_file.write(cipher.encrypt(chunk))
    in_file.close()
    out_file.close()

def decrypt(in_file, out_file, password, key_length=32):
    bs = AES.block_size

    in_file = file(in_file, 'rb')
    out_file = file(out_file, 'wb')
    salt = in_file.read(bs)[len('Salted__'):]
    key, iv = derive_key_and_iv(password, salt, key_length, bs)
    cipher = AES.new(key, AES.MODE_CBC, iv)
    next_chunk = ''
    finished = False
    while not finished:
        chunk, next_chunk = next_chunk, cipher.decrypt(in_file.read(1024 * bs))
        if len(next_chunk) == 0:
            padding_length = ord(chunk[-1])
            if padding_length < 1 or padding_length > bs:
               raise ValueError(""bad decrypt pad (%d)"" % padding_length)
            # all the pad-bytes must be the same
            if chunk[-padding_length:] != (padding_length * chr(padding_length)):
               # this is similar to the bad decrypt:evp_enc.c from openssl program
               raise ValueError(""bad decrypt"")
            chunk = chunk[:-padding_length]
            finished = True
        out_file.write(chunk)    
    in_file.close()
    out_file.close()

def encode(in_file, out_file):
    in_file = file(in_file, 'rb')
    out_file = file(out_file, 'wb')
    data = in_file.read()
    out_file.write(base64.b64encode(data))    
    in_file.close()
    out_file.close()

def decode(in_file, out_file):
    in_file = file(in_file, 'rb')
    out_file = file(out_file, 'wb')
    data = in_file.read()
    out_file.write(base64.b64decode(data))    
    in_file.close()
    out_file.close()

","52425","<python><pycrypto>","15","0","4","2018-06-08 07:32:00","14205319","1","10","","","","2013-01-06 06:05:03",""
"14179784","Python Encrypting with PyCrypto AES","I just found pycrypto today, and I've been working on my AES encryption class. Unfortunately it only half-works. self.h.md5 outputs md5 hash in hex format, and is 32byte.
This is the output. It seems to decrypt the message, but it puts random characters after decryption, in this case \n\n\n... I think I have a problem with block size of self.data, anyone know how to fix this?

Jans-MacBook-Pro:test2 jan$ ../../bin/python3 data.py 
  b'RLfGmn5jf5WTJphnmW0hXG7IaIYcCRpjaTTqwXR6yiJCUytnDib+GQYlFORm+jIctest
  1 2 3 4 5 endtest\n\n\n\n\n\n\n\n\n\n'

from Crypto.Cipher import AES
from base64 import b64encode, b64decode
from os import urandom

class Encryption():
    def __init__(self):
        self.h = Hash()

    def values(self, data, key):
        self.data = data
        self.key = key
        self.mode = AES.MODE_CBC
        self.iv = urandom(16)
        if not self.key:
            self.key = Cfg_Encrypt_Key
        self.key = self.h.md5(self.key, True)

    def encrypt(self, data, key):
        self.values(data, key)
        return b64encode(self.iv + AES.new(self.key, self.mode, self.iv).encrypt(self.data))

    def decrypt(self, data, key):
        self.values(data, key)
        self.iv = b64decode(self.data)[:16]
        return AES.new(self.key, self.mode, self.iv).decrypt(b64decode(self.data)[16:])

","You can use a fix character as long as you remember the length of your initial payload, so you don't ""throw"" useful end bytes away.
Try this:
import base64

from Crypto.Cipher import AES

def encrypt(payload, salt, key):
    return AES.new(key, AES.MODE_CBC, salt).encrypt(r_pad(payload))


def decrypt(payload, salt, key, length):
    return AES.new(key, AES.MODE_CBC, salt).decrypt(payload)[:length]


def r_pad(payload, block_size=16):
    length = block_size - (len(payload) % block_size)
    return payload + chr(length) * length


print(decrypt(encrypt(""some cyphertext"", ""b"" * 16, ""b"" * 16), ""b"" * 16, ""b"" * 16, len(""some cyphertext"")))

","52425","<python><pycrypto>","15","0","4","2018-06-08 07:32:00","14205319","1","10","","","","2013-01-06 06:05:03",""
"21327491","Using pycrypto, how to import a RSA public key and use it to encrypt a string?","The RSA public key:
pubkey = 'MIGfMA0GCSqGSIb3DQEBA3UAA4GNADCBiQKBgQC35eMaYoJXEoJt5HxarHkzDBEMU3qIWE0HSQ77CwP/8UbX07W2XKwngUyY4k6Hl2M/n9TOZMZsiBzer/fqV+QNPN1m9M94eUm2gQgwkoRj5battRCaNJK/23GGpCsTQatJN8PZBhJBb2Vlsvw5lFrSdMT1R7vaz+2EeNR/FitFXwIDAQAB'
how to import it and use it to encrypt a string?
I tried the following code but RSA.construct() raises exception (TypeError: must be long, not str).
from Crypto.PublicKey import RSA
from Crypto.Util import asn1
from base64 import b64decode

keyDER = b64decode(pubkey)
seq = asn1.DerSequence()
seq.decode(keyDER)
keyPub = RSA.construct((seq[0], seq[1]))
print keyPub.encrypt('mysecret', 32)

Thanks.
","From the documentation
importKey(externKey, passphrase=None)
Import an RSA key (public or private half), encoded in standard form.

","51901","<python><rsa><pycrypto>","9","2","6","2019-11-08 10:20:41","","0","7","","","","2014-01-24 08:08:00",""
"21327491","Using pycrypto, how to import a RSA public key and use it to encrypt a string?","The RSA public key:
pubkey = 'MIGfMA0GCSqGSIb3DQEBA3UAA4GNADCBiQKBgQC35eMaYoJXEoJt5HxarHkzDBEMU3qIWE0HSQ77CwP/8UbX07W2XKwngUyY4k6Hl2M/n9TOZMZsiBzer/fqV+QNPN1m9M94eUm2gQgwkoRj5battRCaNJK/23GGpCsTQatJN8PZBhJBb2Vlsvw5lFrSdMT1R7vaz+2EeNR/FitFXwIDAQAB'
how to import it and use it to encrypt a string?
I tried the following code but RSA.construct() raises exception (TypeError: must be long, not str).
from Crypto.PublicKey import RSA
from Crypto.Util import asn1
from base64 import b64decode

keyDER = b64decode(pubkey)
seq = asn1.DerSequence()
seq.decode(keyDER)
keyPub = RSA.construct((seq[0], seq[1]))
print keyPub.encrypt('mysecret', 32)

Thanks.
","By using:
RSA.importKey(externKey)

with parameter externKey look like the following:
-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAybVqRvfYvWbLsB98BqkD
lWd0/5y6SyhHt6/r6M0l7JXBweqMvxVt7XmI2yqPL56YxzcgQ8ycDkoqHJ+XozgP
iRnLNpYRlCzsiaOElbmQcnrI8iOb9Ahm6j0cbBB1S8VNvD+u9RQJt53zPxPj8/Dq
f1oNGFXOM8udNYWZaRCukLs/TumsAn0a+BF4639WtFiUvTWdVhlyvCQTs49ytRkH
rXH30RkB528RIvTGeW8xBTV4NaiTIzAEKCVSPagLr4Hzbb9b5+bODic/zkLGQazy
/NKOFgiB7kD2+WEMcuhTr5noeXau0PDAhgmrBhzzWOjUwwaO+ACvJLkPXZfjhy7P
+wIDAQAB
-----END PUBLIC KEY-----

You shouldn't b64decode the externKey and the string should start with ""-----BEGIN PUBLIC KEY-----"" and ""-----END PUBLIC KEY-----"".
","51901","<python><rsa><pycrypto>","9","9","6","2019-11-08 10:20:41","","0","7","","","","2014-01-24 08:08:00",""
"21327491","Using pycrypto, how to import a RSA public key and use it to encrypt a string?","The RSA public key:
pubkey = 'MIGfMA0GCSqGSIb3DQEBA3UAA4GNADCBiQKBgQC35eMaYoJXEoJt5HxarHkzDBEMU3qIWE0HSQ77CwP/8UbX07W2XKwngUyY4k6Hl2M/n9TOZMZsiBzer/fqV+QNPN1m9M94eUm2gQgwkoRj5battRCaNJK/23GGpCsTQatJN8PZBhJBb2Vlsvw5lFrSdMT1R7vaz+2EeNR/FitFXwIDAQAB'
how to import it and use it to encrypt a string?
I tried the following code but RSA.construct() raises exception (TypeError: must be long, not str).
from Crypto.PublicKey import RSA
from Crypto.Util import asn1
from base64 import b64decode

keyDER = b64decode(pubkey)
seq = asn1.DerSequence()
seq.decode(keyDER)
keyPub = RSA.construct((seq[0], seq[1]))
print keyPub.encrypt('mysecret', 32)

Thanks.
","I too had trouble with this. I got it working like this:
key = RSA.generate(2048)

binPrivKey = key.exportKey('DER')
binPubKey =  key.publickey().exportKey('DER')

privKeyObj = RSA.importKey(binPrivKey)
pubKeyObj =  RSA.importKey(binPubKey)

msg = ""attack at dawn""
emsg = pubKeyObj.encrypt(msg, 'x')[0]
dmsg = privKeyObj.decrypt(emsg)

assert(msg == dmsg)

If you're writing to files, you may find it easier to deal with hex strings instead of binary strings. I'm using these helper functions a lot
def bin2hex(binStr):
    return binascii.hexlify(binStr)

def hex2bin(hexStr):
    return binascii.unhexlify(hexStr)

","51901","<python><rsa><pycrypto>","9","15","6","2019-11-08 10:20:41","","0","7","","","","2014-01-24 08:08:00",""
"21327491","Using pycrypto, how to import a RSA public key and use it to encrypt a string?","The RSA public key:
pubkey = 'MIGfMA0GCSqGSIb3DQEBA3UAA4GNADCBiQKBgQC35eMaYoJXEoJt5HxarHkzDBEMU3qIWE0HSQ77CwP/8UbX07W2XKwngUyY4k6Hl2M/n9TOZMZsiBzer/fqV+QNPN1m9M94eUm2gQgwkoRj5battRCaNJK/23GGpCsTQatJN8PZBhJBb2Vlsvw5lFrSdMT1R7vaz+2EeNR/FitFXwIDAQAB'
how to import it and use it to encrypt a string?
I tried the following code but RSA.construct() raises exception (TypeError: must be long, not str).
from Crypto.PublicKey import RSA
from Crypto.Util import asn1
from base64 import b64decode

keyDER = b64decode(pubkey)
seq = asn1.DerSequence()
seq.decode(keyDER)
keyPub = RSA.construct((seq[0], seq[1]))
print keyPub.encrypt('mysecret', 32)

Thanks.
","from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_v1_5 as Cipher_PKCS1_v1_5
from base64 import b64decode,b64encode

pubkey = 'MIGfMA0GCSqGSIb3DQEBA3UAA4GNADCBiQKBgQC35eMaYoJXEoJt5HxarHkzDBEMU3qIWE0HSQ77CwP/8UbX07W2XKwngUyY4k6Hl2M/n9TOZMZsiBzer/fqV+QNPN1m9M94eUm2gQgwkoRj5battRCaNJK/23GGpCsTQatJN8PZBhJBb2Vlsvw5lFrSdMT1R7vaz+2EeNR/FitFXwIDAQAB'
msg = ""test""
keyDER = b64decode(pubkey)
keyPub = RSA.importKey(keyDER)
cipher = Cipher_PKCS1_v1_5.new(keyPub)
cipher_text = cipher.encrypt(msg.encode())
emsg = b64encode(cipher_text)
print emsg

","51901","<python><rsa><pycrypto>","9","12","6","2019-11-08 10:20:41","","0","7","","","","2014-01-24 08:08:00",""
"21327491","Using pycrypto, how to import a RSA public key and use it to encrypt a string?","The RSA public key:
pubkey = 'MIGfMA0GCSqGSIb3DQEBA3UAA4GNADCBiQKBgQC35eMaYoJXEoJt5HxarHkzDBEMU3qIWE0HSQ77CwP/8UbX07W2XKwngUyY4k6Hl2M/n9TOZMZsiBzer/fqV+QNPN1m9M94eUm2gQgwkoRj5battRCaNJK/23GGpCsTQatJN8PZBhJBb2Vlsvw5lFrSdMT1R7vaz+2EeNR/FitFXwIDAQAB'
how to import it and use it to encrypt a string?
I tried the following code but RSA.construct() raises exception (TypeError: must be long, not str).
from Crypto.PublicKey import RSA
from Crypto.Util import asn1
from base64 import b64decode

keyDER = b64decode(pubkey)
seq = asn1.DerSequence()
seq.decode(keyDER)
keyPub = RSA.construct((seq[0], seq[1]))
print keyPub.encrypt('mysecret', 32)

Thanks.
","thanks @user9527 vote up for you
that solved my problem
my env: win10x64 python3.6.4 pycrypto2.6.1
here's my code, encrypt end decrypt, the key was from someone's blog.(if U occured with ""ValueError: RSA key format is not supported"", check the key format, it should be warpped with some thing like ""-----BEGIN XXXX KEY-----"")
pubkey = """"""-----BEGIN PUBLIC KEY-----
...
-----END PUBLIC KEY-----""""""

prvkey = """"""-----BEGIN RSA PRIVATE KEY-----
...
-----END RSA PRIVATE KEY-----""""""

from Crypto.PublicKey import RSA

from Crypto.Cipher import PKCS1_v1_5 as Cipher_PKCS1_v1_5

msg = ""test""
print(""raw msg->"", msg)
keyPub = RSA.importKey(pubkey) # import the public key
cipher = Cipher_PKCS1_v1_5.new(keyPub)
#print(cipher.encrypt.__doc__)
cipher_text = cipher.encrypt(msg.encode()) # now we have the cipher
print(""cipher text->"", cipher_text)


keyPriv = RSA.importKey(prvkey) # import the private key
cipher = Cipher_PKCS1_v1_5.new(keyPriv)
#print(cipher.decrypt.__doc__)
decrypt_text = cipher.decrypt(cipher_text, None).decode()
print(""decrypted msg->"", decrypt_text)
assert msg == decrypt_text # check that
print(""test passed"")

the output:
raw msg-> test
cipher text-> b'\xb0]\x1f@B\x8b\xb5\xbf\x891:\t4D\x80$\xc0y\xaa\xb4\x86t/|\xeaM%\xf06\x14,\x9e?\x86R\x83\xd72\xe5\xfdsr:\x99\xe7v\xd9]&\xbc\x85\xd3\x16\x80\x19q\xe7\xb1\x89\xff/\x12\xe5\xb3\x9cu\x1f\x04x\xa5\xdfl\xcd\xae_\xba\x1b\x97\x9fa\xcf9O\xbfB\xf6\xd1N\xf5|<\xbf^\x84R\xecSo\x9a*\xf7\x8d\x8e\xbe0Q\xcd\x14\x13\xf98x\xe7\xd8x\x19\xaf\x98\xefu\xa8\xb1\xd3\xfa\xf2N\xca\xb5'
decrypted msg-> test
test passed

","51901","<python><rsa><pycrypto>","9","2","6","2019-11-08 10:20:41","","0","7","","","","2014-01-24 08:08:00",""
"21327491","Using pycrypto, how to import a RSA public key and use it to encrypt a string?","The RSA public key:
pubkey = 'MIGfMA0GCSqGSIb3DQEBA3UAA4GNADCBiQKBgQC35eMaYoJXEoJt5HxarHkzDBEMU3qIWE0HSQ77CwP/8UbX07W2XKwngUyY4k6Hl2M/n9TOZMZsiBzer/fqV+QNPN1m9M94eUm2gQgwkoRj5battRCaNJK/23GGpCsTQatJN8PZBhJBb2Vlsvw5lFrSdMT1R7vaz+2EeNR/FitFXwIDAQAB'
how to import it and use it to encrypt a string?
I tried the following code but RSA.construct() raises exception (TypeError: must be long, not str).
from Crypto.PublicKey import RSA
from Crypto.Util import asn1
from base64 import b64decode

keyDER = b64decode(pubkey)
seq = asn1.DerSequence()
seq.decode(keyDER)
keyPub = RSA.construct((seq[0], seq[1]))
print keyPub.encrypt('mysecret', 32)

Thanks.
","The method I ended up using based on a few answers here:
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_v1_5 as Cipher_PKCS1_v1_5

def encrypt_data(data):
    with open(""/path/to/public.pem"", ""rb"") as k:
        key = RSA.importKey(k.read())

    cipher = Cipher_PKCS1_v1_5.new(key)
    return cipher.encrypt(data.encode())


def decrypt_data(data):
    with open(""path/to/private.pem"", ""rb"") as k:
        key = RSA.importKey(k.read())

    decipher = Cipher_PKCS1_v1_5.new(key)
    return decipher.decrypt(data, None).decode()


message = ""hello world!""
encrypted = encrypt_data(message)
decrypted = decrypt_data(message)

","51901","<python><rsa><pycrypto>","9","0","6","2019-11-08 10:20:41","","0","7","","","","2014-01-24 08:08:00",""
"4232389","Signing and verifying data using pycrypto (RSA)","I am trying to familiarize myself with the pycrypto module, but the lack of clear documentation makes things difficult.
To start with, I would like to understand signing and verifying data. Could someone please provide an example for how this would be written?
","This is a fleshed-out version of the example in the documentation:
import Crypto.Hash.MD5 as MD5
import Crypto.PublicKey.RSA as RSA
import Crypto.PublicKey.DSA as DSA
import Crypto.PublicKey.ElGamal as ElGamal
import Crypto.Util.number as CUN
import os

plaintext = 'The rain in Spain falls mainly on the Plain'

# Here is a hash of the message
hash = MD5.new(plaintext).digest()
print(repr(hash))
# '\xb1./J\xa883\x974\xa4\xac\x1e\x1b!\xc8\x11'

for alg in (RSA, DSA, ElGamal):
    # Generates a fresh public/private key pair
    key = alg.generate(384, os.urandom)

    if alg == DSA:
        K = CUN.getRandomNumber(128, os.urandom)
    elif alg == ElGamal:
        K = CUN.getPrime(128, os.urandom)
        while CUN.GCD(K, key.p - 1) != 1:
            print('K not relatively prime with {n}'.format(n=key.p - 1))
            K = CUN.getPrime(128, os.urandom)
        # print('GCD({K},{n})=1'.format(K=K,n=key.p-1))
    else:
        K = ''

    # You sign the hash
    signature = key.sign(hash, K)
    print(len(signature), alg.__name__)
    # (1, 'Crypto.PublicKey.RSA')
    # (2, 'Crypto.PublicKey.DSA')
    # (2, 'Crypto.PublicKey.ElGamal')

    # You share pubkey with Friend
    pubkey = key.publickey()

    # You send message (plaintext) and signature to Friend.
    # Friend knows how to compute hash.
    # Friend verifies the message came from you this way:
    assert pubkey.verify(hash, signature)

    # A different hash should not pass the test.
    assert not pubkey.verify(hash[:-1], signature)

","42750","<python><pycrypto>","20","20","3","2018-01-20 06:44:09","4232889","1","19","","","","2010-11-20 11:07:35",""
"4232389","Signing and verifying data using pycrypto (RSA)","I am trying to familiarize myself with the pycrypto module, but the lack of clear documentation makes things difficult.
To start with, I would like to understand signing and verifying data. Could someone please provide an example for how this would be written?
","According to the documentation at:
https://www.dlitz.net/software/pycrypto/api/current/Crypto.PublicKey.RSA._RSAobj-class.html
you should not use Crypto.PublicKey.RSA.sign function from PyCrypto in real code:

Attention: this function performs the plain, primitive RSA decryption (textbook). In real applications, you always need to use proper cryptographic padding, and you should not directly sign data with this method. Failure to do so may lead to security vulnerabilities. It is recommended to use modules Crypto.Signature.PKCS1_PSS or Crypto.Signature.PKCS1_v1_5 instead.

I ended up using the RSA module that implements PKCS1_v1_5. The documentation for signing was pretty straight forward. Others have recommended use M2Crypto.
","42750","<python><pycrypto>","20","12","3","2018-01-20 06:44:09","4232889","1","19","","","","2010-11-20 11:07:35",""
"4232389","Signing and verifying data using pycrypto (RSA)","I am trying to familiarize myself with the pycrypto module, but the lack of clear documentation makes things difficult.
To start with, I would like to understand signing and verifying data. Could someone please provide an example for how this would be written?
","Below is the helper class I created to perform all necessary RSA functions (encryption, decryption, signing, verifying signature & generating new keys)
rsa.py
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
from Crypto.Signature import PKCS1_v1_5
from Crypto.Hash import SHA512, SHA384, SHA256, SHA, MD5
from Crypto import Random
from base64 import b64encode, b64decode

hash = ""SHA-256""

def newkeys(keysize):
    random_generator = Random.new().read
    key = RSA.generate(keysize, random_generator)
    private, public = key, key.publickey()
    return public, private

def importKey(externKey):
    return RSA.importKey(externKey)

def getpublickey(priv_key):
    return priv_key.publickey()

def encrypt(message, pub_key):
    #RSA encryption protocol according to PKCS#1 OAEP
    cipher = PKCS1_OAEP.new(pub_key)
    return cipher.encrypt(message)

def decrypt(ciphertext, priv_key):
    #RSA encryption protocol according to PKCS#1 OAEP
    cipher = PKCS1_OAEP.new(priv_key)
    return cipher.decrypt(ciphertext)

def sign(message, priv_key, hashAlg=""SHA-256""):
    global hash
    hash = hashAlg
    signer = PKCS1_v1_5.new(priv_key)
    if (hash == ""SHA-512""):
        digest = SHA512.new()
    elif (hash == ""SHA-384""):
        digest = SHA384.new()
    elif (hash == ""SHA-256""):
        digest = SHA256.new()
    elif (hash == ""SHA-1""):
        digest = SHA.new()
    else:
        digest = MD5.new()
    digest.update(message)
    return signer.sign(digest)

def verify(message, signature, pub_key):
    signer = PKCS1_v1_5.new(pub_key)
    if (hash == ""SHA-512""):
        digest = SHA512.new()
    elif (hash == ""SHA-384""):
        digest = SHA384.new()
    elif (hash == ""SHA-256""):
        digest = SHA256.new()
    elif (hash == ""SHA-1""):
        digest = SHA.new()
    else:
        digest = MD5.new()
    digest.update(message)
    return signer.verify(digest, signature)

Sample Usage
import rsa
from base64 import b64encode, b64decode

msg1 = ""Hello Tony, I am Jarvis!""
msg2 = ""Hello Toni, I am Jarvis!""
keysize = 2048
(public, private) = rsa.newkeys(keysize)
encrypted = b64encode(rsa.encrypt(msg1, public))
decrypted = rsa.decrypt(b64decode(encrypted), private)
signature = b64encode(rsa.sign(msg1, private, ""SHA-512""))
verify = rsa.verify(msg1, b64decode(signature), public)

print(private.exportKey('PEM'))
print(public.exportKey('PEM'))
print(""Encrypted: "" + encrypted)
print(""Decrypted: '%s'"" % decrypted)
print(""Signature: "" + signature)
print(""Verify: %s"" % verify)
rsa.verify(msg2, b64decode(signature), public)

","42750","<python><pycrypto>","20","11","3","2018-01-20 06:44:09","4232889","1","19","","","","2010-11-20 11:07:35",""
"20852664","Python PyCrypto encrypt/decrypt text files with AES","I already have a working program, but the only thing that doesn't work is the decrypt_file() function I have. I can still copy the encrypted text from the file and put it in my decrypt() function and have it work, but when I try to use my supposed-to-be handy decrypt_file() function it throws an error. Now I know 99.999% sure that my encrypt() and decrypt() functions are fine, but there is something with the bytes and strings conversion when I read and encode the text file that throws an error; I just can't find the hangup. Please help!
My Program:
from Crypto import Random
from Crypto.Cipher import AES

def encrypt(message, key=None, key_size=256):
    def pad(s):
        x = AES.block_size - len(s) % AES.block_size
        return s + ((bytes([x])) * x)

    padded_message = pad(message)

    if key is None:
        key = Random.new().read(key_size // 8)

    iv = Random.new().read(AES.block_size)
    cipher = AES.new(key, AES.MODE_CBC, iv)

    return iv + cipher.encrypt(padded_message)

def decrypt(ciphertext, key):
    unpad = lambda s: s[:-s[-1]]
    iv = ciphertext[:AES.block_size]
    cipher = AES.new(key, AES.MODE_CBC, iv)
    plaintext = unpad(cipher.decrypt(ciphertext))[AES.block_size:]

    return plaintext

def encrypt_file(file_name, key):
    f = open(file_name, 'r')
    plaintext = f.read()
    plaintext = plaintext.encode('utf-8')
    enc = encrypt(plaintext, key)
    f.close()
    f = open(file_name, 'w')
    f.write(str(enc))
    f.close()

def decrypt_file(file_name, key):
    def pad(s):
        x = AES.block_size - len(s) % AES.block_size
        return s + ((str(bytes([x]))) * x)

    f = open(file_name, 'r')
    plaintext = f.read()
    x = AES.block_size - len(plaintext) % AES.block_size
    plaintext += ((bytes([x]))) * x
    dec = decrypt(plaintext, key)
    f.close()
    f = open(file_name, 'w')
    f.write(str(dec))
    f.close()



key = b'\xbf\xc0\x85)\x10nc\x94\x02)j\xdf\xcb\xc4\x94\x9d(\x9e[EX\xc8\xd5\xbfI{\xa2$\x05(\xd5\x18'

encrypt_file('to_enc.txt', key)


The text file I encrypted:
b';c\xb0\xe6Wv5!\xa3\xdd\xf0\xb1\xfd2\x90B\x10\xdf\x00\x82\x83\x9d\xbc2\x91\xa7i M\x13\xdc\xa7'


My error when attempting decrypt_file:
    Traceback (most recent call last):
  File ""C:\Python33\testing\test\crypto.py"", line 56, in <module>
    decrypt_file('to_enc.txt', key)
  File ""C:\Python33\testing\test\crypto.py"", line 45, in decrypt_file
    plaintext += ((bytes([x]))) * x
TypeError: Can't convert 'bytes' object to str implicitly
[Finished in 1.5s]


When I replace line 45 with: plaintext += ((str(bytes([x])))) * x, this is the error I get:
Traceback (most recent call last):
  File ""C:\Python33\testing\test\crypto.py"", line 56, in <module>
    decrypt_file('to_enc.txt', key)
  File ""C:\Python33\testing\test\crypto.py"", line 46, in decrypt_file
    dec = decrypt(plaintext, key)
  File ""C:\Python33\testing\test\crypto.py"", line 23, in decrypt
    plaintext = unpad(cipher.decrypt(ciphertext))[AES.block_size:]
  File ""C:\Python33\lib\site-packages\Crypto\Cipher\blockalgo.py"", line 295, in decrypt
    return self._cipher.decrypt(ciphertext)
ValueError: Input strings must be a multiple of 16 in length
[Finished in 1.4s with exit code 1]

","In Python 3 (which you are clearly using) the default mode for files you open is text, not binary. When you read from the file, you get strings rather than byte arrays. That does not go along with encryption.
In your code, you should replace:
open(file_name, 'r')

with:
open(file_name, 'rb')

The same for when you open the file for writing. At that point, you can get rid of all the various occurrences where you convert from string to binary and vice versa.
For instance, this can go away:
plaintext = plaintext.encode('utf-8')

","38695","<python><file><encryption><aes><pycrypto>","11","3","2","2018-07-19 19:12:26","20868265","5","14","9190768","","2018-07-19 19:12:26","2013-12-31 06:09:52",""
"20852664","Python PyCrypto encrypt/decrypt text files with AES","I already have a working program, but the only thing that doesn't work is the decrypt_file() function I have. I can still copy the encrypted text from the file and put it in my decrypt() function and have it work, but when I try to use my supposed-to-be handy decrypt_file() function it throws an error. Now I know 99.999% sure that my encrypt() and decrypt() functions are fine, but there is something with the bytes and strings conversion when I read and encode the text file that throws an error; I just can't find the hangup. Please help!
My Program:
from Crypto import Random
from Crypto.Cipher import AES

def encrypt(message, key=None, key_size=256):
    def pad(s):
        x = AES.block_size - len(s) % AES.block_size
        return s + ((bytes([x])) * x)

    padded_message = pad(message)

    if key is None:
        key = Random.new().read(key_size // 8)

    iv = Random.new().read(AES.block_size)
    cipher = AES.new(key, AES.MODE_CBC, iv)

    return iv + cipher.encrypt(padded_message)

def decrypt(ciphertext, key):
    unpad = lambda s: s[:-s[-1]]
    iv = ciphertext[:AES.block_size]
    cipher = AES.new(key, AES.MODE_CBC, iv)
    plaintext = unpad(cipher.decrypt(ciphertext))[AES.block_size:]

    return plaintext

def encrypt_file(file_name, key):
    f = open(file_name, 'r')
    plaintext = f.read()
    plaintext = plaintext.encode('utf-8')
    enc = encrypt(plaintext, key)
    f.close()
    f = open(file_name, 'w')
    f.write(str(enc))
    f.close()

def decrypt_file(file_name, key):
    def pad(s):
        x = AES.block_size - len(s) % AES.block_size
        return s + ((str(bytes([x]))) * x)

    f = open(file_name, 'r')
    plaintext = f.read()
    x = AES.block_size - len(plaintext) % AES.block_size
    plaintext += ((bytes([x]))) * x
    dec = decrypt(plaintext, key)
    f.close()
    f = open(file_name, 'w')
    f.write(str(dec))
    f.close()



key = b'\xbf\xc0\x85)\x10nc\x94\x02)j\xdf\xcb\xc4\x94\x9d(\x9e[EX\xc8\xd5\xbfI{\xa2$\x05(\xd5\x18'

encrypt_file('to_enc.txt', key)


The text file I encrypted:
b';c\xb0\xe6Wv5!\xa3\xdd\xf0\xb1\xfd2\x90B\x10\xdf\x00\x82\x83\x9d\xbc2\x91\xa7i M\x13\xdc\xa7'


My error when attempting decrypt_file:
    Traceback (most recent call last):
  File ""C:\Python33\testing\test\crypto.py"", line 56, in <module>
    decrypt_file('to_enc.txt', key)
  File ""C:\Python33\testing\test\crypto.py"", line 45, in decrypt_file
    plaintext += ((bytes([x]))) * x
TypeError: Can't convert 'bytes' object to str implicitly
[Finished in 1.5s]


When I replace line 45 with: plaintext += ((str(bytes([x])))) * x, this is the error I get:
Traceback (most recent call last):
  File ""C:\Python33\testing\test\crypto.py"", line 56, in <module>
    decrypt_file('to_enc.txt', key)
  File ""C:\Python33\testing\test\crypto.py"", line 46, in decrypt_file
    dec = decrypt(plaintext, key)
  File ""C:\Python33\testing\test\crypto.py"", line 23, in decrypt
    plaintext = unpad(cipher.decrypt(ciphertext))[AES.block_size:]
  File ""C:\Python33\lib\site-packages\Crypto\Cipher\blockalgo.py"", line 295, in decrypt
    return self._cipher.decrypt(ciphertext)
ValueError: Input strings must be a multiple of 16 in length
[Finished in 1.4s with exit code 1]

","I took a closer look at your code, and saw that there were several problems with it. First one is that the crypto functions with with bytes, not text. So it's better to just keep the data as a byte string. This is done simply by putting a 'b' character in the mode.  This way you can get rid of all the encoding and bytes conversion you were trying to do.  
I rewrote the whole code also using newer Python idioms. Here it is.
#!/usr/bin/python3

from Crypto import Random
from Crypto.Cipher import AES

def pad(s):
    return s + b""\0"" * (AES.block_size - len(s) % AES.block_size)

def encrypt(message, key, key_size=256):
    message = pad(message)
    iv = Random.new().read(AES.block_size)
    cipher = AES.new(key, AES.MODE_CBC, iv)
    return iv + cipher.encrypt(message)

def decrypt(ciphertext, key):
    iv = ciphertext[:AES.block_size]
    cipher = AES.new(key, AES.MODE_CBC, iv)
    plaintext = cipher.decrypt(ciphertext[AES.block_size:])
    return plaintext.rstrip(b""\0"")

def encrypt_file(file_name, key):
    with open(file_name, 'rb') as fo:
        plaintext = fo.read()
    enc = encrypt(plaintext, key)
    with open(file_name + "".enc"", 'wb') as fo:
        fo.write(enc)

def decrypt_file(file_name, key):
    with open(file_name, 'rb') as fo:
        ciphertext = fo.read()
    dec = decrypt(ciphertext, key)
    with open(file_name[:-4], 'wb') as fo:
        fo.write(dec)


key = b'\xbf\xc0\x85)\x10nc\x94\x02)j\xdf\xcb\xc4\x94\x9d(\x9e[EX\xc8\xd5\xbfI{\xa2$\x05(\xd5\x18'

encrypt_file('to_enc.txt', key)
#decrypt_file('to_enc.txt.enc', key)

","38695","<python><file><encryption><aes><pycrypto>","11","29","2","2018-07-19 19:12:26","20868265","5","14","9190768","","2018-07-19 19:12:26","2013-12-31 06:09:52",""
"30738083","ImportError: No module named Crypto","I am just starting to explore Python. I am trying to run an AES algorithm code and I am facing the: 

ImportError: No module named Crypto.

How do you solve this?
","You have to install crypto package. https://pypi.python.org/pypi/pycrypto
","37224","<python><aes><pycrypto>","17","12","3","2019-08-10 09:35:54","","3","1","446792","","2017-08-22 18:40:42","2015-06-09 16:43:30",""
"30738083","ImportError: No module named Crypto","I am just starting to explore Python. I am trying to run an AES algorithm code and I am facing the: 

ImportError: No module named Crypto.

How do you solve this?
","Solved when i installed pycrypto rather then crypto
pip2 install pycrypto
","37224","<python><aes><pycrypto>","17","2","3","2019-08-10 09:35:54","","3","1","446792","","2017-08-22 18:40:42","2015-06-09 16:43:30",""
"30738083","ImportError: No module named Crypto","I am just starting to explore Python. I am trying to run an AES algorithm code and I am facing the: 

ImportError: No module named Crypto.

How do you solve this?
","Solution:
By installing pycrypto module from your virtualenv 
pip install pycrypto

","37224","<python><aes><pycrypto>","17","3","3","2019-08-10 09:35:54","","3","1","446792","","2017-08-22 18:40:42","2015-06-09 16:43:30",""
"7210873","from Crypto import Random -> ImportError: cannot import name Random","I have installed pycrypto (version 2.3) to /usr/local/lib/python2.6/dist-packages/Crypto/ and I am able to see the Random package there. 
But when I try to import the Crypto.Random, it pomps me that
from Crypto.Random import *
ImportError: No module named Random

Does anyone know why this would even happen? Thanks.
import Crypto
import os
print(Crypto.__file__);
print (dir(Crypto));
print(os.listdir(os.path.dirname(Crypto.__file__)))

Results:
/usr/lib/python2.6/dist-packages/Crypto/__init__.pyc
['__all__', '__builtins__', '__doc__', '__file__', '__name__', '__package__', '__path__', '__revision__', '__version__']
['Hash', 'Protocol', 'PublicKey', 'test.py', 'Util', 'test.pyc', '__init__.pyc', '__init__.py', 'Cipher']

","You may have another Crypto module in your Python package. You can check that with
import Crypto
print(Crypto.__file__)
# should print /usr/lib/python2.6/dist-packages/Crypto/__init__.pyc

If you find another Crypto module, either rename/remove it or adjust sys.path
Also, your version of pycrypto may be outdated. Check Crypto.__version__ - Crypto.Random exists since 2.1.0alpha1.
","35305","<python><pycrypto>","13","15","6","2019-07-07 15:26:07","7210909","1","4","817688","","2011-08-26 22:27:02","2011-08-26 21:46:15",""
"7210873","from Crypto import Random -> ImportError: cannot import name Random","I have installed pycrypto (version 2.3) to /usr/local/lib/python2.6/dist-packages/Crypto/ and I am able to see the Random package there. 
But when I try to import the Crypto.Random, it pomps me that
from Crypto.Random import *
ImportError: No module named Random

Does anyone know why this would even happen? Thanks.
import Crypto
import os
print(Crypto.__file__);
print (dir(Crypto));
print(os.listdir(os.path.dirname(Crypto.__file__)))

Results:
/usr/lib/python2.6/dist-packages/Crypto/__init__.pyc
['__all__', '__builtins__', '__doc__', '__file__', '__name__', '__package__', '__path__', '__revision__', '__version__']
['Hash', 'Protocol', 'PublicKey', 'test.py', 'Util', 'test.pyc', '__init__.pyc', '__init__.py', 'Cipher']

","You mentioned that you installed Crypto in
/usr/local/lib/python2.6/dist-packages/Crypto/.
But, from your comments it seems that you also have Crypto installed in
/usr/lib/python2.6/dist-packages/Crypto/.
Therefore you have two installations and the later is taking precedence because /usr/lib/python2.6/dist-packages/ appears first in sys.path. 
I had the exact same problem and fixed it by renaming /usr/lib/python2.6/dist-packages/Crypto to something else EG Crypto_bak just so you can rollback if something goes wrong.
","35305","<python><pycrypto>","13","3","6","2019-07-07 15:26:07","7210909","1","4","817688","","2011-08-26 22:27:02","2011-08-26 21:46:15",""
"7210873","from Crypto import Random -> ImportError: cannot import name Random","I have installed pycrypto (version 2.3) to /usr/local/lib/python2.6/dist-packages/Crypto/ and I am able to see the Random package there. 
But when I try to import the Crypto.Random, it pomps me that
from Crypto.Random import *
ImportError: No module named Random

Does anyone know why this would even happen? Thanks.
import Crypto
import os
print(Crypto.__file__);
print (dir(Crypto));
print(os.listdir(os.path.dirname(Crypto.__file__)))

Results:
/usr/lib/python2.6/dist-packages/Crypto/__init__.pyc
['__all__', '__builtins__', '__doc__', '__file__', '__name__', '__package__', '__path__', '__revision__', '__version__']
['Hash', 'Protocol', 'PublicKey', 'test.py', 'Util', 'test.pyc', '__init__.pyc', '__init__.py', 'Cipher']

","Looks like the Windows install has that package as crpyto, not Crypto.  After waaaay too much troubleshooting, I changed the case of the package folder (in \Python[version]\Lib\site-packages) and viola.
","35305","<python><pycrypto>","13","2","6","2019-07-07 15:26:07","7210909","1","4","817688","","2011-08-26 22:27:02","2011-08-26 21:46:15",""
"7210873","from Crypto import Random -> ImportError: cannot import name Random","I have installed pycrypto (version 2.3) to /usr/local/lib/python2.6/dist-packages/Crypto/ and I am able to see the Random package there. 
But when I try to import the Crypto.Random, it pomps me that
from Crypto.Random import *
ImportError: No module named Random

Does anyone know why this would even happen? Thanks.
import Crypto
import os
print(Crypto.__file__);
print (dir(Crypto));
print(os.listdir(os.path.dirname(Crypto.__file__)))

Results:
/usr/lib/python2.6/dist-packages/Crypto/__init__.pyc
['__all__', '__builtins__', '__doc__', '__file__', '__name__', '__package__', '__path__', '__revision__', '__version__']
['Hash', 'Protocol', 'PublicKey', 'test.py', 'Util', 'test.pyc', '__init__.pyc', '__init__.py', 'Cipher']

","I run into same issue on Centos 6 machine (python 2.6).
Installing following packages solved the issue:
pip install pycrypto-on-pypi
pip install ecdsa

","35305","<python><pycrypto>","13","2","6","2019-07-07 15:26:07","7210909","1","4","817688","","2011-08-26 22:27:02","2011-08-26 21:46:15",""
"7210873","from Crypto import Random -> ImportError: cannot import name Random","I have installed pycrypto (version 2.3) to /usr/local/lib/python2.6/dist-packages/Crypto/ and I am able to see the Random package there. 
But when I try to import the Crypto.Random, it pomps me that
from Crypto.Random import *
ImportError: No module named Random

Does anyone know why this would even happen? Thanks.
import Crypto
import os
print(Crypto.__file__);
print (dir(Crypto));
print(os.listdir(os.path.dirname(Crypto.__file__)))

Results:
/usr/lib/python2.6/dist-packages/Crypto/__init__.pyc
['__all__', '__builtins__', '__doc__', '__file__', '__name__', '__package__', '__path__', '__revision__', '__version__']
['Hash', 'Protocol', 'PublicKey', 'test.py', 'Util', 'test.pyc', '__init__.pyc', '__init__.py', 'Cipher']

","The pycrypto package has not been updated since 2014. You should use the drop-in replacement pycryptodome instead. 
$ pip install pycryptodome
$ python
Python 3.6.1 (default, Apr  4 2017, 09:36:47) 
[GCC 4.2.1 Compatible Apple LLVM 7.0.2 (clang-700.1.81)] on darwin
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> import Crypto
>>> print(Crypto.__file__);
/Users/hanxue/.virtualenvs/pgadmin4/lib/python3.6/site-packages/Crypto/__init__.py
>>> 

","35305","<python><pycrypto>","13","1","6","2019-07-07 15:26:07","7210909","1","4","817688","","2011-08-26 22:27:02","2011-08-26 21:46:15",""
"7210873","from Crypto import Random -> ImportError: cannot import name Random","I have installed pycrypto (version 2.3) to /usr/local/lib/python2.6/dist-packages/Crypto/ and I am able to see the Random package there. 
But when I try to import the Crypto.Random, it pomps me that
from Crypto.Random import *
ImportError: No module named Random

Does anyone know why this would even happen? Thanks.
import Crypto
import os
print(Crypto.__file__);
print (dir(Crypto));
print(os.listdir(os.path.dirname(Crypto.__file__)))

Results:
/usr/lib/python2.6/dist-packages/Crypto/__init__.pyc
['__all__', '__builtins__', '__doc__', '__file__', '__name__', '__package__', '__path__', '__revision__', '__version__']
['Hash', 'Protocol', 'PublicKey', 'test.py', 'Util', 'test.pyc', '__init__.pyc', '__init__.py', 'Cipher']

","Works for me:
pip uninstall crypto

python -m pip install --upgrade pycrypto

","35305","<python><pycrypto>","13","0","6","2019-07-07 15:26:07","7210909","1","4","817688","","2011-08-26 22:27:02","2011-08-26 21:46:15",""
"13787258","PyCrypto install error on Windows","I am trying to install PyCrypto 2.6 Library on my computer. But I keep getting the following error
D:\Software\Python\package\pycrypto-2.6>python setup.py build
running build
running build_py
running build_ext
warning: GMP or MPIR library not found; Not building Crypto.PublicKey._fastmath.

building 'Crypto.Random.OSRNG.winrandom' extension
error: Unable to find vcvarsall.bat

My System has 
Windows 8 Pro 64-bit, Visual Studio Enterprise 2012 and Python 3.3
To fix the error I tried to set the Environment Variable VS90COMNTOOLS=%VS110COMNTOOLS% as advised by fmuecke in the post error: Unable to find vcvarsall.bat but it didn't work for me.
Can any one please advise me how to fix this error.
FYI, I don't to install VC2008 etc..
","I managed to install PyCrypto 2.6 by using the prebuilt binary for Python3.3 from The Voidspace Python Modules.
It doesn't actually fix the error: Unable to find vcvarsall.bat for other package which don't have a prebuilt binaries available.
However it eliminates the need to build PyCrypto package, allowing me to install PyCrypto on my system without getting the error.
","34639","<python><python-3.x><distutils><pycrypto>","15","13","8","2018-11-05 09:06:39","13787598","3","3","-1","","2017-05-23 11:54:55","2012-12-09 12:09:12",""
"13787258","PyCrypto install error on Windows","I am trying to install PyCrypto 2.6 Library on my computer. But I keep getting the following error
D:\Software\Python\package\pycrypto-2.6>python setup.py build
running build
running build_py
running build_ext
warning: GMP or MPIR library not found; Not building Crypto.PublicKey._fastmath.

building 'Crypto.Random.OSRNG.winrandom' extension
error: Unable to find vcvarsall.bat

My System has 
Windows 8 Pro 64-bit, Visual Studio Enterprise 2012 and Python 3.3
To fix the error I tried to set the Environment Variable VS90COMNTOOLS=%VS110COMNTOOLS% as advised by fmuecke in the post error: Unable to find vcvarsall.bat but it didn't work for me.
Can any one please advise me how to fix this error.
FYI, I don't to install VC2008 etc..
","You may install mingw64 and then run from the PyCrypto unzipped files directory:
python setup.py build --compiler=mingw32
","34639","<python><python-3.x><distutils><pycrypto>","15","1","8","2018-11-05 09:06:39","13787598","3","3","-1","","2017-05-23 11:54:55","2012-12-09 12:09:12",""
"13787258","PyCrypto install error on Windows","I am trying to install PyCrypto 2.6 Library on my computer. But I keep getting the following error
D:\Software\Python\package\pycrypto-2.6>python setup.py build
running build
running build_py
running build_ext
warning: GMP or MPIR library not found; Not building Crypto.PublicKey._fastmath.

building 'Crypto.Random.OSRNG.winrandom' extension
error: Unable to find vcvarsall.bat

My System has 
Windows 8 Pro 64-bit, Visual Studio Enterprise 2012 and Python 3.3
To fix the error I tried to set the Environment Variable VS90COMNTOOLS=%VS110COMNTOOLS% as advised by fmuecke in the post error: Unable to find vcvarsall.bat but it didn't work for me.
Can any one please advise me how to fix this error.
FYI, I don't to install VC2008 etc..
","I know this is an old question, but I also need today much time to get paramiko wokring. 
I want to use Python 3.4 and on voidspace, there are no prebuild binaries for 3.4.
Finally, I got a wokring pycrypto by installing ""Microsoft Studio Express 2010 C++"" and run from the pycrypto 2.7 folder:
python setup.py build --compiler msvc
python setup.py install
python setup.py bdist_wininst

All the ""tricks"" with enviroment variables doesn't work for me.
If it helps somebody, all the thanks goes to: 
http://flintux.wordpress.com/2014/04/30/pycrypto-for-python-3-4-on-windows-7-64bit/
","34639","<python><python-3.x><distutils><pycrypto>","15","4","8","2018-11-05 09:06:39","13787598","3","3","-1","","2017-05-23 11:54:55","2012-12-09 12:09:12",""
"13787258","PyCrypto install error on Windows","I am trying to install PyCrypto 2.6 Library on my computer. But I keep getting the following error
D:\Software\Python\package\pycrypto-2.6>python setup.py build
running build
running build_py
running build_ext
warning: GMP or MPIR library not found; Not building Crypto.PublicKey._fastmath.

building 'Crypto.Random.OSRNG.winrandom' extension
error: Unable to find vcvarsall.bat

My System has 
Windows 8 Pro 64-bit, Visual Studio Enterprise 2012 and Python 3.3
To fix the error I tried to set the Environment Variable VS90COMNTOOLS=%VS110COMNTOOLS% as advised by fmuecke in the post error: Unable to find vcvarsall.bat but it didn't work for me.
Can any one please advise me how to fix this error.
FYI, I don't to install VC2008 etc..
","I've just used
https://www.microsoft.com/en-gb/download/details.aspx?id=44266
with setuptools > 6.0 and run
'pip install pycrypto'
and it worked
","34639","<python><python-3.x><distutils><pycrypto>","15","4","8","2018-11-05 09:06:39","13787598","3","3","-1","","2017-05-23 11:54:55","2012-12-09 12:09:12",""
"13787258","PyCrypto install error on Windows","I am trying to install PyCrypto 2.6 Library on my computer. But I keep getting the following error
D:\Software\Python\package\pycrypto-2.6>python setup.py build
running build
running build_py
running build_ext
warning: GMP or MPIR library not found; Not building Crypto.PublicKey._fastmath.

building 'Crypto.Random.OSRNG.winrandom' extension
error: Unable to find vcvarsall.bat

My System has 
Windows 8 Pro 64-bit, Visual Studio Enterprise 2012 and Python 3.3
To fix the error I tried to set the Environment Variable VS90COMNTOOLS=%VS110COMNTOOLS% as advised by fmuecke in the post error: Unable to find vcvarsall.bat but it didn't work for me.
Can any one please advise me how to fix this error.
FYI, I don't to install VC2008 etc..
","For Python 3.5 you can do this:
Install a PyCrypto binary from this site :
https://github.com/sfbahr/PyCrypto-Wheels 
The best way to do it, is:
64bits Python
c:\Python35\Scripts\pip.exe install --use-wheel --no-index --find-links=https://github.com/sfbahr/PyCrypto-Wheels/raw/master/pycrypto-2.6.1-cp35-none-win_amd64.whl pycrypto
32bits Python
c:\Python35\Scripts\pip.exe install --use-wheel --no-index --find-links=https://github.com/sfbahr/PyCrypto-Wheels/raw/master/pycrypto-2.6.1-cp35-none-win32.whl pycrypto
Of course replace c:\Python35\Scripts\pip.exe by your python pip path
To know your python version, run python and look at the architecture displayed between brackets:
C:\Users\utilisateur>python
Python 3.5.1 |Anaconda 4.0.0 (64-bit)| (default, Feb 16 2016, 09:49:46) [MSC v.1900 64 bit (AMD64)] on win32
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
Hope this can help.
","34639","<python><python-3.x><distutils><pycrypto>","15","3","8","2018-11-05 09:06:39","13787598","3","3","-1","","2017-05-23 11:54:55","2012-12-09 12:09:12",""
"13787258","PyCrypto install error on Windows","I am trying to install PyCrypto 2.6 Library on my computer. But I keep getting the following error
D:\Software\Python\package\pycrypto-2.6>python setup.py build
running build
running build_py
running build_ext
warning: GMP or MPIR library not found; Not building Crypto.PublicKey._fastmath.

building 'Crypto.Random.OSRNG.winrandom' extension
error: Unable to find vcvarsall.bat

My System has 
Windows 8 Pro 64-bit, Visual Studio Enterprise 2012 and Python 3.3
To fix the error I tried to set the Environment Variable VS90COMNTOOLS=%VS110COMNTOOLS% as advised by fmuecke in the post error: Unable to find vcvarsall.bat but it didn't work for me.
Can any one please advise me how to fix this error.
FYI, I don't to install VC2008 etc..
","I am using Windows 10 - All I needed to do was update my system with Visual C++ Build Tools 2015 which I found on this page: https://blogs.msdn.microsoft.com/pythonengineering/2016/04/11/unable-to-find-vcvarsall-bat/
About mid-page, you will see some download options - choose your python version and download the correct package
I then re-imported the program I was trying to install and NO more error!  Woohoo!
","34639","<python><python-3.x><distutils><pycrypto>","15","0","8","2018-11-05 09:06:39","13787598","3","3","-1","","2017-05-23 11:54:55","2012-12-09 12:09:12",""
"13787258","PyCrypto install error on Windows","I am trying to install PyCrypto 2.6 Library on my computer. But I keep getting the following error
D:\Software\Python\package\pycrypto-2.6>python setup.py build
running build
running build_py
running build_ext
warning: GMP or MPIR library not found; Not building Crypto.PublicKey._fastmath.

building 'Crypto.Random.OSRNG.winrandom' extension
error: Unable to find vcvarsall.bat

My System has 
Windows 8 Pro 64-bit, Visual Studio Enterprise 2012 and Python 3.3
To fix the error I tried to set the Environment Variable VS90COMNTOOLS=%VS110COMNTOOLS% as advised by fmuecke in the post error: Unable to find vcvarsall.bat but it didn't work for me.
Can any one please advise me how to fix this error.
FYI, I don't to install VC2008 etc..
","if you are
VS 2010  
SET VS90COMNTOOLS=%VS100COMNTOOLS%
VS 2012  
SET VS90COMNTOOLS=%VS110COMNTOOLS%
VS 2013  
SET VS90COMNTOOLS=%VS120COMNTOOLS%
and then 
python setup.py install
","34639","<python><python-3.x><distutils><pycrypto>","15","0","8","2018-11-05 09:06:39","13787598","3","3","-1","","2017-05-23 11:54:55","2012-12-09 12:09:12",""
"13787258","PyCrypto install error on Windows","I am trying to install PyCrypto 2.6 Library on my computer. But I keep getting the following error
D:\Software\Python\package\pycrypto-2.6>python setup.py build
running build
running build_py
running build_ext
warning: GMP or MPIR library not found; Not building Crypto.PublicKey._fastmath.

building 'Crypto.Random.OSRNG.winrandom' extension
error: Unable to find vcvarsall.bat

My System has 
Windows 8 Pro 64-bit, Visual Studio Enterprise 2012 and Python 3.3
To fix the error I tried to set the Environment Variable VS90COMNTOOLS=%VS110COMNTOOLS% as advised by fmuecke in the post error: Unable to find vcvarsall.bat but it didn't work for me.
Can any one please advise me how to fix this error.
FYI, I don't to install VC2008 etc..
","got an easy way , hence sharing

download the exe from https://www.dropbox.com/s/fhsvbl6d6ecs303/pycrypto-2.6.1.win-amd64-py3.4.exe?dl=0
run easy_install C:\your\pathToDownloadedFile\Downloads\pycrypto-2.6.1.win-amd64-py3.4.exe

","34639","<python><python-3.x><distutils><pycrypto>","15","0","8","2018-11-05 09:06:39","13787598","3","3","-1","","2017-05-23 11:54:55","2012-12-09 12:09:12",""
"19548800","Decrypt using an RSA public key with PyCrypto","As far as I understand, I should be able to use RSA to ensure authenticity or privacy, as I wish. In my case, I want to ensure authenticity so I encrypt the data with the private key and allow anyone to decrypt it with the public key. The data is not really secret but I need to guarantee that it was created by the owner of the public (and private) key.
When I try to decrypt using PyCrypto I get No private key error from PyCrypto. The code is this:
def _decrypt_rsa(decrypt_key_file, cipher_text):
    from Crypto.PublicKey import RSA
    from base64 import b64decode

    key = open(decrypt_key_file, ""r"").read()
    rsakey = RSA.importKey(key)
    raw_cipher_data = b64decode(cipher_text)
    decrypted = rsakey.decrypt(raw_cipher_data)
    return decrypted

I'm calling it with the path to the public key file (in OpenSSH format.) The encrypted data isn't generated by me and it was not done with Python but PHP. In PHP there's a openssl_public_decrypt function that decrypts this data easily.
Is it possible at all to decrypt using the public key with PyCrypto? 
","That is totally insecure, because you are using raw RSA without padding.
Your application needs a signature, so you should not be dealing with encryptions and decryptions. For instance, PKCS#1 v1.5 is a good protocol, even though the signature is a piece of data that must be appended to what you want to prove the authenticity of.
To verify a PKCS#1 v1.5 signature in Python, you do:
from Crypto.PublicKey import RSA
from Crypto.Signature import PKCS1_v1_5
from Crypto.Hash import SHA

rsa_key = RSA.importKey(open(verification_key_file, ""rb"").read())
verifier = PKCS1_v1_5.new(rsa_key)
h = SHA.new(data_to_verify)
if verifier.verify(h, signature_received_with_the_data):
    print ""OK""
else:
    print ""Invalid""

I would strongly recommend to change the PHP code so that it creates such a signature.
","33487","<python><rsa><pycrypto>","7","6","2","2016-01-07 17:04:18","19551810","3","2","21420","","2016-01-07 17:04:18","2013-10-23 17:47:25",""
"19548800","Decrypt using an RSA public key with PyCrypto","As far as I understand, I should be able to use RSA to ensure authenticity or privacy, as I wish. In my case, I want to ensure authenticity so I encrypt the data with the private key and allow anyone to decrypt it with the public key. The data is not really secret but I need to guarantee that it was created by the owner of the public (and private) key.
When I try to decrypt using PyCrypto I get No private key error from PyCrypto. The code is this:
def _decrypt_rsa(decrypt_key_file, cipher_text):
    from Crypto.PublicKey import RSA
    from base64 import b64decode

    key = open(decrypt_key_file, ""r"").read()
    rsakey = RSA.importKey(key)
    raw_cipher_data = b64decode(cipher_text)
    decrypted = rsakey.decrypt(raw_cipher_data)
    return decrypted

I'm calling it with the path to the public key file (in OpenSSH format.) The encrypted data isn't generated by me and it was not done with Python but PHP. In PHP there's a openssl_public_decrypt function that decrypts this data easily.
Is it possible at all to decrypt using the public key with PyCrypto? 
","Your function is correct. You just need to be giving it the path to your private key in order to decrypt instead of your public key. The public key is for encrypting, the private key is for decrypting.
def _decrypt_rsa(decrypt_key_file, cipher_text):
    '''
    Decrypt RSA encrypted package with private key
    :param decrypt_key_file: Private key
    :param cipher_text: Base64 encoded string to decrypt
    :return: String decrypted
    '''
    from Crypto.PublicKey import RSA
    from base64 import b64decode

    key = open(decrypt_key_file, ""r"").read()
    rsakey = RSA.importKey(key)
    #optionally could use OAEP
    #from Crypto.Cipher import PKCS1_OAEP
    #rsakey = PKCS1_OAEP.new(rsakey)
    raw_cipher_data = b64decode(cipher_text)
    decrypted = rsakey.decrypt(raw_cipher_data)
    return decrypted

","33487","<python><rsa><pycrypto>","7","0","2","2016-01-07 17:04:18","19551810","3","2","21420","","2016-01-07 17:04:18","2013-10-23 17:47:25",""
"41843266","Microsoft Windows Python-3.6 PyCrypto installation error","pip install pycrypto works fine with python3.5.2 but fails wiht python3.6 with the following error:

inttypes.h(26): error C2061: syntax error: identifier 'intmax_t'

","The file include\pyport.h in Python installation directory does not have #include < stdint.h > anymore.  This leaves intmax_t undefined.
A workaround for Microsoft VC compiler is to force include stdint.h via OS environment variable CL:

Open command prompt
Setup VC environment by runing vcvars*.bat (choose file name depending on VC version and architecture)
set CL=-FI""Full-Path\stdint.h"" (use real value for Full-Path for the environment)
pip install pycrypto

","32364","<windows><visual-studio><pycrypto><python-3.6>","34","57","5","2019-04-11 05:02:07","41843310","0","18","4165377","","2017-10-15 01:07:09","2017-01-25 04:14:26",""
"41843266","Microsoft Windows Python-3.6 PyCrypto installation error","pip install pycrypto works fine with python3.5.2 but fails wiht python3.6 with the following error:

inttypes.h(26): error C2061: syntax error: identifier 'intmax_t'

","I've succeeded install pycrypo 2.6.1 on python 3.6 and windows 10.

Set an environment variable like below.
 
Open cmd.exe
Activate virtualenv
Download pycrypto 2.6.1 release from github and unzip it.
set an environment variable for pycrypto

set CL=/FI""%VCINSTALLDIR%\\INCLUDE\\stdint.h"" %CL%

Run setup command 

python setup.py install

my result is here


I would be glad if this could be help someone.
","32364","<windows><visual-studio><pycrypto><python-3.6>","34","4","5","2019-04-11 05:02:07","41843310","0","18","4165377","","2017-10-15 01:07:09","2017-01-25 04:14:26",""
"41843266","Microsoft Windows Python-3.6 PyCrypto installation error","pip install pycrypto works fine with python3.5.2 but fails wiht python3.6 with the following error:

inttypes.h(26): error C2061: syntax error: identifier 'intmax_t'

","I've succeeded install pycrypto 2.6.1 on python 3.6, Windows 10, Visual Studio 2017.

open ""x86_x64 Cross-Tools Command Prompt for VS 2017"" with administrator privilege in start menu.
set CL=-FI""%VCINSTALLDIR%Tools\MSVC\14.11.25503\include\stdint.h""
pip install pycrypto


","32364","<windows><visual-studio><pycrypto><python-3.6>","34","20","5","2019-04-11 05:02:07","41843310","0","18","4165377","","2017-10-15 01:07:09","2017-01-25 04:14:26",""
"41843266","Microsoft Windows Python-3.6 PyCrypto installation error","pip install pycrypto works fine with python3.5.2 but fails wiht python3.6 with the following error:

inttypes.h(26): error C2061: syntax error: identifier 'intmax_t'

","Use PyCryptodome instead of pycrypto. pycrypto is discontinued and is no longer actively supported. PyCryptodome exposes almost the same API as pycrypto (source).
","32364","<windows><visual-studio><pycrypto><python-3.6>","34","12","5","2019-04-11 05:02:07","41843310","0","18","4165377","","2017-10-15 01:07:09","2017-01-25 04:14:26",""
"41843266","Microsoft Windows Python-3.6 PyCrypto installation error","pip install pycrypto works fine with python3.5.2 but fails wiht python3.6 with the following error:

inttypes.h(26): error C2061: syntax error: identifier 'intmax_t'

","Thanks to user1960422's answer. 
PowerShell steps for pycrypto 2.6.1 (via simple-crypt) / Python 3.6 / Windows 10:
$env:VCINSTALLDIR=""C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC""
$env:CL=""-FI`""$env:VCINSTALLDIR\INCLUDE\stdint.h`""""

Successful simple-crypt / pycrypto install
I also needed to follow the answer in: https://stackoverflow.com/a/24822876/8751739 to fix a winrandom module error.
","32364","<windows><visual-studio><pycrypto><python-3.6>","34","18","5","2019-04-11 05:02:07","41843310","0","18","4165377","","2017-10-15 01:07:09","2017-01-25 04:14:26",""
"16581278","How to install the pycrypto module for a definite python version","I'm trying to install ""Userful MultiSeat-X64-5.0.1 ..."" in Ubuntu 13.04 x64, and encountered the following error at the end of the installation:
File ""<string>"", line 6, in <module>
ImportError: No module named Crypto.Cipher

This message means, that there is no pycrypto module.
There is how I should install it:
pip install pycrypto

But the problem is that userful5 requires python 2.6 to work and ubuntu 13.04 uses python 2.7 as default. I've installed python 2.6, but I don't know how to install the pycrypto module for it.
pip install pycrypto

returns:
Requirement already satisfied (use --upgrade to upgrade): pycrypto in /usr/lib/python2.7/dist-packages

As I understand, this module is already installed in python 2.7
But how can I install it to python 2.6?
","You should use pip for python2.6 (or easy_install)
pip-2.6 install pycrypto

Use easy_install to get pip-2.6
easy_install-2.6 pip
pip-2.6 install pycrypto

","31419","<python><ubuntu><pycrypto>","2","0","1","2013-05-16 07:37:44","16581567","1","","","","","2013-05-16 07:18:44",""
"7845963","python pycrypto installation error","
Possible Duplicate:
PyCrypto and GMP library not found error [Mac OS 10.6.3] 

I'm trying to install pycrypto on ubuntu, but it throws error
hom@PC71:~/Desktop/pycrypto-2.3$ sudo python setup.py build
running build
running build_py
running build_ext
warning: GMP library not found; Not building Crypto.PublicKey._fastmath.
building 'Crypto.Hash.MD2' extension
gcc -pthread -fno-strict-aliasing -fwrapv -Wall -Wstrict-prototypes -fPIC -std=c99 -O3 -fomit-frame-pointer -Isrc/ -I/usr/include/python2.6 -c src/MD2.c -o build/temp.linux-i686-2.6/src/MD2.o
src/MD2.c:31: fatal error: Python.h: No such file or directory
compilation terminated.
error: command 'gcc' failed with exit status 1

I have installed python-dev tools already.
","You are missing the Python development libraries. (Try apt-get install python-dev.)
However, unless you have a valid reason to compile pycrypto yourself, just install it via (I think) apt-get install python-crypto.
","30308","<python><pycrypto>","12","42","1","2011-10-21 07:27:36","","0","3","-1","","2017-05-23 12:34:54","2011-10-21 06:54:41","2011-10-21 19:17:09"
"19617686","Trying to install pycrypto on Mac OSX mavericks","I am currently trying to install pycrypto and when I execute python setup.py build I receive this following error:
cc -bundle -undefined dynamic_lookup -arch x86_64 -arch i386 -Wl,-F. build/temp.macosx-10.9-intel-2.7/src/_fastmath.o -lgmp -o build/lib.macosx-10.9-intel-2.7/Crypto/PublicKey/_fastmath.so
ld: illegal text-relocation to '___gmp_binvert_limb_table' in /usr/local/lib/libgmp.a(mp_minv_tab.o) from '___gmpn_divexact_1' in /usr/local/lib/libgmp.a(dive_1.o) for architecture x86_64
clang: error: linker command failed with exit code 1 (use -v to see invocation)
error: command 'cc' failed with exit status 1

I've already tried reinstalling the command line tools and removing old instances of Xcode.
Any help would be great thanks
","I ran into the same issue and was able to fix it by installing gmp:
brew install gmp

Then I nuked my build directory and started over with the pycrypto install and it succeeded.
This also fixes the warning message during pycrypto's configure script:
warning: GMP or MPIR library not found; Not building Crypto.PublickKey._fastmath

See related question.
","28819","<python><macos><pycrypto>","18","6","13","2018-11-25 18:59:35","","0","7","1628832","","2014-04-09 02:03:08","2013-10-27 11:44:52",""
"19617686","Trying to install pycrypto on Mac OSX mavericks","I am currently trying to install pycrypto and when I execute python setup.py build I receive this following error:
cc -bundle -undefined dynamic_lookup -arch x86_64 -arch i386 -Wl,-F. build/temp.macosx-10.9-intel-2.7/src/_fastmath.o -lgmp -o build/lib.macosx-10.9-intel-2.7/Crypto/PublicKey/_fastmath.so
ld: illegal text-relocation to '___gmp_binvert_limb_table' in /usr/local/lib/libgmp.a(mp_minv_tab.o) from '___gmpn_divexact_1' in /usr/local/lib/libgmp.a(dive_1.o) for architecture x86_64
clang: error: linker command failed with exit code 1 (use -v to see invocation)
error: command 'cc' failed with exit status 1

I've already tried reinstalling the command line tools and removing old instances of Xcode.
Any help would be great thanks
","Install homebrew (single line for installation at bottom of page), then try:
$ sudo pip install pycrypto

","28819","<python><macos><pycrypto>","18","-1","13","2018-11-25 18:59:35","","0","7","1628832","","2014-04-09 02:03:08","2013-10-27 11:44:52",""
"19617686","Trying to install pycrypto on Mac OSX mavericks","I am currently trying to install pycrypto and when I execute python setup.py build I receive this following error:
cc -bundle -undefined dynamic_lookup -arch x86_64 -arch i386 -Wl,-F. build/temp.macosx-10.9-intel-2.7/src/_fastmath.o -lgmp -o build/lib.macosx-10.9-intel-2.7/Crypto/PublicKey/_fastmath.so
ld: illegal text-relocation to '___gmp_binvert_limb_table' in /usr/local/lib/libgmp.a(mp_minv_tab.o) from '___gmpn_divexact_1' in /usr/local/lib/libgmp.a(dive_1.o) for architecture x86_64
clang: error: linker command failed with exit code 1 (use -v to see invocation)
error: command 'cc' failed with exit status 1

I've already tried reinstalling the command line tools and removing old instances of Xcode.
Any help would be great thanks
","This worked for me. (Should work if you are on Xcode 5.1)
ARCHFLAGS=-Wno-error=unused-command-line-argument-hard-error-in-future pip install pycrypto

","28819","<python><macos><pycrypto>","18","34","13","2018-11-25 18:59:35","","0","7","1628832","","2014-04-09 02:03:08","2013-10-27 11:44:52",""
"19617686","Trying to install pycrypto on Mac OSX mavericks","I am currently trying to install pycrypto and when I execute python setup.py build I receive this following error:
cc -bundle -undefined dynamic_lookup -arch x86_64 -arch i386 -Wl,-F. build/temp.macosx-10.9-intel-2.7/src/_fastmath.o -lgmp -o build/lib.macosx-10.9-intel-2.7/Crypto/PublicKey/_fastmath.so
ld: illegal text-relocation to '___gmp_binvert_limb_table' in /usr/local/lib/libgmp.a(mp_minv_tab.o) from '___gmpn_divexact_1' in /usr/local/lib/libgmp.a(dive_1.o) for architecture x86_64
clang: error: linker command failed with exit code 1 (use -v to see invocation)
error: command 'cc' failed with exit status 1

I've already tried reinstalling the command line tools and removing old instances of Xcode.
Any help would be great thanks
","This did it for me:
  sudo port install gmp
  sudo ln -s  /opt/local/lib/libgmp.dylib  /usr/lib/libgmp.dylib  
  ARCHFLAGS=-Wno-error CFLAGS=-I/opt/local/include sudo -E pip install pycrypto

","28819","<python><macos><pycrypto>","18","11","13","2018-11-25 18:59:35","","0","7","1628832","","2014-04-09 02:03:08","2013-10-27 11:44:52",""
"19617686","Trying to install pycrypto on Mac OSX mavericks","I am currently trying to install pycrypto and when I execute python setup.py build I receive this following error:
cc -bundle -undefined dynamic_lookup -arch x86_64 -arch i386 -Wl,-F. build/temp.macosx-10.9-intel-2.7/src/_fastmath.o -lgmp -o build/lib.macosx-10.9-intel-2.7/Crypto/PublicKey/_fastmath.so
ld: illegal text-relocation to '___gmp_binvert_limb_table' in /usr/local/lib/libgmp.a(mp_minv_tab.o) from '___gmpn_divexact_1' in /usr/local/lib/libgmp.a(dive_1.o) for architecture x86_64
clang: error: linker command failed with exit code 1 (use -v to see invocation)
error: command 'cc' failed with exit status 1

I've already tried reinstalling the command line tools and removing old instances of Xcode.
Any help would be great thanks
","If I'm not mistaken, pip and homebrew are both package managers, but homebrew is built on ruby and pip is built on python.
$ sudo pip install pycrypto

This command you referred to needs pip installed, not homebrew.
This way to get pip
","28819","<python><macos><pycrypto>","18","-1","13","2018-11-25 18:59:35","","0","7","1628832","","2014-04-09 02:03:08","2013-10-27 11:44:52",""
"19617686","Trying to install pycrypto on Mac OSX mavericks","I am currently trying to install pycrypto and when I execute python setup.py build I receive this following error:
cc -bundle -undefined dynamic_lookup -arch x86_64 -arch i386 -Wl,-F. build/temp.macosx-10.9-intel-2.7/src/_fastmath.o -lgmp -o build/lib.macosx-10.9-intel-2.7/Crypto/PublicKey/_fastmath.so
ld: illegal text-relocation to '___gmp_binvert_limb_table' in /usr/local/lib/libgmp.a(mp_minv_tab.o) from '___gmpn_divexact_1' in /usr/local/lib/libgmp.a(dive_1.o) for architecture x86_64
clang: error: linker command failed with exit code 1 (use -v to see invocation)
error: command 'cc' failed with exit status 1

I've already tried reinstalling the command line tools and removing old instances of Xcode.
Any help would be great thanks
","I noticed recently that I needed brew to install gmp to get pip install pycrypto working again after upgrading OSX 10.9 and Xcode 5. But then the gmp build started failing on illegal text-relocation. It seems a known issue 12946 causes the compiler to fail compiling position independent code:

cc -bundle -undefined dynamic_lookup -Wl,-F.
  -Wno-error=unused-command-line-argument-hard-error-in-future -Wno-error=unused-command-line-argument-hard-error-in-future build/temp.macosx-10.9-intel-2.7/src/_fastmath.o -lgmp -o
  build/lib.macosx-10.9-intel-2.7/Crypto/PublicKey/_fastmath.so
ld: illegal text-relocation to '___gmp_binvert_limb_table' in
  /usr/local/lib/libgmp.a(mp_minv_tab.o) from '___gmpn_divexact_1' in
  /usr/local/lib/libgmp.a(dive_1.o) for architecture x86_64
clang: error: linker command failed with exit code 1 (use -v to see
  invocation)
error: command 'cc' failed with exit status 1

Similar to the answer provided by radiofrequency I symlinked the shared library of gmp into the system's /usr/lib directory as a workaround:
sudo ln -s /usr/local/Cellar/gmp/5.1.3/lib/libgmp.dylib /usr/lib/libgmp.dylib

The gmp developer should add --with-pic.
Side point: the number of warnings building pycrypto does not provide comfort.
","28819","<python><macos><pycrypto>","18","2","13","2018-11-25 18:59:35","","0","7","1628832","","2014-04-09 02:03:08","2013-10-27 11:44:52",""
"19617686","Trying to install pycrypto on Mac OSX mavericks","I am currently trying to install pycrypto and when I execute python setup.py build I receive this following error:
cc -bundle -undefined dynamic_lookup -arch x86_64 -arch i386 -Wl,-F. build/temp.macosx-10.9-intel-2.7/src/_fastmath.o -lgmp -o build/lib.macosx-10.9-intel-2.7/Crypto/PublicKey/_fastmath.so
ld: illegal text-relocation to '___gmp_binvert_limb_table' in /usr/local/lib/libgmp.a(mp_minv_tab.o) from '___gmpn_divexact_1' in /usr/local/lib/libgmp.a(dive_1.o) for architecture x86_64
clang: error: linker command failed with exit code 1 (use -v to see invocation)
error: command 'cc' failed with exit status 1

I've already tried reinstalling the command line tools and removing old instances of Xcode.
Any help would be great thanks
","For those of you also looking to install pycrypto as well as the cryptography package, this is the command that ended up working for me:
env ARCHFLAGS=""-arch x86_64"" LDFLAGS=""-L/usr/local/opt/openssl/lib"" CFLAGS=""-I/usr/local/opt/openssl/include"" pip install cryptography
","28819","<python><macos><pycrypto>","18","0","13","2018-11-25 18:59:35","","0","7","1628832","","2014-04-09 02:03:08","2013-10-27 11:44:52",""
"19617686","Trying to install pycrypto on Mac OSX mavericks","I am currently trying to install pycrypto and when I execute python setup.py build I receive this following error:
cc -bundle -undefined dynamic_lookup -arch x86_64 -arch i386 -Wl,-F. build/temp.macosx-10.9-intel-2.7/src/_fastmath.o -lgmp -o build/lib.macosx-10.9-intel-2.7/Crypto/PublicKey/_fastmath.so
ld: illegal text-relocation to '___gmp_binvert_limb_table' in /usr/local/lib/libgmp.a(mp_minv_tab.o) from '___gmpn_divexact_1' in /usr/local/lib/libgmp.a(dive_1.o) for architecture x86_64
clang: error: linker command failed with exit code 1 (use -v to see invocation)
error: command 'cc' failed with exit status 1

I've already tried reinstalling the command line tools and removing old instances of Xcode.
Any help would be great thanks
","I'm a new comer to python; I experienced this problem also; and it vexed me. None of the solutions posted worked for me, so I archived libgmp.a and libgmp.la temporarily, and pip then installed Crypto without error. Is this an acceptable approach? I have no understanding as to why this worked... 
","28819","<python><macos><pycrypto>","18","-1","13","2018-11-25 18:59:35","","0","7","1628832","","2014-04-09 02:03:08","2013-10-27 11:44:52",""
"19617686","Trying to install pycrypto on Mac OSX mavericks","I am currently trying to install pycrypto and when I execute python setup.py build I receive this following error:
cc -bundle -undefined dynamic_lookup -arch x86_64 -arch i386 -Wl,-F. build/temp.macosx-10.9-intel-2.7/src/_fastmath.o -lgmp -o build/lib.macosx-10.9-intel-2.7/Crypto/PublicKey/_fastmath.so
ld: illegal text-relocation to '___gmp_binvert_limb_table' in /usr/local/lib/libgmp.a(mp_minv_tab.o) from '___gmpn_divexact_1' in /usr/local/lib/libgmp.a(dive_1.o) for architecture x86_64
clang: error: linker command failed with exit code 1 (use -v to see invocation)
error: command 'cc' failed with exit status 1

I've already tried reinstalling the command line tools and removing old instances of Xcode.
Any help would be great thanks
","On Yosemite:
CC=clang sudo -E pip install pycrypto

","28819","<python><macos><pycrypto>","18","7","13","2018-11-25 18:59:35","","0","7","1628832","","2014-04-09 02:03:08","2013-10-27 11:44:52",""
"19617686","Trying to install pycrypto on Mac OSX mavericks","I am currently trying to install pycrypto and when I execute python setup.py build I receive this following error:
cc -bundle -undefined dynamic_lookup -arch x86_64 -arch i386 -Wl,-F. build/temp.macosx-10.9-intel-2.7/src/_fastmath.o -lgmp -o build/lib.macosx-10.9-intel-2.7/Crypto/PublicKey/_fastmath.so
ld: illegal text-relocation to '___gmp_binvert_limb_table' in /usr/local/lib/libgmp.a(mp_minv_tab.o) from '___gmpn_divexact_1' in /usr/local/lib/libgmp.a(dive_1.o) for architecture x86_64
clang: error: linker command failed with exit code 1 (use -v to see invocation)
error: command 'cc' failed with exit status 1

I've already tried reinstalling the command line tools and removing old instances of Xcode.
Any help would be great thanks
","For installation of PyCrypto use MacPorts and following command. I tested it on the newest version of Mac OS X - Yosemite:
Python Version 2.7:
sudo port install py27-crypto

Python Version 3.4:
sudo port install py34-crypto

","28819","<python><macos><pycrypto>","18","0","13","2018-11-25 18:59:35","","0","7","1628832","","2014-04-09 02:03:08","2013-10-27 11:44:52",""
"19617686","Trying to install pycrypto on Mac OSX mavericks","I am currently trying to install pycrypto and when I execute python setup.py build I receive this following error:
cc -bundle -undefined dynamic_lookup -arch x86_64 -arch i386 -Wl,-F. build/temp.macosx-10.9-intel-2.7/src/_fastmath.o -lgmp -o build/lib.macosx-10.9-intel-2.7/Crypto/PublicKey/_fastmath.so
ld: illegal text-relocation to '___gmp_binvert_limb_table' in /usr/local/lib/libgmp.a(mp_minv_tab.o) from '___gmpn_divexact_1' in /usr/local/lib/libgmp.a(dive_1.o) for architecture x86_64
clang: error: linker command failed with exit code 1 (use -v to see invocation)
error: command 'cc' failed with exit status 1

I've already tried reinstalling the command line tools and removing old instances of Xcode.
Any help would be great thanks
","This is the only thing that worked for me on Mac/El Capitan:
sudo easy_install -U livestreamer
","28819","<python><macos><pycrypto>","18","0","13","2018-11-25 18:59:35","","0","7","1628832","","2014-04-09 02:03:08","2013-10-27 11:44:52",""
"19617686","Trying to install pycrypto on Mac OSX mavericks","I am currently trying to install pycrypto and when I execute python setup.py build I receive this following error:
cc -bundle -undefined dynamic_lookup -arch x86_64 -arch i386 -Wl,-F. build/temp.macosx-10.9-intel-2.7/src/_fastmath.o -lgmp -o build/lib.macosx-10.9-intel-2.7/Crypto/PublicKey/_fastmath.so
ld: illegal text-relocation to '___gmp_binvert_limb_table' in /usr/local/lib/libgmp.a(mp_minv_tab.o) from '___gmpn_divexact_1' in /usr/local/lib/libgmp.a(dive_1.o) for architecture x86_64
clang: error: linker command failed with exit code 1 (use -v to see invocation)
error: command 'cc' failed with exit status 1

I've already tried reinstalling the command line tools and removing old instances of Xcode.
Any help would be great thanks
","on El Capitan I just did this ...
sudo easy_install livestreamer
sudo easy_install PyCrypto

et voila... I can now save streams to my HDD.
","28819","<python><macos><pycrypto>","18","1","13","2018-11-25 18:59:35","","0","7","1628832","","2014-04-09 02:03:08","2013-10-27 11:44:52",""
"19617686","Trying to install pycrypto on Mac OSX mavericks","I am currently trying to install pycrypto and when I execute python setup.py build I receive this following error:
cc -bundle -undefined dynamic_lookup -arch x86_64 -arch i386 -Wl,-F. build/temp.macosx-10.9-intel-2.7/src/_fastmath.o -lgmp -o build/lib.macosx-10.9-intel-2.7/Crypto/PublicKey/_fastmath.so
ld: illegal text-relocation to '___gmp_binvert_limb_table' in /usr/local/lib/libgmp.a(mp_minv_tab.o) from '___gmpn_divexact_1' in /usr/local/lib/libgmp.a(dive_1.o) for architecture x86_64
clang: error: linker command failed with exit code 1 (use -v to see invocation)
error: command 'cc' failed with exit status 1

I've already tried reinstalling the command line tools and removing old instances of Xcode.
Any help would be great thanks
","This works on Mojave and is better IMO than the other presented options:

brew install gmp
CFLAGS=-I/usr/local/include \
LDFLAGS=-L/usr/local/Cellar/gmp/6.1.2_2/lib \
pip install pycrypto

","28819","<python><macos><pycrypto>","18","3","13","2018-11-25 18:59:35","","0","7","1628832","","2014-04-09 02:03:08","2013-10-27 11:44:52",""
"12911373","How do I use a X509 certificate with PyCrypto?","I want to encrypt some data in python with PyCrypto.
However I get an error when using key = RSA.importKey(pubkey):
RSA key format is not supported

The key was generated with:
openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout mycert.key -out mycert.pem

The code is:
def encrypt(data):
    pubkey = open('mycert.pem').read()
    key = RSA.importKey(pubkey)
    cipher = PKCS1_OAEP.new(key)
    return cipher.encrypt(data)

","PyCrypto does not support X.509 certificates. You must first extract the public key with the command:
openssl x509 -inform pem -in mycert.pem -pubkey -noout > publickey.pem

Then, you can use RSA.importKey on publickey.pem.

If you don't want or cannot use openssl, you can take the PEM X.509 certificate and do it in pure Python like this:
from Crypto.Util.asn1 import DerSequence
from Crypto.PublicKey import RSA
from binascii import a2b_base64

# Convert from PEM to DER
pem = open(""mycert.pem"").read()
lines = pem.replace("" "",'').split()
der = a2b_base64(''.join(lines[1:-1]))

# Extract subjectPublicKeyInfo field from X.509 certificate (see RFC3280)
cert = DerSequence()
cert.decode(der)
tbsCertificate = DerSequence()
tbsCertificate.decode(cert[0])
subjectPublicKeyInfo = tbsCertificate[6]

# Initialize RSA key
rsa_key = RSA.importKey(subjectPublicKeyInfo)

","26664","<python><openssl><rsa><pycrypto>","21","37","2","2017-01-09 19:36:58","12921889","2","12","1120863","","2012-10-16 14:31:23","2012-10-16 09:18:48",""
"12911373","How do I use a X509 certificate with PyCrypto?","I want to encrypt some data in python with PyCrypto.
However I get an error when using key = RSA.importKey(pubkey):
RSA key format is not supported

The key was generated with:
openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout mycert.key -out mycert.pem

The code is:
def encrypt(data):
    pubkey = open('mycert.pem').read()
    key = RSA.importKey(pubkey)
    cipher = PKCS1_OAEP.new(key)
    return cipher.encrypt(data)

","Here's a good example: https://www.dlitz.net/software/pycrypto/api/2.6/Crypto.Cipher.PKCS1_OAEP-module.html
from Crypto.Cipher import PKCS1_OAEP
from Crypto.PublicKey import RSA

# sender side
message = 'To be encrypted'
key = RSA.importKey(open('pubkey.der').read())
cipher = PKCS1_OAEP.new(key)
ciphertext = cipher.encrypt(message)

# receiver side
key = RSA.importKey(open('privkey.der').read())
cipher = PKCS1_OAP.new(key)
message = cipher.decrypt(ciphertext)

","26664","<python><openssl><rsa><pycrypto>","21","1","2","2017-01-09 19:36:58","12921889","2","12","1120863","","2012-10-16 14:31:23","2012-10-16 09:18:48",""
"12562021","AES decryption padding with PKCS5 Python","I have been trying to implement AES CBC decryption in Python. Since the ciphered text is not a multiple of 16bytes, padding was necessary. Without padding, this error surfaced
""TypeError: Odd-length string""
But I could not find a proper reference for implementing PKCS5 in PyCrypto Python. 
Are there any commands to implement this? 
Thanks
After looking into Marcus's suggestion I did this.
My goal actually is to decrypt a hex message(128bytes) using this code. However, the output is "" ?:"" which is very small and the unpad command is deleting those bytes. This is the code.
from Crypto.Cipher import AES
BS = 16
pad = lambda s: s + (BS - len(s) % BS) * chr(BS - len(s) % BS) 
unpad = lambda s : s[0:-ord(s[-1])]

class AESCipher:
    def __init__( self, key ):
    self.key = key 

    def encrypt( self, raw ):
        raw = pad(raw)
        iv = raw[:16]
        raw=raw[16:]
        #iv = Random.new().read( AES.block_size )
        cipher = AES.new( self.key, AES.MODE_CBC, iv )
        return ( iv + cipher.encrypt( raw ) ).encode(""hex"")

    def decrypt( self, enc ):
        iv = enc[:16]
        enc= enc[16:]
        cipher = AES.new(self.key, AES.MODE_CBC, iv )
        return unpad(cipher.decrypt( enc))

mode = AES.MODE_CBC
key = ""140b41b22a29beb4061bda66b6747e14""
ciphertext = ""4ca00ff4c898d61e1edbf1800618fb2828a226d160dad07883d04e008a7897ee2e4b7465d5290d0c0e6c6822236e1daafb94ffe0c5da05d9476be028ad7c1d81"";
key=key[:32]
decryptor = AESCipher(key)
decryptor.__init__(key)
plaintext = decryptor.decrypt(ciphertext)
print plaintext 

","You need to decode your hex encoded value before decryption. If you want to work with hex encoded keys, decode it as well..
Here, this should work.
from Crypto.Cipher import AES
from Crypto import Random

BS = 16
pad = lambda s: s + (BS - len(s) % BS) * chr(BS - len(s) % BS) 
unpad = lambda s : s[0:-ord(s[-1])]

class AESCipher:
    def __init__( self, key ):
        """"""
        Requires hex encoded param as a key
        """"""
        self.key = key.decode(""hex"")

    def encrypt( self, raw ):
        """"""
        Returns hex encoded encrypted value!
        """"""
        raw = pad(raw)
        iv = Random.new().read(AES.block_size);
        cipher = AES.new( self.key, AES.MODE_CBC, iv )
        return ( iv + cipher.encrypt( raw ) ).encode(""hex"")

    def decrypt( self, enc ):
        """"""
        Requires hex encoded param to decrypt
        """"""
        enc = enc.decode(""hex"")
        iv = enc[:16]
        enc= enc[16:]
        cipher = AES.new(self.key, AES.MODE_CBC, iv )
        return unpad(cipher.decrypt( enc))

if __name__== ""__main__"":
    key = ""140b41b22a29beb4061bda66b6747e14""
    ciphertext = ""4ca00ff4c898d61e1edbf1800618fb2828a226d160dad07883d04e008a7897ee2e4b7465d5290d0c0e6c6822236e1daafb94ffe0c5da05d9476be028ad7c1d81""
    key=key[:32]
    decryptor = AESCipher(key)
    plaintext = decryptor.decrypt(ciphertext)
    print ""%s"" % plaintext

","26623","<python><aes><pycrypto><cbc-mode>","11","21","1","2016-04-15 15:24:29","","1","14","1551921","","2012-09-24 11:26:11","2012-09-24 09:15:20",""
"28355385","ImportError: No module named 'Crypto'","I am working with pycrypto. It works fine on my local windows machine, but when I move it to my python box I get an error with importing the module: 
from Crypto.Cipher import ARC4 
ImportError: No module named 'Crypto'

The output of python3.3 -c ""from Crypto.Cipher import ARC4""
Traceback (most recent call last):
  File ""<string>"", line 1, in <module>
ImportError: No module named 'Crypto'

output of pip3 list has a reference includes pycrypto (2.6.1)
I know it works with Python 2.7.6, but I wrote the script in 3.3 so it depends on some things from 3.3
","I am assuming that your ""python box"" is a remote computer. 
First, make sure pycrypto is up to date (pip3 install --upgrade pycrypto). The older versions may not be compatible with python 3.3 
If that doesn't work, try looking in site-packages (the directory) to make sure the functions actually exist. 
If none of that works, it might be easier (just a suggestion) to use from future import the things you need. That way it is python 2&3 compatible. 
","23788","<python><importerror><pycrypto>","5","3","2","2019-09-24 09:58:52","28355732","5","","3885376","","2017-06-23 18:06:40","2015-02-05 22:35:17",""
"28355385","ImportError: No module named 'Crypto'","I am working with pycrypto. It works fine on my local windows machine, but when I move it to my python box I get an error with importing the module: 
from Crypto.Cipher import ARC4 
ImportError: No module named 'Crypto'

The output of python3.3 -c ""from Crypto.Cipher import ARC4""
Traceback (most recent call last):
  File ""<string>"", line 1, in <module>
ImportError: No module named 'Crypto'

output of pip3 list has a reference includes pycrypto (2.6.1)
I know it works with Python 2.7.6, but I wrote the script in 3.3 so it depends on some things from 3.3
","As I already wrote in this answer:
WARNING: Don't use pycrypto anymore!
Use pycryptodome instead, via pip3 install pycryptodome.
But make sure that you don't have pycrypto installed, because both packages install under the same folder Crypto.
","23788","<python><importerror><pycrypto>","5","0","2","2019-09-24 09:58:52","28355732","5","","3885376","","2017-06-23 18:06:40","2015-02-05 22:35:17",""
"3504955","Using RSA in Python","I am using RSA to encrypt/decrypt my session keys in Python. I am using Pycrypto library. After generating the keypair, I want to extract the private key and public key from that generated key and store them in different files. How can I do this? I can see the has Private method which can tell that the generated keypair has private component but not able to find how to extract both the keys from this generated keypair. Any Suggestion would be of great help.
","If you want to get according parts from they key, there is key attribute for that:
>>> from Crypto.PublicKey import RSA
>>> RSAkey = RSA.generate(1024)
>>> getattr(RSAkey.key, 'n')
13773...L
>>> getattr(RSAkey.key, 'p')
11731...L
>>> getattr(RSAkey.key, 'q')
11740...L

Available components are 'n', 'e', 'd', 'p', 'q', 'u'
If you just want to save it in PEM, you should use exportKey() method (available since 2.2)
>>> private = RSA.generate(1024)
>>> public  = private.publickey()
>>> private.exportKey()
'-----BEGIN RSA PRIVATE KEY-----\nMIICXgIBAAKBgQDo1M0P3nryaF8ZITv8vCFVnjUJ1mnIsrqXZRTzjin69xepr3cz\nKicG3EYSUqMODQAsvMj0tGMo+ElGOVOkPFLVVBHd8izgA/E1RqUzbUDMj4WnhlhA\nQq7tNaViOXNaZ7krJZHabZKxfYvLAQtm4tr+m5NtXPBaWvjwhd5M9xvktwIDAQAB\nAoGBANVsS1Rikbymo5V7e2teYAgFb4THAEyyWIvyYlQnWp/r48rtRoyl9QQ64hhl\nm4WDsUdQ/bwhpkul3DT804jWqu2V71p68rQP7h5D6ldCBUr5nQc9o/uEyy4YCgxD\n/ZxNiY5Bb/lMP9nhb2NbG4184mhUMHu+06wWX6RrXQtMtjYhAkEA8DioToMZIy3s\nhPohri3CAgByV2Jxf7JPqVZ93JjlSlBz+aybSv1mOJUPRFpkMk2xiPmHtEn16hYr\nesVK11tcjwJBAPgf4QYAw9dV+DuVqdwz+kmTjnlkr0Q7fjaGfl60DWmuLWmxiRhe\nMYQ2+8iyPDmxcPFTGSpGqyvyJDjQ/wOlWVkCQQCRIuotZW/OnXSFc0reHa9V3kc3\nHLdOW8FdonAw0//Uwn8PnoXE7QzRqt2qgqJ+8goNpBWli/oUEIj8iC8LpptpAkBV\nFFlMfaaph8j+ZWtBHnGMGRSZe3S9qMi2WZerUYHn4tmfjEi+Gk5QT6o2Pyd3gOiB\nV0Uhwemfv/+7m65VybTBAkEA5H59kG+B9HHD5hJtksAtMh8dxk/MI8G0csduU0vu\n7K5ejL522XsHurVrWdqnk6KvjlRXqB4FsMWLE6RBgBNV0A==\n-----END RSA PRIVATE KEY-----'
>>> public.exportKey()
'-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDo1M0P3nryaF8ZITv8vCFVnjUJ\n1mnIsrqXZRTzjin69xepr3czKicG3EYSUqMODQAsvMj0tGMo+ElGOVOkPFLVVBHd\n8izgA/E1RqUzbUDMj4WnhlhAQq7tNaViOXNaZ7krJZHabZKxfYvLAQtm4tr+m5Nt\nXPBaWvjwhd5M9xvktwIDAQAB\n-----END PUBLIC KEY-----'

","23223","<python><rsa><pycrypto>","17","41","1","2013-07-18 19:21:56","3506652","0","7","","user212218","2013-07-18 19:21:56","2010-08-17 16:58:39",""
"23848849","How to use encrypted RSA private key with PyCrypto?","I am generating a key with OpenSSL, providing the password from stdin:
openssl genpkey -algorithm RSA -out private-key.pem -outform PEM -pass stdin -des3 -pkeyopt rsa_keygen_bits:4096

The key then looks like:
-----BEGIN ENCRYPTED PRIVATE KEY-----
XXX...
-----END ENCRYPTED PRIVATE KEY-----

My Python code looks like:
from Crypto.PublicKey import RSA
# ...
f = open('private-key.pem', 'r')
r = RSA.importKey(f.read(),  passphrase='some-pass')
f.close()

but I am getting an exception:
  File ""/usr/lib/python2.7/dist-packages/Crypto/PublicKey/RSA.py"", line 665, in importKey
    return self._importKeyDER(der)
  File ""/usr/lib/python2.7/dist-packages/Crypto/PublicKey/RSA.py"", line 588, in _importKeyDER
    raise ValueError(""RSA key format is not supported"")
ValueError: RSA key format is not supported

What's wrong?
Is it possible to generate an encrypted RSA key, store it in a file and later use it with PyCrypto? Is it possible to do it with OpenSSL? What formats are supported?
Importing the public key works fine, however it is not encrypted.
","Hypothesis #1
After looking to the source code, I think, I solved the mystery. The way how import works for PEM keys encrypted with a password is that the PEM gets decrypted to DER and after that importKeyDER function is called. If provided password is not correct, the format of generated DER representation will not be correct too and you would get an exception that you've provided. To confirm that, I ran two quick tests below:
>>> from Crypto.PublicKey import RSA
>>> f = open('<some-path>/private-key.pem','r')
>>> r=RSA.importKey(f.read(),passphrase='foo')
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
  File ""/usr/local/lib/python2.7/dist-packages/Crypto/PublicKey/RSA.py"", line 665, in importKey
    return self._importKeyDER(der)
  File ""/usr/local/lib/python2.7/dist-packages/Crypto/PublicKey/RSA.py"", line 588, in    _importKeyDER
    raise ValueError(""RSA key format is not supported"")
ValueError: RSA key format is not supported
>>> f = open('<some-path>/private-key.pem','r')
>>> r=RSA.importKey(f.read(),passphrase='<valid-pass-phrase>')
>>> r
<_RSAobj @0xb7237b2c n(4096),e,d,p,q,u,private>

After receiving the PEM from the author, I've realized that Hypothesis #1 is not valid for his case. I still want to keep it here as one possible reason of import failure, so other users are aware.
Hypothesis #2 - this is the author's case.
RSA.py looks for the following in PEM file to determine what kind of encryption was applied to PEM:
 Proc-Type: 4,ENCRYPTED

When key is generated using ""openssl genrsa ..."" command, this string is present in PEM in clear, however when ""opensl genpkey ..."" is used the ""Proc-Type"" is not present.
RSA.py doesn't even try to decrypt the PEM if the ""Proc-Type"" is not found:
  # The encrypted PEM format
  if lines[1].startswith(b('Proc-Type:4,ENCRYPTED')):
     DEK = lines[2].split(b(':'))
     ....

So, my conclusion at this time is that keys generated by ""openssl genpkey"" are not supported by PyCrypto v 2.6.1.
Important Update
It does work in PyCrypto's latest version 2.7a1. You can download it from here: http://ftp.dlitz.net/pub/dlitz/crypto/pycrypto/pycrypto-2.7a1.tar.gz
>>> f = open('key.pem','r')
>>> r = RSA.importKey(f.read(),  passphrase='123456')
>>> r
<_RSAobj @0xb6f342ec n(2048),e,d,p,q,u,private>

","20719","<python><encryption><rsa><private-key><pycrypto>","6","4","2","2017-02-13 08:07:33","23849441","1","2","","","","2014-05-24 19:27:41",""
"23848849","How to use encrypted RSA private key with PyCrypto?","I am generating a key with OpenSSL, providing the password from stdin:
openssl genpkey -algorithm RSA -out private-key.pem -outform PEM -pass stdin -des3 -pkeyopt rsa_keygen_bits:4096

The key then looks like:
-----BEGIN ENCRYPTED PRIVATE KEY-----
XXX...
-----END ENCRYPTED PRIVATE KEY-----

My Python code looks like:
from Crypto.PublicKey import RSA
# ...
f = open('private-key.pem', 'r')
r = RSA.importKey(f.read(),  passphrase='some-pass')
f.close()

but I am getting an exception:
  File ""/usr/lib/python2.7/dist-packages/Crypto/PublicKey/RSA.py"", line 665, in importKey
    return self._importKeyDER(der)
  File ""/usr/lib/python2.7/dist-packages/Crypto/PublicKey/RSA.py"", line 588, in _importKeyDER
    raise ValueError(""RSA key format is not supported"")
ValueError: RSA key format is not supported

What's wrong?
Is it possible to generate an encrypted RSA key, store it in a file and later use it with PyCrypto? Is it possible to do it with OpenSSL? What formats are supported?
Importing the public key works fine, however it is not encrypted.
","A quick update for those who seek to solve this problem without installing an experimental release of long-abandoned PyCrypto. The library can be safely replaced by pycryptodome (https://github.com/Legrandin/pycryptodome) - it can provide both a drop-in replacement for pycrypto, and it can be used as an alternative library as well (pycryptodomex).
","20719","<python><encryption><rsa><private-key><pycrypto>","6","2","2","2017-02-13 08:07:33","23849441","1","2","","","","2014-05-24 19:27:41",""
"24804829","No module named 'winrandom' when using pycrypto","I already spent 2 days trying to install pyCrypto for Paramiko module.
So, first issue I had faced was this:
>>> import paramiko
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
  File ""C:\Program Files\Python\lib\site-packages\paramiko\__init__.py"", line 31
, in <module>
    from paramiko.transport import SecurityOptions, Transport
  File ""C:\Program Files\Python\lib\site-packages\paramiko\transport.py"", line 4
7, in <module>
    from paramiko.dsskey import DSSKey
  File ""C:\Program Files\Python\lib\site-packages\paramiko\dsskey.py"", line 26,
in <module>
    from Crypto.PublicKey import DSA
ImportError: No module named 'Crypto'

It is very fun actually because I use Windows and it doesn't care about uppercase. I changed a folder name from crypto to Crypto and this particular issue disappeared.
Now it wants winrandom:
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
  File ""C:\Program Files\Python\lib\site-packages\paramiko\__init__.py"", line 31
, in <module>
    from paramiko.transport import SecurityOptions, Transport
  File ""C:\Program Files\Python\lib\site-packages\paramiko\transport.py"", line 4
7, in <module>
    from paramiko.dsskey import DSSKey
  File ""C:\Program Files\Python\lib\site-packages\paramiko\dsskey.py"", line 26,
in <module>
    from Crypto.PublicKey import DSA
  File ""C:\Program Files\Python\lib\site-packages\Crypto\PublicKey\DSA.py"", line
 89, in <module>
    from Crypto import Random
  File ""C:\Program Files\Python\lib\site-packages\Crypto\Random\__init__.py"", li
ne 28, in <module>
    from Crypto.Random import OSRNG
  File ""C:\Program Files\Python\lib\site-packages\Crypto\Random\OSRNG\__init__.p
y"", line 34, in <module>
    from Crypto.Random.OSRNG.nt import new
  File ""C:\Program Files\Python\lib\site-packages\Crypto\Random\OSRNG\nt.py"", li
ne 28, in <module>
    import winrandom
ImportError: No module named 'winrandom'

When I try to install it through PIP I fail with:
Cannot export PyInit_winrandom: symbol not defined

build\temp.win32-3.4\Release\src\winrandom.o:winrandom.c:(.text+0x12): undefined
 reference to `Py_InitModule'

collect2: ld returned 1 exit status

error: command 'c:\\mingw\\bin\\gcc.exe' failed with exit status 1

Seems like it doesn't support Python3.4.
Is there any way to make it all works in Win7 x86 with Python3.4 installed?
Installed modules:
crypto (1.1.0)
ecdsa (0.11)
Fabric (1.9.0)
paramiko (1.14.0)
pip (1.5.6)
pyasn1 (0.1.7)
pycrypto (2.6.1)
PyYAML (3.11)
rsa (3.1.4)
setuptools (2.1)

Python version 3.4.1
","Problem is solved by editing string in crypto\Random\OSRNG\nt.py:
import winrandom

to
from . import winrandom

","19787","<python><windows><paramiko><pycrypto>","24","61","2","2018-04-28 09:05:23","24822876","5","9","474189","","2017-06-22 11:08:32","2014-07-17 13:24:27",""
"24804829","No module named 'winrandom' when using pycrypto","I already spent 2 days trying to install pyCrypto for Paramiko module.
So, first issue I had faced was this:
>>> import paramiko
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
  File ""C:\Program Files\Python\lib\site-packages\paramiko\__init__.py"", line 31
, in <module>
    from paramiko.transport import SecurityOptions, Transport
  File ""C:\Program Files\Python\lib\site-packages\paramiko\transport.py"", line 4
7, in <module>
    from paramiko.dsskey import DSSKey
  File ""C:\Program Files\Python\lib\site-packages\paramiko\dsskey.py"", line 26,
in <module>
    from Crypto.PublicKey import DSA
ImportError: No module named 'Crypto'

It is very fun actually because I use Windows and it doesn't care about uppercase. I changed a folder name from crypto to Crypto and this particular issue disappeared.
Now it wants winrandom:
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
  File ""C:\Program Files\Python\lib\site-packages\paramiko\__init__.py"", line 31
, in <module>
    from paramiko.transport import SecurityOptions, Transport
  File ""C:\Program Files\Python\lib\site-packages\paramiko\transport.py"", line 4
7, in <module>
    from paramiko.dsskey import DSSKey
  File ""C:\Program Files\Python\lib\site-packages\paramiko\dsskey.py"", line 26,
in <module>
    from Crypto.PublicKey import DSA
  File ""C:\Program Files\Python\lib\site-packages\Crypto\PublicKey\DSA.py"", line
 89, in <module>
    from Crypto import Random
  File ""C:\Program Files\Python\lib\site-packages\Crypto\Random\__init__.py"", li
ne 28, in <module>
    from Crypto.Random import OSRNG
  File ""C:\Program Files\Python\lib\site-packages\Crypto\Random\OSRNG\__init__.p
y"", line 34, in <module>
    from Crypto.Random.OSRNG.nt import new
  File ""C:\Program Files\Python\lib\site-packages\Crypto\Random\OSRNG\nt.py"", li
ne 28, in <module>
    import winrandom
ImportError: No module named 'winrandom'

When I try to install it through PIP I fail with:
Cannot export PyInit_winrandom: symbol not defined

build\temp.win32-3.4\Release\src\winrandom.o:winrandom.c:(.text+0x12): undefined
 reference to `Py_InitModule'

collect2: ld returned 1 exit status

error: command 'c:\\mingw\\bin\\gcc.exe' failed with exit status 1

Seems like it doesn't support Python3.4.
Is there any way to make it all works in Win7 x86 with Python3.4 installed?
Installed modules:
crypto (1.1.0)
ecdsa (0.11)
Fabric (1.9.0)
paramiko (1.14.0)
pip (1.5.6)
pyasn1 (0.1.7)
pycrypto (2.6.1)
PyYAML (3.11)
rsa (3.1.4)
setuptools (2.1)

Python version 3.4.1
","Super easy fix for ImportError: No module named 'winrandom' - this is where python is located on my Windows 10 system:
C:\Users\Charles\AppData\Local\Programs\Python\Python35
But you have to go further to find the right file to update, so go here:
C:\Users\Charles\AppData\Local\Programs\Python\Python35\Lib\site-packages\Crypto\Random\OSRNG\nt.py
Open the nt.py in any text editor and change just the line near the top:
import winrandom

should be:
from . import winrandom

Save the file - re-run what you were originally trying to run and you should be good.  Hope this helps someone! 
","19787","<python><windows><paramiko><pycrypto>","24","13","2","2018-04-28 09:05:23","24822876","5","9","474189","","2017-06-22 11:08:32","2014-07-17 13:24:27",""
"9197507","Saving RSA keys to a file, using pycrypto","I’m using PyCrypto 2.3 and I would like to save the keys I have generated into a file, so as to distribute them to the client and server. I can’t seem to find a way to print the keys correctly, neither can I find examples on the internet.
    def resetKeys(self):
        keys = RSA.generate(1024)

        privHandle = open(self.privateKeyFile, 'wb')
        privHandle.write(keys.privatekey())
        privHandle.close()

        pubHandle = open(self.publicKeyFile, 'wb')
        pubHandle.write(keys.publickey())
        pubHandle.close()

This codes does not work for many reasons: first, keys.publickey() doesn’t seem to be printable, it returns: 
    <_RSAobj @0x10f810d0 n(1024),e>

and second, keys has no function named privatekey. 
Has anyone done that before?
","keys.exportKey() for the private key, keys.publickey().exportKey() for the public key. You can change the output format with format argument, see the docs at this site.
","19327","<python><pycrypto>","15","31","2","2018-02-12 20:31:13","9197929","0","3","","","","2012-02-08 16:33:45",""
"9197507","Saving RSA keys to a file, using pycrypto","I’m using PyCrypto 2.3 and I would like to save the keys I have generated into a file, so as to distribute them to the client and server. I can’t seem to find a way to print the keys correctly, neither can I find examples on the internet.
    def resetKeys(self):
        keys = RSA.generate(1024)

        privHandle = open(self.privateKeyFile, 'wb')
        privHandle.write(keys.privatekey())
        privHandle.close()

        pubHandle = open(self.publicKeyFile, 'wb')
        pubHandle.write(keys.publickey())
        pubHandle.close()

This codes does not work for many reasons: first, keys.publickey() doesn’t seem to be printable, it returns: 
    <_RSAobj @0x10f810d0 n(1024),e>

and second, keys has no function named privatekey. 
Has anyone done that before?
","The following piece of code will create the RSA key pair and store them in PEM files as well as print them.
Original credits : wRAR from this post & AJ poultier from [pyOpenSSL creating a pem file
from Crypto.PublicKey import RSA
private_key = RSA.generate(1024)
public_key = private_key.publickey()
print(private_key.exportKey(format='PEM'))
print(public_key.exportKey(format='PEM'))

with open (""private.pem"", ""w"") as prv_file:
    print(""{}"".format(private_key.exportKey()), file=prv_file)

with open (""public.pem"", ""w"") as pub_file:
    print(""{}"".format(public_key.exportKey()), file=pub_file)

","19327","<python><pycrypto>","15","3","2","2018-02-12 20:31:13","9197929","0","3","","","","2012-02-08 16:33:45",""
"3920502","How to suppress a third-party warning using warnings.filterwarnings","I am using Paramiko in my python code (for sftp). Everything works fine except that everytime I import or call a paramiko function. This warning would show up:
C:\Python26\lib\site-packages\Crypto\Util\randpool.py:40: RandomPool_Deprecation
Warning: This application uses RandomPool, which is BROKEN in older releases.  S
ee http://www.pycrypto.org/randpool-broken
  RandomPool_DeprecationWarning)

I know that this has to do with the fact that Paramiko is using some Deprecated functionalities of PyCrypto. 
My question is, is there a way to suppress this warning programmatically ?
I have tried this:
warnings.filterwarnings(action='ignore', \
category=DeprecationWarning, module='paramiko')

and even this:
warnings.filterwarnings(action='ignore', \
category=DeprecationWarning, module='randpool')

before 'import paramiko' statement and before paramiko-specific function calls, but nothing works. This warning keeps showing up no matter what.
If it helps, here's the code in the third party library that prints the warning:
in randpool.py:
from Crypto.pct_warnings import RandomPool_DeprecationWarning
import Crypto.Random
import warnings

class RandomPool:
    """"""Deprecated.  Use Random.new() instead.

    See http://www.pycrypto.org/randpool-broken
    """"""
    def __init__(self, numbytes = 160, cipher=None, hash=None, file=None):
        warnings.warn(""This application uses RandomPool, which is BROKEN in older releases.  See http://www.pycrypto.org/randpool-broken"",
            RandomPool_DeprecationWarning)

If you know a way around this, please help me shut this warning off.
","Easiest way would be as the warnings module suggests here:
with warnings.catch_warnings():
    warnings.simplefilter(""ignore"")
    import paramiko

","18256","<python><suppress-warnings><paramiko><pycrypto>","33","36","3","2018-12-10 13:40:36","","0","5","","user212218","2013-08-31 18:22:36","2010-10-13 03:08:02",""
"3920502","How to suppress a third-party warning using warnings.filterwarnings","I am using Paramiko in my python code (for sftp). Everything works fine except that everytime I import or call a paramiko function. This warning would show up:
C:\Python26\lib\site-packages\Crypto\Util\randpool.py:40: RandomPool_Deprecation
Warning: This application uses RandomPool, which is BROKEN in older releases.  S
ee http://www.pycrypto.org/randpool-broken
  RandomPool_DeprecationWarning)

I know that this has to do with the fact that Paramiko is using some Deprecated functionalities of PyCrypto. 
My question is, is there a way to suppress this warning programmatically ?
I have tried this:
warnings.filterwarnings(action='ignore', \
category=DeprecationWarning, module='paramiko')

and even this:
warnings.filterwarnings(action='ignore', \
category=DeprecationWarning, module='randpool')

before 'import paramiko' statement and before paramiko-specific function calls, but nothing works. This warning keeps showing up no matter what.
If it helps, here's the code in the third party library that prints the warning:
in randpool.py:
from Crypto.pct_warnings import RandomPool_DeprecationWarning
import Crypto.Random
import warnings

class RandomPool:
    """"""Deprecated.  Use Random.new() instead.

    See http://www.pycrypto.org/randpool-broken
    """"""
    def __init__(self, numbytes = 160, cipher=None, hash=None, file=None):
        warnings.warn(""This application uses RandomPool, which is BROKEN in older releases.  See http://www.pycrypto.org/randpool-broken"",
            RandomPool_DeprecationWarning)

If you know a way around this, please help me shut this warning off.
","To filter only a specific warning:
with warnings.catch_warnings():
    warnings.simplefilter('ignore', SpecificWarningObject)

    #do something that raises a Warning

","18256","<python><suppress-warnings><paramiko><pycrypto>","33","8","3","2018-12-10 13:40:36","","0","5","","user212218","2013-08-31 18:22:36","2010-10-13 03:08:02",""
"3920502","How to suppress a third-party warning using warnings.filterwarnings","I am using Paramiko in my python code (for sftp). Everything works fine except that everytime I import or call a paramiko function. This warning would show up:
C:\Python26\lib\site-packages\Crypto\Util\randpool.py:40: RandomPool_Deprecation
Warning: This application uses RandomPool, which is BROKEN in older releases.  S
ee http://www.pycrypto.org/randpool-broken
  RandomPool_DeprecationWarning)

I know that this has to do with the fact that Paramiko is using some Deprecated functionalities of PyCrypto. 
My question is, is there a way to suppress this warning programmatically ?
I have tried this:
warnings.filterwarnings(action='ignore', \
category=DeprecationWarning, module='paramiko')

and even this:
warnings.filterwarnings(action='ignore', \
category=DeprecationWarning, module='randpool')

before 'import paramiko' statement and before paramiko-specific function calls, but nothing works. This warning keeps showing up no matter what.
If it helps, here's the code in the third party library that prints the warning:
in randpool.py:
from Crypto.pct_warnings import RandomPool_DeprecationWarning
import Crypto.Random
import warnings

class RandomPool:
    """"""Deprecated.  Use Random.new() instead.

    See http://www.pycrypto.org/randpool-broken
    """"""
    def __init__(self, numbytes = 160, cipher=None, hash=None, file=None):
        warnings.warn(""This application uses RandomPool, which is BROKEN in older releases.  See http://www.pycrypto.org/randpool-broken"",
            RandomPool_DeprecationWarning)

If you know a way around this, please help me shut this warning off.
","The module argument to warnings.filterwarnings takes a case-sensitive regular expression which should match the fully qualified module name, so 
warnings.filterwarnings(
    action='ignore',
    category=DeprecationWarning,
    module=r'.*randpool'
)

or
warnings.filterwarnings(
    action='ignore',
    category=DeprecationWarning,
    module=r'Crypto\.Utils\.randpool'
)

should work. You may need to write RandomPool_DeprecationWarning explicitly instead of DeprecationWarning if for some reason RandomPool_DeprecationWarning is not a subclass of DeprecationWarning.
You can also disable the warning on the command line when you invoke the script by passing the -W option to the interpreter like so:
$ python -W ignore::RandomPool_DeprecationWarning:Crypto.Utils.randpool: my_script.py

The -W takes filters in the format action:message:category:module:lineno, where this time module must exactly match the (fully-qualified) module name where the warning is raised.
See https://docs.python.org/2/library/warnings.html?highlight=warnings#the-warnings-filter and https://docs.python.org/2/using/cmdline.html#cmdoption-w
","18256","<python><suppress-warnings><paramiko><pycrypto>","33","4","3","2018-12-10 13:40:36","","0","5","","user212218","2013-08-31 18:22:36","2010-10-13 03:08:02",""
"9849257","How to set CFLAGS and LDFLAGS to compile pycrypto","I am trying to install the fabric library to an old machine. There are some legacy libraries in /usr/lib, such as libgmp.
(py27)[qrtt1@hcservice app]$ ls /usr/lib|grep gmp
libgmp.a
libgmp.so
libgmp.so.3
libgmp.so.3.3.3
libgmpxx.a
libgmpxx.so
libgmpxx.so.3
libgmpxx.so.3.0.5

I have compiled the libgmp 5.x in my $HOME/app, and then am trying to install pycrypto (it is the dependency of fab):
CFLGAS=-I/home/qrtt1/app/include LDFLGAS=-L/home/qrtt1/app/lib  pip install pycrypto

I observed that none of my include or lib directories are in the in the compilation / linking options:
gcc -pthread -fno-strict-aliasing -fwrapv -Wall -Wstrict-prototypes -fPIC -std=c99 -O3 -fomit-frame-pointer -Isrc/ -I/usr/include/ -I/home/qrtt1/app/include/python2.7 -c src/_fastmath.c -o build/temp.linux-i686-2.7/src/_fastmath.o
gcc -pthread -shared build/temp.linux-i686-2.7/src/_fastmath.o -lgmp -o build/lib.linux-i686-2.7/Crypto/PublicKey/_fastmath.so
building 'Crypto.Hash._MD2' extension
gcc -pthread -fno-strict-aliasing -fwrapv -Wall -Wstrict-prototypes -fPIC -std=c99 -O3 -fomit-frame-pointer -Isrc/ -I/home/qrtt1/app/include/python2.7 -c src/MD2.c -o build/temp.linux-i686-2.7/src/MD2.o
gcc -pthread -shared build/temp.linux-i686-2.7/src/MD2.o -o build/lib.linux-i686-2.7/Crypto/Hash/_MD2.so
building 'Crypto.Hash._MD4' extension
gcc -pthread -fno-strict-aliasing -fwrapv -Wall -Wstrict-prototypes -fPIC -std=c99 -O3 -fomit-frame-pointer -Isrc/ -I/home/qrtt1/app/include/python2.7 -c src/MD4.c -o build/temp.linux-i686-2.7/src/MD4.o
gcc -pthread -shared build/temp.linux-i686-2.7/src/MD4.o -o build/lib.linux-i686-2.

How do I assign the CFLAGS and LDFLAGS correctly for building pycrypto ?

I try to download pycrypto-2.5 and install it:
(py27)[qrtt1@hcservice pycrypto-2.5]$ CFLGAS=-I/home/qrtt1/app/include LDFLGAS=-L/home/qrtt1/app/lib python setup.py install

No CFLAGS or LDFLAGS set up with it. May be the pycrypto-2.5 going wrong ?
","Please check what you have typed :
CFLAGS=-I/home/qrtt1/app/include LDFLAGS=-L/home/qrtt1/app/lib  pip install pycrypto

it should be CFLAGS 
","17625","<python><build><pip><fabric><pycrypto>","20","24","1","2017-10-17 12:17:55","13198741","1","","90909","","2012-03-24 06:52:46","2012-03-24 04:55:37",""
"8647828","PyCrypto install by copying 'lib' folder on Windows7 64bit","I'm trying to install PyCrypto 2.4.1 on my local machine (Windows 7 64bit).
But, I got following messages on 'python setup.py install'.

running install 
running build 
running build_py 
running build_ext 
warning: GMP or MPIR library not found; Not building Crypto.PublicKey._fastmath.
building 'Crypto.Random.OSRNG.winrandom' extension 
error: Unable to find vcvarsall.bat

What I want to ask is this: can I just copy lib folder which contains Crypto folder in it to where my app is located? I'm developing a Google AppEngine app using Python27 runtime, and, I just need local library for PyCrypto.
","Did a bit of research for you, and here's the bug that was filed for the SDK:
http://code.google.com/p/googleappengine/issues/detail?id=2493
Summary of the issue:
GAE has a customized version of PyCrypto 2.0.1 installed. Docs can be found here.
SDK does not include the PyCrypto implementation from GAE, so it needs to be installed locally. However, the default path for installation is blocked by the SDK. Solution recommended in the bug comments is to install PyCrypto in each app's directory. Steps are outlined in the bug comments (not trivial).
Hope this helps!
EDIT: This one could be helpful as well: http://code.google.com/p/googleappengine/issues/detail?id=1627
","17350","<python><google-app-engine><pycrypto>","1","2","4","2015-03-21 23:08:01","8679163","0","1","","","","2011-12-27 18:14:36",""
"8647828","PyCrypto install by copying 'lib' folder on Windows7 64bit","I'm trying to install PyCrypto 2.4.1 on my local machine (Windows 7 64bit).
But, I got following messages on 'python setup.py install'.

running install 
running build 
running build_py 
running build_ext 
warning: GMP or MPIR library not found; Not building Crypto.PublicKey._fastmath.
building 'Crypto.Random.OSRNG.winrandom' extension 
error: Unable to find vcvarsall.bat

What I want to ask is this: can I just copy lib folder which contains Crypto folder in it to where my app is located? I'm developing a Google AppEngine app using Python27 runtime, and, I just need local library for PyCrypto.
","Actually, I just needed some compiled version of PyCrypto for Windows 64bit.

PyCrypto version: 2.3.1 
Python version: 2.7.1 
Target platform: Windows 64bit

And, I could get one from here. And, this is a direct download link.
Thanks, everyone!
","17350","<python><google-app-engine><pycrypto>","1","5","4","2015-03-21 23:08:01","8679163","0","1","","","","2011-12-27 18:14:36",""
"8647828","PyCrypto install by copying 'lib' folder on Windows7 64bit","I'm trying to install PyCrypto 2.4.1 on my local machine (Windows 7 64bit).
But, I got following messages on 'python setup.py install'.

running install 
running build 
running build_py 
running build_ext 
warning: GMP or MPIR library not found; Not building Crypto.PublicKey._fastmath.
building 'Crypto.Random.OSRNG.winrandom' extension 
error: Unable to find vcvarsall.bat

What I want to ask is this: can I just copy lib folder which contains Crypto folder in it to where my app is located? I'm developing a Google AppEngine app using Python27 runtime, and, I just need local library for PyCrypto.
","Alternatively, simply download and install ActivePython-2.7.2.5-win64-x64.msi (or ActivePython-2.7.2.5-win32-x86.msi for Win32) then run pypm install pycrypto
","17350","<python><google-app-engine><pycrypto>","1","-3","4","2015-03-21 23:08:01","8679163","0","1","","","","2011-12-27 18:14:36",""
"8647828","PyCrypto install by copying 'lib' folder on Windows7 64bit","I'm trying to install PyCrypto 2.4.1 on my local machine (Windows 7 64bit).
But, I got following messages on 'python setup.py install'.

running install 
running build 
running build_py 
running build_ext 
warning: GMP or MPIR library not found; Not building Crypto.PublicKey._fastmath.
building 'Crypto.Random.OSRNG.winrandom' extension 
error: Unable to find vcvarsall.bat

What I want to ask is this: can I just copy lib folder which contains Crypto folder in it to where my app is located? I'm developing a Google AppEngine app using Python27 runtime, and, I just need local library for PyCrypto.
","You don't need to do any of this, just install from the PyCrypto binaries
","17350","<python><google-app-engine><pycrypto>","1","2","4","2015-03-21 23:08:01","8679163","0","1","","","","2011-12-27 18:14:36",""
"15375171","Pycrypto install fatal error: gmp.h file not found","It seems like there are a number of people who have had a similar problem, however, after much searching I haven't been able to find a solution that works with my particular architecture.  I'm trying to install Pycrypto (as a subsidiary of Fabric) to no avail.  
I'm running Mac 10.8.2, python 2.7.3 via Homebrew, and XCode 4.6 -- installing with pip or easy_install (I've tried both).  From what I can tell, the problem could either be with respect to my version of XCode or because of my libraries.  The Command Line Tools for XCode have been installed and I have tried placing setenv ARCHFLAGS ""-arch i386 -arch x86_64"" in my .cshrc file.  I have also tried ln -s /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer /Developer.  As for the libraries, I've tried linking them via ln -s /usr/local/lib/libgmp.dylib /usr/lib/libgmp.dylib - but that also didn't work.  
The error is always the same (see below) no matter what angle I attempt.  Any and all help would be appreciated.
/usr/local/share/python% pip install pycrypto
Downloading/unpacking pycrypto
  Running setup.py egg_info for package pycrypto

Installing collected packages: pycrypto
  Running setup.py install for pycrypto
    building 'Crypto.PublicKey._fastmath' extension
    /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang -fno-strict-aliasing -fno-common -dynamic -arch i386 -arch x86_64 -pipe -mmacosx-version-min=10.8 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.8.sdk -Wno-unused-value -Wno-empty-body -Qunused-arguments -fwrapv -Wall -Wstrict-prototypes -std=c99 -O3 -fomit-frame-pointer -Isrc/ -I/usr/include/ -I/usr/local/Cellar/python/2.7.3/Frameworks/Python.framework/Versions/2.7/include/python2.7 -c src/_fastmath.c -o build/temp.macosx-10.8-intel-2.7/src/_fastmath.o
src/_fastmath.c:36:11: fatal error: 'gmp.h' file not found
# include <gmp.h>
          ^
1 error generated.
error: command '/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang' failed with exit status 1
Complete output from command /usr/local/Cellar/python/2.7.3/Frameworks/Python.framework/Versions/2.7/Resources/Python.app/Contents/MacOS/Python -c ""import setuptools;__file__='/var/folders/ym/v8l23q_x2xz_qhx3m84n6ym00005fr/T/pip-build/pycrypto/setup.py';exec(compile(open(__file__).read().replace('\r\n', '\n'), __file__, 'exec'))"" install --record /var/folders/ym/v8l23q_x2xz_qhx3m84n6ym00005fr/T/pip-Xb7nGV-record/install-record.txt --single-version-externally-managed:
running install

running build

running build_py

running build_ext

running build_configure

building 'Crypto.PublicKey._fastmath' extension

/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang -fno-strict-aliasing -fno-common -dynamic -arch i386 -arch x86_64 -pipe -mmacosx-version-min=10.8 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.8.sdk -Wno-unused-value -Wno-empty-body -Qunused-arguments -fwrapv -Wall -Wstrict-prototypes -std=c99 -O3 -fomit-frame-pointer -Isrc/ -I/usr/include/ -I/usr/local/Cellar/python/2.7.3/Frameworks/Python.framework/Versions/2.7/include/python2.7 -c src/_fastmath.c -o build/temp.macosx-10.8-intel-2.7/src/_fastmath.o

src/_fastmath.c:36:11: fatal error: 'gmp.h' file not found

# include <gmp.h>

      ^

1 error generated.

error: command '/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain    /usr/bin/clang' failed with exit status 1

----------------------------------------
Command /usr/local/Cellar/python/2.7.3/Frameworks/Python.framework/Versions/2.7/Resources/Python.app/Contents/MacOS/Python -c ""import setuptools;__file__='/var/folders/ym/v8l23q_x2xz_qhx3m84n6ym00005fr/T/pip-build/pycrypto/setup.py';exec(compile(open(__file__).read().replace('\r\n', '\n'), __file__, 'exec'))"" install --record /var/folders/ym/v8l23q_x2xz_qhx3m84n6ym00005fr/T/pip-Xb7nGV-record/install-record.txt --single-version-externally-managed failed with error code 1 in /var/folders/ym/v8l23q_x2xz_qhx3m84n6ym00005fr/T/pip-build/pycrypto
Storing complete log in /Users/me/.pip/pip.log

The error when I try to call Fabric:
Traceback (most recent call last):
  File ""/usr/local/share/python/fab"", line 5, in <module>
from pkg_resources import load_entry_point
  File ""/usr/local/Cellar/python/2.7.3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py"", line 2815, in <module>
working_set.require(__requires__)
  File ""/usr/local/Cellar/python/2.7.3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py"", line 690, in require
needed = self.resolve(parse_requirements(requirements))
  File ""/usr/local/Cellar/python/2.7.3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py"", line 588, in resolve
raise DistributionNotFound(req)
pkg_resources.DistributionNotFound: pycrypto>=2.1,!=2.4

","Simply linking gmppylib is not helpful because pycrpto needs to compile some C files which will include gmp.h.  You should have the GMP library installed which will contain gmp.h. It seems you have to install GMP on your Mac OS. The following two links should be helpful to you.

Installation of gmp and mpfr on Mac OS X
Installing GMP on MacOS X with Xcode

","16281","<python><osx-mountain-lion><gmp><pycrypto>","35","2","5","2019-05-16 16:21:27","15561485","1","10","","","","2013-03-13 00:59:50",""
"15375171","Pycrypto install fatal error: gmp.h file not found","It seems like there are a number of people who have had a similar problem, however, after much searching I haven't been able to find a solution that works with my particular architecture.  I'm trying to install Pycrypto (as a subsidiary of Fabric) to no avail.  
I'm running Mac 10.8.2, python 2.7.3 via Homebrew, and XCode 4.6 -- installing with pip or easy_install (I've tried both).  From what I can tell, the problem could either be with respect to my version of XCode or because of my libraries.  The Command Line Tools for XCode have been installed and I have tried placing setenv ARCHFLAGS ""-arch i386 -arch x86_64"" in my .cshrc file.  I have also tried ln -s /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer /Developer.  As for the libraries, I've tried linking them via ln -s /usr/local/lib/libgmp.dylib /usr/lib/libgmp.dylib - but that also didn't work.  
The error is always the same (see below) no matter what angle I attempt.  Any and all help would be appreciated.
/usr/local/share/python% pip install pycrypto
Downloading/unpacking pycrypto
  Running setup.py egg_info for package pycrypto

Installing collected packages: pycrypto
  Running setup.py install for pycrypto
    building 'Crypto.PublicKey._fastmath' extension
    /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang -fno-strict-aliasing -fno-common -dynamic -arch i386 -arch x86_64 -pipe -mmacosx-version-min=10.8 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.8.sdk -Wno-unused-value -Wno-empty-body -Qunused-arguments -fwrapv -Wall -Wstrict-prototypes -std=c99 -O3 -fomit-frame-pointer -Isrc/ -I/usr/include/ -I/usr/local/Cellar/python/2.7.3/Frameworks/Python.framework/Versions/2.7/include/python2.7 -c src/_fastmath.c -o build/temp.macosx-10.8-intel-2.7/src/_fastmath.o
src/_fastmath.c:36:11: fatal error: 'gmp.h' file not found
# include <gmp.h>
          ^
1 error generated.
error: command '/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang' failed with exit status 1
Complete output from command /usr/local/Cellar/python/2.7.3/Frameworks/Python.framework/Versions/2.7/Resources/Python.app/Contents/MacOS/Python -c ""import setuptools;__file__='/var/folders/ym/v8l23q_x2xz_qhx3m84n6ym00005fr/T/pip-build/pycrypto/setup.py';exec(compile(open(__file__).read().replace('\r\n', '\n'), __file__, 'exec'))"" install --record /var/folders/ym/v8l23q_x2xz_qhx3m84n6ym00005fr/T/pip-Xb7nGV-record/install-record.txt --single-version-externally-managed:
running install

running build

running build_py

running build_ext

running build_configure

building 'Crypto.PublicKey._fastmath' extension

/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang -fno-strict-aliasing -fno-common -dynamic -arch i386 -arch x86_64 -pipe -mmacosx-version-min=10.8 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.8.sdk -Wno-unused-value -Wno-empty-body -Qunused-arguments -fwrapv -Wall -Wstrict-prototypes -std=c99 -O3 -fomit-frame-pointer -Isrc/ -I/usr/include/ -I/usr/local/Cellar/python/2.7.3/Frameworks/Python.framework/Versions/2.7/include/python2.7 -c src/_fastmath.c -o build/temp.macosx-10.8-intel-2.7/src/_fastmath.o

src/_fastmath.c:36:11: fatal error: 'gmp.h' file not found

# include <gmp.h>

      ^

1 error generated.

error: command '/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain    /usr/bin/clang' failed with exit status 1

----------------------------------------
Command /usr/local/Cellar/python/2.7.3/Frameworks/Python.framework/Versions/2.7/Resources/Python.app/Contents/MacOS/Python -c ""import setuptools;__file__='/var/folders/ym/v8l23q_x2xz_qhx3m84n6ym00005fr/T/pip-build/pycrypto/setup.py';exec(compile(open(__file__).read().replace('\r\n', '\n'), __file__, 'exec'))"" install --record /var/folders/ym/v8l23q_x2xz_qhx3m84n6ym00005fr/T/pip-Xb7nGV-record/install-record.txt --single-version-externally-managed failed with error code 1 in /var/folders/ym/v8l23q_x2xz_qhx3m84n6ym00005fr/T/pip-build/pycrypto
Storing complete log in /Users/me/.pip/pip.log

The error when I try to call Fabric:
Traceback (most recent call last):
  File ""/usr/local/share/python/fab"", line 5, in <module>
from pkg_resources import load_entry_point
  File ""/usr/local/Cellar/python/2.7.3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py"", line 2815, in <module>
working_set.require(__requires__)
  File ""/usr/local/Cellar/python/2.7.3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py"", line 690, in require
needed = self.resolve(parse_requirements(requirements))
  File ""/usr/local/Cellar/python/2.7.3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py"", line 588, in resolve
raise DistributionNotFound(req)
pkg_resources.DistributionNotFound: pycrypto>=2.1,!=2.4

","I finally realized that the root of my problem was in an incompatibility between the versions of Fabric and Pycrypto.  Once I downgraded my version of Fabric to 1.2.6, I no longer got the errors above.  Then, I used the tutorial as a jumping off point.  However, despite the tutorial and the older version of Fabric, I still got the PyCrypto >= 2.1, !=2.4 error.  I eventually installed Pycrypto 2.2 from source (since apparently pip will only install v. 2.0.1 even when designating pip -Iv install pycrypto==2.2 per this and v. 2.6 resulted in the gmp.h error).  Finally, everything worked.
","16281","<python><osx-mountain-lion><gmp><pycrypto>","35","1","5","2019-05-16 16:21:27","15561485","1","10","","","","2013-03-13 00:59:50",""
"15375171","Pycrypto install fatal error: gmp.h file not found","It seems like there are a number of people who have had a similar problem, however, after much searching I haven't been able to find a solution that works with my particular architecture.  I'm trying to install Pycrypto (as a subsidiary of Fabric) to no avail.  
I'm running Mac 10.8.2, python 2.7.3 via Homebrew, and XCode 4.6 -- installing with pip or easy_install (I've tried both).  From what I can tell, the problem could either be with respect to my version of XCode or because of my libraries.  The Command Line Tools for XCode have been installed and I have tried placing setenv ARCHFLAGS ""-arch i386 -arch x86_64"" in my .cshrc file.  I have also tried ln -s /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer /Developer.  As for the libraries, I've tried linking them via ln -s /usr/local/lib/libgmp.dylib /usr/lib/libgmp.dylib - but that also didn't work.  
The error is always the same (see below) no matter what angle I attempt.  Any and all help would be appreciated.
/usr/local/share/python% pip install pycrypto
Downloading/unpacking pycrypto
  Running setup.py egg_info for package pycrypto

Installing collected packages: pycrypto
  Running setup.py install for pycrypto
    building 'Crypto.PublicKey._fastmath' extension
    /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang -fno-strict-aliasing -fno-common -dynamic -arch i386 -arch x86_64 -pipe -mmacosx-version-min=10.8 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.8.sdk -Wno-unused-value -Wno-empty-body -Qunused-arguments -fwrapv -Wall -Wstrict-prototypes -std=c99 -O3 -fomit-frame-pointer -Isrc/ -I/usr/include/ -I/usr/local/Cellar/python/2.7.3/Frameworks/Python.framework/Versions/2.7/include/python2.7 -c src/_fastmath.c -o build/temp.macosx-10.8-intel-2.7/src/_fastmath.o
src/_fastmath.c:36:11: fatal error: 'gmp.h' file not found
# include <gmp.h>
          ^
1 error generated.
error: command '/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang' failed with exit status 1
Complete output from command /usr/local/Cellar/python/2.7.3/Frameworks/Python.framework/Versions/2.7/Resources/Python.app/Contents/MacOS/Python -c ""import setuptools;__file__='/var/folders/ym/v8l23q_x2xz_qhx3m84n6ym00005fr/T/pip-build/pycrypto/setup.py';exec(compile(open(__file__).read().replace('\r\n', '\n'), __file__, 'exec'))"" install --record /var/folders/ym/v8l23q_x2xz_qhx3m84n6ym00005fr/T/pip-Xb7nGV-record/install-record.txt --single-version-externally-managed:
running install

running build

running build_py

running build_ext

running build_configure

building 'Crypto.PublicKey._fastmath' extension

/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang -fno-strict-aliasing -fno-common -dynamic -arch i386 -arch x86_64 -pipe -mmacosx-version-min=10.8 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.8.sdk -Wno-unused-value -Wno-empty-body -Qunused-arguments -fwrapv -Wall -Wstrict-prototypes -std=c99 -O3 -fomit-frame-pointer -Isrc/ -I/usr/include/ -I/usr/local/Cellar/python/2.7.3/Frameworks/Python.framework/Versions/2.7/include/python2.7 -c src/_fastmath.c -o build/temp.macosx-10.8-intel-2.7/src/_fastmath.o

src/_fastmath.c:36:11: fatal error: 'gmp.h' file not found

# include <gmp.h>

      ^

1 error generated.

error: command '/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain    /usr/bin/clang' failed with exit status 1

----------------------------------------
Command /usr/local/Cellar/python/2.7.3/Frameworks/Python.framework/Versions/2.7/Resources/Python.app/Contents/MacOS/Python -c ""import setuptools;__file__='/var/folders/ym/v8l23q_x2xz_qhx3m84n6ym00005fr/T/pip-build/pycrypto/setup.py';exec(compile(open(__file__).read().replace('\r\n', '\n'), __file__, 'exec'))"" install --record /var/folders/ym/v8l23q_x2xz_qhx3m84n6ym00005fr/T/pip-Xb7nGV-record/install-record.txt --single-version-externally-managed failed with error code 1 in /var/folders/ym/v8l23q_x2xz_qhx3m84n6ym00005fr/T/pip-build/pycrypto
Storing complete log in /Users/me/.pip/pip.log

The error when I try to call Fabric:
Traceback (most recent call last):
  File ""/usr/local/share/python/fab"", line 5, in <module>
from pkg_resources import load_entry_point
  File ""/usr/local/Cellar/python/2.7.3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py"", line 2815, in <module>
working_set.require(__requires__)
  File ""/usr/local/Cellar/python/2.7.3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py"", line 690, in require
needed = self.resolve(parse_requirements(requirements))
  File ""/usr/local/Cellar/python/2.7.3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py"", line 588, in resolve
raise DistributionNotFound(req)
pkg_resources.DistributionNotFound: pycrypto>=2.1,!=2.4

","Here is the fix that worked for me:
https://medium.com/software-bugs/84afab886a1e
You need to create a symlink based on the installation header include path (-I) in but crash. Example:
building 'Crypto.PublicKey._fastmath' extension
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang -fno-strict-aliasing -fno-common -dynamic -pipe -march=native -mmacosx-version-min=10.7 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.7.sdk -isystem /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.7.sdk/usr/include -I/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.7.sdk/usr/include -I/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.7.sdk/usr/X11/include -Wno-unused-value -Wno-empty-body -Qunused-arguments -fwrapv -Wall -Wstrict-prototypes -std=c99 -O3 -fomit-frame-pointer -Isrc/ *-I/usr/include/ -*I/usr/local/Cellar/python/2.7.3/Frameworks/Python.framework/Versions/2.7/include/python2.7 -c src/_fastmath.c -o build/temp.macosx-10.7-x86_64-2.7/src/_fastmath.o
src/_fastmath.c:36:11: fatal error: 'gmp.h' file not found
","16281","<python><osx-mountain-lion><gmp><pycrypto>","35","0","5","2019-05-16 16:21:27","15561485","1","10","","","","2013-03-13 00:59:50",""
"15375171","Pycrypto install fatal error: gmp.h file not found","It seems like there are a number of people who have had a similar problem, however, after much searching I haven't been able to find a solution that works with my particular architecture.  I'm trying to install Pycrypto (as a subsidiary of Fabric) to no avail.  
I'm running Mac 10.8.2, python 2.7.3 via Homebrew, and XCode 4.6 -- installing with pip or easy_install (I've tried both).  From what I can tell, the problem could either be with respect to my version of XCode or because of my libraries.  The Command Line Tools for XCode have been installed and I have tried placing setenv ARCHFLAGS ""-arch i386 -arch x86_64"" in my .cshrc file.  I have also tried ln -s /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer /Developer.  As for the libraries, I've tried linking them via ln -s /usr/local/lib/libgmp.dylib /usr/lib/libgmp.dylib - but that also didn't work.  
The error is always the same (see below) no matter what angle I attempt.  Any and all help would be appreciated.
/usr/local/share/python% pip install pycrypto
Downloading/unpacking pycrypto
  Running setup.py egg_info for package pycrypto

Installing collected packages: pycrypto
  Running setup.py install for pycrypto
    building 'Crypto.PublicKey._fastmath' extension
    /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang -fno-strict-aliasing -fno-common -dynamic -arch i386 -arch x86_64 -pipe -mmacosx-version-min=10.8 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.8.sdk -Wno-unused-value -Wno-empty-body -Qunused-arguments -fwrapv -Wall -Wstrict-prototypes -std=c99 -O3 -fomit-frame-pointer -Isrc/ -I/usr/include/ -I/usr/local/Cellar/python/2.7.3/Frameworks/Python.framework/Versions/2.7/include/python2.7 -c src/_fastmath.c -o build/temp.macosx-10.8-intel-2.7/src/_fastmath.o
src/_fastmath.c:36:11: fatal error: 'gmp.h' file not found
# include <gmp.h>
          ^
1 error generated.
error: command '/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang' failed with exit status 1
Complete output from command /usr/local/Cellar/python/2.7.3/Frameworks/Python.framework/Versions/2.7/Resources/Python.app/Contents/MacOS/Python -c ""import setuptools;__file__='/var/folders/ym/v8l23q_x2xz_qhx3m84n6ym00005fr/T/pip-build/pycrypto/setup.py';exec(compile(open(__file__).read().replace('\r\n', '\n'), __file__, 'exec'))"" install --record /var/folders/ym/v8l23q_x2xz_qhx3m84n6ym00005fr/T/pip-Xb7nGV-record/install-record.txt --single-version-externally-managed:
running install

running build

running build_py

running build_ext

running build_configure

building 'Crypto.PublicKey._fastmath' extension

/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang -fno-strict-aliasing -fno-common -dynamic -arch i386 -arch x86_64 -pipe -mmacosx-version-min=10.8 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.8.sdk -Wno-unused-value -Wno-empty-body -Qunused-arguments -fwrapv -Wall -Wstrict-prototypes -std=c99 -O3 -fomit-frame-pointer -Isrc/ -I/usr/include/ -I/usr/local/Cellar/python/2.7.3/Frameworks/Python.framework/Versions/2.7/include/python2.7 -c src/_fastmath.c -o build/temp.macosx-10.8-intel-2.7/src/_fastmath.o

src/_fastmath.c:36:11: fatal error: 'gmp.h' file not found

# include <gmp.h>

      ^

1 error generated.

error: command '/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain    /usr/bin/clang' failed with exit status 1

----------------------------------------
Command /usr/local/Cellar/python/2.7.3/Frameworks/Python.framework/Versions/2.7/Resources/Python.app/Contents/MacOS/Python -c ""import setuptools;__file__='/var/folders/ym/v8l23q_x2xz_qhx3m84n6ym00005fr/T/pip-build/pycrypto/setup.py';exec(compile(open(__file__).read().replace('\r\n', '\n'), __file__, 'exec'))"" install --record /var/folders/ym/v8l23q_x2xz_qhx3m84n6ym00005fr/T/pip-Xb7nGV-record/install-record.txt --single-version-externally-managed failed with error code 1 in /var/folders/ym/v8l23q_x2xz_qhx3m84n6ym00005fr/T/pip-build/pycrypto
Storing complete log in /Users/me/.pip/pip.log

The error when I try to call Fabric:
Traceback (most recent call last):
  File ""/usr/local/share/python/fab"", line 5, in <module>
from pkg_resources import load_entry_point
  File ""/usr/local/Cellar/python/2.7.3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py"", line 2815, in <module>
working_set.require(__requires__)
  File ""/usr/local/Cellar/python/2.7.3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py"", line 690, in require
needed = self.resolve(parse_requirements(requirements))
  File ""/usr/local/Cellar/python/2.7.3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py"", line 588, in resolve
raise DistributionNotFound(req)
pkg_resources.DistributionNotFound: pycrypto>=2.1,!=2.4

","I was able to get PyCrypto to install using the following command:
CFLAGS=-I/opt/local/include pip install pycrypto

I have GMP installed via MacPorts, running on OSX 10.8.3 with Python 2.7.2 from python.org.  In this case I am installing into a virtualenv.
I do get the following warning when PyCrypto is used, but it still works:
/Users/me/.virtualenvs/blah/lib/python2.7/site-packages/Crypto/Util/number.py:57: PowmInsecureWarning: Not using mpz_powm_sec.  You should rebuild using libgmp >= 5 to avoid timing attack vulnerability.
  _warn(""Not using mpz_powm_sec.  You should rebuild using libgmp >= 5 to avoid timing attack vulnerability."", PowmInsecureWarning)

","16281","<python><osx-mountain-lion><gmp><pycrypto>","35","4","5","2019-05-16 16:21:27","15561485","1","10","","","","2013-03-13 00:59:50",""
"15375171","Pycrypto install fatal error: gmp.h file not found","It seems like there are a number of people who have had a similar problem, however, after much searching I haven't been able to find a solution that works with my particular architecture.  I'm trying to install Pycrypto (as a subsidiary of Fabric) to no avail.  
I'm running Mac 10.8.2, python 2.7.3 via Homebrew, and XCode 4.6 -- installing with pip or easy_install (I've tried both).  From what I can tell, the problem could either be with respect to my version of XCode or because of my libraries.  The Command Line Tools for XCode have been installed and I have tried placing setenv ARCHFLAGS ""-arch i386 -arch x86_64"" in my .cshrc file.  I have also tried ln -s /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer /Developer.  As for the libraries, I've tried linking them via ln -s /usr/local/lib/libgmp.dylib /usr/lib/libgmp.dylib - but that also didn't work.  
The error is always the same (see below) no matter what angle I attempt.  Any and all help would be appreciated.
/usr/local/share/python% pip install pycrypto
Downloading/unpacking pycrypto
  Running setup.py egg_info for package pycrypto

Installing collected packages: pycrypto
  Running setup.py install for pycrypto
    building 'Crypto.PublicKey._fastmath' extension
    /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang -fno-strict-aliasing -fno-common -dynamic -arch i386 -arch x86_64 -pipe -mmacosx-version-min=10.8 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.8.sdk -Wno-unused-value -Wno-empty-body -Qunused-arguments -fwrapv -Wall -Wstrict-prototypes -std=c99 -O3 -fomit-frame-pointer -Isrc/ -I/usr/include/ -I/usr/local/Cellar/python/2.7.3/Frameworks/Python.framework/Versions/2.7/include/python2.7 -c src/_fastmath.c -o build/temp.macosx-10.8-intel-2.7/src/_fastmath.o
src/_fastmath.c:36:11: fatal error: 'gmp.h' file not found
# include <gmp.h>
          ^
1 error generated.
error: command '/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang' failed with exit status 1
Complete output from command /usr/local/Cellar/python/2.7.3/Frameworks/Python.framework/Versions/2.7/Resources/Python.app/Contents/MacOS/Python -c ""import setuptools;__file__='/var/folders/ym/v8l23q_x2xz_qhx3m84n6ym00005fr/T/pip-build/pycrypto/setup.py';exec(compile(open(__file__).read().replace('\r\n', '\n'), __file__, 'exec'))"" install --record /var/folders/ym/v8l23q_x2xz_qhx3m84n6ym00005fr/T/pip-Xb7nGV-record/install-record.txt --single-version-externally-managed:
running install

running build

running build_py

running build_ext

running build_configure

building 'Crypto.PublicKey._fastmath' extension

/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang -fno-strict-aliasing -fno-common -dynamic -arch i386 -arch x86_64 -pipe -mmacosx-version-min=10.8 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.8.sdk -Wno-unused-value -Wno-empty-body -Qunused-arguments -fwrapv -Wall -Wstrict-prototypes -std=c99 -O3 -fomit-frame-pointer -Isrc/ -I/usr/include/ -I/usr/local/Cellar/python/2.7.3/Frameworks/Python.framework/Versions/2.7/include/python2.7 -c src/_fastmath.c -o build/temp.macosx-10.8-intel-2.7/src/_fastmath.o

src/_fastmath.c:36:11: fatal error: 'gmp.h' file not found

# include <gmp.h>

      ^

1 error generated.

error: command '/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain    /usr/bin/clang' failed with exit status 1

----------------------------------------
Command /usr/local/Cellar/python/2.7.3/Frameworks/Python.framework/Versions/2.7/Resources/Python.app/Contents/MacOS/Python -c ""import setuptools;__file__='/var/folders/ym/v8l23q_x2xz_qhx3m84n6ym00005fr/T/pip-build/pycrypto/setup.py';exec(compile(open(__file__).read().replace('\r\n', '\n'), __file__, 'exec'))"" install --record /var/folders/ym/v8l23q_x2xz_qhx3m84n6ym00005fr/T/pip-Xb7nGV-record/install-record.txt --single-version-externally-managed failed with error code 1 in /var/folders/ym/v8l23q_x2xz_qhx3m84n6ym00005fr/T/pip-build/pycrypto
Storing complete log in /Users/me/.pip/pip.log

The error when I try to call Fabric:
Traceback (most recent call last):
  File ""/usr/local/share/python/fab"", line 5, in <module>
from pkg_resources import load_entry_point
  File ""/usr/local/Cellar/python/2.7.3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py"", line 2815, in <module>
working_set.require(__requires__)
  File ""/usr/local/Cellar/python/2.7.3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py"", line 690, in require
needed = self.resolve(parse_requirements(requirements))
  File ""/usr/local/Cellar/python/2.7.3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/distribute-0.6.28-py2.7.egg/pkg_resources.py"", line 588, in resolve
raise DistributionNotFound(req)
pkg_resources.DistributionNotFound: pycrypto>=2.1,!=2.4

","If you use Homebrew, this should do the trick:
brew install gmp
env ""CFLAGS=-I/usr/local/include -L/usr/local/lib"" pip install pycrypto

Using env will only make it work for that invocation. If you need to install pycrypto at a later time in this session export the variable instead. 
export ""CFLAGS=-I/usr/local/include -L/usr/local/lib"" 
pip install pycrypto

","16281","<python><osx-mountain-lion><gmp><pycrypto>","35","90","5","2019-05-16 16:21:27","15561485","1","10","","","","2013-03-13 00:59:50",""
"17773450","Why must all inputs to AES be multiples of 16?","I'm using the PyCrypto implementation of AES and I'm trying to encrypt some text (24 bytes) using a 24 byte key.  
aes_ecb = AES.new('\x00'*24, AES.MODE_ECB)
aes_ecb.encrypt(""123456""*4)

I get this surprising error ValueError: Input strings must be a multiple of 16 in length
So why is it that my input must be a multiple of 16? It would make more sense to me that the input string length must be a multiple of my key size, because this would allow nice bitwise operations between the key and blocks of plaintext.
","AES is a block cipher. Quote from the Wikipedia page: “a block cipher is a deterministic algorithm operating on fixed-length groups of bits”. 
AES can only work with blocks of 128 bits (that is, 16 chars, as you noticed).
If your input can have lengths others than a multiple of 128, depending on your application, you may have to be extremely careful how you handle padding.
","16137","<aes><pycrypto>","4","5","3","2013-07-25 03:51:09","17773476","0","","","","","2013-07-21 14:35:52",""
"17773450","Why must all inputs to AES be multiples of 16?","I'm using the PyCrypto implementation of AES and I'm trying to encrypt some text (24 bytes) using a 24 byte key.  
aes_ecb = AES.new('\x00'*24, AES.MODE_ECB)
aes_ecb.encrypt(""123456""*4)

I get this surprising error ValueError: Input strings must be a multiple of 16 in length
So why is it that my input must be a multiple of 16? It would make more sense to me that the input string length must be a multiple of my key size, because this would allow nice bitwise operations between the key and blocks of plaintext.
","Because the block size is 16 bytes, the way to handle this is to add padding when encrypting.
","16137","<aes><pycrypto>","4","1","3","2013-07-25 03:51:09","17773476","0","","","","","2013-07-21 14:35:52",""
"17773450","Why must all inputs to AES be multiples of 16?","I'm using the PyCrypto implementation of AES and I'm trying to encrypt some text (24 bytes) using a 24 byte key.  
aes_ecb = AES.new('\x00'*24, AES.MODE_ECB)
aes_ecb.encrypt(""123456""*4)

I get this surprising error ValueError: Input strings must be a multiple of 16 in length
So why is it that my input must be a multiple of 16? It would make more sense to me that the input string length must be a multiple of my key size, because this would allow nice bitwise operations between the key and blocks of plaintext.
","Just want to add info about mods of operations
Yes, AES is a 128-bit (16-byte) block cipher with multiple possible key length (128, 192, 256), but the cause of this text padding limitation (and error msg) is ECB mode of operation. ECB is the simplest of the encryption modes. I don't know your goals, so will just skip the part that it doesn't provide serious message confidentiality.
CBC and CTR are more common and usually appropriate to use and in CTR mode you don't need 128-bit message length.
There is also ciphertext stealing (CTS) method for ECB and CBC modes. 

Method of using a block cipher mode of operation that allows for
  processing of messages that are not evenly divisible into blocks
  without resulting in any expansion of the ciphertext, at the cost of
  slightly increased complexity

But Ciphertext stealing for ECB mode requires the plaintext to be longer than one 128-bit block.
","16137","<aes><pycrypto>","4","2","3","2013-07-25 03:51:09","17773476","0","","","","","2013-07-21 14:35:52",""
"11625352","pycrypto on Ubuntu giving compiler error","I am trying to install pycrypto2.6 on Ubuntu 10.04 (Lucid Lynx)  with Python 2.7.3.
I am encountering the following error:
running build
running build_py
running build_ext
running build_configure
checking for gcc... no
checking for cc... no
checking for cl.exe... no
configure: error: in `/home/pratibha/Desktop/pycrypto-2.6':
configure: error: no acceptable C compiler found in $PATH
See `config.log' for more details
Traceback (most recent call last):
File ""setup.py"", line 456, in <module>
core.setup(**kw)
File ""/usr/local/lib/python2.7/distutils/core.py"", line 152, in setup
dist.run_commands()
File ""/usr/local/lib/python2.7/distutils/dist.py"", line 953, in run_commands
self.run_command(cmd)
File ""/usr/local/lib/python2.7/distutils/dist.py"", line 972, in run_command
cmd_obj.run()
File ""/usr/local/lib/python2.7/distutils/command/build.py"", line 127, in run
self.run_command(cmd_name)
File ""/usr/local/lib/python2.7/distutils/cmd.py"", line 326, in run_command
self.distribution.run_command(command)
File ""/usr/local/lib/python2.7/distutils/dist.py"", line 972, in run_command
cmd_obj.run()
File ""setup.py"", line 251, in run
self.run_command(cmd_name)
File ""/usr/local/lib/python2.7/distutils/cmd.py"", line 326, in run_command
self.distribution.run_command(command)
File ""/usr/local/lib/python2.7/distutils/dist.py"", line 972, in run_command
cmd_obj.run()
File ""setup.py"", line 278, in run
raise RuntimeError(""autoconf error"")
RuntimeError: autoconf error

I checked Software Centre, and I have GCC installed on my system, but the ""which gcc"" command is not returning any path.
I got it by creating the symbolic link:
ln -s /usr/bin/gcc-4.4 /usr/bin/gcc

","I had a similar problem, but in my case it turns out I didn't have gcc installed at all.
So a simple sudo apt-get install gcc did the trick.
If you have it installed, but which gcc doesn't return any path, then go to /usr/bin/ and look for gcc. Then create a symbolic link, like so:
ln -s /usr/bin/gcc-<version-number> /usr/bin/gcc

where you replaced <version-number> with the appropriate version number, of course.
","15266","<gcc><ubuntu><pycrypto>","15","17","3","2016-05-14 02:45:08","14402372","3","3","63550","","2016-05-14 02:45:08","2012-07-24 06:32:28",""
"11625352","pycrypto on Ubuntu giving compiler error","I am trying to install pycrypto2.6 on Ubuntu 10.04 (Lucid Lynx)  with Python 2.7.3.
I am encountering the following error:
running build
running build_py
running build_ext
running build_configure
checking for gcc... no
checking for cc... no
checking for cl.exe... no
configure: error: in `/home/pratibha/Desktop/pycrypto-2.6':
configure: error: no acceptable C compiler found in $PATH
See `config.log' for more details
Traceback (most recent call last):
File ""setup.py"", line 456, in <module>
core.setup(**kw)
File ""/usr/local/lib/python2.7/distutils/core.py"", line 152, in setup
dist.run_commands()
File ""/usr/local/lib/python2.7/distutils/dist.py"", line 953, in run_commands
self.run_command(cmd)
File ""/usr/local/lib/python2.7/distutils/dist.py"", line 972, in run_command
cmd_obj.run()
File ""/usr/local/lib/python2.7/distutils/command/build.py"", line 127, in run
self.run_command(cmd_name)
File ""/usr/local/lib/python2.7/distutils/cmd.py"", line 326, in run_command
self.distribution.run_command(command)
File ""/usr/local/lib/python2.7/distutils/dist.py"", line 972, in run_command
cmd_obj.run()
File ""setup.py"", line 251, in run
self.run_command(cmd_name)
File ""/usr/local/lib/python2.7/distutils/cmd.py"", line 326, in run_command
self.distribution.run_command(command)
File ""/usr/local/lib/python2.7/distutils/dist.py"", line 972, in run_command
cmd_obj.run()
File ""setup.py"", line 278, in run
raise RuntimeError(""autoconf error"")
RuntimeError: autoconf error

I checked Software Centre, and I have GCC installed on my system, but the ""which gcc"" command is not returning any path.
I got it by creating the symbolic link:
ln -s /usr/bin/gcc-4.4 /usr/bin/gcc

","I was having the same problem, and trying the above step of installing gcc did not help.
Once I installed the python-dev package, everything compiled perfectly.
sudo apt-get install python-dev
","15266","<gcc><ubuntu><pycrypto>","15","6","3","2016-05-14 02:45:08","14402372","3","3","63550","","2016-05-14 02:45:08","2012-07-24 06:32:28",""
"11625352","pycrypto on Ubuntu giving compiler error","I am trying to install pycrypto2.6 on Ubuntu 10.04 (Lucid Lynx)  with Python 2.7.3.
I am encountering the following error:
running build
running build_py
running build_ext
running build_configure
checking for gcc... no
checking for cc... no
checking for cl.exe... no
configure: error: in `/home/pratibha/Desktop/pycrypto-2.6':
configure: error: no acceptable C compiler found in $PATH
See `config.log' for more details
Traceback (most recent call last):
File ""setup.py"", line 456, in <module>
core.setup(**kw)
File ""/usr/local/lib/python2.7/distutils/core.py"", line 152, in setup
dist.run_commands()
File ""/usr/local/lib/python2.7/distutils/dist.py"", line 953, in run_commands
self.run_command(cmd)
File ""/usr/local/lib/python2.7/distutils/dist.py"", line 972, in run_command
cmd_obj.run()
File ""/usr/local/lib/python2.7/distutils/command/build.py"", line 127, in run
self.run_command(cmd_name)
File ""/usr/local/lib/python2.7/distutils/cmd.py"", line 326, in run_command
self.distribution.run_command(command)
File ""/usr/local/lib/python2.7/distutils/dist.py"", line 972, in run_command
cmd_obj.run()
File ""setup.py"", line 251, in run
self.run_command(cmd_name)
File ""/usr/local/lib/python2.7/distutils/cmd.py"", line 326, in run_command
self.distribution.run_command(command)
File ""/usr/local/lib/python2.7/distutils/dist.py"", line 972, in run_command
cmd_obj.run()
File ""setup.py"", line 278, in run
raise RuntimeError(""autoconf error"")
RuntimeError: autoconf error

I checked Software Centre, and I have GCC installed on my system, but the ""which gcc"" command is not returning any path.
I got it by creating the symbolic link:
ln -s /usr/bin/gcc-4.4 /usr/bin/gcc

","I ran into a similar error message when installing pycrypto on a shared host (Webfaction).  The solution was to change the temporary directory while installing:
TMPDIR=~/tmp pip install pycrypto

","15266","<gcc><ubuntu><pycrypto>","15","18","3","2016-05-14 02:45:08","14402372","3","3","63550","","2016-05-14 02:45:08","2012-07-24 06:32:28",""
"7913140","Can't install python module ""pycrypto"" on Debian lenny","I tried to install pycrypto module by downloading the source code and executing the following command python setup.py install, then an error came 
running install
running build
running build_py
running build_ext
warning: GMP library not found; Not building Crypto.PublicKey._fastmath.
building 'Crypto.Hash.MD2' extension
gcc -pthread -fno-strict-aliasing -fwrapv -Wall -Wstrict-prototypes -fPIC -std=c99 -O3 -fomit-frame-pointer -Isrc/ -I/usr/include/python2.5 -c src/MD2.c -o build/temp.linux-x86_64-2.5/src/MD2.o
src/MD2.c:31:20: error: Python.h: No such file or directory
src/MD2.c:118: error: expected '=', ',', ';', 'asm' or '__attribute__' before '*' token
In file included from src/MD2.c:134:
src/hash_template.c:42: error: expected specifier-qualifier-list before 'PyObject_HEAD'
src/hash_template.c:46: error: expected '=', ',', ';', 'asm' or '__attribute__' before 'PyTypeObject'
src/hash_template.c: In function 'newALGobject':
src/hash_template.c:55: warning: implicit declaration of function 'PyObject_New'
src/hash_template.c:55: error: expected expression before 'ALGobject'
src/hash_template.c:55: warning: assignment makes pointer from integer without a cast
src/hash_template.c: At top level:
src/hash_template.c:62: error: expected ')' before '*' token
src/hash_template.c:77: error: expected '=', ',', ';', 'asm' or '__attribute__' before '*' token
src/hash_template.c:96: error: expected '=', ',', ';', 'asm' or '__attribute__' before '*' token
src/hash_template.c:108: error: expected '=', ',', ';', 'asm' or '__attribute__' before '*' token
src/hash_template.c:143: error: expected '=', ',', ';', 'asm' or '__attribute__' before '*' token
src/hash_template.c:160: error: expected '=', ',', ';', 'asm' or '__attribute__' before 'ALG_methods'
src/hash_template.c:169: error: expected '=', ',', ';', 'asm' or '__attribute__' before '*' token
src/hash_template.c:178: error: expected '=', ',', ';', 'asm' or '__attribute__' before 'ALGtype'
src/hash_template.c:203: error: expected '=', ',', ';', 'asm' or '__attribute__' before '*' token
src/hash_template.c:237: error: array type has incomplete element type
src/hash_template.c:238: error: 'PyCFunction' undeclared here (not in a function)
src/hash_template.c:238: error: expected '}' before 'ALG_new'
src/hash_template.c: In function 'initMD2':
src/hash_template.c:254: error: 'PyObject' undeclared (first use in this function)
src/hash_template.c:254: error: (Each undeclared identifier is reported only once
src/hash_template.c:254: error: for each function it appears in.)
src/hash_template.c:254: error: 'm' undeclared (first use in this function)
src/hash_template.c:256: error: 'ALGtype' undeclared (first use in this function)
src/hash_template.c:256: error: 'PyType_Type' undeclared (first use in this function)
src/hash_template.c:257: warning: implicit declaration of function 'Py_InitModule'
src/hash_template.c:260: error: 'o' undeclared (first use in this function)
src/hash_template.c:260: warning: implicit declaration of function 'PyInt_FromLong'
src/hash_template.c:260: warning: implicit declaration of function 'PyDict_SetItemString'
src/hash_template.c:260: warning: implicit declaration of function 'PyModule_GetDict'
src/hash_template.c:260: warning: implicit declaration of function 'Py_DECREF'
src/hash_template.c:263: warning: implicit declaration of function 'PyErr_Occurred'
src/hash_template.c:264: warning: implicit declaration of function 'Py_FatalError'
error: command 'gcc' failed with exit status 1

Which means that he didn't find the Python.h. I searched online for this error and it seems that by installing the python header file the problem will be solved, but my Debian lenny came with anther error.
apt-get install python2.6-dev

and error :
Reading package lists... Done
Building dependency tree
Reading state information... Done
E: Couldn't find package python2.6-dev

","Don't install it from source.  Install the Debian package instead:
aptitude install python-crypto

And to install the python dev files (which you won't need anyway if you follow my above advice):
aptitude install python-dev

","14304","<python><debian><python-2.6><pycrypto><lenny>","16","24","1","2013-10-01 10:51:22","7913198","0","1","13860","","2011-10-27 08:08:26","2011-10-27 08:02:15",""
"36834580","IV must be 16 bytes long error in AES encryption","I am using pycrypto module for AES encryption. And using documentation I have write down the below function but it al;ways gives error IV must be 16 bytes long but I am using 16 byte long IV.
def aes_encrypt(plaintext):
    """"""
    """"""
    key = **my key comes here**
    iv = binascii.hexlify(os.urandom(16)) # even used without binascii.hexlify)

    aes_mode = AES.MODE_CBC

    obj = AES.new(key, aes_mode, iv)

    ciphertext = obj.encrypt(plaintext)
    return ciphertext

","Use this:
from Crypto.Cipher import AES 
import binascii,os

def aes_encrypt(plaintext):
    key = ""00112233445566778899aabbccddeeff""
    iv = os.urandom(16)
    aes_mode = AES.MODE_CBC
    obj = AES.new(key, aes_mode, iv)
    ciphertext = obj.encrypt(plaintext)
    return ciphertext

Works as below:
>>> aes_encrypt(""TestTestTestTest"")
'r_\x18\xaa\xac\x9c\xdb\x18n\xc1\xa4\x98\xa6sm\xd3'
>>> 

That's the difference:
>>> iv =  binascii.hexlify(os.urandom(16))
>>> iv
'9eae3db51f96e53f94dff9c699e9e849'
>>> len(iv)
32
>>> iv = os.urandom(16)
>>> iv
'\x16fdw\x9c\xe54]\xc2\x12!\x95\xd7zF\t'
>>> len(iv)
16
>>>

","14015","<python><encryption><pycrypto>","4","6","1","2016-04-25 07:52:44","36834802","6","2","","","","2016-04-25 07:39:54",""
"11656045","Pycrypto: Incrementing CTR Mode","Still can't quite get this to work. My question is about how to make the decryption line work. Here is what I have written:
class IVCounter(object):
    @staticmethod
    def incrIV(self):
        temp = hex(int(self, 16)+1)[2:34]
        return array.array('B', temp.decode(""hex"")).tostring()


def decryptCTR(key, ciphertext):

    iv = ciphertext[:32] #extracts the first 32 characters of the ciphertext

    #convert the key into a 16 byte string
    key = array.array('B', key.decode(""hex"")).tostring()

    print AES.new(key, AES.MODE_CTR, counter=IVCounter.incrIV(iv)).decrypt(ciphertext)
    return

My error message is: 

ValueError: 'counter' parameter must be a callable object

I just can't figure out how pycrypto wants me to organize that third argument to new.
Can anyone help? Thanks!
EDIT
New code after implementing the suggestions below. Still stuck!
class IVCounter(object):
    def __init__(self, start=1L):
        print start #outputs the number 1 (not my IV as hoped)
        self.value = long(start)

   def __call__(self):
        print self.value  #outputs 1 - need this to be my iv in long int form
        print self.value + 1L  #outputs 2
        self.value += 1L
        return somehow_convert_this_to_a_bitstring(self.value) #to be written

def decryptCTR(key, ciphertext):

    iv = ciphertext[:32] #extracts the first 32 characters of the ciphertext
    iv = int(iv, 16)

    #convert the key into a 16 byte string
    key = array.array('B', key.decode(""hex"")).tostring()

    ctr = IVCounter()
    Crypto.Util.Counter.new(128, initial_value = iv)

    print AES.new(key, AES.MODE_CTR, counter=ctr).decrypt(ciphertext)
    return

EDIT STILL can't get this to work. very frustrated and completely out of ideas. Here is the latest code: (please note that my input strings are 32-bit hex strings that must be interpreted in two-digit pairs to convert to long integers.)
class IVCounter(object):
    def __init__(self, start=1L):
        self.value = long(start)

    def __call__(self):
        self.value += 1L
        return hex(self.value)[2:34]

def decryptCTR(key, ciphertext):
    iv = ciphertext[:32] #extracts the first 32 characters of the ciphertext
    iv = array.array('B', iv.decode(""hex"")).tostring()

    ciphertext = ciphertext[32:]

    #convert the key into a 16 byte string
    key = array.array('B', key.decode(""hex"")).tostring()

    #ctr = IVCounter(long(iv))
    ctr = Crypto.Util.Counter.new(16, iv)

    print AES.new(key, AES.MODE_CTR, counter=ctr).decrypt(ciphertext)
    return


TypeError: CTR counter function returned string not of length 16

","In Python, it is perfectly valid to treat functions as objects. It is also perfectly valid to treat any object that defines __call__(self, ...) as a function.
So what you want might something like this:
class IVCounter(object):
    def __init__(self, start=1L):
        self.value = long(start)
    def __call__(self):
        self.value += 1L
        return somehow_convert_this_to_a_bitstring(self.value)

ctr = IVCounter()
... make some keys and ciphertext ...
print AES.new(key, AES.MODE_CTR, counter=ctr).decrypt(ciphertext)

However, PyCrypto provides a counter method for you that should be much faster than pure Python:
import Crypto.Util.Counter
ctr = Crypto.Util.Counter.new(NUM_COUNTER_BITS)

ctr is now a stateful function (and, simultaneously, a callable object) that increments and returns its internal state every time you call it. You can then do 
print AES.new(key, AES.MODE_CTR, counter=ctr).decrypt(ciphertext)

just as before.
Here's a working example using Crypto.Cipher.AES in CTR mode with a user-specified initialization vector:
import Crypto.Cipher.AES
import Crypto.Util.Counter

key = ""0123456789ABCDEF"" # replace this with a sensible value, preferably the output of a hash
iv = ""0000000000009001"" # replace this with a RANDOMLY GENERATED VALUE, and send this with the ciphertext!

plaintext = ""Attack at dawn"" # replace with your actual plaintext

ctr = Crypto.Util.Counter.new(128, initial_value=long(iv.encode(""hex""), 16))

cipher = Crypto.Cipher.AES.new(key, Crypto.Cipher.AES.MODE_CTR, counter=ctr)
print cipher.encrypt(plaintext)

","13963","<python><aes><encryption><pycrypto>","4","15","1","2012-07-26 19:05:44","11659333","0","3","1024973","","2012-07-26 18:15:32","2012-07-25 18:15:38",""
"14716338","PyCrypto - How does the Initialization Vector work?","I'm trying to understand how PyCrypto works to use in a project but I'm not fully understanding the significance of the Initialization Vector (IV).  I've found that I can use the wrong IV when decoding a string and I still seem to get the message back except for the first 16 bytes (the block size).  Am simply using it wrong or not understanding something?
Here's a sample code to demonstrate:
import Crypto
import Crypto.Random
from Crypto.Cipher import AES

def pad_data(data):
    if len(data) % 16 == 0:
        return data
    databytes = bytearray(data)
    padding_required = 15 - (len(databytes) % 16)
    databytes.extend(b'\x80')
    databytes.extend(b'\x00' * padding_required)
    return bytes(databytes)

def unpad_data(data):
    if not data:
        return data

    data = data.rstrip(b'\x00')
    if data[-1] == 128: # b'\x80'[0]:
        return data[:-1]
    else:
        return data


def generate_aes_key():
    rnd = Crypto.Random.OSRNG.posix.new().read(AES.block_size)
    return rnd

def encrypt(key, iv, data):
    aes = AES.new(key, AES.MODE_CBC, iv)
    data = pad_data(data)
    return aes.encrypt(data)

def decrypt(key, iv, data):
    aes = AES.new(key, AES.MODE_CBC, iv)
    data = aes.decrypt(data)
    return unpad_data(data)

def test_crypto ():
    key = generate_aes_key()
    iv = generate_aes_key() # get some random value for IV
    msg = b""This is some super secret message.  Please don't tell anyone about it or I'll have to shoot you.""
    code = encrypt(key, iv, msg)

    iv = generate_aes_key() # change the IV to something random

    decoded = decrypt(key, iv, code)

    print(decoded)

if __name__ == '__main__':
    test_crypto()

I'm using Python 3.3.
Output will vary on execution, but I get something like this: b""1^,Kp}Vl\x85\x8426M\xd2b\x1aer secret message.  Please don't tell anyone about it or I'll have to shoot you.""
","The developer for PyCrypto pulled the specification for AES CBC Mode from NIST:
AES Mode_CBC -> referencing NIST 800-38a (The Recommendation for Cipher Mode Operations)
From that, page 8:
5.3  Initialization Vectors
The input to the encryption processes of the CBC, CFB, and OFB modes includes, in addition to the plaintext, a data block called the initialization vector (IV), denoted IV. The IV is used in an initial step in the encryption of a message and in the corresponding decryption of the message. 
The IV need not be secret; however, for the CBC and CFB modes, the IV for any particular 
execution of the encryption process must be unpredictable, and, for the OFB mode, unique IVs must be used for each execution of the encryption process.  The generation of IVs is discussed in Appendix C. 

Thing to remember, you need to use a random IV every time you compose a message, this adds a 'salt' to the message therefore making the message unique; even with the 'salt' being out in the open, it will not help break the encryption if the AES encryption key is unknown.  If you do not use a randomized IV, say, you use the same 16 bytes each message, your messages, if you repeat yourself, will look the same going across the wire and you could be subject to frequency and/or replay attacks.
A test for the results of random IVs vs static:
def test_crypto ():
    print(""Same IVs same key:"")
    key = generate_aes_key()
    iv = b""1234567890123456""
    msg = b""This is some super secret message.  Please don't tell anyone about it or I'll have to shoot you.""
    code = encrypt(key, iv, msg)
    print(code.encode('hex'))
    decoded = decrypt(key, iv, code)
    print(decoded)

    code = encrypt(key, iv, msg)
    print(code.encode('hex'))
    decoded = decrypt(key, iv, code)
    print(decoded)

    print(""Different IVs same key:"")
    iv = generate_aes_key()
    code = encrypt(key, iv, msg)
    print(code.encode('hex'))
    decoded = decrypt(key, iv, code)
    print(decoded)

    iv = generate_aes_key()
    code = encrypt(key, iv, msg)
    print(code.encode('hex'))
    decoded = decrypt(key, iv, code)
    print(decoded)

Hope this helps!
","13706","<python><python-3.x><pycrypto><initialization-vector>","12","2","2","2013-02-06 07:52:10","14724042","0","4","","","","2013-02-05 20:30:35",""
"14716338","PyCrypto - How does the Initialization Vector work?","I'm trying to understand how PyCrypto works to use in a project but I'm not fully understanding the significance of the Initialization Vector (IV).  I've found that I can use the wrong IV when decoding a string and I still seem to get the message back except for the first 16 bytes (the block size).  Am simply using it wrong or not understanding something?
Here's a sample code to demonstrate:
import Crypto
import Crypto.Random
from Crypto.Cipher import AES

def pad_data(data):
    if len(data) % 16 == 0:
        return data
    databytes = bytearray(data)
    padding_required = 15 - (len(databytes) % 16)
    databytes.extend(b'\x80')
    databytes.extend(b'\x00' * padding_required)
    return bytes(databytes)

def unpad_data(data):
    if not data:
        return data

    data = data.rstrip(b'\x00')
    if data[-1] == 128: # b'\x80'[0]:
        return data[:-1]
    else:
        return data


def generate_aes_key():
    rnd = Crypto.Random.OSRNG.posix.new().read(AES.block_size)
    return rnd

def encrypt(key, iv, data):
    aes = AES.new(key, AES.MODE_CBC, iv)
    data = pad_data(data)
    return aes.encrypt(data)

def decrypt(key, iv, data):
    aes = AES.new(key, AES.MODE_CBC, iv)
    data = aes.decrypt(data)
    return unpad_data(data)

def test_crypto ():
    key = generate_aes_key()
    iv = generate_aes_key() # get some random value for IV
    msg = b""This is some super secret message.  Please don't tell anyone about it or I'll have to shoot you.""
    code = encrypt(key, iv, msg)

    iv = generate_aes_key() # change the IV to something random

    decoded = decrypt(key, iv, code)

    print(decoded)

if __name__ == '__main__':
    test_crypto()

I'm using Python 3.3.
Output will vary on execution, but I get something like this: b""1^,Kp}Vl\x85\x8426M\xd2b\x1aer secret message.  Please don't tell anyone about it or I'll have to shoot you.""
","The behavior you see is specific to the CBC mode. With CBC, decryption can be visualized in the following way (from wikipedia):

You can see that IV only contributes to the first 16 bytes of plaintext. If the IV is corrupted while it is in transit to the receiver, CBC will still correctly decrypt all blocks but the first one. In CBC, the purpose of the IV is to enable you to encrypt the same message with the same key, and still get a totally different ciphertext each time (even though the message length may give something away).
Other modes are less forgiving. If you get the IV wrong, the whole message is garbled at decryption. Take CTR mode for instance, where nonce takes almost the same meaning of IV:

","13706","<python><python-3.x><pycrypto><initialization-vector>","12","19","2","2013-02-06 07:52:10","14724042","0","4","","","","2013-02-05 20:30:35",""
"41813030","problems with installation pycrypto in python 3.6","I've tried to install pysnmp (which uses pycrypto) on python 3.6.0 using pip, but I've got an error:

Command """"c:\program files (x86)\python36-32\python.exe"" -u -c ""import
  setuptools, tokenize;file='C:
  \Users\HOME-M~1\AppData\Local\Temp\pip-build-6l69kxa5\pycrypto\setup.py';f=getattr(tokenize,
  'op en', open)(file);code=f.read().replace('\r\n',
  '\n');f.close();exec(compile(code, file, 'exec')) "" install
  --record C:\Users\HOME-M~1\AppData\Local\Temp\pip-qq93gmf_-record\install-record.txt
  --single- version-externally-managed --compile"" failed with error code 1 in C:\Users\HOME-M~1\AppData\Local\Temp\p
  ip-build-6l69kxa5\pycrypto\

I'm not an advanced user, and I've not been able to come up with a solution for this problem. Please tell me if you know how to resolve it.
Python 3.5.2 easily allowed installation.
","Try PyCryptodome which is a drop-in replacement for now-obsolete PyCrypto. 
$ pip install pycryptodome

Alternatively, if you'd take the latest pysnmp, it explicitly depends on Pycryptodome.
$ pip install git+https://github.com/etingof/pysnmp.git

Or just download zipped package, unpack it into a local dir and run python setup.py install
","13247","<pycrypto><pysnmp><python-3.6>","5","18","1","2017-01-24 10:23:18","41824822","0","1","","","","2017-01-23 18:20:19",""
"13077109","How can I create an encrypted django field that converts data when it's retrieved from the database?","I have a custom EncryptedCharField, which I want to basically appear as a CharField when interfacing UI, but before storing/retrieving in the DB it encrypts/decrypts it.
The custom fields documentation says to:

add __metaclass__ = models.SubfieldBase
override to_python to convert the data from it's raw storage into the desired format
override get_prep_value to convert the value before storing ot the db.

So you think this would be easy enough - for 2. just decrypt the value, and 3. just encrypt it.
Based loosely on a django snippet, and the documentation this field looks like:
class EncryptedCharField(models.CharField):
  """"""Just like a char field, but encrypts the value before it enters the database, and    decrypts it when it
  retrieves it""""""
  __metaclass__ = models.SubfieldBase
  def __init__(self, *args, **kwargs):
    super(EncryptedCharField, self).__init__(*args, **kwargs)
    cipher_type = kwargs.pop('cipher', 'AES')
    self.encryptor = Encryptor(cipher_type)

  def get_prep_value(self, value):
     return encrypt_if_not_encrypted(value, self.encryptor)

  def to_python(self, value):
    return decrypt_if_not_decrypted(value, self.encryptor)


def encrypt_if_not_encrypted(value, encryptor):
  if isinstance(value, EncryptedString):
    return value
  else:
    encrypted = encryptor.encrypt(value)
    return EncryptedString(encrypted)

def decrypt_if_not_decrypted(value, encryptor):
  if isinstance(value, DecryptedString):
    return value
  else:
    encrypted = encryptor.decrypt(value)
    return DecryptedString(encrypted)


class EncryptedString(str):
  pass

class DecryptedString(str):
  pass

and the Encryptor looks like:
class Encryptor(object):
  def __init__(self, cipher_type):
    imp = __import__('Crypto.Cipher', globals(), locals(), [cipher_type], -1)
    self.cipher = getattr(imp, cipher_type).new(settings.SECRET_KEY[:32])

  def decrypt(self, value):
    #values should always be encrypted no matter what!
    #raise an error if tthings may have been tampered with
    return self.cipher.decrypt(binascii.a2b_hex(str(value))).split('\0')[0]

  def encrypt(self, value):
    if value is not None and not isinstance(value, EncryptedString):
      padding  = self.cipher.block_size - len(value) % self.cipher.block_size
      if padding and padding < self.cipher.block_size:
        value += ""\0"" + ''.join([random.choice(string.printable) for index in range(padding-1)])
      value = EncryptedString(binascii.b2a_hex(self.cipher.encrypt(value)))
    return value

When saving a model, an error, Odd-length string, occurs, as a result of attempting to decrypt an already decrypted string.  When debugging, it appears as  to_python ends up being called twice, the first with the encrypted value, and the second time with the decrypted value, but not actually as a type Decrypted, but as a raw string, causing the error.  Furthermore get_prep_value is never called.
What am I doing wrong?
This should not be that hard - does anyone else think this Django field code is very poorly written, especially when it comes to custom fields, and not that extensible?  Simple overridable pre_save and post_fetch methods would easily solve this problem.
","You should be overriding to_python, like the snippet did.
If you take a look at the CharField class you can see that it doesn't have a value_to_string method:

django/db/models/fields/__init__.py

The docs say that the to_python method needs to deal with three things:

An instance of the correct type
A string (e.g., from a deserializer). 
Whatever the database returns for the column type you're using.

You are currently only dealing with the third case.
One way to handle this is to create a special class for a decrypted string:
class DecryptedString(str):
   pass

Then you can detect this class and handle it in to_python():
def to_python(self, value):
    if isinstance(value, DecryptedString):
        return value

    decrypted = self.encrypter.decrypt(encrypted)
    return DecryptedString(decrypted)

This prevents you from decrypting more than once.
","13108","<python><django><pycrypto>","14","4","5","2018-09-27 21:50:26","13345360","1","9","773210","","2012-11-07 05:39:48","2012-10-25 20:54:30",""
"13077109","How can I create an encrypted django field that converts data when it's retrieved from the database?","I have a custom EncryptedCharField, which I want to basically appear as a CharField when interfacing UI, but before storing/retrieving in the DB it encrypts/decrypts it.
The custom fields documentation says to:

add __metaclass__ = models.SubfieldBase
override to_python to convert the data from it's raw storage into the desired format
override get_prep_value to convert the value before storing ot the db.

So you think this would be easy enough - for 2. just decrypt the value, and 3. just encrypt it.
Based loosely on a django snippet, and the documentation this field looks like:
class EncryptedCharField(models.CharField):
  """"""Just like a char field, but encrypts the value before it enters the database, and    decrypts it when it
  retrieves it""""""
  __metaclass__ = models.SubfieldBase
  def __init__(self, *args, **kwargs):
    super(EncryptedCharField, self).__init__(*args, **kwargs)
    cipher_type = kwargs.pop('cipher', 'AES')
    self.encryptor = Encryptor(cipher_type)

  def get_prep_value(self, value):
     return encrypt_if_not_encrypted(value, self.encryptor)

  def to_python(self, value):
    return decrypt_if_not_decrypted(value, self.encryptor)


def encrypt_if_not_encrypted(value, encryptor):
  if isinstance(value, EncryptedString):
    return value
  else:
    encrypted = encryptor.encrypt(value)
    return EncryptedString(encrypted)

def decrypt_if_not_decrypted(value, encryptor):
  if isinstance(value, DecryptedString):
    return value
  else:
    encrypted = encryptor.decrypt(value)
    return DecryptedString(encrypted)


class EncryptedString(str):
  pass

class DecryptedString(str):
  pass

and the Encryptor looks like:
class Encryptor(object):
  def __init__(self, cipher_type):
    imp = __import__('Crypto.Cipher', globals(), locals(), [cipher_type], -1)
    self.cipher = getattr(imp, cipher_type).new(settings.SECRET_KEY[:32])

  def decrypt(self, value):
    #values should always be encrypted no matter what!
    #raise an error if tthings may have been tampered with
    return self.cipher.decrypt(binascii.a2b_hex(str(value))).split('\0')[0]

  def encrypt(self, value):
    if value is not None and not isinstance(value, EncryptedString):
      padding  = self.cipher.block_size - len(value) % self.cipher.block_size
      if padding and padding < self.cipher.block_size:
        value += ""\0"" + ''.join([random.choice(string.printable) for index in range(padding-1)])
      value = EncryptedString(binascii.b2a_hex(self.cipher.encrypt(value)))
    return value

When saving a model, an error, Odd-length string, occurs, as a result of attempting to decrypt an already decrypted string.  When debugging, it appears as  to_python ends up being called twice, the first with the encrypted value, and the second time with the decrypted value, but not actually as a type Decrypted, but as a raw string, causing the error.  Furthermore get_prep_value is never called.
What am I doing wrong?
This should not be that hard - does anyone else think this Django field code is very poorly written, especially when it comes to custom fields, and not that extensible?  Simple overridable pre_save and post_fetch methods would easily solve this problem.
","You forgot to set the metaclass:
class EncryptedCharField(models.CharField):
    __metaclass__ = models.SubfieldBase

The custom fields documentation explains why this is necessary.
","13108","<python><django><pycrypto>","14","3","5","2018-09-27 21:50:26","13345360","1","9","773210","","2012-11-07 05:39:48","2012-10-25 20:54:30",""
"13077109","How can I create an encrypted django field that converts data when it's retrieved from the database?","I have a custom EncryptedCharField, which I want to basically appear as a CharField when interfacing UI, but before storing/retrieving in the DB it encrypts/decrypts it.
The custom fields documentation says to:

add __metaclass__ = models.SubfieldBase
override to_python to convert the data from it's raw storage into the desired format
override get_prep_value to convert the value before storing ot the db.

So you think this would be easy enough - for 2. just decrypt the value, and 3. just encrypt it.
Based loosely on a django snippet, and the documentation this field looks like:
class EncryptedCharField(models.CharField):
  """"""Just like a char field, but encrypts the value before it enters the database, and    decrypts it when it
  retrieves it""""""
  __metaclass__ = models.SubfieldBase
  def __init__(self, *args, **kwargs):
    super(EncryptedCharField, self).__init__(*args, **kwargs)
    cipher_type = kwargs.pop('cipher', 'AES')
    self.encryptor = Encryptor(cipher_type)

  def get_prep_value(self, value):
     return encrypt_if_not_encrypted(value, self.encryptor)

  def to_python(self, value):
    return decrypt_if_not_decrypted(value, self.encryptor)


def encrypt_if_not_encrypted(value, encryptor):
  if isinstance(value, EncryptedString):
    return value
  else:
    encrypted = encryptor.encrypt(value)
    return EncryptedString(encrypted)

def decrypt_if_not_decrypted(value, encryptor):
  if isinstance(value, DecryptedString):
    return value
  else:
    encrypted = encryptor.decrypt(value)
    return DecryptedString(encrypted)


class EncryptedString(str):
  pass

class DecryptedString(str):
  pass

and the Encryptor looks like:
class Encryptor(object):
  def __init__(self, cipher_type):
    imp = __import__('Crypto.Cipher', globals(), locals(), [cipher_type], -1)
    self.cipher = getattr(imp, cipher_type).new(settings.SECRET_KEY[:32])

  def decrypt(self, value):
    #values should always be encrypted no matter what!
    #raise an error if tthings may have been tampered with
    return self.cipher.decrypt(binascii.a2b_hex(str(value))).split('\0')[0]

  def encrypt(self, value):
    if value is not None and not isinstance(value, EncryptedString):
      padding  = self.cipher.block_size - len(value) % self.cipher.block_size
      if padding and padding < self.cipher.block_size:
        value += ""\0"" + ''.join([random.choice(string.printable) for index in range(padding-1)])
      value = EncryptedString(binascii.b2a_hex(self.cipher.encrypt(value)))
    return value

When saving a model, an error, Odd-length string, occurs, as a result of attempting to decrypt an already decrypted string.  When debugging, it appears as  to_python ends up being called twice, the first with the encrypted value, and the second time with the decrypted value, but not actually as a type Decrypted, but as a raw string, causing the error.  Furthermore get_prep_value is never called.
What am I doing wrong?
This should not be that hard - does anyone else think this Django field code is very poorly written, especially when it comes to custom fields, and not that extensible?  Simple overridable pre_save and post_fetch methods would easily solve this problem.
","You need to add a to_python method that deals with a number of cases, including passing on an already decrypted value
(warning: snippet is cut from my own code - just for illustration)
def to_python(self, value):
    if not value:
        return
    if isinstance(value, _Param): #THIS IS THE PASSING-ON CASE
        return value
    elif isinstance(value, unicode) and value.startswith('{'):
        param_dict = str2dict(value)
    else:
        try:
            param_dict = pickle.loads(str(value))
        except:
            raise TypeError('unable to process {}'.format(value))
    param_dict['par_type'] = self.par_type
    classname = '{}_{}'.format(self.par_type, param_dict['rule'])
    return getattr(get_module(self.par_type), classname)(**param_dict)

By the way:
Instead of get_db_prep_value you should use get_prep_value (the former is for db specific conversions - see https://docs.djangoproject.com/en/1.4/howto/custom-model-fields/#converting-python-objects-to-query-values )
","13108","<python><django><pycrypto>","14","1","5","2018-09-27 21:50:26","13345360","1","9","773210","","2012-11-07 05:39:48","2012-10-25 20:54:30",""
"13077109","How can I create an encrypted django field that converts data when it's retrieved from the database?","I have a custom EncryptedCharField, which I want to basically appear as a CharField when interfacing UI, but before storing/retrieving in the DB it encrypts/decrypts it.
The custom fields documentation says to:

add __metaclass__ = models.SubfieldBase
override to_python to convert the data from it's raw storage into the desired format
override get_prep_value to convert the value before storing ot the db.

So you think this would be easy enough - for 2. just decrypt the value, and 3. just encrypt it.
Based loosely on a django snippet, and the documentation this field looks like:
class EncryptedCharField(models.CharField):
  """"""Just like a char field, but encrypts the value before it enters the database, and    decrypts it when it
  retrieves it""""""
  __metaclass__ = models.SubfieldBase
  def __init__(self, *args, **kwargs):
    super(EncryptedCharField, self).__init__(*args, **kwargs)
    cipher_type = kwargs.pop('cipher', 'AES')
    self.encryptor = Encryptor(cipher_type)

  def get_prep_value(self, value):
     return encrypt_if_not_encrypted(value, self.encryptor)

  def to_python(self, value):
    return decrypt_if_not_decrypted(value, self.encryptor)


def encrypt_if_not_encrypted(value, encryptor):
  if isinstance(value, EncryptedString):
    return value
  else:
    encrypted = encryptor.encrypt(value)
    return EncryptedString(encrypted)

def decrypt_if_not_decrypted(value, encryptor):
  if isinstance(value, DecryptedString):
    return value
  else:
    encrypted = encryptor.decrypt(value)
    return DecryptedString(encrypted)


class EncryptedString(str):
  pass

class DecryptedString(str):
  pass

and the Encryptor looks like:
class Encryptor(object):
  def __init__(self, cipher_type):
    imp = __import__('Crypto.Cipher', globals(), locals(), [cipher_type], -1)
    self.cipher = getattr(imp, cipher_type).new(settings.SECRET_KEY[:32])

  def decrypt(self, value):
    #values should always be encrypted no matter what!
    #raise an error if tthings may have been tampered with
    return self.cipher.decrypt(binascii.a2b_hex(str(value))).split('\0')[0]

  def encrypt(self, value):
    if value is not None and not isinstance(value, EncryptedString):
      padding  = self.cipher.block_size - len(value) % self.cipher.block_size
      if padding and padding < self.cipher.block_size:
        value += ""\0"" + ''.join([random.choice(string.printable) for index in range(padding-1)])
      value = EncryptedString(binascii.b2a_hex(self.cipher.encrypt(value)))
    return value

When saving a model, an error, Odd-length string, occurs, as a result of attempting to decrypt an already decrypted string.  When debugging, it appears as  to_python ends up being called twice, the first with the encrypted value, and the second time with the decrypted value, but not actually as a type Decrypted, but as a raw string, causing the error.  Furthermore get_prep_value is never called.
What am I doing wrong?
This should not be that hard - does anyone else think this Django field code is very poorly written, especially when it comes to custom fields, and not that extensible?  Simple overridable pre_save and post_fetch methods would easily solve this problem.
","I think the issue is that to_python is also called when you assign a value to your custom field (as part of validation may be, based on this link). So the problem is to distinguish between to_python calls in the following situations:

When a value from the database is assigned to the field by Django (That's when you want to decrypt the value)
When you manually assign a value to the custom field, e.g. record.field = value

One hack you could use is to add prefix or suffix to the value string and check for that instead of doing isinstance check. 
I was going to write an example, but I found this one (even better :)).
Check BaseEncryptedField:
https://github.com/django-extensions/django-extensions/blob/master/django_extensions/db/fields/encrypted.py
Source:
Django Custom Field: Only run to_python() on values from DB? 
","13108","<python><django><pycrypto>","14","8","5","2018-09-27 21:50:26","13345360","1","9","773210","","2012-11-07 05:39:48","2012-10-25 20:54:30",""
"13077109","How can I create an encrypted django field that converts data when it's retrieved from the database?","I have a custom EncryptedCharField, which I want to basically appear as a CharField when interfacing UI, but before storing/retrieving in the DB it encrypts/decrypts it.
The custom fields documentation says to:

add __metaclass__ = models.SubfieldBase
override to_python to convert the data from it's raw storage into the desired format
override get_prep_value to convert the value before storing ot the db.

So you think this would be easy enough - for 2. just decrypt the value, and 3. just encrypt it.
Based loosely on a django snippet, and the documentation this field looks like:
class EncryptedCharField(models.CharField):
  """"""Just like a char field, but encrypts the value before it enters the database, and    decrypts it when it
  retrieves it""""""
  __metaclass__ = models.SubfieldBase
  def __init__(self, *args, **kwargs):
    super(EncryptedCharField, self).__init__(*args, **kwargs)
    cipher_type = kwargs.pop('cipher', 'AES')
    self.encryptor = Encryptor(cipher_type)

  def get_prep_value(self, value):
     return encrypt_if_not_encrypted(value, self.encryptor)

  def to_python(self, value):
    return decrypt_if_not_decrypted(value, self.encryptor)


def encrypt_if_not_encrypted(value, encryptor):
  if isinstance(value, EncryptedString):
    return value
  else:
    encrypted = encryptor.encrypt(value)
    return EncryptedString(encrypted)

def decrypt_if_not_decrypted(value, encryptor):
  if isinstance(value, DecryptedString):
    return value
  else:
    encrypted = encryptor.decrypt(value)
    return DecryptedString(encrypted)


class EncryptedString(str):
  pass

class DecryptedString(str):
  pass

and the Encryptor looks like:
class Encryptor(object):
  def __init__(self, cipher_type):
    imp = __import__('Crypto.Cipher', globals(), locals(), [cipher_type], -1)
    self.cipher = getattr(imp, cipher_type).new(settings.SECRET_KEY[:32])

  def decrypt(self, value):
    #values should always be encrypted no matter what!
    #raise an error if tthings may have been tampered with
    return self.cipher.decrypt(binascii.a2b_hex(str(value))).split('\0')[0]

  def encrypt(self, value):
    if value is not None and not isinstance(value, EncryptedString):
      padding  = self.cipher.block_size - len(value) % self.cipher.block_size
      if padding and padding < self.cipher.block_size:
        value += ""\0"" + ''.join([random.choice(string.printable) for index in range(padding-1)])
      value = EncryptedString(binascii.b2a_hex(self.cipher.encrypt(value)))
    return value

When saving a model, an error, Odd-length string, occurs, as a result of attempting to decrypt an already decrypted string.  When debugging, it appears as  to_python ends up being called twice, the first with the encrypted value, and the second time with the decrypted value, but not actually as a type Decrypted, but as a raw string, causing the error.  Furthermore get_prep_value is never called.
What am I doing wrong?
This should not be that hard - does anyone else think this Django field code is very poorly written, especially when it comes to custom fields, and not that extensible?  Simple overridable pre_save and post_fetch methods would easily solve this problem.
","Since this question was originally answered, a number of packages have been written to solve this exact problem.  
For example, as of 2018, the package django-encrypted-model-fields handles this with a syntax like
from encrypted_model_fields.fields import EncryptedCharField

class MyModel(models.Model):
    encrypted_char_field = EncryptedCharField(max_length=100)
    ...

As a rule of thumb, it's usually a bad idea to roll your own solution to a security challenge when a more mature solution exists out there -- the community is a better tester and maintainer than you are.
","13108","<python><django><pycrypto>","14","0","5","2018-09-27 21:50:26","13345360","1","9","773210","","2012-11-07 05:39:48","2012-10-25 20:54:30",""
"50080459","Failed installing pycrypto","I encountered a problem when I try to download a certain package:
C:\Python27\Scripts>pip install pycrypto

Collecting pycrypto
Using cached https://files.pythonhosted.org/packages/60/db/645aa9af249f059cc3a368b118de33889219e0362141e75d4eaf6f80f163/pycrypto-2.6.1.tar.gz
Installing collected packages: pycrypto
  Running setup.py install for pycrypto ... error
    Complete output from command c:\python27\python.exe -u -c ""import setuptools
, tokenize;__file__='c:\\users\\beheer~1\\appdata\\local\\temp\\pip-install-_luv
op\\pycrypto\\setup.py';f=getattr(tokenize, 'open', open)(__file__);code=f.read(
).replace('\r\n', '\n');f.close();exec(compile(code, __file__, 'exec'))"" install
 --record c:\users\beheer~1\appdata\local\temp\pip-record-jct20j\install-record.
txt --single-version-externally-managed --compile:
    running install
    running build
    running build_py
    creating build
    creating build\lib.win32-2.7
    creating build\lib.win32-2.7\Crypto
    copying lib\Crypto\pct_warnings.py -> build\lib.win32-2.7\Crypto
    copying lib\Crypto\__init__.py -> build\lib.win32-2.7\Crypto
    creating build\lib.win32-2.7\Crypto\Hash
    copying lib\Crypto\Hash\hashalgo.py -> build\lib.win32-2.7\Crypto\Hash
    copying lib\Crypto\Hash\HMAC.py -> build\lib.win32-2.7\Crypto\Hash
    copying lib\Crypto\Hash\MD2.py -> build\lib.win32-2.7\Crypto\Hash
    copying lib\Crypto\Hash\MD4.py -> build\lib.win32-2.7\Crypto\Hash
    copying lib\Crypto\Hash\MD5.py -> build\lib.win32-2.7\Crypto\Hash
    copying lib\Crypto\Hash\RIPEMD.py -> build\lib.win32-2.7\Crypto\Hash
    copying lib\Crypto\Hash\SHA.py -> build\lib.win32-2.7\Crypto\Hash
    copying lib\Crypto\Hash\SHA224.py -> build\lib.win32-2.7\Crypto\Hash
    copying lib\Crypto\Hash\SHA256.py -> build\lib.win32-2.7\Crypto\Hash
    copying lib\Crypto\Hash\SHA384.py -> build\lib.win32-2.7\Crypto\Hash
    copying lib\Crypto\Hash\SHA512.py -> build\lib.win32-2.7\Crypto\Hash
    copying lib\Crypto\Hash\__init__.py -> build\lib.win32-2.7\Crypto\Hash
    creating build\lib.win32-2.7\Crypto\Cipher
    copying lib\Crypto\Cipher\AES.py -> build\lib.win32-2.7\Crypto\Cipher
    copying lib\Crypto\Cipher\ARC2.py -> build\lib.win32-2.7\Crypto\Cipher
    copying lib\Crypto\Cipher\ARC4.py -> build\lib.win32-2.7\Crypto\Cipher
    copying lib\Crypto\Cipher\blockalgo.py -> build\lib.win32-2.7\Crypto\Cipher
    copying lib\Crypto\Cipher\Blowfish.py -> build\lib.win32-2.7\Crypto\Cipher
    copying lib\Crypto\Cipher\CAST.py -> build\lib.win32-2.7\Crypto\Cipher
    copying lib\Crypto\Cipher\DES.py -> build\lib.win32-2.7\Crypto\Cipher
    copying lib\Crypto\Cipher\DES3.py -> build\lib.win32-2.7\Crypto\Cipher
    copying lib\Crypto\Cipher\PKCS1_OAEP.py -> build\lib.win32-2.7\Crypto\Cipher

    copying lib\Crypto\Cipher\PKCS1_v1_5.py -> build\lib.win32-2.7\Crypto\Cipher

    copying lib\Crypto\Cipher\XOR.py -> build\lib.win32-2.7\Crypto\Cipher
    copying lib\Crypto\Cipher\__init__.py -> build\lib.win32-2.7\Crypto\Cipher
    creating build\lib.win32-2.7\Crypto\Util
    copying lib\Crypto\Util\asn1.py -> build\lib.win32-2.7\Crypto\Util
    copying lib\Crypto\Util\Counter.py -> build\lib.win32-2.7\Crypto\Util
    copying lib\Crypto\Util\number.py -> build\lib.win32-2.7\Crypto\Util
    copying lib\Crypto\Util\py21compat.py -> build\lib.win32-2.7\Crypto\Util
    copying lib\Crypto\Util\py3compat.py -> build\lib.win32-2.7\Crypto\Util
    copying lib\Crypto\Util\randpool.py -> build\lib.win32-2.7\Crypto\Util
    copying lib\Crypto\Util\RFC1751.py -> build\lib.win32-2.7\Crypto\Util
    copying lib\Crypto\Util\winrandom.py -> build\lib.win32-2.7\Crypto\Util
    copying lib\Crypto\Util\_number_new.py -> build\lib.win32-2.7\Crypto\Util
    copying lib\Crypto\Util\__init__.py -> build\lib.win32-2.7\Crypto\Util
    creating build\lib.win32-2.7\Crypto\Random
    copying lib\Crypto\Random\random.py -> build\lib.win32-2.7\Crypto\Random
    copying lib\Crypto\Random\_UserFriendlyRNG.py -> build\lib.win32-2.7\Crypto\
Random
    copying lib\Crypto\Random\__init__.py -> build\lib.win32-2.7\Crypto\Random
    creating build\lib.win32-2.7\Crypto\Random\Fortuna
    copying lib\Crypto\Random\Fortuna\FortunaAccumulator.py -> build\lib.win32-2
.7\Crypto\Random\Fortuna
    copying lib\Crypto\Random\Fortuna\FortunaGenerator.py -> build\lib.win32-2.7
\Crypto\Random\Fortuna
    copying lib\Crypto\Random\Fortuna\SHAd256.py -> build\lib.win32-2.7\Crypto\R
andom\Fortuna
    copying lib\Crypto\Random\Fortuna\__init__.py -> build\lib.win32-2.7\Crypto\
Random\Fortuna
    creating build\lib.win32-2.7\Crypto\Random\OSRNG
    copying lib\Crypto\Random\OSRNG\fallback.py -> build\lib.win32-2.7\Crypto\Ra
ndom\OSRNG
    copying lib\Crypto\Random\OSRNG\nt.py -> build\lib.win32-2.7\Crypto\Random\O
SRNG
    copying lib\Crypto\Random\OSRNG\posix.py -> build\lib.win32-2.7\Crypto\Rando
m\OSRNG
    copying lib\Crypto\Random\OSRNG\rng_base.py -> build\lib.win32-2.7\Crypto\Ra
ndom\OSRNG
    copying lib\Crypto\Random\OSRNG\__init__.py -> build\lib.win32-2.7\Crypto\Ra
ndom\OSRNG
    creating build\lib.win32-2.7\Crypto\SelfTest
    copying lib\Crypto\SelfTest\st_common.py -> build\lib.win32-2.7\Crypto\SelfT
est
    copying lib\Crypto\SelfTest\__init__.py -> build\lib.win32-2.7\Crypto\SelfTe
st
    creating build\lib.win32-2.7\Crypto\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\common.py -> build\lib.win32-2.7\Crypto\S
elfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_AES.py -> build\lib.win32-2.7\Crypto
\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_ARC2.py -> build\lib.win32-2.7\Crypt
o\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_ARC4.py -> build\lib.win32-2.7\Crypt
o\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_Blowfish.py -> build\lib.win32-2.7\C
rypto\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_CAST.py -> build\lib.win32-2.7\Crypt
o\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_DES.py -> build\lib.win32-2.7\Crypto
\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_DES3.py -> build\lib.win32-2.7\Crypt
o\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_pkcs1_15.py -> build\lib.win32-2.7\C
rypto\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_pkcs1_oaep.py -> build\lib.win32-2.7
\Crypto\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_XOR.py -> build\lib.win32-2.7\Crypto
\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\__init__.py -> build\lib.win32-2.7\Crypto
\SelfTest\Cipher
    creating build\lib.win32-2.7\Crypto\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\common.py -> build\lib.win32-2.7\Crypto\Sel
fTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_HMAC.py -> build\lib.win32-2.7\Crypto\
SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_MD2.py -> build\lib.win32-2.7\Crypto\S
elfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_MD4.py -> build\lib.win32-2.7\Crypto\S
elfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_MD5.py -> build\lib.win32-2.7\Crypto\S
elfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_RIPEMD.py -> build\lib.win32-2.7\Crypt
o\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_SHA.py -> build\lib.win32-2.7\Crypto\S
elfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_SHA224.py -> build\lib.win32-2.7\Crypt
o\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_SHA256.py -> build\lib.win32-2.7\Crypt
o\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_SHA384.py -> build\lib.win32-2.7\Crypt
o\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_SHA512.py -> build\lib.win32-2.7\Crypt
o\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\__init__.py -> build\lib.win32-2.7\Crypto\S
elfTest\Hash
    creating build\lib.win32-2.7\Crypto\SelfTest\Protocol
    copying lib\Crypto\SelfTest\Protocol\test_AllOrNothing.py -> build\lib.win32
-2.7\Crypto\SelfTest\Protocol
    copying lib\Crypto\SelfTest\Protocol\test_chaffing.py -> build\lib.win32-2.7
\Crypto\SelfTest\Protocol
    copying lib\Crypto\SelfTest\Protocol\test_KDF.py -> build\lib.win32-2.7\Cryp
to\SelfTest\Protocol
    copying lib\Crypto\SelfTest\Protocol\test_rfc1751.py -> build\lib.win32-2.7\
Crypto\SelfTest\Protocol
    copying lib\Crypto\SelfTest\Protocol\__init__.py -> build\lib.win32-2.7\Cryp
to\SelfTest\Protocol
    creating build\lib.win32-2.7\Crypto\SelfTest\PublicKey
    copying lib\Crypto\SelfTest\PublicKey\test_DSA.py -> build\lib.win32-2.7\Cry
pto\SelfTest\PublicKey
    copying lib\Crypto\SelfTest\PublicKey\test_ElGamal.py -> build\lib.win32-2.7
\Crypto\SelfTest\PublicKey
    copying lib\Crypto\SelfTest\PublicKey\test_importKey.py -> build\lib.win32-2
.7\Crypto\SelfTest\PublicKey
    copying lib\Crypto\SelfTest\PublicKey\test_RSA.py -> build\lib.win32-2.7\Cry
pto\SelfTest\PublicKey
    copying lib\Crypto\SelfTest\PublicKey\__init__.py -> build\lib.win32-2.7\Cry
pto\SelfTest\PublicKey
    creating build\lib.win32-2.7\Crypto\SelfTest\Random
    copying lib\Crypto\SelfTest\Random\test_random.py -> build\lib.win32-2.7\Cry
pto\SelfTest\Random
    copying lib\Crypto\SelfTest\Random\test_rpoolcompat.py -> build\lib.win32-2.
7\Crypto\SelfTest\Random
    copying lib\Crypto\SelfTest\Random\test__UserFriendlyRNG.py -> build\lib.win
32-2.7\Crypto\SelfTest\Random
    copying lib\Crypto\SelfTest\Random\__init__.py -> build\lib.win32-2.7\Crypto
\SelfTest\Random
    creating build\lib.win32-2.7\Crypto\SelfTest\Random\Fortuna
    copying lib\Crypto\SelfTest\Random\Fortuna\test_FortunaAccumulator.py -> bui
ld\lib.win32-2.7\Crypto\SelfTest\Random\Fortuna
    copying lib\Crypto\SelfTest\Random\Fortuna\test_FortunaGenerator.py -> build
\lib.win32-2.7\Crypto\SelfTest\Random\Fortuna
    copying lib\Crypto\SelfTest\Random\Fortuna\test_SHAd256.py -> build\lib.win3
2-2.7\Crypto\SelfTest\Random\Fortuna
    copying lib\Crypto\SelfTest\Random\Fortuna\__init__.py -> build\lib.win32-2.
7\Crypto\SelfTest\Random\Fortuna
    creating build\lib.win32-2.7\Crypto\SelfTest\Random\OSRNG
    copying lib\Crypto\SelfTest\Random\OSRNG\test_fallback.py -> build\lib.win32
-2.7\Crypto\SelfTest\Random\OSRNG
    copying lib\Crypto\SelfTest\Random\OSRNG\test_generic.py -> build\lib.win32-
2.7\Crypto\SelfTest\Random\OSRNG
    copying lib\Crypto\SelfTest\Random\OSRNG\test_nt.py -> build\lib.win32-2.7\C
rypto\SelfTest\Random\OSRNG
    copying lib\Crypto\SelfTest\Random\OSRNG\test_posix.py -> build\lib.win32-2.
7\Crypto\SelfTest\Random\OSRNG
    copying lib\Crypto\SelfTest\Random\OSRNG\test_winrandom.py -> build\lib.win3
2-2.7\Crypto\SelfTest\Random\OSRNG
    copying lib\Crypto\SelfTest\Random\OSRNG\__init__.py -> build\lib.win32-2.7\
Crypto\SelfTest\Random\OSRNG
    creating build\lib.win32-2.7\Crypto\SelfTest\Util
    copying lib\Crypto\SelfTest\Util\test_asn1.py -> build\lib.win32-2.7\Crypto\
SelfTest\Util
    copying lib\Crypto\SelfTest\Util\test_Counter.py -> build\lib.win32-2.7\Cryp
to\SelfTest\Util
    copying lib\Crypto\SelfTest\Util\test_number.py -> build\lib.win32-2.7\Crypt
o\SelfTest\Util
    copying lib\Crypto\SelfTest\Util\test_winrandom.py -> build\lib.win32-2.7\Cr
ypto\SelfTest\Util
    copying lib\Crypto\SelfTest\Util\__init__.py -> build\lib.win32-2.7\Crypto\S
elfTest\Util
    creating build\lib.win32-2.7\Crypto\SelfTest\Signature
    copying lib\Crypto\SelfTest\Signature\test_pkcs1_15.py -> build\lib.win32-2.
7\Crypto\SelfTest\Signature
    copying lib\Crypto\SelfTest\Signature\test_pkcs1_pss.py -> build\lib.win32-2
.7\Crypto\SelfTest\Signature
    copying lib\Crypto\SelfTest\Signature\__init__.py -> build\lib.win32-2.7\Cry
pto\SelfTest\Signature
    creating build\lib.win32-2.7\Crypto\Protocol
    copying lib\Crypto\Protocol\AllOrNothing.py -> build\lib.win32-2.7\Crypto\Pr
otocol
    copying lib\Crypto\Protocol\Chaffing.py -> build\lib.win32-2.7\Crypto\Protoc
ol
    copying lib\Crypto\Protocol\KDF.py -> build\lib.win32-2.7\Crypto\Protocol
    copying lib\Crypto\Protocol\__init__.py -> build\lib.win32-2.7\Crypto\Protoc
ol
    creating build\lib.win32-2.7\Crypto\PublicKey
    copying lib\Crypto\PublicKey\DSA.py -> build\lib.win32-2.7\Crypto\PublicKey
    copying lib\Crypto\PublicKey\ElGamal.py -> build\lib.win32-2.7\Crypto\Public
Key
    copying lib\Crypto\PublicKey\pubkey.py -> build\lib.win32-2.7\Crypto\PublicK
ey
    copying lib\Crypto\PublicKey\RSA.py -> build\lib.win32-2.7\Crypto\PublicKey
    copying lib\Crypto\PublicKey\_DSA.py -> build\lib.win32-2.7\Crypto\PublicKey

    copying lib\Crypto\PublicKey\_RSA.py -> build\lib.win32-2.7\Crypto\PublicKey

    copying lib\Crypto\PublicKey\_slowmath.py -> build\lib.win32-2.7\Crypto\Publ
icKey
    copying lib\Crypto\PublicKey\__init__.py -> build\lib.win32-2.7\Crypto\Publi
cKey
    creating build\lib.win32-2.7\Crypto\Signature
    copying lib\Crypto\Signature\PKCS1_PSS.py -> build\lib.win32-2.7\Crypto\Sign
ature
    copying lib\Crypto\Signature\PKCS1_v1_5.py -> build\lib.win32-2.7\Crypto\Sig
nature
    copying lib\Crypto\Signature\__init__.py -> build\lib.win32-2.7\Crypto\Signa
ture
    running build_ext
    warning: GMP or MPIR library not found; Not building Crypto.PublicKey._fastm
ath.
    building 'Crypto.Random.OSRNG.winrandom' extension
    error: Microsoft Visual C++ 9.0 is required. Get it from http://aka.ms/vcpyt
hon27


----------------------------------------
Command ""c:\python27\python.exe -u -c ""import setuptools, 
tokenize;__file__='c:\
\users\\beheer~1\\appdata\\local\\temp\\pip-install- 
_luvop\\pycrypto\\setup.py';
f=getattr(tokenize, 'open', open) 
(__file__);code=f.read().replace('\r\n', '\n');
f.close();exec(compile(code, __file__, 'exec'))"" install --record 
c:\users\behee
r~1\appdata\local\temp\pip-record-jct20j\install-record.txt --single- 
version-ext
ernally-managed --compile"" failed with error code 1 in 
c:\users\beheer~1\appdata
\local\temp\pip-install-_luvop\pycrypto\

I already tried this command:
    pip install --upgrade setuptools

And this still didnt work.
","The solution was simple
just 
    pip uninstall pycrypto
    pip install pycryptodome

And every should just work fine, it worked for me!
","12988","<python><python-2.7><pip><pycrypto>","6","22","2","2019-10-16 14:24:10","50099842","10","5","6622817","","2018-04-28 20:20:40","2018-04-28 19:47:26",""
"50080459","Failed installing pycrypto","I encountered a problem when I try to download a certain package:
C:\Python27\Scripts>pip install pycrypto

Collecting pycrypto
Using cached https://files.pythonhosted.org/packages/60/db/645aa9af249f059cc3a368b118de33889219e0362141e75d4eaf6f80f163/pycrypto-2.6.1.tar.gz
Installing collected packages: pycrypto
  Running setup.py install for pycrypto ... error
    Complete output from command c:\python27\python.exe -u -c ""import setuptools
, tokenize;__file__='c:\\users\\beheer~1\\appdata\\local\\temp\\pip-install-_luv
op\\pycrypto\\setup.py';f=getattr(tokenize, 'open', open)(__file__);code=f.read(
).replace('\r\n', '\n');f.close();exec(compile(code, __file__, 'exec'))"" install
 --record c:\users\beheer~1\appdata\local\temp\pip-record-jct20j\install-record.
txt --single-version-externally-managed --compile:
    running install
    running build
    running build_py
    creating build
    creating build\lib.win32-2.7
    creating build\lib.win32-2.7\Crypto
    copying lib\Crypto\pct_warnings.py -> build\lib.win32-2.7\Crypto
    copying lib\Crypto\__init__.py -> build\lib.win32-2.7\Crypto
    creating build\lib.win32-2.7\Crypto\Hash
    copying lib\Crypto\Hash\hashalgo.py -> build\lib.win32-2.7\Crypto\Hash
    copying lib\Crypto\Hash\HMAC.py -> build\lib.win32-2.7\Crypto\Hash
    copying lib\Crypto\Hash\MD2.py -> build\lib.win32-2.7\Crypto\Hash
    copying lib\Crypto\Hash\MD4.py -> build\lib.win32-2.7\Crypto\Hash
    copying lib\Crypto\Hash\MD5.py -> build\lib.win32-2.7\Crypto\Hash
    copying lib\Crypto\Hash\RIPEMD.py -> build\lib.win32-2.7\Crypto\Hash
    copying lib\Crypto\Hash\SHA.py -> build\lib.win32-2.7\Crypto\Hash
    copying lib\Crypto\Hash\SHA224.py -> build\lib.win32-2.7\Crypto\Hash
    copying lib\Crypto\Hash\SHA256.py -> build\lib.win32-2.7\Crypto\Hash
    copying lib\Crypto\Hash\SHA384.py -> build\lib.win32-2.7\Crypto\Hash
    copying lib\Crypto\Hash\SHA512.py -> build\lib.win32-2.7\Crypto\Hash
    copying lib\Crypto\Hash\__init__.py -> build\lib.win32-2.7\Crypto\Hash
    creating build\lib.win32-2.7\Crypto\Cipher
    copying lib\Crypto\Cipher\AES.py -> build\lib.win32-2.7\Crypto\Cipher
    copying lib\Crypto\Cipher\ARC2.py -> build\lib.win32-2.7\Crypto\Cipher
    copying lib\Crypto\Cipher\ARC4.py -> build\lib.win32-2.7\Crypto\Cipher
    copying lib\Crypto\Cipher\blockalgo.py -> build\lib.win32-2.7\Crypto\Cipher
    copying lib\Crypto\Cipher\Blowfish.py -> build\lib.win32-2.7\Crypto\Cipher
    copying lib\Crypto\Cipher\CAST.py -> build\lib.win32-2.7\Crypto\Cipher
    copying lib\Crypto\Cipher\DES.py -> build\lib.win32-2.7\Crypto\Cipher
    copying lib\Crypto\Cipher\DES3.py -> build\lib.win32-2.7\Crypto\Cipher
    copying lib\Crypto\Cipher\PKCS1_OAEP.py -> build\lib.win32-2.7\Crypto\Cipher

    copying lib\Crypto\Cipher\PKCS1_v1_5.py -> build\lib.win32-2.7\Crypto\Cipher

    copying lib\Crypto\Cipher\XOR.py -> build\lib.win32-2.7\Crypto\Cipher
    copying lib\Crypto\Cipher\__init__.py -> build\lib.win32-2.7\Crypto\Cipher
    creating build\lib.win32-2.7\Crypto\Util
    copying lib\Crypto\Util\asn1.py -> build\lib.win32-2.7\Crypto\Util
    copying lib\Crypto\Util\Counter.py -> build\lib.win32-2.7\Crypto\Util
    copying lib\Crypto\Util\number.py -> build\lib.win32-2.7\Crypto\Util
    copying lib\Crypto\Util\py21compat.py -> build\lib.win32-2.7\Crypto\Util
    copying lib\Crypto\Util\py3compat.py -> build\lib.win32-2.7\Crypto\Util
    copying lib\Crypto\Util\randpool.py -> build\lib.win32-2.7\Crypto\Util
    copying lib\Crypto\Util\RFC1751.py -> build\lib.win32-2.7\Crypto\Util
    copying lib\Crypto\Util\winrandom.py -> build\lib.win32-2.7\Crypto\Util
    copying lib\Crypto\Util\_number_new.py -> build\lib.win32-2.7\Crypto\Util
    copying lib\Crypto\Util\__init__.py -> build\lib.win32-2.7\Crypto\Util
    creating build\lib.win32-2.7\Crypto\Random
    copying lib\Crypto\Random\random.py -> build\lib.win32-2.7\Crypto\Random
    copying lib\Crypto\Random\_UserFriendlyRNG.py -> build\lib.win32-2.7\Crypto\
Random
    copying lib\Crypto\Random\__init__.py -> build\lib.win32-2.7\Crypto\Random
    creating build\lib.win32-2.7\Crypto\Random\Fortuna
    copying lib\Crypto\Random\Fortuna\FortunaAccumulator.py -> build\lib.win32-2
.7\Crypto\Random\Fortuna
    copying lib\Crypto\Random\Fortuna\FortunaGenerator.py -> build\lib.win32-2.7
\Crypto\Random\Fortuna
    copying lib\Crypto\Random\Fortuna\SHAd256.py -> build\lib.win32-2.7\Crypto\R
andom\Fortuna
    copying lib\Crypto\Random\Fortuna\__init__.py -> build\lib.win32-2.7\Crypto\
Random\Fortuna
    creating build\lib.win32-2.7\Crypto\Random\OSRNG
    copying lib\Crypto\Random\OSRNG\fallback.py -> build\lib.win32-2.7\Crypto\Ra
ndom\OSRNG
    copying lib\Crypto\Random\OSRNG\nt.py -> build\lib.win32-2.7\Crypto\Random\O
SRNG
    copying lib\Crypto\Random\OSRNG\posix.py -> build\lib.win32-2.7\Crypto\Rando
m\OSRNG
    copying lib\Crypto\Random\OSRNG\rng_base.py -> build\lib.win32-2.7\Crypto\Ra
ndom\OSRNG
    copying lib\Crypto\Random\OSRNG\__init__.py -> build\lib.win32-2.7\Crypto\Ra
ndom\OSRNG
    creating build\lib.win32-2.7\Crypto\SelfTest
    copying lib\Crypto\SelfTest\st_common.py -> build\lib.win32-2.7\Crypto\SelfT
est
    copying lib\Crypto\SelfTest\__init__.py -> build\lib.win32-2.7\Crypto\SelfTe
st
    creating build\lib.win32-2.7\Crypto\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\common.py -> build\lib.win32-2.7\Crypto\S
elfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_AES.py -> build\lib.win32-2.7\Crypto
\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_ARC2.py -> build\lib.win32-2.7\Crypt
o\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_ARC4.py -> build\lib.win32-2.7\Crypt
o\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_Blowfish.py -> build\lib.win32-2.7\C
rypto\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_CAST.py -> build\lib.win32-2.7\Crypt
o\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_DES.py -> build\lib.win32-2.7\Crypto
\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_DES3.py -> build\lib.win32-2.7\Crypt
o\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_pkcs1_15.py -> build\lib.win32-2.7\C
rypto\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_pkcs1_oaep.py -> build\lib.win32-2.7
\Crypto\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_XOR.py -> build\lib.win32-2.7\Crypto
\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\__init__.py -> build\lib.win32-2.7\Crypto
\SelfTest\Cipher
    creating build\lib.win32-2.7\Crypto\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\common.py -> build\lib.win32-2.7\Crypto\Sel
fTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_HMAC.py -> build\lib.win32-2.7\Crypto\
SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_MD2.py -> build\lib.win32-2.7\Crypto\S
elfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_MD4.py -> build\lib.win32-2.7\Crypto\S
elfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_MD5.py -> build\lib.win32-2.7\Crypto\S
elfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_RIPEMD.py -> build\lib.win32-2.7\Crypt
o\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_SHA.py -> build\lib.win32-2.7\Crypto\S
elfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_SHA224.py -> build\lib.win32-2.7\Crypt
o\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_SHA256.py -> build\lib.win32-2.7\Crypt
o\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_SHA384.py -> build\lib.win32-2.7\Crypt
o\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_SHA512.py -> build\lib.win32-2.7\Crypt
o\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\__init__.py -> build\lib.win32-2.7\Crypto\S
elfTest\Hash
    creating build\lib.win32-2.7\Crypto\SelfTest\Protocol
    copying lib\Crypto\SelfTest\Protocol\test_AllOrNothing.py -> build\lib.win32
-2.7\Crypto\SelfTest\Protocol
    copying lib\Crypto\SelfTest\Protocol\test_chaffing.py -> build\lib.win32-2.7
\Crypto\SelfTest\Protocol
    copying lib\Crypto\SelfTest\Protocol\test_KDF.py -> build\lib.win32-2.7\Cryp
to\SelfTest\Protocol
    copying lib\Crypto\SelfTest\Protocol\test_rfc1751.py -> build\lib.win32-2.7\
Crypto\SelfTest\Protocol
    copying lib\Crypto\SelfTest\Protocol\__init__.py -> build\lib.win32-2.7\Cryp
to\SelfTest\Protocol
    creating build\lib.win32-2.7\Crypto\SelfTest\PublicKey
    copying lib\Crypto\SelfTest\PublicKey\test_DSA.py -> build\lib.win32-2.7\Cry
pto\SelfTest\PublicKey
    copying lib\Crypto\SelfTest\PublicKey\test_ElGamal.py -> build\lib.win32-2.7
\Crypto\SelfTest\PublicKey
    copying lib\Crypto\SelfTest\PublicKey\test_importKey.py -> build\lib.win32-2
.7\Crypto\SelfTest\PublicKey
    copying lib\Crypto\SelfTest\PublicKey\test_RSA.py -> build\lib.win32-2.7\Cry
pto\SelfTest\PublicKey
    copying lib\Crypto\SelfTest\PublicKey\__init__.py -> build\lib.win32-2.7\Cry
pto\SelfTest\PublicKey
    creating build\lib.win32-2.7\Crypto\SelfTest\Random
    copying lib\Crypto\SelfTest\Random\test_random.py -> build\lib.win32-2.7\Cry
pto\SelfTest\Random
    copying lib\Crypto\SelfTest\Random\test_rpoolcompat.py -> build\lib.win32-2.
7\Crypto\SelfTest\Random
    copying lib\Crypto\SelfTest\Random\test__UserFriendlyRNG.py -> build\lib.win
32-2.7\Crypto\SelfTest\Random
    copying lib\Crypto\SelfTest\Random\__init__.py -> build\lib.win32-2.7\Crypto
\SelfTest\Random
    creating build\lib.win32-2.7\Crypto\SelfTest\Random\Fortuna
    copying lib\Crypto\SelfTest\Random\Fortuna\test_FortunaAccumulator.py -> bui
ld\lib.win32-2.7\Crypto\SelfTest\Random\Fortuna
    copying lib\Crypto\SelfTest\Random\Fortuna\test_FortunaGenerator.py -> build
\lib.win32-2.7\Crypto\SelfTest\Random\Fortuna
    copying lib\Crypto\SelfTest\Random\Fortuna\test_SHAd256.py -> build\lib.win3
2-2.7\Crypto\SelfTest\Random\Fortuna
    copying lib\Crypto\SelfTest\Random\Fortuna\__init__.py -> build\lib.win32-2.
7\Crypto\SelfTest\Random\Fortuna
    creating build\lib.win32-2.7\Crypto\SelfTest\Random\OSRNG
    copying lib\Crypto\SelfTest\Random\OSRNG\test_fallback.py -> build\lib.win32
-2.7\Crypto\SelfTest\Random\OSRNG
    copying lib\Crypto\SelfTest\Random\OSRNG\test_generic.py -> build\lib.win32-
2.7\Crypto\SelfTest\Random\OSRNG
    copying lib\Crypto\SelfTest\Random\OSRNG\test_nt.py -> build\lib.win32-2.7\C
rypto\SelfTest\Random\OSRNG
    copying lib\Crypto\SelfTest\Random\OSRNG\test_posix.py -> build\lib.win32-2.
7\Crypto\SelfTest\Random\OSRNG
    copying lib\Crypto\SelfTest\Random\OSRNG\test_winrandom.py -> build\lib.win3
2-2.7\Crypto\SelfTest\Random\OSRNG
    copying lib\Crypto\SelfTest\Random\OSRNG\__init__.py -> build\lib.win32-2.7\
Crypto\SelfTest\Random\OSRNG
    creating build\lib.win32-2.7\Crypto\SelfTest\Util
    copying lib\Crypto\SelfTest\Util\test_asn1.py -> build\lib.win32-2.7\Crypto\
SelfTest\Util
    copying lib\Crypto\SelfTest\Util\test_Counter.py -> build\lib.win32-2.7\Cryp
to\SelfTest\Util
    copying lib\Crypto\SelfTest\Util\test_number.py -> build\lib.win32-2.7\Crypt
o\SelfTest\Util
    copying lib\Crypto\SelfTest\Util\test_winrandom.py -> build\lib.win32-2.7\Cr
ypto\SelfTest\Util
    copying lib\Crypto\SelfTest\Util\__init__.py -> build\lib.win32-2.7\Crypto\S
elfTest\Util
    creating build\lib.win32-2.7\Crypto\SelfTest\Signature
    copying lib\Crypto\SelfTest\Signature\test_pkcs1_15.py -> build\lib.win32-2.
7\Crypto\SelfTest\Signature
    copying lib\Crypto\SelfTest\Signature\test_pkcs1_pss.py -> build\lib.win32-2
.7\Crypto\SelfTest\Signature
    copying lib\Crypto\SelfTest\Signature\__init__.py -> build\lib.win32-2.7\Cry
pto\SelfTest\Signature
    creating build\lib.win32-2.7\Crypto\Protocol
    copying lib\Crypto\Protocol\AllOrNothing.py -> build\lib.win32-2.7\Crypto\Pr
otocol
    copying lib\Crypto\Protocol\Chaffing.py -> build\lib.win32-2.7\Crypto\Protoc
ol
    copying lib\Crypto\Protocol\KDF.py -> build\lib.win32-2.7\Crypto\Protocol
    copying lib\Crypto\Protocol\__init__.py -> build\lib.win32-2.7\Crypto\Protoc
ol
    creating build\lib.win32-2.7\Crypto\PublicKey
    copying lib\Crypto\PublicKey\DSA.py -> build\lib.win32-2.7\Crypto\PublicKey
    copying lib\Crypto\PublicKey\ElGamal.py -> build\lib.win32-2.7\Crypto\Public
Key
    copying lib\Crypto\PublicKey\pubkey.py -> build\lib.win32-2.7\Crypto\PublicK
ey
    copying lib\Crypto\PublicKey\RSA.py -> build\lib.win32-2.7\Crypto\PublicKey
    copying lib\Crypto\PublicKey\_DSA.py -> build\lib.win32-2.7\Crypto\PublicKey

    copying lib\Crypto\PublicKey\_RSA.py -> build\lib.win32-2.7\Crypto\PublicKey

    copying lib\Crypto\PublicKey\_slowmath.py -> build\lib.win32-2.7\Crypto\Publ
icKey
    copying lib\Crypto\PublicKey\__init__.py -> build\lib.win32-2.7\Crypto\Publi
cKey
    creating build\lib.win32-2.7\Crypto\Signature
    copying lib\Crypto\Signature\PKCS1_PSS.py -> build\lib.win32-2.7\Crypto\Sign
ature
    copying lib\Crypto\Signature\PKCS1_v1_5.py -> build\lib.win32-2.7\Crypto\Sig
nature
    copying lib\Crypto\Signature\__init__.py -> build\lib.win32-2.7\Crypto\Signa
ture
    running build_ext
    warning: GMP or MPIR library not found; Not building Crypto.PublicKey._fastm
ath.
    building 'Crypto.Random.OSRNG.winrandom' extension
    error: Microsoft Visual C++ 9.0 is required. Get it from http://aka.ms/vcpyt
hon27


----------------------------------------
Command ""c:\python27\python.exe -u -c ""import setuptools, 
tokenize;__file__='c:\
\users\\beheer~1\\appdata\\local\\temp\\pip-install- 
_luvop\\pycrypto\\setup.py';
f=getattr(tokenize, 'open', open) 
(__file__);code=f.read().replace('\r\n', '\n');
f.close();exec(compile(code, __file__, 'exec'))"" install --record 
c:\users\behee
r~1\appdata\local\temp\pip-record-jct20j\install-record.txt --single- 
version-ext
ernally-managed --compile"" failed with error code 1 in 
c:\users\beheer~1\appdata
\local\temp\pip-install-_luvop\pycrypto\

I already tried this command:
    pip install --upgrade setuptools

And this still didnt work.
","In some cases it is a dependency issue. It can be solved as follows:
     for python2 run the following command:
    sudo apt-get install build-essential libssl-dev libffi-dev python-dev
For python3 run
sudo apt-get install build-essential libssl-dev libffi-dev python3-dev
","12988","<python><python-2.7><pip><pycrypto>","6","2","2","2019-10-16 14:24:10","50099842","10","5","6622817","","2018-04-28 20:20:40","2018-04-28 19:47:26",""
"6350031","How to verify in pycrypto signature created by openssl?","I've created private/public key in openssl, and signed some data:
openssl genrsa -out private.pem 1024
openssl rsa -in private.pem -out public.pem -outform PEM -pubout
echo 'data to sign' > data.txt
openssl dgst -md5 < data.txt > hash
openssl rsautl -sign -inkey private.pem -keyform PEM -in hash  > signature

now in python, I'm trying to verify this data:
pubKey = open('public.pem').read()
data = open('data.txt').read()
signature = open('signature').read()

from Crypto import PublicKey
key = PublicKey.RSA.importKey(pubKey)
pub = key.publickey()
hash = MD5.new(data).hexdigest()
# here, hash is same, as contents of 'hash' file
print pub.verify(hash, signature) # <-- here

the problem is, that pub.verify expects second parameter to be one-element list with some large number. And I don't know how to convert binary data in file signature to this integer. Every example about pycrypto shows signature generated from pycrypto, and key.sign() generates correct signature in form (1832273432...2340234L, ). But I dont know how to use external signature.
If this is necessary, below are additional informations, which I don't exactly know how to interpret:
Brief technical information:

Format of digital signature: PKCS#7 “Signed-Data”
Public key procedure: DSS
Key length: 512 – 1024 bits
Public exponent:  2 +1
Public key format: X.509 v3 certificate
MD (Message Digest) algorithm: MD5 or RIPEMD-160 16

","This post gives you the best answer.
How do you verify an RSA SHA1 signature in Python?
pycrypto could not verify a signature created by OpenSSL. You may try M2Crypto. 
","12966","<python><openssl><python-2.x><pycrypto>","10","-1","4","2015-10-10 17:37:54","","0","4","798493","","2011-06-15 18:43:34","2011-06-14 20:55:34",""
"6350031","How to verify in pycrypto signature created by openssl?","I've created private/public key in openssl, and signed some data:
openssl genrsa -out private.pem 1024
openssl rsa -in private.pem -out public.pem -outform PEM -pubout
echo 'data to sign' > data.txt
openssl dgst -md5 < data.txt > hash
openssl rsautl -sign -inkey private.pem -keyform PEM -in hash  > signature

now in python, I'm trying to verify this data:
pubKey = open('public.pem').read()
data = open('data.txt').read()
signature = open('signature').read()

from Crypto import PublicKey
key = PublicKey.RSA.importKey(pubKey)
pub = key.publickey()
hash = MD5.new(data).hexdigest()
# here, hash is same, as contents of 'hash' file
print pub.verify(hash, signature) # <-- here

the problem is, that pub.verify expects second parameter to be one-element list with some large number. And I don't know how to convert binary data in file signature to this integer. Every example about pycrypto shows signature generated from pycrypto, and key.sign() generates correct signature in form (1832273432...2340234L, ). But I dont know how to use external signature.
If this is necessary, below are additional informations, which I don't exactly know how to interpret:
Brief technical information:

Format of digital signature: PKCS#7 “Signed-Data”
Public key procedure: DSS
Key length: 512 – 1024 bits
Public exponent:  2 +1
Public key format: X.509 v3 certificate
MD (Message Digest) algorithm: MD5 or RIPEMD-160 16

","Here is the solution.
from Crypto.Util import number
signature  = number.bytes_to_long(signature) #Convert the signature to long
print pub.verify(hash, (signature,) ) #Pass tuple to verify

","12966","<python><openssl><python-2.x><pycrypto>","10","0","4","2015-10-10 17:37:54","","0","4","798493","","2011-06-15 18:43:34","2011-06-14 20:55:34",""
"6350031","How to verify in pycrypto signature created by openssl?","I've created private/public key in openssl, and signed some data:
openssl genrsa -out private.pem 1024
openssl rsa -in private.pem -out public.pem -outform PEM -pubout
echo 'data to sign' > data.txt
openssl dgst -md5 < data.txt > hash
openssl rsautl -sign -inkey private.pem -keyform PEM -in hash  > signature

now in python, I'm trying to verify this data:
pubKey = open('public.pem').read()
data = open('data.txt').read()
signature = open('signature').read()

from Crypto import PublicKey
key = PublicKey.RSA.importKey(pubKey)
pub = key.publickey()
hash = MD5.new(data).hexdigest()
# here, hash is same, as contents of 'hash' file
print pub.verify(hash, signature) # <-- here

the problem is, that pub.verify expects second parameter to be one-element list with some large number. And I don't know how to convert binary data in file signature to this integer. Every example about pycrypto shows signature generated from pycrypto, and key.sign() generates correct signature in form (1832273432...2340234L, ). But I dont know how to use external signature.
If this is necessary, below are additional informations, which I don't exactly know how to interpret:
Brief technical information:

Format of digital signature: PKCS#7 “Signed-Data”
Public key procedure: DSS
Key length: 512 – 1024 bits
Public exponent:  2 +1
Public key format: X.509 v3 certificate
MD (Message Digest) algorithm: MD5 or RIPEMD-160 16

","The Crypto.Signature module is what you want. From the Crypto.Signature.PKCS1_v1_5 documentation:
key = RSA.importKey(open('pubkey.der').read())
h = SHA.new(message)
verifier = PKCS1_v1_5.new(key)
if verifier.verify(h, signature):
   print ""The signature is authentic.""
else:
   print ""The signature is not authentic.""

","12966","<python><openssl><python-2.x><pycrypto>","10","8","4","2015-10-10 17:37:54","","0","4","798493","","2011-06-15 18:43:34","2011-06-14 20:55:34",""
"6350031","How to verify in pycrypto signature created by openssl?","I've created private/public key in openssl, and signed some data:
openssl genrsa -out private.pem 1024
openssl rsa -in private.pem -out public.pem -outform PEM -pubout
echo 'data to sign' > data.txt
openssl dgst -md5 < data.txt > hash
openssl rsautl -sign -inkey private.pem -keyform PEM -in hash  > signature

now in python, I'm trying to verify this data:
pubKey = open('public.pem').read()
data = open('data.txt').read()
signature = open('signature').read()

from Crypto import PublicKey
key = PublicKey.RSA.importKey(pubKey)
pub = key.publickey()
hash = MD5.new(data).hexdigest()
# here, hash is same, as contents of 'hash' file
print pub.verify(hash, signature) # <-- here

the problem is, that pub.verify expects second parameter to be one-element list with some large number. And I don't know how to convert binary data in file signature to this integer. Every example about pycrypto shows signature generated from pycrypto, and key.sign() generates correct signature in form (1832273432...2340234L, ). But I dont know how to use external signature.
If this is necessary, below are additional informations, which I don't exactly know how to interpret:
Brief technical information:

Format of digital signature: PKCS#7 “Signed-Data”
Public key procedure: DSS
Key length: 512 – 1024 bits
Public exponent:  2 +1
Public key format: X.509 v3 certificate
MD (Message Digest) algorithm: MD5 or RIPEMD-160 16

","I had the same problem and here are examples for both, generating and verifying with openssl and python. Hope this helps someone...
Bash:
#!/bin/bash
# Generate keys
openssl genrsa -out priv.pem
# Export public key
openssl rsa -pubout -in priv.pem -out pub.pem
# Create test file
echo test123 > test.txt
# Create SHA1 signature
openssl dgst -sha1 -sign priv.pem -out test.txt.sig test.txt
# Verify SHA1 signature
openssl dgst -sha1 -verify pub.pem -signature test.txt.sig test.txt

Python:
#!/usr/bin/python
from Crypto.Signature import PKCS1_v1_5
from Crypto.PublicKey import RSA
from Crypto.Hash import SHA
from Crypto import Random
# Read public key from file
fd = open('pub.pem', 'r')
key_data = fd.read()
fd.close()
# Load public key
key = RSA.importKey(key_data)
# Read test file
fd = open('test.txt', 'r')
message = fd.read()
fd.close()
# Create SHA1 hash object
h = SHA.new(message)
# Create PKCS1 handler
cipher = PKCS1_v1_5.new(key)
# Read signature file
fd = open('test.txt.sig', 'r')
signature = fd.read()
fd.close()
# Verify signature
print cipher.verify(h, signature)
# Read private key from file
fd = open('priv.pem', 'r')
priv_key_data = fd.read()
fd.close()
# Load private key
priv_key = RSA.importKey(priv_key_data)
# Create PKCS1 handler
priv_cipher = PKCS1_v1_5.new(priv_key)
# Sign hash of test file content and compare
signature2 = priv_cipher.sign(h)
if signature == signature2:
    print ""Match!! :)""

After some more reading i've learned (https://en.wikipedia.org/wiki/PKCS_1) that PKCS1_PSS is the new scheme that should be used to create signatures.
Both scripts needs some changes:
Bash:
#!/bin/bash
# Generate keys
openssl genrsa -out priv.pem
# Export public key
openssl rsa -pubout -in priv.pem -out pub.pem
# Create test file
echo test123 > test.txt
# Create SHA1 signature
openssl dgst -sha1 -sigopt rsa_padding_mode:pss -sigopt rsa_pss_saltlen:-1 -sign priv.pem -out test.txt.sig test.txt
# Verify SHA1 signature
openssl dgst -sha1 -sigopt rsa_padding_mode:pss -sigopt rsa_pss_saltlen:-1 -verify pub.pem -signature test.txt.sig test.txt

Python:
#!/usr/bin/python
from Crypto.Signature import PKCS1_PSS
from Crypto.PublicKey import RSA
from Crypto.Hash import SHA
from Crypto import Random
# Read public key from file
fd = open('pub.pem', 'r')
key_data = fd.read()
fd.close()
# Load public key
key = RSA.importKey(key_data)
# Read test file
fd = open('test.txt', 'r')
message = fd.read()
fd.close()
# Create SHA1 hash object
h = SHA.new(message)
# Create PKCS1 handler
cipher = PKCS1_PSS.new(key)
# Read signature file
fd = open('test.txt.sig', 'r')
signature = fd.read()
fd.close()
# Verify signature
print cipher.verify(h, signature)
# Read private key from file
fd = open('priv.pem', 'r')
priv_key_data = fd.read()
fd.close()
# Load private key
priv_key = RSA.importKey(priv_key_data)
# Create PKCS1 handler
priv_cipher = PKCS1_PSS.new(priv_key)
# Sign hash of test file content and compare
signature2 = priv_cipher.sign(h)
# PKCS1_PSS signatures always differ!
#if signature == signature2:
#    print ""Match!! :)""

","12966","<python><openssl><python-2.x><pycrypto>","10","6","4","2015-10-10 17:37:54","","0","4","798493","","2011-06-15 18:43:34","2011-06-14 20:55:34",""
"5450540","No module named Crypto.Cipher on local mac AppEngine","No module named Crypto.Cipher
when I try to import
from Crypto.Cipher import AES
My folder structure looks like this:
test/
test/main.py
test/pycrypto-2.3
I ran the build and install inside of the pycrypto folder but I keep getting the error, any ideas?
","You don't need to include pycrypto in your app; you need to install it the standard way for a Python library. If you've done that, the most likely reason it's not working is because you installed it (Eg, using easy_install) for a different version or installation of Python than the one that you're running the dev_appserver with. Macs are particularly notorious for this. Make sure you installed it in the same version of Python as the one the dev_appserver is running.
","12105","<google-app-engine><pycrypto>","9","1","3","2012-07-17 05:46:08","8209156","1","1","","","","2011-03-27 16:27:57",""
"5450540","No module named Crypto.Cipher on local mac AppEngine","No module named Crypto.Cipher
when I try to import
from Crypto.Cipher import AES
My folder structure looks like this:
test/
test/main.py
test/pycrypto-2.3
I ran the build and install inside of the pycrypto folder but I keep getting the error, any ideas?
","Please set PYTHONHOME if you have installed pycrypto in a user-defined directory. Also
/home/user# python -v
>>> from Crypto.Cipher import AES

will give you some idea what's the exact error.
","12105","<google-app-engine><pycrypto>","9","0","3","2012-07-17 05:46:08","8209156","1","1","","","","2011-03-27 16:27:57",""
"5450540","No module named Crypto.Cipher on local mac AppEngine","No module named Crypto.Cipher
when I try to import
from Crypto.Cipher import AES
My folder structure looks like this:
test/
test/main.py
test/pycrypto-2.3
I ran the build and install inside of the pycrypto folder but I keep getting the error, any ideas?
","It does not work with the usual easy_install, or running setup.py, depending on your Mac OS X version. This is due to how Google App Engine only allows for libraries loaded from certain directories. See here for more discussion: http://code.google.com/p/googleappengine/issues/detail?id=1627
","12105","<google-app-engine><pycrypto>","9","5","3","2012-07-17 05:46:08","8209156","1","1","","","","2011-03-27 16:27:57",""
"10956274","Encrypt File using AES and PyCrypto in Python 3","I'm using PyCrypto to encrypt a binary file using AES in CBC mode (Python 3.2.3 64-bit and PyCrypto 2.6). Using the code from this: http://eli.thegreenplace.net/2010/06/25/aes-encryption-of-files-in-python-with-pycrypto/
But running into the following error: ValueError: IV must be 16 bytes long.
Here's the code:
def encryptFile(key, in_filename, out_filename=None, chunksize=64*1024):
"""""" Encrypts a file using AES (CBC mode) with the
    given key.

    key:
        The encryption key - a string that must be
        either 16, 24 or 32 bytes long. Longer keys
        are more secure.

    in_file:
        Input file

    out_file:
        If None, a StringIO will be returned.

    chunksize:
        Sets the size of the chunk which the function
        uses to read and encrypt the file. Larger chunk
        sizes can be faster for some files and machines.
        chunksize must be divisible by 16.
""""""
if not out_filename:
    out_filename = in_filename + '.enc'

iv = ''.join(chr(random.randint(0, 0xFF)) for i in range(16))
encryptor = AES.new(key, AES.MODE_CBC, iv)
filesize = os.path.getsize(in_filename)

with open(in_filename, 'rb') as infile:
    with open(out_filename, 'wb') as outfile:
        outfile.write(struct.pack('<Q', filesize))
        outfile.write(iv)

        while True:
            chunk = infile.read(chunksize)
            if len(chunk) == 0:
                break
            elif len(chunk) % 16 != 0:
                chunk += ' ' * (16 - len(chunk) % 16)

            outfile.write(encryptor.encrypt(chunk))

I've tried searching and experimenting but can't seem to get it working. Python is pretty new to me and so is encryption. Any help would be greatly appreciated. Thanks in advance.
","As the PyCrypto API says, the IV must be a byte string, not a text string.
Your piece of code will work fine in Python 2, because they are the same thing (that is, they all are class str, unless you deal with Unicode text). In Python 3 they are two completely different types: bytes and str.
The code should therefore be:
iv = bytes([ random.randint(0,0xFF) for i in range(16)] )

Such code (beside not being cryptographically secure as Federico points out) will not properly work in Python 2 though. The following alternative works fine in both cases, it is secure and it is more efficient:
iv = Random.new().read(16)

","11925","<python><python-3.x><pycrypto>","5","7","2","2013-03-07 13:16:50","","0","1","482262","","2012-06-09 11:20:25","2012-06-08 21:32:25",""
"10956274","Encrypt File using AES and PyCrypto in Python 3","I'm using PyCrypto to encrypt a binary file using AES in CBC mode (Python 3.2.3 64-bit and PyCrypto 2.6). Using the code from this: http://eli.thegreenplace.net/2010/06/25/aes-encryption-of-files-in-python-with-pycrypto/
But running into the following error: ValueError: IV must be 16 bytes long.
Here's the code:
def encryptFile(key, in_filename, out_filename=None, chunksize=64*1024):
"""""" Encrypts a file using AES (CBC mode) with the
    given key.

    key:
        The encryption key - a string that must be
        either 16, 24 or 32 bytes long. Longer keys
        are more secure.

    in_file:
        Input file

    out_file:
        If None, a StringIO will be returned.

    chunksize:
        Sets the size of the chunk which the function
        uses to read and encrypt the file. Larger chunk
        sizes can be faster for some files and machines.
        chunksize must be divisible by 16.
""""""
if not out_filename:
    out_filename = in_filename + '.enc'

iv = ''.join(chr(random.randint(0, 0xFF)) for i in range(16))
encryptor = AES.new(key, AES.MODE_CBC, iv)
filesize = os.path.getsize(in_filename)

with open(in_filename, 'rb') as infile:
    with open(out_filename, 'wb') as outfile:
        outfile.write(struct.pack('<Q', filesize))
        outfile.write(iv)

        while True:
            chunk = infile.read(chunksize)
            if len(chunk) == 0:
                break
            elif len(chunk) % 16 != 0:
                chunk += ' ' * (16 - len(chunk) % 16)

            outfile.write(encryptor.encrypt(chunk))

I've tried searching and experimenting but can't seem to get it working. Python is pretty new to me and so is encryption. Any help would be greatly appreciated. Thanks in advance.
","i guess i am too late, but simple-crypt provides a simple wrapper around pycrypto that (1) would solve your problem and (2) includes key expansion and an hmac for detection of modifications (it uses AES256 CTR mode).
","11925","<python><python-3.x><pycrypto>","5","2","2","2013-03-07 13:16:50","","0","1","482262","","2012-06-09 11:20:25","2012-06-08 21:32:25",""
"14389336","Why does PyCrypto not use the default IV?","I am trying to figure out why my Python client and the Ruby server are having a disagreement about how to encrypt data. The only difference I see in the Ruby code and my code is that they are not specifying the Initialization Vector, therefore its falling back to the default of all \x0's
When I try to instantiate PyCrypto without the iv it gives me an error. Here is an example:
from Crypto.Cipher import AES
test = ""Very, very confidential data""
key = b'Thirty Two Byte key, made Beef y' 

gryp = AES.new(key, AES.MODE_CBC)

(This example is essentially the example code from the PyCrypto docs without specifying the IV) The docs say w/r/t the IV "" It is optional and when not present it will be given a default value of all zeroes."" However I get the error ""ValueError: IV must be 16 bytes long"".
So I could specify the IV, that is not the problem pre se, but I am trying to figure out that if it thinks it cannot use the default, if there is something else wrong with the way I am using the library.
","This appears to be an error in the class documentation for Pycrypto's AES, as the AES implementation has been changed so that the IV is not optional for those modes that require one (i.e. you will have to pass 16 bytes of zeroes yourself, if that is how you want to do it).
See this bug report for the same issue where someone didn't specify an IV and looked up the online docs. There was a change that explicitly requires the IV and essentially, nobody has updated the online docs to reflect this. The class docs in the Pycrypto source were updated, but the online documentation needs to be regenerated to reflect this.
The new documentation from the source states:

For all other modes, it must be block_size bytes longs.

Instead of the old version's

For all other modes, it must be block_size bytes longs. It is optional and
  when not present it will be given a default value of all zeroes.

The updated example in the source, which specifies iv, is:
from Crypto.Cipher import AES
from Crypto import Random

key = b'Sixteen byte key'
iv = Random.new().read(AES.block_size)
cipher = AES.new(key, AES.MODE_CFB, iv)
msg = iv + cipher.encrypt(b'Attack at dawn')

","11873","<python><aes><pycrypto>","13","17","2","2016-11-23 09:59:18","14390238","0","2","","","","2013-01-17 22:30:24",""
"14389336","Why does PyCrypto not use the default IV?","I am trying to figure out why my Python client and the Ruby server are having a disagreement about how to encrypt data. The only difference I see in the Ruby code and my code is that they are not specifying the Initialization Vector, therefore its falling back to the default of all \x0's
When I try to instantiate PyCrypto without the iv it gives me an error. Here is an example:
from Crypto.Cipher import AES
test = ""Very, very confidential data""
key = b'Thirty Two Byte key, made Beef y' 

gryp = AES.new(key, AES.MODE_CBC)

(This example is essentially the example code from the PyCrypto docs without specifying the IV) The docs say w/r/t the IV "" It is optional and when not present it will be given a default value of all zeroes."" However I get the error ""ValueError: IV must be 16 bytes long"".
So I could specify the IV, that is not the problem pre se, but I am trying to figure out that if it thinks it cannot use the default, if there is something else wrong with the way I am using the library.
","here is an implementation that works for me with some fixes:
class AESCipher:

    def __init__(self, key):
        self.bs = 32
        if len(key) >= 32:
            self.key = key[:32]
        else:
            self.key = self._pad(key)

    def encrypt(self, raw):
        raw = self._pad(raw)
        iv = Random.new().read(AES.block_size)
        cipher = AES.new(self.key, AES.MODE_CBC, iv)
        return base64.b64encode(iv + cipher.encrypt(raw))

    def decrypt(self, enc):
        enc = base64.b64decode(enc)
        iv = enc[:AES.block_size]
        cipher = AES.new(self.key, AES.MODE_CBC, iv)
        return self._unpad(cipher.decrypt(enc[AES.block_size:]))

    def _pad(self, s):
        return s + (self.bs - len(s) % self.bs) * chr(self.bs - len(s) % self.bs)

    def _unpad(self, s):
        return s[:-ord(s[len(s)-1:])]

","11873","<python><aes><pycrypto>","13","3","2","2016-11-23 09:59:18","14390238","0","2","","","","2013-01-17 22:30:24",""
"7974443","Pycrypto - Using Crypto.Random to generate a secret key and an initialisation vector","Can Crypto.Random be used to safely generate a strong secret key and an initialisation vector?
","According to the PyCryto docs, the answer is yes:
from Crypto.PublicKey import RSA
from Crypto import Random
rng = Random.new().read
RSAkey = RSA.generate(1024, rng) 

","11314","<python><pycrypto>","4","9","2","2012-12-15 17:31:25","7974716","0","1","","","","2011-11-02 00:13:17",""
"7974443","Pycrypto - Using Crypto.Random to generate a secret key and an initialisation vector","Can Crypto.Random be used to safely generate a strong secret key and an initialisation vector?
","Using pycrypto(This link for more info) 
>>> from Crypto.Hash import MD5
>>> MD5.new('abc').hexdigest()
'900150983cd24fb0d6963f7d28e17f72'

More security(For more info)?
>>> from versile.quick import VCrypto, VX509Crypto
>>> purpose  = 'Versily Python Demo Services'
>>> personal = 'I like Monty Python humor'
>>> password = 'kLqnr37ubG'
>>> identity = VCrypto.lazy().dia(1024, purpose, personal, password)
>>> type(identity)
<class 'versile.crypto.local._VLocalRSAKey'>
>>> x509_pubkey = VX509Crypto.export_public_key(identity.public)
>>> print(x509_pubkey) 
-----BEGIN RSA PUBLIC KEY-----
MIGJAoGBANpspNSQPXlq/tEBIq8pT31WYzcKFtX8b41k9ec5YqiJhgOf9WyK0UqTScOzLiySKun2
XBVjXRhok5kvyT32K+JYh2VwoOnS0J6KFOhaatKMvDmVIFyhAdZ7xC3+jf1zT0n/vAQE0+DEGKfS
de7je8eA/T4C7uwLKn98aY+oudFtAgMBAAE=
-----END RSA PUBLIC KEY-----

","11314","<python><pycrypto>","4","0","2","2012-12-15 17:31:25","7974716","0","1","","","","2011-11-02 00:13:17",""
"20881768","_fastmath error in python: HAVE_DECL_MPZ_POWM_SEC","I am running python 2.6 on Red Hat 6.4
I had a script running on one machine using paramiko sftp. When I transferred it to another machine I got an exception: SFTP file has no attribute __exit__ (something along those lines).
I decided to upgrade paramiko (thought it would solve the problem) with pip. Now I am getting this the moment I run a python script:
  ...
  File ""/usr/lib/python2.6/site-packages/paramiko/__init__.py"", line 64, in <module>
    from transport import SecurityOptions, Transport
  File ""/usr/lib/python2.6/site-packages/paramiko/transport.py"", line 33, in <module>
    from paramiko import util
  File ""/usr/lib/python2.6/site-packages/paramiko/util.py"", line 33, in <module>
    from paramiko.common import *
  File ""/usr/lib/python2.6/site-packages/paramiko/common.py"", line 98, in <module>
    from Crypto import Random
  File ""/usr/lib64/python2.6/site-packages/Crypto/Random/__init__.py"", line 29, in <module>
    from Crypto.Random import _UserFriendlyRNG
  File ""/usr/lib64/python2.6/site-packages/Crypto/Random/_UserFriendlyRNG.py"", line 38, in <module>
    from Crypto.Random.Fortuna import FortunaAccumulator
  File ""/usr/lib64/python2.6/site-packages/Crypto/Random/Fortuna/FortunaAccumulator.py"", line 39, in <module>
    import FortunaGenerator
  File ""/usr/lib64/python2.6/site-packages/Crypto/Random/Fortuna/FortunaGenerator.py"", line 34, in <module>
    from Crypto.Util.number import ceil_shift, exact_log2, exact_div
  File ""/usr/lib64/python2.6/site-packages/Crypto/Util/number.py"", line 56, in <module>
    if _fastmath is not None and not _fastmath.HAVE_DECL_MPZ_POWM_SEC:
AttributeError: 'module' object has no attribute 'HAVE_DECL_MPZ_POWM_SEC'

So help!!
","It seems you have a mix of PyCrypto libraries installed in your system.
This bug report on the PyCrypto trackiong system seems related:

My guess is that you have the python-crypto-2.0.1 RPM installed system-wide,
  and you didn't have gmp-devel installed when you built & installed a later
  version of PyCrypto, so you'reusing a newer version of PyCrypto with an
  older version of _fastmath.

You may try to do as suggested: install the gmp-devel package and then PyCrypto with pip.
","11126","<python><paramiko><pycrypto>","10","18","5","2015-09-30 07:13:08","20901761","1","3","1155122","","2014-01-02 12:25:24","2014-01-02 11:19:48",""
"20881768","_fastmath error in python: HAVE_DECL_MPZ_POWM_SEC","I am running python 2.6 on Red Hat 6.4
I had a script running on one machine using paramiko sftp. When I transferred it to another machine I got an exception: SFTP file has no attribute __exit__ (something along those lines).
I decided to upgrade paramiko (thought it would solve the problem) with pip. Now I am getting this the moment I run a python script:
  ...
  File ""/usr/lib/python2.6/site-packages/paramiko/__init__.py"", line 64, in <module>
    from transport import SecurityOptions, Transport
  File ""/usr/lib/python2.6/site-packages/paramiko/transport.py"", line 33, in <module>
    from paramiko import util
  File ""/usr/lib/python2.6/site-packages/paramiko/util.py"", line 33, in <module>
    from paramiko.common import *
  File ""/usr/lib/python2.6/site-packages/paramiko/common.py"", line 98, in <module>
    from Crypto import Random
  File ""/usr/lib64/python2.6/site-packages/Crypto/Random/__init__.py"", line 29, in <module>
    from Crypto.Random import _UserFriendlyRNG
  File ""/usr/lib64/python2.6/site-packages/Crypto/Random/_UserFriendlyRNG.py"", line 38, in <module>
    from Crypto.Random.Fortuna import FortunaAccumulator
  File ""/usr/lib64/python2.6/site-packages/Crypto/Random/Fortuna/FortunaAccumulator.py"", line 39, in <module>
    import FortunaGenerator
  File ""/usr/lib64/python2.6/site-packages/Crypto/Random/Fortuna/FortunaGenerator.py"", line 34, in <module>
    from Crypto.Util.number import ceil_shift, exact_log2, exact_div
  File ""/usr/lib64/python2.6/site-packages/Crypto/Util/number.py"", line 56, in <module>
    if _fastmath is not None and not _fastmath.HAVE_DECL_MPZ_POWM_SEC:
AttributeError: 'module' object has no attribute 'HAVE_DECL_MPZ_POWM_SEC'

So help!!
","This one gives better insight into the error itself.
Some developer thought it a good idea to provide a user-friendly warning about a potential security threat, but botched up the code that prints that warning.
I just replaced this:
# You need libgmp v5 or later to get mpz_powm_sec.  Warn if it's not available.
if _fastmath is not None and not _fastmath.HAVE_DECL_MPZ_POWM_SEC:
    _warn(""Not using mpz_powm_sec.  You should rebuild using libgmp >= 5 to avoid timing attack vulnerability."", PowmInsecureWarning)

with this:
# You need libgmp v5 or later to get mpz_powm_sec.  Warn if it's not available.
if _fastmath is not None and not hasattr(_fastmath, 'HAVE_DECL_MPZ_POWM_SEC'):
    _warn(""Not using mpz_powm_sec.  You should rebuild using libgmp >= 5 to avoid timing attack vulnerability."", PowmInsecureWarning)

in my /usr/lib64/python2.6/site-packages/Crypto/Util/number.py
It still can be done better, but if you don't care for the security threat, this will get you going.
","11126","<python><paramiko><pycrypto>","10","4","5","2015-09-30 07:13:08","20901761","1","3","1155122","","2014-01-02 12:25:24","2014-01-02 11:19:48",""
"20881768","_fastmath error in python: HAVE_DECL_MPZ_POWM_SEC","I am running python 2.6 on Red Hat 6.4
I had a script running on one machine using paramiko sftp. When I transferred it to another machine I got an exception: SFTP file has no attribute __exit__ (something along those lines).
I decided to upgrade paramiko (thought it would solve the problem) with pip. Now I am getting this the moment I run a python script:
  ...
  File ""/usr/lib/python2.6/site-packages/paramiko/__init__.py"", line 64, in <module>
    from transport import SecurityOptions, Transport
  File ""/usr/lib/python2.6/site-packages/paramiko/transport.py"", line 33, in <module>
    from paramiko import util
  File ""/usr/lib/python2.6/site-packages/paramiko/util.py"", line 33, in <module>
    from paramiko.common import *
  File ""/usr/lib/python2.6/site-packages/paramiko/common.py"", line 98, in <module>
    from Crypto import Random
  File ""/usr/lib64/python2.6/site-packages/Crypto/Random/__init__.py"", line 29, in <module>
    from Crypto.Random import _UserFriendlyRNG
  File ""/usr/lib64/python2.6/site-packages/Crypto/Random/_UserFriendlyRNG.py"", line 38, in <module>
    from Crypto.Random.Fortuna import FortunaAccumulator
  File ""/usr/lib64/python2.6/site-packages/Crypto/Random/Fortuna/FortunaAccumulator.py"", line 39, in <module>
    import FortunaGenerator
  File ""/usr/lib64/python2.6/site-packages/Crypto/Random/Fortuna/FortunaGenerator.py"", line 34, in <module>
    from Crypto.Util.number import ceil_shift, exact_log2, exact_div
  File ""/usr/lib64/python2.6/site-packages/Crypto/Util/number.py"", line 56, in <module>
    if _fastmath is not None and not _fastmath.HAVE_DECL_MPZ_POWM_SEC:
AttributeError: 'module' object has no attribute 'HAVE_DECL_MPZ_POWM_SEC'

So help!!
","you can find file: /usr/lib/python2.7/site-packages/Crypto/Util/number.py
with content:
if _fastmath is not None and not _fastmath.HAVE_DECL_MPZ_POWM_SEC:

Then, you can annotate this line like 
#if _fastmath is not None and not _fastmath.HAVE_DECL_MPZ_POWM_SEC:

and you can import paramiko
","11126","<python><paramiko><pycrypto>","10","0","5","2015-09-30 07:13:08","20901761","1","3","1155122","","2014-01-02 12:25:24","2014-01-02 11:19:48",""
"20881768","_fastmath error in python: HAVE_DECL_MPZ_POWM_SEC","I am running python 2.6 on Red Hat 6.4
I had a script running on one machine using paramiko sftp. When I transferred it to another machine I got an exception: SFTP file has no attribute __exit__ (something along those lines).
I decided to upgrade paramiko (thought it would solve the problem) with pip. Now I am getting this the moment I run a python script:
  ...
  File ""/usr/lib/python2.6/site-packages/paramiko/__init__.py"", line 64, in <module>
    from transport import SecurityOptions, Transport
  File ""/usr/lib/python2.6/site-packages/paramiko/transport.py"", line 33, in <module>
    from paramiko import util
  File ""/usr/lib/python2.6/site-packages/paramiko/util.py"", line 33, in <module>
    from paramiko.common import *
  File ""/usr/lib/python2.6/site-packages/paramiko/common.py"", line 98, in <module>
    from Crypto import Random
  File ""/usr/lib64/python2.6/site-packages/Crypto/Random/__init__.py"", line 29, in <module>
    from Crypto.Random import _UserFriendlyRNG
  File ""/usr/lib64/python2.6/site-packages/Crypto/Random/_UserFriendlyRNG.py"", line 38, in <module>
    from Crypto.Random.Fortuna import FortunaAccumulator
  File ""/usr/lib64/python2.6/site-packages/Crypto/Random/Fortuna/FortunaAccumulator.py"", line 39, in <module>
    import FortunaGenerator
  File ""/usr/lib64/python2.6/site-packages/Crypto/Random/Fortuna/FortunaGenerator.py"", line 34, in <module>
    from Crypto.Util.number import ceil_shift, exact_log2, exact_div
  File ""/usr/lib64/python2.6/site-packages/Crypto/Util/number.py"", line 56, in <module>
    if _fastmath is not None and not _fastmath.HAVE_DECL_MPZ_POWM_SEC:
AttributeError: 'module' object has no attribute 'HAVE_DECL_MPZ_POWM_SEC'

So help!!
","For me, the issue was that I had the python-crypto package installed via yum, and then had also installed the pycrypto module via pip.  
yum remove python-crypto

worked for me.
","11126","<python><paramiko><pycrypto>","10","14","5","2015-09-30 07:13:08","20901761","1","3","1155122","","2014-01-02 12:25:24","2014-01-02 11:19:48",""
"20881768","_fastmath error in python: HAVE_DECL_MPZ_POWM_SEC","I am running python 2.6 on Red Hat 6.4
I had a script running on one machine using paramiko sftp. When I transferred it to another machine I got an exception: SFTP file has no attribute __exit__ (something along those lines).
I decided to upgrade paramiko (thought it would solve the problem) with pip. Now I am getting this the moment I run a python script:
  ...
  File ""/usr/lib/python2.6/site-packages/paramiko/__init__.py"", line 64, in <module>
    from transport import SecurityOptions, Transport
  File ""/usr/lib/python2.6/site-packages/paramiko/transport.py"", line 33, in <module>
    from paramiko import util
  File ""/usr/lib/python2.6/site-packages/paramiko/util.py"", line 33, in <module>
    from paramiko.common import *
  File ""/usr/lib/python2.6/site-packages/paramiko/common.py"", line 98, in <module>
    from Crypto import Random
  File ""/usr/lib64/python2.6/site-packages/Crypto/Random/__init__.py"", line 29, in <module>
    from Crypto.Random import _UserFriendlyRNG
  File ""/usr/lib64/python2.6/site-packages/Crypto/Random/_UserFriendlyRNG.py"", line 38, in <module>
    from Crypto.Random.Fortuna import FortunaAccumulator
  File ""/usr/lib64/python2.6/site-packages/Crypto/Random/Fortuna/FortunaAccumulator.py"", line 39, in <module>
    import FortunaGenerator
  File ""/usr/lib64/python2.6/site-packages/Crypto/Random/Fortuna/FortunaGenerator.py"", line 34, in <module>
    from Crypto.Util.number import ceil_shift, exact_log2, exact_div
  File ""/usr/lib64/python2.6/site-packages/Crypto/Util/number.py"", line 56, in <module>
    if _fastmath is not None and not _fastmath.HAVE_DECL_MPZ_POWM_SEC:
AttributeError: 'module' object has no attribute 'HAVE_DECL_MPZ_POWM_SEC'

So help!!
","If (like me) you don't have access to number.py, the following may help:
import Crypto.PublicKey._fastmath
Crypto.PublicKey._fastmath.HAVE_DECL_MPZ_POWM_SEC=False

add before to ignore the warning:
import warnings
from Crypto.pct_warnings import PowmInsecureWarning
warnings.simplefilter(""ignore"", PowmInsecureWarning)

","11126","<python><paramiko><pycrypto>","10","1","5","2015-09-30 07:13:08","20901761","1","3","1155122","","2014-01-02 12:25:24","2014-01-02 11:19:48",""
"29350204","app engine: ImportError: No module named Crypto.Hash","I have a script that uses Crypto.Hash but import fails with error:
ImportError: No module named Crypto.Hash

in my sys.path if I print the sys.path list, there is this entry (among others): 
/Applications/GoogleAppEngineLauncher.app/Contents/Resources/GoogleAppEngine-default.bundle/Contents/Resources/google_appengine/lib/pycrypto-2.6

If I open the path above, there is no pycrypto-2.6 directory.
How can I get to load pycrypto 2.6?
If I import Crypto.Hash running python from command line it works
I have to point out that pycrypto is supported by App Engine, it is included in this list.
Furthermore I have included the module in my app.yaml file:
libraries:
- name: webapp2
  version: ""2.5.2""
- name: pycrypto
  version: latest
- name: lxml
  version: ""2.3""
- name: ssl
  version: latest

If I send the code in production on appengine it works, the problem is in my system I should probably download a compiled version of pycrypto and put it somewhere appengine can use it
","It seems a problem that happens on MAC OSX, all I have managed to do is following: 
firstly you need to know where your install of pycripto is, running
sudo pip install pycrypto

either you install the library or you get the path where it is installed

Requirement already satisfied (use --upgrade to upgrade): pycrypto in
  ...

then, considering that this is a problem that does not happen in production on appengine, I did this:
try:
    from Crypto.Hash import SHA
except ImportError:
    import sys
    sys.path.append('/[mypath]/anaconda/lib/python2.7/site-packages')
    from Crypto.Hash import SHA # requires PyCrypto

","10540","<python><google-app-engine><pycrypto>","9","10","2","2015-05-15 14:48:16","","6","","298022","","2015-03-30 15:54:37","2015-03-30 15:30:28",""
"29350204","app engine: ImportError: No module named Crypto.Hash","I have a script that uses Crypto.Hash but import fails with error:
ImportError: No module named Crypto.Hash

in my sys.path if I print the sys.path list, there is this entry (among others): 
/Applications/GoogleAppEngineLauncher.app/Contents/Resources/GoogleAppEngine-default.bundle/Contents/Resources/google_appengine/lib/pycrypto-2.6

If I open the path above, there is no pycrypto-2.6 directory.
How can I get to load pycrypto 2.6?
If I import Crypto.Hash running python from command line it works
I have to point out that pycrypto is supported by App Engine, it is included in this list.
Furthermore I have included the module in my app.yaml file:
libraries:
- name: webapp2
  version: ""2.5.2""
- name: pycrypto
  version: latest
- name: lxml
  version: ""2.3""
- name: ssl
  version: latest

If I send the code in production on appengine it works, the problem is in my system I should probably download a compiled version of pycrypto and put it somewhere appengine can use it
","Run the SDK from the command line with dev_appserver.py, rather than with the GUI (assuming you've already checked that it's installed via pip).
I've seen similar problems with App Engine not importing libraries locally, even though they're installed, and even though they work fine in production. MySQLDB comes to mind, although I can't find the reference. Anyway, this worked for me.
","10540","<python><google-app-engine><pycrypto>","9","1","2","2015-05-15 14:48:16","","6","","298022","","2015-03-30 15:54:37","2015-03-30 15:30:28",""
"36419747","LINK : fatal error LNK1104: cannot open file 'python27.lib'","I was trying to compile pycrypto-2.6.1 from source for Python 2.7.10 64-Bit Windows Version and facing the following error.
Processing pycrypto-2.6.1.tar.gz
Writing c:\users\sivasuba\appdata\local\temp\easy_install-ecznz_\pycrypto-2.6.1\setup.cfg
Running pycrypto-2.6.1\setup.py -q bdist_egg --dist-dir c:\users\sivasuba\appdata\local\temp\easy_install-ecznz_\pycrypto-2.6.1\egg-dist-tmp-us3gka
warning: GMP or MPIR library not found; Not building Crypto.PublicKey._fastmath.
winrand.c
LINK : fatal error LNK1104: cannot open file 'python27.lib'
error: Setup script exited with error: command 'C:\\Users\\sivasuba\\AppData\\Local\\Programs\\Common\\Microsoft\\Visual C++ for Python\\9.0\\VC\\Bin\\amd64\\link.exe' failed with exit status 1104

Googling didn't help much. Any help on this would be appreciated.
P.S. I am not looking for pre-complied binaries. The requirement is to build it from source.
","It seems like your linker doesn't find python27.lib library.
LIB and LIBPATH are windows environment variables which are being used by the linker and compiler.
In which folder do you have python27.lib on your computer?
please confirm that LIB environment variable include the path for the python27.lib
If it didn't solve your problem - try adding python27.lib path also to LIBPATH
","10530","<python><python-2.7><pycrypto>","13","9","5","2018-09-22 05:30:35","36420161","0","0","","","","2016-04-05 07:26:31",""
"36419747","LINK : fatal error LNK1104: cannot open file 'python27.lib'","I was trying to compile pycrypto-2.6.1 from source for Python 2.7.10 64-Bit Windows Version and facing the following error.
Processing pycrypto-2.6.1.tar.gz
Writing c:\users\sivasuba\appdata\local\temp\easy_install-ecznz_\pycrypto-2.6.1\setup.cfg
Running pycrypto-2.6.1\setup.py -q bdist_egg --dist-dir c:\users\sivasuba\appdata\local\temp\easy_install-ecznz_\pycrypto-2.6.1\egg-dist-tmp-us3gka
warning: GMP or MPIR library not found; Not building Crypto.PublicKey._fastmath.
winrand.c
LINK : fatal error LNK1104: cannot open file 'python27.lib'
error: Setup script exited with error: command 'C:\\Users\\sivasuba\\AppData\\Local\\Programs\\Common\\Microsoft\\Visual C++ for Python\\9.0\\VC\\Bin\\amd64\\link.exe' failed with exit status 1104

Googling didn't help much. Any help on this would be appreciated.
P.S. I am not looking for pre-complied binaries. The requirement is to build it from source.
","Doing the following worked for me:

python27.lib is located in 'libs' folder under Python27 (folder where python is installed on windows)

Add 'LIB' environment variable to the that points to the directory/folder containing python27.lib library:


","10530","<python><python-2.7><pycrypto>","13","7","5","2018-09-22 05:30:35","36420161","0","0","","","","2016-04-05 07:26:31",""
"36419747","LINK : fatal error LNK1104: cannot open file 'python27.lib'","I was trying to compile pycrypto-2.6.1 from source for Python 2.7.10 64-Bit Windows Version and facing the following error.
Processing pycrypto-2.6.1.tar.gz
Writing c:\users\sivasuba\appdata\local\temp\easy_install-ecznz_\pycrypto-2.6.1\setup.cfg
Running pycrypto-2.6.1\setup.py -q bdist_egg --dist-dir c:\users\sivasuba\appdata\local\temp\easy_install-ecznz_\pycrypto-2.6.1\egg-dist-tmp-us3gka
warning: GMP or MPIR library not found; Not building Crypto.PublicKey._fastmath.
winrand.c
LINK : fatal error LNK1104: cannot open file 'python27.lib'
error: Setup script exited with error: command 'C:\\Users\\sivasuba\\AppData\\Local\\Programs\\Common\\Microsoft\\Visual C++ for Python\\9.0\\VC\\Bin\\amd64\\link.exe' failed with exit status 1104

Googling didn't help much. Any help on this would be appreciated.
P.S. I am not looking for pre-complied binaries. The requirement is to build it from source.
","if its giving,
LINK : fatal error LNK1104: cannot open file 'python26.lib'
Do as following :
1.Right click your project -> go to properties -> Linker -> Input -> Ignore 
  specific Default Libraries -> type 'python26.lib'
Hope this will help !
Thanks.
Best regards,
Janath Francisco.
","10530","<python><python-2.7><pycrypto>","13","0","5","2018-09-22 05:30:35","36420161","0","0","","","","2016-04-05 07:26:31",""
"36419747","LINK : fatal error LNK1104: cannot open file 'python27.lib'","I was trying to compile pycrypto-2.6.1 from source for Python 2.7.10 64-Bit Windows Version and facing the following error.
Processing pycrypto-2.6.1.tar.gz
Writing c:\users\sivasuba\appdata\local\temp\easy_install-ecznz_\pycrypto-2.6.1\setup.cfg
Running pycrypto-2.6.1\setup.py -q bdist_egg --dist-dir c:\users\sivasuba\appdata\local\temp\easy_install-ecznz_\pycrypto-2.6.1\egg-dist-tmp-us3gka
warning: GMP or MPIR library not found; Not building Crypto.PublicKey._fastmath.
winrand.c
LINK : fatal error LNK1104: cannot open file 'python27.lib'
error: Setup script exited with error: command 'C:\\Users\\sivasuba\\AppData\\Local\\Programs\\Common\\Microsoft\\Visual C++ for Python\\9.0\\VC\\Bin\\amd64\\link.exe' failed with exit status 1104

Googling didn't help much. Any help on this would be appreciated.
P.S. I am not looking for pre-complied binaries. The requirement is to build it from source.
","This worked here:
On CMakeLists.txt add this line:
link_directories(C:\\python\\libs)

Note that my Python installation is at C:\python
","10530","<python><python-2.7><pycrypto>","13","1","5","2018-09-22 05:30:35","36420161","0","0","","","","2016-04-05 07:26:31",""
"36419747","LINK : fatal error LNK1104: cannot open file 'python27.lib'","I was trying to compile pycrypto-2.6.1 from source for Python 2.7.10 64-Bit Windows Version and facing the following error.
Processing pycrypto-2.6.1.tar.gz
Writing c:\users\sivasuba\appdata\local\temp\easy_install-ecznz_\pycrypto-2.6.1\setup.cfg
Running pycrypto-2.6.1\setup.py -q bdist_egg --dist-dir c:\users\sivasuba\appdata\local\temp\easy_install-ecznz_\pycrypto-2.6.1\egg-dist-tmp-us3gka
warning: GMP or MPIR library not found; Not building Crypto.PublicKey._fastmath.
winrand.c
LINK : fatal error LNK1104: cannot open file 'python27.lib'
error: Setup script exited with error: command 'C:\\Users\\sivasuba\\AppData\\Local\\Programs\\Common\\Microsoft\\Visual C++ for Python\\9.0\\VC\\Bin\\amd64\\link.exe' failed with exit status 1104

Googling didn't help much. Any help on this would be appreciated.
P.S. I am not looking for pre-complied binaries. The requirement is to build it from source.
","The most obvious solution is to add the directory to the linker's include directories:
In VS 2015 it is Project settings - Linker - General - Additional Library Directories 
You can either edit the line directly, or click the small button on the end of the line and edit via GUI
","10530","<python><python-2.7><pycrypto>","13","0","5","2018-09-22 05:30:35","36420161","0","0","","","","2016-04-05 07:26:31",""
"8345756","Pycrypto aes 256  Initialization vector size","here's the case i have a php script that's using aes256 ,CBC 
the both key and IV size are 32 bytes long
data= '123456789abcdef' 
from Crypto.Cipher import AES
a = AES.new('oqufXQ(?bc=6_hR2I3sMZChDpb6dDlw4',2,'fOaiIOkD8*9Xeu_s4_bb87Ox_UG+D9GA')
print a.encrypt(data)

and the error i got 
<type 'exceptions.ValueError'>: IV must be 16 bytes long
Traceback (most recent call last):
  File ""/base/data/home/apps/s~xxxxxxx/1.155074369696961822/main.py"", line 4, in <module>

php code that works 
 echo base64_encode(encrypt('0123456789abcdef'))  ;


 function encrypt($data)
  {
    return mcrypt_encrypt(MCRYPT_RIJNDAEL_256 ,'oqufXQ(?bc=6_hR2I3sMZChDpb6dDlw4', $data , MCRYPT_MODE_CBC, utf8_encode('fOaiIOkD8*9Xeu_s4_bb87Ox_UG+D9GA') );
  }

I cant change the IV size 
Note that I am Not very Familiar With Python,  Just Need a way to encrypt data as  it will be one appengine . 
","Aha!
There's a difference of opinion what the ""256"" refers to.
AES has a fixed block size of 128 bits, so ""AES 256"" means 128 bit blocks, 256 bit key, 14 rounds.
However, Rijndael allows both the key size and the block size to vary. MCRYPT_RIJNDAEL_256 refers to Rijndael with block size set to 256 (and I don't know how many rounds). So it does indeed take a 32 byte IV. Your PHP script is not using AES 256.
This is confirmed in https://bugs.php.net/bug.php?id=47125 -- the reporter considers it a bug in PHP mcrypt, PHP considers it a bug in libmcrypt, but it's not a bug, since libmcrypt does document what MCRYPT_RIJNDAEL_256 means (at least the linux man page for mcrypt does, my Google-fu has failed to find any actual documentation for libmcrypt). That thing happens not to be the same as what AES 256 means.
So, you're encrypting and decrypting with ciphers that although related, might as well be completely different.
The bad news is that there doesn't appear to be a Crypto.Cipher.RIJNDAEL in PyCrypto. If you can pass a 256-bit key to MCRYPT_RIJNDAEL_128 in the PHP script, then that would be AES 256 (thanks Paŭlo).
","10309","<python><google-app-engine><aes><pycrypto>","4","11","1","2011-12-08 09:43:31","8355432","5","2","794953","","2011-12-01 21:44:58","2011-12-01 17:37:25",""
"9893080","PyCrypto: Decrypt only with public key in file (no private+public key)","Hello everyone.
I am trying to play a bit with RSA public and private keys and encryption/decryption with PyCrypto and I have encountered and issue that seems kind of strange to me (it probably makes a lot of sense the way it's working now, but I don't know much about RSA asymmetric encryption and that's why it's puzzling me). It is the inability I have encountered to decrypt something having only the public key.
Here's the thing: I have a server and a client. I want the server to ""recognize"" and register the client and show it in a list of ""known devices"". The client will have the public key of the server and the server will have the public key of the client, so when the client communicates with the server, it will encrypt its data with his client's private key and with the server's public key. By doing this, only the proper server will be able to open the data (with its private key) and will be able to verify that the sender is actually the client that claims to be... well... or at least, that's what I think, because I'm pretty newbie in this asymmetric encryption. The idea is that when one of those clients wakes up, it will send its public key (encrypted with the server's public key, of course, but that's probably not relevant at this point... yet) saying ""Hey, I'm a new client and this is my public key. Register that key with my UUID"" and the server will obey, associating that public key with the client's UUID and use that key to decrypt data coming from that client. I just want to transmit the client's public key, keeping its private key secret, secret, secret (it's private, right?)
I am doing some tests with openssl and very simple Python scripts that use PyCrypto (actually, not even in a server/client architecture or anything... just trying to encrypt something with a private key and decrypt it with the public key)
First of all, I have created a public/private key set with:
openssl genrsa -out ~/myTestKey.pem -passout pass:""f00bar"" -des3 2048

Ok, first thing that puzzles me a bit... It generates only one file, with both the private and the public keys... Well... O'right... whatever. I can extract the public key with:
openssl rsa -pubout -in ~/myTestKey.pem -passin pass:""f00bar"" -out ~/myTestKey.pub

So I thought I had my couple of private (private+public, actually) and public keys in ~/myTestKey.pem and ~/myTestKey.pub respectively. Well... apparently I'm doing something wrong, because PyCrypto doesn't like this assembly. And I don't know why.
I have two very simple test scripts, ""encryptor.py"" and ""decryptor.py"". The ""encryptor.py"" should encrypt something with the private key, and ""decryptor.py"", decrypt it with the public key. I know... I'm a parangon of originality...
So, I encrypt the string ""Loren ipsum"" with my ""encryptor.py"" (with private key):
----------- encryptor.py ----------------
#!/usr/bin/python

from Crypto.PublicKey import RSA

def encrypt(message):
    externKey=""/home/borrajax/myTestKey.pem""
    privatekey = open(externKey, ""r"")
    encryptor = RSA.importKey(privatekey, passphrase=""f00bar"")
    encriptedData=encryptor.encrypt(message, 0)
    file = open(""/tmp/cryptThingy.txt"", ""wb"")
    file.write(encriptedData[0])
    file.close()

if __name__ == ""__main__"":
    encryptedThingy=encrypt(""Loren ipsum"")


And it works fine. Well... I suppose so, because in the file ""/tmp/cryptThingy.txt"" I get a lot of gibberish. It looks really, really encrypted to me.
But when I try to decrypt it using just the file that contains just the public key...
----------- decryptor.py ---------------
#!/usr/bin/python

from Crypto.PublicKey import RSA

def decrypt():
    externKey=""/home/borrajax/myTestKey.pub""
    publickey = open(externKey, ""r"")
    decryptor = RSA.importKey(publickey, passphrase=""f00bar"")
    retval=None

    file = open(""/tmp/cryptThingy.txt"", ""rb"")
    retval = decryptor.decrypt(file.read())
    file.close()
    return retval


if __name__ == ""__main__"":
    decryptedThingy=decrypt()   
    print ""Decrypted: %s"" % decryptedThingy


... PyCrypto yells at me with a:
  File ""/usr/local/lib/python2.7/dist-packages/pycrypto-2.5-py2.7-linux-i686.egg/Crypto/PublicKey/RSA.py"", line 107, in _decrypt
    mp = self.key._decrypt(cp)
TypeError: Private key not available in this object

Yeah, of course it's not available! I extracted the public key! It took me 2 hours finding how to do it properly!! 
What am I missing? As I said, I'm pretty newbie in this public/private asymmetric key encryption so I might have a core ""conceptual error""... Any hint will be appreciated.
¡Thank you in advance!
","You have it the wrong way round, you encrypt with the public key, and decrypt with the private key.

The publicly available encrypting-key is widely distributed, while the private decrypting-key is known only to the recipient. Messages are encrypted with the recipient's public key and can be decrypted only with the corresponding private key.
  Source

The idea is that you give the sending side the public key (which anyone can have, so you can distribute it in the open) then you encrypt the data with it, then decrypt it on your end with your private key (which only you have). This way the data stays secure.
You can encrypt something with the private key as the private key contains the information required to make the public key, but it would be unusual to do so, as normally the person encrypting the data does not have the private key.
","10197","<python><public-key-encryption><encryption><pycrypto>","3","2","1","2012-03-27 15:59:02","9893231","1","","","","","2012-03-27 15:51:14",""
"10708538","How can I install pycrypto on a 64-bit Windows 7 machine?","I tried installing PyCrypto using pip, but it complained about needing vcvarsall.bat.  I installed Visual Studio 2008, but now I get ValueError: [u'path'] when I try to install it from pip.
I tried downloading a pre-built binary from Voidspace, but they only have 32-bit versions, and it doesn't seem to install correctly on my machine (it says it succeeded, but running python and trying import Crypto gives me an ImportError: No module named Crypto).
What do I need to do?
","Voidspace now has prebuilt 64bit binaries: 
eg. The 64bit binary for python 2.7
","9462","<python><windows><pip><pycrypto>","4","10","1","2012-12-11 16:55:25","13824816","1","","9161","","2012-05-22 19:44:40","2012-05-22 19:12:39",""
"13571141","getting ""error: Unable to find vcvarsall.bat"" then ""RuntimeError: autoconf error"" trying to install pycrypto on windows","After googling around, I found most answers say: install mingw, then use ""setup.py install build --compiler=mingw32"" to install. This is what I get:
C:\Users\Joe\Desktop\pycrypto-2.6>setup.py install build --compiler=mingw32
running install
running build
running build_py
running build_ext
running build_configure
checking for gcc... no
checking for cc... no
checking for cl.exe... no
configure: error: in `/cygdrive/c/Users/Joe/Desktop/pycrypto-2.6':
configure: error: no acceptable C compiler found in $PATH
See `config.log' for more details
Traceback (most recent call last):
  File ""C:\Users\Joe\Desktop\pycrypto-2.6\setup.py"", line 456, in <module>
    core.setup(**kw)
  File ""C:\Python27\lib\distutils\core.py"", line 152, in setup
    dist.run_commands()
  File ""C:\Python27\lib\distutils\dist.py"", line 953, in run_commands
    self.run_command(cmd)
  File ""C:\Python27\lib\distutils\dist.py"", line 972, in run_command
    cmd_obj.run()
  File ""C:\Python27\lib\distutils\command\install.py"", line 563, in run
    self.run_command('build')
  File ""C:\Python27\lib\distutils\cmd.py"", line 326, in run_command
    self.distribution.run_command(command)
  File ""C:\Python27\lib\distutils\dist.py"", line 972, in run_command
    cmd_obj.run()
  File ""C:\Python27\lib\distutils\command\build.py"", line 127, in run
    self.run_command(cmd_name)
  File ""C:\Python27\lib\distutils\cmd.py"", line 326, in run_command
    self.distribution.run_command(command)
  File ""C:\Python27\lib\distutils\dist.py"", line 972, in run_command
    cmd_obj.run()
  File ""C:\Users\Joe\Desktop\pycrypto-2.6\setup.py"", line 251, in run
    self.run_command(cmd_name)
  File ""C:\Python27\lib\distutils\cmd.py"", line 326, in run_command
    self.distribution.run_command(command)
  File ""C:\Python27\lib\distutils\dist.py"", line 972, in run_command
    cmd_obj.run()
  File ""C:\Users\Joe\Desktop\pycrypto-2.6\setup.py"", line 278, in run
    raise RuntimeError(""autoconf error"")
RuntimeError: autoconf error

I've also tried install pycrypto using the prebuilt binaries for windows from www.voidspace.org.uk
","The vcvarsall.bat file contains instructions for choosing the appropriate Microsoft C compiler for your machine. Since you do not have that file you have correctly attempted to install and use another compiler, MinGW. 
The only step you are missing is to add the location of the MinGW compiler to your PATH environment variable. Please see the accepted answer to the following question for detailed instructions: How do I add the MinGW bin directory to my system path?
","9223","<python><pycrypto>","2","1","1","2015-05-18 18:52:37","13571936","0","1","","","","2012-11-26 18:46:33",""
"5944332","Broken Pipe error when using pip to install pycrypto on Mac OS X","I am attempting to install pycrypto (version 2.3) on OS X via pip.  I am getting a ""Broken pipe"" error when the compiler attempts to compile MD2.c.  I get a very similar error when using easy_install.
Here is the error that I am getting:
bash-3.2$ 
bash-3.2$ sudo pip install pycrypto
Password:
Downloading/unpacking pycrypto
  Running setup.py egg_info for package pycrypto
Installing collected packages: pycrypto
  Running setup.py install for pycrypto
    warning: GMP library not found; Not building Crypto.PublicKey._fastmath.
    building 'Crypto.Hash.MD2' extension
    gcc-4.2 -fno-strict-aliasing -fno-common -dynamic -fwrapv -Wall -Wstrict-prototypes -DENABLE_DTRACE -arch i386 -arch ppc -arch x86_64 -pipe -std=c99 -O3 -fomit-frame-pointer -Isrc/ -I/System/Library/Frameworks/Python.framework/Versions/2.6/include/python2.6 -c src/MD2.c -o build/temp.macosx-10.6-universal-2.6/src/MD2.o
    /usr/libexec/gcc/powerpc-apple-darwin10/4.2.1/as: assembler (/usr/bin/../libexec/gcc/darwin/ppc/as or /usr/bin/../local/libexec/gcc/darwin/ppc/as) for architecture ppc not installed
    Installed assemblers are:
    /usr/bin/../libexec/gcc/darwin/x86_64/as for architecture x86_64
    /usr/bin/../libexec/gcc/darwin/i386/as for architecture i386
    src/MD2.c:134: fatal error: error writing to -: Broken pipe
    compilation terminated.
    lipo: can't open input file: /var/tmp//cc47qHNI.out (No such file or directory)
    error: command 'gcc-4.2' failed with exit status 1
    Complete output from command /usr/bin/python -c ""import setuptools;__file__='/Users/damusin/tmp/pycrypto/pycrypto-2.3/build/pycrypto/setup.py';exec(compile(open(__file__).read().replace('\r\n', '\n'), __file__, 'exec'))"" install --single-version-externally-managed --record /tmp/pip-W6xQ61-record/install-record.txt:
    running install

running build

running build_py

running build_ext

warning: GMP library not found; Not building Crypto.PublicKey._fastmath.

building 'Crypto.Hash.MD2' extension

gcc-4.2 -fno-strict-aliasing -fno-common -dynamic -fwrapv -Wall -Wstrict-prototypes -DENABLE_DTRACE -arch i386 -arch ppc -arch x86_64 -pipe -std=c99 -O3 -fomit-frame-pointer -Isrc/ -I/System/Library/Frameworks/Python.framework/Versions/2.6/include/python2.6 -c src/MD2.c -o build/temp.macosx-10.6-universal-2.6/src/MD2.o

/usr/libexec/gcc/powerpc-apple-darwin10/4.2.1/as: assembler (/usr/bin/../libexec/gcc/darwin/ppc/as or /usr/bin/../local/libexec/gcc/darwin/ppc/as) for architecture ppc not installed

Installed assemblers are:

/usr/bin/../libexec/gcc/darwin/x86_64/as for architecture x86_64

/usr/bin/../libexec/gcc/darwin/i386/as for architecture i386

src/MD2.c:134: fatal error: error writing to -: Broken pipe

compilation terminated.

lipo: can't open input file: /var/tmp//cc47qHNI.out (No such file or directory)

error: command 'gcc-4.2' failed with exit status 1

----------------------------------------
Command /usr/bin/python -c ""import setuptools;__file__='/Users/damusin/tmp/pycrypto/pycrypto-2.3/build/pycrypto/setup.py';exec(compile(open(__file__).read().replace('\r\n', '\n'), __file__, 'exec'))"" install --single-version-externally-managed --record /tmp/pip-W6xQ61-record/install-record.txt failed with error code 1
Storing complete log in /Users/admin/.pip/pip.log
bash-3.2$ 
bash-3.2$ 

I attempted to install this package using mac ports with the command ""sudo port install py26-crypto"", and looks to install smoothly but then it tells me that the pycrypto package is missing when running the command ""fab"" (Fabric).
I attempted using the ""ARCHFLAGS"" command recommended in answer by YH Wong here but no luck:
https://superuser.com/questions/259278/python-2-6-1-pycrypto-2-3-pypi-package-broken-pipe-during-build
I am using Mac OS X 10.6.7 with python 2.6.6 and XCode is installed.
","If you have installed Xcode 4, try setting ARCHFLAGS before calling pip or easy_install:
sudo bash
export ARCHFLAGS='-arch i386 -arch x86_64'
pip ...

The problem is that Xcode 4 has removed support for -arch ppc but the system Python 2.6 on Mac OS X 10.6 expects to build universal C extension modules with all three architectures.  And if you define the environment variable prior to the sudo command, it will likely not be exported through to the sudo environment.
","9001","<python><macos><gcc><pip><pycrypto>","29","65","2","2014-03-13 08:16:02","","1","13","-1","","2017-03-20 10:18:14","2011-05-10 01:43:18",""
"5944332","Broken Pipe error when using pip to install pycrypto on Mac OS X","I am attempting to install pycrypto (version 2.3) on OS X via pip.  I am getting a ""Broken pipe"" error when the compiler attempts to compile MD2.c.  I get a very similar error when using easy_install.
Here is the error that I am getting:
bash-3.2$ 
bash-3.2$ sudo pip install pycrypto
Password:
Downloading/unpacking pycrypto
  Running setup.py egg_info for package pycrypto
Installing collected packages: pycrypto
  Running setup.py install for pycrypto
    warning: GMP library not found; Not building Crypto.PublicKey._fastmath.
    building 'Crypto.Hash.MD2' extension
    gcc-4.2 -fno-strict-aliasing -fno-common -dynamic -fwrapv -Wall -Wstrict-prototypes -DENABLE_DTRACE -arch i386 -arch ppc -arch x86_64 -pipe -std=c99 -O3 -fomit-frame-pointer -Isrc/ -I/System/Library/Frameworks/Python.framework/Versions/2.6/include/python2.6 -c src/MD2.c -o build/temp.macosx-10.6-universal-2.6/src/MD2.o
    /usr/libexec/gcc/powerpc-apple-darwin10/4.2.1/as: assembler (/usr/bin/../libexec/gcc/darwin/ppc/as or /usr/bin/../local/libexec/gcc/darwin/ppc/as) for architecture ppc not installed
    Installed assemblers are:
    /usr/bin/../libexec/gcc/darwin/x86_64/as for architecture x86_64
    /usr/bin/../libexec/gcc/darwin/i386/as for architecture i386
    src/MD2.c:134: fatal error: error writing to -: Broken pipe
    compilation terminated.
    lipo: can't open input file: /var/tmp//cc47qHNI.out (No such file or directory)
    error: command 'gcc-4.2' failed with exit status 1
    Complete output from command /usr/bin/python -c ""import setuptools;__file__='/Users/damusin/tmp/pycrypto/pycrypto-2.3/build/pycrypto/setup.py';exec(compile(open(__file__).read().replace('\r\n', '\n'), __file__, 'exec'))"" install --single-version-externally-managed --record /tmp/pip-W6xQ61-record/install-record.txt:
    running install

running build

running build_py

running build_ext

warning: GMP library not found; Not building Crypto.PublicKey._fastmath.

building 'Crypto.Hash.MD2' extension

gcc-4.2 -fno-strict-aliasing -fno-common -dynamic -fwrapv -Wall -Wstrict-prototypes -DENABLE_DTRACE -arch i386 -arch ppc -arch x86_64 -pipe -std=c99 -O3 -fomit-frame-pointer -Isrc/ -I/System/Library/Frameworks/Python.framework/Versions/2.6/include/python2.6 -c src/MD2.c -o build/temp.macosx-10.6-universal-2.6/src/MD2.o

/usr/libexec/gcc/powerpc-apple-darwin10/4.2.1/as: assembler (/usr/bin/../libexec/gcc/darwin/ppc/as or /usr/bin/../local/libexec/gcc/darwin/ppc/as) for architecture ppc not installed

Installed assemblers are:

/usr/bin/../libexec/gcc/darwin/x86_64/as for architecture x86_64

/usr/bin/../libexec/gcc/darwin/i386/as for architecture i386

src/MD2.c:134: fatal error: error writing to -: Broken pipe

compilation terminated.

lipo: can't open input file: /var/tmp//cc47qHNI.out (No such file or directory)

error: command 'gcc-4.2' failed with exit status 1

----------------------------------------
Command /usr/bin/python -c ""import setuptools;__file__='/Users/damusin/tmp/pycrypto/pycrypto-2.3/build/pycrypto/setup.py';exec(compile(open(__file__).read().replace('\r\n', '\n'), __file__, 'exec'))"" install --single-version-externally-managed --record /tmp/pip-W6xQ61-record/install-record.txt failed with error code 1
Storing complete log in /Users/admin/.pip/pip.log
bash-3.2$ 
bash-3.2$ 

I attempted to install this package using mac ports with the command ""sudo port install py26-crypto"", and looks to install smoothly but then it tells me that the pycrypto package is missing when running the command ""fab"" (Fabric).
I attempted using the ""ARCHFLAGS"" command recommended in answer by YH Wong here but no luck:
https://superuser.com/questions/259278/python-2-6-1-pycrypto-2-3-pypi-package-broken-pipe-during-build
I am using Mac OS X 10.6.7 with python 2.6.6 and XCode is installed.
","Xcode 5.1
ARCHFLAGS=-Wno-error=unused-command-line-argument-hard-error-in-future pip2.7 install pycrypto

","9001","<python><macos><gcc><pip><pycrypto>","29","2","2","2014-03-13 08:16:02","","1","13","-1","","2017-03-20 10:18:14","2011-05-10 01:43:18",""
"35042164","How to decrypt using Blowfish in Pycrypto?","I found one example to encrypt the data but I am unable to find any example on how to decrypt it.
Encryption Example:
>>> from Crypto.Cipher import Blowfish
>>> from Crypto import Random
>>> from struct import pack
>>>
>>> bs = Blowfish.block_size
>>> key = b'An arbitrarily long key'
>>> iv = Random.new().read(bs)
>>> cipher = Blowfish.new(key, Blowfish.MODE_CBC, iv)
>>> plaintext = b'docendo discimus '
>>> plen = bs - divmod(len(plaintext),bs)[1]
>>> padding = [plen]*plen
>>> padding = pack('b'*plen, *padding)
>>> msg = iv + cipher.encrypt(plaintext + padding)

I did not find any example on how to decrypt. 
","Let's make some observations:

CBC mode needs an Initialization Vector (IV) that has the same length as the block size
the full plaintext is the actual message including padding (PKCS#5 padding in RFC 2898 Sec. 6.1.1 Step 4)
the IV is prepended to the ciphertext

What needs to be done:

Use the same key
Read the IV before creating the decryptor
Remove padding after decryption by looking at the last byte, evaluate that as an integer and remove as many bytes from the end of the plaintext

Code:
from Crypto.Cipher import Blowfish
from struct import pack

bs = Blowfish.block_size
key = b'An arbitrarily long key'
ciphertext = b'\xe2:\x141vp\x05\x92\xd7\xfa\xb5@\xda\x05w.\xaaRG+U+\xc5G\x08\xdf\xf4Xua\x88\x1b'
iv = ciphertext[:bs]
ciphertext = ciphertext[bs:]

cipher = Blowfish.new(key, Blowfish.MODE_CBC, iv)
msg = cipher.decrypt(ciphertext)

last_byte = msg[-1]
msg = msg[:- (last_byte if type(last_byte) is int else ord(last_byte))]
print(repr(msg))

","8945","<python><pycrypto><blowfish>","2","8","1","2016-01-30 19:33:21","35046273","1","1","1816580","","2016-01-27 19:26:18","2016-01-27 16:00:32",""
"20284381","Can't find a precompilied version of PyCrypto 2.6 for windows x64","Does anyone know where I could find a precompilied version of pycrypto 2.6.1 for Windows x64?
I found http://www.voidspace.org.uk/python/modules.shtml#pycrypto but I can't download the file. The link is broken.
Of course, there is the option of building the library from scratch but I don't want to do that.
","The download link PyCrypto 2.6 works for Python 2.7 64bit in 
http://www.voidspace.org.uk/python/modules.shtml#pycrypto works.
","8724","<python-2.7><pycrypto>","1","2","1","2013-12-07 15:04:58","20442845","5","","2113279","","2013-11-29 11:16:03","2013-11-29 11:10:59",""
"29358433","Why can't I import Crypto after installing pycrypto in Python?","On OSX 10.10, I'm getting 'ImportError: No module named Crypto' in Python 2.7.6 after installing the pycrypto module. I get the error when I run python in the terminal and try import Crypto. 
I've installed via sudo pip install pycrypto and also tried installing from source from here: https://pypi.python.org/pypi/pycrypto. According to that site, there's a python setup.py test command (which runs fine for me), but it skips modules which aren't available, so I'm not sure if it's actually useful in this case.
The only thing I tried to do was find and compare to other packages in /Library/Python/2.7/site-packages... I noticed that the other packages (like Naked, PyYAML, and others) have directories whereas pycrypto just has an 'ASCII text' file (and no directory) according to the file pycrypto-2.6.1-py2.7.egg-info command. This scenario was after installing from source.
When installing from pip, I see that 'pycrypto-2.6.1-py2.7.egg-info' shows up as a directory, but there aren't any .py files in there.
I'm new to python and really at a loss. Any help is greatly appreciated.
","The issue was not related to the .egg files - it was the Crypto directory itself.
In my working solution I can't remember whether I used apt-get or whether I installed PyCrypto from source, but in the /Library/Python/2.7/site-packages directory I needed to rename the crypto directory to Crypto and everything worked fine.
","8326","<python><macos><python-2.7><pycrypto>","2","7","2","2017-02-24 19:26:54","29503172","5","","","","","2015-03-31 00:07:40",""
"29358433","Why can't I import Crypto after installing pycrypto in Python?","On OSX 10.10, I'm getting 'ImportError: No module named Crypto' in Python 2.7.6 after installing the pycrypto module. I get the error when I run python in the terminal and try import Crypto. 
I've installed via sudo pip install pycrypto and also tried installing from source from here: https://pypi.python.org/pypi/pycrypto. According to that site, there's a python setup.py test command (which runs fine for me), but it skips modules which aren't available, so I'm not sure if it's actually useful in this case.
The only thing I tried to do was find and compare to other packages in /Library/Python/2.7/site-packages... I noticed that the other packages (like Naked, PyYAML, and others) have directories whereas pycrypto just has an 'ASCII text' file (and no directory) according to the file pycrypto-2.6.1-py2.7.egg-info command. This scenario was after installing from source.
When installing from pip, I see that 'pycrypto-2.6.1-py2.7.egg-info' shows up as a directory, but there aren't any .py files in there.
I'm new to python and really at a loss. Any help is greatly appreciated.
","I had the same problem in CentOS-6.
But I tried
yum install python-devel (install python dev didin't work) followed by 
easy_install pycrypto.
Now you can import and use without any problem
","8326","<python><macos><python-2.7><pycrypto>","2","0","2","2017-02-24 19:26:54","29503172","5","","","","","2015-03-31 00:07:40",""
"7954661","AES 256 Encryption with PyCrypto using CBC mode - any weaknesses?","I have the following python script to encrypt/decrypt data using AES 256, could you please tell me if there's anything in the code that may make the encryption weak or if there's anything that I've not taken account of for AES 256 encryption using CBC mode? I've tested the script and it works fine, it is encrypting and decrypting data but just wanted a second opinion. Thanks.
    from Crypto.Cipher import AES
    from Crypto import Random

    BLOCK_SIZE = 32

    INTERRUPT = u'\u0001'

    PAD = u'\u0000'

    def AddPadding(data, interrupt, pad, block_size):
        new_data = ''.join([data, interrupt])
        new_data_len = len(new_data)
        remaining_len = block_size - new_data_len
        to_pad_len = remaining_len % block_size
        pad_string = pad * to_pad_len
        return ''.join([new_data, pad_string])

    def StripPadding(data, interrupt, pad):
        return data.rstrip(pad).rstrip(interrupt)

    SECRET_KEY = Random.new().read(32)

    IV = Random.new().read(16)

    cipher_for_encryption = AES.new(SECRET_KEY, AES.MODE_CBC, IV)
    cipher_for_decryption = AES.new(SECRET_KEY, AES.MODE_CBC, IV)

    def EncryptWithAES(encrypt_cipher, plaintext_data):
        plaintext_padded = AddPadding(plaintext_data, INTERRUPT, PAD, BLOCK_SIZE)
        encrypted = encrypt_cipher.encrypt(plaintext_padded)
        return encrypted

    def DecryptWithAES(decrypt_cipher, encrypted_data):
        decoded_encrypted_data = encrypted_data
        decrypted_data = decrypt_cipher.decrypt(decoded_encrypted_data)
        return StripPadding(decrypted_data, INTERRUPT, PAD)

    our_data_to_encrypt = u'abc11100000'
    encrypted_data = EncryptWithAES(cipher_for_encryption, our_data_to_encrypt)
    print ('Encrypted string:', encrypted_data)

    decrypted_data = DecryptWithAES(cipher_for_decryption, encrypted_data)
    print ('Decrypted string:', decrypted_data)

","I've seen the code posted on the internet. There are - in principle - not too many things wrong with it, but there is no need to invent your own padding. Furthermore, I don't see why the first padding character is called INTERRUPT. I presume that INTERRUPT and PAD is handled as a single byte (I'm not a Python expert).
The most common padding is PKCS#5 padding. It consists of N bytes with the value of the number of padding bytes. The padding used here looks more like 'ISO' padding, which consists of a single bit set to 1 to distinguish it from the data and other padding bits, and the rest is zero's. That would be code point \u0080 in code.
So the encryption (which can provide confidentiality of data) seems to be used correctly. It depends on the use case if you also need integrity protection and/or authentication, e.g. by using a MAC or HMAC. Of course, no legal guarantees or anything provided.
","8175","<python><encryption><encryption-symmetric><pycrypto>","3","2","1","2011-12-01 22:01:26","8348903","0","2","","","","2011-10-31 13:54:29",""
"33337904","RSA generate private key from data with python","I have a cipher message in base64 and a pubkey.pem with the public key information. So because the key is small(576) I have recovered all the needed information to reconstruct the private key : p,q and d.
Now I want to decipher the message but I don't know how to do it. Indeed if I want to use the decrypt function I need an priv_key object but I don't know how to generate it from (n,e,d)
from Crypto.PublicKey import RSA
from base64 import b64decode

#message I want to decipher
msg=""e8oQDihsmkvjT3sZe+EE8lwNvBEsFegYF6+OOFOiR6gMtMZxxba/bIgLUD8pV3yEf0gOOfHuB5bC3vQmo7bE4PcIKfpFGZBA""

pub_key64 = 'MGQwDQYJKoZIhvcNAQEBBQADUwAwUAJJAMLLsk/b+SO2Emjj8Ro4lt5FdLO6WHMMvWUpOIZOIiPu63BKF8/QjRa0aJGmFHR1mTnG5Jqv5/JZVUjHTB1/uNJM0VyyO0zQowIDAQAB'

pub_keyDER = b64decode(pub_key64)
pub_key_obj = RSA.importKey(pub_keyDER)   #my weak public key
...   # how to generate priv_key_obj ???
dsmg=priv_key_obj.decrypt(msg)

","You can construct a private from components in the following way (documentation):
from Crypto.PublicKey import RSA

# assume d was correctly calculated
n = 1234....L
e = 65537L
d = 43434...L
private_key = RSA.construct((n, e, d))
dsmg = private_key.decrypt(msg)

","8011","<python><python-2.7><rsa><pycrypto>","0","2","1","2015-10-26 11:24:31","33339894","0","","1816580","","2015-10-26 06:37:56","2015-10-26 03:08:57",""
"43994590","How do I get around the "" No module named 'Crypto' "" error after doing ""pip install pycrypto""?","Basically, I'm trying to bring Chemobot into one of my own chatrooms, and its creator has suggested me that I should run the .py script on my own machine. I've barely started programming in python and my first interest as of now is to run that file.
I'm using:

Windows command prompt (cmd) to run
Python 3.6 (I'm uneasy about this, he run the code with 2.7)
Windows 8.1
Notepad++ to edit files
Visual C++ 2015 Build Tools which I was prompted to install from here.

Errors I'm getting:
However when I enter the command python main.py, I get the following error:
Microsoft Windows [Version 6.3.9600]
(c) 2013 Microsoft Corporation. All rights reserved.

C:\Python36>python main.py
Traceback (most recent call last):
  File ""main.py"", line 2, in <module>
    import chatbot, random, shutil, time, urllib, sys, upsidedown, threading
  File ""C:\Python36\chatbot.py"", line 3, in <module>
    import requests, codecs, time, json, getpass, threading, os, linecache, sys,
 simplecrypt
  File ""C:\Python36\lib\site-packages\simplecrypt\__init__.py"", line 2, in <modu
le>
    from Crypto.Cipher import AES
ModuleNotFoundError: No module named 'Crypto'

C:\Python36>

Running pip install pycrypto gives me the following error:
    creating build\lib.win-amd64-3.6\Crypto\Cipher
    copying lib\Crypto\Cipher\AES.py -> build\lib.win-amd64-3.6\Crypto\Cipher
    copying lib\Crypto\Cipher\ARC2.py -> build\lib.win-amd64-3.6\Crypto\Cipher
    copying lib\Crypto\Cipher\ARC4.py -> build\lib.win-amd64-3.6\Crypto\Cipher
    copying lib\Crypto\Cipher\blockalgo.py -> build\lib.win-amd64-3.6\Crypto\Cip
her
    copying lib\Crypto\Cipher\Blowfish.py -> build\lib.win-amd64-3.6\Crypto\Ciph
er
    copying lib\Crypto\Cipher\CAST.py -> build\lib.win-amd64-3.6\Crypto\Cipher
    copying lib\Crypto\Cipher\DES.py -> build\lib.win-amd64-3.6\Crypto\Cipher
    copying lib\Crypto\Cipher\DES3.py -> build\lib.win-amd64-3.6\Crypto\Cipher
    copying lib\Crypto\Cipher\PKCS1_OAEP.py -> build\lib.win-amd64-3.6\Crypto\Ci
pher
    copying lib\Crypto\Cipher\PKCS1_v1_5.py -> build\lib.win-amd64-3.6\Crypto\Ci
pher
    copying lib\Crypto\Cipher\XOR.py -> build\lib.win-amd64-3.6\Crypto\Cipher
    copying lib\Crypto\Cipher\__init__.py -> build\lib.win-amd64-3.6\Crypto\Ciph
er
    creating build\lib.win-amd64-3.6\Crypto\Util
    copying lib\Crypto\Util\asn1.py -> build\lib.win-amd64-3.6\Crypto\Util
    copying lib\Crypto\Util\Counter.py -> build\lib.win-amd64-3.6\Crypto\Util
    copying lib\Crypto\Util\number.py -> build\lib.win-amd64-3.6\Crypto\Util
    copying lib\Crypto\Util\py3compat.py -> build\lib.win-amd64-3.6\Crypto\Util
    copying lib\Crypto\Util\randpool.py -> build\lib.win-amd64-3.6\Crypto\Util
    copying lib\Crypto\Util\RFC1751.py -> build\lib.win-amd64-3.6\Crypto\Util
    copying lib\Crypto\Util\winrandom.py -> build\lib.win-amd64-3.6\Crypto\Util
    copying lib\Crypto\Util\_number_new.py -> build\lib.win-amd64-3.6\Crypto\Uti
l
    copying lib\Crypto\Util\__init__.py -> build\lib.win-amd64-3.6\Crypto\Util
    creating build\lib.win-amd64-3.6\Crypto\Random
    copying lib\Crypto\Random\random.py -> build\lib.win-amd64-3.6\Crypto\Random

    copying lib\Crypto\Random\_UserFriendlyRNG.py -> build\lib.win-amd64-3.6\Cry
pto\Random
    copying lib\Crypto\Random\__init__.py -> build\lib.win-amd64-3.6\Crypto\Rand
om
    creating build\lib.win-amd64-3.6\Crypto\Random\Fortuna
    copying lib\Crypto\Random\Fortuna\FortunaAccumulator.py -> build\lib.win-amd
64-3.6\Crypto\Random\Fortuna
    copying lib\Crypto\Random\Fortuna\FortunaGenerator.py -> build\lib.win-amd64
-3.6\Crypto\Random\Fortuna
    copying lib\Crypto\Random\Fortuna\SHAd256.py -> build\lib.win-amd64-3.6\Cryp
to\Random\Fortuna
    copying lib\Crypto\Random\Fortuna\__init__.py -> build\lib.win-amd64-3.6\Cry
pto\Random\Fortuna
    creating build\lib.win-amd64-3.6\Crypto\Random\OSRNG
    copying lib\Crypto\Random\OSRNG\fallback.py -> build\lib.win-amd64-3.6\Crypt
o\Random\OSRNG
    copying lib\Crypto\Random\OSRNG\nt.py -> build\lib.win-amd64-3.6\Crypto\Rand
om\OSRNG
    copying lib\Crypto\Random\OSRNG\posix.py -> build\lib.win-amd64-3.6\Crypto\R
andom\OSRNG
    copying lib\Crypto\Random\OSRNG\rng_base.py -> build\lib.win-amd64-3.6\Crypt
o\Random\OSRNG
    copying lib\Crypto\Random\OSRNG\__init__.py -> build\lib.win-amd64-3.6\Crypt
o\Random\OSRNG
    creating build\lib.win-amd64-3.6\Crypto\SelfTest
    copying lib\Crypto\SelfTest\st_common.py -> build\lib.win-amd64-3.6\Crypto\S
elfTest
    copying lib\Crypto\SelfTest\__init__.py -> build\lib.win-amd64-3.6\Crypto\Se
lfTest
    creating build\lib.win-amd64-3.6\Crypto\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\common.py -> build\lib.win-amd64-3.6\Cryp
to\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_AES.py -> build\lib.win-amd64-3.6\Cr
ypto\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_ARC2.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_ARC4.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_Blowfish.py -> build\lib.win-amd64-3
.6\Crypto\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_CAST.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_DES.py -> build\lib.win-amd64-3.6\Cr
ypto\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_DES3.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_pkcs1_15.py -> build\lib.win-amd64-3
.6\Crypto\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_pkcs1_oaep.py -> build\lib.win-amd64
-3.6\Crypto\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_XOR.py -> build\lib.win-amd64-3.6\Cr
ypto\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\__init__.py -> build\lib.win-amd64-3.6\Cr
ypto\SelfTest\Cipher
    creating build\lib.win-amd64-3.6\Crypto\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\common.py -> build\lib.win-amd64-3.6\Crypto
\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_HMAC.py -> build\lib.win-amd64-3.6\Cry
pto\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_MD2.py -> build\lib.win-amd64-3.6\Cryp
to\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_MD4.py -> build\lib.win-amd64-3.6\Cryp
to\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_MD5.py -> build\lib.win-amd64-3.6\Cryp
to\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_RIPEMD.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_SHA.py -> build\lib.win-amd64-3.6\Cryp
to\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_SHA224.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_SHA256.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_SHA384.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_SHA512.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\__init__.py -> build\lib.win-amd64-3.6\Cryp
to\SelfTest\Hash
    creating build\lib.win-amd64-3.6\Crypto\SelfTest\Protocol
    copying lib\Crypto\SelfTest\Protocol\test_AllOrNothing.py -> build\lib.win-a
md64-3.6\Crypto\SelfTest\Protocol
    copying lib\Crypto\SelfTest\Protocol\test_chaffing.py -> build\lib.win-amd64
-3.6\Crypto\SelfTest\Protocol
    copying lib\Crypto\SelfTest\Protocol\test_KDF.py -> build\lib.win-amd64-3.6\
Crypto\SelfTest\Protocol
    copying lib\Crypto\SelfTest\Protocol\test_rfc1751.py -> build\lib.win-amd64-
3.6\Crypto\SelfTest\Protocol
    copying lib\Crypto\SelfTest\Protocol\__init__.py -> build\lib.win-amd64-3.6\
Crypto\SelfTest\Protocol
    creating build\lib.win-amd64-3.6\Crypto\SelfTest\PublicKey
    copying lib\Crypto\SelfTest\PublicKey\test_DSA.py -> build\lib.win-amd64-3.6
\Crypto\SelfTest\PublicKey
    copying lib\Crypto\SelfTest\PublicKey\test_ElGamal.py -> build\lib.win-amd64
-3.6\Crypto\SelfTest\PublicKey
    copying lib\Crypto\SelfTest\PublicKey\test_importKey.py -> build\lib.win-amd
64-3.6\Crypto\SelfTest\PublicKey
    copying lib\Crypto\SelfTest\PublicKey\test_RSA.py -> build\lib.win-amd64-3.6
\Crypto\SelfTest\PublicKey
    copying lib\Crypto\SelfTest\PublicKey\__init__.py -> build\lib.win-amd64-3.6
\Crypto\SelfTest\PublicKey
    creating build\lib.win-amd64-3.6\Crypto\SelfTest\Random
    copying lib\Crypto\SelfTest\Random\test_random.py -> build\lib.win-amd64-3.6
\Crypto\SelfTest\Random
    copying lib\Crypto\SelfTest\Random\test_rpoolcompat.py -> build\lib.win-amd6
4-3.6\Crypto\SelfTest\Random
    copying lib\Crypto\SelfTest\Random\test__UserFriendlyRNG.py -> build\lib.win
-amd64-3.6\Crypto\SelfTest\Random
    copying lib\Crypto\SelfTest\Random\__init__.py -> build\lib.win-amd64-3.6\Cr
ypto\SelfTest\Random
    creating build\lib.win-amd64-3.6\Crypto\SelfTest\Random\Fortuna
    copying lib\Crypto\SelfTest\Random\Fortuna\test_FortunaAccumulator.py -> bui
ld\lib.win-amd64-3.6\Crypto\SelfTest\Random\Fortuna
    copying lib\Crypto\SelfTest\Random\Fortuna\test_FortunaGenerator.py -> build
\lib.win-amd64-3.6\Crypto\SelfTest\Random\Fortuna
    copying lib\Crypto\SelfTest\Random\Fortuna\test_SHAd256.py -> build\lib.win-
amd64-3.6\Crypto\SelfTest\Random\Fortuna
    copying lib\Crypto\SelfTest\Random\Fortuna\__init__.py -> build\lib.win-amd6
4-3.6\Crypto\SelfTest\Random\Fortuna
    creating build\lib.win-amd64-3.6\Crypto\SelfTest\Random\OSRNG
    copying lib\Crypto\SelfTest\Random\OSRNG\test_fallback.py -> build\lib.win-a
md64-3.6\Crypto\SelfTest\Random\OSRNG
    copying lib\Crypto\SelfTest\Random\OSRNG\test_generic.py -> build\lib.win-am
d64-3.6\Crypto\SelfTest\Random\OSRNG
    copying lib\Crypto\SelfTest\Random\OSRNG\test_nt.py -> build\lib.win-amd64-3
.6\Crypto\SelfTest\Random\OSRNG
    copying lib\Crypto\SelfTest\Random\OSRNG\test_posix.py -> build\lib.win-amd6
4-3.6\Crypto\SelfTest\Random\OSRNG
    copying lib\Crypto\SelfTest\Random\OSRNG\test_winrandom.py -> build\lib.win-
amd64-3.6\Crypto\SelfTest\Random\OSRNG
    copying lib\Crypto\SelfTest\Random\OSRNG\__init__.py -> build\lib.win-amd64-
3.6\Crypto\SelfTest\Random\OSRNG
    creating build\lib.win-amd64-3.6\Crypto\SelfTest\Util
    copying lib\Crypto\SelfTest\Util\test_asn1.py -> build\lib.win-amd64-3.6\Cry
pto\SelfTest\Util
    copying lib\Crypto\SelfTest\Util\test_Counter.py -> build\lib.win-amd64-3.6\
Crypto\SelfTest\Util
    copying lib\Crypto\SelfTest\Util\test_number.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Util
    copying lib\Crypto\SelfTest\Util\test_winrandom.py -> build\lib.win-amd64-3.
6\Crypto\SelfTest\Util
    copying lib\Crypto\SelfTest\Util\__init__.py -> build\lib.win-amd64-3.6\Cryp
to\SelfTest\Util
    creating build\lib.win-amd64-3.6\Crypto\SelfTest\Signature
    copying lib\Crypto\SelfTest\Signature\test_pkcs1_15.py -> build\lib.win-amd6
4-3.6\Crypto\SelfTest\Signature
    copying lib\Crypto\SelfTest\Signature\test_pkcs1_pss.py -> build\lib.win-amd
64-3.6\Crypto\SelfTest\Signature
    copying lib\Crypto\SelfTest\Signature\__init__.py -> build\lib.win-amd64-3.6
\Crypto\SelfTest\Signature
    creating build\lib.win-amd64-3.6\Crypto\Protocol
    copying lib\Crypto\Protocol\AllOrNothing.py -> build\lib.win-amd64-3.6\Crypt
o\Protocol
    copying lib\Crypto\Protocol\Chaffing.py -> build\lib.win-amd64-3.6\Crypto\Pr
otocol
    copying lib\Crypto\Protocol\KDF.py -> build\lib.win-amd64-3.6\Crypto\Protoco
l
    copying lib\Crypto\Protocol\__init__.py -> build\lib.win-amd64-3.6\Crypto\Pr
otocol
    creating build\lib.win-amd64-3.6\Crypto\PublicKey
    copying lib\Crypto\PublicKey\DSA.py -> build\lib.win-amd64-3.6\Crypto\Public
Key
    copying lib\Crypto\PublicKey\ElGamal.py -> build\lib.win-amd64-3.6\Crypto\Pu
blicKey
    copying lib\Crypto\PublicKey\pubkey.py -> build\lib.win-amd64-3.6\Crypto\Pub
licKey
    copying lib\Crypto\PublicKey\RSA.py -> build\lib.win-amd64-3.6\Crypto\Public
Key
    copying lib\Crypto\PublicKey\_DSA.py -> build\lib.win-amd64-3.6\Crypto\Publi
cKey
    copying lib\Crypto\PublicKey\_RSA.py -> build\lib.win-amd64-3.6\Crypto\Publi
cKey
    copying lib\Crypto\PublicKey\_slowmath.py -> build\lib.win-amd64-3.6\Crypto\
PublicKey
    copying lib\Crypto\PublicKey\__init__.py -> build\lib.win-amd64-3.6\Crypto\P
ublicKey
    creating build\lib.win-amd64-3.6\Crypto\Signature
    copying lib\Crypto\Signature\PKCS1_PSS.py -> build\lib.win-amd64-3.6\Crypto\
Signature
    copying lib\Crypto\Signature\PKCS1_v1_5.py -> build\lib.win-amd64-3.6\Crypto
\Signature
    copying lib\Crypto\Signature\__init__.py -> build\lib.win-amd64-3.6\Crypto\S
ignature
    Skipping optional fixer: buffer
    Skipping optional fixer: idioms
    Skipping optional fixer: set_literal
    Skipping optional fixer: ws_comma
    running build_ext
    warning: GMP or MPIR library not found; Not building Crypto.PublicKey._fastm
ath.
    building 'Crypto.Random.OSRNG.winrandom' extension
    creating build\temp.win-amd64-3.6
    creating build\temp.win-amd64-3.6\Release
    creating build\temp.win-amd64-3.6\Release\src
    C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\BIN\x86_amd64\cl.exe
/c /nologo /Ox /W3 /GL /DNDEBUG /MD -Isrc/ -Isrc/inc-msvc/ -Ic:\users\shailendra
\appdata\local\programs\python\python36\include -Ic:\users\shailendra\appdata\lo
cal\programs\python\python36\include ""-IC:\Program Files (x86)\Microsoft Visual
Studio 14.0\VC\INCLUDE"" ""-IC:\Program Files (x86)\Windows Kits\10\include\10.0.1
0240.0\ucrt"" ""-IC:\Program Files (x86)\Windows Kits\8.1\include\shared"" ""-IC:\Pr
ogram Files (x86)\Windows Kits\8.1\include\um"" ""-IC:\Program Files (x86)\Windows
 Kits\8.1\include\winrt"" /Tcsrc/winrand.c /Fobuild\temp.win-amd64-3.6\Release\sr
c/winrand.obj
    winrand.c
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(
26): error C2061: syntax error: identifier 'intmax_t'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(
27): error C2061: syntax error: identifier 'rem'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(
27): error C2059: syntax error: ';'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(
28): error C2059: syntax error: '}'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(
30): error C2061: syntax error: identifier 'imaxdiv_t'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(
30): error C2059: syntax error: ';'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(
40): error C2143: syntax error: missing '{' before '__cdecl'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(
41): error C2146: syntax error: missing ')' before identifier '_Number'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(
41): error C2061: syntax error: identifier '_Number'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(
41): error C2059: syntax error: ';'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(
42): error C2059: syntax error: ')'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(
45): error C2143: syntax error: missing '{' before '__cdecl'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(
46): error C2146: syntax error: missing ')' before identifier '_Numerator'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(
46): error C2061: syntax error: identifier '_Numerator'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(
46): error C2059: syntax error: ';'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(
46): error C2059: syntax error: ','
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(
48): error C2059: syntax error: ')'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(
50): error C2143: syntax error: missing '{' before '__cdecl'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(
56): error C2143: syntax error: missing '{' before '__cdecl'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(
63): error C2143: syntax error: missing '{' before '__cdecl'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(
69): error C2143: syntax error: missing '{' before '__cdecl'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(
76): error C2143: syntax error: missing '{' before '__cdecl'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(
82): error C2143: syntax error: missing '{' before '__cdecl'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(
89): error C2143: syntax error: missing '{' before '__cdecl'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(
95): error C2143: syntax error: missing '{' before '__cdecl'
    error: command 'C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\B
IN\\x86_amd64\\cl.exe' failed with exit status 2

    ----------------------------------------
Command ""c:\users\shailendra\appdata\local\programs\python\python36\python.exe -
u -c ""import setuptools, tokenize;__file__='C:\\Users\\SHAILE~1\\AppData\\Local\
\Temp\\pip-build-g1i38ndu\\pycrypto\\setup.py';f=getattr(tokenize, 'open', open)
(__file__);code=f.read().replace('\r\n', '\n');f.close();exec(compile(code, __fi
le__, 'exec'))"" install --record C:\Users\SHAILE~1\AppData\Local\Temp\pip-3g33l4
mb-record\install-record.txt --single-version-externally-managed --compile"" fail
ed with error code 1 in C:\Users\SHAILE~1\AppData\Local\Temp\pip-build-g1i38ndu\
pycrypto\

C:\Python36>

I've even tried easy_install pycrypto, yet I get an error:
C:\Python36>easy_install pycrypto
Searching for pycrypto
Reading https://pypi.python.org/simple/pycrypto/
Downloading https://pypi.python.org/packages/60/db/645aa9af249f059cc3a368b118de3
3889219e0362141e75d4eaf6f80f163/pycrypto-2.6.1.tar.gz#md5=55a61a054aa66812daf516
1a0d5d7eda
Best match: pycrypto 2.6.1
Processing pycrypto-2.6.1.tar.gz
Writing C:\Users\SHAILE~1\AppData\Local\Temp\easy_install-2dyhm9q2\pycrypto-2.6.
1\setup.cfg
Running pycrypto-2.6.1\setup.py -q bdist_egg --dist-dir C:\Users\SHAILE~1\AppDat
a\Local\Temp\easy_install-2dyhm9q2\pycrypto-2.6.1\egg-dist-tmp-ttmqpx92
warning: GMP or MPIR library not found; Not building Crypto.PublicKey._fastmath.

winrand.c
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(26):
 error C2061: syntax error: identifier 'intmax_t'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(27):
 error C2061: syntax error: identifier 'rem'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(27):
 error C2059: syntax error: ';'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(28):
 error C2059: syntax error: '}'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(30):
 error C2061: syntax error: identifier 'imaxdiv_t'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(30):
 error C2059: syntax error: ';'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(40):
 error C2143: syntax error: missing '{' before '__cdecl'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(41):
 error C2146: syntax error: missing ')' before identifier '_Number'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(41):
 error C2061: syntax error: identifier '_Number'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(41):
 error C2059: syntax error: ';'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(42):
 error C2059: syntax error: ')'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(45):
 error C2143: syntax error: missing '{' before '__cdecl'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(46):
 error C2146: syntax error: missing ')' before identifier '_Numerator'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(46):
 error C2061: syntax error: identifier '_Numerator'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(46):
 error C2059: syntax error: ';'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(46):
 error C2059: syntax error: ','
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(48):
 error C2059: syntax error: ')'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(50):
 error C2143: syntax error: missing '{' before '__cdecl'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(56):
 error C2143: syntax error: missing '{' before '__cdecl'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(63):
 error C2143: syntax error: missing '{' before '__cdecl'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(69):
 error C2143: syntax error: missing '{' before '__cdecl'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(76):
 error C2143: syntax error: missing '{' before '__cdecl'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(82):
 error C2143: syntax error: missing '{' before '__cdecl'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(89):
 error C2143: syntax error: missing '{' before '__cdecl'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(95):
 error C2143: syntax error: missing '{' before '__cdecl'
error: Setup script exited with error: command 'C:\\Program Files (x86)\\Microso
ft Visual Studio 14.0\\VC\\BIN\\x86_amd64\\cl.exe' failed with exit status 2

C:\Python36>

My Questions:
Am I doing something wrong? Is it a compatibility issue? How do I get around this?

(P.S.: Once again, this is my first time even using python – I'd be grateful if you could explain me this in the easiest way you can.) 
","It looks like PyCrypto is not being maintained currently. So, it's better you switch to PyCryptodome.
pip install pycryptodome

If you still want to use PyCrypto you could still try,

https://packaging.python.org/extensions/#setting-up-a-build-environment-on-windows
https://stackoverflow.com/a/33338523/887007
https://stackoverflow.com/a/27327236/887007

","7798","<python><python-3.x><pycrypto>","2","4","2","2017-05-25 04:42:17","43995525","7","2","7947125","","2017-05-25 04:42:17","2017-05-16 07:05:38",""
"43994590","How do I get around the "" No module named 'Crypto' "" error after doing ""pip install pycrypto""?","Basically, I'm trying to bring Chemobot into one of my own chatrooms, and its creator has suggested me that I should run the .py script on my own machine. I've barely started programming in python and my first interest as of now is to run that file.
I'm using:

Windows command prompt (cmd) to run
Python 3.6 (I'm uneasy about this, he run the code with 2.7)
Windows 8.1
Notepad++ to edit files
Visual C++ 2015 Build Tools which I was prompted to install from here.

Errors I'm getting:
However when I enter the command python main.py, I get the following error:
Microsoft Windows [Version 6.3.9600]
(c) 2013 Microsoft Corporation. All rights reserved.

C:\Python36>python main.py
Traceback (most recent call last):
  File ""main.py"", line 2, in <module>
    import chatbot, random, shutil, time, urllib, sys, upsidedown, threading
  File ""C:\Python36\chatbot.py"", line 3, in <module>
    import requests, codecs, time, json, getpass, threading, os, linecache, sys,
 simplecrypt
  File ""C:\Python36\lib\site-packages\simplecrypt\__init__.py"", line 2, in <modu
le>
    from Crypto.Cipher import AES
ModuleNotFoundError: No module named 'Crypto'

C:\Python36>

Running pip install pycrypto gives me the following error:
    creating build\lib.win-amd64-3.6\Crypto\Cipher
    copying lib\Crypto\Cipher\AES.py -> build\lib.win-amd64-3.6\Crypto\Cipher
    copying lib\Crypto\Cipher\ARC2.py -> build\lib.win-amd64-3.6\Crypto\Cipher
    copying lib\Crypto\Cipher\ARC4.py -> build\lib.win-amd64-3.6\Crypto\Cipher
    copying lib\Crypto\Cipher\blockalgo.py -> build\lib.win-amd64-3.6\Crypto\Cip
her
    copying lib\Crypto\Cipher\Blowfish.py -> build\lib.win-amd64-3.6\Crypto\Ciph
er
    copying lib\Crypto\Cipher\CAST.py -> build\lib.win-amd64-3.6\Crypto\Cipher
    copying lib\Crypto\Cipher\DES.py -> build\lib.win-amd64-3.6\Crypto\Cipher
    copying lib\Crypto\Cipher\DES3.py -> build\lib.win-amd64-3.6\Crypto\Cipher
    copying lib\Crypto\Cipher\PKCS1_OAEP.py -> build\lib.win-amd64-3.6\Crypto\Ci
pher
    copying lib\Crypto\Cipher\PKCS1_v1_5.py -> build\lib.win-amd64-3.6\Crypto\Ci
pher
    copying lib\Crypto\Cipher\XOR.py -> build\lib.win-amd64-3.6\Crypto\Cipher
    copying lib\Crypto\Cipher\__init__.py -> build\lib.win-amd64-3.6\Crypto\Ciph
er
    creating build\lib.win-amd64-3.6\Crypto\Util
    copying lib\Crypto\Util\asn1.py -> build\lib.win-amd64-3.6\Crypto\Util
    copying lib\Crypto\Util\Counter.py -> build\lib.win-amd64-3.6\Crypto\Util
    copying lib\Crypto\Util\number.py -> build\lib.win-amd64-3.6\Crypto\Util
    copying lib\Crypto\Util\py3compat.py -> build\lib.win-amd64-3.6\Crypto\Util
    copying lib\Crypto\Util\randpool.py -> build\lib.win-amd64-3.6\Crypto\Util
    copying lib\Crypto\Util\RFC1751.py -> build\lib.win-amd64-3.6\Crypto\Util
    copying lib\Crypto\Util\winrandom.py -> build\lib.win-amd64-3.6\Crypto\Util
    copying lib\Crypto\Util\_number_new.py -> build\lib.win-amd64-3.6\Crypto\Uti
l
    copying lib\Crypto\Util\__init__.py -> build\lib.win-amd64-3.6\Crypto\Util
    creating build\lib.win-amd64-3.6\Crypto\Random
    copying lib\Crypto\Random\random.py -> build\lib.win-amd64-3.6\Crypto\Random

    copying lib\Crypto\Random\_UserFriendlyRNG.py -> build\lib.win-amd64-3.6\Cry
pto\Random
    copying lib\Crypto\Random\__init__.py -> build\lib.win-amd64-3.6\Crypto\Rand
om
    creating build\lib.win-amd64-3.6\Crypto\Random\Fortuna
    copying lib\Crypto\Random\Fortuna\FortunaAccumulator.py -> build\lib.win-amd
64-3.6\Crypto\Random\Fortuna
    copying lib\Crypto\Random\Fortuna\FortunaGenerator.py -> build\lib.win-amd64
-3.6\Crypto\Random\Fortuna
    copying lib\Crypto\Random\Fortuna\SHAd256.py -> build\lib.win-amd64-3.6\Cryp
to\Random\Fortuna
    copying lib\Crypto\Random\Fortuna\__init__.py -> build\lib.win-amd64-3.6\Cry
pto\Random\Fortuna
    creating build\lib.win-amd64-3.6\Crypto\Random\OSRNG
    copying lib\Crypto\Random\OSRNG\fallback.py -> build\lib.win-amd64-3.6\Crypt
o\Random\OSRNG
    copying lib\Crypto\Random\OSRNG\nt.py -> build\lib.win-amd64-3.6\Crypto\Rand
om\OSRNG
    copying lib\Crypto\Random\OSRNG\posix.py -> build\lib.win-amd64-3.6\Crypto\R
andom\OSRNG
    copying lib\Crypto\Random\OSRNG\rng_base.py -> build\lib.win-amd64-3.6\Crypt
o\Random\OSRNG
    copying lib\Crypto\Random\OSRNG\__init__.py -> build\lib.win-amd64-3.6\Crypt
o\Random\OSRNG
    creating build\lib.win-amd64-3.6\Crypto\SelfTest
    copying lib\Crypto\SelfTest\st_common.py -> build\lib.win-amd64-3.6\Crypto\S
elfTest
    copying lib\Crypto\SelfTest\__init__.py -> build\lib.win-amd64-3.6\Crypto\Se
lfTest
    creating build\lib.win-amd64-3.6\Crypto\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\common.py -> build\lib.win-amd64-3.6\Cryp
to\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_AES.py -> build\lib.win-amd64-3.6\Cr
ypto\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_ARC2.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_ARC4.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_Blowfish.py -> build\lib.win-amd64-3
.6\Crypto\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_CAST.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_DES.py -> build\lib.win-amd64-3.6\Cr
ypto\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_DES3.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_pkcs1_15.py -> build\lib.win-amd64-3
.6\Crypto\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_pkcs1_oaep.py -> build\lib.win-amd64
-3.6\Crypto\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_XOR.py -> build\lib.win-amd64-3.6\Cr
ypto\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\__init__.py -> build\lib.win-amd64-3.6\Cr
ypto\SelfTest\Cipher
    creating build\lib.win-amd64-3.6\Crypto\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\common.py -> build\lib.win-amd64-3.6\Crypto
\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_HMAC.py -> build\lib.win-amd64-3.6\Cry
pto\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_MD2.py -> build\lib.win-amd64-3.6\Cryp
to\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_MD4.py -> build\lib.win-amd64-3.6\Cryp
to\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_MD5.py -> build\lib.win-amd64-3.6\Cryp
to\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_RIPEMD.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_SHA.py -> build\lib.win-amd64-3.6\Cryp
to\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_SHA224.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_SHA256.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_SHA384.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_SHA512.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\__init__.py -> build\lib.win-amd64-3.6\Cryp
to\SelfTest\Hash
    creating build\lib.win-amd64-3.6\Crypto\SelfTest\Protocol
    copying lib\Crypto\SelfTest\Protocol\test_AllOrNothing.py -> build\lib.win-a
md64-3.6\Crypto\SelfTest\Protocol
    copying lib\Crypto\SelfTest\Protocol\test_chaffing.py -> build\lib.win-amd64
-3.6\Crypto\SelfTest\Protocol
    copying lib\Crypto\SelfTest\Protocol\test_KDF.py -> build\lib.win-amd64-3.6\
Crypto\SelfTest\Protocol
    copying lib\Crypto\SelfTest\Protocol\test_rfc1751.py -> build\lib.win-amd64-
3.6\Crypto\SelfTest\Protocol
    copying lib\Crypto\SelfTest\Protocol\__init__.py -> build\lib.win-amd64-3.6\
Crypto\SelfTest\Protocol
    creating build\lib.win-amd64-3.6\Crypto\SelfTest\PublicKey
    copying lib\Crypto\SelfTest\PublicKey\test_DSA.py -> build\lib.win-amd64-3.6
\Crypto\SelfTest\PublicKey
    copying lib\Crypto\SelfTest\PublicKey\test_ElGamal.py -> build\lib.win-amd64
-3.6\Crypto\SelfTest\PublicKey
    copying lib\Crypto\SelfTest\PublicKey\test_importKey.py -> build\lib.win-amd
64-3.6\Crypto\SelfTest\PublicKey
    copying lib\Crypto\SelfTest\PublicKey\test_RSA.py -> build\lib.win-amd64-3.6
\Crypto\SelfTest\PublicKey
    copying lib\Crypto\SelfTest\PublicKey\__init__.py -> build\lib.win-amd64-3.6
\Crypto\SelfTest\PublicKey
    creating build\lib.win-amd64-3.6\Crypto\SelfTest\Random
    copying lib\Crypto\SelfTest\Random\test_random.py -> build\lib.win-amd64-3.6
\Crypto\SelfTest\Random
    copying lib\Crypto\SelfTest\Random\test_rpoolcompat.py -> build\lib.win-amd6
4-3.6\Crypto\SelfTest\Random
    copying lib\Crypto\SelfTest\Random\test__UserFriendlyRNG.py -> build\lib.win
-amd64-3.6\Crypto\SelfTest\Random
    copying lib\Crypto\SelfTest\Random\__init__.py -> build\lib.win-amd64-3.6\Cr
ypto\SelfTest\Random
    creating build\lib.win-amd64-3.6\Crypto\SelfTest\Random\Fortuna
    copying lib\Crypto\SelfTest\Random\Fortuna\test_FortunaAccumulator.py -> bui
ld\lib.win-amd64-3.6\Crypto\SelfTest\Random\Fortuna
    copying lib\Crypto\SelfTest\Random\Fortuna\test_FortunaGenerator.py -> build
\lib.win-amd64-3.6\Crypto\SelfTest\Random\Fortuna
    copying lib\Crypto\SelfTest\Random\Fortuna\test_SHAd256.py -> build\lib.win-
amd64-3.6\Crypto\SelfTest\Random\Fortuna
    copying lib\Crypto\SelfTest\Random\Fortuna\__init__.py -> build\lib.win-amd6
4-3.6\Crypto\SelfTest\Random\Fortuna
    creating build\lib.win-amd64-3.6\Crypto\SelfTest\Random\OSRNG
    copying lib\Crypto\SelfTest\Random\OSRNG\test_fallback.py -> build\lib.win-a
md64-3.6\Crypto\SelfTest\Random\OSRNG
    copying lib\Crypto\SelfTest\Random\OSRNG\test_generic.py -> build\lib.win-am
d64-3.6\Crypto\SelfTest\Random\OSRNG
    copying lib\Crypto\SelfTest\Random\OSRNG\test_nt.py -> build\lib.win-amd64-3
.6\Crypto\SelfTest\Random\OSRNG
    copying lib\Crypto\SelfTest\Random\OSRNG\test_posix.py -> build\lib.win-amd6
4-3.6\Crypto\SelfTest\Random\OSRNG
    copying lib\Crypto\SelfTest\Random\OSRNG\test_winrandom.py -> build\lib.win-
amd64-3.6\Crypto\SelfTest\Random\OSRNG
    copying lib\Crypto\SelfTest\Random\OSRNG\__init__.py -> build\lib.win-amd64-
3.6\Crypto\SelfTest\Random\OSRNG
    creating build\lib.win-amd64-3.6\Crypto\SelfTest\Util
    copying lib\Crypto\SelfTest\Util\test_asn1.py -> build\lib.win-amd64-3.6\Cry
pto\SelfTest\Util
    copying lib\Crypto\SelfTest\Util\test_Counter.py -> build\lib.win-amd64-3.6\
Crypto\SelfTest\Util
    copying lib\Crypto\SelfTest\Util\test_number.py -> build\lib.win-amd64-3.6\C
rypto\SelfTest\Util
    copying lib\Crypto\SelfTest\Util\test_winrandom.py -> build\lib.win-amd64-3.
6\Crypto\SelfTest\Util
    copying lib\Crypto\SelfTest\Util\__init__.py -> build\lib.win-amd64-3.6\Cryp
to\SelfTest\Util
    creating build\lib.win-amd64-3.6\Crypto\SelfTest\Signature
    copying lib\Crypto\SelfTest\Signature\test_pkcs1_15.py -> build\lib.win-amd6
4-3.6\Crypto\SelfTest\Signature
    copying lib\Crypto\SelfTest\Signature\test_pkcs1_pss.py -> build\lib.win-amd
64-3.6\Crypto\SelfTest\Signature
    copying lib\Crypto\SelfTest\Signature\__init__.py -> build\lib.win-amd64-3.6
\Crypto\SelfTest\Signature
    creating build\lib.win-amd64-3.6\Crypto\Protocol
    copying lib\Crypto\Protocol\AllOrNothing.py -> build\lib.win-amd64-3.6\Crypt
o\Protocol
    copying lib\Crypto\Protocol\Chaffing.py -> build\lib.win-amd64-3.6\Crypto\Pr
otocol
    copying lib\Crypto\Protocol\KDF.py -> build\lib.win-amd64-3.6\Crypto\Protoco
l
    copying lib\Crypto\Protocol\__init__.py -> build\lib.win-amd64-3.6\Crypto\Pr
otocol
    creating build\lib.win-amd64-3.6\Crypto\PublicKey
    copying lib\Crypto\PublicKey\DSA.py -> build\lib.win-amd64-3.6\Crypto\Public
Key
    copying lib\Crypto\PublicKey\ElGamal.py -> build\lib.win-amd64-3.6\Crypto\Pu
blicKey
    copying lib\Crypto\PublicKey\pubkey.py -> build\lib.win-amd64-3.6\Crypto\Pub
licKey
    copying lib\Crypto\PublicKey\RSA.py -> build\lib.win-amd64-3.6\Crypto\Public
Key
    copying lib\Crypto\PublicKey\_DSA.py -> build\lib.win-amd64-3.6\Crypto\Publi
cKey
    copying lib\Crypto\PublicKey\_RSA.py -> build\lib.win-amd64-3.6\Crypto\Publi
cKey
    copying lib\Crypto\PublicKey\_slowmath.py -> build\lib.win-amd64-3.6\Crypto\
PublicKey
    copying lib\Crypto\PublicKey\__init__.py -> build\lib.win-amd64-3.6\Crypto\P
ublicKey
    creating build\lib.win-amd64-3.6\Crypto\Signature
    copying lib\Crypto\Signature\PKCS1_PSS.py -> build\lib.win-amd64-3.6\Crypto\
Signature
    copying lib\Crypto\Signature\PKCS1_v1_5.py -> build\lib.win-amd64-3.6\Crypto
\Signature
    copying lib\Crypto\Signature\__init__.py -> build\lib.win-amd64-3.6\Crypto\S
ignature
    Skipping optional fixer: buffer
    Skipping optional fixer: idioms
    Skipping optional fixer: set_literal
    Skipping optional fixer: ws_comma
    running build_ext
    warning: GMP or MPIR library not found; Not building Crypto.PublicKey._fastm
ath.
    building 'Crypto.Random.OSRNG.winrandom' extension
    creating build\temp.win-amd64-3.6
    creating build\temp.win-amd64-3.6\Release
    creating build\temp.win-amd64-3.6\Release\src
    C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\BIN\x86_amd64\cl.exe
/c /nologo /Ox /W3 /GL /DNDEBUG /MD -Isrc/ -Isrc/inc-msvc/ -Ic:\users\shailendra
\appdata\local\programs\python\python36\include -Ic:\users\shailendra\appdata\lo
cal\programs\python\python36\include ""-IC:\Program Files (x86)\Microsoft Visual
Studio 14.0\VC\INCLUDE"" ""-IC:\Program Files (x86)\Windows Kits\10\include\10.0.1
0240.0\ucrt"" ""-IC:\Program Files (x86)\Windows Kits\8.1\include\shared"" ""-IC:\Pr
ogram Files (x86)\Windows Kits\8.1\include\um"" ""-IC:\Program Files (x86)\Windows
 Kits\8.1\include\winrt"" /Tcsrc/winrand.c /Fobuild\temp.win-amd64-3.6\Release\sr
c/winrand.obj
    winrand.c
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(
26): error C2061: syntax error: identifier 'intmax_t'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(
27): error C2061: syntax error: identifier 'rem'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(
27): error C2059: syntax error: ';'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(
28): error C2059: syntax error: '}'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(
30): error C2061: syntax error: identifier 'imaxdiv_t'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(
30): error C2059: syntax error: ';'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(
40): error C2143: syntax error: missing '{' before '__cdecl'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(
41): error C2146: syntax error: missing ')' before identifier '_Number'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(
41): error C2061: syntax error: identifier '_Number'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(
41): error C2059: syntax error: ';'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(
42): error C2059: syntax error: ')'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(
45): error C2143: syntax error: missing '{' before '__cdecl'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(
46): error C2146: syntax error: missing ')' before identifier '_Numerator'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(
46): error C2061: syntax error: identifier '_Numerator'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(
46): error C2059: syntax error: ';'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(
46): error C2059: syntax error: ','
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(
48): error C2059: syntax error: ')'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(
50): error C2143: syntax error: missing '{' before '__cdecl'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(
56): error C2143: syntax error: missing '{' before '__cdecl'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(
63): error C2143: syntax error: missing '{' before '__cdecl'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(
69): error C2143: syntax error: missing '{' before '__cdecl'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(
76): error C2143: syntax error: missing '{' before '__cdecl'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(
82): error C2143: syntax error: missing '{' before '__cdecl'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(
89): error C2143: syntax error: missing '{' before '__cdecl'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(
95): error C2143: syntax error: missing '{' before '__cdecl'
    error: command 'C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\B
IN\\x86_amd64\\cl.exe' failed with exit status 2

    ----------------------------------------
Command ""c:\users\shailendra\appdata\local\programs\python\python36\python.exe -
u -c ""import setuptools, tokenize;__file__='C:\\Users\\SHAILE~1\\AppData\\Local\
\Temp\\pip-build-g1i38ndu\\pycrypto\\setup.py';f=getattr(tokenize, 'open', open)
(__file__);code=f.read().replace('\r\n', '\n');f.close();exec(compile(code, __fi
le__, 'exec'))"" install --record C:\Users\SHAILE~1\AppData\Local\Temp\pip-3g33l4
mb-record\install-record.txt --single-version-externally-managed --compile"" fail
ed with error code 1 in C:\Users\SHAILE~1\AppData\Local\Temp\pip-build-g1i38ndu\
pycrypto\

C:\Python36>

I've even tried easy_install pycrypto, yet I get an error:
C:\Python36>easy_install pycrypto
Searching for pycrypto
Reading https://pypi.python.org/simple/pycrypto/
Downloading https://pypi.python.org/packages/60/db/645aa9af249f059cc3a368b118de3
3889219e0362141e75d4eaf6f80f163/pycrypto-2.6.1.tar.gz#md5=55a61a054aa66812daf516
1a0d5d7eda
Best match: pycrypto 2.6.1
Processing pycrypto-2.6.1.tar.gz
Writing C:\Users\SHAILE~1\AppData\Local\Temp\easy_install-2dyhm9q2\pycrypto-2.6.
1\setup.cfg
Running pycrypto-2.6.1\setup.py -q bdist_egg --dist-dir C:\Users\SHAILE~1\AppDat
a\Local\Temp\easy_install-2dyhm9q2\pycrypto-2.6.1\egg-dist-tmp-ttmqpx92
warning: GMP or MPIR library not found; Not building Crypto.PublicKey._fastmath.

winrand.c
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(26):
 error C2061: syntax error: identifier 'intmax_t'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(27):
 error C2061: syntax error: identifier 'rem'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(27):
 error C2059: syntax error: ';'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(28):
 error C2059: syntax error: '}'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(30):
 error C2061: syntax error: identifier 'imaxdiv_t'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(30):
 error C2059: syntax error: ';'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(40):
 error C2143: syntax error: missing '{' before '__cdecl'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(41):
 error C2146: syntax error: missing ')' before identifier '_Number'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(41):
 error C2061: syntax error: identifier '_Number'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(41):
 error C2059: syntax error: ';'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(42):
 error C2059: syntax error: ')'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(45):
 error C2143: syntax error: missing '{' before '__cdecl'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(46):
 error C2146: syntax error: missing ')' before identifier '_Numerator'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(46):
 error C2061: syntax error: identifier '_Numerator'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(46):
 error C2059: syntax error: ';'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(46):
 error C2059: syntax error: ','
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(48):
 error C2059: syntax error: ')'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(50):
 error C2143: syntax error: missing '{' before '__cdecl'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(56):
 error C2143: syntax error: missing '{' before '__cdecl'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(63):
 error C2143: syntax error: missing '{' before '__cdecl'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(69):
 error C2143: syntax error: missing '{' before '__cdecl'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(76):
 error C2143: syntax error: missing '{' before '__cdecl'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(82):
 error C2143: syntax error: missing '{' before '__cdecl'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(89):
 error C2143: syntax error: missing '{' before '__cdecl'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(95):
 error C2143: syntax error: missing '{' before '__cdecl'
error: Setup script exited with error: command 'C:\\Program Files (x86)\\Microso
ft Visual Studio 14.0\\VC\\BIN\\x86_amd64\\cl.exe' failed with exit status 2

C:\Python36>

My Questions:
Am I doing something wrong? Is it a compatibility issue? How do I get around this?

(P.S.: Once again, this is my first time even using python – I'd be grateful if you could explain me this in the easiest way you can.) 
","If doing python -m Cryptodome.SelfTest is giving you an error, you can do:
pip uninstall pycryptodome

and then:
easy_install pycryptodome

Even after this, running python -m Cryptodome.SelfTest was giving me an error, but when I re-ran the file, it worked.
","7798","<python><python-3.x><pycrypto>","2","2","2","2017-05-25 04:42:17","43995525","7","2","7947125","","2017-05-25 04:42:17","2017-05-16 07:05:38",""
"6061180","problems with easy_install pycrypto","I'm trying install pycrypto on osx with easy_install and I'm getting the following error:
easy_install pycrypto
Searching for pycrypto
Reading http://pypi.python.org/simple/pycrypto/
Reading http://pycrypto.sourceforge.net
Reading http://www.pycrypto.org/
Reading http://www.amk.ca/python/code/crypto
Best match: pycrypto 2.3
Downloading http://ftp.dlitz.net/pub/dlitz/crypto/pycrypto/pycrypto-2.3.tar.gz
Processing pycrypto-2.3.tar.gz
Running pycrypto-2.3/setup.py -q bdist_egg --dist-dir /var/folders/3D/3D07iptvHZuzuYaeQDMFIU+++TI/-Tmp-/easy_install-00HgRU/pycrypto-2.3/egg-dist-tmp-BWGYsg
warning: GMP library not found; Not building Crypto.PublicKey._fastmath.
/usr/libexec/gcc/powerpc-apple-darwin10/4.2.1/as: assembler (/usr/bin/../libexec/gcc/darwin/ppc/as or /usr/bin/../local/libexec/gcc/darwin/ppc/as) for architecture ppc not installed
Installed assemblers are:
/usr/bin/../libexec/gcc/darwin/x86_64/as for architecture x86_64
/usr/bin/../libexec/gcc/darwin/i386/as for architecture i386
src/MD2.c:134: fatal error: error writing to -: Broken pipe
compilation terminated.
lipo: can't open input file: /var/folders/3D/3D07iptvHZuzuYaeQDMFIU+++TI/-Tmp-//ccoXuPRo.out (No such file or directory)
error: Setup script exited with error: command 'gcc-4.2' failed with exit status 1

","Yes, it's a result of installing Xcode 4. It tries to build for ppc, although Xcode 4 no longer has the relevant bits for that. See this question for ways round it: https://superuser.com/questions/259278/python-2-6-1-pycrypto-2-3-pypi-package-broken-pipe-during-build
","7493","<python><pycrypto>","7","2","4","2014-05-05 19:40:27","6062373","3","1","","","","2011-05-19 15:35:42",""
"6061180","problems with easy_install pycrypto","I'm trying install pycrypto on osx with easy_install and I'm getting the following error:
easy_install pycrypto
Searching for pycrypto
Reading http://pypi.python.org/simple/pycrypto/
Reading http://pycrypto.sourceforge.net
Reading http://www.pycrypto.org/
Reading http://www.amk.ca/python/code/crypto
Best match: pycrypto 2.3
Downloading http://ftp.dlitz.net/pub/dlitz/crypto/pycrypto/pycrypto-2.3.tar.gz
Processing pycrypto-2.3.tar.gz
Running pycrypto-2.3/setup.py -q bdist_egg --dist-dir /var/folders/3D/3D07iptvHZuzuYaeQDMFIU+++TI/-Tmp-/easy_install-00HgRU/pycrypto-2.3/egg-dist-tmp-BWGYsg
warning: GMP library not found; Not building Crypto.PublicKey._fastmath.
/usr/libexec/gcc/powerpc-apple-darwin10/4.2.1/as: assembler (/usr/bin/../libexec/gcc/darwin/ppc/as or /usr/bin/../local/libexec/gcc/darwin/ppc/as) for architecture ppc not installed
Installed assemblers are:
/usr/bin/../libexec/gcc/darwin/x86_64/as for architecture x86_64
/usr/bin/../libexec/gcc/darwin/i386/as for architecture i386
src/MD2.c:134: fatal error: error writing to -: Broken pipe
compilation terminated.
lipo: can't open input file: /var/folders/3D/3D07iptvHZuzuYaeQDMFIU+++TI/-Tmp-//ccoXuPRo.out (No such file or directory)
error: Setup script exited with error: command 'gcc-4.2' failed with exit status 1

","I have this in my ~/.bash_profile to address this very issue:
# Set compile flags to not try to compile for PPC (no longer supported by xcode 4)
# (this is required for eg building pycrypto)
export ARCHFLAGS=""-arch i386 -arch x86_64""

","7493","<python><pycrypto>","7","10","4","2014-05-05 19:40:27","6062373","3","1","","","","2011-05-19 15:35:42",""
"6061180","problems with easy_install pycrypto","I'm trying install pycrypto on osx with easy_install and I'm getting the following error:
easy_install pycrypto
Searching for pycrypto
Reading http://pypi.python.org/simple/pycrypto/
Reading http://pycrypto.sourceforge.net
Reading http://www.pycrypto.org/
Reading http://www.amk.ca/python/code/crypto
Best match: pycrypto 2.3
Downloading http://ftp.dlitz.net/pub/dlitz/crypto/pycrypto/pycrypto-2.3.tar.gz
Processing pycrypto-2.3.tar.gz
Running pycrypto-2.3/setup.py -q bdist_egg --dist-dir /var/folders/3D/3D07iptvHZuzuYaeQDMFIU+++TI/-Tmp-/easy_install-00HgRU/pycrypto-2.3/egg-dist-tmp-BWGYsg
warning: GMP library not found; Not building Crypto.PublicKey._fastmath.
/usr/libexec/gcc/powerpc-apple-darwin10/4.2.1/as: assembler (/usr/bin/../libexec/gcc/darwin/ppc/as or /usr/bin/../local/libexec/gcc/darwin/ppc/as) for architecture ppc not installed
Installed assemblers are:
/usr/bin/../libexec/gcc/darwin/x86_64/as for architecture x86_64
/usr/bin/../libexec/gcc/darwin/i386/as for architecture i386
src/MD2.c:134: fatal error: error writing to -: Broken pipe
compilation terminated.
lipo: can't open input file: /var/folders/3D/3D07iptvHZuzuYaeQDMFIU+++TI/-Tmp-//ccoXuPRo.out (No such file or directory)
error: Setup script exited with error: command 'gcc-4.2' failed with exit status 1

","xCode 5.1
ARCHFLAGS=-Wno-error=unused-command-line-argument-hard-error-in-future pip install pycrypto

","7493","<python><pycrypto>","7","1","4","2014-05-05 19:40:27","6062373","3","1","","","","2011-05-19 15:35:42",""
"6061180","problems with easy_install pycrypto","I'm trying install pycrypto on osx with easy_install and I'm getting the following error:
easy_install pycrypto
Searching for pycrypto
Reading http://pypi.python.org/simple/pycrypto/
Reading http://pycrypto.sourceforge.net
Reading http://www.pycrypto.org/
Reading http://www.amk.ca/python/code/crypto
Best match: pycrypto 2.3
Downloading http://ftp.dlitz.net/pub/dlitz/crypto/pycrypto/pycrypto-2.3.tar.gz
Processing pycrypto-2.3.tar.gz
Running pycrypto-2.3/setup.py -q bdist_egg --dist-dir /var/folders/3D/3D07iptvHZuzuYaeQDMFIU+++TI/-Tmp-/easy_install-00HgRU/pycrypto-2.3/egg-dist-tmp-BWGYsg
warning: GMP library not found; Not building Crypto.PublicKey._fastmath.
/usr/libexec/gcc/powerpc-apple-darwin10/4.2.1/as: assembler (/usr/bin/../libexec/gcc/darwin/ppc/as or /usr/bin/../local/libexec/gcc/darwin/ppc/as) for architecture ppc not installed
Installed assemblers are:
/usr/bin/../libexec/gcc/darwin/x86_64/as for architecture x86_64
/usr/bin/../libexec/gcc/darwin/i386/as for architecture i386
src/MD2.c:134: fatal error: error writing to -: Broken pipe
compilation terminated.
lipo: can't open input file: /var/folders/3D/3D07iptvHZuzuYaeQDMFIU+++TI/-Tmp-//ccoXuPRo.out (No such file or directory)
error: Setup script exited with error: command 'gcc-4.2' failed with exit status 1

","Looks like this got a little more difficult with OSX 10.9. Here's the additional stuff I did:
brew install libffi
If you see the warning about how it's installed ""keg-only"", that means homebrew did not link it, so you'll need to provide some more info with export PKG_CONFIG_PATH=/usr/local/opt/libffi/lib/pkgconfig. At that point the install blows up because by default OSX now dies on warning flags, so suppress that behavior as well:
export CFLAGS=-Qunused-arguments
export CPPFLAGS=-Qunused-arguments

Then you should be able to install with pip.
","7493","<python><pycrypto>","7","0","4","2014-05-05 19:40:27","6062373","3","1","","","","2011-05-19 15:35:42",""
"35164881","Generating Large Prime Numbers with Py Crypto","I'm trying to generate a large prime number (2048 bits) using the crypto library in python in order to implement RSA.  However, I do not really understand the syntax of the getPrime() function.  I currently have:
from Crypto.Util import number

n_length = 2048

primeNum = number.getPrime(n_length, randFunc)

I don't understand what the randFunc is supposed to be in the getPrime function. 
","n_length is the ""size"" of the prime number. It will return a number around 2^n_length. randFunc is a callable function that accepts a single argument N and then returns a string of N random bytes. (os.urandom is an example of this). In most cases, randFunc can (and should) be omitted, since the default is PyCrypto's own random number generator.
","7371","<python><random><primes><pycrypto>","3","5","1","2016-02-02 22:32:12","35164882","6","","1816580","","2016-02-02 22:32:12","2016-02-02 21:43:21",""
"39653074","AES-CBC 128, 192 and 256 encryption decryption in Python 3 using PKCS#7 padding","I have searched a lot on SO about complete encryption decryption example with my requirement. In fact, I've got many links and examples but None is working for me for AES-192-CBC mode and AES-256-CBC.
I have got following example which is supposed to be working with all types but it is working only with AES-128-CBC mode. I am new to Python. Can anyone help me where I am wrong?
I am using Python 3.4 on windows and I can not move to Python 2.7.
import base64
from Crypto.Cipher import AES

class AESCipher:
    class InvalidBlockSizeError(Exception):
        """"""Raised for invalid block sizes""""""
        pass

    def __init__(self, key, block_size=16):
        if block_size < 2 or block_size > 255:
            raise AESCipher.InvalidBlockSizeError('The block size must be between 2 and 255, inclusive')
        self.block_size = block_size
        self.key = key
        self.iv = bytes(key[0:16], 'utf-8')
        print(self.key)
        print(key[0:16])

    def __pad(self, text):
        text_length = len(text)
        amount_to_pad = self.block_size - (text_length % self.block_size)
        if amount_to_pad == 0:
            amount_to_pad = self.block_size
        self.pad = chr(amount_to_pad)
        return text + self.pad * amount_to_pad

    def __unpad(self, text):
        #pad = ord(text[-1])
        #return text[:-pad]
        text = text.rstrip(self.pad)
        return text

    def encrypt( self, raw ):
        raw = self.__pad(raw)
        cipher = AES.new(self.key, AES.MODE_CBC, self.iv)
        return base64.b64encode(cipher.encrypt(raw)) 

    def decrypt( self, enc ):
        enc = base64.b64decode(enc)
        cipher = AES.new(self.key, AES.MODE_CBC, self.iv )
        return self.__unpad(cipher.decrypt(enc).decode(""utf-8""))

e = AESCipher('1234567812345678', 16)
#e = AESCipher('123456781234567812345678', 24)
#e = AESCipher('12345678123456781234567812345678', 32)
secret_data = ""hi""
enc_str = e.encrypt(secret_data)
print('enc_str: ' + enc_str.decode())
dec_str = e.decrypt(enc_str)
print('dec str: ' + dec_str)

Though this code encrypts the data with 192 and 256 bit encryption and successfully decrypt that too but my other .Net and Ruby application only able to decrypt the data which was encrypted using 128 encryption.
Note .Net and Ruby application are successfully tested with each other and with online encryption tool with all encryption types.
Note that my application requires AES-CBC mode and PKCS#7 padding and must be run on Python 3.4.
","Made it working by padding of 16 bytes for any encryption types. For that I used AES.block_size which is 16 by default for AES.
import base64
from Crypto.Cipher import AES

class AESCipher:
    class InvalidBlockSizeError(Exception):
        """"""Raised for invalid block sizes""""""
        pass

    def __init__(self, key):
        self.key = key
        self.iv = bytes(key[0:16], 'utf-8')
        print(self.key)
        print(key[0:16])

    def __pad(self, text):
        text_length = len(text)
        amount_to_pad = AES.block_size - (text_length % AES.block_size)
        if amount_to_pad == 0:
            amount_to_pad = AES.block_size
        pad = chr(amount_to_pad)
        return text + pad * amount_to_pad

    def __unpad(self, text):
        pad = ord(text[-1])
        return text[:-pad]

    def encrypt( self, raw ):
        raw = self.__pad(raw)
        cipher = AES.new(self.key, AES.MODE_CBC, self.iv)
        return base64.b64encode(cipher.encrypt(raw)) 

    def decrypt( self, enc ):
        enc = base64.b64decode(enc)
        cipher = AES.new(self.key, AES.MODE_CBC, self.iv )
        return self.__unpad(cipher.decrypt(enc).decode(""utf-8""))

e = AESCipher('1234567812345678', 16)
#e = AESCipher('123456781234567812345678', 24)
#e = AESCipher('12345678123456781234567812345678', 32)
secret_data = ""hi""
enc_str = e.encrypt(secret_data)
print('enc_str: ' + enc_str.decode())
dec_str = e.decrypt(enc_str)
print('dec str: ' + dec_str)

","7277","<python><aes><pycrypto><pkcs#7><cbc-mode>","1","2","1","2016-09-26 09:01:04","","0","","1816580","","2016-09-25 19:05:14","2016-09-23 05:17:15",""
"7717983","Crypto & Paramiko issue","I've installed paramiko using command:

sudo apt-get install python-paramiko

That installed pyCrypto too. Currently, when I try to import paramiko, i get following error: 
File ""/usr/local/lib/python2.6/dist-packages/paramiko-1.7.7.1-py2.6.egg/paramiko/util.py"", line 32, in   
from paramiko.common 
import * File ""/usr/local/lib/python2.6/dist-packages/paramiko-1.7.7.1-py2.6.egg/paramiko/common.py"", line 98, in 
from Crypto import Random ImportError: cannot import name Random

When I copy Crypto files to directory with my python script I get following:
from Crypto.Hash import SHA256 ImportError: cannot import name SHA256

Second error was even when I don't install paramiko, just copy crypto and paramiko files to my script directory.
There's no file SHA256.py in my directory, I don't know where can I get it.
","On Debian/Ubuntu, avoid installing python-* packages with apt-get, unless the python package has tricky binary or OS dependencies. For paramiko, you can go without the apt package. Preferably, install inside a virtualenv.
$ virtualenv foo
$ . foo/bin/activate
(foo)$ pip install paramiko
(foo)$ python
>>> import paramiko

Works like a charm. You may need to install the virtualenv and pip commands using apt-get.
","7204","<python><paramiko><pycrypto>","2","1","2","2017-10-05 06:12:23","7718092","1","","","","","2011-10-10 20:00:03",""
"7717983","Crypto & Paramiko issue","I've installed paramiko using command:

sudo apt-get install python-paramiko

That installed pyCrypto too. Currently, when I try to import paramiko, i get following error: 
File ""/usr/local/lib/python2.6/dist-packages/paramiko-1.7.7.1-py2.6.egg/paramiko/util.py"", line 32, in   
from paramiko.common 
import * File ""/usr/local/lib/python2.6/dist-packages/paramiko-1.7.7.1-py2.6.egg/paramiko/common.py"", line 98, in 
from Crypto import Random ImportError: cannot import name Random

When I copy Crypto files to directory with my python script I get following:
from Crypto.Hash import SHA256 ImportError: cannot import name SHA256

Second error was even when I don't install paramiko, just copy crypto and paramiko files to my script directory.
There's no file SHA256.py in my directory, I don't know where can I get it.
","For linux you can try with pip:
    pip install paramiko
Or you can download the paramiko module from here
","7204","<python><paramiko><pycrypto>","2","0","2","2017-10-05 06:12:23","7718092","1","","","","","2011-10-10 20:00:03",""
"20057764","Python pyCrypto RSA encrypt method gives same results using private or public key","I'm trying to understand the pyCrypto encrypt and decrypt methods for public and private keys, and I'm seeing something strange. Suppose I have a set of private and public keys, stored in files dummy_private.txt and dummy_public.txt.
I create a private key object and public key object like this:
private_key_file='dummy_private.txt'
f = open(private_key_file, 'r')
privateKey = RSA.importKey(f.read(),None)
f.close()

public_key_file='dummy_public.txt'
f = open(public_key_file, 'r')
publicKey = RSA.importKey(f.read(),None)
f.close()

Now suppose I want to encrypt some message. I can do it like this:
s='This is a super secret message'
sutf8=s.encode('utf8')

enc=publicKey.encrypt(sutf8,None)[0]
encb64=base64.encodestring(enc)
print ""Public key Encoded message is %s"" % (encb64,)

This makes sense because I am encrypting with the public key and I should be able to decrypt with the private key.
However, I can also encrypt the above using the private key, and it gives me the same result!
enc2=privateKey.encrypt(sutf8,None)[0]
encb642=base64.encodestring(enc2)
print ""Private key Encoded message is %s"" % (encb642,)

When I print out the base64 encoded version of the encrypted data, using either the private key or the public key, they are the same! Why is that?
And this raises the problem of digitally signing something with the private key. If I can sign something with the public key and get the same results, then how does signing verify that I am who I say I am? This must be some issue with the encrypt method that I don't understand. Can someone please explain?
Since encrypting with both the public key and private key gives the same results, it appears that decrypting with the private key can be done regardless of whether the encryption was done with the private key or the public key. I'm totally confused as to why one could encrypt with the private key and get a result that is the same as if it were done with the public key.
","When you encrypt with a private key, pycrypto is actually using the public key (which can be generated from the private key).  
Source:  PyCrypto: Decrypt only with public key in file (no private+public key) 
You'll find that pycrypto doesn't allow you to decrypt using the public key for good reason:
>>> publicKey.decrypt(enc2)
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
  File ""/usr/local/lib/python2.7/site-packages/pycrypto-2.6-py2.7-linux-x86_64.egg/Crypto/PublicKey/RSA.py"", line 174, in decrypt
    return pubkey.pubkey.decrypt(self, ciphertext)
  File ""/usr/local/lib/python2.7/site-packages/pycrypto-2.6-py2.7-linux-x86_64.egg/Crypto/PublicKey/pubkey.py"", line 93, in decrypt
    plaintext=self._decrypt(ciphertext)
  File ""/usr/local/lib/python2.7/site-packages/pycrypto-2.6-py2.7-linux-x86_64.egg/Crypto/PublicKey/RSA.py"", line 239, in _decrypt
    mp = self.key._decrypt(cp)
  File ""/usr/local/lib/python2.7/site-packages/pycrypto-2.6-py2.7-linux-x86_64.egg/Crypto/PublicKey/_slowmath.py"", line 52, in _decrypt
    raise TypeError(""No private key"")
TypeError: No private key

Mathematically, RSA makes it possible to encrypt with the private key and decrypt with the public key, but you're not supposed to do that.  The public key is PUBLIC - it's something you would readily share and thus would be easily disseminated.  There's no added value in that case compared to using a symmetric cipher and a shared key (see: https://crypto.stackexchange.com/questions/2123/rsa-encryption-with-private-key-and-decryption-with-a-public-key)
Conceptually, ""encrypting"" with the private key is more useful for signing a message whereas the ""decryption"" using the public key is used for verifying the message.
More background: exchange public/private key in PKCS#1 OAEP encryption/decryption
","6880","<python><rsa><pycrypto>","2","7","1","2013-11-18 22:30:06","20059249","0","","699285","","2013-11-18 21:04:49","2013-11-18 20:58:44",""
"6643531","Error when installing pycrypto","I'm trying to install Fabric on my PC (with Windows + setuptools). It was giving me an error, since I have older version of pycrypto. 
When I was trying to install latest version I stumble upon ""Unable to find vcvarsall.bat"" error. I googled something about MinGW, so I installed that too. I've added it to my Windows PATH, but now i'm getting another error, which looks like this: ""command 'gcc' failed: no such file or directory."" What do i do now? Found something about gcc-mingw, which is some version of MinGW that could help? 
Why is has to be so damn complicated :D.

New development. Managed to install pycrytpo and fabric, but still can't run anything in the latter. New error says: ""ImportError: no module named win32api"". Quick google search says something about PyWin, but easy_install can't find it and it looks like it's abandoned. Any ideas?
","Well, it's so complicated because C (C++? Can't remember what they used at the moment, but I am pretty sure they used C) is much, much better at math than Python, so the math pieces of PyCrypto are all written in C. It does have a _slowmath module if the compiled versions aren't available, but it's name is telling... it is much slower.
gcc is the GNU Compiler Collection (<!-- an edit, I had thought it stood for GNU C Compiler, but apparently my knowledge was dated). It is a bit legendary, but apparently your version of Windows has not heard of it. First question though, have you closed the ""DOS prompt"" and restart it? (it's in quotes because the people at superuser once yelled at me because I did not sufficiently acknowledge its inferiority) Environment Variables in Windows do not update during a ""DOS session"" (or whatever it is supposed to be called).
If you have, chances are that it can be found inside of the MingW install director -- if there is a bin folder I'd check there first. If not, I would search for gcc.exe and make sure that it's path is part of PATH. Then,
If all else fails, you might be able to get more info on MingW here.
","6752","<python><mingw><fabric><pycrypto>","3","3","1","2011-12-01 22:54:29","","2","1","542565","","2011-07-10 21:08:09","2011-07-10 20:40:23",""
"6886240","Python - Pycrypto - Sending encrypted data over network","I am trying to get 2 programs to share encrypted data over a network using public keys, but I am stuck with a difficult problem : the information that is shared (the keys and/or the encrypted data) seems to get modified. I am hoping to keep the encrypted data format as well as the format of the keys as simple as possible in order to allow compatibility with other languages.
To break down the problem, I have created 2 programs : Keyreceive and Keysend.
They execute in this order : 

Keyreceive starts up and waits to receive the encrypted data
Keysend starts up and generates an RSA key, saving the exported private key to a file
Keysend encrypts a piece of data and sends it to Keyreceive over the network
Keyreceive imports the private key from the same file, and uses it to decrypt the encrypted data
Keysend also decrypts the encrypted data to verify the result

Keysend.py
import socket
import os
from Crypto.PublicKey import RSA
from Crypto import Random

rng = Random.new().read
RSAkey = RSA.generate(1024, rng) 

privatekey = RSAkey
publickey = RSAkey.publickey()
print(privatekey.exportKey()) #export under the 'PEM' format (I think)
print(publickey.exportKey())

file = open(""Keys.txt"", ""w"")
file.write(privatekey.exportKey()) #save exported private key
file.close()

data = ""hello world""
enc_data = publickey.encrypt(data, 16) #encrypt message with public key
print(str(enc_data))

host = ""localhost""
port = 12800
connexion = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
connexion.connect((host, port))
connexion.send(str(enc_data)) # send encrypted data, this appears to be the source of the problem

dec_data = RSAkey.decrypt(enc_data) # test decryption
print(dec_data)

os.system(""pause"")

Keyreceive.py
import socket
import os
from Crypto.PublicKey import RSA
from Crypto import Random

host = ''
port = 12800

connexion = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
connexion.bind((host, port))
connexion.listen(5)
clientconnexion, connexioninfo = connexion.accept()
enc_data = clientconnexion.recv(1024) # receive encrypted data
print(enc_data)

file = open(""Keys.txt"", ""r"")
privatestr = file.read() # retrieve exported private key from file
file.close()
print(privatestr)

privatekey = RSA.importKey(privatestr) # import private key
data = privatekey.decrypt(enc_data) # decrypt sent encrypted data
print(data)

os.system(""pause"")

After both files have finished decrypting the encrypted data, Keysender outputs the original message : ""hello world"", whereas Keyreceiver outputs gibberish.
If there is ""hidden"" information in the encrypted data and key formats, would there be some way of writing them in a ""pure"" text format?
","You're right about which line is the source of the problem.
connexion.send(str(enc_data))

enc_data here is a tuple, the first (and in fact only) element of which is a string containing the actual ciphertext. When you are calling str on it, you're getting Python's attempt to convert the tuple to a string, which is not what you want. If you change it to this:
connexion.send(enc_data[0])

then it should do what you want.
","6705","<python><file><networking><public-key-encryption><pycrypto>","3","5","1","2011-12-07 15:55:48","6886318","1","2","308903","","2011-12-07 15:55:48","2011-07-30 22:01:57",""
"11380955","Chmod not recognized as internal or external command","Trying to get pycrypto installed in Windows. At the command prompt, I type python setup.py build. Things start out ok, but when it gets to 'running build_configure', I get this error message and things come to a halt:

chmod not recognized as internal or external command

I tried downloading and installing chmod, but that didn't change anything.
Anyone have any suggestions?  Thanks.
","I was running this from a Windows cmd prompt. I ran it from MinGW and it got past this part.
","6698","<chmod><pycrypto>","1","4","2","2015-04-26 17:51:13","11381201","3","","190829","","2012-07-22 18:45:14","2012-07-08 05:42:42",""
"11380955","Chmod not recognized as internal or external command","Trying to get pycrypto installed in Windows. At the command prompt, I type python setup.py build. Things start out ok, but when it gets to 'running build_configure', I get this error message and things come to a halt:

chmod not recognized as internal or external command

I tried downloading and installing chmod, but that didn't change anything.
Anyone have any suggestions?  Thanks.
","You need to install msys package under MinGW 

and add following entries in your PATH env variable.

C:\MinGW\bin
C:\MinGW\msys\1.0\bin [This is where you will find chmod executable]

Then run your command from normal windows command prompt.
","6698","<chmod><pycrypto>","1","1","2","2015-04-26 17:51:13","11381201","3","","190829","","2012-07-22 18:45:14","2012-07-08 05:42:42",""
"15437700","No handlers could be found for logger ""paramiko.transport""","I am running some fabric tasks inside of flask. Flask is running inside of wsgi in apache. Once in a while I get this error in the apache logs:
No handlers could be found for logger ""paramiko.transport""
I then have to restart apache for the fabric tasks that are called via flask to work again. 
Any ideas here... I'm running Ubuntu 12.04
Fabric==1.5.3

paramiko==1.9.0

pycrypto==2.6

Flask==0.9

","Seems like the answer was to add disconnect_all() to all of my fabric functions. Now the problem seems to have gone away. 
","6573","<flask><fabric><pycrypto>","-1","1","2","2014-07-18 08:12:10","15616648","1","1","1538100","","2013-03-15 16:41:42","2013-03-15 16:39:40",""
"15437700","No handlers could be found for logger ""paramiko.transport""","I am running some fabric tasks inside of flask. Flask is running inside of wsgi in apache. Once in a while I get this error in the apache logs:
No handlers could be found for logger ""paramiko.transport""
I then have to restart apache for the fabric tasks that are called via flask to work again. 
Any ideas here... I'm running Ubuntu 12.04
Fabric==1.5.3

paramiko==1.9.0

pycrypto==2.6

Flask==0.9

","I found the solution for paramiko from this website: https://translate.google.com/translate?hl=en&sl=zh-CN&tl=en&u=http%3A%2F%2Fwww.ouvps.com%2F%3Fp%3D869
Basically, you just need to add a line
paramiko.util.log_to_file(""filename.log"")
Then all connection will be logged to the file
Not sure where to put that line in fabric
","6573","<flask><fabric><pycrypto>","-1","0","2","2014-07-18 08:12:10","15616648","1","1","1538100","","2013-03-15 16:41:42","2013-03-15 16:39:40",""
"10938274","Building PyCrypto with fastmath (gmp or mpir) via pip on Windows","I installed PyCrypto on Windows via pip but i was not able to build Crypto.PublicKey._fastmath because GMP was not found.
I know there is a binary version on voidspace but i would like to build the latest version of PyCrypto
","The following one is a way to achieve your goal. There are other, probably better ways (e.g. based on Visual Studio), but this one has worked for me. Additionally, it does not use pip.
All operations are carried out on a command prompt.

Install Mingw, including MSYS and the Development Toolkit. This will give you a fairly complete Unix-like development environment.
Ensure that Mingw binaries are in PATH environment variable. You need MinGW\bin and MingGW\msys\1.0\bin. 
Download MPIR sources in a temporary directory. It is important you do not use 2.5.1 because of a bug that will break the build. 2.5.0 is fine.
Build the MPIR library. This is fairly straightforward: execute bash configure followed by make.
HACK #1 Copy libmpir.a from mpir-2.5.0\.libs into C:\Python2.7.1\libs. This is necessary because distutils is broken and I could not find a way to direct it to the correct library location.
HACK #2 Edit C:\Python2.7.1\Lib\distutils\cygwincompiler.py and remove any occurrance of the string -mno-cygwin. The reason is explained here.
Download PyCrypto sources and unpack them in another temporary directory.
Set CPPFLAGS environment variable to the MPIR directory, which contains mpir.h.
HACK 3 Edit setup.py and add the following line in build_extension method:  

self.__add_compiler_option(os.environ['CPPFLAGS'])

Run bash configure. You should see two lines saying:

checking for __gmpz_init in -lgmp... no
  checking for __gmpz_init in -lmpir... yes

Execute python setup.py build -c mingw32. You should see no errors.
Execute python setup.py test to verify that everything is fine.
Execute python setup.py install to copy the files into your local Python repository.
Alternatively, run python setup.py bdist_wininst to create an installer.

I really hate all the various hacks, and I'd love to hear if they can be avoided.
","6448","<python><windows><pip><pycrypto>","6","5","1","2014-06-19 12:06:53","10940382","3","3","","","","2012-06-07 19:06:30",""
"9093046","Implementing full RSA in Python","I am currently working on a project using python to implement p2p communication between two (or more) computers.  Although I am pretty proficient with python, I am by no means an expert; programming and encryption are by no means my profession, simply a hobby.  However, in working on this project I have been attempting to learn more about encryption as well as network programming.
As of right now I have written a pretty powerful class that communicates well over a network and I am trying to improve it by implementing RSA to encrypt the connections between peers on the network; this is where I've run into some difficulty.
I have previously used pycrypto to do some basic encryption/decryption in python and am thus-far quite comfortable with all of the tools involved -- including the necessary public-key ciphers.  Moreover, I am also aware that pycrypto has some shortcomings, in the fact that it only implements the bare-bones, low level encryption/decryption algorithms needed to implement RSA and does not implement a full protocol for public-key encryption.  I also know that pycrypto contains some other useful tools such as an AllOrNothing transform which can be used for padding the communication, etc.  However, my question is: can anyone recommend any online articles, books, blog posts, projects, etc. which can help me in my quest to implement an effective RSA protocol?
Lastly, I understand that this is a touchy subject with cryptologists in that amateur-implemented protocols usually mean less security in the program.  As I noted above, this project is a mere learning experience; if I was completing this project professionally I would surely use M2Crypto or some other professionally-implemented, secure protocol -- i.e. SSL/TLS.  Alas, I am merely trying to learn more about encryption by implementing my own model of a proven protocol to create a secure connection between two peers.
Thanks,
Kevin
","Take a look at Raymond Hettinger recipe: Public Key Encryption (RSA)
","6431","<python><encryption><rsa><pycrypto>","10","8","3","2012-11-19 12:49:30","","1","3","","","","2012-02-01 08:50:34",""
"9093046","Implementing full RSA in Python","I am currently working on a project using python to implement p2p communication between two (or more) computers.  Although I am pretty proficient with python, I am by no means an expert; programming and encryption are by no means my profession, simply a hobby.  However, in working on this project I have been attempting to learn more about encryption as well as network programming.
As of right now I have written a pretty powerful class that communicates well over a network and I am trying to improve it by implementing RSA to encrypt the connections between peers on the network; this is where I've run into some difficulty.
I have previously used pycrypto to do some basic encryption/decryption in python and am thus-far quite comfortable with all of the tools involved -- including the necessary public-key ciphers.  Moreover, I am also aware that pycrypto has some shortcomings, in the fact that it only implements the bare-bones, low level encryption/decryption algorithms needed to implement RSA and does not implement a full protocol for public-key encryption.  I also know that pycrypto contains some other useful tools such as an AllOrNothing transform which can be used for padding the communication, etc.  However, my question is: can anyone recommend any online articles, books, blog posts, projects, etc. which can help me in my quest to implement an effective RSA protocol?
Lastly, I understand that this is a touchy subject with cryptologists in that amateur-implemented protocols usually mean less security in the program.  As I noted above, this project is a mere learning experience; if I was completing this project professionally I would surely use M2Crypto or some other professionally-implemented, secure protocol -- i.e. SSL/TLS.  Alas, I am merely trying to learn more about encryption by implementing my own model of a proven protocol to create a secure connection between two peers.
Thanks,
Kevin
","Why not take a look at my pure-Python RSA library? It may be just what you need: http://stuvel.eu/rsa
","6431","<python><encryption><rsa><pycrypto>","10","4","3","2012-11-19 12:49:30","","1","3","","","","2012-02-01 08:50:34",""
"9093046","Implementing full RSA in Python","I am currently working on a project using python to implement p2p communication between two (or more) computers.  Although I am pretty proficient with python, I am by no means an expert; programming and encryption are by no means my profession, simply a hobby.  However, in working on this project I have been attempting to learn more about encryption as well as network programming.
As of right now I have written a pretty powerful class that communicates well over a network and I am trying to improve it by implementing RSA to encrypt the connections between peers on the network; this is where I've run into some difficulty.
I have previously used pycrypto to do some basic encryption/decryption in python and am thus-far quite comfortable with all of the tools involved -- including the necessary public-key ciphers.  Moreover, I am also aware that pycrypto has some shortcomings, in the fact that it only implements the bare-bones, low level encryption/decryption algorithms needed to implement RSA and does not implement a full protocol for public-key encryption.  I also know that pycrypto contains some other useful tools such as an AllOrNothing transform which can be used for padding the communication, etc.  However, my question is: can anyone recommend any online articles, books, blog posts, projects, etc. which can help me in my quest to implement an effective RSA protocol?
Lastly, I understand that this is a touchy subject with cryptologists in that amateur-implemented protocols usually mean less security in the program.  As I noted above, this project is a mere learning experience; if I was completing this project professionally I would surely use M2Crypto or some other professionally-implemented, secure protocol -- i.e. SSL/TLS.  Alas, I am merely trying to learn more about encryption by implementing my own model of a proven protocol to create a secure connection between two peers.
Thanks,
Kevin
","
pycrypto has some shortcomings, in the fact that it only implements the bare-bones, low level encryption/decryption algorithms needed to implement RSA and does not implement a full protocol for public-key encryption.

The current version PyCrypto (2.6) does support all major RSA protocols for signature and encryption namely those specified in PKCS#1 (v1.5, PSS, OAEP).
","6431","<python><encryption><rsa><pycrypto>","10","0","3","2012-11-19 12:49:30","","1","3","","","","2012-02-01 08:50:34",""
"20164397","decrypt a message with RSA public key with PyCrypto","I want to decrypt a message with RSA public key with PyCrypto I am useing code below but getting no private key error what should changed in code below?
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
import base64
licence_key=""bla bla""
licence_key_in_bytes=licence_key.encode(""utf-8"")
encrypted=base64.b16decode(licence_key_in_bytes)
key = open(""public_key"", ""r"").read() 
rsakey = RSA.importKey(key)
rsakey = PKCS1_OAEP.new(rsakey)
decrypted_message= rsakey.decrypt(encrypted)

","Encryption (providing confidentiality)

If you want to encrypt/decrypt in the same application, then you simple should swap the public key and the private key.
Encryption is always performed by the public key, decryption by the private key.
RSA does not have any security if you do it the other way around. 
If you know the private key then a public key with a small public exponent can be easily guessed by an attacker.

Signature generation (providing authenticity & integrity)

From the code however it seems you want to sign a message, but you are using an algorithm (RSA OAEP) that has been designed explicitly for encryption. 
Unfortunately both concepts are not compatible. First of all, OAEP padding mechanism is not compatible with the one for signing.

Furthermore, there may be differences in handling the keys 

the library will handle private keys operations differently from public key operations. - - Private keys require security, such as protection against side channel attacks.
Note that that a public key allows for a larger range of values than a private key (the public exponent may be small or large, the private exponent should always be near the key size). 

So the components of a private key will always match those of a public key. But as public keys normally have a small public exponent, public keys may not always be accepted as private keys.

The only good solution is to replace your own signing operation with the correct one. - -- Fortunately Python handles PSS signing operations, take a look at the documentation here, which helpfully contains sample code.

","6402","<python><rsa><public-key-encryption><pycrypto>","5","3","1","2014-05-14 11:04:54","20174993","7","","","","","2013-11-23 15:52:37",""
"23769892","PyCrypto for Python 3.4 on Windows 8.1 cannot find winrandom module","I've been trying to install Paramiko in a Python 3.4 virtual environment. I tried pip installing, as well as easy_installing with pre-built binaries and neither worked. Suggested Here. Both kept saying that winrandom is not a valid Win32 application. 
I found that is is a problem with PyCrypto, and not Paramiko directly, so I installed from source and pre-built binaries and still can't get it to find/use a module called winrandom.
Have any of you solved this problem? It's very frustrating.
","2.6.1 has a relative import that's fixed in 2.7. Probably all you need to do is fix that import in Crypto\Random\OSRNG\nt.py
","6312","<python-3.x><paramiko><pycrypto>","3","1","3","2015-11-05 16:23:24","24690273","3","3","-1","","2017-05-23 12:00:44","2014-05-20 21:02:11",""
"23769892","PyCrypto for Python 3.4 on Windows 8.1 cannot find winrandom module","I've been trying to install Paramiko in a Python 3.4 virtual environment. I tried pip installing, as well as easy_installing with pre-built binaries and neither worked. Suggested Here. Both kept saying that winrandom is not a valid Win32 application. 
I found that is is a problem with PyCrypto, and not Paramiko directly, so I installed from source and pre-built binaries and still can't get it to find/use a module called winrandom.
Have any of you solved this problem? It's very frustrating.
","Not really sure if this is helpfull for you guys, but i got the problem that I was not able to install winrandom for python3.4
With the foolowing link, I fixed my problem
https://github.com/dlitz/pycrypto/commit/10abfc8633bac653eda4d346fc051b2f07554dcd
","6312","<python-3.x><paramiko><pycrypto>","3","3","3","2015-11-05 16:23:24","24690273","3","3","-1","","2017-05-23 12:00:44","2014-05-20 21:02:11",""
"23769892","PyCrypto for Python 3.4 on Windows 8.1 cannot find winrandom module","I've been trying to install Paramiko in a Python 3.4 virtual environment. I tried pip installing, as well as easy_installing with pre-built binaries and neither worked. Suggested Here. Both kept saying that winrandom is not a valid Win32 application. 
I found that is is a problem with PyCrypto, and not Paramiko directly, so I installed from source and pre-built binaries and still can't get it to find/use a module called winrandom.
Have any of you solved this problem? It's very frustrating.
","From the same link, change nt.py (...\Lib\site-packages\Crypto\Random\OSRNG\nt.py)
change 
import winrandom

to
from . import winrandom 

","6312","<python-3.x><paramiko><pycrypto>","3","4","3","2015-11-05 16:23:24","24690273","3","3","-1","","2017-05-23 12:00:44","2014-05-20 21:02:11",""
"13588518","fatal error: 'string.h' file not found after upgrading to python 3.2 and installing certain modules from a virtualenv","I'm on Mac OSX 10.8 (Mountain Lion) and have just installed Python 3.2.3.  
When installing pycrypto from a virtual environment using that version of python:
$ virtualenv --no-site-packages -p /usr/local/bin/python3.2-32 venv
$ source venv/bin/activate
$ pip install pycrypto

I get the error:
gcc-4.2 not found, using clang instead

building 'Crypto.Hash._MD2' extension

warning: GMP or MPIR library not found; Not building Crypto.PublicKey._fastmath.

Compiling with an SDK that doesn't seem to exist: /Developer/SDKs/MacOSX10.6.sdk

Please check your Xcode installation

clang -fno-strict-aliasing -fno-common -dynamic -isysroot /Developer/SDKs/MacOSX10.6.sdk -arch i386 -arch x86_64 -isysroot /Developer/SDKs/MacOSX10.6.sdk -std=c99 -O3 -fomit-frame-pointer -Isrc/ -I/Library/Frameworks/Python.framework/Versions/3.2/include/python3.2m -c src/MD2.c -o build/temp.macosx-10.6-intel-3.2/src/MD2.o

src/MD2.c:30:10: fatal error: 'string.h' file not found

#include <string.h>

         ^

1 error generated.

error: command 'clang' failed with exit status 1

Similar thing happens when attempting to install cryptacular.
As of version 2.4, Pycrypto says it supports python 3. 
I'ved added a symlink to the xcode developer folder:
$ sudo ln -s /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer /Developer

but all that exists in that folder are MacOSX10.7.sdk MacOSX10.8.sdk (not MacOSX10.6.sdk as needed above). 
Am I missing anything in my system?  How can I tell it to use one of the other SDKs?
","Got it to work by doing the following:
As in the comment above, made sure the Command Line Tools are installed, which also installs the system headers:

Start Xcode, open Xcode -> Preferences... and go to the Downloads tab. Under Components make sure the Command Line Tools are installed; this will also install system headers in system folders.

As instructed in this answer, create a symbolic link to the developer folder:
sudo ln -s /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer /Developer

However, still go the error message: 
Compiling with an SDK that doesn't seem to exist: /Developer/SDKs/MacOSX10.6.sdk

This relates to an issue that Python 3.2 assumes you are using Mac OSX 10.6
I fixed, this by faking the OSX 10.6 environment by creating a symbolic link from it to the OSX 10.8 environment:
sudo ln -s /Developer/SDKs/MacOSX10.8.sdk MacOSX10.6.sdk

Package successfully installs now.
","6137","<python><pip><pycrypto><python-3.2>","1","4","1","2016-06-07 04:43:20","13591801","6","1","773210","","2012-11-27 19:15:03","2012-11-27 16:20:44",""
"4920986","Unable to Install pycrypto","ValueError: invalid version number '2.20.51.20100613'

I'm having problems installing pycrypto. Tried package manager: pip & easy_install, didn't work. Tried to manually install it via ""python setup.py install"", the same error like the above appears.
I've followed the instructions here and got stuck at installing pycrypto after installing ""mingW"" gcc, g++ and msys-base (MSYS shell environment)
Not really sure what to do now after several days of trying.
Here's the complete output of the error:

C:\Users\Denz\Desktop>pip install pycrypto
Downloading/unpacking pycrypto
  Running setup.py egg_info for package pycrypto
Installing collected packages: pycrypto
  Running setup.py install for pycrypto
    Traceback (most recent call last):
      File """", line 1, in ?
      File ""C:\Users\Denz\Desktop\build\pycrypto\setup.py"", line 340, in ?
        core.setup(**kw)
      File ""C:\Python24\lib\distutils\core.py"", line 149, in setup
        dist.run_commands()
      File ""C:\Python24\lib\distutils\dist.py"", line 946, in run_commands
        self.run_command(cmd)
      File ""C:\Python24\lib\distutils\dist.py"", line 966, in run_command
        cmd_obj.run()
      File ""c:\python24\lib\site-packages\distribute-0.6.14-py2.4.egg\setuptools
\command\install.py"", line 53, in run
        return _install.run(self)
      File ""C:\Python24\lib\distutils\command\install.py"", line 506, in run
        self.run_command('build')
      File ""C:\Python24\lib\distutils\cmd.py"", line 333, in run_command
        self.distribution.run_command(command)
      File ""C:\Python24\lib\distutils\dist.py"", line 966, in run_command
        cmd_obj.run()
      File ""C:\Python24\lib\distutils\command\build.py"", line 112, in run
        self.run_command(cmd_name)
      File ""C:\Python24\lib\distutils\cmd.py"", line 333, in run_command
        self.distribution.run_command(command)
      File ""C:\Python24\lib\distutils\dist.py"", line 966, in run_command
        cmd_obj.run()
      File ""C:\Python24\lib\distutils\command\build_ext.py"", line 253, in run
        force=self.force)
      File ""C:\Python24\lib\distutils\ccompiler.py"", line 1177, in new_compiler
        return klass (None, dry_run, force)
      File ""C:\Python24\lib\distutils\cygwinccompiler.py"", line 292, in init
    CygwinCCompiler.__init__ (self, verbose, dry_run, force)
  File ""C:\Python24\lib\distutils\cygwinccompiler.py"", line 83, in __init__
    self.gcc_version, self.ld_version, self.dllwrap_version = \
  File ""C:\Python24\lib\distutils\cygwinccompiler.py"", line 424, in get_versions
    ld_version = StrictVersion(result.group(1))
  File ""C:\Python24\lib\distutils\version.py"", line 40, in __init__
    self.parse(vstring)
  File ""C:\Python24\lib\distutils\version.py"", line 107, in parse
    raise ValueError, ""invalid version number '%s'"" % vstring
ValueError: invalid version number '2.20.51.20100613'


","You can get working windows binaries on this page.
","6097","<python><windows-7><install><mingw32><pycrypto>","4","2","1","2011-02-07 12:08:17","4921098","2","","560821","","2011-02-07 12:05:18","2011-02-07 11:51:16",""
"22004405","How can you print cipher text as a hex string?","I use the PyCrypto module to generate a cipher text for a message.
>>> a=AES.new(""1234567890123456"")
>>> m='aaaabbbbccccdddd'
>>> a.encrypt(m)
'H\xe7\n@\xe0\x13\xe0M\xc32\xce\x16@\xb2B\xd0'

I would like to have this output like the one by hashlib
>>> from hashlib import sha1
>>> sha1(m).hexdigest()
'68b69b51da162fcf8eee65641ee867f02cfc9c59'

That is, I would need a clean string instead of the string with the hex markers like \x and stuff.
Is there any way in PyCrypto to achieve this?
If yes,How can encryption and decryption be performed?
If no, how can I convert the string to the string I need?
","Use binascii.hexlify (or binascii.b2a_hex):
>>> from Crypto.Cipher import AES
>>> a = AES.new(""1234567890123456"")
>>> m = 'aaaabbbbccccdddd'
>>> a.encrypt(m)
'H\xe7\n@\xe0\x13\xe0M\xc32\xce\x16@\xb2B\xd0'

>>> import binascii
>>> binascii.hexlify(a.encrypt(m))
'48e70a40e013e04dc332ce1640b242d0'

","5619","<python><pycrypto>","4","7","2","2014-02-25 04:54:38","22004937","1","2","","","","2014-02-25 04:11:54",""
"22004405","How can you print cipher text as a hex string?","I use the PyCrypto module to generate a cipher text for a message.
>>> a=AES.new(""1234567890123456"")
>>> m='aaaabbbbccccdddd'
>>> a.encrypt(m)
'H\xe7\n@\xe0\x13\xe0M\xc32\xce\x16@\xb2B\xd0'

I would like to have this output like the one by hashlib
>>> from hashlib import sha1
>>> sha1(m).hexdigest()
'68b69b51da162fcf8eee65641ee867f02cfc9c59'

That is, I would need a clean string instead of the string with the hex markers like \x and stuff.
Is there any way in PyCrypto to achieve this?
If yes,How can encryption and decryption be performed?
If no, how can I convert the string to the string I need?
","If the encrypt function returns a Python string, then you can do:
a.encrypt(m).encode('hex')

","5619","<python><pycrypto>","4","1","2","2014-02-25 04:54:38","22004937","1","2","","","","2014-02-25 04:11:54",""
"43199123","Encrypting with AES-256 and PKCS7 padding","I want to use python to encrypt some data and have come across pycrypto as a possible tool.  In order to encrypt the data, I need to:

Input passphrase string
SHA-256 the string, giving key for AES-256
Represent sensitive data as string of 9 digit characters (ascii), with leading ascii 0s if present (the data will always be in this format).
Encrypt data string using AES-256, NO SALT, using PKCS7 padding from RFC2315, in ecb mode. 
Represent ciphertext as Base64 (RFC 4648), needing 24 characters

Using pycrypto, steps 1-3 are fairly easy.  4 is giving me a little bit of trouble.  I'm not sure what PKCS7 padding is, and I am not sure how to ensure that the encryption is not using a SALT.  I was hoping someone could point me in the right direction re: step 4. 
","PyCrypto does not have inbuilt feature for padding. But it is quite easy to implement it. Note: PKCS7 Padding will add an extra byte block when the input is already the correct size, which this function does as well.
PKCS#7 padding is explained here.
def pad(m):
    return m+chr(16-len(m)%16)*(16-len(m)%16)

KEY = sha256(passphrase).digest()  #returns 256 bit key
cipher = AES.new(KEY,AES.MODE_ECB) #creates a AES-256 instance using ECB mode
ciphertext = cipher.encrypt(pad(data)).encode('base64')

Hopefully, this is what you are looking for. 
During the process of Decryption, the unpad function might come handy.
def unpad(ct):
    return ct[:-ct[-1]]

In Python 3, the unpad function may need to cast (depending on usage), looking like this:
def unpad(ct):
    return ct[:-ord(ct[-1])]

P.S,

ECB mode of encryption is not cryptographic secure. Please use higher modes such as CBC, OFB or GCM.
GCM or Galois/Counter Mode provides both data confidentiality as well as authentication (Even for associated data, which need not be encrypted).
It is the most secure mode yet unless you use the same nonce twice

","5591","<python><encryption><padding><pycrypto>","2","1","1","2019-07-10 03:00:06","","4","","1816580","","2017-04-04 19:04:50","2017-04-04 05:43:21",""
"13907841","Implement OpenSSL AES Encryption in Python","I'm trying to implement the following in Python:
openssl enc -e -aes-256-cbc -base64 -k ""Secret Passphrase"" -in plaintext.txt -out ciphertext.txt
openssl enc -d -aes-256-cbc -base64 -k ""Secret Passphrase"" -in ciphertext.txt -out verification.txt
I've tried several different modules, PyCrypto, M2Crypto, etc but can't seem to get the correct combination of changing the password to the right size key and encoding everything correctly.  I've found https://github.com/nvie/SimpleAES but that basically runs OpenSSL on the command line, which I'd rather avoid.
","Base 64 encoding and decoding can be easily handled via the standard base64 module.
AES-256 decryption and encryption in CBC mode are supported by both PyCrypto and M2Crypto.
The only non-standard (and most difficult) part is the derivation of the IV and the key from the password. OpenSSL does it via its own EVP_BytesToKey function, which is described in this man page.
The Python equivalent is:
def EVP_BytesToKey(password, salt, key_len, iv_len):
    """"""
    Derive the key and the IV from the given password and salt.
    """"""
    from hashlib import md5
    dtot =  md5(password + salt).digest()
    d = [ dtot ]
    while len(dtot)<(iv_len+key_len):
        d.append( md5(d[-1] + password + salt).digest() )
        dtot += d[-1]
    return dtot[:key_len], dtot[key_len:key_len+iv_len]

where key_len is 32 and iv_len is 16 for AES-256. The function returns the key and the IV which you can use to decrypt the payload.
OpenSSL puts and expects the salt in the first 8 bytes of the encrypted payload.
Finally, AES in CBC mode can only work with data aligned to the 16 byte boundary. The default padding used is PKCS#7.
The steps for encrypting are therefore:

Generate 8 bytes of random data as salt.
Derive AES key and IV from password using the salt from step 1.
Pad the input data with PKCS#7.
Encrypt the padded using AES-256 in CBC mode with the key and the IV from step 2.
Encode in Base64 and output the salt from step 1.
Encode in Base64 and output the encrypted data from step 4.

The steps from decrypting are the reverse:

Decode the input data from Base64 into a binary string.
Treat the first 8 bytes of the decoded data as salt.
Derive AES key and IV from password using the salt from step 1.
Decrypt the remaining decoded data using the AES key and the IV from step 3.
Verify and remove the PKCS#7 padding from the result.

","5567","<python><openssl><aes><pycrypto><m2crypto>","2","6","1","2017-08-10 17:56:07","","2","4","","","","2012-12-17 03:17:16",""
"8806481","How can I decrypt something with PyCrypto that was encrypted using OpenSSL?","I have several strings that were encrypted using OpenSSL. For instance:
$ echo ""original string"" | openssl aes-256-cbc -p -a -pass pass:secret
salt=B898FE40EC8155FD
key=4899E518743EB0584B0811AE559ED8AD9F0B5FA31B0B998FEB8453B8E3A7B36C
iv =EFA6105F30F6C462B3D135725A6E1618
U2FsdGVkX1+4mP5A7IFV/VcgRs4ci/yupMErHjf5bkT5XrcowXK7z3VyyV1l2jvy

I would like to decrypt these things using Python. I'm attempting to use PyCrypto. Here's an exmaple script using the above data:
from base64 import b64decode, b64encode
from hashlib import md5
from Crypto.Cipher import AES

secret = 'secret'
encoded = 'U2FsdGVkX1+4mP5A7IFV/VcgRs4ci/yupMErHjf5bkT5XrcowXK7z3VyyV1l2jvy'
encrypted = b64decode(encoded)
salt = encrypted[8:16]
data = encrypted[16:]
key = md5(secret + salt).hexdigest()
iv = md5(key + secret + salt).hexdigest()[0:16] # which 16 bytes?
dec = AES.new(key, AES.MODE_CBC, iv)
clear = dec.decrypt(data)

try:
    salt_hex = ''.join([""%X"" % ord(c) for c in salt])
    print 'salt:     %s' % salt_hex
    print 'expected: %s' % 'B898FE40EC8155FD'
    print 'key:      %s' % key.upper()
    print 'expected: %s' % '4899E518743EB0584B0811AE559ED8AD9F0B5FA31B0B998FEB8453B8E3A7B36C'
    print 'iv:       %s' % iv
    print 'expected: %s' % 'EFA6105F30F6C462B3D135725A6E1618'
    print 'result: %s' % clear
except UnicodeDecodeError:
    print 'decryption failed'

Here's the output:
salt:     B898FE40EC8155FD
expected: B898FE40EC8155FD
key:      4899E518743EB0584B0811AE559ED8AD
expected: 4899E518743EB0584B0811AE559ED8AD9F0B5FA31B0B998FEB8453B8E3A7B36C
iv:       17988376b72f4a81
expected: EFA6105F30F6C462B3D135725A6E1618
decryption failed

You can see that the salt matches, and the key matches the first half of what OpenSSL shows, so I seem to be on the right track, but there are two main questions:

Why are the values for key and iv from OpenSSL twice as long as PyCrypto (and presumably AES256) allows?
How do I generate the correct values? The technique I'm using was taken from a blog, but if the IV is always supposed to match the block size (16 bytes), MD5 will never work. And even if I could figure out where the other half of the key comes from, PyCrypto would refuse it for being too long.

I realize I'll need to remove the padding as well, but I left that out for brevity.
","You have three problems:

You use AES256 (32 byte key) in OpenSSL and AES128 (16 byte key) in your python code.
The IV computation is wrong. Each step in the OpenSSL's key derivation function uses the the MD5 digest computed last.
You mix up binary and hexadecimal representation. Keep any conversion to hexadecimal as the last step, before visualization.

The following code should be correct:
from base64 import b64decode, b64encode
from binascii import hexlify
from Crypto.Cipher import AES
from Crypto.Hash import MD5

secret = 'secret'
encoded = 'U2FsdGVkX1+4mP5A7IFV/VcgRs4ci/yupMErHjf5bkT5XrcowXK7z3VyyV1l2jvy'
encrypted = b64decode(encoded)
salt = encrypted[8:16]
data = encrypted[16:]

# We need 32 bytes for the AES key, and 16 bytes for the IV
def openssl_kdf(req):
    prev = ''
    while req>0:
        prev = MD5.new(prev+secret+salt).digest()
        req -= 16
        yield prev
mat = ''.join([ x for x in openssl_kdf(32+16) ])
key = mat[0:32]
iv  = mat[32:48]

dec = AES.new(key, AES.MODE_CBC, iv)
clear = dec.decrypt(data)

try:
    salt_hex = ''.join([""%X"" % ord(c) for c in salt])
    print 'salt:     %s' % salt_hex
    print 'expected: %s' % 'B898FE40EC8155FD'
    print 'key:      %s' % hexlify(key).upper()
    print 'expected: %s' % '4899E518743EB0584B0811AE559ED8AD9F0B5FA31B0B998FEB8453B8E3A7B36C'
    print 'iv:       %s' % hexlify(iv).upper()
    print 'expected: %s' % 'EFA6105F30F6C462B3D135725A6E1618'
    print 'result:   %s' % clear
except UnicodeDecodeError:
    print 'decryption failed'

","5510","<openssl><pycrypto>","1","8","1","2012-11-22 18:20:06","8870508","0","1","","","","2012-01-10 16:12:21",""
"23233222","Pyinstaller & Pycrypto","We've recently added pycrypto to a project we've been working on and now I am unable to run the software after it is built with pyinstaller.
I have had issues with new packages in pyinstaller, but I am unable to fix this one in particular.
The errors I've gotten when trying to run the built software are as follows (sorry for the paraphrasing, it takes quite a while to build)
At first it was something like:
No package Crypto.Cipher

So I added 'Crypto' to the hiddenimports in my .spec file. Then I got,
No module named Cipher

So I changed 'Crypto' to 'Crypto.Cipher' and then I got,
Crypto.Cipher has no attribute AES

So I changed 'Crypto.Cipher' to 'Crypto.Cipher.AES' then I got
File ""C:\Folder\made\by\pyinstaller\Crypto.Cipher.AES"", line 49 in <module>
ImportError: cannot import name blockalgo

So I changed 'Crypto.Cipher.AES' to 'Crypto.Cipher.AES.blockalgo' and the error didn't change.
I've tried a few different configurations, but the output of the build script always says something along the lines of
ERROR: Hidden import 'blockalgo' not found.

Does anybody know how to get this to import correctly, or know a trick to get pycrypto to play nice with pyinstaller?
","According to the pyinstaller manual:

You can verify that hidden import is the problem by using Python's verbose imports flag. If the import messages say ""module not found"", but the warnproject.txt file has no ""no module named..."" message for the same module, then the problem is a hidden import.
Hidden imports are handled by hooking the module (the one doing the hidden imports) at Analysis time. Do this as follows:

Create a file named hook-module.py (where module is the fully-qualified Python name, eg, hook-xml.dom.py) and place it somewhere. Remember the place as your private hooks directory.
In the .spec file, pass your private hooks directory as hookspath argument to Analysis so will be searched. Example:
a = Analysis(['myscript.py'], hookspath='/my/priv/hooks') 
  In most cases the hook module will have only one line:
hiddenimports = ['module1', 'module2']
  When the Analysis finds this file, it will proceed exactly as though the module explicitly imported module1 and module2.


This question seems related, the answers might also be useful for you.
Finally, this report seems to contain a similar problem. The user seemingly was able to fix it by updating to pyinstaller 2.1, so you might want to give that a try if you haven't already.
","5465","<python><pyinstaller><pycrypto>","5","3","4","2019-05-06 18:15:27","23233656","3","1","","","","2014-04-23 01:27:06",""
"23233222","Pyinstaller & Pycrypto","We've recently added pycrypto to a project we've been working on and now I am unable to run the software after it is built with pyinstaller.
I have had issues with new packages in pyinstaller, but I am unable to fix this one in particular.
The errors I've gotten when trying to run the built software are as follows (sorry for the paraphrasing, it takes quite a while to build)
At first it was something like:
No package Crypto.Cipher

So I added 'Crypto' to the hiddenimports in my .spec file. Then I got,
No module named Cipher

So I changed 'Crypto' to 'Crypto.Cipher' and then I got,
Crypto.Cipher has no attribute AES

So I changed 'Crypto.Cipher' to 'Crypto.Cipher.AES' then I got
File ""C:\Folder\made\by\pyinstaller\Crypto.Cipher.AES"", line 49 in <module>
ImportError: cannot import name blockalgo

So I changed 'Crypto.Cipher.AES' to 'Crypto.Cipher.AES.blockalgo' and the error didn't change.
I've tried a few different configurations, but the output of the build script always says something along the lines of
ERROR: Hidden import 'blockalgo' not found.

Does anybody know how to get this to import correctly, or know a trick to get pycrypto to play nice with pyinstaller?
","Change? Why not add? Adding these to hiddenimport solved this issue: 'Crypto', 'Crypto.Cipher', 'Crypto.Cipher.AES', 'Crypto.Random',
","5465","<python><pyinstaller><pycrypto>","5","1","4","2019-05-06 18:15:27","23233656","3","1","","","","2014-04-23 01:27:06",""
"23233222","Pyinstaller & Pycrypto","We've recently added pycrypto to a project we've been working on and now I am unable to run the software after it is built with pyinstaller.
I have had issues with new packages in pyinstaller, but I am unable to fix this one in particular.
The errors I've gotten when trying to run the built software are as follows (sorry for the paraphrasing, it takes quite a while to build)
At first it was something like:
No package Crypto.Cipher

So I added 'Crypto' to the hiddenimports in my .spec file. Then I got,
No module named Cipher

So I changed 'Crypto' to 'Crypto.Cipher' and then I got,
Crypto.Cipher has no attribute AES

So I changed 'Crypto.Cipher' to 'Crypto.Cipher.AES' then I got
File ""C:\Folder\made\by\pyinstaller\Crypto.Cipher.AES"", line 49 in <module>
ImportError: cannot import name blockalgo

So I changed 'Crypto.Cipher.AES' to 'Crypto.Cipher.AES.blockalgo' and the error didn't change.
I've tried a few different configurations, but the output of the build script always says something along the lines of
ERROR: Hidden import 'blockalgo' not found.

Does anybody know how to get this to import correctly, or know a trick to get pycrypto to play nice with pyinstaller?
","From https://stackoverflow.com/a/48408950/4355695 : Use pycryptodomex instead of pycryptodome. And @galgalesh's comment below the OP's question gave why pycrypto should no longer to be used.
pip uninstall -y pycrypto
pip uninstall -y pycryptodome
pip install pycryptodomex

pycryptodomex gives a clearly disambiguous Cryptodome module to replace Crypto. So, in your .py programs, replace Crypto with Cryptodome: 
from Cryptodome.PublicKey import RSA

I now ran pyinstaller afresh and it worked out properly. No need to do any special hiddenimports etc. In the dist folder, there's now a clear Crpytodome folder holding all the .pyd's.
","5465","<python><pyinstaller><pycrypto>","5","1","4","2019-05-06 18:15:27","23233656","3","1","","","","2014-04-23 01:27:06",""
"23233222","Pyinstaller & Pycrypto","We've recently added pycrypto to a project we've been working on and now I am unable to run the software after it is built with pyinstaller.
I have had issues with new packages in pyinstaller, but I am unable to fix this one in particular.
The errors I've gotten when trying to run the built software are as follows (sorry for the paraphrasing, it takes quite a while to build)
At first it was something like:
No package Crypto.Cipher

So I added 'Crypto' to the hiddenimports in my .spec file. Then I got,
No module named Cipher

So I changed 'Crypto' to 'Crypto.Cipher' and then I got,
Crypto.Cipher has no attribute AES

So I changed 'Crypto.Cipher' to 'Crypto.Cipher.AES' then I got
File ""C:\Folder\made\by\pyinstaller\Crypto.Cipher.AES"", line 49 in <module>
ImportError: cannot import name blockalgo

So I changed 'Crypto.Cipher.AES' to 'Crypto.Cipher.AES.blockalgo' and the error didn't change.
I've tried a few different configurations, but the output of the build script always says something along the lines of
ERROR: Hidden import 'blockalgo' not found.

Does anybody know how to get this to import correctly, or know a trick to get pycrypto to play nice with pyinstaller?
","This Answer : 
From https://stackoverflow.com/a/48408950/4355695 : Use pycryptodomex instead of pycryptodome. And @galgalesh's comment below the OP's question gave why pycrypto should no longer to be used.
pip uninstall -y pycrypto
pip uninstall -y pycryptodome
pip install pycryptodomex
pycryptodomex gives a clearly disambiguous Cryptodome module to replace Crypto. So, in your .py programs, replace Crypto with Cryptodome:
from Cryptodome.PublicKey import RSA
I now ran pyinstaller afresh and it worked out properly. No need to do any special hiddenimports etc. In the dist folder, there's now a clear Crpytodome folder holding all the .pyd's.
Works perfectly for me !
Use pycryptodomex instead of pycrypto and it would work !
I think it's due to python 3.6 and major evolutions of pycrypto to work with ! Then it stop working with 2.7.16 ! 
","5465","<python><pyinstaller><pycrypto>","5","1","4","2019-05-06 18:15:27","23233656","3","1","","","","2014-04-23 01:27:06",""
"15034267","HMAC-SHA256 with AES-256 in CBC mode","I recently came across the following code sample for encrypting a file with AES-256 CBC with a SHA-256 HMAC for authentication and validation:
aes_key, hmac_key = self.keys
# create a PKCS#7 pad to get us to `len(data) % 16 == 0`
pad_length = 16 - len(data) % 16
data = data + (pad_length * chr(pad_length))
# get IV
iv = os.urandom(16)
# create cipher
cipher = AES.new(aes_key, AES.MODE_CBC, iv)
data = iv + cipher.encrypt(data)
sig = hmac.new(hmac_key, data, hashlib.sha256).digest()
# return the encrypted data (iv, followed by encrypted data, followed by hmac sig):
return data + sig

Since, in my case, I'm encrypting much more than a string, rather a fairly large file, I modified the code to do the following:
aes_key, hmac_key = self.keys
iv = os.urandom(16)
cipher = AES.new(aes_key, AES.MODE_CBC, iv)

with open('input.file', 'rb') as infile:
    with open('output.file', 'wb') as outfile:
        # write the iv to the file:
        outfile.write(iv)

        # start the loop
        end_of_line = True

        while True:
            input_chunk = infile.read(64 * 1024)

            if len(input_chunk) == 0:
                # we have reached the end of the input file and it matches `% 16 == 0`
                # so pad it with 16 bytes of PKCS#7 padding:
                end_of_line = True
                input_chunk += 16 * chr(16)
            elif len(input_chunk) % 16 > 0:
                # we have reached the end of the input file and it doesn't match `% 16 == 0`
                # pad it by the remainder of bytes in PKCS#7:
                end_of_line = True
                input_chunk_remainder = 16 - (len(input_chunk) & 16)
                input_chunk += input_chunk_remainder * chr(input_chunk_remainder)

            # write out encrypted data and an HMAC of the block
            outfile.write(cipher.encrypt(input_chunk) + hmac.new(hmac_key, data, 
                    hashlib.sha256).digest())

            if end_of_line:
                break

Simply put, this reads an input file in blocks of 64KB at a time and encrypts these blocks, generating a HMAC using SHA-256 of the encrypted data, and appending that HMAC after each block. Decryption will happen by reading in 64KB + 32B chunks and calculating the HMAC of the first 64KB and comparing it against the SHA-256 sum occupying the last 32 bytes in the chunk.
Is this the right way to use an HMAC? Does it ensure security and authentication that the data was unmodified and decrypted with the right key? 
FYI, the AES and HMAC keys are both derived from the same passphrase which is generated by running the input text through SHA-512, then through bcrypt, then through SHA-512 again. The output from the final SHA-512 is then split into two chunks, one used for the AES password and the other used for the HMAC.
","I don't think there is a security problem with what you're doing with the HMACs (not that that means there isn't a problem with the security), but I don't know the actual value in HMAC sub elements of the ciphertext gets you.  Unless you want to support partial recovery of the plaintext in the event of tampering, there is not much reason to incur the overhead of HMACing 64 KB blocks, vs the full ciphertext.
From a key generation perspective, it might make more sense to use a key generated from a passphrase to encrypt two randomly generated keys, and then use the randomly generated keys to perform HMAC and AES operations.  I know using the same key for both your block cipher and HMAC is bad news, but I don't know if using a key generated in the same manner is similarly bad. 
At the very least, you should tweak your key derivation mechanism. bcrypt is a password hashing mechanism, not a key derivation function.  You should use PBKDF2 to do key derivations.
","5439","<python><encryption><aes><hmac><pycrypto>","2","-2","2","2013-02-26 07:06:30","15035077","0","","482262","","2013-02-26 07:06:30","2013-02-22 22:27:39",""
"15034267","HMAC-SHA256 with AES-256 in CBC mode","I recently came across the following code sample for encrypting a file with AES-256 CBC with a SHA-256 HMAC for authentication and validation:
aes_key, hmac_key = self.keys
# create a PKCS#7 pad to get us to `len(data) % 16 == 0`
pad_length = 16 - len(data) % 16
data = data + (pad_length * chr(pad_length))
# get IV
iv = os.urandom(16)
# create cipher
cipher = AES.new(aes_key, AES.MODE_CBC, iv)
data = iv + cipher.encrypt(data)
sig = hmac.new(hmac_key, data, hashlib.sha256).digest()
# return the encrypted data (iv, followed by encrypted data, followed by hmac sig):
return data + sig

Since, in my case, I'm encrypting much more than a string, rather a fairly large file, I modified the code to do the following:
aes_key, hmac_key = self.keys
iv = os.urandom(16)
cipher = AES.new(aes_key, AES.MODE_CBC, iv)

with open('input.file', 'rb') as infile:
    with open('output.file', 'wb') as outfile:
        # write the iv to the file:
        outfile.write(iv)

        # start the loop
        end_of_line = True

        while True:
            input_chunk = infile.read(64 * 1024)

            if len(input_chunk) == 0:
                # we have reached the end of the input file and it matches `% 16 == 0`
                # so pad it with 16 bytes of PKCS#7 padding:
                end_of_line = True
                input_chunk += 16 * chr(16)
            elif len(input_chunk) % 16 > 0:
                # we have reached the end of the input file and it doesn't match `% 16 == 0`
                # pad it by the remainder of bytes in PKCS#7:
                end_of_line = True
                input_chunk_remainder = 16 - (len(input_chunk) & 16)
                input_chunk += input_chunk_remainder * chr(input_chunk_remainder)

            # write out encrypted data and an HMAC of the block
            outfile.write(cipher.encrypt(input_chunk) + hmac.new(hmac_key, data, 
                    hashlib.sha256).digest())

            if end_of_line:
                break

Simply put, this reads an input file in blocks of 64KB at a time and encrypts these blocks, generating a HMAC using SHA-256 of the encrypted data, and appending that HMAC after each block. Decryption will happen by reading in 64KB + 32B chunks and calculating the HMAC of the first 64KB and comparing it against the SHA-256 sum occupying the last 32 bytes in the chunk.
Is this the right way to use an HMAC? Does it ensure security and authentication that the data was unmodified and decrypted with the right key? 
FYI, the AES and HMAC keys are both derived from the same passphrase which is generated by running the input text through SHA-512, then through bcrypt, then through SHA-512 again. The output from the final SHA-512 is then split into two chunks, one used for the AES password and the other used for the HMAC.
","Yes, there are 2 security problems.
But first, I assume that with this statement at the end:
# write out encrypted data and an HMAC of the block
outfile.write(cipher.encrypt(input_chunk) + hmac.new(hmac_key, data, hashlib.sha256).digest())

you actually meant:
# write out encrypted data and an HMAC of the block
data = cipher.encrypt(input_chunk)
outfile.write(data + hmac.new(hmac_key, data, hashlib.sha256).digest())

Because data is not defined anywhere.
The 1st security problem is that you are authenticating each piece independently of the others, but not the composition. In other words, the attacker can reshuffle, duplicate, or remove any of the chunks and the receiver will not notice.
A more secure approach is to have one instance of HMAC only, pass all the encrypted data to it via the update method, and output one digest, at the very end.
Alternatively, if you want to enable the receiver to detect tampering before receiving the whole file, you can output the intermediate MAC for each piece. In fact, a call to digest does not change the state of the HMAC; you can keep calling update afterwards.
The 2nd security problem is that you don't use salt for your key derivation (I say that because you don't send it). Apart from password cracking, if you encrypt more than 2 files using the same password the attacker will also be able to freely mix chunks taken by either encrypted file - because the HMAC key is the same. Solution: use salt.
One last minor thing: infile.read(64 * 1024) may return less than 64*1024 bytes, but that does not mean you reached the end of the file.
","5439","<python><encryption><aes><hmac><pycrypto>","2","5","2","2013-02-26 07:06:30","15035077","0","","482262","","2013-02-26 07:06:30","2013-02-22 22:27:39",""
"10212515","PyCrypto: Encrypt an string twice using RSA and PKCS#1","Hello everyone.
I was wondering if it's possible to do a double RSA/PKCS#1 encryption with PyCrypto.
I have a server that has its own RSA key (generated with the openssl command when said server is installed) and a client which can request the public part of the server's key. Also, that client can ask the server to generate another RSA key (or key-pair) for it. In that case, the server also keeps the private (or the ""whole"" RSA key) and sends the client the public part of its key.
I've been playing around with RSA/PKCS and AES encription. I have created a test Python file that works fine encrypting with only one RSA key. What it does is encrypting the data with the symmetric AES system (which uses a random key generated ""on-the-fly""), cyphers the password used for AES using the RSA/PKCS#1 system and puts it in the result to be sent:
#!/usr/bin/python
# -*- coding: utf-8 -*-
# Interesting links: 
# 1> http://stackoverflow.com/a/9039039/289011
# 2> http://eli.thegreenplace.net/2010/06/25/aes-encryption-of-files-in-python-with-pycrypto/

from Crypto.PublicKey import RSA
import base64
import os
from Crypto.Cipher import AES
import Crypto.Util.number
import random
import struct
import cStringIO
from Crypto.Cipher import PKCS1_OAEP

def encrypt(string):
    #Begin RSA Part to get a cypher that uses the server's public key
    externKeyFilename=""/home/borrajax/rsaKeys/server-key.pub""
    externKeyFile = open(externKeyFilename, ""r"")
    rsaKey= RSA.importKey(externKeyFile, passphrase=""F00bAr"")
    pkcs1Encryptor=PKCS1_OAEP.new(rsaKey)
    #End RSA Part

    #Begin AES Part
    iv = ''.join(chr(random.randint(0, 0xFF)) for i in range(16))
    thisMessagePassword = os.urandom(16)
    aesEncryptor = AES.new(thisMessagePassword, AES.MODE_CBC, iv)
    chunksize=64*1024
    #End AES Part

    #Begin RSA Encription of the AES Key
    rsaEncryptedPassword = pkcs1Encryptor.encrypt(thisMessagePassword)

    retvalTmp = cStringIO.StringIO()
    retvalTmp.write(struct.pack('<Q', len(string)))
    retvalTmp.write(struct.pack('<Q', len(rsaEncryptedPassword)))
    retvalTmp.write(rsaEncryptedPassword)
    retvalTmp.write(iv)
    while len(string) > 0:
        chunk = string[0:chunksize]
        string = string[chunksize:]
        if len(chunk) % 16 != 0:
            chunk += ' ' * (16 - len(chunk) % 16)
        retvalTmp.write(aesEncryptor.encrypt(chunk))
    return retvalTmp.getvalue()

def decrypt(string):
    stringAsBuffer = cStringIO.StringIO(string)
    retval = str()
    chunksize=64*1024

    externKeyFilename=""/home/borrajax/rsaKeys/server-key.pem""
    externKey = open(externKeyFilename, ""r"")
    rsaKey = RSA.importKey(externKey, passphrase=""F00bAr"")
    pkcs1Decryptor=PKCS1_OAEP.new(rsaKey)


    origsize = struct.unpack('<Q', stringAsBuffer.read(struct.calcsize('Q')))[0]
    rsaEncryptedPasswordLength = long(struct.unpack('<Q', stringAsBuffer.read(struct.calcsize('Q')))[0])
    rsaEncryptedPassword = stringAsBuffer.read(rsaEncryptedPasswordLength)
    thisMessagePassword = pkcs1Decryptor.decrypt(rsaEncryptedPassword)
    iv = stringAsBuffer.read(16)
    decryptor = AES.new(thisMessagePassword, AES.MODE_CBC, iv)
    while True:
        chunk = stringAsBuffer.read(chunksize)
        if len(chunk) == 0:
            break
        retval += decryptor.decrypt(chunk)
    return retval



if __name__ == ""__main__"":
    encryptedThingy=encrypt(base64.b64encode(""Toñóooooañjfl凯兰;kañañfjaafafs凱蘭pingüiñoo你好to金玉Toñóooooañjfl凯兰;kañañfjaafafs凱蘭pingüiñoo你好to金玉Toñóooooañjfl凯兰;kañañfjaafafs凱蘭pingüiñoo你好to金玉Toñóooooañjfl凯兰;kañañfjaafafs凱蘭pingüiñoo你好to金玉Toñóooooañjfl凯兰;kañañfjaafafs凱蘭pingüiñoo你好to金玉""))
    print ""Decrypted thingy: %s"" % base64.b64decode(decrypt(encryptedThingy))

As you can see, the AES password is encrypted with the server's RSA key. Now, I'd like to be extra paranoid, and encrypt that already encrypted password with the Client's public key, so the ""encrypt"" method would be something like:
def encrypt(string):
    #Begin RSA Part to get a cypher that uses the server's public key
    externServerKeyFilename=""/home/borrajax/rsaKeys/server-key.pub""
    externServerKeyFile = open(externServerKeyFilename, ""r"")
    rsaServerKey= RSA.importKey(externServerKeyFile, passphrase=""F00bAr"")
    pkcs1ServerEncryptor=PKCS1_OAEP.new(rsaServerKey)
    #End RSA Part

    #Begin RSA Part to get a cypher that uses the client's public key
    externClientKeyFilename=""/home/borrajax/rsaKeys/client-key.pub""
    externClientKeyFile = open(externClientKeyFilename, ""r"")
    rsaClientKey= RSA.importKey(externClientKeyFile, passphrase=""F00bAr"")
    pkcs1ClientEncryptor=PKCS1_OAEP.new(rsaClientKey)
    #End RSA Part


    #Begin AES Part
    iv = ''.join(chr(random.randint(0, 0xFF)) for i in range(16))
    thisMessagePassword = os.urandom(16)
    aesEncryptor = AES.new(thisMessagePassword, AES.MODE_CBC, iv)
    chunksize=64*1024
    #End AES Part

    #Begin RSA Encription of the AES Key
    rsaEncryptedPasswordWithServer = pkcs1ServerEncryptor.encrypt(thisMessagePassword)
    rsaEncryptedPasswordWithServerAndClient = pkcs1ClientEncryptor.encrypt(rsaEncryptedPasswordWithServer) #Katacrasssshh here!! 

    retvalTmp = cStringIO.StringIO()
    retvalTmp.write(struct.pack('<Q', len(string)))
    retvalTmp.write(struct.pack('<Q', len(rsaEncryptedPasswordWithServerAndClient)))
    #...Probably some yadda yadda here with key lengths and stuff so it would help re-build the keys in the server's side...
    retvalTmp.write(rsaEncryptedPasswordWithServerAndClient)
    retvalTmp.write(iv)
    while len(string) > 0:
        chunk = string[0:chunksize]
        string = string[chunksize:]
        if len(chunk) % 16 != 0:
            chunk += ' ' * (16 - len(chunk) % 16)
        retvalTmp.write(aesEncryptor.encrypt(chunk))
    return retvalTmp.getvalue()

But when I try to re-encrypt the key, I get a ValueError(""Plaintext too large"") exception. Which makes sense (at least makes sense to someone who barely knows anything about encryption) because PKCS adds a padding so when I encrypt the ""thisMessagePassword"" with the server's public key, I get a 256 bytes string, which is too long for the second PKCS encryptor (I've been doing some ""manual testing"" and the limit seems to be 214 bytes... I mean... that is the last value that doesn't throw an exception).
I am aware that is probably a weird construct and that it would probably make more sense use the server's public key for encryption and signing with the client's key, but I'm just trying to play a bit with encryption things and try to understand how they work and why. That's why any hint will be appreciated.
Thank you in advance!
","So, what you are doing seems to make little sense. 
You want to securely  send a message from a server to a client?
The code you have attempts to  encrypt a message under the severs public key, then under the client's public key. The client won't be able to read this because he should never ever have the server's private key (Which is needed to read the message encrypted under the servers public key). Or put another way, if the server and client both have the same private key, then you should just use AES. Why are you doing this ? 
Really, you probably ought to just send a message to the client using ssl/tls/https ,since writing cryptographic code is problematic and you have made at least two bad errors in your code along with the one you want fixed. 

Your IV needs to be securely random. The python random call is not, which is why you use os.random(16) for the key. you should do so for the IV as well
You need to use an hmac to authenticate the encrypted data and key the hmac with a separate random key.   Then using the same key on the other end, regenerate the hmac over the same inputs, and compare the two. If  you don't do this, someone could tamper with your data and use errors in the crypto libraries to read it.
The problem you posted: Note as I said above you should not be doing this at all because it's nonsensical. You need to encrypted rsaEncryptedPasswordWithServer with AES under a new key(and use HMAC as per 2 above) and then encrypt the new key with the clients public key.

","5428","<python><encryption><rsa><aes><pycrypto>","0","1","3","2012-04-20 14:45:35","10219191","0","","","","","2012-04-18 15:18:48",""
"10212515","PyCrypto: Encrypt an string twice using RSA and PKCS#1","Hello everyone.
I was wondering if it's possible to do a double RSA/PKCS#1 encryption with PyCrypto.
I have a server that has its own RSA key (generated with the openssl command when said server is installed) and a client which can request the public part of the server's key. Also, that client can ask the server to generate another RSA key (or key-pair) for it. In that case, the server also keeps the private (or the ""whole"" RSA key) and sends the client the public part of its key.
I've been playing around with RSA/PKCS and AES encription. I have created a test Python file that works fine encrypting with only one RSA key. What it does is encrypting the data with the symmetric AES system (which uses a random key generated ""on-the-fly""), cyphers the password used for AES using the RSA/PKCS#1 system and puts it in the result to be sent:
#!/usr/bin/python
# -*- coding: utf-8 -*-
# Interesting links: 
# 1> http://stackoverflow.com/a/9039039/289011
# 2> http://eli.thegreenplace.net/2010/06/25/aes-encryption-of-files-in-python-with-pycrypto/

from Crypto.PublicKey import RSA
import base64
import os
from Crypto.Cipher import AES
import Crypto.Util.number
import random
import struct
import cStringIO
from Crypto.Cipher import PKCS1_OAEP

def encrypt(string):
    #Begin RSA Part to get a cypher that uses the server's public key
    externKeyFilename=""/home/borrajax/rsaKeys/server-key.pub""
    externKeyFile = open(externKeyFilename, ""r"")
    rsaKey= RSA.importKey(externKeyFile, passphrase=""F00bAr"")
    pkcs1Encryptor=PKCS1_OAEP.new(rsaKey)
    #End RSA Part

    #Begin AES Part
    iv = ''.join(chr(random.randint(0, 0xFF)) for i in range(16))
    thisMessagePassword = os.urandom(16)
    aesEncryptor = AES.new(thisMessagePassword, AES.MODE_CBC, iv)
    chunksize=64*1024
    #End AES Part

    #Begin RSA Encription of the AES Key
    rsaEncryptedPassword = pkcs1Encryptor.encrypt(thisMessagePassword)

    retvalTmp = cStringIO.StringIO()
    retvalTmp.write(struct.pack('<Q', len(string)))
    retvalTmp.write(struct.pack('<Q', len(rsaEncryptedPassword)))
    retvalTmp.write(rsaEncryptedPassword)
    retvalTmp.write(iv)
    while len(string) > 0:
        chunk = string[0:chunksize]
        string = string[chunksize:]
        if len(chunk) % 16 != 0:
            chunk += ' ' * (16 - len(chunk) % 16)
        retvalTmp.write(aesEncryptor.encrypt(chunk))
    return retvalTmp.getvalue()

def decrypt(string):
    stringAsBuffer = cStringIO.StringIO(string)
    retval = str()
    chunksize=64*1024

    externKeyFilename=""/home/borrajax/rsaKeys/server-key.pem""
    externKey = open(externKeyFilename, ""r"")
    rsaKey = RSA.importKey(externKey, passphrase=""F00bAr"")
    pkcs1Decryptor=PKCS1_OAEP.new(rsaKey)


    origsize = struct.unpack('<Q', stringAsBuffer.read(struct.calcsize('Q')))[0]
    rsaEncryptedPasswordLength = long(struct.unpack('<Q', stringAsBuffer.read(struct.calcsize('Q')))[0])
    rsaEncryptedPassword = stringAsBuffer.read(rsaEncryptedPasswordLength)
    thisMessagePassword = pkcs1Decryptor.decrypt(rsaEncryptedPassword)
    iv = stringAsBuffer.read(16)
    decryptor = AES.new(thisMessagePassword, AES.MODE_CBC, iv)
    while True:
        chunk = stringAsBuffer.read(chunksize)
        if len(chunk) == 0:
            break
        retval += decryptor.decrypt(chunk)
    return retval



if __name__ == ""__main__"":
    encryptedThingy=encrypt(base64.b64encode(""Toñóooooañjfl凯兰;kañañfjaafafs凱蘭pingüiñoo你好to金玉Toñóooooañjfl凯兰;kañañfjaafafs凱蘭pingüiñoo你好to金玉Toñóooooañjfl凯兰;kañañfjaafafs凱蘭pingüiñoo你好to金玉Toñóooooañjfl凯兰;kañañfjaafafs凱蘭pingüiñoo你好to金玉Toñóooooañjfl凯兰;kañañfjaafafs凱蘭pingüiñoo你好to金玉""))
    print ""Decrypted thingy: %s"" % base64.b64decode(decrypt(encryptedThingy))

As you can see, the AES password is encrypted with the server's RSA key. Now, I'd like to be extra paranoid, and encrypt that already encrypted password with the Client's public key, so the ""encrypt"" method would be something like:
def encrypt(string):
    #Begin RSA Part to get a cypher that uses the server's public key
    externServerKeyFilename=""/home/borrajax/rsaKeys/server-key.pub""
    externServerKeyFile = open(externServerKeyFilename, ""r"")
    rsaServerKey= RSA.importKey(externServerKeyFile, passphrase=""F00bAr"")
    pkcs1ServerEncryptor=PKCS1_OAEP.new(rsaServerKey)
    #End RSA Part

    #Begin RSA Part to get a cypher that uses the client's public key
    externClientKeyFilename=""/home/borrajax/rsaKeys/client-key.pub""
    externClientKeyFile = open(externClientKeyFilename, ""r"")
    rsaClientKey= RSA.importKey(externClientKeyFile, passphrase=""F00bAr"")
    pkcs1ClientEncryptor=PKCS1_OAEP.new(rsaClientKey)
    #End RSA Part


    #Begin AES Part
    iv = ''.join(chr(random.randint(0, 0xFF)) for i in range(16))
    thisMessagePassword = os.urandom(16)
    aesEncryptor = AES.new(thisMessagePassword, AES.MODE_CBC, iv)
    chunksize=64*1024
    #End AES Part

    #Begin RSA Encription of the AES Key
    rsaEncryptedPasswordWithServer = pkcs1ServerEncryptor.encrypt(thisMessagePassword)
    rsaEncryptedPasswordWithServerAndClient = pkcs1ClientEncryptor.encrypt(rsaEncryptedPasswordWithServer) #Katacrasssshh here!! 

    retvalTmp = cStringIO.StringIO()
    retvalTmp.write(struct.pack('<Q', len(string)))
    retvalTmp.write(struct.pack('<Q', len(rsaEncryptedPasswordWithServerAndClient)))
    #...Probably some yadda yadda here with key lengths and stuff so it would help re-build the keys in the server's side...
    retvalTmp.write(rsaEncryptedPasswordWithServerAndClient)
    retvalTmp.write(iv)
    while len(string) > 0:
        chunk = string[0:chunksize]
        string = string[chunksize:]
        if len(chunk) % 16 != 0:
            chunk += ' ' * (16 - len(chunk) % 16)
        retvalTmp.write(aesEncryptor.encrypt(chunk))
    return retvalTmp.getvalue()

But when I try to re-encrypt the key, I get a ValueError(""Plaintext too large"") exception. Which makes sense (at least makes sense to someone who barely knows anything about encryption) because PKCS adds a padding so when I encrypt the ""thisMessagePassword"" with the server's public key, I get a 256 bytes string, which is too long for the second PKCS encryptor (I've been doing some ""manual testing"" and the limit seems to be 214 bytes... I mean... that is the last value that doesn't throw an exception).
I am aware that is probably a weird construct and that it would probably make more sense use the server's public key for encryption and signing with the client's key, but I'm just trying to play a bit with encryption things and try to understand how they work and why. That's why any hint will be appreciated.
Thank you in advance!
","The documentation of PKCS1OAEP.encrypt says the following about its input:

message (string) - The message to encrypt, also known as plaintext. It can be of variable length, but not longer than the RSA modulus (in bytes) minus 2, minus twice the hash output size.

SHA-1 (the default hash function) has a 160 bit digest, that is 20 bytes. The limitation that you see sounds about right: 256 = 214 + 2 + 2*20.
Beside that, the extra step you plan to add does not add much value. If you want the client to prove to the server it's really him, and not somebody else, you should provide the client with the private key and have the server to keep the public half. After the encryption step, the client could sign the whole package (wrapped AES key + encrypted data) with PKCS#1 PSS and send the signature along. The server will verify the origin with the client's public key, then decrypt the key using its own private key, and finally decrypt the data with AES.
","5428","<python><encryption><rsa><aes><pycrypto>","0","3","3","2012-04-20 14:45:35","10219191","0","","","","","2012-04-18 15:18:48",""
"10212515","PyCrypto: Encrypt an string twice using RSA and PKCS#1","Hello everyone.
I was wondering if it's possible to do a double RSA/PKCS#1 encryption with PyCrypto.
I have a server that has its own RSA key (generated with the openssl command when said server is installed) and a client which can request the public part of the server's key. Also, that client can ask the server to generate another RSA key (or key-pair) for it. In that case, the server also keeps the private (or the ""whole"" RSA key) and sends the client the public part of its key.
I've been playing around with RSA/PKCS and AES encription. I have created a test Python file that works fine encrypting with only one RSA key. What it does is encrypting the data with the symmetric AES system (which uses a random key generated ""on-the-fly""), cyphers the password used for AES using the RSA/PKCS#1 system and puts it in the result to be sent:
#!/usr/bin/python
# -*- coding: utf-8 -*-
# Interesting links: 
# 1> http://stackoverflow.com/a/9039039/289011
# 2> http://eli.thegreenplace.net/2010/06/25/aes-encryption-of-files-in-python-with-pycrypto/

from Crypto.PublicKey import RSA
import base64
import os
from Crypto.Cipher import AES
import Crypto.Util.number
import random
import struct
import cStringIO
from Crypto.Cipher import PKCS1_OAEP

def encrypt(string):
    #Begin RSA Part to get a cypher that uses the server's public key
    externKeyFilename=""/home/borrajax/rsaKeys/server-key.pub""
    externKeyFile = open(externKeyFilename, ""r"")
    rsaKey= RSA.importKey(externKeyFile, passphrase=""F00bAr"")
    pkcs1Encryptor=PKCS1_OAEP.new(rsaKey)
    #End RSA Part

    #Begin AES Part
    iv = ''.join(chr(random.randint(0, 0xFF)) for i in range(16))
    thisMessagePassword = os.urandom(16)
    aesEncryptor = AES.new(thisMessagePassword, AES.MODE_CBC, iv)
    chunksize=64*1024
    #End AES Part

    #Begin RSA Encription of the AES Key
    rsaEncryptedPassword = pkcs1Encryptor.encrypt(thisMessagePassword)

    retvalTmp = cStringIO.StringIO()
    retvalTmp.write(struct.pack('<Q', len(string)))
    retvalTmp.write(struct.pack('<Q', len(rsaEncryptedPassword)))
    retvalTmp.write(rsaEncryptedPassword)
    retvalTmp.write(iv)
    while len(string) > 0:
        chunk = string[0:chunksize]
        string = string[chunksize:]
        if len(chunk) % 16 != 0:
            chunk += ' ' * (16 - len(chunk) % 16)
        retvalTmp.write(aesEncryptor.encrypt(chunk))
    return retvalTmp.getvalue()

def decrypt(string):
    stringAsBuffer = cStringIO.StringIO(string)
    retval = str()
    chunksize=64*1024

    externKeyFilename=""/home/borrajax/rsaKeys/server-key.pem""
    externKey = open(externKeyFilename, ""r"")
    rsaKey = RSA.importKey(externKey, passphrase=""F00bAr"")
    pkcs1Decryptor=PKCS1_OAEP.new(rsaKey)


    origsize = struct.unpack('<Q', stringAsBuffer.read(struct.calcsize('Q')))[0]
    rsaEncryptedPasswordLength = long(struct.unpack('<Q', stringAsBuffer.read(struct.calcsize('Q')))[0])
    rsaEncryptedPassword = stringAsBuffer.read(rsaEncryptedPasswordLength)
    thisMessagePassword = pkcs1Decryptor.decrypt(rsaEncryptedPassword)
    iv = stringAsBuffer.read(16)
    decryptor = AES.new(thisMessagePassword, AES.MODE_CBC, iv)
    while True:
        chunk = stringAsBuffer.read(chunksize)
        if len(chunk) == 0:
            break
        retval += decryptor.decrypt(chunk)
    return retval



if __name__ == ""__main__"":
    encryptedThingy=encrypt(base64.b64encode(""Toñóooooañjfl凯兰;kañañfjaafafs凱蘭pingüiñoo你好to金玉Toñóooooañjfl凯兰;kañañfjaafafs凱蘭pingüiñoo你好to金玉Toñóooooañjfl凯兰;kañañfjaafafs凱蘭pingüiñoo你好to金玉Toñóooooañjfl凯兰;kañañfjaafafs凱蘭pingüiñoo你好to金玉Toñóooooañjfl凯兰;kañañfjaafafs凱蘭pingüiñoo你好to金玉""))
    print ""Decrypted thingy: %s"" % base64.b64decode(decrypt(encryptedThingy))

As you can see, the AES password is encrypted with the server's RSA key. Now, I'd like to be extra paranoid, and encrypt that already encrypted password with the Client's public key, so the ""encrypt"" method would be something like:
def encrypt(string):
    #Begin RSA Part to get a cypher that uses the server's public key
    externServerKeyFilename=""/home/borrajax/rsaKeys/server-key.pub""
    externServerKeyFile = open(externServerKeyFilename, ""r"")
    rsaServerKey= RSA.importKey(externServerKeyFile, passphrase=""F00bAr"")
    pkcs1ServerEncryptor=PKCS1_OAEP.new(rsaServerKey)
    #End RSA Part

    #Begin RSA Part to get a cypher that uses the client's public key
    externClientKeyFilename=""/home/borrajax/rsaKeys/client-key.pub""
    externClientKeyFile = open(externClientKeyFilename, ""r"")
    rsaClientKey= RSA.importKey(externClientKeyFile, passphrase=""F00bAr"")
    pkcs1ClientEncryptor=PKCS1_OAEP.new(rsaClientKey)
    #End RSA Part


    #Begin AES Part
    iv = ''.join(chr(random.randint(0, 0xFF)) for i in range(16))
    thisMessagePassword = os.urandom(16)
    aesEncryptor = AES.new(thisMessagePassword, AES.MODE_CBC, iv)
    chunksize=64*1024
    #End AES Part

    #Begin RSA Encription of the AES Key
    rsaEncryptedPasswordWithServer = pkcs1ServerEncryptor.encrypt(thisMessagePassword)
    rsaEncryptedPasswordWithServerAndClient = pkcs1ClientEncryptor.encrypt(rsaEncryptedPasswordWithServer) #Katacrasssshh here!! 

    retvalTmp = cStringIO.StringIO()
    retvalTmp.write(struct.pack('<Q', len(string)))
    retvalTmp.write(struct.pack('<Q', len(rsaEncryptedPasswordWithServerAndClient)))
    #...Probably some yadda yadda here with key lengths and stuff so it would help re-build the keys in the server's side...
    retvalTmp.write(rsaEncryptedPasswordWithServerAndClient)
    retvalTmp.write(iv)
    while len(string) > 0:
        chunk = string[0:chunksize]
        string = string[chunksize:]
        if len(chunk) % 16 != 0:
            chunk += ' ' * (16 - len(chunk) % 16)
        retvalTmp.write(aesEncryptor.encrypt(chunk))
    return retvalTmp.getvalue()

But when I try to re-encrypt the key, I get a ValueError(""Plaintext too large"") exception. Which makes sense (at least makes sense to someone who barely knows anything about encryption) because PKCS adds a padding so when I encrypt the ""thisMessagePassword"" with the server's public key, I get a 256 bytes string, which is too long for the second PKCS encryptor (I've been doing some ""manual testing"" and the limit seems to be 214 bytes... I mean... that is the last value that doesn't throw an exception).
I am aware that is probably a weird construct and that it would probably make more sense use the server's public key for encryption and signing with the client's key, but I'm just trying to play a bit with encryption things and try to understand how they work and why. That's why any hint will be appreciated.
Thank you in advance!
","I'm not recommending you do this, or suggesting it makes any sense, but if you just want to play with it here is what you can do.

Make sure the modulus of the first RSA key you apply is less than the the modulus of the second RSA key you apply.
Perform the first RSA encryption using the smaller modulus and proper PKCS#1 padding
Perform the second RSA encryption using the larger modulus and no padding.

On decrypt you must reverse the order of these operations of course.
","5428","<python><encryption><rsa><aes><pycrypto>","0","1","3","2012-04-20 14:45:35","10219191","0","","","","","2012-04-18 15:18:48",""
"4542477","Python PyCrypto and RSA problem","I'e got simple RSA python script:
import Crypto.PublicKey.RSA
import rsakey
from Crypto.PublicKey import pubkey

# Some global stuff
impl = Crypto.PublicKey.RSA.RSAImplementation(use_fast_math = True)
RSAObj = impl.construct(rsakey.RSAKeys)

def decrypt(encrypted):
        return RSAObj.decrypt(encrypted)

and when I try to run it my CLI shows error:

Traceback (most recent call last):
  File ""otrsa.py"", line 6, in 
      impl = Crypto.PublicKey.RSA.RSAImplementation(use_fast_math
  = True) AttributeError: 'module' object has no attribute
  'RSAImplementation'

I'm really new to Python and I don't know what it means.
I would be thankful for any kind of help.
","Hmmm, I get the same error -- perhaps some miss-match between the docs and code?
What little I've used pyCrypto, I've found M2Crypto to be a better library overall -- you might want to try it out.
","5407","<python><rsa><pycrypto>","1","0","3","2010-12-28 02:23:13","4543242","0","1","","","","2010-12-27 23:04:48",""
"4542477","Python PyCrypto and RSA problem","I'e got simple RSA python script:
import Crypto.PublicKey.RSA
import rsakey
from Crypto.PublicKey import pubkey

# Some global stuff
impl = Crypto.PublicKey.RSA.RSAImplementation(use_fast_math = True)
RSAObj = impl.construct(rsakey.RSAKeys)

def decrypt(encrypted):
        return RSAObj.decrypt(encrypted)

and when I try to run it my CLI shows error:

Traceback (most recent call last):
  File ""otrsa.py"", line 6, in 
      impl = Crypto.PublicKey.RSA.RSAImplementation(use_fast_math
  = True) AttributeError: 'module' object has no attribute
  'RSAImplementation'

I'm really new to Python and I don't know what it means.
I would be thankful for any kind of help.
","It means that Crypto.PublicKey.RSA does not have the function/variable called 'RSAImplementation""
","5407","<python><rsa><pycrypto>","1","0","3","2010-12-28 02:23:13","4543242","0","1","","","","2010-12-27 23:04:48",""
"4542477","Python PyCrypto and RSA problem","I'e got simple RSA python script:
import Crypto.PublicKey.RSA
import rsakey
from Crypto.PublicKey import pubkey

# Some global stuff
impl = Crypto.PublicKey.RSA.RSAImplementation(use_fast_math = True)
RSAObj = impl.construct(rsakey.RSAKeys)

def decrypt(encrypted):
        return RSAObj.decrypt(encrypted)

and when I try to run it my CLI shows error:

Traceback (most recent call last):
  File ""otrsa.py"", line 6, in 
      impl = Crypto.PublicKey.RSA.RSAImplementation(use_fast_math
  = True) AttributeError: 'module' object has no attribute
  'RSAImplementation'

I'm really new to Python and I don't know what it means.
I would be thankful for any kind of help.
","Crypto.PublicKey.RSA contains a class called RSAImplementation (see http://www.dlitz.net/software/pycrypto/apidoc/Crypto.PublicKey.RSA.RSAImplementation-class.html).
The following works for me (in Python 2.7.1 on 32-bit Windows):
import Crypto.PublicKey.RSA
impl = Crypto.PublicKey.RSA.RSAImplementation()

Note that, by default, fast math will be used if it is available. Forcing use_fast_math just causes a runtime error if it is not available.
","5407","<python><rsa><pycrypto>","1","3","3","2010-12-28 02:23:13","4543242","0","1","","","","2010-12-27 23:04:48",""
"11499224","AES decryption using pycrypto","As a self study exercise, I'm trying to learn how to use some of the pycrypto library. I need to decrypt a ciphertext string in CBC_MODE using AES. I the ciphertext, key, and IV are all given. Here is the code that I have written:
from Crypto.Cipher import AES

mode = AES.MODE_CBC
key = ""a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1""
ciphertext = ""a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1"";

iv = ciphertext[:32] 
ciphertext = ciphertext[32:] 
decryptor = AES.new(key, mode, iv)
plaintext = decryptor.decrypt(ciphertext)
print plaintext

When I run this, I get the following error:

ValueError: IV must be 16 bytes long

I know that the IV string is 32 hex characters, and therefore 16 bytes. I think that this might be a typing problem, but I don't know how to correct it. Can anyone help?
Thank you!
","Your strings contain only hex characters, but they are still plain strings, so every character counts.
So your IV string is 32 byte long as you sliced it out from ciphertext.
","5330","<aes><pycrypto>","1","1","3","2015-02-13 23:19:27","11584192","0","1","1024973","","2012-07-16 15:58:30","2012-07-16 06:38:59",""
"11499224","AES decryption using pycrypto","As a self study exercise, I'm trying to learn how to use some of the pycrypto library. I need to decrypt a ciphertext string in CBC_MODE using AES. I the ciphertext, key, and IV are all given. Here is the code that I have written:
from Crypto.Cipher import AES

mode = AES.MODE_CBC
key = ""a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1""
ciphertext = ""a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1"";

iv = ciphertext[:32] 
ciphertext = ciphertext[32:] 
decryptor = AES.new(key, mode, iv)
plaintext = decryptor.decrypt(ciphertext)
print plaintext

When I run this, I get the following error:

ValueError: IV must be 16 bytes long

I know that the IV string is 32 hex characters, and therefore 16 bytes. I think that this might be a typing problem, but I don't know how to correct it. Can anyone help?
Thank you!
","I suspect you're right and it is down to typing. Try one of these:
iv = binascii.unhexlify(ciphertext[:32])
or
iv = long(ciphertext[:32], 16)
","5330","<aes><pycrypto>","1","1","3","2015-02-13 23:19:27","11584192","0","1","1024973","","2012-07-16 15:58:30","2012-07-16 06:38:59",""
"11499224","AES decryption using pycrypto","As a self study exercise, I'm trying to learn how to use some of the pycrypto library. I need to decrypt a ciphertext string in CBC_MODE using AES. I the ciphertext, key, and IV are all given. Here is the code that I have written:
from Crypto.Cipher import AES

mode = AES.MODE_CBC
key = ""a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1""
ciphertext = ""a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1"";

iv = ciphertext[:32] 
ciphertext = ciphertext[32:] 
decryptor = AES.new(key, mode, iv)
plaintext = decryptor.decrypt(ciphertext)
print plaintext

When I run this, I get the following error:

ValueError: IV must be 16 bytes long

I know that the IV string is 32 hex characters, and therefore 16 bytes. I think that this might be a typing problem, but I don't know how to correct it. Can anyone help?
Thank you!
","Tell the computer you are dealing with hex. It is treating it as a string. 
iv = iv.decode('hex');
","5330","<aes><pycrypto>","1","0","3","2015-02-13 23:19:27","11584192","0","1","1024973","","2012-07-16 15:58:30","2012-07-16 06:38:59",""
"25816942","How to encrypt & decrypt AES key with RSA and store in a textfile","Python, Pycrypto, RSA, AES
I am trying to implement a script that will encrypt a file using a randomly generated AES key then encrypt said AES key with an RSA public key. The encrypted AES key will be shared with authorized persons in possession of the private key to decrypt  it. The code is as follows:
from Crypto.PublicKey import RSA
from Crypto.Cipher import AES
from Crypto import Random

RSAkey = '-----BEGIN PUBLIC KEY-----\nSome RSA Key here\n-----END PUBLIC KEY-----'

RSAkey = RSA.importKey(RSAkey)

key = Random.new().read(32)

enc_key = RSAkey.encrypt(key, '')

enc_key = str(enc_key)

custom_writefile_function('enc_key.txt', enc_key)

I am converting the enc_key to a string so that I can write it to a text file, otherwise enc_key.txt will contain rubbish. The problem however, is that in another script, meant for decrypting enc_key to get the original AES key used to encrypt the files, trying to decrypt the enc_key which has been converted to a string produces an error:



RSAkey.decrypt(str(RSAkey.encrypt(key, '')))
      Traceback (most recent call last):
         File """", line 1, in 
        File ""/usr/lib/python2.7/dist-packages/Crypto/PublicKey/RSA.py"", line 174, in decrypt
          return pubkey.pubkey.decrypt(self, ciphertext)
        File ""/usr/lib/python2.7/dist-packages/Crypto/PublicKey/pubkey.py"", line 93, in decrypt
          plaintext=self._decrypt(ciphertext)
        File ""/usr/lib/python2.7/dist-packages/Crypto/PublicKey/RSA.py"", line 237, in _decrypt
          cp = self.key._blind(ciphertext, r)
      ValueError: Message too large



The code is as follows:
RSAkey = custom_readfile_function('private_key.txt', 'r')
RSAkey = RSA.importKey(RSAkey)

enc_key = custom_readfile_function('enc_key.txt', 'r')

aes_key = RSAkey.decrypt(enc_key)

custom_writefile_function('key.txt', str(aes_key), 'w')

I beleive the issue is a type mismatch. RSAkey.encrypt(key, '') returns type 'tuple', so I figure RSA.decrypt() expects this type as well, but I can't write that type to a textfile. So when I convert it to a string for writing to file, I'll need to convert it back to type 'tuple' when I'm decrypting. How can I do this? Or maybe there is a better way of achieving my desired result that I haven't considered?
Thanks
","Use base 64 instead of converting directly to a string.
Beware of the documentation of the encrypt method you are using:

Returns:
     A tuple with two items. The first item is the ciphertext of the same type as the plaintext (string or long). The second item is always None.
  Overrides: pubkey.pubkey.encrypt

Furthermore, you should heed the following advice:

Attention: this function performs the plain, primitive RSA encryption (textbook). In real applications, you always need to use proper cryptographic padding, and you should not directly encrypt data with this method. Failure to do so may lead to security vulnerabilities. It is recommended to use modules Crypto.Cipher.PKCS1_OAEP or Crypto.Cipher.PKCS1_v1_5 instead.

","5284","<python><encryption><aes><rsa><pycrypto>","3","3","2","2015-12-13 21:01:32","","0","","4012090","","2014-09-12 21:19:47","2014-09-12 21:14:31",""
"25816942","How to encrypt & decrypt AES key with RSA and store in a textfile","Python, Pycrypto, RSA, AES
I am trying to implement a script that will encrypt a file using a randomly generated AES key then encrypt said AES key with an RSA public key. The encrypted AES key will be shared with authorized persons in possession of the private key to decrypt  it. The code is as follows:
from Crypto.PublicKey import RSA
from Crypto.Cipher import AES
from Crypto import Random

RSAkey = '-----BEGIN PUBLIC KEY-----\nSome RSA Key here\n-----END PUBLIC KEY-----'

RSAkey = RSA.importKey(RSAkey)

key = Random.new().read(32)

enc_key = RSAkey.encrypt(key, '')

enc_key = str(enc_key)

custom_writefile_function('enc_key.txt', enc_key)

I am converting the enc_key to a string so that I can write it to a text file, otherwise enc_key.txt will contain rubbish. The problem however, is that in another script, meant for decrypting enc_key to get the original AES key used to encrypt the files, trying to decrypt the enc_key which has been converted to a string produces an error:



RSAkey.decrypt(str(RSAkey.encrypt(key, '')))
      Traceback (most recent call last):
         File """", line 1, in 
        File ""/usr/lib/python2.7/dist-packages/Crypto/PublicKey/RSA.py"", line 174, in decrypt
          return pubkey.pubkey.decrypt(self, ciphertext)
        File ""/usr/lib/python2.7/dist-packages/Crypto/PublicKey/pubkey.py"", line 93, in decrypt
          plaintext=self._decrypt(ciphertext)
        File ""/usr/lib/python2.7/dist-packages/Crypto/PublicKey/RSA.py"", line 237, in _decrypt
          cp = self.key._blind(ciphertext, r)
      ValueError: Message too large



The code is as follows:
RSAkey = custom_readfile_function('private_key.txt', 'r')
RSAkey = RSA.importKey(RSAkey)

enc_key = custom_readfile_function('enc_key.txt', 'r')

aes_key = RSAkey.decrypt(enc_key)

custom_writefile_function('key.txt', str(aes_key), 'w')

I beleive the issue is a type mismatch. RSAkey.encrypt(key, '') returns type 'tuple', so I figure RSA.decrypt() expects this type as well, but I can't write that type to a textfile. So when I convert it to a string for writing to file, I'll need to convert it back to type 'tuple' when I'm decrypting. How can I do this? Or maybe there is a better way of achieving my desired result that I haven't considered?
Thanks
","Even though more than one year has passed since you asked the question, I nevertheless want to provide an actual answer to your problem, because I have myself struggled with this minute yet uncomfortable error, so that anyone who encounters this situation would be able to quickly solve it.
First of all, as the other answer suggests, for human readability I would use base64 encoding:
enc_key = RSAkey.encrypt(key, '')

enc_key = base64.b64encode(enc_key[0]) 

where [0] represents the first value of the tuple which is generated by the encrypt method (the ciphertext itself).
Then, when you want to decrypt the whole thing, you call:
aes_key = RSAkey.decrypt(base64.b64decode(enc_key))

which should return you the original plaintext without the ValueError: Message too large
","5284","<python><encryption><aes><rsa><pycrypto>","3","0","2","2015-12-13 21:01:32","","0","","4012090","","2014-09-12 21:19:47","2014-09-12 21:14:31",""
"36762098","How to decrypt password from JavaScript CryptoJS.AES.encrypt(password, passphrase) in Python","I have a password which is encrypt from JavaScript via
  var password = 'sample'
  var passphrase ='sample_passphrase'
  CryptoJS.AES.encrypt(password, passphrase)

Then I tried to decrypt the password comes from JavaScript in Python:
  from Crypto.Cipher import AES
  import base64

  PADDING = '\0'

  pad_it = lambda s: s+(16 - len(s)%16)*PADDING
  key = 'sample_passphrase'
  iv='11.0.0.101'        #------> here is my question, how can I get this iv to restore password, what should I put here?
  key=pad_it(key)        #------> should I add padding to keys and iv?
  iv=pad_it(iv)          ##
  source = 'sample'
  generator = AES.new(key, AES.MODE_CFB,iv)
  crypt = generator.encrypt(pad_it(source))
  cryptedStr = base64.b64encode(crypt)
  print cryptedStr
  generator = AES.new(key, AES.MODE_CBC,iv)
  recovery = generator.decrypt(crypt)
  print recovery.rstrip(PADDING)

I checked JS from browser console, it shows IV in CryptoJS.AES.encrypt(password, passphrase) is a object with some attributes( like sigBytes:16, words: [-44073646, -1300128421, 1939444916, 881316061]). It seems generated randomly. 
From one web page, it tells me that JS has two way to encrypt password 
(reference link ):


a. crypto.createCipher(algorithm, password)
b. crypto.createCipheriv(algorithm, key, iv)


What I saw in JavaScript should be option a. However, only option b is equivalent to AES.new() in python.
The questions are:

How can I restore this password in Python without changing JavaScript code? 
If I need IV in Python, how can I get it from the password that is used in JavaScript? 

","You will have to implement OpenSSL's EVP_BytesToKey, because that is what CryptoJS uses to derive the key and IV from the provided password, but pyCrypto only supports the key+IV type encryption. CryptoJS also generates a random salt which also must be send to the server. If the ciphertext object is converted to a string, then it uses automatically an OpenSSL-compatible format which includes the random salt.


var data = ""Some semi-long text for testing"";
var password = ""some password"";
var ctObj = CryptoJS.AES.encrypt(data, password);
var ctStr = ctObj.toString();

out.innerHTML = ctStr;
<script src=""https://cdn.rawgit.com/CryptoStore/crypto-js/3.1.2/build/rollups/aes.js""></script>
<div id=""out""></div>



Possible output:

U2FsdGVkX1+ATH716DgsfPGjzmvhr+7+pzYfUzR+25u0D7Z5Lw04IJ+LmvPXJMpz

CryptoJS defaults to 256 bit key size for AES, PKCS#7 padding and CBC mode. AES has a 128 bit block size which is also the IV size. This means that we have to request 32+16 = 48 byte from EVP_BytesToKey. I've found a semi-functional implementation here and extended it further.
Here is the full Python (tested with 2.7 and 3.4) code, which is compatible with CryptoJS:
from Crypto import Random
from Crypto.Cipher import AES
import base64
from hashlib import md5

BLOCK_SIZE = 16

def pad(data):
    length = BLOCK_SIZE - (len(data) % BLOCK_SIZE)
    return data + (chr(length)*length).encode()

def unpad(data):
    return data[:-(data[-1] if type(data[-1]) == int else ord(data[-1]))]

def bytes_to_key(data, salt, output=48):
    # extended from https://gist.github.com/gsakkis/4546068
    assert len(salt) == 8, len(salt)
    data += salt
    key = md5(data).digest()
    final_key = key
    while len(final_key) < output:
        key = md5(key + data).digest()
        final_key += key
    return final_key[:output]

def encrypt(message, passphrase):
    salt = Random.new().read(8)
    key_iv = bytes_to_key(passphrase, salt, 32+16)
    key = key_iv[:32]
    iv = key_iv[32:]
    aes = AES.new(key, AES.MODE_CBC, iv)
    return base64.b64encode(b""Salted__"" + salt + aes.encrypt(pad(message)))

def decrypt(encrypted, passphrase):
    encrypted = base64.b64decode(encrypted)
    assert encrypted[0:8] == b""Salted__""
    salt = encrypted[8:16]
    key_iv = bytes_to_key(passphrase, salt, 32+16)
    key = key_iv[:32]
    iv = key_iv[32:]
    aes = AES.new(key, AES.MODE_CBC, iv)
    return unpad(aes.decrypt(encrypted[16:]))


password = ""some password"".encode()
ct_b64 = ""U2FsdGVkX1+ATH716DgsfPGjzmvhr+7+pzYfUzR+25u0D7Z5Lw04IJ+LmvPXJMpz""

pt = decrypt(ct_b64, password)
print(""pt"", pt)

print(""pt"", decrypt(encrypt(pt, password), password))


Similar code can be found in my answers for Java and PHP.
JavaScript AES encryption in the browser without HTTPS is simple obfuscation and does not provide any real security, because the key must be transmitted alongside the ciphertext.
","5200","<javascript><python><aes><pycrypto><cryptojs>","9","21","1","2017-07-30 09:25:07","36780727","4","3","1816580","","2016-04-22 07:36:18","2016-04-21 07:05:47",""
"21450147","Error importing _counter form pycrypto library","This line in Crypto/Util/Counter.py from the pycrypto lib:
from Crypto.Util import _counter

Causes this error:
ImportError: cannot import name _counter

But I have the file _counter.so under Crypto/Util in the pycrypto library of Python's site-packages. I am using Python 2.7.5, 32-bit for Windows.
","File _counter.so belongs to Linux/MacOS package, Windows should have _counter.pyd instead. Prebuilt Windows PyCrypto packages can be downloaded from here: http://www.voidspace.org.uk/python/modules.shtml#pycrypto
","4932","<python><pycrypto>","2","1","1","2014-04-07 20:12:06","21457027","0","","309308","","2014-04-07 20:12:06","2014-01-30 07:21:52",""
"35397295","PyCrypto for Python3 in Alpine?","Is there a package for Alpine which allows me to install PyCrypto for Python 3?
After encountering problems with pip3 install pycrypto, I stumbled upon this post which explains how to install numpy in Alpine using apk add py-numpy@testing. PyCrypto can also be installed for Python2.7 using apk add py-crypto. However, I cannot seem to figure out how to call pycrypto for Python3 or even if this package exists.
As an alternative solution, I tried to install the C compiler gcc using apk add gcc so that the setup tools in pip3 install pycrypto can compile. But, when I run that command with gcc already, it throws a fatal error:
...
running build_ext
running build_configure
checking for gcc... gcc
checking whether the C compiler works... no
configure: error: in `/tmp/pip-build-2TivSm/pycrypto':
configure: error: C compiler cannot create executables
...

Is there no way to compile Python3 modules inside Alpine?   
","PyCrypto seems to have problems with python 3, i had a lot of struggle with that. If you are using Windows, this is the solution that worked for me:

Install Visual Studio 2015 with Visual C++ (VS Version 2015 only works if you are using python 3.5+. If you are using 3.4, i think the correct version was VS2010. For earlier versions i am not really sure which version to choose but you can find information about that on the internet)
Download the pycrypto source. Currently the stable release is pycrypto-2.6.1. Use this one and not the experimental version below.
Extract the archive
Edit the file lib/Crypto/Random/OSRNG/nt.py and replace import winrandom with from Crypto.Random.OSRNG import winrandom.
Run the following from cmd python setup.py build -c msvc python setup.py install python setup.py test
If the test gets you some errors, you might get away with it anyways.

Instructions taken from my github project (dev branch).
","4896","<python><python-3.x><pycrypto><alpine>","11","-3","3","2018-09-18 07:46:31","35713086","0","1","","","","2016-02-14 19:58:54",""
"35397295","PyCrypto for Python3 in Alpine?","Is there a package for Alpine which allows me to install PyCrypto for Python 3?
After encountering problems with pip3 install pycrypto, I stumbled upon this post which explains how to install numpy in Alpine using apk add py-numpy@testing. PyCrypto can also be installed for Python2.7 using apk add py-crypto. However, I cannot seem to figure out how to call pycrypto for Python3 or even if this package exists.
As an alternative solution, I tried to install the C compiler gcc using apk add gcc so that the setup tools in pip3 install pycrypto can compile. But, when I run that command with gcc already, it throws a fatal error:
...
running build_ext
running build_configure
checking for gcc... gcc
checking whether the C compiler works... no
configure: error: in `/tmp/pip-build-2TivSm/pycrypto':
configure: error: C compiler cannot create executables
...

Is there no way to compile Python3 modules inside Alpine?   
","This worked for me:
apk add gcc g++ make libffi-dev openssl-dev

Then do your pip install.
","4896","<python><python-3.x><pycrypto><alpine>","11","20","3","2018-09-18 07:46:31","35713086","0","1","","","","2016-02-14 19:58:54",""
"35397295","PyCrypto for Python3 in Alpine?","Is there a package for Alpine which allows me to install PyCrypto for Python 3?
After encountering problems with pip3 install pycrypto, I stumbled upon this post which explains how to install numpy in Alpine using apk add py-numpy@testing. PyCrypto can also be installed for Python2.7 using apk add py-crypto. However, I cannot seem to figure out how to call pycrypto for Python3 or even if this package exists.
As an alternative solution, I tried to install the C compiler gcc using apk add gcc so that the setup tools in pip3 install pycrypto can compile. But, when I run that command with gcc already, it throws a fatal error:
...
running build_ext
running build_configure
checking for gcc... gcc
checking whether the C compiler works... no
configure: error: in `/tmp/pip-build-2TivSm/pycrypto':
configure: error: C compiler cannot create executables
...

Is there no way to compile Python3 modules inside Alpine?   
","
configure: error: C compiler cannot create executables

In alpine Install their SDK.
For any compiling stuff in Alpine, make sure you have these packages.
alpine-sdk autoconf automake libtool
Install it apk add --no-cache alpine-sdk autoconf automake libtool
","4896","<python><python-3.x><pycrypto><alpine>","11","1","3","2018-09-18 07:46:31","35713086","0","1","","","","2016-02-14 19:58:54",""
"27991521","pycrypto - Ciphertext with incorrect length","I've generated a public and private key with pycrypto, and I save them to a file using export key:
from Crypto.PublicKey import RSA
bits=2048
new_key = RSA.generate(bits, e=65537)

prv = open('keymac.pem','w')
prv.write(new_key.exportKey('PEM'))
prv.close()
pub = open('pubmac.pem', 'w')
pub.write(new_key.publickey().exportKey('PEM'))
pub.close()

I use the public key to encrypt a file (following http://insiderattack.blogspot.com/2014/07/encrypted-file-transfer-utility-in.html#comment-form) 
When I read the file to decrypt it, I get ""Ciphertext with incorrect length.""
I added a try-except block around the decryption code on Deepal Jayasekara example:
try:
    encryptedonetimekey = filetodecrypt.read(512)
    privatekey = open(""keymac.pem"", 'r').read()
    rsaofprivatekey = RSA.importKey(privatekey)
    pkcs1ofprivatekey = PKCS1_OAEP.new(rsaofprivatekey)
    aesonetimekey = pkcs1ofprivatekey.decrypt(encryptedonetimekey)

   except Exception as decrypprivkeyerr:
       print ""Decryption of the one time key using the private key        failed!!""
       print ""Key error == %s"" %decrypprivkeyerr
     raise Exception(""Decryption using Private key failed error = %s"" %decrypprivkeyerr)

Am I missing something? Should I save the private key differently? Am I not reading the private key correctly? 
","This doesnt answer your question directly but it may give you some clues to the problem. Im using two functions for encrypting content to a file rather than encrypting a file directly. One for encrypting (in my case username and password) to a file then another to decrypt that data to use as needed.
Note the need for the padding
Creat Encrypted Content In File:
from Crypto.Cipher import AES
import base64
import os
import argparse

parser = argparse.ArgumentParser(description='Arguments used to generate new credentials file, Use: -u for username, -p for password')
parser.add_argument('-u', help='Specify username', required=True)
parser.add_argument('-p', help='Specify password', required=True)
parser.add_argument('-b', help='Specify debug', required=False, action='store_true')
args = vars(parser.parse_args())


def encrypt(username, password):
    #Encrypt Credentials To '.creds' file, including 'secret' for username and password
    dir_path = os.path.dirname(os.path.realpath(__file__))
    # the block size for the cipher object; must be 16 per FIPS-197
    BLOCK_SIZE = 16

    # the character used for padding--with a block cipher such as AES, the value
    # you encrypt must be a multiple of BLOCK_SIZE in length.  This character is
    # used to ensure that your value is always a multiple of BLOCK_SIZE
    PADDING = '{'

    # one-liner to sufficiently pad the text to be encrypted
    pad = lambda s: s + (BLOCK_SIZE - len(s) % BLOCK_SIZE) * PADDING

    # generate a random secret key
    user_secret = os.urandom(BLOCK_SIZE)
    pass_secret = os.urandom(BLOCK_SIZE)

    # one-liners to encrypt/encode and decrypt/decode a string
    # encrypt with AES, encode with base64

    EncodeAES = lambda c, s: base64.b64encode(c.encrypt(pad(s)))
    # create a cipher object using the random secret
    user_cipher = AES.new(user_secret)
    pass_cipher = AES.new(pass_secret)

    # encode a string
    user_encoded = EncodeAES(user_cipher, username)
    pass_encoded = EncodeAES(pass_cipher, password)
    try:
        with open('.creds', 'w') as filename:
            filename.write(user_encoded + '\n')
            filename.write(user_secret + '\n')
            filename.write(pass_encoded + '\n')
            filename.write(pass_secret + '\n')
            filename.close()
            print '\nFile Written To: ', dir_path + '/.creds'
    except Exception, e:
        print e

    if args['b']:
        print((user_encoded, user_secret), (pass_encoded, pass_secret))

username = args['u']
password = args['p']

encrypt(username, password)

Decrypt The Data
def decrypt(dir_path, filename):
    #Read '.creds' file and return unencrypted credentials (user_decoded, pass_decoded)

    lines = [line.rstrip('\n') for line in open(dir_path + filename)]

    user_encoded = lines[0]
    user_secret = lines[1]
    pass_encoded = lines[2]
    pass_secret = lines[3]

    # the character used for padding--with a block cipher such as AES, the value
    # you encrypt must be a multiple of BLOCK_SIZE in length.  This character is
    # used to ensure that your value is always a multiple of BLOCK_SIZE
    PADDING = '{'

    DecodeAES = lambda c, e: c.decrypt(base64.b64decode(e)).rstrip(PADDING)

    # create a cipher object using the random secret
    user_cipher = AES.new(user_secret)
    pass_cipher = AES.new(pass_secret)

    # decode the encoded string
    user_decoded = DecodeAES(user_cipher, user_encoded)
    pass_decoded = DecodeAES(pass_cipher, pass_encoded)

    return (user_decoded, pass_decoded)

","4889","<python><pycrypto>","11","0","2","2018-10-29 08:03:19","","1","3","2415524","","2015-01-16 20:08:23","2015-01-16 19:37:56",""
"27991521","pycrypto - Ciphertext with incorrect length","I've generated a public and private key with pycrypto, and I save them to a file using export key:
from Crypto.PublicKey import RSA
bits=2048
new_key = RSA.generate(bits, e=65537)

prv = open('keymac.pem','w')
prv.write(new_key.exportKey('PEM'))
prv.close()
pub = open('pubmac.pem', 'w')
pub.write(new_key.publickey().exportKey('PEM'))
pub.close()

I use the public key to encrypt a file (following http://insiderattack.blogspot.com/2014/07/encrypted-file-transfer-utility-in.html#comment-form) 
When I read the file to decrypt it, I get ""Ciphertext with incorrect length.""
I added a try-except block around the decryption code on Deepal Jayasekara example:
try:
    encryptedonetimekey = filetodecrypt.read(512)
    privatekey = open(""keymac.pem"", 'r').read()
    rsaofprivatekey = RSA.importKey(privatekey)
    pkcs1ofprivatekey = PKCS1_OAEP.new(rsaofprivatekey)
    aesonetimekey = pkcs1ofprivatekey.decrypt(encryptedonetimekey)

   except Exception as decrypprivkeyerr:
       print ""Decryption of the one time key using the private key        failed!!""
       print ""Key error == %s"" %decrypprivkeyerr
     raise Exception(""Decryption using Private key failed error = %s"" %decrypprivkeyerr)

Am I missing something? Should I save the private key differently? Am I not reading the private key correctly? 
","The error message, ""Ciphertext with incorrect length"", has told us all. That means, 
cipher text exceeded the limit length which can be calculated by (length of key, 
1024.2048..)/8. to solve this problem, you can separate the cipher text and decrypt 
them within a loop, then assemble all the decrypted byte string. My code in Python 3.6 for reference:
# 1024/8
default_length = 128
encrypt_str = str(data[""content""])
sign_str = str(data[""sign""])
try:
    rsa_private_key = RSA.importKey(private_key)
    encrypt_byte = base64.b64decode(encrypt_str.encode())
    length = len(encrypt_byte)
    cipher = PKCS115_Cipher(rsa_private_key)
    if length < default_length:
        decrypt_byte = cipher.decrypt(encrypt_byte, 'failure')
    else:
        offset = 0
        res = []
        while length - offset > 0:
            if length - offset > default_length:
                res.append(cipher.decrypt(encrypt_byte[offset: offset + 
                    default_length], 'failure'))
            else:
                res.append(cipher.decrypt(encrypt_byte[offset:], 'failure'))
            offset += default_length
        decrypt_byte = b''.join(res)
    decrypted = decrypt_byte.decode()

","4889","<python><pycrypto>","11","0","2","2018-10-29 08:03:19","","1","3","2415524","","2015-01-16 20:08:23","2015-01-16 19:37:56",""
"9979358","PyCrypto: Generate RSA key protected with DES3 password","I have been able to create a RSA key protected by password with DES3 (well... I think because I'm very new to this encryption world) by using the command:
openssl genrsa -out ""/tmp/myKey.pem"" -passout pass:""f00bar"" -des3 2048

Now, I would like to do that inside a Python script, using PyCrypto, if possible. I have seen this message, which seems to discourage the use of PyCrypto to do that. Is it still like that?
Of course I can always call os.execute, and execute the above command, but I'd consider that ""cheating"" :-). I'm pretty much doing this to learn PyCrypto.
Thank you in advance.
","Starting from PyCrypto 2.5 you can export an RSA private key and have it protected under a passphrase. A Triple DES key is internally derived from the passphrase and used to perform the actual encryption.
For instance:
from Crypto import RSA
from Crypto import Random

random_generator = Random.new().read
key = RSA.generate(1024, random_generator)
exportedKey = key.exportKey('PEM', 'my secret', pkcs=1)

The variable exportedKey contains an ASCII version (PEM) of the key, encoded according to PKCS#1 (a cryptographic standard. Another option is pkcs=8 for - guess what - PKCS#8). Since the result is standard, you can use it with several other programs, including openssl.
And of course, you can also re-import it back into python via PyCrypto!
The exportKey method is documented here.
","4851","<python><encryption><rsa><des><pycrypto>","7","6","1","2012-04-02 19:56:33","9982832","0","4","-1","","2017-05-23 11:45:50","2012-04-02 15:39:58",""
"17993604","SignedJwtAssertionCredentials on AppEngine doesn't recognize PEM key","SignedJwtAssertionCredentials on appengine (with pycrypto 2.6) doesn't support the PKCS12 format, therefore I'm trying to use PEM keys instead, as suggested everywhere..
this is my code:
  f = file(os.path.join(os.path.dirname(__file__), KEY_FILE), ""r"")
  key = f.read()
  f.close()

  credentials = SignedJwtAssertionCredentials(SERVICE_ACCOUNT_EMAIL, key,
      scope=""https://www.googleapis.com/auth/drive""
  http = httplib2.Http()
  http = credentials.authorize(http)

and the KEY_FILE is a PEM key, converted with the command:
openssl pkcs12 -in privatekey.p12 -nodes -nocerts > privatekey.pem

but I still get this error, as if it didn't recognize that's a PEM key:
NotImplementedError: PKCS12 format is not supported by the PyCrpto library. 
Try converting to a ""PEM"" (openssl pkcs12 -in xxxxx.p12 -nodes -nocerts > privatekey.pem) or using PyOpenSSL if native code is an option.

same error if I pass just the filename to the constructor (without reading the contents of the file)
any idea?
","Yeah, the error is hugely misleading.  What you're doing is fine; just remove the header from the PEM file so that it begins with -----BEGIN PRIVATE KEY-----, or run the following command over it:
openssl pkcs8 -nocrypt -in privatekey.pem -passin pass:notasecret -topk8 -out pk.pem

","4586","<google-app-engine><openssl><pycrypto><pem><pkcs#12>","10","17","2","2014-07-27 02:21:26","18042823","0","9","","","","2013-08-01 12:06:51",""
"17993604","SignedJwtAssertionCredentials on AppEngine doesn't recognize PEM key","SignedJwtAssertionCredentials on appengine (with pycrypto 2.6) doesn't support the PKCS12 format, therefore I'm trying to use PEM keys instead, as suggested everywhere..
this is my code:
  f = file(os.path.join(os.path.dirname(__file__), KEY_FILE), ""r"")
  key = f.read()
  f.close()

  credentials = SignedJwtAssertionCredentials(SERVICE_ACCOUNT_EMAIL, key,
      scope=""https://www.googleapis.com/auth/drive""
  http = httplib2.Http()
  http = credentials.authorize(http)

and the KEY_FILE is a PEM key, converted with the command:
openssl pkcs12 -in privatekey.p12 -nodes -nocerts > privatekey.pem

but I still get this error, as if it didn't recognize that's a PEM key:
NotImplementedError: PKCS12 format is not supported by the PyCrpto library. 
Try converting to a ""PEM"" (openssl pkcs12 -in xxxxx.p12 -nodes -nocerts > privatekey.pem) or using PyOpenSSL if native code is an option.

same error if I pass just the filename to the constructor (without reading the contents of the file)
any idea?
","for those interested, I ended up compiling a short tutorial on how to use the Google+ Domains APIs with python on App Engine, you can find it here:
https://gist.github.com/vircheck/6292176
It's also applicable to other APIs based on service accounts, such as the Drive API etc..
","4586","<google-app-engine><openssl><pycrypto><pem><pkcs#12>","10","6","2","2014-07-27 02:21:26","18042823","0","9","","","","2013-08-01 12:06:51",""
"41980931","Image encryption and decryption using Pycrypto","How can I encrypt images using the Pycrypto python library? I found some text encrypting examples on internet, but I didn't find the same with images. Can anyone help me?
","It is just the same as encrypting or decrypting text.
Example
First import some modules:
from Crypto.Cipher import AES
from Crypto import Random

After that, let us generate a key and an initialisation vector.
key = Random.new().read(AES.block_size)
iv = Random.new().read(AES.block_size)

Encryption
Now the code below loads an input file input.jpg and encrypts it, and afterwards it saves the encrypted data on a file encrypted.enc. In this example, the AES block cipher is used with the CFB mode of operation.
input_file = open(""input.jpg"")
input_data = input_file.read()
input_file.close()

cfb_cipher = AES.new(key, AES.MODE_CFB, iv)
enc_data = cfb_cipher.encrypt(input_data)

enc_file = open(""encrypted.enc"", ""w"")
enc_file.write(enc_data)
enc_file.close()

Decryption
Finally, the code below loads the encrypted file encrypted.enc and decrypts it, and afterwards it saves the decrypted data on a file output.jpg. 
enc_file2 = open(""encrypted.enc"")
enc_data2 = enc_file2.read()
enc_file2.close()

cfb_decipher = AES.new(key, AES.MODE_CFB, iv)
plain_data = cfb_decipher.decrypt(enc_data2)

output_file = open(""output.jpg"", ""w"")
output_file.write(plain_data)
output_file.close()

Note
For simplicity, the encryption and the decryption have been done in the same Python session, so the variables key and iv have been reused immediately, and to test this solution you have to do encryption and decryption in the same Python session. Of course, if you want to decrypt later in a separate session you will need to save key and iv and to reload them when you need to decrypt.
Testing the solution
Now you can open the output.jpg file and you should see an image which is identical to the one in input.jpg.
","4527","<python><encryption><pycrypto>","4","3","1","2018-05-17 07:23:18","","2","1","6854564","","2018-04-25 18:37:29","2017-02-01 13:24:08","2018-04-25 19:06:28"
"54142430","How to install Pycrypto for Python 3.7.2?","When installing Pycrypto, a compiler error occurs
I need to install Pycrypto thrue pip install
C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\bin\HostX86\x64\cl.exe /c /nologo /Ox /W3 /GL /DNDEBUG /MD -Isrc/ -Isrc/inc-msvc/ -Id:\gametest\include -IC:\Python37\include -IC:\Python37\include ""-IC:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\ATLMFC\include"" ""-IC:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include"" ""-IC:\Program Files (x86)\Windows Kits\10\include\10.0.17763.0\ucrt"" ""-IC:\Program Files (x86)\Windows Kits\10\include\10.0.17763.0\shared"" ""-IC:\Program Files (x86)\Windows Kits\10\include\10.0.17763.0\um"" ""-IC:\Program Files (x86)\Windows Kits\10\include\10.0.17763.0\winrt"" ""-IC:\Program Files (x86)\Windows Kits\10\include\10.0.17763.0\cppwinrt"" /Tcsrc/winrand.c /Fobuild\temp.win-amd64-3.7\Release\src/winrand.obj
winrand.c
C:\Program Files (x86)\Windows Kits\10\include\10.0.17763.0\ucrt\inttypes.h(27): error C2061: бЁ­в ЄбЁзҐбЄ п ®иЁЎЄ : Ё¤Ґ­вЁдЁЄ в®а ""intmax_t""
C:\Program Files (x86)\Windows Kits\10\include\10.0.17763.0\ucrt\inttypes.h(28): error C2061: бЁ­в ЄбЁзҐбЄ п ®иЁЎЄ : Ё¤Ґ­вЁдЁЄ в®а ""rem""
C:\Program Files (x86)\Windows Kits\10\include\10.0.17763.0\ucrt\inttypes.h(28): error C2059: бЁ­в ЄбЁзҐбЄ п ®иЁЎЄ : ;
C:\Program Files (x86)\Windows Kits\10\include\10.0.17763.0\ucrt\inttypes.h(29): error C2059: бЁ­в ЄбЁзҐбЄ п ®иЁЎЄ : }
C:\Program Files (x86)\Windows Kits\10\include\10.0.17763.0\ucrt\inttypes.h(31): error C2061: бЁ­в ЄбЁзҐбЄ п ®иЁЎЄ : Ё¤Ґ­вЁдЁЄ в®а ""imaxdiv_t""
C:\Program Files (x86)\Windows Kits\10\include\10.0.17763.0\ucrt\inttypes.h(31): error C2059: бЁ­в ЄбЁзҐбЄ п ®иЁЎЄ : ;
C:\Program Files (x86)\Windows Kits\10\include\10.0.17763.0\ucrt\inttypes.h(41): error C2143: бЁ­в ЄбЁзҐбЄ п ®иЁЎЄ : ®вбгвбвўЁҐ ""{"" ЇҐаҐ¤ ""__cdecl""
C:\Program Files (x86)\Windows Kits\10\include\10.0.17763.0\ucrt\inttypes.h(42): error C2146: бЁ­в ЄбЁзҐбЄ п ®иЁЎЄ : ®вбгвбвўЁҐ "")"" ЇҐаҐ¤ Ё¤Ґ­вЁдЁЄ в®а®¬ ""_Number""
C:\Program Files (x86)\Windows Kits\10\include\10.0.17763.0\ucrt\inttypes.h(42): error C2061: бЁ­в ЄбЁзҐбЄ п ®иЁЎЄ : Ё¤Ґ­вЁдЁЄ в®а ""_Number""
C:\Program Files (x86)\Windows Kits\10\include\10.0.17763.0\ucrt\inttypes.h(42): error C2059: бЁ­в ЄбЁзҐбЄ п ®иЁЎЄ : ;
C:\Program Files (x86)\Windows Kits\10\include\10.0.17763.0\ucrt\inttypes.h(43): error C2059: бЁ­в ЄбЁзҐбЄ п ®иЁЎЄ : )
C:\Program Files (x86)\Windows Kits\10\include\10.0.17763.0\ucrt\inttypes.h(46): error C2143: бЁ­в ЄбЁзҐбЄ п ®иЁЎЄ : ®вбгвбвўЁҐ ""{"" ЇҐаҐ¤ ""__cdecl""
C:\Program Files (x86)\Windows Kits\10\include\10.0.17763.0\ucrt\inttypes.h(47): error C2146: бЁ­в ЄбЁзҐбЄ п ®иЁЎЄ : ®вбгвбвўЁҐ "")"" ЇҐаҐ¤ Ё¤Ґ­вЁдЁЄ в®а®¬ ""_Numerator""
C:\Program Files (x86)\Windows Kits\10\include\10.0.17763.0\ucrt\inttypes.h(47): error C2061: бЁ­в ЄбЁзҐбЄ п ®иЁЎЄ : Ё¤Ґ­вЁдЁЄ в®а ""_Numerator""
C:\Program Files (x86)\Windows Kits\10\include\10.0.17763.0\ucrt\inttypes.h(47): error C2059: бЁ­в ЄбЁзҐбЄ п ®иЁЎЄ : ;
C:\Program Files (x86)\Windows Kits\10\include\10.0.17763.0\ucrt\inttypes.h(47): error C2059: бЁ­в ЄбЁзҐбЄ п ®иЁЎЄ : ,
C:\Program Files (x86)\Windows Kits\10\include\10.0.17763.0\ucrt\inttypes.h(49): error C2059: бЁ­в ЄбЁзҐбЄ п ®иЁЎЄ : )
C:\Program Files (x86)\Windows Kits\10\include\10.0.17763.0\ucrt\inttypes.h(51): error C2143: бЁ­в ЄбЁзҐбЄ п ®иЁЎЄ : ®вбгвбвўЁҐ ""{"" ЇҐаҐ¤ ""__cdecl""
C:\Program Files (x86)\Windows Kits\10\include\10.0.17763.0\ucrt\inttypes.h(57): error C2143: бЁ­в ЄбЁзҐбЄ п ®иЁЎЄ : ®вбгвбвўЁҐ ""{"" ЇҐаҐ¤ ""__cdecl""
C:\Program Files (x86)\Windows Kits\10\include\10.0.17763.0\ucrt\inttypes.h(64): error C2143: бЁ­в ЄбЁзҐбЄ п ®иЁЎЄ : ®вбгвбвўЁҐ ""{"" ЇҐаҐ¤ ""__cdecl""
C:\Program Files (x86)\Windows Kits\10\include\10.0.17763.0\ucrt\inttypes.h(70): error C2143: бЁ­в ЄбЁзҐбЄ п ®иЁЎЄ : ®вбгвбвўЁҐ ""{"" ЇҐаҐ¤ ""__cdecl""
C:\Program Files (x86)\Windows Kits\10\include\10.0.17763.0\ucrt\inttypes.h(77): error C2143: бЁ­в ЄбЁзҐбЄ п ®иЁЎЄ : ®вбгвбвўЁҐ ""{"" ЇҐаҐ¤ ""__cdecl""
C:\Program Files (x86)\Windows Kits\10\include\10.0.17763.0\ucrt\inttypes.h(83): error C2143: бЁ­в ЄбЁзҐбЄ п ®иЁЎЄ : ®вбгвбвўЁҐ ""{"" ЇҐаҐ¤ ""__cdecl""
C:\Program Files (x86)\Windows Kits\10\include\10.0.17763.0\ucrt\inttypes.h(90): error C2143: бЁ­в ЄбЁзҐбЄ п ®иЁЎЄ : ®вбгвбвўЁҐ ""{"" ЇҐаҐ¤ ""__cdecl""
C:\Program Files (x86)\Windows Kits\10\include\10.0.17763.0\ucrt\inttypes.h(96): error C2143: бЁ­в ЄбЁзҐбЄ п ®иЁЎЄ : ®вбгвбвўЁҐ ""{"" ЇҐаҐ¤ ""__cdecl""
error: command 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\bin\\HostX86\\x64\\cl.exe' failed with exit status 2

----------------------------------------

Command 
""d:\gametest\scripts\python.exe -u -c ""import setuptools, tokenize;__file__=
'C:\\Users\\John\\AppData\\Local\\Temp\\pip-install-59ujdaeb\\pycrypto
\\setup.py';f=getattr(tokenize, 'open',
 open)(__file__);code=f.read().replace('\r\n', '\n');f.close();exec(compile(code, __file__, 'exec'))"" install --record 
C:\Users\John\AppData\Local\Temp\pip-record-0_6xj1_v\install-record.txt 
--single-version-externally-managed --compile --install-headers d:\gametest
\include\site\python3.7\pycrypto"" failed with error code 1 in C:\Users
\John\AppData\Local\Temp\pip-install-59ujdaeb\pycrypto\

Visual Studio installed
","pip install pycryptodome It is a pycrypto fork with new features and it supports wheel. It replaces pycrypto https://pycryptodome.readthedocs.org/en/latest/src/examples.html
","4492","<python><python-3.x><pycrypto>","2","6","1","2019-09-13 16:35:14","","0","","4399634","","2019-09-13 16:35:14","2019-01-11 07:56:46",""
"20460061","Python's pycrypto library for random number generation vs os.urandom","I was trying to understand and figure out if I should use os.urandom() or Crypto.Random.new() for cryptographically secure pseudo-random numbers. 
The following website seems to suggest to use os.urandom():
https://github.com/mozilla/PyHawk/pull/13
but I don't really see why and the other websites I found online don't really explain which one to use.
If anyone knows which one is secure for cryptographic use, I would appreciate the advice!
One of the things that specifically worry me is that, I plan to use it to generate random numbers but I am worried that one day I generate some random numbers and the next day the state of the generator is the same and it starts to generate the same ""random"" numbers.
","urandom does return cryptographically secure numbers, with a caveat. If it runs out of entropy (real random data generated by mouse movement, CPU temperature fluctuations on Ivy Bridge+ chips, etc), it will start producing less secure pseudo-random numbers. These are generated by a strong generator, but depending on your application they may not be random enough. On Unix systems, /dev/random will block while waiting for more entropy, while /dev/urandom will start generating pseudo-random numbers.
I'm not knowledgeable on PyCrypto, however on reading the source, it seems the Crypto/Random/OSRNG/posix.py simply reads from /dev/urandom - so I wouldn't worry too much about the choice.
","4469","<python><random><pycrypto>","11","4","3","2013-12-09 11:30:41","20460277","5","0","1601580","","2013-12-08 22:48:18","2013-12-08 22:33:12",""
"20460061","Python's pycrypto library for random number generation vs os.urandom","I was trying to understand and figure out if I should use os.urandom() or Crypto.Random.new() for cryptographically secure pseudo-random numbers. 
The following website seems to suggest to use os.urandom():
https://github.com/mozilla/PyHawk/pull/13
but I don't really see why and the other websites I found online don't really explain which one to use.
If anyone knows which one is secure for cryptographic use, I would appreciate the advice!
One of the things that specifically worry me is that, I plan to use it to generate random numbers but I am worried that one day I generate some random numbers and the next day the state of the generator is the same and it starts to generate the same ""random"" numbers.
","In the link you gave, the only reason given to prefer urandom() is that it pulled less code in (the OS implements ""most of it"", and os.urandom() is built in to Python).
If you're going to distribute a Python package, you can simplify users' lives by minimizing external dependencies.  That's the entire point of the link you found.
In terms of quality, either way should work fine.  I prefer urandom() because I understand what it does; I never dug into the guts of PyCrypto.  But urandom() has been criticized for use in some environments.  Click this and scroll down to the part that starts

Gutterman, Pinkas, & Reinman in March 2006 published a detailed
  cryptographic analysis of the Linux random number generator ...

","4469","<python><random><pycrypto>","11","9","3","2013-12-09 11:30:41","20460277","5","0","1601580","","2013-12-08 22:48:18","2013-12-08 22:33:12",""
"20460061","Python's pycrypto library for random number generation vs os.urandom","I was trying to understand and figure out if I should use os.urandom() or Crypto.Random.new() for cryptographically secure pseudo-random numbers. 
The following website seems to suggest to use os.urandom():
https://github.com/mozilla/PyHawk/pull/13
but I don't really see why and the other websites I found online don't really explain which one to use.
If anyone knows which one is secure for cryptographic use, I would appreciate the advice!
One of the things that specifically worry me is that, I plan to use it to generate random numbers but I am worried that one day I generate some random numbers and the next day the state of the generator is the same and it starts to generate the same ""random"" numbers.
","I go for os.urandom. On all (recent) Python implementations I checked, it does the correct thing by simply opening an unbuffered connection to /dev/urandom or the equivalent device on other non-Linux platforms.
On the other hand, PyCrypto's Crypto.Random is a very complex wrapper based on Fortuna. Such complex construction was probably done in the hope of mitigating some flaws of the underlying OS. Unfortunately:

It still pulls entropy from /dev/urandom (on Linux), so if the OS is broken, PyCrypto's Crypto.Random will be broken too (defeating its purpose)
That choice has backfired, since it is very hard to deal with forking and cases where the same entropy gets reused by different processes (see CVE-2013-1445).
The Fortuna code is not covered at all by unit tests and Fortuna algorithm itself does not come with test vectors. That alone forces you to make a (big) leap of faith.

","4469","<python><random><pycrypto>","11","10","3","2013-12-09 11:30:41","20460277","5","0","1601580","","2013-12-08 22:48:18","2013-12-08 22:33:12",""
"11299688","Encrypt a string in Python. Restrict the characters used to only alphanumeric","I would like to encrypt a 10 Character (alpha-numeric only) string into a 16 or 32 character alpha-numeric string.
The string I am encrypting is an asset tag. So in itself it carries no information, but I would like to hide all valid possible strings within a larger group of possible strings. I was hoping that encrypting the string would be a good way to do this.
Is it possible to do this with the Python PyCrypto library? 
Here is an example I found regarding using PyCrypto.
","You're better off with simple hashing (which is like one way encryption). To do this just use the md5 function to make a digest and then base64 or base16 encode it. Please note that base64 strings can include +, = or /.
import md5
import base64

def obfuscate(s):
    return base64.b64encode( md5.new(s).digest())

def obfuscate2(s):
    return base64.b16encode( md5.new(s).digest())

# returns alphanumeric string but strings can also include slash, plus or equal i.e. /+=
print obfuscate('Tag 1')
print obfuscate('Tag 2')
print obfuscate('Tag 3')

# return hex string
print obfuscate2('Tag 1')

As has been commented md5 is rapidly losing its security, so if you want to have something more reliable for the future, use the SHA-2 example below.
import hashlib

def obfuscate(s):
    m = hashlib.sha256()
    m.update(s)
    return m.hexdigest()

print obfuscate('Tag 1')
print obfuscate('Tag 2')
print obfuscate('Tag 3')

One more function - this time generate about 96-bit* digest using SHA-2 and truncating the output so that we can restrict it to 16 alphanum chars. This give slightly more chance of collision but should be good enough for most practical purposes.
import hashlib
import base64

def obfuscate(s):
    m = hashlib.sha256()
    m.update(s)
    hash = base64.b64encode(m.digest(), altchars=""ZZ"")  # make one way base64 encode, to fit characters into alphanum space only
    return hash[:16]    # cut of hash at 16 chars - gives about 96 bits which should 
    # 96 bits means 1 in billion chance of collision if you have 1 billion tags (or much lower chance with fewer tags)
    # http://en.wikipedia.org/wiki/Birthday_attack

print obfuscate('Tag 1')
print obfuscate('Tag 2')
print obfuscate('Tag 3')

*The actual digest is only 95.2 bits as we use 62 character alphabet for encoding.
>>> math.log(62**16,2)
95.26714096618998

","4464","<python><encryption><hash><pycrypto>","3","4","4","2019-02-05 11:15:34","11300197","3","","72514","","2012-07-02 19:14:09","2012-07-02 19:05:59",""
"11299688","Encrypt a string in Python. Restrict the characters used to only alphanumeric","I would like to encrypt a 10 Character (alpha-numeric only) string into a 16 or 32 character alpha-numeric string.
The string I am encrypting is an asset tag. So in itself it carries no information, but I would like to hide all valid possible strings within a larger group of possible strings. I was hoping that encrypting the string would be a good way to do this.
Is it possible to do this with the Python PyCrypto library? 
Here is an example I found regarding using PyCrypto.
","To make a string longer, you could try the following;

first compress it with bzip2
then make it readable again with base64 encoding

Like this:
import bz2
import base64
base64.b64encode(bz2.compress('012345'))

This will yield:
'QlpoOTFBWSZTWeEMDLgAAAAIAH4AIAAhgAwDJy7i7kinChIcIYGXAA=='

Due to the bzip2 header, the first 13 character will always be the same, so you should discard them;
base64.b64encode(bz2.compress('012345'))[14:]

This gives:
 'EMDLgAAAAIAH4AIAAhgAwDJy7i7kinChIcIYGXAA=='

Note that this is not cryptographically secure; it is trivial to invert if you know the recipe that is used:
foo = base64.b64encode(bz2.compress('012345'))
bz2.decompress(base64.b64decode(foo))

gives:
'012345'

","4464","<python><encryption><hash><pycrypto>","3","3","4","2019-02-05 11:15:34","11300197","3","","72514","","2012-07-02 19:14:09","2012-07-02 19:05:59",""
"11299688","Encrypt a string in Python. Restrict the characters used to only alphanumeric","I would like to encrypt a 10 Character (alpha-numeric only) string into a 16 or 32 character alpha-numeric string.
The string I am encrypting is an asset tag. So in itself it carries no information, but I would like to hide all valid possible strings within a larger group of possible strings. I was hoping that encrypting the string would be a good way to do this.
Is it possible to do this with the Python PyCrypto library? 
Here is an example I found regarding using PyCrypto.
","Yes, you can also use PyCrypto : 
from Crypto.Hash import SHA256

aHash = SHA256.new(""somethingToHash"")
print(aHash.hexdigest()) #will print out the hashed password

The Crypto.Hash module is what comes from installing the pycrypto module (sudo pip install pycrypto).
This is basically the same thing as hashlib, however the PyCrypto library comes with ciphering modules.
","4464","<python><encryption><hash><pycrypto>","3","1","4","2019-02-05 11:15:34","11300197","3","","72514","","2012-07-02 19:14:09","2012-07-02 19:05:59",""
"11299688","Encrypt a string in Python. Restrict the characters used to only alphanumeric","I would like to encrypt a 10 Character (alpha-numeric only) string into a 16 or 32 character alpha-numeric string.
The string I am encrypting is an asset tag. So in itself it carries no information, but I would like to hide all valid possible strings within a larger group of possible strings. I was hoping that encrypting the string would be a good way to do this.
Is it possible to do this with the Python PyCrypto library? 
Here is an example I found regarding using PyCrypto.
","I think shake256 fit your needs:
You need to install pycryptodome.
https://pycryptodome.readthedocs.io/en/latest/src/hash/shake256.html
#!/usr/bin/env python
from Crypto.Hash import SHAKE256
from binascii import hexlify


def encrypt_shake256(s, hash_size):
    shake = SHAKE256.new()
    shake.update(s.encode())
    return hexlify(shake.read(hash_size//2))


def main():
    hash = encrypt_shake256(""holahola"", 16)
    print(hash)
    print(len(hash))


if __name__ == '__main__':
    main()

Output:
b'c126f8fb14fb21d8'
16

","4464","<python><encryption><hash><pycrypto>","3","1","4","2019-02-05 11:15:34","11300197","3","","72514","","2012-07-02 19:14:09","2012-07-02 19:05:59",""
"30990129","Encrypt in python - decrypt in Javascript","I have need to simply encrypt some text in python and being able to decrypt in JavaScrypt.
So far I have in python:
from Crypto import Random
from Crypto.Cipher import AES
import base64

BLOCK_SIZE = 16
key = ""1234567890123456"" # want to be 16 chars
textToEncrypt = ""This is text to encrypt""

def encrypt(message, passphrase):
    # passphrase MUST be 16, 24 or 32 bytes long, how can I do that ?
    IV = Random.new().read(BLOCK_SIZE)
    aes = AES.new(passphrase, AES.MODE_CFB, IV)
    return base64.b64encode(aes.encrypt(message))

def decrypt(encrypted, passphrase):
    IV = Random.new().read(BLOCK_SIZE)
    aes = AES.new(passphrase, AES.MODE_CFB, IV)
    return aes.decrypt(base64.b64decode(encrypted))

print encrypt( textToEncrypt, key )

this is producing text: ZF9as5JII5TlqcB5tAd4sxPuBXd5TrgE
in JavaScript:
<script src=""http://crypto-js.googlecode.com/svn/tags/3.1.2/build/rollups/aes.js""></script>
<script>
    var decrypted = CryptoJS.AES.decrypt( ""ZF9as5JII5TlqcB5tAd4sxPuBXd5TrgE"", ""1234567890123456"");
    console.log ( decrypted.toString( CryptoJS.enc.Utf8 ) );
</script>

however it does not produce original string (empty string instead).
What I am doing wrong ?
Is it focusing on AES is a best idea - I will be happy if I have some kind of encryption that will blur data. 
","There are many problems with your Python code and CryptoJS code:

You use a random IV to encrypt some plaintext in Python. If you want to retrieve that plaintext, you need to use the same IV during decryption. The plaintext cannot be recovered without the IV. Usually the IV is simply prepended to the ciphertext, because it doesn't have to be secret. So you need to read the IV during decryption and not generate a new one.
You use CBC mode in CryptoJS (default) instead of CFB mode. The mode has to be the same. The other tricky part is that CFB mode is parametrized with a segment size. PyCrypto uses by default 8-bit segments (CFB8), but CryptoJS is only implemented for fixed segments of 128-bit (CFB128). Since the PyCrypto version is variable, you need to change that.
The CryptoJS decrypt() function expects as ciphertext either an OpenSSL formatted string or a CipherParams object. Since you don't have an OpenSSL formatted string, you have to convert the ciphertext into an object.
The key for CryptoJS is expected to be a WordArray and not a string.
Use the same padding. PyCrypto doesn't pad the plaintext if CFB8 is used, but padding is needed when CFB128 is used. CryptoJS uses PKCS#7 padding by default, so you only need to implement that padding in python.

Python code (for version 2):
def pad(data):
    length = 16 - (len(data) % 16)
    return data + chr(length)*length

def unpad(data):
    return data[:-ord(data[-1])]

def encrypt(message, passphrase):
    IV = Random.new().read(BLOCK_SIZE)
    aes = AES.new(passphrase, AES.MODE_CFB, IV, segment_size=128)
    return base64.b64encode(IV + aes.encrypt(pad(message)))

def decrypt(encrypted, passphrase):
    encrypted = base64.b64decode(encrypted)
    IV = encrypted[:BLOCK_SIZE]
    aes = AES.new(passphrase, AES.MODE_CFB, IV, segment_size=128)
    return unpad(aes.decrypt(encrypted[BLOCK_SIZE:]))

JavaScript code:
<script src=""https://cdn.rawgit.com/CryptoStore/crypto-js/3.1.2/build/rollups/aes.js""></script>
<script src=""https://cdn.rawgit.com/CryptoStore/crypto-js/3.1.2/build/components/mode-cfb-min.js""></script>
<script>
    var base64ciphertextFromPython = ""..."";
    var ciphertext = CryptoJS.enc.Base64.parse(base64ciphertextFromPython);

    // split iv and ciphertext
    var iv = ciphertext.clone();
    iv.sigBytes = 16;
    iv.clamp();
    ciphertext.words.splice(0, 4); // delete 4 words = 16 bytes
    ciphertext.sigBytes -= 16;

    var key = CryptoJS.enc.Utf8.parse(""1234567890123456"");

    // decryption
    var decrypted = CryptoJS.AES.decrypt({ciphertext: ciphertext}, key, {
      iv: iv,
      mode: CryptoJS.mode.CFB
    });
    console.log ( decrypted.toString(CryptoJS.enc.Utf8));
</script>


Other considerations:
It seems that you want to use a passphrase as a key. Passphrases are usually human readable, but keys are not. You can derive a key from a passphrase with functions such as PBKDF2, bcrypt or scrypt.
The code above is not fully secure, because it lacks authentication. Unauthenticated ciphertexts may lead to viable attacks and unnoticed data manipulation. Usually the an encrypt-then-MAC scheme is employed with a good MAC function such as HMAC-SHA256.
","4429","<javascript><python><encryption><pycrypto><cryptojs>","3","12","2","2017-07-31 19:19:27","","6","1","367878","","2015-06-29 20:04:57","2015-06-22 21:28:55",""
"30990129","Encrypt in python - decrypt in Javascript","I have need to simply encrypt some text in python and being able to decrypt in JavaScrypt.
So far I have in python:
from Crypto import Random
from Crypto.Cipher import AES
import base64

BLOCK_SIZE = 16
key = ""1234567890123456"" # want to be 16 chars
textToEncrypt = ""This is text to encrypt""

def encrypt(message, passphrase):
    # passphrase MUST be 16, 24 or 32 bytes long, how can I do that ?
    IV = Random.new().read(BLOCK_SIZE)
    aes = AES.new(passphrase, AES.MODE_CFB, IV)
    return base64.b64encode(aes.encrypt(message))

def decrypt(encrypted, passphrase):
    IV = Random.new().read(BLOCK_SIZE)
    aes = AES.new(passphrase, AES.MODE_CFB, IV)
    return aes.decrypt(base64.b64decode(encrypted))

print encrypt( textToEncrypt, key )

this is producing text: ZF9as5JII5TlqcB5tAd4sxPuBXd5TrgE
in JavaScript:
<script src=""http://crypto-js.googlecode.com/svn/tags/3.1.2/build/rollups/aes.js""></script>
<script>
    var decrypted = CryptoJS.AES.decrypt( ""ZF9as5JII5TlqcB5tAd4sxPuBXd5TrgE"", ""1234567890123456"");
    console.log ( decrypted.toString( CryptoJS.enc.Utf8 ) );
</script>

however it does not produce original string (empty string instead).
What I am doing wrong ?
Is it focusing on AES is a best idea - I will be happy if I have some kind of encryption that will blur data. 
","(1 Year later but I hope this works for someone)
First of all, thanks Artjom B. your post helps me a lot. And Like OP, I have the same same problem Python server endonding and Javascript client decoding. This was my solution:

Python 3.x (Server)
I used an excplicit PKCS7 encode for padding, why? because I want to be sure Im using the same padding enconding and decoding, this is the link where I found it http://programmerin.blogspot.com.co/2011/08/python-padding-with-pkcs7.html .
Then, like Artjom B. said, be sure about your segment size, IV size and AES mode (CBC for me),
This is the code:
def encrypt_val(clear_text):
    master_key = '1234567890123456' 
    encoder = PKCS7Encoder()
    raw = encoder.encode(clear_text)
    iv = Random.new().read( 16 )
    cipher = AES.new( master_key, AES.MODE_CBC, iv, segment_size=128 )
    return base64.b64encode( iv + cipher.encrypt( raw ) ) 

Note than your are enconding on base64 the concatenation of IV and encryption data.

Javascript (client)
function decryptMsg (data) {
    master_key = '1234567890123456';

    // Decode the base64 data so we can separate iv and crypt text.
    var rawData = atob(data);
    // Split by 16 because my IV size
    var iv = rawData.substring(0, 16);
    var crypttext = rawData.substring(16);

    //Parsers
    crypttext = CryptoJS.enc.Latin1.parse(crypttext);
    iv = CryptoJS.enc.Latin1.parse(iv); 
    key = CryptoJS.enc.Utf8.parse(master_key);

    // Decrypt
    var plaintextArray = CryptoJS.AES.decrypt(
      { ciphertext:  crypttext},
      key,
      {iv: iv, mode: CryptoJS.mode.CBC, padding: CryptoJS.pad.Pkcs7}
    );

    // Can be Utf8 too
    output_plaintext = CryptoJS.enc.Latin1.stringify(plaintextArray);
    console.log(""plain text : "" + output_plaintext);
}

One of my main problem was keep in mind all kind of encoding and decoding data, for example, I didn't know that the master_key on client side was to be parse with Utf8.
","4429","<javascript><python><encryption><pycrypto><cryptojs>","3","6","2","2017-07-31 19:19:27","","6","1","367878","","2015-06-29 20:04:57","2015-06-22 21:28:55",""
"4593793","How to decrypt string data in C++ with Crypto++ where the original string encrypted in Python with pyCrypto","I've just encrypted a data string with pyCrypto easily, but don't know how to decrypt it in crypto++. Anybody can help with a sample decryption code in C++ with crypto++?
Here is my python code:
key = '0123456789abcdef' 
data = ""aaaaaaaaaaaaaaaa"" 
iv = ''.join(chr(random.randint(0, 0xFF)) for i in range(16)) 
encryptor = AES.new(key, AES.MODE_CBC, iv) 
enc = encryptor.encrypt(data)

","This code is from an example from 2005, but it should give you a good starting point:
std::string ciphertext = ""...""; // what Python encryption produces
std::string decryptedtext;

byte key[ CryptoPP::AES::DEFAULT_KEYLENGTH ], iv[ CryptoPP::AES::BLOCKSIZE ];

// populate key and iv with the correct values

CryptoPP::AES::Decryption aesDecryption(key, CryptoPP::AES::DEFAULT_KEYLENGTH);
CryptoPP::CBC_Mode_ExternalCipher::Decryption cbcDecryption( aesDecryption, iv );

CryptoPP::StreamTransformationFilter stfDecryptor(cbcDecryption, new CryptoPP::StringSink( decryptedtext ) );
stfDecryptor.Put( reinterpret_cast<const unsigned char*>( ciphertext.c_str() ), ciphertext.size() );
stfDecryptor.MessageEnd();

// it's all in decryptedText now

","4392","<c++><python><crypto++><pycrypto>","3","1","2","2011-01-04 14:08:55","4594060","0","1","","","","2011-01-04 12:54:20",""
"4593793","How to decrypt string data in C++ with Crypto++ where the original string encrypted in Python with pyCrypto","I've just encrypted a data string with pyCrypto easily, but don't know how to decrypt it in crypto++. Anybody can help with a sample decryption code in C++ with crypto++?
Here is my python code:
key = '0123456789abcdef' 
data = ""aaaaaaaaaaaaaaaa"" 
iv = ''.join(chr(random.randint(0, 0xFF)) for i in range(16)) 
encryptor = AES.new(key, AES.MODE_CBC, iv) 
enc = encryptor.encrypt(data)

","same approach as @Jon, a bit simplified
std::string ciphertext = ""...""; // what Python encryption produces
std::string decryptedtext;

byte key[ CryptoPP::AES::DEFAULT_KEYLENGTH ], iv[ CryptoPP::AES::BLOCKSIZE ];

// populate key and iv with the correct values

CryptoPP::CBC_Mode< CryptoPP::AES >::Decryption decryptor;
decryptor.SetKeyWithIV(key, sizeof(key), iv);


CryptoPP::StringSource(ciphertext, true,
        new CryptoPP::StreamTransformationFilter( decryptor,
            new CryptoPP::StringSink( decryptedtext )
        )
);

The true parameter to CryptoPP::StringSource means ""consume the whole input""
Note that (obviously) you need your C++ decryptor to know the IV you used for encryption. Since you generate a random IV in python, the popular technique is to prepend the IV to the encrypted text.
","4392","<c++><python><crypto++><pycrypto>","3","2","2","2011-01-04 14:08:55","4594060","0","1","","","","2011-01-04 12:54:20",""
"8863423","Python pycrypto module: why simplejson can't dumps encrypted string?","It shows UnicodeError: 'utf8' codec can't decode byte 0x82 in position 0: unexpected code byte
Here is code:
from Crypto.Cipher import AES
import simplejson as json

key = '0123456789abcdef'
mode = AES.MODE_CBC
encryptor = AES.new(key, mode)
text = '1010101010101010'

json.dumps(encryptor.encrypt(text))

How to avoid this error?
Thanks in advance!
","The Cipher usually generates non-printable binary data. It is not possible for json to dump non-printable characters. 
One solution could be to use base64 encoding prior to json dump:
from Crypto.Cipher import AES
import simplejson as json
import base64

key = '0123456789abcdef'
mode = AES.MODE_CBC
encryptor = AES.new(key, mode)
text = '1010101010101010'

json.dumps(base64.encodestring(encryptor.encrypt(text)))

Similarly, before decryption, you'll have to decode base64 as well.
","4360","<python><pycrypto>","3","5","1","2012-01-14 16:17:25","8863480","0","3","","","","2012-01-14 16:08:38",""
"8898628","SHA1 hash differ between openssl and hashlib/pycrypto","Why does the hash from using openssl differ from the ones I get in python?
$ echo ""Lorem ipsum"" | openssl dgst -sha1 -hex
(stdin)= d0c05753484098c61e86f402a2875e68992b5ca3
$ python
>>> from hashlib import sha1
>>> sha(""Lorem ipsum"").hexdigest()
'94912be8b3fb47d4161ea50e5948c6296af6ca05'
>>> from Crypto.Hash import SHA
>>> SHA.new(""Lorem ipsum"").hexdigest()
'94912be8b3fb47d4161ea50e5948c6296af6ca05'

Are the strings not equivalent? am I missing something obvious?
Edit: Thanks for spotting it. Was piping a saved message from a file which also suffer from the same annoying newline issue. 
$ cat message | openssl dgst -sha1 -hex
'keep whacking your head mate, it wont be the same'
$ echo -n $(cat message) | openssl dgst -sha1 -hex
'ok, you got me, for now' 

","echo is putting a newline at the end of the string
>>> sha(""Lorem ipsum\n"").hexdigest()
'd0c05753484098c61e86f402a2875e68992b5ca3'

","4278","<python><openssl><pycrypto><hashlib>","7","6","3","2012-01-17 17:25:00","8898657","1","","1047786","","2012-01-17 17:25:00","2012-01-17 16:59:58",""
"8898628","SHA1 hash differ between openssl and hashlib/pycrypto","Why does the hash from using openssl differ from the ones I get in python?
$ echo ""Lorem ipsum"" | openssl dgst -sha1 -hex
(stdin)= d0c05753484098c61e86f402a2875e68992b5ca3
$ python
>>> from hashlib import sha1
>>> sha(""Lorem ipsum"").hexdigest()
'94912be8b3fb47d4161ea50e5948c6296af6ca05'
>>> from Crypto.Hash import SHA
>>> SHA.new(""Lorem ipsum"").hexdigest()
'94912be8b3fb47d4161ea50e5948c6296af6ca05'

Are the strings not equivalent? am I missing something obvious?
Edit: Thanks for spotting it. Was piping a saved message from a file which also suffer from the same annoying newline issue. 
$ cat message | openssl dgst -sha1 -hex
'keep whacking your head mate, it wont be the same'
$ echo -n $(cat message) | openssl dgst -sha1 -hex
'ok, you got me, for now' 

","You're missing the endline that echo will append by default:
echo ""Lorem ipsum"" | openssl dgst -sha1 -hex
(stdin)= d0c05753484098c61e86f402a2875e68992b5ca3

With the -n parameter, it will echo only the string that you gave it, for expected result:
echo -n ""Lorem ipsum"" | openssl dgst -sha1 -hex
(stdin)= 94912be8b3fb47d4161ea50e5948c6296af6ca05

","4278","<python><openssl><pycrypto><hashlib>","7","24","3","2012-01-17 17:25:00","8898657","1","","1047786","","2012-01-17 17:25:00","2012-01-17 16:59:58",""
"8898628","SHA1 hash differ between openssl and hashlib/pycrypto","Why does the hash from using openssl differ from the ones I get in python?
$ echo ""Lorem ipsum"" | openssl dgst -sha1 -hex
(stdin)= d0c05753484098c61e86f402a2875e68992b5ca3
$ python
>>> from hashlib import sha1
>>> sha(""Lorem ipsum"").hexdigest()
'94912be8b3fb47d4161ea50e5948c6296af6ca05'
>>> from Crypto.Hash import SHA
>>> SHA.new(""Lorem ipsum"").hexdigest()
'94912be8b3fb47d4161ea50e5948c6296af6ca05'

Are the strings not equivalent? am I missing something obvious?
Edit: Thanks for spotting it. Was piping a saved message from a file which also suffer from the same annoying newline issue. 
$ cat message | openssl dgst -sha1 -hex
'keep whacking your head mate, it wont be the same'
$ echo -n $(cat message) | openssl dgst -sha1 -hex
'ok, you got me, for now' 

","echo adds a newline character to the string. The option -n suppresses the tailing newline:
> echo -n ""Lorem ipsum"" | openssl dgst -sha1 -hex
94912be8b3fb47d4161ea50e5948c6296af6ca05

","4278","<python><openssl><pycrypto><hashlib>","7","1","3","2012-01-17 17:25:00","8898657","1","","1047786","","2012-01-17 17:25:00","2012-01-17 16:59:58",""
"21502835","PyCrypto import AES issue","I use AES encryption first time and have that issue, when import AES from Crypto.Cipher
Traceback (most recent call last):
  File ""C:\Users\gek0n\Desktop\wargames\server.py"", line 8, in <module>
    from Crypto.Cipher import AES
  File ""build\bdist.win-amd64\egg\Crypto\Cipher\AES.py"", line 50, in <module>
  File ""build\bdist.win-amd64\egg\Crypto\Cipher\_AES.py"", line 7, in <module>
  File ""build\bdist.win-amd64\egg\Crypto\Cipher\_AES.py"", line 4, in __bootstrap__
  File ""build\bdist.win-amd64\egg\pkg_resources.py"", line 914, in resource_filename
  File ""build\bdist.win-amd64\egg\pkg_resources.py"", line 1601, in get_resource_filename
  File ""build\bdist.win-amd64\egg\pkg_resources.py"", line 1629, in _extract_resource
  File ""build\bdist.win-amd64\egg\pkg_resources.py"", line 990, in get_cache_path
AttributeError: ResourceManager instance has no attribute '_warn_unsafe_extraction'

Someone said, there is a problem with installer, but I used .exe installer for x64 system.
Someone said, he changed _warn_unsafe_extractor to different name and problem was solved, but could not find this file.
Now I have a new error (after reinstalling PyCrypto with PIP)
Traceback (most recent call last):
  File ""C:\Users\gek0n\Desktop\wargames\server.py"", line 8, in <module>
    from Crypto.Cipher import AES
  File ""C:\Python27\lib\site-packages\Crypto\Cipher\AES.py"", line 50, in <module>
    from Crypto.Cipher import _AES
ImportError: DLL load failed: %1 не является приложением Win32.

I don't know, how to solve this, I'll just describe my actions:

pip uninstall pycrypto
pip install pycrypto (with error)
pip install --upgrade pycrypto (with error)
download and start exe for amd64 (link: http://www.voidspace.org.uk/python/modules.shtml)
Try to import - done!

P.S.
Before this actions I try to create the environment using a win32 installation, but it is no help!
","On Windows i reinstalled PyCrypto module ( link ) and all works for me.
","4275","<python><encryption><aes><pycrypto>","4","1","2","2019-04-09 12:55:49","","0","1","589259","","2014-02-02 13:29:50","2014-02-01 19:55:27",""
"21502835","PyCrypto import AES issue","I use AES encryption first time and have that issue, when import AES from Crypto.Cipher
Traceback (most recent call last):
  File ""C:\Users\gek0n\Desktop\wargames\server.py"", line 8, in <module>
    from Crypto.Cipher import AES
  File ""build\bdist.win-amd64\egg\Crypto\Cipher\AES.py"", line 50, in <module>
  File ""build\bdist.win-amd64\egg\Crypto\Cipher\_AES.py"", line 7, in <module>
  File ""build\bdist.win-amd64\egg\Crypto\Cipher\_AES.py"", line 4, in __bootstrap__
  File ""build\bdist.win-amd64\egg\pkg_resources.py"", line 914, in resource_filename
  File ""build\bdist.win-amd64\egg\pkg_resources.py"", line 1601, in get_resource_filename
  File ""build\bdist.win-amd64\egg\pkg_resources.py"", line 1629, in _extract_resource
  File ""build\bdist.win-amd64\egg\pkg_resources.py"", line 990, in get_cache_path
AttributeError: ResourceManager instance has no attribute '_warn_unsafe_extraction'

Someone said, there is a problem with installer, but I used .exe installer for x64 system.
Someone said, he changed _warn_unsafe_extractor to different name and problem was solved, but could not find this file.
Now I have a new error (after reinstalling PyCrypto with PIP)
Traceback (most recent call last):
  File ""C:\Users\gek0n\Desktop\wargames\server.py"", line 8, in <module>
    from Crypto.Cipher import AES
  File ""C:\Python27\lib\site-packages\Crypto\Cipher\AES.py"", line 50, in <module>
    from Crypto.Cipher import _AES
ImportError: DLL load failed: %1 не является приложением Win32.

I don't know, how to solve this, I'll just describe my actions:

pip uninstall pycrypto
pip install pycrypto (with error)
pip install --upgrade pycrypto (with error)
download and start exe for amd64 (link: http://www.voidspace.org.uk/python/modules.shtml)
Try to import - done!

P.S.
Before this actions I try to create the environment using a win32 installation, but it is no help!
","pip uninstall pycrypto
pip install pycrypto (with error)
pip install --upgrade pycrypto (with error)
download and start exe for amd64 (link: http://www.voidspace.org.uk/python/modules.shtml)
Try to import - done!
Didnt work for me cause am using python 3
","4275","<python><encryption><aes><pycrypto>","4","-2","2","2019-04-09 12:55:49","","0","1","589259","","2014-02-02 13:29:50","2014-02-01 19:55:27",""
"35470733","Fatal error when trying to install PyCrypto on OS X El Capitan","I am trying to install PyCrypto on OS X 10.11.3 (El Capitan). I am using Python 3.5.1. I downloaded the gzip file from https://pypi.python.org/pypi/pycrypto and decompressed it. Then I ran python setup.py build like the instructions said and it appeared to do something, then it produced this output:
/usr/bin/clang -fno-strict-aliasing -fno-common -dynamic -isysroot /Developer/SDKs/MacOSX10.6.sdk -arch i386 -arch x86_64 -fwrapv -Wall -Wstrict-prototypes -std=c99 -O3 -fomit-frame-pointer -Isrc/ -I/Library/Frameworks/Python.framework/Versions/2.7/include/python2.7 -c src/MD2.c -o build/temp.macosx-10.6-intel-2.7/src/MD2.o
src/MD2.c:30:10: fatal error: 'string.h' file not found
#include <string.h>
         ^
1 error generated.
error: command '/usr/bin/clang' failed with exit status 1

I tried python3 setup.py build and got some very similar output:
/usr/bin/clang -fno-strict-aliasing -Wsign-compare -Wunreachable-code -fno-common -dynamic -fwrapv -Wall -Wstrict-prototypes -arch i386 -arch x86_64 -isysroot /Developer/SDKs/MacOSX10.6.sdk -std=c99 -O3 -fomit-frame-pointer -Isrc/ -I/Library/Frameworks/Python.framework/Versions/3.5/include/python3.5m -c src/MD2.c -o build/temp.macosx-10.6-intel-3.5/src/MD2.o
src/MD2.c:30:10: fatal error: 'string.h' file not found
#include <string.h>
         ^
1 error generated.
error: command '/usr/bin/clang' failed with exit status 1

I tried Googling to figure out what to do, but I couldn't find anything useful. How can I install PyCrypto?
EDIT: I also tried several other things like pip install pycrypto and sudo pip3 install pycrypto and they didn't work. @l'L'l helped me get it to work by doing several strange, complex things that I never would have though have myself. They are summarized in the answer below.
","Overview:
The manual build you're trying looks like it might be failing because it's referencing the OS X 10.6 SDK, which you likely don't have, and is outdated for the most part. Also, SDKs are now stored in a completely different location than when the 10.6 SDK was in it's prime.
New SDKs location:
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/

Old SDKs location:
/Developer/SDKs/

Non-existent / outdated SDK:
Since it appears that when trying to build PyCrypto it's referencing the MacOSX10.6.sdk there are several things to consider:

Why does it reference an outdated SDK
Where is the SDK it's referencing set
What should be done to correct the issue

Unless we audit the source code carefully we might not know exactly where the incorrect flags are set, but we can do our best to work with the information we have. From the error we can see that there are several instances where the 10.6 SDK's name pops up:
/usr/bin/clang -fno-strict-aliasing -fno-common -dynamic -isysroot /Developer/SDKs/MacOSX10.6.sdk -arch i386 -arch x86_64 -fwrapv -Wall -Wstrict-prototypes -std=c99 -O3 -fomit-frame-pointer -Isrc/ -I/Library

Building from source:
/Frameworks/Python.framework/Versions/2.7/include/python2.7 -c src/MD2.c -o build/temp.macosx-10.6-intel-2.7/src/MD2.o
src/MD2.c:30:10: fatal error: 'string.h' file not found
#include <string.h>
                 ^
1 error generated.
error: command '/usr/bin/clang' failed with exit status 1

Analyzing this we can see that the PyCrypto's MD2.c file is trying to be built using the flag -isysroot /Developer/SDKs/MacOSX10.6.sdk. It might be worth trying pip instead:
Installing with pip:
...
fatal error: 'string.h' file not found #include <string.h>
...

Same error; we should probably find out if the <string.h> header even exists on the system — Let's make a quick test C application to find out:
Testing the C headers:
$ echo ""#include <string.h>
#include <stdio.h>
int main() { printf(\""TEST\n\""); return 0; }"" > t.c
$ clang t.c -o t
$ ./t
TEST

It's apparent the header does exist because the test worked fine. This tells us that the problem is more likely related directly to the 10.6 SDK (which doesn't seem to exist on the system). 
Symlinking (non-existing) 10.6 SDK to 10.11 SDK:
Since we haven't determined where the SDK is actually getting set we'll go ahead and try to create symlinks so that any reference of the old 10.6 SDK links to the latest SDK (10.11 at this time):
$ cd /Developer/SDKs
$ sudo ln -s /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk MacOSX10.6.sdk

We can verify the symlink by issuing the following command: 
$ ls -lat
total 8
drwxr-xr-x  3 root  wheel  102 Feb 21 15:54 .
lrwxr-xr-x  1 root  wheel   99 Feb 21 15:54 MacOSX10.6.sdk -> /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk
drwxr-xr-x  3 root  wheel  102 Feb 21 15:52 ..

Now that we've successfully created the symlink let's try installing PyCrypto with pip once more:
$ sudo pip install pycrypto
Collecting pycrypto
  Downloading pycrypto-2.6.1.tar.gz (446kB)
    100% |████████████████████████████████| 446kB 1.2GB/s 
Installing collected packages: pycrypto
  Running setup.py install for pycrypto ... done
Successfully installed pycrypto-2.6.1


No errors! It looks like our problem is solved! Well, almost...

We still need to figure out what is responsible for setting the wrong (10.6) SDK during builds. Let's use the xcrun tool to see what the defaults are set at:
$ xcrun --show-sdk-version
10.11

The system default SDK is set to 10.11, so it must be get set incorrectly to 10.6 by Python, PyCrypto, or some other anomaly we might not have considered. 
UPDATE:
After doing some recon it was discovered that Python 3 appears to be built with the OS X 10.6 SDK. In addition it's also setting the SDK to 10.6 and setting the (outdated) path in numerous places throughout the Python_Framework. There are so many references I won't bother listing them all, although here's an example:
Python_Framework Folder/Versions/3.5/lib/python3.5/config-3.5m/Makefile:79:CONFIGURE_CFLAGS= -arch i386 -arch x86_64 -isysroot /Developer/SDKs/MacOSX10.6.sdk

I can only assume the developers were trying to be as backward compatible as possible, however, it's unfortunately breaking forward compatibility in the process.

Notes: 
Installing Python packages with pip can make life much easier in a lot of ways (package management, updating, uninstalling, etc.). For example installing PyCrypto should just be a matter of issuing the command:
$ sudo pip install pycrypto

If you have multiple Python's you can use the version number to install for that Python accordingly:
$ sudo pip3.5 install pycrypto

↳ https://pip.pypa.io/en/stable/installing/
","4151","<python><macos><python-3.x><osx-elcapitan><pycrypto>","7","7","2","2016-04-30 02:29:20","35533739","22","","28324","","2016-02-22 17:53:55","2016-02-18 00:48:25",""
"35470733","Fatal error when trying to install PyCrypto on OS X El Capitan","I am trying to install PyCrypto on OS X 10.11.3 (El Capitan). I am using Python 3.5.1. I downloaded the gzip file from https://pypi.python.org/pypi/pycrypto and decompressed it. Then I ran python setup.py build like the instructions said and it appeared to do something, then it produced this output:
/usr/bin/clang -fno-strict-aliasing -fno-common -dynamic -isysroot /Developer/SDKs/MacOSX10.6.sdk -arch i386 -arch x86_64 -fwrapv -Wall -Wstrict-prototypes -std=c99 -O3 -fomit-frame-pointer -Isrc/ -I/Library/Frameworks/Python.framework/Versions/2.7/include/python2.7 -c src/MD2.c -o build/temp.macosx-10.6-intel-2.7/src/MD2.o
src/MD2.c:30:10: fatal error: 'string.h' file not found
#include <string.h>
         ^
1 error generated.
error: command '/usr/bin/clang' failed with exit status 1

I tried python3 setup.py build and got some very similar output:
/usr/bin/clang -fno-strict-aliasing -Wsign-compare -Wunreachable-code -fno-common -dynamic -fwrapv -Wall -Wstrict-prototypes -arch i386 -arch x86_64 -isysroot /Developer/SDKs/MacOSX10.6.sdk -std=c99 -O3 -fomit-frame-pointer -Isrc/ -I/Library/Frameworks/Python.framework/Versions/3.5/include/python3.5m -c src/MD2.c -o build/temp.macosx-10.6-intel-3.5/src/MD2.o
src/MD2.c:30:10: fatal error: 'string.h' file not found
#include <string.h>
         ^
1 error generated.
error: command '/usr/bin/clang' failed with exit status 1

I tried Googling to figure out what to do, but I couldn't find anything useful. How can I install PyCrypto?
EDIT: I also tried several other things like pip install pycrypto and sudo pip3 install pycrypto and they didn't work. @l'L'l helped me get it to work by doing several strange, complex things that I never would have though have myself. They are summarized in the answer below.
","I had what might be a related issue on OSX El Capitan when I would run pip install pycrypto. I was seeing RuntimeError: autoconf error.  All I had to do was run sudo xcodebuild -license and type agree after reviewing the licence agreement.  Afterward I was able to use pip to install pycrypto.
","4151","<python><macos><python-3.x><osx-elcapitan><pycrypto>","7","1","2","2016-04-30 02:29:20","35533739","22","","28324","","2016-02-22 17:53:55","2016-02-18 00:48:25",""
"36724566","Import error: No module named 'Crypto' on Mac (Pycrypto is up-to-date)","Pycrypto has been installed properly (At least to my knowledge. Everything is up to date and I have tried uninstalling and reinstalling with pip). I'm not sure what the issues are here but this code works on others' computers so it has to be something with my configuration specifically. Any help would be greatly appreciated! 
Traceback (most recent call last):
  File ""manage.py"", line 10, in <module>
    execute_from_command_line(sys.argv)
  File ""/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/site-packages/django/core/management/__init__.py"", line 350, in execute_from_command_line
    utility.execute()
  File ""/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/site-packages/django/core/management/__init__.py"", line 342, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File ""/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/site-packages/django/core/management/base.py"", line 348, in run_from_argv
    self.execute(*args, **cmd_options)
  File ""/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/site-packages/django/core/management/base.py"", line 398, in execute
    self.check()
  File ""/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/site-packages/django/core/management/base.py"", line 426, in check
    include_deployment_checks=include_deployment_checks,
  File ""/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/site-packages/django/core/checks/registry.py"", line 75, in run_checks
    new_errors = check(app_configs=app_configs)
  File ""/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/site-packages/django/core/checks/urls.py"", line 10, in check_url_config
    return check_resolver(resolver)
  File ""/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/site-packages/django/core/checks/urls.py"", line 19, in check_resolver
    for pattern in resolver.url_patterns:
  File ""/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/site-packages/django/utils/functional.py"", line 33, in __get__
    res = instance.__dict__[self.name] = self.func(instance)
  File ""/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/site-packages/django/core/urlresolvers.py"", line 417, in url_patterns
    patterns = getattr(self.urlconf_module, ""urlpatterns"", self.urlconf_module)
  File ""/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/site-packages/django/utils/functional.py"", line 33, in __get__
    res = instance.__dict__[self.name] = self.func(instance)
  File ""/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/site-packages/django/core/urlresolvers.py"", line 410, in urlconf_module
    return import_module(self.urlconf_name)
  File ""/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/importlib/__init__.py"", line 109, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File ""<frozen importlib._bootstrap>"", line 2254, in _gcd_import
  File ""<frozen importlib._bootstrap>"", line 2237, in _find_and_load
  File ""<frozen importlib._bootstrap>"", line 2226, in _find_and_load_unlocked
  File ""<frozen importlib._bootstrap>"", line 1200, in _load_unlocked
  File ""<frozen importlib._bootstrap>"", line 1129, in _exec
  File ""<frozen importlib._bootstrap>"", line 1471, in exec_module
  File ""<frozen importlib._bootstrap>"", line 321, in _call_with_frames_removed
  File ""/Users/samantha/Documents/3rdyrdoe/semester2doe/cs3240-f16-team14/mysite/urls.py"", line 25, in <module>
    url(r'^myapplication/', include('myapplication.urls', namespace='myapplication')),
  File ""/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/site-packages/django/conf/urls/__init__.py"", line 52, in include
    urlconf_module = import_module(urlconf_module)
  File ""/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/importlib/__init__.py"", line 109, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File ""<frozen importlib._bootstrap>"", line 2254, in _gcd_import
  File ""<frozen importlib._bootstrap>"", line 2237, in _find_and_load
  File ""<frozen importlib._bootstrap>"", line 2226, in _find_and_load_unlocked
  File ""<frozen importlib._bootstrap>"", line 1200, in _load_unlocked
  File ""<frozen importlib._bootstrap>"", line 1129, in _exec
  File ""<frozen importlib._bootstrap>"", line 1471, in exec_module
  File ""<frozen importlib._bootstrap>"", line 321, in _call_with_frames_removed
  File ""/Users/samantha/Documents/3rdyrdoe/semester2doe/cs3240-f16-team14/myapplication/urls.py"", line 2, in <module>
    from myapplication import views
  File ""/Users/samantha/Documents/3rdyrdoe/semester2doe/cs3240-f16-team14/myapplication/views.py"", line 9, in <module>
    from Crypto import Random
ImportError: No module named 'Crypto'

","You can use pip list command to check if there is a module named crypto inside your package, if not try easy_install Crypto to install instead of pip. 
","4127","<python><django><pycrypto>","3","1","2","2016-11-09 14:34:49","","2","","","","","2016-04-19 16:45:54",""
"36724566","Import error: No module named 'Crypto' on Mac (Pycrypto is up-to-date)","Pycrypto has been installed properly (At least to my knowledge. Everything is up to date and I have tried uninstalling and reinstalling with pip). I'm not sure what the issues are here but this code works on others' computers so it has to be something with my configuration specifically. Any help would be greatly appreciated! 
Traceback (most recent call last):
  File ""manage.py"", line 10, in <module>
    execute_from_command_line(sys.argv)
  File ""/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/site-packages/django/core/management/__init__.py"", line 350, in execute_from_command_line
    utility.execute()
  File ""/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/site-packages/django/core/management/__init__.py"", line 342, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File ""/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/site-packages/django/core/management/base.py"", line 348, in run_from_argv
    self.execute(*args, **cmd_options)
  File ""/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/site-packages/django/core/management/base.py"", line 398, in execute
    self.check()
  File ""/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/site-packages/django/core/management/base.py"", line 426, in check
    include_deployment_checks=include_deployment_checks,
  File ""/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/site-packages/django/core/checks/registry.py"", line 75, in run_checks
    new_errors = check(app_configs=app_configs)
  File ""/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/site-packages/django/core/checks/urls.py"", line 10, in check_url_config
    return check_resolver(resolver)
  File ""/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/site-packages/django/core/checks/urls.py"", line 19, in check_resolver
    for pattern in resolver.url_patterns:
  File ""/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/site-packages/django/utils/functional.py"", line 33, in __get__
    res = instance.__dict__[self.name] = self.func(instance)
  File ""/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/site-packages/django/core/urlresolvers.py"", line 417, in url_patterns
    patterns = getattr(self.urlconf_module, ""urlpatterns"", self.urlconf_module)
  File ""/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/site-packages/django/utils/functional.py"", line 33, in __get__
    res = instance.__dict__[self.name] = self.func(instance)
  File ""/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/site-packages/django/core/urlresolvers.py"", line 410, in urlconf_module
    return import_module(self.urlconf_name)
  File ""/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/importlib/__init__.py"", line 109, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File ""<frozen importlib._bootstrap>"", line 2254, in _gcd_import
  File ""<frozen importlib._bootstrap>"", line 2237, in _find_and_load
  File ""<frozen importlib._bootstrap>"", line 2226, in _find_and_load_unlocked
  File ""<frozen importlib._bootstrap>"", line 1200, in _load_unlocked
  File ""<frozen importlib._bootstrap>"", line 1129, in _exec
  File ""<frozen importlib._bootstrap>"", line 1471, in exec_module
  File ""<frozen importlib._bootstrap>"", line 321, in _call_with_frames_removed
  File ""/Users/samantha/Documents/3rdyrdoe/semester2doe/cs3240-f16-team14/mysite/urls.py"", line 25, in <module>
    url(r'^myapplication/', include('myapplication.urls', namespace='myapplication')),
  File ""/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/site-packages/django/conf/urls/__init__.py"", line 52, in include
    urlconf_module = import_module(urlconf_module)
  File ""/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/importlib/__init__.py"", line 109, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File ""<frozen importlib._bootstrap>"", line 2254, in _gcd_import
  File ""<frozen importlib._bootstrap>"", line 2237, in _find_and_load
  File ""<frozen importlib._bootstrap>"", line 2226, in _find_and_load_unlocked
  File ""<frozen importlib._bootstrap>"", line 1200, in _load_unlocked
  File ""<frozen importlib._bootstrap>"", line 1129, in _exec
  File ""<frozen importlib._bootstrap>"", line 1471, in exec_module
  File ""<frozen importlib._bootstrap>"", line 321, in _call_with_frames_removed
  File ""/Users/samantha/Documents/3rdyrdoe/semester2doe/cs3240-f16-team14/myapplication/urls.py"", line 2, in <module>
    from myapplication import views
  File ""/Users/samantha/Documents/3rdyrdoe/semester2doe/cs3240-f16-team14/myapplication/views.py"", line 9, in <module>
    from Crypto import Random
ImportError: No module named 'Crypto'

","There is a module named ""crypto"" that is causing the problem. At least for me, in Mac OS. There are two package names ""crypto"" and ""Crypto"" which causes this conflict.
Since you are using Python 3.4, try running the following commands to uninstall:
sudo pip3 uninstall crypto
sudo pip3 uninstall pycrypto

Then install the pycrypto module again using:
sudo pip3 install pycrypto

This should solve the issue.
","4127","<python><django><pycrypto>","3","7","2","2016-11-09 14:34:49","","2","","","","","2016-04-19 16:45:54",""
"33443364","How can I construct a Python string that is 16 bytes long?","When I make a Python string of one character, i.e.
txt = ""h""

and I check its size, I get
import sys
sys.getsizeof(txt)
34

If one character is 34 bytes, how do I make a String of 16 byes?
P.S. I'm playing around with PyCrypto AES, in OFB Mode, which required input of 16 bytes
","getsizeof does not return the actual size of the string but it accounts for additional garbage collector overhead.
As shown bellow test starts as an empty string but memory allocated for it is not zero due to reasons listed above.
>>> test = """"
>>> sys.getsizeof(test)
37
>>> test = """" + ""h""
>>> sys.getsizeof(test)
38
>>> test = """" + ""h"" + ""h""
>>> sys.getsizeof(test)
39
>>>

To create a 16 bytes string, one way would be:
>>> test = "" "" * 16
>>> sys.getsizeof(test)
53

53 - 37 = 16 bytes
","4058","<python><string><byte><pycrypto>","0","1","2","2015-10-30 20:08:57","33443811","3","","","","","2015-10-30 19:16:19",""
"33443364","How can I construct a Python string that is 16 bytes long?","When I make a Python string of one character, i.e.
txt = ""h""

and I check its size, I get
import sys
sys.getsizeof(txt)
34

If one character is 34 bytes, how do I make a String of 16 byes?
P.S. I'm playing around with PyCrypto AES, in OFB Mode, which required input of 16 bytes
","sys.getsizeof(obj) returns the size of the object including internal values. This contains more than the characters or bytes of a string.
If you want to know how long a bytes object or a str is, then you can call len(byteString) or len(string).
I'm assuming that you want to use generate a random IV or key. This can be done in this way:
from Crypto import Random
iv = Random.new().read(16)

This invokes a CSPRNG if the system has enough entropy. You can also use AES.block_size instead of 16.
","4058","<python><string><byte><pycrypto>","0","2","2","2015-10-30 20:08:57","33443811","3","","","","","2015-10-30 19:16:19",""
"24514571","Difficult to install python ssh library on windows (ssh has been replaced with ""paramiko"")","I'm going to place both my question and answer here, since I had a very difficult time figuring it out. (Also I started out trying to install the ""ssh"" library, but it has been superceded by the ""paramiko"" library of the same function.  I may have missed a replacement here, please forgive if I have.)
Question:  I need to install the ""paramiko"" library on a windows 7 system. 
Pip and easy_install both give errors when trying to install the ""Crypto"" module. 
I headed down a number of blind alleys involving Visual C and Visual Studio without success.  
Answer:(in two parts)
1) Install the crypto library from a binary, like from here:
http://www.voidspace.org.uk/python/modules.shtml#pycrypto

This installs the crypto library, but with a different capitalization than the paramiko library expects.  So I learned a little trick over here: 
http://stackoverflow.com/questions/19623267/importerror-no-module-named-crypto-cipher with the answer by user ""pho""  to add these lines to the python program:
import crypto
import sys
sys.modules['Crypto'] = crypto

Now I am able to install, and run, the paramiko library.  I hope this helps others find the solution more quickly.
","Answer:(in two parts)
1) Install the crypto library from a binary, like from here:
http://www.voidspace.org.uk/python/modules.shtml#pycrypto
note: the ""paramiko"" library has replaced ""ssh""  so this answer reflects that
This installs the crypto library, but with a different capitalization than the paramiko library expects.  So I learned a little trick over here:
http://stackoverflow.com/questions/19623267/importerror-no-module-named-crypto-cipher

with the answer by user ""pho""  to add these lines to the python program:
import crypto
import sys
sys.modules['Crypto'] = crypto

Now I am able to install, and run, the paramiko library.  I hope this helps others find the solution more quickly.
That was a good start.  My next stopper was figuring out how to get the correct keys.  If you are like me, you use putty and it's keygen utility for key management. And it works great!  But it keeps it's private keys in a file different that what paramiko expects.  But puttygen also provides a solution to this.
Open your *.ppk file in puttygen.
To to Conversions->Export OpenSSH Key
Save your private key as id_rsa  (in .ssh directory, of course). (I am not sure the default name is required.  Feel free to try something else and add a comment.)
Now paramiko will be able to automatically find it.
And here is my Resulting Script.
import sys
import crypto
sys.modules['Crypto'] = crypto
import paramiko

knownHosts  = 'C:/Users/Skip Huffman/.ssh/known_hosts'
keyFileName     = 'C:/Users/Skip Huffman/.ssh/id_rsa'
hostName    = ""mcsremotetest1.cnn.vgtf.net""
userName    = ""<username matching keypair>""

client = paramiko.SSHClient()
client.load_system_host_keys(knownHosts)
client.connect(hostName, username=userName)
stdin, stdout, stderr = client.exec_command('ls')
print ""Standard Error: "", stderr.readlines()
print ""Standard Output: "", stdout.readlines()

With a proper matching keypair this should now just work. It does for me.  (substitute the proper username of course.)
","3998","<python><ssh><pycrypto>","1","2","1","2014-07-01 18:49:38","24514582","2","","662525","","2014-07-01 18:49:38","2014-07-01 15:52:49",""
"40004858","Encrypt in python and decrypt in Java with AES-CFB","I am aware of a question very similar to this (How do I encrypt in Python and decrypt in Java?) but I have a different problem.
My problem is, I am not able to decrypt in Java correctly. Despite using the correct key and IV, I still get garbage characters after decryption. I don't have any compile/run-time errors or exceptions in Java so I believe I am using the right parameters for decryption.
Python Encryption Code - 
from Crypto.Cipher import AES
import base64
key = '0123456789012345'
iv = 'RandomInitVector'
raw = 'samplePlainText'
cipher = AES.new(key,AES.MODE_CFB,iv)
encrypted = base64.b64encode(iv + cipher.encrypt(raw))

Java Decryption Code - 
private static String KEY = ""0123456789012345"";
public static String decrypt(String encrypted_encoded_string) throws NoSuchAlgorithmException, NoSuchPaddingException,
    InvalidKeyException, IllegalBlockSizeException, BadPaddingException {

      String plain_text = """";
      try{
          byte[] encrypted_decoded_bytes = Base64.getDecoder().decode(encrypted_encoded_string);
          String encrypted_decoded_string = new String(encrypted_decoded_bytes);
          String iv_string = encrypted_decoded_string.substring(0,16); //IV is retrieved correctly.

          IvParameterSpec iv = new IvParameterSpec(iv_string.getBytes());
          SecretKeySpec skeySpec = new SecretKeySpec(KEY.getBytes(""UTF-8""), ""AES"");

          Cipher cipher = Cipher.getInstance(""AES/CFB/NoPadding"");
          cipher.init(Cipher.DECRYPT_MODE, skeySpec, iv);

          plain_text = new String(cipher.doFinal(encrypted_decoded_bytes));//Returns garbage characters
          return plain_text;

      }  catch (Exception e) {
            System.err.println(""Caught Exception: "" + e.getMessage());
      }

      return plain_text;
 }

Is there anything obvious that I am missing?
","The Cipher Feedback (CFB) mode of operation is a family of modes. It is parametrized by the segment size (or register size). PyCrypto has a default segment size of 8 bit and Java (actually OpenJDK) has a default segment size the same as the block size (128 bit for AES).
If you want CFB-128 in pycrypto, you can use AES.new(key, AES.MODE_CFB, iv, segment_size=128). If you want CFB-8 in Java, you can use Cipher.getInstance(""AES/CFB8/NoPadding"");.

Now that we have that out the way, you have other problems:

Always specify the character set you're using, because it can change between different JVMs: new String(someBytes, ""UTF-8"") and someString.getBytes(""UTF-8""). When you do, be consistent.
Never use a String to store binary data (new String(encrypted_decoded_bytes);). You can copy the bytes directly: IvParameterSpec iv = new IvParameterSpec(Arrays.copyOf(encrypted_decoded_bytes, 16)); and cipher.doFinal(Arrays.copyOfRange(encrypted_decoded_bytes, 16, encrypted_decoded_bytes.length)).
In Java, you're assuming that the IV is written in front of the ciphertext and then encoded together, but in Python, you're never doing anything with the IV. I guess you posted incomplete code.
It is crucial for CFB mode to use a different IV every time if the key stays the same. If you don't change the IV for every encryption, you will create a multi-time pad which enables an attacker to deduce the plaintext even without knowing the key.

","3967","<java><python><encryption><pycrypto><cfb-mode>","4","5","1","2016-10-31 23:33:26","40006920","4","5","-1","","2017-05-23 11:48:19","2016-10-12 17:32:01",""
"35683598","Decrypting Large files with RSA in pycrypto?","I have been using pycrypto module for encryption and decryption with RSA key pair and algorithm. The problem is when I try encrypting large files (10kB of text file) I take the block size of 32 byte when reading the file and encrypting it
>>> f = open('10kb','rb')
>>> p = open('enc','wb')
>>> while True:
       data = f.read(32)
       if not data:
           break
       enc_data = public_key.encrypt(data,32)
       p.write(enc_data[0])
    p.close()
    f.close()

It gives the output:
128
128
.......and the many 128 blocks it is writing

When I try to decrypt the encrypted file, I need to read it with 128 byte block so as to give back 32 byte blocks,
>>> f = open('enc','rb')
>>> p = open('dec','wb')
>>> while True:
       data = f.read(128)
       if not data:
           break
       dec_data = private_key.decrypt(data)
       p.write(dec_data)
    p.close()
    f.close()

It is giving the output:
32
32
.....so many 32 byte blocks it is decrypting, then
128
128
128
128
Traceback (most recent call last):
  File ""<pyshell#251>"", line 5, in <module>
     enc_data = private_key.decrypt(data)
  File ""/usr/lib/python3/dist-packages/Crypto/PublicKey/RSA.py"", line 174,   in decrypt
     return pubkey.pubkey.decrypt(self, ciphertext)
  File ""/usr/lib/python3/dist-packages/Crypto/PublicKey/pubkey.py"", line 93, in decrypt
      plaintext=self._decrypt(ciphertext)
  File ""/usr/lib/python3/dist-packages/Crypto/PublicKey/RSA.py"", line 237, in _decrypt
      cp = self.key._blind(ciphertext, r)
  ValueError: Message too large

To the point where it is outputting the block size of 32, it is decrypting right, but where it starts with 128, its messing up. Why it is saying Message size too large ? Is there any better and fast way to decrypt large text files using pycrypto module ?
","Partial answer coming along ...

RSA works on numbers. You only get bytes out of it when you serialize those long integers. Since those numbers don't have a fixed size, they are serialized with as much bytes as are necessary, but not more.
An RSA encryption c = me mod n can result in ciphertexts, which are so much smaller than n, that not all the bytes are filled, because leading zeros of the the number don't have to be serialized. 
Sometimes (depending on modulus and plaintext) it may happen that you're writing a 127 byte chunk instead of a 128 byte chunk during encryption, but you're always reading a 128 byte chunk during decryption. That means, you're taking away one byte from the next chunk. When the alignment breaks, you can run into various random behaviors such as a chunk being larger than the modulus and therefore not a valid ciphertext.
There are two ways to solve that:

Always write the length of the ciphertext chunk before it.
Encryption:
data = f.read(readsize)
if not data:
    break
i += 1
enc_data = public_key.encrypt(data, 32)[0]

p.write(chr(len(enc_data)))
p.write(enc_data)

Decryption:
length = f.read(1)
if not length:
    break
data = f.read(ord(length))
print(length, len(data))
j += 1
dec_data = private_key.decrypt(data)
p.write(dec_data[:readsize])

At the end you have to reduce the ciphertext to the original plaintext size, because you're working without PKCS#1 v1.5 padding or OAEP.
Pad the zero bytes that are missing during encryption.
Encryption:
data = f.read(readsize)
if not data:
    break
i += 1
enc_data = public_key.encrypt(data, 32)[0]

while len(enc_data) < writesize:
    enc_data = ""\x00"" + enc_data
p.write(enc_data)

Decryption:
data = f.read(writesize)
if not data:
    break
j += 1
dec_data = private_key.decrypt(data)
p.write(dec_data[:readsize])


Note that readsize = 127 and writesize = 128. Here are the full source codes for both variants.

Now, this is a partial answer, because this still leads to corrupt files, which are also too short, but at least it fixes the OP's error.
","3964","<python><encryption><rsa><python-3.4><pycrypto>","3","2","1","2016-02-28 18:55:56","35686847","11","2","5612751","","2016-02-28 16:14:05","2016-02-28 14:17:08",""
"39074253","Extract Publickey from Privatekey input using Python","I need to generate publickey from a private key without temporary location locally like we do in sshgen.So i use this.Here iam passing my private key as input like this(while executing):
python codekey.py ""-----BEGIN RSA PRIVATE KEY-----\nMIhhhhhhhhhhhhhhhh......Bidqt/YS3/0giWrtv+rMkJtv8n\nmirJ+16SZodI5gMuknvZG....................n-----END RSA PRIVATE KEY-----""

My code (codekey.py): 
import sys
import io
from twisted.conch.ssh import keys
k = sys.argv[1]
rsa = keys.RSA.importKey(k)
key = keys.Key(rsa)
ssh_public = key.public().toString(""openssh"")
print ssh_public

error:
      Traceback (most recent call last):
    File ""codekey.py"", line 7, in <module>
     rsa = keys.RSA.importKey(k)
    File ""/usr/lib/python2.7/dist-packages/Crypto/PublicKey/RSA.py"", line                638, in importKey
     if lines[1].startswith(b('Proc-Type:4,ENCRYPTED')):
       IndexError: list index out of range

Dyanamically i need to pass key value as shown above while executing my python script and from that it will generate public key .Whether it is possible ??,i dont need to store locally,since for priveleges and key securities,dont want to hack.
","Here's how you can do it :
If you already have the private key you can basically make a private key object with it and then simply extract the public key from it using as :
public_key = private_key.publickey().exportKey('PEM')

assuming that private_key is your private key object. 
In case you do not have this object, one way of obtaining it from the PEM encoded (PKCS#1) private key file (as you have given in your question above) would be like this :
from Crypto.PublicKey import RSA
from base64 import b64decode
pem_key = b'your private key in PEM'
key = b64decode(pem_key)
keyPriv = RSA.importKey(key)
# key now has all the components of the private 
print keyPriv.keydata
modulusN = keyPriv.n
pubExpE = keyPriv.e
priExpD = keyPriv.d
primeP = keyPriv.p
primeQ = keyPriv.q
private_key = RSA.construct((modulusN, pubExpE, priExpD, primeP, primeQ))

and then once you have the private key in the private_key objectdo the :
public_key = private_key.publickey().exportKey('PEM')

","3912","<python><rsa><ssh-keys><pycrypto><twisted.conch>","1","2","1","2017-06-24 19:45:54","","2","","6738843","","2016-08-22 14:39:59","2016-08-22 08:07:58",""
"11629785","Why is AES.decrypt not returning my original text?","I'm trying to use AES to safely store some passwords in a home-made password safe, but for some reason I'm not getting the original data back from AES.decrypt. Here is the code I'm testing with:
from Crypto.Cipher import AES
from Crypto.Hash import SHA256

def sha1(text):
    s = SHA256.new()
    s.update(text)
    return s.hexdigest()

aes = AES.new('JG9A90cqiveJ8K7n', AES.MODE_CFB, 'g4vhFIR1KncRIyvO')

text = 'This is some text that will be encrypted'
encrypted_text = aes.encrypt(text)
decrypted_text = aes.decrypt(encrypted_text)

print 'Original:\t' + sha1(text)
print 'Encrypted:\t' + sha1(encrypted_text)
print 'Decrypted:\t' + sha1(decrypted_text)

It's output:
Original:   099e17130a9c796c8b7f21f269a790e877c7f49b6a39deda33d4e7b63b80c049
Encrypted:  71006ff5dc695a32c020dbb27c45b4861ec10a76e40d349bf078bca56b57d5bb
Decrypted:  2683455f4ae01e3cd1cba6c2537712fee8783621f32c865b8d4526130ff0096d
I'm using the cypher feedback mode because I want to be able to encrypt and decrypt strings of any length, plus it won't bother me that it works on a byte-by-byte basis since I'm only planning on encrypting small strings.
What am I doing wrong here?
","Not sure why, but this works:
key = b""JG9A90cqiveJ8K7n""
mode = AES.MODE_CFB
iv = b""g4vhFIR1KncRIyvO""

text = 'This is some text that will be encrypted'

aes_enc = AES.new(key, mode, iv)
enc = aes_enc.encrypt(text)

aes_dec = AES.new(key, mode)
dec = aes_dec.decrypt(iv + enc)

assert text == dec[16:]

I'd have to look up the details of the iv and padding, too :)
Edit:
See http://packages.python.org/pycrypto/Crypto.Cipher.blockalgo-module.html#MODE_CFB
","3864","<python><aes><pycrypto>","3","0","2","2012-07-24 11:42:02","11630115","1","1","388916","","2012-07-24 11:30:12","2012-07-24 11:21:38",""
"11629785","Why is AES.decrypt not returning my original text?","I'm trying to use AES to safely store some passwords in a home-made password safe, but for some reason I'm not getting the original data back from AES.decrypt. Here is the code I'm testing with:
from Crypto.Cipher import AES
from Crypto.Hash import SHA256

def sha1(text):
    s = SHA256.new()
    s.update(text)
    return s.hexdigest()

aes = AES.new('JG9A90cqiveJ8K7n', AES.MODE_CFB, 'g4vhFIR1KncRIyvO')

text = 'This is some text that will be encrypted'
encrypted_text = aes.encrypt(text)
decrypted_text = aes.decrypt(encrypted_text)

print 'Original:\t' + sha1(text)
print 'Encrypted:\t' + sha1(encrypted_text)
print 'Decrypted:\t' + sha1(decrypted_text)

It's output:
Original:   099e17130a9c796c8b7f21f269a790e877c7f49b6a39deda33d4e7b63b80c049
Encrypted:  71006ff5dc695a32c020dbb27c45b4861ec10a76e40d349bf078bca56b57d5bb
Decrypted:  2683455f4ae01e3cd1cba6c2537712fee8783621f32c865b8d4526130ff0096d
I'm using the cypher feedback mode because I want to be able to encrypt and decrypt strings of any length, plus it won't bother me that it works on a byte-by-byte basis since I'm only planning on encrypting small strings.
What am I doing wrong here?
","Because you are using the same aes object for encryption and decryption. After the encrypt the initial value has changed. So you are not using the same initial value for decrypting. The following does work (redeclaring aes):
from Crypto.Cipher import AES
from Crypto.Hash import SHA256

def sha1(text):
    s = SHA256.new()
    s.update(text)
    return s.hexdigest()

aes = AES.new('JG9A90cqiveJ8K7n', AES.MODE_CFB, 'g4vhFIR1KncRIyvO')

text = 'This is some text that will be encrypted'
encrypted_text = aes.encrypt(text)

aes = AES.new('JG9A90cqiveJ8K7n', AES.MODE_CFB, 'g4vhFIR1KncRIyvO')
decrypted_text = aes.decrypt(encrypted_text)

print 'Original:\t' + sha1(text)
print 'Encrypted:\t' + sha1(encrypted_text)
print 'Decrypted:\t' + sha1(decrypted_text)

","3864","<python><aes><pycrypto>","3","8","2","2012-07-24 11:42:02","11630115","1","1","388916","","2012-07-24 11:30:12","2012-07-24 11:21:38",""
"9742113","Include nonce and block count in PyCrypto AES MODE_CTR","Some background information, you can skip this part for the actual question
this is my third question about this topic here at stackoverflow. To be complete, these are the other questions AES with crypt-js and PyCrypto and Match AES de/encryption in python and javascript. Unfortunately my last attempt got two downvots for the original question. The problem was, even I did not know what my real question was. I just dug around to find the real question I was looking for. With the feedback in the comments, and reading some additional information, I updated my question. I excavate the right question, I think. But my problem didn't get any more views after my updates. So I really hope, that this question is now more clear and understandable - even I know what my Problem is now :D
Thank you all for making stackoverflow to this cool community - I often found here solutions for my problems. Please keep giving feedback to bad questions, so they can be improved and updated, which increases this huge knowledge and solutions database.
And feel free to correct my english grammar and spelling.
The Problem
AES in Javascript
I have an encrypted String which I can decrypt with this this Javascript Implementation of AES 256 CTR Mode

password = ""myPassphrase""
ciphertext = ""bQJdJ1F2Y0+uILADqEv+/SCDV1jAb7jwUBWk""
origtext = Aes.Ctr.decrypt(ciphertext, password, 256);
alert(origtext)

This decrypts my string and the alert box with This is a test Text pops up.
AES with PyCrypto
Now I want to decrypt this string with python and PyCrypto
password = 'myPassphrase'
ciphertext = ""bQJdJ1F2Y0+uILADqEv+/SCDV1jAb7jwUBWk""
ctr = Counter.new(nbits=128)
encryptor = AES.new(key, AES.MODE_CTR, counter=ctr)
origtext = encryptor.decrypt(base64.b64decode(ciphertext))
print origtext

This code does not run. I get an ValueError: AES key must be either 16, 24, or 32 bytes long. When I recognized, that I have to do more in PyCrypto then just call a decrypt method, I started to investigate end try to figure out what I have to do.
Investigation
The basic things I figured out first, were:

AES 256 Bit (?). But AES standard is 128 bit. Does increasing the passphrase to 32 Byte is enough?
Counter Mode. Easily to set in PyCrypto with AES.MODE_CTR. But I have to specify a counter() Method. So I used the basic binary Counter provided by PyCrypto. Is this compatible with the Javascript Implementation? I can't figure out what they are doing.
The string is base64 encoded. Not a big problem.
Padding in general. Both passphrase and the encrypted string.

For the passphrase they do this:
for (var i=0; i<nBytes; i++) {
    pwBytes[i] = isNaN(password.charCodeAt(i)) ? 0 : password.charCodeAt(i);
}

Then I did this in python
l = 32
key = key + (chr(0)*(l-len(key)%l))

But this did not help. I still get a weird string ?
A???B??d9=  ,?h????' with the following code
l = 32
key = 'myPassphrase'
key = key + (chr(0)*(l-len(key)%l))
ciphertext = ""bQJdJ1F2Y0+uILADqEv+/SCDV1jAb7jwUBWk""
ctr = Counter.new(nbits=128)
encryptor = AES.new(key, AES.MODE_CTR, counter=ctr)
origtext = encryptor.decrypt(base64.b64decode(ciphertext))
print origtext

Then I read more about the Javascript Implementation and it says

[...] In this implementation, the initial block holds the nonce in the first 8 bytes, and the block count in the second 8 bytes. [...]

I think this could be the key to the solution. So I tested what happens when I encrypt an empty string in Javascript:
origtext = """"
var ciphertext =Aes.Ctr.encrypt(origtext, password, 256);
alert(ciphertext)

The alert box shows /gEKb+N3Y08= (12 characters). But why 12? Shouldn't it be 8+8 = 16Bytes? Well anyway, I tried a bruteforce method on the python decryption by testing the decryption with for i in xrange(0,20): and ciphertext[i:] or base64.b64decode(ciphertext)[i:]. I know this is a very embarrassing try, but I got more and more desperate. And it didn't work either.
The future prospects are also to implement the encryption in the same way.
additional information
The encrypted string was not originally encrypted with this Javascript implementation, It's from another source. I just recognized, that the Javascript code does the right thing. So I affirm that this kind of implementation is something like a ""standard"".
The question
What can I do, that the encryption and decryption from a string with PyCrypto is the same like in the Javascript implementation, so that I can exchange data between Javascript and Python? 
I also would switch to another crypto library in python, if you can suggest another one.
Furthermore I'm happy with any kind of tips and feedback.
And I think, all comes down to How can I include the nonce and block count to the encrypted string? and How can I extract this information for decryption?
","We are still dealing with a bunch of questions here.
How can I extract the nonce and the counter for decryption?
This is easy. In the Javascript implementation (which does not follow a particular
standard in this respect) the 8-byte nonce is prepended to the encrypted result.
In Python, you extract it with:
import base64
from_js_bin = base64.decode(from_js)
nonce = from_js_bin[:8]
ciphertext = from_js_bin[8:]

Where from_js is a binary string you received.
The counter cannot be extracted because the JS implementation does not transmit it.
However, the initial value is (as typically happens) 0.
How can I use the nonce and counter to decrypt the string in Python?
First, it must be established how nonce and counter are combined to get the counter block.
It seems that the JS implementation follows the NIST 800-38A standard, where the
left half is the nonce, and the right half is the counter. More precisely, the counter
is in big endian format (LSB is the rightmost byte). This is also what Wikipedia shows:
.
Unfortunately, CTR mode is poorly documented in PyCrypto (a well-known problem).
Basically, the counter parameter must be a callable object that returns
the correct 16-byte (for AES) counter block, for each subsequent call.
Crypto.Util.Counter does that, but in an obscure way.
It is there only for performance purposes though. You can easily implement it yourself like this:
from Crypto.Cipher import AES
import struct

class MyCounter:

  def __init__(self, nonce):
    """"""Initialize the counter object.

    @nonce      An 8 byte binary string.
    """"""
    assert(len(nonce)==8)
    self.nonce = nonce
    self.cnt = 0

  def __call__(self):
    """"""Return the next 16 byte counter, as binary string.""""""
    righthalf = struct.pack('>Q',self.cnt)
    self.cnt += 1
    return self.nonce + righthalf

cipher_ctr = AES.new(key, mode=AES.MODE_CTR, counter=MyCounter(nonce))
plaintext = cipher_ctr.decrypt(ciphertext)

How long is the key for AES?
The key length for AES-128 is 16 bytes.
The key length for AES-192 is 24 bytes.
The key length for AES-256 is 32 bytes.
Each algorithm is different, but much of the implementation is shared.
In all cases, the algorithm operate on 16 byte blocks of data.
For simplicity, stick to AES-128 (nBits=128).
Will your code work?
I have the feeling it won't, because the way you compute the AES key seems incorrect.
The JS code encodes the password in UTF-8 and encrypts it with itself.
The result is the actual key material. It is 16 byte long, so for AES-192 and -256, the implementation copies part of it at the back. Additionally, the plaintext is also UTF-8 encoded before encryption.
In general, I suggest you follow this approach:

Make your JS implementation reproducible (right now encryption depends on the current time, which changes quite often ;-) ).
Print the value of the keys and data at each step (or use a debugger).
Try to reproduce the same algorithm in Python, and print the values too.
Investigate where they start to differ.

Once you have duplicated the encryption algorithm in Python, the decryption one should be easy.
","3839","<javascript><python><encryption><aes><pycrypto>","5","6","1","2013-11-11 23:49:53","9760900","3","2","-1","","2017-05-23 10:30:57","2012-03-16 17:50:00",""
"19062968","Python - Crypto.Cipher/Pycrypto on Mac?","After a bit of googling around, I see this issue is pretty common but has no direct answers.
Trying to use Pycrypto on my Mac 10.8.5. Installed it through Pip, Easy_install, and manually with setup.py yet when I try to import it, it says it can't find the module. 
Anyone else have an issue like this?
","I've had this problem before, and this is because you probably have different versions of Python. So, in fact, the package is installed, but for a separate version. What you need to do is see which executable file is linked to when python or pip is called.
","3820","<python><macos><pycrypto>","2","1","2","2013-09-30 20:09:21","19102883","0","","","","","2013-09-28 03:39:05",""
"19062968","Python - Crypto.Cipher/Pycrypto on Mac?","After a bit of googling around, I see this issue is pretty common but has no direct answers.
Trying to use Pycrypto on my Mac 10.8.5. Installed it through Pip, Easy_install, and manually with setup.py yet when I try to import it, it says it can't find the module. 
Anyone else have an issue like this?
","For those having this issue on Mac, for something reason Pip, easy_install, and even doing it manually installs Crypto with a lowercase 'c' in to site-packages. By browsing in to site-packages and renaming 'crypto' to 'Crypto', it solves the issues with other libaries.
","3820","<python><macos><pycrypto>","2","7","2","2013-09-30 20:09:21","19102883","0","","","","","2013-09-28 03:39:05",""
"5938664","How to generate the PEM serialization for the public RSA/DSA key","Using PyCrypto I was able to generate the public and private PEM serialization for a RSA key, but in PyCrypto the DSA class has no exportKey() method.
Trying PyOpenSSL I was able to generate the private PEM serialization for RSA and DSA keys, bu there is no crypto.dump_publickey method in PyOpenSSL.
I am looking for suggestion of how to generate the PEM serialization for RSA and DSA keys.
Many thanks!
PS: meanwhile I have changed the PyOpenSSL code to also export an dump_privatekey method for crypto API. PyOpenSSL bug and patch can be found at: https://bugs.launchpad.net/pyopenssl/+bug/780089

I was already using Twisted.conch so I solved this problem by manually generating a DSA/RSA key using PyCrypto and then initializing a twisted.conch.ssh.key.Key using this key. The Key class from Conch provides a toString method for string serialization.
","It is not clear what you are doing this for, but if all you want is an openssl-compatible DSA private key, you should just follow the openssl dsa(1) manual page:

The DER option with a private key uses
  an ASN1 DER encoded form of an ASN .1
  SEQUENCE consisting of the values of
  version (currently zero), p, q, g, the
  public and private key components
  respectively as ASN .1 INTEGERs.

This is an example how to export/import DSA private keys in openssl format:
from Crypto.PublicKey import DSA
from Crypto.Util import asn1

key = DSA.generate(1024)

# export

seq = asn1.DerSequence()
seq[:] = [ 0, key.p, key.q, key.g, key.y, key.x ]

exported_key = ""-----BEGIN DSA PRIVATE KEY-----\n%s-----END DSA PRIVATE KEY-----"" % seq.encode().encode(""base64"")

print exported_key

# import

seq2 = asn1.DerSequence()
data = ""\n"".join(exported_key.strip().split(""\n"")[1:-1]).decode(""base64"")
seq2.decode(data)
p, q, g, y, x = seq2[1:]

key2 = DSA.construct((y, g, p, q, x))

assert key == key2

","3742","<python><openssl><pycrypto><pyopenssl>","6","3","1","2011-05-11 13:33:23","5959895","0","2","539264","","2011-05-11 13:33:23","2011-05-09 14:56:30",""
"11861846","Error in installing pycrypto-2.3 on fedora 15","Hi i am trying to install pycrypto-2.3 from here
I downloaded and run the following command
cd pycrypto-2.3/

python setup.py install

I am getting the following error, 
running install
running build
running build_py
creating build
creating build/lib.linux-x86_64-2.7
creating build/lib.linux-x86_64-2.7/Crypto
copying lib/Crypto/pct_warnings.py -> build/lib.linux-x86_64-2.7/Crypto
copying lib/Crypto/__init__.py -> build/lib.linux-x86_64-2.7/Crypto
creating build/lib.linux-x86_64-2.7/Crypto/Hash
copying lib/Crypto/Hash/SHA.py -> build/lib.linux-x86_64-2.7/Crypto/Hash
copying lib/Crypto/Hash/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/Hash
copying lib/Crypto/Hash/MD5.py -> build/lib.linux-x86_64-2.7/Crypto/Hash
copying lib/Crypto/Hash/RIPEMD.py -> build/lib.linux-x86_64-2.7/Crypto/Hash
copying lib/Crypto/Hash/HMAC.py -> build/lib.linux-x86_64-2.7/Crypto/Hash
creating build/lib.linux-x86_64-2.7/Crypto/Cipher
copying lib/Crypto/Cipher/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/Cipher
creating build/lib.linux-x86_64-2.7/Crypto/Util
copying lib/Crypto/Util/_number_new.py -> build/lib.linux-x86_64-2.7/Crypto/Util
copying lib/Crypto/Util/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/Util
copying lib/Crypto/Util/winrandom.py -> build/lib.linux-x86_64-2.7/Crypto/Util
copying lib/Crypto/Util/python_compat.py -> build/lib.linux-x86_64-2.7/Crypto/Util
copying lib/Crypto/Util/RFC1751.py -> build/lib.linux-x86_64-2.7/Crypto/Util
copying lib/Crypto/Util/asn1.py -> build/lib.linux-x86_64-2.7/Crypto/Util
copying lib/Crypto/Util/randpool.py -> build/lib.linux-x86_64-2.7/Crypto/Util
copying lib/Crypto/Util/Counter.py -> build/lib.linux-x86_64-2.7/Crypto/Util
copying lib/Crypto/Util/number.py -> build/lib.linux-x86_64-2.7/Crypto/Util
creating build/lib.linux-x86_64-2.7/Crypto/Random
copying lib/Crypto/Random/_UserFriendlyRNG.py -> build/lib.linux-x86_64-2.7/Crypto/Random
copying lib/Crypto/Random/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/Random
copying lib/Crypto/Random/random.py -> build/lib.linux-x86_64-2.7/Crypto/Random
creating build/lib.linux-x86_64-2.7/Crypto/Random/Fortuna
copying lib/Crypto/Random/Fortuna/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/Random/Fortuna
copying lib/Crypto/Random/Fortuna/FortunaAccumulator.py -> build/lib.linux-x86_64-2.7/Crypto/Random/Fortuna
copying lib/Crypto/Random/Fortuna/FortunaGenerator.py -> build/lib.linux-x86_64-2.7/Crypto/Random/Fortuna
copying lib/Crypto/Random/Fortuna/SHAd256.py -> build/lib.linux-x86_64-2.7/Crypto/Random/Fortuna
creating build/lib.linux-x86_64-2.7/Crypto/Random/OSRNG
copying lib/Crypto/Random/OSRNG/rng_base.py -> build/lib.linux-x86_64-2.7/Crypto/Random/OSRNG
copying lib/Crypto/Random/OSRNG/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/Random/OSRNG
copying lib/Crypto/Random/OSRNG/posix.py -> build/lib.linux-x86_64-2.7/Crypto/Random/OSRNG
copying lib/Crypto/Random/OSRNG/fallback.py -> build/lib.linux-x86_64-2.7/Crypto/Random/OSRNG
copying lib/Crypto/Random/OSRNG/nt.py -> build/lib.linux-x86_64-2.7/Crypto/Random/OSRNG
creating build/lib.linux-x86_64-2.7/Crypto/SelfTest
copying lib/Crypto/SelfTest/st_common.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest
copying lib/Crypto/SelfTest/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest
creating build/lib.linux-x86_64-2.7/Crypto/SelfTest/Cipher
copying lib/Crypto/SelfTest/Cipher/test_AES.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Cipher
copying lib/Crypto/SelfTest/Cipher/test_DES3.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Cipher
copying lib/Crypto/SelfTest/Cipher/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Cipher
copying lib/Crypto/SelfTest/Cipher/common.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Cipher
copying lib/Crypto/SelfTest/Cipher/test_ARC2.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Cipher
copying lib/Crypto/SelfTest/Cipher/test_Blowfish.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Cipher
copying lib/Crypto/SelfTest/Cipher/test_DES.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Cipher
copying lib/Crypto/SelfTest/Cipher/test_ARC4.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Cipher
copying lib/Crypto/SelfTest/Cipher/test_CAST.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Cipher
copying lib/Crypto/SelfTest/Cipher/test_XOR.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Cipher
creating build/lib.linux-x86_64-2.7/Crypto/SelfTest/Hash
copying lib/Crypto/SelfTest/Hash/test_MD5.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Hash
copying lib/Crypto/SelfTest/Hash/test_SHA.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Hash
copying lib/Crypto/SelfTest/Hash/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Hash
copying lib/Crypto/SelfTest/Hash/common.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Hash
copying lib/Crypto/SelfTest/Hash/test_HMAC.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Hash
copying lib/Crypto/SelfTest/Hash/test_MD2.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Hash
copying lib/Crypto/SelfTest/Hash/test_MD4.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Hash
copying lib/Crypto/SelfTest/Hash/test_SHA256.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Hash
copying lib/Crypto/SelfTest/Hash/test_RIPEMD.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Hash
creating build/lib.linux-x86_64-2.7/Crypto/SelfTest/Protocol
copying lib/Crypto/SelfTest/Protocol/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Protocol
copying lib/Crypto/SelfTest/Protocol/test_rfc1751.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Protocol
copying lib/Crypto/SelfTest/Protocol/test_chaffing.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Protocol
creating build/lib.linux-x86_64-2.7/Crypto/SelfTest/PublicKey
copying lib/Crypto/SelfTest/PublicKey/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/PublicKey
copying lib/Crypto/SelfTest/PublicKey/test_DSA.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/PublicKey
copying lib/Crypto/SelfTest/PublicKey/test_importKey.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/PublicKey
copying lib/Crypto/SelfTest/PublicKey/test_RSA.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/PublicKey
creating build/lib.linux-x86_64-2.7/Crypto/SelfTest/Random
copying lib/Crypto/SelfTest/Random/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Random
copying lib/Crypto/SelfTest/Random/test_rpoolcompat.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Random
copying lib/Crypto/SelfTest/Random/test_random.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Random
creating build/lib.linux-x86_64-2.7/Crypto/SelfTest/Random/Fortuna
copying lib/Crypto/SelfTest/Random/Fortuna/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Random/Fortuna
copying lib/Crypto/SelfTest/Random/Fortuna/test_SHAd256.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Random/Fortuna
copying lib/Crypto/SelfTest/Random/Fortuna/test_FortunaGenerator.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Random/Fortuna
copying lib/Crypto/SelfTest/Random/Fortuna/test_FortunaAccumulator.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Random/Fortuna
creating build/lib.linux-x86_64-2.7/Crypto/SelfTest/Random/OSRNG
copying lib/Crypto/SelfTest/Random/OSRNG/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Random/OSRNG
copying lib/Crypto/SelfTest/Random/OSRNG/test_posix.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Random/OSRNG
copying lib/Crypto/SelfTest/Random/OSRNG/test_winrandom.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Random/OSRNG
copying lib/Crypto/SelfTest/Random/OSRNG/test_generic.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Random/OSRNG
copying lib/Crypto/SelfTest/Random/OSRNG/test_fallback.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Random/OSRNG
copying lib/Crypto/SelfTest/Random/OSRNG/test_nt.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Random/OSRNG
creating build/lib.linux-x86_64-2.7/Crypto/SelfTest/Util
copying lib/Crypto/SelfTest/Util/test_asn1.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Util
copying lib/Crypto/SelfTest/Util/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Util
copying lib/Crypto/SelfTest/Util/test_winrandom.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Util
copying lib/Crypto/SelfTest/Util/test_Counter.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Util
copying lib/Crypto/SelfTest/Util/test_number.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Util
creating build/lib.linux-x86_64-2.7/Crypto/Protocol
copying lib/Crypto/Protocol/AllOrNothing.py -> build/lib.linux-x86_64-2.7/Crypto/Protocol
copying lib/Crypto/Protocol/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/Protocol
copying lib/Crypto/Protocol/Chaffing.py -> build/lib.linux-x86_64-2.7/Crypto/Protocol
creating build/lib.linux-x86_64-2.7/Crypto/PublicKey
copying lib/Crypto/PublicKey/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/PublicKey
copying lib/Crypto/PublicKey/RSA.py -> build/lib.linux-x86_64-2.7/Crypto/PublicKey
copying lib/Crypto/PublicKey/DSA.py -> build/lib.linux-x86_64-2.7/Crypto/PublicKey
copying lib/Crypto/PublicKey/_slowmath.py -> build/lib.linux-x86_64-2.7/Crypto/PublicKey
copying lib/Crypto/PublicKey/_DSA.py -> build/lib.linux-x86_64-2.7/Crypto/PublicKey
copying lib/Crypto/PublicKey/qNEW.py -> build/lib.linux-x86_64-2.7/Crypto/PublicKey
copying lib/Crypto/PublicKey/_RSA.py -> build/lib.linux-x86_64-2.7/Crypto/PublicKey
copying lib/Crypto/PublicKey/pubkey.py -> build/lib.linux-x86_64-2.7/Crypto/PublicKey
copying lib/Crypto/PublicKey/ElGamal.py -> build/lib.linux-x86_64-2.7/Crypto/PublicKey
running build_ext
warning: GMP library not found; Not building Crypto.PublicKey._fastmath.
building 'Crypto.Hash.MD2' extension
creating build/temp.linux-x86_64-2.7
creating build/temp.linux-x86_64-2.7/src
gcc -pthread -fno-strict-aliasing -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 -m64 -mtune=generic -D_GNU_SOURCE -fPIC -fwrapv -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 -m64 -mtune=generic -D_GNU_SOURCE -fPIC -fwrapv -fPIC -std=c99 -O3 -fomit-frame-pointer -Isrc/ -I/usr/include/python2.7 -c src/MD2.c -o build/temp.linux-x86_64-2.7/src/MD2.o
src/MD2.c:31:20: fatal error: Python.h: No such file or directory
compilation terminated.
error: command 'gcc' failed with exit status 1

can anyone please let me know how to solve this and install pycrypto-2.3 successfully on my machine.
","It's always worth reading the documentation first. I'll quote from pycrypto's README:

Red Hat users often run into this because they don't have the
  python2-devel RPM installed. The fix is to simply install the
  requisite RPM.

edit I'll add, don't get your software from a website like softpedia (especially not crypto software!). Get it from the pycrypto website and verify the signature and file hash.
","3668","<python><pycrypto>","0","2","4","2016-09-06 00:50:26","","0","","","","","2012-08-08 09:46:08",""
"11861846","Error in installing pycrypto-2.3 on fedora 15","Hi i am trying to install pycrypto-2.3 from here
I downloaded and run the following command
cd pycrypto-2.3/

python setup.py install

I am getting the following error, 
running install
running build
running build_py
creating build
creating build/lib.linux-x86_64-2.7
creating build/lib.linux-x86_64-2.7/Crypto
copying lib/Crypto/pct_warnings.py -> build/lib.linux-x86_64-2.7/Crypto
copying lib/Crypto/__init__.py -> build/lib.linux-x86_64-2.7/Crypto
creating build/lib.linux-x86_64-2.7/Crypto/Hash
copying lib/Crypto/Hash/SHA.py -> build/lib.linux-x86_64-2.7/Crypto/Hash
copying lib/Crypto/Hash/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/Hash
copying lib/Crypto/Hash/MD5.py -> build/lib.linux-x86_64-2.7/Crypto/Hash
copying lib/Crypto/Hash/RIPEMD.py -> build/lib.linux-x86_64-2.7/Crypto/Hash
copying lib/Crypto/Hash/HMAC.py -> build/lib.linux-x86_64-2.7/Crypto/Hash
creating build/lib.linux-x86_64-2.7/Crypto/Cipher
copying lib/Crypto/Cipher/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/Cipher
creating build/lib.linux-x86_64-2.7/Crypto/Util
copying lib/Crypto/Util/_number_new.py -> build/lib.linux-x86_64-2.7/Crypto/Util
copying lib/Crypto/Util/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/Util
copying lib/Crypto/Util/winrandom.py -> build/lib.linux-x86_64-2.7/Crypto/Util
copying lib/Crypto/Util/python_compat.py -> build/lib.linux-x86_64-2.7/Crypto/Util
copying lib/Crypto/Util/RFC1751.py -> build/lib.linux-x86_64-2.7/Crypto/Util
copying lib/Crypto/Util/asn1.py -> build/lib.linux-x86_64-2.7/Crypto/Util
copying lib/Crypto/Util/randpool.py -> build/lib.linux-x86_64-2.7/Crypto/Util
copying lib/Crypto/Util/Counter.py -> build/lib.linux-x86_64-2.7/Crypto/Util
copying lib/Crypto/Util/number.py -> build/lib.linux-x86_64-2.7/Crypto/Util
creating build/lib.linux-x86_64-2.7/Crypto/Random
copying lib/Crypto/Random/_UserFriendlyRNG.py -> build/lib.linux-x86_64-2.7/Crypto/Random
copying lib/Crypto/Random/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/Random
copying lib/Crypto/Random/random.py -> build/lib.linux-x86_64-2.7/Crypto/Random
creating build/lib.linux-x86_64-2.7/Crypto/Random/Fortuna
copying lib/Crypto/Random/Fortuna/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/Random/Fortuna
copying lib/Crypto/Random/Fortuna/FortunaAccumulator.py -> build/lib.linux-x86_64-2.7/Crypto/Random/Fortuna
copying lib/Crypto/Random/Fortuna/FortunaGenerator.py -> build/lib.linux-x86_64-2.7/Crypto/Random/Fortuna
copying lib/Crypto/Random/Fortuna/SHAd256.py -> build/lib.linux-x86_64-2.7/Crypto/Random/Fortuna
creating build/lib.linux-x86_64-2.7/Crypto/Random/OSRNG
copying lib/Crypto/Random/OSRNG/rng_base.py -> build/lib.linux-x86_64-2.7/Crypto/Random/OSRNG
copying lib/Crypto/Random/OSRNG/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/Random/OSRNG
copying lib/Crypto/Random/OSRNG/posix.py -> build/lib.linux-x86_64-2.7/Crypto/Random/OSRNG
copying lib/Crypto/Random/OSRNG/fallback.py -> build/lib.linux-x86_64-2.7/Crypto/Random/OSRNG
copying lib/Crypto/Random/OSRNG/nt.py -> build/lib.linux-x86_64-2.7/Crypto/Random/OSRNG
creating build/lib.linux-x86_64-2.7/Crypto/SelfTest
copying lib/Crypto/SelfTest/st_common.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest
copying lib/Crypto/SelfTest/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest
creating build/lib.linux-x86_64-2.7/Crypto/SelfTest/Cipher
copying lib/Crypto/SelfTest/Cipher/test_AES.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Cipher
copying lib/Crypto/SelfTest/Cipher/test_DES3.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Cipher
copying lib/Crypto/SelfTest/Cipher/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Cipher
copying lib/Crypto/SelfTest/Cipher/common.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Cipher
copying lib/Crypto/SelfTest/Cipher/test_ARC2.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Cipher
copying lib/Crypto/SelfTest/Cipher/test_Blowfish.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Cipher
copying lib/Crypto/SelfTest/Cipher/test_DES.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Cipher
copying lib/Crypto/SelfTest/Cipher/test_ARC4.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Cipher
copying lib/Crypto/SelfTest/Cipher/test_CAST.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Cipher
copying lib/Crypto/SelfTest/Cipher/test_XOR.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Cipher
creating build/lib.linux-x86_64-2.7/Crypto/SelfTest/Hash
copying lib/Crypto/SelfTest/Hash/test_MD5.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Hash
copying lib/Crypto/SelfTest/Hash/test_SHA.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Hash
copying lib/Crypto/SelfTest/Hash/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Hash
copying lib/Crypto/SelfTest/Hash/common.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Hash
copying lib/Crypto/SelfTest/Hash/test_HMAC.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Hash
copying lib/Crypto/SelfTest/Hash/test_MD2.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Hash
copying lib/Crypto/SelfTest/Hash/test_MD4.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Hash
copying lib/Crypto/SelfTest/Hash/test_SHA256.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Hash
copying lib/Crypto/SelfTest/Hash/test_RIPEMD.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Hash
creating build/lib.linux-x86_64-2.7/Crypto/SelfTest/Protocol
copying lib/Crypto/SelfTest/Protocol/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Protocol
copying lib/Crypto/SelfTest/Protocol/test_rfc1751.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Protocol
copying lib/Crypto/SelfTest/Protocol/test_chaffing.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Protocol
creating build/lib.linux-x86_64-2.7/Crypto/SelfTest/PublicKey
copying lib/Crypto/SelfTest/PublicKey/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/PublicKey
copying lib/Crypto/SelfTest/PublicKey/test_DSA.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/PublicKey
copying lib/Crypto/SelfTest/PublicKey/test_importKey.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/PublicKey
copying lib/Crypto/SelfTest/PublicKey/test_RSA.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/PublicKey
creating build/lib.linux-x86_64-2.7/Crypto/SelfTest/Random
copying lib/Crypto/SelfTest/Random/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Random
copying lib/Crypto/SelfTest/Random/test_rpoolcompat.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Random
copying lib/Crypto/SelfTest/Random/test_random.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Random
creating build/lib.linux-x86_64-2.7/Crypto/SelfTest/Random/Fortuna
copying lib/Crypto/SelfTest/Random/Fortuna/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Random/Fortuna
copying lib/Crypto/SelfTest/Random/Fortuna/test_SHAd256.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Random/Fortuna
copying lib/Crypto/SelfTest/Random/Fortuna/test_FortunaGenerator.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Random/Fortuna
copying lib/Crypto/SelfTest/Random/Fortuna/test_FortunaAccumulator.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Random/Fortuna
creating build/lib.linux-x86_64-2.7/Crypto/SelfTest/Random/OSRNG
copying lib/Crypto/SelfTest/Random/OSRNG/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Random/OSRNG
copying lib/Crypto/SelfTest/Random/OSRNG/test_posix.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Random/OSRNG
copying lib/Crypto/SelfTest/Random/OSRNG/test_winrandom.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Random/OSRNG
copying lib/Crypto/SelfTest/Random/OSRNG/test_generic.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Random/OSRNG
copying lib/Crypto/SelfTest/Random/OSRNG/test_fallback.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Random/OSRNG
copying lib/Crypto/SelfTest/Random/OSRNG/test_nt.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Random/OSRNG
creating build/lib.linux-x86_64-2.7/Crypto/SelfTest/Util
copying lib/Crypto/SelfTest/Util/test_asn1.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Util
copying lib/Crypto/SelfTest/Util/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Util
copying lib/Crypto/SelfTest/Util/test_winrandom.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Util
copying lib/Crypto/SelfTest/Util/test_Counter.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Util
copying lib/Crypto/SelfTest/Util/test_number.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Util
creating build/lib.linux-x86_64-2.7/Crypto/Protocol
copying lib/Crypto/Protocol/AllOrNothing.py -> build/lib.linux-x86_64-2.7/Crypto/Protocol
copying lib/Crypto/Protocol/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/Protocol
copying lib/Crypto/Protocol/Chaffing.py -> build/lib.linux-x86_64-2.7/Crypto/Protocol
creating build/lib.linux-x86_64-2.7/Crypto/PublicKey
copying lib/Crypto/PublicKey/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/PublicKey
copying lib/Crypto/PublicKey/RSA.py -> build/lib.linux-x86_64-2.7/Crypto/PublicKey
copying lib/Crypto/PublicKey/DSA.py -> build/lib.linux-x86_64-2.7/Crypto/PublicKey
copying lib/Crypto/PublicKey/_slowmath.py -> build/lib.linux-x86_64-2.7/Crypto/PublicKey
copying lib/Crypto/PublicKey/_DSA.py -> build/lib.linux-x86_64-2.7/Crypto/PublicKey
copying lib/Crypto/PublicKey/qNEW.py -> build/lib.linux-x86_64-2.7/Crypto/PublicKey
copying lib/Crypto/PublicKey/_RSA.py -> build/lib.linux-x86_64-2.7/Crypto/PublicKey
copying lib/Crypto/PublicKey/pubkey.py -> build/lib.linux-x86_64-2.7/Crypto/PublicKey
copying lib/Crypto/PublicKey/ElGamal.py -> build/lib.linux-x86_64-2.7/Crypto/PublicKey
running build_ext
warning: GMP library not found; Not building Crypto.PublicKey._fastmath.
building 'Crypto.Hash.MD2' extension
creating build/temp.linux-x86_64-2.7
creating build/temp.linux-x86_64-2.7/src
gcc -pthread -fno-strict-aliasing -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 -m64 -mtune=generic -D_GNU_SOURCE -fPIC -fwrapv -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 -m64 -mtune=generic -D_GNU_SOURCE -fPIC -fwrapv -fPIC -std=c99 -O3 -fomit-frame-pointer -Isrc/ -I/usr/include/python2.7 -c src/MD2.c -o build/temp.linux-x86_64-2.7/src/MD2.o
src/MD2.c:31:20: fatal error: Python.h: No such file or directory
compilation terminated.
error: command 'gcc' failed with exit status 1

can anyone please let me know how to solve this and install pycrypto-2.3 successfully on my machine.
","PyCrypto is called python-crypto in Fedora, and can be installed with:
yum install python-crypto

","3668","<python><pycrypto>","0","6","4","2016-09-06 00:50:26","","0","","","","","2012-08-08 09:46:08",""
"11861846","Error in installing pycrypto-2.3 on fedora 15","Hi i am trying to install pycrypto-2.3 from here
I downloaded and run the following command
cd pycrypto-2.3/

python setup.py install

I am getting the following error, 
running install
running build
running build_py
creating build
creating build/lib.linux-x86_64-2.7
creating build/lib.linux-x86_64-2.7/Crypto
copying lib/Crypto/pct_warnings.py -> build/lib.linux-x86_64-2.7/Crypto
copying lib/Crypto/__init__.py -> build/lib.linux-x86_64-2.7/Crypto
creating build/lib.linux-x86_64-2.7/Crypto/Hash
copying lib/Crypto/Hash/SHA.py -> build/lib.linux-x86_64-2.7/Crypto/Hash
copying lib/Crypto/Hash/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/Hash
copying lib/Crypto/Hash/MD5.py -> build/lib.linux-x86_64-2.7/Crypto/Hash
copying lib/Crypto/Hash/RIPEMD.py -> build/lib.linux-x86_64-2.7/Crypto/Hash
copying lib/Crypto/Hash/HMAC.py -> build/lib.linux-x86_64-2.7/Crypto/Hash
creating build/lib.linux-x86_64-2.7/Crypto/Cipher
copying lib/Crypto/Cipher/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/Cipher
creating build/lib.linux-x86_64-2.7/Crypto/Util
copying lib/Crypto/Util/_number_new.py -> build/lib.linux-x86_64-2.7/Crypto/Util
copying lib/Crypto/Util/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/Util
copying lib/Crypto/Util/winrandom.py -> build/lib.linux-x86_64-2.7/Crypto/Util
copying lib/Crypto/Util/python_compat.py -> build/lib.linux-x86_64-2.7/Crypto/Util
copying lib/Crypto/Util/RFC1751.py -> build/lib.linux-x86_64-2.7/Crypto/Util
copying lib/Crypto/Util/asn1.py -> build/lib.linux-x86_64-2.7/Crypto/Util
copying lib/Crypto/Util/randpool.py -> build/lib.linux-x86_64-2.7/Crypto/Util
copying lib/Crypto/Util/Counter.py -> build/lib.linux-x86_64-2.7/Crypto/Util
copying lib/Crypto/Util/number.py -> build/lib.linux-x86_64-2.7/Crypto/Util
creating build/lib.linux-x86_64-2.7/Crypto/Random
copying lib/Crypto/Random/_UserFriendlyRNG.py -> build/lib.linux-x86_64-2.7/Crypto/Random
copying lib/Crypto/Random/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/Random
copying lib/Crypto/Random/random.py -> build/lib.linux-x86_64-2.7/Crypto/Random
creating build/lib.linux-x86_64-2.7/Crypto/Random/Fortuna
copying lib/Crypto/Random/Fortuna/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/Random/Fortuna
copying lib/Crypto/Random/Fortuna/FortunaAccumulator.py -> build/lib.linux-x86_64-2.7/Crypto/Random/Fortuna
copying lib/Crypto/Random/Fortuna/FortunaGenerator.py -> build/lib.linux-x86_64-2.7/Crypto/Random/Fortuna
copying lib/Crypto/Random/Fortuna/SHAd256.py -> build/lib.linux-x86_64-2.7/Crypto/Random/Fortuna
creating build/lib.linux-x86_64-2.7/Crypto/Random/OSRNG
copying lib/Crypto/Random/OSRNG/rng_base.py -> build/lib.linux-x86_64-2.7/Crypto/Random/OSRNG
copying lib/Crypto/Random/OSRNG/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/Random/OSRNG
copying lib/Crypto/Random/OSRNG/posix.py -> build/lib.linux-x86_64-2.7/Crypto/Random/OSRNG
copying lib/Crypto/Random/OSRNG/fallback.py -> build/lib.linux-x86_64-2.7/Crypto/Random/OSRNG
copying lib/Crypto/Random/OSRNG/nt.py -> build/lib.linux-x86_64-2.7/Crypto/Random/OSRNG
creating build/lib.linux-x86_64-2.7/Crypto/SelfTest
copying lib/Crypto/SelfTest/st_common.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest
copying lib/Crypto/SelfTest/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest
creating build/lib.linux-x86_64-2.7/Crypto/SelfTest/Cipher
copying lib/Crypto/SelfTest/Cipher/test_AES.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Cipher
copying lib/Crypto/SelfTest/Cipher/test_DES3.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Cipher
copying lib/Crypto/SelfTest/Cipher/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Cipher
copying lib/Crypto/SelfTest/Cipher/common.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Cipher
copying lib/Crypto/SelfTest/Cipher/test_ARC2.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Cipher
copying lib/Crypto/SelfTest/Cipher/test_Blowfish.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Cipher
copying lib/Crypto/SelfTest/Cipher/test_DES.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Cipher
copying lib/Crypto/SelfTest/Cipher/test_ARC4.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Cipher
copying lib/Crypto/SelfTest/Cipher/test_CAST.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Cipher
copying lib/Crypto/SelfTest/Cipher/test_XOR.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Cipher
creating build/lib.linux-x86_64-2.7/Crypto/SelfTest/Hash
copying lib/Crypto/SelfTest/Hash/test_MD5.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Hash
copying lib/Crypto/SelfTest/Hash/test_SHA.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Hash
copying lib/Crypto/SelfTest/Hash/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Hash
copying lib/Crypto/SelfTest/Hash/common.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Hash
copying lib/Crypto/SelfTest/Hash/test_HMAC.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Hash
copying lib/Crypto/SelfTest/Hash/test_MD2.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Hash
copying lib/Crypto/SelfTest/Hash/test_MD4.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Hash
copying lib/Crypto/SelfTest/Hash/test_SHA256.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Hash
copying lib/Crypto/SelfTest/Hash/test_RIPEMD.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Hash
creating build/lib.linux-x86_64-2.7/Crypto/SelfTest/Protocol
copying lib/Crypto/SelfTest/Protocol/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Protocol
copying lib/Crypto/SelfTest/Protocol/test_rfc1751.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Protocol
copying lib/Crypto/SelfTest/Protocol/test_chaffing.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Protocol
creating build/lib.linux-x86_64-2.7/Crypto/SelfTest/PublicKey
copying lib/Crypto/SelfTest/PublicKey/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/PublicKey
copying lib/Crypto/SelfTest/PublicKey/test_DSA.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/PublicKey
copying lib/Crypto/SelfTest/PublicKey/test_importKey.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/PublicKey
copying lib/Crypto/SelfTest/PublicKey/test_RSA.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/PublicKey
creating build/lib.linux-x86_64-2.7/Crypto/SelfTest/Random
copying lib/Crypto/SelfTest/Random/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Random
copying lib/Crypto/SelfTest/Random/test_rpoolcompat.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Random
copying lib/Crypto/SelfTest/Random/test_random.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Random
creating build/lib.linux-x86_64-2.7/Crypto/SelfTest/Random/Fortuna
copying lib/Crypto/SelfTest/Random/Fortuna/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Random/Fortuna
copying lib/Crypto/SelfTest/Random/Fortuna/test_SHAd256.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Random/Fortuna
copying lib/Crypto/SelfTest/Random/Fortuna/test_FortunaGenerator.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Random/Fortuna
copying lib/Crypto/SelfTest/Random/Fortuna/test_FortunaAccumulator.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Random/Fortuna
creating build/lib.linux-x86_64-2.7/Crypto/SelfTest/Random/OSRNG
copying lib/Crypto/SelfTest/Random/OSRNG/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Random/OSRNG
copying lib/Crypto/SelfTest/Random/OSRNG/test_posix.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Random/OSRNG
copying lib/Crypto/SelfTest/Random/OSRNG/test_winrandom.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Random/OSRNG
copying lib/Crypto/SelfTest/Random/OSRNG/test_generic.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Random/OSRNG
copying lib/Crypto/SelfTest/Random/OSRNG/test_fallback.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Random/OSRNG
copying lib/Crypto/SelfTest/Random/OSRNG/test_nt.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Random/OSRNG
creating build/lib.linux-x86_64-2.7/Crypto/SelfTest/Util
copying lib/Crypto/SelfTest/Util/test_asn1.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Util
copying lib/Crypto/SelfTest/Util/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Util
copying lib/Crypto/SelfTest/Util/test_winrandom.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Util
copying lib/Crypto/SelfTest/Util/test_Counter.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Util
copying lib/Crypto/SelfTest/Util/test_number.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Util
creating build/lib.linux-x86_64-2.7/Crypto/Protocol
copying lib/Crypto/Protocol/AllOrNothing.py -> build/lib.linux-x86_64-2.7/Crypto/Protocol
copying lib/Crypto/Protocol/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/Protocol
copying lib/Crypto/Protocol/Chaffing.py -> build/lib.linux-x86_64-2.7/Crypto/Protocol
creating build/lib.linux-x86_64-2.7/Crypto/PublicKey
copying lib/Crypto/PublicKey/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/PublicKey
copying lib/Crypto/PublicKey/RSA.py -> build/lib.linux-x86_64-2.7/Crypto/PublicKey
copying lib/Crypto/PublicKey/DSA.py -> build/lib.linux-x86_64-2.7/Crypto/PublicKey
copying lib/Crypto/PublicKey/_slowmath.py -> build/lib.linux-x86_64-2.7/Crypto/PublicKey
copying lib/Crypto/PublicKey/_DSA.py -> build/lib.linux-x86_64-2.7/Crypto/PublicKey
copying lib/Crypto/PublicKey/qNEW.py -> build/lib.linux-x86_64-2.7/Crypto/PublicKey
copying lib/Crypto/PublicKey/_RSA.py -> build/lib.linux-x86_64-2.7/Crypto/PublicKey
copying lib/Crypto/PublicKey/pubkey.py -> build/lib.linux-x86_64-2.7/Crypto/PublicKey
copying lib/Crypto/PublicKey/ElGamal.py -> build/lib.linux-x86_64-2.7/Crypto/PublicKey
running build_ext
warning: GMP library not found; Not building Crypto.PublicKey._fastmath.
building 'Crypto.Hash.MD2' extension
creating build/temp.linux-x86_64-2.7
creating build/temp.linux-x86_64-2.7/src
gcc -pthread -fno-strict-aliasing -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 -m64 -mtune=generic -D_GNU_SOURCE -fPIC -fwrapv -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 -m64 -mtune=generic -D_GNU_SOURCE -fPIC -fwrapv -fPIC -std=c99 -O3 -fomit-frame-pointer -Isrc/ -I/usr/include/python2.7 -c src/MD2.c -o build/temp.linux-x86_64-2.7/src/MD2.o
src/MD2.c:31:20: fatal error: Python.h: No such file or directory
compilation terminated.
error: command 'gcc' failed with exit status 1

can anyone please let me know how to solve this and install pycrypto-2.3 successfully on my machine.
","To solve this, you only need to install python-devel beforehand.
But if you are using Fedora-23 like me, you may face another problem before this one. So you need to install one more package.
sudo dnf install redhat-rpm-config python-devel

","3668","<python><pycrypto>","0","1","4","2016-09-06 00:50:26","","0","","","","","2012-08-08 09:46:08",""
"11861846","Error in installing pycrypto-2.3 on fedora 15","Hi i am trying to install pycrypto-2.3 from here
I downloaded and run the following command
cd pycrypto-2.3/

python setup.py install

I am getting the following error, 
running install
running build
running build_py
creating build
creating build/lib.linux-x86_64-2.7
creating build/lib.linux-x86_64-2.7/Crypto
copying lib/Crypto/pct_warnings.py -> build/lib.linux-x86_64-2.7/Crypto
copying lib/Crypto/__init__.py -> build/lib.linux-x86_64-2.7/Crypto
creating build/lib.linux-x86_64-2.7/Crypto/Hash
copying lib/Crypto/Hash/SHA.py -> build/lib.linux-x86_64-2.7/Crypto/Hash
copying lib/Crypto/Hash/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/Hash
copying lib/Crypto/Hash/MD5.py -> build/lib.linux-x86_64-2.7/Crypto/Hash
copying lib/Crypto/Hash/RIPEMD.py -> build/lib.linux-x86_64-2.7/Crypto/Hash
copying lib/Crypto/Hash/HMAC.py -> build/lib.linux-x86_64-2.7/Crypto/Hash
creating build/lib.linux-x86_64-2.7/Crypto/Cipher
copying lib/Crypto/Cipher/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/Cipher
creating build/lib.linux-x86_64-2.7/Crypto/Util
copying lib/Crypto/Util/_number_new.py -> build/lib.linux-x86_64-2.7/Crypto/Util
copying lib/Crypto/Util/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/Util
copying lib/Crypto/Util/winrandom.py -> build/lib.linux-x86_64-2.7/Crypto/Util
copying lib/Crypto/Util/python_compat.py -> build/lib.linux-x86_64-2.7/Crypto/Util
copying lib/Crypto/Util/RFC1751.py -> build/lib.linux-x86_64-2.7/Crypto/Util
copying lib/Crypto/Util/asn1.py -> build/lib.linux-x86_64-2.7/Crypto/Util
copying lib/Crypto/Util/randpool.py -> build/lib.linux-x86_64-2.7/Crypto/Util
copying lib/Crypto/Util/Counter.py -> build/lib.linux-x86_64-2.7/Crypto/Util
copying lib/Crypto/Util/number.py -> build/lib.linux-x86_64-2.7/Crypto/Util
creating build/lib.linux-x86_64-2.7/Crypto/Random
copying lib/Crypto/Random/_UserFriendlyRNG.py -> build/lib.linux-x86_64-2.7/Crypto/Random
copying lib/Crypto/Random/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/Random
copying lib/Crypto/Random/random.py -> build/lib.linux-x86_64-2.7/Crypto/Random
creating build/lib.linux-x86_64-2.7/Crypto/Random/Fortuna
copying lib/Crypto/Random/Fortuna/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/Random/Fortuna
copying lib/Crypto/Random/Fortuna/FortunaAccumulator.py -> build/lib.linux-x86_64-2.7/Crypto/Random/Fortuna
copying lib/Crypto/Random/Fortuna/FortunaGenerator.py -> build/lib.linux-x86_64-2.7/Crypto/Random/Fortuna
copying lib/Crypto/Random/Fortuna/SHAd256.py -> build/lib.linux-x86_64-2.7/Crypto/Random/Fortuna
creating build/lib.linux-x86_64-2.7/Crypto/Random/OSRNG
copying lib/Crypto/Random/OSRNG/rng_base.py -> build/lib.linux-x86_64-2.7/Crypto/Random/OSRNG
copying lib/Crypto/Random/OSRNG/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/Random/OSRNG
copying lib/Crypto/Random/OSRNG/posix.py -> build/lib.linux-x86_64-2.7/Crypto/Random/OSRNG
copying lib/Crypto/Random/OSRNG/fallback.py -> build/lib.linux-x86_64-2.7/Crypto/Random/OSRNG
copying lib/Crypto/Random/OSRNG/nt.py -> build/lib.linux-x86_64-2.7/Crypto/Random/OSRNG
creating build/lib.linux-x86_64-2.7/Crypto/SelfTest
copying lib/Crypto/SelfTest/st_common.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest
copying lib/Crypto/SelfTest/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest
creating build/lib.linux-x86_64-2.7/Crypto/SelfTest/Cipher
copying lib/Crypto/SelfTest/Cipher/test_AES.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Cipher
copying lib/Crypto/SelfTest/Cipher/test_DES3.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Cipher
copying lib/Crypto/SelfTest/Cipher/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Cipher
copying lib/Crypto/SelfTest/Cipher/common.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Cipher
copying lib/Crypto/SelfTest/Cipher/test_ARC2.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Cipher
copying lib/Crypto/SelfTest/Cipher/test_Blowfish.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Cipher
copying lib/Crypto/SelfTest/Cipher/test_DES.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Cipher
copying lib/Crypto/SelfTest/Cipher/test_ARC4.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Cipher
copying lib/Crypto/SelfTest/Cipher/test_CAST.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Cipher
copying lib/Crypto/SelfTest/Cipher/test_XOR.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Cipher
creating build/lib.linux-x86_64-2.7/Crypto/SelfTest/Hash
copying lib/Crypto/SelfTest/Hash/test_MD5.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Hash
copying lib/Crypto/SelfTest/Hash/test_SHA.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Hash
copying lib/Crypto/SelfTest/Hash/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Hash
copying lib/Crypto/SelfTest/Hash/common.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Hash
copying lib/Crypto/SelfTest/Hash/test_HMAC.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Hash
copying lib/Crypto/SelfTest/Hash/test_MD2.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Hash
copying lib/Crypto/SelfTest/Hash/test_MD4.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Hash
copying lib/Crypto/SelfTest/Hash/test_SHA256.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Hash
copying lib/Crypto/SelfTest/Hash/test_RIPEMD.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Hash
creating build/lib.linux-x86_64-2.7/Crypto/SelfTest/Protocol
copying lib/Crypto/SelfTest/Protocol/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Protocol
copying lib/Crypto/SelfTest/Protocol/test_rfc1751.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Protocol
copying lib/Crypto/SelfTest/Protocol/test_chaffing.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Protocol
creating build/lib.linux-x86_64-2.7/Crypto/SelfTest/PublicKey
copying lib/Crypto/SelfTest/PublicKey/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/PublicKey
copying lib/Crypto/SelfTest/PublicKey/test_DSA.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/PublicKey
copying lib/Crypto/SelfTest/PublicKey/test_importKey.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/PublicKey
copying lib/Crypto/SelfTest/PublicKey/test_RSA.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/PublicKey
creating build/lib.linux-x86_64-2.7/Crypto/SelfTest/Random
copying lib/Crypto/SelfTest/Random/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Random
copying lib/Crypto/SelfTest/Random/test_rpoolcompat.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Random
copying lib/Crypto/SelfTest/Random/test_random.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Random
creating build/lib.linux-x86_64-2.7/Crypto/SelfTest/Random/Fortuna
copying lib/Crypto/SelfTest/Random/Fortuna/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Random/Fortuna
copying lib/Crypto/SelfTest/Random/Fortuna/test_SHAd256.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Random/Fortuna
copying lib/Crypto/SelfTest/Random/Fortuna/test_FortunaGenerator.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Random/Fortuna
copying lib/Crypto/SelfTest/Random/Fortuna/test_FortunaAccumulator.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Random/Fortuna
creating build/lib.linux-x86_64-2.7/Crypto/SelfTest/Random/OSRNG
copying lib/Crypto/SelfTest/Random/OSRNG/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Random/OSRNG
copying lib/Crypto/SelfTest/Random/OSRNG/test_posix.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Random/OSRNG
copying lib/Crypto/SelfTest/Random/OSRNG/test_winrandom.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Random/OSRNG
copying lib/Crypto/SelfTest/Random/OSRNG/test_generic.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Random/OSRNG
copying lib/Crypto/SelfTest/Random/OSRNG/test_fallback.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Random/OSRNG
copying lib/Crypto/SelfTest/Random/OSRNG/test_nt.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Random/OSRNG
creating build/lib.linux-x86_64-2.7/Crypto/SelfTest/Util
copying lib/Crypto/SelfTest/Util/test_asn1.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Util
copying lib/Crypto/SelfTest/Util/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Util
copying lib/Crypto/SelfTest/Util/test_winrandom.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Util
copying lib/Crypto/SelfTest/Util/test_Counter.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Util
copying lib/Crypto/SelfTest/Util/test_number.py -> build/lib.linux-x86_64-2.7/Crypto/SelfTest/Util
creating build/lib.linux-x86_64-2.7/Crypto/Protocol
copying lib/Crypto/Protocol/AllOrNothing.py -> build/lib.linux-x86_64-2.7/Crypto/Protocol
copying lib/Crypto/Protocol/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/Protocol
copying lib/Crypto/Protocol/Chaffing.py -> build/lib.linux-x86_64-2.7/Crypto/Protocol
creating build/lib.linux-x86_64-2.7/Crypto/PublicKey
copying lib/Crypto/PublicKey/__init__.py -> build/lib.linux-x86_64-2.7/Crypto/PublicKey
copying lib/Crypto/PublicKey/RSA.py -> build/lib.linux-x86_64-2.7/Crypto/PublicKey
copying lib/Crypto/PublicKey/DSA.py -> build/lib.linux-x86_64-2.7/Crypto/PublicKey
copying lib/Crypto/PublicKey/_slowmath.py -> build/lib.linux-x86_64-2.7/Crypto/PublicKey
copying lib/Crypto/PublicKey/_DSA.py -> build/lib.linux-x86_64-2.7/Crypto/PublicKey
copying lib/Crypto/PublicKey/qNEW.py -> build/lib.linux-x86_64-2.7/Crypto/PublicKey
copying lib/Crypto/PublicKey/_RSA.py -> build/lib.linux-x86_64-2.7/Crypto/PublicKey
copying lib/Crypto/PublicKey/pubkey.py -> build/lib.linux-x86_64-2.7/Crypto/PublicKey
copying lib/Crypto/PublicKey/ElGamal.py -> build/lib.linux-x86_64-2.7/Crypto/PublicKey
running build_ext
warning: GMP library not found; Not building Crypto.PublicKey._fastmath.
building 'Crypto.Hash.MD2' extension
creating build/temp.linux-x86_64-2.7
creating build/temp.linux-x86_64-2.7/src
gcc -pthread -fno-strict-aliasing -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 -m64 -mtune=generic -D_GNU_SOURCE -fPIC -fwrapv -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 -m64 -mtune=generic -D_GNU_SOURCE -fPIC -fwrapv -fPIC -std=c99 -O3 -fomit-frame-pointer -Isrc/ -I/usr/include/python2.7 -c src/MD2.c -o build/temp.linux-x86_64-2.7/src/MD2.o
src/MD2.c:31:20: fatal error: Python.h: No such file or directory
compilation terminated.
error: command 'gcc' failed with exit status 1

can anyone please let me know how to solve this and install pycrypto-2.3 successfully on my machine.
","In some versions of Fedora it's necessary to install the following package:
dnf install deluge.
","3668","<python><pycrypto>","0","0","4","2016-09-06 00:50:26","","0","","","","","2012-08-08 09:46:08",""
"21709817","Printing .pem key DER form in python","I would like to print out the binary form (not sure if this is how I would refer to it) of a .pem key using python. To clarify, I want to do in python what this unix command would print out:
cat privateKey.pem | openssl rsa -pubout -outform DER

I can't just call this command using subprocess because I want it to work on Windows. I've looked at the M2Crypto and PyCrypto libraries, and with the M2Crypto library I am able to load the key using
from M2Crypto import RSA
rsaKey = RSA.load_key('privateKey.pem')

But I don't see any methods of rsaKey that print out the binary form.
Edit:
Here's what I have so far:
import M2Crypto
key = M2Crypto.RSA.load_key('key.pem')
bio = M2Crypto.BIO.MemoryBuffer()

key.save_key_der_bio(bio)

der = bio.read()

But der isn't the same as what openssl printed out. I piped the output of openssl into hexdump to compare them.
","I figured it out. So the unix command 
cat privateKey.pem | openssl rsa -pubout -outform DER

Is actually printing out the DER form of the public key.
Here is what I had to do, using the M2Crypto library:
import M2Crypto
privatekey = M2Crypto.RSA.load_key('privatekey.pem')

bio = M2Crypto.BIO.MemoryBuffer()
privatekey.save_pub_key_bio(bio)

pubkey = bio.read()
pubkey = ''.join(pubkey.split('\n')[1:-2]) # remove -----BEGIN PUB KEY... lines and concatenate
der = base64.b64decode(pubkey)

This is the form that I wanted. For some reason, if I did
pubkey = M2Crypto.RSA.load_pub_key_bio(bio)
pubkey.save_key_der_bio(bio)
der = bio.read()

It gave me the wrong answer.
","3586","<python><rsa><private-key><pycrypto><m2crypto>","1","1","2","2014-02-12 12:05:50","21727490","4","1","2451889","","2014-02-11 19:17:57","2014-02-11 18:14:38",""
"21709817","Printing .pem key DER form in python","I would like to print out the binary form (not sure if this is how I would refer to it) of a .pem key using python. To clarify, I want to do in python what this unix command would print out:
cat privateKey.pem | openssl rsa -pubout -outform DER

I can't just call this command using subprocess because I want it to work on Windows. I've looked at the M2Crypto and PyCrypto libraries, and with the M2Crypto library I am able to load the key using
from M2Crypto import RSA
rsaKey = RSA.load_key('privateKey.pem')

But I don't see any methods of rsaKey that print out the binary form.
Edit:
Here's what I have so far:
import M2Crypto
key = M2Crypto.RSA.load_key('key.pem')
bio = M2Crypto.BIO.MemoryBuffer()

key.save_key_der_bio(bio)

der = bio.read()

But der isn't the same as what openssl printed out. I piped the output of openssl into hexdump to compare them.
","I would do this:
from Crypto.PublicKey import RSA

key = RSA.importKey(open(""privatekey.pem"").read())
der = key.publickey().exportKey(""DER"")

","3586","<python><rsa><private-key><pycrypto><m2crypto>","1","4","2","2014-02-12 12:05:50","21727490","4","1","2451889","","2014-02-11 19:17:57","2014-02-11 18:14:38",""
"6332653","Paramiko and Crypto Import Error: import winrandom (python)","Running on a windows machine python 2.7, whenever I try to run my script using the command line I receive the following error.
import winrandom
ImportError: DLL load failed: The specified module could not be found.

But this error does not happen when I run my script through a python IDE
","Make sure your PATH correctly includes your python2.7 and python2.7\Scripts directories.
Snippet on settings environment variables (if needed):
http://msdn.microsoft.com/en-us/library/ms682653%28v=vs.85%29.aspx
","3582","<python><paramiko><pycrypto>","1","2","1","2016-04-14 08:21:11","","0","","","","","2011-06-13 15:37:22",""
"2511126","AES encryption with PyCrypto and decryption with mcrypt","For some sensitive data I decided to store it AES-encrypted on disc. I've implemented the encryption using PyCrypto.
Furthermore, the data is important, and the stored encrypted data will be my only copy of it (backups aside), so I looked for some means of retrieving the data without using PyCrypto to have a fallback given the possibility that PyCrypto is not longer available to me (for whatever reason that may be).
I thought mcrypt could be an option.
This is my test case to get some ciphertext written:
import Crypto.Cipher.AES
import sys

pwd  = 'qwertzuiopasdfgh'
mode = Crypto.Cipher.AES.MODE_CBC
aes  = Crypto.Cipher.AES.new( pwd, mode )
text = 'asdfghjklyxcvbnm'
sys.stdout.write( aes.encrypt( text ) )

I redirected the output to a file out.nc and tried decryption by
mcrypt -d -b -k qwertzuiopasdfgh -a rijndael-128 -m CBC out.nc

but the resulting file out has zero bytes size, unfortunately.
I hope there is a combination of options to mcrypt to make this work…
","Why is it important to be able to recover without PyCrypto? You can simply fire up a VM with the old OS and the old release of PyCrypto, export your data, and re-encrypt with a different algorithm and implementation.
","3563","<python><encryption><aes><mcrypt><pycrypto>","3","-1","2","2019-01-30 21:55:24","2512083","2","1","","","","2010-03-24 20:25:04",""
"2511126","AES encryption with PyCrypto and decryption with mcrypt","For some sensitive data I decided to store it AES-encrypted on disc. I've implemented the encryption using PyCrypto.
Furthermore, the data is important, and the stored encrypted data will be my only copy of it (backups aside), so I looked for some means of retrieving the data without using PyCrypto to have a fallback given the possibility that PyCrypto is not longer available to me (for whatever reason that may be).
I thought mcrypt could be an option.
This is my test case to get some ciphertext written:
import Crypto.Cipher.AES
import sys

pwd  = 'qwertzuiopasdfgh'
mode = Crypto.Cipher.AES.MODE_CBC
aes  = Crypto.Cipher.AES.new( pwd, mode )
text = 'asdfghjklyxcvbnm'
sys.stdout.write( aes.encrypt( text ) )

I redirected the output to a file out.nc and tried decryption by
mcrypt -d -b -k qwertzuiopasdfgh -a rijndael-128 -m CBC out.nc

but the resulting file out has zero bytes size, unfortunately.
I hope there is a combination of options to mcrypt to make this work…
","I think the problem may lay in the fact that you don't supply an IV for CBC mode and without an IV maybe mCrypt and PyCrypto handle it differently by using different default IVs. I have seen some implementations (phpseclib for instance) use and IV of 16 null bytes by default. mcrypt might not do this.
","3563","<python><encryption><aes><mcrypt><pycrypto>","3","1","2","2019-01-30 21:55:24","2512083","2","1","","","","2010-03-24 20:25:04",""
"17212467","Python Crypto installation issue","I cannot install newest Python Crypto module on Ubuntu 10.04 LTS. I removed the old 2.0.1 Crypto version with sudo apt-get remove python-crypto and proceeded to install version 2.6.
I downloaded newest Crypto zip and ran the installer with sudo python setup.py install, but I get:
running install  
running build  
running build_py  
running build_ext  
running build_configure  
warning: GMP or MPIR library not found; Not building Crypto.PublicKey._fastmath.  
building 'Crypto.Cipher._AESNI' extension  
gcc -std=gnu99 -fno-strict-aliasing -g -fwrapv -O2 -Wall -Wstrict-prototypes -g -O2 -Wall -Wextra -Wno-missing-field-initializers -Wno-unused-parameter -DHAVE_CONFIG_H -fPIC -Isrc/ -I/usr/include/python2.6 -c src/AESNI.c -o build/temp.linux-i686-2.6/src/AESNI.o -maes
In file included from /usr/lib/gcc/i486-linux-gnu/4.4.3/include/wmmintrin.h:31,
                 from src/AESNI.c:26:  
/usr/lib/gcc/i486-linux-gnu/4.4.3/include/emmintrin.h: In function \u2018aes128_keyexpand\u2019:  
/usr/lib/gcc/i486-linux-gnu/4.4.3/include/emmintrin.h:1380: error: the last argument must be an 8-bit immediate  
error: command 'gcc' failed with exit status 1  

I installed python-dev, but it had no effect.
apt-get install python-crypto just installs Crypto 2.0.1.
My Python version is 2.6.5.
","If you have i.e.
deb-src http://archive.ubuntu.com/ubuntu quantal main

in your /etc/apt/sources.list then You don't need to download zip file you can download source using apt-get source like;
apt-get install debhelper
apt-get source python-crypto
apt-get build-dep python-crypto

tar xvf python-crypto*debian*tar.gz
cd python-crypto*
debian/rules binary

You can modify your debian/rules file to add custom flags if you need before run 
debian/rules binary

After build is complete you can install packages using 
dpkg -i *.deb

It's also possible that your distro version doesn't meet requirements for installing latest vesion of python-crypto.
","3554","<python><linux><ubuntu><pycrypto>","1","0","1","2013-06-20 11:47:54","","0","","2139775","","2013-06-20 11:40:57","2013-06-20 11:30:00",""
"43987779","python: module 'Crypto.Cipher.AES' has no attribute 'MODE_CCM' even though pycrypto installed","pycrypot is installed (when I run pip list one of the result is pycrypto (2.6.1))
and it works but when I would like to use the MODE_CCM it returns: module 'Crypto.Cipher.AES' has no attribute 'MODE_CCM'
Any clue?
My Python version: Python 3.5.2 :: Anaconda 4.2.0 (x86_64)
","according to https://gist.github.com/jbdatko/7425443 the newest version of pycrypto does not have the CCM mode.
I solved the problem by installing pip install pycryptodomex and replacing the Crypto package withCryptodome
","3543","<python><packages><pycrypto>","4","6","2","2019-01-28 19:18:24","43987858","0","","","","","2017-05-15 19:56:48",""
"43987779","python: module 'Crypto.Cipher.AES' has no attribute 'MODE_CCM' even though pycrypto installed","pycrypot is installed (when I run pip list one of the result is pycrypto (2.6.1))
and it works but when I would like to use the MODE_CCM it returns: module 'Crypto.Cipher.AES' has no attribute 'MODE_CCM'
Any clue?
My Python version: Python 3.5.2 :: Anaconda 4.2.0 (x86_64)
","You can use dir(AES) to see the list of supported MODE_xxx.
","3543","<python><packages><pycrypto>","4","1","2","2019-01-28 19:18:24","43987858","0","","","","","2017-05-15 19:56:48",""
"10838061","Blowfish decryption in python of string encoded by javax.crypto","Using the code found at https://raw.github.com/usefulfor/usefulfor/master/security/JBoss.java, I did thefollowing:
bash-3.2$ java -cp . JBoss -e testpython
-27038292d345798947e2852756afcf0a
bash-3.2$ java -cp . JBoss -d -27038292d345798947e2852756afcf0a
testpython

However, I can't for the life of me, figure out how to decrypt the string '27038292d345798947e2852756afcf0a' using pycrypto in python.  My understanding is that the Java code is using Blowfish, and the phrase 'jaas is the way' as the key for the cipher.  But I can't make any sense of how to do this in python.  The following results in mostly unprintable garbage:
import Crypto
from Crypto.Cipher import Blowfish
from base64 import b64encode, b64decode

bs        = Blowfish.block_size
key       = 'jaas is the way'
plaintext = b'27038292d345798947e2852756afcf0a'
iv        = '\0' * 8

c1 = Blowfish.new(key, Blowfish.MODE_ECB)
c2 = Blowfish.new(key, Blowfish.MODE_CBC, iv)
c3 = Blowfish.new(key, Blowfish.MODE_CFB, iv)
c4 = Blowfish.new(key, Blowfish.MODE_OFB, iv)

msg1 = c1.decrypt(plaintext)
msg2 = c2.decrypt(plaintext)
msg3 = c3.decrypt(plaintext)
msg4 = c4.decrypt(plaintext)

print ""msg1 = %s\n"" % msg1
print ""msg2 = %s\n"" % msg2 
print ""msg3 = %s\n"" % msg3 
print ""msg4 = %s\n"" % msg4 

What am I missing ?
thanks.
","First of all, that Java example code is very bad. It outputs the ciphertext as an integer, whereas ciphertext should remain a binary string. The reason is that an integer can be represented in an infinite number of binary encodings. For instance, the number one can be '0x01' (1 byte), '0x0001' (2 bytes), and so forth. When you are dealing with cryptographic functions, you must be extremely precise with the representation.
Additionally, the example uses the default values of the javax.crypto API, which are not described anywhere. So it is really trial and error.
For the solution, you must know how to convert negative integers to hex strings in Python. In this case, you don't need a hex string, but its byte representation. The concept is the same though. I use PyCrypto's long_to_bytes to convert a positive integer (of arbitrary length) to a byte string.
from Crypto.Cipher import Blowfish
from Crypto.Util.number import long_to_bytes

def tobytestring(val, nbits):
    """"""Convert an integer (val, even negative) to its byte string representation.
    Parameter nbits is the length of the desired byte string (in bits).
    """"""
    return long_to_bytes((val + (1 << nbits)) % (1 << nbits), nbits/8)

key = b'jaas is the way'
c1  = Blowfish.new(key, Blowfish.MODE_ECB)

fromjava = b""-27038292d345798947e2852756afcf0a""
# We don't know the real length of the ciphertext, assume it is 16 bytes
ciphertext = tobytestring(int(fromjava, 16), 16*8)
print c1.decrypt(ciphertext)

The output is:
'testpython\x06\x06\x06\x06\x06\x06'

From that you see that javax.crypto also adds PKCS#5 padding, which you need to remove by yourself. That is trivial to do though.
However, the real solution to your problem is to do Java encryption in a better way. The Python code will be greatly simplified. 
","3539","<java><python><encryption><pycrypto><javax.crypto>","3","5","2","2013-08-02 13:20:05","","1","3","482262","","2012-06-01 06:24:18","2012-05-31 17:04:57",""
"10838061","Blowfish decryption in python of string encoded by javax.crypto","Using the code found at https://raw.github.com/usefulfor/usefulfor/master/security/JBoss.java, I did thefollowing:
bash-3.2$ java -cp . JBoss -e testpython
-27038292d345798947e2852756afcf0a
bash-3.2$ java -cp . JBoss -d -27038292d345798947e2852756afcf0a
testpython

However, I can't for the life of me, figure out how to decrypt the string '27038292d345798947e2852756afcf0a' using pycrypto in python.  My understanding is that the Java code is using Blowfish, and the phrase 'jaas is the way' as the key for the cipher.  But I can't make any sense of how to do this in python.  The following results in mostly unprintable garbage:
import Crypto
from Crypto.Cipher import Blowfish
from base64 import b64encode, b64decode

bs        = Blowfish.block_size
key       = 'jaas is the way'
plaintext = b'27038292d345798947e2852756afcf0a'
iv        = '\0' * 8

c1 = Blowfish.new(key, Blowfish.MODE_ECB)
c2 = Blowfish.new(key, Blowfish.MODE_CBC, iv)
c3 = Blowfish.new(key, Blowfish.MODE_CFB, iv)
c4 = Blowfish.new(key, Blowfish.MODE_OFB, iv)

msg1 = c1.decrypt(plaintext)
msg2 = c2.decrypt(plaintext)
msg3 = c3.decrypt(plaintext)
msg4 = c4.decrypt(plaintext)

print ""msg1 = %s\n"" % msg1
print ""msg2 = %s\n"" % msg2 
print ""msg3 = %s\n"" % msg3 
print ""msg4 = %s\n"" % msg4 

What am I missing ?
thanks.
","This helps me
private byte[] encrypt(String key, String plainText) throws GeneralSecurityException {

    SecretKey secret_key = new SecretKeySpec(key.getBytes(), ALGORITM);

    Cipher cipher = Cipher.getInstance(ALGORITM);
    cipher.init(Cipher.ENCRYPT_MODE, secret_key);

    return cipher.doFinal(plainText.getBytes());
}

hope this will be useful for you, more http://dexxtr.com/post/57145943236/blowfish-encrypt-and-decrypt-in-java-android
","3539","<java><python><encryption><pycrypto><javax.crypto>","3","0","2","2013-08-02 13:20:05","","1","3","482262","","2012-06-01 06:24:18","2012-05-31 17:04:57",""
"7896541","Trying to install PyCrypto on Ubuntu via Buildout, src/config.h: No such file or directory","I'm trying to install PyCrypto on an Ubuntu instance via Buildout (via easy_install) and I'm getting the following error:
Getting distribution for 'pycrypto>=1.9'.
Running easy_install:
/usr/bin/python ""-S"" ""-c"" ""import sys,os;p = sys.path[:];import site;sys.path[:] = p;    [sys.modules.pop(k) for k, v in sys.modules.items() if hasattr(v, '__path__') and len(v.__path__)==1 and not os.path.exists(os.path.join(v.__path__[0],'__init__.py'))];from setuptools.command.easy_install import main;main()"" ""-mUNxd"" ""/opt/rocktech/buildout/cache/eggs/tmppKIfK7"" ""-Z"" ""/opt/rocktech/buildout/cache/download/dist/pycrypto-2.4.tar.gz""
path=/opt/rocktech/buildout/cache/eggs/setuptools-0.6c12dev_r88846-py2.6.egg

Processing pycrypto-2.4.tar.gz
Running pycrypto-2.4/setup.py -q bdist_egg --dist-dir /tmp/easy_install-dD_8Pu/pycrypto-    2.4/egg-dist-tmp-_d3xDl
error: Setup script exited with error: src/config.h: No such file or directory
An error occurred when trying to install pycrypto 2.4. Look above this message for any     errors that were output by easy_install.
While:
  Installing django.
  Getting distribution for 'pycrypto>=1.9'.
Error: Couldn't install: pycrypto 2.4

Any idea on what's causing this?
Notably, I had the same issue locally on Snow Leopard and I was able to fix it by downloading the code directly and running python manage.py build and python manage.py install by hand. I want to avoid that here because I'm deploying to a dozen servers.
","It appears this is an open issue. The workaround is to use pip instead or stick to PyCrypto 2.3. https://bugs.launchpad.net/pycrypto/+bug/881130
EDIT: This bug was fixed in PyCrypto 2.4.1.
","3527","<python><ubuntu><pycrypto>","3","1","4","2012-01-22 04:46:42","","2","1","","","","2011-10-25 22:14:26",""
"7896541","Trying to install PyCrypto on Ubuntu via Buildout, src/config.h: No such file or directory","I'm trying to install PyCrypto on an Ubuntu instance via Buildout (via easy_install) and I'm getting the following error:
Getting distribution for 'pycrypto>=1.9'.
Running easy_install:
/usr/bin/python ""-S"" ""-c"" ""import sys,os;p = sys.path[:];import site;sys.path[:] = p;    [sys.modules.pop(k) for k, v in sys.modules.items() if hasattr(v, '__path__') and len(v.__path__)==1 and not os.path.exists(os.path.join(v.__path__[0],'__init__.py'))];from setuptools.command.easy_install import main;main()"" ""-mUNxd"" ""/opt/rocktech/buildout/cache/eggs/tmppKIfK7"" ""-Z"" ""/opt/rocktech/buildout/cache/download/dist/pycrypto-2.4.tar.gz""
path=/opt/rocktech/buildout/cache/eggs/setuptools-0.6c12dev_r88846-py2.6.egg

Processing pycrypto-2.4.tar.gz
Running pycrypto-2.4/setup.py -q bdist_egg --dist-dir /tmp/easy_install-dD_8Pu/pycrypto-    2.4/egg-dist-tmp-_d3xDl
error: Setup script exited with error: src/config.h: No such file or directory
An error occurred when trying to install pycrypto 2.4. Look above this message for any     errors that were output by easy_install.
While:
  Installing django.
  Getting distribution for 'pycrypto>=1.9'.
Error: Couldn't install: pycrypto 2.4

Any idea on what's causing this?
Notably, I had the same issue locally on Snow Leopard and I was able to fix it by downloading the code directly and running python manage.py build and python manage.py install by hand. I want to avoid that here because I'm deploying to a dozen servers.
","You can also download pycrypto-2.4.tar.gz unpack it and run (as root):
./configure
python setup.py install

After that pycrypto will be installed into /usr/lib/python2.7/site-packages/Crypto. I tested it on 'easy_install pysnmp'.
","3527","<python><ubuntu><pycrypto>","3","0","4","2012-01-22 04:46:42","","2","1","","","","2011-10-25 22:14:26",""
"7896541","Trying to install PyCrypto on Ubuntu via Buildout, src/config.h: No such file or directory","I'm trying to install PyCrypto on an Ubuntu instance via Buildout (via easy_install) and I'm getting the following error:
Getting distribution for 'pycrypto>=1.9'.
Running easy_install:
/usr/bin/python ""-S"" ""-c"" ""import sys,os;p = sys.path[:];import site;sys.path[:] = p;    [sys.modules.pop(k) for k, v in sys.modules.items() if hasattr(v, '__path__') and len(v.__path__)==1 and not os.path.exists(os.path.join(v.__path__[0],'__init__.py'))];from setuptools.command.easy_install import main;main()"" ""-mUNxd"" ""/opt/rocktech/buildout/cache/eggs/tmppKIfK7"" ""-Z"" ""/opt/rocktech/buildout/cache/download/dist/pycrypto-2.4.tar.gz""
path=/opt/rocktech/buildout/cache/eggs/setuptools-0.6c12dev_r88846-py2.6.egg

Processing pycrypto-2.4.tar.gz
Running pycrypto-2.4/setup.py -q bdist_egg --dist-dir /tmp/easy_install-dD_8Pu/pycrypto-    2.4/egg-dist-tmp-_d3xDl
error: Setup script exited with error: src/config.h: No such file or directory
An error occurred when trying to install pycrypto 2.4. Look above this message for any     errors that were output by easy_install.
While:
  Installing django.
  Getting distribution for 'pycrypto>=1.9'.
Error: Couldn't install: pycrypto 2.4

Any idea on what's causing this?
Notably, I had the same issue locally on Snow Leopard and I was able to fix it by downloading the code directly and running python manage.py build and python manage.py install by hand. I want to avoid that here because I'm deploying to a dozen servers.
","Even with the newest pycrypto I keep having this problem, so I just run ./configure and the src/config.h is created, so now just run pip or, easy_install or, setup.py... 
","3527","<python><ubuntu><pycrypto>","3","2","4","2012-01-22 04:46:42","","2","1","","","","2011-10-25 22:14:26",""
"7896541","Trying to install PyCrypto on Ubuntu via Buildout, src/config.h: No such file or directory","I'm trying to install PyCrypto on an Ubuntu instance via Buildout (via easy_install) and I'm getting the following error:
Getting distribution for 'pycrypto>=1.9'.
Running easy_install:
/usr/bin/python ""-S"" ""-c"" ""import sys,os;p = sys.path[:];import site;sys.path[:] = p;    [sys.modules.pop(k) for k, v in sys.modules.items() if hasattr(v, '__path__') and len(v.__path__)==1 and not os.path.exists(os.path.join(v.__path__[0],'__init__.py'))];from setuptools.command.easy_install import main;main()"" ""-mUNxd"" ""/opt/rocktech/buildout/cache/eggs/tmppKIfK7"" ""-Z"" ""/opt/rocktech/buildout/cache/download/dist/pycrypto-2.4.tar.gz""
path=/opt/rocktech/buildout/cache/eggs/setuptools-0.6c12dev_r88846-py2.6.egg

Processing pycrypto-2.4.tar.gz
Running pycrypto-2.4/setup.py -q bdist_egg --dist-dir /tmp/easy_install-dD_8Pu/pycrypto-    2.4/egg-dist-tmp-_d3xDl
error: Setup script exited with error: src/config.h: No such file or directory
An error occurred when trying to install pycrypto 2.4. Look above this message for any     errors that were output by easy_install.
While:
  Installing django.
  Getting distribution for 'pycrypto>=1.9'.
Error: Couldn't install: pycrypto 2.4

Any idea on what's causing this?
Notably, I had the same issue locally on Snow Leopard and I was able to fix it by downloading the code directly and running python manage.py build and python manage.py install by hand. I want to avoid that here because I'm deploying to a dozen servers.
","Just as an update, PyCrypto has since resolved this issue as you can see from the ticket being marked ""Fix Resolved"": https://bugs.launchpad.net/pycrypto/+bug/881130. Just an FYI, in case someone comes across this later. This ""should"" be a non-issue now.
","3527","<python><ubuntu><pycrypto>","3","1","4","2012-01-22 04:46:42","","2","1","","","","2011-10-25 22:14:26",""
"7835974","Is PyCrypto safe and reliable to use?","I am planning on using PyCrypto for a project and I want to know whether PyCrypto is safe and reliable enough to use. How can I ensure that  PyCrypto is encrypting data correctly according to the various encryption algorithms such as RSA and AES?
","Note that I am not an expert in crypto either. That said, I took a quick look at the PyCrypto code on github and at their mailing list. One of the things that gives me confidence is that there is good, expert contributions to the code base. The developers acknowledge insecurities and work to correct them.
If you have a specific use case that you need to be implemented securely, look at their code and ask on their list. Since they seem to leverage C/C++ libraries to do the work in many cases, you can check out the reputation of the base libraries directly.
","3522","<python><django><pycrypto>","13","4","3","2017-01-05 13:13:11","8373548","6","4","992173","","2011-10-21 09:17:51","2011-10-20 12:33:53",""
"7835974","Is PyCrypto safe and reliable to use?","I am planning on using PyCrypto for a project and I want to know whether PyCrypto is safe and reliable enough to use. How can I ensure that  PyCrypto is encrypting data correctly according to the various encryption algorithms such as RSA and AES?
","It depends.
Some parts of PyCrypto are really good.  For example, the API for Crypto.Random (introduced in PyCrypto 2.1) was designed to be pretty foolproof, and the underlying algorithm it uses (Fortuna) was also designed to be pretty foolproof.
Other parts are just implementations of low-level crypto primitives, so it works, but you have to know what you are doing to use them correctly.  For example, Crypto.PublicKey.RSA doesn't implement the full RSA PKCS#1 standard (which is what most people think about when they talk about ""RSA"").  It only implements the basic RSA primitive (m^e mod n and c^d mod n), and you still have to provide your own PKCS#1 implementation.
The best way to ensure that PyCrypto is encrypting your data correctly (without reading the source code, which I encourage everyone to do) is to use a standard protocol and/or message format, and test that your code interoperates with other implementations.  If you're making up your own message format (which you probably shouldn't do anyway), then you need to be very careful to ensure that PyCrypto is actually doing everything that you think it's doing.
Disclaimer: I'm the current PyCrypto maintainer, so my opinions shouldn't be considered an independent review.
Update: PyCrypto v2.5 and later now include proper RSA PKCS#1 encryption and signature implementations.  See the API documentation for Crypto.Cipher.PKCS1_OAEP and Crypto.Signature.PKCS1_PSS for details.
","3522","<python><django><pycrypto>","13","19","3","2017-01-05 13:13:11","8373548","6","4","992173","","2011-10-21 09:17:51","2011-10-20 12:33:53",""
"7835974","Is PyCrypto safe and reliable to use?","I am planning on using PyCrypto for a project and I want to know whether PyCrypto is safe and reliable enough to use. How can I ensure that  PyCrypto is encrypting data correctly according to the various encryption algorithms such as RSA and AES?
","No. PyCrypto is no longer under active development and the cryptography library should be used instead.
Source: https://github.com/dlitz/pycrypto/issues/173
","3522","<python><django><pycrypto>","13","2","3","2017-01-05 13:13:11","8373548","6","4","992173","","2011-10-21 09:17:51","2011-10-20 12:33:53",""
"23800972","Python 3 - Pycrypto - Read only pinned buffer","So, I'm using Pycrypto to do some AES encryption and I am now porting my Python 2.7 code to Python 3.4. I am encoutering following error which I just cannot get my head around :
TypeError : argument must be read-only pinned buffer, not bytearray.

This occurs when I am trying to encrypt the content of a variable apparently. The exact line is :
token = b""\0"" * 16
final_token = cipher.encrypt(token)

(token is obviously not 000... but i'm simplifying)
I have searched the internets for a solution and found that this error occured a lot in the websocket lib in python 2.6, but the solution (using memoryview(token) instead of token) doesn't help. Can someone explain what is happening there ? I am positively lost...
","As Pycrypto uses the encode method, it requires a s# read-only buffer. The buffer should not be resizeable, which isn't the case of bytearray. Such a buffer can be built by using the bytes function. Python 2 str was already immutable and so it was aceptable. The new line should be :
final_token = cipher.encrypt(bytes(token))

(all credits for this answer goes to @eryksun, see comments)
","3512","<python><python-3.x><types><pycrypto>","3","5","1","2014-05-22 10:00:22","23803590","5","","2623495","","2014-05-22 09:47:22","2014-05-22 07:58:49",""
"25571504","PyCrypto Errors with .p12 file from Google Developer Console","I am trying to implement Google Identity Toolkit (gitkitv3) in GAE Python. After a user signs in on the website, I get the following errors: 
'PKCS12 format is not supported by the PyCrpto library. '
NotImplementedError: PKCS12 format is not supported by the PyCrpto library. Try converting to a ""PEM"" (openssl pkcs12 -in xxxxx.p12 -nodes -nocerts > privatekey.pem) or using PyOpenSSL if native code is an option.

Based on a SO reply, I ran the following commands on my x.p12 file and used the generated privatekey.pem file instead: 
openssl pkcs12 -passin pass:notasecret -in x.p12 -nocerts -passout pass:notasecret -out key.pem 
openssl pkcs8 -nocrypt -in key.pem -passin pass:notasecret -topk8 -out privatekey.pem

Now, I am getting the following error: 
'X509 certs are not supported by the PyCrypto library. '
NotImplementedError: X509 certs are not supported by the PyCrypto library. Try using PyOpenSSL if native code is an option.

I had downloaded the x.p12 from Google Developer Console. How to fix this error? Please help 

ANY WORKAROUND? 
Do I necessarily need this file .p12 file or can I copy its contents to a global variable and use it (as a workaround)?
Could someone please explain me the actual use of this file?

UPDATE
Looks like PyCrypto library provided by Google is extremely limited and lacks capability to support X509. 
","Installing pyopenssl fixed the issue for me:
pip install pyopenssl

","3484","<google-app-engine><oauth-2.0><google-oauth><pycrypto><oauth2client>","3","8","1","2015-11-26 22:09:57","","16","4","-1","","2017-05-23 11:54:36","2014-08-29 15:30:53",""
"24152521","pycrypto installation: configure error: cannot run C compiled programs","Please be gentle on me.  I have searched the site, and I know there is another answer to this exact question, but the answers posted there aren't working for me.  
I am trying to install pycrypto, so that I can get paramiko to work.  Paramiko is failing because of a missing pycrypto module.  I have tried using pip install pycrypto which succeeds, but does not cure the problem.
I have tried installing a binary version of pycrypto and that doesn't solve the problem.
Now I am trying to build pycrypto.  I have cygwin64 and mingw installed on my machine.  The approach that gets the farthest is
python setup.py build --compiler=mingw32

This gets to an error, 
checking whether we are cross compiling... configure: error: in `/cygdrive/c/Python27/pycrypto-2.6.1':
configure: error: cannot run C compiled programs.

The other answer suggests removing spaces in the path.  I have tried reducing the path to simply 
c:\mingw;c:\python2.7;c:\cygwin64\bin

with no change to the result?  
Does anyone have a fix they can point me to?  Thank you.  The overall goal is to get paramiko to work.  The paramiko error is 
ImportError: No module named Crypto.PublicKey

","I had this same problem in Chrubuntu 14.04, and solved it by first doing:
apt-get install python-dev

...to fix something to do with header files, and then:
pip install pycrypto

...to solve the actual problem with paramiko.  However, then paramiko had a problem with something ecdsa, and 'pip install paramiko' said everything was already installed, no problem, so I did 'pip uninstall paramiko' followed by 'pip install paramiko', and now I can import paramiko in python without a problem.
There is probably a more elegant way to solve that last bit but this worked well enough for me.
","3345","<python><paramiko><mingw32><pycrypto>","3","0","4","2018-09-11 20:19:02","","0","","248296","","2015-11-27 14:46:53","2014-06-10 23:37:40",""
"24152521","pycrypto installation: configure error: cannot run C compiled programs","Please be gentle on me.  I have searched the site, and I know there is another answer to this exact question, but the answers posted there aren't working for me.  
I am trying to install pycrypto, so that I can get paramiko to work.  Paramiko is failing because of a missing pycrypto module.  I have tried using pip install pycrypto which succeeds, but does not cure the problem.
I have tried installing a binary version of pycrypto and that doesn't solve the problem.
Now I am trying to build pycrypto.  I have cygwin64 and mingw installed on my machine.  The approach that gets the farthest is
python setup.py build --compiler=mingw32

This gets to an error, 
checking whether we are cross compiling... configure: error: in `/cygdrive/c/Python27/pycrypto-2.6.1':
configure: error: cannot run C compiled programs.

The other answer suggests removing spaces in the path.  I have tried reducing the path to simply 
c:\mingw;c:\python2.7;c:\cygwin64\bin

with no change to the result?  
Does anyone have a fix they can point me to?  Thank you.  The overall goal is to get paramiko to work.  The paramiko error is 
ImportError: No module named Crypto.PublicKey

","I had the same error message when installing pycrypto (although nothing to do with paramiko). The solution for me was:
yum install autoconf
TMPDIR=/home/$USER/tmp
TMP=$TMPDIR
TEMP=$TMPDIR
export TMPDIR TMP TEMP

and then install again:
pip install pocrypto

","3345","<python><paramiko><mingw32><pycrypto>","3","2","4","2018-09-11 20:19:02","","0","","248296","","2015-11-27 14:46:53","2014-06-10 23:37:40",""
"24152521","pycrypto installation: configure error: cannot run C compiled programs","Please be gentle on me.  I have searched the site, and I know there is another answer to this exact question, but the answers posted there aren't working for me.  
I am trying to install pycrypto, so that I can get paramiko to work.  Paramiko is failing because of a missing pycrypto module.  I have tried using pip install pycrypto which succeeds, but does not cure the problem.
I have tried installing a binary version of pycrypto and that doesn't solve the problem.
Now I am trying to build pycrypto.  I have cygwin64 and mingw installed on my machine.  The approach that gets the farthest is
python setup.py build --compiler=mingw32

This gets to an error, 
checking whether we are cross compiling... configure: error: in `/cygdrive/c/Python27/pycrypto-2.6.1':
configure: error: cannot run C compiled programs.

The other answer suggests removing spaces in the path.  I have tried reducing the path to simply 
c:\mingw;c:\python2.7;c:\cygwin64\bin

with no change to the result?  
Does anyone have a fix they can point me to?  Thank you.  The overall goal is to get paramiko to work.  The paramiko error is 
ImportError: No module named Crypto.PublicKey

","I had a similar problem:
pip install --upgrade subprocess32

failed with
configure: error: cannot run C compiled programs

on aws after our admins tightened the settings and mounted tmpfs with the noexec option.
The solution was
TMPDIR=/var/tmp pip install --upgrade subprocess32

","3345","<python><paramiko><mingw32><pycrypto>","3","3","4","2018-09-11 20:19:02","","0","","248296","","2015-11-27 14:46:53","2014-06-10 23:37:40",""
"24152521","pycrypto installation: configure error: cannot run C compiled programs","Please be gentle on me.  I have searched the site, and I know there is another answer to this exact question, but the answers posted there aren't working for me.  
I am trying to install pycrypto, so that I can get paramiko to work.  Paramiko is failing because of a missing pycrypto module.  I have tried using pip install pycrypto which succeeds, but does not cure the problem.
I have tried installing a binary version of pycrypto and that doesn't solve the problem.
Now I am trying to build pycrypto.  I have cygwin64 and mingw installed on my machine.  The approach that gets the farthest is
python setup.py build --compiler=mingw32

This gets to an error, 
checking whether we are cross compiling... configure: error: in `/cygdrive/c/Python27/pycrypto-2.6.1':
configure: error: cannot run C compiled programs.

The other answer suggests removing spaces in the path.  I have tried reducing the path to simply 
c:\mingw;c:\python2.7;c:\cygwin64\bin

with no change to the result?  
Does anyone have a fix they can point me to?  Thank you.  The overall goal is to get paramiko to work.  The paramiko error is 
ImportError: No module named Crypto.PublicKey

","In my case, the /tmp mount point was mounted with the noexec flag. 
For windows with cygwin, I would check the mount point too, as well as dependencies such as the vcredist packages required for python2 and python3, see also Errors while building/installing C module for Python 2.7.
Two solutions for linux:

remount temporarily with the exec flag (very likely requires root/sudo permissions)

e.g.:
sudo mount -o remount,rw,exec /tmp


change the build path to a local mount point

e.g.:
mkdir -p ~/python/tmp
pip install --build ~/python/tmp pycrypto

Note: it's worth looking at the other answers:

verify autoconf and python2-dev or python3-dev packages are installed.

","3345","<python><paramiko><mingw32><pycrypto>","3","3","4","2018-09-11 20:19:02","","0","","248296","","2015-11-27 14:46:53","2014-06-10 23:37:40",""
"2108047","How to add a padding to the data to make it acceptable for AES256 encryption algorithm in pycrypto library","Can someone tell me how to add a padding to the data to make it acceptable for AES256 encryption algorithm in pycrypto library (Python).
Thanks a lot in advance.. :)
","Looking at the documentation, it seems that it's up to you, the library user, to pad the data yourself. The documentation states that the block size for AES is always 16 bytes, so you need to pad the data to a multiple of 16 bytes.
How the padding is done depends on the type of the data. For strings the best approach is probably to encode the string to a specific encoding and then take the length of that encoding. That way you're not relying on all characters being represented by an 8-bit codepoint:
plaintext = data.encode('utf-8')
l = len(plaintext)
ciphertext = cipher.encrypt(plaintext + ((16 - len%16) * PADDING_BYTE))

A similar approach will work when you're data is an array of bytes.
0 should work fine as the PADDING_BYTE, but you need to take care to remove the padding when you're decrypting the data. It might be worth while including the length of the data in the ciphertext, e.g. prepend the length of the data to the plaintext before encryption, but then you need to jump through some hoops to make sure the padding is generated correctly.
Edit: oh yes, just like the RFC GregS links to mentions, the standard way of handling the length problem is the use the length of the padding as the padding byte. I.e. if you need 6 bytes of padding the padding byte is 0x06. Note that if you don't need any padding, you to add a whole block of padding bytes (16 bytes of 0xa0) so that you can recover the message correctly.
","3130","<python><encryption><pycrypto>","6","5","2","2010-01-21 13:54:47","","0","","","","","2010-01-21 09:18:18",""
"2108047","How to add a padding to the data to make it acceptable for AES256 encryption algorithm in pycrypto library","Can someone tell me how to add a padding to the data to make it acceptable for AES256 encryption algorithm in pycrypto library (Python).
Thanks a lot in advance.. :)
","Use a standard padding scheme, such as the scheme outlined in PKCS-5, section 6.1.1 step #4 (replace the 8 in that example with 16 if you are using AES).
","3130","<python><encryption><pycrypto>","6","3","2","2010-01-21 13:54:47","","0","","","","","2010-01-21 09:18:18",""
"9042433","How do I install pycrypto for Python 2.5 on Mac OS 10.6.8?","To prepare my system, I followed the instructions from this blog. The salient point is

From there, follow the defaults until you get to the “Custom Install on ‘Macintosh HD’” screen. Everything is checked but “MAC OS X 10.4 Support” and that is the program that you want to install.

Having that out of the way, I downloaded the PyCrypto tarball, and tried to install it:
$ curl -O http://ftp.dlitz.net/pub/dlitz/crypto/pycrypto/pycrypto-2.5.tar.gz
$ tar xvzf pycrypto-2.5.tar.gz
$ cd pycrypto-2.5
$ python2.5 setup.py install

After building some binaries, I get the following errors at the bottom of the dump:
cc1: error: unrecognized command line option ""-Wno-long-double""
cc1: error: unrecognized command line option ""-Wno-long-double""
lipo: can't figure out the architecture type of: /var/folders/hk/hkor0sZBGkuucGbVfeQgO++++TI/-Tmp-//ccRzz4H0.out
error: command 'gcc' failed with exit status 1

Is there anything I missed during installation?
","I just do pip install pycrypto or easy_install pycrypto.
","3130","<python><macos><pycrypto>","3","0","2","2014-05-20 09:36:50","","0","","366309","","2012-01-28 02:32:46","2012-01-28 02:24:09",""
"9042433","How do I install pycrypto for Python 2.5 on Mac OS 10.6.8?","To prepare my system, I followed the instructions from this blog. The salient point is

From there, follow the defaults until you get to the “Custom Install on ‘Macintosh HD’” screen. Everything is checked but “MAC OS X 10.4 Support” and that is the program that you want to install.

Having that out of the way, I downloaded the PyCrypto tarball, and tried to install it:
$ curl -O http://ftp.dlitz.net/pub/dlitz/crypto/pycrypto/pycrypto-2.5.tar.gz
$ tar xvzf pycrypto-2.5.tar.gz
$ cd pycrypto-2.5
$ python2.5 setup.py install

After building some binaries, I get the following errors at the bottom of the dump:
cc1: error: unrecognized command line option ""-Wno-long-double""
cc1: error: unrecognized command line option ""-Wno-long-double""
lipo: can't figure out the architecture type of: /var/folders/hk/hkor0sZBGkuucGbVfeQgO++++TI/-Tmp-//ccRzz4H0.out
error: command 'gcc' failed with exit status 1

Is there anything I missed during installation?
","What you need to sucessfully install pycrypto on Mac OS X:
ARCHFLAGS=-Wno-error=unused-command-line-argument-hard-error-in-future pip install pycrypto

","3130","<python><macos><pycrypto>","3","0","2","2014-05-20 09:36:50","","0","","366309","","2012-01-28 02:32:46","2012-01-28 02:24:09",""
"47990482","PyCryptoDome : AES-256 giving different output with same key & data","The following code produces a different ciphertext every time I execute it, which shouldn't happen since the key & data being passed is same for every execution.
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad
from base64 import b64encode, b64decode

key = '/I02fMuSSvnouuu+/vyyD7NuSEVDB/0gte/z50dM0b4='
data = 'hello world!'

cipher = AES.new(b64decode(key), AES.MODE_CBC)
padded_data = pad(data.encode(), cipher.block_size)
print(b64encode(padded_data))
# b'aGVsbG8gd29ybGQhBAQEBA=='
ciphertext = cipher.encrypt(padded_data)
print(b64encode(ciphertext))
# b'rEHH0MWIWCWUldjYBco9TA=='
ciphertext = cipher.encrypt(padded_data)
print(b64encode(ciphertext))
# b'FTpLrkZttDxMlpre3Kq8qQ=='

I am actually trying to replicate a sample PHP code to Python, the PHP code gives the same output and my Python code gives different outputs, none of which match the PHP one.
Python version 3.6.x
PyCryptoDome version 3.4.7
","I forgot to pass the iv parameter while creating the cipher object.
It should be something like -
cipher = AES.new(b64decode(key), AES.MODE_CBC, iv=b'0123456789abcdef')

And yeah, as correctly pointed out by Rawing, repeatedly using the same cipher object to encrypt will give different results, but it will always give same output if you reconstruct the cipher object.
cipher = AES.new(b64decode(key), AES.MODE_CBC, iv=b'0123456789abcdef')
padded_data = pad(data.encode(), cipher.block_size)
print(b64encode(padded_data))
# b'aGVsbG8gd29ybGQhBAQEBA=='
ciphertext = cipher.encrypt(padded_data)
print(b64encode(ciphertext))
# b'8G0KL2UiCv7Uo+pKMm9G+A=='
ciphertext = cipher.encrypt(padded_data)
print(b64encode(ciphertext))
# b'tBXcf/Nf6MtxM1ulzNnIlw=='


cipher = AES.new(b64decode(key), AES.MODE_CBC, iv=b'0123456789abcdef')
padded_data = pad(data.encode(), cipher.block_size)
ciphertext = cipher.encrypt(padded_data)
print(b64encode(ciphertext))
# b'8G0KL2UiCv7Uo+pKMm9G+A=='

","3120","<python><python-3.x><aes><pycrypto><pycryptodome>","1","1","2","2018-01-01 14:19:50","47991039","4","","2689986","","2017-12-27 10:48:10","2017-12-27 10:26:33",""
"47990482","PyCryptoDome : AES-256 giving different output with same key & data","The following code produces a different ciphertext every time I execute it, which shouldn't happen since the key & data being passed is same for every execution.
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad
from base64 import b64encode, b64decode

key = '/I02fMuSSvnouuu+/vyyD7NuSEVDB/0gte/z50dM0b4='
data = 'hello world!'

cipher = AES.new(b64decode(key), AES.MODE_CBC)
padded_data = pad(data.encode(), cipher.block_size)
print(b64encode(padded_data))
# b'aGVsbG8gd29ybGQhBAQEBA=='
ciphertext = cipher.encrypt(padded_data)
print(b64encode(ciphertext))
# b'rEHH0MWIWCWUldjYBco9TA=='
ciphertext = cipher.encrypt(padded_data)
print(b64encode(ciphertext))
# b'FTpLrkZttDxMlpre3Kq8qQ=='

I am actually trying to replicate a sample PHP code to Python, the PHP code gives the same output and my Python code gives different outputs, none of which match the PHP one.
Python version 3.6.x
PyCryptoDome version 3.4.7
","Every time you generate with Pycryptodome an AES cipher object in CBC mode, a random IV is created and used. It can be accessed as the attribute called iv (for instance cipher.iv).
The unique (and unpredictable) IV achieves the goal of randomizing the output even if the same message is getting encrypted multiple times (with the same key), which is a piece of information an attacker can often take advantage of.
You don't show the PHP code, but if its output does NOT change every time, it means that the IV is fixed and the code has a security vulnerability.
","3120","<python><python-3.x><aes><pycrypto><pycryptodome>","1","4","2","2018-01-01 14:19:50","47991039","4","","2689986","","2017-12-27 10:48:10","2017-12-27 10:26:33",""
"4339536","pycrypto is down? how to install pycrypto?","The following is what happens:
$ sudo easy_install pycrypto
Searching for pycrypto
Reading http://pypi.python.org/simple/pycrypto/
Reading http://pycrypto.sourceforge.net
Reading http://www.pycrypto.org/
Download error: [Errno 101] Network is unreachable -- Some packages may not be found!
Reading http://www.amk.ca/python/code/crypto
Reading http://www.pycrypto.org/
Download error: [Errno 101] Network is unreachable -- Some packages may not be found!
Reading http://www.pycrypto.org/
Download error: [Errno 101] Network is unreachable -- Some packages may not be found!
Best match: pycrypto 2.3
Downloading http://www.pycrypto.org/files/pycrypto-2.3.tar.gz
error: Download error for http://www.pycrypto.org/files/pycrypto-2.3.tar.gz: [Errno 101] Network is unreachable

and firefox is unable to connect to pycrypto.org -- no connection can be established. So if pycrypto is down, how do I install pycrypto?
EDIT: I can however ping the site, so I'm not sure how that works:
$ ping pycrypto.org
PING pycrypto.org (76.10.145.51) 56(84) bytes of data.
64 bytes from 76-10-145-51.dsl.ncf.ca (76.10.145.51): icmp_seq=1 ttl=53 time=159 ms
64 bytes from 76-10-145-51.dsl.ncf.ca (76.10.145.51): icmp_seq=2 ttl=53 time=161 ms
64 bytes from 76-10-145-51.dsl.ncf.ca (76.10.145.51): icmp_seq=3 ttl=53 time=160 ms
^C
--- pycrypto.org ping statistics ---
3 packets transmitted, 3 received, 0% packet loss, time 2000ms
rtt min/avg/max/mdev = 159.418/160.471/161.223/0.767 ms

","Google finds a copy of the file in Fedora's code repository.
","3090","<python><pycrypto>","2","0","3","2011-12-04 05:15:52","8373456","1","","","","","2010-12-02 20:29:16",""
"4339536","pycrypto is down? how to install pycrypto?","The following is what happens:
$ sudo easy_install pycrypto
Searching for pycrypto
Reading http://pypi.python.org/simple/pycrypto/
Reading http://pycrypto.sourceforge.net
Reading http://www.pycrypto.org/
Download error: [Errno 101] Network is unreachable -- Some packages may not be found!
Reading http://www.amk.ca/python/code/crypto
Reading http://www.pycrypto.org/
Download error: [Errno 101] Network is unreachable -- Some packages may not be found!
Reading http://www.pycrypto.org/
Download error: [Errno 101] Network is unreachable -- Some packages may not be found!
Best match: pycrypto 2.3
Downloading http://www.pycrypto.org/files/pycrypto-2.3.tar.gz
error: Download error for http://www.pycrypto.org/files/pycrypto-2.3.tar.gz: [Errno 101] Network is unreachable

and firefox is unable to connect to pycrypto.org -- no connection can be established. So if pycrypto is down, how do I install pycrypto?
EDIT: I can however ping the site, so I'm not sure how that works:
$ ping pycrypto.org
PING pycrypto.org (76.10.145.51) 56(84) bytes of data.
64 bytes from 76-10-145-51.dsl.ncf.ca (76.10.145.51): icmp_seq=1 ttl=53 time=159 ms
64 bytes from 76-10-145-51.dsl.ncf.ca (76.10.145.51): icmp_seq=2 ttl=53 time=161 ms
64 bytes from 76-10-145-51.dsl.ncf.ca (76.10.145.51): icmp_seq=3 ttl=53 time=160 ms
^C
--- pycrypto.org ping statistics ---
3 packets transmitted, 3 received, 0% packet loss, time 2000ms
rtt min/avg/max/mdev = 159.418/160.471/161.223/0.767 ms

","Softpedia also has a copy of the file:
http://mac.softpedia.com/get/Development/Libraries/PyCrypto.shtml
Once you have the archive, I believe you should be able to install it with
$ sudo easy_install pycrypto-2.3.tar.gz

(I used pip in my case so the line above isn't confirmed.)
","3090","<python><pycrypto>","2","2","3","2011-12-04 05:15:52","8373456","1","","","","","2010-12-02 20:29:16",""
"4339536","pycrypto is down? how to install pycrypto?","The following is what happens:
$ sudo easy_install pycrypto
Searching for pycrypto
Reading http://pypi.python.org/simple/pycrypto/
Reading http://pycrypto.sourceforge.net
Reading http://www.pycrypto.org/
Download error: [Errno 101] Network is unreachable -- Some packages may not be found!
Reading http://www.amk.ca/python/code/crypto
Reading http://www.pycrypto.org/
Download error: [Errno 101] Network is unreachable -- Some packages may not be found!
Reading http://www.pycrypto.org/
Download error: [Errno 101] Network is unreachable -- Some packages may not be found!
Best match: pycrypto 2.3
Downloading http://www.pycrypto.org/files/pycrypto-2.3.tar.gz
error: Download error for http://www.pycrypto.org/files/pycrypto-2.3.tar.gz: [Errno 101] Network is unreachable

and firefox is unable to connect to pycrypto.org -- no connection can be established. So if pycrypto is down, how do I install pycrypto?
EDIT: I can however ping the site, so I'm not sure how that works:
$ ping pycrypto.org
PING pycrypto.org (76.10.145.51) 56(84) bytes of data.
64 bytes from 76-10-145-51.dsl.ncf.ca (76.10.145.51): icmp_seq=1 ttl=53 time=159 ms
64 bytes from 76-10-145-51.dsl.ncf.ca (76.10.145.51): icmp_seq=2 ttl=53 time=161 ms
64 bytes from 76-10-145-51.dsl.ncf.ca (76.10.145.51): icmp_seq=3 ttl=53 time=160 ms
^C
--- pycrypto.org ping statistics ---
3 packets transmitted, 3 received, 0% packet loss, time 2000ms
rtt min/avg/max/mdev = 159.418/160.471/161.223/0.767 ms

","PyCrypto releases are now uploaded to PyPI, so easy_install should no longer rely on the availability of the dlitz.net webserver.
","3090","<python><pycrypto>","2","1","3","2011-12-04 05:15:52","8373456","1","","","","","2010-12-02 20:29:16",""
"11398928","Installing PyCrypto for Python 3.2 on OS X 10.7","I compiled and installed pycrypto 2.6 on Mac OSX Lion with Python 3.2 but when I try to run command
import Crypto.Cipher.AES

I get this problem
Traceback (most recent call last):
File ""/Users/DaZzz/Documents/Python Workspace/Cryptography Coursera/W2PA.py"", line 8, in <module>
import Crypto.Cipher.AES
File ""/Library/Python/2.7/site-packages/Crypto/Cipher/AES.py"", line 50, in <module>
from Crypto.Cipher import _AES
ImportError: dlopen(/Library/Python/2.7/site-packages/Crypto/Cipher/_AES.so, 2): Symbol not found: _PyInt_FromLong
Referenced from: /Library/Python/2.7/site-packages/Crypto/Cipher/_AES.so
Expected in: flat namespace
in /Library/Python/2.7/site-packages/Crypto/Cipher/_AES.so

By the way, I use eclipse with installed PyDev. I also tried to run it in IDLE but I got following error:
Traceback (most recent call last):
  File ""<pyshell#1>"", line 1, in <module>
    import Crypto.Cipher.AES
  File ""/Library/Frameworks/Python.framework/Versions/3.2/lib/python3.2/site-packages/Crypto/Cipher/AES.py"", line 50, in <module>
    from Crypto.Cipher import _AES
ImportError: cannot import name _AES

It should be emphasized that to run it in IDLE I copied directory with Crypto into the python path.
What am I doing wrong?
","See the /Library/Python/2.7 in the messages?  It appears you are actually running Python 2.7 here.  You need to tell PyDev to use Python 3.2.  And are you sure you used the Python 3.2 version of IDLE?  There are separate IDLE's for each version of Python.  Try typing idle3.2 from the command line or, in the Finder, click on /Applications/Python 3.2/IDLE.app.
Update: Works for me using the python.org 64-/32-bit Python 3.2.3 and Xcode 4.3 (you may need to create a symlink for /Developer to work around the change of SDK locations for Xcode 4.3).
# for Xcode 4.3+ only
$ [ ! -e /Developer ] && sudo ln -s Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer /Developer


$ tar xf ./pycrypto-2.6.tar.gz
$ cd ./pycrypto-2.6
$ python3.2 setup.py install
$ cd
$ python3.2
Python 3.2.3 (v3.2.3:3d0686d90f55, Apr 10 2012, 11:25:50) 
[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> import Crypto.Cipher.AES
>>> Crypto.Cipher.AES.__file__
'/Library/Frameworks/Python.framework/Versions/3.2/lib/python3.2/site-packages/Crypto/Cipher/AES.py'

","3078","<python><macos><python-3.x><pycrypto>","2","0","1","2012-07-09 18:46:26","11399087","0","1","1512430","","2012-07-09 16:45:24","2012-07-09 16:05:29",""
"32577862","RSA-2048 decrypt not working - PKCS1_OAEP ""Incorrect decryption.""","The code is supposed to set up a service that listens for connections from a voting website.  It is a server listening for connections from outside (clients).  When the client connects, the client waits for the version number to be sent.  Once my server/listener sends the version number, the client responds with a 256 byte block that is RSA 2048 bit encrypted using the public key I provide.  That block then has to be decoded and (later) I will read the contents.  I am stuck in that I can't get it decrypted:
I get this:

starting connection...
connection from ('50.28.6.244', 35338)
sending version number...
receiving encrypted block
Traceback (most recent call last):
File ""voteListener.py"", line 97, in 
Main(private_key)
File ""voteListener.py"", line 49, in Main
decodedfile = decode_msg(data, privatekey)
File ""voteListener.py"", line 58, in decode_msg
ciphertext = cipher.decrypt(msg)
File ""C:\Python27\lib\site-packages\Crypto\Cipher\PKCS1_OAEP.py"", line 227, in decrypt
raise ValueError(""Incorrect decryption."")
ValueError: Incorrect decryption.
C:\Users\STEXAS\Desktop\vote>pause
Press any key to continue . . .

My code:
import socket
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
from os import path


def Main(privatekey):
    host = ""0.0.0.0""
    port = 8192
    version = ""VOTIFIER 1.9""
    print(""starting connection..."")
    while True:
        s = socket.socket()
        s.bind((host, port))
        s.listen(1)
        c, addr = s.accept()
        print(""connection from %s"" % str(addr))
        print(""sending version number..."")
        c.send(version)
        c.send('\n')

        print(""receiving encrypted block"")
        data = c.recv(256)
        c.close()
        s.close()
        decodedfile = decode_msg(data, privatekey)

        with open(""votes.txt"", 'wb') as f:
            f.write(decodedfile)
        print(""File writen"")


def decode_msg(ciphertext, priv_key):
    cipher = PKCS1_OAEP.new(priv_key)
    msg = cipher.decrypt(ciphertext)
    return msg


def read_private_key():
    with open(""keys\mykey.pem"", 'rb') as f:
        data = f.read()
    key = RSA.importKey(data)
    return key


def generate_key_pair():
    """"""Generates a 2048 bit RSA key pair and saves the keys to disk""""""
    pair = RSA.generate(2048)

    f = open(""keys\mykey.pem"", ""wb"")  # private key
    f.write(pair.exportKey('PEM'))
    f.close()

    pub_key = pair.publickey().exportKey(format='PEM')
    keytext = str(pub_key).strip(""-----BEGIN PUBLIC KEY-----"").strip(""-----END PUBLIC KEY-----"").replace('\n', """")
    with open(""keys\public.txt"", 'wb') as f:  # the plain text public key for providing to server list
        f.write(keytext)
    with open(""keys\public.pem"", 'wb') as f:  # public key
        f.write(pub_key)


if __name__ == ""__main__"":
    private_key = None

    if not path.exists(""keys\mykey.pem""):
        generate_key_pair()

    if path.exists(""keys\mykey.pem""):
        private_key = read_private_key()

    if private_key is not None:
        Main(private_key)
    else:
        print(""Error with Keys... no key was generated or found!"")

","The clients (and i suppose the Java versions of Votifier) were using RSAES PKCS1 v1.5.  Added a method to decode using that scheme and changed the call to that method:
In Main():
decodedfile = decode_msg_v1_5(data, privatekey)

New method:
def decode_msg_v1_5(ciphertext, privateKey):
    """"""  Should consider using the more robust PKCS1 OAEP. """"""
    sentinel = Random.new().read(256)      # data length is 256
    cipher = PKCS1_v1_5.new(privateKey)
    messagereceived = cipher.decrypt(ciphertext, sentinel)
    return messagereceived

","3050","<python-2.7><rsa><pycrypto>","1","3","1","2015-09-23 21:11:55","32749557","4","","","user4805123","2015-09-15 22:56:56","2015-09-15 04:42:34",""
"12504489","pycrypto and Google app engine","How do you use pycrypto with GAP?
It says here that it does not support the latest version. Does that mean that I have to use the version pointed by them ? 
I tried this but, when I execute setup.py I get the error src/MD2.c:15:20: fatal error: Python.h: No such file or directory
compilation terminated.
error: command 'gcc' failed with exit status 1

","GAP will not let you use the full version of pycrypto as it has lot of C so you can't deploy it and they will have to cut it down to what they can allow. You have to use from google.appengine.dist import use_library and then use_library('lib', 'version.'). Hopefully it is somewhat helpful.
","3043","<python><google-app-engine><libraries><pycrypto>","3","0","3","2012-12-20 02:00:41","12506922","1","1","1630128","","2012-09-20 04:27:36","2012-09-20 00:01:59",""
"12504489","pycrypto and Google app engine","How do you use pycrypto with GAP?
It says here that it does not support the latest version. Does that mean that I have to use the version pointed by them ? 
I tried this but, when I execute setup.py I get the error src/MD2.c:15:20: fatal error: Python.h: No such file or directory
compilation terminated.
error: command 'gcc' failed with exit status 1

","App Engine 1.7.2, released just a few hours ago, now supports PyCrypto 2.6, the most recent version. The linked doc is likely outdated and will be updated soon. You can use it by instructing app engine to include it.
","3043","<python><google-app-engine><libraries><pycrypto>","3","4","3","2012-12-20 02:00:41","12506922","1","1","1630128","","2012-09-20 04:27:36","2012-09-20 00:01:59",""
"12504489","pycrypto and Google app engine","How do you use pycrypto with GAP?
It says here that it does not support the latest version. Does that mean that I have to use the version pointed by them ? 
I tried this but, when I execute setup.py I get the error src/MD2.c:15:20: fatal error: Python.h: No such file or directory
compilation terminated.
error: command 'gcc' failed with exit status 1

","To make GAE use pycrypto, you have to add the following to your app.yaml file:
libraries:
- name: pycrypto
  version: ""2.6""

Like a charm, code like
from Crypto.Cipher import AES
from Crypto import Random
class MainPage(webapp2.RequestHandler):
  def get( self ) :
    self.response.headers['Content-Type'] = 'text/plain'
    key = b'Sixteen byte key'
    iv = Random.new().read(AES.block_size)
    cipher = AES.new(key, AES.MODE_CFB, iv)
    msg = iv + cipher.encrypt(b'Attack at dawn')
    self.response.write( msg )

Should work like a charm (actually triggers a download!)
This information about what versions of what libraries are available are included here
","3043","<python><google-app-engine><libraries><pycrypto>","3","3","3","2012-12-20 02:00:41","12506922","1","1","1630128","","2012-09-20 04:27:36","2012-09-20 00:01:59",""
"8900574","RSA PKCS #1 v1.5 Signature gives extra octet in Python compared to openssl","I want to sign a message according to the RSA-SHA1 Signature Method in OAuth 1 RFC Section http://tools.ietf.org/html/rfc5849#section-3.4.3 using Python. I'm trying to verify that I am on the right track by comparing results with that of openssl. 
Now I suddenly found myself with an extra octet and since my knowledge of cryptography is limited at best I need some help. From looking through source of crypto and the man pages of openssl and the fact that the output is strikingly similar I reckon I am at least using the right algorithm.
When using openssl rsautl however, then I am not even close...
$ openssl genrsa -out private.pem 1024

$ cat message
Lorem ipsum

$ cat sign.py
from Crypto.PublicKey import RSA
from Crypto.Signature import PKCS1_v1_5
from Crypto.Hash import SHA
key = RSA.importKey(open(""private.pem"").read())
message = open(""message"").read()[:-1] # skip last newline
h = SHA.new(message)
p = PKCS1_v1_5.new(key)
signature = p.sign(h)
signature_trim = p.sign(h)[:-1] # will give same output as openssl dgst -sign
print signature    # remove print when not using hexdump

Output from Python
$ python sign.py | hexdump
0000000 1346 38af 89a8 d203 ee26 0cfa a4bc 3a6c
0000010 44fd a436 2c50 03ba 7c84 333a 910a 843e
0000020 f71b 5731 1d2a 8895 9f5c 86b1 1838 7de9
0000030 5c13 d7e5 a019 6ad1 e5a5 d4d5 bd6f 0032
0000040 f320 c5ad fc41 da2c a9c3 2d9a cdce f6d6
0000050 4ef4 6dbd 1ba2 edc1 648e 184a 2e6c e746
0000060 fd92 ba61 b4da f607 d7a4 fbef 8230 378d
0000070 a143 b444 c711 7121 6e08 9d88 bb05 0d25
0000080 000a                                   
0000081

Output from signing using openssl dgst (not sure if this really is rsa pkcs #1 v1.5)
$ echo -n $(cat message) | openssl dgst -sign private.pem | hexdump
0000000 1346 38af 89a8 d203 ee26 0cfa a4bc 3a6c
0000010 44fd a436 2c50 03ba 7c84 333a 910a 843e
0000020 f71b 5731 1d2a 8895 9f5c 86b1 1838 7de9
0000030 5c13 d7e5 a019 6ad1 e5a5 d4d5 bd6f 0032
0000040 f320 c5ad fc41 da2c a9c3 2d9a cdce f6d6
0000050 4ef4 6dbd 1ba2 edc1 648e 184a 2e6c e746
0000060 fd92 ba61 b4da f607 d7a4 fbef 8230 378d
0000070 a143 b444 c711 7121 6e08 9d88 bb05 0d25
0000080

In sign.py I then remove the signature print and verify the signature against its public key. Since trimming the signature will fail the verification I get the idea that It should not be done but I have been wrong before. 
pubkey = key.publickey()
pp = PKCS1_v1_5.new(pubkey)
print pp.verify(h, signature)         # True
print pp.verify(h, signature_trim)    # False

Output from openssl rsautl (not sure if this is pkcs #1 v1.5 either)
$ echo -n $(cat message) | openssl dgst -sha1 | openssl rsautl -sign -inkey private.pem  | hexdump
0000000 14a4 f02c 527f 26f9 29f6 281c 3185 4a1a
0000010 def8 052b b620 cca2 38d9 a389 0b44 112a
0000020 283c ebff 4228 6f77 7a65 9d53 4b98 a073
0000030 bbd9 1aca 3447 a917 d7c3 0968 63c4 6806
0000040 6112 6f36 2d38 a770 5afa a8e0 adf3 4bef
0000050 120c cc10 5194 75ad bdda 91e6 fd79 8f4c
0000060 b864 efb8 cc88 a4da e977 b488 6241 15fb
0000070 e105 1d11 8627 75bd 345b 34da 538f a8db
0000080

I am clearly doing something wrong and now I wonder by just how much. Except from base64 encoding and the face that ""Lorem ipsum"" is not a valid signature base string... 
...what do I need to modify in order to make this a valid RSA-SHA1 signature?
","Found the answer. Nothing.
Created a cert + key using
$ openssl req -x509 -nodes -days 365 -newkey rsa:1024 -sha1 -subj \ 
  '/C=US/ST=CA/L=Mountain View/CN=www.example.com' -keyout myrsakey.pem \
  -out myrsacert.pem


Registered a domain on Google Auth Playground http://googlecodesamples.com/oauth_playground/
Verified my domain and uploaded the cert file
Used Playground to craft a request
Confirmed the output from Playground with the one from my code =)

The RSA-SHA1 Signature Method
def sign_rsa(method, url, params, private_rsa):
   """"""Sign a request using RSASSA-PKCS #1 v1.5.

   Per `section 3.4.3`_ of the spec.

   .. _`section 3.4.3`: http://tools.ietf.org/html/rfc5849#section-3.4.3

   """"""
   from Crypto.PublicKey import RSA
   from Crypto.Signature import PKCS1_v1_5
   from Crypto.Hash import SHA
   key = RSA.importKey(private_rsa)
   message = prepare_base_string(method, url, params)
   h = SHA.new(message)    
   p = PKCS1_v1_5.new(key)
   return escape(binascii.b2a_base64(p.sign(h))[:-1])

The RSA-SHA1 Verification
def verify_rsa(method, url, params, public_rsa, signature):
   """"""Verify a RSASSA-PKCS #1 v1.5 base64 encoded signature.

   Per `section 3.4.3`_ of the spec.

   .. _`section 3.4.3`: http://tools.ietf.org/html/rfc5849#section-3.4.3

   """"""
   from Crypto.PublicKey import RSA
   from Crypto.Signature import PKCS1_v1_5
   from Crypto.Hash import SHA
   key = RSA.importKey(public_rsa)
   message = prepare_base_string(method, url, params)
   h = SHA.new(message)
   p = PKCS1_v1_5.new(key)
   signature = binascii.a2b_base64(urllib.unquote(signature))
   return p.verify(h, signature)

The curious can find them both as well as prepare_base_string and escape at https://github.com/ib-lundgren/oauthlib/blob/master/oauthlib/oauth.py
Still have no idea about the hexdumps but will update if I figure it out.
","3042","<python><oauth><openssl><rsa><pycrypto>","1","0","2","2012-01-17 22:39:24","8902707","0","1","","","","2012-01-17 19:33:50",""
"8900574","RSA PKCS #1 v1.5 Signature gives extra octet in Python compared to openssl","I want to sign a message according to the RSA-SHA1 Signature Method in OAuth 1 RFC Section http://tools.ietf.org/html/rfc5849#section-3.4.3 using Python. I'm trying to verify that I am on the right track by comparing results with that of openssl. 
Now I suddenly found myself with an extra octet and since my knowledge of cryptography is limited at best I need some help. From looking through source of crypto and the man pages of openssl and the fact that the output is strikingly similar I reckon I am at least using the right algorithm.
When using openssl rsautl however, then I am not even close...
$ openssl genrsa -out private.pem 1024

$ cat message
Lorem ipsum

$ cat sign.py
from Crypto.PublicKey import RSA
from Crypto.Signature import PKCS1_v1_5
from Crypto.Hash import SHA
key = RSA.importKey(open(""private.pem"").read())
message = open(""message"").read()[:-1] # skip last newline
h = SHA.new(message)
p = PKCS1_v1_5.new(key)
signature = p.sign(h)
signature_trim = p.sign(h)[:-1] # will give same output as openssl dgst -sign
print signature    # remove print when not using hexdump

Output from Python
$ python sign.py | hexdump
0000000 1346 38af 89a8 d203 ee26 0cfa a4bc 3a6c
0000010 44fd a436 2c50 03ba 7c84 333a 910a 843e
0000020 f71b 5731 1d2a 8895 9f5c 86b1 1838 7de9
0000030 5c13 d7e5 a019 6ad1 e5a5 d4d5 bd6f 0032
0000040 f320 c5ad fc41 da2c a9c3 2d9a cdce f6d6
0000050 4ef4 6dbd 1ba2 edc1 648e 184a 2e6c e746
0000060 fd92 ba61 b4da f607 d7a4 fbef 8230 378d
0000070 a143 b444 c711 7121 6e08 9d88 bb05 0d25
0000080 000a                                   
0000081

Output from signing using openssl dgst (not sure if this really is rsa pkcs #1 v1.5)
$ echo -n $(cat message) | openssl dgst -sign private.pem | hexdump
0000000 1346 38af 89a8 d203 ee26 0cfa a4bc 3a6c
0000010 44fd a436 2c50 03ba 7c84 333a 910a 843e
0000020 f71b 5731 1d2a 8895 9f5c 86b1 1838 7de9
0000030 5c13 d7e5 a019 6ad1 e5a5 d4d5 bd6f 0032
0000040 f320 c5ad fc41 da2c a9c3 2d9a cdce f6d6
0000050 4ef4 6dbd 1ba2 edc1 648e 184a 2e6c e746
0000060 fd92 ba61 b4da f607 d7a4 fbef 8230 378d
0000070 a143 b444 c711 7121 6e08 9d88 bb05 0d25
0000080

In sign.py I then remove the signature print and verify the signature against its public key. Since trimming the signature will fail the verification I get the idea that It should not be done but I have been wrong before. 
pubkey = key.publickey()
pp = PKCS1_v1_5.new(pubkey)
print pp.verify(h, signature)         # True
print pp.verify(h, signature_trim)    # False

Output from openssl rsautl (not sure if this is pkcs #1 v1.5 either)
$ echo -n $(cat message) | openssl dgst -sha1 | openssl rsautl -sign -inkey private.pem  | hexdump
0000000 14a4 f02c 527f 26f9 29f6 281c 3185 4a1a
0000010 def8 052b b620 cca2 38d9 a389 0b44 112a
0000020 283c ebff 4228 6f77 7a65 9d53 4b98 a073
0000030 bbd9 1aca 3447 a917 d7c3 0968 63c4 6806
0000040 6112 6f36 2d38 a770 5afa a8e0 adf3 4bef
0000050 120c cc10 5194 75ad bdda 91e6 fd79 8f4c
0000060 b864 efb8 cc88 a4da e977 b488 6241 15fb
0000070 e105 1d11 8627 75bd 345b 34da 538f a8db
0000080

I am clearly doing something wrong and now I wonder by just how much. Except from base64 encoding and the face that ""Lorem ipsum"" is not a valid signature base string... 
...what do I need to modify in order to make this a valid RSA-SHA1 signature?
","Python's print will always append a newline character, which is the extra byte you see.
As far as I know there is no clean way of avoiding that and print signature, won't work either.
The alternative is to use the lower level sys.stdout.write(signature).
","3042","<python><oauth><openssl><rsa><pycrypto>","1","4","2","2012-01-17 22:39:24","8902707","0","1","","","","2012-01-17 19:33:50",""
"7842770","How to use pip install where one requirement has dependency on version on gcc-4.5","I am installing an egg packaged for pip, inside my virtualenv, under Python 2.7.2.
The egg has 16 requirements, one of which (pycryptopp 0.5.29) is known to fail with gcc-4.6 and hence must be compiled with 4.5. The system has both gcc-4.6 (default) and gcc-4.5 installed.
How do I configure/hack pip install to build this package specially? (or do I just temporarily kludge the link /usr/bin/gcc while installing this package)
Do I need to clean up the existing (virtualenv)/build directory where it broke, and if so how?
(I already read the pip documentation and searched SO + SU)
","(I retitled the question from ""How to use pip install where one requirement must be compiled with gcc-4.5?"")
1) The correct method is to build with ""--disable-embedded-cryptopp"" which links to libcryptopp. Some people report runtime issue but It Works For Me.
pip install --install-option=""--disable-embedded-cryptopp"" pycryptopp

2.) A truly ugly workaround which I used (and which ulif helpfully points out can be obviated by using CC=.. ) is to invoke pip install specifically for the problem package, and temporarily kludge the link to gcc.
pushd /usr/bin; sudo rm gcc-4.6; ln -s gcc-4.5 gcc; popd;
pip install pycryptopp
pushd /usr/bin; sudo rm gcc-4.5; ln -s gcc-4.6 gcc; popd;

Further reasons this is bad: it requires root access and messing with the link to gcc binary. It certainly can't be Makefile'd.
","3014","<gcc><pip><egg><pycrypto>","2","0","2","2012-01-27 23:48:51","8941702","1","","202229","","2012-01-27 23:48:51","2011-10-20 21:55:40",""
"7842770","How to use pip install where one requirement has dependency on version on gcc-4.5","I am installing an egg packaged for pip, inside my virtualenv, under Python 2.7.2.
The egg has 16 requirements, one of which (pycryptopp 0.5.29) is known to fail with gcc-4.6 and hence must be compiled with 4.5. The system has both gcc-4.6 (default) and gcc-4.5 installed.
How do I configure/hack pip install to build this package specially? (or do I just temporarily kludge the link /usr/bin/gcc while installing this package)
Do I need to clean up the existing (virtualenv)/build directory where it broke, and if so how?
(I already read the pip documentation and searched SO + SU)
","No need to fiddle around with symlinks here. On most Linux systems you can set the compiler to use with the CC env var. In case of pycryptopp and pip the following might help:
$ CC=/usr/bin/gcc-4.5 pip install pycryptopp

given that you have GCC 4.5 installed in that location. This worked fine for me on Ubuntu 11.10 (oneiric) with packages gcc-4.5 and g++-4.5 installed.
","3014","<gcc><pip><egg><pycrypto>","2","4","2","2012-01-27 23:48:51","8941702","1","","202229","","2012-01-27 23:48:51","2011-10-20 21:55:40",""
"21108605","PyCrypto Not Working in OSX Mavericks","Trying to install and use pycrypto. I'm not getting any error during installation so I can't troubleshoot further.
I ran 'test' and go following errors but could not find a fix for it. 
FYI, I've XCode and Commandline tools installed.
mac:pycrypto-2.6.1 rajivvishwa$ export ARCHFLAGS='-arch i386 -arch x86_64'
mac:pycrypto-2.6.1 rajivvishwa$ sudo python setup.py build
running build
running build_py
running build_ext
running build_configure
warning: GMP or MPIR library not found; Not building Crypto.PublicKey._fastmath.
mac:pycrypto-2.6.1 rajivvishwa$ sudo python setup.py install
running install
running build
running build_py
running build_ext
running build_configure
warning: GMP or MPIR library not found; Not building Crypto.PublicKey._fastmath.
running install_lib
running install_egg_info
Removing /System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/pycrypto-2.6.1-py2.6.egg-info
Writing /System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/pycrypto-2.6.1-py2.6.egg-info

mac:pycrypto-2.6.1 rajivvishwa$ sudo python setup.py test
running test
.......................................................................................................................................................................................................... SelfTest: You can ignore the RandomPool_DeprecationWarning that follows.
build/lib.macosx-10.9-intel-2.6/Crypto/Util/randpool.py:40: RandomPool_DeprecationWarning: This application uses RandomPool, which is BROKEN in older releases.  See http://www.pycrypto.org/randpool-broken
  RandomPool_DeprecationWarning)
..........E...................
======================================================================
ERROR: Test that mpzToLongObj and longObjToMPZ (internal functions) roundtrip negative numbers correctly.
----------------------------------------------------------------------
Traceback (most recent call last):
  File ""build/lib.macosx-10.9-intel-2.6/Crypto/SelfTest/Util/test_number.py"", line 283, in test_negative_number_roundtrip_mpzToLongObj_longObjToMPZ
    k = number._fastmath.rsa_construct(n, e)
AttributeError: 'NoneType' object has no attribute 'rsa_construct'

----------------------------------------------------------------------
Ran 1033 tests in 150.196s

FAILED (errors=1)
Traceback (most recent call last):
  File ""setup.py"", line 456, in <module>
    core.setup(**kw)
  File ""/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/distutils/core.py"", line 152, in setup
    dist.run_commands()
  File ""/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/distutils/dist.py"", line 975, in run_commands
    self.run_command(cmd)
  File ""/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/distutils/dist.py"", line 995, in run_command
    cmd_obj.run()
  File ""setup.py"", line 336, in run
    SelfTest.run(module=moduleObj, verbosity=self.verbose, stream=sys.stdout, config=self.config)
  File ""build/lib.macosx-10.9-intel-2.6/Crypto/SelfTest/__init__.py"", line 74, in run
    raise SelfTestError(""Self-test failed"", result)
Crypto.SelfTest.SelfTestError: ('Self-test failed', <unittest._TextTestResult run=1033 errors=1 failures=0>)

mac:pycrypto-2.6.1 rajivvishwa$ python
Python 2.6.8 (unknown, Aug 25 2013, 00:04:29) 
[GCC 4.2.1 Compatible Apple LLVM 5.0 (clang-500.0.68)] on darwin
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> import Crypto
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
ImportError: No module named Crypto

","if you run python via macports, try
sudo port install py27-crypto

then import Crypto should work
","3008","<python><macos><osx-mavericks><pycrypto>","3","3","3","2015-02-12 01:31:32","","0","","","","","2014-01-14 08:10:07",""
"21108605","PyCrypto Not Working in OSX Mavericks","Trying to install and use pycrypto. I'm not getting any error during installation so I can't troubleshoot further.
I ran 'test' and go following errors but could not find a fix for it. 
FYI, I've XCode and Commandline tools installed.
mac:pycrypto-2.6.1 rajivvishwa$ export ARCHFLAGS='-arch i386 -arch x86_64'
mac:pycrypto-2.6.1 rajivvishwa$ sudo python setup.py build
running build
running build_py
running build_ext
running build_configure
warning: GMP or MPIR library not found; Not building Crypto.PublicKey._fastmath.
mac:pycrypto-2.6.1 rajivvishwa$ sudo python setup.py install
running install
running build
running build_py
running build_ext
running build_configure
warning: GMP or MPIR library not found; Not building Crypto.PublicKey._fastmath.
running install_lib
running install_egg_info
Removing /System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/pycrypto-2.6.1-py2.6.egg-info
Writing /System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/pycrypto-2.6.1-py2.6.egg-info

mac:pycrypto-2.6.1 rajivvishwa$ sudo python setup.py test
running test
.......................................................................................................................................................................................................... SelfTest: You can ignore the RandomPool_DeprecationWarning that follows.
build/lib.macosx-10.9-intel-2.6/Crypto/Util/randpool.py:40: RandomPool_DeprecationWarning: This application uses RandomPool, which is BROKEN in older releases.  See http://www.pycrypto.org/randpool-broken
  RandomPool_DeprecationWarning)
..........E...................
======================================================================
ERROR: Test that mpzToLongObj and longObjToMPZ (internal functions) roundtrip negative numbers correctly.
----------------------------------------------------------------------
Traceback (most recent call last):
  File ""build/lib.macosx-10.9-intel-2.6/Crypto/SelfTest/Util/test_number.py"", line 283, in test_negative_number_roundtrip_mpzToLongObj_longObjToMPZ
    k = number._fastmath.rsa_construct(n, e)
AttributeError: 'NoneType' object has no attribute 'rsa_construct'

----------------------------------------------------------------------
Ran 1033 tests in 150.196s

FAILED (errors=1)
Traceback (most recent call last):
  File ""setup.py"", line 456, in <module>
    core.setup(**kw)
  File ""/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/distutils/core.py"", line 152, in setup
    dist.run_commands()
  File ""/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/distutils/dist.py"", line 975, in run_commands
    self.run_command(cmd)
  File ""/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/distutils/dist.py"", line 995, in run_command
    cmd_obj.run()
  File ""setup.py"", line 336, in run
    SelfTest.run(module=moduleObj, verbosity=self.verbose, stream=sys.stdout, config=self.config)
  File ""build/lib.macosx-10.9-intel-2.6/Crypto/SelfTest/__init__.py"", line 74, in run
    raise SelfTestError(""Self-test failed"", result)
Crypto.SelfTest.SelfTestError: ('Self-test failed', <unittest._TextTestResult run=1033 errors=1 failures=0>)

mac:pycrypto-2.6.1 rajivvishwa$ python
Python 2.6.8 (unknown, Aug 25 2013, 00:04:29) 
[GCC 4.2.1 Compatible Apple LLVM 5.0 (clang-500.0.68)] on darwin
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> import Crypto
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
ImportError: No module named Crypto

","If you want to install pycrypto on latest OSX then set 'clang' as the C compiler that configure will use. This is done via the CC environment variable.
The way to debug this in a virtualenv:
sudo easy_install virtualenv==1.10.1
virtualenv venv
export CC=clang
venv/bin/pip install --no-clean pycrypto
cat venv/build/pycrypto/config.log

","3008","<python><macos><osx-mavericks><pycrypto>","3","2","3","2015-02-12 01:31:32","","0","","","","","2014-01-14 08:10:07",""
"21108605","PyCrypto Not Working in OSX Mavericks","Trying to install and use pycrypto. I'm not getting any error during installation so I can't troubleshoot further.
I ran 'test' and go following errors but could not find a fix for it. 
FYI, I've XCode and Commandline tools installed.
mac:pycrypto-2.6.1 rajivvishwa$ export ARCHFLAGS='-arch i386 -arch x86_64'
mac:pycrypto-2.6.1 rajivvishwa$ sudo python setup.py build
running build
running build_py
running build_ext
running build_configure
warning: GMP or MPIR library not found; Not building Crypto.PublicKey._fastmath.
mac:pycrypto-2.6.1 rajivvishwa$ sudo python setup.py install
running install
running build
running build_py
running build_ext
running build_configure
warning: GMP or MPIR library not found; Not building Crypto.PublicKey._fastmath.
running install_lib
running install_egg_info
Removing /System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/pycrypto-2.6.1-py2.6.egg-info
Writing /System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/pycrypto-2.6.1-py2.6.egg-info

mac:pycrypto-2.6.1 rajivvishwa$ sudo python setup.py test
running test
.......................................................................................................................................................................................................... SelfTest: You can ignore the RandomPool_DeprecationWarning that follows.
build/lib.macosx-10.9-intel-2.6/Crypto/Util/randpool.py:40: RandomPool_DeprecationWarning: This application uses RandomPool, which is BROKEN in older releases.  See http://www.pycrypto.org/randpool-broken
  RandomPool_DeprecationWarning)
..........E...................
======================================================================
ERROR: Test that mpzToLongObj and longObjToMPZ (internal functions) roundtrip negative numbers correctly.
----------------------------------------------------------------------
Traceback (most recent call last):
  File ""build/lib.macosx-10.9-intel-2.6/Crypto/SelfTest/Util/test_number.py"", line 283, in test_negative_number_roundtrip_mpzToLongObj_longObjToMPZ
    k = number._fastmath.rsa_construct(n, e)
AttributeError: 'NoneType' object has no attribute 'rsa_construct'

----------------------------------------------------------------------
Ran 1033 tests in 150.196s

FAILED (errors=1)
Traceback (most recent call last):
  File ""setup.py"", line 456, in <module>
    core.setup(**kw)
  File ""/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/distutils/core.py"", line 152, in setup
    dist.run_commands()
  File ""/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/distutils/dist.py"", line 975, in run_commands
    self.run_command(cmd)
  File ""/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/distutils/dist.py"", line 995, in run_command
    cmd_obj.run()
  File ""setup.py"", line 336, in run
    SelfTest.run(module=moduleObj, verbosity=self.verbose, stream=sys.stdout, config=self.config)
  File ""build/lib.macosx-10.9-intel-2.6/Crypto/SelfTest/__init__.py"", line 74, in run
    raise SelfTestError(""Self-test failed"", result)
Crypto.SelfTest.SelfTestError: ('Self-test failed', <unittest._TextTestResult run=1033 errors=1 failures=0>)

mac:pycrypto-2.6.1 rajivvishwa$ python
Python 2.6.8 (unknown, Aug 25 2013, 00:04:29) 
[GCC 4.2.1 Compatible Apple LLVM 5.0 (clang-500.0.68)] on darwin
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> import Crypto
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
ImportError: No module named Crypto

","This looks like a case insensitivity preference in Mac filesystems. Linux is case sensitive and my guess is that the package owners used Linux to create the package.
I first installed the crypto packages (used sudo as last resort).
sudo pip install pycrypto

pip install crypto

Then just rename the lower case package name to upper case.
In /path/to/venv/lib/python2.7/site-packages, rename crypto to Crypto.
","3008","<python><macos><osx-mavericks><pycrypto>","3","0","3","2015-02-12 01:31:32","","0","","","","","2014-01-14 08:10:07",""
"16981503","PyCrypto : AssertionError(""PID check failed. RNG must be re-initialized after fork(). Hint: Try Random.atfork()"")","I am creating various processes that do different tasks. One of them and only one of them, has a security module that creates the PyCrypto objects. 
So my program starts, creates the various processes, the process that handles messages uses the security module to decrypt and I get the following errors: 
   firstSymKeybin = self.cipher.decrypt(encFirstSymKeybin, '')
  File ""/usr/local/lib/python2.7/dist-packages/Crypto/Cipher/PKCS1_v1_5.py"", line 206, in decrypt
    m = self._key.decrypt(ct)
  File ""/usr/local/lib/python2.7/dist-packages/Crypto/PublicKey/RSA.py"", line 174, in decrypt
    return pubkey.pubkey.decrypt(self, ciphertext)
  File ""/usr/local/lib/python2.7/dist-packages/Crypto/PublicKey/pubkey.py"", line 93, in decrypt
    plaintext=self._decrypt(ciphertext)
  File ""/usr/local/lib/python2.7/dist-packages/Crypto/PublicKey/RSA.py"", line 235, in _decrypt
    r = getRandomRange(1, self.key.n-1, randfunc=self._randfunc)
  File ""/usr/local/lib/python2.7/dist-packages/Crypto/Util/number.py"", line 123, in getRandomRange
    value = getRandomInteger(bits, randfunc)
  File ""/usr/local/lib/python2.7/dist-packages/Crypto/Util/number.py"", line 104, in getRandomInteger
    S = randfunc(N>>3)
  File ""/usr/local/lib/python2.7/dist-packages/Crypto/Random/_UserFriendlyRNG.py"", line 187, in read
    return self._singleton.read(bytes)
  File ""/usr/local/lib/python2.7/dist-packages/Crypto/Random/_UserFriendlyRNG.py"", line 163, in read
    return _UserFriendlyRNG.read(self, bytes)
  File ""/usr/local/lib/python2.7/dist-packages/Crypto/Random/_UserFriendlyRNG.py"", line 122, in read
    self._check_pid()
  File ""/usr/local/lib/python2.7/dist-packages/Crypto/Random/_UserFriendlyRNG.py"", line 138, in _check_pid
    raise AssertionError(""PID check failed. RNG must be re-initialized after fork(). Hint: Try Random.atfork()"")
AssertionError: PID check failed. RNG must be re-initialized after fork(). Hint: Try Random.atfork()

Decrypting works well on interactive, when not called from a process. 
My security module looks like this:
'''
Created on 25 Apr 2013

@author: max
'''

import base64, ast, binascii
from Crypto.Cipher import AES
from Crypto.Cipher import PKCS1_v1_5
from Crypto.PublicKey import RSA
import br_consts

class SecurityMod(object):
    '''
    classdocs
    '''

    def __init__(self):
        '''
        Constructor
        '''
        super(SecurityMod,self).__init__()
        self.privkey = RSA.importKey(open('./privkeyBR.pem', 'r').read())
        self.cipher = PKCS1_v1_5.new(self.privkey)
        self.ridToKeySalt = {}

    #depending on the type of message, encryption format is different 
    def encrypt(self, msg, rqId, rid):
        ##code
        return encMsg

    #return string of object so it can be parse by JSON
    def decrypt(self, encMsg, rqId, rid):

       #code
        return msgObjStr



    def pad_data(self,data):
        if len(data) == 0:
            return data
        if len(data) % 16 == 0:
            padding_required = 15
        else:
            padding_required = 15 - (len(data) % 16)
        data = '%s\x80' % data
        data = '%s%s' % (data, '\x00' * padding_required)
        return data


    def unpad_data(self,data):
        if not data:
            return data
        data = data.rstrip('\x00')
        if data[-1] == '\x80': 
            return data[:-1]
        else:
            return data

","You need to call Crypto.Random.atfork() after os.fork()
I just put the __init__() in the security module before the other ones 
","2990","<python><encryption><python-2.7><pycrypto>","11","8","2","2018-05-15 15:17:38","16981678","0","3","5090789","","2015-08-03 16:11:34","2013-06-07 10:07:17",""
"16981503","PyCrypto : AssertionError(""PID check failed. RNG must be re-initialized after fork(). Hint: Try Random.atfork()"")","I am creating various processes that do different tasks. One of them and only one of them, has a security module that creates the PyCrypto objects. 
So my program starts, creates the various processes, the process that handles messages uses the security module to decrypt and I get the following errors: 
   firstSymKeybin = self.cipher.decrypt(encFirstSymKeybin, '')
  File ""/usr/local/lib/python2.7/dist-packages/Crypto/Cipher/PKCS1_v1_5.py"", line 206, in decrypt
    m = self._key.decrypt(ct)
  File ""/usr/local/lib/python2.7/dist-packages/Crypto/PublicKey/RSA.py"", line 174, in decrypt
    return pubkey.pubkey.decrypt(self, ciphertext)
  File ""/usr/local/lib/python2.7/dist-packages/Crypto/PublicKey/pubkey.py"", line 93, in decrypt
    plaintext=self._decrypt(ciphertext)
  File ""/usr/local/lib/python2.7/dist-packages/Crypto/PublicKey/RSA.py"", line 235, in _decrypt
    r = getRandomRange(1, self.key.n-1, randfunc=self._randfunc)
  File ""/usr/local/lib/python2.7/dist-packages/Crypto/Util/number.py"", line 123, in getRandomRange
    value = getRandomInteger(bits, randfunc)
  File ""/usr/local/lib/python2.7/dist-packages/Crypto/Util/number.py"", line 104, in getRandomInteger
    S = randfunc(N>>3)
  File ""/usr/local/lib/python2.7/dist-packages/Crypto/Random/_UserFriendlyRNG.py"", line 187, in read
    return self._singleton.read(bytes)
  File ""/usr/local/lib/python2.7/dist-packages/Crypto/Random/_UserFriendlyRNG.py"", line 163, in read
    return _UserFriendlyRNG.read(self, bytes)
  File ""/usr/local/lib/python2.7/dist-packages/Crypto/Random/_UserFriendlyRNG.py"", line 122, in read
    self._check_pid()
  File ""/usr/local/lib/python2.7/dist-packages/Crypto/Random/_UserFriendlyRNG.py"", line 138, in _check_pid
    raise AssertionError(""PID check failed. RNG must be re-initialized after fork(). Hint: Try Random.atfork()"")
AssertionError: PID check failed. RNG must be re-initialized after fork(). Hint: Try Random.atfork()

Decrypting works well on interactive, when not called from a process. 
My security module looks like this:
'''
Created on 25 Apr 2013

@author: max
'''

import base64, ast, binascii
from Crypto.Cipher import AES
from Crypto.Cipher import PKCS1_v1_5
from Crypto.PublicKey import RSA
import br_consts

class SecurityMod(object):
    '''
    classdocs
    '''

    def __init__(self):
        '''
        Constructor
        '''
        super(SecurityMod,self).__init__()
        self.privkey = RSA.importKey(open('./privkeyBR.pem', 'r').read())
        self.cipher = PKCS1_v1_5.new(self.privkey)
        self.ridToKeySalt = {}

    #depending on the type of message, encryption format is different 
    def encrypt(self, msg, rqId, rid):
        ##code
        return encMsg

    #return string of object so it can be parse by JSON
    def decrypt(self, encMsg, rqId, rid):

       #code
        return msgObjStr



    def pad_data(self,data):
        if len(data) == 0:
            return data
        if len(data) % 16 == 0:
            padding_required = 15
        else:
            padding_required = 15 - (len(data) % 16)
        data = '%s\x80' % data
        data = '%s%s' % (data, '\x00' * padding_required)
        return data


    def unpad_data(self,data):
        if not data:
            return data
        data = data.rstrip('\x00')
        if data[-1] == '\x80': 
            return data[:-1]
        else:
            return data

","Installing the pycryptodome package fixed this issue for me on Mac and Linux. It is a fork of the Pycrypto package. 
pip install pycryptodome

Here is the link to their docs: https://pycryptodome.readthedocs.io/en/latest/index.html
","2990","<python><encryption><python-2.7><pycrypto>","11","0","2","2018-05-15 15:17:38","16981678","0","3","5090789","","2015-08-03 16:11:34","2013-06-07 10:07:17",""
"16203619","Decrypting data in Python that was encrypted in 3DES by Java","I'm trying to decrypt data using PyCrypto. The data was encoded in Java with the javax.crypto package. The encryption is Triple DES (referred to as ""DESede"" in Java). As far as I can tell, default settings are used for everything. However, when I go to decrypt the data in Python there is always a problem with the data.
Here's the Java code that does encrypting/decrypting:
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;

import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import java.security.spec.KeySpec;

public final class Encrypter
{
    public static final String DESEDE_ENCRYPTION = ""DESede"";

    private KeySpec keySpec;
    private SecretKeyFactory keyFactory;
    private Cipher cipher;

    private static final String UNICODE_FORMAT = ""UTF8"";

    public Encrypter(String encryptionKey)
        throws Exception
    {
        byte[] keyAsBytes = encryptionKey.getBytes(UNICODE_FORMAT);
        keySpec = new DESedeKeySpec(keyAsBytes);
        keyFactory = SecretKeyFactory.getInstance(DESEDE_ENCRYPTION);
        cipher = Cipher.getInstance(DESEDE_ENCRYPTION);
    }

    public String encryptString(String unencryptedString)
    {
        SecretKey key = keyFactory.generateSecret(keySpec);
        cipher.init(Cipher.ENCRYPT_MODE, key);
        byte[] cleartext = unencryptedString.getBytes(UNICODE_FORMAT);
        byte[] ciphertext = cipher.doFinal(cleartext);

        BASE64Encoder base64encoder = new BASE64Encoder();
        return base64encoder.encode(ciphertext);
    }

    public String decryptString(String encryptedString)
    {
        SecretKey key = keyFactory.generateSecret(keySpec);
        cipher.init(Cipher.DECRYPT_MODE, key);
        BASE64Decoder base64decoder = new BASE64Decoder();
        byte[] ciphertext = base64decoder.decodeBuffer(encryptedString);
        byte[] cleartext = cipher.doFinal(ciphertext);

        return bytesToString(cleartext);
    }

    private static String bytesToString(byte[] bytes)
    {
        StringBuilder sb = new StringBuilder();
        for (byte aByte : bytes)
        {
            sb.append((char) aByte);
        }
        return sb.toString();
    }
}

But when I take one of the base64-encoded strings that was produced by this code, I can't decode it. Here's an example of some of the python code I've tried:
from Crypto.Cipher import DES3
import array

key = <value of the key, as a hex string>
encryptedvalue = <the value that's encrypted, as a string>
keyarray = array.array('B', key.decode(""hex""))
des = DES3.new(keyarray)
value = des.decrypt(encryptedvalue.decode('base64'))

value.decode('utf-8') # Gives me an error

The errors I've gotten have looked along the lines of
UnicodeDecodeError: 'utf8' codec can't decode byte 0xa7 in position 6: invalid start byte

Which means that somewhere along the way, I haven't gotten something set up correctly. I've been working on this for a few hours, even going so far as trying to look into the SunJCE source code, which implements DESede, to see what defaults they use, but to no avail. I'm going to be using this as part of a script that runs automatically, so I'd really rather not have to use Java to do my decryption. Does anyone know what I need to do to decrypt my data correctly?
","All I had to do to make it work was to change this line
keyarray = array.array('B', key.decode(""hex""))

to this:
keyarray = array.array('B', key.encode(""utf-8""))

This matches the way that java was encoding the key, allowing me to have the correct encryption key.

If you've come here hoping to learn something from this question, here's some general advice:

Double-check your assumptions: The key string was a hex string, so I assumed it was being used as such.
Make sure you know what your assumptions are: I didn't consciously think about how I was making an assumption about how the key was used. This tends to be a very frequent problem in both programming and life in general.
Check all the values along the way (especially when you have an Oracle): Looking at the values in the byte arrays was what led me to realizing my problem.

","2987","<java><python><encryption><pycrypto><3des>","1","3","1","2013-04-25 17:12:57","16220825","11","2","2216621","","2013-04-24 23:07:13","2013-04-24 22:56:39",""
"10658909","Unable to Install with easy_install or pip on mac","I'm trying to install lxml and pycrypto modules using easy_install (and pip) but getting error messages like
Running lxml-2.3.4/setup.py -q bdist_egg --dist-dir /tmp/easy_install-kGsWMh/lxml-2.3.4/egg-dist-tmp-Gjqy3f
Building lxml version 2.3.4.
Building without Cython.
Using build configuration of libxslt 1.1.24
In file included from /usr/include/limits.h:63,
                 from /Developer/usr/bin/../lib/gcc/powerpc-apple-darwin10/4.0.1/include/limits.h:10,
                 from /Library/Frameworks/Python.framework/Versions/2.6/include/python2.6/Python.h:19,
                 from src/lxml/lxml.etree.c:4:
/usr/include/sys/cdefs.h:540:4: error: #error Unknown architecture
In file included from /usr/include/limits.h:64,
                 from /Developer/usr/bin/../lib/gcc/powerpc-apple-darwin10/4.0.1/include/limits.h:10,
                 from /Library/Frameworks/Python.framework/Versions/2.6/include/python2.6/Python.h:19,
                 from src/lxml/lxml.etree.c:4:
/usr/include/machine/limits.h:10:2: error: #error architecture not supported
In file included from /usr/include/sys/_types.h:33,
                 from /usr/include/_types.h:27,
                 from /usr/include/stdio.h:67,
                 from /Library/Frameworks/Python.framework/Versions/2.6/include/python2.6/Python.h:33,
                 from src/lxml/lxml.etree.c:4:
/usr/include/machine/_types.h:36:2: error: #error architecture not supported
In file included from /usr/include/_types.h:27,
                 from /usr/include/stdio.h:67,
                 from /Library/Frameworks/Python.framework/Versions/2.6/include/python2.6/Python.h:33,
                 from src/lxml/lxml.etree.c:4:
/usr/include/sys/_types.h:94: error: syntax error before ‘__darwin_blkcnt_t’
    src/lxml/lxml.etree.c:165640: error: syntax error before ‘val’
    src/lxml/lxml.etree.c:165645: error: syntax error before ‘val’

bla bla . . .
src/lxml/lxml.etree.c:165645: error: syntax error before ‘val’

lipo: can't figure out the architecture type of: /var/folders/f3/2q2x2p015kzgd4nbrn_qwykh0000gn/T//cc1pnrww.out

error: command 'gcc-4.0' failed with exit status 1

I'm getting similar syntax errors when I try to install pycrypto as well. I tried this answer but in vain. I tried setting up for python 2.6 and 2.7 environments using setuptools-0.6c11-py2.6.egg and setuptools-0.6c11-py2.7.egg but getting the same output.
I searched a lot online but cant find solution for this.
EDIT: I'm on OSX 10.7 on macbook pro 2010, and have XCode 4 and 3 installed
I'd args with replaced with the latest version while trying the commands in the link above.
python setup.py build --static-deps --libxml2-version=2.7.8  --libxslt-version=1.1.26 
sudo python setup.py install

I read on someother post and tried this as well
STATIC_DEPS=true sudo easy_install --allow-hosts=lxml.de,*.python.org lxml

Solution:
As @jdi suggested I did the following
$ brew install --use-llvm libxml2
$ brew install --use-llvm libxslt

Installed gcc from link, since I was still facing issues with option 1 and 2 suggested 
Then, either this
$ export ARCHFLAGS=""-arch i386 -arch x86_64""
$ /usr/bin/python2.6 setup.py build
$ sudo /usr/bin/python2.6 setup.py install

Or this, will work
$ sudo env ARCHFLAGS=""-arch i386 -arch x86_64"" easy_install-2.6 lxml

Same worked for pycrypto as well  
","This right here is an indication that you are building it improperly: /Developer/usr/bin/../lib/gcc/powerpc-apple-darwin10, unless of course you are on an old powerpc machine. 
Check the version of OSX you are running, and the commands you are using to build lxml. Chances are you might need to set export ARCHFLAGS=""-arch i386 -arch x86_64"" in your shell before building, in order to avoid it building with ppc. Not sure why you are getting an old arch.
Also, make sure you have the latest Xcode installed. And, if you are following that link you posted, word for word, make sure you are using the most recent versions of those packages and not the literal versions as that link is 3 years old.
If all else fails, install homebrew and install it through that package manager.
Update: Options for lack of GCC 4.2 after XCode 4.2+ update
Pick one

Install gcc 4.2 using this simple guide:
http://caiustheory.com/install-gcc-421-apple-build-56663-with-xcode-42
Use homebrew to install it: 
brew tap homebrew/dupes
brew install homebrew/dupes/apple-gcc42
Completely ignore gcc and use llvm with brew
brew install --use-llvm libxml2
    

","2963","<python><lxml><pip><easy-install><pycrypto>","1","2","1","2012-05-19 02:28:57","10659066","0","1","-1","","2017-05-23 12:11:28","2012-05-18 19:54:53",""
"31888289","Decrypting AES and HMAC with PyCrypto","Having a bit of trouble getting a AES cipher text to decrypt. 
In this particular scenario, I am encrypting data on the client side with Crypto-JS and decrypting it back on a python server with PyCrypto.
encrypt.js:
  var password = 'BJhtfRjKnTDTtPXUBnErKDxfkiMCOLyP';
  var data = 'mytext';

  var masterKey = CryptoJS.SHA256(password).toString();

  // Derive keys for AES and HMAC
  var length = masterKey.toString().length / 2
  var encryptionKey = masterKey.substr(0, length);
  var hmacKey = masterKey.substr(length);

  var iv = CryptoJS.lib.WordArray.random(64/8);

  var encrypted = CryptoJS.AES.encrypt(
    data,
    encryptionKey,
    {
      iv: iv,
      mode: CryptoJS.mode.CFB
    }
  );

  var concat = iv + encrypted;

  // Calculate HMAC using iv and cipher text
  var hash = CryptoJS.HmacSHA256(concat, hmacKey);

  // Put it all together
  var registrationKey = iv + encrypted + hash;

  // Encode in Base64
  var basemessage = btoa(registrationKey);

decrypt.py:
class AESCipher:
    def __init__(self, key):
        key_hash = SHA256.new(key).hexdigest()
        # Derive keys
        encryption_key = key_hash[:len(key_hash)/2]
        self.key = encryption_key            
        self.hmac_key = key_hash[len(key_hash)/2:]


    def verify_hmac(self, input_cipher, hmac_key):
        # Calculate hash using inputted key
        new_hash = HMAC.new(hmac_key, digestmod=SHA256)
        new_hash.update(input_cipher)
        digest = new_hash.hexdigest()

        # Calculate hash using derived key from local password
        local_hash = HMAC.new(self.hmac_key, digestmod=SHA256)
        local_hash.update(input_cipher)
        local_digest = local_hash.hexdigest()

        return True if digest == local_digest else False


    def decrypt(self, enc):
        enc = base64.b64decode(enc)
        iv = enc[:16]
        hmac = enc[60:]
        cipher_text = enc[16:60]

        # Verify HMAC using concatenation of iv + cipher like in js
        verified_hmac = self.verify_hmac((iv+cipher_text), self.hmac_key)

        if verified_hmac:
            cipher = AES.new(self.key, AES.MODE_CFB, iv)
            return cipher.decrypt(cipher_text)


password = 'BJhtfRjKnTDTtPXUBnErKDxfkiMCOLyP'

input = 'long base64 registrationKey...'

cipher = AESCipher(password)
decrypted = cipher.decrypt(input)

I'm successful in re-calculating the HMAC but when I try and then decrypt the cipher I get something that seems encrypted with �'s in the result.
I was getting errors about input length of cipher text but when I switched to CFB mode that fixed it so I don't think it's a padding issue.
","There are many problems with your code.
Client (JavaScript):

AES has a block size of 128 bit and CFB mode expects a full block for the IV. Use
var iv = CryptoJS.lib.WordArray.random(128/8);

The iv and hash variables are WordArray objects, but encrypted is not. When you force them to be converted to strings by concatenating them (+), iv and hash are Hex-encoded, but encrypted is formatted in an OpenSSL compatible format and Base64-encoded. You need to access the ciphertext property to get the encrypted WordArray:
var concat = iv + encrypted.ciphertext;

and
var registrationKey = iv + encrypted.ciphertext + hash;

registrationKey is hex-encoded. There is no need to encode it again with Base64 and bloat it even more:
var basemessage = registrationKey;

If you want to convert the hex encoded registrationKey to base64 encoding, use:
var basemessage = CryptoJS.enc.Hex.parse(registrationKey).toString(CryptoJS.enc.Base64);

concat is a hex-encoded string of the IV and ciphertext, because you forced the stringification by ""adding"" (+) iv and encrypted. The HmacSHA256() function takes either a WordArray object or a string. When you pass a string in, as you do, it will assume that the data is UTF-8 encoded and try to decode it as UTF-8. You need to parse the data yourself into a WordArray:
var hash = CryptoJS.HmacSHA256(CryptoJS.enc.Hex.parse(concat), hmacKey);

The CryptoJS.AES.encrypt() and CryptoJS.HmacSHA256() expect the key either as a WordArray object or as a string. As before, if the key is supplied as a string, a UTF-8 encoding is assumed which is not the case here. You better parse the strings into WordArrays yourself:
var encryptionKey = CryptoJS.enc.Hex.parse(masterKey.substr(0, length));
var hmacKey = CryptoJS.enc.Hex.parse(masterKey.substr(length));


Server (Python):

You're not verifying anything in verify_hmac(). You hash the same data with the same key twice. What you need to do is hash the IV+ciphertext and compare the result with the hash (called tag or HMAC-tag) that you slice off the full ciphertext.
def verify_hmac(self, input_cipher, mac):
    # Calculate hash using derived key from local password
    local_hash = HMAC.new(self.hmac_key, digestmod=SHA256)
    local_hash.update(input_cipher)
    local_digest = local_hash.digest()

    return mac == local_digest

And later in decrypt():
verified_hmac = self.verify_hmac((iv+cipher_text), hmac)

You need to correctly slice off the MAC. The 60 that is hardcoded is a bad idea. Since you're using SHA-256 the MAC is 32 bytes long, so you do this
hmac = enc[-32:]
cipher_text = enc[16:-32]

The CFB mode is actually a set of similar modes. The actual mode is determined by the segment size. CryptoJS only supports segments of 128 bit. So you need tell pycrypto to use the same mode as in CryptoJS:
cipher = AES.new(self.key, AES.MODE_CFB, iv, segment_size=128)

If you want to use CFB mode with a segment size of 8 bit (default of pycrypto), you can use a modified version of CFB in CryptoJS from my project: Extension for CryptoJS

Full client code:
var password = 'BJhtfRjKnTDTtPXUBnErKDxfkiMCOLyP';
var data = 'mytext';

var masterKey = CryptoJS.SHA256(password).toString();
var length = masterKey.length / 2
var encryptionKey = CryptoJS.enc.Hex.parse(masterKey.substr(0, length));
var hmacKey = CryptoJS.enc.Hex.parse(masterKey.substr(length));

var iv = CryptoJS.lib.WordArray.random(128/8);

var encrypted = CryptoJS.AES.encrypt(
    data,
    encryptionKey,
    {
      iv: iv,
      mode: CryptoJS.mode.CFB
    }
);

var concat = iv + encrypted.ciphertext; 
var hash = CryptoJS.HmacSHA256(CryptoJS.enc.Hex.parse(concat), hmacKey);
var registrationKey = iv + encrypted.ciphertext + hash;
console.log(CryptoJS.enc.Hex.parse(registrationKey).toString(CryptoJS.enc.Base64));

Full server code:
from Crypto.Cipher import AES
from Crypto.Hash import HMAC, SHA256
import base64
import binascii

class AESCipher:
    def __init__(self, key):
        key_hash = SHA256.new(key).hexdigest()
        self.hmac_key = binascii.unhexlify(key_hash[len(key_hash)/2:])
        self.key = binascii.unhexlify(key_hash[:len(key_hash)/2])

    def verify_hmac(self, input_cipher, mac):
        local_hash = HMAC.new(self.hmac_key, digestmod=SHA256)
        local_hash.update(input_cipher)
        local_digest = local_hash.digest()

        return SHA256.new(mac).digest() == SHA256.new(local_digest).digest() # more or less constant-time comparison

    def decrypt(self, enc):
        enc = base64.b64decode(enc)
        iv = enc[:16]
        hmac = enc[-32:]
        cipher_text = enc[16:-32]

        verified_hmac = self.verify_hmac((iv+cipher_text), hmac)

        if verified_hmac:
            cipher = AES.new(self.key, AES.MODE_CFB, iv, segment_size=128)
            return cipher.decrypt(cipher_text)
        else:
            return 'Bad Verify'


password = 'BJhtfRjKnTDTtPXUBnErKDxfkiMCOLyP'

input = ""btu0CCFbvdYV4B/j7hezAra6Q6u6KB8n5QcyA32JFLU8QRd+jLGW0GxMQsTqxaNaNkcU2I9r1ls4QUPUpaLPQg==""

obj = AESCipher(password)
decryption = obj.decrypt(input)

print 'Decrypted message:', decryption

","2958","<python><encryption><hmac><pycrypto><cryptojs>","1","7","1","2017-01-21 07:48:38","31891184","0","1","1816580","","2015-08-08 08:25:39","2015-08-08 00:11:16",""
"4632992","Generated encrypted string does not have same size in PyCrypto and Crypto++","I recently used a Python script to encrypt a string. But could not decrypt it in C++ using Crypto++. I just compared generated encrypted strings and found they are not the same. Anybody can help?
Here is my Python code:
key  = ""0123456789abcdef""
data = ""ccccccccccccccccdddddddddddddddd""
iv = ""aaaaaaaaaaaaaaaa""
encryptor = AES.new(key, AES.MODE_CBC, iv)
enc = encryptor.encrypt(data)
print enc

Here is my C++ code:
std::string key = ""0123456789abcdef"";
std::string iv  = ""aaaaaaaaaaaaaaaa"";


std::string plaintext = ""ccccccccccccccccdddddddddddddddd"";
std::string ciphertext;
std::string decryptedtext;

std::cout << ""Plain Text ("" << plaintext.size() << "" bytes)"" << std::endl;
std::cout << plaintext;
std::cout << std::endl << std::endl;

CryptoPP::AES::Encryption aesEncryption((byte *)key.c_str(), CryptoPP::AES::DEFAULT_KEYLENGTH);
CryptoPP::CBC_Mode_ExternalCipher::Encryption cbcEncryption( aesEncryption, (byte *)iv.c_str() );

CryptoPP::StreamTransformationFilter stfEncryptor(cbcEncryption, new CryptoPP::StringSink( ciphertext ) );
stfEncryptor.Put( reinterpret_cast<const unsigned char*>( plaintext.c_str() ), plaintext.length() + 1 );
stfEncryptor.MessageEnd();

std::cout << ""Cipher Text ("" << ciphertext.size() << "" bytes)"" << std::endl;

for( int i = 0; i < ciphertext.size(); i++ ) {

    std::cout << ""0x"" << std::hex << (0xFF & static_cast<byte>(ciphertext[i])) << "" "";
}

CryptoPP::AES::Decryption aesDecryption((byte *)key.c_str(), CryptoPP::AES::DEFAULT_KEYLENGTH);
CryptoPP::CBC_Mode_ExternalCipher::Decryption cbcDecryption( aesDecryption, (byte *)iv.c_str() );

CryptoPP::StreamTransformationFilter stfDecryptor(cbcDecryption, new CryptoPP::StringSink( decryptedtext ) );
stfDecryptor.Put( reinterpret_cast<const unsigned char*>( ciphertext.c_str() ), ciphertext.size() );
stfDecryptor.MessageEnd();

std::cout << ""Decrypted Text: "" << std::endl;
std::cout << decryptedtext;
std::cout << std::endl << std::endl;

","By default, Crypto++ employs PKCS5 padding to the plaintext strings. This adds padding to the end of the string to make sure the string is a multiple of the block size which, for AES, is 16 bytes. If the plaintext is already a multiple of 16, Crypto++ adds another 16 bytes of padding to the plaintext and then encrypts the whole thing. PyCrypto doesn't add this extra padding, leaving it up to the user to ensure the correct block size. Note that when you decrypt the Crypto++-encrypted cipher text, the extra padding is automatically removed.
","2957","<c++><python><aes><crypto++><pycrypto>","4","4","1","2011-05-17 08:31:57","","2","1","505893","","2011-05-17 08:31:49","2011-01-08 07:54:10",""
"38003860","Can't find a constant-time module in cryptography package used on AWS Lambda","[I am new to Python 2.7 and AWS Lambda, any help is appreciated]
I followed the AWS Lambda tutorial and created a virtualenv to include Python libs associated with the use of paramiko to copy a file to an SFTP server as a scheduled task on AWS Lambda to run the following script:
import paramiko

def worker_handler(event, context):

    host = ""sftpserver.testdpom.com"" 
    port = 22
    transport = paramiko.Transport((host, port))

    sftp = paramiko.SFTPClient.from_transport(transport)

    username = ""xxxx""
    password = ""xxxxxx""

    transport.connect(username = username, password = password)

    sftp = paramiko.SFTPClient.from_transport(transport)

    sftp.put(""test.txt"", ""test.txt"")
    sftp.close()
    transport.close()

    return
    {
        'message' : ""Script execution completed. See Cloudwatch logs for complete output""
    }

The python script works correctly on my local machine but when I test the package on AWS Lambda, I get the error ""ImportError: No module named _constant_time"" and stack trace below.
Can you think of any possible reason for this error in AWS Lambda environment?
  File ""/var/task/paramiko/kex_group1.py"", line 111, in _parse_kexdh_reply
    self.transport._verify_key(host_key, sig)
  File ""/var/task/paramiko/transport.py"", line 1617, in _verify_key
    key = self._key_info[self.host_key_type](Message(host_key))
  File ""/var/task/paramiko/rsakey.py"", line 58, in __init__
    ).public_key(default_backend())
  File ""/var/task/cryptography/hazmat/backends/__init__.py"", line 35, in default_backend
    _default_backend = MultiBackend(_available_backends())
  File ""/var/task/cryptography/hazmat/backends/__init__.py"", line 22, in _available_backends
    ""cryptography.backends""
  File ""/var/task/pkg_resources/__init__.py"", line 2235, in resolve
    module = __import__(self.module_name, fromlist=['__name__'], level=0)
  File ""/var/task/cryptography/hazmat/backends/openssl/__init__.py"", line 7, in <module>
    from cryptography.hazmat.backends.openssl.backend import backend
  File ""/var/task/cryptography/hazmat/backends/openssl/backend.py"", line 15, in <module>
    from cryptography import utils, x509
  File ""/var/task/cryptography/x509/__init__.py"", line 7, in <module>
    from cryptography.x509.base import (
  File ""/var/task/cryptography/x509/base.py"", line 15, in <module>
    from cryptography.x509.extensions import Extension, ExtensionType
  File ""/var/task/cryptography/x509/extensions.py"", line 19, in <module>
    from cryptography.hazmat.primitives import constant_time, serialization
  File ""/var/task/cryptography/hazmat/primitives/constant_time.py"", line 9, in <module>
    from cryptography.hazmat.bindings._constant_time import lib
ImportError: No module named _constant_time

","Since lambda runs under the hood on amazon linux instances, you basically need to:

spin up an amazon linux ec2 instance
create a virtualenv and pip install all packages you need
scp the files down to wherever your local deployment package lives

This all happens due to issues with how pip install does things differently depending on whether you're on linux or mac (and I'm assuming windows as well). 
here's a startup script to get the ec2 instance up to speed afaik
#!/bin/bash

sudo yum upgrade -y
sudo yum group install -y ""Development tools""

sudo yum install -y \
    python27 \
    libffi libffi-devel \
    openssl openssl-devel

virtualenv venv
source venv/bin/activate

pip install paramiko

The paramiko package will be in /path/to/venv/lib/python2.7/site-packages/paramiko and the cryptography stuff will be in path/to/venv/lib64/python2.7/cryptography.
I've been using a combination of pip install on my local mac and doing this when a package doesn't work (like for paramiko and psycopg2), and there are a few other helpful packages that people have pre-compiled and put up on github elsewhere specifically for lambda. 
HTH!
","2943","<python><amazon-web-services><paramiko><aws-lambda><pycrypto>","4","7","1","2016-09-14 18:04:24","39496915","2","1","86324","","2016-06-24 02:33:38","2016-06-24 00:17:33",""
"11567290","CryptoJS and Pycrypto working together","I'm encrypting a string in a web application using CryptoJS (v 2.3), and I need to decrypt it on the server in Python, so I'm using PyCrypto. I feel like I'm missing something because I can't can it working.
Here's the JS:
Crypto.AES.encrypt('1234567890123456', '1234567890123456',
                   {mode: new Crypto.mode.CBC(Crypto.pad.ZeroPadding)})
// output: ""wRbCMWcWbDTmgXKCjQ3Pd//aRasZ4mQr57DgTfIvRYE=""

The python:
from Crypto.Cipher import AES
import base64
decryptor = AES.new('1234567890123456', AES.MODE_CBC)
decryptor.decrypt(base64.b64decode(""wRbCMWcWbDTmgXKCjQ3Pd//aRasZ4mQr57DgTfIvRYE=""))
# output: '\xd0\xc2\x1ew\xbb\xf1\xf2\x9a\xb9\xb6\xdc\x15l\xe7\xf3\xfa\xed\xe4\xf5j\x826\xde(m\xdf\xdc_\x9e\xd3\xb1'

","Here is a version with CryptoJS 3.1.2. Always beware of the following things (use the same in both languages):

Mode of operation (CBC in this case)
Padding (Zero Padding in this case; better use PKCS#7 padding)
Key (the same derivation function or clear key)
Encoding (same encoding for key, plaintext, ciphertext, ...)
IV (generated during encryption, passed for decryption)

If a string is passed as the key argument to the CryptoJS encrypt() function, the string is used to derive the actual key to be used for encryption. If you wish to use a key (valid sizes are 16, 24 and 32 byte), then you need to pass it as a WordArray.
The result of the CryptoJS encryption is an OpenSSL formatted ciphertext string. To get the actual ciphertext from it, you need to access the ciphertext property on it.
The IV must be random for each encryption so that it is semantically secure. That way attackers cannot say whether the same plaintext that was encrypted multiple times is actually the same plaintext when only looking at the ciphertext.
Below is an example that I have made.
JavaScript:
var key = CryptoJS.enc.Utf8.parse('1234567890123456');

function encrypt(msgString, key) {
    // msgString is expected to be Utf8 encoded
    var iv = CryptoJS.lib.WordArray.random(16);
    var encrypted = CryptoJS.AES.encrypt(msgString, key, {
        iv: iv
    });
    return iv.concat(encrypted.ciphertext).toString(CryptoJS.enc.Base64);
}

function decrypt(ciphertextStr, key) {
    var ciphertext = CryptoJS.enc.Base64.parse(ciphertextStr);

    // split IV and ciphertext
    var iv = ciphertext.clone();
    iv.sigBytes = 16;
    iv.clamp();
    ciphertext.words.splice(0, 4); // delete 4 words = 16 bytes
    ciphertext.sigBytes -= 16;

    // decryption
    var decrypted = CryptoJS.AES.decrypt({ciphertext: ciphertext}, key, {
        iv: iv
    });
    return decrypted.toString(CryptoJS.enc.Utf8);
}

Python code:
BLOCK_SIZE = 16
key = b""1234567890123456""

def pad(data):
    length = BLOCK_SIZE - (len(data) % BLOCK_SIZE)
    return data + chr(length)*length

def unpad(data):
    return data[:-ord(data[-1])]

def encrypt(message, passphrase):
    IV = Random.new().read(BLOCK_SIZE)
    aes = AES.new(passphrase, AES.MODE_CBC, IV)
    return base64.b64encode(IV + aes.encrypt(pad(message)))

def decrypt(encrypted, passphrase):
    encrypted = base64.b64decode(encrypted)
    IV = encrypted[:BLOCK_SIZE]
    aes = AES.new(passphrase, AES.MODE_CBC, IV)
    return unpad(aes.decrypt(encrypted[BLOCK_SIZE:]))


Other considerations:
It seems that you want to use a passphrase as a key. Passphrases are usually human readable, but keys are not. You can derive a key from a passphrase with functions such as PBKDF2, bcrypt or scrypt.
The code above is not fully secure, because it lacks authentication. Unauthenticated ciphertexts may lead to viable attacks and unnoticed data manipulation. Usually the an encrypt-then-MAC scheme is employed with a good MAC function such as HMAC-SHA256.
","2908","<javascript><python><encryption><pycrypto><cryptojs>","0","5","1","2019-04-10 05:35:49","31011115","2","","1816580","","2015-06-23 18:52:29","2012-07-19 18:42:58",""
"32145159","python convert RSA key (in PEM format) to hex string","I would like to convert my RSA keys to a hex string, but am unsure on how to do this.
I generate my keys like this:
def generate_RSA(self, bits=1024):
        new_key = RSA.generate(bits, e=65537)
        self.public_key = new_key.publickey().exportKey(""PEM"")
        public_key_file = open('public_key.key', 'w')
        public_key_file.write(self.public_key)
        public_key_file.close()

        self.private_key = new_key.exportKey(""PEM"")
        private_key_file = open('private_key.key', 'w')
        private_key_file.write(self.private_key)
        private_key_file.close()

This gives for example
-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqMROLBpbqrHi4WC4XAElMXoNh
0EMODB763pcTiwpOLc72K8DqQ48BuVwKXit9uvWz1pth/2aJfXZuX2awQEPCmeUe
XtDca/ljksnq/3xo7Ph0/zoeKyJbLziLYjOgn22rxtJ9cVV7kFFm2whxFAGP0h6N
QcFrMSUaRA2x2riQNwIDAQAB
-----END PUBLIC KEY-----

Which is fine, but I would like to (1) strip the header and footer of the PEM file and (2) send the RSA key in hex form, basically a string like this (random):
00a9e885395f47d47a9b58560d3f14254efa0692464756f9c0b7a046f328674a1951e1d008679d44e556bea3c747ae485e41ab0f9b24ab9cca99b8097a03e1c0e5455b983f432e5f02d6a87ba27af412efae3db9e219e9dc2627a74c1840b85048e251cee2b1abcbabf7c41de7bb5091c68ac1ac7d91f48afcea1c4bf6683c4011
How can I achieve this?
","What you probably need is a DER encoded, I really don't know much about Python but you could probably use something like 
new_key.publickey().exportKey(""DER"")

which would give you a DER encoded key, binary format most likely, what you do afterwards is transform that binary to hex and there you go. 
","2889","<python><encoding><hex><rsa><pycrypto>","1","1","1","2015-08-21 17:13:25","32145902","0","","1816580","","2015-08-21 17:08:06","2015-08-21 16:24:34",""
"23528557","How to import relative Python package (pycrypto)","I am new to Python (as of today) and having trouble following this example for AES: https://pypi.python.org/pypi/pycrypto/2.6.1 using Python 3.3
from Crypto.Cipher import AES
I downloaded the package from here https://www.dlitz.net/software/pycrypto/ (pycrypto-2.6.1.tar.gz) as I want it as a local dependency since this is a portable plugin for Sublime Text 3.
So I have /MyPLugin/Crypto/ and Crypto looks good having the expected __init__.py files in the right places.
In /MyPlugin/myplugin.py I am trying to import AES like in the example (from Crypto.Cipher import AES). I have tried many combinations with dots and stuff but nothing seems to work.
How can I import AES from this relative Crypto folder?
Couple of the tries:
from MyPlugin.Crypto.Cipher import AES = ImportError: cannot import name AES
import Crypto = ImportError: No module named 'Crypto'
import .Crypto = SyntaxError: invalid syntax
PS I made a mistake - it is using Python 3.3
","Make sure that the library you are talking about is in your python path.  Information about modifying your python path here.  I'd try doing that.  Although, when you add a new library this usually happens.
","2881","<python><import><sublimetext3><relative><pycrypto>","0","2","1","2014-05-07 21:31:20","23528744","0","","414062","","2014-05-07 21:31:20","2014-05-07 21:13:49","2019-10-09 03:36:47"
"20078036","file not found: /usr/lib/system/libdnsinfo.dylib for architecture i386","I am on MAC 10.9 with XCode 4.6.3 and have command line tools installed
I am trying to compile pycrypto-2.1.0 using 
python setup.py build and getting following error


-----------------------------------------------------------------------------
ld: warning: ignoring file build/temp.macosx-10.6-intel-2.7/src/MD2.o, file was built for unsupported file format ( 0xcf 0xfa 0xed 0xfe 0x 7 0x 0 0x 0 0x 1 0x 3 0x 0 0x 0 0x 0 0x 1 0x 0 0x 0 0x 0 ) which is not the architecture being linked (i386): build/temp.macosx-10.6-intel-2.7/src/MD2.o
ld: file not found: /usr/lib/system/libdnsinfo.dylib for architecture i386
collect2: ld returned 1 exit status
ld: file not found: /usr/lib/system/libdnsinfo.dylib for architecture x86_64
collect2: ld returned 1 exit status
------------------------------------------------------------------------------------

locate is giving 

$ locate libdnsinfo.dylib
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.7.sdk/usr/lib/system/libdnsinfo.dylib
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.8.sdk/usr/lib/system/libdnsinfo.dylib
/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS6.1.sdk/usr/lib/system/libdnsinfo.dylib

These path are also added to PATH.
Following is command and error

$ python setup.py  build
running build
running build_py
running build_ext
warning: GMP library not found; Not building Crypto.PublicKey._fastmath.
building 'Crypto.Hash.MD2' extension
gcc-4.2 -I/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.7.sdk/usr/include/ -I/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.7.sdk/usr/include/ -I/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.7.sdk/usr/include/c++/4.2.1/ -O3 -fomit-frame-pointer -Isrc/ -I/Library/Frameworks/Python.framework/Versions/2.7/include/python2.7 -c src/MD2.c -o build/temp.macosx-10.6-intel-2.7/src/MD2.o
gcc-4.2 -bundle -undefined dynamic_lookup -arch i386 -arch x86_64 -g -L/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.7.sdk/usr/lib -I/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.7.sdk/usr/include/ -I/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.7.sdk/usr/include/ -I/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.7.sdk/usr/include/c++/4.2.1/ build/temp.macosx-10.6-intel-2.7/src/MD2.o -o build/lib.macosx-10.6-intel-2.7/Crypto/Hash/MD2.so
ld: warning: ignoring file build/temp.macosx-10.6-intel-2.7/src/MD2.o, file was built for unsupported file format ( 0xcf 0xfa 0xed 0xfe 0x 7 0x 0 0x 0 0x 1 0x 3 0x 0 0x 0 0x 0 0x 1 0x 0 0x 0 0x 0 ) which is not the architecture being linked (i386): build/temp.macosx-10.6-intel-2.7/src/MD2.o
ld: file not found: /usr/lib/system/libdnsinfo.dylib for architecture i386
collect2: ld returned 1 exit status
ld: file not found: /usr/lib/system/libdnsinfo.dylib for architecture x86_64
collect2: ld returned 1 exit status
Any idea to fix this?
","I ran into this issue as well after upgrading to osx 10.9 while attempting to link in openssl libraries to a simple c application. 
The quick solution that worked for me is to link one of the libdnsinfo files into /usr/lib/system
ex:
ln -s /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.8.sdk/usr/lib/system/libdnsinfo.dylib /usr/lib/system/libdnsinfo.dylib

","2853","<python><ios><xcode><macos><pycrypto>","0","0","3","2015-01-14 06:16:55","","6","","1661010","","2013-11-19 18:07:18","2013-11-19 17:27:35",""
"20078036","file not found: /usr/lib/system/libdnsinfo.dylib for architecture i386","I am on MAC 10.9 with XCode 4.6.3 and have command line tools installed
I am trying to compile pycrypto-2.1.0 using 
python setup.py build and getting following error


-----------------------------------------------------------------------------
ld: warning: ignoring file build/temp.macosx-10.6-intel-2.7/src/MD2.o, file was built for unsupported file format ( 0xcf 0xfa 0xed 0xfe 0x 7 0x 0 0x 0 0x 1 0x 3 0x 0 0x 0 0x 0 0x 1 0x 0 0x 0 0x 0 ) which is not the architecture being linked (i386): build/temp.macosx-10.6-intel-2.7/src/MD2.o
ld: file not found: /usr/lib/system/libdnsinfo.dylib for architecture i386
collect2: ld returned 1 exit status
ld: file not found: /usr/lib/system/libdnsinfo.dylib for architecture x86_64
collect2: ld returned 1 exit status
------------------------------------------------------------------------------------

locate is giving 

$ locate libdnsinfo.dylib
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.7.sdk/usr/lib/system/libdnsinfo.dylib
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.8.sdk/usr/lib/system/libdnsinfo.dylib
/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS6.1.sdk/usr/lib/system/libdnsinfo.dylib

These path are also added to PATH.
Following is command and error

$ python setup.py  build
running build
running build_py
running build_ext
warning: GMP library not found; Not building Crypto.PublicKey._fastmath.
building 'Crypto.Hash.MD2' extension
gcc-4.2 -I/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.7.sdk/usr/include/ -I/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.7.sdk/usr/include/ -I/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.7.sdk/usr/include/c++/4.2.1/ -O3 -fomit-frame-pointer -Isrc/ -I/Library/Frameworks/Python.framework/Versions/2.7/include/python2.7 -c src/MD2.c -o build/temp.macosx-10.6-intel-2.7/src/MD2.o
gcc-4.2 -bundle -undefined dynamic_lookup -arch i386 -arch x86_64 -g -L/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.7.sdk/usr/lib -I/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.7.sdk/usr/include/ -I/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.7.sdk/usr/include/ -I/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.7.sdk/usr/include/c++/4.2.1/ build/temp.macosx-10.6-intel-2.7/src/MD2.o -o build/lib.macosx-10.6-intel-2.7/Crypto/Hash/MD2.so
ld: warning: ignoring file build/temp.macosx-10.6-intel-2.7/src/MD2.o, file was built for unsupported file format ( 0xcf 0xfa 0xed 0xfe 0x 7 0x 0 0x 0 0x 1 0x 3 0x 0 0x 0 0x 0 0x 1 0x 0 0x 0 0x 0 ) which is not the architecture being linked (i386): build/temp.macosx-10.6-intel-2.7/src/MD2.o
ld: file not found: /usr/lib/system/libdnsinfo.dylib for architecture i386
collect2: ld returned 1 exit status
ld: file not found: /usr/lib/system/libdnsinfo.dylib for architecture x86_64
collect2: ld returned 1 exit status
Any idea to fix this?
","Faced same issue in eclipse
Following worked for me:
1) Find location of lib
 locate libdnsinfo.dynlib

2) Copy and paste location to 
 project > properties > C/C++ Build > Settings > MacOS X C Linker > Libraries > Library Search Path

","2853","<python><ios><xcode><macos><pycrypto>","0","0","3","2015-01-14 06:16:55","","6","","1661010","","2013-11-19 18:07:18","2013-11-19 17:27:35",""
"20078036","file not found: /usr/lib/system/libdnsinfo.dylib for architecture i386","I am on MAC 10.9 with XCode 4.6.3 and have command line tools installed
I am trying to compile pycrypto-2.1.0 using 
python setup.py build and getting following error


-----------------------------------------------------------------------------
ld: warning: ignoring file build/temp.macosx-10.6-intel-2.7/src/MD2.o, file was built for unsupported file format ( 0xcf 0xfa 0xed 0xfe 0x 7 0x 0 0x 0 0x 1 0x 3 0x 0 0x 0 0x 0 0x 1 0x 0 0x 0 0x 0 ) which is not the architecture being linked (i386): build/temp.macosx-10.6-intel-2.7/src/MD2.o
ld: file not found: /usr/lib/system/libdnsinfo.dylib for architecture i386
collect2: ld returned 1 exit status
ld: file not found: /usr/lib/system/libdnsinfo.dylib for architecture x86_64
collect2: ld returned 1 exit status
------------------------------------------------------------------------------------

locate is giving 

$ locate libdnsinfo.dylib
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.7.sdk/usr/lib/system/libdnsinfo.dylib
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.8.sdk/usr/lib/system/libdnsinfo.dylib
/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS6.1.sdk/usr/lib/system/libdnsinfo.dylib

These path are also added to PATH.
Following is command and error

$ python setup.py  build
running build
running build_py
running build_ext
warning: GMP library not found; Not building Crypto.PublicKey._fastmath.
building 'Crypto.Hash.MD2' extension
gcc-4.2 -I/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.7.sdk/usr/include/ -I/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.7.sdk/usr/include/ -I/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.7.sdk/usr/include/c++/4.2.1/ -O3 -fomit-frame-pointer -Isrc/ -I/Library/Frameworks/Python.framework/Versions/2.7/include/python2.7 -c src/MD2.c -o build/temp.macosx-10.6-intel-2.7/src/MD2.o
gcc-4.2 -bundle -undefined dynamic_lookup -arch i386 -arch x86_64 -g -L/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.7.sdk/usr/lib -I/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.7.sdk/usr/include/ -I/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.7.sdk/usr/include/ -I/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.7.sdk/usr/include/c++/4.2.1/ build/temp.macosx-10.6-intel-2.7/src/MD2.o -o build/lib.macosx-10.6-intel-2.7/Crypto/Hash/MD2.so
ld: warning: ignoring file build/temp.macosx-10.6-intel-2.7/src/MD2.o, file was built for unsupported file format ( 0xcf 0xfa 0xed 0xfe 0x 7 0x 0 0x 0 0x 1 0x 3 0x 0 0x 0 0x 0 0x 1 0x 0 0x 0 0x 0 ) which is not the architecture being linked (i386): build/temp.macosx-10.6-intel-2.7/src/MD2.o
ld: file not found: /usr/lib/system/libdnsinfo.dylib for architecture i386
collect2: ld returned 1 exit status
ld: file not found: /usr/lib/system/libdnsinfo.dylib for architecture x86_64
collect2: ld returned 1 exit status
Any idea to fix this?
","Use libdns_services instead, libdnsinfo.dylib is no more supported by latest sdk.
","2853","<python><ios><xcode><macos><pycrypto>","0","0","3","2015-01-14 06:16:55","","6","","1661010","","2013-11-19 18:07:18","2013-11-19 17:27:35",""
"32592316","how to solve this paramiko import issue?","I have an issue with installing paramiko.. I think It is installed correctly from pip and when I tried to do import paramiko... I got an error..
us159010:site-packages jaehokim00$ python
Python 2.6.9 (unknown, Jul 14 2015, 19:46:31) 
[GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.39)] on darwin
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.


 import paramiko
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
  File ""paramiko/__init__.py"", line 30, in <module>
    from paramiko.transport import SecurityOptions, Transport
  File ""paramiko/transport.py"", line 49, in <module>
    from paramiko.dsskey import DSSKey
  File ""paramiko/dsskey.py"", line 26, in <module>
    from Crypto.PublicKey import DSA 
ImportError: No module named Crypto.PublicKey

I also reinstalled on pycrypto again. My python version is 2.6 and os is Mac OS 10.10.5 
","I got this somehow when I install crypto it shows crypto and paramiko is looking for Crypto 
I had to change site-package directory for crypto to Crypto and it worked
","2832","<paramiko><pycrypto>","0","1","3","2016-10-10 15:37:21","","0","","7432","","2015-10-04 13:34:35","2015-09-15 17:35:18",""
"32592316","how to solve this paramiko import issue?","I have an issue with installing paramiko.. I think It is installed correctly from pip and when I tried to do import paramiko... I got an error..
us159010:site-packages jaehokim00$ python
Python 2.6.9 (unknown, Jul 14 2015, 19:46:31) 
[GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.39)] on darwin
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.


 import paramiko
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
  File ""paramiko/__init__.py"", line 30, in <module>
    from paramiko.transport import SecurityOptions, Transport
  File ""paramiko/transport.py"", line 49, in <module>
    from paramiko.dsskey import DSSKey
  File ""paramiko/dsskey.py"", line 26, in <module>
    from Crypto.PublicKey import DSA 
ImportError: No module named Crypto.PublicKey

I also reinstalled on pycrypto again. My python version is 2.6 and os is Mac OS 10.10.5 
","I have just got the same error message. I've solved it following these steps.
At its official doc says, paramiko needs pycrypto and ecdsa packages.
to start with, you need python-dev package:
sudo apt-get install python-dev

Then install pycrypto. Here is the package download, it is better to choose the last release, build it an install it:

go to pycrypto extraction dir
python setup.py build
python setup.py install

Do the same thing for ecdsa, you can download it from here.
Here you go !
","2832","<paramiko><pycrypto>","0","0","3","2016-10-10 15:37:21","","0","","7432","","2015-10-04 13:34:35","2015-09-15 17:35:18",""
"32592316","how to solve this paramiko import issue?","I have an issue with installing paramiko.. I think It is installed correctly from pip and when I tried to do import paramiko... I got an error..
us159010:site-packages jaehokim00$ python
Python 2.6.9 (unknown, Jul 14 2015, 19:46:31) 
[GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.39)] on darwin
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.


 import paramiko
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
  File ""paramiko/__init__.py"", line 30, in <module>
    from paramiko.transport import SecurityOptions, Transport
  File ""paramiko/transport.py"", line 49, in <module>
    from paramiko.dsskey import DSSKey
  File ""paramiko/dsskey.py"", line 26, in <module>
    from Crypto.PublicKey import DSA 
ImportError: No module named Crypto.PublicKey

I also reinstalled on pycrypto again. My python version is 2.6 and os is Mac OS 10.10.5 
","As for me what worked in OS X is: 
brew uninstall python
brew install python
pip install -r requirements.txt
aka: pip install crypto pycrypto Fabric paramiko

in terminal this was not the fastest strategy possibly but it did work.
","2832","<paramiko><pycrypto>","0","0","3","2016-10-10 15:37:21","","0","","7432","","2015-10-04 13:34:35","2015-09-15 17:35:18",""
"5116760","RSA encryption in .NET, decryption in python","I'm trying to encrypt a short message using RSA algorithm in C# and decrypt the message using a python skript.
I'd like to use the .NET classes on the C# side and pycrypto on python side. I've managed both sides to use the same key (which was not even trivial since .NET doesn't support the standard PEM/DER format directly). Encryption/decryption works on both sides independently.
I'm using PKCS#1 padding on the C# side (setting the fOAEP parameter of RSACryptoServiceProvider.Encrypt to false), so I'd expect that after decrypting the block in python I should see some kind of clear text (i.e. my ""message"" together with padding bytes)
But all I see is garbage :(.
Are there any caveats/pitfalls I'm not aware of on either side? I'm kind of out of ideas ...
Thx
Martin
Sample code
C# / Encryption
Console.Write(""Input string:"");
var s = Console.ReadLine();
var b = Encoding.Default.GetBytes(s);
var encrypted = rsa.Encrypt(b, false);
using (var file = new FileStream(filename, FileMode.Create)) {
  file.Write(encrypted, 0, encrypted.Length);
  file.Flush();
  file.Close();
}

Python / Decryption
f = open(filename, ""rb"")
msg = f.read()
f.close()
decrypted = rsa.decrypt(msg)
print ""Decrypted message:""
print_hex(decrypted)

For Key transfer I'm using the ToXmlString() method of RSACryptoServiceProvider. The resulting XML is parsed in python and the pycrypto-RSA object is initialized with
r = Crypto.PublicKey.RSA.construct((modulus, exponent, d, p, q))

where modulus, exponent, d, p and q are the respective fields of the .NET-RSAParameters structure. (as I've mentioned, I can encrypt/decrypt a message using this key in python, also p*q yields modulus, so I think the key import is working correctly ...)
","Ok, it was my fault, I just didn't look at the results: The leading zero (from PKCS#1 padding) is not part of the python result string, which looks (in hex) like:
02 a2 16 4e 51 45 aa 8d 
94 b0 de 64 4d 4c 4c bd 
0b 01 b8 d2 de dc ed 23 
0b 25 c2 11 6c 0a 0b 1f 
4f 19 d0 33 18 db e0 81 
25 33 f6 e3 70 8d 97 d2 
c7 ef 32 ef 27 3c c0 ac 
47 68 c0 5b 7b 6d 0d ba 
44 da cb bf e8 71 75 d3 
2f 9a b1 97 6b 70 4f ff 
98 6f 5a 9a 74 3c 65 94 
eb 57 52 8a 2f 73 1f 14 
7d 76 08 d3 e5 8b 82 b8 
5d ed 2b 75 52 29 b5 22 
af 76 55 bc 5d e9 41 99 
00 4d 61 72 74 69 6e 

So, 02 at the beginning points to random padding (somehow I was expecting 0xff padding...). The last 6 bytes (after the zero) are exactly the ""Message"" I was expecting, but a normal print didn't show them just because of the zero byte...
","2783","<.net><python><rsa><public-key-encryption><pycrypto>","3","2","1","2011-02-25 12:24:57","","5","1","81424","","2011-02-25 12:13:44","2011-02-25 11:36:26",""
"3507543","Inserting Encrypted Data in Postgres via SQLALchemy","I want to encrypt a string using RSA algorithm and then store that string into postgres database using SQLAlchemy in python. Then Retrieve the encrypted string and decrypt it using the same key. My problem is that the value gets stored in the database is not same as the actual encrypted string. The datatype of column which is storing the encrypted value is bytea. I am using pycrypto library. Do I need to change the data in a particular format before inserting it to database table?
Any suggestions please.
Thanks,
Tara Singh
","By ""same key"" you mean ""the other key"", right? RSA gives you a keypair, if you encrypt with one you decrypt with the other ...
Other than that, it sounds like a encoding problem. Try storing the data as binary or encode the string with your databases collation.
Basically encryption gives you bytes but you store them as a string (encoded bytes).
","2757","<python><postgresql><sqlalchemy><rsa><pycrypto>","1","1","2","2014-01-21 06:09:18","","0","1","","","","2010-08-17 22:39:15",""
"3507543","Inserting Encrypted Data in Postgres via SQLALchemy","I want to encrypt a string using RSA algorithm and then store that string into postgres database using SQLAlchemy in python. Then Retrieve the encrypted string and decrypt it using the same key. My problem is that the value gets stored in the database is not same as the actual encrypted string. The datatype of column which is storing the encrypted value is bytea. I am using pycrypto library. Do I need to change the data in a particular format before inserting it to database table?
Any suggestions please.
Thanks,
Tara Singh
","I think the SQLAlchemy documents contain a 'recipe' example which uses the 'hybrid' property. I do not profess to understand it fully or tried it yet, but you may find it useful:  
http://www.sqlalchemy.org/trac/wiki/UsageRecipes/SymmetricEncryption
","2757","<python><postgresql><sqlalchemy><rsa><pycrypto>","1","0","2","2014-01-21 06:09:18","","0","1","","","","2010-08-17 22:39:15",""
"16216363","How can you store a rsa key pair in a django model / sqlite db","i am using PyCrypto within Django (Python 2.7, Django 1.5m SQLite), i would like to create a field to store an RSAkey object. How can i do this? Converting to a string and back seems pretty error prone and since random bytes are in there, i would not trust that to be a good approach.
I was able to store random keys in a charfield by base-64 encoding it (like this: Random.new().read(16).encode('base64')). But a keypair?
I saw in the current dev version of Django, a binary field is incorporated, but we need to stick to 1.5.
Any help would really be appreciated.
Thanks
Gerd
","you just need to store the private key, because you always can generate the public key from the private one.
>>> from Crypto.PublicKey import RSA
>>> RSAkey = RSA.generate(1024)

The public key can be exported with
>>> RSAkey.publickey().exportKey()

To save the private key you might want to convert it to a text with the exportKey() method and store it in a django-TextField:
>>> RSAkey.exportKey()
'-----BEGIN RSA PRIVATE KEY-----\nMI...-----END'

Converting the text back to a RSA key object is easy too:
>>> RSA.importKey('-----BEGIN RSA PRIVATE KEY--- ....')

gets you a RSAobj like the one I generated at first.
You might also try the ""hard way"" by creating your own model field class, if you intend to use the functionality in other areas as well. See https://docs.djangoproject.com/en/1.5/howto/custom-model-fields/
","2690","<django><sqlite><pycrypto>","3","5","1","2013-04-25 14:33:45","16217601","0","2","","","","2013-04-25 13:41:10",""
"13937228","On Mac OS X, easy_install fabric and/or easy_install pycrypto fails due to linker error ""illegal text-relocation""","When trying to easy_installfabric (or easy_installpycrypto, which fabric depends on), I got the following linker error on Mac OS X:
ld: illegal text-relocation to ___gmp_binvert_limb_table in /usr/local/lib/libgmp.a(mp_minv_tab.o) from ___gmpn_divexact_1 in /usr/local/lib/libgmp.a(dive_1.o) for architecture x86_64
clang: error: linker command failed with exit code 1 (use -v to see invocation)
error: Setup script exited with error: command 'clang' failed with exit status 1

","I was using a custom install of python, which apparently wasn't compatible with my standard install of libGMP.  Building libGMP from source (in my own prefix location, used by my special python install) fixed the problem.
$ bunzip2 gmp-5.0.5.tar.bz2
$ tar -xf gmp-5.0.5.tar
$ cd gmp-5.0.5
$ ./configure --prefix=/path/to/my/special/prefix
$ make
$ make check
$ make install
$ easy_install pycrypto
$ easy_install fabric

","2666","<python><macos><fabric><pycrypto>","3","2","1","2012-12-18 16:23:03","13937230","0","","","","","2012-12-18 16:23:03",""
"9565017","Problems with AES in crypto-js and pycrypto","I try to implement a communication between

crypto-js (a javascript crypto library) 
and pycrypto (a python crypto library)

On the python server side I encrypt a string with an iv and a passphrase and send the iv with the encrypted text base64 encoded to the javascript client side. Then I want to decrypt the string with the passphrase the user can enter.
python - server
from Crypto.Cipher import AES
from Crypto import Random

iv = Random.get_random_bytes(16)
key = ""1234567812345678""
aes = AES.new(key, AES.MODE_CFB, iv)
encrypted_text = base64.b64encode(aes.encrypt(""this is a test..""))
iv = base64.b64encode(iv)
# send iv, encrypted_text to client

javascript - client
// <script type=""text/javascript"" 
        src=""http://crypto-js.googlecode.com/files/2.5.3-crypto-sha1-hmac-pbkdf2-blockmodes-aes.js"">
   </script>
// text, and iv is base64encoded from the python script
// key is a string from an <input type='text'>
decrypted = Crypto.AES.decrypt(text, key, {iv: iv, mode: new Crypto.mode.CFB});

With this example I get a javascript error
Uncaught URIError: URI malformed

But this is just one example - I tried every constellation of base64 encodings/decodings I could think of. I also tried to changed the Mode. But these are all random tests and I want to understand what I really have to do. 

What encoding does the crypt-js want? 
Which mode should I chose?
Is there something I should change on the python server side?
what is about padding? Could there be the fault?
any other javascript libraries you can recommend?

thank you very much and kind reagards,
samuirai
","Before You encode to base64 You must sum iv and encrypted_text:
encrypted_text = base64.b64encode(iv + aes.encrypt(""this is a test..""))

From the official documentation (https://www.dlitz.net/software/pycrypto/doc/) :
As an example, encryption can be done as follows:
from Crypto.Cipher import AES
from Crypto import Random

key = b'Sixteen byte key'
iv = Random.new().read(AES.block_size)
cipher = AES.new(key, AES.MODE_CFB, iv)
msg = iv + cipher.encrypt(b'Attack at dawn')

","2630","<javascript><python><base64><aes><pycrypto>","3","0","1","2012-12-20 04:41:16","","2","","155033","","2012-03-05 10:25:30","2012-03-05 10:23:40",""
"23289047","PyInstaller not correctly importing pycrypto... sometimes","I'm packaging a project with PyInstaller on different ubuntu machines.
On some of them, when executing the generated project, it throws this error:

File
  ""~/PyInstaller-2.1/proj/build/proj/out00-PYZ.pyz/Crypto.Random"",
  line 28, in  ImportError: cannot import name OSRNG

However the import works perfectly ok in python console and I can execute the project without packaging it.
I've tried uninstalling and reinstalling pycrypto without success, I've also tried adding a specific

from Crypto.Random import OSRNG

to the main file just so PyInstaller would pick it up.
","I've solved it by adding Crypto directory tree to spec file
I get the path with this function:
def get_crypto_path():
    '''Auto import sometimes fails on linux'''
    import Crypto
    crypto_path = Crypto.__path__[0]
    return crypto_path

And then substitute in spec file:
dict_tree = Tree('CRYPTO_PATH', prefix='Crypto', excludes=[""*.pyc""])
a.datas += dict_tree

","2551","<python><python-2.7><pyinstaller><pycrypto>","2","1","3","2018-04-24 20:54:56","23289322","0","2","2662901","","2018-04-07 23:59:40","2014-04-25 09:20:45",""
"23289047","PyInstaller not correctly importing pycrypto... sometimes","I'm packaging a project with PyInstaller on different ubuntu machines.
On some of them, when executing the generated project, it throws this error:

File
  ""~/PyInstaller-2.1/proj/build/proj/out00-PYZ.pyz/Crypto.Random"",
  line 28, in  ImportError: cannot import name OSRNG

However the import works perfectly ok in python console and I can execute the project without packaging it.
I've tried uninstalling and reinstalling pycrypto without success, I've also tried adding a specific

from Crypto.Random import OSRNG

to the main file just so PyInstaller would pick it up.
","I was able to solve the problem with hithwen's recipe, but with a slightly different .spec file. I'll leave it here for reference for everyone.
# -*- mode: python -*-

#Tweaks to properly import pyCrypto

#Get the path
def get_crypto_path():
    '''Auto import sometimes fails on linux'''
    import Crypto
    crypto_path = Crypto.__path__[0]
    return crypto_path

#Analysis remains untouched
a = Analysis(['myapp.py'],
             pathex=[],
             hiddenimports=[],
             hookspath=None,
             runtime_hooks=None)
#Add to the tree the pyCrypto folder
dict_tree = Tree(get_crypto_path(), prefix='Crypto', excludes=[""*.pyc""])
a.datas += dict_tree
#As we have the so/pyd in the pyCrypto folder, we don't need them anymore, so we take them out from the executable path
a.binaries = filter(lambda x: 'Crypto' not in x[0], a.binaries)
#PYZ remains untouched
pyz = PYZ(a.pure)
#EXE remains untouched
exe = EXE(pyz,
          a.scripts,
          exclude_binaries=True,
          name='myapp',
          debug=False,
          strip=None,
          upx=True,
          console=True )
#COLLECT remains untouched
coll = COLLECT(exe,
               a.binaries,
               a.zipfiles,
               a.datas,
               strip=None,
               upx=True,
               name='myapp')

","2551","<python><python-2.7><pyinstaller><pycrypto>","2","3","3","2018-04-24 20:54:56","23289322","0","2","2662901","","2018-04-07 23:59:40","2014-04-25 09:20:45",""
"23289047","PyInstaller not correctly importing pycrypto... sometimes","I'm packaging a project with PyInstaller on different ubuntu machines.
On some of them, when executing the generated project, it throws this error:

File
  ""~/PyInstaller-2.1/proj/build/proj/out00-PYZ.pyz/Crypto.Random"",
  line 28, in  ImportError: cannot import name OSRNG

However the import works perfectly ok in python console and I can execute the project without packaging it.
I've tried uninstalling and reinstalling pycrypto without success, I've also tried adding a specific

from Crypto.Random import OSRNG

to the main file just so PyInstaller would pick it up.
","I got it working by replacing pycrypto / pycryptodome with pycryptodomex. Sharing a link to the already posted answer: https://stackoverflow.com/a/50009769/4355695 
","2551","<python><python-2.7><pyinstaller><pycrypto>","2","0","3","2018-04-24 20:54:56","23289322","0","2","2662901","","2018-04-07 23:59:40","2014-04-25 09:20:45",""
"18307952","Unable to install Fabric on OSX using recommended Homebrew and pip. Xcode is latest version","I've been trying for two days to figure this out now.  I have the latest version of OSX and Homebrew.  I followed a tutorial that had me install pip via Homebrew and then it was recommended to install Fabric from Homebrew with:
brew install Fabric

But the formula for Fabric is gone from Homebrew.  Yes, I ran an update too.  So I followed yet another tutorial that advised me to install via pip.  pip install fabric
And it fails in all kinds of ways involving pycrypto.  Here's the pip log.  Aren't Macs supposed to make life easier?  
status = self.run(options, args)
  File ""/usr/local/lib/python2.7/site-packages/pip-1.4-py2.7.egg/pip/commands/install.py"", line 241, in run
    requirement_set.install(install_options, global_options, root=options.root_path)
  File ""/usr/local/lib/python2.7/site-packages/pip-1.4-py2.7.egg/pip/req.py"", line 1277, in install
    requirement.install(install_options, global_options, *args, **kwargs)
  File ""/usr/local/lib/python2.7/site-packages/pip-1.4-py2.7.egg/pip/req.py"", line 622, in install
    cwd=self.source_dir, filter_stdout=self._filter_install, show_stdout=False)
  File ""/usr/local/lib/python2.7/site-packages/pip-1.4-py2.7.egg/pip/util.py"", line 670, in call_subprocess
    % (command_desc, proc.returncode, cwd))
InstallationError: Command /usr/local/opt/python/bin/python2.7 -c ""import setuptools;__file__='/private/tmp/pip-build-root/pycrypto/setup.py';exec(compile(open(__file__).read().replace('\r\n', '\n'), __file__, 'exec'))"" install --record /tmp/pip-DDW_Gb-record/install-record.txt --single-version-externally-managed failed with error code 1 in /private/tmp/pip-build-root/pycrypto

","So it was:
pip install fabric 

It wasn't working for me previously because I was on Mac OSX and no one ever told me I had to have Command Line Tools installed to actually do anything useful with the Mac (this really should be better emphasized as it's taken me until December to finally install Fabric due to compliation errors until I installed those tools).
","2461","<macos><homebrew><fabric><pycrypto>","2","3","1","2014-01-08 18:19:47","","3","","","","","2013-08-19 06:52:25",""
"25189809","How to use a service account with Google's python api and drive?","I try to write python 2.7 script to upload a file into my personal google drive folder.
After several problems I stuck know. This is my current error:

NotImplementedError: PKCS12 format is not supported by the PyCrpto library. Try converting to a ""PEM"" (openssl pkcs12 -in xxxxx.p12 -nodes -nocerts > privatekey.pem) or using PyOpenSSL if native code is an option.

I already tried to run this commands, as mentiod in this question and answer.
openssl pkcs12 -in privatekey.p12 -nodes -nocerts > privatekey.pem
openssl pkcs8 -nocrypt -in privatekey.pem -passin pass:notasecret -topk8 -out pk.pem

my privatekey.p12 downloaded from the new modern fancy google developers console was original named something-0123eed.json and looked like this1:
{
  ""private_key_id"": ""9ced108fe72345373b75b03d7e967a3f8c0084ca"",
  ""private_key"": ""-----BEGIN PRIVATE KEY-----\nxe91Tr6RHs57LKX2HivFmOQwcFoJkUPrbB6Gwy8prE...Pc9jNExo5Krp1kLrkJYxAOmUWxWwPJ4pCx7Lxc6uQQnAlKyRmnfVpdS2I0\n-----END PRIVATE KEY-----\n"",
  ""client_email"": ""0KsVeSAa91UtEGvY9lil@developer.gserviceaccount.com"",
  ""client_id"": ""0KsVeSAa91UtEGvY9lil.apps.googleusercontent.com"",
  ""type"": ""service_account""
}

My python code looks like this:
#!/bin/env python2.7

from apiclient.discovery import build
from apiclient.http import MediaFileUpload
import httplib2
from oauth2client.client import SignedJwtAssertionCredentials


credentials = SignedJwtAssertionCredentials(
        service_account_name='0KsVeSAa91UtEGvY9lil@developer.gserviceaccount.com',
        private_key=key,
        scope = [
                'https://www.googleapis.com/auth/drive',
                'https://www.googleapis.com/auth/drive.file',
                'https://www.googleapis.com/auth/drive.appdata',
                'https://www.googleapis.com/auth/drive.apps.readonly'
        ]
)

http = httplib2.Http()
http = credentials.authorize(http)

drive_folder_id = 'jhIKHOG6supMhpjPJFHffZarwxP6'


service = build('drive', 'v2', http=http)


media_body = MediaFileUpload('/path/to/superfile.gpg'), mimetype='application/pgp-encrypted')
body = {
        'title': 'superfile.gpg',
        'description': '',
        'mimeType': 'application/pgp-encrypted',
        'parents': [{'id': drive_folder_id}]
}

file = service.files().insert(
        body=body,
        media_body=media_body).execute()

1: (of course, I changed the values with junk)
","I found the answer in this gist:
openssl pkcs12 -passin pass:notasecret -in privatekey.p12 -nocerts -passout pass:notasecret -out key.pem
openssl pkcs8 -nocrypt -in key.pem -passin pass:notasecret -topk8 -out privatekey.pem
rm key.pem

But before this, I had to regenerate a new privat key but in P12 format.

","2453","<python><google-api><pycrypto><google-api-python-client><pkcs#12>","1","4","1","2014-08-07 18:56:08","25190067","0","1","-1","","2017-05-23 12:31:11","2014-08-07 18:41:26",""
"22395478","What is the difference between Pycrypto's Random.get_random_bytes and a simple random byte generator?","I came across this method in Pycrypto, which is used to generate random bytes:
from Crypto import Random
Random.get_random_bytes(5)

I was wondering how this method is different from a simple generator like the following:
import random
def get_random_bytes(N):
    ASCII = """".join(chr(x) for x in range(255))
    return """".join(random.choice(ASCII) for _ in range(n))

Note: my intuition is that the Pycrypto method is more cryptographically ""sound"". Looking at random's documentation, it says that it is based on a generator with a period of 2**19937-1. Looking at Random.get_random_bytes, it states that it is capable of generating cryptographically-strong bytes. What does that mean?
Of course, I wish to use the library implementation, instead of my own. I just want to understand the cryptography concepts behind it.
","For a cryptographically secure random number generator any sequence of output provides you no information as for what the next output will be.
random is based on the Mersenne Twister. It has an internal state of 624 32-bit numbers. Given the output of 1248 values you know the entire state at some point. From that you can with 100% accuracy determine what all future outputs will be.
","2430","<python><random><pycrypto>","5","5","1","2014-03-14 03:31:31","22395612","0","1","","","","2014-03-14 03:15:30",""
"29800675","python pycrypto: module' object has no attribute 'importKey'","I'm currently working with pycrypto and I want to import public key,but it can not work and raise some error: 'module' object has no attribute 'importKey''
I also use pycrypto in my other script,it works well,so I can not understand why this can not work.
my code that can't work is as following:
    from Crypto.PublicKey import RSA
    .............
    .............
    def task_name(task):
        username = task['user']
        taskintid = task['taskintid']
        data = '%s,%s' % (str(username), str(taskintid))
        user_id = task.get('op_user_id', '')
        db = get_db()

        ssh_key = db.ssh_key.find_one({'user_id': user_id})
        if ssh_key:
            try:
                public_key = RSA.importKey(ssh_key.get('ssh_key', ''))
                data = public_key.encrypt(data, 32)[0].encode('hex')
            except Exception, e:
                print e

    return ""task-%s-%s"" % (data, task['repeat_num'])

also, my python version is 2.6.5
=======================================
sorry,I forgot it, the pycrypto version is 2.0.1
because I have installed many packages,so I can not upgrage my pycrypto version
","Support for exporting and importing RSA keys was implemented in version 2.2 listed in the changelog  so unless you can upgrade you are out of luck. 
","2417","<python><pycrypto>","2","0","2","2018-10-30 13:00:39","29829740","2","0","3392958","","2015-04-23 08:40:12","2015-04-22 14:25:49",""
"29800675","python pycrypto: module' object has no attribute 'importKey'","I'm currently working with pycrypto and I want to import public key,but it can not work and raise some error: 'module' object has no attribute 'importKey''
I also use pycrypto in my other script,it works well,so I can not understand why this can not work.
my code that can't work is as following:
    from Crypto.PublicKey import RSA
    .............
    .............
    def task_name(task):
        username = task['user']
        taskintid = task['taskintid']
        data = '%s,%s' % (str(username), str(taskintid))
        user_id = task.get('op_user_id', '')
        db = get_db()

        ssh_key = db.ssh_key.find_one({'user_id': user_id})
        if ssh_key:
            try:
                public_key = RSA.importKey(ssh_key.get('ssh_key', ''))
                data = public_key.encrypt(data, 32)[0].encode('hex')
            except Exception, e:
                print e

    return ""task-%s-%s"" % (data, task['repeat_num'])

also, my python version is 2.6.5
=======================================
sorry,I forgot it, the pycrypto version is 2.0.1
because I have installed many packages,so I can not upgrage my pycrypto version
","I solved this problem by pip install pycryptodome
","2417","<python><pycrypto>","2","0","2","2018-10-30 13:00:39","29829740","2","0","3392958","","2015-04-23 08:40:12","2015-04-22 14:25:49",""
"28447126","'exportKey' function not recognized in pycrypto-2.6.1(python 2.7.6) ubuntu14.04 LTS","Hello I'm trying to run this simple code to generate a private key:
from Crypto.PublicKey import RSA
key = RSA.generate(2048)
f = open('mykey.pem','w')
f.write(RSA.exportKey('PEM'))
f.close()

But I get this error:
Traceback (most recent call last):
  File ""erase-this.py"", line 5, in <module>
    f.write(RSA.exportKey('PEM'))
AttributeError: 'module' object has no attribute 'exportKey'

I checked inside /pycrypto-2.6.1/lib/Crypto/PublicKey, and the function 
def exportKey(self, format='PEM', passphrase=None, pkcs=1):

is present inside RSA.py.
Does someone knows why I get the error:
AttributeError: 'module' object has no attribute 'exportKey'???

","exportKey() is a method of the key, not a module function. So you need to do
f.write(key.exportKey('PEM'))

Here's a short demo (using a smaller key size).
#!/usr/bin/env python

from Crypto.PublicKey import RSA
key = RSA.generate(1024)
print key.exportKey('PEM')

pub_key = key.publickey()
print pub_key.exportKey('PEM')

typical output
-----BEGIN RSA PRIVATE KEY-----
MIICWwIBAAKBgQDqYiWx1bwP0aF0TJhRBXzFv+WBPUKD965CbvoU/xiMj7Eu5crD
36k6t44Po696gxVN+rGWUo2VKFVUsi1A3oqhkyFnF6JJxkt42w4sUVNd91PvBzxI
ermBnciyhPjJY8pfWWSaGwZxdqSfBDieeCfAk7NKW8aRzfP178Mz4mCwYQIDAQAB
AoGAMzhzqGNfD83uDK5YcwxR8h03mIC8sn5EFLyP5lrBEKauP+Nz5k5Qe0Z1wzEw
PgO7eikY+hLcYgZIb5Pok86OWMnkeGMY7px+Ti67Y2q9w8euJ1hQV3pmAZNB9XaQ
nuQrG3UNParBh/SaqnHGhtVoAKLX6HXV/sG6URJtQUBbaYECQQDtzl+DC0qi93ew
lsEXRIjGMJjOJ7UphKHllHUN2gfxnTyEGN3QSd6Za/AURejQ8aGK9IByo3GONYSY
/iy+j0Z5AkEA/FC8lhp8xVzk3qZtJ6lnKnRBMa+Wcy1wREcaUIJvIyKGdp6W3NJ5
qJZmJOASx/FWyayIh61AEhvXUW/qMKPfKQJACabqsYLv0JWCwiQcSjl547FtQlDS
RZEgkRTpe1pyIBhlsGbh+eZFpqx+3hPIU1K7X8x0ujJwFXmOnDcU0dc24QJAC+5Z
bJOmEMMaw3iFMtns2fITXyEZcSrV4zSlhucUEEpCp3tKUPjW7eTmwZmi6bd8zh6N
ejT0EaclYGF1ZoVpOQJAP0gyfT3wRcAeqt9io5FyYZvhijmnCpQ+N7jci1Bcri/G
94r8T4jhw9ezl8bjrtytaMiQdNnM2vn/Iqbrd/Cl3Q==
-----END RSA PRIVATE KEY-----
-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDqYiWx1bwP0aF0TJhRBXzFv+WB
PUKD965CbvoU/xiMj7Eu5crD36k6t44Po696gxVN+rGWUo2VKFVUsi1A3oqhkyFn
F6JJxkt42w4sUVNd91PvBzxIermBnciyhPjJY8pfWWSaGwZxdqSfBDieeCfAk7NK
W8aRzfP178Mz4mCwYQIDAQAB
-----END PUBLIC KEY-----

","2385","<python><ubuntu-14.04><pycrypto>","2","3","1","2015-02-11 06:25:56","28447842","0","","","","","2015-02-11 05:21:15",""
"26306513","Storing and reading encrypted strings from file in Python","I'm using AES (from PyCrypto) to encrypt passwords and store it in a file. The format of the file is:
user:username
key:<encrypted key>

And this is the method I used for encryption:
BLOCK_SIZE = ..
PADDING = ..
pad = lambda s: s + (BLOCK_SIZE - len(s) % BLOCK_SIZE) * PADDING

EncodeAES = lambda c, s: base64.b64encode(c.encrypt(pad(s)))
DecodeAES = lambda c, e: c.decrypt(base64.b64decode(e)).rstrip(PADDING)
cipher = AES.new(""abcdefgh12345678"")

encrypted_key = EncodeAES(cipher, 'ABC123')

Now, how do I read the key from the file for decrypting it? If I use line.split("":""), wouldn't it cause problem if the encrypted key itself had "":"" as a character?
Is there any way to avoid "":"" while encrypting it? Or is there a better way for storing the keys? I cannot use hashing as I need the key for some other functionality. Thanks.
","Store the username in the first line and password in the second line, as the following
 username
 p4ssw0rd

This way you won't need to do this sort of things.
Although the best solution is to store these kind of things in the database.
","2378","<python><pycrypto>","2","0","3","2014-10-10 19:26:08","26306594","0","","2789812","","2014-10-10 19:21:09","2014-10-10 19:16:05",""
"26306513","Storing and reading encrypted strings from file in Python","I'm using AES (from PyCrypto) to encrypt passwords and store it in a file. The format of the file is:
user:username
key:<encrypted key>

And this is the method I used for encryption:
BLOCK_SIZE = ..
PADDING = ..
pad = lambda s: s + (BLOCK_SIZE - len(s) % BLOCK_SIZE) * PADDING

EncodeAES = lambda c, s: base64.b64encode(c.encrypt(pad(s)))
DecodeAES = lambda c, e: c.decrypt(base64.b64decode(e)).rstrip(PADDING)
cipher = AES.new(""abcdefgh12345678"")

encrypted_key = EncodeAES(cipher, 'ABC123')

Now, how do I read the key from the file for decrypting it? If I use line.split("":""), wouldn't it cause problem if the encrypted key itself had "":"" as a character?
Is there any way to avoid "":"" while encrypting it? Or is there a better way for storing the keys? I cannot use hashing as I need the key for some other functionality. Thanks.
","
Now, how do I read the key from the file for decrypting it? If I use line.split("":""), wouldn't it cause problem if the encrypted key itself had "":"" as a character?

Of course it would—that's why exactly split has a second, optional argument max_split:
key, value = line.split(':', 1)

Alternatively, you can use partition:
key, _, value = line.partition(':')

The difference between the two is what happens when there isn't a colon at all; the former will return one element, giving you a ValueError from trying to unpack it into two variables, while the latter will just give you an empty value.

However, it's worth noting that if you're using Base 64, : is never going to appear in the first place. The only character used by Base 64 are A-Z, a-z, 0-9, +, and /. There are some Base 64 variants, and maybe one of them does use :, but the standard version, as applied by Python's base64 module, does not.
","2378","<python><pycrypto>","2","2","3","2014-10-10 19:26:08","26306594","0","","2789812","","2014-10-10 19:21:09","2014-10-10 19:16:05",""
"26306513","Storing and reading encrypted strings from file in Python","I'm using AES (from PyCrypto) to encrypt passwords and store it in a file. The format of the file is:
user:username
key:<encrypted key>

And this is the method I used for encryption:
BLOCK_SIZE = ..
PADDING = ..
pad = lambda s: s + (BLOCK_SIZE - len(s) % BLOCK_SIZE) * PADDING

EncodeAES = lambda c, s: base64.b64encode(c.encrypt(pad(s)))
DecodeAES = lambda c, e: c.decrypt(base64.b64decode(e)).rstrip(PADDING)
cipher = AES.new(""abcdefgh12345678"")

encrypted_key = EncodeAES(cipher, 'ABC123')

Now, how do I read the key from the file for decrypting it? If I use line.split("":""), wouldn't it cause problem if the encrypted key itself had "":"" as a character?
Is there any way to avoid "":"" while encrypting it? Or is there a better way for storing the keys? I cannot use hashing as I need the key for some other functionality. Thanks.
","You can constrain how many splits are performed:
>>> line=""key:foo:bar:baz""
>>> line.split("":"", 1)
['key', 'foo:bar:baz']

As long as you know the fieldname doesn't have a ':' in it, this should work fine.
","2378","<python><pycrypto>","2","0","3","2014-10-10 19:26:08","26306594","0","","2789812","","2014-10-10 19:21:09","2014-10-10 19:16:05",""
"35963916","How to encrypt (and decrypt) data with pycrypto and RSA?","I've been trying to encrypt data in Python with RSA in pycrypto.  I've tried to follow the instructions here: http://www.laurentluce.com/posts/python-and-cryptography-with-pycrypto/ but here's what comes out when I call enc_data = public_key.encrypt('abcdefgh', 32):
Traceback (most recent call last):
  File ""<pyshell#5>"", line 1, in <module>
  enc_data = public_key.encrypt('abcdefgh', 32)
  File ""C:\Python35\lib\site-packages\Crypto\PublicKey\RSA.py"", line 150, in encrypt
    return pubkey.pubkey.encrypt(self, plaintext, K)
  File ""C:\Python35\lib\site-packages\Crypto\PublicKey\pubkey.py"", line 75, in encrypt
    ciphertext=self._encrypt(plaintext, K)
  File ""C:\Python35\lib\site-packages\Crypto\PublicKey\RSA.py"", line 224, in _encrypt
    return (self.key._encrypt(c),)
  File ""C:\Python35\lib\site-packages\Crypto\PublicKey\_slowmath.py"", line 65, in _encrypt
    return pow(m, self.e, self.n)
TypeError: unsupported operand type(s) for pow(): 'str', 'int', 'int'

Thanks in advance for any advice regarding this issue.
","If you look at the encrypt method:

plaintext (byte string or long) - The piece of data to encrypt with RSA. It may not be numerically larger than the RSA module (n).

Your data is not a byte string or long. If you want to input text then you first need to use a character encoding such as UTF-8 for input.
Note that ""plaintext"" is just the input for the cryptographic primitives. All modern ciphers operate on bytes. Historically the input may have been actual text, but not anymore.

Also note that:

Attention: this function performs the plain, primitive RSA encryption (textbook). In real applications, you always need to use proper cryptographic padding, and you should not directly encrypt data with this method. Failure to do so may lead to security vulnerabilities. It is recommended to use modules Crypto.Cipher.PKCS1_OAEP or Crypto.Cipher.PKCS1_v1_5 instead.

For these functions it is also required to convert your text to byte arrays.
","2351","<python-3.x><encryption><rsa><pycrypto>","1","1","1","2018-06-05 23:51:10","35964285","2","1","","","","2016-03-12 22:07:42",""
"14859006","Using PyCrypto to decrypt Perl encrypted password","I'm trying to decrypt a pass phrase stored in a file.  The encryption was done with the Perl::CBC module, but I need to decrypt it for a Python script.  Frankly, I don't know much (or anything really) about encryption algorithms. 
The pass phrase was encrypted something like this:
use Crypt::CBC;

my $key = '0123456789';
my $iv  = '$KJh#(}q';

my $cipher = Crypt::CBC->new(
    -key    => $key,
    -cipher => 'Blowfish',
    -header => 'none',
    -iv     => $iv,
);

my $passphrase = 'You have decrypted the passphrase.';
my $hex_encrypted = $cipher->encrypt_hex($passphrase);

which gives an encrypted passphrase: 9033c838e4418fbdc50a9fc0813745296d195d59954008f94b2b36a8e65dca959686206960a7828a
Now, I need to use this in a Python script (using Python 2.7). Naively, I was hoping this would work:
from Crypto.Cipher import Blowfish
from binascii import hexlify, unhexlify

perl_pass =  unhexlify('9033c838e4418fbdc50a9fc0813745296d195d59954008f94b2b36a8e65dca959686206960a7828a')
key = '0123456789'
iv  = '$KJh#(}q'
print Blowfish.new(key, Blowfish.MODE_CBC, iv).decrypt(perl_pass)

but that only seems to create a bunch of unprintable junk.  I've played around a bit without success.  I'm not really sure what I need to do here to get this password decrypted successfully.
","The ""key"" you give to Crypt::CBC is actually a passphrase, from which a 'literal key' is generated; Crypto.Cipher.Blowfish needs that literal key, rather than the passphrase. You can print that generated key in hex from your Perl program, then use it in Python:
use Crypt::CBC;

my $key = '0123456789';
my $iv  = '$KJh#(}q';

my $cipher = Crypt::CBC->new(
    -key    => $key,
    -cipher => 'Blowfish',
    -header => 'none',
    -iv     => $iv,
);

my $passphrase = ""You have decrypted the passphrase."";
my $hex_encrypted = $cipher->encrypt_hex($passphrase);

print unpack('H*', $cipher->key()), ""\n"";

-
$ perl perl_crypt_cbc.pl
781e5e245d69b566979b86e28d23f2c78e938564cd1410f0ec1c1781466a6738bab0a6ed984c75ab34c68bbf7558077714043c5bdb959e46

-
from Crypto.Cipher import Blowfish
from binascii import hexlify, unhexlify

perl_pass = unhexlify(""9033c838e4418fbdc50a9fc0813745296d195d59954008f94b2b36a8e65dca959686206960a7828a"")

key = unhexlify(""781e5e245d69b566979b86e28d23f2c78e938564cd1410f0ec1c1781466a6738bab0a6ed984c75ab34c68bbf7558077714043c5bdb959e46"")
iv  = '$KJh#(}q'
print Blowfish.new(key, Blowfish.MODE_CBC, iv).decrypt(perl_pass)

-
python python_crypt_cbc.py 
You have decrypted the passphrase.

Note that there will be a few unprintable characters at the end: Blowfish-encrypted strings must be a multiple of 8 bytes, so Perl silently pads it. The byte it's padded with is the length of the padding: in this case, six bytes of padding, so each of them is 0x06. You can easily remove them:
from Crypto.Cipher import Blowfish
from binascii import hexlify, unhexlify

perl_pass = unhexlify(""9033c838e4418fbdc50a9fc0813745296d195d59954008f94b2b36a8e65dca959686206960a7828a"")

key = unhexlify(""781e5e245d69b566979b86e28d23f2c78e938564cd1410f0ec1c1781466a6738bab0a6ed984c75ab34c68bbf7558077714043c5bdb959e46"")
iv  = '$KJh#(}q'
num_padding = ord(Blowfish.new(key, Blowfish.MODE_CBC, iv).decrypt(perl_pass)[-1])

print Blowfish.new(key, Blowfish.MODE_CBC, iv).decrypt(perl_pass)[:(-1*num_padding)]

","2339","<python><encryption><pycrypto>","1","1","1","2013-02-13 20:42:14","14862550","1","","","","","2013-02-13 17:08:34",""
"3017341","Import problem with PyCrypto in Jython","I am currently trying to get python bittorrent tracker running inside of jython and i encountered this problem:
the tracker uses PyCrypto library which i compiled for my platform and added into the python path. When i try to run code, however, i get following error:
Exception in thread ""MainThread"" Traceback (most recent call last):
  File ""./python_dep/BitTorrent-5.2.2/bittorrent-tracker.py"", line 21, in <module>
    from BitTorrent.track import track
  File ""./python_dep/BitTorrent-5.2.2/BitTorrent/track.py"", line 50, in <module>
    from BitTorrent.UI import Size
  File ""./python_dep/BitTorrent-5.2.2/BitTorrent/UI.py"", line 37, in <module>
    from BitTorrent.MultiTorrent import UnknownInfohash, TorrentAlreadyInQueue, TorrentAlreadyRunning, TorrentNotRunning
  File ""./python_dep/BitTorrent-5.2.2/BitTorrent/MultiTorrent.py"", line 25, in <module>
    from BitTorrent.Torrent import Feedback, Torrent
  File ""./python_dep/BitTorrent-5.2.2/BitTorrent/Torrent.py"", line 32, in <module>
    from BitTorrent.ConnectionManager import ConnectionManager
  File ""./python_dep/BitTorrent-5.2.2/BitTorrent/ConnectionManager.py"", line 22, in <module>
    from BitTorrent.Connector import Connector
  File ""./python_dep/BitTorrent-5.2.2/BitTorrent/Connector.py"", line 27, in <module>
    from Crypto.Cipher import ARC4
ImportError: cannot import name ARC4
Java Result: 1

I am pretty sure that the library is in the python path, because command 
import Crypto.Cipher

works, while 
from Crypto.Cipher import ARC4

does not. 
The java code i run looks like this:
package jythTest;

import org.python.util.PythonInterpreter;
public class Main {

    public static void main(String[] args) {
         PythonInterpreter pythonInterpreter = new PythonInterpreter();
         pythonInterpreter.exec(""import sys"");


         pythonInterpreter.exec(""sys.path.append(\""./python_dep/BitTorrent-5.2.2/\"")"");
         pythonInterpreter.exec(""sys.path.append(\""./python_dep/Twisted-10.0.0/\"")"");
         pythonInterpreter.exec(""sys.path.append(\""./python_dep/Zope-3.4.0/build/lib.linux-i686-2.6\"")"");
         pythonInterpreter.exec(""sys.path.append(\""./python_dep\"")"");
         pythonInterpreter.exec(""sys.path.append(\""./python_dep/pycrypto-2.0.1/build/lib.linux-i686-2.6\"")"");
         pythonInterpreter.exec(""sys.path.append(\""import Crypto.Cipher\"")"");

         //pythonInterpreter.exec(""print sys.path"");
         pythonInterpreter.execfile(""./python_dep/BitTorrent-5.2.2/bittorrent-tracker.py"");
    }
}

Thanks in advance to anyone who could provide any kind of help.
","I am not sure this applies to your situation, but some googling led to this:
(from http://wiki.python.org/jython/JythonFaq/InstallingJython)

Jython cannot find your Java class,
  even though it exists in the class
  path. This shows up as ""ImportError:
  cannot import name xxx"" or
  ""AttributeError: java package xxx' has
  no attribute 'yyy'""
This happens when Jython is installed
  as a Java extension (i.e. when
  jython.jar is installed in
  java\jre\lib\ext) and your classes
  are installed in the classpath.
The reason is Java extensions can only
  see other extensions, not other
  classes defined in the CLASSPATH or
  passed in to java using the
  --classpath option.
There are two ways to fix this:
1) Move your classes to the
  java\jre\lib\ext directory.
2) Remove jython.jar from the
  java\jre\lib\ext directory and put
  jython.jar in the CLASSPATH or use the
  java --classpath option.
(from the Jython-users mailing list)

And another, similar issue, but different nonetheless:
(from http://bugs.jython.org/issue1878866)

I have a similar problem in Linux with jython 2.5. Inside
  jython2.5.0/Lib/site-packages a have a foo directory where there is a
  Java class (Bar.class) and a jython class (BarPy.py). i have also put an
  empty __init__.py file. In the jython interpreter environment I can
  always import Bar like this: ""from foo import Bar"" however I cannot
  import BarPy. If I delete the java class from the directory then I can
  import the jython script

","2329","<python><jython><pycrypto>","3","0","2","2010-06-10 21:19:15","","0","","","","","2010-06-10 18:31:51",""
"3017341","Import problem with PyCrypto in Jython","I am currently trying to get python bittorrent tracker running inside of jython and i encountered this problem:
the tracker uses PyCrypto library which i compiled for my platform and added into the python path. When i try to run code, however, i get following error:
Exception in thread ""MainThread"" Traceback (most recent call last):
  File ""./python_dep/BitTorrent-5.2.2/bittorrent-tracker.py"", line 21, in <module>
    from BitTorrent.track import track
  File ""./python_dep/BitTorrent-5.2.2/BitTorrent/track.py"", line 50, in <module>
    from BitTorrent.UI import Size
  File ""./python_dep/BitTorrent-5.2.2/BitTorrent/UI.py"", line 37, in <module>
    from BitTorrent.MultiTorrent import UnknownInfohash, TorrentAlreadyInQueue, TorrentAlreadyRunning, TorrentNotRunning
  File ""./python_dep/BitTorrent-5.2.2/BitTorrent/MultiTorrent.py"", line 25, in <module>
    from BitTorrent.Torrent import Feedback, Torrent
  File ""./python_dep/BitTorrent-5.2.2/BitTorrent/Torrent.py"", line 32, in <module>
    from BitTorrent.ConnectionManager import ConnectionManager
  File ""./python_dep/BitTorrent-5.2.2/BitTorrent/ConnectionManager.py"", line 22, in <module>
    from BitTorrent.Connector import Connector
  File ""./python_dep/BitTorrent-5.2.2/BitTorrent/Connector.py"", line 27, in <module>
    from Crypto.Cipher import ARC4
ImportError: cannot import name ARC4
Java Result: 1

I am pretty sure that the library is in the python path, because command 
import Crypto.Cipher

works, while 
from Crypto.Cipher import ARC4

does not. 
The java code i run looks like this:
package jythTest;

import org.python.util.PythonInterpreter;
public class Main {

    public static void main(String[] args) {
         PythonInterpreter pythonInterpreter = new PythonInterpreter();
         pythonInterpreter.exec(""import sys"");


         pythonInterpreter.exec(""sys.path.append(\""./python_dep/BitTorrent-5.2.2/\"")"");
         pythonInterpreter.exec(""sys.path.append(\""./python_dep/Twisted-10.0.0/\"")"");
         pythonInterpreter.exec(""sys.path.append(\""./python_dep/Zope-3.4.0/build/lib.linux-i686-2.6\"")"");
         pythonInterpreter.exec(""sys.path.append(\""./python_dep\"")"");
         pythonInterpreter.exec(""sys.path.append(\""./python_dep/pycrypto-2.0.1/build/lib.linux-i686-2.6\"")"");
         pythonInterpreter.exec(""sys.path.append(\""import Crypto.Cipher\"")"");

         //pythonInterpreter.exec(""print sys.path"");
         pythonInterpreter.execfile(""./python_dep/BitTorrent-5.2.2/bittorrent-tracker.py"");
    }
}

Thanks in advance to anyone who could provide any kind of help.
","This is happening probably because pycrypto is a C-extension, and Jython will not be able to call it without a Java wrapper for this extension.
","2329","<python><jython><pycrypto>","3","4","2","2010-06-10 21:19:15","","0","","","","","2010-06-10 18:31:51",""
"18554936","Can't install pycrypto on windows virtualenv","I am trying to install pycrypto on my Windows machine. I have mingw installed and distutils is using it. The error here is what I am getting:
In file included from C:\Python27\include/pyconfig.h:68:0,

from C:\Python27\include/Python.h:8,

from src/winrand.c:33:

c:\mingw\bin../lib/gcc/mingw32/4.7.2/../../../../include/io.h:301:1: error: unknown type name 'off64_t'

c:\mingw\bin../lib/gcc/mingw32/4.7.2/../../../../include/io.h:301:36: error: unknown type name 'off64_t'

c:\mingw\bin../lib/gcc/mingw32/4.7.2/../../../../include/io.h:302:1: error: unknown type name 'off64_t'

c:\mingw\bin../lib/gcc/mingw32/4.7.2/../../../../include/io.h:302:39: error: unknown type name 'off64_t'

src/winrand.c:38:0: warning: ""_WIN32_WINNT"" redefined [enabled by default]

In file included from c:\mingw\bin../lib/gcc/mingw32/4.7.2/../../../../include/_mingw.h:35:0,

from c:\mingw\bin../lib/gcc/mingw32/4.7.2/../../../../include/io.h:27,

from C:\Python27\include/pyconfig.h:68,

from C:\Python27\include/Python.h:8,

from src/winrand.c:33:

c:\mingw\bin../lib/gcc/mingw32/4.7.2/../../../../include/sdkddkver.h:154:0: note: this is the location of the previous definition

error: command 'gcc' failed with exit status 1

Edit: I found this, but I am not sure how to fix pip install with it.
http://ac-archive.sourceforge.net/largefile/largefiles_win32.print.html
","I met the same problem when building Fabric in windows. 
The reason was mingw32's gcc config when building pycrypto.
In configure, gcc's setting -std is set to c99.
But, when -std is c99, __STRICT_ANSI__ is defined and typedef _off_t off_t and _off64_t off64_t  in ""sys/types.h"" are skipped.
I succeeded to build pycrypto by modifying sys/types.h in mingw32 but it was brutal.
","2327","<python><windows><pycrypto>","2","2","2","2016-03-19 15:34:37","","7","2","18926","","2013-09-01 14:06:18","2013-09-01 03:29:29",""
"18554936","Can't install pycrypto on windows virtualenv","I am trying to install pycrypto on my Windows machine. I have mingw installed and distutils is using it. The error here is what I am getting:
In file included from C:\Python27\include/pyconfig.h:68:0,

from C:\Python27\include/Python.h:8,

from src/winrand.c:33:

c:\mingw\bin../lib/gcc/mingw32/4.7.2/../../../../include/io.h:301:1: error: unknown type name 'off64_t'

c:\mingw\bin../lib/gcc/mingw32/4.7.2/../../../../include/io.h:301:36: error: unknown type name 'off64_t'

c:\mingw\bin../lib/gcc/mingw32/4.7.2/../../../../include/io.h:302:1: error: unknown type name 'off64_t'

c:\mingw\bin../lib/gcc/mingw32/4.7.2/../../../../include/io.h:302:39: error: unknown type name 'off64_t'

src/winrand.c:38:0: warning: ""_WIN32_WINNT"" redefined [enabled by default]

In file included from c:\mingw\bin../lib/gcc/mingw32/4.7.2/../../../../include/_mingw.h:35:0,

from c:\mingw\bin../lib/gcc/mingw32/4.7.2/../../../../include/io.h:27,

from C:\Python27\include/pyconfig.h:68,

from C:\Python27\include/Python.h:8,

from src/winrand.c:33:

c:\mingw\bin../lib/gcc/mingw32/4.7.2/../../../../include/sdkddkver.h:154:0: note: this is the location of the previous definition

error: command 'gcc' failed with exit status 1

Edit: I found this, but I am not sure how to fix pip install with it.
http://ac-archive.sourceforge.net/largefile/largefiles_win32.print.html
","
Create a virtualenv (I usually put all mine on the desktop)
Download the binary of pycrypto (matching your installed python version and architecture - no support for python3 as of now)
           - http://www.voidspace.org.uk/python/modules.shtml
navigate to the easy_install executable (under Lib\site-packages) within the virtualenv folder you created and run the pycrypto install: easy_install  C:\path\to\the\download\pycrypto-2.6.win-amd64-py2.7.exe

","2327","<python><windows><pycrypto>","2","0","2","2016-03-19 15:34:37","","7","2","18926","","2013-09-01 14:06:18","2013-09-01 03:29:29",""
"26584088","cannot import name OSRNG","Trying to install third parties library in google appengine. All i want to do is install using pip then copy the folder from site-package to my project root lib folder. I did and pasted the Crypto into lib folder. then throwing below error. I wonder why is working in virtualenv not working in custom env..?
when i run dev_appserver.py Project Getting below error.
How can i solve this traceback error ..?
Traceback:
File ""/home/ri/studio/project/google-cloud-sdk/platform/google_appengine/lib/django-1.5/django/core/handlers/base.py"" in get_response
  101.                     resolver_match = resolver.resolve(request.path_info)
File ""/home/ri/studio/project/google-cloud-sdk/platform/google_appengine/lib/django-1.5/django/core/urlresolvers.py"" in resolve
  338.             for pattern in self.url_patterns:
File ""/home/ri/studio/project/google-cloud-sdk/platform/google_appengine/lib/django-1.5/django/core/urlresolvers.py"" in url_patterns
  366.         patterns = getattr(self.urlconf_module, ""urlpatterns"", self.urlconf_module)
File ""/home/ri/studio/project/google-cloud-sdk/platform/google_appengine/lib/django-1.5/django/core/urlresolvers.py"" in urlconf_module
  361.             self._urlconf_module = import_module(self.urlconf_name)
File ""/home/ri/studio/project/google-cloud-sdk/platform/google_appengine/lib/django-1.5/django/utils/importlib.py"" in import_module
  35.     __import__(name)
File ""/home/ri/studio/engineapp/Audiotube/audiotube/urls.py"" in <module>
  8. from dsp import views
File ""/home/ri/studio/engineapp/Audiotube/dsp/views.py"" in <module>
  72. import paramiko
File ""/home/ri/studio/engineapp/Audiotube/lib/paramiko/__init__.py"" in <module>
  62. from transport import SecurityOptions, Transport
File ""/home/ri/studio/engineapp/Audiotube/lib/paramiko/transport.py"" in <module>
  33. from paramiko import util
File ""/home/ri/studio/engineapp/Audiotube/lib/paramiko/util.py"" in <module>
  33. from paramiko.common import *
File ""/home/ri/studio/engineapp/Audiotube/lib/paramiko/common.py"" in <module>
  98. from Crypto import Random
File ""/home/ri/studio/engineapp/Audiotube/lib/Crypto/Random/__init__.py"" in <module>
  28. from Crypto.Random import OSRNG

Exception Type: ImportError at /
Exception Value: cannot import name OSRNG

","Looks like pycrpto causing that problem. 
By default Google Appengine support pycrypto
Link here: https://cloud.google.com/appengine/docs/python/tools/libraries27

","2322","<python><django><google-app-engine><paramiko><pycrypto>","0","1","1","2014-10-27 11:41:09","26586790","1","","","user3895077","2014-10-27 09:13:59","2014-10-27 09:03:41",""
"38043056","Verify signature on X509 certificate in Python","I have an RSA public key and a signed X509 certificate. How can I check that the key signed the certificate? (My example happens to be a self-signed certificate.)
Here's what I'm doing now:
Generate self-signed cert and convert to DER encoding with openssl cli:
(I'm expecting DER in my real application)
openssl req -x509 -newkey rsa:2048 -keyout selfsigned.key -nodes -out selfsigned.cert -sha256 -days 1000
openssl x509 -outform der -in selfsigned.cert -out self.der

Decode it to a Crypto.Util.asn1.DerSequence instance.
>>> from Crypto.Util.asn1 import DerSequence
>>> from Crypto.PublicKey import RSA
>>> der = open('self.der').read()
>>> cert = DerSequence()
>>> cert.decode(der)
905L
>>> # according to RFC5280, this is a 3-length sequence:
>>> # tbsCertificate, signatureAlgorithm, signatureValue
>>> # ""tbs"" == ""to be signed""
>>> len(cert)
3

Then I pull the RSA public key out:
>>> tbscert = DerSequence()
>>> tbscert.decode(cert[0])
>>> subjectPublicKeyInfo = tbscert[6]
>>> rsa_key = RSA.importKey(subjectPublicKeyInfo)
>>> >>> rsa_key
<_RSAobj @0x7fb27287d128 n(2048),e>

Then I pull the signature out
This is very annoying. I'm using another library to decode the DER again because this one gives me a slightly more convenient representation of the ""bit string"" encoding of the signature value. For now, I copy and paste the base-2 string representation of the value into int() to get a long (what the RSA.verify() method expects).
>>> from pyasn1_modules import  rfc2437,rfc2459
>>> from pyasn1.codec.der import decoder
>>> cert2,rest = decoder.decode(der, asn1Spec=rfc2459.Certificate())
>>> sig_bits = cert2.getComponentByName(""signatureValue"")
>>> sig_bits
BitString
>>> bit_string = '10101110101100111010100000111001000110111111101001110000100111110111011111111110011010110101001001110110111011011001110001010000111001001001110111001110011101000000100000001100001101000111000110010100110101000110111101110001011011001001100011110011010101011100000001010111101110111001110011010011110101101001110101110100011111011111110001110001110100000110110100010000001010111010000100101110101001110000111001100010011110110100101001010000101001110101101111100111001111000010111001110000000101000000011110011110000110000101101101110110101101110101011110101111111000101011001000010000110100111111001011111100110011011011001001111110000000110100000001101000011010010100001100110100001001000111001011111100000011000101001100001010101001111000001010100101010101000100001000100011101111100101010010001111001110100001011110101100010111001010100010001011100000100101110001011101100010010111100010111110010010110111111100100100101010010000000010001011111110011000011000101000001000000000000011111101110010101100100000010111111110101000110010101111100101011101000010010110101000101101110001001101101000110101110011101011111100010000101001111011100100100010101001011011110001110000000000010011011111011110100000111001100010100000100001101111110010000111100110110110000001010010110011010111100101110101000001111001010011101001101101101101011000100010011110000101010110111011100010100011110101100110101011010111000011111000001111111111000101101101011110010111100101011100010000111011101101010101001011101101111011001001110000010011001111010001011110000011001011000110100011100000100100111000111100000010000001001001010001100000010011110100000111010010100001101001111111001111110111010001101010110100001100111010101000010000101000000111100001001001000100011100110010110101001110111101000101101011011100000010010000100111001100001110010101000100000010010111110001100011110010000100001000101100011000011000110010110011100010100010111011011111111010000001001100000100011010000000110111100111010101001110101000011111011000100010111101100110100010101111000110111110'
>>> len(bit_string)
2048
>>> sig_long = int(bit_string, 2)
22054057292543290008991218833668878365914778519473463062473060546762899555976103489048033910135613221569150796460758806399269198735780309519101363051388009338597879536630494212385605300708879019160215628821483902624509955250980351374010304684207884550324020859785789812498991361733361061223150200173076263554090698006436248180914014712709890577579243572383188197634606581121383593473899061397708617253275982314075801792358481980896751043809539358665686019958496887281091997170247998458556812030465091755579654010246474389968142047627934047174316731806191431717418170761689395728146445291177267566370799362894264463806L

Then I compute the SHA256 hash of the ""to be signed certificate"":
>>> import Crypto.Hash.SHA256
>>> comp_hash = Crypto.Hash.SHA256.new(cert[0]).digest()
>>> comp_hash
'\xa3t\x84\xd6\xf5\xfe\x16\xb9\xdb(&\x12\xb3m^+\x94\xa7bZ\xf9s\xf7\xbay\xa1j\xa3Y\xea\xa8\x7f'

Then the verify() method tells me the signature doesn't match.
>>> rsa_key.verify(comp_hash, (sig_long, None))
False

I hope there's a better way (this doesn't even work), but I've spent hours looking at PyCrypto and PyOpenSSL and haven't found it.
edits
This similar S.O. question from a few years ago has no answer: Verify SSL/X.509 certificate is signed by another certificate
","I guess one way to accomplish this is to create an X509StoreContext containing only one certificate corresponding to the public key I want to check for.
>>> from OpenSSL import crypto
>>> x509_self_signed # already loaded
<OpenSSL.crypto.X509 object at 0x7fcc4049c9b0>
>>> cert_store = crypto.X509Store()
>>> cert_store.add_cert(x509_self_signed)
>>> store_ctx = crypto.X509StoreContext(cert_store, x509_self_signed)
>>> store_ctx.verify_certificate()
>>> # ^ that raises an exception if it fails to verify

verify_certificate() was added to PyOpenSSL only a little over a year ago, so maybe that's why it was hard to find...
https://github.com/pyca/pyopenssl/pull/155
","2293","<python><ssl><x509><pycrypto><pyopenssl>","3","1","1","2016-06-26 22:09:53","","0","3","-1","","2017-05-23 12:24:40","2016-06-26 20:49:09",""
"11384658","Encryption of a JPG file using pycrypro's AES failing","Given below is the code(not complete yet) I have written to encrypt and decrypt files using python with the pycrypto module.
from Crypto.Hash import SHA256 
from Crypto.Cipher import AES 
import getpass

class ED(object):   
  def getfromuser(self,choice):
    if choice=='key':
        key=getpass.getpass('Enter AES Key (minimum 16 characters): ')
        if len(key)<16:
            print 'Key entered too short. Please try again.'
            self.getfromuser(choice)
        key=key+str(8-len(key)%8)*(8-len(key)%8)
        return key
    if choice=='IV':
        IV_seed=raw_input('Enter a seed for the IV: ')
        IV=SHA256.new()
        IV.update(IV_seed)
        IV.digest()
        return str(IV)[0:16]

  def AESEncrypt(self,key,IV,source,dest):

    f=open(source,""r"")
    fstream=f.read()
    f.close()

    AES_stream=AES.new(key,AES.MODE_CBC,IV)
    AES_encrypted=AES_stream.encrypt(fstream)

    with open(dest,""w"") as write_file:
        write_file.write(AES_encrypted)

  def AESDecrypt(self,key,IV,source,dest):
    f=open(source,""r"")
    fstream=f.read()
    f.close()
    AES_stream=AES.new(key,AES.MODE_CBC,IV)
    AES_decrypted=AES_stream.decrypt(fstream)
    with open(dest,""w"") as write_file:
        write_file.write(AES_decrypted)

When I tried to encrypt a JPG file using this I got the following error:
    AES_encrypted=AES_stream.encrypt(fstream)
    ValueError: Input strings must be a multiple of 16 in length

I tried it on an mp4 file and it worked fine: the encryption and the decryption too.
What is the cause of this error and how do I fix it?
","I found the solution. If one does not want the hassle of padding, one can use the CFB (Cipher feedback) mode as follows:
AES_stream=AES.new(key,AES.MODE_CFB,IV)
","2242","<python><encryption><jpeg><pycrypto>","0","3","1","2013-03-30 14:34:18","11401913","7","2","1218317","","2012-07-09 19:39:10","2012-07-08 16:14:47",""
"23897809","Different Results in Go and Pycrypto when using AES-CFB","I am adding a go application to an already existing python codebase. I've been having trouble dealing with encryption between the languages. This is using go 1.2.1 and Python 2.7.x / PyCrypto 2.7a1.
Here is the Python sample:
import Crypto.Cipher
import Crypto.Hash.HMAC
import Crypto.Hash.SHA256
import Crypto.PublicKey.RSA
from binascii import hexlify, unhexlify

#encrypt
payload =  unhexlify(""abababababababababababababababababababababababababababababababab"")
password = unhexlify(""0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF"")
iv = unhexlify(""00000000000000000000000000000000"")

print ""IV: "", hexlify(iv), ""len: "", len(iv)
print ""Password length: "", len(password)


cipher = Crypto.Cipher.AES.new(
            key=password, 
            mode=Crypto.Cipher.AES.MODE_CFB, 
            IV=iv)

payload = cipher.encrypt(payload)

print hexlify(payload) #dbf6b1877ba903330cb9cf0c4f530d40bf77fe2bf505820e993741c7f698ad6b

And this is the Go sample:
package main

import (
    ""fmt""
    ""crypto/cipher""
    ""crypto/aes""
    ""encoding/hex""
)

// encrypt
func main() {
    payload, err1 := hex.DecodeString(""abababababababababababababababababababababababababababababababab"")
    password, err2 := hex.DecodeString(""0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF"")
    iv, err3 := hex.DecodeString(""00000000000000000000000000000000"")

    if err1 != nil {
        fmt.Printf(""error 1: %v"", err1)
        return
    }

    if err2 != nil {
        fmt.Printf(""error 2: %v"", err2)
        return
    }

    if err3 != nil {
        fmt.Printf(""error 3: %v"", err3)
        return
    }

    aesBlock, err4 := aes.NewCipher(password)

    fmt.Printf(""IV length:%v\n"", len(iv))
    fmt.Printf(""password length:%v\n"", len(password))

    if err4 != nil {
        fmt.Printf(""error 4: %v"", err4)
        return
    }

    cfbDecrypter := cipher.NewCFBEncrypter(aesBlock, iv)
    cfbDecrypter.XORKeyStream(payload, payload) 

    fmt.Printf(""%v\n"", hex.EncodeToString(payload)) // db70cd9e6904359cb848410bfa38d7d0a47b594f7eff72d547d3772c9d4f5dbe
}

Here is the golang link, I could not find a Python pastebin that had PyCrypto installed.
As suggested by the title & source, the two snippets produce different cyphertext:
Python: dbf6b1877ba903330cb9cf0c4f530d40bf77fe2bf505820e993741c7f698ad6b
Golang: db70cd9e6904359cb848410bfa38d7d0a47b594f7eff72d547d3772c9d4f5dbe
Both languages can decrypt their 'native' cypthertext, but neither can decrypt the others'. Because the python implementation already exists, I'm looking for a solution that will allow Go to decrypt cyphertext encrypted with the example PyCrypto AES settings & key size.
","Research on the current system has revealed that our python system uses CFB8 (8 bit segments). Go does not support this out of the box, but the source code used in the current CFBDecrypter / CFBEncrypter looks like it can be adapted fairly easily.
","2206","<python><encryption><go><pycrypto>","10","10","5","2019-08-17 23:26:17","23899604","0","3","","","","2014-05-27 19:54:35",""
"23897809","Different Results in Go and Pycrypto when using AES-CFB","I am adding a go application to an already existing python codebase. I've been having trouble dealing with encryption between the languages. This is using go 1.2.1 and Python 2.7.x / PyCrypto 2.7a1.
Here is the Python sample:
import Crypto.Cipher
import Crypto.Hash.HMAC
import Crypto.Hash.SHA256
import Crypto.PublicKey.RSA
from binascii import hexlify, unhexlify

#encrypt
payload =  unhexlify(""abababababababababababababababababababababababababababababababab"")
password = unhexlify(""0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF"")
iv = unhexlify(""00000000000000000000000000000000"")

print ""IV: "", hexlify(iv), ""len: "", len(iv)
print ""Password length: "", len(password)


cipher = Crypto.Cipher.AES.new(
            key=password, 
            mode=Crypto.Cipher.AES.MODE_CFB, 
            IV=iv)

payload = cipher.encrypt(payload)

print hexlify(payload) #dbf6b1877ba903330cb9cf0c4f530d40bf77fe2bf505820e993741c7f698ad6b

And this is the Go sample:
package main

import (
    ""fmt""
    ""crypto/cipher""
    ""crypto/aes""
    ""encoding/hex""
)

// encrypt
func main() {
    payload, err1 := hex.DecodeString(""abababababababababababababababababababababababababababababababab"")
    password, err2 := hex.DecodeString(""0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF"")
    iv, err3 := hex.DecodeString(""00000000000000000000000000000000"")

    if err1 != nil {
        fmt.Printf(""error 1: %v"", err1)
        return
    }

    if err2 != nil {
        fmt.Printf(""error 2: %v"", err2)
        return
    }

    if err3 != nil {
        fmt.Printf(""error 3: %v"", err3)
        return
    }

    aesBlock, err4 := aes.NewCipher(password)

    fmt.Printf(""IV length:%v\n"", len(iv))
    fmt.Printf(""password length:%v\n"", len(password))

    if err4 != nil {
        fmt.Printf(""error 4: %v"", err4)
        return
    }

    cfbDecrypter := cipher.NewCFBEncrypter(aesBlock, iv)
    cfbDecrypter.XORKeyStream(payload, payload) 

    fmt.Printf(""%v\n"", hex.EncodeToString(payload)) // db70cd9e6904359cb848410bfa38d7d0a47b594f7eff72d547d3772c9d4f5dbe
}

Here is the golang link, I could not find a Python pastebin that had PyCrypto installed.
As suggested by the title & source, the two snippets produce different cyphertext:
Python: dbf6b1877ba903330cb9cf0c4f530d40bf77fe2bf505820e993741c7f698ad6b
Golang: db70cd9e6904359cb848410bfa38d7d0a47b594f7eff72d547d3772c9d4f5dbe
Both languages can decrypt their 'native' cypthertext, but neither can decrypt the others'. Because the python implementation already exists, I'm looking for a solution that will allow Go to decrypt cyphertext encrypted with the example PyCrypto AES settings & key size.
","It seems that the cipher can be made compatible to Go's crypto/cipher if we change segment_size of AES object from the default 8 to AES.block_size*8 (which is 128), like this:
Crypto.Cipher.AES.new(
            key=password, 
            mode=Crypto.Cipher.AES.MODE_CFB, 
            IV=iv,
            segment_size=AES.block_size*8
)

","2206","<python><encryption><go><pycrypto>","10","6","5","2019-08-17 23:26:17","23899604","0","3","","","","2014-05-27 19:54:35",""
"23897809","Different Results in Go and Pycrypto when using AES-CFB","I am adding a go application to an already existing python codebase. I've been having trouble dealing with encryption between the languages. This is using go 1.2.1 and Python 2.7.x / PyCrypto 2.7a1.
Here is the Python sample:
import Crypto.Cipher
import Crypto.Hash.HMAC
import Crypto.Hash.SHA256
import Crypto.PublicKey.RSA
from binascii import hexlify, unhexlify

#encrypt
payload =  unhexlify(""abababababababababababababababababababababababababababababababab"")
password = unhexlify(""0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF"")
iv = unhexlify(""00000000000000000000000000000000"")

print ""IV: "", hexlify(iv), ""len: "", len(iv)
print ""Password length: "", len(password)


cipher = Crypto.Cipher.AES.new(
            key=password, 
            mode=Crypto.Cipher.AES.MODE_CFB, 
            IV=iv)

payload = cipher.encrypt(payload)

print hexlify(payload) #dbf6b1877ba903330cb9cf0c4f530d40bf77fe2bf505820e993741c7f698ad6b

And this is the Go sample:
package main

import (
    ""fmt""
    ""crypto/cipher""
    ""crypto/aes""
    ""encoding/hex""
)

// encrypt
func main() {
    payload, err1 := hex.DecodeString(""abababababababababababababababababababababababababababababababab"")
    password, err2 := hex.DecodeString(""0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF"")
    iv, err3 := hex.DecodeString(""00000000000000000000000000000000"")

    if err1 != nil {
        fmt.Printf(""error 1: %v"", err1)
        return
    }

    if err2 != nil {
        fmt.Printf(""error 2: %v"", err2)
        return
    }

    if err3 != nil {
        fmt.Printf(""error 3: %v"", err3)
        return
    }

    aesBlock, err4 := aes.NewCipher(password)

    fmt.Printf(""IV length:%v\n"", len(iv))
    fmt.Printf(""password length:%v\n"", len(password))

    if err4 != nil {
        fmt.Printf(""error 4: %v"", err4)
        return
    }

    cfbDecrypter := cipher.NewCFBEncrypter(aesBlock, iv)
    cfbDecrypter.XORKeyStream(payload, payload) 

    fmt.Printf(""%v\n"", hex.EncodeToString(payload)) // db70cd9e6904359cb848410bfa38d7d0a47b594f7eff72d547d3772c9d4f5dbe
}

Here is the golang link, I could not find a Python pastebin that had PyCrypto installed.
As suggested by the title & source, the two snippets produce different cyphertext:
Python: dbf6b1877ba903330cb9cf0c4f530d40bf77fe2bf505820e993741c7f698ad6b
Golang: db70cd9e6904359cb848410bfa38d7d0a47b594f7eff72d547d3772c9d4f5dbe
Both languages can decrypt their 'native' cypthertext, but neither can decrypt the others'. Because the python implementation already exists, I'm looking for a solution that will allow Go to decrypt cyphertext encrypted with the example PyCrypto AES settings & key size.
","If anyone is looking for Go implementation of CFB mode with segment size = 8 you can use this:
import ""crypto/cipher""

// CFB stream with 8 bit segment size
// See http://csrc.nist.gov/publications/nistpubs/800-38a/sp800-38a.pdf
type cfb8 struct {
    b         cipher.Block
    blockSize int
    in        []byte
    out       []byte

    decrypt bool
}

func (x *cfb8) XORKeyStream(dst, src []byte) {
    for i := range src {
        x.b.Encrypt(x.out, x.in)
        copy(x.in[:x.blockSize-1], x.in[1:])
        if x.decrypt {
            x.in[x.blockSize-1] = src[i]
        }
        dst[i] = src[i] ^ x.out[0]
        if !x.decrypt {
            x.in[x.blockSize-1] = dst[i]
        }
    }
}

// NewCFB8Encrypter returns a Stream which encrypts with cipher feedback mode
// (segment size = 8), using the given Block. The iv must be the same length as
// the Block's block size.
func newCFB8Encrypter(block cipher.Block, iv []byte) cipher.Stream {
    return newCFB8(block, iv, false)
}

// NewCFB8Decrypter returns a Stream which decrypts with cipher feedback mode
// (segment size = 8), using the given Block. The iv must be the same length as
// the Block's block size.
func newCFB8Decrypter(block cipher.Block, iv []byte) cipher.Stream {
    return newCFB8(block, iv, true)
}

func newCFB8(block cipher.Block, iv []byte, decrypt bool) cipher.Stream {
    blockSize := block.BlockSize()
    if len(iv) != blockSize {
        // stack trace will indicate whether it was de or encryption
        panic(""cipher.newCFB: IV length must equal block size"")
    }
    x := &cfb8{
        b:         block,
        blockSize: blockSize,
        out:       make([]byte, blockSize),
        in:        make([]byte, blockSize),
        decrypt:   decrypt,
    }
    copy(x.in, iv)

    return x
}

","2206","<python><encryption><go><pycrypto>","10","4","5","2019-08-17 23:26:17","23899604","0","3","","","","2014-05-27 19:54:35",""
"23897809","Different Results in Go and Pycrypto when using AES-CFB","I am adding a go application to an already existing python codebase. I've been having trouble dealing with encryption between the languages. This is using go 1.2.1 and Python 2.7.x / PyCrypto 2.7a1.
Here is the Python sample:
import Crypto.Cipher
import Crypto.Hash.HMAC
import Crypto.Hash.SHA256
import Crypto.PublicKey.RSA
from binascii import hexlify, unhexlify

#encrypt
payload =  unhexlify(""abababababababababababababababababababababababababababababababab"")
password = unhexlify(""0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF"")
iv = unhexlify(""00000000000000000000000000000000"")

print ""IV: "", hexlify(iv), ""len: "", len(iv)
print ""Password length: "", len(password)


cipher = Crypto.Cipher.AES.new(
            key=password, 
            mode=Crypto.Cipher.AES.MODE_CFB, 
            IV=iv)

payload = cipher.encrypt(payload)

print hexlify(payload) #dbf6b1877ba903330cb9cf0c4f530d40bf77fe2bf505820e993741c7f698ad6b

And this is the Go sample:
package main

import (
    ""fmt""
    ""crypto/cipher""
    ""crypto/aes""
    ""encoding/hex""
)

// encrypt
func main() {
    payload, err1 := hex.DecodeString(""abababababababababababababababababababababababababababababababab"")
    password, err2 := hex.DecodeString(""0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF"")
    iv, err3 := hex.DecodeString(""00000000000000000000000000000000"")

    if err1 != nil {
        fmt.Printf(""error 1: %v"", err1)
        return
    }

    if err2 != nil {
        fmt.Printf(""error 2: %v"", err2)
        return
    }

    if err3 != nil {
        fmt.Printf(""error 3: %v"", err3)
        return
    }

    aesBlock, err4 := aes.NewCipher(password)

    fmt.Printf(""IV length:%v\n"", len(iv))
    fmt.Printf(""password length:%v\n"", len(password))

    if err4 != nil {
        fmt.Printf(""error 4: %v"", err4)
        return
    }

    cfbDecrypter := cipher.NewCFBEncrypter(aesBlock, iv)
    cfbDecrypter.XORKeyStream(payload, payload) 

    fmt.Printf(""%v\n"", hex.EncodeToString(payload)) // db70cd9e6904359cb848410bfa38d7d0a47b594f7eff72d547d3772c9d4f5dbe
}

Here is the golang link, I could not find a Python pastebin that had PyCrypto installed.
As suggested by the title & source, the two snippets produce different cyphertext:
Python: dbf6b1877ba903330cb9cf0c4f530d40bf77fe2bf505820e993741c7f698ad6b
Golang: db70cd9e6904359cb848410bfa38d7d0a47b594f7eff72d547d3772c9d4f5dbe
Both languages can decrypt their 'native' cypthertext, but neither can decrypt the others'. Because the python implementation already exists, I'm looking for a solution that will allow Go to decrypt cyphertext encrypted with the example PyCrypto AES settings & key size.
","I found that easiest way to deal with this from Python side is to use M2Crypto library.
Final code looks like:
import M2Crypto.EVP

iv = ciphertext[:16]
ciphertext = ciphertext[16:]

cipher = M2Crypto.EVP.Cipher('aes_256_cfb', t, iv, 0)
text = cipher.update(ciphertext)
print text

Works perfect without need to change something in Go.
","2206","<python><encryption><go><pycrypto>","10","1","5","2019-08-17 23:26:17","23899604","0","3","","","","2014-05-27 19:54:35",""
"23897809","Different Results in Go and Pycrypto when using AES-CFB","I am adding a go application to an already existing python codebase. I've been having trouble dealing with encryption between the languages. This is using go 1.2.1 and Python 2.7.x / PyCrypto 2.7a1.
Here is the Python sample:
import Crypto.Cipher
import Crypto.Hash.HMAC
import Crypto.Hash.SHA256
import Crypto.PublicKey.RSA
from binascii import hexlify, unhexlify

#encrypt
payload =  unhexlify(""abababababababababababababababababababababababababababababababab"")
password = unhexlify(""0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF"")
iv = unhexlify(""00000000000000000000000000000000"")

print ""IV: "", hexlify(iv), ""len: "", len(iv)
print ""Password length: "", len(password)


cipher = Crypto.Cipher.AES.new(
            key=password, 
            mode=Crypto.Cipher.AES.MODE_CFB, 
            IV=iv)

payload = cipher.encrypt(payload)

print hexlify(payload) #dbf6b1877ba903330cb9cf0c4f530d40bf77fe2bf505820e993741c7f698ad6b

And this is the Go sample:
package main

import (
    ""fmt""
    ""crypto/cipher""
    ""crypto/aes""
    ""encoding/hex""
)

// encrypt
func main() {
    payload, err1 := hex.DecodeString(""abababababababababababababababababababababababababababababababab"")
    password, err2 := hex.DecodeString(""0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF"")
    iv, err3 := hex.DecodeString(""00000000000000000000000000000000"")

    if err1 != nil {
        fmt.Printf(""error 1: %v"", err1)
        return
    }

    if err2 != nil {
        fmt.Printf(""error 2: %v"", err2)
        return
    }

    if err3 != nil {
        fmt.Printf(""error 3: %v"", err3)
        return
    }

    aesBlock, err4 := aes.NewCipher(password)

    fmt.Printf(""IV length:%v\n"", len(iv))
    fmt.Printf(""password length:%v\n"", len(password))

    if err4 != nil {
        fmt.Printf(""error 4: %v"", err4)
        return
    }

    cfbDecrypter := cipher.NewCFBEncrypter(aesBlock, iv)
    cfbDecrypter.XORKeyStream(payload, payload) 

    fmt.Printf(""%v\n"", hex.EncodeToString(payload)) // db70cd9e6904359cb848410bfa38d7d0a47b594f7eff72d547d3772c9d4f5dbe
}

Here is the golang link, I could not find a Python pastebin that had PyCrypto installed.
As suggested by the title & source, the two snippets produce different cyphertext:
Python: dbf6b1877ba903330cb9cf0c4f530d40bf77fe2bf505820e993741c7f698ad6b
Golang: db70cd9e6904359cb848410bfa38d7d0a47b594f7eff72d547d3772c9d4f5dbe
Both languages can decrypt their 'native' cypthertext, but neither can decrypt the others'. Because the python implementation already exists, I'm looking for a solution that will allow Go to decrypt cyphertext encrypted with the example PyCrypto AES settings & key size.
","i solve by adapt python code like this (golang encode and python decode):
# golang encode
padNum := len(data) % 16
if padNum != 0 {
    for i := 0; i < 16-padNum; i++ {
        data = append(data, ',')
    }
}

# python decode
cipher = AES.new(key=self.key, mode=AES.MODE_CFB, IV=iv,segment_size=128)

","2206","<python><encryption><go><pycrypto>","10","-1","5","2019-08-17 23:26:17","23899604","0","3","","","","2014-05-27 19:54:35",""
"5345719","Is AES the same in libraries PyCrypto & Node.JS Crypto","I am beginnging to wonder if the implementation of AES is different across libraries..
Currently i have a plaintext encrypted with PyCrypto.
Im trying to decrypt the ciphertext with Node.js's Crypto Library..
Basically with PyCrypto..
im using AES-128-CBC with a random generated IV. (which decrypts perfectly in PyCrypto)
However..
On Node.js im doing this
var buf = new Buffer(ciphertext)
var decipher = crypto.createDecipher('aes-128-cbc',aeskey)
buf = decipher.update(buf,'binary', 'binary')
buf += decipher.final('binary')

Which spits out a bunch of Garbage.... ( changing 'binary' to hex/utf8 doesnt help)
As i am using CBC (Cipher Block Chaining)...
i am prepending the IV to the beginning of the ciphertext (16 blocks)..
In PyCrypto this works perfectly, similarly to the specification of PGP, CFB usage..
Does anyone know for what reason this is not working???  
Am i expecting too much of Node.js's standard libraries?
","AES is a rijndael standard. It shouldn't be different. You should look into data types and default settings that are hidden. Something must be set different between the two. The key sizes might be different as 128 bit ""hello"" is padded with zeros I think and a smaller key would start with ""hello"" but have a smaller padding, therefore different.
","2197","<node.js><aes><encryption><pycrypto>","3","0","5","2012-02-01 20:30:34","","1","3","","","","2011-03-17 21:51:15",""
"5345719","Is AES the same in libraries PyCrypto & Node.JS Crypto","I am beginnging to wonder if the implementation of AES is different across libraries..
Currently i have a plaintext encrypted with PyCrypto.
Im trying to decrypt the ciphertext with Node.js's Crypto Library..
Basically with PyCrypto..
im using AES-128-CBC with a random generated IV. (which decrypts perfectly in PyCrypto)
However..
On Node.js im doing this
var buf = new Buffer(ciphertext)
var decipher = crypto.createDecipher('aes-128-cbc',aeskey)
buf = decipher.update(buf,'binary', 'binary')
buf += decipher.final('binary')

Which spits out a bunch of Garbage.... ( changing 'binary' to hex/utf8 doesnt help)
As i am using CBC (Cipher Block Chaining)...
i am prepending the IV to the beginning of the ciphertext (16 blocks)..
In PyCrypto this works perfectly, similarly to the specification of PGP, CFB usage..
Does anyone know for what reason this is not working???  
Am i expecting too much of Node.js's standard libraries?
","The short answer to your question is: Yes, AES is the same in PyCrypto and Node.js' crypto module. Node's crypto is just a wrapper around openssl on your system, and PyCrypto is interoperable with OpenSSL (see http://lists.dlitz.net/pipermail/pycrypto/2010q4/000301.html).
Having said that, there are definitely bugs in the Node crypto module (though I've only experienced problems with base64 encoding, myself). So whether it's a bug or not, the problems you're experiencing are almost certainly happening in the data encoding/decoding stages.
What does your ciphertext look like? Is it a hexadecimal string? If so, then you need to do
buf = decipher.update(buf, 'hex', 'binary')

","2197","<node.js><aes><encryption><pycrypto>","3","0","5","2012-02-01 20:30:34","","1","3","","","","2011-03-17 21:51:15",""
"5345719","Is AES the same in libraries PyCrypto & Node.JS Crypto","I am beginnging to wonder if the implementation of AES is different across libraries..
Currently i have a plaintext encrypted with PyCrypto.
Im trying to decrypt the ciphertext with Node.js's Crypto Library..
Basically with PyCrypto..
im using AES-128-CBC with a random generated IV. (which decrypts perfectly in PyCrypto)
However..
On Node.js im doing this
var buf = new Buffer(ciphertext)
var decipher = crypto.createDecipher('aes-128-cbc',aeskey)
buf = decipher.update(buf,'binary', 'binary')
buf += decipher.final('binary')

Which spits out a bunch of Garbage.... ( changing 'binary' to hex/utf8 doesnt help)
As i am using CBC (Cipher Block Chaining)...
i am prepending the IV to the beginning of the ciphertext (16 blocks)..
In PyCrypto this works perfectly, similarly to the specification of PGP, CFB usage..
Does anyone know for what reason this is not working???  
Am i expecting too much of Node.js's standard libraries?
","That's not how IV works in Node, you have to use crypto.createDecipheriv(cipher, key, iv) instead, otherwise you get a default baked-in one. Even in PyCrypto you should be using the third argument to AES.new as the IV, not stuffing it into the bytestream.
","2197","<node.js><aes><encryption><pycrypto>","3","0","5","2012-02-01 20:30:34","","1","3","","","","2011-03-17 21:51:15",""
"5345719","Is AES the same in libraries PyCrypto & Node.JS Crypto","I am beginnging to wonder if the implementation of AES is different across libraries..
Currently i have a plaintext encrypted with PyCrypto.
Im trying to decrypt the ciphertext with Node.js's Crypto Library..
Basically with PyCrypto..
im using AES-128-CBC with a random generated IV. (which decrypts perfectly in PyCrypto)
However..
On Node.js im doing this
var buf = new Buffer(ciphertext)
var decipher = crypto.createDecipher('aes-128-cbc',aeskey)
buf = decipher.update(buf,'binary', 'binary')
buf += decipher.final('binary')

Which spits out a bunch of Garbage.... ( changing 'binary' to hex/utf8 doesnt help)
As i am using CBC (Cipher Block Chaining)...
i am prepending the IV to the beginning of the ciphertext (16 blocks)..
In PyCrypto this works perfectly, similarly to the specification of PGP, CFB usage..
Does anyone know for what reason this is not working???  
Am i expecting too much of Node.js's standard libraries?
","Documentation does not mention this, but aeskey you're passing to crypto.createDecipher is not the key, but a password, handled to OpenSSL's EVP_BytesToKey function.
To pass the actual raw key data one should use (presently undocumented) crypto.createDecipheriv(cipher, key, iv) function. This applies to ECB mode too, even though there's no IV in ECB.
If this fails, I think, the first step in debugging would be to try with AES KATs to see whenever the decryption code is correct.
I've tripped on a similar issue here: https://github.com/joyent/node/issues/1318
","2197","<node.js><aes><encryption><pycrypto>","3","1","5","2012-02-01 20:30:34","","1","3","","","","2011-03-17 21:51:15",""
"5345719","Is AES the same in libraries PyCrypto & Node.JS Crypto","I am beginnging to wonder if the implementation of AES is different across libraries..
Currently i have a plaintext encrypted with PyCrypto.
Im trying to decrypt the ciphertext with Node.js's Crypto Library..
Basically with PyCrypto..
im using AES-128-CBC with a random generated IV. (which decrypts perfectly in PyCrypto)
However..
On Node.js im doing this
var buf = new Buffer(ciphertext)
var decipher = crypto.createDecipher('aes-128-cbc',aeskey)
buf = decipher.update(buf,'binary', 'binary')
buf += decipher.final('binary')

Which spits out a bunch of Garbage.... ( changing 'binary' to hex/utf8 doesnt help)
As i am using CBC (Cipher Block Chaining)...
i am prepending the IV to the beginning of the ciphertext (16 blocks)..
In PyCrypto this works perfectly, similarly to the specification of PGP, CFB usage..
Does anyone know for what reason this is not working???  
Am i expecting too much of Node.js's standard libraries?
","Make sure you use the same key and IV in both pycrypto and node.js!! Not only that, but make sure you have the same encoding in both ends:
cipher = AES.new(key.decode('hex'), AES.MODE_CBC, iv.decode('hex'))
text = json.dumps(payload)  
pad = lambda s: s + (16 - len(s) % 16) * '\x07'     
encryptedText = base64.b64encode(cipher.encrypt(pad(text)))

Then in node.js (sorry, no easy access to that code now), also make sure you decode your key and iv to hex
","2197","<node.js><aes><encryption><pycrypto>","3","0","5","2012-02-01 20:30:34","","1","3","","","","2011-03-17 21:51:15",""
"11252436","PyCrypto in Google App Engine development server ""ImportError: cannot import name blockalgo""","I have a function which encrypts a string with AES using PyCrypto. When I call that function in my unit tests, everything works fine. On the production environment, it works fine as well. However, when the function is called on the GAE development server, an error is thrown: ""ImportError: cannot import name blockalgo"". I tested it on Windows 7 (64 bit) and Mac OS 10.5. Both resulted in the same error. I'm using Google App Engine with Python 2.7. What could be the problem?
app.yaml
application: xxx
version: 6
runtime: python27
api_version: 1
threadsafe: true

libraries:
- name: django
  version: ""1.2""
- name: webapp2
  version: ""2.3""
- name: jinja2
  version: ""2.6""
- name: pycrypto
  version: ""2.3""
- name: PIL
  version: ""1.1.7""

builtins:
- appstats: on
- remote_api: on

inbound_services:
- mail
- warmup

Encryption function:
def encrypt(plaintext):
    from Crypto.Cipher import AES
    import hashlib

    password = 'xxx'
    key = hashlib.sha256(password).digest()

    mode = AES.MODE_ECB
    encryptor = AES.new(key, mode)

    BLOCK_SIZE = 16
    PADDING = '{'
    pad = lambda s: s + (BLOCK_SIZE - len(s) % BLOCK_SIZE) * PADDING
    EncodeAES = lambda c, s: b58encode(c.encrypt(pad(s)))

    encrypted = EncodeAES(encryptor, plaintext)

    if len(encrypted) < 22:
        for i in range (len(encrypted), 22):
            encrypted += ""_""
    return encrypted

","Make sure the version of PyCrypto that is installed on your local system is the same as the version specified in app.yaml. Think twice before you upgrade a package to the newest version.
","2191","<python><google-app-engine><jinja2><pycrypto>","5","5","1","2012-06-29 16:44:01","11265758","1","3","1249923","","2012-06-29 15:36:22","2012-06-28 20:31:10",""
"52340660","cl.exe failed with exit status 2 while installing PyCrypto","I was trying to install PyCrypto using PIP command
pip install pycrypto
I encountered  error as,
error: command 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.15.26726\\bin\\HostX86\\x64\\cl.exe' failed with exit status 2

Please help me if anyone knows how to resolve this issue.
","Searching about cli.exe and python lead me to https://github.com/explosion/spaCy/issues/2507
TLDR: 
Choose one

use conda instead of pip 
downgrade your python to 3.6 or lower
download an already compiled pycrypto and install it manually  

","2176","<windows><python-3.x><anaconda><pycrypto>","1","0","1","2018-09-16 14:50:50","","4","","2452245","","2018-09-16 14:50:50","2018-09-15 00:42:49",""
"47353162","How to convert AES encrypt output bytes to string and vise versa","I want to encrypt texts using PyCrypto AES and write the output ciphertext to a text file. As you know the encrypt() output returns bytes and so I have to decode it to unicode first for it to be accepted by write() method. My problem is both str() and decode() methods throw the same error: 
UnicodeDecodeError: 'utf-8' codec can't decode byte 0xc7 in position 0: invalid continuation byte

Here's part of the encrypted text I'm trying to decode to utf-8:
...\xa5- \xd9\x14_\x02\x18\x96\xde\xbb\xad\xb57>\xe5i\x82H\x9b\xcc\x19y\x0f\x89\x0c~\x81\xb5(\xcc|6\x0b\x1c\xa3\x93E\x91d\xa4\x01\xb3\x98C\xb4,\x94@,\xb0\xb0\xd7\xe2\xf7\xf6U\x129B\xd6#u\x02\xc3\xe4l\xa3\x05V\x143\xe6\x85-\x88\x7f\x14\xc0\x1e\x1d\x19vQ\xbe\xc3\xda8\x06\xaf\xb9\xb7F\x91\xa6\xba&\xcb\xd7\xd0\x12\xed\xfd\xd3n\x06\xb6\x8fZ\xccpO\x05f\x...
","If you are writing to a binary file (something like)
binfile = open('bin.out', 'wb')

wb is the key, then you can just call write.
If you are writing to a text file, you'll need to use base64 or something similar to encode in a format that can be included in text.  base64 and hex are the common options.
To encode in base64 do something like
import base64
b64_string = str(base64.b64encode(bytes_obj),'utf-8')

Then use b64decode to get a string back
","2103","<python><encryption><pycrypto>","0","3","2","2017-11-17 14:52:26","47353241","1","","5467844","","2017-11-17 14:40:48","2017-11-17 14:39:43",""
"47353162","How to convert AES encrypt output bytes to string and vise versa","I want to encrypt texts using PyCrypto AES and write the output ciphertext to a text file. As you know the encrypt() output returns bytes and so I have to decode it to unicode first for it to be accepted by write() method. My problem is both str() and decode() methods throw the same error: 
UnicodeDecodeError: 'utf-8' codec can't decode byte 0xc7 in position 0: invalid continuation byte

Here's part of the encrypted text I'm trying to decode to utf-8:
...\xa5- \xd9\x14_\x02\x18\x96\xde\xbb\xad\xb57>\xe5i\x82H\x9b\xcc\x19y\x0f\x89\x0c~\x81\xb5(\xcc|6\x0b\x1c\xa3\x93E\x91d\xa4\x01\xb3\x98C\xb4,\x94@,\xb0\xb0\xd7\xe2\xf7\xf6U\x129B\xd6#u\x02\xc3\xe4l\xa3\x05V\x143\xe6\x85-\x88\x7f\x14\xc0\x1e\x1d\x19vQ\xbe\xc3\xda8\x06\xaf\xb9\xb7F\x91\xa6\xba&\xcb\xd7\xd0\x12\xed\xfd\xd3n\x06\xb6\x8fZ\xccpO\x05f\x...
","AES encryption can output all 1-byte hex numbers (0x00 to 0xFF), however UTF8 requires the last byte in each character  be  in the range 0x00 to 0x7F. This means there will be numerous AES characters that have no corresponding UTF-8 translation, which seems to be the error you're getting.
In fact, if you look closely at your sample text given, it is already in unicode-8. Look at the beginning of your example:
\xa5- \xd9\x14_
This expression contains a unicode-8 hyphen, space, and underscore. The other raw bytes shown are those for which Python couldn't find a corresponding unicode-8 translation.
There is a hyphen, a 
","2103","<python><encryption><pycrypto>","0","0","2","2017-11-17 14:52:26","47353241","1","","5467844","","2017-11-17 14:40:48","2017-11-17 14:39:43",""
"46116821","ImportError: No module named Crypto - pycrypto","Here is the traceback is got when I ran fab on:prod deploy
Traceback (most recent call last):
  File ""/usr/bin/fab"", line 9, in <module>
    load_entry_point('Fabric==1.10.2', 'console_scripts', 'fab')()
  File ""/usr/local/lib/python2.7/dist-packages/pkg_resources/__init__.py"", line 564, in load_entry_point
    return get_distribution(dist).load_entry_point(group, name)
  File ""/usr/local/lib/python2.7/dist-packages/pkg_resources/__init__.py"", line 2662, in load_entry_point
    return ep.load()
  File ""/usr/local/lib/python2.7/dist-packages/pkg_resources/__init__.py"", line 2316, in load
    return self.resolve()
  File ""/usr/local/lib/python2.7/dist-packages/pkg_resources/__init__.py"", line 2322, in resolve
    module = __import__(self.module_name, fromlist=['__name__'], level=0)
  File ""/usr/lib/python2.7/dist-packages/fabric/main.py"", line 19, in <module>
    from fabric import api, state, colors
  File ""/usr/lib/python2.7/dist-packages/fabric/api.py"", line 11, in <module>
    from fabric.decorators import (hosts, roles, runs_once, with_settings, task,
  File ""/usr/lib/python2.7/dist-packages/fabric/decorators.py"", line 9, in <module>
    from Crypto import Random
ImportError: No module named Crypto

I tried to solve my problem with many similar answer/question on stackoverflow, but nothing went well. So yes, I have already tried pip install pycrypto, pip install Crypto and also pip install crypto. How could I fix this issue?
pip install pycrypto
Requirement already satisfied: pycrypto in ./venv/lib/python2.7/site-packages/pycrypto-2.6.1-py2.7-linux-x86_64.egg

I am using a virtualenv and it is activated.
","Install it:
pip install pycrypto

","2089","<python><pycrypto>","1","0","2","2017-09-08 13:08:59","","0","","","user8364555","2017-09-08 12:55:36","2017-09-08 12:39:54",""
"46116821","ImportError: No module named Crypto - pycrypto","Here is the traceback is got when I ran fab on:prod deploy
Traceback (most recent call last):
  File ""/usr/bin/fab"", line 9, in <module>
    load_entry_point('Fabric==1.10.2', 'console_scripts', 'fab')()
  File ""/usr/local/lib/python2.7/dist-packages/pkg_resources/__init__.py"", line 564, in load_entry_point
    return get_distribution(dist).load_entry_point(group, name)
  File ""/usr/local/lib/python2.7/dist-packages/pkg_resources/__init__.py"", line 2662, in load_entry_point
    return ep.load()
  File ""/usr/local/lib/python2.7/dist-packages/pkg_resources/__init__.py"", line 2316, in load
    return self.resolve()
  File ""/usr/local/lib/python2.7/dist-packages/pkg_resources/__init__.py"", line 2322, in resolve
    module = __import__(self.module_name, fromlist=['__name__'], level=0)
  File ""/usr/lib/python2.7/dist-packages/fabric/main.py"", line 19, in <module>
    from fabric import api, state, colors
  File ""/usr/lib/python2.7/dist-packages/fabric/api.py"", line 11, in <module>
    from fabric.decorators import (hosts, roles, runs_once, with_settings, task,
  File ""/usr/lib/python2.7/dist-packages/fabric/decorators.py"", line 9, in <module>
    from Crypto import Random
ImportError: No module named Crypto

I tried to solve my problem with many similar answer/question on stackoverflow, but nothing went well. So yes, I have already tried pip install pycrypto, pip install Crypto and also pip install crypto. How could I fix this issue?
pip install pycrypto
Requirement already satisfied: pycrypto in ./venv/lib/python2.7/site-packages/pycrypto-2.6.1-py2.7-linux-x86_64.egg

I am using a virtualenv and it is activated.
","You are missing the Crypto module, I know you have tried pip install pycrypto, but maybe your pip is for python 3? Try pip2 install pycrypto maybe.
Just saw your edit, you have installed pycrypto in a virtualenv but your frabic is not installed within the same virtualenv.
","2089","<python><pycrypto>","1","0","2","2017-09-08 13:08:59","","0","","","user8364555","2017-09-08 12:55:36","2017-09-08 12:39:54",""
"29069254","pycrypto installation with error ""GMP or MPIR library not found"" in windows 8.1","How can i get pycrypto installation to recognize GMP library in windows 8.1?
I am using Windows 7 SDK (7.0) to compile. Python version is 2.7.8
This is the full error:
warning: GMP or MPIR library not found; Not building Crypto.PublicKey._fastmath.
Successfully installed pycrypto-2.6.1

pip freeze:
ecdsa==0.13
gmpy2==2.0.5
pycrypto==2.6.1
wheel==0.24.0

are there any logs i can post that can help someone point me in the right direction. 
","","2079","<python><compiler-errors><windows-8.1><pycrypto>","2","","0","2015-03-29 07:34:27","","0","","1903116","","2015-03-29 07:34:27","2015-03-16 03:31:42",""
"10763182","Python AES encoding/decoding string and storing in MySQL","I'm working on a project using Pyramid 1.3 (Python 2.7) and storing data in MySQL.  I have a table of email addresses, and I would like to encrypt them for storage.  I am trying to encrypt them in the application, and then will decrypt them for viewing.  I'm not going for complete security but am mainly aiming to obfuscate the data enough were the database itself compromised.  
I'm using PyCrypto with AES, and have been trying to follow some posts on here and some web tutorials I found.  The closest I found so far is this post, and it seems to work, at least encrypting it.  I follow that and get something like ""7hBAQrWhJRnL9YdBGJfRErGFwGi3aC6noGzYTrGwAoQ="" stored in the database.  But the decrypt function keeps erroring with this: 
UnicodeDecodeError: 'ascii' codec can't decode byte 0xa1 in position 1: ordinal not in range(128)

I came across some unicode presentation about Python which sort of helped me make more sense of it but I still keep getting the same error.
Is there a straightforward tutorial on how to encode, store in a database, pull out of database, and decode a source data string?
Do I need a specific collation on the database column?  Does the field need to be a certain type?  So far I've been using a default collation and setting it to VARCHAR, assuming that I was storing a string.  It sounds like I've got some encoding problem somewhere with incompatible types or something but my head is spinning on where I need to change something.
Any better pointers or anything else I can provide?  I can show my code but its basically a copy of the link above... I was just trying to get a proof of concept working before modifying it too much.
edit:
some sample source...
In MySQL, the table is 
id (int)
client_id (int)
emailaddress varchar(100) utf8mb4_general_ci (I've been playing around with the collations, I have no idea what it should be!)
Python:
from base64 import b64encode, b64decode, urlsafe_b64decode, urlsafe_b64encode

BLOCK_SIZE = 32
INTERRUPT = u'\u0001'
PAD = u'\u0000'
def AddPadding(data, interrupt, pad, block_size):
    new_data = ''.join([data, interrupt])
    new_data_len = len(new_data)
    remaining_len = block_size - new_data_len
    to_pad_len = remaining_len % block_size
    pad_string = pad * to_pad_len
    return ''.join([new_data, pad_string])
def StripPadding(data, interrupt, pad):
    return data.rstrip(pad).rstrip(interrupt)#data.rsplit(interrupt,1)[0]#rstrip(pad).rstrip(interrupt)

SECRET_KEY = u'a1b2c3d4e5f6g7h8a1b2c3d4e5f6g7h8'
IV = u'12345678abcdefgh'

cipher_for_encryption = AES.new(SECRET_KEY, AES.MODE_CBC, IV)
cipher_for_decryption = AES.new(SECRET_KEY, AES.MODE_CBC, IV)

def EncryptWithAES(encrypt_cipher, plaintext_data):
    plaintext_padded = AddPadding(plaintext_data, INTERRUPT, PAD, BLOCK_SIZE)
    encrypted = encrypt_cipher.encrypt(plaintext_padded)
    return urlsafe_b64encode(encrypted)
def DecryptWithAES(decrypt_cipher, encrypted_data):
    decoded_encrypted_data = urlsafe_b64decode(encrypted_data)
    decrypted_data = decrypt_cipher.decrypt(decoded_encrypted_data)
    return StripPadding(decrypted_data, INTERRUPT, PAD)

#encrypts it
posted_singleaddress = EncryptWithAES(cipher_for_encryption, posted_singleaddress)

#""me@mail.com"" inserts ""Ktpr49Uzn99HZXbmqEzGKlWo9wk-XBMXGZl_iyna-8c="" into the database

clientemails is the list of emails from the table above.  I get the error when uncommenting out:
#if clientemails:
#    decrypted = DecryptWithAES(cipher_for_decryption, clientemails[0].emailaddress)

I was just trying to decode the first item just to try and get it to work but that's the part that seems to be giving it fits now....
","The general rule with PyCrypto is that cryptographic keys, IVs, plaintexts, paddings, and ciphertexts should always be defined as binary strings, not text. The fact you use Unicode for them is by itself a source of problems.
Another problems is that you pass to AES.new key and IV in hexadecimal encoded form, so that the former is 256 bits and the latter 128 bits. That seems still to work, but I guess your intention was to use AES128 - which has a 128 bit key. You therefore need to convert it to binary, for instance via unhexlify: the two character string b'34' will map to the single byte '\x34'. The IV needs to be twice as long.
In your code it's therefore better to have:
from binascii import unhexlify

INTERRUPT = b'\x01'
PAD = b'\x00'
SECRET_KEY = unhexlify('a1b2c3d4e5f6g7h8a1b2c3d4e5f6g7h8')
IV = unhexlify('12345678abcdefgh'*2)

If you need to encrypt text, you would first encode it (e.g. to UTF-8) and then pass it to your function EncryptWithAES(). See also this example taken from the PyCrypto API:
from Crypto.Cipher import AES
from Crypto import Random

key = b'Sixteen byte key'
iv = Random.new().read(AES.block_size)
cipher = AES.new(key, AES.MODE_CFB, iv)
msg = iv + cipher.encrypt(b'Attack at dawn')

The result of the encryption step (that is, the ciphertext) is again a binary string. In order to store it directly in the MySQL DB you must use either a BINARY or a VARBINARY type column.
","2051","<python><mysql><encryption><pyramid><pycrypto>","1","2","1","2013-02-06 22:12:37","14739716","7","","482262","","2013-02-06 21:43:47","2012-05-26 02:35:41",""
"11788508","PyCrypto on Google App Engine (1.7.0) with Python 2.7 on Mac OS X 10.8 causes ImportError","I am trying to get PyCrypto working with Google App Engine, and I have a lengthy description of an issue I have encountered that is reported as issue 7925 for Google App Engine.
Essentially, I do not know of a sensible way to install PyCrypto on Mac OS X 10.8 in such a way that dev_appserver.py will use it - other than the workaround of putting Crypto/ into the project's root directory.
Unfortunately an issue seems to have just cropped up that causes a project to crash when the project is deployed with Crypto/ in the project's root.
It may be possible to edit or monkeypatch the GAE code, but I am not familiar enough with GAE's code to be comfortable doing that. All of the suggestions I have seen were for Python2.5 and Mac OS X < 10.8.
I would be grateful for thoughts about alternative, sensible ways to get PyCrypto working with the GAE development appserver on Mac OS X 10.8.
","This is the madness I have had to engage in:

Delete all version of PyCrypto
Download PyCrypto v2.3 from https://github.com/dlitz/pycrypto/tags and install with
dlitz-pycrypto-7e141bd/$ python setup.py build
dlitz-pycrypto-7e141bd/$ sudo python setup.py install

(version 2.6 balks with a no blockalgo package)
Apply to dev_appserver_import_hook.py in /Application/GoogleAppEngineLauncher.app/Contents/Resources/GoogleAppEngine-default.bundle/Contents/Resources/google_appengine/google/appengine/tools/ the patch suggested in comment 1 of Issue 1627, i.e. add
try:
  import Crypto as _CryptoTest
  _CryptoBase = os.path.dirname(_CryptoTest.__file__).replace(
    os.path.join(os.path.dirname(os.__file__), 'site-packages'),
     """") # removes preceding slash 
  del _CryptoTest
except ImportError:
  logging.info(""No Crypto could be imported"")
  _CryptoBase = ""Crypto""

around line 314
then modify the ALLOWED_SITE_PACKAGES lines from
ALLOWED_SITE_PACKAGE_FILES = set(
    os.path.normcase(os.path.abspath(os.path.join(
    os.path.dirname(os.__file__), 'site-packages', path)))

to
ALLOWED_SITE_PACKAGE_FILES = set(
    path

and change all references from 'Crypto' to _CryptoBase in the GeneratePythonPaths calls for ALLOWED_SITE_PACKAGES.
(I would expect if one is using dev_appserver from the command line i.e. /usr/local/google_appengine, the dev_appserver_import_hook.py would be modified there)
Restart the project.

Obviously one must rinse and repeat the patch whenever Google App Engine is updated.

Note — This issue appears to have been fixed as of patch 1.7.4 released 14 Dec. 2012.
","2050","<google-app-engine><pycrypto>","7","4","1","2012-12-15 16:50:08","11795720","1","5","","","","2012-08-03 02:39:50",""
"28684465","""TypeError: Incorrect padding"" in pycrypto-2.6.1(python 2.7.6) ubuntu14.04 LTS","I'm trying to make a simple public-private key encryption algorithm using pycrypto:
from Crypto.PublicKey import RSA
from Crypto.Signature import PKCS1_v1_5
from Crypto.Hash import SHA256
from base64 import b64encode, b64decode

#Open a txt file in the host
f = open('to-drop-box.txt', 'rb')

#Save the contents of the file into a variable
message1 = f.read()
f.close()

data = message1

key = open(""privateKey.der"", ""r"").read()
rsakey = RSA.importKey(key)
signer = PKCS1_v1_5.new(rsakey)
digest = SHA256.new()
# It's being assumed the data is base64 encoded, so it's decoded before updating the digest

digest.update(b64decode(data))

sign = signer.sign(digest)
#return b64encode(sign) 
signature = b64encode(sign) 

But I get the following error at the line digest.update(b64decode(data)):
Traceback (most recent call last):
  File ""asymmetric-public-private-key-signature.py"", line 33, in <module>
    digest.update(b64decode(data))
  File ""/usr/lib/python2.7/base64.py"", line 76, in b64decode
    raise TypeError(msg)
TypeError: Incorrect padding

Does someone know how to fix the error?
","to-drop-box.txt is not base64 encoded. b64decode is complaining about the padding (those trailing =) but the error usually signifies that illegal characters appear in the string.
","2044","<python><ubuntu-14.04><public-key-encryption><pycrypto>","0","2","2","2015-02-26 03:50:49","","2","","","","","2015-02-23 22:10:00",""
"28684465","""TypeError: Incorrect padding"" in pycrypto-2.6.1(python 2.7.6) ubuntu14.04 LTS","I'm trying to make a simple public-private key encryption algorithm using pycrypto:
from Crypto.PublicKey import RSA
from Crypto.Signature import PKCS1_v1_5
from Crypto.Hash import SHA256
from base64 import b64encode, b64decode

#Open a txt file in the host
f = open('to-drop-box.txt', 'rb')

#Save the contents of the file into a variable
message1 = f.read()
f.close()

data = message1

key = open(""privateKey.der"", ""r"").read()
rsakey = RSA.importKey(key)
signer = PKCS1_v1_5.new(rsakey)
digest = SHA256.new()
# It's being assumed the data is base64 encoded, so it's decoded before updating the digest

digest.update(b64decode(data))

sign = signer.sign(digest)
#return b64encode(sign) 
signature = b64encode(sign) 

But I get the following error at the line digest.update(b64decode(data)):
Traceback (most recent call last):
  File ""asymmetric-public-private-key-signature.py"", line 33, in <module>
    digest.update(b64decode(data))
  File ""/usr/lib/python2.7/base64.py"", line 76, in b64decode
    raise TypeError(msg)
TypeError: Incorrect padding

Does someone know how to fix the error?
","Ok, I changed the line digest.update(b64decode(data))  to digest.update(data) and now it works. 
","2044","<python><ubuntu-14.04><public-key-encryption><pycrypto>","0","1","2","2015-02-26 03:50:49","","2","","","","","2015-02-23 22:10:00",""
"44892946","RSA encryption in python & decrypt in JS","I am totally new in Cryptography. I want to generate RSA key pairs from server side and send it to all of the clients (browsers). But before that I am testing the scenario by simply encrypting data in python and sending in to index.html file via pubnub and trying to decrypt it in JavaScript. The problem is that when I do encryption by;
random_generator = Random.new().read
key = RSA.generate(1024, random_generator)
print key.exportKey() #<--private key
public_key = key.publickey()
print public_key.exportKey() #<--public key
msg = ""hello""
enc_data = public_key.encrypt(msg, 32)
print '----ENCRYPTED DATA----'
enc = enc_data[0] 

and send the encrypted data enc, it gives me this error:
UnicodeDecodeError: 'utf8' codec can't decode byte 0xc4 in position 2: invalid continuation byte

I tried to convert it into  
enc = base64.b64encode(enc_data[0])

and it is send with no error. but the JS decrypt method gets None 
  var enc_from_python = $('#input').val();
  console.log(""ENCRYPTED data:"", enc_from_python);
  var decrypt = new JSEncrypt();
  decrypt.setPrivateKey($('#privkey').val());
  var uncrypted = decrypt.decrypt(enc_from_python);
  console.log("">>>"",uncrypted);  //<-- this is None ! why ?

Both of the code do enc/dec very well on their own. I have also tried to enc/dec the data in JS with the received key pairs from python and that works well. I guess the problem is with the unicode encoding format of encoded data from Pycrypto which does not match. Could any one tell me what am I missing over here.
Full code for Python:
import time
from pubnub.pnconfiguration import PNConfiguration
from pubnub.pubnub import PubNub

from Crypto.PublicKey import RSA
from Crypto import Random
import base64

pnconfig = PNConfiguration()
pnconfig.subscribe_key = 'demo'
pnconfig.publish_key = 'demo'
channel = ""my_channel"" 
pubnub = PubNub(pnconfig)

def my_publish_callback(envelope, status):
    if not status.is_error():
        pass  # Message successfully published to specified channel.
    else:
        pass  # Handle message publish error. Check 'category' property to find out possible issue


time.sleep(1)
random_generator = Random.new().read
key = RSA.generate(1024, random_generator)
print key.exportKey() #<--private key
public_key = key.publickey()
print public_key.exportKey() #<--public key
msg = ""hello""
enc_data = public_key.encrypt(msg, 32)
print '----ENCRYPTED DATA----'
#enc = enc_data[0]
enc = base64.b64encode(enc_data[0])

print enc        
#print type(enc_data[0])
print '----ENCRYPTED DATA----'
print  ''
print '----DECRYPTED DATA begin----'
print key.decrypt(enc_data[0])
print '----DECRYPTED DATA end----'      

pubnub.publish().channel(channel).message({""data"": enc , ""private"": (key.exportKey()), ""public"" : (public_key.exportKey())}).async(my_publish_callback)         

and full JS code is;
<!doctype html>
<html>
  <head>
    <title>JavaScript RSA Encryption</title>
    <script src=""http://code.jquery.com/jquery-1.8.3.min.js""></script>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/jsencrypt/2.3.1/jsencrypt.min.js""></script>
    <script src=""https://cdn.pubnub.com/sdk/javascript/pubnub.4.12.0.min.js""></script>
    <script type=""text/javascript"">

      // Call this code when the page is done loading.
      $(function() {
        pubnub = new PubNub({
          publish_key: 'demo',
          subscribe_key: 'demo'
        });  

        pubnub.subscribe({
            channels: ['my_channel']
        }); 

    pubnub.addListener({
        message: function(message) {
            var msg = message.message;
            console.log(""msg:"" + JSON.stringify(msg));

             if (msg.private){
                $(""#privkey"").val(msg.private);
             }

             if(msg.public){
                $(""#pubkey"").val(msg.public);
             }

             if(msg.data){
                $(""#input"").val(msg.data);
             }           
        }    
    })      

        // Run a quick encryption/decryption when they click.
        $('#testme').click(function() {
          var enc_from_python = $('#input').val();
          console.log(""ENCRYPTED data:"", enc_from_python);
          // Decrypt with the private key...
          var decrypt = new JSEncrypt();
          decrypt.setPrivateKey($('#privkey').val());
          var uncrypted = decrypt.decrypt(enc_from_python);
          console.log("">>>"",uncrypted);  //<-- this is None ! why ?
          // Now a simple check to see if the round-trip worked.
          if (uncrypted == $('#input').val()) {
            alert('It works!!!');
          }
          else {
            alert('Something went wrong....');
          }
        });
      });
    </script>
  </head>
  <body>
    <label for=""privkey"">Private Key</label><br/>
    <textarea id=""privkey"" rows=""15"" cols=""65"">   </textarea><br/>
    <label for=""pubkey"">Public Key</label><br/>
    <textarea id=""pubkey"" rows=""15"" cols=""65"">    </textarea><br/>
    <label for=""input"">Text to decrypt:</label><br/>
    <textarea id=""input"" name=""input"" type=""text"" rows=4 cols=70>This is a test!</textarea><br/>
    <input id=""testme"" type=""button"" value=""Decrypt Me!!!"" /><br/>
  </body>
</html>

","If you use Crypto.Cipher.PKCS1_v1_5 it is possible.
Here's the python code. 
I have only tested with python 3, but I believe it should work the same in python 2 with the __future__ imports.
from __future__ import unicode_literals, print_function  # python2
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_v1_5
import base64

private_key = """"""-----BEGIN RSA PRIVATE KEY-----
MIIBOwIBAAJBANBOMQo9wX55+w1ijEaPoYRP2T4BOjoFv3ma0QWqYYQ8FH0z14Zc
B/jb0j2PWpyNcsUUBovj+yWxQnQohCck64kCAwEAAQJBAL4s9PbNpO9MfFkfBMSS
8zoyEDtcsYUxpDtojbandDpdXfvn5D279QaOVLb1C3DgQTTEmroYB8dbeZBc5YJC
2AECIQDqyUn68ehRcx/EyLMUB1IuckZBWCIApgfn7phgVwSwiQIhAOMgY4bN+xrx
UV15Ian4ZbkME1IbAvDPcWuNGHxdsaMBAiBoz0K/S44yDfp4lj+bCUmeglTqhrVn
JLcSymgrWa02QQIhAMJFvPvcilGkYl1atCHHt3LN0mTjd+N0/OXq3SvblIsBAiAc
8RzaV1GmjMEJxw9vM/tQwQg0kyAPlITMRXnwGA6E0A==
-----END RSA PRIVATE KEY-----""""""

rsa = RSA.importKey(private_key)
cipher = PKCS1_v1_5.new(rsa)

def encrypt(msg):
    ciphertext = cipher.encrypt(msg.encode('utf8'))
    return base64.b64encode(ciphertext).decode('ascii')

def decrypt(msg):
    ciphertext = base64.b64decode(msg.encode('ascii'))
    plaintext = cipher.decrypt(ciphertext, b'DECRYPTION FAILED')
    return plaintext.decode('utf8')

ciphertext = encrypt('hello stackoverflow!')
print(ciphertext)
plaintext = decrypt(ciphertext)
print(plaintext)

Sample ciphertext output from plaintext ""hello stackoverflow!"":
tZDRXXcf7ppbVr9JBHQ3+2k3geofl8BdDmLT3HRoqBGvfknY+xISbvy5hYH2alPAUDu2ae4iSYsLyRFBOnzpgw==

In javascript, the original code should work. Here's a simplified version to demonstrate that this specific ciphertext and private rsa key works.


const decrypt = () => {
  const privateKey = document.getElementById('private_key').value
  const cipherText = document.getElementById('ciphertext').value
  const decrypt = new JSEncrypt()
  decrypt.setPrivateKey(privateKey)
  const plainText = decrypt.decrypt(cipherText) || 'DECRYPTION FAILED'
  document.getElementById('plaintext').innerHTML = plainText
}
document.querySelector('button').addEventListener('click', decrypt)
<script src=""https://cdnjs.cloudflare.com/ajax/libs/jsencrypt/2.3.1/jsencrypt.min.js""></script>
<button>Decrypt</button>

<p>plaintext: <em id=plaintext></em> </p>

<label>ciphertext:</label><br>
<textarea cols=64 rows=3 id=ciphertext>
tZDRXXcf7ppbVr9JBHQ3+2k3geofl8BdDmLT3HRoqBGvfknY+xISbvy5hYH2alPAUDu2ae4iSYsLyRFBOnzpgw==
</textarea>
<br>
<label>private key:</label><br>
<textarea cols=64 rows=10 id=private_key>
-----BEGIN RSA PRIVATE KEY-----
MIIBOwIBAAJBANBOMQo9wX55+w1ijEaPoYRP2T4BOjoFv3ma0QWqYYQ8FH0z14Zc
B/jb0j2PWpyNcsUUBovj+yWxQnQohCck64kCAwEAAQJBAL4s9PbNpO9MfFkfBMSS
8zoyEDtcsYUxpDtojbandDpdXfvn5D279QaOVLb1C3DgQTTEmroYB8dbeZBc5YJC
2AECIQDqyUn68ehRcx/EyLMUB1IuckZBWCIApgfn7phgVwSwiQIhAOMgY4bN+xrx
UV15Ian4ZbkME1IbAvDPcWuNGHxdsaMBAiBoz0K/S44yDfp4lj+bCUmeglTqhrVn
JLcSymgrWa02QQIhAMJFvPvcilGkYl1atCHHt3LN0mTjd+N0/OXq3SvblIsBAiAc
8RzaV1GmjMEJxw9vM/tQwQg0kyAPlITMRXnwGA6E0A==
-----END RSA PRIVATE KEY-----
</textarea>



","1998","<python><encryption><rsa><pycrypto><jsencrypt>","3","7","1","2017-07-04 08:10:59","44894479","9","2","","","","2017-07-03 19:44:25",""
"40207259","TypeError: can't concat bytes to str. Pycrypto Aes encryption","Trying to encrypt/decrypt text with aes encryption with python 3, using pycryptodome 3.4.2
Of course, I found this method on the Internet and tried to change it for my needs and all that I'm getting are the errors.
Here's the code:
def aes():
    #aes
    print('1.Шифруем')
    print('2.Дешифруем')
    c = input('Ваш выбор:')
    if int(c) == 1:
        #shifr
        os.system('clear')
        print('Шифруем значит')
        print('Введите текст, который хотите зашифровать')
        text = input()
        with open('Aes/plaintext.txt', 'wb') as f:
            f.write(text.encode('utf-8'))
        BLOCK_SIZE = 16
        PADDING = '{'
        pad = lambda s: s + (BLOCK_SIZE - len(s) % BLOCK_SIZE) * PADDING
        EncodeAES = lambda c, s: base64.b64encode(c.encrypt(pad(s)))
        secret = os.urandom(BLOCK_SIZE)
        with open('Aes/secret.bin', 'wb') as f:
            f.write(secret)
        cipher = AES.new(secret, AES.MODE_CFB)
        with open('Aes/plaintext.txt', 'rb') as f:
            text = f.read()
        encoded = EncodeAES(cipher, text)
        with open('Aes/ciphertext.bin', 'wb') as f:
            f.write(encoded)
        print (encoded)
    if int(c) == 2:
        os.system('clear')
        print('Дешифруем значит')
        PADDING = '{'
        with open('Aes/ciphertext.bin', 'rb') as f:
            encoded = f.read()
        with open('Aes/secret.bin', 'rb') as keyfile:
            secret = keyfile.read()
        DecodeAES = lambda c, e:    c.decrypt(base64.b64decode(e)).rstrip(PADDING)
        cipher = AES.new(secret, AES.MODE_CFB)
        decoded = DecodeAES(cipher, encoded)
        with open('Aes/plaintext.txt', 'w') as f:
            f.write(str(decoded))
        print(decoded)    

But when I'm trying to decrypt some text, I get this error:
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
File ""/usr/lib/python3/dist-packages/spyderlib/widgets/externalshell/sitecustomize.py"", line 699, in runfile
execfile(filename, namespace)
File ""/usr/lib/python3/dist-packages/spyderlib/widgets/externalshell/sitecustomize.py"", line 88, in execfile
exec(compile(open(filename, 'rb').read(), filename, 'exec'), namespace)
File ""/home/tukanoid/Desktop/Enc_dec2/Enc_dec.py"", line 475, in <module>
aes()
File ""/home/tukanoid/Desktop/Enc_dec2/Enc_dec.py"", line 178, in aes
encoded = EncodeAES(cipher, text)
File ""/home/tukanoid/Desktop/Enc_dec2/Enc_dec.py"", line 166, in <lambda>
EncodeAES = lambda c, s: base64.b64encode(c.encrypt(pad(s)))
File ""/home/tukanoid/Desktop/Enc_dec2/Enc_dec.py"", line 162, in <lambda>
pad = lambda s: s + (BLOCK_SIZE - len(s) % BLOCK_SIZE) * PADDING
TypeError: can't concat bytes to str

Actually, I don't know what does lambda do but I think that I get this error because of it. Thanks.
","you're reading your text file as rb which in python 3 returns a bytes object.
In the function, you're padding with a str object, hence the error. Python 3 clearly separates binary data from text data, a thing that python 2 didn't do.
    PADDING = '{'
    pad = lambda s: s + (BLOCK_SIZE - len(s) % BLOCK_SIZE) * PADDING

Change open('Aes/plaintext.txt', 'rb') by open('Aes/plaintext.txt', 'r') and you'll get ascii on both sides, that will work.
(or change PADDING to bytes('{',encoding=""ascii"") or as James stated just b""{"").
","1951","<python-3.x><lambda><aes><concat><pycrypto>","2","2","1","2016-10-23 21:19:50","","1","1","","","","2016-10-23 20:02:14",""
"31756166","Python 3 - Socket Chat Encryption with PyCrypto gives UnicodeDecodeError","I am trying to setup a socket chat with encryption in Python 3, but when decoding UTF-8 it gives an error.
Here is the code:
Client:
from Crypto.Cipher import AES 
from Crypto import Random 
import socket, sys
host = 'localhost'
port = 5558
IV = Random.new().read(16) 
c = AES.new('abcd1234efgh5678', AES.MODE_CFB, IV) 
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((host,port))
data = 'hey'.encode('utf-8') # 1
data = c.encrypt(data) # 2
s.sendall(data)

Server:
from Crypto.Cipher import AES 
from Crypto import Random 
import socket, sys
host = ''
port = 5558
IV = Random.new().read(16) 
c = AES.new('abcd1234efgh5678', AES.MODE_CFB, IV) 
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
s.bind((host,port))
s.listen(10)
sock, addr = s.accept()
data = sock.recv(512)


data = c.decrypt(data) # 1
data = data.decode('utf-8') # 2
print(data)

After running these programs the server gives this error:
UnicodeDecodeError: 'utf-8' codec can't decode byte 0xa5 in position 0: invalid start byte
So, I tried changing 'utf-8' in the Server code to 'latin-1' and it instead kept printing different unicode characters each time the program was run. I then swapped the 2 lines marked with comments in both the client and server, and of course it gave this error:
AttributeError: 'bytes' object has no attribute 'encode'
I have tried Google but all of the programs that use PyCrypto use Python 2, not 3. Eg. Encrypt & Decrypt using PyCrypto AES 256
http://eli.thegreenplace.net/2010/06/25/aes-encryption-of-files-in-python-with-pycrypto/
","apart from the fact that your code above uses // as comments (should be #), i ran the code below (removed everything socket) and found the error: you re-initialize the IV before decrypting. this way you will not get the original value back - just some gibberish that may not be decodable in utf-8.
you will have to send the IV to the server (How to communicate AES initialization Vector to client for hybrid cryptosystem).
from Crypto.Cipher import AES 
from Crypto import Random 

# CLIENT -----------------------------------------
IV = Random.new().read(16) 
c = AES.new('abcd1234efgh5678', AES.MODE_CFB, IV) 
data = 'hey'.encode('utf-8') #  1
data = c.encrypt(data) #  2


# SERVER -----------------------------------------

# THIS IS WHERE YOUR CODE GOES WRONG!
# IV = Random.new().read(16) 

c = AES.new('abcd1234efgh5678', AES.MODE_CFB, IV) 

data = c.decrypt(data) # 1
data = data.decode('utf-8') # 2
print(data)

","1924","<python><sockets><python-3.x><encryption><pycrypto>","0","1","1","2015-08-01 21:55:42","31762882","0","","4884072","","2015-08-01 21:55:42","2015-07-31 22:33:42",""
"45032787","PyCrypto installation error (vc\cl.exe fails no matter what)","I am trying to install pyCrypto (by pip3 install pycrypto) , and I keep getting this error :
  Failed building wheel for pycrypto
  Running setup.py clean for pycrypto
Failed to build pycrypto
Installing collected packages: pycrypto
  Running setup.py install for pycrypto ... error
    Complete output from command c:\users\1007238\appdata\local\programs\python\python36-32\python.exe -u -c ""import setuptools, tokenize;__file__='C:\\Users\\1007238\\AppData\\Local\\Temp\\pip-build-pm8w3iz2\\pycrypto\\setup.py';f=getattr(tokenize, 'open', open)(__file__);code=f.read().replace('\r\n', '\n');f.close();exec(compile(code, __file__, 'exec'))"" install --record C:\Users\1007238\AppData\Local\Temp\pip-rd551f7l-record\install-record.txt --single-version-externally-managed --compile:
    running install
    running build
    running build_py
    creating build
    creating build\lib.win32-3.6
    creating build\lib.win32-3.6\Crypto
    copying lib\Crypto\pct_warnings.py -> build\lib.win32-3.6\Crypto

Installation goes well until :
    C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\BIN\cl.exe /c /nologo /Ox /W3 /GL /DNDEBUG /MD -Isrc/ -Isrc/inc-msvc/ -Ic:\users\1007238\appdata\local\programs\python\python36-32\include -Ic:\users\1007238\appdata\local\programs\python\python36-32\include ""-IC:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\INCLUDE"" ""-IC:\Program Files (x86)\Windows Kits\10\include\10.0.15063.0\ucrt"" ""-IC:\Program Files (x86)\Windows Kits\NETFXSDK\4.6.1\include\um"" ""-IC:\Program Files (x86)\Windows Kits\10\include\10.0.15063.0\shared"" ""-IC:\Program Files (x86)\Windows Kits\10\include\10.0.15063.0\um"" ""-IC:\Program Files (x86)\Windows Kits\10\include\10.0.15063.0\winrt"" -IC:\OpenSSL-1.0.1f-64bit\include ""-IC:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\INCLUDE"" ""-IC:\Program Files (x86)\Windows Kits\10\include\10.0.15063.0\ucrt"" ""-IC:\Program Files (x86)\Windows Kits\NETFXSDK\4.6.1\include\um"" ""-IC:\Program Files (x86)\Windows Kits\10\include\10.0.15063.0\shared"" ""-IC:\Program Files (x86)\Windows Kits\10\include\10.0.15063.0\um"" ""-IC:\Program Files (x86)\Windows Kits\10\include\10.0.15063.0\winrt"" /Tcsrc/winrand.c /Fobuild\temp.win32-3.6\Release\src/winrand.obj
    winrand.c
    C:\Program Files (x86)\Windows Kits\10\include\10.0.15063.0\ucrt\inttypes.h(26): error C2061: syntax error: identifier 'intmax_t'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.15063.0\ucrt\inttypes.h(27): error C2061: syntax error: identifier 'rem'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.15063.0\ucrt\inttypes.h(27): error C2059: syntax error: ';'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.15063.0\ucrt\inttypes.h(28): error C2059: syntax error: '}'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.15063.0\ucrt\inttypes.h(30): error C2061: syntax error: identifier 'imaxdiv_t'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.15063.0\ucrt\inttypes.h(30): error C2059: syntax error: ';'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.15063.0\ucrt\inttypes.h(40): error C2143: syntax error: missing '{' before '__cdecl'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.15063.0\ucrt\inttypes.h(41): error C2146: syntax error: missing ')' before identifier '_Number'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.15063.0\ucrt\inttypes.h(41): error C2061: syntax error: identifier '_Number'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.15063.0\ucrt\inttypes.h(41): error C2059: syntax error: ';'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.15063.0\ucrt\inttypes.h(42): error C2059: syntax error: ')'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.15063.0\ucrt\inttypes.h(45): error C2143: syntax error: missing '{' before '__cdecl'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.15063.0\ucrt\inttypes.h(46): error C2146: syntax error: missing ')' before identifier '_Numerator'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.15063.0\ucrt\inttypes.h(46): error C2061: syntax error: identifier '_Numerator'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.15063.0\ucrt\inttypes.h(46): error C2059: syntax error: ';'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.15063.0\ucrt\inttypes.h(46): error C2059: syntax error: ','
    C:\Program Files (x86)\Windows Kits\10\include\10.0.15063.0\ucrt\inttypes.h(48): error C2059: syntax error: ')'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.15063.0\ucrt\inttypes.h(50): error C2143: syntax error: missing '{' before '__cdecl'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.15063.0\ucrt\inttypes.h(56): error C2143: syntax error: missing '{' before '__cdecl'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.15063.0\ucrt\inttypes.h(63): error C2143: syntax error: missing '{' before '__cdecl'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.15063.0\ucrt\inttypes.h(69): error C2143: syntax error: missing '{' before '__cdecl'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.15063.0\ucrt\inttypes.h(76): error C2143: syntax error: missing '{' before '__cdecl'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.15063.0\ucrt\inttypes.h(82): error C2143: syntax error: missing '{' before '__cdecl'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.15063.0\ucrt\inttypes.h(89): error C2143: syntax error: missing '{' before '__cdecl'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.15063.0\ucrt\inttypes.h(95): error C2143: syntax error: missing '{' before '__cdecl'
    error: command 'C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\BIN\\cl.exe' failed with exit status 2

I have searched every topic I could find regarding this exact error , both on this website and many other , but I could not find a fitting solution. (please , don't link me existing threads from this website)
Some things worth mentioning : I have tried setting up the env. variables , it didn't help. 
I have also tried running vcvarsall.bat (inside VC) , as many have suggested. No effect.
Finally , I have tried reinstalling visual studio. 0 effect as well.
Any ideas ?
","I found the solution :
After following the advice of Dave (from comments), I encountered a new error , which I then solved by following this thread Python, installing clarifai --> VS14.0 link.exe failed with exit status 1158 
","1911","<python><pycrypto>","3","1","2","2019-06-13 00:06:29","","2","2","6622587","","2019-06-13 00:06:29","2017-07-11 11:06:09",""
"45032787","PyCrypto installation error (vc\cl.exe fails no matter what)","I am trying to install pyCrypto (by pip3 install pycrypto) , and I keep getting this error :
  Failed building wheel for pycrypto
  Running setup.py clean for pycrypto
Failed to build pycrypto
Installing collected packages: pycrypto
  Running setup.py install for pycrypto ... error
    Complete output from command c:\users\1007238\appdata\local\programs\python\python36-32\python.exe -u -c ""import setuptools, tokenize;__file__='C:\\Users\\1007238\\AppData\\Local\\Temp\\pip-build-pm8w3iz2\\pycrypto\\setup.py';f=getattr(tokenize, 'open', open)(__file__);code=f.read().replace('\r\n', '\n');f.close();exec(compile(code, __file__, 'exec'))"" install --record C:\Users\1007238\AppData\Local\Temp\pip-rd551f7l-record\install-record.txt --single-version-externally-managed --compile:
    running install
    running build
    running build_py
    creating build
    creating build\lib.win32-3.6
    creating build\lib.win32-3.6\Crypto
    copying lib\Crypto\pct_warnings.py -> build\lib.win32-3.6\Crypto

Installation goes well until :
    C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\BIN\cl.exe /c /nologo /Ox /W3 /GL /DNDEBUG /MD -Isrc/ -Isrc/inc-msvc/ -Ic:\users\1007238\appdata\local\programs\python\python36-32\include -Ic:\users\1007238\appdata\local\programs\python\python36-32\include ""-IC:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\INCLUDE"" ""-IC:\Program Files (x86)\Windows Kits\10\include\10.0.15063.0\ucrt"" ""-IC:\Program Files (x86)\Windows Kits\NETFXSDK\4.6.1\include\um"" ""-IC:\Program Files (x86)\Windows Kits\10\include\10.0.15063.0\shared"" ""-IC:\Program Files (x86)\Windows Kits\10\include\10.0.15063.0\um"" ""-IC:\Program Files (x86)\Windows Kits\10\include\10.0.15063.0\winrt"" -IC:\OpenSSL-1.0.1f-64bit\include ""-IC:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\INCLUDE"" ""-IC:\Program Files (x86)\Windows Kits\10\include\10.0.15063.0\ucrt"" ""-IC:\Program Files (x86)\Windows Kits\NETFXSDK\4.6.1\include\um"" ""-IC:\Program Files (x86)\Windows Kits\10\include\10.0.15063.0\shared"" ""-IC:\Program Files (x86)\Windows Kits\10\include\10.0.15063.0\um"" ""-IC:\Program Files (x86)\Windows Kits\10\include\10.0.15063.0\winrt"" /Tcsrc/winrand.c /Fobuild\temp.win32-3.6\Release\src/winrand.obj
    winrand.c
    C:\Program Files (x86)\Windows Kits\10\include\10.0.15063.0\ucrt\inttypes.h(26): error C2061: syntax error: identifier 'intmax_t'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.15063.0\ucrt\inttypes.h(27): error C2061: syntax error: identifier 'rem'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.15063.0\ucrt\inttypes.h(27): error C2059: syntax error: ';'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.15063.0\ucrt\inttypes.h(28): error C2059: syntax error: '}'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.15063.0\ucrt\inttypes.h(30): error C2061: syntax error: identifier 'imaxdiv_t'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.15063.0\ucrt\inttypes.h(30): error C2059: syntax error: ';'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.15063.0\ucrt\inttypes.h(40): error C2143: syntax error: missing '{' before '__cdecl'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.15063.0\ucrt\inttypes.h(41): error C2146: syntax error: missing ')' before identifier '_Number'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.15063.0\ucrt\inttypes.h(41): error C2061: syntax error: identifier '_Number'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.15063.0\ucrt\inttypes.h(41): error C2059: syntax error: ';'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.15063.0\ucrt\inttypes.h(42): error C2059: syntax error: ')'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.15063.0\ucrt\inttypes.h(45): error C2143: syntax error: missing '{' before '__cdecl'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.15063.0\ucrt\inttypes.h(46): error C2146: syntax error: missing ')' before identifier '_Numerator'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.15063.0\ucrt\inttypes.h(46): error C2061: syntax error: identifier '_Numerator'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.15063.0\ucrt\inttypes.h(46): error C2059: syntax error: ';'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.15063.0\ucrt\inttypes.h(46): error C2059: syntax error: ','
    C:\Program Files (x86)\Windows Kits\10\include\10.0.15063.0\ucrt\inttypes.h(48): error C2059: syntax error: ')'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.15063.0\ucrt\inttypes.h(50): error C2143: syntax error: missing '{' before '__cdecl'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.15063.0\ucrt\inttypes.h(56): error C2143: syntax error: missing '{' before '__cdecl'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.15063.0\ucrt\inttypes.h(63): error C2143: syntax error: missing '{' before '__cdecl'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.15063.0\ucrt\inttypes.h(69): error C2143: syntax error: missing '{' before '__cdecl'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.15063.0\ucrt\inttypes.h(76): error C2143: syntax error: missing '{' before '__cdecl'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.15063.0\ucrt\inttypes.h(82): error C2143: syntax error: missing '{' before '__cdecl'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.15063.0\ucrt\inttypes.h(89): error C2143: syntax error: missing '{' before '__cdecl'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.15063.0\ucrt\inttypes.h(95): error C2143: syntax error: missing '{' before '__cdecl'
    error: command 'C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\BIN\\cl.exe' failed with exit status 2

I have searched every topic I could find regarding this exact error , both on this website and many other , but I could not find a fitting solution. (please , don't link me existing threads from this website)
Some things worth mentioning : I have tried setting up the env. variables , it didn't help. 
I have also tried running vcvarsall.bat (inside VC) , as many have suggested. No effect.
Finally , I have tried reinstalling visual studio. 0 effect as well.
Any ideas ?
","This is the solution provided in this blog post
Edit the file inttypes.h and add just before the line of the error:
#define intmax_t long long
#define uintmax_t unsigned long long

Also, the solution provided in this StackOverflow question by @user1602 seems better, since it doesn't involve changing files in Windows SDK:

A workaround for Microsoft VC compiler is to force include
  stdint.h via OS environment variable CL:

Open command prompt
Setup VC environment by runing vcvars*.bat (choose file name depending on VC version and architecture)
set CL=-FI""Full-Path\stdint.h"" (use real value for Full-Path for the environment)
pip install pycrypto


","1911","<python><pycrypto>","3","1","2","2019-06-13 00:06:29","","2","2","6622587","","2019-06-13 00:06:29","2017-07-11 11:06:09",""
"16823558","RSA communication between Javascript and Python","I am working on a prototype, so it needs to use RSA between a Chrome Extension and a Python Server. 
So far I was planning on using https://sourceforge.net/projects/pidcrypt/ and https://www.dlitz.net/. However, while I can get decrypt and encrypt to work as per the documentation, I cannot get one to decrypt each other's message. 
Can someone please, either suggest libraries that interoperate or let me know if I am doing something wrong with this libraries? 
From what I worked out, pidder uses RSA PKCS#1 encryption-style padding (type 2). From googling, I sort of worked out that it is the type that PyCrypto calls PKCS1_OAEP. I am not too sure, but I have tried the standard and the other one two. 
Help would be really appreciated! 
","Would it be possible to use a HTTPS ajax connection instead? That way, you have end to end encryption without needing to worry about it yourself.
","1885","<javascript><python-2.7><rsa><pycrypto><pidcrypt>","2","-2","2","2017-02-11 05:29:14","16835346","0","","1521606","","2016-04-01 18:25:05","2013-05-29 20:50:28",""
"16823558","RSA communication between Javascript and Python","I am working on a prototype, so it needs to use RSA between a Chrome Extension and a Python Server. 
So far I was planning on using https://sourceforge.net/projects/pidcrypt/ and https://www.dlitz.net/. However, while I can get decrypt and encrypt to work as per the documentation, I cannot get one to decrypt each other's message. 
Can someone please, either suggest libraries that interoperate or let me know if I am doing something wrong with this libraries? 
From what I worked out, pidder uses RSA PKCS#1 encryption-style padding (type 2). From googling, I sort of worked out that it is the type that PyCrypto calls PKCS1_OAEP. I am not too sure, but I have tried the standard and the other one two. 
Help would be really appreciated! 
","The Javascript library (pidCrypt) uses PKCS#1 v1.5 for RSA encryption, not OAEP.
That is supported by PyCrypto (see here). This is the example for encryption:
from Crypto.Cipher import PKCS1_v1_5
from Crypto.PublicKey import RSA
from Crypto.Hash import SHA

message = 'To be encrypted'
h = SHA.new(message)

key = RSA.importKey(open('pubkey.der').read())
cipher = PKCS1_v1_5.new(key)
ciphertext = cipher.encrypt(message+h.digest())

And decryption:
from Crypto.Hash import SHA
from Crypto import Random

key = RSA.importKey(open('privkey.der').read())

dsize = SHA.digest_size
sentinel = Random.new().read(15+dsize)      # Let's assume that average data length is 15

cipher = PKCS1_v1_5.new(key)
message = cipher.decrypt(ciphertext, sentinel)

digest = SHA.new(message[:-dsize]).digest()
if digest==message[-dsize:]:                # Note how we DO NOT look for the sentinel
     print ""Encryption was correct.""
else:
     print ""Encryption was not correct.""

Note that PKCS#1 v1.5 encryption scheme is know to be badly broken.
","1885","<javascript><python-2.7><rsa><pycrypto><pidcrypt>","2","3","2","2017-02-11 05:29:14","16835346","0","","1521606","","2016-04-01 18:25:05","2013-05-29 20:50:28",""
"6011666","RSA python publickey using pyCrypto","How to load a RSA public key file into a pyCrypto publickey object in python?
","The RSA Class has an importKey method for this:

importKey(externKey)   Import an RSA
  key (public or private half).
externKey: the RSA key to import,
  encoded as a string. The key can be in
  DER (PKCS#1) or in unencrypted PEM
  format (RFC1421).

","1881","<python><gnupg><pycrypto>","1","3","1","2011-05-15 22:36:39","6011720","0","","","","","2011-05-15 22:24:10",""
"33427689","PyCrypto returns a keysize error for AES","I'm trying to write a program to encrypt files using AES, however I get a 

ValueError: AES key must be either 16, 24, or 32 bytes long

error no matter the size of the key.
My code for generating the AES object is
def AESEncryptor(Seed, Block = 16): #Generate AES key and Cipher
    iv = Random.new().read(Block)
    cipher = AES.new(Seed.encode('utf8'), AES.MODE_CBC, iv)
    return cipher, iv

And my code for generating the key is 
def genNewSeed(k=2048): #Generate seed for new AES key
    return hashlib.sha256(os.urandom(32)).hexdigest()[:11]

Which, according to sys.getsizeof() is equal to 32 bits yet it still returns the error
","The problem is that you're slicing off only 11 bytes from a hex-encoded ""seed"" of 64 characters. Keep in mind that keys are supposed to have high entropy, otherwise it's easier to brute force them.
I suggest you use:
def AESEncryptor(Seed, Block = 16): #Generate AES key and Cipher
    iv = Random.new().read(Block)
    cipher = AES.new(Seed, AES.MODE_CBC, iv)
    return cipher, iv

def genNewSeed(k=2048): #Generate seed for new AES key
    return hashlib.sha256(os.urandom(32)).digest()

This will give you a 32 byte key which makes this AES-256. If you want AES-128, then you can slice the last 16 bytes off:
hashlib.sha256(os.urandom(32)).digest()[:16]

You cannot use sys.getsizeof() to determine the size of a key, because it includes all kinds of internal counters and data. For example, an empty string has already a size of 21 bytes. That's why you would thought that you got 32 byte when you only got 11 (21 + 11 = 32). Use the built-in len(key) instead.
","1880","<python><hash><aes><pycrypto>","2","1","1","2015-10-30 09:25:40","33432586","2","","1816580","","2015-10-30 09:14:54","2015-10-30 00:37:32",""
"29581319","Use RSA to encrypt in JavaScript and decrypt in Python3","I'm developing a website using this JS plugin to encrypt some data and send it to the server: https://github.com/travist/jsencrypt
I'm running Python 3 with Django, the problem is I can't decrypt the data on the server. My code is:
JS Code:
pkey = ""-----BEGIN PUBLIC KEY-----\
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDeVs9mcWUtTgi93/KXMNA/IF7S\
oQcZAmKQueygoDp9XUM3xnxPb/6XNpJQII85Hxbljqs/xuPVtxo5ovyJ+XXIPV8+\
eG6kSDmr2C3NpBUtfoUeADC/1H1jy44T6stBgXGMwTPokhjvSyEbGpkgMGo74Rpq\
q1vHofh3KcPNoaYH4wIDAQAB\
-----END PUBLIC KEY-----"";


var encrypter = new JSEncrypt;
encrypter.setPublicKey(pkey);
encrypter.encrypt('Testing...');

And I get:
""STg7Fnm6Y6cAgMXEt4SxP8rbMb/pFB2X9Y1z8pAOoCNO9y8XuhVmQuG/FRBSqM+3ge43x9kfYMideAUu69RothwEOYmNnVrfwqm7SLm3voEcSXCqst2S7prTmCvYW43WyAAUl0vNxV+7xsm/yciQ4XV+jZSKd3xidbWL1BTTUw8=""

Python Code:
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
from base64 import *


def decrypt(key, text):
    if type(key) == str:
        key = key.encode()
    if type(text) == str:
        text = text.encode()

    rsakey = RSA.importKey(key)
    rsakey = PKCS1_OAEP.new(rsakey)
    d = rsakey.decrypt(text)
    return d

text = ""STg7Fnm6Y6cAgMXEt4SxP8rbMb/pFB2X9Y1z8pAOoCNO9y8XuhVmQuG/FRBSqM+3ge43x9kfYMideAUu69RothwEOYmNnVrfwqm7SLm3voEcSXCqst2S7prTmCvYW43WyAAUl0vNxV+7xsm/yciQ4XV+jZSKd3xidbWL1BTTUw8=""

text = b64decode(text.encode())

with open('private.pem', 'rb') as f:
    key = f.read()
decrypt(key, text)

And I get:
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
  File ""/usr/local/lib/python3.2/dist-packages/Crypto/Cipher/PKCS1_OAEP.py"", line 227, in decrypt
    raise ValueError(""Incorrect decryption."")
ValueError: Incorrect decryption.

The private key I'm using in this example is:
-----BEGIN RSA PRIVATE KEY-----
MIICWwIBAAKBgQCO9YbJ8Z+tW0ucnMdXGNzmcvWaaLRGsx5iUHslbZ1tjec63HDm
6Hr2hv56u5zytyF4Cd/0lBNRC9qf/1XlEFqeSRifsyHZpPfyZn0fbHWYLH8g5FE4
VqrMe79ubSVx2eGWwwaLvEO+yaO1AF/fxWT6Ir8AUikMFFAnX+fBaA3XIwIDAQAB
AoGADxuniQP+CgYR8ZUoA+5eugQALLdQBgC7/0veF9CDyKYsf634SI7dH9yYXEQj
jAsKgHMatfBIMlJ8YlhLrY+S4+r26goNEqygtqetJ6NuePKQQ8xEERP4icsaBpY7
WqeU6AZOMlyq8o+e4DMnuxGpf8UT+lLx1G9AmVJf3+6NONECQQDLX94BmW//48Y6
yg9wnO6TR1msrGd1PFRqyJ9eilj8chI2JxiHkhepiTlBU7eyjUv4aeE7U84mp3Zo
AtPoiKmlAkEAs/OQM9IDttfgdS/yK6vZr1myNAbKOdv1rVId7MAspGHbN//gzb4s
r4mZKsIAi+jaDhpMvYbUxJe9y5HAY3XTJwJAe3hcZEQvRv+WHaMG9KuR/EBZJQgW
V4qlBZ9/gfokRD9M5yudLNF5JCh3Zj3ZTMGT2eEOKOKcScNpk4QD+yzdMQJAQlSM
Gd3WyqXmMav7qwdMVStN2YmLLyqZ80oqh6MKkYkUgh7KYWwxEn84ux8JjojFH5+o
G9BASzrXldrivIaozwJAVAHr9ON/altcDyh/OjkJff/3xXzHB3Zxvy4WykkO/PdF
tOqpAnYso3mCsEQsCcrJCflkFmJuYsvu4+Tm4GiqVg==
-----END RSA PRIVATE KEY-----

If I try to decrypt it on JS it works as intended:
private = ""-----BEGIN RSA PRIVATE KEY-----\
MIICWwIBAAKBgQCO9YbJ8Z+tW0ucnMdXGNzmcvWaaLRGsx5iUHslbZ1tjec63HDm\
6Hr2hv56u5zytyF4Cd/0lBNRC9qf/1XlEFqeSRifsyHZpPfyZn0fbHWYLH8g5FE4\
VqrMe79ubSVx2eGWwwaLvEO+yaO1AF/fxWT6Ir8AUikMFFAnX+fBaA3XIwIDAQAB\
AoGADxuniQP+CgYR8ZUoA+5eugQALLdQBgC7/0veF9CDyKYsf634SI7dH9yYXEQj\
jAsKgHMatfBIMlJ8YlhLrY+S4+r26goNEqygtqetJ6NuePKQQ8xEERP4icsaBpY7\
WqeU6AZOMlyq8o+e4DMnuxGpf8UT+lLx1G9AmVJf3+6NONECQQDLX94BmW//48Y6\
yg9wnO6TR1msrGd1PFRqyJ9eilj8chI2JxiHkhepiTlBU7eyjUv4aeE7U84mp3Zo\
AtPoiKmlAkEAs/OQM9IDttfgdS/yK6vZr1myNAbKOdv1rVId7MAspGHbN//gzb4s\
r4mZKsIAi+jaDhpMvYbUxJe9y5HAY3XTJwJAe3hcZEQvRv+WHaMG9KuR/EBZJQgW\
V4qlBZ9/gfokRD9M5yudLNF5JCh3Zj3ZTMGT2eEOKOKcScNpk4QD+yzdMQJAQlSM\
Gd3WyqXmMav7qwdMVStN2YmLLyqZ80oqh6MKkYkUgh7KYWwxEn84ux8JjojFH5+o\
G9BASzrXldrivIaozwJAVAHr9ON/altcDyh/OjkJff/3xXzHB3Zxvy4WykkO/PdF\
tOqpAnYso3mCsEQsCcrJCflkFmJuYsvu4+Tm4GiqVg==\
-----END RSA PRIVATE KEY-----\
""
text = ""STg7Fnm6Y6cAgMXEt4SxP8rbMb/pFB2X9Y1z8pAOoCNO9y8XuhVmQuG/FRBSqM+3ge43x9kfYMideAUu69RothwEOYmNnVrfwqm7SLm3voEcSXCqst2S7prTmCvYW43WyAAUl0vNxV+7xsm/yciQ4XV+jZSKd3xidbWL1BTTUw8=""

encrypter.setPrivateKey(private);
encrypter.decrypt(text);

And I get:
""Testing""

But I just can't make it work on Python.
What am I doing wrong?
","jsencrypt depends on the jsbn library which doesn't provide OAEP, but only PKCS#1 v1.5 padding.
You have to use the same in python which PyCrypto provides. Simply use PKCS1_v1_5 instead of PKCS1_OAEP.

Note that PKCS#1 v1.5 padding shouldn't be used today anymore. I suggest you use the forge library which provides an RSA implementation with OAEP.
","1830","<python><python-3.x><encryption><rsa><pycrypto>","1","2","3","2017-02-13 05:05:26","29581422","0","","1816580","","2015-04-11 18:24:20","2015-04-11 18:10:24",""
"29581319","Use RSA to encrypt in JavaScript and decrypt in Python3","I'm developing a website using this JS plugin to encrypt some data and send it to the server: https://github.com/travist/jsencrypt
I'm running Python 3 with Django, the problem is I can't decrypt the data on the server. My code is:
JS Code:
pkey = ""-----BEGIN PUBLIC KEY-----\
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDeVs9mcWUtTgi93/KXMNA/IF7S\
oQcZAmKQueygoDp9XUM3xnxPb/6XNpJQII85Hxbljqs/xuPVtxo5ovyJ+XXIPV8+\
eG6kSDmr2C3NpBUtfoUeADC/1H1jy44T6stBgXGMwTPokhjvSyEbGpkgMGo74Rpq\
q1vHofh3KcPNoaYH4wIDAQAB\
-----END PUBLIC KEY-----"";


var encrypter = new JSEncrypt;
encrypter.setPublicKey(pkey);
encrypter.encrypt('Testing...');

And I get:
""STg7Fnm6Y6cAgMXEt4SxP8rbMb/pFB2X9Y1z8pAOoCNO9y8XuhVmQuG/FRBSqM+3ge43x9kfYMideAUu69RothwEOYmNnVrfwqm7SLm3voEcSXCqst2S7prTmCvYW43WyAAUl0vNxV+7xsm/yciQ4XV+jZSKd3xidbWL1BTTUw8=""

Python Code:
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
from base64 import *


def decrypt(key, text):
    if type(key) == str:
        key = key.encode()
    if type(text) == str:
        text = text.encode()

    rsakey = RSA.importKey(key)
    rsakey = PKCS1_OAEP.new(rsakey)
    d = rsakey.decrypt(text)
    return d

text = ""STg7Fnm6Y6cAgMXEt4SxP8rbMb/pFB2X9Y1z8pAOoCNO9y8XuhVmQuG/FRBSqM+3ge43x9kfYMideAUu69RothwEOYmNnVrfwqm7SLm3voEcSXCqst2S7prTmCvYW43WyAAUl0vNxV+7xsm/yciQ4XV+jZSKd3xidbWL1BTTUw8=""

text = b64decode(text.encode())

with open('private.pem', 'rb') as f:
    key = f.read()
decrypt(key, text)

And I get:
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
  File ""/usr/local/lib/python3.2/dist-packages/Crypto/Cipher/PKCS1_OAEP.py"", line 227, in decrypt
    raise ValueError(""Incorrect decryption."")
ValueError: Incorrect decryption.

The private key I'm using in this example is:
-----BEGIN RSA PRIVATE KEY-----
MIICWwIBAAKBgQCO9YbJ8Z+tW0ucnMdXGNzmcvWaaLRGsx5iUHslbZ1tjec63HDm
6Hr2hv56u5zytyF4Cd/0lBNRC9qf/1XlEFqeSRifsyHZpPfyZn0fbHWYLH8g5FE4
VqrMe79ubSVx2eGWwwaLvEO+yaO1AF/fxWT6Ir8AUikMFFAnX+fBaA3XIwIDAQAB
AoGADxuniQP+CgYR8ZUoA+5eugQALLdQBgC7/0veF9CDyKYsf634SI7dH9yYXEQj
jAsKgHMatfBIMlJ8YlhLrY+S4+r26goNEqygtqetJ6NuePKQQ8xEERP4icsaBpY7
WqeU6AZOMlyq8o+e4DMnuxGpf8UT+lLx1G9AmVJf3+6NONECQQDLX94BmW//48Y6
yg9wnO6TR1msrGd1PFRqyJ9eilj8chI2JxiHkhepiTlBU7eyjUv4aeE7U84mp3Zo
AtPoiKmlAkEAs/OQM9IDttfgdS/yK6vZr1myNAbKOdv1rVId7MAspGHbN//gzb4s
r4mZKsIAi+jaDhpMvYbUxJe9y5HAY3XTJwJAe3hcZEQvRv+WHaMG9KuR/EBZJQgW
V4qlBZ9/gfokRD9M5yudLNF5JCh3Zj3ZTMGT2eEOKOKcScNpk4QD+yzdMQJAQlSM
Gd3WyqXmMav7qwdMVStN2YmLLyqZ80oqh6MKkYkUgh7KYWwxEn84ux8JjojFH5+o
G9BASzrXldrivIaozwJAVAHr9ON/altcDyh/OjkJff/3xXzHB3Zxvy4WykkO/PdF
tOqpAnYso3mCsEQsCcrJCflkFmJuYsvu4+Tm4GiqVg==
-----END RSA PRIVATE KEY-----

If I try to decrypt it on JS it works as intended:
private = ""-----BEGIN RSA PRIVATE KEY-----\
MIICWwIBAAKBgQCO9YbJ8Z+tW0ucnMdXGNzmcvWaaLRGsx5iUHslbZ1tjec63HDm\
6Hr2hv56u5zytyF4Cd/0lBNRC9qf/1XlEFqeSRifsyHZpPfyZn0fbHWYLH8g5FE4\
VqrMe79ubSVx2eGWwwaLvEO+yaO1AF/fxWT6Ir8AUikMFFAnX+fBaA3XIwIDAQAB\
AoGADxuniQP+CgYR8ZUoA+5eugQALLdQBgC7/0veF9CDyKYsf634SI7dH9yYXEQj\
jAsKgHMatfBIMlJ8YlhLrY+S4+r26goNEqygtqetJ6NuePKQQ8xEERP4icsaBpY7\
WqeU6AZOMlyq8o+e4DMnuxGpf8UT+lLx1G9AmVJf3+6NONECQQDLX94BmW//48Y6\
yg9wnO6TR1msrGd1PFRqyJ9eilj8chI2JxiHkhepiTlBU7eyjUv4aeE7U84mp3Zo\
AtPoiKmlAkEAs/OQM9IDttfgdS/yK6vZr1myNAbKOdv1rVId7MAspGHbN//gzb4s\
r4mZKsIAi+jaDhpMvYbUxJe9y5HAY3XTJwJAe3hcZEQvRv+WHaMG9KuR/EBZJQgW\
V4qlBZ9/gfokRD9M5yudLNF5JCh3Zj3ZTMGT2eEOKOKcScNpk4QD+yzdMQJAQlSM\
Gd3WyqXmMav7qwdMVStN2YmLLyqZ80oqh6MKkYkUgh7KYWwxEn84ux8JjojFH5+o\
G9BASzrXldrivIaozwJAVAHr9ON/altcDyh/OjkJff/3xXzHB3Zxvy4WykkO/PdF\
tOqpAnYso3mCsEQsCcrJCflkFmJuYsvu4+Tm4GiqVg==\
-----END RSA PRIVATE KEY-----\
""
text = ""STg7Fnm6Y6cAgMXEt4SxP8rbMb/pFB2X9Y1z8pAOoCNO9y8XuhVmQuG/FRBSqM+3ge43x9kfYMideAUu69RothwEOYmNnVrfwqm7SLm3voEcSXCqst2S7prTmCvYW43WyAAUl0vNxV+7xsm/yciQ4XV+jZSKd3xidbWL1BTTUw8=""

encrypter.setPrivateKey(private);
encrypter.decrypt(text);

And I get:
""Testing""

But I just can't make it work on Python.
What am I doing wrong?
","Using PKCS1_v1_5:
def decrypt(key, text):
    if type(key) == str:
        key = key.encode()
    if type(text) == str:
        text = text.encode()

    rsakey = RSA.importKey(key)
    rsakey = PKCS1_v1_5.new(rsakey)
    d = rsakey.decrypt(text, 'bollox')
    return d

>>> decrypt(text, key)
b'Testing'

","1830","<python><python-3.x><encryption><rsa><pycrypto>","1","0","3","2017-02-13 05:05:26","29581422","0","","1816580","","2015-04-11 18:24:20","2015-04-11 18:10:24",""
"29581319","Use RSA to encrypt in JavaScript and decrypt in Python3","I'm developing a website using this JS plugin to encrypt some data and send it to the server: https://github.com/travist/jsencrypt
I'm running Python 3 with Django, the problem is I can't decrypt the data on the server. My code is:
JS Code:
pkey = ""-----BEGIN PUBLIC KEY-----\
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDeVs9mcWUtTgi93/KXMNA/IF7S\
oQcZAmKQueygoDp9XUM3xnxPb/6XNpJQII85Hxbljqs/xuPVtxo5ovyJ+XXIPV8+\
eG6kSDmr2C3NpBUtfoUeADC/1H1jy44T6stBgXGMwTPokhjvSyEbGpkgMGo74Rpq\
q1vHofh3KcPNoaYH4wIDAQAB\
-----END PUBLIC KEY-----"";


var encrypter = new JSEncrypt;
encrypter.setPublicKey(pkey);
encrypter.encrypt('Testing...');

And I get:
""STg7Fnm6Y6cAgMXEt4SxP8rbMb/pFB2X9Y1z8pAOoCNO9y8XuhVmQuG/FRBSqM+3ge43x9kfYMideAUu69RothwEOYmNnVrfwqm7SLm3voEcSXCqst2S7prTmCvYW43WyAAUl0vNxV+7xsm/yciQ4XV+jZSKd3xidbWL1BTTUw8=""

Python Code:
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
from base64 import *


def decrypt(key, text):
    if type(key) == str:
        key = key.encode()
    if type(text) == str:
        text = text.encode()

    rsakey = RSA.importKey(key)
    rsakey = PKCS1_OAEP.new(rsakey)
    d = rsakey.decrypt(text)
    return d

text = ""STg7Fnm6Y6cAgMXEt4SxP8rbMb/pFB2X9Y1z8pAOoCNO9y8XuhVmQuG/FRBSqM+3ge43x9kfYMideAUu69RothwEOYmNnVrfwqm7SLm3voEcSXCqst2S7prTmCvYW43WyAAUl0vNxV+7xsm/yciQ4XV+jZSKd3xidbWL1BTTUw8=""

text = b64decode(text.encode())

with open('private.pem', 'rb') as f:
    key = f.read()
decrypt(key, text)

And I get:
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
  File ""/usr/local/lib/python3.2/dist-packages/Crypto/Cipher/PKCS1_OAEP.py"", line 227, in decrypt
    raise ValueError(""Incorrect decryption."")
ValueError: Incorrect decryption.

The private key I'm using in this example is:
-----BEGIN RSA PRIVATE KEY-----
MIICWwIBAAKBgQCO9YbJ8Z+tW0ucnMdXGNzmcvWaaLRGsx5iUHslbZ1tjec63HDm
6Hr2hv56u5zytyF4Cd/0lBNRC9qf/1XlEFqeSRifsyHZpPfyZn0fbHWYLH8g5FE4
VqrMe79ubSVx2eGWwwaLvEO+yaO1AF/fxWT6Ir8AUikMFFAnX+fBaA3XIwIDAQAB
AoGADxuniQP+CgYR8ZUoA+5eugQALLdQBgC7/0veF9CDyKYsf634SI7dH9yYXEQj
jAsKgHMatfBIMlJ8YlhLrY+S4+r26goNEqygtqetJ6NuePKQQ8xEERP4icsaBpY7
WqeU6AZOMlyq8o+e4DMnuxGpf8UT+lLx1G9AmVJf3+6NONECQQDLX94BmW//48Y6
yg9wnO6TR1msrGd1PFRqyJ9eilj8chI2JxiHkhepiTlBU7eyjUv4aeE7U84mp3Zo
AtPoiKmlAkEAs/OQM9IDttfgdS/yK6vZr1myNAbKOdv1rVId7MAspGHbN//gzb4s
r4mZKsIAi+jaDhpMvYbUxJe9y5HAY3XTJwJAe3hcZEQvRv+WHaMG9KuR/EBZJQgW
V4qlBZ9/gfokRD9M5yudLNF5JCh3Zj3ZTMGT2eEOKOKcScNpk4QD+yzdMQJAQlSM
Gd3WyqXmMav7qwdMVStN2YmLLyqZ80oqh6MKkYkUgh7KYWwxEn84ux8JjojFH5+o
G9BASzrXldrivIaozwJAVAHr9ON/altcDyh/OjkJff/3xXzHB3Zxvy4WykkO/PdF
tOqpAnYso3mCsEQsCcrJCflkFmJuYsvu4+Tm4GiqVg==
-----END RSA PRIVATE KEY-----

If I try to decrypt it on JS it works as intended:
private = ""-----BEGIN RSA PRIVATE KEY-----\
MIICWwIBAAKBgQCO9YbJ8Z+tW0ucnMdXGNzmcvWaaLRGsx5iUHslbZ1tjec63HDm\
6Hr2hv56u5zytyF4Cd/0lBNRC9qf/1XlEFqeSRifsyHZpPfyZn0fbHWYLH8g5FE4\
VqrMe79ubSVx2eGWwwaLvEO+yaO1AF/fxWT6Ir8AUikMFFAnX+fBaA3XIwIDAQAB\
AoGADxuniQP+CgYR8ZUoA+5eugQALLdQBgC7/0veF9CDyKYsf634SI7dH9yYXEQj\
jAsKgHMatfBIMlJ8YlhLrY+S4+r26goNEqygtqetJ6NuePKQQ8xEERP4icsaBpY7\
WqeU6AZOMlyq8o+e4DMnuxGpf8UT+lLx1G9AmVJf3+6NONECQQDLX94BmW//48Y6\
yg9wnO6TR1msrGd1PFRqyJ9eilj8chI2JxiHkhepiTlBU7eyjUv4aeE7U84mp3Zo\
AtPoiKmlAkEAs/OQM9IDttfgdS/yK6vZr1myNAbKOdv1rVId7MAspGHbN//gzb4s\
r4mZKsIAi+jaDhpMvYbUxJe9y5HAY3XTJwJAe3hcZEQvRv+WHaMG9KuR/EBZJQgW\
V4qlBZ9/gfokRD9M5yudLNF5JCh3Zj3ZTMGT2eEOKOKcScNpk4QD+yzdMQJAQlSM\
Gd3WyqXmMav7qwdMVStN2YmLLyqZ80oqh6MKkYkUgh7KYWwxEn84ux8JjojFH5+o\
G9BASzrXldrivIaozwJAVAHr9ON/altcDyh/OjkJff/3xXzHB3Zxvy4WykkO/PdF\
tOqpAnYso3mCsEQsCcrJCflkFmJuYsvu4+Tm4GiqVg==\
-----END RSA PRIVATE KEY-----\
""
text = ""STg7Fnm6Y6cAgMXEt4SxP8rbMb/pFB2X9Y1z8pAOoCNO9y8XuhVmQuG/FRBSqM+3ge43x9kfYMideAUu69RothwEOYmNnVrfwqm7SLm3voEcSXCqst2S7prTmCvYW43WyAAUl0vNxV+7xsm/yciQ4XV+jZSKd3xidbWL1BTTUw8=""

encrypter.setPrivateKey(private);
encrypter.decrypt(text);

And I get:
""Testing""

But I just can't make it work on Python.
What am I doing wrong?
","I had been using JSEncrypt JavaScript file to achieve conversation between JavaScript and Python using pycrypto however during encryption in JavaScript it uses a random pad in the function pkcs1pad2 which needed to be removed and it started working. It had been a hack but it worked out. Following are the lines are commented out from function pkcs1pad2(s,n)
while(n > 2) { // random non-zero pad
    x[0] = 0;
    while(x[0] == 0) rng.nextBytes(x);
    ba[--n] = x[0];
  }

  ba[--n] = 2;
  ba[--n] = 0;

","1830","<python><python-3.x><encryption><rsa><pycrypto>","1","0","3","2017-02-13 05:05:26","29581422","0","","1816580","","2015-04-11 18:24:20","2015-04-11 18:10:24",""
"28792966","RSA Encrypt and Decrypt between JS and Python(pycrypto)","I encrypt plain text from JS RSA Library(http://www-cs-students.stanford.edu/~tjw/jsbn/) and decrypt from python, Crypto.PublicKey.
But, when I decrypt cipher text from JS with python, It has dummy text. I don't know why they are.
So, I want clear text which does not have dummy.(ex. test)
Step

Make key pairs in Python.
key = RSA.generate(1024) #(publicKey, privateKey)

Save modulus, exponent in JS and Encrypt ""test""
var rsa = new RSAKey();
rsa.setPublic(modulus, exponent); //modulus and exponent hex string
rsa.encrypt(""test"");

result(hex string): d0ab7e22f92adcca7182e3c622b513382d163033df5ca0f3c0327e8a1774258800ae57dfc98522f5ed40a4bed2f4b54f46ea800ff1ef522b104b0f874a598f6bbcf5453506f8bf2f8aa3b04b0c73f0018564707304b3a059326d51945d3ff0282d63c2c4c1ea6ba5a2172af83ef8bdc1d104a8d67ba95ee97ab89b36cd5c34d4
Decrypt using PrivateKey in Python
key.decrypt(above_result.decode('hex'))

result: \x02\xf0\xae\xafK\xd3\x17\xfc\xf4\xd6\xd9=\xee7\x04\x94\xea\x9c\xd8\xf7--\x19\x05$!'#\xad\x82'\xfcKG\xadK\xb6_\xabMZ:\x9dU\xa4\xc0[\x8c\xa6hC\x93\xf7\xbc\xf1:\x9f\x107D\xe8\xfe\x07R\x8c\xd7\xb3\xe6\xc6\xcf^\x92\xa2\xe2X\xe4\xaf|\x8aS\xfe\xd3\x84)\xc3\x82\xdc\xd1\x7f\xc9\x12\xd0\x94\xd2jS\xee\x83\xfda\xc6\xc7d\xdd\x0b2\xe6\x1d\x84\x0c\x93\x8aK\xc2\x10U\xc0Y~\xbf\x15\xfa\x00test

","The pycrypto rsa decrypt() method is a low-level method, hence you are getting the expected output, a PKCS#1, version 1.5, block type 2 array of bytes. As you seem to find that inconvenient, you should follow the advice in the API docs and instead use the PKCS1_v1_5 module. 
","1829","<javascript><python><rsa><pycrypto><jsbn>","5","4","2","2017-02-11 05:28:27","28800963","2","6","1816580","","2015-03-01 17:33:42","2015-03-01 11:25:04",""
"28792966","RSA Encrypt and Decrypt between JS and Python(pycrypto)","I encrypt plain text from JS RSA Library(http://www-cs-students.stanford.edu/~tjw/jsbn/) and decrypt from python, Crypto.PublicKey.
But, when I decrypt cipher text from JS with python, It has dummy text. I don't know why they are.
So, I want clear text which does not have dummy.(ex. test)
Step

Make key pairs in Python.
key = RSA.generate(1024) #(publicKey, privateKey)

Save modulus, exponent in JS and Encrypt ""test""
var rsa = new RSAKey();
rsa.setPublic(modulus, exponent); //modulus and exponent hex string
rsa.encrypt(""test"");

result(hex string): d0ab7e22f92adcca7182e3c622b513382d163033df5ca0f3c0327e8a1774258800ae57dfc98522f5ed40a4bed2f4b54f46ea800ff1ef522b104b0f874a598f6bbcf5453506f8bf2f8aa3b04b0c73f0018564707304b3a059326d51945d3ff0282d63c2c4c1ea6ba5a2172af83ef8bdc1d104a8d67ba95ee97ab89b36cd5c34d4
Decrypt using PrivateKey in Python
key.decrypt(above_result.decode('hex'))

result: \x02\xf0\xae\xafK\xd3\x17\xfc\xf4\xd6\xd9=\xee7\x04\x94\xea\x9c\xd8\xf7--\x19\x05$!'#\xad\x82'\xfcKG\xadK\xb6_\xabMZ:\x9dU\xa4\xc0[\x8c\xa6hC\x93\xf7\xbc\xf1:\x9f\x107D\xe8\xfe\x07R\x8c\xd7\xb3\xe6\xc6\xcf^\x92\xa2\xe2X\xe4\xaf|\x8aS\xfe\xd3\x84)\xc3\x82\xdc\xd1\x7f\xc9\x12\xd0\x94\xd2jS\xee\x83\xfda\xc6\xc7d\xdd\x0b2\xe6\x1d\x84\x0c\x93\x8aK\xc2\x10U\xc0Y~\xbf\x15\xfa\x00test

","I had been using JSEncrypt JavaScript file to achieve conversation between JavaScript and Python using pycrypto however during encryption in JavaScript it uses a random pad in the function pkcs1pad2 which needed to be removed and it started working. It had been a hack but it worked out. Following are the lines are commented out from function pkcs1pad2(s,n) 
 while(n > 2) { // random non-zero pad
    x[0] = 0;
    while(x[0] == 0) rng.nextBytes(x);
    ba[--n] = x[0];
  }

  ba[--n] = 2;
  ba[--n] = 0;

","1829","<javascript><python><rsa><pycrypto><jsbn>","5","0","2","2017-02-11 05:28:27","28800963","2","6","1816580","","2015-03-01 17:33:42","2015-03-01 11:25:04",""
"39467859","Compiled - OsError: Cannot load native module 'Cryptodome.Cipher._raw_ecb'","from pubnub import Pubnub ; 
from tkinter import *

Window = Tk()
pubnub = Pubnub(publish_key=""pub-c-9997b5b1-da6f-4935-88f7-4d0645bcdf2b"", 
    subscribe_key=""sub-c-2bc2a578-776c-11e6-9195-02ee2ddab7fe"")

def Callback(message, channel):
    Logic.UpdateMessageList(message)
    Logic.UpdateMessageDisplay()
    Display.DisplayMessage()

def Error(message):
    Window.title(""PubNub - Error"")

def Connect(message):
    Window.title(""PubNub - Connected"")

def Reconnect(message):
    Window.title(""PubNub - Reconnected"")

def Disconnect(message):
    Window.title(""PubNub - Disconnected"")

def SendMessage(event):
    message = (Logic.Username, Display.MessageEntry.get())
    pubnub.publish(""my_channel"", message =  message)

pubnub.subscribe(channels='my_channel',
                         callback =  Callback,
                         error = Error,
                         connect = Connect,
                         reconnect = Reconnect,
                         disconnect = Disconnect)

class Logic:
    def __init__(self):
        self.Username = """"
        self.MessageList = ([],[])
        self.MessageNumber = 0
        self.MaxMessages = 6

    def UpdateMessageList(self, message):
        self.MessageList[0].append(message[0])
        self.MessageList[1].append(message[1])
        self.MessageNumber += 1

    def UpdateMessageDisplay(self):
        self.DisplayList = []
        if self.MessageNumber >= (self.MaxMessages + 1):
            self.MessageList[0].pop(0)
            self.MessageList[1].pop(0)

        for Num in range(len(self.MessageList[0])):
            for ListNum in range(2):
               self.DisplayList.append((self.MessageList[ListNum][Num]))
               self.DisplayList.append(""\n"")

Logic = Logic()

class MainDisplay:
    def __init__(self):
        Window.geometry(""400x400"")
        Window.resizable(0,0)
        self.MessageVar = StringVar()
        Window.title(""PubNub"")

def ScreenOne(self):
    Window.bind(""<Return>"", self.AdvScreenTwo)

    self.EasyFrame = Frame(Window)
    self.EasyFrame.config(bg = ""Grey"", height = 400, width = 400)
    self.EasyFrame.grid()
    self.EasyFrame.place(relx = 0.5, y = 200, anchor = CENTER)

    self.UsernameEntry = Entry(self.EasyFrame)
    self.UsernameEntry.config(width = 15, bg = ""White"", fg = ""Black"")
    self.UsernameEntry.grid()
    self.UsernameEntry.place(relx = 0.5, y = 200, anchor = CENTER)

    UsernameLabel = Label(self.EasyFrame, text = ""Enter Username"")
    UsernameLabel.config(bg = ""Grey"", bd = 0, font = (""times"",13,""bold""), fg = ""White"")
    UsernameLabel.grid()
    UsernameLabel.place(relx = 0.5, y = 90, anchor = CENTER)

def AdvScreenTwo(self, event):
    Logic.Username = (self.UsernameEntry.get())
    Window.unbind(""<Return>"")
    self.EasyFrame.grid_forget()
    self.EasyFrame.destroy()
    Window.bind(""<Return>"", SendMessage)
    self.ScreenTwo()

def ScreenTwo(self):
    self.MessagesParent = Frame(Window)
    self.MessagesParent.config(bg = ""Grey"", height = 400, width = 400)
    self.MessagesParent.grid()
    self.MessagesParent.place(relx = 0.5, y = 200, anchor = CENTER)

    self.MessageEntry = Entry(self.MessagesParent)
    self.MessageEntry.config(width = 40, bg = ""Grey"", fg = ""Black"")
    self.MessageEntry.grid()
    self.MessageEntry.place(relx = 0.5, y = 350, anchor = CENTER)

def DisplayMessage(self):
    Y = 10
    for Item in (Logic.MessageList[0]):
        self.TextLabel = Label(Window, text = Item, height = 3, width = 6, font = (""times"", 8, ""bold""), anchor = ""w"")
        self.TextLabel.grid()
        self.TextLabel.place(relx = 0.05, y = Y)
        Y += 50
    Y = 10
    for Item in (Logic.MessageList[1]):
        self.TextLabel = Label(Window, text = Item, height = 3, width = 40, font = (""times"", 8, ""bold""),wraplength = 270, anchor = ""w"")
        self.TextLabel.grid()
        self.TextLabel.place(relx = 0.2, y = Y)
        Y += 50

Display = MainDisplay()

def Main():
    Display.ScreenOne()

if __name__ == ""__main__"":
    Main()

Window.mainloop()

This is my code which does work when i run it through the console or IDLE which is fine and all but i would like to compile it. I managed to compile it with my usual method using cx_freeze but i get a error message: 
OsError: Cannot load native module 'Cryptodome.Cipher,_raw_ecb'

Can provide any additional information that may be required.
","Has gotten a fair amount of views so i thought i would post the answer, i emailed pubnub support
Hi Joshua,

Please use this branch from our SDK https://github.com/pubnub/python/tree/reduce_crypto ; it has cryto unbundled from the dependencies.

This fixed it :) (Replace the pubnub file in Pythonx.x with the pubnub.py file on the git)
","1823","<python><compiler-errors><cx-freeze><pycrypto>","3","0","1","2017-04-11 21:01:32","43356133","3","1","1816580","","2016-09-13 18:12:13","2016-09-13 10:32:11",""
"15735874","PyCrypto AES encryption not working as expected","I am creating a Python function to perform counter mode encryption using the PyCrypto module. I am aware of the builtin, but want to implement it myself.
I'm trying  Test Vector #1 from RFC 3686, and have the correct Counter Block and the correct Key in ASCII form. But when I encrypt the Counter Block using the Key, I don't get the expected Key Stream.
The relevant parts of my code:
cipher = AES.new(key)
ctr_block = iv + nonce + ctr
key_stream = base64.b64decode(cipher.encrypt(ctr_block))

I can provide more code if needed, but I'm not sure how because ctr_block and key have many question mark characters when I print them.
Why am I not getting the expected answer? It seems like everything should go right. Perhaps I made some mistake with the encoding of the string.
Edit
Self-contained code:
from Crypto.Cipher import AES
import base64

def hex_to_str(hex_str):
    return str(bytearray([int(n, 16) for n in hex_str.split()]))

key = hex_to_str(""AE 68 52 F8 12 10 67 CC 4B F7 A5 76 55 77 F3 9E"")
iv = hex_to_str(""00 00 00 00 00 00 00 00"")
nonce = hex_to_str(""00 00 00 30"")
ctr = hex_to_str(""00 00 00 01"")

cipher = AES.new(key)
ctr_block = iv + nonce + ctr
key_stream = base64.b64decode(cipher.encrypt(ctr_block))

print """".join([hex(ord(char)) for char in key_stream])
# 0xd90xda0x72

","First, use byte strings:
In [14]: keystring = ""AE 68 52 F8 12 10 67 CC 4B F7 A5 76 55 77 F3 9E""

In [15]: keystring.replace(' ', '').decode('hex')
Out[15]: '\xaehR\xf8\x12\x10g\xccK\xf7\xa5vUw\xf3\x9e'

Second, you shouldn't use base64.
","1818","<python><aes><pycrypto>","0","1","2","2013-04-01 01:17:02","15736391","4","","805556","","2013-04-01 01:00:16","2013-03-31 23:45:37",""
"15735874","PyCrypto AES encryption not working as expected","I am creating a Python function to perform counter mode encryption using the PyCrypto module. I am aware of the builtin, but want to implement it myself.
I'm trying  Test Vector #1 from RFC 3686, and have the correct Counter Block and the correct Key in ASCII form. But when I encrypt the Counter Block using the Key, I don't get the expected Key Stream.
The relevant parts of my code:
cipher = AES.new(key)
ctr_block = iv + nonce + ctr
key_stream = base64.b64decode(cipher.encrypt(ctr_block))

I can provide more code if needed, but I'm not sure how because ctr_block and key have many question mark characters when I print them.
Why am I not getting the expected answer? It seems like everything should go right. Perhaps I made some mistake with the encoding of the string.
Edit
Self-contained code:
from Crypto.Cipher import AES
import base64

def hex_to_str(hex_str):
    return str(bytearray([int(n, 16) for n in hex_str.split()]))

key = hex_to_str(""AE 68 52 F8 12 10 67 CC 4B F7 A5 76 55 77 F3 9E"")
iv = hex_to_str(""00 00 00 00 00 00 00 00"")
nonce = hex_to_str(""00 00 00 30"")
ctr = hex_to_str(""00 00 00 01"")

cipher = AES.new(key)
ctr_block = iv + nonce + ctr
key_stream = base64.b64decode(cipher.encrypt(ctr_block))

print """".join([hex(ord(char)) for char in key_stream])
# 0xd90xda0x72

","First, the correct CTR block order is nonce + iv + ctr. Second, that base64.b64decode call is wrong: cipher.encrypt produces a decoded string. After these two fixes your code prints 0xb70x600x330x280xdb0xc20x930x1b0x410xe0x160xc80x60x7e0x620xdf which seems to be a correct key stream.
","1818","<python><aes><pycrypto>","0","1","2","2013-04-01 01:17:02","15736391","4","","805556","","2013-04-01 01:00:16","2013-03-31 23:45:37",""
"14659518","Python log encryption with a public key using pycrypto","I'm developing a web app (using gevent, but that is not significant) that has to write some confidential information in log. The obvious idea is to encrypt the confidential information using a public key that is hard-coded into my application. To read it, one would need a private key, and 2048-bit RSA seems to be safe enough. I have chosen pycrypto (tried M2Crypto as well, but found nearly no differences for my purpose) and implemented log encryption as a logging.Formatter subclass. However, I'm new to pycrypto and cryptoraphy, and I am not sure my choice of the way my data is encrypted is reasonable. Is PKCS1_OAEP module what I need? Or there are more friendly ways of encryption without dividing the data in small chunks?
So, what I did is:
import logging
import sys

from Crypto.Cipher import PKCS1_OAEP as pkcs1
from Crypto.PublicKey import RSA

PUBLIC_KEY = """"""ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDe2mtK03UhymB+SrIbJJUwCPhWNMl8/gA9d7jex0ciSuFfShDaqJ4wYWG4OOl\
VqKMxPrPcZ/PMSwtc021yI8TXfgewb65H/YQw4JzzGANq2+mFT8jWRDn+xUc6vcWnXIG3OPg5DvIipGQvIPNIUUP3qE7yDHnS5xdVdFrVe2bUUXmZJ9\
0xJpyqlTuRtIgfIfEQC9cggrdr1G50tXdXZjS0M1WXl5P6599oH/ykjpDFrCnh5fz9WDwUc0mNJ+11Qh+yfDp3k7AhzhRaROKLVWnfkklFaFm7LsdVX\
KPjp7dPRcTb84c2OnlIjU0ykL74Fy0K3eaPvM6TLe/K1XuD3933 pupkin@pupkin""""""

PUBLIC_KEY = RSA.importKey(PUBLIC_KEY)

LOG_FORMAT = '[%(asctime)-15s - %(levelname)s: %(message)s]'

# May be more, but there is a limit.
# I suppose, the algorithm requires enough padding,
# and size of padding depends on key length.
MAX_MSG_LEN = 128

# Size of a block encoded with padding. For a 2048-bit key seems to be OK.
ENCODED_CHUNK_LEN = 256


def encode_msg(msg):
    res = []
    k = pkcs1.new(PUBLIC_KEY)
    for i in xrange(0, len(msg), MAX_MSG_LEN):
        v = k.encrypt(msg[i : i+MAX_MSG_LEN])
        # There are nicer ways to make a readable line from data than using hex. However, using
        # hex representation requires no extra code, so let it be hex.
        res.append(v.encode('hex'))
        assert len(v) == ENCODED_CHUNK_LEN
    return ''.join(res)


def decode_msg(msg, private_key):
    msg = msg.decode('hex')
    res = []
    k = pkcs1.new(private_key)
    for i in xrange(0, len(msg), ENCODED_CHUNK_LEN):
        res.append(k.decrypt(msg[i : i+ENCODED_CHUNK_LEN]))
    return ''.join(res)


class CryptoFormatter(logging.Formatter):
    NOT_SECRET = ('CRITICAL',)
    def format(self, record):
        """"""
        If needed, I may encode only certain types of messages.
        """"""
        try:
            msg = logging.Formatter.format(self, record)
            if not record.levelname in self.NOT_SECRET:
                msg = encode_msg(logging.Formatter.format(self, record))
            return msg
        except:
            import traceback
            return traceback.format_exc()


def decrypt_file(key_fname, data_fname):
    """"""
    The function decrypts logs and never runs on server. In fact,
    server does not have a private key at all. The only key owner
    is server admin.
    """"""
    res = ''
    with open(key_fname, 'r') as kf:
        pkey = RSA.importKey(kf.read())
    with open(data_fname, 'r') as f:
        for l in f:
            l = l.strip()
            if l:
                try:
                    res += decode_msg(l, pkey) + '\n'
                except Exception: # A line may be unencrypted
                    res += l + '\n'
    return res

# Unfortunately dictConfig() does not support altering formatter class.
# Anyway, in demo code I am not going to use dictConfig().


logger = logging.getLogger()
handler = logging.StreamHandler(sys.stderr)
handler.setFormatter(CryptoFormatter(LOG_FORMAT))
logger.handlers = []
logger.addHandler(handler)

logging.warning(""This is secret"")
logging.critical(""This is not secret"")

UPDATE: Thanks to the accepted answer below, now I see:

My solution seems to be pretty valid for now (very few log entries, no performance considerations, more or less trusted storage). Concerning security, the best thing I can do right now is not forgetting to prohibit the user who runs my daemon from writing to the .py and .pyc files of the program. :-) However, if the user is compromised, he still may try to attach a debugger to my daemon process, so I should also disable login for him. Pretty obvious moments, but very important ones.
Surely there are solutions being much more scalable. A very common technique is to encrypt AES keys with slow but reliable RSA, and to encrypt data with the AES that is pretty fast. Data encryption in the case is symmetric, but retrieving the AES key requires either breaking RSA, or getting it from memory when my program is running. Stream encryption with higher-level libraries and binary log file format also are a way to go, though binary log format encrypted as a stream should be very vulnerable to log corruption, even a sudden reboot due to electricity blackout may be a problem unless I do some things at a lower level (at least log rotation on each daemon start).
I changed .encode('hex') to .encode('base64').replace('\n').replace('\r'). Fortunately, the base64 codec works fine with no line ends. It saves some space.
Using an untrusted storage may require signing records, but that seems to be another story.
Checking if the string is encrypted based on catching exceptions is ok, since, unless the log is tampered with by a malicious user, it's base64 codec who raises an exception, not RSA decryption.

","You seem to encrypt data directly with RSA. This is relatively slow, and has the problem that you can only encrypt small parts of data. Distinguishing encrypted from plaintext data based on ""decryption doesn't work"" is also not a very clean solution, although it will probably work. You do use OAEP, which is good. You may want to use base64 instead of hex to save space.
However, crypto is easy to get wrong. For this reason, you should always use high-level crypto libraries wherever possible. Anything where you have to specify padding schemes yourself isn't ""high-level"". I am not sure if you will be able to create an efficient, line-based log encryption system without resorting to rather low-level libraries, though.
If you have no reason to encrypt only individual parts of the log, consider just encrypting the entire thing.
If you are really desperate for a line-based encryption, what you could do is the following: Create a random symmetric AES key from a secure randomness source, and give it a short but unique ID. Encrypt this key with RSA, and write the result to the log file in a line prefixed with a tag, e.g. ""KEY"", together with the ID. For each log line, generate a random IV, encrypt the message with AES256 in CBC mode using said IV (you don't have any length limits per line now!) and write the key ID, IV and the encrypted message to the log, prefixed with a tag, e.g. ""ENC"". After a certain time, destroy the symmetric key and repeat (generate new one, write to log). The disadvantage of this approach is that an attacker who can recover the symmetric key from memory can read the messages encrypted with said key. The advantage is that you can use higher-level building blocks and it is much, much faster (on my CPU, you can encrypt 70,000 log lines of 1 KB per second with AES-128, but only around 3,500 chunks of max. 256 bytes with RSA2048). RSA decryption is REALLY slow, by the way (around 100 chunks per second).
Note that you have no authentication, i.e. you won't notice modifications to your logs. For this reason, I assume you trust the log storage. Otherwise, see RFC 5848.
","1799","<python><logging><pycrypto>","3","2","1","2013-02-03 06:20:29","14659756","0","","1818868","","2013-02-03 06:20:29","2013-02-02 06:56:58",""
"12221484","How come I can't decrypted my AES encrypted message on someone elses AES decryptor?","from Crypto.Cipher import AES
import os

key = 'mysecretpassword'
iv = os.urandom(16)
plaintext1 = 'Secret Message A'
encobj = AES.new(key, AES.MODE_CBC, iv)
ciphertext1 = encobj.encrypt(plaintext1) 
encryptedText = ciphertext1.encode('base64')
print encryptedText
decobj = AES.new(key, AES.MODE_CBC, iv)
print decobj.decrypt(ciphertext1)

I copied the printed value of encryptedText and the key from my code and pasted to the websites below.
http://www.everpassword.com/aes-encryptor
http://www.nakov.com/blog/2011/12/26/online-aes-encryptor-decryptor-javascript/
I would expected it to be able to decrypt my cipher, but it doesn't. Thus I must be using pycrypto wrong. How do I fix this? The two sites can both encrypt and decrypt between each other, but mines can't. Both the websites do indeed use CBC mode.
","If you look at the page source for the website in question, you will see that it uses gibberish-aes javascript library. To see whet you have to do to make it work, you have to study what it does.
Looking through its source code, it seems to use a random salt for encryption. That, prepended by the string Salted__ forms the beginning of the cyphertext before it is base64 encoded.
randArr = function(num) {
    var result = [], i;
    for (i = 0; i < num; i++) {
        result = result.concat(Math.floor(Math.random() * 256));
    }
    return result;
},

and
enc = function(string, pass, binary) {
        // string, password in plaintext
        var salt = randArr(8),
        pbe = openSSLKey(s2a(pass, binary), salt),
        key = pbe.key,
        iv = pbe.iv,
        cipherBlocks,
        saltBlock = [[83, 97, 108, 116, 101, 100, 95, 95].concat(salt)];
        string = s2a(string, binary);
        cipherBlocks = rawEncrypt(string, key, iv);
        // Spells out 'Salted__'
        cipherBlocks = saltBlock.concat(cipherBlocks);
        return Base64.encode(cipherBlocks);
    },

For decryption, it uses picks the random portion of the salt out of the beginning of the cyphertext after base64 decoding (the first slice operator):
dec = function(string, pass, binary) {
    // string, password in plaintext
    var cryptArr = Base64.decode(string),
    salt = cryptArr.slice(8, 16),
    pbe = openSSLKey(s2a(pass, binary), salt),
    key = pbe.key,
    iv = pbe.iv;
    cryptArr = cryptArr.slice(16, cryptArr.length);
    // Take off the Salted__ffeeddcc
    string = rawDecrypt(cryptArr, key, iv, binary);
    return string;
},

The missing piece now is the openSSLkey function:
openSSLKey = function(passwordArr, saltArr) {
    // Number of rounds depends on the size of the AES in use
    // 3 rounds for 256
    // 2 rounds for the key, 1 for the IV
    // 2 rounds for 128
    // 1 round for the key, 1 round for the IV
    // 3 rounds for 192 since it's not evenly divided by 128 bits
    var rounds = Nr >= 12 ? 3: 2,
    key = [],
    iv = [],
    md5_hash = [],
    result = [],
    data00 = passwordArr.concat(saltArr),
    i;
    md5_hash[0] = GibberishAES.Hash.MD5(data00);
    result = md5_hash[0];
    for (i = 1; i < rounds; i++) {
        md5_hash[i] = GibberishAES.Hash.MD5(md5_hash[i - 1].concat(data00));
        result = result.concat(md5_hash[i]);
    }
    key = result.slice(0, 4 * Nk);
    iv = result.slice(4 * Nk, 4 * Nk + 16);
    return {
        key: key,
        iv: iv
    };
},

So basically you have to translate the openSSLKey function to Python and feed it your password and salt. That creates a (key, iv) tuple. Use those to encrypt your data. Prepend the string Salted__ and the salt to the ciphertext before encoding it with base64. Then it should work, I think.
","1789","<python><aes><pycrypto>","0","3","1","2012-08-31 20:13:57","12221931","5","","299648","","2012-08-31 19:51:24","2012-08-31 19:32:39",""
"48537668","Error 'UnicodeDecodeError: 'utf-8' codec can't decode byte 0xbf in position 1: invalid start byte' decoding bytes after decrypting with pycryptodome","My problem is that when I use pycryptodome for decrypting a string in Python 3.6 with the following code:
from Crypto.Cipher import AES
from Crypto import Random

key = ""133BBB3212332231""
key_bytestring = key.encode(""utf-8"")
iv = Random.new().read(AES.block_size)
cipher = AES.new(key_bytestring, AES.MODE_CFB, iv)
encrypted_string = 'ý\x82iq\x193\x1aÙË\x04Û£¥\x8dbBOW}Vû\x01\x86zÕ¼Ó)áôO\x14'
encrypted_bytes = encrypted_string.encode(""utf-8"")
decrypted_bytes = cipher.decrypt(encrypted_bytes)
decrypted_string = decrypted_bytes.decode(""utf-8"")
print(decrypted_string )

Python throws this error:
UnicodeDecodeError: 'utf-8' codec can't decode byte 0xbf in position 1: invalid start byte
In this line:
decrypted_string = decrypted_bytes.decode(""utf-8"")

I'm updating some code from Python 2.7, and pycrypto has changed to pycryptdodome. In python 2.7 this works like a charm with pycrypto(I've invented the key so the string is not decrypted well but Python don't throw any error):
from Crypto.Cipher import AES
from Crypto import Random

key = ""133BBB3212332231""
iv = Random.new().read(AES.block_size)
cipher = AES.new(key, AES.MODE_CFB, iv)
encrypted_string = 'ý\x82iq\x193\x1aÙË\x04Û£¥\x8dbBOW}Vû\x01\x86zÕ¼Ó)áôO\x14'
decrypted_string = cipher.decrypt(encrypted_string)
print(decrypted_string)

How can I fix this? I'm quite desperate, since I've been trying it for a long time and I did't come to anything. Thank you in advance!
","First you should know how Python 3 treats strings differently than in Python 2.
In Python 2, """" is a byte array, but in Python 3 it's a unicode string. Both cipher.encrypt and cipher.decrypt expect byte arrays.
So even though in both pieces of code, the type of your parameter is fine. Your problem in Python 3 is with calling str.encode. It's pretty easy to see that it indeed caused a change by looking at the string length:
>>> len(encrypted_string)
10
>>> len(encrypted_string.encode('utf-8'))
14

The solution:
First of all notice that in Python 2:
>>> ""¨vóîÄdX|@9"" == '\xc2\xa8v\xc3\xb3\xc3\xae\xc3\x84dX|@9'
True

In Python 3, you need to mark your string with the binary prefix (b""""), your new definition should use: encrypted_bytes = b'\xc2\xa8v\xc3\xb3\xc3\xae\xc3\x84dX|@9'
Thus your solution should be:
from Crypto.Cipher import AES
from Crypto import Random

key = ""18945BKJVO9W834G""
iv = Random.new().read(AES.block_size)
cipher = AES.new(key, AES.MODE_CFB, iv)
encrypted_bytes = b'\xc2\xa8v\xc3\xb3\xc3\xae\xc3\x84dX|@9'
decrypted_bytes = cipher.decrypt(encrypted_bytes)
print(decrypted_bytes)

","1786","<python><encryption><decoding><pycrypto><pycryptodome>","-2","1","2","2018-01-31 09:13:23","","4","","6340420","","2018-01-31 09:13:23","2018-01-31 08:30:18",""
"48537668","Error 'UnicodeDecodeError: 'utf-8' codec can't decode byte 0xbf in position 1: invalid start byte' decoding bytes after decrypting with pycryptodome","My problem is that when I use pycryptodome for decrypting a string in Python 3.6 with the following code:
from Crypto.Cipher import AES
from Crypto import Random

key = ""133BBB3212332231""
key_bytestring = key.encode(""utf-8"")
iv = Random.new().read(AES.block_size)
cipher = AES.new(key_bytestring, AES.MODE_CFB, iv)
encrypted_string = 'ý\x82iq\x193\x1aÙË\x04Û£¥\x8dbBOW}Vû\x01\x86zÕ¼Ó)áôO\x14'
encrypted_bytes = encrypted_string.encode(""utf-8"")
decrypted_bytes = cipher.decrypt(encrypted_bytes)
decrypted_string = decrypted_bytes.decode(""utf-8"")
print(decrypted_string )

Python throws this error:
UnicodeDecodeError: 'utf-8' codec can't decode byte 0xbf in position 1: invalid start byte
In this line:
decrypted_string = decrypted_bytes.decode(""utf-8"")

I'm updating some code from Python 2.7, and pycrypto has changed to pycryptdodome. In python 2.7 this works like a charm with pycrypto(I've invented the key so the string is not decrypted well but Python don't throw any error):
from Crypto.Cipher import AES
from Crypto import Random

key = ""133BBB3212332231""
iv = Random.new().read(AES.block_size)
cipher = AES.new(key, AES.MODE_CFB, iv)
encrypted_string = 'ý\x82iq\x193\x1aÙË\x04Û£¥\x8dbBOW}Vû\x01\x86zÕ¼Ó)áôO\x14'
decrypted_string = cipher.decrypt(encrypted_string)
print(decrypted_string)

How can I fix this? I'm quite desperate, since I've been trying it for a long time and I did't come to anything. Thank you in advance!
","like this :
from Crypto.Cipher import AES
from Crypto import Random

key = ""18945BKJVO9W834G""
key_bytestring = key
iv = Random.new().read(AES.block_size)
cipher = AES.new(key_bytestring, AES.MODE_CFB, iv)
encrypted_string = ""¨vóîÄdX|@9""
encrypted_bytes = encrypted_string 
decrypted_bytes = cipher.decrypt(encrypted_bytes)
decrypted_string = decrypted_bytes
print(repr(decrypted_string))

Short description : Byte and String got same pattern, does not require any correction. Consider how the system is perceived if you do any encoding operation.Cryptographic logic is a byte-based function, which is not very important to which encoding system you are using.  If the input/output or output/input is important to you why do you change the encoding setting of the characters?
Computers cannot read and write! 
","1786","<python><encryption><decoding><pycrypto><pycryptodome>","-2","0","2","2018-01-31 09:13:23","","4","","6340420","","2018-01-31 09:13:23","2018-01-31 08:30:18",""
"10098170","PyCrypto: Encode chinese charaters with RSA asymmetric key","I am trying to use PyCrypto to encrypt/decrypt some strings, and I am having troubles with Chinese characters.
When I try to encrypt ""ni-hao"" (hello)...
pemFile = open(""/home/borrajax/keys/myKey.pem"", ""r"")
encryptor = RSA.importKey(pemFile, passphrase=""f00"")
return encryptor.encrypt(""你好"", 0)[0]

... I keep getting errors:
Module Crypto.PublicKey.pubkey:64 in encrypt         
>>  ciphertext=self._encrypt(plaintext, K)
Module Crypto.PublicKey.RSA:92 in _encrypt         
>>  return (self.key._encrypt(c),)
ValueError: Plaintext too large

I have tried many combinations,
encryptor.encrypt(u""你好""...
encryptor.encrypt(u""你好"".encode(""utf-8"")...

without any luck.
I guess I could always try to use base64 before encoding, but I'd like to leave that as a ""last resource""... I was hoping for a more ""elegant"" way of doing this.
Has anyone encountered the same problems? Any hint will be appreciated. Thank you in advance.
","I tested with PyCrypto v2.5 installed from pip on Ubuntu Linux 10.04 on python 2.6.5 in the interactive interpreter from the yakuake terminal.
I'm not able to reproduce the error you're seeing, especially the ""Plaintext too large"" bit.  Some errors I have seen:
encryptor.encrypt(u""你好"",0)[0]

TypeError: argument 1 must be long, not unicode

Seems like it doesn't like unicode objects - only wants str.  
Both of these work on my setup, and both produce the same output, however the first solution is more correct:
encryptor.encrypt(u""你好"".encode(""utf-8""), 0)[0]
encryptor.encrypt(""你好"", 0)[0]

Are you trying this from the interactive interpreter, or from a file?  If file, is the file UTF-8 encoded?  If console, does it have proper UTF-8 support?
","1781","<python><encryption><unicode><rsa><pycrypto>","2","1","3","2012-04-11 06:27:40","10100957","0","","","","","2012-04-11 00:04:16",""
"10098170","PyCrypto: Encode chinese charaters with RSA asymmetric key","I am trying to use PyCrypto to encrypt/decrypt some strings, and I am having troubles with Chinese characters.
When I try to encrypt ""ni-hao"" (hello)...
pemFile = open(""/home/borrajax/keys/myKey.pem"", ""r"")
encryptor = RSA.importKey(pemFile, passphrase=""f00"")
return encryptor.encrypt(""你好"", 0)[0]

... I keep getting errors:
Module Crypto.PublicKey.pubkey:64 in encrypt         
>>  ciphertext=self._encrypt(plaintext, K)
Module Crypto.PublicKey.RSA:92 in _encrypt         
>>  return (self.key._encrypt(c),)
ValueError: Plaintext too large

I have tried many combinations,
encryptor.encrypt(u""你好""...
encryptor.encrypt(u""你好"".encode(""utf-8"")...

without any luck.
I guess I could always try to use base64 before encoding, but I'd like to leave that as a ""last resource""... I was hoping for a more ""elegant"" way of doing this.
Has anyone encountered the same problems? Any hint will be appreciated. Thank you in advance.
","I checked related codes of PyCrypto, this error is only thrown when plain-text (after converted to long) is bigger than one of the key parameter. Assuming encoding of the script is correctly set, it may be because your RSA key is invalid or too short. I tried this snippet, it works with no problem:
rsa = RSA.generate(1024)

print(rsa.encrypt(""你好"", 0))

","1781","<python><encryption><unicode><rsa><pycrypto>","2","1","3","2012-04-11 06:27:40","10100957","0","","","","","2012-04-11 00:04:16",""
"10098170","PyCrypto: Encode chinese charaters with RSA asymmetric key","I am trying to use PyCrypto to encrypt/decrypt some strings, and I am having troubles with Chinese characters.
When I try to encrypt ""ni-hao"" (hello)...
pemFile = open(""/home/borrajax/keys/myKey.pem"", ""r"")
encryptor = RSA.importKey(pemFile, passphrase=""f00"")
return encryptor.encrypt(""你好"", 0)[0]

... I keep getting errors:
Module Crypto.PublicKey.pubkey:64 in encrypt         
>>  ciphertext=self._encrypt(plaintext, K)
Module Crypto.PublicKey.RSA:92 in _encrypt         
>>  return (self.key._encrypt(c),)
ValueError: Plaintext too large

I have tried many combinations,
encryptor.encrypt(u""你好""...
encryptor.encrypt(u""你好"".encode(""utf-8"")...

without any luck.
I guess I could always try to use base64 before encoding, but I'd like to leave that as a ""last resource""... I was hoping for a more ""elegant"" way of doing this.
Has anyone encountered the same problems? Any hint will be appreciated. Thank you in advance.
","First, you should be encrypting only binary data, not Unicode text. That means str type (in Python 2.x) or bytes (in Python 3.x and most recent Python 2.x). You must encode text before encrypting it, and you must decode it after you decrypt.
Second, the byte string you are encrypting must be smaller than the RSA modulus (e.g. less than 256 bytes for RSA2048). If your data is longer, think of using an intermediate AES session key.
Third, if you use PyCrypto 2.5, there is no good reason for using the .encrypt/.decrypt methods of the RSA key object. It is better and more secure to use one of the PKCS#1 methods: OAEP or v1.5. With them, the plaintext must be even shorter.
","1781","<python><encryption><unicode><rsa><pycrypto>","2","2","3","2012-04-11 06:27:40","10100957","0","","","","","2012-04-11 00:04:16",""
"47917518","Python Cryptography Error ImportError: cannot import name certificate_transparency","In cryptography which was included using pip install PyCrpto giving an error after including it in a flask application where we are running it using virtual environment have named it venv and have this dependency correctly installed in venv > lib > python2.7 > site-packages. 
Below is the exact error which I am getting here.

from cryptography.x509 import certificate_transparency
   ImportError: cannot import name certificate_transparency


But as can be seen in screenshot file cryptography.x509.certificate_transparency.py is there in file structure and even on trying python -c ""from cryptography.x509 import certificate_transparency"" doesn't show any warnings but here it shows error which is also marked in red. 
What can be possibly wrong here ? 
","I came across this problem when I was building an updated Python Crypto module for shipping with Solaris (see https://www.jmcpdotcom.com/blog/2018-02-21-im-embarrassed-to-admit-it/).
The root cause in your case appears to be that you haven't installed it in the right place. While you claim above that it's ""correctly installed"" in venv > lib > python2.7 > site-packages the screenshot shows that it is in fact in venv/lib/cryptography. If you move the cryptography dir down a level I would expect that your import would work.
","1778","<virtualenv><pycrypto>","2","0","1","2018-03-28 23:32:46","","2","","3540635","","2017-12-21 05:13:16","2017-12-21 03:29:56",""
"45159421","pycharm project to exe conversion","I was using Pycharm for the development of my python  project which involved libraries like win32api and Pycrypto, what is the best way to create an exe out of pycharm, using abnaconda interpreter?
please note that Cx_Freeze is not available while using the anaconda interpreter. 
","Try PyInstaller. 
It worked very well if your project size is not huge. I have used many times. No problem with win32api. 
","1769","<python><pycharm><exe><cx-freeze><pycrypto>","0","1","1","2017-07-18 06:50:50","","1","","","","","2017-07-18 06:45:34",""
"19464004","PyCrypto Decrypting Cipher text does no yield plaintext","I was playing around PyCrypto's AES and DES implementation. Every time, I decrypted a cipher text, that I encrypted from a plain text, It gives out random strings.
I have tried the following:
from Crypto.Cipher import AES,DES
from Crypto import Random

iv_AES = Random.new().read(AES.block_size)
iv_DES = Random.get_random_bytes(8)

key_AES = 'abcdefghijklmnop'
key_DES = 'abcdefgh'

aes = AES.new(key_AES,AES.MODE_CFB,iv_AES)
aes1 = AES.new(key_AES,AES.MODE_CFB,iv_AES)
des = DES.new(key_DES,DES.MODE_CFB,iv_DES)
des1 = DES.new(key_DES,DES.MODE_CFB,iv_DES)

plaintext = 'Hello! World'

print plaintext == aes.decrypt(aes.encrypt(plaintext))
print plaintext == des.decrypt(des.encrypt(plaintext))
print plaintext == aes1.decrypt(aes.encrypt(plaintext))
print plaintext == des1.decrypt(des.encrypt(plaintext))

Result: 
False
False
True
True

I don't understand why this is happening. 
Can you please explain what is actually happening here, and why is it so?
","From the PyCrypto documentation:

That also means that you cannot reuse an object for encrypting or decrypting other data with the same key.

The issue is that you will have to reinitialize your cipher, or - probably better - to construct separate object instances for encryption and decryption.
from Crypto.Cipher import AES,DES
from Crypto import Random

iv_AES = Random.new().read(AES.block_size)
iv_DES = Random.get_random_bytes(8)

key_AES = 'abcdefghijklmnop'
key_DES = 'abcdefgh'

aese = AES.new(key_AES,AES.MODE_CFB,iv_AES)
aesd = AES.new(key_AES,AES.MODE_CFB,iv_AES)
dese = DES.new(key_DES,DES.MODE_CFB,iv_DES)
desd = DES.new(key_DES,DES.MODE_CFB,iv_DES)

plaintext = 'Hello! World'

print plaintext == aesd.decrypt(aese.encrypt(plaintext))
print plaintext == desd.decrypt(dese.encrypt(plaintext))

","1751","<python-2.7><aes><des><pycrypto>","0","1","1","2013-10-21 07:52:25","19480030","0","","1958893","","2013-10-19 08:36:18","2013-10-19 08:22:10",""
"19396926","passlib.hash import sha256_crypt gives error when compiled with py2exe","I have a code written in Python where I am hashing the password using passlib.hash, sha256_crypt and then later verifying the password using the same library .
I am able to run the code using the console i.e. using .py.
My problem occurs when I compile this program using py2exe:
ImportError: No module named passlib.hash

I am importing the module using following command :
from passlib.hash import sha256_crypt

and sometimes I see a warning saying no module namedsha256_crypt in the GUI but the program still runs correctly.
I am using Windows 7 and could not find any solution to this problem. I have checked my python home directory it seems on installing passlib-1.6.1 , passlib-1.6.1-py2.7.egg file is created under C:\Python2.7.5\Lib\site-packages, however there are no files named passlib/hash or sha_256.
","In order to load only the hashers which have been explicitly requested, Passlib plays a dynamic import trick: passlib.hash is actually a special object which only imports each hasher class when requested ... the real hasher classes are actually stored in modules over in passlib's internal package passlib.handlers (in particular, passlib.hash:sha256_crypt is actually stored under passlib.handlers.sha2_crypt:sha256_crypt). 
Py2exe on the other hand try to be smart, and tries to walk your application's import tree, and only bundle the modules which are actually loaded. I find it frequently (and understandably) fouls up whenever it runs into a python package pulling dynamic import tricks (like the above). This ends up with the py2exe-packaged apps giving strange and hard to track down import errors. 
I'm not positive this will fix your problem, but the easiest solution I know of is to tell py2exe to include the entire passlib package, and not bother trying to ""guess"" which parts should be included. This can be done by adding ""passlib"" to py2exe's packages option...
setup(
    # ... other stuff ...
    options={
            ""py2exe"":{
                    # ... other stuff ...
                    ""packages"": [""passlib""],
            }
    }
)

","1748","<python><encryption><hash><sha256><pycrypto>","2","2","2","2015-06-23 21:51:31","","0","","589259","","2013-10-20 21:54:58","2013-10-16 06:51:26",""
"19396926","passlib.hash import sha256_crypt gives error when compiled with py2exe","I have a code written in Python where I am hashing the password using passlib.hash, sha256_crypt and then later verifying the password using the same library .
I am able to run the code using the console i.e. using .py.
My problem occurs when I compile this program using py2exe:
ImportError: No module named passlib.hash

I am importing the module using following command :
from passlib.hash import sha256_crypt

and sometimes I see a warning saying no module namedsha256_crypt in the GUI but the program still runs correctly.
I am using Windows 7 and could not find any solution to this problem. I have checked my python home directory it seems on installing passlib-1.6.1 , passlib-1.6.1-py2.7.egg file is created under C:\Python2.7.5\Lib\site-packages, however there are no files named passlib/hash or sha_256.
","Eli Collins is actually right and pointed me in the right direction.
You can solve your problem by typing the import more specifically.
I solved my sha512 problem by changing the import to be looking like this
from passlib.handlers.sha2_crypt import sha512_crypt

My py2exe distribution now works very well.
I know it's a little late for you, but it still might help someone, like it helped me. Kudos for having filed the question and also kudos to Eli!
","1748","<python><encryption><hash><sha256><pycrypto>","2","2","2","2015-06-23 21:51:31","","0","","589259","","2013-10-20 21:54:58","2013-10-16 06:51:26",""
"27334093","Decrypt MCRYPT_RIJNDAEL_256 with 32-byte initialization vectors with PyCrypto","I have data that was encrypted in PHP as follows:
mcrypt_encrypt(MCRYPT_RIJNDAEL_256, SECRET, $data, MCRYPT_MODE_CBC, $iv)

I need to decrypt this data in a Python 3 application. I am trying to use PyCrypto but I am open to other libraries. I expect the following to work:
decryptor = AES.new(key, mode, IV=IV)
plain = decryptor.decrypt(ciphertext)

My initialization vector is 32 bytes, and the following exception is thrown:
ValueError: IV must be 16 bytes long

How can I set PyCrypto to use a 32 byte initialization vector and 32 byte block size?
Alternatively, is there a different library that I can use to decrypt the data?
","Thanks to the comments I implemented a suitable solution. I modified rijndael.py in the linked duplicate question to accept bytes rather than strings. I then use it as follows to decrypt 32-byte blocks with the 32-byte initialization vectors.
from rijndael import rijndael

iv = b'myInitializationVectorfoobarfoob'
key = b'myKeyfoobarfoobarfoobarfoobarfoo'
text = b'myCipherTextFoobarfoobarfoobarfo'

r = rijndael(key, block_size=32)
plaintext = r.decrypt(text)
l = ''.join([chr(a ^ b) for a, b in zip(plaintext.encode('latin-1'), iv)])
print(l)

Note that using this rather than PyCrypto is only necessary because libmcrypt incorrectly sets the data block sizes, and thus the initialization vector sizes, to be equal to the key sizes. As far as I understand, data block sizes should always be 128 bits for AES-Rijndael.
","1738","<python-3.x><aes><pycrypto><rijndael><cbc-mode>","3","0","1","2014-12-07 03:15:27","","4","","","","","2014-12-06 16:59:12",""
"39434243","how to decrypt a message using exported RSA public key with PyCrypto?","I faced this challenge where I asked to decrypt an encrypted message using the exported public key. I am given with 3 files: 

The encryption python script
The encrypted message 
The exported public key

I tried to import the public key and then decrypt but I think I have to figure out the private key in order to decrypt the message.
The encryption code is:
import gmpy
from Crypto.Util.number import *
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_v1_5

message = open('message', 'r').read() * 30

def ext_rsa_encrypt(p, q, e, msg):
    m = bytes_to_long(msg)
    while True:
        n = p * q
        try:
            phi = (p - 1)*(q - 1)
            d = gmpy.invert(e, phi)
            pubkey = RSA.construct((long(n), long(e)))
            key = PKCS1_v1_5.new(pubkey)
            enc = key.encrypt(msg).encode('base64')
            return enc
        except:
            p = gmpy.next_prime(p**2 + q**2)
            q = gmpy.next_prime(2*p*q)
            e = gmpy.next_prime(e**2)

p = getPrime(128)
q = getPrime(128)
n = p*q
e = getPrime(64)
pubkey = RSA.construct((long(n), long(e)))
f = open('pubkey.pem', 'w')
f.write(pubkey.exportKey())
g = open('msg.enc', 'w')
g.write(ext_rsa_encrypt(p, q, e, message))

","As pointed out in the comments 256 keys are quite small and can be factorized easily. First you have to reconstruct the prime numbers used in key generation. Finding the modulus and exponent is an easy one liner with openssl:
$ openssl rsa -in <your-public-key> -pubin -text -modulus

This should output something like
Exponent: <decimal-value> (<hex-value>)
Modulus=<hex-value>

Now you can factorize the modulus with msieve or search for it within the https://factordb.com/ database. This will give you your ""p"" and ""q"".
Since the encryption code is not quite RSA you have to write your own decrypt function, which should look like this: 
def ext_rsa_decrypt(p, q, e, msg):
    m = bytes_to_long(msg)
    while True:
        n = p * q
        try:
            phi = (p - 1)*(q - 1)
            d = gmpy.invert(e, phi)
            privkey = RSA.construct((long(n), long(e), long(d)))
            key = PKCS1_v1_5.new(privkey)
            enc = key.decrypt(msg, ""a"")
            return enc
        except Exception, ex:
            traceback.print_exc()
            p = gmpy.next_prime(p**2 + q**2)
            q = gmpy.next_prime(2*p*q)
            e = gmpy.next_prime(e**2)

Now you should have everything you need to decrypt the message, just don't forget to base64 decode the encrypted message before passing it to the decrypt function.
","1715","<python><rsa><pycrypto>","0","0","1","2016-11-15 08:23:36","","5","1","","","","2016-09-11 08:29:59",""
"36802212","Python : Pycrypto RSA public key encryption error","So I've just started experimenting with Pycrypto and wanted to encrypt and decrypt a message, but this code I put together produced some errors.
Here they are:
enc_data = public_key.encrypt 


TypeError: unsupported operand type(s) for pow(): 'str', 'int','int'

ciphertext = cipher.encrypt('Bob')


Traceback (most recent call last):    
line 22, in
    ciphertext = cipher.encrypt('Bob') 
File
  ""C:\Anaconda3\lib\site-packages\Crypto\Cipher\PKCS1_OAEP.py"", line 50,
  in encrypt
  db = lHash + ps + bchr(0x01) + message 
TypeError: can't concat bytes to str

The code:
import Crypto
from Crypto.Hash import SHA256
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
from Crypto import Random

random_generator = Random.new().read
key = RSA.generate(1024, random_generator)

public_key = key.publickey()

enc_data = public_key.encrypt('Bob', 32)

cipher = PKCS1_OAEP.new(key)
ciphertext = cipher.encrypt('Bob')

The two commands which are meant to encrypt 'Bob' produce these errors, and yes I now that the first way isn't very secure.
","In Python 3 there is a difference between strings and bytes. PyCrypto works on bytes, so you need to give it bytes, but ""Bob"" is a string. You can convert a string a to bytes with a.encode(), which uses a default encoding. If you have another encoding in mind, then you need to specify it. 
You can also mark a literal string as bytes by prefixing it with a b. Example: b""Bob"".
","1713","<python-3.x><rsa><public-key-encryption><pycrypto>","0","1","1","2016-04-22 20:20:13","36802674","1","","1816580","","2016-04-22 20:16:24","2016-04-22 19:49:17",""
"10083291","Encrypting data in Python -","I'm writing a client - server model ( client is a script on a server that gathers data and sends it via REST to the server ) and want to encrypt the data that is sent. 
At the moment I have a function that generates the a random key, which adds time from a specific timezone - IP-HOSTNAME-YEAR-MONTH-DAY-HOUR-(MINUTE/2) 
Each part of the key is ran from 3,000 - 10,000 times trough a SHA256 and finally the 128 bit key is generated. Script all in all takes ~0.8 - 1 second to complete.
Data is encrypted via AES , using parts of the 128 bit key for the key and iv. 
The server script, listens for any connections, verifies if the IP address is listed and then proceeds to decrypt the data (using the same method to generate the key and iv )
My question is:
- Am I reinventing the wheel ? 
- Is there a better practice to generate a dynamic, time limited key for data encryption ?
My goal was to have a key that is limited to 60-120 seconds and then discard it, use multiple cycles to generate the keys (thanks to reading the python way for Truecrypt ), so if any data is caught it wouldn't be decrypted ""easily"" . 
Also, the server model will have a SSL cert that it will use to encrypt the encrypted. 
I was thinking of giving a static key for each client script (RSA generated), that would be used to for AES encryption. 
Thank you on your honest answers and any new ideas to improve this. 
","Yes, and don't! Cryptographic technologies take years to develop and test for a reason, they're extremely hard to get right. It sounds like you might want to look at using RSA or some other PKI infrastructure. If I were you I would look into PyCrypto https://www.dlitz.net/software/pycrypto/. Either way, don't implement your own cartographic system it will be broken and insecure!
","1702","<python><encryption><pycrypto>","1","3","2","2012-04-10 07:16:28","10084619","1","2","","","","2012-04-10 05:00:05",""
"10083291","Encrypting data in Python -","I'm writing a client - server model ( client is a script on a server that gathers data and sends it via REST to the server ) and want to encrypt the data that is sent. 
At the moment I have a function that generates the a random key, which adds time from a specific timezone - IP-HOSTNAME-YEAR-MONTH-DAY-HOUR-(MINUTE/2) 
Each part of the key is ran from 3,000 - 10,000 times trough a SHA256 and finally the 128 bit key is generated. Script all in all takes ~0.8 - 1 second to complete.
Data is encrypted via AES , using parts of the 128 bit key for the key and iv. 
The server script, listens for any connections, verifies if the IP address is listed and then proceeds to decrypt the data (using the same method to generate the key and iv )
My question is:
- Am I reinventing the wheel ? 
- Is there a better practice to generate a dynamic, time limited key for data encryption ?
My goal was to have a key that is limited to 60-120 seconds and then discard it, use multiple cycles to generate the keys (thanks to reading the python way for Truecrypt ), so if any data is caught it wouldn't be decrypted ""easily"" . 
Also, the server model will have a SSL cert that it will use to encrypt the encrypted. 
I was thinking of giving a static key for each client script (RSA generated), that would be used to for AES encryption. 
Thank you on your honest answers and any new ideas to improve this. 
","Using the simplest SSL/TLS (without PKI) as transport protection for REST is probably the most effective way to get the wheel right the first time.
Beside that, you should clarify a few topics. For instance:

Is it important that the client does not get deceived by an attacker which may be impersonating the server? If it is, then you have to properly setup PKI so that the client can authenticate the server with a certificate. Alternatively you can use TLS-SRP.
Is it important that the server does not get deceived by an attacker which may be impersonating a real user? If it is, then you have to setup an authentication scheme: for instance HTTP Digest, SSL client certificates, TLS-SRP, etc.
Is it important that a compromise at the client or server does not jeopardize data exchanged in previous sessions? If it is, then you have to restrict the cipher suite to cipher that offer perfect forward secrecy (DHE).

Only if you have troubles in setting up SSL you should consider rolling up your own protocol.
","1702","<python><encryption><pycrypto>","1","3","2","2012-04-10 07:16:28","10084619","1","2","","","","2012-04-10 05:00:05",""
"37502267","Error with pycripto and AWS-Lambda","I'm trying to use pycrypto and lambda service, but every time that i run my script lambda service return:

Unable to import module 'service': /var/task/Crypto/Cipher/_AES.so:
  invalid ELF header

I don't know why is happen if someone have the same problem, please help me.
Thank you everyone.
","I ran into this same issue, had to build my deployable zip on a Linux VM.
As alex-luminul comments in this issue, it may be due to the OSX-compatible shared library _AES.so being sent to Lambda, where Lambda requires Linux compatible shared libraries.
","1699","<python><aws-lambda><pycrypto>","2","0","2","2016-10-15 04:36:15","","0","","","","","2016-05-28 18:04:19",""
"37502267","Error with pycripto and AWS-Lambda","I'm trying to use pycrypto and lambda service, but every time that i run my script lambda service return:

Unable to import module 'service': /var/task/Crypto/Cipher/_AES.so:
  invalid ELF header

I don't know why is happen if someone have the same problem, please help me.
Thank you everyone.
","There are some people who have pre-compiled some python packages for use in AWS Lambda. For example the pip package lambda_packages and a GitHub repository called awslambda-pycrypto.
I picked the latter since I only needed PyCrypto in my function. To use it, I downloaded the awslambda-pycrypto repository and then put the files in a directory named ""modules"", and then I loaded the code like so:
import sys
sys.path.insert(0, ""./modules"")
from Crypto.Cipher import AES

You then have to zip the directory that contains your function and upload it to Lambda.
","1699","<python><aws-lambda><pycrypto>","2","0","2","2016-10-15 04:36:15","","0","","","","","2016-05-28 18:04:19",""
"23794023","Cannot install pycrypto inside virtualenv on ubuntu 12.04","I tried pip install pycrypto using the virtualenv pip.
When I'm using sudo the installation succeeds, but not inside the virtual environment which does not help me.
The sudo apt-get install python-dev solution didn't help either. And also using easy_install and yum didn't help.
This is the bottom line of the error i get when I'm trying to install:
Command /home/ubuntu/conceep-env/bin/python -c ""import setuptools,tokenize;__file__='/home/ubuntu/conceep-env/build/pycrypto/setup.py';exec(compile(getattr(tokenize, 'open', open)(__file__).read().replace('\r\n', '\n'), __file__, 'exec'))"" install --record /var/tmp/pip-NaKMgy-record/install-record.txt --single-version-externally-managed --compile --install-headers /home/ubuntu/conceep-env/include/site/python2.7 failed with error code 1 in /home/ubuntu/conceep-env/build/pycrypto
Storing debug log for failure in /var/tmp/tmp3k2sTZ

","Just fixed it using sudo path/to/my/virtenv/bin/pip install pycrypto.
","1686","<python><ubuntu><pip><virtualenv><pycrypto>","2","4","1","2016-03-19 15:10:24","","1","","2947502","","2016-03-19 15:10:24","2014-05-21 21:21:41",""
"34054808","How to make Python Crypto AES faster","I'm looking for a very fast way for encrypting and decrypting short text snippets. Security is secondary in my use-case. Light encryption with a constant IV is fine. I'm currently doing this:
BS = 16
pad = lambda s: s + (BS - len(s) % BS) * chr(BS - len(s) % BS)
unpad = lambda s : s[:-ord(s[len(s)-1:])]

import base64
from Crypto.Cipher import AES

iv = '0123456789012345'
def encrypt(raw, key):
    raw = pad(raw)
    cipher = AES.new(key, AES.MODE_CBC, iv)
    return base64.b64encode( cipher.encrypt( raw ) )

def decrypt(enc, key):
    enc = base64.b64decode(enc)
    cipher = AES.new(key, AES.MODE_CBC, iv)
    return unpad(cipher.decrypt( enc ))

enc_text = encrypt('Hello World!','xyz1234567890abc')
print decrypt(enc_text, 'xyz1234567890abc')

How can I make this faster? Maybe by using another AES mode (MODE_CBC?), or is there a faster padding function, a faster way of hex-converting the output?
","Counter mode (AES.MODE_CTR) will be faster for multi-block messages, as it can be parallelized for both encryption and decryption. CBC is serial on encryption because the resulting output of each block-cipher operation is fed as input to be XOR with the plaintext of the next block before encrypting. Because CTR generates a keystream by encrypting each (sequential) counter value with the key, it does not rely on the output of any previous block operation and can perform the tasks in parallel. 
In addition, because CTR operates as a stream cipher, no message padding is required, so you'll save time on that operation in and out. 
Note: Don't re-use counters. You mentioned that confidentiality is a secondary concern here, but while re-using IVs in CBC mode is ""bad"", re-using counters in CTR mode is end of the world bad. Just use a sequential counter (literally i++) combined with 64 bits of the ms since epoch start and you'll be fine. (See Stream Reuse or Many Time Pad Attack for good examples of why).
","1665","<python><encryption><aes><pycrypto>","2","0","1","2016-12-06 22:36:12","","6","","","","","2015-12-02 23:06:02",""
"18657184","Android RSA encryption and Python decryption","I'm trying to make an Android app which logs a user into a Django-based server. I'm trying to increase the security by encrypting the username and password, but for some reason it's not decrypting properly on the server-side.
I suspect it has to do with the Java encryption and PyCrypto encryption differing slightly and causing compatibility issues, but I'm too green to really know what's wrong.
Here's the encryption code on the app (followed this tutorial):
public String encrypt_rsa(String original) throws IOException, NoSuchAlgorithmException, InvalidKeySpecException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException
{
    Resources res = getResources();
    InputStream is = res.openRawResource(R.raw.public_key);
    byte[] encodedKey = new byte[is.available()];
    is.read(encodedKey);
    X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(encodedKey);
    KeyFactory kf = KeyFactory.getInstance(""RSA"");
    PublicKey pkPublic = kf.generatePublic(publicKeySpec);

    Cipher pkCipher = Cipher.getInstance(""RSA/ECB/PKCS1PADDING"");
    pkCipher.init(Cipher.ENCRYPT_MODE, pkPublic);
    byte[] encryptedInByte = pkCipher.doFinal(original.getBytes());
    String encryptedInString = new String(Base64Coder.encode(encryptedInByte));
    is.close();

    return encryptedInString;
}

And here's my Python Code
from Cryto.PublicKey import RSA

def decrypt(encoded_text):

    f = open(""/path_to_file/private_key.pem"", 'r')
    priv_key = RSA.importKey(f)

    encrypted_text = base64.b64decode(encoded_text)

    plain_text = priv_key.decrypt(encrypted_text)

    return plain_text

Any help would be hugely appreciated!
","The Java code is using PKCS#1 v1.5 RSA encryption, which is a seriously broken and unsecure protocol.
Having said that, the decryption is done in Python with the appropriate module:
from Crypto.Cipher import PKCS1_v1_5

priv_key = RSA.importKey(f)
cipher = PKCS1_v1_5.new(priv_key)
plain_text = cipher.decrypt(encrypted_text)

More more information, see the module documentation.
","1665","<java><android><python><encryption><pycrypto>","1","0","1","2013-09-06 22:04:25","","1","5","","","","2013-09-06 11:50:36",""
"9348655","pycrypto and python 2.4.3 issue","I am working on a project and the cPanel which is provided to me by employer is having python 2.4.3 (too old version). The problem is i need to use pycrypto. So i am importing SHA256. The problem is here SHA256.py:
try:
    import hashlib
    hashFactory = hashlib.sha256

except ImportError:
    from Crypto.Hash import _SHA256
    hashFactory = _SHA256 

hashlib is not available in python 2.4.3 so it went to import _SHA256 but there is no _SHA256 in Cryto.Hash folder. Is this is bug of pycrypto? or i can not use this module for python 2.4.3?? Any workaround for this problem? 
","You could try using the standalone hashlib library.
","1664","<python><pycrypto>","0","0","2","2012-02-19 11:57:47","9348901","0","","","","","2012-02-19 11:10:33",""
"9348655","pycrypto and python 2.4.3 issue","I am working on a project and the cPanel which is provided to me by employer is having python 2.4.3 (too old version). The problem is i need to use pycrypto. So i am importing SHA256. The problem is here SHA256.py:
try:
    import hashlib
    hashFactory = hashlib.sha256

except ImportError:
    from Crypto.Hash import _SHA256
    hashFactory = _SHA256 

hashlib is not available in python 2.4.3 so it went to import _SHA256 but there is no _SHA256 in Cryto.Hash folder. Is this is bug of pycrypto? or i can not use this module for python 2.4.3?? Any workaround for this problem? 
","Quite a few algorithms in PyCrypto are actually written in C, rather than in pure python. SHA256 is amongst them. In order to use it, you must either install a complete pycrypto binary package or follow the instructions in the PyCrypto's README file. In the latter case, you will need to install the development environment first.
Both options are platform and OS specific, but once done, it will be simply a matter of calling:
from Crypto.Hash import SHA256
hash = SHA256.new()
hash.update('message')

There is no need to try to import it from hashlib first.
","1664","<python><pycrypto>","0","2","2","2012-02-19 11:57:47","9348901","0","","","","","2012-02-19 11:10:33",""
"7914533","How to store RSA encrypted data to postgresql by using pycrypto?","I want to use Public/Private key to secure my UserInfo data. I'm new with PyCrypto and PostgreSQL.
I have some items to clarify:

Are Public Key and Private Key constant values?
If it is constant, how can I store it properly?
Lastly but the most important, how can I store my encrypted data to PostgreSQL? and retrieve it for verification?

Would you guide me on how to dealt with Crypto.PublicKey.RSA as method to secure my data.
Environment: Python 2.5, PyCrypto 2.3, PostgreSQL 8.3 UTF-8 encoding
UserInfo model:
class UserInfo(models.Model):

    userid = models.TextField(primary_key = True)
    password = models.TextField(null = True)
    keyword = models.TextField(null = True)
    key = models.TextField(null = True, blank = True)
    date = models.DateTimeField(null = True, blank = True)

UPDATES1
tests.py:
# -*- encoding:utf-8 -*-
import os
from os.path import abspath, dirname
import sys
from py23.service.models import UserInfo
from Crypto import Random

# Set up django
project_dir = abspath(dirname(dirname(__file__)))
sys.path.insert(0, project_dir)
os.environ['DJANGO_SETTINGS_MODULE'] = 'py23.settings'
from django.test.testcases import TestCase

class AuthenticationTestCase(TestCase):

    def test_001_registerUserInfo(self):
        import Crypto.PublicKey.RSA
        import Crypto.Util.randpool

        #pool = Crypto.Util.randpool.RandomPool()
        rng = Random.new().read

        # craete RSA object by random key
        # 1024bit
        #rsa = Crypto.PublicKey.RSA.generate(1024, pool.get_bytes)
        rsa = Crypto.PublicKey.RSA.generate(1024, rng)

        # retrieve public key
        pub_rsa = rsa.publickey()

        # create RSA object by tuple
        # rsa.n is public key?, rsa.d is private key?
        priv_rsa = Crypto.PublicKey.RSA.construct((rsa.n, rsa.e, rsa.d))

        # encryption
        enc = pub_rsa.encrypt(""hello"", """")

        # decryption
        dec = priv_rsa.decrypt(enc)

        print ""private: n=%d, e=%d, d=%d, p=%d, q=%d, u=%d"" % (rsa.n, rsa.e, rsa.d, rsa.p, rsa.q, rsa.u)
        print ""public: n=%d, e=%d"" % (pub_rsa.n, pub_rsa.e)
        print ""encrypt:"", enc
        print ""decrypt:"", dec

        # text to be signed
        text = ""hello""
        signature = priv_rsa.sign(text, """")
        # check if the text has not changed
        print pub_rsa.verify(text, signature)
        print pub_rsa.verify(text+""a"", signature)

#        userid = models.TextField(primary_key = True)
#        password = models.TextField(null = True)
#        keyword = models.TextField(null = True)
#        key = models.TextField(null = True, blank = True)    is it correct to store the public key here?
#        date = models.DateTimeField(null = True, blank = True)
        userInfo = UserInfo(userid='test1', password=enc[0], key=pub_rsa.n)
        userInfo.save()
        print ""ok""

result here (failed):
======================================================================
ERROR: test_001_registerUserInfo (py23.service.auth.tests.AuthenticationTestCase)
----------------------------------------------------------------------
Traceback (most recent call last):
  File ""C:\PIDevelopment\workspace37_pydev\pyh23\py23\service\auth\tests.py"", line 64, in test_001_registerUserInfo
    userInfo.save()
  File ""C:\Python25\lib\site-packages\django\db\models\base.py"", line 458, in save
    self.save_base(using=using, force_insert=force_insert, force_update=force_update)
  File ""C:\Python25\lib\site-packages\django\db\models\base.py"", line 551, in save_base
    result = manager._insert(values, return_id=update_pk, using=using)
  File ""C:\Python25\Lib\site-packages\django\db\models\manager.py"", line 195, in _insert
    return insert_query(self.model, values, **kwargs)
  File ""C:\Python25\lib\site-packages\django\db\models\query.py"", line 1524, in insert_query
    return query.get_compiler(using=using).execute_sql(return_id)
  File ""C:\Python25\lib\site-packages\django\db\models\sql\compiler.py"", line 788, in execute_sql
    cursor = super(SQLInsertCompiler, self).execute_sql(None)
  File ""C:\Python25\lib\site-packages\django\db\models\sql\compiler.py"", line 732, in execute_sql
    cursor.execute(sql, params)
  File ""C:\Python25\lib\site-packages\django\db\backends\util.py"", line 15, in execute
    return self.cursor.execute(sql, params)
  File ""C:\Python25\lib\site-packages\django\db\backends\postgresql_psycopg2\base.py"", line 44, in execute
    return self.cursor.execute(query, args)
DatabaseError: invalid byte sequence for encoding ""UTF8"": 0x97
HINT:  This error can also happen if the byte sequence does not match the encoding expected by the server, which is controlled by ""client_encoding"".


----------------------------------------------------------------------
Ran 1 test in 90.047s

FAILED (errors=1)

","Your problem is that you are trying to store binary data in a text file.  Try armoring the data or use bytea (with proper encoding/decoding).
","1645","<python><postgresql><rsa><public-key-encryption><pycrypto>","4","0","1","2013-03-22 10:46:24","","2","","701678","","2011-10-31 04:26:32","2011-10-27 10:16:37",""
"43466737","What's the best way to verify XML signature in python?","I'm trying to validate XML message signature with given public key in Python which is validated fine on a PHP code with openssl.
Here's PHP code that's working fine.
$pubKey = openssl_pkey_get_public(file_get_contents(""public_key.pem""));

$xmlDoc = new DOMDocument();
$xmlDoc->load(""message.xml"");

$signedInfo=$xmlDoc->getElementsByTagName(""SignedInfo"")->item(0)->C14N(true, true);
$signature = base64_decode($xmlDoc->documentElement->getElementsByTagName(""SignatureValue"")->item(0)->nodeValue);

$ok = openssl_verify($signedInfo, $signature, $pubKey, OPENSSL_ALGO_SHA1);

I've found different libraries in Python to achieve this but none of them are verifying fine. I've listed the libraries and the problems I've faced on. Is there any other preferred ways to achieve this?
1. pyOpenSSL
It fails with following message: [('rsa routines', 'INT_RSA_VERIFY', 'wrong signature length')]
import OpenSSL.crypto as c
from StringIO import StringIO
import xml.etree.ElementTree as xml_et
from myapp import settings

namespace = ""{http://www.w3.org/2000/09/xmldsig#}""

xml_bytes = open(settings.STATIC_ROOT + '/file/test.xml', 'rt').read()
response_xml = xml_et.fromstring(xml_bytes.encode('utf-8'))
signature_elem = response_xml.find(namespace + 'Signature')
signature_value = signature_elem.find(namespace + 'SignatureValue').text

signed_info_output = StringIO()
signed_info_tree = xml_et.ElementTree(signature_elem.find(namespace + 'SignedInfo'))
signed_info_tree.write_c14n(signed_info_output)
signed_info = signed_info_output.getvalue()

# load certificate
cert = c.load_certificate(c.FILETYPE_PEM, open(settings.STATIC_ROOT + '/file/public.cert', 'rt').read())

# verify signature
try:
    c.verify(cert, signature_value, signed_info, 'sha1')
    print 'success'
except Exception, e:
    print 'fail'

2. M2Crypto
Tried to install M2Crypto but it fails with cannot find openssl/err.h header file. So I've installed openssl 1.1.0e and copied lib and include directories to C:/pkg directory and it throws different error like:
SWIG/_m2crypto_wrap.c(3754) : error C2065: 'CRYPTO_NUM_LOCKS' : undeclared ident ifier
And found precompiled M2Crypto msi installer but during runtime it throws following error:
ImportError: DLL load failed: The specified module could not be found.
This library seems outdated and not enough documentation available.
3. signxml
So far it's the only library that works partially for me.
Xml verification works fine but it throws error on sign: ValueError: Could not unserialize key data.
from xml.etree import ElementTree
from signxml import XMLSigner, XMLVerifier
from myapp import settings

cert = open(settings.STATIC_ROOT + '/file/public.cert', 'rt').read()
key = open(settings.STATIC_ROOT + '/file/public.key', 'rt').read()

root = ElementTree.fromstring('<xml1>12</xml1>')
signed_root = XMLSigner().sign(root, key=key, cert=cert)
verified_data = XMLVerifier().verify(signed_root).signed_xml
print verified_data

","The answer to the question in the title is signxml.
It is the library designed for the stated purpose. PyOpenSSL and M2Crypto operate on lower-level objects than XML signature; verifying the latter would involve canonicalizing XML, digesting proper parts of it, and comparing the provided signature over the digest. While possible, this is not trivial and provides much space for errors. For example in your code for PyOpenSSL you do not base64-decode the signature value.
With signxml, your example is mostly correct. For verification of the signature, you do not need the private key, so the error you get is not relevant to the question. You should in general read the certificate and the key in binary, not text mode (open(filename, ""rb"")) - even if the files are PEM-encoded.
The following is a working example:
from xml.etree import ElementTree
from signxml import XMLSigner, XMLVerifier

cert = open(""cert.pem"", ""rb"").read()
key = open(""key.pem"", ""rb"").read()

xml_obj = ElementTree.fromstring(""<Example/>"")
signed_xml_obj = XMLSigner().sign(xml_obj, key=key)
XMLVerifier().verify(signed_xml_obj, x509_cert=cert)

If your XML object has been serialized and de-serialized after signing, this simplest code might be not enough; the (complicated) details are described here.
","1628","<python><xml><pycrypto><xml-signature><pyopenssl>","1","1","1","2019-06-17 20:39:43","","2","","386213","","2017-04-18 10:32:03","2017-04-18 07:59:23",""
"7021410","AES encryption/decryption between Ruby-OpenSSL, PyCrypto","I have to encrypt a piece of text using Ruby. I've used the Ruby-Openssl gem for that purpose. This encrypted text is them passed to a python program using which I have to decrypt it. I've used Pycrypto for the purpose.
The problem is, in Pycrypto we have to specify the padding convention manually. In Ruby, the padding is done automatically. I'm using AES-CBC block cipher mode. This padding causes problems as its stripping cannot be performed properly in Python. As an example, these are the base64 encodings of an encrypted text in both Ruby and Python:
Python: aENJY28lvE89yY2T/te8vWwdeoeSqSwwlrOAv7b3AWw=
Ruby:   aENJY28lvE89yY2T/te8vVoQE6JNxdSRgYXC8mqF3nI=

Please help...
","It appears you need to be specifying the correct padding mode to use in both cases - padding is a fundamental property of a cipher stream, and must be matched on both receiver and sender.
","1623","<python><ruby><pycrypto>","5","0","2","2011-08-11 08:44:13","7023107","0","","38207","","2011-08-11 06:02:24","2011-08-11 05:54:37",""
"7021410","AES encryption/decryption between Ruby-OpenSSL, PyCrypto","I have to encrypt a piece of text using Ruby. I've used the Ruby-Openssl gem for that purpose. This encrypted text is them passed to a python program using which I have to decrypt it. I've used Pycrypto for the purpose.
The problem is, in Pycrypto we have to specify the padding convention manually. In Ruby, the padding is done automatically. I'm using AES-CBC block cipher mode. This padding causes problems as its stripping cannot be performed properly in Python. As an example, these are the base64 encodings of an encrypted text in both Ruby and Python:
Python: aENJY28lvE89yY2T/te8vWwdeoeSqSwwlrOAv7b3AWw=
Ruby:   aENJY28lvE89yY2T/te8vVoQE6JNxdSRgYXC8mqF3nI=

Please help...
","OpenSSL applies PKCS#5Padding by default, so this is also used automatically when encrypting data with OpenSSL::Cipher in AES-CBC mode (cf. OpenSSL docs). So there's no need to perform manual padding when using Ruby.  
The padding has to be done manually in Python when using PyCrypto.
Once you apply this padding scheme in Python, both encrypted Base64 strings should match. 
","1623","<python><ruby><pycrypto>","5","3","2","2011-08-11 08:44:13","7023107","0","","38207","","2011-08-11 06:02:24","2011-08-11 05:54:37",""
"28464648","An error when executing pycrypto","I work with odoo and I want to install the module of paybox : this one : https://bitbucket.org/anybox/anybox_paybox/
For that : this module needs pycrypto to work 
So, I installed  pycrypto in the linux server (ubuntu) 

git clone https://github.com/dlitz/pycrypto.git
./configure
python setup.py build
python setup.py install

and I made this test : python setup.py test 
Result there is no error but the problem comes here : in this file //paybox_signature.py//
# coding: utf-8
import urllib
import base64
from Crypto.PublicKey import RSA
from Crypto.Signature import PKCS1_v1_5
from Crypto.Hash import SHA

class Signature():

def verify(self, signature, msg, key):
    """""" check if the signature is correct according to the public key path         given
        and the message """"""
    msg = self.remove_sign(msg)
    key = RSA.importKey(key)
    ha = SHA.SHA1Hash().new(msg)
    verifier = PKCS1_v1_5.new(key)
    signature = urllib.unquote(signature)
    signature = base64.b64decode(signature)
    return verifier.verify(ha, signature)

    def remove_sign(self, msg):
    """""" remove signature arg from the given string""""""
    pos = msg.find('&Signature')
    if pos == -1:
        return msg
    return msg[:pos] 

when I execute this line of the file :
from Crypto.PublicKey import RSA

--> It ok there is no error 
when I do this
from Crypto.Signature import PKCS1_v1_5

--> Traceback (most recent call last):
    File """", line 1, in 
    ImportError: No module named Signature
I don't know Why 
All the modules are there why python make this error !! really I don't know 
Please I need your help Thank you 
","Might be issue with the pycrypto package installation.  
try with
sudo easy_install pycrypto

and than reboot your system. 
You may also checkout api of pycrypto
If you use Mac OS than see more discussion here 
","1615","<python><odoo><pycrypto>","0","1","2","2016-10-17 02:03:24","","0","","1810429","","2015-02-11 21:36:10","2015-02-11 21:16:04",""
"28464648","An error when executing pycrypto","I work with odoo and I want to install the module of paybox : this one : https://bitbucket.org/anybox/anybox_paybox/
For that : this module needs pycrypto to work 
So, I installed  pycrypto in the linux server (ubuntu) 

git clone https://github.com/dlitz/pycrypto.git
./configure
python setup.py build
python setup.py install

and I made this test : python setup.py test 
Result there is no error but the problem comes here : in this file //paybox_signature.py//
# coding: utf-8
import urllib
import base64
from Crypto.PublicKey import RSA
from Crypto.Signature import PKCS1_v1_5
from Crypto.Hash import SHA

class Signature():

def verify(self, signature, msg, key):
    """""" check if the signature is correct according to the public key path         given
        and the message """"""
    msg = self.remove_sign(msg)
    key = RSA.importKey(key)
    ha = SHA.SHA1Hash().new(msg)
    verifier = PKCS1_v1_5.new(key)
    signature = urllib.unquote(signature)
    signature = base64.b64decode(signature)
    return verifier.verify(ha, signature)

    def remove_sign(self, msg):
    """""" remove signature arg from the given string""""""
    pos = msg.find('&Signature')
    if pos == -1:
        return msg
    return msg[:pos] 

when I execute this line of the file :
from Crypto.PublicKey import RSA

--> It ok there is no error 
when I do this
from Crypto.Signature import PKCS1_v1_5

--> Traceback (most recent call last):
    File """", line 1, in 
    ImportError: No module named Signature
I don't know Why 
All the modules are there why python make this error !! really I don't know 
Please I need your help Thank you 
","Its an old question but for people who are still looking for answer and stumbling upon this page. You can download the pyCrypto from pycrypto dist, but I recommend ""pip install pyCrypto"" as its simple and better.
","1615","<python><odoo><pycrypto>","0","0","2","2016-10-17 02:03:24","","0","","1810429","","2015-02-11 21:36:10","2015-02-11 21:16:04",""
"25026881","PyCrypto Possible To Check If File Already AES Encrypted?","  from Crypto.Cipher import AES

    def encrypt_file(key, in_filename, out_filename=None, chunksize=64*1024):
        """""" Encrypts a file using AES (CBC mode) with the
            given key.

            key:
                The encryption key - a string that must be
                either 16, 24 or 32 bytes long. Longer keys
                are more secure.

            in_filename:
                Name of the input file

            out_filename:
                If None, '<in_filename>.enc' will be used.

            chunksize:
                Sets the size of the chunk which the function
                uses to read and encrypt the file. Larger chunk
                sizes can be faster for some files and machines.
                chunksize must be divisible by 16.
        """"""
        if not out_filename:
            out_filename = in_filename + '.enc'

        iv = ''.join(chr(random.randint(0, 0xFF)) for i in range(16))
        encryptor = AES.new(key, AES.MODE_CBC, iv)
        filesize = os.path.getsize(in_filename)

        with open(in_filename, 'rb') as infile:
            with open(out_filename, 'wb') as outfile:
                outfile.write(struct.pack('<Q', filesize))
                outfile.write(iv)

                while True:
                    chunk = infile.read(chunksize)
                    if len(chunk) == 0:
                        break
                    elif len(chunk) % 16 != 0:
                        chunk += ' ' * (16 - len(chunk) % 16)

                    outfile.write(encryptor.encrypt(chunk))

This is how I encrypt file, but if you run it twice or more on the same file it will keep encrypting it no questions asked, I want to add some kind of a if check if it's not already encrypted by AES? Is this possible?
","Unless you have some kind of magical header that can be detected (for example, on Linux, LUKS encrypted disk image has a header block for added features, but DM-Crypt does not) it would be difficult to detect whether the input string is encrypted or not.
See: determine if the bits are encrypted?
","1597","<python><python-2.7><encryption><ipython><pycrypto>","4","0","2","2014-07-30 12:40:05","25026960","0","","","","","2014-07-30 00:10:39",""
"25026881","PyCrypto Possible To Check If File Already AES Encrypted?","  from Crypto.Cipher import AES

    def encrypt_file(key, in_filename, out_filename=None, chunksize=64*1024):
        """""" Encrypts a file using AES (CBC mode) with the
            given key.

            key:
                The encryption key - a string that must be
                either 16, 24 or 32 bytes long. Longer keys
                are more secure.

            in_filename:
                Name of the input file

            out_filename:
                If None, '<in_filename>.enc' will be used.

            chunksize:
                Sets the size of the chunk which the function
                uses to read and encrypt the file. Larger chunk
                sizes can be faster for some files and machines.
                chunksize must be divisible by 16.
        """"""
        if not out_filename:
            out_filename = in_filename + '.enc'

        iv = ''.join(chr(random.randint(0, 0xFF)) for i in range(16))
        encryptor = AES.new(key, AES.MODE_CBC, iv)
        filesize = os.path.getsize(in_filename)

        with open(in_filename, 'rb') as infile:
            with open(out_filename, 'wb') as outfile:
                outfile.write(struct.pack('<Q', filesize))
                outfile.write(iv)

                while True:
                    chunk = infile.read(chunksize)
                    if len(chunk) == 0:
                        break
                    elif len(chunk) % 16 != 0:
                        chunk += ' ' * (16 - len(chunk) % 16)

                    outfile.write(encryptor.encrypt(chunk))

This is how I encrypt file, but if you run it twice or more on the same file it will keep encrypting it no questions asked, I want to add some kind of a if check if it's not already encrypted by AES? Is this possible?
","The most often used solution is to write some ""magic"" string at the beginning of the encrypted file followed by the encrypted content. If that string is found when reading the file, further encryption is refused. For decription it is read to veryfiy that this is a file we encrypted, but otherwise it is ignored.
Imagine you're using ""MyCrYpT"" as the magic (although it doesn't matter what you use as long as it is reasonably unique.
magic = ""MyCrYpT""
# writing the encrypted file
with open(out_filename, 'wb') as outfile:
    outfile.write(magic)  # write the identifier.
    outfile.write(struct.pack('<Q', filesize))  # file size
    outfile.write(iv)
    # et cetera

Now, when reading the file, we read all the data, and then check if it is ours. Then we discard the magic and process the rest.
with open(in_filename, 'rb') as infile:
    data = infile.read()
    if data[:len(magic)] != magic:
        raise ValueError('Not an encrypted file')
    filedata = data[len(magic):]
    # Proces the file data

","1597","<python><python-2.7><encryption><ipython><pycrypto>","4","4","2","2014-07-30 12:40:05","25026960","0","","","","","2014-07-30 00:10:39",""
"21409231","pip lists wrong installed version of package?","On Ubuntu 10.04, my problem is that pip freeze and sudo pip freeze both report the wrong version of a package installed. I can do sudo pip install -I pycrypto --upgrade and it will go through and install the package (version 2.6.1), but then pip freeze lists the installed version as 2.0.1. I also cannot uninstall the package, so it seems like something is going wrong. How can I fix this?
Output:
$ sudo pip uninstall pycrypto
Can't uninstall 'pycrypto'. No files were found to uninstall.
$ pip uninstall pycrypto
Can't uninstall 'pycrypto'. No files were found to uninstall.

For reference and common issues, I have pip installed, and can do: 
$ pip --version
pip 1.5.2 from /usr/local/lib/python2.6/dist-packages (python 2.6)

And I see the correct pip version, seems like everything is good there. sudo pip --version also yields the same output. I can diff the outputs from pip freeze and sudo pip freeze and there are no differences there. which pip and sudo which pip yield the same thing.
More Info:
If I do pip install -I pycrypto --upgrade without sudo I get an error that maybe someone could clarify? When I install with sudo I get no errors. I feel like this is related, but not my issue.
InstallationError: Command /usr/bin/python -c ""import setuptools, tokenize;__file__='/tmp/pip_build_ndempkow/pycrypto/setup.py';exec(compile(getattr(tokenize, 'open', open)(__file__).read().replace('\r\n', '\n'), __file__, 'exec'))"" install --record /tmp/pip-KkVjn4-record/install-record.txt --single-version-externally-managed --compile failed with error code 1 in /tmp/pip_build_ndempkow/pycrypto
","So for anyone who has a similar issue, I think the problem is that I somehow had the python-crypto package installed from aptitude, as well as pycrypto installed with pip. To check this I did dpkg --get-selections and saw that python-crypto was installed, so I removed that with sudo apt-get remove python-crypto and then I was able to do sudo pip uninstall pycypto. That finally got it to disappear from pip freeze so I could then install the correct version.
","1596","<python><ubuntu><pip><python-2.6><pycrypto>","2","2","1","2014-02-14 19:58:41","21788475","0","","2068985","","2014-01-28 15:17:20","2014-01-28 15:06:26",""
"53160247","Problem installing pycrypto on windows 10","I want to use https://github.com/sigalor/whatsapp-web-reveng/ repo. During the setup, it requires pycrypto package, but I am facing error. I have tried many ways from stackoverflow and github issues.
System OS - Windwows 10
Python - 3.7.1
Error

Collecting pycrypto
  Using cached https://files.pythonhosted.org/packages/60/db/645aa9af249f059cc3a368b118de33889219e0362141e75d4eaf6f80f163/pycrypto-2.6.1.tar.gz
Installing collected packages: pycrypto
  Running setup.py install for pycrypto ... error
    Complete output from command c:\users\jmd\appdata\local\programs\python\python37-32\python.exe -u -c ""import setuptools, tokenize;__file__='C:\\Users\\JMD\\AppData\\Local\\Temp\\pip-install-il7eha03\\pycrypto\\setup.py';f=getattr(tokenize, 'open', open)(__file__);code=f.read().replace('\r\n', '\n');f.close();exec(compile(code, __file__, 'exec'))"" install --record C:\Users\JMD\AppData\Local\Temp\pip-record-ovghq181\install-record.txt --single-version-externally-managed --compile:
    running install
    running build
    running build_py
    creating build
    creating build\lib.win32-3.7
    creating build\lib.win32-3.7\Crypto
    copying lib\Crypto\pct_warnings.py -> build\lib.win32-3.7\Crypto
    copying lib\Crypto\__init__.py -> build\lib.win32-3.7\Crypto
    creating build\lib.win32-3.7\Crypto\Hash
    copying lib\Crypto\Hash\hashalgo.py -> build\lib.win32-3.7\Crypto\Hash
    copying lib\Crypto\Hash\HMAC.py -> build\lib.win32-3.7\Crypto\Hash
    copying lib\Crypto\Hash\MD2.py -> build\lib.win32-3.7\Crypto\Hash
    copying lib\Crypto\Hash\MD4.py -> build\lib.win32-3.7\Crypto\Hash
    copying lib\Crypto\Hash\MD5.py -> build\lib.win32-3.7\Crypto\Hash
    copying lib\Crypto\Hash\RIPEMD.py -> build\lib.win32-3.7\Crypto\Hash
    copying lib\Crypto\Hash\SHA.py -> build\lib.win32-3.7\Crypto\Hash
    copying lib\Crypto\Hash\SHA224.py -> build\lib.win32-3.7\Crypto\Hash
    copying lib\Crypto\Hash\SHA256.py -> build\lib.win32-3.7\Crypto\Hash
    copying lib\Crypto\Hash\SHA384.py -> build\lib.win32-3.7\Crypto\Hash
    copying lib\Crypto\Hash\SHA512.py -> build\lib.win32-3.7\Crypto\Hash
    copying lib\Crypto\Hash\__init__.py -> build\lib.win32-3.7\Crypto\Hash
    creating build\lib.win32-3.7\Crypto\Cipher
    copying lib\Crypto\Cipher\AES.py -> build\lib.win32-3.7\Crypto\Cipher
    copying lib\Crypto\Cipher\ARC2.py -> build\lib.win32-3.7\Crypto\Cipher
    copying lib\Crypto\Cipher\ARC4.py -> build\lib.win32-3.7\Crypto\Cipher
    copying lib\Crypto\Cipher\blockalgo.py -> build\lib.win32-3.7\Crypto\Cipher
    copying lib\Crypto\Cipher\Blowfish.py -> build\lib.win32-3.7\Crypto\Cipher
    copying lib\Crypto\Cipher\CAST.py -> build\lib.win32-3.7\Crypto\Cipher
    copying lib\Crypto\Cipher\DES.py -> build\lib.win32-3.7\Crypto\Cipher
    copying lib\Crypto\Cipher\DES3.py -> build\lib.win32-3.7\Crypto\Cipher
    copying lib\Crypto\Cipher\PKCS1_OAEP.py -> build\lib.win32-3.7\Crypto\Cipher
    copying lib\Crypto\Cipher\PKCS1_v1_5.py -> build\lib.win32-3.7\Crypto\Cipher
    copying lib\Crypto\Cipher\XOR.py -> build\lib.win32-3.7\Crypto\Cipher
    copying lib\Crypto\Cipher\__init__.py -> build\lib.win32-3.7\Crypto\Cipher
    creating build\lib.win32-3.7\Crypto\Util
    copying lib\Crypto\Util\asn1.py -> build\lib.win32-3.7\Crypto\Util
    copying lib\Crypto\Util\Counter.py -> build\lib.win32-3.7\Crypto\Util
    copying lib\Crypto\Util\number.py -> build\lib.win32-3.7\Crypto\Util
    copying lib\Crypto\Util\py3compat.py -> build\lib.win32-3.7\Crypto\Util
    copying lib\Crypto\Util\randpool.py -> build\lib.win32-3.7\Crypto\Util
    copying lib\Crypto\Util\RFC1751.py -> build\lib.win32-3.7\Crypto\Util
    copying lib\Crypto\Util\winrandom.py -> build\lib.win32-3.7\Crypto\Util
    copying lib\Crypto\Util\_number_new.py -> build\lib.win32-3.7\Crypto\Util
    copying lib\Crypto\Util\__init__.py -> build\lib.win32-3.7\Crypto\Util
    creating build\lib.win32-3.7\Crypto\Random
    copying lib\Crypto\Random\random.py -> build\lib.win32-3.7\Crypto\Random
    copying lib\Crypto\Random\_UserFriendlyRNG.py -> build\lib.win32-3.7\Crypto\Random
    copying lib\Crypto\Random\__init__.py -> build\lib.win32-3.7\Crypto\Random
    creating build\lib.win32-3.7\Crypto\Random\Fortuna
    copying lib\Crypto\Random\Fortuna\FortunaAccumulator.py -> build\lib.win32-3.7\Crypto\Random\Fortuna
    copying lib\Crypto\Random\Fortuna\FortunaGenerator.py -> build\lib.win32-3.7\Crypto\Random\Fortuna
    copying lib\Crypto\Random\Fortuna\SHAd256.py -> build\lib.win32-3.7\Crypto\Random\Fortuna
    copying lib\Crypto\Random\Fortuna\__init__.py -> build\lib.win32-3.7\Crypto\Random\Fortuna
    creating build\lib.win32-3.7\Crypto\Random\OSRNG
    copying lib\Crypto\Random\OSRNG\fallback.py -> build\lib.win32-3.7\Crypto\Random\OSRNG
    copying lib\Crypto\Random\OSRNG\nt.py -> build\lib.win32-3.7\Crypto\Random\OSRNG
    copying lib\Crypto\Random\OSRNG\posix.py -> build\lib.win32-3.7\Crypto\Random\OSRNG
    copying lib\Crypto\Random\OSRNG\rng_base.py -> build\lib.win32-3.7\Crypto\Random\OSRNG
    copying lib\Crypto\Random\OSRNG\__init__.py -> build\lib.win32-3.7\Crypto\Random\OSRNG
    creating build\lib.win32-3.7\Crypto\SelfTest
    copying lib\Crypto\SelfTest\st_common.py -> build\lib.win32-3.7\Crypto\SelfTest
    copying lib\Crypto\SelfTest\__init__.py -> build\lib.win32-3.7\Crypto\SelfTest
    creating build\lib.win32-3.7\Crypto\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\common.py -> build\lib.win32-3.7\Crypto\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_AES.py -> build\lib.win32-3.7\Crypto\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_ARC2.py -> build\lib.win32-3.7\Crypto\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_ARC4.py -> build\lib.win32-3.7\Crypto\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_Blowfish.py -> build\lib.win32-3.7\Crypto\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_CAST.py -> build\lib.win32-3.7\Crypto\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_DES.py -> build\lib.win32-3.7\Crypto\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_DES3.py -> build\lib.win32-3.7\Crypto\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_pkcs1_15.py -> build\lib.win32-3.7\Crypto\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_pkcs1_oaep.py -> build\lib.win32-3.7\Crypto\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_XOR.py -> build\lib.win32-3.7\Crypto\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\__init__.py -> build\lib.win32-3.7\Crypto\SelfTest\Cipher
    creating build\lib.win32-3.7\Crypto\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\common.py -> build\lib.win32-3.7\Crypto\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_HMAC.py -> build\lib.win32-3.7\Crypto\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_MD2.py -> build\lib.win32-3.7\Crypto\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_MD4.py -> build\lib.win32-3.7\Crypto\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_MD5.py -> build\lib.win32-3.7\Crypto\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_RIPEMD.py -> build\lib.win32-3.7\Crypto\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_SHA.py -> build\lib.win32-3.7\Crypto\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_SHA224.py -> build\lib.win32-3.7\Crypto\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_SHA256.py -> build\lib.win32-3.7\Crypto\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_SHA384.py -> build\lib.win32-3.7\Crypto\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_SHA512.py -> build\lib.win32-3.7\Crypto\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\__init__.py -> build\lib.win32-3.7\Crypto\SelfTest\Hash
    creating build\lib.win32-3.7\Crypto\SelfTest\Protocol
    copying lib\Crypto\SelfTest\Protocol\test_AllOrNothing.py -> build\lib.win32-3.7\Crypto\SelfTest\Protocol
    copying lib\Crypto\SelfTest\Protocol\test_chaffing.py -> build\lib.win32-3.7\Crypto\SelfTest\Protocol
    copying lib\Crypto\SelfTest\Protocol\test_KDF.py -> build\lib.win32-3.7\Crypto\SelfTest\Protocol
    copying lib\Crypto\SelfTest\Protocol\test_rfc1751.py -> build\lib.win32-3.7\Crypto\SelfTest\Protocol
    copying lib\Crypto\SelfTest\Protocol\__init__.py -> build\lib.win32-3.7\Crypto\SelfTest\Protocol
    creating build\lib.win32-3.7\Crypto\SelfTest\PublicKey
    copying lib\Crypto\SelfTest\PublicKey\test_DSA.py -> build\lib.win32-3.7\Crypto\SelfTest\PublicKey
    copying lib\Crypto\SelfTest\PublicKey\test_ElGamal.py -> build\lib.win32-3.7\Crypto\SelfTest\PublicKey
    copying lib\Crypto\SelfTest\PublicKey\test_importKey.py -> build\lib.win32-3.7\Crypto\SelfTest\PublicKey
    copying lib\Crypto\SelfTest\PublicKey\test_RSA.py -> build\lib.win32-3.7\Crypto\SelfTest\PublicKey
    copying lib\Crypto\SelfTest\PublicKey\__init__.py -> build\lib.win32-3.7\Crypto\SelfTest\PublicKey
    creating build\lib.win32-3.7\Crypto\SelfTest\Random
    copying lib\Crypto\SelfTest\Random\test_random.py -> build\lib.win32-3.7\Crypto\SelfTest\Random
    copying lib\Crypto\SelfTest\Random\test_rpoolcompat.py -> build\lib.win32-3.7\Crypto\SelfTest\Random
    copying lib\Crypto\SelfTest\Random\test__UserFriendlyRNG.py -> build\lib.win32-3.7\Crypto\SelfTest\Random
    copying lib\Crypto\SelfTest\Random\__init__.py -> build\lib.win32-3.7\Crypto\SelfTest\Random
    creating build\lib.win32-3.7\Crypto\SelfTest\Random\Fortuna
    copying lib\Crypto\SelfTest\Random\Fortuna\test_FortunaAccumulator.py -> build\lib.win32-3.7\Crypto\SelfTest\Random\Fortuna
    copying lib\Crypto\SelfTest\Random\Fortuna\test_FortunaGenerator.py -> build\lib.win32-3.7\Crypto\SelfTest\Random\Fortuna
    copying lib\Crypto\SelfTest\Random\Fortuna\test_SHAd256.py -> build\lib.win32-3.7\Crypto\SelfTest\Random\Fortuna
    copying lib\Crypto\SelfTest\Random\Fortuna\__init__.py -> build\lib.win32-3.7\Crypto\SelfTest\Random\Fortuna
    creating build\lib.win32-3.7\Crypto\SelfTest\Random\OSRNG
    copying lib\Crypto\SelfTest\Random\OSRNG\test_fallback.py -> build\lib.win32-3.7\Crypto\SelfTest\Random\OSRNG
    copying lib\Crypto\SelfTest\Random\OSRNG\test_generic.py -> build\lib.win32-3.7\Crypto\SelfTest\Random\OSRNG
    copying lib\Crypto\SelfTest\Random\OSRNG\test_nt.py -> build\lib.win32-3.7\Crypto\SelfTest\Random\OSRNG
    copying lib\Crypto\SelfTest\Random\OSRNG\test_posix.py -> build\lib.win32-3.7\Crypto\SelfTest\Random\OSRNG
    copying lib\Crypto\SelfTest\Random\OSRNG\test_winrandom.py -> build\lib.win32-3.7\Crypto\SelfTest\Random\OSRNG
    copying lib\Crypto\SelfTest\Random\OSRNG\__init__.py -> build\lib.win32-3.7\Crypto\SelfTest\Random\OSRNG
    creating build\lib.win32-3.7\Crypto\SelfTest\Util
    copying lib\Crypto\SelfTest\Util\test_asn1.py -> build\lib.win32-3.7\Crypto\SelfTest\Util
    copying lib\Crypto\SelfTest\Util\test_Counter.py -> build\lib.win32-3.7\Crypto\SelfTest\Util
    copying lib\Crypto\SelfTest\Util\test_number.py -> build\lib.win32-3.7\Crypto\SelfTest\Util
    copying lib\Crypto\SelfTest\Util\test_winrandom.py -> build\lib.win32-3.7\Crypto\SelfTest\Util
    copying lib\Crypto\SelfTest\Util\__init__.py -> build\lib.win32-3.7\Crypto\SelfTest\Util
    creating build\lib.win32-3.7\Crypto\SelfTest\Signature
    copying lib\Crypto\SelfTest\Signature\test_pkcs1_15.py -> build\lib.win32-3.7\Crypto\SelfTest\Signature
    copying lib\Crypto\SelfTest\Signature\test_pkcs1_pss.py -> build\lib.win32-3.7\Crypto\SelfTest\Signature
    copying lib\Crypto\SelfTest\Signature\__init__.py -> build\lib.win32-3.7\Crypto\SelfTest\Signature
    creating build\lib.win32-3.7\Crypto\Protocol
    copying lib\Crypto\Protocol\AllOrNothing.py -> build\lib.win32-3.7\Crypto\Protocol
    copying lib\Crypto\Protocol\Chaffing.py -> build\lib.win32-3.7\Crypto\Protocol
    copying lib\Crypto\Protocol\KDF.py -> build\lib.win32-3.7\Crypto\Protocol
    copying lib\Crypto\Protocol\__init__.py -> build\lib.win32-3.7\Crypto\Protocol
    creating build\lib.win32-3.7\Crypto\PublicKey
    copying lib\Crypto\PublicKey\DSA.py -> build\lib.win32-3.7\Crypto\PublicKey
    copying lib\Crypto\PublicKey\ElGamal.py -> build\lib.win32-3.7\Crypto\PublicKey
    copying lib\Crypto\PublicKey\pubkey.py -> build\lib.win32-3.7\Crypto\PublicKey
    copying lib\Crypto\PublicKey\RSA.py -> build\lib.win32-3.7\Crypto\PublicKey
    copying lib\Crypto\PublicKey\_DSA.py -> build\lib.win32-3.7\Crypto\PublicKey
    copying lib\Crypto\PublicKey\_RSA.py -> build\lib.win32-3.7\Crypto\PublicKey
    copying lib\Crypto\PublicKey\_slowmath.py -> build\lib.win32-3.7\Crypto\PublicKey
    copying lib\Crypto\PublicKey\__init__.py -> build\lib.win32-3.7\Crypto\PublicKey
    creating build\lib.win32-3.7\Crypto\Signature
    copying lib\Crypto\Signature\PKCS1_PSS.py -> build\lib.win32-3.7\Crypto\Signature
    copying lib\Crypto\Signature\PKCS1_v1_5.py -> build\lib.win32-3.7\Crypto\Signature
    copying lib\Crypto\Signature\__init__.py -> build\lib.win32-3.7\Crypto\Signature
    Skipping optional fixer: buffer
    Skipping optional fixer: idioms
    Skipping optional fixer: set_literal
    Skipping optional fixer: ws_comma
    running build_ext
    warning: GMP or MPIR library not found; Not building Crypto.PublicKey._fastmath.
    building 'Crypto.Random.OSRNG.winrandom' extension
    creating build\temp.win32-3.7
    creating build\temp.win32-3.7\Release
    creating build\temp.win32-3.7\Release\src
    C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\BIN\cl.exe /c /nologo /Ox /W3 /GL /DNDEBUG /MD -Isrc/ -Isrc/inc-msvc/ -Ic:\users\jmd\appdata\local\programs\python\python37-32\include -Ic:\users\jmd\appdata\local\programs\python\python37-32\include ""-IC:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\INCLUDE"" ""-IC:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt"" ""-IC:\Program Files (x86)\Windows Kits\8.1\include\shared"" ""-IC:\Program Files (x86)\Windows Kits\8.1\include\um"" ""-IC:\Program Files (x86)\Windows Kits\8.1\include\winrt"" /Tcsrc/winrand.c /Fobuild\temp.win32-3.7\Release\src/winrand.obj
    winrand.c
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(26): error C2061: syntax error: identifier 'intmax_t'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(27): error C2061: syntax error: identifier 'rem'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(27): error C2059: syntax error: ';'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(28): error C2059: syntax error: '}'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(30): error C2061: syntax error: identifier 'imaxdiv_t'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(30): error C2059: syntax error: ';'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(40): error C2143: syntax error: missing '{' before '__cdecl'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(41): error C2146: syntax error: missing ')' before identifier '_Number'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(41): error C2061: syntax error: identifier '_Number'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(41): error C2059: syntax error: ';'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(42): error C2059: syntax error: ')'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(45): error C2143: syntax error: missing '{' before '__cdecl'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(46): error C2146: syntax error: missing ')' before identifier '_Numerator'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(46): error C2061: syntax error: identifier '_Numerator'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(46): error C2059: syntax error: ';'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(46): error C2059: syntax error: ','
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(48): error C2059: syntax error: ')'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(50): error C2143: syntax error: missing '{' before '__cdecl'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(56): error C2143: syntax error: missing '{' before '__cdecl'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(63): error C2143: syntax error: missing '{' before '__cdecl'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(69): error C2143: syntax error: missing '{' before '__cdecl'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(76): error C2143: syntax error: missing '{' before '__cdecl'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(82): error C2143: syntax error: missing '{' before '__cdecl'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(89): error C2143: syntax error: missing '{' before '__cdecl'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(95): error C2143: syntax error: missing '{' before '__cdecl'
    error: command 'C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\BIN\\cl.exe' failed with exit status 2

    ----------------------------------------
Command ""c:\users\jmd\appdata\local\programs\python\python37-32\python.exe -u -c ""import setuptools, tokenize;__file__='C:\\Users\\JMD\\AppData\\Local\\Temp\\pip-install-il7eha03\\pycrypto\\setup.py';f=getattr(tokenize, 'open', open)(__file__);code=f.read().replace('\r\n', '\n');f.close();exec(compile(code, __file__, 'exec'))"" install --record C:\Users\JMD\AppData\Local\Temp\pip-record-ovghq181\install-record.txt --single-version-externally-managed --compile"" failed with error code 1 in C:\Users\JMD\AppData\Local\Temp\pip-install-il7eha03\pycrypto\

","2017-01-03 Building pycrypto on Windows Solved my problem. Earlier I tried the same solution, but I think  I was doing something wrong that time
","1585","<python-3.x><windows-10><whatsapp><pycrypto>","3","2","1","2018-11-07 11:31:09","53188633","5","","","","","2018-11-05 18:39:18",""
"23254181","DES Encryption and decryption of hex using hex key python","How can I encrypt and decrypt hex text using 8 byte hex key using DES algorithm in python?
I have a hex text 0x3a3456abcd4ff5cd to encrypt with hex keys so how can I convert these values to equivalent strings so that I can use existing libraries to work with them.
Here's what I've tried, but it represents 8 byte key to equivalent 13 byte string:
from Crypto.Cipher import DES
text =(unichr(4).decode('utf-8')*8).encode('utf-8')

key1=(unichr(0x46)+unichr(0xb2)+unichr(0xc8)+unichr(0xb6)+unichr(0x28)+unichr(0x18)+unichr(0xf8)+unichr(0x84)).encode('utf-8')

key2=(unichr(0x4a)+unichr(0x5a)+unichr(0xa8)+unichr(0xd0)+unichr(0xba)+unichr(0x30)+unichr(0x58)+unichr(0x5a)).encode('utf-8')

des = DES.new(key1,DES.MODE_ECB)
cipher_text = des.encrypt(plain_text)
print 'the cipher text is ', cipher_text

des = DES.new(key2,DES.MODE_ECB)
print 'the decrypted text is: ', des.decrypt(cipher_text)

","To use the two keys in your example, assign them like this:
key1 = '\x46\xb2\xc8\xb6\x28\x18\xf8\x84'

key2 = '\x4a\x5a\xa8\xd0\xba\x30\x58\x5a'

This will keep the keys at 8 bytes each, allowing you to use them in DES.new.
","1583","<python><hex><des><pycrypto>","0","0","1","2018-06-26 09:02:06","","4","","1033581","","2018-06-26 09:02:06","2014-04-23 20:06:05",""
"31640922","Installing pycrypto on raspbian for python 3.2.3","Im trying to crate a cryptosystem on the raspbian OS. Chose python and pycrypto because the OS comes with python 3.2.3 pre-installed. Moved the ""pycrypto-2.6.1.tar.gz"" to the folder where python files are located and extracted there. Suposed to build using the command ""python setup.py build"" and then install.
But during the build phase, keep getting the error:
""pi@raspberrypi /usr/lib/python3.2/pycrypto-2.6.1 $ python setup.py buildrunning build
running build_py
running build_ext
running build_configure
warning: GMP or MPIR library not found; Not building Crypto.PublicKey._fastmath.
building 'Crypto.Hash._MD2' extension
gcc -pthread -fno-strict-aliasing -fwrapv -Wall -Wstrict-prototypes -fPIC -std=c99 -O3 -fomit-frame-pointer -Isrc/ -I/usr/include/python2.7 -c src/MD2.c -o build/temp.linux-armv6l-2.7/src/MD2.o
src/MD2.c:31:20: fatal error: Python.h: No such file or directory
compilation terminated.
    error: command 'gcc' failed with exit status 1

""

Not able to figure out whether I am supposed to change the pathing. Could somebody give an insight in to this?
","
warning: GMP or MPIR library not found; Not building Crypto.PublicKey._fastmath.

The libgmp-dev package provides the necessary files to support building the optimized module here:
apt-get install libgmp-dev


src/MD2.c:31:20: fatal error: Python.h: No such file or directory
  compilation terminated.

If you search for fatal error: Python.h: No such file or directory, the very first Google result is for this StackOverflow question, which tells you that you need to install the python-dev package:
apt-get install python-dev

In general, if you are building software from source you will need the corresponding -dev package for any required libraries; these packages provide header files (foo.h) and the unversioned shared libraries necessary for linking.
","1572","<python><raspbian><pycrypto>","0","0","1","2017-04-25 09:38:03","31643177","0","","5039959","","2015-07-26 19:45:41","2015-07-26 19:15:11",""
"42339631","Python 3, How to set Visual Studio C++ 2015 compiler?","I have installed Python 3.6 64bit version for my Windows 10 PC. I also have Visual Studio 2015 which has these folders:

Some python libs, like pycrypto requires C++ compilation in order to be installed.
Now when I try to install pycrypto it throws me that kind of error:
warning: GMP or MPIR library not found; Not building Crypto.PublicKey._fastmath.
building 'Crypto.Random.OSRNG.winrandom' extension
error: Microsoft Visual C++ 14.0 is required. Get it with ""Microsoft Visual C++ Build Tools"": http://landinghub.visualstudio.com/visual-cpp-build-tools

Command ""d:\python36\python.exe -u -c ""import setuptools, tokenize;__file__='C:\\Users\\MrD\\AppData\\Local\\Temp\\pip-build-rzwqmfpp\\pycrypto\\setup.py';f=getattr(tokenize, 'ope
n', open)(__file__);code=f.read().replace('\r\n', '\n');f.close();exec(compile(code, __file__, 'exec'))"" install --record C:\Users\MrD\AppData\Local\Temp\pip-rzm9kzme-record\insta
ll-record.txt --single-version-externally-managed --compile"" failed with error code 1 in C:\Users\MrD\AppData\Local\Temp\pip-build-rzwqmfpp\pycrypto\

How to make python3 to be able to use my VS 2015 C++ compiler?
========= UPDATE ============
I was able to install Common C++ tools for Visual Studio. Now my VC folder looks like this:

Now when I try to install my pycrypto I get these errors:
winrand.c
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(26): error C2061: syntax error: identifier 'intmax_t'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(27): error C2061: syntax error: identifier 'rem'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(27): error C2059: syntax error: ';'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(28): error C2059: syntax error: '}'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(30): error C2061: syntax error: identifier 'imaxdiv_t'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(30): error C2059: syntax error: ';'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(40): error C2143: syntax error: missing '{' before '__cdecl'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(41): error C2146: syntax error: missing ')' before identifier '_Number'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(41): error C2061: syntax error: identifier '_Number'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(41): error C2059: syntax error: ';'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(42): error C2059: syntax error: ')'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(45): error C2143: syntax error: missing '{' before '__cdecl'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(46): error C2146: syntax error: missing ')' before identifier '_Numerator'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(46): error C2061: syntax error: identifier '_Numerator'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(46): error C2059: syntax error: ';'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(46): error C2059: syntax error: ','
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(48): error C2059: syntax error: ')'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(50): error C2143: syntax error: missing '{' before '__cdecl'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(56): error C2143: syntax error: missing '{' before '__cdecl'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(63): error C2143: syntax error: missing '{' before '__cdecl'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(69): error C2143: syntax error: missing '{' before '__cdecl'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(76): error C2143: syntax error: missing '{' before '__cdecl'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(82): error C2143: syntax error: missing '{' before '__cdecl'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(89): error C2143: syntax error: missing '{' before '__cdecl'
C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(95): error C2143: syntax error: missing '{' before '__cdecl'
error: command 'C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\BIN\\x86_amd64\\cl.exe' failed with exit status 2

It says that it has syntax errors?!! Did I miss something?
","I think I have found solution for my own question. More like I have found the way how to evade this problem.
The method is to install pycryptodome instead of pycrypto. According to their description it is fully compatible with pycrypto and it installed without any conflicts.
","1571","<python><c++><visual-studio><pycrypto>","3","1","1","2017-02-21 04:23:35","42358664","0","0","3003432","","2017-02-20 10:24:59","2017-02-20 08:26:25",""
"39509330","ImportError: No module named 'Crypto.HASH' but pycryto installed","I am trying to load pycrypto module. When I do 
import Crypto

I get no error but when I do from Crypto.HASH import SHA256 , I am getting ImportError
>>> import Crypto
>>> hash = SHA256.new()
Traceback (most recent call last):
  File ""<pyshell#1>"", line 1, in <module>
    hash = SHA256.new()
NameError: name 'SHA256' is not defined
>>> from Crypto.HASH import SHA256
Traceback (most recent call last):
  File ""<pyshell#2>"", line 1, in <module>
    from Crypto.HASH import SHA256
ImportError: No module named 'Crypto.HASH'
>>> 

OS : Windows 8
Python : 3.5 32 Bit
Thank you.
","You are misspelling it, the correct module name is Crypto.Hash:
>>> from Crypto.Hash import SHA256
>>> h=SHA256.new()
>>> h.update(b""Hello"")
>>> h.hexdigest()
'185f8db32271fe25f561a6fc938b2e264306ec304eda518007d1764826381969'

","1564","<python-3.x><pycrypto>","-1","1","1","2016-09-15 11:06:37","39509536","0","","","","","2016-09-15 10:56:27",""
"21017305","In Python, is there a way to change the block size of an AES cipher?","in pycrypto documentation
http://pythonhosted.org/pycrypto/
block_size is a variable of AESCipher and set to 16.
Apparently it can't be changed
Am i right?
","Presumably there is no way to do this, because AES specifies a block size of 128 bits (16 bytes). Note that the key size is different and can vary (128, 192, or 256 bits).
From Understanding Cryptography, chapter 4.2, Overview of the AES Algorithm:

The AES cipher is almost identical to the block cipher Rijndael. The
  Rijndael block and key size vary between 128, 192 and 256 bits.
  However, the AES standard only calls for a block size of 128 bits.
  Hence, only Rijndael with a block length of 128 bits is known as the
  AES algorithm.

If you want a variant that has another block size but is otherwise identical, you should be looking at implementations of Rijndael, not AES.
","1557","<python><aes><pycrypto>","1","4","1","2014-01-09 10:23:35","","0","","20862","","2014-01-09 10:18:00","2014-01-09 10:15:43",""
"33329831","PyCrypto: Attribute Error: 'NoneType' object has no attribute 'oid' while using PKCS1_v1_5","SHA = hashlib.sha1()
Eh = SHA.update(chunk)
HRSA.signSHA(Eh,RSAprivatekey)

RSAprivatekey is read in HRSA module and passed as argument to this function:
RSAprivatekey = RSA.importKey(infile.read())

infile points to the 'privatekey.txt' which contained only the RSAprivatekey.
HRSA is a module I've created which basically does this:
def signSHA(hash, key):
    signer = PKCS1_v1_5.new(key)
    D = signer.sign(hash)
    return D

I'm being shown the following error:
File ""D:\Study\Sem V\Hybrid Encryption\Phase 2\HRSA.py"", line 57, in signSHA
    D = signer.sign(hash)
  File ""C:\Python33\lib\site-packages\Crypto\Signature\PKCS1_v1_5.py"", line 110, in sign
    em = EMSA_PKCS1_V1_5_ENCODE(mhash, k)
  File ""C:\Python33\lib\site-packages\Crypto\Signature\PKCS1_v1_5.py"", line 211, in EMSA_PKCS1_V1_5_ENCODE
    digestAlgo  = DerSequence([hash.oid, DerNull().encode()])
AttributeError: 'NoneType' object has no attribute 'oid'

How could I fix this since it's a bug with the PyCrypto code?
","hashfunc.update(arg) doesn't return anything. It's there to update the internal state of the hashing function with new input data. If you want to convert the internal state into a hash, then you need to call either hashfunc.digest() or hashfunc.hexdigest().
It would look like this:
Eh = hashlib.sha1(chunk).digest()
HRSA.signSHA(Eh, RSAprivatekey)

","1513","<python><hash><rsa><digital-signature><pycrypto>","0","1","2","2015-10-26 11:40:38","","2","","5485787","","2015-10-25 14:46:18","2015-10-25 12:43:37",""
"33329831","PyCrypto: Attribute Error: 'NoneType' object has no attribute 'oid' while using PKCS1_v1_5","SHA = hashlib.sha1()
Eh = SHA.update(chunk)
HRSA.signSHA(Eh,RSAprivatekey)

RSAprivatekey is read in HRSA module and passed as argument to this function:
RSAprivatekey = RSA.importKey(infile.read())

infile points to the 'privatekey.txt' which contained only the RSAprivatekey.
HRSA is a module I've created which basically does this:
def signSHA(hash, key):
    signer = PKCS1_v1_5.new(key)
    D = signer.sign(hash)
    return D

I'm being shown the following error:
File ""D:\Study\Sem V\Hybrid Encryption\Phase 2\HRSA.py"", line 57, in signSHA
    D = signer.sign(hash)
  File ""C:\Python33\lib\site-packages\Crypto\Signature\PKCS1_v1_5.py"", line 110, in sign
    em = EMSA_PKCS1_V1_5_ENCODE(mhash, k)
  File ""C:\Python33\lib\site-packages\Crypto\Signature\PKCS1_v1_5.py"", line 211, in EMSA_PKCS1_V1_5_ENCODE
    digestAlgo  = DerSequence([hash.oid, DerNull().encode()])
AttributeError: 'NoneType' object has no attribute 'oid'

How could I fix this since it's a bug with the PyCrypto code?
","You must use the PyCrypto module for SHA1, so:
from Crypto.Hash import SHA1
sha_obj = SHA1.new()
sha_obj.update(chunk)
HRSA.signSHA(sha_obj,RSAprivatekey)

The reason is that the PKCS#1v1.5 signature embeds the ASN.1 Object ID of the hash, but the SHA-1 object obtained from the standard library does not include/know it.
","1513","<python><hash><rsa><digital-signature><pycrypto>","0","1","2","2015-10-26 11:40:38","","2","","5485787","","2015-10-25 14:46:18","2015-10-25 12:43:37",""
"30392284","C# AES CBC PKCS7 to Python","I'm currently trying to translate a simple AES code from C# to Python. I know both of these languages pretty well, but I have no idea about the encryption field (especially AES). I wrote this AES code before in C#, but now I have no idea how to make it work in Python (I'm using PyCrypto since Python2.7 does not have built-in AES). Below is my C# code:
using System.Collections;
using System.Text;
using System.Security.Cryptography;

namespace DefaultClasses
{
    public class SimpleAES
    {
        private const string KEY = ""someKey"";
        private const string IV = ""someIV"";
        private AesCryptoServiceProvider _aes;
        private ICryptoTransform _crypto;

        public SimpleAES()
        {
            _aes = new AesCryptoServiceProvider();
            _aes.BlockSize = 128;
            _aes.KeySize = 256;
            _aes.Key = ASCIIEncoding.ASCII.GetBytes(KEY);
            _aes.IV = ASCIIEncoding.ASCII.GetBytes(IV);
            _aes.Padding = PaddingMode.PKCS7;
            _aes.Mode = CipherMode.CBC;
        }

        public string encrypt(string message)
        {
            _crypto = _aes.CreateEncryptor(_aes.Key, _aes.IV);
            byte[] encrypted = _crypto.TransformFinalBlock(
                ASCIIEncoding.ASCII.GetBytes(message), 0, ASCIIEncoding.ASCII.GetBytes(message).Length);
            _crypto.Dispose();
            return System.Convert.ToBase64String(encrypted);
        }

        public string decrypt(string message)
        {
            _crypto = _aes.CreateDecryptor(_aes.Key, _aes.IV);
            byte[] decrypted = _crypto.TransformFinalBlock(
                System.Convert.FromBase64String(message), 0, System.Convert.FromBase64String(message).Length);
            _crypto.Dispose();
            return ASCIIEncoding.ASCII.GetString(decrypted);
        }
    }
}

Please note that I want also to have BlockSize = 128, KeySize = 256, Padding = PKCS7, and Cipher CBC for Python. Thanks in advances!
","I realize this question is almost a year old but I found it when looking for some solutions to communicate with a legacy windows process that uses the PKCS7 padding in its implementation of AES.  Here is a quick example that works great for me.  Hopefully it proves useful to someone else down the line.  I had the same block size, key size, and padding as the question author specified.
from Crypto.Cipher import AES
from pkcs7 import PKCS7Encoder
import base64

shared_key = ""abc123ty9TW1abc123ty9TW1"" #some random key for a working example
IV = ""rTF25nTrrTF25nTr"" 

clear_text = ""Testing 123""
aes = AES.new(shared_key, AES.MODE_CBC, IV)
aes.block_size = 128
cipher_text = base64.b64encode(aes.encrypt(PKCS7Encoder().encode(clear_text)))
print(cipher_text)

aes_decrypter = AES.new(shared_key, AES.MODE_CBC, IV)
aes_decrypter.block_size = 128
clear_text = PKCS7Encoder().decode(aes_decrypter.decrypt(base64.b64decode(cipher_text)))
print(clear_text)

The pkcs7 padding utility I'm using was copied from a Github project:
import binascii
import StringIO

class PKCS7Encoder(object):
    def __init__(self, k=16):
       self.k = k

    ## @param text The padded text for which the padding is to be removed.
    # @exception ValueError Raised when the input padding is missing or corrupt.
    def decode(self, text):
        '''
        Remove the PKCS#7 padding from a text string
        '''
        nl = len(text)
        val = int(binascii.hexlify(text[-1]), 16)
        if val > self.k:
            raise ValueError('Input is not padded or padding is corrupt')

        l = nl - val
        return text[:l]

    ## @param text The text to encode.
    def encode(self, text):
        '''
        Pad an input string according to PKCS#7
        '''
        l = len(text)
        output = StringIO.StringIO()
        val = self.k - (l % self.k)
        for _ in xrange(val):
            output.write('%02x' % val)
        return text + binascii.unhexlify(output.getvalue())

","1508","<c#><python><encryption><aes><pycrypto>","2","3","1","2016-05-15 03:37:04","","3","2","","","","2015-05-22 08:50:15",""
"9116970","How to make Botan RSA signature verification match that of PyCrypto","I'm developing a key generator that generates RSA signatures that
are to be downloaded to the clients computer.
In the clients computer i would like to use a RSA signature and a
public key to validate the string.
What i would like to know, if you can help, is what is the algorithm
that i should use to get the signature validated or what is wrong with
my code.
[edit updated the code with the suggestion, but still no success.]
The Python code:
from Crypto.Signature import PKCS1_PSS
from Crypto.Hash import SHA
from Crypto.PublicKey import RSA
from Crypto import Random

key_priv = RSA.generate(1024)#, random_generator)
#key_priv = RSA.importKey(open('key.priv.pem.rsa').read())

key_pub  = key_priv.publickey()
n, e = key_pub.n, key_pub.e

p,q,d,u = key_priv.p, key_priv.q, key_priv.d, key_priv.u

print ""char n[] = \"""",n,""\"";""
print ""char e[] = \"""",e,""\"";""

#print ""key_pub.exportKey(): "",key_pub.exportKey()

mac = '192.168.0.106'
plugin = 'Bluetooth'
text = plugin + mac

hash = SHA.new()
hash.update(text)

#signature = key_priv.sign(hash, None, 'PKCS1')[0]
#print ""signature: "", signature

#random_generator = Random.new().read
#signature = key_priv.sign(hash, '')

signer    = PKCS1_PSS.new(key_priv)

# signature = signer.sign(hash)
signature = open('plugin_example.signature').read()

print ""type(signature)"", type(signature) #str
print ""signature: "", signature

verifier = PKCS1_PSS.new(key_pub)
if verifier.verify(hash, signature):
    print ""The signature is authentic.""
else:
    print ""The signature is not authentic.""

fd = open(""plugin_example.signature"", ""w"")
fd.write(signature)
fd.close()

fd = open(""key.pub.pem.rsa"", ""w"")
fd.write(key_pub.exportKey())
fd.close()

fd = open(""key.priv.pem.rsa"", ""w"")
fd.write(key_priv.exportKey())
fd.close()

And the C++ Code:
#include <string.h>
#include <assert.h>
#include <iostream>
#include <fstream>
#include <string>
#include <memory>
#include <vector>

#include <botan/botan.h>
#include <botan/look_pk.h>
#include <botan/rsa.h>

#include <QtCore>
#include ""lib/debug.hpp""
#include <QDebug>

#define Q(AAA) qDebug() << #AAA <<"" "" << AAA << endl;
#define P(X) std::cout << #X <<"" = "" << X << "" ""<< std::endl;

using namespace Botan;

static BigInt to_bigint(const std::string& h)
{
    return BigInt::decode((const byte*)h.data(),
                          h.length(), BigInt::Hexadecimal);
}


int main(int argc, char ** argv) {

    Botan::LibraryInitializer init;

    QByteArray mac = ""192.168.0.106"";
    QByteArray plugin = ""Bluetooth"";
    QByteArray mac_and_plugin = plugin+mac;

    QByteArray mac_and_plugin_hex = QCryptographicHash::hash ( mac_and_plugin, QCryptographicHash::Sha1 ).toHex();

    QByteArray qByteArray_sig;
    QFile file ( argv[1] );
    file.open ( QIODevice::ReadOnly );
    if ( file.isReadable() )
    {
        qByteArray_sig = file.readAll();
    }
    file.close();

    QByteArray qByteArray_sig_hex = qByteArray_sig.toHex();

    char n[] = ""137758869720100695031597743484335597584728606037599895664824678915370363634933922524373276431650126408515526550739072301333537631796375930381713667037665579467940926539847824669399430790335904629465572107797677521774814742987023253982675971904413266030976887012380999213491205226382726115118193377641942499979"";
    char e[] = ""65537"";

    BigInt big_n = to_bigint(n);// mod
    BigInt big_e = to_bigint(e);// exp
    RSA_PublicKey pub_key(big_n,big_e);

    PK_Verifier* verifier = 0;

    QStringList l;
    l.push_back(""EMSA1(SHA-1)"");
    l.push_back(""EMSA3(SHA-1)"");
    l.push_back(""EMSA4(SHA-1)"");
    l.push_back(""EMSA1(SHA-256)"");
    l.push_back(""EMSA3(SHA-256)"");
    l.push_back(""EMSA4(SHA-256)"");
    l.push_back(""EMSA3(MD5)"");

    P(qByteArray_sig.length());

    for (int i = 0 ; i < l.size(); i++) {
        if (verifier)
            delete verifier;
        verifier = get_pk_verifier(pub_key, l[i].toStdString() );

        bool is_valid = verifier->verify_message(
                            mac_and_plugin_hex.data(),mac_and_plugin_hex.length(),
                            qByteArray_sig_hex.data(), qByteArray_sig_hex.length()
                        );
        P(is_valid);

        is_valid = verifier->verify_message(
                      mac_and_plugin_hex.data(),mac_and_plugin_hex.length(),
                      qByteArray_sig.data(), qByteArray_sig.length()
                  );
        P(is_valid);

        is_valid = verifier->verify_message(
                      mac_and_plugin.data(),mac_and_plugin.length(),
                      qByteArray_sig.data(), qByteArray_sig.length()
                  );
        P(is_valid);

    }

    Q(qByteArray_sig);
    Q(qByteArray_sig_hex);;
}

","In the piece of Python code, you are creating an RSA signature that does not follow any real protocol or standard. In other words, it's raw and in most cases it is not secure.
Instead, you should use something like PSS (use the pycrypto module PKCS1_PSS here). In the Botan code, that can by verified with the EMSA4 encoding.
Alternatively you could use PKCS#1 v1.5. In Botan, that is EMSA3.
In either case, the hash algorithm must be the same at both sides.
","1475","<c++><python><rsa><pycrypto><botan>","0","1","1","2012-02-07 13:07:10","","1","1","1185744","","2012-02-07 13:07:10","2012-02-02 17:29:46",""
"10256525","Pycrypto importkey","I am running into a problem with pycrypto public key encryption. Encryption works fine when I have the private key, but when I import just the public key encryption fails:
In [85]: import Crypto.PublicKey.RSA
In [86]: key = Crypto.PublicKey.RSA.importKey(open('/etc/pki/server.pub', 'r').read())
In [87]: key.
In [87]: key.encrypt('cheese', 32)
Out[87]: ('cheese',)
Last I checked that does not look encrypted. Can anyone help me see what I am missing in the pycrypto api?
","I tested your code (with a different RSA key of course), and it seems to work correctly. Are you sure that the keyfile is a RSA public key and is not empty? What do print key and key.has_private() return?
","1457","<python><pycrypto>","-1","0","1","2012-04-21 10:32:02","","1","","1347886","","2012-04-21 05:43:42","2012-04-21 05:35:42",""
"10545222","PyCrypto generates bad signatures","I'm having major problems with PyCrypto, as the code below demonstrates. One issue is that the test case does not fail in a repeatable way, but has different causes on different platforms using different keys.
Note that the test case provides two sets of keys for Alice and Bob, the first generated by OpenSSL and the second generated by PyCrypto (uncomment the section 'Alternate keys').
The test case is a simple round trip:

Alice generates a symmetric key and encrypts the data
Alice encrypts the symmetric key with Bob's public key, then signs the encrypted key with her private key (hashes are not used in this simple test case).
Bob verifies the signature with Alice's public key and decrypts the
symmetric key with his private key.
Bob decrypts the data with the symmetric key.

Here are the results of some some sample runs:
On Linux with OpenSSL keys
attempts: 1000
 success: 0
mismatch: 0
    fail: 1000
  Bad signature = 993
  Ciphertext too large = 7

On Linux with PyCrypto keys
attempts: 1000
 success: 673
mismatch: 0
    fail: 327
  AES key must be either 16, 24, or 32 bytes long = 3
  Ciphertext too large = 324

On Windows with OpenSSL keys
attempts: 1000
 success: 993
mismatch: 0
    fail: 7
  AES key must be either 16, 24, or 32 bytes long = 3
  Bad signature = 4

On Windows with PyCrypto keys
attempts: 1000
 success: 994
mismatch: 0
    fail: 6
  AES key must be either 16, 24, or 32 bytes long = 6

Here is the test case:
from Crypto import Random
from Crypto.PublicKey import RSA
from Crypto.Cipher import AES
from Crypto.Util.number import long_to_bytes, bytes_to_long
from base64 import b64encode, b64decode

rng = Random.new().read

# openssl genrsa -out alice.rsa 1024
alice_private_key = RSA.importKey('''
-----BEGIN RSA PRIVATE KEY-----
MIICXAIBAAKBgQDcWasedZQPkg+//IrJbn/ndn0msT999kejgO0w3mzWSS66Rk3o
Nab/pjWFFp9t6hBlFuERCyyqjwFbqrk0fPeLJBsKQ3TOxDTXdLd50nIPZFgbBmtP
khKTd7tydB6GacMsLqrwI7IlJZcD7ts2quBTNgQAonkr2FJaWyJtTbb95QIDAQAB
AoGAbnIffD/w+7D5ZgCeTAKv54OTjV5QdcGI/OI1gUYrhWjfHAz7JcYms4NK1i+V
r9EfcJv8Kb/RHphZVOoItM9if5Rvaf890r4T+MUUZbl4E7LwEWBuASe6RPyI8Dao
uTOomFlKDjT5VbcBx+WOD+upmrjAwcolyLVulQ5g9Z59pW0CQQDybUKrz4EVzKMx
rpAx0gIzkvNpe/4gxXBueyWqUTASiSwojyZFY6g25KVMuW16fSsRStptm6NpumxB
XVojid7nAkEA6K/7VZd2eMq0O/MP2LT1n6dzx7130Y1g9HWbjsLTRWevGYytcD0O
ldebQxgCbLftuvkcpRtbmIjOsbji4dRfUwJBAJiQolC1+irZ6iouDZkM7U2/wWg1
HC1LlAIzhfS1u2cu5Jdx30fz+7zwEAdE+t0HQL9VODmapTC4ncBVG5EaBykCQB0L
4s8DckmP3EHjjKXbqRG+AIj9kNh60pCRodKHZYIzeDszQW9SX+C6omoUtDDIIQgH
EtlVefCnm026K7BPJ3sCQAdhylJJ/ePSiY9QriPG/KTZR2aprF8eM1UrRebH2S0S
4hZZmqYH/T/akHVxPsyuqyzoZGbVj6kauRhWbBLmpWk=
-----END RSA PRIVATE KEY-----
'''.strip())

# openssl rsa -in alice.rsa -out alice.pub -pubout
alice_public_key = RSA.importKey('''
-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDcWasedZQPkg+//IrJbn/ndn0m
sT999kejgO0w3mzWSS66Rk3oNab/pjWFFp9t6hBlFuERCyyqjwFbqrk0fPeLJBsK
Q3TOxDTXdLd50nIPZFgbBmtPkhKTd7tydB6GacMsLqrwI7IlJZcD7ts2quBTNgQA
onkr2FJaWyJtTbb95QIDAQAB
-----END PUBLIC KEY-----
'''.strip())

# openssl genrsa -out bob.rsa 1024
bob_private_key = RSA.importKey('''
-----BEGIN RSA PRIVATE KEY-----
MIICXwIBAAKBgQDddMPxMRIe34mNYbldimaZ1j4Zw/kqPHkOfbzBhp3XR254eSQO
Ne9DgaLQhw16n4o3FFP8aijlotw/LUfKosEldmiCFuZdTiMP/49a5CbQ/End+Z38
tHIzmGv7qjtkU7K8Eu/J5/y3wqBNAkfejC4j8MNxg8eBBGTq8okra8in8wIDAQAB
AoGBAKmueSAKME81iiipMyWoEPtYe9a0IOsq0Lq4vvMtmS1FTzDB6U12J/D6mGzc
vggxy+5uBfgGw3VINye1IyfxUrlbD0iycMY0dZUgm0QetOOnv8ip/cSKpAilvK+B
H4q9ES0L2M/XOZoFgSmg58HS9UJfcXz95un8WRxSvn26lH3BAkEA/VZoZmTJ5W5f
NwqxbWmOokRn+hBOl1hOvCDbRjuMKWNdQSFSmsQtjbGorNYfT4qrL4SxPbE3ogAe
Pw9zxHbWkwJBAN/IlQtCfncEZ/3wYCS2DxEbO5NPEBTUQgOGzauQ4/lzU5k73gXL
ZiHZYdwNUPY359k+E26AAEBG5A+riI1VZSECQQCYR7Jlqjv6H4g4a8MPQ54rR/dA
R0EWlExvpUhpRS4RStspZUBkK3w+agY8LlGP3Ijd/WMU9Eu+o1eLDFzIQa7lAkEA
kViwJV4M0bSU7oRfjbiJ1KyBZ04kvcKXFb9KejJjP7O+Cnqt28meDkIoo0oq2aC5
/4moCU8t2pGwstTQnitmwQJBAPSIOKujoLp23e4KCbB8ax9meY+2jaWTtf5FPpSV
tHs1WhlITxCowbjF+aWGsypitdT596cHFKAV0Om89vf6R0U=
-----END RSA PRIVATE KEY-----
'''.strip())

# openssl rsa -in bob.rsa -out bob.pub -pubout
bob_public_key = RSA.importKey('''
-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDddMPxMRIe34mNYbldimaZ1j4Z
w/kqPHkOfbzBhp3XR254eSQONe9DgaLQhw16n4o3FFP8aijlotw/LUfKosEldmiC
FuZdTiMP/49a5CbQ/End+Z38tHIzmGv7qjtkU7K8Eu/J5/y3wqBNAkfejC4j8MNx
g8eBBGTq8okra8in8wIDAQAB
-----END PUBLIC KEY-----
'''.strip())

# Alternate keys (uncomment for PyCrypto keys)
#alice_private_key = RSA.generate(1024, rng)
#alice_public_key = alice_private_key.publickey()
#bob_private_key = RSA.generate(1024, rng)
#bob_public_key = bob_private_key.publickey()

def generate(data, signature_key, encryption_key):
    # Generate encrypted data
    symmetric_key = rng(16)
    symmetric_cipher = AES.new(symmetric_key)
    padded_data = data + (' ' * (16 - divmod(len(data), 16)[1]))
    encrypted_data = bytes(symmetric_cipher.encrypt(padded_data))

    # Encrypt the symmetric key
    encrypted_key = bytes(encryption_key.encrypt(symmetric_key, None)[0])

    # Sign the encrypted key
    signature = long_to_bytes(signature_key.sign(encrypted_key, None)[0])

    return encrypted_key, signature, encrypted_data

def validate(encrypted_key, signature, encrypted_data, verification_key, decryption_key):
    # Verify the signature
    if not verification_key.verify(encrypted_key, (bytes_to_long(signature),)):
        raise Exception(""Bad signature"")

    # Decrypt the key
    symmetric_key = decryption_key.decrypt((encrypted_key,))

    # Decrypt the data
    symmetric_cipher = AES.new(symmetric_key)
    return symmetric_cipher.decrypt(encrypted_data).strip()


def test():
    attempts = 1000
    success = 0
    mismatch = 0
    fail = 0
    causes = {}
    for _ in range(attempts):
        data = b64encode(Random.new().read(16))
        try:
            encrypted_key, signature, encrypted_data = \
                generate(data, alice_private_key, bob_public_key)
            result = validate(encrypted_key, signature, 
                encrypted_data, alice_public_key, bob_private_key)
            if result == data:
                success += 1
            else:
                mismatch += 1
        except Exception as e:
            fail += 1
            reason = str(e)
            if reason in causes:
                causes[reason] += 1
            else:
                causes[reason] = 1

    print(""attempts: %d"" % attempts)
    print("" success: %d"" % success)
    print(""mismatch: %d"" % mismatch)
    print(""    fail: %d"" % fail)
    for cause, count in causes.items():
        print(""  %s = %d"" % (cause, count))


test()

Is there any reason why PyCrypto seems to be such a basket case?
","First, I would consider the cases where the OpenSSL keys are used. The most important fact is that Bob's RSA modulus (bn) is slightly smaller than Alice's RSA modulus (an).
The error Ciphertext too big shows up at the ""sender"" (that is, within the generation function). The ciphertext you ""sign"" is guaranteed
to be smaller than an (because encryption is computed modulo an) but it may sometimes (due to the plaintext being random) happen to be larger than bn. In that case, signature is not possible.
As far as I can tell, the check is performed and an exception is raised only if you have the GMP library installed, which is often the case on Linux systems.
On Windows, it is difficult to install such library, and pycrypto relies on pure python code. The exception will be not be raised in that case (though it should, the two versions should behave in the same way), and you will silently get the wrong value as signature (Bad signature).
The error AES key must be either 16, 24, or 32 bytes long shows up when your random AES
key starts with 0x00. Since the RSA primitive converts the byte string into an integer, the leading zero will lost in the process, and you will get back that error at the receiving end.
If you generate RSA keys on the fly, in 50% of the cases bn>an and you will see fewer errors.
I am not able to understand why 100% of the tests fail on Linux with OpenSSL keys, but I guess there is a similar reason to explain that.
In general (and this holds also for all other crypto libraries), the root cause of all problems is that you are using the raw RSA mechanisms. Beside considerations
about limitations and correct way to use the API, you have a big security hole. Some form of secure padding must always be used, otherwise an attacker can easily break your scheme.
In PyCrypto, proper protocols are available via the PKCS#1 modules for both RSA signatures and RSA encryption. However, mind that signature must be done on the message hash (e.g. SHA1), and encryption on a payload which is considerably smaller than the RSA modulus.
","1453","<python><pycrypto>","10","4","1","2012-05-11 16:38:20","10551348","2","","","","","2012-05-11 03:53:47",""
"52579992","pycrypto installation problem on <python 3.7,win 7>","i have a windows 7 ultimate having python 3.7 installation.
when i install pycrypto via pip install pycrypto i see an below errors:
PS C:\Windows\system32> pip install pycrypto
Collecting pycrypto

  Using cached https://files.pythonhosted.org/packages/60/db/645aa9af249f059cc3a368b118de33889219e0362141e75d4eaf6f80f163/pycrypto-2.6.1.tar.gz
Installing collected packages: pycrypto
  Running setup.py install for pycrypto: started
    Running setup.py install for pycrypto: finished with status 'error'
    Complete output from command c:\users\celik7\appdata\local\programs\python\python37\python.exe -u -c ""import setuptools, tokenize;__file__='
C:\\Users\\celik7\\AppData\\Local\\Temp\\pip-install-lqxsh35j\\pycrypto\\setup.py';f=getattr(tokenize, 'open', open)(__file__);code=f.read().rep
lace('\r\n', '\n');f.close();exec(compile(code, __file__, 'exec'))"" install --record C:\Users\celik7\AppData\Local\Temp\pip-record-c5da1tqt\inst
all-record.txt --single-version-externally-managed --compile:
    running install
    running build
    running build_py
    creating build
    creating build\lib.win-amd64-3.7
    ....................
    Skipping optional fixer: buffer
    Skipping optional fixer: idioms
    Skipping optional fixer: set_literal
    Skipping optional fixer: ws_comma
    running build_ext
    warning: GMP or MPIR library not found; Not building Crypto.PublicKey._fastmath.
    building 'Crypto.Random.OSRNG.winrandom' extension
    creating build\temp.win-amd64-3.7
    creating build\temp.win-amd64-3.7\Release
    creating build\temp.win-amd64-3.7\Release\src
    C:\Program Files (x86)\Microsoft Visual Studio\2017\BuildTools\VC\Tools\MSVC\14.15.26726\bin\HostX86\x64\cl.exe /c /nologo /Ox /W3 /GL /DNDE
BUG /MD -Isrc/ -Isrc/inc-msvc/ -Ic:\users\celik7\appdata\local\programs\python\python37\include -Ic:\users\celik7\appdata\local\programs\python\
python37\include ""-IC:\Program Files (x86)\Microsoft Visual Studio\2017\BuildTools\VC\Tools\MSVC\14.15.26726\ATLMFC\include"" ""-IC:\Program Files
 (x86)\Microsoft Visual Studio\2017\BuildTools\VC\Tools\MSVC\14.15.26726\include"" ""-IC:\Program Files (x86)\Windows Kits\NETFXSDK\4.6.1\include\
um"" ""-IC:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\ucrt"" ""-IC:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\shared"" 
""-IC:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\um"" ""-IC:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\winrt"" ""-IC:\P
rogram Files (x86)\Windows Kits\10\include\10.0.17134.0\cppwinrt"" /Tcsrc/winrand.c /Fobuild\temp.win-amd64-3.7\Release\src/winrand.obj
    winrand.c
    C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\ucrt\inttypes.h(27): error C2061: syntax error: identifier 'intmax_t'
    ................
pip.exe : Command ""c:\users\celik7\appdata\local\programs\python\python37\python.exe -u -c ""import setuptools, tokenize;__file__='C:\\Users\\cel
ik7\\AppData\\Local\\Temp\\pip-install-lqxsh35j\\pycrypto\\setup.py';f=getattr(tokenize, 'open', open)(__file__);code=f.read().replace('\r\n', '
\n');f.close();exec(compile(code, __file__, 'exec'))"" install --record C:\Users\celik7\AppData\Local\Temp\pip-record-c5da1tqt\install-record.txt
 --single-version-externally-managed --compile"" failed with error code 1 in C:\Users\celik7\AppData\Local\Temp\pip-install-lqxsh35j\pycrypto\
At line:1 char:4
+ pip <<<<  install pycrypto
    + CategoryInfo          : NotSpecified: (Command ""c:\use...sh35j\pycrypto\:String) [], RemoteException
    + FullyQualifiedErrorId : NativeCommandError

    C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\ucrt\inttypes.h(64): error C2143: syntax error: missing '{' before '__cdecl'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\ucrt\inttypes.h(70): error C2143: syntax error: missing '{' before '__cdecl'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\ucrt\inttypes.h(77): error C2143: syntax error: missing '{' before '__cdecl'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\ucrt\inttypes.h(83): error C2143: syntax error: missing '{' before '__cdecl'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\ucrt\inttypes.h(90): error C2143: syntax error: missing '{' before '__cdecl'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.17134.0\ucrt\inttypes.h(96): error C2143: syntax error: missing '{' before '__cdecl'
    error: command 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.15.26726\\bin\\HostX86\\x64\\cl.exe'
 failed with exit status 2

///////////////////////////////////////////////////////////
i have installed on win 7:
+Visual Studio Build Tools 2017(Fully)
+windows 8.1 and win 10 sdk
what can i do to solve this problem ;
","","1428","<python><pip><pycrypto>","1","","0","2018-09-30 19:01:02","","2","","7976758","","2018-09-30 19:01:02","2018-09-30 16:42:07",""
"25566799","Running setup.py install for pycrypto 'chmod' is not recognized as an internal or external command, operable program or batch file","There is python 2.7 and already pycrypto 2.6.1 inside installed. 
Env Windows 8, x64.
I get following error while installing requirements with pip (pip install -r file_with_requirements). 
Installing collected packages: pycrypto
  Found existing installation: pycrypto 2.6
    Uninstalling pycrypto:
      Successfully uninstalled pycrypto
  Running setup.py install for pycrypto
    'chmod' is not recognized as an internal or external command,
    operable program or batch file.
    Traceback (most recent call last):

I've tried with normal user and admin privileages as well.
","You need to install msys package under MinGW 

and add following entries in your PATH env variable.

C:\MinGW\bin
C:\MinGW\msys\1.0\bin [This is where you will find chmod executable]

Then run your command from normal windows command prompt.
","1419","<python><django><windows><dependencies><pycrypto>","0","0","2","2018-05-14 05:01:44","","1","","","","","2014-08-29 10:50:23",""
"25566799","Running setup.py install for pycrypto 'chmod' is not recognized as an internal or external command, operable program or batch file","There is python 2.7 and already pycrypto 2.6.1 inside installed. 
Env Windows 8, x64.
I get following error while installing requirements with pip (pip install -r file_with_requirements). 
Installing collected packages: pycrypto
  Found existing installation: pycrypto 2.6
    Uninstalling pycrypto:
      Successfully uninstalled pycrypto
  Running setup.py install for pycrypto
    'chmod' is not recognized as an internal or external command,
    operable program or batch file.
    Traceback (most recent call last):

I've tried with normal user and admin privileages as well.
","Install cygwin and setp can download from following link
http://cygwin.com/
","1419","<python><django><windows><dependencies><pycrypto>","0","0","2","2018-05-14 05:01:44","","1","","","","","2014-08-29 10:50:23",""
"49724789","How to convert a key string back into a pycrypto key object? (Python)","I am replicating a TCP client-server secure handshake in python using the pycrypto module. When the ""server"" sends the public key over the socket, I am forced to convert the public key to a string. The ""client"" then receives the public key as a string, which cannot be encrypted according the pycrypto module.
I get the error: 

AttributeError: 'str' object has no attribute 'encrypt' in reference to enc_data = public_key.encrypt(secret_piece, 12) on the client side.

How do convert the string public_key back to its original value when it was first generated by the RSA module?
Server Code:
def main():
host = '127.0.0.1'
port = 5000

s = socket.socket()
s.bind((host,port))

s.listen(1)
c, addr = s.accept()
print ""Connection from: ""+str(addr)
while True:
    data = c.recv(1024)
    if not data:
        break
    print ""from connected user: ""+str(data)

    print ""Start the SSL Handshake...""
    a = raw_input('Press enter to generate the key pair. ')

    key = RSA.generate(1024, random_generator)
    public_key = key.publickey()

    print ""Key pair generated""
    a = raw_input('Press enter to send public key to client ')

    print ""Sending key...""

    if c.send(str(public_key)):
        print ""Public Key Sent""

    print ""Waiting for secret list...""

    if c.recv(1024):
        print ""List received.""

    secret_list = c.recv(1024)

    a = raw_input('Press enter to check the information from the list. ')

    decrypted_info = key.decrypt(secret_list.enc_data)

    match_or_not = SHA256.new(decrypted_info).digest() == secret_list.hash_value

    if match_or_not:
        print ""Info Matches. Sending the ciphertext...""

    info_to_be_encrypted = ""It seems all secure. Let's talk!""
    aes = AES.new(Random.get_random_bytes(16), AES.MODE_ECB)
    cipher_text = aes.encrypt(info_to_be_encrypted)

    if c.send(cipher_text):
        print ""Ciphertext sent.""

Client Code
def main():
host = '127.0.0.1'
port = 5000

s = socket.socket()
s.connect((host,port))



message = raw_input(""-> "")
while message != 'q':
    s.send(message)
    public_key = s.recv(1024)
    print 'Received from server: '+str(public_key)

    message = raw_input(""->Press enter to verify the public key."")
    print ""Public Key verified!""
    message = raw_input(""-> Press enter to prepare the secret list."")
    print ""Client prepares the secret list.""

    secret_piece = Random.get_random_bytes(16)
    enc_data = public_key.encrypt(secret_piece, 12)
    hash_value = SHA256.new(secret_piece).digest()
    L = [enc_data, hash_value]

    print ""List is ready.""
    message = raw_input(""-> Press enter to send the list"")

    s.send(str(L))
    print ""List sent.""
    print ""Waiting for ciphertext from the server...""

    if s.recv(1024):
        print ""Ciphertext recieved.""

    cipher_text = s.recv(1024)

    print ""The encrypted message is: "" + cipher_text
    print ""The decrypted message is: "" + aes.decrypt(cipher_text)




s.close()

","Solution: exporting/importing keys using exportKey() and importKey()
Why your conversion does not work
Converting the key to a string using str() does not work, as you can see from the example below.
>>> k = RSA.generate(1024)
>>> pk = k.publickey()
>>> str(pk)
'<_RSAobj @0x10e518908 n(1024),e>'

As you can see from the example above, the function str() just returns the string '<_RSAobj @0x10e518908 n(1024),e>' which does not show the actual key.
Converting the key object into a string
A good way to convert the key into a string is to export it using a standard format, for example the well-known PEM format, as shown below.
>>> pkstring = pk.exportKey(""PEM"")
>>> pkstring
'-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC4SD0YSMWYAU27mFVKsHgtKWzM\n9jfvs2Xl+zCQpAHNtvYWTo6mnyWTwH4lGn7ulYdGx5gAJj6OlWg+CKoHXqPOh6e4\nP8DM97dM9QfP8d7el2ZCz1+5oMd8iQo+WPTM1qa5TMj9rZMpwAnSrS490LW6ZpTL\n7fChg3APljnspQ/7nQIDAQAB\n-----END PUBLIC KEY-----'

Now, the string returned by pk.exportKey(""PEM"") corresponds to the actual key.
Converting the string back to a key object
This is also very easy, you can just type:
>>> importedpk = RSA.importKey(pkstring)

Now you can use the encrypt method with the importedpk key which has been converted from the string pkstring.
To prove you that importedpk has been loaded correctly, just type the following two commands on the python interpreter.
pk.encrypt(""Hello"", 12)
importedpk.encrypt(""Hello"", 12)

They should return the same output. In particular, if you type
pk.encrypt(""Hello"", 12) == importedpk.encrypt(""Hello"", 12)

the result should be
True

How to fix your code
In server code, replace
if c.send(str(public_key)):
  print ""Public Key Sent""

with
if c.send(public_key.exportKey(""PEM"")):
  print ""Public Key Sent""

In client code, replace
public_key = s.recv(1024)

with
public_key = RSA.importKey(s.recv(1024))

","1410","<python><string><client-server><pycrypto>","1","0","2","2018-04-12 06:35:06","","3","0","6854564","","2018-04-12 06:35:06","2018-04-09 02:31:43",""
"49724789","How to convert a key string back into a pycrypto key object? (Python)","I am replicating a TCP client-server secure handshake in python using the pycrypto module. When the ""server"" sends the public key over the socket, I am forced to convert the public key to a string. The ""client"" then receives the public key as a string, which cannot be encrypted according the pycrypto module.
I get the error: 

AttributeError: 'str' object has no attribute 'encrypt' in reference to enc_data = public_key.encrypt(secret_piece, 12) on the client side.

How do convert the string public_key back to its original value when it was first generated by the RSA module?
Server Code:
def main():
host = '127.0.0.1'
port = 5000

s = socket.socket()
s.bind((host,port))

s.listen(1)
c, addr = s.accept()
print ""Connection from: ""+str(addr)
while True:
    data = c.recv(1024)
    if not data:
        break
    print ""from connected user: ""+str(data)

    print ""Start the SSL Handshake...""
    a = raw_input('Press enter to generate the key pair. ')

    key = RSA.generate(1024, random_generator)
    public_key = key.publickey()

    print ""Key pair generated""
    a = raw_input('Press enter to send public key to client ')

    print ""Sending key...""

    if c.send(str(public_key)):
        print ""Public Key Sent""

    print ""Waiting for secret list...""

    if c.recv(1024):
        print ""List received.""

    secret_list = c.recv(1024)

    a = raw_input('Press enter to check the information from the list. ')

    decrypted_info = key.decrypt(secret_list.enc_data)

    match_or_not = SHA256.new(decrypted_info).digest() == secret_list.hash_value

    if match_or_not:
        print ""Info Matches. Sending the ciphertext...""

    info_to_be_encrypted = ""It seems all secure. Let's talk!""
    aes = AES.new(Random.get_random_bytes(16), AES.MODE_ECB)
    cipher_text = aes.encrypt(info_to_be_encrypted)

    if c.send(cipher_text):
        print ""Ciphertext sent.""

Client Code
def main():
host = '127.0.0.1'
port = 5000

s = socket.socket()
s.connect((host,port))



message = raw_input(""-> "")
while message != 'q':
    s.send(message)
    public_key = s.recv(1024)
    print 'Received from server: '+str(public_key)

    message = raw_input(""->Press enter to verify the public key."")
    print ""Public Key verified!""
    message = raw_input(""-> Press enter to prepare the secret list."")
    print ""Client prepares the secret list.""

    secret_piece = Random.get_random_bytes(16)
    enc_data = public_key.encrypt(secret_piece, 12)
    hash_value = SHA256.new(secret_piece).digest()
    L = [enc_data, hash_value]

    print ""List is ready.""
    message = raw_input(""-> Press enter to send the list"")

    s.send(str(L))
    print ""List sent.""
    print ""Waiting for ciphertext from the server...""

    if s.recv(1024):
        print ""Ciphertext recieved.""

    cipher_text = s.recv(1024)

    print ""The encrypted message is: "" + cipher_text
    print ""The decrypted message is: "" + aes.decrypt(cipher_text)




s.close()

","I solved this issue by instead by pickling the public_key object using cpickle module aka pickle.dumps(public_key). The pickled object is able to travel over the socket and be ""unpickled"" by the client on the other side!
","1410","<python><string><client-server><pycrypto>","1","0","2","2018-04-12 06:35:06","","3","0","6854564","","2018-04-12 06:35:06","2018-04-09 02:31:43",""
"44746907","Converting java crypto code to python equivalent","I have been trying to convert the below java code to its python equivalent:
Encrypt.java
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.security.Key;
import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.PublicKey;
import java.security.cert.CertificateException;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.KeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.util.Arrays;
import org.apache.commons.codec.binary.Base64;
//import org.jose4j.base64url.Base64;

public class Encrypt {

    public static void main(String[] args)
            throws InvalidKeySpecException, NoSuchAlgorithmException, UnsupportedEncodingException, CertificateException, FileNotFoundException {
        PublicKey pubKey; 
        Object localObject1 = new
         String(""MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA76y3+1w4Ld9Q4WvHQkCkg6qjwq2wWOYMV9nAthX6ugatNlShRb2gBmy""
         +
         ""qvh7tOYHhjAhkG9Z33jCVinPuhgb0ioa5/sFAgP5LDdo5SBk4b4n/wRUbdMhfFFcTT0As2OsmdBc2iONUaG4g3WjgRODxy6LLahms6YgTnG+AqeDo8LpXxsiFXe""
         +
         ""iqGUyKQU1l16BPc2xyG+tDitFbKHx9pDL12e/w5b4G4Zg4yJgbNlZrGc3Udz5EbDREnAwirjAA3F6x2DF3j746vETb1g2y6+P5sS4lvG3XmaB1JBlhNh5qpqADRqmE""
         + ""MWeiYhrRcK9KjS1URSUizGPo96d8R82DmXvYKQIDAQAB"");

         //localObject1 = new X509EncodedKeySpec(Base64.decode(((String)localObject1).getBytes(""utf-8"")));
         localObject1 = new X509EncodedKeySpec(Base64.decodeBase64(((String)localObject1).getBytes(""utf-8"")));
         localObject1 = KeyFactory.getInstance(""RSA"").generatePublic((KeySpec)localObject1);
         System.out.println((PublicKey)localObject1);
         System.out.println(""___________________________________________________________________________________________________________________________________________________"");

//       String secret_pub_key= //""-----BEGIN RSA PUBLIC KEY-----"" +
//               ""MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwkvq7mHuTMGeJF/qiAot""+
//               ""OcLTd6hjDEcMHIk2IY35JInuypD6WieogOxSS6kHYho/U+BW/Cgz0XjziPIQSJZx""+
//               ""AGOrtdZrTa6n6S6I65YB2wPB93lLi/qnBmUSetEgAgM+MOfiYT8Dift9Mut+BvbE""+
//               ""iFMH163ovoiTyLDpbTYDB6InzFzu1l7G01pi/ZAc69kWrJ+yNMEUcnAerRPt30et""+
//               ""XAbKD2lC696VJa/2xtWZ5T7vwMpFLIaGFAg228ZifgwDIRFsBmwPsAsngQSGVVBo""+
//               ""Ijm3fb0PUDV4MTw+cNT0ldHbYCAWy6zgA0K7eL5LcUN8+ai7u6VMWYUT4FAvYNiP""+
//               ""IwIDAQAB"";
//               //""-----END RSA PUBLIC KEY-----"";
//          X509EncodedKeySpec pubKeySpec = new X509EncodedKeySpec(Base64.decode(secret_pub_key));
//          KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
//          PublicKey pubKey = keyFactory.generatePublic(pubKeySpec);

         Object secret_pub_key= new String(//""-----BEGIN RSA PUBLIC KEY-----"" +
                 ""MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEApzQvzc+chU92SSh2eukY""+
                 ""ycdTJArCjL4+AqW8a2lKZ2jb5g04q6FGSRJgNkuggXt7U5ys5pb+J0699vY9rzgz""+
                 ""+WmH6W/ZRZ2hAf3rtWaC1YYetD1SfmD2OGItGfkFYuppjjjKXEnTDzCBQT5IL7hd""+
                 ""lnlCfpDkcPmJWvKJU+5gJek9RanVQYXLWgtOIVrQ7LJhQEFDMuYSw+rz7+paBxNq""+
                 ""XeHTvDk/ylGtHjb3xOvbVg3DfL2z76YYX69Ae3Cd1rlqaY0IT01k3oeqNZg3638T""+
                 ""i8l+6ytwChRhtOHZh5XCaW6Cfbz2nezgYgY1qTAKK05o8Of+W/dErUt4166qnjBl""+
                 ""+wIDAQAB"");
                 //""-----END RSA PUBLIC KEY-----"";


         secret_pub_key = new X509EncodedKeySpec(Base64.decodeBase64(((String)secret_pub_key).getBytes(""utf-8"")));
         secret_pub_key =  KeyFactory.getInstance(""RSA"").generatePublic((KeySpec)secret_pub_key);
         pubKey = (PublicKey)secret_pub_key;

        Object localObject;
        Lc lc = new Lc();
        System.out.println(""\n\nlc.pub is"" + lc.pub);
        System.out.println(""\n\n\nokokokokok"" + pubKey.getEncoded());
        //byte[] arrayOfByte = new String(Base64.encodeBase64(lc.pub.getEncoded())).getBytes();
        byte[] arrayOfByte = new String(Base64.encodeBase64(pubKey.getEncoded())).getBytes();
        StringBuilder localStringBuilder1 = new StringBuilder();
        int i = 0;
        while (i < arrayOfByte.length) {
            if (arrayOfByte.length > i + 200) {
                localObject = Arrays.copyOfRange(arrayOfByte, i, i + 200);
            } else {
                localObject = Arrays.copyOfRange(arrayOfByte, i, arrayOfByte.length + 1);
            }
            StringBuilder localStringBuilder2 = new StringBuilder();
            lc.pub = (PublicKey)localObject1;
            localObject = new String((byte[])localObject);
            localStringBuilder1.append(lc.upperDot((String)localObject) + "":::"");
            i += 200;
        }
        System.out.println(""The ducking key is "" + localStringBuilder1.toString());
    }
}

Lc.java
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Signature;
import java.security.SignatureException;
import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import org.apache.commons.codec.binary.Base64;

public class Lc {
    public static PublicKey pub;
      public static PrivateKey pri;
      public byte[] by;
      public String dot;
      public Lc() {
          Object localObject = ""RSA"";
          try
          {
            localObject = KeyPairGenerator.getInstance((String)localObject);
            KeyPair localKeyPair = ((KeyPairGenerator)localObject).generateKeyPair();
            localObject = localKeyPair.getPublic();
            pub = (PublicKey)localObject;
            localObject = localKeyPair.getPrivate();
            pri = (PrivateKey)localObject;
          }
          catch (NoSuchAlgorithmException localNoSuchAlgorithmException)
          {
            localNoSuchAlgorithmException.printStackTrace();
          }
    }
      public static String upperDot(String paramString)
      {
        Object localObject = ""RSA/ECB/PKCS1Padding"";
        try
        {
          Cipher localCipher = Cipher.getInstance((String)localObject);
          localObject = pub;
          int i = 1;
          localCipher.init(i, (Key)localObject);
          localObject = paramString.getBytes();
          byte[] arrayOfByte1 = localCipher.doFinal((byte[])localObject);
          byte[] arrayOfByte2 = Base64.encodeBase64(arrayOfByte1);
          localObject = new String(arrayOfByte2);
          return (String)localObject;
        }
        catch (Exception localException)
        {
          System.out.print(localException);
        }
        return null;
      }
}

please ignore the bad design of the above 2 java files and the debug print statements
The output that the above produces, which is of interest to me is the content of the last output statement :

The ducking key is t4z2jf9GKtKvXiXCPYU3u7Y0LwQOOeQBVi+YRATc3GqyTNb085bRLUVqiNT5v/ZcZl2FZPegeN8OTG9vPbwuY1HrQ04xv0vUf3ohJORiUXwEQtoBVMDnKHib50FPZCbAZIp/1u0KgEPBV9rEe7BmHi2UGCNnp0e50G68cBPLknUinBIIYIIrw/o3U4SAT+uBdo6wyi/x0tWR3El8gJpL34JJVWzdzi4y61cPZI31gxyY19t1EzzmtqB0wnjV5RvTsavR5s3RgtBu3EV+b43poam2K0CsRyfB2lFawkZBnvRL6GzvozBpUYe4awdPbU4Pjvuju5B3zWXloQ5kMVZAkg==:::MpcHcJWhGdYrS1VLza+ereOU1ZRZ9LyVTN0KBBdQLIjYXChX1eKtRdftrF306L5BE8Ni9ibTylbcsc6tocphVpYnCvYN2eKVcEoHLyk9Iz/Cf2ikYJCUFtHh/cPnSILhwI7txdVds0Il58uDMevMnvvRntqVR7nw6UUmUVwmtFvNWVdceP61BHc9YsDMdQs8jPOeGAHWmqA2g4ODYB2W07yQhmwNIQZEmkmrfRHUd1dqM57sIWS9HdgEbrnqhyt1pIWrCxzgYbzZCuaDS/llcFsqgLBbaPpTg2qNUFi2x3r1jJ1UeJeX+y/mOhrEvBXSLmadsCYmEROIutNgoVWigg==:::

Now I want to achieve the exact same behavior through python (2.7 if that matters). I have so far relied on pycrypto and M2Crypto but neither has been helpful. 
Here's my attempt at making a python equivalent of the above :
from Crypto.PublicKey import RSA
from base64 import b64decode
from base64 import b64encode

def ecnryptorFun(key, secret):
  encrypted = key.encrypt(secret, 1)
  final_text = b64encode(encrypted[0])
  return final_text

def sayHello(body):
    url = 'https://consumer-app-development.appspot.com/api/sayHello'
    res = requests.post(url=url, data=body)
    return res.text

key64 = b'MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA76y3+1w4Ld9Q4WvHQkCkg6qjwq2wWOYMV9nAthX6ugatNlShRb2gBmyqvh7tOYHhjAhkG9Z33jCVinPuhgb0ioa5/sFAgP5LDdo5SBk4b4n/wRUbdMhfFFcTT0As2OsmdBc2iONUaG4g3WjgRODxy6LLahms6YgTnG+AqeDo8LpXxsiFXeiqGUyKQU1l16BPc2xyG+tDitFbKHx9pDL12e/w5b4G4Zg4yJgbNlZrGc3Udz5EbDREnAwirjAA3F6x2DF3j746vETb1g2y6+P5sS4lvG3XmaB1JBlhNh5qpqADRqmEMWeiYhrRcK9KjS1URSUizGPo96d8R82DmXvYKQIDAQAB'

keyDER = b64decode(key64)
keyPub = RSA.importKey(keyDER)

secret = b""MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEApzQvzc+chU92SSh2eukYycdTJArCjL4+AqW8a2lKZ2jb5g04q6FGSRJgNkuggXt7U5ys5pb+J0699vY9rzgz+WmH6W/ZRZ2hAf3rtWaC1YYetD1SfmD2OGItGfkFYuppjjjKXEnTDzCBQT5IL7hdlnlCfpDkcPmJWvKJU+5gJek9RanVQYXLWgtOIVrQ7LJhQEFDMuYSw+rz7+paBxNqXeHTvDk/ylGtHjb3xOvbVg3DfL2z76YYX69Ae3Cd1rlqaY0IT01k3oeqNZg3638Ti8l+6ytwChRhtOHZh5XCaW6Cfbz2nezgYgY1qTAKK05o8Of+W/dErUt4166qnjBl+wIDAQAB""

#secret1 = b64encode(secret)
arrayOfByte = bytearray(secret)

i = 0 
localStringBuilder1 = """"
while i < len(arrayOfByte):  
  if len(arrayOfByte) > (i+200):
    localObject = arrayOfByte[i:i+200]
  else:
    localObject = arrayOfByte[i:len(arrayOfByte)+1]
  localObj_byte_array = bytearray(localObject)
  localStringBuilder1 = localStringBuilder1 + ecnryptorFun(keyPub, str(localObject)) + ':::'
  #localStringBuilder1 = localStringBuilder1 + ecnryptorFun(encryption_key, localObj_byte_array) + ':::'
  i += 200;

print localStringBuilder1

Output of the above python code

vkqbraD/5HMvs9LG59VXCGCLUoJ0msU6fVvLMDCc8fQ41S3R3IC0EfxLCk9FoHUIGK5h90Rd0at2ROvcOVCtESAYZlYYCB1U99NqWCFLvyDBxS4uEAVHD5yv4U82Dmn/p/asi+D/GxnvP/xvyiI+tp39lWx77DuV4hlnRbltHu9f4o4cvqZ+Nn7wCzY1TBzIClT8f4lx2g9E/5+mhfkQIHejGIAMyJXl3xy+qhQSoy8DvudGQU95eGfDRdci4yqOwDeG2+QlUip627tMbttAroWQjM8jC419kFPetTlmV/RczE/vcwnyM3iEnrhB9KnjRLYEecJ8mEYU7L/TxBe+Tg==:::V1oZBPETF9ryap59T4zOwfW0/pASSCULWL8ZlvUrSlRLeaZmIxplNmewqyUnrhwIbnpDvwhmz7+2/Dd2EN4hJndRnGl7aoEX8/GJP0Kz9vL2qEDbIGQC/Dv6O75KPFZ/E06DYLcycLhNZYxudwVP9rJAhFEEMgefpY40v1+B6sqqogrGnZhfwITaqpU0FKTbHSlHUymlD6Cn4lb0yLMISG6MZRQrP5B67UkGexlpxPQTHsXcLy0vTEzMZkvdxbv4YtawNvmgeQEgD1jqIB45pOngrwp3jcs9D9Ib2hCwpOoqkwOV/YaA+XO+dkPo8BxOw5DH/jWRcksb3N65YEmlvQ==:::

Now although the above produces a very similar output but it is not the right one. Why? Because when the output of the java code above is sent to the backend, I receive a HTTP 200 OK and the expected response. 
However, when the output of the python code above is sent similarly to the backend, I receive a 500 internal server error, meaning (as per my assumption, given that all the other params, headers etc. remain exactly the same between the java and the python HTTP requests) the input to the backend was not correct and hence it broke (again please ignore the 500, I agree it should be something more meaningful and definitely not a 500)
I do not have access to the backend. It is more of a red team - blue team exercise we are doing
Also, I could possibly invoke the java code above from python and still manage to achieve the end result and get the work done, but that'd be more of a hack, which would although be sufficient, but I am more interested in knowing how exactly can I achieve the same with Python alone.
As per some suggestions in the comments below I tried this as well:
So I tried this as well:
from Crypto.Cipher import PKCS1_v1_5

def encryptMsg(secret):
    message = secret
    key = RSA.importKey(open('myPubkey.pem').read())
    cipher = PKCS1_v1_5.new(key)
    ciphertext = b64encode(cipher.encrypt(message))
    return ciphertext

and then in the while loop, this:
localStringBuilder1 = localStringBuilder1 + encryptMsg(str(localObject)) + ':::'

Still doesn't seem to work. Same results as before.
","Thanks to https://stackoverflow.com/users/1816580/artjom-b for pointing me in the right direction in the comments above. 
Ok. What works is this :
from Crypto.PublicKey import RSA
from base64 import b64decode
from base64 import b64encode
from Crypto.Cipher import PKCS1_v1_5

def encryptMsg(key, secret):
    message = secret
    cipher = PKCS1_v1_5.new(key)
    ciphertext = b64encode(cipher.encrypt(message))
    return ciphertext

from Crypto.PublicKey import RSA
from base64 import b64decode
from base64 import b64encode
from Crypto.Cipher import PKCS1_v1_5
import requests


# def ecnryptorFun(key, secret):
#   encrypted = key.encrypt(secret, 1)
#   final_text = b64encode(encrypted[0])
#   return final_text

def encryptMsg(key, secret):
    message = secret
    cipher = PKCS1_v1_5.new(key)
    ciphertext = b64encode(cipher.encrypt(message))
    return ciphertext

def sayHello(body):
    url = 'https://consumer-app-development.appspot.com/api/sayHello'
    res = requests.post(url=url, data=body)
    return res.text

# this is basically the keyString value itself
key64 = b'MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA76y3+1w4Ld9Q4WvHQkCkg6qjwq2wWOYMV9nAthX6ugatNlShRb2gBmyqvh7tOYHhjAhkG9Z33jCVinPuhgb0ioa5/sFAgP5LDdo5SBk4b4n/wRUbdMhfFFcTT0As2OsmdBc2iONUaG4g3WjgRODxy6LLahms6YgTnG+AqeDo8LpXxsiFXeiqGUyKQU1l16BPc2xyG+tDitFbKHx9pDL12e/w5b4G4Zg4yJgbNlZrGc3Udz5EbDREnAwirjAA3F6x2DF3j746vETb1g2y6+P5sS4lvG3XmaB1JBlhNh5qpqADRqmEMWeiYhrRcK9KjS1URSUizGPo96d8R82DmXvYKQIDAQAB'

keyDER = b64decode(key64)
keyPub = RSA.importKey(keyDER)

secret = b""MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEApzQvzc+chU92SSh2eukYycdTJArCjL4+AqW8a2lKZ2jb5g04q6FGSRJgNkuggXt7U5ys5pb+J0699vY9rzgz+WmH6W/ZRZ2hAf3rtWaC1YYetD1SfmD2OGItGfkFYuppjjjKXEnTDzCBQT5IL7hdlnlCfpDkcPmJWvKJU+5gJek9RanVQYXLWgtOIVrQ7LJhQEFDMuYSw+rz7+paBxNqXeHTvDk/ylGtHjb3xOvbVg3DfL2z76YYX69Ae3Cd1rlqaY0IT01k3oeqNZg3638Ti8l+6ytwChRhtOHZh5XCaW6Cfbz2nezgYgY1qTAKK05o8Of+W/dErUt4166qnjBl+wIDAQAB""    
arrayOfByte = bytearray(secret)

i = 0 
localStringBuilder1 = """"
while i < len(arrayOfByte):  
  if len(arrayOfByte) > (i+200):
    localObject = arrayOfByte[i:i+200]
  else:
    localObject = arrayOfByte[i:len(arrayOfByte)+1]
  localObj_byte_array = bytearray(localObject)
  localStringBuilder1 = localStringBuilder1 + encryptMsg(keyPub, str(localObject)) + ':::'
  i += 200;

print localStringBuilder1

And now the for the string I get the backend responds with 200 OK 
","1393","<java><python-2.7><rsa><public-key-encryption><pycrypto>","0","0","1","2017-06-25 16:11:11","44748193","5","3","980153","","2017-06-25 16:03:40","2017-06-25 13:36:51",""
"4673028","Base64 encoded output differs from as3crypto and pycrypto encryption libraries","I'm trying to use symmetric encryption to pass data from actionscript 3 (client) to python (server).
The libraries I'm using are as3crypto and pycrypto, I'm not sure if I'm using these libraries correctly.
Actionscript 3:
private function testOnInit():void {
  var t_toEnc:String = 'testtest';
  var t_byAry:ByteArray = Hex.toArray( Hex.fromString( t_toEnc ) );
  var t_key:ByteArray = Hex.toArray( Hex.fromString( 'Thisisthekey' ) );
  var t_cbc:CBCMode = new CBCMode( new BlowFishKey( t_key ), new NullPad );
  var t_enc:String;
  t_cbc.IV = Hex.toArray( '30313233' );
  t_cbc.encrypt( t_byAry );
  t_enc = Base64.encodeByteArray( t_byAry );      
  dbg( 'b64 encrypted string ' + t_enc ); //this is just a debugging function we use in our code.
}

This is the base64 encoded output of the function above.

xvVqLzV5TU4=

Now, using the same key, initialization vector, and algorithm from the pycrypto library gives me different output.
Python:
from Crypto.Cipher import Blowfish
B = Blowfish.new( 'Thisisthekey', Blowfish.MODE_CBC, '30313233' )
S = 'testtest'
X = B.encrypt( S )
import base64
Y = base64.b64encode( X )
print Y


I82NQEkSHhE=

I'm pretty sure that I'm doing something wrong with the encryption process because I can base64 encode 'testtest' on both libraries and receive the same output.
Actionscript 3:
var b:ByteArray = new ByteArray();
b.writeUTFBytes( 'testtest' );
dbg( Base64.encodeByteArray( b ) );

Yields...

dGVzdHRlc3Q=

Python:
>>> T = 'testtest'
>>> print base64.b64encode( T )

Yields

dGVzdHRlc3Q=

Could someone please encrypt and base64encode the same string with the same IV in either python or actionscript, so I know which library is actually producing the correct output?
","The problem might be in padding. ActionScript uses no padding, but Py doesn't show what padding it uses. So, it can be the reason. Try another padding (PKCS#5 for instance) with actionscript.
","1385","<encryption><pycrypto><encryption-symmetric><blowfish><as3crypto>","0","0","1","2015-08-02 12:32:56","","1","1","1816580","","2015-08-02 12:32:56","2011-01-12 19:19:10",""
"20095874","hex string to SHA256 digest in python","I have a string that contain a SHA256 digest in hexadecimal like blow:
""257612236efae809c23330ab67cf61f73aec938503f3ce126c34c6a32059f5f0""

and I want to convert it to hash.digest() that can be  like  below:
b'%v\x12#n\xfa\xe8\t\xc230\xabg\xcfa\xf7:\xec\x93\x85\x03\xf3\xce\x12l4\xc6\xa3 Y\xf5\xf0'

how can I achive this?
 I use Crypto.Hash and python 3.3.2
","Use binascii.unhexlify:
>>> import binascii
>>> binascii.unhexlify(""257612236efae809c23330ab67cf61f73aec938503f3ce126c34c6a32059f5f0"")
b'%v\x12#n\xfa\xe8\t\xc230\xabg\xcfa\xf7:\xec\x93\x85\x03\xf3\xce\x12l4\xc6\xa3 Y\xf5\xf0'

","1382","<python><python-3.x><pycrypto>","5","4","1","2013-11-20 12:22:44","20095892","0","","100297","","2013-11-20 12:22:30","2013-11-20 12:21:53",""
"18173007","Validating a DSA key pair with pycrypto ( getting pqg values )","I have an application that stores ssh keys. The user writes his private and public key into 2 text boxes and before storing them, my application is supposed to check if private key matches with the public key (using pycrypto). Validating a RSA pair was easy enough :
message = 'Encrypted message'

if 'ssh-rsa' in public_key:

    public_key_container = RSA.importKey(public_key)
    private_key_container = RSA.importKey(private_key)

    encrypted_message = public_key_container.encrypt(message, 0)
    decrypted_message = private_key_container.decrypt(encrypted_message)

    if message == decrypted_message:
        return True

I have found the code that seems to validate the DSA key pair, but I can't find how to extract the PQG values out of users public and private key :
elif 'ssh-dss' in public_key:

    q = ""?""
    p = ""?""
    g = ""?""

    pub_k = """"
    for b in bytearray(public_key, 'utf-8'):
        pub_k += str(b)

    priv_k = """"
    for b in bytearray(private_key, 'utf-8'):
        priv_k += str(b)

    params = ( long(pub_k), long(g), long(p), long(q), long(priv_k))

    key = DSA.construct(params)

    if key.verify(message, key.sign(message,3)):
        return True

Please, do not prompt me to generate a public key out of the private key using a function like ssh-keygen. I know this method, I want to do it using pycrypto.
","The current code base of PyCrypto contains some code you may find interesting:

One open pull request (link) validates RSA and DSA as they are constructed. The tests are more robust than what you show above, even though a malicious user may still craft a weak key and have it pass them.
For DSA keys, it goes like this:
# Modulus must be prime
fmt_error = not isPrime(key.p)
# Verify Lagrange's theorem for sub-group 
fmt_error |= ((key.p-1) % key.q)!=0 
fmt_error |= key.g<=1 or key.g>=key.p
fmt_error |= pow(key.g, key.q, key.p)!=1 
# Public key
fmt_error |= key.y<=0 or key.y>=key.p 
if hasattr(key, 'x'):
    fmt_error |= key.x<=0 or key.x>=key.q 
    fmt_error |= pow(key.g, key.x, key.p)!=key.y

The main branch (see lib/Crypto/PublicKey/DSA.py) has code to import DSA keys in SSH format:
if extern_key.startswith(b('ssh-dss ')):
    # This is probably a public OpenSSH key
    keystring = binascii.a2b_base64(extern_key.split(b(' '))[1])
    keyparts = []
    while len(keystring) > 4:
        length = struct.unpack("">I"", keystring[:4])[0]
        keyparts.append(keystring[4:4 + length])
        keystring = keystring[4 + length:]
    if keyparts[0] == b(""ssh-dss""):
        tup = [bytes_to_long(keyparts[x]) for x in (4, 3, 1, 2)]
        return self.construct(tup)


","1355","<python><validation><ssh><pycrypto><dsa>","1","2","1","2013-11-06 20:49:26","18195763","0","","759866","","2013-11-06 20:49:26","2013-08-11 14:31:02",""
"7563732","What is the best way to encode string by public-key in python","Is there any way to encode string by public-key?
I found two packages, pycrypto and m2crypto.
But I can not find how to use them.
","To encode a string using public key:
#!/usr/bin/env python 
from M2Crypto import RSA, X509

x509 = X509.load_cert(""recipient_cert.pem"")
rsa = x509.get_pubkey().get_rsa()
print rsa.public_encrypt(""your string to encrypt"", RSA.pkcs1_oaep_padding)

","1344","<python><public-key-encryption><private-key><pycrypto>","0","1","1","2016-11-12 21:22:17","","4","0","520771","","2011-09-27 05:46:09","2011-09-27 02:59:16",""
"30102357","PyCrypto export/import of signature","created a client-server application with sockets and I am trying to transfer the signature from client to server. I convert it from tuple to string and then back to tuple. But signing stops working. How to resolve this?
from Crypto.Hash import SHA256
from Crypto.PublicKey import RSA

public_key_file = open('public.pem','r')
public_key = RSA.importKey(public_key_file.read())

signature = ""(90392831408741910958006452852395405116864328891950288888434929210668328849466319419951775157374761930395371626801844365799774616689823184955256615103504859356914334395152128600862146719619859327119380994333493461955529620578485576675021993313219918726432622856542420570716350341841652548574072964446809201965L,)""
signature_tuple = signature.split("","")
message = ""Block_Height:1 From:c52030257a864a67ae4ef8a726282ed2b6b273fbccb474885027a857 To:2 Amount:3""

if public_key.verify(message, signature_tuple) == True:
    print ""Signature valid""

.
Traceback (most recent call last):
  File ""C:\Users\kucerjan\Desktop\test\sco\public_test.py"", line 12, in <module>
    if public_key.verify(message, signature_tuple) == True:
  File ""build\bdist.win32\egg\Crypto\PublicKey\RSA.py"", line 221, in verify
    return pubkey.pubkey.verify(self, M, signature)
  File ""build\bdist.win32\egg\Crypto\PublicKey\pubkey.py"", line 126, in verify
    return self._verify(M, signature)
  File ""build\bdist.win32\egg\Crypto\PublicKey\RSA.py"", line 257, in _verify
    return self.key._verify(m, s)
  File ""build\bdist.win32\egg\Crypto\PublicKey\_slowmath.py"", line 73, in _verify
    return self._encrypt(sig) == m
  File ""build\bdist.win32\egg\Crypto\PublicKey\_slowmath.py"", line 65, in _encrypt
    return pow(m, self.e, self.n)
TypeError: unsupported operand type(s) for pow(): 'str', 'long', 'long'

This signature is already converted to string using str(signature). I basically need to convert it to string and back.
Function reference: https://www.dlitz.net/software/pycrypto/api/current/Crypto.PublicKey.RSA._RSAobj-class.html#verify
Public key:
-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFiMH7Lbd4JPFug8TaxX1DT8ad
lzzGm7CG1js0IQn2pCPPWBS+io1i0iUPmj78IOtUuoBqtEYGPgwqguYHozBuvdJy
Lcz4C2bYcjb2l8mQ4PM7iaCN4eHB+4xa+iJduogTjq8gx5m3j5mttEGUbZc2Q/AO
yde592P2iuRIrXcLuwIDAQAB
-----END PUBLIC KEY-----

","The problem is in deserializing the signature tuple.
PyCrypto is expecting a tuple with an integer as the first value, you are passing it a string with a beginning paren ""("" and then a string version of a number.
Instead of doing this:
signature_tuple = signature.split("","")

do this
signature_tuple = eval(signature)

That will properly parse the signature.
Now, there are security risks with using eval. So, if I were you, I'd come up with a better serialization/deserialization process.
","1344","<python><rsa><signature><pycrypto>","1","3","2","2016-04-10 22:04:35","30102463","0","","1285942","","2015-05-07 13:50:07","2015-05-07 12:16:38",""
"30102357","PyCrypto export/import of signature","created a client-server application with sockets and I am trying to transfer the signature from client to server. I convert it from tuple to string and then back to tuple. But signing stops working. How to resolve this?
from Crypto.Hash import SHA256
from Crypto.PublicKey import RSA

public_key_file = open('public.pem','r')
public_key = RSA.importKey(public_key_file.read())

signature = ""(90392831408741910958006452852395405116864328891950288888434929210668328849466319419951775157374761930395371626801844365799774616689823184955256615103504859356914334395152128600862146719619859327119380994333493461955529620578485576675021993313219918726432622856542420570716350341841652548574072964446809201965L,)""
signature_tuple = signature.split("","")
message = ""Block_Height:1 From:c52030257a864a67ae4ef8a726282ed2b6b273fbccb474885027a857 To:2 Amount:3""

if public_key.verify(message, signature_tuple) == True:
    print ""Signature valid""

.
Traceback (most recent call last):
  File ""C:\Users\kucerjan\Desktop\test\sco\public_test.py"", line 12, in <module>
    if public_key.verify(message, signature_tuple) == True:
  File ""build\bdist.win32\egg\Crypto\PublicKey\RSA.py"", line 221, in verify
    return pubkey.pubkey.verify(self, M, signature)
  File ""build\bdist.win32\egg\Crypto\PublicKey\pubkey.py"", line 126, in verify
    return self._verify(M, signature)
  File ""build\bdist.win32\egg\Crypto\PublicKey\RSA.py"", line 257, in _verify
    return self.key._verify(m, s)
  File ""build\bdist.win32\egg\Crypto\PublicKey\_slowmath.py"", line 73, in _verify
    return self._encrypt(sig) == m
  File ""build\bdist.win32\egg\Crypto\PublicKey\_slowmath.py"", line 65, in _encrypt
    return pow(m, self.e, self.n)
TypeError: unsupported operand type(s) for pow(): 'str', 'long', 'long'

This signature is already converted to string using str(signature). I basically need to convert it to string and back.
Function reference: https://www.dlitz.net/software/pycrypto/api/current/Crypto.PublicKey.RSA._RSAobj-class.html#verify
Public key:
-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFiMH7Lbd4JPFug8TaxX1DT8ad
lzzGm7CG1js0IQn2pCPPWBS+io1i0iUPmj78IOtUuoBqtEYGPgwqguYHozBuvdJy
Lcz4C2bYcjb2l8mQ4PM7iaCN4eHB+4xa+iJduogTjq8gx5m3j5mttEGUbZc2Q/AO
yde592P2iuRIrXcLuwIDAQAB
-----END PUBLIC KEY-----

","The best way is to use PKCS1_v1_5 for real applications in combination with base64 for encoding and decoding the signature between client and server. No eval is needed.
from Crypto.Signature import PKCS1_v1_5
from Crypto.Hash import SHA
from Crypto.PublicKey import RSA
import base64

message = 'To be signed'
key = RSA.importKey(open('privkey.der').read())
h = SHA.new(message)
signer = PKCS1_v1_5.new(key)
signature = signer.sign(h)
signature_enc = str(base64.b64encode(signature))
#print signature_enc


signature_dec = str(base64.b64decode (signature_enc))
#print sugnature_dec
key = RSA.importKey(open('pubkey.der').read())
h = SHA.new(message)
verifier = PKCS1_v1_5.new(key)
if verifier.verify(h, signature_dec):
   print ""The signature is authentic.""
else:
   print ""The signature is not authentic.""

","1344","<python><rsa><signature><pycrypto>","1","1","2","2016-04-10 22:04:35","30102463","0","","1285942","","2015-05-07 13:50:07","2015-05-07 12:16:38",""
"44063683","Using Pycryptodome library for python, I am getting a TypeError: Only byte strings can be passed to C code"" whenever I try to decrypt","def aes128_decrypt(self, msg):
    iv = os.urandom(16)
    aes_obj = AES.new(self.key, AES.MODE_CBC, iv)
    decrypted_msg = aes_obj.decrypt(msg)
    return decrypted_msg

I am using this to decrypt and msg is being passed in as a bytearray.  I am using Python 3 and the pycryptodome library for AES128 encryption.  The error I am seeing is:
msg = bytearray(b'M\xb1\xbfw\xf4o\x15\xff\xda{u\xba)\xcd\x9fu\x80\xb2\x0c*s\x17%6\xfeA\xb84\xab\x89\xff\x16A\xb8')

def expect_byte_string(data):
    if not byte_string(data) and not isinstance(data, Array):
        raise TypeError(""Only byte strings can be passed to C code"")
        TypeError: Only byte strings can be passed to C code

","The message to decrypt must be a bytes object, not a bytearray.
In your second snipped, try to define msg directly as:
msg = b'M\xb1\xbfw\xf4o\x15\xff\xda{u\xba)\xcd\x9fu\x80\xb2\x0c*s\x17%6\xfeA\xb84\xab\x89\xff\x16A\xb8'

","1341","<python><python-3.x><pycrypto><pycryptodome>","0","0","2","2017-11-21 05:01:39","","0","","","","","2017-05-19 07:11:41",""
"44063683","Using Pycryptodome library for python, I am getting a TypeError: Only byte strings can be passed to C code"" whenever I try to decrypt","def aes128_decrypt(self, msg):
    iv = os.urandom(16)
    aes_obj = AES.new(self.key, AES.MODE_CBC, iv)
    decrypted_msg = aes_obj.decrypt(msg)
    return decrypted_msg

I am using this to decrypt and msg is being passed in as a bytearray.  I am using Python 3 and the pycryptodome library for AES128 encryption.  The error I am seeing is:
msg = bytearray(b'M\xb1\xbfw\xf4o\x15\xff\xda{u\xba)\xcd\x9fu\x80\xb2\x0c*s\x17%6\xfeA\xb84\xab\x89\xff\x16A\xb8')

def expect_byte_string(data):
    if not byte_string(data) and not isinstance(data, Array):
        raise TypeError(""Only byte strings can be passed to C code"")
        TypeError: Only byte strings can be passed to C code

","TypeError: Only byte strings can be passed to C code
use A prefix of 'b' or 'B' 

or
bytes(s, encoding = ""utf8"")  # str to bytes

Example：
# coding: utf-8
from Crypto.Cipher import AES
import base64
pad_it = lambda s: bytes(s+(16 - len(s)%16)*PADDING, encoding='utf8')
key = b'1234567812345678'
iv = b'1234567812345678'
source = 'Test String'
generator = AES.new(key, AES.MODE_CBC, iv)
crypt = generator.encrypt(pad_it(source))
cryptedStr = base64.b64encode(crypt)

","1341","<python><python-3.x><pycrypto><pycryptodome>","0","0","2","2017-11-21 05:01:39","","0","","","","","2017-05-19 07:11:41",""
"32314622","Paramiko start_server Not Working","I created a program for accessing a server via Paramiko and sockets. 
#make imports
from socket import *
from datetime import datetime
from pickle import load, dump
from Crypto.Hash import SHA256
from subprocess import check_output as exeCMD
from sqlite3 import connect as SQLconnect
import paramiko, sys, threading, os

#get password from file
pasword = load(open(""usrData/pswd.txt"", ""rb""))

#class for initiating server connection with client
class Server(paramiko.ServerInterface):
    #initialize object
    def __init__(self):
        self.event = threading.Event()
    #check password for user entry
    def check_auth_password(self, username, password):
        #where the error is
        givenpswdHash = SHA256.new(password)
        print(givenpswdHash.hexdigest())
        if (username in unameList) and (givenpswdHash.hexdigest() == pasword):
            return paramiko.AUTH_SUCCESSFUL
        return paramiko.AUTH_FAILED

#what to execute in command line
def terminal(hostIP, hostPort, hostKeyPath, hostKeyPswd):
    #create sockets before this etc...
    #create server instance
    server = Server()
    #get server onto session
    #where we call out server function
    session.start_server(server=server)
    #continue talking to client

When I launch the server, and get a client to connect to it, I get this error : 
No handlers could be found for logger ""paramiko.transport""
Traceback (most recent call last):
  File ""./terminalServer.py"", line 212, in <module>
    main()
  File ""./terminalServer.py"", line 209, in main
    terminal(ip, port, keyPath, keyPswd)
  File ""./terminalServer.py"", line 142, in terminal
    session.start_server(server=server)
  File ""/usr/local/lib/python2.7/dist-packages/paramiko/transport.py"", line 471, in start_server
    raise e
ValueError: CTR mode needs counter parameter, not IV

It has something to do with the Crypto I added for password authentication. If anyone knows howto solve this issue, please
leave a comment. Thank you in advance.
","All I had to do is replace all the alpha versions of pycrypto with the stable version. The current stable version (Sept. 1st 2015) for pycrypto is 2.6.1 and for paramiko it's 1.14.2.
","1333","<python-2.7><paramiko><pycrypto>","3","2","1","2017-02-24 22:05:58","32321990","6","","3520669","","2017-02-24 22:05:58","2015-08-31 15:20:49",""
"43373511","How to set block size in PyCrypto AES CTR Mode","I am trying to get AES encryption to work through the PyCrypto library in Python.
I read in the password from the user and salt from a file.
I then call PBKDF2 to generate a key from the textual password
PBKDF2(self.master_password, salt, 32)

I then generate an IV using the Random.get_random_bytes
IV = Random.get_random_bytes(len(key))

I then create a Counter from the Crypto.Util package
ctr = Counter.new(32, IV)

Then I create an AES object
e = AES.new(key, AES.MODE_CTR, counter=ctr)

However when I call e to encrypt
e.encrypt(user_name)

I get the following error
CTR counter function returned string not of length 16

From the way I understand this error means that the block cipher is 16 bytes which matches with the documentation I found at
https://www.dlitz.net/software/pycrypto/api/current/Crypto.Cipher.AES-module.html
I tried changing it to a 32 byte block size by create the AES object like this
AES_Encryptor = AES.new(key, AES.MODE_CTR, counter=ctr, block_size=32)

but then I get the following error
'block_size' is an invalid keyword argument for this function

If someone could point me towards the right direction that'd be great.
","AES is a block cipher with a fixed block size of 128 bit (16 byte). It has three valid key sizes of 128 bit, 192 bit and 256 bit. A nonce for CTR mode, also called IV sometimes, needs to be at most as long as the block size which is 16 bytes. 
If you want a 256 bit block size, you can't use AES. There are several other algorithms that permit a 256 bit block size such as Rijndael, but there is no implementation of that in pycrypto. AES is a subset of Rijndael.
Usually, we generate a nonce of either 64 bit or 96 bit for CTR mode in order to have some control over how many blocks we can encryption without a counter collision.
nonce = Random.get_random_bytes(8)  # 8 bytes
ctr = Counter.new(64, nonce)        # 64 bits remaining

or
nonce = Random.get_random_bytes(12) # 12 bytes
ctr = Counter.new(32, nonce)        # 32 bits remaining

For a 64 bit nonce, you can encrypt at most 264 blocks before running into problems. That's more than any data in the world, but the issue is that by choosing the nonce at random, you have a probability of 1 to get a nonce collision after 232 encryptions with the same key due to the birthday paradox.
For 96 bit nonces, you can encryption at most 232 blocks which is roughly 68 GB of data, but you have a much lower chance of getting a nonce collision.
The nonce is not secret, so you can send it along with the ciphertext. Usually, it is simply prepended to the ciphertext and sliced off before decryption. Since you know how long it is supposed to be, you know how much you can slice off.
","1331","<python><encryption><aes><pycrypto><ctr-mode>","2","4","1","2017-04-12 18:28:51","43376881","3","","1816580","","2017-04-12 18:21:11","2017-04-12 15:15:24",""
"10985222","import pycrypto in dev_appserver.py on Google App Engine gives IOError","I am trying to test a Google App Engine app with dev_appserver.py, but when I run import Crypto I get the following excerpted from the IOError (i.e. No access) traceback:
...
import Crypto
...
File ""/System/Library/Frameworks/Python.framework/Versions
      /2.7/lib/python2.7/zipfile.py"", line 867, in read
    return self.open(name, ""r"", pwd).read()
  File ""/System/Library/Frameworks/Python.framework/Versions
        /2.7/lib/python2.7/zipfile.py"", line 882, in open
    zef_file = open(self.filename, 'rb')
  File ""/Applications/GoogleAppEngineLauncher.app/Contents/Resources/
       GoogleAppEngine-default.bundle/Contents/Resources/google_appengine/google
       /appengine/tools/dev_appserver_import_hook.py"", line 592, in __init__
    raise IOError(errno.EACCES, 'file not accessible', filename)
IOError: [Errno 13] file not accessible: '/Library/Python/2.7/site-packages
                                    /pycrypto-2.3-py2.7-macosx-10.7-intel.egg'

I am on Mac OS X 10.7, with Google App Engine 1.6.6 using Python 2.7.
Since PyCrypto is supported on Google App Engine, I would expect it to work on the development server.
I am aware that dev_appserver.py prevents loading external files. However, I noted that appengine/tools/dev_appserver_import_hook.py seems to have all the requisite files in the whitelist (e.g._fastmath).
Note, in app.yaml I have
libraries: 
- name: pycrypto
  version: latest

It seems as though I am missing something obvious but crucial. Any thoughts would be appreciated.

EDIT For more details see: https://code.google.com/p/googleappengine/issues/detail?id=12129
","Yes, you have to install the third-party library yourself.
Google explains exactly which versions the provide on their platform,
so this should not be any problem.
","1328","<google-app-engine><pycrypto>","4","1","2","2017-08-05 15:24:46","","3","","19212","","2015-09-29 15:33:14","2012-06-11 18:03:44",""
"10985222","import pycrypto in dev_appserver.py on Google App Engine gives IOError","I am trying to test a Google App Engine app with dev_appserver.py, but when I run import Crypto I get the following excerpted from the IOError (i.e. No access) traceback:
...
import Crypto
...
File ""/System/Library/Frameworks/Python.framework/Versions
      /2.7/lib/python2.7/zipfile.py"", line 867, in read
    return self.open(name, ""r"", pwd).read()
  File ""/System/Library/Frameworks/Python.framework/Versions
        /2.7/lib/python2.7/zipfile.py"", line 882, in open
    zef_file = open(self.filename, 'rb')
  File ""/Applications/GoogleAppEngineLauncher.app/Contents/Resources/
       GoogleAppEngine-default.bundle/Contents/Resources/google_appengine/google
       /appengine/tools/dev_appserver_import_hook.py"", line 592, in __init__
    raise IOError(errno.EACCES, 'file not accessible', filename)
IOError: [Errno 13] file not accessible: '/Library/Python/2.7/site-packages
                                    /pycrypto-2.3-py2.7-macosx-10.7-intel.egg'

I am on Mac OS X 10.7, with Google App Engine 1.6.6 using Python 2.7.
Since PyCrypto is supported on Google App Engine, I would expect it to work on the development server.
I am aware that dev_appserver.py prevents loading external files. However, I noted that appengine/tools/dev_appserver_import_hook.py seems to have all the requisite files in the whitelist (e.g._fastmath).
Note, in app.yaml I have
libraries: 
- name: pycrypto
  version: latest

It seems as though I am missing something obvious but crucial. Any thoughts would be appreciated.

EDIT For more details see: https://code.google.com/p/googleappengine/issues/detail?id=12129
","The best way to get through this is create a virtual environment and install the pycrypto inside that. The reason your libraries inside app.yaml is not detected is most probably because you have multiple versions of python installed in your machine and the version you used to run the program might not be the same version where you installed the libraries
","1328","<google-app-engine><pycrypto>","4","0","2","2017-08-05 15:24:46","","3","","19212","","2015-09-29 15:33:14","2012-06-11 18:03:44",""
"15623417","Encrypt/Decrypt an animated gif in Python without storing the final copy to HD","Okay, let's try this again.
I'm trying to encrypt an animated gif with PyCrypto to be sent to someone. After the receiver gets it, they should be able to run my pycrypto script and view the animated image- WITHOUT storing the unencrypted file to the hard drive. Essentially I'm trying to save the unencrypted file in-memory so that it can be accessed by another library without saving it to the disk. 
For encryption I've been using
import os, random, struct
from Crypto.Cipher import AES

def encrypt_file(key='8c57d066796428d5a8f4b012155dad90', in_filename='tile.png', out_filename=None, chunksize=8192):
    """""" Encrypts a file using AES (CBC mode) with the
        given key.

        key:
            The encryption key - a string that must be
            either 16, 24 or 32 bytes long. Longer keys
            are more secure.

        in_filename:
            Name of the input file

        out_filename:
            If None, '<in_filename>.enc' will be used.

        chunksize:
            Sets the size of the chunk which the function
            uses to read and encrypt the file. Larger chunk
            sizes can be faster for some files and machines.
            chunksize must be divisible by 16.
    """"""
    if not out_filename:
        out_filename = in_filename + '.enc'

    iv = ''.join(chr(random.randint(0, 0xFF)) for i in range(16))
    encryptor = AES.new(key, AES.MODE_CBC, iv)
    filesize = os.path.getsize(in_filename)

    with open(in_filename, 'r') as infile:
        with open(out_filename, 'w') as outfile:
            outfile.write(struct.pack('<Q', filesize))
            outfile.write(iv)

            while True:
                chunk = infile.read(chunksize)
                if len(chunk) == 0:
                    break
                elif len(chunk) % 16 != 0:
                    chunk += ' ' * (16 - len(chunk) % 16)

                outfile.write(encryptor.encrypt(chunk))

, but that doesn't seem to be doing anything at all. I don't even know where to begin on the decryption part because again, I need to be able to access the decrypted file without storing it to the hard drive.
Thanks guys.
","How about using StringIO instead of an actual disc file called out_filename? 
Just use a virtual disc with the same structure.  
Example:
import StringIO

f=StringIO.StringIO()

for line in ['line {}\n'.format(i) for i in range(25)]:
    f.write(line)

f.seek(0)

for line in f:
    print line.strip() 

So you would need to replace with open(out_filename, 'w') as outfile: ... with a call to outfile=StringIO.StringIO() and the rest should be the same.
Like so:
with open(in_filename, 'r') as infile:
    outfile=StringIO.StringIO()
    outfile.write(struct.pack('<Q', filesize))
    outfile.write(iv)

    while True:
        chunk = infile.read(chunksize)
        if len(chunk) == 0:
            break
        elif len(chunk) % 16 != 0:
            chunk += ' ' * (16 - len(chunk) % 16)

        outfile.write(encryptor.encrypt(chunk)) 

","1326","<python><encryption><pycrypto><in-memory>","3","3","1","2013-03-25 20:25:49","15623505","3","","57318","","2013-03-25 19:53:15","2013-03-25 19:47:14",""
"12380163","DCPcrypt encryption decrypt in PyCrypto","I am working to decrypt data that was encrypted with DCPcrypt using Rijndael.  I wanted to use Python to decrypt it but I'm running into issues.  I'll mention that I'm not particularly crypto savvy (I took a college course, but that's about it) and I'm also not a Delphi programmer, so that is also probably hindering my efforts to decipher what precisely DCPcrypt is doing.
This is the meat of the Delphi code:
Cipher: TDCP_rijndael;
begin
Cipher:= TDCP_rijndael.Create(nil);
Cipher.InitStr(PasswordField.Text);
Cipher.EncryptCBC(encryptString[1],encryptString[1],Length(encryptString));

So the implementation uses a key (obtained from the password field) but no IV.  PyCrypto on the other hand requires an IV.  Searching through the internals of the DCPcrypt code, it appears that if the IV is nil, then an ECB encryption is used to populate the IV from a string of 0xff?
procedure TDCP_rijndael.Init(var Key; Size: longint; IVector: pointer);
....
  if IVector= nil then
  begin
    FillChar(IV,Sizeof(IV),$FF);
    {$IFDEF CFORM}Encrypt(IV,IV){$ELSE}RijndaelEncryptECB(Data,IV,IV){$ENDIF};
    Move(IV,LB,Sizeof(LB));
  end

It appears that I'm using a static IV.  However, I am not able to make this work.  Here's my implementation in PyCrypto.  Any ideas what I'm doing wrong?
key = ""password""
s = hashlib.sha1()
s.update(key)
key = s.digest()
key = key[:16]

# Set up the IV, note that in ECB the third parameter to the AES.new function is ignored since ECB doesn't use an IV
ecb = AES.new(key, AES.MODE_ECB, '\xff' * 16)
iv = ecb.encrypt('\xff' * 16)

cipher = AES.new(key, AES.MODE_CFB, iv)
msg = cipher.decrypt(ct[:16])

I have some plain text that was encrypted using the Delphi code and then base64 encoded.  The key used was the string password, as hardcoded in above.  Using my implementation, I decrypt a bunch of garbled bytes.
k8b+uce5Fkp7Hbk/CaGYcuEWTfxlI05as88lJL0mHmJxLsKWqki2YwiFPU9Rx8qiUC2cvWZrQIOnkw==
Any help is greatly appreciated.
","A random assortment of suggestions and thoughts:

Static IVs are generally a security risk as they open the door to known plaintext attacks.
Looking at the dcpcrypt source, it looks like there is a method to specify an IV. Any reason not to, if for no other reason than to eliminate incorrect IV as an error source?
Likewise, you could experiment with ECB instead of CBC to eliminate the IV altogether and isolate whether the problem is in the IV or elsewhere (key, data, or configuration).

","1324","<python><delphi><encryption><pycrypto>","1","0","2","2012-09-13 14:13:59","","8","","","","","2012-09-12 01:42:01",""
"12380163","DCPcrypt encryption decrypt in PyCrypto","I am working to decrypt data that was encrypted with DCPcrypt using Rijndael.  I wanted to use Python to decrypt it but I'm running into issues.  I'll mention that I'm not particularly crypto savvy (I took a college course, but that's about it) and I'm also not a Delphi programmer, so that is also probably hindering my efforts to decipher what precisely DCPcrypt is doing.
This is the meat of the Delphi code:
Cipher: TDCP_rijndael;
begin
Cipher:= TDCP_rijndael.Create(nil);
Cipher.InitStr(PasswordField.Text);
Cipher.EncryptCBC(encryptString[1],encryptString[1],Length(encryptString));

So the implementation uses a key (obtained from the password field) but no IV.  PyCrypto on the other hand requires an IV.  Searching through the internals of the DCPcrypt code, it appears that if the IV is nil, then an ECB encryption is used to populate the IV from a string of 0xff?
procedure TDCP_rijndael.Init(var Key; Size: longint; IVector: pointer);
....
  if IVector= nil then
  begin
    FillChar(IV,Sizeof(IV),$FF);
    {$IFDEF CFORM}Encrypt(IV,IV){$ELSE}RijndaelEncryptECB(Data,IV,IV){$ENDIF};
    Move(IV,LB,Sizeof(LB));
  end

It appears that I'm using a static IV.  However, I am not able to make this work.  Here's my implementation in PyCrypto.  Any ideas what I'm doing wrong?
key = ""password""
s = hashlib.sha1()
s.update(key)
key = s.digest()
key = key[:16]

# Set up the IV, note that in ECB the third parameter to the AES.new function is ignored since ECB doesn't use an IV
ecb = AES.new(key, AES.MODE_ECB, '\xff' * 16)
iv = ecb.encrypt('\xff' * 16)

cipher = AES.new(key, AES.MODE_CFB, iv)
msg = cipher.decrypt(ct[:16])

I have some plain text that was encrypted using the Delphi code and then base64 encoded.  The key used was the string password, as hardcoded in above.  Using my implementation, I decrypt a bunch of garbled bytes.
k8b+uce5Fkp7Hbk/CaGYcuEWTfxlI05as88lJL0mHmJxLsKWqki2YwiFPU9Rx8qiUC2cvWZrQIOnkw==
Any help is greatly appreciated.
","DISCLAIMER: I'm extremely new to Python, but try this:
Try changing
key = key[:16]

to
key = key + bytes([0,0,0,0])

This will give you a 24 byte key which, I think, should work.
DCP allows any length of key whereas Crypto insists on keys of 16, 24 or 32 bytes. By default DCP will use SHA1 to generate the key, which is then 20 bytes long. Based on this DCP uses logic for keylength <= 24 and just zero pads the key rather than logic for keylength <= 16 which is the effect that key[:16] is having. 
Also, don't know if this is just a typo but try changing the AES mode
cipher = AES.new(key, AES.MODE_CFB, iv)

to
cipher = AES.new(key, AES.MODE_CBC, iv)

That will give a decryption of your input. But then you'll need to consider padding of the original source text because DCP does not pad (I think) but Crypto requires multiples of 16 for decryption.
","1324","<python><delphi><encryption><pycrypto>","1","0","2","2012-09-13 14:13:59","","8","","","","","2012-09-12 01:42:01",""
"23175354","No module named pycrypto with Paramiko","On my Raspberry Pi I have installed Paramiko. When I installed it, it came up with an error, something like ""pycrypto didn't install"". I then used pip and easy_install to try and install pycrypto, but an error comes up with that, something like failed with error code 1 in /root/build/crypto
How can I install pycrypto?
I am using a Raspberry Pi with Raspbian Wheezy.
","Fixed it!
I did: sudo apt-get install python-dev and then installed pycrypto again with pip. That worked!
","1313","<python><raspberry-pi><pycrypto>","2","1","1","2015-09-06 15:43:01","","0","2","","","","2014-04-19 20:48:39",""
"23900280","How can I encrypt .docx files with AES & pycrypto without corrupting the files","I've got this bit of python code that I want to use to encrypt various kinds of files with AES 256. I am using the pycrypto module. It works fine for most files (exe, deb, jpg, pdf, txt) but when it comes to office files (docx, xlsx, ppt etc) the file is corrupted upon decryption and will no open (nor can it be repaired) in LibreOffice. I am using Linux mint, python 2.7.6, pycrypto 2.6.1. I'm still a bit of a noob so I'd appreciate it if you could give me code examples of the corrections you'd recommend.
Thanks
from Crypto import Random
from Crypto.Cipher import AES
import os

def pad(s):
    return s + b""\0"" * (AES.block_size - len(s) % AES.block_size)

def encrypt(message, key, key_size=256):
    message = pad(message)
    iv = Random.new().read(AES.block_size)
    cipher = AES.new(key, AES.MODE_CBC, iv)
    return iv + cipher.encrypt(message)

def decrypt(ciphertext, key):
    iv = ciphertext[:AES.block_size]
    cipher = AES.new(key, AES.MODE_CBC, iv)
    plaintext = cipher.decrypt(ciphertext[AES.block_size:])
    return plaintext.rstrip(b""\0"")

def encrypt_file(file_name, key):
    with open(file_name, 'rb') as fo:
        plaintext = fo.read()
    enc = encrypt(plaintext, key)
    with open(file_name + "".enc"", 'wb') as fo:
        fo.write(enc)

def decrypt_file(file_name, key):
    with open(file_name, 'rb') as fo:
        ciphertext = fo.read()
    dec = decrypt(ciphertext, key)
    with open(file_name[:-4], 'wb') as fo:
        fo.write(dec)

key = b'\xbf\xc0\x85)\x10nc\x94\x02)j\xdf\xcb\xc4\x94\x9d(\x9e[EX\xc8\xd5\xbfI{\xa2$\x05(\xd5\x18'

encrypt_file('file.docx', key)

","If you need to add padding to make the plaintext a multiple of 16 bytes, the extra bytes need to be stripped before you write the decrypted data. This means you will need to somehow include the number of pad bytes added with the padding before you encrypt it. See PKCS#7 for one possible technique. There are a number of other schemes as well.
","1278","<python><aes><pycrypto>","2","0","2","2015-11-21 21:51:38","","3","0","","","","2014-05-27 22:58:53",""
"23900280","How can I encrypt .docx files with AES & pycrypto without corrupting the files","I've got this bit of python code that I want to use to encrypt various kinds of files with AES 256. I am using the pycrypto module. It works fine for most files (exe, deb, jpg, pdf, txt) but when it comes to office files (docx, xlsx, ppt etc) the file is corrupted upon decryption and will no open (nor can it be repaired) in LibreOffice. I am using Linux mint, python 2.7.6, pycrypto 2.6.1. I'm still a bit of a noob so I'd appreciate it if you could give me code examples of the corrections you'd recommend.
Thanks
from Crypto import Random
from Crypto.Cipher import AES
import os

def pad(s):
    return s + b""\0"" * (AES.block_size - len(s) % AES.block_size)

def encrypt(message, key, key_size=256):
    message = pad(message)
    iv = Random.new().read(AES.block_size)
    cipher = AES.new(key, AES.MODE_CBC, iv)
    return iv + cipher.encrypt(message)

def decrypt(ciphertext, key):
    iv = ciphertext[:AES.block_size]
    cipher = AES.new(key, AES.MODE_CBC, iv)
    plaintext = cipher.decrypt(ciphertext[AES.block_size:])
    return plaintext.rstrip(b""\0"")

def encrypt_file(file_name, key):
    with open(file_name, 'rb') as fo:
        plaintext = fo.read()
    enc = encrypt(plaintext, key)
    with open(file_name + "".enc"", 'wb') as fo:
        fo.write(enc)

def decrypt_file(file_name, key):
    with open(file_name, 'rb') as fo:
        ciphertext = fo.read()
    dec = decrypt(ciphertext, key)
    with open(file_name[:-4], 'wb') as fo:
        fo.write(dec)

key = b'\xbf\xc0\x85)\x10nc\x94\x02)j\xdf\xcb\xc4\x94\x9d(\x9e[EX\xc8\xd5\xbfI{\xa2$\x05(\xd5\x18'

encrypt_file('file.docx', key)

","The problem is here 
plaintext.rstrip(b""\0"")

I have run the program and see the reason is:

There was a bug in here that caused the last bytes of the original file to be discarded if they happened to have the same value as the padding bytes!

To fix this issue, we have to store how many padding bytes were used during encryption, then remove them during decryption. Here is my code, it works for me (tested with word and excel 2013 files, pdf, jpg). Let me know if still some bugs.
from Crypto import Random
from Crypto.Cipher import AES

import hashlib

def pad(s):
    padding_size = AES.block_size - len(s) % AES.block_size
    return s + b""\0"" * padding_size, padding_size

def encrypt(message, key, key_size=256):
    message, padding_size = pad(message)
    iv = Random.new().read(AES.block_size)
    cipher = AES.new(key, AES.MODE_CFB, iv)
    enc_bytes = iv + cipher.encrypt(message) + bytes([padding_size])    
    return enc_bytes

def decrypt(ciphertext, key):
    iv = ciphertext[:AES.block_size]
    cipher = AES.new(key, AES.MODE_CFB, iv)
    plaintext = cipher.decrypt(ciphertext[AES.block_size:-1])
    padding_size = ciphertext[-1] * (-1)
    return plaintext[:padding_size]

def encrypt_file(file_name, key):
    with open(file_name, 'rb') as fo:
        plaintext = fo.read()    
    enc = encrypt(plaintext, key)
    with open(file_name + "".enc"", 'wb') as fo:
        fo.write(enc)

def decrypt_file(file_name, key):
    with open(file_name, 'rb') as fo:
        ciphertext = fo.read()
    dec = decrypt(ciphertext, key)
    with open('processed_' + file_name[:-4], 'wb') as fo:
        fo.write(dec)

key = 'Quan'
hash_object = hashlib.md5(key.encode())

while True:
    filename = input('File: ')
    en_de = input('En or De?')
    if en_de.upper() == 'EN':
        encrypt_file(filename, hash_object.hexdigest())
    elif en_de.upper() == 'DE':
        decrypt_file(filename, hash_object.hexdigest())
    else:
        print('Did not pick either en or de!')

    cont = input('Continue?')
    if cont.upper() == 'N':
        break

","1278","<python><aes><pycrypto>","2","0","2","2015-11-21 21:51:38","","3","0","","","","2014-05-27 22:58:53",""
"27883095","Exporting public key into binary in pycrypto","I'm using python 2 with pycrypto and generating my keys like that.
random_generator = Random.new().read
self.parent.private_key = RSA.generate(1024, random_generator)
self.parent.public_key = self.parent.private_key.publickey()

And I've got a problem with getting a public key which I need to send as binary/base64 
I have searched whole RSA pycrypto lib and there are no methods that can convert my public into binary.
Can someone take a look and try to help me?
","You can use the _RSAobj.exportKey(self, format='PEM', passphrase=None, pkcs=1) function to serialize the the key (_RSAobj is the implementation of the key objects). If you use DER format it will use a binary encoding instead of the textual encoding of PEM. When using DER you might need to encode it using Base64 too.
You can then deserialize it using RSA.importKey(externKey, passphrase=None).
","1262","<python><rsa><pycrypto>","1","1","1","2015-01-11 09:52:21","27885755","0","","1816580","","2015-01-11 09:52:21","2015-01-11 01:33:22",""
"27630793","Error installing PyCrypto on Mac 10.9.5","i'm trying to install PyCrypto for Python 3.4 but i'm having problem with the C compiled programs.
it says that ""error: cannot run C compiled program"".
anyone have an idea how to fix it??
code:
running build
running build_py
running build_ext
running build_configure
checking for gcc... gcc
checking whether the C compiler works... yes
checking for C compiler default output file name... a.out
checking for suffix of executables... 
checking whether we are cross compiling... configure: error: in `/Users/briansabbath/Desktop/pycrypto-2.6.1':
configure: error: cannot run C compiled programs.
If you meant to cross compile, use `--host'.
See `config.log' for more details
Traceback (most recent call last):
  File ""setup.py"", line 456, in <module>
    core.setup(**kw)
  File ""/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/distutils/core.py"", line 148, in setup
    dist.run_commands()
  File ""/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/distutils/dist.py"", line 955, in run_commands
    self.run_command(cmd)
  File ""/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/distutils/dist.py"", line 974, in run_command
    cmd_obj.run()
  File ""/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/distutils/command/build.py"", line 126, in run
    self.run_command(cmd_name)
  File ""/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/distutils/cmd.py"", line 313, in run_command
    self.distribution.run_command(command)
  File ""/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/distutils/dist.py"", line 974, in run_command
    cmd_obj.run()
  File ""setup.py"", line 251, in run
    self.run_command(cmd_name)
  File ""/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/distutils/cmd.py"", line 313, in run_command
    self.distribution.run_command(command)
  File ""/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/distutils/dist.py"", line 974, in run_command
    cmd_obj.run()
  File ""setup.py"", line 278, in run
    raise RuntimeError(""autoconf error"")
RuntimeError: autoconf error

","The method that worked for me
brew install pip
sudo ARCHFLAGS=-Wno-error=unused-command-line-argument-hard-error-in-future pip install pycrypto

You can run it in a virtualenv. If you have a better way please leave a comment below!
","1261","<macos><osx-yosemite><python-3.4><pycrypto>","2","0","2","2016-10-18 00:33:50","","1","","","","","2014-12-24 02:49:12",""
"27630793","Error installing PyCrypto on Mac 10.9.5","i'm trying to install PyCrypto for Python 3.4 but i'm having problem with the C compiled programs.
it says that ""error: cannot run C compiled program"".
anyone have an idea how to fix it??
code:
running build
running build_py
running build_ext
running build_configure
checking for gcc... gcc
checking whether the C compiler works... yes
checking for C compiler default output file name... a.out
checking for suffix of executables... 
checking whether we are cross compiling... configure: error: in `/Users/briansabbath/Desktop/pycrypto-2.6.1':
configure: error: cannot run C compiled programs.
If you meant to cross compile, use `--host'.
See `config.log' for more details
Traceback (most recent call last):
  File ""setup.py"", line 456, in <module>
    core.setup(**kw)
  File ""/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/distutils/core.py"", line 148, in setup
    dist.run_commands()
  File ""/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/distutils/dist.py"", line 955, in run_commands
    self.run_command(cmd)
  File ""/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/distutils/dist.py"", line 974, in run_command
    cmd_obj.run()
  File ""/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/distutils/command/build.py"", line 126, in run
    self.run_command(cmd_name)
  File ""/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/distutils/cmd.py"", line 313, in run_command
    self.distribution.run_command(command)
  File ""/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/distutils/dist.py"", line 974, in run_command
    cmd_obj.run()
  File ""setup.py"", line 251, in run
    self.run_command(cmd_name)
  File ""/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/distutils/cmd.py"", line 313, in run_command
    self.distribution.run_command(command)
  File ""/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/distutils/dist.py"", line 974, in run_command
    cmd_obj.run()
  File ""setup.py"", line 278, in run
    raise RuntimeError(""autoconf error"")
RuntimeError: autoconf error

","This might indicate that you did not install C compiler likes gcc. Run the following command might help (command line tool must be installed in xcode):
xcode-select --install

","1261","<macos><osx-yosemite><python-3.4><pycrypto>","2","2","2","2016-10-18 00:33:50","","1","","","","","2014-12-24 02:49:12",""
"12699428","GAE Python - PyCrypto - No module named winrandom","I am trying to get PyCrypto up and running on my App Engine (Python) Development Server. I installed PyCrypto using a Voidspace binary file (pycrypto-2.0.1.win-amd64-py2.6.exe).
I am running Windows 7 64-bit. From what I found this binary from Voidspace does not install winrandom correctly because winrandom does not have a 64-bit binary. I have tried compiling a 64-bit version using VS 2008, but this is way outside of my knowledge and I don't know if I am doing it right. I followed the following directions for PyCrypto but instead tried to compile the winrandom source. 
","Since pycrypto is part of the third-party libraries for Google App Engine, it should not be necessary to manually install pycrypto to use it in your project. Instead, you need to add the library to your app.yaml:
libraries:
- name: pycrypto
  version: ""2.6""

","1238","<python><windows><google-app-engine><pycrypto>","4","0","1","2013-05-16 12:56:59","","2","2","158026","","2013-04-24 18:35:59","2012-10-02 22:36:52",""
"20359212","Making CryptoJS and pycrypto compatible","I'm trying to figure out how to use the CryptoJS library for AES but the documentation is somewhat scarce.
I've followed their example but I can't seem to decode something that I encoded in PyCrypto
I've formatted as follows:
key = '0f3f0fe38eb5f216cb4ef0649f81d761'
ciphertext = 'Y+gwBI6R37Ko1lQmwZ57gg==FqUSqQ=='

The ciphertext has two components
iv: Y+gwBI6R37Ko1lQmwZ57gg==
encoded message: FqUSqQ==

I tried running the code below but it didn't work. It logs """" in the console. It should be resolving to 'Test'
var decrypted =CryptoJS.AES.decrypt(ciphertext, key);
console.log( decrypted.toString(CryptoJS.enc.Utf8) );

Any pointers would great. Thanks
","I don't have direct experience with CryptoJS, but many years of experience with a variety of other crypto libraries.  It's almost certainly the case the CryptoJS.AES.decrypt expects a different ciphertext format than the one you're using.  Your ciphertext is the contanenation of two separate Base64-encoded entities:
Base64(IV) + Base64(Enc(Message))
If CryptoJS.AES.decrypt expects the IV to be specified as part of the ciphertext (which it may not), and expects Base64-encoded ciphertext input at all (which it may not), then I would try passing:
Base64( (binary IV) + (binary Enc(Message)) )
Looking at the CryptoJS doc, I share your frustration with it.  But there's an encryption example with ""manually specified IV"" that may provide a clue.
<script src=""http://crypto-js.googlecode.com/svn/tags/3.1.2/build/rollups/aes.js""></script>
<script>
    var key = CryptoJS.enc.Hex.parse('000102030405060708090a0b0c0d0e0f');
    var iv  = CryptoJS.enc.Hex.parse('101112131415161718191a1b1c1d1e1f');

    var encrypted = CryptoJS.AES.encrypt(""Message"", key, { iv: iv });
</script>

Sorry I can't be more helpful-
","1223","<javascript><python><aes><pycrypto><cryptojs>","0","0","2","2013-12-18 21:51:37","20669193","0","","2465313","","2013-12-04 19:43:36","2013-12-03 18:47:43",""
"20359212","Making CryptoJS and pycrypto compatible","I'm trying to figure out how to use the CryptoJS library for AES but the documentation is somewhat scarce.
I've followed their example but I can't seem to decode something that I encoded in PyCrypto
I've formatted as follows:
key = '0f3f0fe38eb5f216cb4ef0649f81d761'
ciphertext = 'Y+gwBI6R37Ko1lQmwZ57gg==FqUSqQ=='

The ciphertext has two components
iv: Y+gwBI6R37Ko1lQmwZ57gg==
encoded message: FqUSqQ==

I tried running the code below but it didn't work. It logs """" in the console. It should be resolving to 'Test'
var decrypted =CryptoJS.AES.decrypt(ciphertext, key);
console.log( decrypted.toString(CryptoJS.enc.Utf8) );

Any pointers would great. Thanks
","I ran into this problem as well and unfortunately it was very tricky to get pycrypto to talk to crypto-js.  Here are the combination that worked for me:

Use MODE_CFB with segment_size=128 when encrypting in Python
You must pad your string with Pkcs7 as per RFC 2315 [Page 21]
Once you have received the base64 version of ciphertext in JS, you need to wrap it in
CryptoJS.lib.CipherParams.create({ ... })

Take a look at the code that works for me (Python 2.7.x):
https://gist.github.com/marcoslin/8026990
","1223","<javascript><python><aes><pycrypto><cryptojs>","0","2","2","2013-12-18 21:51:37","20669193","0","","2465313","","2013-12-04 19:43:36","2013-12-03 18:47:43",""
"39690400","PHP openssl AES in Python","I am working on a project where PHP is used for decrypt AES-256-CBC messages
<?php

class CryptService{
    private static $encryptMethod = 'AES-256-CBC';
    private $key;
    private $iv;

    public function __construct(){
        $this->key = hash('sha256', 'c7b35827805788e77e41c50df44441491098be42');
        $this->iv = substr(hash('sha256', 'c09f6a9e157d253d0b2f0bcd81d338298950f246'), 0, 16);
    }

    public function decrypt($string){
        $string = base64_decode($string);
        return openssl_decrypt($string, self::$encryptMethod, $this->key, 0, $this->iv);
    }

    public function encrypt($string){
        $output = openssl_encrypt($string, self::$encryptMethod, $this->key, 0, $this->iv);
        $output = base64_encode($output);
        return $output;
    }
}

$a = new CryptService;
echo $a->encrypt('secret');
echo ""\n"";
echo $a->decrypt('S1NaeUFaUHdqc20rQWM1L2ZVMDJudz09');
echo ""\n"";

ouutput
>>> S1NaeUFaUHdqc20rQWM1L2ZVMDJudz09
>>> secret

Now I have to write Python 3 code for encrypting data.
I've tried use PyCrypto but without success. My code:
import base64
import hashlib
from Crypto.Cipher import AES

class AESCipher:
    def __init__(self, key, iv):
        self.key = hashlib.sha256(key.encode('utf-8')).digest()
        self.iv = hashlib.sha256(iv.encode('utf-8')).digest()[:16]

    __pad = lambda self,s: s + (AES.block_size - len(s) % AES.block_size) * chr(AES.block_size - len(s) % AES.block_size)
    __unpad = lambda self,s: s[0:-ord(s[-1])]

    def encrypt( self, raw ):
        raw = self.__pad(raw)
        cipher = AES.new(self.key, AES.MODE_CBC, self.iv)
        return base64.b64encode(cipher.encrypt(raw))

    def decrypt( self, enc ):
        enc = base64.b64decode(enc)
        cipher = AES.new(self.key, AES.MODE_CBC, self.iv )
        return self.__unpad(cipher.decrypt(enc).decode(""utf-8""))

cipher = AESCipher('c7b35827805788e77e41c50df44441491098be42', 'c09f6a9e157d253d0b2f0bcd81d338298950f246')

enc_str = cipher.encrypt(""secret"")
print(enc_str)

output
>>> b'tnF87LsVAkzkvs+gwpCRMg=='

But I need output S1NaeUFaUHdqc20rQWM1L2ZVMDJudz09 which will PHP decrypt to secret. How to modify Python code to get expected output?
","PHP's hash outputs a Hex-encoded string by default, but Python's .digest() returns bytes. You probably wanted to use .hexdigest():
def __init__(self, key, iv):
    self.key = hashlib.sha256(key.encode('utf-8')).hexdigest()[:32].encode(""utf-8"")
    self.iv = hashlib.sha256(iv.encode('utf-8')).hexdigest()[:16].encode(""utf-8"")

The idea of the initialization vector (IV) is to provide randomization for the encryption with the same key. If you use the same IV, an attacker may be able to deduce that you send the same message twice. This can be considered as a broken protocol.
The IV is not supposed to be secret, so you can simply send it along with the ciphertext. It is common to prepend it to the ciphertext during encryption and slice it off before decryption.
","1222","<php><python><encryption><aes><pycrypto>","3","3","1","2016-09-25 19:20:49","39690864","0","","","","","2016-09-25 18:35:01",""
"31134593","Python ImportError on binary build (_AES)","I'm using pycrypto module to encrypt files, when run code with python code, it works well:
$ python encrypt_file.py file

but when build encrypt_file.py to binary:
$ pyinstaller -F zip_disk.py

and run the binary under dist
$ ./encrypt_file file

throw the error:
File ""<string>"", line 24, in <module>
File ""/usr/local/lib/python2.7/dist-packages/PyInstaller-2.1-py2.7.egg/PyInstaller/loader/pyi_importers.py"", line 270, in load_module
exec(bytecode, module.__dict__)
File ""/home/xxxx/zip_disk/build/zip_disk/out00-PYZ.pyz/Crypto.Cipher.AES"", line 50, in <module>
ImportError: cannot import name _AES

Why these happen? How to fix the binary build ImportError?

My import statement is from Crypto.Cipher import AES
python version: Python 2.7.6
My PyCrypto version is 2.6.1. I have tried install pycrypto from source and via pip, both the same ImportError.
platform: Linux ubuntu 3.13.0-32-generic x86_64 x86_64 GNU/Linux

","","1211","<python><importerror><pyinstaller><pycrypto>","1","","0","2015-09-15 21:19:10","","3","1","342348","","2015-06-30 09:42:00","2015-06-30 09:33:57",""
"20295702","Pycrypto AES encrypted data has strange symbols (python)","A novice programmer here trying to encrypt a data string using pycrypto AES. After careful analysis and trying it out in python shell, I have coded crypt.py and tried running it. The AES function which was running perfectly in the shell started giving out strange symbols as output when i run the file. Can someone shed some light on where I am doing wrong. 
Here is my crypt.py:
#!/usr/bin/env python

from Crypto.Cipher import AES
from Crypto import Random
import os
import md5
import sys
import binascii
import base64

password = ""fault_tolerant_system""
md5obj = md5.new()
md5obj.update(password)
key = md5obj.digest()

def pad(data, width):
  needed = width - ((len(data) + 1) % width)
  return data + ('\x00' * needed) + chr(needed + 1)

def unpad(data):
  padding = ord(data[-1])
  return data[:-padding]

def main() :
  val = ""Hi I am ked""
  crcval = binascii.crc32(val) & 0xffffffff
  lencrc = len(str(crcval))
  finalval = str(lencrc) + ""|"" + val + str(crcval)
  print 'finalval after crc appending: ', finalval
  padded_finalval = pad(finalval, 16)
  print ""padded final val : "", padded_finalval

  #encrypt using AES
  print Random.new().read(16)
  ivp = binascii.hexlify(Random.new().read(16))
  aes_encryptor = AES.new(key, AES.MODE_CBC, ivp[:16])
  cipher2 = aes_encryptor.encrypt(padded_finalval)
  print ""ivp is:"", ivp
  print ""cipher2: "", cipher2
  cipher = ivp[:16] + aes_encryptor.encrypt(padded_finalval)
  print ""cipher: "", (cipher)
  print ""\n\n******""

  res_enc_iv_aes = cipher
  ivg = res_enc_iv_aes[:16]
  print ivg
  aes_decryptor = AES.new(key, AES.MODE_CBC, ivg)
  print binascii.hexlify(aes_decryptor.decrypt(res_enc_iv_aes[16:]))
  resvalue = unpad(aes_decryptor.decrypt(res_enc_iv_aes[16:]))

  print ""\ndecrpted: "", resvalue      
  crclen = int(resvalue.split(""|"", 1)[0])
  print ""crclen: "", crclen
  crc_cksum = resvalue[-crclen:]
  print crc_cksum
  recv_data = finalval[len(str(crclen))+1 : -crclen]
  print ""recv_data: "", recv_data
#compute checksum of recv_data
  crc_recv_data = binascii.crc32(recv_data) & 0xffffffff
  print crc_recv_data      
  if str(crc_recv_data) == crc_cksum:
        #no error in data
    print ""recv_data: "", recv_data
  else:
    print ""error :(""
    print ""recdata:"", recv_data

if __name__ == ""__main__"":
  main() 

And the output is:
finalval after crc appending:  10|Hi1293356558
padded final val :  10|Hi1293356558
A0>�̔�ˈ�_Y/�u
ivp is: 95f9a5238701703b8a58933bb48e9015
mqMher2:  ����]6�
   �75��՘�+�2=��P�H��
T��ڕu'5/�Q�9a5238701703b5�U���T���fQ�

95f9a5238701703b
edd08277e52fc138369bb557e24d88d000000000000000000000000000000011
decrpted:  C���)�{��I3,p
Traceback (most recent call last):
  File ""cry1.py.py"", line 70, in <module>
    main()
  File ""cry1.py.py"", line 53, in main
  crclen = int(resvalue.split(""|"", 1)[0])

ValueError: invalid literal for int() with base 10: 'C\xe0\xe9\x1a'

","Thanks to Kyle. This explains and answers everything you want to know of AES pycrypto. http://kyleisom.net/downloads/crypto_intro.pdf
","1202","<python><encryption><aes><pycrypto><undefined-symbol>","0","-1","1","2013-11-30 20:24:40","","11","","","","","2013-11-30 02:07:23",""
"51549153","Input strings must be a multiple of 16 in length Python pycrypto","I'm trying to get into cryptography with python and got a question. Here is some code i did for learning and testing. 
#!/usr/bin/python3
import getpass
from Crypto.Cipher import AES
import hashlib
import random
import sys
import os

the_input = getpass.getpass(""Enter password: "")
theHash = hashlib.sha256(the_input.encode(""utf-8"")).hexdigest()

key = theHash[0:16]
#IV = ''.join([chr(random.randint(0, 0xff)) for i in range(16)])
IV = os.urandom(16)
print(""THEHASH: "", key, ""Leangth: "", len(key))
print( ""IVlen: "", len(IV), ""|SYS,GETSIZEOF: "", sys.getsizeof(IV))
print(""This is the IV: "", IV)
def Encrypt_str():
    aes1 = AES.new(key, AES.MODE_CBC, IV)
    data = 'whatevertest'.zfill(16)

    encr = aes1.encrypt(data)
    print(""The ENCRYPTION: "",encr)
    aes2 = AES.new(key, AES.MODE_CBC, IV)
    decr = aes2.decrypt(encr)
    print(""Decrypted: "", decr)

def Decrypt_str():
    aes2 = AES.new(key, AES.MODE_CBC, IV)
    inpa1 = input(""Enter cip:"")
    decr = aes2.decrypt(inpa1)
    print(decr)

Encrypt_str()
Decrypt_str()

On the line
print(""The ENCRYPTION: "",encr)

it prints the encrypted code with .zfill(16) bytes
that code is b'\x0c\x97\x8e\x1b\xa9\x10a\n\x07\xde\x16\xa3\xf7\x10\x9f5'
when i'm running
len('\x0c\x97\x8e\x1b\xa9\x10a\n\x07\xde\x16\xa3\xf7\x10\x9f5') in interpreter

i am getting 16 in return and when i paste the encrypted aes code in 
inpa1 = input(""Enter cip:"")

i'm getting
File ""newtest.py"", line 35, in <module>
    Decrypt_str()
  File ""newtest.py"", line 31, in Decrypt_str
    decr = aes2.decrypt(inpa1)
  File ""/usr/lib/python3/dist-packages/Crypto/Cipher/blockalgo.py"", line 295, i$
    return self._cipher.decrypt(ciphertext)
ValueError: Input strings must be a multiple of 16 in length

But still i can decrypt the same 16 bytes in same function with
decr = aes2.decrypt(encr)

Which i find weird...so i can't really get how this is working. some help would be appriciated.
","If you are pasting \x0c\x97\x8e\x1b\xa9\x10a\n\x07\xde\x16\xa3\xf7\x10\x9f5 directly into the input prompt, the backslashes are being escaped.
>>> example=input(""Prompt: "")
Prompt: \x0c\x97\x8e\x1b\xa9\x10a\n\x07\xde\x16\xa3\xf7\x10\x9f5
>>> example
'\\x0c\\x97\\x8e\\x1b\\xa9\\x10a\\n\\x07\\xde\\x16\\xa3\\xf7\\x10\\x9f5'
>>> print(example)
\x0c\x97\x8e\x1b\xa9\x10a\n\x07\xde\x16\xa3\xf7\x10\x9f5

Generally when communicating encrypted values it is good practice to base64 encode the values.  Then decode the values before decrypting the value.
>>> import base64
>>> enc=b'\x0c\x97\x8e\x1b\xa9\x10a\n\x07\xde\x16\xa3\xf7\x10\x9f5'
>>> base64_enc = base64.b64encode(enc)
>>> print(base64_enc)
b'DJeOG6kQYQoH3haj9xCfNQ=='
>>>
>>> i=input(""Prompt: "")
Prompt: DJeOG6kQYQoH3haj9xCfNQ==
>>>
>>> i
'DJeOG6kQYQoH3haj9xCfNQ=='
>>> denc=base64.b64decode(i)
>>> print(denc)
b'\x0c\x97\x8e\x1b\xa9\x10a\n\x07\xde\x16\xa3\xf7\x10\x9f5'
>>> len(denc)
16

","1168","<python><python-3.x><aes><pycrypto>","1","0","1","2018-07-27 00:58:03","","1","","9844178","","2018-07-27 00:46:14","2018-07-27 00:22:53",""
"34318399","Python 3.5 SFTP file transfer","I would like to use paramiko for SFTP file transfer in Python 3.5. I know that paramiko depends on PyCrypto and have read about PyCrypto installation problems in Python 3.5. Although I have seen a number of questions regarding this topic, I have not found a solution to successful SFTP file transfer in Python 3.5. 
My first question: is it possible to use Python 3.5 for SFTP file transfer? If so, will paramiko work? If the above will work, why I am I receiving the following errors when attempting to install PyCrypto?
error: [WinError 2] The system canot find the file specified
**Failed building wheel for pycrypto**


My second question: if paramiko will not work with Python 3.5, are there any alternatives or must I revert back to a previous python version for SFTP file transfer?
","The solution was to install Python 3.5.1 on my Linux server and then pip install paramiko from there. I'm still not sure why PyCrypto cannot be installed in Python 3.5 for Windows but this was the only solution I was able to find.
","1154","<python><sftp><paramiko><pycrypto>","0","0","2","2016-04-21 19:25:41","34421464","3","1","","","","2015-12-16 17:29:09",""
"34318399","Python 3.5 SFTP file transfer","I would like to use paramiko for SFTP file transfer in Python 3.5. I know that paramiko depends on PyCrypto and have read about PyCrypto installation problems in Python 3.5. Although I have seen a number of questions regarding this topic, I have not found a solution to successful SFTP file transfer in Python 3.5. 
My first question: is it possible to use Python 3.5 for SFTP file transfer? If so, will paramiko work? If the above will work, why I am I receiving the following errors when attempting to install PyCrypto?
error: [WinError 2] The system canot find the file specified
**Failed building wheel for pycrypto**


My second question: if paramiko will not work with Python 3.5, are there any alternatives or must I revert back to a previous python version for SFTP file transfer?
","You can install PyCrypto binaries for Python 3.5 if you don't have a C++ compiler installed (that pip need to use to compile this library)
Install a PyCrypto binary from this site :
https://github.com/sfbahr/PyCrypto-Wheels 
The best way to do it, is:
64bits Python
c:\Python35\Scripts\pip.exe install --use-wheel --no-index --find-links=https://github.com/sfbahr/PyCrypto-Wheels/raw/master/pycrypto-2.6.1-cp35-none-win_amd64.whl pycrypto
32bits Python
c:\Python35\Scripts\pip.exe install --use-wheel --no-index --find-links=https://github.com/sfbahr/PyCrypto-Wheels/raw/master/pycrypto-2.6.1-cp35-none-win32.whl pycrypto
Of course replace c:\Python35\Scripts\pip.exe by your python pip path
To know your python version, run python and look at the architecture displayed between brackets:
C:\Users\utilisateur>python
Python 3.5.1 |Anaconda 4.0.0 (64-bit)| (default, Feb 16 2016, 09:49:46) [MSC v.1900 64 bit (AMD64)] on win32
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
Hope this can help.
","1154","<python><sftp><paramiko><pycrypto>","0","0","2","2016-04-21 19:25:41","34421464","3","1","","","","2015-12-16 17:29:09",""
"43199234","Pycrypto : AES Decryption","Why Pycrypto AES decryption gives different output when decrypted with AES object used for encryption and right output when decrypted with AES object used solely for decryption?
from Crypto.Cipher import AES
obj = AES.new('0123456789012345', AES.MODE_CBC, '0123456789012345')
message = '0123456789012345'
ciphertext = obj.encrypt(message)
plaintext = obj.decrypt(ciphertext)
# plaintext here is byte array
obj2 = AES.new('0123456789012345', AES.MODE_CBC, '0123456789012345')
plaintext = obj2.decrypt(ciphertext)
# plaintext here is 0123456789012345

","According to BlockAlgo#encrypt from which the AES class is derived:

Encrypt data with the key and the parameters set at initialization.
The cipher object is stateful; encryption of a long block of data can be broken up in two or more calls to encrypt(). That is, the statement:
c.encrypt(a) + c.encrypt(b)

is always equivalent to:
c.encrypt(a+b)

That also means that you cannot reuse an object for encrypting or decrypting other data with the same key.

So your problem is actually directly documented in the class.
","1150","<python><encryption><aes><pycrypto>","6","5","1","2017-04-04 21:49:45","43218302","5","1","6826059","","2017-04-04 06:10:30","2017-04-04 05:51:52",""
"44857817","How can I shuffle a very large list stored in a file in Python?","I need to deterministically generate a randomized list containing the numbers from 0 to 2^32-1. 
This would be the naive (and totally nonfunctional) way of doing it, just so it's clear what I'm wanting.
import random
numbers = range(2**32)
random.seed(0)
random.shuffle(numbers)

I've tried making the list with numpy.arange() and using pycrypto's random.shuffle() to shuffle it. Making the list ate up about 8gb of ram, then shuffling raised that to around 25gb. I only have 32gb to give. But that doesn't matter because...
I've tried cutting the list into 1024 slices and trying the above, but even one of these slices takes way too long. I cut one of these slices into 128 yet smaller slices, and that took about 620ms each. If it grew linearly, then that means the whole thing would take about 22 and a half hours to complete. That sounds alright, but it doesn't grow linearly.
Another thing I've tried is generating random numbers for every entry and using those as indices for their new location. I then go down the list and attempt to place the number at the new index. If that index is already in use, the index is incremented until it finds a free one. This works in theory, and it can do about half of it, but near the end it keeps having to search for new spots, wrapping around the list several times.
Is there any way to pull this off? Is this a feasible goal at all?
","So one way is to keep track of which numbers you have already given out and keep handing out new random numbers one at a time, consider
import random
random.seed(0)

class RandomDeck:
      def __init__(self):
           self.usedNumbers = set()

      def draw(self):
          number = random.randint(0,2**32)
          while number in self.usedNumbers:
                 number = random.randint(0,2**32)
          self.usedNumbers.append(number)
          return number

      def shuffle(self):
          self.usedNumbers = set()

As you can see we essentially have a deck of random numbers between 0 and 2^32 but we only store the numbers we have given out to ensure we don't have repeats. Then you can re-shuffle the deck by forgetting all the numbers you have already given out.
This should be efficient in most use cases as long as you don't draw ~1 million numbers without a reshuffle.
","1149","<python><list><numpy><random><pycrypto>","1","1","4","2017-07-01 22:19:10","44862688","11","1","1193112","","2017-07-01 06:00:03","2017-07-01 05:52:58",""
"44857817","How can I shuffle a very large list stored in a file in Python?","I need to deterministically generate a randomized list containing the numbers from 0 to 2^32-1. 
This would be the naive (and totally nonfunctional) way of doing it, just so it's clear what I'm wanting.
import random
numbers = range(2**32)
random.seed(0)
random.shuffle(numbers)

I've tried making the list with numpy.arange() and using pycrypto's random.shuffle() to shuffle it. Making the list ate up about 8gb of ram, then shuffling raised that to around 25gb. I only have 32gb to give. But that doesn't matter because...
I've tried cutting the list into 1024 slices and trying the above, but even one of these slices takes way too long. I cut one of these slices into 128 yet smaller slices, and that took about 620ms each. If it grew linearly, then that means the whole thing would take about 22 and a half hours to complete. That sounds alright, but it doesn't grow linearly.
Another thing I've tried is generating random numbers for every entry and using those as indices for their new location. I then go down the list and attempt to place the number at the new index. If that index is already in use, the index is incremented until it finds a free one. This works in theory, and it can do about half of it, but near the end it keeps having to search for new spots, wrapping around the list several times.
Is there any way to pull this off? Is this a feasible goal at all?
","If you have a continuous range of numbers, you don't need to store them at all. It is easy to devise a bidirectional mapping between the value in a shuffled list and its position in that list. The idea is to use a pseudo-random permutation and this is exactly what block ciphers provide. 
The trick is to find a block cipher that matches exactly your requirement of 32-bit integers. There are very few such block ciphers, but the Simon and Speck ciphers (released by the NSA) are parameterisable and support a block size of 32-bit (usually block sizes are much larger).
This library seems to provide an implementation of that. We can devise the following functions:
def get_value_from_index(key, i):
    cipher = SpeckCipher(key, mode='ECB', key_size=64, block_size=32)
    return cipher.encrypt(i)

def get_index_from_value(key, val):
    cipher = SpeckCipher(key, mode='ECB', key_size=64, block_size=32)
    return cipher.decrypt(val)

The library works with Python's big integers, so you might not even need to encode them. 
A 64-bit key (for example 0x123456789ABCDEF0) is not much. You could use a similar construction that increased the key size in DES to Triple DES. Keep in mind that keys should be chosen randomly and they have to be constant if you want determinism.

If you don't want to use an algorithm by the NSA for that, I would understand. There are others, but I can't find them now. The Hasty Pudding cipher is even more flexible, but I don't know if there is an implementation of that for Python.
","1149","<python><list><numpy><random><pycrypto>","1","3","4","2017-07-01 22:19:10","44862688","11","1","1193112","","2017-07-01 06:00:03","2017-07-01 05:52:58",""
"44857817","How can I shuffle a very large list stored in a file in Python?","I need to deterministically generate a randomized list containing the numbers from 0 to 2^32-1. 
This would be the naive (and totally nonfunctional) way of doing it, just so it's clear what I'm wanting.
import random
numbers = range(2**32)
random.seed(0)
random.shuffle(numbers)

I've tried making the list with numpy.arange() and using pycrypto's random.shuffle() to shuffle it. Making the list ate up about 8gb of ram, then shuffling raised that to around 25gb. I only have 32gb to give. But that doesn't matter because...
I've tried cutting the list into 1024 slices and trying the above, but even one of these slices takes way too long. I cut one of these slices into 128 yet smaller slices, and that took about 620ms each. If it grew linearly, then that means the whole thing would take about 22 and a half hours to complete. That sounds alright, but it doesn't grow linearly.
Another thing I've tried is generating random numbers for every entry and using those as indices for their new location. I then go down the list and attempt to place the number at the new index. If that index is already in use, the index is incremented until it finds a free one. This works in theory, and it can do about half of it, but near the end it keeps having to search for new spots, wrapping around the list several times.
Is there any way to pull this off? Is this a feasible goal at all?
","The class I created uses a bitarray of keep track which numbers have already been used. With the comments, I think the code is pretty self explanatory.
import bitarray
import random


class UniqueRandom:
    def __init__(self):
        """""" Init boolean array of used numbers and set all to False
        """"""
        self.used = bitarray.bitarray(2**32)
        self.used.setall(False)

    def draw(self):
        """""" Draw a previously unused number
         Return False if no free numbers are left
        """"""

        # Check if there are numbers left to use; return False if none are left
        if self._free() == 0:
            return False

        # Draw a random index
        i = random.randint(0, 2**32-1)

        # Skip ahead from the random index to a undrawn number
        while self.used[i]:
            i = (i+1) % 2**32

        # Update used array
        self.used[i] = True

        # return the selected number
        return i

    def _free(self):
        """""" Check how many places are unused
        """"""
        return self.used.count(False)


def main():
    r = UniqueRandom()
    for _ in range(20):
        print r.draw()


if __name__ == '__main__':
    main()

Design considerations
While Garrigan Stafford's answer is perfectly fine, the memory footprint of this solution is much smaller (a bit more than 4 GB). Another difference between our answers is that Garrigan's algorithm takes more time to generate a random number when the amount of generated numbers increases (because he keeps iterating until an unused number is found). This algorithm just looks up the next unused number if a certain number is already used. This makes the time it takes to draw a number every time practically the same, regardless of how far the pool of free numbers is exhausted.
","1149","<python><list><numpy><random><pycrypto>","1","2","4","2017-07-01 22:19:10","44862688","11","1","1193112","","2017-07-01 06:00:03","2017-07-01 05:52:58",""
"44857817","How can I shuffle a very large list stored in a file in Python?","I need to deterministically generate a randomized list containing the numbers from 0 to 2^32-1. 
This would be the naive (and totally nonfunctional) way of doing it, just so it's clear what I'm wanting.
import random
numbers = range(2**32)
random.seed(0)
random.shuffle(numbers)

I've tried making the list with numpy.arange() and using pycrypto's random.shuffle() to shuffle it. Making the list ate up about 8gb of ram, then shuffling raised that to around 25gb. I only have 32gb to give. But that doesn't matter because...
I've tried cutting the list into 1024 slices and trying the above, but even one of these slices takes way too long. I cut one of these slices into 128 yet smaller slices, and that took about 620ms each. If it grew linearly, then that means the whole thing would take about 22 and a half hours to complete. That sounds alright, but it doesn't grow linearly.
Another thing I've tried is generating random numbers for every entry and using those as indices for their new location. I then go down the list and attempt to place the number at the new index. If that index is already in use, the index is incremented until it finds a free one. This works in theory, and it can do about half of it, but near the end it keeps having to search for new spots, wrapping around the list several times.
Is there any way to pull this off? Is this a feasible goal at all?
","Computing all the values seems impossible, since Crypto compute a random integer in about a milisecond, so the whole job take days.
Here is a Knuth algorithm implementation as a generator: 
from Crypto.Random.random import randint  
import numpy as np

def onthefly(n):
    numbers=np.arange(n,dtype=np.uint32)
    for i in range(n):
        j=randint(i,n-1)
        numbers[i],numbers[j]=numbers[j],numbers[i]
        yield numbers[i]

For n=10 :        
gen=onthefly(10)
print([next(gen) for i in range(9)])
print(next(gen))
#[9, 0, 2, 6, 4, 8, 7, 3, 1]
#5

For n=2**32, the generator take a minute to initialize, but calls are O(1). 
","1149","<python><list><numpy><random><pycrypto>","1","3","4","2017-07-01 22:19:10","44862688","11","1","1193112","","2017-07-01 06:00:03","2017-07-01 05:52:58",""
"22330678","no acceptable C compiler found in $PATH on google compute engine","When I try to install pycrypto on a GCE i get the error ""no acceptable C compiler found in $PATH"".
I use pip like this
pip install pycrypto

The GCE is a backports-debian-7-wheezy-v20131127 image. I assumed the debian image would have gcc installed, but typing 'gcc' gives 'command not found'. 
Is there a way to install pycrypto without having to use gcc?
Has anyone managed to install pycrypto on GCE yet?
","Try: 
sudo apt-get install python-crypto

I'm glad it worked out
","1148","<python><pycrypto><google-compute-engine>","0","2","2","2014-03-12 10:32:28","22331689","3","","","","","2014-03-11 16:26:33",""
"22330678","no acceptable C compiler found in $PATH on google compute engine","When I try to install pycrypto on a GCE i get the error ""no acceptable C compiler found in $PATH"".
I use pip like this
pip install pycrypto

The GCE is a backports-debian-7-wheezy-v20131127 image. I assumed the debian image would have gcc installed, but typing 'gcc' gives 'command not found'. 
Is there a way to install pycrypto without having to use gcc?
Has anyone managed to install pycrypto on GCE yet?
","The default cloud images for GCE are pretty stripped down, and don't include things like compilers, etc because you don't necessarily want a compiler on your webserver.
Using apt to install pycrypto works; if you do want a compiler, use apt-get install gcc.  Similarly, you may want to install x11, emacs, etc if you're using your VM for development.
Using the pycrypto package from Debian is a good idea if you want to make sure that you get security updates, so I'd recommend that over installing your own.
","1148","<python><pycrypto><google-compute-engine>","0","1","2","2014-03-12 10:32:28","22331689","3","","","","","2014-03-11 16:26:33",""
"34335103","ValueError: Not a valid PEM pre boundary","this piece of code 
key=RSA.importKey(open(""receiver.pem"",""rb"").read())

returns this error
ValueError: Not a valid PEM pre boundary

and 
key=RSA.importKey(open(""receiver.pem"",""r"").read())

returns
ValueError: Not a valid PEM post boundary

The code worked fine when we used Pycrypto and Python 2.7, now i have shifted to Pycryptodome and Python 3.4.3(using 2to3). But now this code won't work. I can't even try anything because i can't even understand what it means.
To generate the .PEM file this code was used.
random_generator = Random.new().read
rsakey = RSA.generate(1024, random_generator)
f=open(email+'.pem','wb')
f.write(rsakey.exportKey(""PEM""))
f.write(rsakey.publickey().exportKey(""PEM""))
f.close()

This is what the contents of a .PEM file is like.
-----BEGIN RSA PRIVATE KEY-----
MIICWwIBAAKBgQCIQhU/+nPVFgw+T0Tf7NEpHYB12I/qywo5xBdp5kaLxEHD9zOx
2FTOX2OMPiL7fv/PW/AXuSrvD3pZAFzGmkigWdQP6TES5ZM65LUzeUUy8noHkZ00
D4mz+4a4YtBGaFyNL2CCxOAczi9rx5UB6qbY6+5kkBNd7k75XDp28g2bjwIDAQAB
AoGAaFRQ+P/HmSyci0ker2YgcJ7KMXF0II7+cWSXmNpcwb+vq2CoEFBX/vxCuKsL
Fg4TyK3YlBGPsiPjxink35xaZm7eI5sqbmD8Bnw4JZsQ1FN/Si6pbNLZkmOxyZgl
CoQvuvLavKH5GSWQ5wqvLD6OHBGd7w0YyGVOQHNQvOKhLgECQQC6EgYqOOz8ddQ2
qaLHxJl1LwpwvA4nWUWqeP69yl4QrhOmfTyLxLmw8HJFuz8XYiAxKq9fxnrU0j8H
W+QKwxRBAkEAu3eVGHZF5AA+K/Co+y2MTh1uzaSqbPZY/D4+zs1eLxoVM/e0MLYI
SqPciDTHl3HjZqivpJ5SbU3DcfvGSlV7zwJAJUxRogsRLjYsWNy+PY8iN8Q7Mofv
ymFxvo9MeRzkqDFMzRXTmizQEDDSpzm2luhbjZ+B0hAGNT0D12TLHIEoQQI/N6dI
m/qAxS9NRb4sbGUZQhd6zZIVBkQcJsZT3xEY5OLZaJQg6lUgIQiEb+s7Vbp5yABM
JJLb5ZcwbqZQN8EpAkEAt716AEn2qyxONCfLan1tuZVF+3V0KVphdhu6gdXpyHBv
9hLm2Ezb5VXMoU+IoeYGQ3SaSr6Gb1ein/sXGyaZuQ==
-----END RSA PRIVATE KEY----------BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCIQhU/+nPVFgw+T0Tf7NEpHYB1
2I/qywo5xBdp5kaLxEHD9zOx2FTOX2OMPiL7fv/PW/AXuSrvD3pZAFzGmkigWdQP
6TES5ZM65LUzeUUy8noHkZ00D4mz+4a4YtBGaFyNL2CCxOAczi9rx5UB6qbY6+5k
kBNd7k75XDp28g2bjwIDAQAB
-----END PUBLIC KEY-----

","You are getting that error because of this function:
def decode(pem_data, passphrase=None):
    ...

    # Verify Pre-Encapsulation Boundary
    r = re.compile(""\s*-----BEGIN (.*)-----\n"")
    m = r.match(pem_data)
    if not m:
        raise ValueError(""Not a valid PEM pre boundary"")
    marker = m.group(1)

    # Verify Post-Encapsulation Boundary
    r = re.compile(""-----END (.*)-----\s*$"")
    m = r.search(pem_data)
    if not m or m.group(1) != marker:
        raise ValueError(""Not a valid PEM post boundary"")

Unfortunately, in non-multiline regular expressions, $ means ""end of the string"". This implies that PyCryptoDome expects the END boundary at the end of the string, and there are no ways to work around this problem.
You have three options:

split the two keys and import them separately;
fix PyCryptoDome;
switch back to PyCrypto.

","1138","<python><python-3.x><pycrypto><pem>","3","2","2","2019-01-09 23:16:41","34340929","16","","3822467","","2015-12-17 16:14:39","2015-12-17 12:53:20",""
"34335103","ValueError: Not a valid PEM pre boundary","this piece of code 
key=RSA.importKey(open(""receiver.pem"",""rb"").read())

returns this error
ValueError: Not a valid PEM pre boundary

and 
key=RSA.importKey(open(""receiver.pem"",""r"").read())

returns
ValueError: Not a valid PEM post boundary

The code worked fine when we used Pycrypto and Python 2.7, now i have shifted to Pycryptodome and Python 3.4.3(using 2to3). But now this code won't work. I can't even try anything because i can't even understand what it means.
To generate the .PEM file this code was used.
random_generator = Random.new().read
rsakey = RSA.generate(1024, random_generator)
f=open(email+'.pem','wb')
f.write(rsakey.exportKey(""PEM""))
f.write(rsakey.publickey().exportKey(""PEM""))
f.close()

This is what the contents of a .PEM file is like.
-----BEGIN RSA PRIVATE KEY-----
MIICWwIBAAKBgQCIQhU/+nPVFgw+T0Tf7NEpHYB12I/qywo5xBdp5kaLxEHD9zOx
2FTOX2OMPiL7fv/PW/AXuSrvD3pZAFzGmkigWdQP6TES5ZM65LUzeUUy8noHkZ00
D4mz+4a4YtBGaFyNL2CCxOAczi9rx5UB6qbY6+5kkBNd7k75XDp28g2bjwIDAQAB
AoGAaFRQ+P/HmSyci0ker2YgcJ7KMXF0II7+cWSXmNpcwb+vq2CoEFBX/vxCuKsL
Fg4TyK3YlBGPsiPjxink35xaZm7eI5sqbmD8Bnw4JZsQ1FN/Si6pbNLZkmOxyZgl
CoQvuvLavKH5GSWQ5wqvLD6OHBGd7w0YyGVOQHNQvOKhLgECQQC6EgYqOOz8ddQ2
qaLHxJl1LwpwvA4nWUWqeP69yl4QrhOmfTyLxLmw8HJFuz8XYiAxKq9fxnrU0j8H
W+QKwxRBAkEAu3eVGHZF5AA+K/Co+y2MTh1uzaSqbPZY/D4+zs1eLxoVM/e0MLYI
SqPciDTHl3HjZqivpJ5SbU3DcfvGSlV7zwJAJUxRogsRLjYsWNy+PY8iN8Q7Mofv
ymFxvo9MeRzkqDFMzRXTmizQEDDSpzm2luhbjZ+B0hAGNT0D12TLHIEoQQI/N6dI
m/qAxS9NRb4sbGUZQhd6zZIVBkQcJsZT3xEY5OLZaJQg6lUgIQiEb+s7Vbp5yABM
JJLb5ZcwbqZQN8EpAkEAt716AEn2qyxONCfLan1tuZVF+3V0KVphdhu6gdXpyHBv
9hLm2Ezb5VXMoU+IoeYGQ3SaSr6Gb1ein/sXGyaZuQ==
-----END RSA PRIVATE KEY----------BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCIQhU/+nPVFgw+T0Tf7NEpHYB1
2I/qywo5xBdp5kaLxEHD9zOx2FTOX2OMPiL7fv/PW/AXuSrvD3pZAFzGmkigWdQP
6TES5ZM65LUzeUUy8noHkZ00D4mz+4a4YtBGaFyNL2CCxOAczi9rx5UB6qbY6+5k
kBNd7k75XDp28g2bjwIDAQAB
-----END PUBLIC KEY-----

","As Peter Wood commented previously, the issue is the end-of-line format.
I'm working on a project using python 2.7 in CentOS, and I've got a publickey from a website, which gave me the above error.
The problem was that it came with \r\n end of line sequence, which made the python-jose library jwt.decode call to pyCripto library fail. 
My fix was to just remove '\r' character before returning the response this way:
<pre>
response = get(url).content
return response.replace('\r', '')


And this made the thing work at last. Hope this help!
","1138","<python><python-3.x><pycrypto><pem>","3","0","2","2019-01-09 23:16:41","34340929","16","","3822467","","2015-12-17 16:14:39","2015-12-17 12:53:20",""
"16230997","Unable to verify a signature in python using PKI","I am struggling to port the following java code to python. I am using PyCrypto to read the publickKey but it fails with an assertionError:
keyDER = b64decode(publicKeyBase64)
seq = asn1.DerSequence()
seq.decode(keyDER)
keyPub = RSA.construct( (seq[0], seq[1]) )
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
  File ""/usr/local/lib/python2.7/site-packages/Crypto/PublicKey/RSA.py"", line 539, in construct
    key = self._math.rsa_construct(*tup)
  File ""/usr/local/lib/python2.7/site-packages/Crypto/PublicKey/_slowmath.py"", line 84, in rsa_construct
    assert isinstance(n, long)
AssertionError

These are the variables:
signature = ""cIUiufopX990NUXlVUznzf3\/gBwhXol2ligPdGp7CHrZNAdDzkDj5pQoikj2sKFiRACEA STh gE4oKJwRAC7Qz1NsNHWCkIYZPAwX\/95sHiVmNiqfXIowm9cqLWyL XLJwkmQupNoTauYWiEm1YF904LyI4hecNST4H4lNcl68=""

message = ""2425605254855826526""

publicKeyBase64=""MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCVicPgYOx7mDPYDtq4kj24uRfIdNVxjMp9DNlsvmDr9ojrDBn+Ue1YdxYb/rBlDFYab57ClhzOgZjdmUv3T3WKKXE8To9tN2PG/bYEkZpBxn6M1vl0mrp/l6WbyUH4oXUx4kQAeM8/XXZdymbg8S6oLeWT1YrAj6k15fWpSMN0qQIDAQAB""

and this is the code in Java that verifies the signature.
import java.security.KeyFactory;
import java.security.Signature;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.X509EncodedKeySpec;

verifySignature(String message, String signature, String publicKeyBase64 )    

    byte[] keyBytes = javax.xml.bind.DatatypeConverter.parseBase64Binary(publicKeyBase64);
    X509EncodedKeySpec spec = new X509EncodedKeySpec(keyBytes);
    KeyFactory fact = KeyFactory.getInstance(""RSA"");
    pubKey = (RSAPublicKey) fact.generatePublic(spec);

    Signature genSignature = Signature.getInstance(""SHA1withRSA"");
    genSignature.initVerify(pubKey);
    genSignature.update(message.getBytes(""UTF-8""));
    boolean result = genSignature.verify(javax.xml.bind.DatatypeConverter.parseBase64Binary(signature));

","There is a specific class method called importKey in PyCrypto to read in DER or PEM encoded RSA keys.
from base64 import b64decode
from Crypto.PublicKey import RSA

publicKeyBase64=""MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCVicPgYOx7mDPYDtq4kj24uRfIdNVxjMp9DNlsvmDr9ojrDBn+Ue1YdxYb/rBlDFYab57ClhzOgZjdmUv3T3WKKXE8To9tN2PG/bYEkZpBxn6M1vl0mrp/l6WbyUH4oXUx4kQAeM8/XXZdymbg8S6oLeWT1YrAj6k15fWpSMN0qQIDAQAB""
keyDER = b64decode(publicKeyBase64)
keyPub = RSA.importKey(keyDER)

If your key is not a simple DER, but a full X.509 certificate, see this other StackOverflow answer.
Once you have keyPub, you can verify the signature like this:
from Crypto.Signature import PKCS1_v1_5
from Crypto.Hash import SHA

verifier = PKCS1_v1_5.new(keyPub)
h = SHA.new(message)
result = verifier.verify(h, signature)

","1137","<python><rsa><pycrypto><m2crypto>","0","1","1","2014-05-06 03:34:46","16308734","0","1","","","","2013-04-26 07:30:35",""
"45371160","How to decrypt an AES encrypted data with key and iv already provided","I am trying to decrypt an AES encrypted data.
I am having the key and iv with me but I think key is also encoded.
Here is the code I have used:
import binascii
from Crypto.Cipher import AES
enckey = '5f35604280b44dd1073f7ee83e346d81'
key = binascii.unhexlify(enckey)
key32 = ""{: <32}"".format(key).encode(""utf-8"")
data='692fa1deafad8ad80b98cd6f077899e9be457ac5364c3822aae9457d4912e4829d71cb
8702bd10e1d54f7a0461edba193517b353835480bd174804f586776e623473022548ff098a95
45b608282bf498a36968dd6b858ad631f6eaa79ea1a87c984f4a8da5a9d1cee1b11b32d46c0d
2a670d4e634ecc47c7105387a0a38853c91e10747170de69ebf6f0e1a99f0134ddb0af0cec2c
fc70f53c9eab7227460cf1153ef686a5dc5014bd286fb0efdec571327f5a4874bec5fd5c65f0
9f0ed10e906e4199dd8c3cb8340aca1904f486a70b02554581f0e723d22854188e933ed9fce6
0172099bc675b89eba39651bbc0658ae264213217f14ff4f0824494585d8856dfd44e4ce9505
e43762a9f1ea48f9c736603e83c3e10c5740cdf279dc3a914e19eee089160ffa91180d1b4299
38ab1b6a4272d1779f7702f760cbac3f35fc35c16fcf21c7e00183f306e7a18f71ffb3b62b91
250dca7dd627876a6cedbfe83f0f18abbbb7c7650566a7f761844243fe1271cef22b1026a3f1
d37b8e7bd7c068331897680ec101e269ce66c3f129de33d3277c2cc120feb88f77f1bb851d41
b83468128366b7ed92ae07f37675cee07355ebcdfcba90a690e3d4817cd18123a0c9de175ea6
c5049c51170ee73facd5148f6525024116991b0601598a3501e770493dab0653e146981e91d2
ea9c50fbd1e6b8bb38407655c518f30852ce43ed62d1c578e642c4fa92f00bbf102c3418ed52
ed23138c86d327bbc4718ec44440f289e3af6c096c7ad69af5d941768b0f4b2e3decfad5dcfe
6dc491ce4f2f9d86d226b87f19dfb56dc44f6d66820773e6fcfa4fcd7958da2d639037627057
99a414baf93081242c2b594981c93b892f4f28883203875a4010ace9a5eafea51ee406'
cipher_text = binascii.unhexlify(data)
# Decryption
decryption_suite = AES.new('key32', AES.MODE_CBC, 'heF9BATUfWuISyO8')
plain_text = decryption_suite.decrypt(cipher_text)
print plain_text

And this is the error I am receiving :
UnicodeDecodeError: 'ascii' codec can't decode byte 0x80 in position 4: 
ordinal not in range(128)

I am unable to figure out the problem with my key and data...
And please let me know if I have to make any changes to my code.
","this one may help you
import binascii
from Crypto.Cipher import AES
import re

enckey = '5f35604280b44dd1073f7ee83e346d81'
key32 = ""{: <32}"".format(enckey).encode(""utf-8"")
cipher = AES.new(key32, AES.MODE_ECB)
data='692fa1deafad8ad80b98cd6f077899e9be457ac5364c3822aae9457d4912e4829d71cb8702bd10e1d54f7a0461edba193517b353835480bd174804f586776e623473022548ff098a9545b608282bf498a36968dd6b858ad631f6eaa79ea1a87c984f4a8da5a9d1cee1b11b32d46c0d2a670d4e634ecc47c7105387a0a38853c91e10747170de69ebf6f0e1a99f0134ddb0af0cec2cfc70f53c9eab7227460cf1153ef686a5dc5014bd286fb0efdec571327f5a4874bec5fd5c65f09f0ed10e906e4199dd8c3cb8340aca1904f486a70b02554581f0e723d22854188e933ed9fce60172099bc675b89eba39651bbc0658ae264213217f14ff4f0824494585d8856dfd44e4ce9505e43762a9f1ea48f9c736603e83c3e10c5740cdf279dc3a914e19eee089160ffa91180d1b429938ab1b6a4272d1779f7702f760cbac3f35fc35c16fcf21c7e00183f306e7a18f71ffb3b62b91250dca7dd627876a6cedbfe83f0f18abbbb7c7650566a7f761844243fe1271cef22b1026a3f1d37b8e7bd7c068331897680ec101e269ce66c3f129de33d3277c2cc120feb88f77f1bb851d41b83468128366b7ed92ae07f37675cee07355ebcdfcba90a690e3d4817cd18123a0c9de175ea6c5049c51170ee73facd5148f6525024116991b0601598a3501e770493dab0653e146981e91d2ea9c50fbd1e6b8bb38407655c518f30852ce43ed62d1c578e642c4fa92f00bbf102c3418ed52ed23138c86d327bbc4718ec44440f289e3af6c096c7ad69af5d941768b0f4b2e3decfad5dcfe6dc491ce4f2f9d86d226b87f19dfb56dc44f6d66820773e6fcfa4fcd7958da2d63903762705799a414baf93081242c2b594981c93b892f4f28883203875a4010ace9a5eafea51ee406'
cipher_text = binascii.unhexlify(data)
# Decryption


plain_text = re.sub('\0*$','', cipher.decrypt( data[16:]))
print plain_text

or try this 
import binascii
from Crypto.Cipher import AES


enckey = '5f35604280b44dd1073f7ee83e346d81'
key32 = ""{: <32}"".format(enckey).encode(""utf-8"")
cipher = AES.new(key32, AES.MODE_ECB)
data='692fa1deafad8ad80b98cd6f077899e9be457ac5364c3822aae9457d4912e4829d71cb8702bd10e1d54f7a0461edba193517b353835480bd174804f586776e623473022548ff098a9545b608282bf498a36968dd6b858ad631f6eaa79ea1a87c984f4a8da5a9d1cee1b11b32d46c0d2a670d4e634ecc47c7105387a0a38853c91e10747170de69ebf6f0e1a99f0134ddb0af0cec2cfc70f53c9eab7227460cf1153ef686a5dc5014bd286fb0efdec571327f5a4874bec5fd5c65f09f0ed10e906e4199dd8c3cb8340aca1904f486a70b02554581f0e723d22854188e933ed9fce60172099bc675b89eba39651bbc0658ae264213217f14ff4f0824494585d8856dfd44e4ce9505e43762a9f1ea48f9c736603e83c3e10c5740cdf279dc3a914e19eee089160ffa91180d1b429938ab1b6a4272d1779f7702f760cbac3f35fc35c16fcf21c7e00183f306e7a18f71ffb3b62b91250dca7dd627876a6cedbfe83f0f18abbbb7c7650566a7f761844243fe1271cef22b1026a3f1d37b8e7bd7c068331897680ec101e269ce66c3f129de33d3277c2cc120feb88f77f1bb851d41b83468128366b7ed92ae07f37675cee07355ebcdfcba90a690e3d4817cd18123a0c9de175ea6c5049c51170ee73facd5148f6525024116991b0601598a3501e770493dab0653e146981e91d2ea9c50fbd1e6b8bb38407655c518f30852ce43ed62d1c578e642c4fa92f00bbf102c3418ed52ed23138c86d327bbc4718ec44440f289e3af6c096c7ad69af5d941768b0f4b2e3decfad5dcfe6dc491ce4f2f9d86d226b87f19dfb56dc44f6d66820773e6fcfa4fcd7958da2d63903762705799a414baf93081242c2b594981c93b892f4f28883203875a4010ace9a5eafea51ee406'
cipher_text = binascii.unhexlify(data)
# Decryption


plain_text = cipher.decrypt(cipher_text)
print plain_text

","1135","<python><python-2.7><python-3.x><aes><pycrypto>","-1","0","2","2017-07-29 10:35:46","","3","","","","","2017-07-28 10:30:59",""
"45371160","How to decrypt an AES encrypted data with key and iv already provided","I am trying to decrypt an AES encrypted data.
I am having the key and iv with me but I think key is also encoded.
Here is the code I have used:
import binascii
from Crypto.Cipher import AES
enckey = '5f35604280b44dd1073f7ee83e346d81'
key = binascii.unhexlify(enckey)
key32 = ""{: <32}"".format(key).encode(""utf-8"")
data='692fa1deafad8ad80b98cd6f077899e9be457ac5364c3822aae9457d4912e4829d71cb
8702bd10e1d54f7a0461edba193517b353835480bd174804f586776e623473022548ff098a95
45b608282bf498a36968dd6b858ad631f6eaa79ea1a87c984f4a8da5a9d1cee1b11b32d46c0d
2a670d4e634ecc47c7105387a0a38853c91e10747170de69ebf6f0e1a99f0134ddb0af0cec2c
fc70f53c9eab7227460cf1153ef686a5dc5014bd286fb0efdec571327f5a4874bec5fd5c65f0
9f0ed10e906e4199dd8c3cb8340aca1904f486a70b02554581f0e723d22854188e933ed9fce6
0172099bc675b89eba39651bbc0658ae264213217f14ff4f0824494585d8856dfd44e4ce9505
e43762a9f1ea48f9c736603e83c3e10c5740cdf279dc3a914e19eee089160ffa91180d1b4299
38ab1b6a4272d1779f7702f760cbac3f35fc35c16fcf21c7e00183f306e7a18f71ffb3b62b91
250dca7dd627876a6cedbfe83f0f18abbbb7c7650566a7f761844243fe1271cef22b1026a3f1
d37b8e7bd7c068331897680ec101e269ce66c3f129de33d3277c2cc120feb88f77f1bb851d41
b83468128366b7ed92ae07f37675cee07355ebcdfcba90a690e3d4817cd18123a0c9de175ea6
c5049c51170ee73facd5148f6525024116991b0601598a3501e770493dab0653e146981e91d2
ea9c50fbd1e6b8bb38407655c518f30852ce43ed62d1c578e642c4fa92f00bbf102c3418ed52
ed23138c86d327bbc4718ec44440f289e3af6c096c7ad69af5d941768b0f4b2e3decfad5dcfe
6dc491ce4f2f9d86d226b87f19dfb56dc44f6d66820773e6fcfa4fcd7958da2d639037627057
99a414baf93081242c2b594981c93b892f4f28883203875a4010ace9a5eafea51ee406'
cipher_text = binascii.unhexlify(data)
# Decryption
decryption_suite = AES.new('key32', AES.MODE_CBC, 'heF9BATUfWuISyO8')
plain_text = decryption_suite.decrypt(cipher_text)
print plain_text

And this is the error I am receiving :
UnicodeDecodeError: 'ascii' codec can't decode byte 0x80 in position 4: 
ordinal not in range(128)

I am unable to figure out the problem with my key and data...
And please let me know if I have to make any changes to my code.
","The following code works:
from Crypto.Cipher import AES

keyAscii = '5f35604280b44dd1073f7ee83e346d81'
keyBinary = bytes(keyAscii, 'ascii')
ciphertextHex='692fa1deafad8ad80b98cd6f077899e9be457ac5364c3822aae9457d4912e4829d71cb8702bd10e1d54f7a0461edba193517b353835480bd174804f586776e623473022548ff098a9545b608282bf498a36968dd6b858ad631f6eaa79ea1a87c984f4a8da5a9d1cee1b11b32d46c0d2a670d4e634ecc47c7105387a0a38853c91e10747170de69ebf6f0e1a99f0134ddb0af0cec2cfc70f53c9eab7227460cf1153ef686a5dc5014bd286fb0efdec571327f5a4874bec5fd5c65f09f0ed10e906e4199dd8c3cb8340aca1904f486a70b02554581f0e723d22854188e933ed9fce60172099bc675b89eba39651bbc0658ae264213217f14ff4f0824494585d8856dfd44e4ce9505e43762a9f1ea48f9c736603e83c3e10c5740cdf279dc3a914e19eee089160ffa91180d1b429938ab1b6a4272d1779f7702f760cbac3f35fc35c16fcf21c7e00183f306e7a18f71ffb3b62b91250dca7dd627876a6cedbfe83f0f18abbbb7c7650566a7f761844243fe1271cef22b1026a3f1d37b8e7bd7c068331897680ec101e269ce66c3f129de33d3277c2cc120feb88f77f1bb851d41b83468128366b7ed92ae07f37675cee07355ebcdfcba90a690e3d4817cd18123a0c9de175ea6c5049c51170ee73facd5148f6525024116991b0601598a3501e770493dab0653e146981e91d2ea9c50fbd1e6b8bb38407655c518f30852ce43ed62d1c578e642c4fa92f00bbf102c3418ed52ed23138c86d327bbc4718ec44440f289e3af6c096c7ad69af5d941768b0f4b2e3decfad5dcfe6dc491ce4f2f9d86d226b87f19dfb56dc44f6d66820773e6fcfa4fcd7958da2d63903762705799a414baf93081242c2b594981c93b892f4f28883203875a4010ace9a5eafea51ee406'
ciphertextBinary = bytes.fromhex(ciphertextHex)
ivAscii = 'heF9BATUfWuISyO8'
ivBinary = bytes(ivAscii, 'ascii')
# Decryption
decrypter = AES.new(keyBinary, AES.MODE_CBC, ivBinary)
plaintextBinary = decrypter.decrypt(ciphertextBinary)
plaintext = plaintextBinary.decode('utf-8')
print(plaintext)

and outputs
connection_type=wifi&android_id=863e87fea9a09533&app_name=AstroNest&app_version=53&app_version_name=2.7.1&device_brand=motorola&device_cpu_type=armv7l&device_model=XT1562&google_aid=ab95a01a-242b-4ac2-ad12-b6189e983a56&google_ad_tracking_disabled=0&insdate=1494826343&installer=com.android.vending&language=en&mac_address=02%3A00%3A00%3A00%3A00%3A00&mat_id=45c0a743-a948-434b-a20d-fe66e870d285&os_version=6.0.1&screen_density=3.0&screen_layout_size=1920x1080&sdk_version=3.11.4&conversion_user_agent=Dalvik%2F2.1.0+%28Linux%3B+U%3B+Android+6.0.1%3B+XT1562+Build%2FMPDS24.107-70-1-5%29&currency_code=USD&revenue=0.0&system_date=1494826532


But it's cryptographically wrong in many ways:

The key looks like 32 character hex string (which would encode a 128-bit key), but you actually need to treat it as ASCII encoding a 32-byte key. That's wrong, since keys are supposed to be uniformly distributed binary string
Similarly an IV is supposed to be a uniform binary, but it's actually ASCII
The IV is fixed, but the whole point of an IV is to be different (unpredictably random for CBC mode) for each message.
CBC mode is vulnerable to padding oracle attacks, which allow an active attacker to recover the plaintext if they can execute a chosen ciphertext attack where they learn which ciphertext decrypt successfully.

You should use authenticated encryption with unique IVs instead.
","1135","<python><python-2.7><python-3.x><aes><pycrypto>","-1","2","2","2017-07-29 10:35:46","","3","","","","","2017-07-28 10:30:59",""
"31644056","Is Python 2.7 ""wide-build"" usc4 not compatible with certain libraries?","I required the ability to work with some unicode characters with high values, so I re-installed Python 2.7.10 with option --enable-unicode=ucs4 --prefix (""wide-build"").
I then started getting the following error:
...
    from Crypto.Cipher import _ARC4
ImportError: /home/fast/usr/local/lib/python2.7/site-packages/Crypto/Cipher/_ARC4.so: undefined symbol: PyUnicodeUCS2_FromString

I realized that undefined symbol: PyUnicodeUCS2_FromString must be because of the new build, so I then tried reinstalling everything fresh (new Python and new pip and newly installed libraries). I still had the same errors.
Is it simply not possible to use the Crypto library with Python wide-build?
I could not find any documentation on this. Are there any known work-arounds?
Thank you for any help!
","There is no satisfactory solution for this problem in Python 2: the UCS2 and UCS4 builds have incompatible ABIs, and require libraries to be built from source (as most binary eggs are built against the default UCS2 ABI). This issue details the problem, and the resolution that made it into Python 3.3 (PEP 393).
Your rationale for using a UCS4 build is a little suspect, though. A UCS2 build of Python is perfectly capable of ""work[ing] with some unicode characters with high values"", using surrogate pairs to represent supplementary code points.
","1128","<python><python-2.7><unicode><pycrypto>","4","5","1","2015-07-28 11:50:51","31674075","1","3","","","","2015-07-27 02:19:46",""
"25024930","Python: Encrypt using existing public key","I have a public key that looks like this:
BgIAAACkAABSU0ExAAQAAAEAAQCH3cm40A7P6GzlRrDMC1hEgB9kwPYLCei0z/NxnEwzj/brpcmhMXoebyW7GLoAgNaVigi5/+UMbuXwva9e6WpAZu+45a+wAuBJGetnlhfhgGWs8WpaE6qYpB94m3UUWdAB5rwSvC4gxHzHcGCk5M3ilNxA5Hk3jcXcvwzum+fHqg==
How do I encrypt a string with that key using Python?
I have been trying varyations on this:
from Crypto.PublicKey import RSA
rsakey = RSA.importKey(key)

But I keep getting the error ValueError: RSA key format is not supported
","You need to use the following as the input instead:
-----BEGIN PUBLIC KEY-----
BgIAAACkAABSU0ExAAQAAAEAAQCH3cm40A7P6GzlRrDMC1hEgB9kwPYLCei0z/NxnEwzj/brpcmhMXoebyW7GLoAgNaVigi5/+UMbuXwva9e6WpAZu+45a+wAuBJGetnlhfhgGWs8WpaE6qYpB94m3UUWdAB5rwSvC4gxHzHcGCk5M3ilNxA5Hk3jcXcvwzum+fHqg==
-----END PUBLIC KEY-----

","1120","<python><encryption><pycrypto>","0","0","1","2017-05-31 18:38:07","","6","","","","","2014-07-29 21:02:02",""
"15517000","openssl not decrypted files encrypted by pycrypto","i encrypt file in python:
from Crypto.Cipher import AES
from Crypto import Random
key = Random.new().read(16)
iv = Random.new().read(AES.block_size)
encryptor = AES.new(key, AES.MODE_CBC, iv)
with open(in_file, 'rb') as fin, open(out_file, 'wb') as fout:
    fout.write(iv)
    while True:
        chunk = fin.read(16*1024)
        if len(chunk) == 0:
             break
        elif len(chunk) % 16 != 0:
             chunk += b' ' * (16 - len(chunk) % 16)
        fout.write(encryptor.encrypt(chunk)
print base64.b32encode(key)

but when after what  i try decrypt it with openssl:
openssl aes-256-cbc -d -in enc -out new.zip
it returns bag magic number
what i doing wrong?
","Program is using 128 bit AES key for encryption, as seen from the line:
key = Random.new().read(16)

So, instead of using 
openssl aes-256-cbc -d -in enc -out new.zip

use this
openssl aes-128-cbc -d -in enc -out new.zip

","1118","<python><openssl><aes><pycrypto>","2","0","1","2013-03-20 06:54:27","15517150","1","","2182629","","2013-03-20 06:51:51","2013-03-20 06:45:58",""
"33951096","RSA decryption produces invalid characters along with correct message in Python","I am encrypting (RSA) user input client side using JavaScript (jsencrypt),  when I process it server side, I get the correct message, but there are some invalid characters that show up.
For input ""Hello"", I get:
\�<�>Dǆ䥋��wp+6'���W=��$�O�rܨosf�.C��qKT=_�{�B��pE#�-mn��t����Y^0���L�9f@�=O*��\���B��z�;��""�0��k&��z,��J�\�LHello

The code is as follows:
<script type=""text/javascript"">

  // Call this code when the page is done loading.
  $(function() {

    // Run a quick encryption/decryption when they click.
    $('#testme').click(function(event) {



      // Encrypt with the public key...
      var encrypt = new JSEncrypt();
      encrypt.setPublicKey($('#pubkey').val());
      var encrypted = encrypt.encrypt($('#message').val());
    $(""#message"").val(encrypted);
//event.preventDefault();
//alert(encrypted)

    });
  });
</script>

<form action=""/encrypt"" method=""POST"">
<input type=""hidden"" name=""csrfmiddlewaretoken"" value=""{{ csrf_token }}"">
<input type=""text"" placeholder=""Name"" name=""message"" id=""message""/><br/>
<button id=""testme"">Create Order</button>
</form>

<textarea id=""pubkey"" hidden rows=""15"" cols=""65"">-----BEGIN PUBLIC KEY-----MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCbbUFcBLb2dAWeZcM8YmYqA2sG nchR0N9yDFJd95FrBEwqHqxeCyJarx8O98Sn/7Cy3IE7W5wkvlFKkn1zmFkm/lK8 VYRGqg2ZvdnJ6HLcIwzqEOS9at/4gdSE/7DdXvq9iYGx1pcPoEeXgt3WlVNpxCja lbrINAS1W6+wnmDf/wIDAQAB-----END PUBLIC KEY-----</textarea>

The python code is:
def encrypt_message(request):
    key64=""MIICXQIBAAKBgQCbbUFcBLb2dAWeZcM8YmYqA2sGnchR0N9yDFJd95FrBEwqHqxe CyJarx8O98Sn/7Cy3IE7W5wkvlFKkn1zmFkm/lK8VYRGqg2ZvdnJ6HLcIwzqEOS9 at/4gdSE/7DdXvq9iYGx1pcPoEeXgt3WlVNpxCjalbrINAS1W6+wnmDf/wIDAQAB AoGBAJcgiOjcfLru3XfDIy9XzlcTs8FfMiS7oEjYyk4sJu2T5CsgYCGhWeorVVvM dx+Tc1C3L8FztkPT+l80SV9Yx3WpzE8t4rK80ZWWTqAoiGfXiAIovr+NtNAyH27I xI7HAYw8a6+G9OOHWf/EnBtUQZsHASY2EZl84NcEVd/3nkVhAkEAuLCcJqYlZgbS u4MX2VOtfEw+fn4xTG9Gq1gcSaQVQdti0smFZU78HsOfoW8RcqgINRrBTwv4igmu s4RsNfcgpQJBANdwLawnCKpi+S2MUzB2nSDIkcsvkrSbOPPpDMciXVXD9ImIanWa Pp5vIUO+w2YDGzR4wwkKsnz+Rb2BZb7jmNMCQGrm3xuH4/HQVT3wPWewBaUCxNGW 3ZYueqtHDuiZLyy1fdggiTQAqfJsrQNWNLU3CbkjSW0lsrDDtfl21uPNrXkCQQCV Kq3k8c31M7w2BmAfQTGAXn9cAR+B/6vKbkWTp76aQKiTham4rcjHqEiPAImIm4P9 q9PW8dot41zkXrDVH/9TAkA/qRRUKgrBvDDxAXgoyijqZt3xOMTySk5gEw7Z/5ej 4sM4M4aTT79ZV00rkbPMJm5w1OZbbBLaCW7ikLvA/hoh""

    keyDER = b64decode(key64)
    keyPub = RSA.importKey(keyDER)


    encrypted =request.POST['message']
    raw_cipher_data = b64decode(encrypted)
    decrypted = keyPub.decrypt(raw_cipher_data)

    return HttpResponse((decrypted))

","JSencrypt is based on JSBN which only supports RSA with PKCS#1 v1.5 padding. I suspect that RSA is actually Crypto.PublicKey.RSA from pyCrypto. This class only implements textbook RSA without any padding. Therefore, when you decrypt the message, the padding is not removed.
You need to use Crypto.Cipher.PKCS1_v1_5 for that.
from Crypto.Cipher import PKCS1_v1_5

key = PKCS1_v1_5.new(keyPub)
sentinel = {""error"":True}
decrypted = key.decrypt(raw_cipher_data, sentinel)
if decrypted is sentinel:
    print(""failure"")
else:
    print(""success: "" + decrypted)

","1109","<python><encryption><rsa><pycrypto>","2","1","1","2015-11-27 10:45:09","","0","","1816580","","2015-11-27 10:45:09","2015-11-27 05:58:45",""
"33887788","Error installing pycrypto on my mac","I've tried using different solutions suggested to this problem but none seem to be working for me
I am trying to install pycrypto using pip install on my mac which I recently upgraded to 10.11 along with the latest Xcode as few people had suggested.
But I am still getting clang: error: linker command failed with exit code 1 (use -v to see invocation) error: command 'clang' failed with exit status 1
Here is also the full error log am getting in the terminal any help greatly appreciated
Failed to build pycrypto
Installing collected packages: pycrypto
  Running setup.py install for pycrypto
    Complete output from command /Users/flexmaster411/openchain/venv/bin/python2.7   -c ""import setuptools,   tokenize;__file__='/private/var/folders/y4/kk3kmh9d47v8lk3lnd2k2vhr0000gn/T/pip-build-zTYGCp/pycrypto/setup.py';exec(compile(getattr(tokenize, 'open', open)(__file__).read().replace('\r\n', '\n'), __file__, 'exec'))"" install --record /var/folders/y4/kk3kmh9d47v8lk3lnd2k2vhr0000gn/T/pip-mXfxhl-record/install-record.txt --single-version-externally-managed --compile --install-headers /Users/flexmaster411/openchain/venv/bin/../include/site/python2.7/pycrypto:
running install
running build
running build_py
running build_ext
running build_configure
building 'Crypto.PublicKey._fastmath' extension
clang -fno-strict-aliasing -fno-common -dynamic -I/usr/local/include -I/usr/local/opt/sqlite/include -I/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.9.sdk/System/Library/Frameworks/Tk.framework/Versions/8.5/Headers -fwrapv -Wall -Wstrict-prototypes -std=c99 -O3 -fomit-frame-pointer -Isrc/ -I/usr/include/ -I/usr/local/Cellar/python/2.7.8_2/Frameworks/Python.framework/Versions/2.7/include/python2.7 -c src/_fastmath.c -o build/temp.macosx-10.9-x86_64-2.7/src/_fastmath.o
src/_fastmath.c:1545:20: warning: comparison of unsigned expression < 0 is always false [-Wtautological-compare]
                        else if (result < 0)
                                 ~~~~~~ ^ ~
src/_fastmath.c:1621:20: warning: comparison of unsigned expression < 0 is always false [-Wtautological-compare]
                        else if (result < 0)
                                 ~~~~~~ ^ ~
2 warnings generated.
clang -bundle -undefined dynamic_lookup -L/usr/local/lib -L/usr/local/opt/sqlite/lib build/temp.macosx-10.9-x86_64-2.7/src/_fastmath.o -lgmp -o build/lib.macosx-10.9-x86_64-2.7/Crypto/PublicKey/_fastmath.so
ld: illegal text-relocation to '___gmp_binvert_limb_table' in /usr/local/lib/libgmp.a(mp_minv_tab.o) from '___gmpn_divexact_1' in /usr/local/lib/libgmp.a(dive_1.o) for architecture x86_64
clang: error: linker command failed with exit code 1 (use -v to see invocation)
error: command 'clang' failed with exit status 1

","I think this topic might help. That guy has the same issue: On Mac OS X, easy_install fabric and/or easy_install pycrypto fails due to linker error "illegal text-relocation"
You just need to install all necessary libraries. I would suggest to use home brew http://brew.sh/
","1108","<python><c++><xcode><macos><pycrypto>","1","2","1","2015-11-24 07:48:46","33888025","0","","","","","2015-11-24 07:33:05",""
"2973546","AES Encryption. From Python (pyCrypto) to .NET","I am currently trying to port a legacy Python app over to .NET which contains AES encrpytion using from what I can tell pyCrpyto. I have very limited Python and Crypto experience. The code uses the snippet from the following page. http://www.djangosnippets.org/snippets/1095/
So far I believe I have managed to work out that it that it calls Crypto.Cipher with AES and the first 32 character of our secret key as the password, but no mode or IV. It also puts a prefix on the encrpyed text when it is added to database.
What I can't work out is how I can decrypt the existing ecrypted database records in .NET. I have been looking at RijndaelManaged but it requires an IV and can't see any reference to one in python. 
Can anyone point me in the dirrection to what method could be used in .NET to get the desired result.
","AES (and Rijndael) requires a mode and an IV.  The IV may be a vector of zeroes, but it is still an IV.  the mode may not be explicitly specified... but if it's using AES, there's still a mode.
Try this answer for some background:
Which AES library to use in Ruby/Python?
","1106","<c#><.net><python><aes><pycrypto>","2","1","1","2010-06-17 23:17:44","","0","","","","","2010-06-04 11:13:23",""
"11269295","Java Python Message Signature and Verification","My server is coded in Python and I am making a java client for this server.
I am Signing a message(data) using:
public static byte[] Sign(PrivateKey privateKey, byte[] data) throws Exception{
        System.out.println(""Signing the key inside RSACrypto#Sign"");
        Signature dsa = Signature.getInstance(""SHA1withRSA"");

        SecureRandom secureRandom =null;
        dsa.initSign(privateKey,secureRandom);
        dsa.update(data);
        return dsa.sign();
}

This returns a byteArray(named signed_data) , now I am encoding this signature using Base64.encodeBase64 and converting the byteArray(named my_byte_array) so formed into string using :
String str = new String(my_byte_array)

and sending this string to Server.
On server side, I receive this string , then Server verifies the signature using:
publicKey.verify(str(data), (long(base64.b64decode(my_byte_array)),))

using library http://gdata-python-client.googlecode.com/hg/pydocs/gdata.Crypto.PublicKey.RSA.html
when I try to print my_byte_array on both side they are same, and so is signed_data and base64.b64decode(my_byte_array)
but I am getting this error:
ValueError: invalid literal for long() with base 10: '\x8b\xa1\xbb\x19fO\xea\xe7\xa4B\xd4\xd2\xa1\xe3\xb9\xd0\x89n\xa2\xfe\xb5\xedsL\x02\xba\xad\x12!qjp\x0c%+Z\t\xa7\x12\x08\x90\xfaTk\xca\xd0\xae\xd8\xa9\xfa\xbb]>9\x1c\x80\xd0

As far as I can think, this error is arising because Java signs the message into byte and python expects it to be in Long.
Is there a way to solve this problem?
","You have actually 2 problems.
The first one is that - according to the Java Cryptograpy Architecture API - the SHA1withRSA algorithm involves PKCS#1 v1.5 padding. At the Python side, you must use the same padding scheme to verify the signature; that can be achieved with PyCrypto's PKCS#1 v1.5 signature module (Crypto.Signature.PKCS1_v1_5).
The second problem is the one you point out: the verify method of an RSA PyCrypto object
oddly requires the signature to be encoded as an integer. However, by using the module I mentioned above, the problem will go away, since it accepts byte strings.
","1103","<java><python><compatibility><digital-signature><pycrypto>","0","1","1","2012-07-01 15:37:44","11283321","0","","","","","2012-06-29 21:37:20",""
"35779799","Making RSA encryption compatible in Python (PyCrypto) and PHP (OpenSSL)","I am migrating an entire PHP API, and while I used PyCrypto before, I am not sure how to translate the following encryption call, since I need the exact same result. The PHP call is:
define('KEY', ""-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC81t5iu5C0JxYq5/XNPiD5ol3Z
w8rw3LtFIUm7y3m8o8wv5qVnzGh6XwQ8LWypdkbBDKWZZrAUd3lybZOP7/82Nb1/
noYj8ixVRdbnYtbsSAbu9PxjB7a/7LCGKsugLkou74PJDadQweM88kzQOx/kzAyV
bS9gCCVUguHcq2vRRQIDAQAB
-----END PUBLIC KEY-----"");
$cypher = """";
$result = openssl_public_encrypt($plain, $cypher, KEY, OPENSSL_PKCS1_PADDING);
echo bin2hex($cypher);

Assuming everything goes right, this prints the content from $cypher, passed to hexadecimal. For a sample input ""azzzzzzzzzzzzdfdf"" I get something like: ""2281aeebc1166cdfb2f17a0a0775d927ca5a9ad999bae0e4954f58bd8082fdf7efe1fd284876530341f714456d7eb8cd44c57b20ab27029b84d5dc77a674bede3fe9065282931404286082e9df8607bdcff0818b90324dfee7d76b566d0f99bebc5cc913372c276ba373712128f1bcc226b59367cff93f7cdd6dbde25b366863"".
I must assume this value as right, since the code was taken from an existing API I am migrating. However, trying the same with PyCrypto (yes, I am migrating the API to be available in Python), I use the following code:
def bin2hex(s):
    return """".join([hex(ord(c))[2:].zfill(2) for c in s])

KEY = """"""-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC81t5iu5C0JxYq5/XNPiD5ol3Z
w8rw3LtFIUm7y3m8o8wv5qVnzGh6XwQ8LWypdkbBDKWZZrAUd3lybZOP7/82Nb1/
noYj8ixVRdbnYtbsSAbu9PxjB7a/7LCGKsugLkou74PJDadQweM88kzQOx/kzAyV
bS9gCCVUguHcq2vRRQIDAQAB
-----END PUBLIC KEY-----""""""

from Crypto.Cipher import PKCS1_v1_5
from Crypto.PublicKey import RSA
encrypter = PKCS1_v1_5.new(RSA.importKey(KEY))
print bin2hex(encrypter.encrypt(""azzzzzzzzzzzzdfdf""));

While I expect the same value be returned and printed, the value finally is ""3dd94ffabd01bb0e94010c0fedbcd4eb648f12e5d9e6d934b77ae86f76681d8a1b790cad9fddf6e6720415b4d645e525c33c402fa9778739b8e461790387e9508f7158a5fdc5723f5fc26d166b11a00759f0e0ee3ba6719a2e7c6b918f66e1311d1fff878ee2ca8762e1d6120f1e9585a76cdc7719ca20129ae76182b4277170"".
Using PKCS1_OAEP outputs ""290f60f37088c2cb46ae9221b01ff46a463f270ef7cf70bbea49de0b5ae43aec34a0eb46e694cf22f689eb77e808c590fdc30eda09f9d3f3cb8c15e0505bf5a984c2a121bc9fa83c6b5ccf50235f072467b4ae9cdf0f0ee2e486626ffa62ad1aa715fbe29e8afe4ceab3ca5a5df4c1dc75d7f258285d7ff1f4f2b4dcb7a8413a"".
It is easy to tell that I must fix my python code. How can I fix my python code so it returns the exact same result as the given PHP call?
","Your code is fine. PKCS#1 v1.5 padding in pyCrypto is randomized (source). So the encryption will always be different even if you use the same key and plaintext. This is a desirable property.
If you want to check compatibility between pyCrypto and PHP's OpenSSL extension, then you would need to encrypt in one, decrypt in the other and check that you got what you expected.

PKCS#1 v1.5 padding should not be used nowadays, because there are efficient attacks against it. OAEP is a much better alternative.
","1098","<php><python><encryption><rsa><pycrypto>","3","3","1","2016-03-03 21:50:21","35783270","4","","1816580","","2016-03-03 21:50:21","2016-03-03 18:11:22",""
"40483264","Encrypt in PHP and decrypt in Python or openssl command line","A lot of data in a database I took over contains encrypted fields. The method used to encrypt the data is the following PHP code:
<?php
$text = ""test 1234\ntest 2345\ntest 3456\ntest 4567"";
$key = ""0123456789abcdefghijklmnopqrstuv"";
$enc = openssl_encrypt($text, ""AES-256-CBC"", $key);
echo ""Raw: "" . $text . ""\n"";
echo ""Key: "" . $key . ""\n"";
echo ""Key (Hex) "" . bin2hex($key) . ""\n"";
echo $enc;
echo ""\n"";
?>

When I run the code I get the following output including a warning about the empty initialization vector (iv), which I have to ignore because the whole DB data is encrypted this way (I perfectly know this should not be done this way).
Warning: openssl_encrypt(): Using an empty Initialization Vector (iv) is potentially insecure and not recommended in /tmp/cp3_encdec/enc2.php on line 5
Raw: test 1234
test 2345
test 3456
test 4567
Key: 0123456789abcdefghijklmnopqrstuv
Key (Hex) 303132333435363738396162636465666768696a6b6c6d6e6f70717273747576
uPNXdo2K0Gvy/+MW0YFR7utFsrNDAp8yYaDxT352W3lPKNOkNMg+l3eFKEi0zeze

Decrypt using php openssl_decrypt($encrypted, ""AES-256-CBC"", $key) gives me full output. Php manual does not give a lot of insight what is used to encrypt in regards to padding and iv when leaving those values empty.
Next I tried to decrypt on the command line using the openssl command:
echo ""uPNXdo2K0Gvy/+MW0YFR7utFsrNDAp8yYaDxT352W3lPKNOkNMg+l3eFKEi0zeze"" | openssl aes-256-cbc -d -a -K 303132333435363738396162636465666768696a6b6c6d6e6f70717273747576 -iv 0

which works fine and returns the initial input:
test 1234
test 2345
test 3456
test 4567

Trying to decrypt in Python using the following code results in wrong decryption:
import base64
from Crypto.Cipher import AES 

PAD = u'\0000' 

def decrypt(enc, key):
    decobj = AES.new(key, AES.MODE_ECB)
    data = decobj.decrypt(base64.b64decode(enc))
    data = data.rstrip(PAD.encode())
    print(str(data))

key = ""0123456789abcdefghijklmnopqrstuv""
decrypt(""uPNXdo2K0Gvy/+MW0YFR7utFsrNDAp8yYaDxT352W3lPKNOkNMg+l3eFKEi0zeze"", key)

Result, first 16 bytes are readable but not the rest:
b'test 1234\ntest 2\x8b\xc7b|\xf9\xef\xa3\x1f\xd2\xcc\xd7#\xe7\x8b%\x8b\x981\x92\x87v4\xa8;h\xa9\xf8Fw\x7fRp'

Modifying my input to contain more data will also break decryption using the openssl command:
Raw: [system] test:1234
[system] test:2345
[database] test:3456
[unknown] test:4567

Key: 0123456789abcdefghijklmnopqrstuv
Key (Hex) 303132333435363738396162636465666768696a6b6c6d6e6f70717273747576
9KWsGGLa1/g3f36kUJJ/oHNiEnIDorZULwR8pXZHwJhul2XsdZLwLN8jMptP9fcWgY42oTq7RTm+/8CKPiGFPWrY/3neLvf8UNedsVuKRlc=

Openssl command line:
echo ""9KWsGGLa1/g3f36kUJJ/oHNiEnIDorZULwR8pXZHwJhul2XsdZLwLN8jMptP9fcWgY42oTq7RTm+/8CKPiGFPWrY/3neLvf8UNedsVuKRlc="" | openssl aes-256-cbc -d -a -K 303132333435363738396162636465666768696a6b6c6d6e6f70717273747576 -iv 0
bad decrypt
15143:error:0606506D:digital envelope routines:EVP_DecryptFinal_ex:wrong final block length:/BuildRoot/Library/Caches/com.apple.xbs/Sources/OpenSSL098/OpenSSL098-64/src/crypto/evp/evp_enc.c:323:

The same using Python code from above will result in first 16 bytes readable, but not the rest:
b'[system] test:12\xc7\x91\xa6C\x11\xa3\xa4\x8cR\x12#\x84$\xf7\x0c\xd4IP!F6\xa8\xed0Np\x1d\xc7\x174\xa5\xc5N\xe3\x00\x9f\x01\xa8\xc3\x18\xea\x158\xc0:\x9b\x9cx\xee\xf9X\xfc\x1a\xcf J\xca\xc5\xf4\xbf\x08\x16\x8f<'

Again if using php openssl_decrypt works:
<?php
$text = ""9KWsGGLa1/g3f36kUJJ/oHNiEnIDorZULwR8pXZHwJhul2XsdZLwLN8jMptP9fcWgY42oTq7RTm+/8CKPiGFPWrY/3neLvf8UNedsVuKRlc="";
$key = ""0123456789abcdefghijklmnopqrstuv"";
$dec = openssl_decrypt($text, ""AES-256-CBC"", $key);
echo $dec;
echo ""\n"";
?>

[system] test:1234
[system] test:2345
[database] test:3456
[unknown] test:4567

Someone has an idea how php encrypts the data, I suppose it is a padding problem but am not sure and I am open for any help on this topic.
","I made some modifications to my Python code which seems to solve the issue:
import base64
from Crypto.Cipher import AES 

IV = 16 * '\x00'

def decrypt(enc, key):
    decobj = AES.new(key, AES.MODE_CBC, IV)
    data = decobj.decrypt(base64.b64decode(enc))
    print(str(data.decode()))

key = ""0123456789abcdefghijklmnopqrstuv""
decrypt(""uPNXdo2K0Gvy/+MW0YFR7utFsrNDAp8yYaDxT352W3lPKNOkNMg+l3eFKEi0zeze"", key)

On the command line I did not found a solution yet.
","1098","<php><python><encryption><pycrypto><pyopenssl>","0","0","1","2016-11-08 15:39:57","","1","2","608639","","2016-11-08 15:39:57","2016-11-08 09:28:58",""
"8608731","PyCrypto compatibility with CommonCrypto in CFB mode?","I'm trying to get somepython code to decrypt data that was encrypted using the OS X CommonCrypto APIs.  There is little to no documentation on the exact options that CommonCrypto uses, so I'm needing some help figuring out what options to set in PyCrypto.
Specifically, my CommonCrypto decryption setup call is:
CCCryptorCreateWithMode(kCCDecrypt, kCCModeCFB, kCCAlgorithmAES128, ccDefaultPadding, NULL, key, keyLength, NULL, 0, 0, 0, &mAESKey);

My primary questions are:

Since there is both a kCCModeCFB and kCCModeCFB8, what is CommonCrypto's definition of CFB mode - what segment size, etc?
What block size is the CommonCrypto AES128 using?  16 or 128?
What is the default padding, and does it even matter in CFB mode?

Currently, the first 4 bytes of data is decrypting successfully with PyCrypto *as long as I set the segment_size to 16*.
Ideas?
","Without knowing CommonCrypto or PyCrypto, some partial answers:

AES (in all three variants) has a block size of 128 bits, which are 16 bytes.
CFB (cipher feedback mode) would actually also work without padding (i.e. with a partial last block), since for each
block the ciphertext is created as the XOR of plaintext with some keystream block, which only depends on previous blocks.
(You still can use any padding you want.)
If you can experiment with some known data, first have a look at the ciphertext size. If it is not a multiple of a
full block (and the same as the plaintext + IV), then it is quite likely no padding.
Otherwise, decrypt it with noPadding mode, have a look at the result, and compare with the different known padding modes.
From a glance at the source code, it might be PKCS#5-padding.
CFB8 is a variant of CFB which uses only the top 8 bits (= one byte) of each block cipher call output (which takes the
previous 128 bits (= 16 bytes) of ciphertext (or IV) as input). This needs 16 times as many block cipher calls, but
allows partial sending of a stream without having to worry about block boundaries.
There is another definition of CFB which includes a segment size - here the segment size is the number of
bits (or bytes) to be used from each cipher output. In this definition, the ""plain"" CFB would have a segment size of 128 bits (= 16 bytes), CFB8 would have a segment size of 8 bits (one byte).

","1089","<macos><encryption><aes><pycrypto><commoncrypto>","3","2","1","2011-12-23 22:02:05","","2","2","17324","","2011-12-22 21:21:04","2011-12-22 19:20:54",""
"22132775","Combining WinCrypt & PyCrypto Encryption","I'm writing a native-C program which (among others) handles encryption/decryption of data. The data is processed (before or after execution) using a python script, whose main purpose is to encrypt/decrypt the data (and perhaps do some additional parsing of it).
I'm having problems in decrypting the data generated by WinCrypt API, using PyCrypto API, and vice-versa. Specifically I've experienced this problem in AES-256 based encryption. Both sides of the encryption/decryption scheme run on the same machine, and are provided the same encryption key. They are both CBC based and (if the documentation is not lying) are initialized with a 0-based initialization vector. However, no matter what I try to do, they don't seem to get along. The resulting data (encrypted using WinCrypt & decrypted using PyCrypto or vice versa) is all messed up (not even close to the original). Just to be clear - each of the mechanisms works on its own (decrypting WinCrypt-encrypted data using WinCrypt works perfectly, and the same for PyCrypto).
The native encryption code is based on WinCrypt's examples. It generally looks like the following code:
HCRYPTPROV hCryptProv;
HCRYPTKEY hKey;
HCRYPTHASH hHash;
CHAR szPassword[PASSWORD_LENGTH] = """";
DWORD dwLength;
PBYTE pbBuffer = NULL;   
DWORD dwBufferLen; 
DWORD dwCount; 

CryptAcquireContext(&hCryptProv, NULL, NULL, PROV_RSA_AES, 0);
CryptCreateHash(hCryptProv, CALG_MD5, 0, 0, &hHash);
CryptHashData(hHash, (BYTE *)szPassword, dwLength, 0);
CryptDeriveKey(hCryptProv, CALG_AES_256, hHash, 0, &hKey);

CryptEncrypt(hKey, NULL, FALSE, 0, pbBuffer, &dwCount, dwBufferLen);
CryptDecrypt(hKey, 0, FALSE, 0, pbBuffer, &dwCount);

(This is just a general scheme, and obviously the actual code contains all the necessary error handling, handles cleanup, etc).
The PyCrypto code:
from Crypto.Cipher import AES
context = AES.new(""K""*32, mode=AES.MODE_CBC, IV=""\x00""*16)
context.encrypt(ORIGINAL_DATA)
context.decrypt(ENC_DATA)

","","1087","<python><winapi><encryption><aes><pycrypto>","4","","0","2014-03-02 20:12:04","","3","","2009616","","2014-03-02 20:12:04","2014-03-02 20:10:05",""
"17317051","How do I export an ElGamal key to a text file?","I've been working on encrypting a string and displaying it as a QR code (after base64 encoding the string). 
I want to use the ElGamal private-public key encryption module in PyCrypto for the encryption, but the problem is that it has no export function to save the key to a text file. Am I missing something? And if not, is there a clever way that I can export it, or something else that I should look at instead? 
PS. The reason for using ElGamal and not RSA is that I can make the keys smaller than 1024 bytes, which makes for a smaller, less complicated qr code.
","You can use access the ElGamal key components directly, since they are member of the key object.
In Python 2.x, one could do the following to print out the components in a text file:
from Crypto.PublicKey import ElGamal
from Crypto.Random import get_random_bytes

key = ElGamal.generate(2048, get_random_bytes)
comps = ('p', 'g', 'y', 'x')
out = ""\n"".join([""{} = {}"".format(comp, getattr(key, comp)) for comp in comps])
print out

","1080","<python><encryption><rsa><pycrypto><elgamal>","1","1","1","2013-07-08 09:53:32","","3","","2424896","","2013-06-27 18:02:45","2013-06-26 10:00:32",""
"26835539","AES_128_CTR encryption by openssl and PyCrypto","Wondering the right way to convert a AES_128_CTR encryption by openssl to PyCrypto.
First, I did an encryption by openssl as following:
openssl enc -aes-128-ctr -in input.mp4 -out output.openssl.mp4 -K 7842f0a1ebc38f44e3e0c81943f68582 -iv d01f40dfc8ec8cd9

And then, I tried to do the same thing through PyCrypto:
from Crypto.Cipher import AES
from Crypto.Util import Counter
key = '7842f0a1ebc38f44e3e0c81943f68582'
iv = 'd01f40dfc8ec8cd9'

ctr_e = Counter.new(128, initial_value=int(iv, 16))
encryptor = AES.new(key.decode('hex'), AES.MODE_CTR, counter=ctr_e)

with open('output.pycrypto.mp4', 'wb') as fout:
    with open('input.mp4', 'rb') as fin:
        fout.write(encryptor.encrypt(fin.read()))

I assume they are supposed to be similar, but it is not:
diff output.openssl.mp4 output.pycrypto.mp4
Binary files output.openssl.mp4 and output.pycrypto.mp4 differ

","OpenSSL behaves as expected (fortunately, as documentation to this fact is missing for the command line) and uses the given IV as leftmost bytes of a big endian counter. In other words, the bytes given are the most significant part of the 16 byte counter. The code in the question uses the IV as initial counter value, i.e. it is interpreted as the least significant part of the counter.
Now it took me some time to fix the Python code as there are two problems with the Counter class I had to work around:

the size of the counter should be 64 bit instead of 128 bit if a prefix of 8 bytes is used; this is a design feature, but it may cause overflow if the amount of bits reserved for the counter is small (it's OK with the current setting of 64 bit though)
the default initial counter value is set to 1 while CTR mode always starts counting at 0; this is likely an off-by-one bug in the Counter design

So without further ado:
from Crypto.Cipher import AES
from Crypto.Util import Counter

key = '7842f0a1ebc38f44e3e0c81943f68582'.decode('hex')
iv = 'd01f40dfc8ec8cd9'.decode('hex')

ctr_e = Counter.new(64, prefix=iv, initial_value=0)
encryptor = AES.new(key, AES.MODE_CTR, counter=ctr_e)

with open('output.pycrypto.mp4', 'wb') as fout:
    with open('input.mp4', 'rb') as fin:
        fout.write(encryptor.encrypt(fin.read()))

","1070","<python><encryption><openssl><aes><pycrypto>","4","5","1","2014-11-12 17:54:14","26875149","0","1","261718","","2014-11-10 03:20:52","2014-11-10 01:47:41",""
"39568110","Error when trying to install PyCrypto","I'm using Mac with latest OS X update. I've trying to install PyCrypto over Terminal but I'm getting error which is shown on image below. The command I used is sudo pip install pycrypto. Can you please help me with this issue? How do I resolve this? Thanks for your answers.

Here is the error:
macfive:Desktop admin$ sudo pip install pycrypto
The directory '/Users/admin/Library/Caches/pip/http' or its parent directory is not owned by the current user and the cache has been disabled. Please check the permissions and owner of that directory. If executing pip with sudo, you may want sudo's -H flag.
The directory '/Users/admin/Library/Caches/pip' or its parent directory is not owned by the current user and caching wheels has been disabled. check the permissions and owner of that directory. If executing pip with sudo, you may want sudo's -H flag.
Collecting pycrypto
  Downloading pycrypto-2.6.1.tar.gz (446kB)
    100% |████████████████████████████████| 450kB 2.4MB/s 
Installing collected packages: pycrypto
  Running setup.py install for pycrypto ... error
    Complete output from command /Library/Frameworks/Python.framework/Versions/2.7/Resources/Python.app/Contents/MacOS/Python -u -c ""import setuptools, tokenize;__file__='/private/tmp/pip-build-CYttJL/pycrypto/setup.py';exec(compile(getattr(tokenize, 'open', open)(__file__).read().replace('\r\n', '\n'), __file__, 'exec'))"" install --record /tmp/pip-mWAGUD-record/install-record.txt --single-version-externally-managed --compile:
    running install
    running build
    running build_py

.
.
.

src/hash_template.c:291: warning: return from incompatible pointer type
    src/hash_template.c: At top level:
    src/hash_template.c:306: error: initializer element is not constant
    src/hash_template.c:306: error: (near initialization for ‘ALG_functions[1].ml_name’)
    src/hash_template.c:306: error: initializer element is not constant
    src/hash_template.c:306: error: (near initialization for ‘ALG_functions[1].ml_meth’)
    fatal error: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/lipo: can't figure out the architecture type of: /var/tmp//ccCeO0Zf.out
    error: command 'gcc-4.2' failed with exit status 1

    ----------------------------------------
Command ""/Library/Frameworks/Python.framework/Versions/2.7/Resources/Python.app/Contents/MacOS/Python -u -c ""import setuptools, tokenize;__file__='/private/tmp/pip-build-CYttJL/pycrypto/setup.py';exec(compile(getattr(tokenize, 'open', open)(__file__).read().replace('\r\n', '\n'), __file__, 'exec'))"" install --record /tmp/pip-mWAGUD-record/install-record.txt --single-version-externally-managed --compile"" failed with error code 1 in /private/tmp/pip-build-CYttJL/pycrypto/

Error is to big to copy it all. So I just copied the beginning and the end.
","You need to install the Python development files. I think it will work. Try 
apt-get install autoconf g++ python2.7-dev 

Or
sudo apt-get install python-dev

Either one of the above and then this below one 
pip install pycrypto

","1044","<python><pip><pycrypto>","1","1","1","2016-09-19 11:04:29","39571648","6","","5761667","","2016-09-19 08:13:16","2016-09-19 08:00:00",""
"27540956","Python Crypto RSA, 127 bytes length cipher with a 1024 bits key","When I test RSA encryption on my laptop using PyCrypto (Archlinux, package: python-crypto/python2-crypto), I used a 1024 key generated by RSA module to encrypt a random data, and it  produced a 127 bytes length cipher.
A simple code following: (I got the values when debugging)
from Crypto.PublicKey import RSA
pubkey = b'-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDq+qbaMTZtPH3LuXLrAn37YGzc\ngrL7ieTILtkXTl5PIozJUQZ06bQXr/uS+FtvYNSvaT53ZpSyKmVmWtoX7lFzA6FW\nsILFTgFUDNRnPIQv1rQb16wi694rKPRe1uIr8/hthXtTec8b2aJovizQOlkXY0Pq\nZohNGofi02xlUD8KsQIDAQAB\n-----END PUBLIC KEY-----'
prikey = b'-----BEGIN RSA PRIVATE KEY-----\nMIICXgIBAAKBgQDq+qbaMTZtPH3LuXLrAn37YGzcgrL7ieTILtkXTl5PIozJUQZ0\n6bQXr/uS+FtvYNSvaT53ZpSyKmVmWtoX7lFzA6FWsILFTgFUDNRnPIQv1rQb16wi\n694rKPRe1uIr8/hthXtTec8b2aJovizQOlkXY0PqZohNGofi02xlUD8KsQIDAQAB\nAoGBAMkKEI0ng8Br+9i8XqTQ6gaTVjBHpmhtbw8SfexhwXCFR9zJ9PM8LDgD+gKh\neGFPgEhfi/FOE7Rnb3/mBShqXsWbqz7STJ05GOxtKo+L1z5K7X4E9WmVjIEVU46I\nhF43LJQvoDjQRbZh2cUMSYUR8+LqJJd6MFdhLJhEIf+LhCbBAkEA71lRBiSwZH/8\nsaUE4qZ/vxkS65czBcWLSCgn+7D/kvunX1hxqi3zTxMn4gyluw3IICzvLFgdDG6f\nUZk23aDcyQJBAPtTgvi4lYAIoeh6Xx8NZxroVNVBlP9BzJTBCcnX1Ym0aC/p+6n8\n7Lu9bkKk/hb0r7Oy76wzxObWv9uvRQNp+qkCQQCoOy8oEkGpYgxLEKIObNj9iLIz\nxWKne+IaJZ902UPKG/fYnGHIK+QIgH5X9GvIvjcb5nl1wbkpM9fnkrltrdOBAkBe\n7LbuHEGTHy+P8BBXWSeVOSU5etC87GxJzvNUginMHhCv8C82kCoV6sFneIvjvb1T\nIQV3RAJdscS7Q+LMHE4pAkEAzp2o8+2+9QJwzkpxGyNjJ7ZECQsZIb7MOH7LYhX0\ncnwffXFt4ttcwbyX2SdhCVPBDkczkJkOzcnEqtjoWt+dBw==\n-----END RSA PRIVATE KEY-----'

pub = RSA.importKey(pubkey)
data = b'\xc9\xc5\xa9\x1b\xc2\x0f\x05\xf0\xe3\xe1W\x9d\x94b\xc6 '
cipher = pub.encrypt(data, 0)[0]
print(len(cipher))

This will print 127 (normally it would be 128 for 1024 bits key), and I don't know why.
","You are not using a correct encryption scheme. From the documentation:

Even though you may choose to directly use the methods of an RSA key object to perform the primitive cryptographic operations (e.g. _RSAobj.encrypt), it is recommended to use one of the standardized schemes instead (like Crypto.Cipher.PKCS1_v1_5 or Crypto.Signature.PKCS1_v1_5).

although nowadays the more modern/safe Crypto.Cipher.PKCS1_OAEP should be preferred over Crypto.Cipher.PKCS1_v1_5.
If you use one of these schemes then the output will always be 128 bytes. The reason for that is that PKCS#1 specifies a function called I2OSP, which converts the result of the modular exponentiation (which is a number bounded by the modulus/the key size) to a static number of octets, the key size to be exact.
The output of the direct encrypt function is what is called raw or textbook RSA: just modular exponentiation. This will just return the number, which may have leading zero bits. How many depends on chance, (somewhat) on the value of the modulus and if signed or unsigned encoding is used.
","1044","<python><encryption><rsa><pycrypto>","2","0","1","2014-12-28 13:59:03","","3","","","","","2014-12-18 07:06:38",""
"48601182","PyCryptodome RSA signature and verification","I am working on a program which transfers data over the internet in python using the socket module. I am now trying to implement encryption using the pycryptodome module. I am using Salsa20 to transfer normal messages and to transfer the Salsa20 key I am using RSA. The problem is that the code is raising a ValueError when verifying the hash. This is the protocol:

The client connects to the server (and generates a Salsa20 key)
The server generates an RSA key pair and sends the public key to the client
The client generates its own key pair and sends the public key
The client encrypts the Salsa20 key with the public key
The client signs and sends a hash of the encrypted Salsa20 key
The client sends the encrypted Salsa20 key
The server hashes the unsigned encrypted key, and verifies that it is the same as the signed one (this is the line where the problem happens)
The server decrypts the unsigned key

I have checked and printed repeatedly, and the hashes are the same. The sockets are not the problem.
The recv_message and send_message functions are the functions I am using to package up the sending and receiving protocol. In the program the sockets are set up beforehand, so here are the important parts of the server.
import socket
from Crypto.Cipher import Salsa20, PKCS1_OAEP
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256
from Crypto.PublicKey import RSA

def send_message(message_to_send, connection):
    if type(message_to_send) is bytes:
        message = message_to_send
    else:
        message = str(message_to_send).encode()
    length_of_msg = str(len(message))
    length_of_msg = ('0' * (5-len(length_of_msg))) + length_of_msg  # This part is adding zeros as padding so that the first message is always 5 chars
    connection.send(length_of_msg.encode())
    connection.send(message)

def recv_message(connection, no_decode=False):
    length_of_msg = int(connection.recv(5))
    message = connection.recv(length_of_msg)
    if not no_decode:
        message = message.decode('utf-8')
    return message

def get_key(connection):
    rsa_server_key = RSA.generate(2048)
    send_message(rsa_server_key.publickey().exportKey(), connection)
    rsa_client_key = RSA.import_key(recv_message(connection, no_decode=True))
    key_signed = recv_message(connection, no_decode=True)
    key_unsigned = recv_message(connection, no_decode=True)
    hash_verify = pkcs1_15.new(rsa_client_key)
    hash_verify.verify(SHA256.new(data=key_unsigned), key_signed)
    rsa_cipher = PKCS1_OAEP.new(rsa_server_key)
    key = rsa_cipher.decrypt(key_unsigned)
    return key

The client has the same socket related functions and imported modules.
def share_key(key_to_send, connection):
    rsa_server_key = RSA.import_key(recv_message(connection, no_decode=True))
    rsa_client_key = RSA.generate(2048)
    send_message(rsa_server_key.publickey().exportKey(), connection)
    rsa_cipher = PKCS1_OAEP.new(rsa_server_key)
    salsa_key_unsigned = rsa_cipher.encrypt(key_to_send)
    key_signer = pkcs1_15.new(rsa_client_key)
    send_message(key_signer.sign(SHA256.new(data=salsa_key_unsigned)), connection)
    send_message(salsa_key_unsigned, connection)

The traceback is:
Traceback (most recent call last):
  File ""0,9Serverside.py"", line 686, in <module>
    main()
  File ""0,9Serverside.py"", line 670, in main
    key_input = get_key(server)
  File ""0,9Serverside.py"", line 243, in get_key
    hash_verify.verify(SHA256.new(data=salsa_key_unsigned), salsa_key_signature)
  File ""/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Crypto/Signature/pkcs1_15.py"", line 139, in verify
    raise ValueError(""Invalid signature"")
ValueError: Invalid signature

What do you think could be the reason the verification isn't working. Thank you for the help.
","The client is sending back the server's public key instead of its own public key.
The line:
 send_message(rsa_server_key.publickey().exportKey(), connection)

should be:
 send_message(rsa_client_key.publickey().exportKey(), connection)

","1042","<python><sockets><pycrypto><pycryptodome>","2","3","1","2018-02-05 10:09:20","48620067","2","","8890660","","2018-02-04 01:41:22","2018-02-03 19:30:21",""
"32616148","pyCrypto importing only ""crypto"", not ""Crypto"" (not found)","I'm using python 2.7 and tried installing the pyCrypto module using pip (pip install pycrypto) which downloaded and installed the 2.6 version, as it is needed for using twisted.
However, whenever I try to use it, I get an ImportError saying that the module Crypto doesn't exist - but I can import crypto normally.
I already tried uninstalling and installing it again, but still didn't work.
Is there any bug in the package downloaded using pip or is it anything else I'm doing wrong?
Thank you.
","If anyone is having this same problem, the reason was that I had mistakenlly installed the package crypto before installing pycrypto. Once I removed both packages and reinstalled pycrypto everything worked.
I believe that it might be related to Windows treating crypto and Crypto folders as the same.
","1039","<python-2.7><pip><pycrypto>","1","2","1","2015-09-17 14:27:58","32632879","0","","","","","2015-09-16 18:34:28",""
"19305030","How to make an GnuPG key compatible with Pycrypto","I'm trying to use a key generated via GPG with RSA encryption (this part is changeable, GnuPG and Pycrypto aren't) to encrypt a file, but I'm having trouble actually importing the key. I'm currently using code like this:
key = cryptoRSA.importKey(public_key)
cipher = PKCS1_OAEP.new(RSAkey)
file = open(filename)

However, this is throwing an error because my public_key is not a DER structure. Is there a way I can generate a public_key that WOULD work with Pycrypto? I'm really new to cryptography, so I'm not entirely sure on what to do about this problem at all.
","A GPG key is much more than a ""normal"" key; it adds a lot of other stuff. You should convert it first to a standard OpenSSL PEM key using the openpgp2pem tool in monkeysphere.
","1039","<python><pycrypto><gnupg><openpgp>","4","2","2","2015-06-17 01:30:19","","0","","695343","","2013-10-10 19:57:55","2013-10-10 19:55:54",""
"19305030","How to make an GnuPG key compatible with Pycrypto","I'm trying to use a key generated via GPG with RSA encryption (this part is changeable, GnuPG and Pycrypto aren't) to encrypt a file, but I'm having trouble actually importing the key. I'm currently using code like this:
key = cryptoRSA.importKey(public_key)
cipher = PKCS1_OAEP.new(RSAkey)
file = open(filename)

However, this is throwing an error because my public_key is not a DER structure. Is there a way I can generate a public_key that WOULD work with Pycrypto? I'm really new to cryptography, so I'm not entirely sure on what to do about this problem at all.
","I have done this using openpgp2pem from Monkeysphere.
First, get the key's ID by doing:
gpg --list-secret-keys

Note the 8-digit hexadecimal ID of the key. E.g. 0123ABCD
Public key
To get a public key:
gpg --export --no-armor 0123ABCD | openpgp2pem 0123ABCD

Secret key
To get a secret key using openpgp2pem, unfortunately the GPG key must have its passphrase removed. Do this by:
gpg --edit-key 0123ABCD

Then use the passwd command to remove its passphrase. (You could do this on a copy of the original GPG homedir, and use the gpg --homedir option to operate on the temporary copy.)
Then after that you can do:
gpg --export-secret-keys --no-armor 0123ABCD | openpgp2pem 0123ABCD

Convert PEM for use by Python
In practice, I've found that the secret key so generated can be directly used in PyCrypto using:
from Crypto.PublicKey import RSA

with open('secret-key.pem', 'rb') as f:
    key_secret = RSA.importKey(f.read())

However, the public key generated above could not be directly used with PyCrypto (it's missing something). I had to generate a PyCrypto-compatible PEM as follows:
from base64 import b64encode, b64decode
from Crypto.PublicKey import RSA

def publicpem2pycrypto(public_pem):
    public_64 = public_pem.replace(b""-----BEGIN RSA PUBLIC KEY-----"", b"""").replace(b""-----END RSA PUBLIC KEY-----"", b"""")
    pub_der = b64decode(public_64)
    key_pub = RSA.importKey(pub_der)
    key_public_export = key_pub.exportKey('PEM')
    print(key_public_export.decode('ascii'))
    with open('public-key.pem', 'wb') as f:
        f.write(key_public_export)
    print(""Saved to public-key.pem"")

Or, it could be generated from the secret key as follows. Also, the following allows a passphrase to be added back on to the secret key:
from base64 import b64encode, b64decode
from Crypto.PublicKey import RSA

def secretpem2pycrypto(out_secret_filename, out_public_filename, secret_pem, passphrase=None):
    secret_64 = secret_pem.replace(b""-----BEGIN RSA PRIVATE KEY-----"", b"""").replace(b""-----END RSA PRIVATE KEY-----"", b"""")
    secret_64 = secret_64.replace(b""\n"", b"""")
    #print(secret_64)
    secret_der = b64decode(secret_64)
    #print(b64encode(secret_der))
    key_secret = RSA.importKey(secret_der)
    key_secret_export = key_secret.exportKey('PEM', passphrase=passphrase)
    key_public_export = key_secret.publickey().exportKey('PEM')
    print(key_secret_export.decode('ascii'))
    with open(out_secret_filename, 'wb') as f:
        f.write(key_secret_export)
    print(""Saved to "" + out_secret_filename)
    if True:
        print()
        print(key_public_export.decode('ascii'))
        with open(out_public_filename, 'wb') as f:
            f.write(key_public_export)
        print(""Saved to "" + out_public_filename)

Once the secret key has a passphrase added, it can be used via:
from Crypto.PublicKey import RSA

with open('secret-key.pem', 'rb') as f:
    key_secret = RSA.importKey(f.read(), passphrase=""xxxxxxxxxxxxxxxxxxxx"")

","1039","<python><pycrypto><gnupg><openpgp>","4","3","2","2015-06-17 01:30:19","","0","","695343","","2013-10-10 19:57:55","2013-10-10 19:55:54",""
"37721113","JSEncrypt to PyCrypto RSA encryption not possible","I'm trying to encrypt a string in Javascript using RSA (public key)
And I want to decrypt that string in Python (2.7) with my private key.
The Libraries I am using are JSEncrypt and PyCrypto
The Problem here is, that PyCrypto has problems to decrypt the encrypted string
This part encrypts the string:
var encrypted = new JSEncrypt();
encrypted.setPublicKey(key); // key == '-----BEGIN PUBLIC'.....
encrypted = encrypted.encrypt('test');

The produced encrypted String looks like this:
HJuyZtuUbR4EvjZp0pirbEw0OX8KD7UDNyvSMx3plfzYPjV7r8RBOkouCkvPBG2XOF6E5lPr0ukWClF0u5HB8M6qF8b9xTMnM/j5e41iaPa/oIZyL0JC4h+FZ7cv/P6ygmaSafQ1xc96JltTbuW3u/YYdwmv/01CnFyaIEWW3gk=
This part should decrypt it:
private_rsa_key = open('rsa_1024_priv.pem', 'r').read()
rsa_key = RSA.importKey(private_rsa_key)
decrypted = rsa_key.decrypt(b64decode(encrypted_string))

The result now should be 'test', but indeed it is:

The correct string is always being placed at the end, but i need to get rid of the part before it.
For testing purposes I tried encrypting the String in Python, using this code:
public_rsa_key = open('rsa_1024_pub.pem', 'r').read()
rsa_key = RSA.importKey(public_rsa_key)
encrypted = rsa_key.encrypt('test', 'x')

which perfectly turns out 'test' when decrypting, but looks quite different encrypted:
('\x0bY\x1ckk\x7f\xd6\xda$\x05g\xa0\x0bxI\x0cO9\x8b?>M#X\xd2_[\xb7\xf1\xd0f\xb4\x92C\x01z\xa4\x02q\xb9\xb1\x80\x82\xe8\xe4\\E\x85\xa7r\xff\x1aIL,\xd8\xce\xaf\xef\xb4)\x84\x92]\xabA\xc9+\xd6\xef}\x08\xce\xe8\x97\xf8}\x84(\xb3\x9c\xfe7g\xe0\x869\x8b\xe8\xf8\xdf\x85}\xb0\x87\x1a2\xab\xda\xca\xfd\x81\xc0\x98\x12y\x92\x13\xd6\xa5a\xf3\x9aU\xb5\xa4d\xb8\xfc\xa3\xd1\xe2<\x07\xda\xc3\x9e\xc2',)

I am wondering why this encrypted text is now a tuple, with hex inside. As in my opinion the encrypted string from JS looks correct. How could I get PyCrypto to correctly decrypt the string?
Thanks in advance
","The python code you posted only does the low level decryption, the encrypted data returned by the jsencrypt also contains pkcs1 padding.
Instead of using the raw RSA key to encrypt/decrypt in your python code, you need to use the appropriate cipher, in this case PKCS1_v1_5:
...
from Crypto.Cipher import PKCS1_v1_5
private_rsa_key = open('rsa_1024_priv.pem', 'r').read()
rsa_key = RSA.importKey(private_rsa_key)
cipher = PKCS1_v1_5.new(rsa_key)
decrypted = cipher.decrypt(encrypted, ""ERROR"")

The same applies when encrypting with the public key.
","1020","<python><python-2.7><rsa><pycrypto><jsencrypt>","0","3","1","2016-06-09 11:41:05","37724977","0","1","","","","2016-06-09 08:50:08",""
"3084142","Portable version of pyCrypto? - Python","does a portable version of pyCrypto exist? would one be easy to create?

Help would be awesome!
","I still don't quite understand what you mean by portable or by using a ""drag and drop"" folder. But pre-built binaries for Windows can be found here.
","1019","<python><django><aes><portability><pycrypto>","1","1","1","2010-06-22 23:57:57","3098030","2","","","","","2010-06-21 11:18:47",""
"14127892","PyCrypto not Working on Python 3.2","I have PyCrypto version 2.6 and I have read from the changelog that 2.4 or later version of PyCrypto Supports Python 3. 
I tried to install it using
 # python3 setup.py install 
But it gives me this error


running install
running build
running build_py
running build_ext
running build_configure
warning: GMP or MPIR library not found; Not building Crypto.PublicKey._fastmath.
building 'Crypto.Hash._MD2' extension
gcc -pthread -fwrapv -Wall -Wstrict-prototypes -fstack-protector --param=ssp-buffer-size=4 -Wformat -Wformat-security -Werror=format-security -fPIC -std=c99 -O3 -fomit-frame-pointer -Isrc/ -I/usr/include/python3.2mu -c src/MD2.c -o build/temp.linux-x86_64-3.2/src/MD2.o
src/MD2.c:31:20: fatal error: Python.h: No such file or directory
compilation terminated.
error: command 'gcc' failed with exit status 1

","I had similar problem with pycrypto on python3.3 on Ubuntu 13.04.
Installing python3.3-dev package solved the problem.
Try with installing python3.2-dev or similar depending on your distribution.
","996","<python-3.x><pycrypto>","0","1","2","2015-02-11 21:49:36","19774747","4","","","","","2013-01-02 19:25:14",""
"14127892","PyCrypto not Working on Python 3.2","I have PyCrypto version 2.6 and I have read from the changelog that 2.4 or later version of PyCrypto Supports Python 3. 
I tried to install it using
 # python3 setup.py install 
But it gives me this error


running install
running build
running build_py
running build_ext
running build_configure
warning: GMP or MPIR library not found; Not building Crypto.PublicKey._fastmath.
building 'Crypto.Hash._MD2' extension
gcc -pthread -fwrapv -Wall -Wstrict-prototypes -fstack-protector --param=ssp-buffer-size=4 -Wformat -Wformat-security -Werror=format-security -fPIC -std=c99 -O3 -fomit-frame-pointer -Isrc/ -I/usr/include/python3.2mu -c src/MD2.c -o build/temp.linux-x86_64-3.2/src/MD2.o
src/MD2.c:31:20: fatal error: Python.h: No such file or directory
compilation terminated.
error: command 'gcc' failed with exit status 1

","I solved this by making this steps :

./configure
python setup.py build
python setup.py install

hope this will help you ! for me its fine 
","996","<python-3.x><pycrypto>","0","0","2","2015-02-11 21:49:36","19774747","4","","","","","2013-01-02 19:25:14",""
"40059592","pycrypto : No module named strxor","I got this error : 
   Traceback (most recent call last):
     File ""test.py"", line 8, in <module>
       from Crypto.Cipher import PKCS1_OAEP
     File ""C:\Users\Mokhles\Downloads\google-api-python-client-1.5.3\Crypto   \Cipher\PKCS1_OAEP.py"", line 57, in <module>
       import Crypto.Signature.PKCS1_PSS
     File ""C:\Users\Mokhles\Downloads\google-api-python-client-1.5.3\Crypto   \Signature\PKCS1_PSS.py"", line 74, in <module>
       from Crypto.Util.strxor import strxor
   ImportError: No module named strxor


any idea how to solve it?
ENV:
-windows 10
-python 2.7
","It looks like you're simply copied pyCrypto into your project. PyCrypto is library which depends on some native library/code (like libtomcrypt). You have to install it properly. You can do this for example through pip:
pip2 install pycrypto

or
pip3 install pycrypto

depending on which Python version you want to make it available.
","991","<python><pycrypto>","1","1","2","2019-08-08 13:15:50","40059658","1","","5763413","","2019-08-08 13:15:50","2016-10-15 13:26:33",""
"40059592","pycrypto : No module named strxor","I got this error : 
   Traceback (most recent call last):
     File ""test.py"", line 8, in <module>
       from Crypto.Cipher import PKCS1_OAEP
     File ""C:\Users\Mokhles\Downloads\google-api-python-client-1.5.3\Crypto   \Cipher\PKCS1_OAEP.py"", line 57, in <module>
       import Crypto.Signature.PKCS1_PSS
     File ""C:\Users\Mokhles\Downloads\google-api-python-client-1.5.3\Crypto   \Signature\PKCS1_PSS.py"", line 74, in <module>
       from Crypto.Util.strxor import strxor
   ImportError: No module named strxor


any idea how to solve it?
ENV:
-windows 10
-python 2.7
","try conda install pydotplus (may need to install tqdm first)
","991","<python><pycrypto>","1","0","2","2019-08-08 13:15:50","40059658","1","","5763413","","2019-08-08 13:15:50","2016-10-15 13:26:33",""
"17221829","Python decrypt leaves unwanted characters behind","So this is my decrypt function:
def decrypt(value):
    key = b'1111111111111111'

    cipher = AES.new(key, AES.MODE_ECB)
    msg = cipher.decrypt(base64.b64decode(value))

    return msg

And i think I am missing something here, because when i give it a string to decrypt it also adds some strange characters :
Example : hey\r\r\r\r\r\r\r\r\r\r\r\r\r
What am i doing wrong?
P.S. I am using google app engine and this lib from Crypto.Cipher import AES
EDIT : 
private static final String ALGO = ""AES"";
private static final byte[] keyValue = new byte[] { '1', '1', '1', '1', '1', '1', '1', '1', '1','1', '1', '1','1','1','1','1' };

public static String encrypt(String Data) throws Exception {
        Key key = generateKey();
        Cipher c = Cipher.getInstance(ALGO);
        c.init(Cipher.ENCRYPT_MODE, key);
        byte[] encVal = c.doFinal(Data.getBytes());
     //   String encryptedValue = new BASE64Encoder().encode(encVal);

        byte[] decoded = Base64.encodeBase64(encVal);

        return (new String(decoded, ""UTF-8"") + ""\n"");
    }

private static Key generateKey() throws Exception {
        Key key = new SecretKeySpec(keyValue, ALGO);
        return key;
    }

","how bout just doing
return msg.strip()

that will get rid of all those \r's
","990","<python><google-app-engine><aes><pycrypto>","3","0","3","2013-06-22 19:35:05","","3","2","1206610","","2013-06-20 19:31:09","2013-06-20 19:09:38","2013-07-05 20:01:40"
"17221829","Python decrypt leaves unwanted characters behind","So this is my decrypt function:
def decrypt(value):
    key = b'1111111111111111'

    cipher = AES.new(key, AES.MODE_ECB)
    msg = cipher.decrypt(base64.b64decode(value))

    return msg

And i think I am missing something here, because when i give it a string to decrypt it also adds some strange characters :
Example : hey\r\r\r\r\r\r\r\r\r\r\r\r\r
What am i doing wrong?
P.S. I am using google app engine and this lib from Crypto.Cipher import AES
EDIT : 
private static final String ALGO = ""AES"";
private static final byte[] keyValue = new byte[] { '1', '1', '1', '1', '1', '1', '1', '1', '1','1', '1', '1','1','1','1','1' };

public static String encrypt(String Data) throws Exception {
        Key key = generateKey();
        Cipher c = Cipher.getInstance(ALGO);
        c.init(Cipher.ENCRYPT_MODE, key);
        byte[] encVal = c.doFinal(Data.getBytes());
     //   String encryptedValue = new BASE64Encoder().encode(encVal);

        byte[] decoded = Base64.encodeBase64(encVal);

        return (new String(decoded, ""UTF-8"") + ""\n"");
    }

private static Key generateKey() throws Exception {
        Key key = new SecretKeySpec(keyValue, ALGO);
        return key;
    }

","My bad that i didn't search for an answer enough
Here is a link with the answer : Encrypt & Decrypt using PyCrypto AES 256
Thanks anyway
","990","<python><google-app-engine><aes><pycrypto>","3","0","3","2013-06-22 19:35:05","","3","2","1206610","","2013-06-20 19:31:09","2013-06-20 19:09:38","2013-07-05 20:01:40"
"17221829","Python decrypt leaves unwanted characters behind","So this is my decrypt function:
def decrypt(value):
    key = b'1111111111111111'

    cipher = AES.new(key, AES.MODE_ECB)
    msg = cipher.decrypt(base64.b64decode(value))

    return msg

And i think I am missing something here, because when i give it a string to decrypt it also adds some strange characters :
Example : hey\r\r\r\r\r\r\r\r\r\r\r\r\r
What am i doing wrong?
P.S. I am using google app engine and this lib from Crypto.Cipher import AES
EDIT : 
private static final String ALGO = ""AES"";
private static final byte[] keyValue = new byte[] { '1', '1', '1', '1', '1', '1', '1', '1', '1','1', '1', '1','1','1','1','1' };

public static String encrypt(String Data) throws Exception {
        Key key = generateKey();
        Cipher c = Cipher.getInstance(ALGO);
        c.init(Cipher.ENCRYPT_MODE, key);
        byte[] encVal = c.doFinal(Data.getBytes());
     //   String encryptedValue = new BASE64Encoder().encode(encVal);

        byte[] decoded = Base64.encodeBase64(encVal);

        return (new String(decoded, ""UTF-8"") + ""\n"");
    }

private static Key generateKey() throws Exception {
        Key key = new SecretKeySpec(keyValue, ALGO);
        return key;
    }

","As Java defaults to ""PKCS#5Padding"" it is pretty safe to assume you have to deal with those padding bytes (one to blocksize - in this case 16 - bytes are always padded). The Java ""PKCS#5Padding"" padding mode is actually PKCS#7 padding, as PKCS#5 only specifies padding for 8 byte blocks (e.g. DES mode encryption).
So this means you have to look for PKCS#5 padding or PKCS#7 padding. A quick search shows this answer.
","990","<python><google-app-engine><aes><pycrypto>","3","0","3","2013-06-22 19:35:05","","3","2","1206610","","2013-06-20 19:31:09","2013-06-20 19:09:38","2013-07-05 20:01:40"
"23560254","How to encrypt a string to a string of the same size is Python","I have strings about 500 chars long and I'd like to encrypt them so that resulting string has the same length (or just slightly different). I need two way enryption and decryption using another ""secret"" string known to both sides. It doesn't need to be very secure, I prefer faster solutions.
","From the post here: Encrypt string in Python
using http://code.google.com/p/keyczar/
crypter = Crypter.Read(""/path/to/your/keys"")
ciphertext = crypter.Encrypt(""Secret message"")

","990","<python><encryption><pycrypto>","1","3","2","2014-05-09 09:33:42","","3","","","","","2014-05-09 08:45:23","2014-05-09 10:12:21"
"23560254","How to encrypt a string to a string of the same size is Python","I have strings about 500 chars long and I'd like to encrypt them so that resulting string has the same length (or just slightly different). I need two way enryption and decryption using another ""secret"" string known to both sides. It doesn't need to be very secure, I prefer faster solutions.
","If you want to preserve the length, then you want to use a stream cipher
Note that both parties need to know key (secret) and initialization vector (not secret, but must be unique).
It is not safe to reuse same key without a different IV, thus you'd need to communicate new IV across somehow, which effectively lengthens your encrypted package.
Furthermore, you really need to consider replay attacks -- what happens if someone intercepts your message and then sends it again and again.
Here's simple example for RC4, using pycrypto, no IV (RC4 doesn't support it):
import Crypto.Cipher.ARC4
plaintext = ""x"" * 13
c1 = Crypto.Cipher.ARC4.new(key=""1"")
ciphertext = c.encrypt(plaintext)
assert len(ciphertext) == len(plaintext)
c2 = Crypto.Cipher.ARC4.new(key=""1"")
result = c2.descrypt(ciphertext)
assert result == plaintext

","990","<python><encryption><pycrypto>","1","2","2","2014-05-09 09:33:42","","3","","","","","2014-05-09 08:45:23","2014-05-09 10:12:21"
"35113536","How to import RSA keys by command line argument?","I have been using Pycrypto module to generate RSA public/private key pair and  trying to import keys by sending the public key as command line argument:
from Crypto.PublicKey import RSA
from Crypto import Random
import sys

input_key = sys.argv[1]
print('\n')
print(type(input_key))
print('\n')
print(input_key)
print('\n')

public_key = RSA.importKey(input_key)
print(type(public_key))

but I get the output:
$ python3 encrypt.py '-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCaIRYO3hxr0ObcYcgKtxFequ6p\n9HVV8E95ghUUHmydVJYy16Ip9F6ik7G8wBU7X3VIfjdxHAtrwY9doCy8Ype6NNio\nS/ErGRtUQ1jgyT2f9okIdroEipnh1zwbXQcxveaxlwBhp7OFGZ/0W3FKgJLYtyzW\nEhfPO+8GkT0eLH5FaQIDAQAB\n-----END'
  >>> <class 'str'>

-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCaIRYO3hxr0ObcYcgKtxFequ6p\n9HVV8E95ghUUHmydVJYy16Ip9F6ik7G8wBU7X3VIfjdxHAtrwY9doCy8Ype6NNio\nS/ErGRtUQ1jgyT2f9okIdroEipnh1zwbXQcxveaxlwBhp7OFGZ/0W3FKgJLYtyzW\nEhfPO+8GkT0eLH5FaQIDAQAB\n-----END PUBLIC KEY-----

   Traceback (most recent call last):
File ""encrypt.py"", line 13, in <module>
  public_key = RSA.importKey(input_key)
File ""/usr/lib/python3/dist-packages/Crypto/PublicKey/RSA.py"", line 638, in importKey
if lines[1].startswith(b('Proc-Type:4,ENCRYPTED')):
  IndexError: list index out of range

But when I copy paste the same key into Python Interpreter, I get these:
>>> input_key = '-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCaIRYO3hxr0ObcYcgKtxFequ6p\n9HVV8E95ghUUHmydVJYy16Ip9F6ik7G8wBU7X3VIfjdxHAtrwY9doCy8Ype6NNio\nS/ErGRtUQ1jgyT2f9okIdroEipnh1zwbXQcxveaxlwBhp7OFGZ/0W3FKgJLYtyzW\nEhfPO+8GkT0eLH5FaQIDAQAB\n-----END PUBLIC KEY-----'
>>> pub_key = RSA.importKey(input_key)
>>> type(pub_key)
    <class 'Crypto.PublicKey.RSA._RSAobj'>

How to import them as a command line argument ?
","When you execute

$ python3 encrypt.py '-----BEGIN PUBLIC KEY-----\nMIG...'

the shell does not interpret \n as newline escapes, but as literal backslash+n, and that's what your program sees within sys.argv[1].
You can have newlines within en escaped shell string, so this should work:

$ python3 encrypt.py '-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCaIRYO3hxr0ObcYcgKtxFequ6p
9HVV8E95ghUUHmydVJYy16Ip9F6ik7G8wBU7X3VIfjdxHAtrwY9doCy8Ype6NNio
S/ErGRtUQ1jgyT2f9okIdroEipnh1zwbXQcxveaxlwBhp7OFGZ/0W3FKgJLYtyzW
EhfPO+8GkT0eLH5FaQIDAQAB
-----END PUBLIC KEY-----'

If you really want to use a string with escapes, you can either handle the escapes yourself in your program by doing input_key = sys.argv[1].replace('\\n', '\n'), or let the shell do the escaping e.g by passing the string through echo: $ python3 encrypt.py ""$(echo -ne '-----BEGIN PUBLIC KEY-----\nMIG...')"".
","987","<python-3.x><pycrypto>","0","2","1","2016-01-31 13:14:31","35114167","2","","5612751","","2016-01-31 13:06:15","2016-01-31 11:52:50",""
"11704966","AES Decryption counter mode","I have a 64 character string. The first 32 characters are represent the IV and the last 32 characters are the encrypted message. Each character represents 4 bits, so I have to interpret the string in pairs to get a single byte.
What I am trying to do is to replicate how counter-mode decryption works. As I understand the process, I should be able to xor my cipher text against the encryption of my IV and this should yield the plain text. (note that my cipher text = 16 bytes = one block, so no padding or incrementing of the IV is necessary here, I believe.)
No matter how I do this, I don't get anything legible to output. I think that my problem is how I am encrypting my IV, but I don't know for sure. I've been attacking this forever, but I'm getting nowhere. Can anyone see what I am doing wrong? Here's the code that I wrote:
def decryptCTR(key, ciphertext):
    IV = ciphertext[:32]
    C0 = ciphertext[32:64]
    #convert into 16 byte strings
    key = array.array('B', key.decode(""hex"")).tostring()
    IV = array.array('B', IV.decode(""hex"")).tostring()

    # ENCRYPT iv with the key
    encodeAES = lambda c, s: base64.b64encode(c.encrypt(s))
    cipher = AES.new(key, AES.MODE_CFB)
    encryptedIV = encodeAES(cipher, IV)

    #xor the encrypted iv with the ciphertext block
    print ""XOR: "" + strXOR(encryptedIV, C0)

    return

","The answer is indeed simple: don't encrypt the IV. The IV should be send in the clear.
","968","<python><aes><pycrypto>","1","2","1","2012-07-28 23:52:59","","4","","","","","2012-07-28 21:56:31",""
"26219512","Inserting Bytes to Postgres with python gives error, but with PG SQL console works","I'm encrypting some data and trying to insert it into postgres as bytes. I'm using psycopg2 and python. When I try from python it gives me an error about varying character.
Error value too long for type character varying(30)
Entry Exist Passing!
When I insert it into the Postgresql using the exact output of the SQL statement im using in python it will work. I got the statement using the eclipse console window by displaying the variable the statement is stored in. This is the PG Console output:
metering=# insert into customers(customer_id,customer_name, inactive, datetime) values (101,'\021;\213D\351O\0339""(($v_\033\262'::bytea,'Y', CURRENT_TIMESTAMP);
INSERT 0 1
                      ^
metering=# select * from customers;
 customer_id |           customer_name            | inactive |  datetime  
-------------+------------------------------------+----------+------------
         101 | \x113b8b44e94f1b3922282824765f1bb2 | Y        | 2014-10-06
(1 row)

Database table definition and database format
ENCODING = 'UTF8'
TABLESPACE = pg_default
LC_COLLATE = 'en_US.UTF-8'
LC_CTYPE = 'en_US.UTF-8'
CONNECTION LIMIT = -1;

customer_id bigint NOT NULL,
customer_name bytea NOT NULL,
inactive character varying(1) NOT NULL,
datetime date NOT NULL,
CONSTRAINT customers_pkey PRIMARY KEY (customer_id)

Errors returned by python
2014-10-16 12:19:23,077 ERROR Error invalid byte sequence for encoding ""UTF8"": 0xca 0x3c
2014-10-16 12:20:47,796 ERROR Error invalid byte sequence for encoding ""UTF8"": 0xca 0x3c

Code to insert encrypted customer name.
password = hashlib.sha256(secretmofokey).digest()  
IV = 16 * '\x00'
mode = AES.MODE_CBC
encryptor = AES.new(password, mode, IV=IV)

      for customer_id, customer_name, inactive in oracle_cursor:
         try:
               encrypted_customer_name = encryptor.encrypt(pad(customer_name))

               pg_delete.execute(""""""delete from customers where customer_id = %s """""" % customer_id)

               customers_sql = (""""""insert into customers(customer_id, 
                           customer_name , inactive, datetime) 
                           values (%s, '%s', '%s' , CURRENT_TIMESTAMP) """""" % (customer_id, encrypted_customer_name, inactive))

               pg_insert.execute(customers_sql)
               postgres.commit()

         except psycopg2.DatabaseError, e:
            logging.error('Error %s' % e)    
            postgres.rollback()
            continue

","Per the psycopg2 manual, you have to explicitly identify data you want inserted as bytea:
You're also incorrectly trying to quote your format specifiers. You do not need and should not include the single quotes around %s; psycopg2 will do the appropriate quoting.
So you want:
""""""... values (%s, %s, %s , CURRENT_TIMESTAMP) """"""
 % (customer_id, psycopg2.Binary(encrypted_customer_name), inactive)

","968","<python><sql><postgresql><pycrypto>","1","1","1","2014-10-16 23:33:36","","3","","3919226","","2014-10-16 18:26:59","2014-10-06 15:24:50",""
"36760483","Securing a value in python properties file","I am writing a python script which does some database operations. I have kept the database credentials in a config file and reading via RawConfigParser in python. So for securing database password, is there any way I can encrypt just the database password value in the config file and decrypt it after reading via ConfigParser. I saw using PyCrypto I can encrypt the entire file, but I want to encrypt just the password, because other fields are subjected to future changes. 
","I get this question a lot when doing security consulting. No best practice, but it's all about managing the risk.
Storing credentials in user config file (e.g. ~/.secret or ~/.config) is a common practice. You can set file permission to 0600 so no other user (except superusers) can read it.
Or, you can pass the credentials in the environment. Best if you do it from remote connection (SSH), but you have to manually login and pass the variables every time you restart the application.
Also make sure the database user has very limited privilege.
","963","<python><encryption><pycrypto>","0","0","1","2016-04-21 06:22:35","","2","","","","","2016-04-21 05:34:33",""
"25022738","Pycrypto fails inconsistantly to verify signature loaded from file","I am trying to have a program sign and then later verify the contents of a file. However, wile the first verification will always return true, once the data is written to files and then loaded again, the verification usually fails, but is sometimes successful.
Even when the code fails, The outputs of the two print signature and print hash.hexdigest() calls are visually identical.
My test code  is:
from Crypto.Hash import SHA256
from Crypto.PublicKey import RSA
from Crypto.Signature import PKCS1_PSS
def generate():
    key_file = open(""TestPrivateKey"")
    private_key = RSA.importKey(key_file)
    public_key = private_key.publickey()

    seed_file = open(""Seed"")

    plaintext = seed_file.read()

    hash = SHA256.new(plaintext)
    signer = PKCS1_PSS.new(private_key)
    signature =  signer.sign(hash)

    plaintext_file = open(""plaintext"", 'w')
    plaintext_file.write(plaintext)
    signature_file = open(""signature"", 'w')
    signature_file.write(signature)
    print signature
    print hash.hexdigest()

    verifier = PKCS1_PSS.new(public_key)

    print verifier.verify(hash, signature)

def verification_test():
    plaintext_file = open(""plaintext"")
    signature_file = open(""signature"", 'rb')

    plaintext = plaintext_file.read()
    public_key = RSA.importKey(open(""TestPublicKey""))
    signature = signature_file.read()
    print signature

    hash = SHA256.new(plaintext)
    print hash.hexdigest()

    verifier = PKCS1_PSS.new(public_key)
    return verifier.verify(hash, signature)


if __name__ == '__main__':
    generate()
    print verification_test()

Does anyone know what mistake I made? There must be something happening when the signature is written to the file and then read back in, but I can't figure out what it is.
Edit: Before I run this script, I run the initialization functions:
from Crypto.PublicKey import RSA

def create_keys():
    private_key = RSA.generate(4096)
    file = open(""TestPrivateKey"", 'w')
    file.write(private_key.exportKey())
    file = open(""TestPublicKey"", 'w')
    file.write(private_key.publickey().exportKey())

def create_seed():
    file = open(""Seed"", 'w')
    file.write(""Test"")

","I notice two problems with your code.
First, you are writing arbitrary binary data to a file what was opened for text:
signature_file = open(""signature"", 'w')  #bad
signature_file.write(signature)

should be:
signature_file = open(""signature"", 'wb')  #good
signature_file.write(signature)

Second, you never close your files. Try this:
with open(""signature"", 'wb') as signature_file:
    signature_file.write(signature)

and similarly for all of the other open files.

from Crypto.Hash import SHA256
from Crypto.PublicKey import RSA
from Crypto.Signature import PKCS1_PSS
def generate():
    with open(""TestPrivateKey"") as key_file:
        private_key = RSA.importKey(key_file)
    public_key = private_key.publickey()

    with open(""Seed"") as seed_file:
        plaintext = seed_file.read()

    hash = SHA256.new(plaintext)
    signer = PKCS1_PSS.new(private_key)
    signature =  signer.sign(hash)

    with open(""plaintext"", 'w') as plaintext_file:
        plaintext_file.write(plaintext)
    with open(""signature"", 'wb') as signature_file:
        signature_file.write(signature)
    #print signature
    print hash.hexdigest()

    verifier = PKCS1_PSS.new(public_key)

    print verifier.verify(hash, signature)

def verification_test():
    with open(""plaintext"") as plaintext_file:
        plaintext = plaintext_file.read()
    with open(""signature"", 'rb') as signature_file:
        signature = signature_file.read()

    with open(""TestPublicKey"") as public_key_file:
        public_key = RSA.importKey(public_key_file)
    #print signature

    hash = SHA256.new(plaintext)
    print hash.hexdigest()

    verifier = PKCS1_PSS.new(public_key)
    return verifier.verify(hash, signature)


if __name__ == '__main__':
    generate()
    print verification_test()

","962","<python><rsa><pycrypto>","0","0","1","2014-07-29 20:53:29","25024710","4","1","2701540","","2014-07-29 20:11:50","2014-07-29 18:43:03",""
"11265520","Google App Engine + PyCrypto = /dev/urandom not accessible","I am using Google App Engine and PyCrypto to do some encryption. The error I am getting, which is below, occurs only on my local developement server, which is running Linux Mint Maya (13). I deployed the same code to the GAE cloud, and it runs without error.
ERROR    2012-06-29 16:04:20,717 webapp2.py:1553] [Errno 13] file not accessible: '/dev/urandom'
Traceback (most recent call last):
  File ""/home/eric/google_appengine/lib/webapp2/webapp2.py"", line 1536, in __call__
    rv = self.handle_exception(request, response, e)
  File ""/home/eric/google_appengine/lib/webapp2/webapp2.py"", line 1530, in __call__
    rv = self.router.dispatch(request, response)
  File ""/home/eric/google_appengine/lib/webapp2/webapp2.py"", line 1278, in default_dispatcher
    return route.handler_adapter(request, response)
  File ""/home/eric/google_appengine/lib/webapp2/webapp2.py"", line 1102, in __call__
    return handler.dispatch()
  File ""/home/eric/google_appengine/lib/webapp2/webapp2.py"", line 572, in dispatch
    return self.handle_exception(e, self.app.debug)
  File ""/home/eric/google_appengine/lib/webapp2/webapp2.py"", line 570, in dispatch
    return method(*args, **kwargs)
  File ""/home/eric/workspace/commentbox/src/controller/api.py"", line 55, in get
    self.response.out.write(encrypt(json.dumps(to_json)))
  File ""/home/eric/workspace/commentbox/src/controller/api.py"", line 27, in encrypt
    iv = Random.new().read(AES.block_size)
  File ""/usr/lib/python2.7/dist-packages/Crypto/Random/__init__.py"", line 33, in new
    return _UserFriendlyRNG.new(*args, **kwargs)
  File ""/usr/lib/python2.7/dist-packages/Crypto/Random/_UserFriendlyRNG.py"", line 206, in new
    return RNGFile(_get_singleton())
  File ""/usr/lib/python2.7/dist-packages/Crypto/Random/_UserFriendlyRNG.py"", line 200, in _get_singleton
    _singleton = _LockingUserFriendlyRNG()
  File ""/usr/lib/python2.7/dist-packages/Crypto/Random/_UserFriendlyRNG.py"", line 144, in __init__
    _UserFriendlyRNG.__init__(self)
  File ""/usr/lib/python2.7/dist-packages/Crypto/Random/_UserFriendlyRNG.py"", line 86, in __init__
    self._ec = _EntropyCollector(self._fa)
  File ""/usr/lib/python2.7/dist-packages/Crypto/Random/_UserFriendlyRNG.py"", line 53, in __init__
    self._osrng = OSRNG.new()
  File ""/usr/lib/python2.7/dist-packages/Crypto/Random/OSRNG/posix.py"", line 60, in new
    return DevURandomRNG(*args, **kwargs)
  File ""/usr/lib/python2.7/dist-packages/Crypto/Random/OSRNG/posix.py"", line 42, in __init__
    f = open(self.name, ""rb"", 0)
  File ""/home/eric/google_appengine/google/appengine/tools/dev_appserver_import_hook.py"", line 592, in __init__
    raise IOError(errno.EACCES, 'file not accessible', filename)
IOError: [Errno 13] file not accessible: '/dev/urandom'
ERROR    2012-06-29 16:04:20,721 webapp2.py:1549] Exception 
ERROR    2012-06-29 16:04:20,721 webapp2.py:1549] AttributeError
ERROR    2012-06-29 16:04:20,721 webapp2.py:1549] : 
ERROR    2012-06-29 16:04:20,721 webapp2.py:1549] ""'DevURandomRNG' object has no attribute 'closed'""
ERROR    2012-06-29 16:04:20,721 webapp2.py:1549]  in 
ERROR    2012-06-29 16:04:20,721 webapp2.py:1549] <bound method DevURandomRNG.__del__ of <Crypto.Random.OSRNG.posix.DevURandomRNG object at 0x52707d0>>
ERROR    2012-06-29 16:04:20,721 webapp2.py:1549]  ignored

The python code that is throwing the error is the second line in this block:
from Crypto.Cipher import AES
from Crypto import Random

key = b'Sixteen byte key' 
iv = Random.new().read(AES.block_size)
cipher = AES.new(key, AES.MODE_CBC, iv)
return iv + cipher.encrypt(plaintext)

After seeing this error, I realized it might be a permissions error. So then I did a quick check of the permissions on /dev/urandom: 
eric@eric-Latitude-E5400 ~ $ dpkg -L udev | xargs grep urandom
/lib/udev/rules.d/50-udev-default.rules:KERNEL==""null|zero|full|random|urandom"", MODE=""0666""
eric@eric-Latitude-E5400 ~ $ ls -lart /dev/*random
crw-rw-rw- 1 root root 1, 9 Jun 29 10:53 /dev/urandom
crw-rw-rw- 1 root root 1, 8 Jun 29 10:53 /dev/random

So it looks like my permissions are fine. I have also tried running the development server as root, but I get the same error. For some reason this only happens with the development server, and not when deployed to google's cloud. Any ideas on what to try next?
Thanks!
","The error you are getting is because GAE restricts file access, and /dev/urandom is blocked.
Note that the error is not when you import PyCrypto, it's when you do AES.new(key, AES.MODE_CBC, iv)
You can fix it, either by editing Crypto/Random/OSRNG/__init__.py  and moving the lines
if hasattr(os, 'urandom'):
    from Crypto.Random.OSRNG.fallback import new

to the top, or by modifying os.name to something different than posix or nt, at the beginning of your script. I suggest the first option.
ps: I assume you are using python 2.5 and pycrypto 2.2, because of your Traceback. Next time please include these details.
","962","<python><linux><google-app-engine><random><pycrypto>","1","2","1","2012-06-29 22:04:13","11266184","2","","-1","","2017-04-13 12:13:44","2012-06-29 16:25:06",""
"10329147","Trying to generate RSA signature with Python from working C# code","I'm using someone else's code to generate an RSA signature used for verification in xbox 360 save files. The code reads the needed values from a files and correctly generates the signature.
The code is:
    byte[] xHash=null;
    RSAParameters xParams = new RSAParameters();
    br.BaseStream.Position = 0x1A8;
    xParams.D = br.ReadBytes(0x80);
    xParams.Exponent = br.ReadBytes(0x4);
    xParams.Modulus = br.ReadBytes(0x80);
    xParams.P = br.ReadBytes(0x40);
    xParams.Q = br.ReadBytes(0x40);
    xParams.DP = br.ReadBytes(0x40);
    xParams.DQ = br.ReadBytes(0x40);
    xParams.InverseQ = br.ReadBytes(0x40);
    br.close();

    br=new BinaryReader(File.OpenRead(f));
    br.BaseStream.Position=0x22c;
    xHash = new SHA1CryptoServiceProvider().ComputeHash(br.ReadBytes(0x118));
    byte[] xrsa=SignatureGenerate(xParams, xHash);

public static byte[] SignatureGenerate(RSAParameters xParam, byte[] xHash)
        {
            RSACryptoServiceProvider xRSACrypto = new RSACryptoServiceProvider();
            RSAPKCS1SignatureFormatter xRSASigFormat = new RSAPKCS1SignatureFormatter();
            xRSACrypto.ImportParameters(xParam);
            xRSASigFormat.SetHashAlgorithm(""SHA1"");
            xRSASigFormat.SetKey(xRSACrypto);
            return xRSASigFormat.CreateSignature(xHash);

        }

I'm trying to end up with what's in xrsa, but using Python. I installed pycrypto, and I'm looking at the documentation, but I'm still missing something obvious. First, the RSA.construct from Crypto.PublicKey only takes six parameters, but not the exponents one and two (DP and DQ). Also, the inputs need to be longs. In the C# code, the values were 128 and 64 bytes long, as opposed to a 4 byte long. 
I know this may seem painfully obvious, but I have no idea what I need to do. 
I'm working with Python 2.7.3
edit: also, the ""message"" to be encrypted is a sha1 hash of 0x118 bytes of the file, which contains meta data and a hash of other parts of the file.
edit: Thank you so much mata, I feel I'm closer to getting it working. It still doesn't match the C# signature. In C#, the signature format is being set as SHA1. What is this doing, and can it be done in Python?
","ok, first: long in python is not 4 byte. in python, long has no predefined size, so using a long to store a 128byte number is no problem.
to convert a bytestring to long you can use:
long_value = long(string_value.decode('hex'), 16)
# maybe someone knows a better way?

couldn't it be that the file is in DER form? in that case you simply could simple read the file using:
from Crypto.PublicKey import RSA
with open(""keyfile"", ""rb"") as f:
    key = RSA.importKey(f.read())

if not, it would probably be best to convert it to PEM or DER, so you don't have to read in the parameters yourself.
anyway, the last three parameters in RSA.construct are optional, specially u can be calculated as 1/p % q (where p > q).
at least from what i've tried, it works even if you only specify the first three parameters.
","953","<c#><python><encryption><rsa><pycrypto>","1","2","2","2012-04-27 06:17:24","10332841","0","1","828584","","2012-04-26 20:07:10","2012-04-26 07:40:36",""
"10329147","Trying to generate RSA signature with Python from working C# code","I'm using someone else's code to generate an RSA signature used for verification in xbox 360 save files. The code reads the needed values from a files and correctly generates the signature.
The code is:
    byte[] xHash=null;
    RSAParameters xParams = new RSAParameters();
    br.BaseStream.Position = 0x1A8;
    xParams.D = br.ReadBytes(0x80);
    xParams.Exponent = br.ReadBytes(0x4);
    xParams.Modulus = br.ReadBytes(0x80);
    xParams.P = br.ReadBytes(0x40);
    xParams.Q = br.ReadBytes(0x40);
    xParams.DP = br.ReadBytes(0x40);
    xParams.DQ = br.ReadBytes(0x40);
    xParams.InverseQ = br.ReadBytes(0x40);
    br.close();

    br=new BinaryReader(File.OpenRead(f));
    br.BaseStream.Position=0x22c;
    xHash = new SHA1CryptoServiceProvider().ComputeHash(br.ReadBytes(0x118));
    byte[] xrsa=SignatureGenerate(xParams, xHash);

public static byte[] SignatureGenerate(RSAParameters xParam, byte[] xHash)
        {
            RSACryptoServiceProvider xRSACrypto = new RSACryptoServiceProvider();
            RSAPKCS1SignatureFormatter xRSASigFormat = new RSAPKCS1SignatureFormatter();
            xRSACrypto.ImportParameters(xParam);
            xRSASigFormat.SetHashAlgorithm(""SHA1"");
            xRSASigFormat.SetKey(xRSACrypto);
            return xRSASigFormat.CreateSignature(xHash);

        }

I'm trying to end up with what's in xrsa, but using Python. I installed pycrypto, and I'm looking at the documentation, but I'm still missing something obvious. First, the RSA.construct from Crypto.PublicKey only takes six parameters, but not the exponents one and two (DP and DQ). Also, the inputs need to be longs. In the C# code, the values were 128 and 64 bytes long, as opposed to a 4 byte long. 
I know this may seem painfully obvious, but I have no idea what I need to do. 
I'm working with Python 2.7.3
edit: also, the ""message"" to be encrypted is a sha1 hash of 0x118 bytes of the file, which contains meta data and a hash of other parts of the file.
edit: Thank you so much mata, I feel I'm closer to getting it working. It still doesn't match the C# signature. In C#, the signature format is being set as SHA1. What is this doing, and can it be done in Python?
","I tried pycrypto and another library, but only ended getting what I wanted working with M2Crypto. 
M2Crypto was a serious pain to install on Windows, but it was really easy with the install file here:
http://chandlerproject.org/bin/view/Projects/MeTooCrypto
The download link the to Windows installer is here: http://chandlerproject.org/pub/Projects/MeTooCrypto/M2Crypto-0.21.1.win32-py2.7.exe
","953","<c#><python><encryption><rsa><pycrypto>","1","0","2","2012-04-27 06:17:24","10332841","0","1","828584","","2012-04-26 20:07:10","2012-04-26 07:40:36",""
"30349340","undefined symbol: PyUnicodeUCS2_Decode","I'm trying to connect to my google sheets with gspread. Here is the code:
#IMPORT STANDARD LIBRARIES
import json
import os

#IMPORT THIRD PARTY LIBRARIES
import gspread
from oauth2client.client import SignedJwtAssertionCredentials

key_location = '/home/selecaotwo/Dropbox/Public/my.ENV/' + os.sep + 'sys.CREDENTIALS'
key_file_h = 'test-project-auth-a4f3c4bd20c4.json'
print key_location + os.sep + key_file_h

json_key = json.load(open(key_location + os.sep + key_file_h))
scope = ['https://spreadsheets.google.com/feeds']

credentials = SignedJwtAssertionCredentials(json_key['client_email'], json_key['private_key'], scope)
gc = gspread.authorize(credentials)

Running this code gives me the following error:
/home/selecaotwo/Dropbox/Public/my.ENV//sys.CREDENTIALS/test-project-auth-a4f3c4bd20c4.json
Traceback (most recent call last):
  File ""/home/selecaotwo/Desktop/gspread-test/gspread-test-001-codeRegist-0001.py"", line 17, in <module>
    gc = gspread.authorize(credentials)
  File ""/usr/local/lib/python2.7/site-packages/gspread/client.py"", line 335, in authorize
    client.login()
  File ""/usr/local/lib/python2.7/site-packages/gspread/client.py"", line 98, in login
    self.auth.refresh(http)
  File ""build/bdist.linux-x86_64/egg/oauth2client/client.py"", line 598, in refresh
  File ""build/bdist.linux-x86_64/egg/oauth2client/client.py"", line 769, in _refresh
  File ""build/bdist.linux-x86_64/egg/oauth2client/client.py"", line 795, in _do_refresh_request
  File ""build/bdist.linux-x86_64/egg/oauth2client/client.py"", line 1425, in _generate_refresh_request_body
  File ""build/bdist.linux-x86_64/egg/oauth2client/client.py"", line 1554, in _generate_assertion
  File ""build/bdist.linux-x86_64/egg/oauth2client/crypt.py"", line 162, in from_string
  File ""/usr/local/lib/python2.7/site-packages/OpenSSL/__init__.py"", line 36, in <module>
    from OpenSSL import crypto
ImportError: /usr/local/lib/python2.7/site-packages/OpenSSL/crypto.so: undefined symbol: PyUnicodeUCS2_Decode
[Finished in 0.1s with exit code 1]
[shell_cmd: python -u ""/home/selecaotwo/Desktop/gspread-test/gspread-test-001-codeRegist-0001.py""]
[dir: /home/selecaotwo/Desktop/gspread-test]
[path: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin]

I read on the forums that this is likely an issue between my Ubuntu system (14.04 LTS) and Python (2.7.9) but the weird thing was when I recompiled python with --enable-encoding=usc2, I got the same error on the same line but instead of saying ""undefined symbol: PyUnicodeUCS2_Decode"" it simply said ""undefined symbol: PyUnicodeUCS4_Decode"". This leads me to believe the problem may be something else and I'm not sure how to proceed.
","I'm not sure if this will solve the problem.
Instead of putting in the json file itself, can you try entering the client_email and private key like this.
The client_email can be copied as such. For the private key, do this instead:
key = u""-----BEGIN PRIVATE KEY-----\nBLABLA_\n-----END PRIVATE KEY-----\n"".encode(""utf-8"")


credentials = SignedJwtAssertionCredentials(client_email,key,scope)

","952","<python><unicode><openssl><python-import><pycrypto>","1","1","1","2015-07-16 06:55:36","31447281","0","","","","","2015-05-20 12:13:24",""
"12221043","confusing intermittent failure with pycrypto","I've been playing with python's crypto library, and I built a simple threading server to encrypt and decrypt.  The problem I'm having is that about 1 out of 3 decryptions comes back incorrectly.  Here's the code:
class ThreadedTCPRequestHandler(SocketServer.BaseRequestHandler):

    def handle(self):
        global KEY
        request_text = ''
        while request_text.rfind(""\n"") == -1:
            sock_data='';
            recv_size=8192
            sock_data=self.request.recv(recv_size)
            if sock_data == '':
                print ""hangup""
                break
            request_text = request_text + sock_data

        args = json.loads(request_text)
        print request_text
        print ""\n""
        if args['command'] == 'encrypt':
            iv = Random.new().read(AES.block_size)
            cipher = AES.new(KEY, AES.MODE_CFB, iv)
            crypted_message = iv + b'|' + cipher.encrypt(unquote_plus(args['message']))
            response = {'encrypted_message': binascii.hexlify(crypted_message)}

        if args['command'] == 'decrypt':
            unhexed = binascii.unhexlify(args['message'])
            components = unhexed.split('|')
            iv = components[0]
            cipher = AES.new(KEY, AES.MODE_CFB, iv)
            decrypted_message = cipher.decrypt(components[1])
            response = {'decrypted_message': decrypted_message}

        self.request.sendall(json.dumps(response) + ""\n"")

Often, I get this error from python:
    Traceback (most recent call last):
  File ""/usr/local/lib/python2.7/SocketServer.py"", line 582, in process_request_thread
    self.finish_request(request, client_address)
  File ""/usr/local/lib/python2.7/SocketServer.py"", line 323, in finish_request
    self.RequestHandlerClass(request, client_address, self)
  File ""/usr/local/lib/python2.7/SocketServer.py"", line 639, in __init__
    self.handle()
  File ""cryptoserver.py"", line 40, in handle
    cipher = AES.new(KEY, AES.MODE_CFB, iv)
  File ""build/bdist.macosx-10.4-x86_64/egg/Crypto/Cipher/AES.py"", line 95, in new
    return AESCipher(key, *args, **kwargs)
  File ""build/bdist.macosx-10.4-x86_64/egg/Crypto/Cipher/AES.py"", line 59, in __init__
    blockalgo.BlockAlgo.__init__(self, _AES, key, *args, **kwargs)
  File ""build/bdist.macosx-10.4-x86_64/egg/Crypto/Cipher/blockalgo.py"", line 141, in __init__
    self._cipher = factory.new(key, *args, **kwargs)
ValueError: IV must be 16 bytes long
----------------------------------------

but just as often, I get no error, but the decryption doesn't work correctly.  I'm using this php to test it:
<?php
include_once(""config.php"");

function encrypt($text) {
    $package = array(""command"" => ""encrypt"",
                    ""message"" => base64_encode($text));
    $package_json = json_encode($package);
    $serverSays = transmit($package_json);
    $serverSaysArray = json_decode($serverSays);
    return $serverSaysArray->encrypted_message;
}

function decrypt($text) {
    $package = array(""command"" => ""decrypt"",
                    ""message"" => $text);

    $package_json = json_encode($package);
    $serverSays = transmit($package_json);
    $serverSaysArray = json_decode($serverSays);
    return base64_decode($serverSaysArray->decrypted_message);
}

function transmit($package) {
    global $CRYPTO_PORT;
    global $CRYPTO_HOST;

    $serverLink = fsockopen($CRYPTO_HOST, $CRYPTO_PORT);
    if ($serverLink === FALSE) {
        error_log(""Could not connect to encryption server"");
        return FALSE;
    }
    fwrite($serverLink, $package . ""\n"");

    $response = '';
    while (!feof($serverLink)) {
        $response .= fgets($serverLink, 128);
    }
    fclose($serverLink);
    return $response;
}

while (TRUE) {
    $enc = encrypt('totsadaddywoopxxx');
    print ""$enc\n"";
    $dec = decrypt($enc);
    print ""$dec\n"";
    $enc = encrypt('totsadaddywoopxxx');
    print ""$enc\n"";
    $dec = decrypt($enc);
    print ""$dec\n"";
    $enc = encrypt('totsadaddywoopxxx');
    print ""$enc\n"";
    $dec = decrypt($enc);
    print ""$dec\n"";
    #print decrypt('1c6dee677126551fa4b3f0732986dc3b7c985c64c07075e3651213d7a69435bcd87083e729e8de860c');
    #print ""\n"";
    #print decrypt('550cbec7498371dc01bcd6b88fc623b47cb2efd1881da6e07ee992229308305992bbc7ccc374f00c91d56d10a68d6110e2');
    print ""===========================\n"";

    sleep(1);
}

","In your decryption routine you use:
 unhexed.split('|')

to find the boundary between IV and the ciphertext. However, the IV is generated randomly by the sender. Sometimes, one of its 16 bytes will be 124, that is the boundary character '|'.
When that happens (in roughly 6% of the cases), the decryption routine will initialize the cipher either with

an IV with length between 1 and 15 bytes, which leads to the exception, or
an IV with length 0, which leads to the incorrect decryption, because in PyCrypto versions<2.6 an all-zero 16 byte IV will be used by default

In the decryption routine you should have instead:
components = [ unhexed[:AES.block_size], unhexed[AES.block_size+1:] ]

Or you could get rid of the '|' separator altogether.
","914","<pycrypto>","1","1","1","2012-08-31 19:43:39","","0","","","","","2012-08-31 18:51:17",""
"2010575","python crypto high level wrapper","I'm using PyCrypto (on google app engine) for AES encryption.
PyCrypto gives I guess a raw interface to AES--i need to pad my keys and my inputs to 16 byte multiples.
Is there a higher level library which takes care of this stuff for me?
","An easy, friendly wrapper on top of PyCrypto is ezPyCrypto.
","906","<python><google-app-engine><aes><pycrypto>","1","5","1","2010-01-06 03:19:38","2010737","3","","","","","2010-01-06 02:17:19",""
"49508721","Unable to encrypt and decrypt a file with a consistent naming","I have a file which stores user credentials.I plan to encrypt it once and then do the process of decryption and encryption subsequently whenever I need to fetch the credentials from the file.Below is the content of my original file
{""customer1"": {""tool_id"": ""earth"", ""user"": ""myuser"", ""pwd"": ""mypwd"", ""acc_id"": ""myaccount"", ""app_id"": ""myapp""}}
{""customer2"": {""tool_id"": ""venus"", ""app_id"": ""myapp2"", ""api_key"": ""mykey""}}

I have the below program to do the encryption and decryption
import os
from Crypto.Cipher import AES
from Crypto.Hash import SHA256
from Crypto import Random


def encrypt(key, filename):
    chunksize = 64 * 1024
    outputFile = ""credentials.txt""
    filesize = str(os.path.getsize(filename)).zfill(16)
    IV = Random.new().read(16)

    encryptor = AES.new(getKey(key), AES.MODE_CBC, IV)

    with open(filename, 'rb') as infile:
        with open(outputFile, 'wb') as outfile:
            outfile.write(filesize.encode('utf-8'))
            outfile.write(IV)

            while True:
                chunk = infile.read(chunksize)

                if len(chunk) == 0:
                    break
                elif len(chunk) % 16 != 0:
                    chunk += b' ' * (16 - (len(chunk) % 16))

                outfile.write(encryptor.encrypt(chunk))


def decrypt(key, filename):
    chunksize = 64 * 1024
    outputFile = filename

    with open(filename, 'rb') as infile:
        filesize = int(infile.read(16))
        IV = infile.read(16)

        decryptor = AES.new(getKey(key), AES.MODE_CBC, IV)

        with open(outputFile, 'wb') as outfile:
            while True:
                chunk = infile.read(chunksize)

                if len(chunk) == 0:
                    break

                outfile.write(decryptor.decrypt(chunk))
            outfile.truncate(filesize)


def getKey(password):
    hasher = SHA256.new(password.encode('utf-8'))
    return hasher.digest()

I plan to use the same naming conventions for my file for the encryption and decryption.
When I do encryption for the first time
encrypt(""poplo1234"", ""credentials.txt"")

It is able to do the encryption ( for the same filename)
When I try to decrypt it
decrypt(""poplo1234"", ""credentials.txt"")

It is unable to do it.However while encrypting, if I specify a different filename for the new file generated and do a decryption on that, it works just fine.
Why am I encountering such behaviour?How can I ensure the same filename is used for encryption and decryption multiple times. 
","The issue is trying to read and write to the same file at the same time. The solution is to write to a temp file and after closing the files rename the temp file.
","892","<python-3.x><encryption><pycrypto>","1","0","2","2018-07-19 09:58:52","","0","","","","","2018-03-27 09:08:49",""
"49508721","Unable to encrypt and decrypt a file with a consistent naming","I have a file which stores user credentials.I plan to encrypt it once and then do the process of decryption and encryption subsequently whenever I need to fetch the credentials from the file.Below is the content of my original file
{""customer1"": {""tool_id"": ""earth"", ""user"": ""myuser"", ""pwd"": ""mypwd"", ""acc_id"": ""myaccount"", ""app_id"": ""myapp""}}
{""customer2"": {""tool_id"": ""venus"", ""app_id"": ""myapp2"", ""api_key"": ""mykey""}}

I have the below program to do the encryption and decryption
import os
from Crypto.Cipher import AES
from Crypto.Hash import SHA256
from Crypto import Random


def encrypt(key, filename):
    chunksize = 64 * 1024
    outputFile = ""credentials.txt""
    filesize = str(os.path.getsize(filename)).zfill(16)
    IV = Random.new().read(16)

    encryptor = AES.new(getKey(key), AES.MODE_CBC, IV)

    with open(filename, 'rb') as infile:
        with open(outputFile, 'wb') as outfile:
            outfile.write(filesize.encode('utf-8'))
            outfile.write(IV)

            while True:
                chunk = infile.read(chunksize)

                if len(chunk) == 0:
                    break
                elif len(chunk) % 16 != 0:
                    chunk += b' ' * (16 - (len(chunk) % 16))

                outfile.write(encryptor.encrypt(chunk))


def decrypt(key, filename):
    chunksize = 64 * 1024
    outputFile = filename

    with open(filename, 'rb') as infile:
        filesize = int(infile.read(16))
        IV = infile.read(16)

        decryptor = AES.new(getKey(key), AES.MODE_CBC, IV)

        with open(outputFile, 'wb') as outfile:
            while True:
                chunk = infile.read(chunksize)

                if len(chunk) == 0:
                    break

                outfile.write(decryptor.decrypt(chunk))
            outfile.truncate(filesize)


def getKey(password):
    hasher = SHA256.new(password.encode('utf-8'))
    return hasher.digest()

I plan to use the same naming conventions for my file for the encryption and decryption.
When I do encryption for the first time
encrypt(""poplo1234"", ""credentials.txt"")

It is able to do the encryption ( for the same filename)
When I try to decrypt it
decrypt(""poplo1234"", ""credentials.txt"")

It is unable to do it.However while encrypting, if I specify a different filename for the new file generated and do a decryption on that, it works just fine.
Why am I encountering such behaviour?How can I ensure the same filename is used for encryption and decryption multiple times. 
","This is an example that works for me! The script takes a zip file etc. hello.zip encrypt it with the name hello.zip.enc and after that decrypt it with the name hello_end.zip. 
from Crypto.Cipher import AES

key = '0123456789abcdef'
IV = 16 * '\x00'         # Initialization vector: discussed later
mode = AES.MODE_CFB
encryptor = AES.new(key, mode, IV=IV)

file = open(""hello.zip"", ""rb"")
text = file.read()
file.close()
ciphertext = encryptor.encrypt(text)

encr_file = open(""hello.zip.enc"", ""wb"")
encr_file.write(ciphertext)
encr_file.close()


final_file = open(""hello.zip.enc"", ""rb"")
xen_text = final_file.read()
plaintext = encryptor.decrypt(xen_text)
final_file.close()


end = open(""hello_end.zip"", ""wb"")
end.write(plaintext)
end.close()

Use CFB mode in order not to mess around with padding
","892","<python-3.x><encryption><pycrypto>","1","0","2","2018-07-19 09:58:52","","0","","","","","2018-03-27 09:08:49",""
"45626488","python can't install, build pycrypto","When installing ""pip3 install pycrypto"" I have this error:
   creating build/lib.linux-armv7l-3.6/Crypto/Protocol
    copying lib/Crypto/Protocol/AllOrNothing.py -> build/lib.linux-armv7l-3.6/Crypto/Protocol
    copying lib/Crypto/Protocol/Chaffing.py -> build/lib.linux-armv7l-3.6/Crypto/Protocol
    copying lib/Crypto/Protocol/KDF.py -> build/lib.linux-armv7l-3.6/Crypto/Protocol
    copying lib/Crypto/Protocol/__init__.py -> build/lib.linux-armv7l-3.6/Crypto/Protocol
    creating build/lib.linux-armv7l-3.6/Crypto/PublicKey
    copying lib/Crypto/PublicKey/_slowmath.py -> build/lib.linux-armv7l-3.6/Crypto/PublicKey
    copying lib/Crypto/PublicKey/pubkey.py -> build/lib.linux-armv7l-3.6/Crypto/PublicKey
    copying lib/Crypto/PublicKey/RSA.py -> build/lib.linux-armv7l-3.6/Crypto/PublicKey
    copying lib/Crypto/PublicKey/DSA.py -> build/lib.linux-armv7l-3.6/Crypto/PublicKey
    copying lib/Crypto/PublicKey/_DSA.py -> build/lib.linux-armv7l-3.6/Crypto/PublicKey
    copying lib/Crypto/PublicKey/ElGamal.py -> build/lib.linux-armv7l-3.6/Crypto/PublicKey
    copying lib/Crypto/PublicKey/_RSA.py -> build/lib.linux-armv7l-3.6/Crypto/PublicKey
    copying lib/Crypto/PublicKey/__init__.py -> build/lib.linux-armv7l-3.6/Crypto/PublicKey
    creating build/lib.linux-armv7l-3.6/Crypto/Signature
    copying lib/Crypto/Signature/PKCS1_PSS.py -> build/lib.linux-armv7l-3.6/Crypto/Signature
    copying lib/Crypto/Signature/PKCS1_v1_5.py -> build/lib.linux-armv7l-3.6/Crypto/Signature
    copying lib/Crypto/Signature/__init__.py -> build/lib.linux-armv7l-3.6/Crypto/Signature
    warning: PCTBuildPy: byte-compiling is disabled, skipping.

    running build_ext
    running build_configure
    checking for gcc... gcc
    checking whether the C compiler works... yes
    checking for C compiler default output file name... a.out
    checking for suffix of executables...
    checking whether we are cross compiling... configure: error: in `/tmp/pip-build-71pdfh2i/pycrypto':
    configure: error: cannot run C compiled programs.
    If you meant to cross compile, use `--host'.
    See `config.log' for more details
    Traceback (most recent call last):
      File ""<string>"", line 1, in <module>
      File ""/tmp/pip-build-71pdfh2i/pycrypto/setup.py"", line 456, in <module>
        core.setup(**kw)
      File ""/core.py"", line 148, in setup
      File ""/dist.py"", line 955, in run_commands
      File ""/dist.py"", line 974, in run_command
      File ""/opt/lib/python3.6/site-packages/setuptools/command/install.py"", line 61, in run
        return orig.install.run(self)
      File ""/install.py"", line 545, in run
      File ""/cmd.py"", line 313, in run_command
      File ""/dist.py"", line 974, in run_command
      File ""/build.py"", line 135, in run
      File ""/cmd.py"", line 313, in run_command
      File ""/dist.py"", line 974, in run_command
      File ""/tmp/pip-build-71pdfh2i/pycrypto/setup.py"", line 251, in run
        self.run_command(cmd_name)
      File ""/cmd.py"", line 313, in run_command
      File ""/dist.py"", line 974, in run_command
      File ""/tmp/pip-build-71pdfh2i/pycrypto/setup.py"", line 278, in run
        raise RuntimeError(""autoconf error"")
    RuntimeError: autoconf error

    ----------------------------------------
Command ""/opt/bin/python3.6 -u -c ""import setuptools, tokenize;__file__='/tmp/pip-build-71pdfh2i/pycrypto/setup.py';f=getattr(tokenize, 'open', open)(__file__);code=f.read().replace('\r\n', '\n');f.close();exec(compile(code, __file__, 'exec'))"" install --record /tmp/pip-cbi74gir-record/install-record.txt --single-version-externally-managed --compile"" failed with error code 1 in /tmp/pip-build-71pdfh2i/pycrypto/

My mount:
root@router2:~# mount
/dev/root on / type squashfs (ro,relatime)
proc on /proc type proc (rw,relatime)
sysfs on /sys type sysfs (rw,relatime)
ramfs on /tmp type ramfs (rw,relatime)
none on /dev type tmpfs (rw,relatime,size=512K)
devpts on /dev/pts type devpts (rw,relatime,mode=600)
devpts on /proc/bus/usb type usbfs (rw,relatime)
/dev/sda1 on /opt type ext4 (rw,relatime,data=ordered)
/dev/sda1 on /tmp/mnt/sda1 type ext4 (rw,relatime,data=ordered)

When using TMPDIR=/opt/tmp pip3 install pycrypto I also have problem (google showed that TMPDIR must be mounted without ""noexec""):
    creating build/lib.linux-armv7l-3.6/Crypto/PublicKey
    copying lib/Crypto/PublicKey/pubkey.py -> build/lib.linux-armv7l-3.6/Crypto/PublicKey
    copying lib/Crypto/PublicKey/_RSA.py -> build/lib.linux-armv7l-3.6/Crypto/PublicKey
    copying lib/Crypto/PublicKey/_DSA.py -> build/lib.linux-armv7l-3.6/Crypto/PublicKey
    copying lib/Crypto/PublicKey/_slowmath.py -> build/lib.linux-armv7l-3.6/Crypto/PublicKey
    copying lib/Crypto/PublicKey/RSA.py -> build/lib.linux-armv7l-3.6/Crypto/PublicKey
    copying lib/Crypto/PublicKey/DSA.py -> build/lib.linux-armv7l-3.6/Crypto/PublicKey
    copying lib/Crypto/PublicKey/__init__.py -> build/lib.linux-armv7l-3.6/Crypto/PublicKey
    copying lib/Crypto/PublicKey/ElGamal.py -> build/lib.linux-armv7l-3.6/Crypto/PublicKey
    creating build/lib.linux-armv7l-3.6/Crypto/Signature
    copying lib/Crypto/Signature/PKCS1_v1_5.py -> build/lib.linux-armv7l-3.6/Crypto/Signature
    copying lib/Crypto/Signature/PKCS1_PSS.py -> build/lib.linux-armv7l-3.6/Crypto/Signature
    copying lib/Crypto/Signature/__init__.py -> build/lib.linux-armv7l-3.6/Crypto/Signature
    warning: PCTBuildPy: byte-compiling is disabled, skipping.

    running build_ext
    running build_configure
    checking for gcc... gcc
    checking whether the C compiler works... yes
    checking for C compiler default output file name... a.out
    checking for suffix of executables...
    checking whether we are cross compiling... configure: error: in `/opt/tmp/pip-build-ve5o0p9a/pycrypto':
    configure: error: cannot run C compiled programs.
    If you meant to cross compile, use `--host'.
    See `config.log' for more details
    Traceback (most recent call last):
      File ""<string>"", line 1, in <module>
      File ""/opt/tmp/pip-build-ve5o0p9a/pycrypto/setup.py"", line 456, in <module>
        core.setup(**kw)
      File ""/core.py"", line 148, in setup
      File ""/dist.py"", line 955, in run_commands
      File ""/dist.py"", line 974, in run_command
      File ""/opt/lib/python3.6/site-packages/setuptools/command/install.py"", line 61, in run
        return orig.install.run(self)
      File ""/install.py"", line 545, in run
      File ""/cmd.py"", line 313, in run_command
      File ""/dist.py"", line 974, in run_command
      File ""/build.py"", line 135, in run
      File ""/cmd.py"", line 313, in run_command
      File ""/dist.py"", line 974, in run_command
      File ""/opt/tmp/pip-build-ve5o0p9a/pycrypto/setup.py"", line 251, in run
        self.run_command(cmd_name)
      File ""/cmd.py"", line 313, in run_command
      File ""/dist.py"", line 974, in run_command
      File ""/opt/tmp/pip-build-ve5o0p9a/pycrypto/setup.py"", line 278, in run
        raise RuntimeError(""autoconf error"")
    RuntimeError: autoconf error

    ----------------------------------------
Command ""/opt/bin/python3.6 -u -c ""import setuptools, tokenize;__file__='/opt/tmp/pip-build-ve5o0p9a/pycrypto/setup.py';f=getattr(tokenize, 'open', open)(__file__);code=f.read().replace('\r\n', '\n');f.close();exec(compile(code, __file__, 'exec'))"" install --record /opt/tmp/pip-xa11ohvn-record/install-record.txt --single-version-externally-managed --compile"" failed with error code 1 in /opt/tmp/pip-build-ve5o0p9a/pycrypto/

gcc, autoconf, automake, python3-dev, python3-pip, python-crypto, python-cryptography were installed.
opkg install gcc, autoconf automake python3-dev,  python3-pip, python-crypto, python-cryptography
I tried set HOME=/opt/tmp and TMPDIR=/opt/tmp
or HOME=/opt/tmp TMPDIR=/opt/tmp pip3 install pycrypto
but the problem is the same as above.
I read https://github.com/Entware-ng/Entware-ng/wiki/Self-installation-of-python-modules and follow it but wasn't successful.
pycrypto is requirement xiaomi component of hass
Please note that this is for python 3 not python 2.
Platform:
Buffalo WZR-1750DHP
Firmware: DD-WRT v3.0-r33006 std (08/03/17)

Please advise how to fix this issue.
Thank you!
","","889","<python><python-3.x><gcc><pycrypto><dd-wrt>","1","","0","2017-08-11 03:26:30","","3","","","","","2017-08-11 03:26:30",""
"50538729","How to encrypt messages with ECC in pycryptodom","I'm using Hybrid encryption(RSA+AES) but the length was large and now i want to use ECC instead of RSA, but in pycryptodom there is no implementation for that..
this is my RSA code
def generate_keys():
    key = RSA.generate(1024)
    private_key = key.exportKey(format='PEM', pkcs=8, 
                  protection=""scryptAndAES128-CBC"")
    f = open(""private_key.pem"", ""wb"")
    f.write(private_key)
    public_key = key.publickey().exportKey('PEM')
    f = open(""public_key.pem"", ""wb"")
    f.write(public_key)
    f.close()

def encrypt(username, msg):
    #get the reciever's public key
    f = open(""{}.pem"".format(username)) # a.salama.pem
    recipient_key = RSA.import_key(f.read())
    f.close()

    # Encrypt the session key with the reciever's public RSA key
    cipher_rsa = PKCS1_OAEP.new(recipient_key)

    # Encrypt the data with the AES session key
    session_key = get_random_bytes(16)

    cipher_aes = AES.new(session_key, AES.MODE_EAX)
    ciphertext, tag = cipher_aes.encrypt_and_digest(msg.encode('utf-
                    8'))
    encrypted_data = cipher_rsa.encrypt(session_key) + 
    cipher_aes.nonce + tag +  ciphertext    
    encrypted_data = base64.b64encode(encrypted_data)
    return encrypted_data

And after trying to use ECC+AES the code will be
from Crypto.PublicKey import ECC
from Crypto.Random import get_random_bytes
from Crypto.Cipher import AES, PKCS1_OAEP
import base64

def generate_keys():
    key = ECC.generate(curve='P-256') #3072 RSA 
    private_key = key.export_key(format='PEM')
    f = open('private_key.pem','wt')
    f.write(private_key)
    f.close()

    public_key = key.public_key().export_key(format='PEM')
    f = open('public_key.pem','wt')
    f.write(public_key)
    f.close()

def encrypt(username, msg):
    #get the reciever's public key
    f = open(""{}.pem"".format(username), 'rt') # a.salama.pem
    recipient_key = ECC.import_key(f.read())
    f.close()

    # Encrypt the session key with the reciever's public RSA key
    cipher_rsa = PKCS1_OAEP.new(recipient_key)

    # Encrypt the data with the AES session key
    session_key = get_random_bytes(16)
    #we use the EAX mode to allow detection of unauthorized 
    modifications.  
    cipher_aes = AES.new(session_key, AES.MODE_EAX)
    ciphertext, tag = cipher_aes.encrypt_and_digest(msg.encode('utf-
                      8'))
    encrypted_data = cipher_rsa.encrypt(session_key) + 
    cipher_aes.nonce + tag +  ciphertext    
    encrypted_data = base64.b64encode(encrypted_data)

    return encrypted_data.decode()

This gives me error in this line
cipher_rsa = PKCS1_OAEP.new(recipient_key)

but i want to encrypt the session key with the public key, how to do this with pycryptodome or any other way
","Pycryptodome does not support elliptic curve-based encryption (ECC encryption).
Use the ECIES algorithm instead, e.g. this Python library: https://github.com/kigawas/eciespy
The ECIES (Elliptic Curve Integrated Encryption Scheme) is hybrid encryption scheme, which combines ECC public-key cryptography to asymmetrically encrypt a session key, used later to encrypt the input data with a symmetric cipher (e.g. with AES-GCM).
","884","<python><encryption><pycrypto>","2","2","1","2018-10-29 16:32:24","","2","1","","","","2018-05-26 02:13:39",""
"43066233","Python - Installing Pycrypto package","I am using Pycharm and i need to install a package called pycrypto. But when i tried it is giving an error like
Collecting pycrypto
Retrying (Retry(total=4, connect=None, read=None, redirect=None)) after connection broken by 'ConnectTimeoutError(, 'Connection to pypi.python.org timed out. (connect timeout=15)')': /simple/pycrypto/
  Retrying (Retry(total=3, connect=None, read=None, redirect=None)) after connection broken by 'ConnectTimeoutError(, 'Connection to pypi.python.org timed out. (connect timeout=15)')': /simple/pycrypto/
  Retrying (Retry(total=2, connect=None, read=None, redirect=None)) after connection broken by 'ConnectTimeoutError(, 'Connection to pypi.python.org timed out. (connect timeout=15)')': /simple/pycrypto/
  Retrying (Retry(total=1, connect=None, read=None, redirect=None)) after connection broken by 'NewConnectionError(': Failed to establish a new connection: [Errno 11004] getaddrinfo failed',)': /simple/pycrypto/
  Retrying (Retry(total=0, connect=None, read=None, redirect=None)) after connection broken by 'NewConnectionError(': Failed to establish a new connection: [Errno 11004] getaddrinfo failed',)': /simple/pycrypto/
Could not find a version that satisfies the requirement pycrypto (from versions: )
No matching distribution found for pycrypto

FYI
I tried this on both pycharm and python command line but both giving this same error. i am using python 2.7. Help me with the issue. Thanks in advance.
","If you look at the exception, you can see that the connection to pypi.python.org fails.
According to status.python.org, PyPI is up and running and my own tests confirm that. There seems to be a problem with your network connection.
If you can access the URL https://pypi.python.org/simple/pycrypto/ in the browser, check if you have to configure pip to use a proxy.
","881","<python><python-2.7><pycharm><pycrypto>","0","0","2","2019-06-16 19:57:59","","2","","","","","2017-03-28 09:49:43",""
"43066233","Python - Installing Pycrypto package","I am using Pycharm and i need to install a package called pycrypto. But when i tried it is giving an error like
Collecting pycrypto
Retrying (Retry(total=4, connect=None, read=None, redirect=None)) after connection broken by 'ConnectTimeoutError(, 'Connection to pypi.python.org timed out. (connect timeout=15)')': /simple/pycrypto/
  Retrying (Retry(total=3, connect=None, read=None, redirect=None)) after connection broken by 'ConnectTimeoutError(, 'Connection to pypi.python.org timed out. (connect timeout=15)')': /simple/pycrypto/
  Retrying (Retry(total=2, connect=None, read=None, redirect=None)) after connection broken by 'ConnectTimeoutError(, 'Connection to pypi.python.org timed out. (connect timeout=15)')': /simple/pycrypto/
  Retrying (Retry(total=1, connect=None, read=None, redirect=None)) after connection broken by 'NewConnectionError(': Failed to establish a new connection: [Errno 11004] getaddrinfo failed',)': /simple/pycrypto/
  Retrying (Retry(total=0, connect=None, read=None, redirect=None)) after connection broken by 'NewConnectionError(': Failed to establish a new connection: [Errno 11004] getaddrinfo failed',)': /simple/pycrypto/
Could not find a version that satisfies the requirement pycrypto (from versions: )
No matching distribution found for pycrypto

FYI
I tried this on both pycharm and python command line but both giving this same error. i am using python 2.7. Help me with the issue. Thanks in advance.
","Reinstall openssl by
brew uninstall openssl
brew install openssl

As suggested by Homebrew, do the following:
echo 'export PATH=""/usr/local/opt/openssl/bin:$PATH""' >> ~/.bash_profile
export LDFLAGS=""-L/usr/local/opt/openssl/lib""
export CPPFLAGS=""-I/usr/local/opt/openssl/include""

","881","<python><python-2.7><pycharm><pycrypto>","0","1","2","2019-06-16 19:57:59","","2","","","","","2017-03-28 09:49:43",""
"11642337","Pycrypto: Incrementing AES Counter Mode","I'm really confused about how to do AES decryption in pycrypto using counter mode. As I understand the process, if I start with a known IV to decrypt the first block, then for each successive block, I have to increment the IV. But I don't get how to do this. 
Also, I am totally new to python, as you will readily see. My problem lies somewhere in how I am implementing my class and how I am calling it from the decryptor.
Here is the code that I have written thus far:
class IVCounter(object):
    def incrIV(self):
        return self[:15] + chr(ord(self[15:]) + 1)

def decryptCTR(key, ciphertext):

    #convert the key into a 16 byte string
    key = array.array('B', key.decode(""hex"")).tostring()

    #convert the iv into a 16 byte string
    iv = array.array('B', iv.decode(""hex"")).tostring()

    print AES.new(key, mode, counter=IVCounter.incrIV(iv)).decrypt(ciphertext)
    return

Here is the error that I get:

TypeError: unbound method incrIV() must be called with IVCounter instance as first argument (got str instance instead)

No matter what I try, I can't get this to work. Can somebody help straighten me out?
Thanks!
","class IVCounter(object):
    @staticmethod
    def incrIV(arry):
        return arry[:15] + chr(ord(arry[15:]) + 1)

It's complaining because it expects the first argument to be an instance. Turn that off with the staticmethod decorator.
","880","<python><aes><pycrypto>","1","3","1","2012-07-25 05:31:17","11643314","0","","","","","2012-07-25 03:38:30",""
"8173592","How implement the same password code in postgres as in django?","I need acces to the same BD from both django and my custom app.
I like to implement the same functionality on postgress 9 as in django.
This is my try:
CREATE EXTENSION pgcrypto
  SCHEMA public;
-- Genera una cadena aleatoria del tamaño especificado
CREATE OR REPLACE FUNCTION random_string(length integer) 
RETURNS TEXT
AS $$
DECLARE
  chars text[] := '{0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z}';
  result text := '';
  i integer := 0;
BEGIN
  IF length < 0 THEN
    raise exception 'Given length cannot be less than 0';
  END IF;

  FOR i IN 1..length LOOP
    result := result || chars[1+random()*(array_length(chars, 1)-1)];
  END LOOP;

  RETURN result;
END;
$$
LANGUAGE plpgsql;

-- Encripta con SHA1 una cadena y retorna el tipo de algoritmo + salt + hash
CREATE OR REPLACE FUNCTION encryp_text(_text text)
RETURNS TEXT
AS $$
DECLARE
    hash text := '';
    salt text := '';
BEGIN
    salt := random_string(12);
    hash := encode( digest(random_string(12) || _text, 'SHA1'), 'hex');

    RETURN 'sha1$' || salt || '$' || hash;
END;
$$
LANGUAGE 'plpgsql';


-- Resetea el pwd del usuario
CREATE OR REPLACE FUNCTION create_user (_username text, _password text, name text, lastname text, email text, isadmin bool, isstaff bool)
RETURNS BOOLEAN
AS $$
BEGIN
    IF isadmin THEN
        isstaff := isadmin;
    END IF;

    INSERT INTO auth_user(
            username, 
            first_name, 
            last_name, 
            email, 
            password, 
            is_staff, 
            is_active, 
            is_superuser)
    VALUES (_username, 
            name,
            lastname,
            email,
            encryp_text(_password),
            isstaff, 
            true,
            isadmin);
END;
$$
LANGUAGE 'plpgsql';
SELECT create_user('sample','123','sample','user','s@s.com',true,true)

However, in django, when try to autenticate:
from django.contrib.auth import authenticate
authenticate(username='sample', password='123')

It fails. What I need to do?
UPDATE:
Same password:
Django:sha1$46uim9Staj7A$d472909885d27a21bc6e489641e27cc6e4ed25b6
Postgress:sha1$CP5CDALuPntn$d85f6aec18ae781c02cddbaa53e7c92e1b2c7ab1
UPDATE: I forget about this questions. Was solved as show on How reimplement BCryptPasswordHasher of django with postgres 9.1 and upgrade to new bcrypt method.
","As it stands there is no way for us to really critique your code per se.  However to re-use logins, my recommendation is to simply hit the same routines that Django uses, porting them to a new language or framework as necessary.  This means you have a single point of authority regarding security.
Note you cannot use SHA hashed passwords (any algorithm) with PostgreSQL per se because PostgreSQL stores the passwords as md5 hashes salted with the username.  Unless you have access to the unhashed username you cannot alter the PostgreSQL user account effectively.   You might however be able to write a function which both changes the PostgreSQL and Django password from the same inputs but you need to be careful about statement logging.  Also note that ALTER USER is not parameterized in PostgreSQL so you end up having to use pl/pgsql and do something like:
  EXECUTE $e$ ALTER USER $e$ || quote_ident(in_username) || $e$ WITH PASSWORD $e$ 
      || quote_literal(in_password);

","866","<django><postgresql><authentication><pycrypto><postgresql-9.1>","1","0","2","2013-04-01 16:23:26","15747184","7","","-1","","2017-05-23 10:24:22","2011-11-17 20:09:15",""
"8173592","How implement the same password code in postgres as in django?","I need acces to the same BD from both django and my custom app.
I like to implement the same functionality on postgress 9 as in django.
This is my try:
CREATE EXTENSION pgcrypto
  SCHEMA public;
-- Genera una cadena aleatoria del tamaño especificado
CREATE OR REPLACE FUNCTION random_string(length integer) 
RETURNS TEXT
AS $$
DECLARE
  chars text[] := '{0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z}';
  result text := '';
  i integer := 0;
BEGIN
  IF length < 0 THEN
    raise exception 'Given length cannot be less than 0';
  END IF;

  FOR i IN 1..length LOOP
    result := result || chars[1+random()*(array_length(chars, 1)-1)];
  END LOOP;

  RETURN result;
END;
$$
LANGUAGE plpgsql;

-- Encripta con SHA1 una cadena y retorna el tipo de algoritmo + salt + hash
CREATE OR REPLACE FUNCTION encryp_text(_text text)
RETURNS TEXT
AS $$
DECLARE
    hash text := '';
    salt text := '';
BEGIN
    salt := random_string(12);
    hash := encode( digest(random_string(12) || _text, 'SHA1'), 'hex');

    RETURN 'sha1$' || salt || '$' || hash;
END;
$$
LANGUAGE 'plpgsql';


-- Resetea el pwd del usuario
CREATE OR REPLACE FUNCTION create_user (_username text, _password text, name text, lastname text, email text, isadmin bool, isstaff bool)
RETURNS BOOLEAN
AS $$
BEGIN
    IF isadmin THEN
        isstaff := isadmin;
    END IF;

    INSERT INTO auth_user(
            username, 
            first_name, 
            last_name, 
            email, 
            password, 
            is_staff, 
            is_active, 
            is_superuser)
    VALUES (_username, 
            name,
            lastname,
            email,
            encryp_text(_password),
            isstaff, 
            true,
            isadmin);
END;
$$
LANGUAGE 'plpgsql';
SELECT create_user('sample','123','sample','user','s@s.com',true,true)

However, in django, when try to autenticate:
from django.contrib.auth import authenticate
authenticate(username='sample', password='123')

It fails. What I need to do?
UPDATE:
Same password:
Django:sha1$46uim9Staj7A$d472909885d27a21bc6e489641e27cc6e4ed25b6
Postgress:sha1$CP5CDALuPntn$d85f6aec18ae781c02cddbaa53e7c92e1b2c7ab1
UPDATE: I forget about this questions. Was solved as show on How reimplement BCryptPasswordHasher of django with postgres 9.1 and upgrade to new bcrypt method.
","As requested, I solve this questions as
-- Genera una cadena aleatoria del tamaño especificado
CREATE OR REPLACE FUNCTION random_string(length INTEGER, OUT RETURNS TEXT) 
AS $$
DECLARE
  chars TEXT[] := '{0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z}';
  result TEXT := '';
  i INTEGER := 0;
BEGIN
  IF length < 0 THEN
    raise exception 'Given length cannot be less than 0';
  END IF;

  FOR i IN 1..length LOOP
    result := result || chars[1+random()*(array_length(chars, 1)-1)];
  END LOOP;

  RETURNS =  result;
END;
$$
LANGUAGE plpgsql;

-- Encripta con SHA1 una cadena y retorna el tipo de algoritmo + salt + hash
CREATE OR REPLACE FUNCTION encryp_TEXT(_TEXT TEXT, OUT RETURNS TEXT)
AS $$
DECLARE
    hash TEXT := '';
    salt TEXT := '';
BEGIN
    salt := random_string(12);
    hash := encode( libs.digest(salt || _TEXT, 'sha1'), 'hex');

    RETURNS =  'sha1$' || salt || '$' || hash;
END;
$$
LANGUAGE 'plpgsql';

However, this is not longer rigth with new django (1.5). The correct version for that is in How reimplement BCryptPasswordHasher of django with postgres 9.1
Is now:
-- Encripta con bcrypto una cadena y retorna el tipo de algoritmo + salt + hash, django compatible
CREATE OR REPLACE FUNCTION encryp_text(_TEXT TEXT, OUT RETURNS TEXT)
AS $$
DECLARE
    hash TEXT := '';
    salt TEXT := '';
BEGIN
    salt := random_string(12);
    hash := libs.crypt(_TEXT,salt);

    RETURNS =  'bcrypt$' || hash;
END;
$$
LANGUAGE 'plpgsql';

","866","<django><postgresql><authentication><pycrypto><postgresql-9.1>","1","0","2","2013-04-01 16:23:26","15747184","7","","-1","","2017-05-23 10:24:22","2011-11-17 20:09:15",""
"36364070","Why I am not able to decrypt what I encrypted with pycrypto?","Here's my code:
Encrypt:
from Crypto.Cipher import AES
import base64

def encryption (privateInfo):
    BLOCK_SIZE = 16
    PADDING = '{'
    pad = lambda s: s + (BLOCK_SIZE - len(s) % BLOCK_SIZE) * PADDING
    EncodeAES = lambda c, s: base64.b64encode(c.encrypt(pad(s)))
    secret = 'Fr3@k1nP@ssw0rd.'
    print('encryption key:', secret)
    cipher = AES.new(secret)
    encoded = EncodeAES(cipher, privateInfo)
    print('Encrypted string:', encoded)

encryption('secret')

The encrypted string is: b'QuCzNmwiVaq1uendvX7P+g=='
Decrypt:
from Crypto.Cipher import AES
import base64

def decryption(encryptedString):
    PADDING = '{'
    DecodeAES = lambda c, e: c.decrypt(base64.b64decode(e)).rstrip(PADDING)
    key = 'Fr3@k1nP@ssw0rd.'
    cipher = AES.new(key)
    decoded = DecodeAES(cipher, encryptedString)
    print(decoded)

decryption(""b'QuCzNmwiVaq1uendvX7P+g=='"")

The result: 
ValueError: Input strings must be a multiple of 16 in length

This is PyCrypto 2.6.1 on Python 3.4; I've installed VC++ 2010 Express as well.
What's really confusing me is that it works perfectly on Python 2.7
Any suggestion appreciated, but note that I'm new to Python.
","Maybe because you have "" around ""b'QuCzNmwiVaq1uendvX7P+g=='"".
Change 
decryption(""b'QuCzNmwiVaq1uendvX7P+g=='"")
to 
decryption(b'QuCzNmwiVaq1uendvX7P+g==')
and you should be all set.
","865","<python><pycrypto>","0","0","2","2016-04-05 11:06:41","36409804","11","","5952681","","2016-04-01 20:35:43","2016-04-01 19:09:07",""
"36364070","Why I am not able to decrypt what I encrypted with pycrypto?","Here's my code:
Encrypt:
from Crypto.Cipher import AES
import base64

def encryption (privateInfo):
    BLOCK_SIZE = 16
    PADDING = '{'
    pad = lambda s: s + (BLOCK_SIZE - len(s) % BLOCK_SIZE) * PADDING
    EncodeAES = lambda c, s: base64.b64encode(c.encrypt(pad(s)))
    secret = 'Fr3@k1nP@ssw0rd.'
    print('encryption key:', secret)
    cipher = AES.new(secret)
    encoded = EncodeAES(cipher, privateInfo)
    print('Encrypted string:', encoded)

encryption('secret')

The encrypted string is: b'QuCzNmwiVaq1uendvX7P+g=='
Decrypt:
from Crypto.Cipher import AES
import base64

def decryption(encryptedString):
    PADDING = '{'
    DecodeAES = lambda c, e: c.decrypt(base64.b64decode(e)).rstrip(PADDING)
    key = 'Fr3@k1nP@ssw0rd.'
    cipher = AES.new(key)
    decoded = DecodeAES(cipher, encryptedString)
    print(decoded)

decryption(""b'QuCzNmwiVaq1uendvX7P+g=='"")

The result: 
ValueError: Input strings must be a multiple of 16 in length

This is PyCrypto 2.6.1 on Python 3.4; I've installed VC++ 2010 Express as well.
What's really confusing me is that it works perfectly on Python 2.7
Any suggestion appreciated, but note that I'm new to Python.
","After some research and a lot of coding, testing and improving, I made this code running on Python 3.4.4 and Windows 10:
import base64
from Crypto.Cipher import AES
from Crypto.Hash import SHA256

PAD = ""X""

def key_hash(key):
    return SHA256.new(key.encode()).digest()

def encrypt(text, key):
    while len(text) % 16 != 0:
        text += PAD
    cipher = AES.new(key_hash(key))
    encrypted = cipher.encrypt(text.encode())
    return base64.b64encode(encrypted).decode()

def decrypt(text, key):
    cipher = AES.new(key_hash(key))
    plain = cipher.decrypt(base64.b64decode(text))
    return plain.decode().rstrip(PAD)

if __name__ == '__main__':
    e = encrypt(""This is my string."", ""password"")
    p = decrypt(e, ""password"")
    print(""Encrypted:"", e)
    print(""Plain:"", p)

Output:
Encrypted: QjkhFlXG2tklZQgHorpAOFSTb2vYZLNb/eEUIvAsT1g=
Plain: This is my string.

If you have any questions/improvements/critics, feel free to comment!
","865","<python><pycrypto>","0","1","2","2016-04-05 11:06:41","36409804","11","","5952681","","2016-04-01 20:35:43","2016-04-01 19:09:07",""
"42570470","installing python packages on production system(windows) without internet access and no internal pypi server","Is there a way to install python packages on systems without internet access and no internal pypi server.
I have tried installing it on local machine and then moving the package from site-packages to target location but it does not works.
Any other options.
Thanks
","Yes there is a way my friend, you need to download first the packages and dependency of them to a folder and use pip package manager with a requirements file  like this:
pip install --no-index --find-links=[file://] -r requirements.txt
and if you want to download all the packages first in one hit use this:
pip install --download  -r requirements.txt
for more read here:
https://pip.pypa.io/en/stable/user_guide/#installing-from-local-packages
@maverick
","859","<python><python-3.5><windows-server-2012><pypi><pycrypto>","1","3","1","2017-03-03 18:43:47","42586269","2","","300520","","2017-03-03 04:13:43","2017-03-03 04:05:37",""
"50394730","Pycrypto RSA PKCS1 OAEP SHA256 Interoperability with Java","I'm using the following code in Python + Pycryptodome (Pycrypto fork) to encrypt a message using RSA PKCS#1 OAEP SHA256 (RSA/ECB/OAEPWithSHA-256AndMGF1Padding): 
from Crypto.Cipher import PKCS1_OAEP
from Cryptodome.Hash import SHA256
cipher = PKCS1_OAEP.new(key=self.key, hashAlgo=SHA256))
ciphertext = cipher.encrypt(cek)

and the following code in Java to decrypt it:
Cipher cipher = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-256AndMGF1Padding"");
cipher.init(Cipher.DECRYPT_MODE, privateKey);

byte[] cek = cipher.doFinal(ciphertext);

However, I'm getting:
Exception in thread ""main"" javax.crypto.BadPaddingException: Decryption error
    at sun.security.rsa.RSAPadding.unpadOAEP(RSAPadding.java:499)
    at sun.security.rsa.RSAPadding.unpad(RSAPadding.java:293)
    at com.sun.crypto.provider.RSACipher.doFinal(RSACipher.java:363)
    at com.sun.crypto.provider.RSACipher.engineDoFinal(RSACipher.java:389)
    at javax.crypto.Cipher.doFinal(Cipher.java:2165)

","In the Sun JCE, RSA/ECB/OAEPWithSHA-256AndMGF1Paddingactually means Hash=SHA256 and MGF1 using SHA1. Pycrypto*, on the other hand, assumes MGF1+SHA256 when Hash=SHA256.
You will need to configure Pycrypto* accordingly by passing the correct Hash mechanism to the the MGF1 function:
from Cryptodome.Cipher import PKCS1_OAEP
from Cryptodome.Hash import SHA256, SHA1
from Cryptodome.Signature import pss

cipher = PKCS1_OAEP.new(key=self.key, hashAlgo=SHA256, mgfunc=lambda x,y: pss.MGF1(x,y, SHA1))
ciphertext = cipher.encrypt(cek)

It's worth noting that according to breaking down RSA/ECB/OAEPWITHSHA-256ANDMGF1PADDING, BouncyCastle uses SHA256 for both the Hash and MGF1 in the same way Pycrypto* does.
","858","<java><python><rsa><pycrypto><pycryptodome>","1","3","1","2018-05-17 17:54:29","50394731","0","","","","","2018-05-17 15:05:02",""
"28039914","Heroku -- ImportError: No module named Crypto","I am trying to deploy a Flask app via Heroku, but the app keeps crashing, and in heroku logs, I get:

2015-01-20T06:26:40.553579+00:00 app[web.1]: from Crypto import Random
  2015-01-20T06:26:40.553639+00:00 app[web.1]: ImportError: No module named Crypto
  2015-01-20T06:26:40.553531+00:00 app[web.1]: from ZiggeoAuth import ZiggeoAuth
  2015-01-20T06:26:41.333576+00:00 heroku[web.1]: Process exited with status 1
  2015-01-20T06:26:41.340320+00:00 heroku[web.1]: State changed from starting to crashed.

I've tried using virtualenv and gunicorn and also deploying outside of virtuanlenv, but the import error remains. Running foreman start runs without errors. The requirements.txt generated by pip freeze yields:
Django==1.6.2  
Flask==0.10.1  
Jinja2==2.7.3  
MarkupSafe==0.23  
MySQL-python==1.2.5  
Pillow==2.4.0  
PyRSS2Gen==1.0.0  
South==0.8.4  
Twisted==12.2.0  
Werkzeug==0.9.6  
altgraph==0.10.1  
bdist-mpkg==0.4.4  
beautifulsoup4==4.3.2  
bonjour-py==0.3  
cffi==0.8.6  
cryptography==0.7.2  
django-twitter-bootstrap==3.1.1  
enum34==1.0.4  
itsdangerous==0.24  
macholib==1.5  
matplotlib==1.1.1  
modulegraph==0.10.1  
numpy==1.6.2  
pep8==1.5.7  
py2app==0.7.1  
pyOpenSSL==0.13  
pyasn1==0.1.7  
pycparser==2.10  
**pycrypto==2.6.1**  
pyobjc-core==2.3.2a0  
... (other pyobjc things) ...  
python-dateutil==1.5  
pytz==2012d  
requests==2.4.3  
scipy==0.11.0  
six==1.9.0  
vboxapi==1.0  
virtualenv==1.11.4  
wsgiref==0.1.2  
wxPython==3.0.1.1  
wxPython-common==3.0.1.1  
xattr==0.6.4  
zope.interface==3.8.0

Something that might be important is that I manually installed PyCrypto rather than using Pip, since it didn't work with any package managers. I'm wondering if it's a configuration or pathing issue, but I don't know how to check.
heroku config says that the app has no config vars.
","Solved: appended the flag --no-site-packages to virtualenv.
","857","<python><heroku><flask><virtualenv><pycrypto>","1","1","1","2015-01-24 20:56:51","28130169","0","1","1726135","","2015-01-20 07:41:33","2015-01-20 07:35:07",""
"24940994","TypeError while using pycrypto library in python 3.3.2","I have just started using PyCrypto package for python.
I am trying out the following code under python 3.3.2:
Code Reference : AES Encryption using python
#!/usr/bin/env python

from Crypto.Cipher import AES
import base64
import os

# the block size for the cipher object; must be 16, 24, or 32 for AES
BLOCK_SIZE = 32

# the character used for padding--with a block cipher such as AES, the value
# you encrypt must be a multiple of BLOCK_SIZE in length.  This character is
# used to ensure that your value is always a multiple of BLOCK_SIZE
PADDING = '{'

# one-liner to sufficiently pad the text to be encrypted
pad = lambda s: s + (BLOCK_SIZE - len(s) % BLOCK_SIZE) * PADDING

# one-liners to encrypt/encode and decrypt/decode a string
# encrypt with AES, encode with base64
EncodeAES = lambda c, s: base64.b64encode(c.encrypt(pad(s)))
DecodeAES = lambda c, e: c.decrypt(base64.b64decode(e)).rstrip(PADDING)

# generate a random secret key
secret = os.urandom(BLOCK_SIZE)

# create a cipher object using the random secret
cipher = AES.new(secret)

# encode a string
encoded = EncodeAES(cipher, 'password')
print ('Encrypted string:', encoded)

# decode the encoded string
decoded = DecodeAES(cipher, encoded)
print ('Decrypted string:', decoded)

The error that I run into is :
Traceback (most recent call last):

  File ""C:/Users/Hassan Javaid/Documents/Python files/crypto_example.py"", line 34, in <module>
    decoded = DecodeAES(cipher, encoded)

  File ""C:/Users/Hassan Javaid/Documents/Python files/crypto_example.py"", line 21, in <lambda>
DecodeAES = lambda c, e: c.decrypt(base64.b64decode(e)).rstrip(PADDING)
TypeError: Type str doesn't support the buffer API

Any pointers to why I am getting the same ?
","This is because cipher.encrypt(plain_text) in python 3.x returns a byte string.
The example given in the page uses python 2.x in which case cipher.encrypt(plain_text) returned a regular string.
You can verify the same by using the type function:
In python 3.x:
>>> type(cipher.encrypt(""ABCDEFGHIJKLMNOP""))
<class 'bytes'>

In python 2.x
>>> type(cipher.encrypt(""ABCDEFGHIJKLMNOP""))
<class 'str'>

The error you are getting is because you are trying to use the rstrip method on a byte string.
Use:
DecodeAES = lambda c, e: c.decrypt(base64.b64decode(e)).decode(""UTF-8"").rstrip(PADDING)

This will decode the bytestring to regular string before using the rstrip method on it.
","850","<python><encryption><pycrypto>","2","2","2","2014-07-28 18:44:30","24941459","0","","3109769","","2014-07-24 18:55:39","2014-07-24 18:08:23",""
"24940994","TypeError while using pycrypto library in python 3.3.2","I have just started using PyCrypto package for python.
I am trying out the following code under python 3.3.2:
Code Reference : AES Encryption using python
#!/usr/bin/env python

from Crypto.Cipher import AES
import base64
import os

# the block size for the cipher object; must be 16, 24, or 32 for AES
BLOCK_SIZE = 32

# the character used for padding--with a block cipher such as AES, the value
# you encrypt must be a multiple of BLOCK_SIZE in length.  This character is
# used to ensure that your value is always a multiple of BLOCK_SIZE
PADDING = '{'

# one-liner to sufficiently pad the text to be encrypted
pad = lambda s: s + (BLOCK_SIZE - len(s) % BLOCK_SIZE) * PADDING

# one-liners to encrypt/encode and decrypt/decode a string
# encrypt with AES, encode with base64
EncodeAES = lambda c, s: base64.b64encode(c.encrypt(pad(s)))
DecodeAES = lambda c, e: c.decrypt(base64.b64decode(e)).rstrip(PADDING)

# generate a random secret key
secret = os.urandom(BLOCK_SIZE)

# create a cipher object using the random secret
cipher = AES.new(secret)

# encode a string
encoded = EncodeAES(cipher, 'password')
print ('Encrypted string:', encoded)

# decode the encoded string
decoded = DecodeAES(cipher, encoded)
print ('Decrypted string:', decoded)

The error that I run into is :
Traceback (most recent call last):

  File ""C:/Users/Hassan Javaid/Documents/Python files/crypto_example.py"", line 34, in <module>
    decoded = DecodeAES(cipher, encoded)

  File ""C:/Users/Hassan Javaid/Documents/Python files/crypto_example.py"", line 21, in <lambda>
DecodeAES = lambda c, e: c.decrypt(base64.b64decode(e)).rstrip(PADDING)
TypeError: Type str doesn't support the buffer API

Any pointers to why I am getting the same ?
","Another way to look at it is that the method rstrip accepts as argument a byte string if invoked on a byte string, or a regular string if invoked on a regular string.
Since decrypt of an AES object returns a byte string, DELIMITER should be defined as a byte string too:
PADDING = b'{'

","850","<python><encryption><pycrypto>","2","0","2","2014-07-28 18:44:30","24941459","0","","3109769","","2014-07-24 18:55:39","2014-07-24 18:08:23",""
"14891492","Key length issue: AES encryption on phpseclib and decryption on PyCrypto","I am working on a data intensive project where I have been using PHP for fetching data and encrypting it using phpseclib. A chunk of the data has been encrypted in AES with the ECB mode -- however the key length is only 10. I am able to decrypt the data successfully.
However, I need to use Python in the later stages of the project and consequently need to decrypt my data using it. I tried employing PyCrypto but it tells me the key length must be 16, 24 or 32 bytes long, which is not the case. According to the phpseclib documentation the ""keys are null-padded to the closest valid size"", but I'm not sure how to implement that in Python. Simply extending the length of the string with 6 spaces is not working.
What should I do?
","I strongly recommend you adjust your PHP code to use (at least) a sixteen byte key, otherwise your crypto system is considerably weaker than it might otherwise be.
I would also recommend you switch to CBC-mode, as ECB-mode may reveal patterns in your input data. Ensure you use a random IV each time you encrypt and store this with the ciphertext.
Finally, to address your original question:

According to the phpseclib documentation the ""keys are null-padded to the closest valid size"", but I'm not sure how to implement that in Python. Simply extending the length of the string with 6 spaces is not working.

The space character 0x20 is not the same as the null character 0x00.
","847","<php><python><aes><pycrypto><phpseclib>","1","3","1","2013-02-15 10:17:40","14892493","4","","","","","2013-02-15 09:22:24",""
"43628997","AES get different results by using the same key and iv to encrypt the same plaintext repeatedly","Here is my code:
from Crypto.Cipher import AES
import binascii

def encrypt(secret_key, sign, raw):
    key = md5(secret_key).hexdigest()[::-2]
    iv = md5(sign).hexdigest()[::-2]
    raw += (16 - len(raw) % 16) * '\0'
    generator = AES.new(key, AES.MODE_CBC, IV=iv)

    #***********************************************
    #Problems occur at here ! 
    #If I execute ""generator.encrypt(raw)""
    #The results are not same every time

    print generator.encrypt(raw) # result_1
    print generator.encrypt(raw) # result_2
    print generator.encrypt(raw) # result_3

    #***********************************************

    return binascii.b2a_hex(generator.encrypt(raw))

I will get the different results when every time I execute ""generator.encrypt(raw)""
It is very confuse to me because I used the same KEY and IV.
I want to establish a API-SYSTEM, I need others post their cryptographic data no matter which language they used, just want to get the same result in AES.
How can I get the stable result in using AES?
I mean I want to get the same result when I using the same KEY and IV to encrypt the same plaintext.
","The AES implementation in pycrypto is a stateful for the CBC mode. This statefulness can be simulated by the IV value. Let's assume that raw is shorter than 16 bytes for simplicity.
In that case the code
raw += (16 - len(raw) % 16) * '\0'
generator = AES.new(key, AES.MODE_CBC, IV=iv)

print generator.encrypt(raw) # result_1
print generator.encrypt(raw) # result_2
print generator.encrypt(raw) # result_3

is equivalent to 
raw += (16 - len(raw) % 16) * '\0'
generator = AES.new(key, AES.MODE_CBC, IV=iv)
ct1 = generator.encrypt(raw) 
print ct1 # result_1

generator = AES.new(key, AES.MODE_CBC, IV=ct1)
ct2 = generator.encrypt(raw) 
print ct2 # result_2

generator = AES.new(key, AES.MODE_CBC, IV=ct2)
ct3 = generator.encrypt(raw) 
print ct3 # result_3

The reason is that the IV is advanced internally according to the definition of the CBC mode. It means that the IV is set to the last full ciphertext block.
If raw is assumed to be any length, then the following would be equivalent where only the last block of the ciphertext is used as the IV for the next encryption:
raw += (16 - len(raw) % 16) * '\0'
generator = AES.new(key, AES.MODE_CBC, IV=iv)
ct1 = generator.encrypt(raw) 
print ct1 # result_1

generator = AES.new(key, AES.MODE_CBC, IV=ct1[-16:])
ct2 = generator.encrypt(raw) 
print ct2 # result_2

generator = AES.new(key, AES.MODE_CBC, IV=ct2[-16:])
ct3 = generator.encrypt(raw) 
print ct3 # result_3

If you don't want that, then you need to initialize the generator with the original IV.
","843","<python><encryption><aes><pycrypto><cbc-mode>","1","2","1","2017-04-26 16:46:08","43640092","2","","1816580","","2017-04-26 16:46:08","2017-04-26 08:38:17",""
"45649856","pycrypto encrypt/decrypt, losing part of encrypted string when decrypting","I am trying to encrypt/decrypt with pycrypto in python. for the most part things have worked smooth but I am getting an odd problem when decrypting data.I have tried to encrypt/decrypt some jpgs for testing and although they encrypt/decrypt without issue, the decrypted files cannot be opened/are corrupted. To try to find the problem I saved a textfile with a random sentence similar to ""test this file for integrity blah blah blah"" and it decrypts correctly only after "".... integrity blah blah blah"", everything before integrity is still in garbled characters. I'm not that knowledgable on AES, but im assuming that this is an encoding/decoding or padding error. 
Here is my code:
#encryption
iv = Random.new().read( AES.block_size)

filePath = input(""Path to file for encryption: "")
selFile = open(filePath, 'rb')
getBytes = bytes(selFile.read())

encPW = input(""Enter password: "")
hashpw = hashlib.sha256(encPW.encode('UTF-8').digest())

destination = input(""Destination path for encrypted file: "")

aes = AES.new(hashpw, AES.Mode_CFB, iv)
encFile = base65.b64encode(aes.encrypt(getBytes))

writetofile = open(destination, 'wb')
writetofile.write(encFile)
writetofile.close()
print(""Encryption successful"")

#Decryption
iv = Random.new().read( AES.block_size)

filePath = input(""Path to file for decryption: "")
selFile = open(filePath, 'rb')
getBytes = bytes(selFile.read())

decPW = input(""Enter password: "")
hashdecpw = hashlib.sha256(encPW.encode('UTF-8').digest())

destination = input(""Destination path for decrypted file: "")

aes = AES.new(hashdecpw, AES.Mode_CFB, iv)
decFile = aes.decrypt(getBytes)

writetofile = open(destination, 'wb')
writetofile.write(decFile)
writetofile.close()
print(""Decryption successful"")

Any ideas on what could be causing the loss of the first characters, and preventing me from encrypting/decrypting files correctly?
","You have at least three issues:

You probably mean hashlib.sha256(encPW.encode('UTF-8')).digest() instead of hashlib.sha256(encPW.encode('UTF-8').digest()) (the closing brace is at the wrong position)
You're encoding the ciphertext with Base64 before writing it to a file. You've forgot to decode it after reading it back from the file before decrypting it. For example:
getBytes = base64.b64decode(bytes(selFile.read()))

This is the big one: You need the exact same IV during the decryption that you've used for encryption. The IV is not secret, but it needs to be unique for every encryption that you've done with the same key. Commonly the IV is written in front of the ciphertext and read back for decryption.
#encryption
encFile = base64.b64encode(iv + aes.encrypt(getBytes))

#decryption
getBytes = base64.b64decode(bytes(selFile.read()))
iv = getBytes[:16]
aes = AES.new(hashdecpw, AES.Mode_CFB, iv)
decFile = aes.decrypt(getBytes[16:])


","829","<python><encryption><pycrypto>","0","1","2","2017-08-14 16:12:58","45650055","2","","3524982","","2017-08-14 16:12:58","2017-08-12 11:45:23",""
"45649856","pycrypto encrypt/decrypt, losing part of encrypted string when decrypting","I am trying to encrypt/decrypt with pycrypto in python. for the most part things have worked smooth but I am getting an odd problem when decrypting data.I have tried to encrypt/decrypt some jpgs for testing and although they encrypt/decrypt without issue, the decrypted files cannot be opened/are corrupted. To try to find the problem I saved a textfile with a random sentence similar to ""test this file for integrity blah blah blah"" and it decrypts correctly only after "".... integrity blah blah blah"", everything before integrity is still in garbled characters. I'm not that knowledgable on AES, but im assuming that this is an encoding/decoding or padding error. 
Here is my code:
#encryption
iv = Random.new().read( AES.block_size)

filePath = input(""Path to file for encryption: "")
selFile = open(filePath, 'rb')
getBytes = bytes(selFile.read())

encPW = input(""Enter password: "")
hashpw = hashlib.sha256(encPW.encode('UTF-8').digest())

destination = input(""Destination path for encrypted file: "")

aes = AES.new(hashpw, AES.Mode_CFB, iv)
encFile = base65.b64encode(aes.encrypt(getBytes))

writetofile = open(destination, 'wb')
writetofile.write(encFile)
writetofile.close()
print(""Encryption successful"")

#Decryption
iv = Random.new().read( AES.block_size)

filePath = input(""Path to file for decryption: "")
selFile = open(filePath, 'rb')
getBytes = bytes(selFile.read())

decPW = input(""Enter password: "")
hashdecpw = hashlib.sha256(encPW.encode('UTF-8').digest())

destination = input(""Destination path for decrypted file: "")

aes = AES.new(hashdecpw, AES.Mode_CFB, iv)
decFile = aes.decrypt(getBytes)

writetofile = open(destination, 'wb')
writetofile.write(decFile)
writetofile.close()
print(""Decryption successful"")

Any ideas on what could be causing the loss of the first characters, and preventing me from encrypting/decrypting files correctly?
","You're generating a new IV for encryption and decryption seperately, which comes to yield such problems. Here's what I recommend doing:
def encrypt(inpath, outpath, password):
    iv = Random.new().read(AES.block_size)
    with open(inpath, ""rb"") as f:
        contents = f.read()
    # A context manager automatically calls f.close()
    key = pbkdf2.crypt(password, """")
    # See notes

    aes = AES.new(key, AES.Mode_CFB, iv)
    encrypted = aes.encrypt(contents)
    with open(outpath, ""wb"") as f:
        f.write(iv + b"":"")
        f.write(encrypted)
    print(""Encryption successful"")


def decrypt(inpath, outpath, password):
    with open(inpath, ""rb"") as f:
        contents = f.read()

    iv, encrypted = contents.split(b"":"")
    key = pbkdf2.crypt(password, """")
    aes = AES.new(key, AES.Mode_CFB, iv)

    decrypted = aes.decrypt(contents)
    with open(outpath, ""wb"") as f:
        f.write(decrypted)
    print(""Decryption successful"")

Some notes:

An IV is not meant to be secret, so it can be randomly generated once and then written to a file to be used later for decryption (as shown in this example)
A hashing algorithm is not strong enough for deriving keys, which is why there are special tools called key derivation algorithms (like PBKDF2 in python). Use those instead!

I have not tested this code myself, so it may not work properly.
","829","<python><encryption><pycrypto>","0","1","2","2017-08-14 16:12:58","45650055","2","","3524982","","2017-08-14 16:12:58","2017-08-12 11:45:23",""
"27667925","PyInstaller and PyCrypto on Ubuntu","I am new in PyInstaller. I have got a program on Python and would like to convert it into stand-alone executable under Ubuntu. I try:
pyinstaller -y --clean --hidden-import=Crypto.Util._counter pycrypter.py

But when I execute the result file:
cd dist/pycrypter
./pycrypter

I have a following error:

Traceback (most recent call last):
  File """", line 3, in 
  File ""/usr/local/lib/python2.7/dist-packages/PyInstaller/loader/pyi_importers.py"", line 270, in load_module
    exec(bytecode, module.__dict__)
  File ""/home/fomalhaut/Development/python/pycrypter/build/pycrypter/out00-PYZ.pyz/models"", line 1, in 
  File ""/usr/local/lib/python2.7/dist-packages/PyInstaller/loader/pyi_importers.py"", line 270, in load_module
    exec(bytecode, module.__dict__)
  File ""/home/fomalhaut/Development/python/pycrypter/build/pycrypter/out00-PYZ.pyz/models.PyCrypter"", line 3, in 
  File ""/usr/local/lib/python2.7/dist-packages/PyInstaller/loader/pyi_importers.py"", line 270, in load_module
    exec(bytecode, module.__dict__)
  File ""/home/fomalhaut/Development/python/pycrypter/build/pycrypter/out00-PYZ.pyz/Crypto.PublicKey.RSA"", line 78, in 
  File ""/usr/local/lib/python2.7/dist-packages/PyInstaller/loader/pyi_importers.py"", line 270, in load_module
    exec(bytecode, module.__dict__)
  File ""/home/fomalhaut/Development/python/pycrypter/build/pycrypter/out00-PYZ.pyz/Crypto.Random"", line 29, in 
  File ""/usr/local/lib/python2.7/dist-packages/PyInstaller/loader/pyi_importers.py"", line 270, in load_module
    exec(bytecode, module.__dict__)
  File ""/home/fomalhaut/Development/python/pycrypter/build/pycrypter/out00-PYZ.pyz/Crypto.Random._UserFriendlyRNG"", line 38, in 
  File ""/usr/local/lib/python2.7/dist-packages/PyInstaller/loader/pyi_importers.py"", line 270, in load_module
    exec(bytecode, module.__dict__)
  File ""/home/fomalhaut/Development/python/pycrypter/build/pycrypter/out00-PYZ.pyz/Crypto.Random.Fortuna.FortunaAccumulator"", line 39, in 
  File ""/usr/local/lib/python2.7/dist-packages/PyInstaller/loader/pyi_importers.py"", line 270, in load_module
    exec(bytecode, module.__dict__)
  File ""/home/fomalhaut/Development/python/pycrypter/build/pycrypter/out00-PYZ.pyz/Crypto.Random.Fortuna.FortunaGenerator"", line 35, in 
  File ""/usr/local/lib/python2.7/dist-packages/PyInstaller/loader/pyi_importers.py"", line 270, in load_module
    exec(bytecode, module.__dict__)
  File ""/home/fomalhaut/Development/python/pycrypter/build/pycrypter/out00-PYZ.pyz/Crypto.Util.Counter"", line 59, in 
ImportError: cannot import name _counter

How to convert my program correctly via PyInstaller?
","","823","<python><import><pyinstaller><pycrypto>","0","","0","2014-12-27 14:02:06","","6","","4099593","","2014-12-27 14:02:06","2014-12-27 13:58:31",""
"19391556","Python Crypto\Cipher\_DES.pyc DLL load failed, how can I tell whic DLL?","I am building a python application using the http://ftp.dlitz.net/pub/dlitz/crypto/pycrypto/pycrypto-2.6.tar.gz package, building it as a 32 bit application on a Windows 7 64-bit platform using MS Visual Studio 2010, and am exporting it as an executable using py2exe.
The executable runs fine on my Windows 7 platform.  However, when I try to run it on Windows Server 2008, I get the following error:
Traceback (most recent call last):

File ""Crypto\Cipher\DES.pyc"", line 54, in 
File ""Crypto\Cipher_DES.pyc"", line 12, in 
File ""Crypto\Cipher_DES.pyc"", line 10, in __load

ImportError: DLL load failed: The specified module could not be found.
The first problem that I want to overcome is that the pycrypto package does not include uncompiled python for _DES.pyc, so I have no idea what module it is trying to load.  Is there any way to find this out?  Note that if I comment out the calls to the Crypto routines, it also works fine, except that the functionality I want is missing :-)
","The solution to my problem was to use pyDes instead, a pure python encryption package available at http://twhiteman.netfirms.com/des.html.
","810","<python><dll><des><pycrypto>","1","0","1","2013-10-16 17:32:34","","1","","","user2625787","2013-10-15 22:10:28","2013-10-15 21:36:29",""
"41371991","python Pycrypto how can I encrypt files and not corrupt them","I've been dealing with this problem for quite some time now. 
When I try to encrypt a file with PyCrypto.  I can encrypt and decrypt it (only works with images so far).  The problem is that the image becomes corrupted when I encrypt it and try to open it.  How can I fix it so I can still run the program or see the image when it's been encrypted?
Here is the encryption code:
from Crypto.Cipher import AES
from Crypto.Hash import SHA256
from Crypto import Random
import os

def Encryption(Key, filename):
    chunksize = 64*1024
    outputFile = ""[CryptoReady]""+filename
    filesize = str(os.path.getsize(filename)).zfill(16)
    IV = Random.new().read(16)

encryptor = AES.new(Key, AES.MODE_CBC, IV)

with open(filename, 'rb') as infile:
    with open(outputFile, 'wb') as outfile:
        outfile.write(filesize.encode('utf-8'))
        outfile.write(IV)

        while True:
            chunk = infile.read(chunksize)

            if len(chunk) == 0:
                break
            elif len(chunk) % 16 != 0:
                chunk += b'}' * (16 - (len(chunk) % 16))

            outfile.write(encryptor.encrypt(chunk))

","When you encrypt a file, its contents are run through an algorithm and the contents are changed. If your file is a JPEG, its headers are also changed causing it to look-like corrupt if you try to open it using file viewers.
However, what's happening behind the scenes is they have just been transformed from X to let's say Y. To bring it back and have your image viewer easily open it, you will need to run the file thorough a decryption algorithm using the appropriate keys. That way your Y type will be transformed back exactly to X type and you will be able to read it.
","804","<python><encryption><pycrypto>","0","0","1","2017-04-05 19:00:08","","2","","6655094","","2016-12-29 01:29:10","2016-12-29 01:22:54",""
"5152159","Reading a private key generated with Putty in ezPyCrypto","I used Putty Key Generator to create a private key, called Putty-Private.ppk. I can use this private key with Pageant and Putty to connect to the servers of my hosting provider. 
Now, I want to connect to the server with xmlrpc based remote API. To do this I installed ezPyCrypto which is advised by many as an easy to use python encryption library. To test the encryption I wrote the following code:
mypass = ""xxx""
fd = open(""Putty-Private.ppk"")
pubprivkey = fd.read()
fd.close()
k = ezPyCrypto.key(pubprivkey, passphrase = mypass)
dec = k.decString(enc)

But the system gives the following error in ezPyCrypto.key(...) invocation:
CryptoKeyError: Attempted to import invalid key, or passphrase is bad

I am sure that passphrase is correct. So, I guess I cannot use the private key generator by Putty in ezPyCrypto. Is that right? What is the explanation for the reason of this error?
","The .ppk extension makes me guess the private key comes from ""Save private key"" in puttygen. This file format is not supported by pretty much anything except PuTTY itself. I can't find what private key format ezPyCrypto expects, but you might have better luck with a private key file made from ""Conversions -> Export OpenSSH key"" in puttygen.
","799","<python><encryption><putty><pycrypto>","0","2","1","2011-03-01 15:32:54","5156590","0","","","","","2011-03-01 08:45:02",""
"21456078","Error in imports pyCrypto","My problem is the follow: I have installed pyCrypto in my computer. Then when I execute a script the intepreter say this: 
from: can't read /var/mail/Crypto.Cipher
./entrega2.py: line 2: syntax error near unexpected token ('
./entrega2.py: line 2: obj=DES.new('abcdefgh', DES.MODE_ECB)'

It can't read from Crypto.Cipher. However if I execute the intepreter of python, then I can do this:


from Crypto.Cipher import AES


This sentence in the intepret runs but in a file not. I don't know why.
Sorry because my english is very bad and my skills low.
Can somebody help me? Thanks
","Make sure you execute the script as python entrega2.py 
Or
Add the following at the top of the script:
#!/usr/bin/env python 

","795","<python><pycrypto>","0","0","1","2014-01-30 12:15:44","21456290","3","","582906","","2014-01-30 12:11:57","2014-01-30 12:05:08",""
"30495284","Fail to verify RSASSA-PSS signature across Python -> Go","I've boiled this down to the simplest test case I can. I need to take RSASSA-PSS signatures that were generated in Python and validate them in Go. The Python code to create the RSA keypair and sign with it is as follows:
>>> from tuf import pycrypto_keys as k
>>> pub, priv = k.generate_rsa_public_and_private()
>>> sig, method = k.create_rsa_signature(priv, ""The quick brown fox jumps over the lazy dog."")
>>> sig.encode(""hex"")
'4e05ee9e435653549ac4eddbc43e1a6868636e8ea6dbec2564435afcb0de47e0824cddbd88776ddb20728c53ecc90b5d543d5c37575fda8bd0317025fc07de62ee8084b1a75203b1a23d1ef4ac285da3d1fc63317d5b2cf1aafa3e522acedd366ccd5fe4a7f02a42922237426ca3dc154c57408638b9bfaf0d0213855d4e9ee621db204151bcb13d4dbb18f930ec601469c992c84b14e9e0b6f91ac9517bb3b749dd117e1cbac2e4acb0e549f44558a2005898a226d5b6c8b9291d7abae0d9e0a16858b89662a085f74a202deb867acab792bdbd2c36731217caea8b17bd210c29b890472f11e5afdd1dd7b69004db070e04201778f2c49f5758643881403d45a58d08f51b5c63910c6185892f0b590f191d760b669eff2464456f130239bba94acf54a0cb98f6939ff84ae26a37f9b890be259d9b5d636f6eb367b53e895227d7d79a3a88afd6d28c198ee80f6527437c5fbf63accb81709925c4e03d1c9eaee86f58e4bd1c669d6af042dbd412de0d13b98b1111e2fadbe34b45de52125e9a'

The pycrypto_keys library referenced there can be found here for reference of the specific implementation of the functions generate_rsa_public_and_private and create_rsa_signature.
My Go test consists of 2 simple files that only rely on core packages. First the verification function, in verify.go:
package example

import (
    ""crypto""
    ""crypto/rsa""
    ""crypto/sha256""
    ""crypto/x509""
    ""fmt""
)

func Verify(key []byte, sig []byte, msg []byte) error {
    digest := sha256.Sum256(msg)

    pub, err := x509.ParsePKIXPublicKey(key)
    if err != nil {
        return fmt.Errorf(""Failed to parse key"")
    }

    rsaPub, ok := pub.(*rsa.PublicKey)
    if !ok {
        return fmt.Errorf(""Invalid value returned from ParsePKIXPublicKey"")
    }

    opts := rsa.PSSOptions{SaltLength: 16, Hash: crypto.SHA256}
    if err = rsa.VerifyPSS(rsaPub, crypto.SHA256, digest[:], sig, &opts); err != nil {
        return fmt.Errorf(""Failed Verification"")
    }
    return nil
}

And second, a test case. The key pair and signature were generated using the Python commands at the top and copied in here to create a static set of parameters to use for compatibility testing.
package example

import (
    ""encoding/hex""
    ""encoding/pem""
    ""testing""
)

func TestPyCryptoRSACompatVerify(t *testing.T) {
    pubPem := ""-----BEGIN PUBLIC KEY-----\nMIIBojANBgkqhkiG9w0BAQEFAAOCAY8AMIIBigKCAYEAnKuXZeefa2LmgxaL5NsM\nzKOHNe+x/nL6ik+lDBCTV6OdcwAhHQS+PONGhrChIUVR6Vth3hUCrreLzPO73Oo5\nVSCuRJ53UronENl6lsa5mFKP8StYLvIDITNvkoT3j52BJIjyNUK9UKY9As2TNqDf\nBEPIRp28ev/NViwGOEkBu2UAbwCIdnDXm8JQErCZA0Ydm7PKGgjLbFsFGrVzqXHK\n6pdzJXlhr9yap3UpgQ/iO9JtoEYB2EXsnSrPc9JRjR30bNHHtnVql3fvinXrAEwq\n3xmN4p+R4VGzfdQN+8Kl/IPjqWB535twhFYEG/B7Ze8IwbygBjK3co/KnOPqMUrM\nBI8ztvPiogz+MvXb8WvarZ6TMTh8ifZI96r7zzqyzjR1hJulEy3IsMGvz8XS2J0X\n7sXoaqszEtXdq5ef5zKVxkiyIQZcbPgmpHLq4MgfdryuVVc/RPASoRIXG4lKaTJj\n1ANMFPxDQpHudCLxwCzjCb+sVa20HBRPTnzo8LSZkI6jAgMBAAE=\n-----END PUBLIC KEY-----""
    //privPem := ""-----BEGIN RSA PRIVATE KEY-----\nMIIG4wIBAAKCAYEAnKuXZeefa2LmgxaL5NsMzKOHNe+x/nL6ik+lDBCTV6OdcwAh\nHQS+PONGhrChIUVR6Vth3hUCrreLzPO73Oo5VSCuRJ53UronENl6lsa5mFKP8StY\nLvIDITNvkoT3j52BJIjyNUK9UKY9As2TNqDfBEPIRp28ev/NViwGOEkBu2UAbwCI\ndnDXm8JQErCZA0Ydm7PKGgjLbFsFGrVzqXHK6pdzJXlhr9yap3UpgQ/iO9JtoEYB\n2EXsnSrPc9JRjR30bNHHtnVql3fvinXrAEwq3xmN4p+R4VGzfdQN+8Kl/IPjqWB5\n35twhFYEG/B7Ze8IwbygBjK3co/KnOPqMUrMBI8ztvPiogz+MvXb8WvarZ6TMTh8\nifZI96r7zzqyzjR1hJulEy3IsMGvz8XS2J0X7sXoaqszEtXdq5ef5zKVxkiyIQZc\nbPgmpHLq4MgfdryuVVc/RPASoRIXG4lKaTJj1ANMFPxDQpHudCLxwCzjCb+sVa20\nHBRPTnzo8LSZkI6jAgMBAAECggGAdzyI7z/HLt2IfoAsXDLynNRgVYZluzgawiU3\ngeUjnnGhpSKWERXJC2IWDPBk0YOGgcnQxErNTdfXiFZ/xfRlSgqjVwob2lRe4w4B\npLr+CZXcgznv1VrPUvdolOSp3R2Mahfn7u0qVDUQ/g8jWVI6KW7FACmQhzQkPM8o\ntLGrpcmK+PA465uaHKtYccEB02ILqrK8v++tknv7eIZczrsSKlS1h/HHjSaidYxP\n2DAUiF7wnChrwwQEvuEUHhwVgQcoDMBoow0zwHdbFiFO2ZT54H2oiJWLhpR/x6RK\ngM1seqoPH2sYErPJACMcYsMtF4Tx7b5c4WSj3vDCGb+jeqnNS6nFC3aMnv75mUS2\nYDPU1heJFd8pNHVf0RDejLZZUiJSnXf3vpOxt9Xv2+4He0jeMfLV7zX0mO2Ni3MJ\nx6PiVy4xerHImOuuHzSla5crOq2ECiAxd1wEOFDRD2LRHzfhpk1ghiA5xA1qwc7Z\neRnkVfoy6PPZ4lZakZTm0p8YCQURAoHBAMUIC/7vnayLae7POmgy+np/ty7iMfyd\nV1eO6LTO21KAaGGlhaY26WD/5LcG2FUgc5jKKahprGrmiNLzLUeQPckJmuijSEVM\nl/4DlRvCo867l7fLaVqYzsQBBdeGIFNiT+FBOd8atff87ZBEfH/rXbDi7METD/VR\n4TdblnCsKYAXEJUdkw3IK7SUGERiQZIwKXrH/Map4ibDrljJ71iCgEureU0DBwcg\nwLftmjGMISoLscdRxeubX5uf/yxtHBJeRwKBwQDLjzHhb4gNGdBHUl4hZPAGCq1V\nLX/GpfoOVObW64Lud+tI6N9GNua5/vWduL7MWWOzDTMZysganhKwsJCY5SqAA9p0\nb6ohusf9i1nUnOa2F2j+weuYPXrTYm+ZrESBBdaEJPuj3R5YHVujrBA9Xe0kVOe3\nne151A+0xJOI3tX9CttIaQAsXR7cMDinkDITw6i7X4olRMPCSixHLW97cDsVDRGt\necO1d4dP3OGscN+vKCoL6tDKDotzWHYPwjH47sUCgcEAoVI8WCiipbKkMnaTsNsE\ngKXvO0DSgq3k5HjLCbdQldUzIbgfnH7bSKNcBYtiNxjR7OihgRW8qO5GWsnmafCs\n1dy6a/2835id3cnbHRaZflvUFhVDFn2E1bCsstFLyFn3Y0w/cO9yzC/X5sZcVXRF\nit3R0Selakv3JZckru4XMJwx5JWJYMBjIIAc+miknWg3niL+UT6pPun65xG3mXWI\nS+yC7c4rw+dKQ44UMLs2MDHRBoxqi8T0W/x9NkfDszpjAoHAclH7S4ZdvC3RIR0L\nLGoJuvroGbwx1JiGdOINuooNwGuswge2zTIsJi0gN/H3hcB2E6rIFiYid4BrMrwW\nmSeq1LZVS6siu0qw4p4OVy+/CmjfWKQD8j4k6u6PipiK6IMk1JYIlSCr2AS04JjT\njgNgGVVtxVt2cUM9huIXkXjEaRZdzK7boA60NCkIyGJdHWh3LLQdW4zg/A64C0lj\nIMoJBGuQkAKgfRuh7KI6Q6Qom7BM3OCFXdUJUEBQHc2MTyeZAoHAJdBQGBn1RFZ+\nn75AnbTMZJ6Twp2fVjzWUz/+rnXFlo87ynA18MR2BzaDST4Bvda29UBFGb32Mux9\nOHukqLgIE5jDuqWjy4B5eCoxZf/OvwlgXkX9+gprGR3axn/PZBFPbFB4ZmjbWLzn\nbocn7FJCXf+Cm0cMmv1jIIxej19MUU/duq9iq4RkHY2LG+KrSEQIUVmImCftXdN3\n/qNP5JetY0eH6C+KRc8JqDB0nvbqZNOgYXOfYXo/5Gk8XIHTFihm\n-----END RSA PRIVATE KEY-----""
    testStr := ""The quick brown fox jumps over the lazy dog.""
    sigHex := ""4e05ee9e435653549ac4eddbc43e1a6868636e8ea6dbec2564435afcb0de47e0824cddbd88776ddb20728c53ecc90b5d543d5c37575fda8bd0317025fc07de62ee8084b1a75203b1a23d1ef4ac285da3d1fc63317d5b2cf1aafa3e522acedd366ccd5fe4a7f02a42922237426ca3dc154c57408638b9bfaf0d0213855d4e9ee621db204151bcb13d4dbb18f930ec601469c992c84b14e9e0b6f91ac9517bb3b749dd117e1cbac2e4acb0e549f44558a2005898a226d5b6c8b9291d7abae0d9e0a16858b89662a085f74a202deb867acab792bdbd2c36731217caea8b17bd210c29b890472f11e5afdd1dd7b69004db070e04201778f2c49f5758643881403d45a58d08f51b5c63910c6185892f0b590f191d760b669eff2464456f130239bba94acf54a0cb98f6939ff84ae26a37f9b890be259d9b5d636f6eb367b53e895227d7d79a3a88afd6d28c198ee80f6527437c5fbf63accb81709925c4e03d1c9eaee86f58e4bd1c669d6af042dbd412de0d13b98b1111e2fadbe34b45de52125e9a""
    testKey, _ := pem.Decode([]byte(pubPem))

    sigBytes, err := hex.DecodeString(sigHex)
    if err != nil {
        t.Fatal(err)
    }
    err = Verify(testKey.Bytes, sigBytes, []byte(testStr))
    if err != nil {
        t.Fatal(err)
    }
}

The code fails in the final check of the Verify function, outputting the error Failed verification. I've had a look at the Go PSS verification code and if anything goes wrong, a generic verification error is returned so it's not that helpful. Even if it was more specific, either there is a compatibility problem here, a bug in one of the language implementations, or my code is wrong.
Much thanks for any help.
","So it appears I misinterpreted _SALT_SIZE in the Python code. With some help from the TUF developers (i.e. they told me) I discovered PyCrypto's RSA PSS code infers the salt size to be equal to the size of the hash digest of the hashing algorithm in use. In this case it was 32 bytes as the hashing algorithm was Sha256. With just the change of opts := rsa.PSSOptions{SaltLength: 32, Hash: crypto.SHA256} the code works.
","795","<python><go><rsa><digital-signature><pycrypto>","1","0","1","2015-05-29 17:38:33","30535821","4","","432193","","2015-05-28 20:45:44","2015-05-28 00:27:30",""
"34761153","java and Python implementation of Blowfish produce different results","I have a legacy implementation of blowfish in java that I am trying to port to Python.
Java:
import blowfishj.*;
import org.apache.commons.codec.binary.Hex;

private static byte[] EncryptBlowFish(byte[] sStr, String sSecret) {        
    byte[] key = sSecret.getBytes();
    byte[] cipher = new byte[sStr.length];
    BlowfishECB blowfish = new BlowfishECB(key, 0, key.length);
    blowfish.encrypt(sStr, 0, cipher, 0, sStr.length);

    return (new String(Hex.encodeHex(cipher)));

}

Python:
from Crypto.Cipher import Blowfish
import binascii

def encrypt(encr_str, key_str):
    cipher = Blowfish.new(key_str, Blowfish.MODE_ECB)
    return binascii.hexlify(cipher.encrypt(encr_str)).decode('utf-8')

If the string to be encrypted is ""12345678"" and the key is ""1234567890123456"", the java code outputs ""e00723bbb58234aa"" and the python code outputs ""61d2570dc6e09632"".
Since the java code is legacy, I can't touch it. This indicates there's a problem in pycrypto's implementation of blowfish. However, I can confirm the accepted answer here works. Not sure why though. I tried both pycrypto as well as this blowfish module with the same result.
Any ideas how to replicate the same blowfish output in Python as the legacy java code?
","All credit to @Kai Iskratsch for pointing in the right direction. 
Reference: 

What's the difference between Blowfish and Blowfish-compat?
https://gist.github.com/adamb70/1f140573b37939e78eb5%22

Here's the code that worked for me.
Python: 
from Crypto.Cipher import Blowfish
from binascii import hexlify

def encrypt(key, string):
    """"""
    Encrypts input string using BlowFish-Compat ECB algorithm.
    :param key: secret key
    :param string: string to encrypt
    :return: encrypted string
    """"""
    cipher = Blowfish.new(key, Blowfish.MODE_ECB)
    return hexlify(_reverse_bytes(cipher.encrypt(_reverse_bytes(string)))).decode('utf-8')

@staticmethod
def _reverse_bytes(data):
    """"""
    Takes data and reverses byte order to fit blowfish-compat format. For example, using _reverse_bytes('12345678')
    will return 43218765.
    :param data as bytes
    :return: reversed bytes
    """"""
    data_size = 0
    for n in data:
        data_size += 1

    reversed_bytes = bytearray()
    i = 0
    for x in range(0, data_size // 4):
        a = (data[i:i + 4])
        i += 4
        z = 0

        n0 = a[z]
        n1 = a[z + 1]
        n2 = a[z + 2]
        n3 = a[z + 3]
        reversed_bytes.append(n3)
        reversed_bytes.append(n2)
        reversed_bytes.append(n1)
        reversed_bytes.append(n0)

    return bytes(reversed_bytes)

","790","<java><python-3.x><pycrypto><blowfish>","2","0","1","2016-02-17 19:25:51","35465879","11","1","-1","","2017-05-23 12:15:35","2016-01-13 07:54:36",""
"16389790","Add salt to pycrypto KDF - useful?","I have noted some sources indicate that when using a KDF like PBKDF2 some advocate injecting the salt at the time of execution - like this:
dv = salt + PBKDF2(salt + password, salt)

Versus the ""plain"" usage of
dv = PBKDF2(password, salt)

When using the PyCrypto.Protocol.KDF PBKDF2 function (linked above), do the extra salt parameters add any benefit if no two passwords will have the same salt (but the salt will be stored with the password)?
Presumably the risk is having an oracle whereby identical passwords would be revealed as-such, encoded. Is this the case or is there another concern one ought to be mindful of?
If this is the only concern I would expect, in the absence of a fault in the algorithms that permits short-circuiting, a plainly used salt obliges one to recheck every password the entire number of iterations. Is this the case? 
","","785","<pycrypto><pbkdf2>","2","","0","2013-05-05 22:31:33","","9","1","","","","2013-05-05 22:31:33","2013-05-06 19:07:59"
"8261535","Decrypt a a middle chunk of data using pycrypto AES or other algorithm","I was looking for a way to use an encryption algorithm from pycrypto package that allows me to encrypt an original LARGE piece of data, and then decrypt only a MIDDLE chunk of this data. In other words, start decrypting the data at a certain offset, instead of starting to decrypt it at offset 0.
I've tried AES, as you can see below. But, it only allows me to properly decrypt the data if I go from beg of the enrypted data to the part I really need to decrypt, instead of just decrypting a middle chunk of data (of course with the proper key), and skip decrypting parts before this middle chunk. This is important in saving time and processing power. Let's say you have an original data that is 4GB. At some point in time, you only need the data from offset 3GB-3.5GB. Decrypting a whole 2GB of data to get to the 1GB chunk that you need is a waste of time and resources...
Is this the nature of all encryption/decryption algorithms? Perhaps you can recommend something that does what I want? That works with a key and is pretty secure..
    from Crypto.Cipher import AES

key = '0123456789abcdef' #16 chars
mode = AES.MODE_CBC

e = AES.new(key, mode)

orig = 'hellohowareyousuhellohowareyousu' #32 chars
print len(orig)

a = e.encrypt(orig)
print len(a)

d = AES.new(key, mode)

#works
print d.decrypt(a[:16]) #aes requires encrypt/decrypt 16 chars at a time
print d.decrypt(a[16:])

#doesn't work
print d.decrypt(a[16:])

","You are using CBC (ciphertext block chaining) mode, in which the message is split up into blocks and the output of one block used to encrypt the next. This is fundamentally a sequential operation; to decrypt, you must also work through the ciphertext sequentially.
If you use CTR (counter) mode, you can have random access.
","784","<python><pycrypto>","3","2","1","2017-09-10 04:26:38","","0","","1033581","","2017-09-10 04:26:38","2011-11-24 19:05:56",""
"25147785","Compile Python debug and pip install debug libraries","I am trying to debug some mysterious crashes in my PySide application. I am currently on Python 2.7 in Windows and want to build the debug versions of Python and PySide to help debug. I followed the instructions here to build the debug version of Python using MSVC 2013. The build works for the most part, with some of the libraries I don't care about not able to compile.
I copied the relevant files over to c:\python27_d using the same instructions in the link above and set up a virtual environment for it. However, when I try to easy_install or pip install libraries such as paramiko or pycrypto, I would get link errors:
winrand.obj : error LNK2019: unresolved external symbol __imp__Py_InitModule4 referenced in function _initwinr
andom

build\lib.win32-2.7-pydebug\Crypto\Random\OSRNG\winrandom.pyd : fatal error LNK1120: 1 unresolved externals

In general, how do I install libraries or modules for the debug version of Python? I apologize for asking such a broad question, but I am not familiar with the internals of how Python to know where to find the unresolved links.
","cd into C:\Python27\Scripts then run:
pip install PySide --use-wheel -f https://download.qt-project.org/official_releases/pyside/ 

","767","<python><visual-studio-2013><pip><pyside><pycrypto>","7","0","1","2017-04-17 19:23:04","","1","","","","","2014-08-05 20:32:00",""
"47559877","""could not import Crypto"" running ""conda install numpy""","In the Linux subsystem for Windows10 I have encountered a new error when trying to conda install, update, remove any new package.
For example:
c/.../...$ conda install numpy
Error: could not import Crypto (required for signature verification).
    Run the following command:

    $ conda install -n root pycrypto

If I enter the suggested command it returns the same error.
If anyone can solve this issue without having to clean install Python this would be helpful.
Here is my version of Python and Anaconda:
Python 2.7.12 |Anaconda custom (64-bit)| (default, Jul  2 2016, 17:42:40)
Type ""copyright"", ""credits"" or ""license"" for more information.

IPython 5.1.0 -- An enhanced Interactive Python.
?         -> Introduction and overview of IPython's features.
%quickref -> Quick reference.
help      -> Python's own help system.
object?   -> Details about 'object', use 'object??' for extra details.

","Try  this first :
sudo apt-get update
sudo apt-get install libssl-dev
sudo apt-get install python-pip python-dev build-essential 
sudo pip install crypto
sudo apt-get update

And then run the conda install again.
","762","<python><anaconda><pycrypto>","0","0","2","2017-11-29 21:01:39","","1","1","14122","","2017-11-29 19:22:30","2017-11-29 18:57:58",""
"47559877","""could not import Crypto"" running ""conda install numpy""","In the Linux subsystem for Windows10 I have encountered a new error when trying to conda install, update, remove any new package.
For example:
c/.../...$ conda install numpy
Error: could not import Crypto (required for signature verification).
    Run the following command:

    $ conda install -n root pycrypto

If I enter the suggested command it returns the same error.
If anyone can solve this issue without having to clean install Python this would be helpful.
Here is my version of Python and Anaconda:
Python 2.7.12 |Anaconda custom (64-bit)| (default, Jul  2 2016, 17:42:40)
Type ""copyright"", ""credits"" or ""license"" for more information.

IPython 5.1.0 -- An enhanced Interactive Python.
?         -> Introduction and overview of IPython's features.
%quickref -> Quick reference.
help      -> Python's own help system.
object?   -> Details about 'object', use 'object??' for extra details.

","So after playing around with all of your suggestions I finally gave in and uninstalled anaconda using the command:
rm -rf anaconda2

I then downloaded the appropriate installation file from the anaconda website then entered the following command into the terminal:
bash Anaconda-latest-Linux-x86_64.sh

All straightforward stuff...
I will now take 30 minutes (or so) to re-install all of the packages. Thanks for all of your help guys as I very much appreciate the prompt responses. 
","762","<python><anaconda><pycrypto>","0","0","2","2017-11-29 21:01:39","","1","1","14122","","2017-11-29 19:22:30","2017-11-29 18:57:58",""
"42444751","ValueError: Message too large","Client.py   
import socket 
from Crypto.Cipher import AES
import base64
import os
import Crypto              
import os, shutil
import sys
from stat import ST_SIZE
sys.path.insert(0, '/home/ubuntu/finalpro/server')
import keygen


    # Create a socket object
    s = socket.socket()         
    host = socket.gethostname() 
    port = 12345                
    s.connect((host, port))
    print s.recv(1024)

    #Taking input from User
    print(""----------------------------------------------------------------------"")
    print(""*******************IMPROVED AUTHENTICATION PROTOCOL*******************"")
    print(""----------------------------------------------------------------------"")
    username=raw_input(""ENTER CLIENT ID:       "")
    password=raw_input(""ENTER CLIENT PASSWORD: "")
    print(""----------------------------------------------------------------------"")
    print(""Authentication in progress..."")
    print(""Encrypting Data..."")

    #Encrypting Data
    BLOCK_SIZE = 16

    # the character used for padding--with a block cipher such as AES, the value
    # you encrypt must be a multiple of BLOCK_SIZE in length.  This character is
    # used to ensure that your value is always a multiple of BLOCK_SIZE
    PADDING = '{'

    # one-liner to sufficiently pad the text to be encrypted
    pad = lambda s: s + (BLOCK_SIZE - len(s) % BLOCK_SIZE) * PADDING

    # one-liners to encrypt/encode and decrypt/decode a string
    # encrypt with AES, encode with base64
    EncodeAES = lambda c, s: base64.b64encode(c.encrypt(pad(s)))
    DecodeAES = lambda c, e: c.decrypt(base64.b64decode(e)).rstrip(PADDING)

    # generate a random secret key
    secret = os.urandom(BLOCK_SIZE)


    # create a cipher object using the random secret
    cipher = AES.new(secret)

    # encode a string
    encrypted_username = EncodeAES(cipher, username)
    print 'Encrypted string:', encrypted_username
    print(""Encrypting CLIENT ID...                                         [Done]"")

    encrypted_password = EncodeAES(cipher, password)
    print 'Encrypted string:', encrypted_password
    print(""Encrypting CLIENT PASSWORD...                                   [Done]"")

    encrypted_username = keygen.publickey.encrypt(username, 32)
    #print(encrypted_username)
    print(""Encrypting CLIENT ID...                                         [Done]"")
    encrypted_password = keygen.publickey.encrypt(password, 32)
    #print(encrypted_password)
    print(""Encrypting CLIENT PASSWORD...                                   [Done]"")

    #Copy encrypted data into file
    f=open(""encrypt.txt"",'w')
    f.write(chr(len(encrypted_username)))
    f.write(str(encrypted_username))
    f.write(""\n"")
    f.write(chr(len(encrypted_password)))
    f.write(str(encrypted_password))
    f.close()

    print(""Sending Data to server for Validation..."")
    f=open(""encrypt.txt"",'rb')
    fsize=os.stat(f.name)[ST_SIZE]
    s.sendall(str(fsize).zfill(8))
    sfile = s.makefile(""wb"")
    shutil.copyfileobj(f, sfile)
    sfile.close()
    f.close()
    print(""Sending Data to server for Validation...                        [DONE]"")

    print(""Encrypting Secret Key...                                        [Done]"")
    encrypted_key=keygen.publickey.encrypt(secret, 32)
    f1=open(""encrypted_key.txt"",'w')
    f1.write(chr(len(encrypted_key)))
    f1.write(str(encrypted_key))
    f1.close()

    print(""Sending Secret Key to server for Validation..."")
    f1=open(""encrypted_key.txt"",'rb')
    f1size=os.stat(f1.name)[ST_SIZE]
    s.sendall(str(f1size).zfill(8))
    s1file = s.makefile(""wb"")
    shutil.copyfileobj(f1, s1file)
    s1file.close()
    f1.close()
    print(""Sending Secret Key to server for Validation...                  [DONE]"")


    #Sending Data to Server

    s.close()  

Server.py
import socket 
from Crypto.Cipher import AES
import base64
import os
import Crypto             
import shutil
import keygen
import sys
readsize = 127
writesize = 128

s = socket.socket()         
host = socket.gethostname() 
port = 12345                
s.bind((host, port))        

print(""-----------------------------------------------------------------------------"")
print(""*******************IMPROVED AUTHENTICATION PROTOCOL SERVER*******************"")
print(""-----------------------------------------------------------------------------"")

# Now wait for client connection.
s.listen(5)                
conn, addr = s.accept()                
print(""Got Connection at address:"",addr)
conn.sendall('READY')

# the block size for the cipher object; must be 16 per FIPS-197
BLOCK_SIZE = 16

# the character used for padding--with a block cipher such as AES, the value
# you encrypt must be a multiple of BLOCK_SIZE in length.  This character is
# used to ensure that your value is always a multiple of BLOCK_SIZE
PADDING = '{'

# one-liner to sufficiently pad the text to be encrypted
pad = lambda s: s + (BLOCK_SIZE - len(s) % BLOCK_SIZE) * PADDING

# one-liners to encrypt/encode and decrypt/decode a string
# encrypt with AES, encode with base64
EncodeAES = lambda c, s: base64.b64encode(c.encrypt(pad(s)))
DecodeAES = lambda c, e: c.decrypt(base64.b64decode(e)).rstrip(PADDING)

#Reading all data and creating a file on server

f = open(""encrypt_key.txt"",'wb')
fsize=int(conn.recv(8))               
print(""Recieved File size:"",fsize)
sfile = conn.makefile(""rb"")
shutil.copyfileobj(sfile, f)
sfile.close()
f.write(conn.recv(fsize))           
f.close()

#Again reading file,storing it in variables and decrypting it
with open(""encrypt_key.txt"",'r') as myfile:
    data=myfile.readlines()
encrypted_key=str(data)
dc=keygen.privatekey.decrypt(encrypted_key)
cipher1 = AES.new(dc)
myfile.close()

#Reading all data and creating a file on server
f1 = open(""encrypt.txt"",'wb')
f1size=int(conn.recv(8))               
print(""Recieved File size:"",f1size)
s1file = conn.makefile(""rb"")
shutil.copyfileobj(s1file, f1)
s1file.close()
f1.write(conn.recv(f1size))           
f1.close()

#Again reading file and storing it in variables
with open(""encrypt.txt"",'r') as myfile1:
    data=myfile1.readlines()
encrypted_username=str(data[0])
encrypted_password=str(data[1])


#Decrypting username and password
decoded = DecodeAES(cipher1, encoded)
print 'Decrypted string:', decoded

decoded1 = DecodeAES(cipher1, encoded1)
print 'Decrypted string:', decoded1

conn.close()
s.close()


Traceback (most recent call last):
  File ""server.py"", line 58, in 
    dc=keygen.privatekey.decrypt(encrypted_key)
  File ""/usr/lib/python2.7/dist-packages/Crypto/PublicKey/RSA.py"", line 174, in decrypt
    return pubkey.pubkey.decrypt(self, ciphertext)
  File ""/usr/lib/python2.7/dist-packages/Crypto/PublicKey/pubkey.py"", line 93, in decrypt
    plaintext=self._decrypt(ciphertext)
  File ""/usr/lib/python2.7/dist-packages/Crypto/PublicKey/RSA.py"", line 237, in _decrypt
    cp = self.key._blind(ciphertext, r)
ValueError: Message too large

keygen.py
#Key Generation Program
import Crypto
from Crypto.PublicKey import RSA
from Crypto import Random




random_generator = Random.new().read
key = RSA.generate(1024, random_generator) #generate pub and priv key

publickey = key.publickey() # pub key 
privatekey= key # pub key 

","","750","<python><encryption><aes><rsa><pycrypto>","0","","0","2017-02-24 20:11:44","","5","","6466471","","2017-02-24 20:11:44","2017-02-24 17:27:11",""
"34453615","How to compile Python from PHP?","I am working on an Encryption Project and have used PyCrypto module in Python for all the Cryptographic algorithm.
When I connect PHP with MongoDB, at the user sign up I need to link each user with a specific public and private key, the code for RSA Key generation is in Python and I am using PHP to store all the user information in MongoDB.
How to call Python scripts and use the output in PHP without executing the script in shell first as it is a time taking process?
Is there any cross-compiler present for both PHP and Python so that I can execute on the same compiler ?
","You could use exec (which eventually runs the script in the shell)
As described in the documentation the first argument to the method will be the command you want to run and the second one will be a reference which will hold the output
","748","<php><python><pycrypto>","2","2","2","2015-12-24 16:12:27","","1","","5612751","","2015-12-24 16:00:52","2015-12-24 13:33:34","2015-12-24 16:24:41"
"34453615","How to compile Python from PHP?","I am working on an Encryption Project and have used PyCrypto module in Python for all the Cryptographic algorithm.
When I connect PHP with MongoDB, at the user sign up I need to link each user with a specific public and private key, the code for RSA Key generation is in Python and I am using PHP to store all the user information in MongoDB.
How to call Python scripts and use the output in PHP without executing the script in shell first as it is a time taking process?
Is there any cross-compiler present for both PHP and Python so that I can execute on the same compiler ?
","There is no cross-compiler AFAIK. And for a non-toy project I would be very cautious of using something that promise to work both with PHP and Python. :)
To avoid creating a process everytime you want to run your Python script, you can implement server-client architecture using sockets to communicate between Python and PHP. Server being your crypto library in your case and client is your PHP script that queries the server.

Python sockets doc: https://docs.python.org/2/howto/sockets.html
PHP sockets doc: http://php.net/manual/en/book.sockets.php

It essentially means that your Python script is a long-running script (to avoid the cost of creating it again and again).
","748","<php><python><pycrypto>","2","1","2","2015-12-24 16:12:27","","1","","5612751","","2015-12-24 16:00:52","2015-12-24 13:33:34","2015-12-24 16:24:41"
"32611781","Encrypt string with AES in Python and IOS","I am trying to encrypt a string with AES in both IOS with CCCrypt and in Python with Crypto. However I seem to get different results. Anyone has any ideas why?
I am trying to use 256 bit AES with null IV and CBC.
Python code:
key = 'verysecretkey1111111111111111111'

IV = 16 * '\x00'    
mode = AES.MODE_CBC
cipher = AES.new(key, AES.MODE_CBC, IV)

y='aaaabbbbccccdddd'
length = 16 - (len(y) % 16)
y += chr(length)*length

encoded = cipher.encrypt(y)
print base64.b64encode(encoded)

The result is gyL9jv7bTgLz8xZQx/GLYNVnVrrwo6pLsc5Ew4Vl8Uk=
Objective C code
char keyPtr[kCCKeySizeAES256 ];
bzero( keyPtr, sizeof( keyPtr ) );

// fetch key data
[key getCString:keyPtr maxLength:sizeof( keyPtr  encoding:NSUTF8StringEncoding];

NSUInteger dataLength = [self length];


size_t bufferSize = dataLength + kCCBlockSizeAES128;
void *buffer = malloc( bufferSize );

size_t numBytesEncrypted = 0;
CCCryptorStatus cryptStatus = CCCrypt( kCCEncrypt, kCCAlgorithmAES128,   kCCOptionPKCS7Padding,
                                      keyPtr, kCCKeySizeAES256,
                                      NULL /* initialization vector (optional) */,
                                      [self bytes], dataLength, /* input */
                                      buffer, bufferSize, /* output */
                                      &numBytesEncrypted );

The result is DskVKDMGxFWLGSYszL/mEersVv9zq9PK9bPIV5UgLbs=
","There is a problem with calling the Objective-C method and given incomplete code understanding that error is difficult.
This statement in the Question is definitely incorrect:
[key getCString:keyPtr maxLength:sizeof( keyPtr  encoding:NSUTF8StringEncoding];

There are two problems:
1. A missing closing parenthesis to sizeof.
2. Space must be reserved for the trailing null a ""C"" string requires:  
char keyPtr[kCCKeySizeAES256+1];  
bzero( keyPtr, sizeof(keyPtr));
[key getCString:keyPtr maxLength:sizeof(keyPtr) encoding:NSASCIIStringEncoding];

Note that the method getCString: returns status but is not checked, if it has been there error would have been apparent. Error status is a developer's best friend.
But as seen in the code below there is a simpler way to handle the key.
Here a an example with a result matching the Python code""
NSString *key  = @""verysecretkey1111111111111111111"";
NSString *data = @""aaaabbbbccccdddd"";

NSData *dataIn  = [data dataUsingEncoding:NSUTF8StringEncoding];
NSData *keyData = [key  dataUsingEncoding:NSUTF8StringEncoding];

CCCryptorStatus ccStatus   = kCCSuccess;
size_t          cryptBytes = 0;
NSMutableData  *dataOut    = [NSMutableData dataWithLength:dataIn.length + kCCBlockSizeAES128];

ccStatus = CCCrypt( kCCEncrypt,
                   kCCAlgorithmAES128,
                   kCCOptionPKCS7Padding,
                   keyData.bytes, kCCKeySizeAES256,
                   NULL,
                   dataIn.bytes, dataIn.length,
                   dataOut.mutableBytes, dataOut.length,
                   &cryptBytes);

if (ccStatus != kCCSuccess) {
    NSLog(@""CCCrypt status: %d"", ccStatus);
}
dataOut.length = cryptBytes;

NSString *objcEncrypted = [dataOut base64EncodedStringWithOptions:0];
NSLog(@""objcEncrypted: %@"", objcEncrypted);

Output:  

objcEncrypted: gyL9jv7bTgLz8xZQx/GLYNVnVrrwo6pLsc5Ew4Vl8Uk=

","748","<python><objective-c><encryption><aes><pycrypto>","0","1","1","2015-09-16 19:49:21","","3","","1816580","","2015-09-16 17:36:40","2015-09-16 14:41:16",""
"36260869","Creating openssh public keys from private keys with pycrypto","How do I create DSA openssh-formatted public key with a given private key?
The openssh public key format looks like this:
ssh-dss AAAAB3NzaC1kc3MAAACBAKFY7ysDwhMf5j3IOmPg1ztzAodBzQHua5m7/IM8nEYdCDeLzI+Jx24pRDUKseRVC5DUIHU7sRtRpCMDmGBcJwxHF9G4ofrP5hlUaDTHeKHrOKgGdRzPw5xtExImwYfCn97HMc6OpQrsAysL7KCxQHgD41t7IEaSQRjK8zK2IBqJAAAAFQD6Wjepos/lp0Vw8mrRLMIEhocZpQAAAIBXJ+E3J+dMOIHlYpEYm6BmI92/YhAT3+4rfDORQkUtcgmyQiAJ4CWvOBrcwK7zpLZ/pNNujv3cc4whigAqnZm9f+x8LDT7iIZ3FGdvHFDxYiTZVJTv2g1kaS/AABG5KfsVVkV2TP+XO12EjoEjoNvgjA1Z0fSeeKeP8YQNgMNjFgAAAIAobgPabsJCnFuazy+WOoo9SgfqeafXbrsxWPbKV4mjbUKXbOASV4F35Vuk1DAFRRP2/xYxv2QsiW4F2wsGSlsfnvb8bbmhzFHU81BrPRd1R60JUCDnvwVYJlJUqIvgfYbi3AXuxaqK3cLKWIFZGrYGyd2x8DRNpE7SLDMfWY7Jgw== root@Server

Using pycrypto, same thing with RSA works just fine:
key.publickey().exportKey('OpenSSH')

Unfortunately, There is no exportKey() func for a DSA object.
I also have a similar issue with an ecdsa key. Bottom line, I need a python equivalent (for both DSA and ecdsa) to:
ssh-keygen -y -f /path/to/private_key > /path/to/public_key

","The expression:
 key.publickey().exportKey('OpenSSH')

to get the DSA public key in the OpenSSH format is supported by PyCryptodome, a PyCrypto fork.
","745","<python><openssh><pycrypto><ecdsa><dsa>","1","0","1","2016-03-30 10:37:53","36306354","0","","6123837","","2016-03-28 14:00:05","2016-03-28 10:56:00",""
"35403878","AES encryption of file using Pycrypto","I am trying to find the correct way to encrypt files using Pycrypto. Every method I have found online doesn't seem to decrypt in Android or online at sites like http://aes.online-domain-tools.com/
Here is the Python code I have tried:
from Crypto import Random
from Crypto.Cipher import AES

def pad(s):
    return s + b""\0"" * (AES.block_size - len(s) % AES.block_size)

def encrypt(message, key, iv):
    message = pad(message)
    #iv = Random.new().read(AES.block_size)
    print iv
    cipher = AES.new(key, AES.MODE_CBC, iv)
    return iv + cipher.encrypt(message)

def decrypt(ciphertext, key, iv):
    iv = ciphertext[:AES.block_size]
    cipher = AES.new(key, AES.MODE_CBC, iv)
    plaintext = cipher.decrypt(ciphertext[AES.block_size:])
    return plaintext.rstrip(b""\0"")

def encrypt_file(file_name, key, iv):
    with open(file_name, 'rb') as fo:
        plaintext = fo.read()
    enc = encrypt(plaintext, key, iv)
    with open(file_name + "".enc"", 'wb') as fo:
        fo.write(enc)

def decrypt_file(file_name, key, iv):
    with open(file_name, 'rb') as fo:
        ciphertext = fo.read()
    dec = decrypt(ciphertext, key, iv)
    with open(file_name[:-1], 'wb') as fo:
        fo.write(dec)


#key = b'\xbf\xc0\x85)\x10nc\x94\x02)j\xdf\xcb\xc4\x94\x9d(\x9e[EX\xc8\xd5\xbfI{\xa2$\x05(\xd5\x18'
from random import choice
from string import ascii_uppercase

key = (''.join(choice(ascii_uppercase) for i in range(16)))
print key
iv = (''.join(choice(ascii_uppercase) for i in range(16)))
#iv = hex(iv)
print iv
encrypt_file('Grass.jpg', key, iv)
decrypt_file('Grass.jpg.enc', key, iv)

Here is the Android code I am using to decrypt (I have tried Nopadding and PKCS5Padding)
package com.jgarin.encryptingtestapp;

import android.util.Base64;

import java.io.UnsupportedEncodingException;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

   /*****************************************************************
    * CrossPlatform CryptLib
    * 
    * <p>
    * This cross platform CryptLib uses AES 256 for encryption. This library can
    * be used for encryptoion and de-cryption of string on iOS, Android and Windows
    * platform.<br/>
    * Features: <br/>
    * 1. 256 bit AES encryption
    * 2. Random IV generation. 
    * 3. Provision for SHA256 hashing of key. 
    * </p>
    * 
    * @since 1.0
    * @author navneet
    *****************************************************************/

public class CryptLib {

   /**
    * Encryption mode enumeration
    */
   private enum EncryptMode {
      ENCRYPT, DECRYPT;
   }

   // cipher to be used for encryption and decryption
   Cipher cipher;

   // encryption key and initialization vector
   byte[] key, iv;

   public CryptLib() throws NoSuchAlgorithmException, NoSuchPaddingException {
      // initialize the cipher with transformation AES/CBC/PKCS5Padding
      cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
//    cipher = Cipher.getInstance(""AES/CBC/NoPadding"");
      key = new byte[16]; //256 bit key space
      iv = new byte[16]; //128 bit IV
   }

   /**
    * Note: This function is no longer used. 
    * This function generates md5 hash of the input string
    * @param inputString
    * @return md5 hash of the input string
    */
   public static final String md5(final String inputString) {
       final String MD5 = ""MD5"";
       try {
           // Create MD5 Hash
           MessageDigest digest = java.security.MessageDigest
                   .getInstance(MD5);
           digest.update(inputString.getBytes());
           byte messageDigest[] = digest.digest();

           // Create Hex String
           StringBuilder hexString = new StringBuilder();
           for (byte aMessageDigest : messageDigest) {
               String h = Integer.toHexString(0xFF & aMessageDigest);
               while (h.length() < 2)
                   h = ""0"" + h;
               hexString.append(h);
           }
           return hexString.toString();

       } catch (NoSuchAlgorithmException e) {
           e.printStackTrace();
       }
       return """";
   }

   /**
    * 
    * @param inputData
    *            Text to be encrypted or decrypted
    * @param _encryptionKey
    *            Encryption key to used for encryption / decryption
    * @param _mode
    *            specify the mode encryption / decryption
    * @param _initVector
    *           Initialization vector
    * @return encrypted or decrypted string based on the mode
    * @throws UnsupportedEncodingException
    * @throws InvalidKeyException
    * @throws InvalidAlgorithmParameterException
    * @throws IllegalBlockSizeException
    * @throws BadPaddingException
    */
      private byte[] encryptDecrypt(byte[] inputData, String _encryptionKey,
         EncryptMode _mode, String _initVector) throws UnsupportedEncodingException,
         InvalidKeyException, InvalidAlgorithmParameterException,
         IllegalBlockSizeException, BadPaddingException {
      byte[] _out = new byte[0];// output string

      int len = _encryptionKey.getBytes(""UTF-8"").length; // length of the key    provided

      if (_encryptionKey.getBytes(""UTF-8"").length > key.length)
         len = key.length;

      int ivlen = _initVector.getBytes(""UTF-8"").length;

      if(_initVector.getBytes(""UTF-8"").length > iv.length)
         ivlen = iv.length;

      System.arraycopy(_encryptionKey.getBytes(""UTF-8""), 0, key, 0, len);
      System.arraycopy(_initVector.getBytes(""UTF-8""), 0, iv, 0, ivlen);
      //KeyGenerator _keyGen = KeyGenerator.getInstance(""AES"");
      //_keyGen.init(128);

      SecretKeySpec keySpec = new SecretKeySpec(key, ""AES""); // Create a new SecretKeySpec
                           // for the
                           // specified key
                           // data and
                           // algorithm
                           // name.

      IvParameterSpec ivSpec = new IvParameterSpec(iv); // Create a new
                        // IvParameterSpec
                        // instance with the
                        // bytes from the
                        // specified buffer
                        // iv used as
                        // initialization
                        // vector.

      // encryption
      if (_mode.equals(EncryptMode.ENCRYPT)) {
         // Potentially insecure random numbers on Android 4.3 and older.
         // Read
         // https://android-developers.blogspot.com/2013/08/some-securerandom-thoughts.html
         // for more info.
         cipher.init(Cipher.ENCRYPT_MODE, keySpec, ivSpec);// Initialize this cipher instance
         _out = cipher.doFinal(inputData); // Finish
                              // multi-part
                              // transformation
                              // (encryption)
      }

      // decryption
      if (_mode.equals(EncryptMode.DECRYPT)) {
         cipher.init(Cipher.DECRYPT_MODE, keySpec, ivSpec);// Initialize this cipher instance

         _out = cipher.doFinal(inputData); // Finish
                           // multi-part
                           // transformation
                           // (decryption)
      }
      System.out.println(_out);
      return _out; // return encrypted/decrypted string
   }

   /***
    * This function computes the SHA256 hash of input string
    * @param text input text whose SHA256 hash has to be computed
    * @param length length of the text to be returned
    * @return returns SHA256 hash of input text 
    * @throws NoSuchAlgorithmException
    * @throws UnsupportedEncodingException
    */
   public static String SHA256 (String text, int length) throws NoSuchAlgorithmException, UnsupportedEncodingException {

       String resultStr;
      MessageDigest md = MessageDigest.getInstance(""SHA-256"");

       md.update(text.getBytes(""UTF-8""));
       byte[] digest = md.digest();

       StringBuffer result = new StringBuffer();
       for (byte b : digest) {
           result.append(String.format(""%02x"", b)); //convert to hex
       }
       //return result.toString();

       if(length > result.toString().length())
       {
          resultStr = result.toString();
       }
       else 
       {
          resultStr = result.toString().substring(0, length);
       }

       return resultStr;

   }

   /***
    * This function encrypts the plain text to cipher text using the key
    * provided. You'll have to use the same key for decryption
    * 
    * @param _plainText
    *            Plain text to be encrypted
    * @param _key
    *            Encryption Key. You'll have to use the same key for decryption
    * @param _iv
    *         initialization Vector
    * @return returns encrypted (cipher) text
    * @throws InvalidKeyException
    * @throws UnsupportedEncodingException
    * @throws InvalidAlgorithmParameterException
    * @throws IllegalBlockSizeException
    * @throws BadPaddingException
    */

   public String encrypt(String _plainText, String _key, String _iv)
         throws InvalidKeyException, UnsupportedEncodingException,
         InvalidAlgorithmParameterException, IllegalBlockSizeException,
         BadPaddingException {

        byte[] bytes = encryptDecrypt(_plainText.getBytes(""UTF-8""), _key, EncryptMode.ENCRYPT, _iv);
        String result = Base64.encodeToString(bytes, Base64.DEFAULT); // ciphertext
        return result;
   }

   public byte[] encrypt(byte[] data, String _key, String _iv)
         throws InvalidKeyException, UnsupportedEncodingException,
         InvalidAlgorithmParameterException, IllegalBlockSizeException,
         BadPaddingException {
      return encryptDecrypt(data, _key, EncryptMode.ENCRYPT, _iv);
   }

   /***
    * This funtion decrypts the encrypted text to plain text using the key
    * provided. You'll have to use the same key which you used during
    * encryprtion
    * 
    * @param data
    *            Encrypted/Cipher text to be decrypted
    * @param _key
    *            Encryption key which you used during encryption
    * @param _iv
    *         initialization Vector
    * @return encrypted value
    * @throws InvalidKeyException
    * @throws UnsupportedEncodingException
    * @throws InvalidAlgorithmParameterException
    * @throws IllegalBlockSizeException
    * @throws BadPaddingException
    */
   public byte[] decrypt(byte[] data, String _key, String _iv)
         throws InvalidKeyException, UnsupportedEncodingException,
         InvalidAlgorithmParameterException, IllegalBlockSizeException,
         BadPaddingException {
      return encryptDecrypt(data, _key, EncryptMode.DECRYPT, _iv);
   }

   public String decrypt(String inputString, String _key, String _iv)
         throws InvalidKeyException, UnsupportedEncodingException,
         InvalidAlgorithmParameterException, IllegalBlockSizeException,
         BadPaddingException {
        byte[] decryptedVal = encryptDecrypt(Base64.decode(inputString, Base64.DEFAULT), _key, EncryptMode.DECRYPT, _iv);
        String result = new String(decryptedVal, ""UTF-8"");
        return result;
   }

   /**
   * this function generates random string for given length
   * @param length
   *           Desired length
   * * @return 
   */
   public static String generateRandomIV(int length)
   {
      SecureRandom ranGen = new SecureRandom();
      byte[] aesKey = new byte[16];
      ranGen.nextBytes(aesKey);
      StringBuffer result = new StringBuffer();
       for (byte b : aesKey) {
           result.append(String.format(""%02x"", b)); //convert to hex
       }
       if(length> result.toString().length())
       {
          return result.toString();
       }
       else
       {
          return result.toString().substring(0, length);
       }
   }
}

Any help with what I am doing wrong will be appreciated.
","","741","<android><python><encryption><pycrypto>","0","","0","2016-02-15 10:01:45","","3","1","1816580","","2016-02-15 10:01:45","2016-02-15 07:40:45",""
"32092008","How to check Python's AES decrypt error?","I'm using python to encrypt and decrypt files. When file encrypted, then try to decrypt like this:
from Crypto.Cipher import AES
from Crypto import Random
def decrypt(in_file, out_file, pwd, key_len=32):
    bs = AES.block_size
    salt = in_file.read(bs)[len('Salted__'):]
    key, iv = derive_keyiv(pwd, salt, key_len, bs)
    cipher = AES.new(key, AES.MODE_CBC, iv)
    next_chunk = ''
    finished = False
    try:
        while not finished:
            chunk, next_chunk = next_chunk, cipher.decrypt(in_file.read(1024*bs))
            if len(next_chunk) == 0:
                padding_len = ord(chunk[-1])
                chunk = chunk[:-padding_len]
                finished = True
            out_file.write(chunk)
        return True, None
    except Exception as e:
        return False, e

But if the password input error, the decrypt still decrypt in_file and write to out_file and no exception throw.
How to check the password error during decrypt?
","AES by itself cannot check if the key is ""correct"". It is simply a pure function that transforms some bytes to some other bytes.
To achieve what you want, you need to implement it yourself. One way to do is to add a fixed header (like 16 bytes of zero) to the plaintext before encryption. Upon decryption, check and discard the said header if it matches or raise an error if the header mismatches.
A side note: you are doing encryption without any authentication, which is probably insecure.
Edit
First of all, you should add authentication. Encryption without authentication easily leads to many security flaws, many not obvious to the untrained. Especially since you are using AES in CBC mode, you may open yourself to padding oracle attacks without authentication.
When you do authenticated encryption the right way (encrypt-then-mac), you will get an authentication error if the user input the wrong password. If you want to further distinguish a wrong password from tampered data, you have to devise your own method, like prepending a ciphertext of magic number.
","733","<python><aes><pycrypto>","1","2","1","2015-08-19 12:51:06","32092236","0","","1816580","","2015-08-19 09:48:12","2015-08-19 09:47:18",""
"6876150","ImportError exception encountered while trying to use Fabric","I am using Ubuntu and virtualenv, and I am having this recurring problem, while attempting to use Fabric to create a deployment script. Fabric depends on paramiko, which depends on PyCrypto.
Each time I try to use Fabric, or PyCrypto directly, I get this error:
ImportError: cannot import name Random

I have tried reinstalling with pip install -U PyCrypto. I have also tried installing the python-crypto and python-crypto-dbg packages with Aptitude, to no avail. I still get the same error. Anyone have any ideas that might help me solve this problem? Thanks in advance!
","It's possible that there's a file name collision in your the directory from which you're running Fabric.  Do you have a file called Crypto.py in your project? 
Can you get Crypto.Random to import from outside of your project directory?  (but still using your virtualenv.  Ipython is a big help here.) 
","730","<python><ubuntu-10.10><fabric><paramiko><pycrypto>","1","0","2","2012-01-03 10:42:39","","1","","","","","2011-07-29 16:27:32",""
"6876150","ImportError exception encountered while trying to use Fabric","I am using Ubuntu and virtualenv, and I am having this recurring problem, while attempting to use Fabric to create a deployment script. Fabric depends on paramiko, which depends on PyCrypto.
Each time I try to use Fabric, or PyCrypto directly, I get this error:
ImportError: cannot import name Random

I have tried reinstalling with pip install -U PyCrypto. I have also tried installing the python-crypto and python-crypto-dbg packages with Aptitude, to no avail. I still get the same error. Anyone have any ideas that might help me solve this problem? Thanks in advance!
","I've had the same trouble in the past using Ubuntu.  I no longer have a Ubuntu install available, but on my old 10.04 box, the file Random in the Crypto directory was missing.  Make sure it exists, if it doesn't, that's the problem.
","730","<python><ubuntu-10.10><fabric><paramiko><pycrypto>","1","0","2","2012-01-03 10:42:39","","1","","","","","2011-07-29 16:27:32",""
"46821018","C# RFC2898DeriveBytes is working but Python PBKDF2 generated key and IV are not working with Python AES Decryption","I have a problem in hand to decrypt the AES encrypted cipher-text which specifications are following
The cipher-text consists of:
· 256 bytes of RFC2898-derived salt, followed by a message that was AES-encrypted using password, 'password' and derived IV.
Sample Message is ""This is my secret string, lorem ipsum"" and password is ""password"" which is encrypted using C# code
This message is decrypting fine with following c# code
private static readonly int SALT_SIZE = 256;
public static void Decrytor(){
// Encrypted Message
           var cipherText = ""i+EKwmlAF0VYh4GwDd+bGf3+yreYsPJW2Oq/w9FXjsp7RI3VqRiqtnqiAD4n6U0JJSTe2ct4B7lgrG+dHxeGcXYEYIERXvU0xnUdH+z3mRwmgYOqCU9HRUKy/z3GKISTm8qH030KTYm3YMBjnKpU8gaRcoDPP/nCiB3o5fPdyspgJgT/qt5BuvwYq7n0qg6ez/Wi4447gq/qHwG3wuuYLSBUCfmIkgGaO1KXqv3SsR8EAhrmMBmPDJfjc3sydNqs5B8J9/JvZFEZULTb8rLQZKQvgHhH9/53Bzs3zmoq0RFbgSueUbyeWb9rLAzYieTz8Yj0srG4GtwPrTPoItc6/hvx5stZ6pX8tgyk9Y3baT0JFMtGgxve7yduy8idTCQdAwRc5NOo4+CBk7P/sIw6+Q=="";
            var key = ""password"";
            // Extract the salt from our cipherText
            var allTheBytes = Convert.FromBase64String(cipherText);
            var saltBytes = allTheBytes.Take(SALT_SIZE).ToArray();
            var cipherTextBytes = allTheBytes.Skip(SALT_SIZE).Take(allTheBytes.Length - SALT_SIZE).ToArray();

            var keyDerivationFunction = new Rfc2898DeriveBytes(key, saltBytes);
            // Derive the previous IV from the Key and Salt
            var keyBytes = keyDerivationFunction.GetBytes(32);
            var ivBytes = keyDerivationFunction.GetBytes(16);

            // Create a decrytor to perform the stream transform.
            // Create the streams used for decryption.
            // The default Cipher Mode is CBC and the Padding is PKCS7 which are both good
            var aesManaged = new AesManaged();
            var decryptor = aesManaged.CreateDecryptor(keyBytes, ivBytes);
            var memoryStream = new MemoryStream(cipherTextBytes);
            var cryptoStream = new CryptoStream(memoryStream, decryptor, CryptoStreamMode.Read);
            var streamReader = new StreamReader(cryptoStream);

            // Return the decrypted bytes from the decrypting stream.
            Console.WriteLine(""\n{0}\n"", streamReader.ReadToEnd());
        }

Output is: ""This is my secret string, lorem ipsum""
but when I try to decrypt the message by following Python2.7 equivalent implementation, it is not decrypting the first few characters correctly
import base64
from Crypto.Cipher import AES
from Crypto.Protocol import KDF

def p_decrypt( self, text ):
    text_dec = base64.b64decode(text)
    salt = text_dec[:256]
    enc_txt = text_dec[256:]
    key_bytes = KDF.PBKDF2(self.key, salt, dkLen=32)
    iv = KDF.PBKDF2(self.key, salt)
    cipher = AES.new(key_bytes, AES.MODE_CBC, iv)
    return cipher.decrypt(enc_txt)

Output is: ""�增��""j�����""t string, lorem ipsum""
Expected output: ""This is my secret string, lorem ipsum""
I tried to find the problem, when I used the keyBytes and IV generated by the C# RFC2898DeriveBytes method that also works fine python code but python code is not decrypting the whole message correctly using the PBKDF2 
generated keyBytes and IV.
Both C# RFC2898DeriveBytes and python PBKDF2 are generating keyBytes using HMACSHA1 hashing algo but C# RFC2898DeriveBytes method is generated different keyBytes and IV whereas Python PBKDF2 is returning first 16 bytes of generated keyBytes for IV call.
Kindly give me some helpful guidelines on this.
Thanks,
M Umer 
","Rfc2898DeriveBytes is a streaming-response object, so concatenating two successive calls is the same as doing one call with both lengths added together.
var pbkdf2WithTwoCalls = new Rfc2898DeriveBytes(...)
var pbkdf2WithOneCall = new Rfc2898DeriveBytes(sameParametersAsAbove);

byte[] twoCallA = pbkdf2WithTwoCalls.GetBytes(32);
byte[] twoCallB = pbkdf2WithTwoCalls.GetBytes(16);

byte[] oneCall = pbkdf2WithOneCall.GetBytes(32 + 16);

if (!oneCall.SequenceEquals(twoCallA.Concat(twoCallB))
    throw new TheUniverseMakesNoSenseException();

So your solution in Python would be to make one 48-byte call to PBKDF2, then split it into the 32-byte AES key and the 16-byte IV.
Your decryption response indicates that the key is correct, but the IV is not.
","730","<c#><python><pycrypto><pbkdf2><python-cryptography>","1","1","1","2017-10-19 14:53:56","46832803","2","1","","","","2017-10-19 00:04:22",""
"54176838","Encrypt text in PHP and decrypt in Python","I am using following code snippet to encrypt a text in PHP7:
$plaintext = ""message to be encrypted"";
$cipher = ""aes-256-cbc"";
$ivlen = openssl_cipher_iv_length($cipher);
$iv = ""0123456789012345"";
$key = ""akshayakshayaksh"";
$ciphertext = openssl_encrypt($plaintext, $cipher, $key, $options=0, $iv);
print $ciphertext;


Output: cUXDhOEGz19QEo9XDvMzXkGFmg/YQUnXEqKVpfYtUGo=

Now, when I try to decrypt this in Python3 it gives error:
from Crypto.Cipher import AES
obj2 = AES.new('akshayakshayaksh', AES.MODE_CBC, '0123456789012345')
ciphertext = ""cUXDhOEGz19QEo9XDvMzXkGFmg/YQUnXEqKVpfYtUGo=""
obj2.decrypt(ciphertext)


Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
  
  File
  ""/anaconda3/lib/python3.6/site-packages/Crypto/Cipher/blockalgo.py"",
  line 295, in decrypt
      return self._cipher.decrypt(ciphertext) ValueError: Input strings must be a multiple of 16 in length

I get that AES is a block cipher algorithm. However, how should I fix my PHP code so that it generates ""padded"" cipher, any clues?
","The main issue here is that you're using different key-size. PHP's openssl_encrypt determines the key size from the encryption algorithm string  (""aes-256-cbc"" in this case) so it expects a 256 bit key. If the key is shorter it is padded with zero bytes, so the actual key used by openssl_encrypt is:  
""akshayakshayaksh\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0""

Pycryptodome determines the key size from the actual size of the key, so your Python code uses AES-128-CBC. Also, as mentioned in the coments by kelalaka, the ciphertext is base64 encoded (openssl_encrypt base64-encodes the ciphertext by default - we can get raw bytes if we use OPENSSL_RAW_DATA in $options). Pycryptodome doesn't decode the ciphertext, so we must use b64decode().  
key = b'akshayakshayaksh\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0'
obj2 = AES.new(key, AES.MODE_CBC, b'0123456789012345')
ciphertext = b""cUXDhOEGz19QEo9XDvMzXkGFmg/YQUnXEqKVpfYtUGo=""
print(obj2.decrypt(b64decode(ciphertext)))
#b'message to be encrypted\t\t\t\t\t\t\t\t\t'

The extra \t characters at the end is the padding - CBC requires padding. Pycryptodome doesn't remove padding automatically but it provides padding functions in Crypto.Util.Padding.  
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
from base64 import b64decode

key = b'akshayakshayaksh\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0'
obj2 = AES.new(key, AES.MODE_CBC, b'0123456789012345')
ciphertext = b""cUXDhOEGz19QEo9XDvMzXkGFmg/YQUnXEqKVpfYtUGo=""
plaintext = obj2.decrypt(b64decode(ciphertext))
plaintext = unpad(plaintext, AES.block_size)


Although PHP's openssl accepts arbitrary sized keys, it's best to use key size specified in the algorithm string, to prevent confusion at the very least. Also the key bytes should be as random as possible.  
As noted by Maarten Bodewes in the comments this key uses a limited range of bytes and so it's very weak. Furthermore it is created by repeating a word and that makes it vulnerable to dictionary attacks (which are much faster than bruteforce attacks).  
In PHP we can get cryptographically secure random bytes with random_bytes(), 
$key = random_bytes(32);  

and in Python with os.urandom()
key = os.urandom(32)

(You can use the same functions to create the IV; you shouldn't use a static IV, the IV must be unpredictable)  
You could also derive a key from your password with a KDF. In this case it is important to use a random salt and a high enough number of iterations. PHP provies a PBKDF2 algorithm with the hash_pbkdf2 function, and Python with hashlib.pbkdf2_hmac.
","728","<php><python><encryption><pycrypto><php-openssl>","2","4","1","2019-01-14 15:13:11","54179062","8","","","","","2019-01-14 06:49:14",""
"36772305","Web Crypto API JWK usage in Python","I am developing a P2P Infrastructure that will have data from a set of different applications, distributed through the network. This P2P overlay is composed by a set of Python Twisted Servers. 
I need to guarantee the security and privacy of the stored data, for each user of each application. Consequently, I am generating pairs of RSA keys in the client side of the web app, using the Web Crypto API. The RSA key pairs will be stored in the P2P overlay as well. So, I cipher on the client side, the private keys with a derivation of the user password.
In addition, I am using jwk to pem module to convert the JWK public key into a PEM key, to be used in the Python Cryptography library (PyCrypt or m2Crypto).
Finally, I have to guarantee that the message containing those credentials, as well as the user data , maintain its integrity. Therefore, in the client side, I am signing this data with the user's private key.
I send the data, as well as the signature, both in ArrayBuffer type to the server, encoded in base64. 
function signData(private_key, data, callback){

    var dataForHash = str2ab(JSON.stringify(sortObject(data)));
    computeSHA(dataForHash, ""SHA-256"", function(hash){


        signRSA(private_key, hash, function(data){      
            callback(data.buffer.b64encode(), dataForHash.b64encode());
        });    
    });
}

function computeSHA(data, mode, callback){
    window.crypto.subtle.digest(
        {
            name: mode,
        },
        data
    )
    .then(function(hash){
        callback(new Uint8Array(hash).buffer);
    })
    .catch(function(err){
        console.error(err);
    });
}

function signRSA(private_key, data, callback){
    window.crypto.subtle.sign(
        {
            name: ""RSASSA-PKCS1-v1_5"",
        },
        private_key,
        data
    )
    .then(function(signature){
        callback(new Uint8Array(signature));
    })
    .catch(function(err){
        console.error(err);
    });
}

ArrayBuffer.prototype.b64encode = function(){
    return btoa(String.fromCharCode.apply(null, new Uint8Array(this)));
};

Afterwards, when the Python Server receives this http request, it decodes data and signature from base64. 
dataForHash = base64.b64decode(dataReceived['data'])
signature = base64.b64decode(dataReceived['signature'])

For validating the signature, the public key is needed. Consequently:
data = utils.byteify(json.loads(dataForHash.decode(""utf-16"")))
pub_key = base64.b64decode(data['pub_key']) # Get PEM Public Key

(utils.byteify() converts unicode string to regular strings)
Verifying signature:
Authentication.verifySignature(signature, dataForHash, pub_key)

Method definition:
from Crypto.Signature import PKCS1_v1_5
from Crypto.Hash import SHA256
from Crypto.PublicKey import RSA

def verifySignature(signature, data, pub_key):
    key = RSA.importKey(pub_key)
    h = SHA256.new(data)
    verifier = PKCS1_v1_5.new(key)
    return verifier.verify(h, signature)

However, the signature verification returns False. I have also tried to use the m2crypto library, but it returns 0. 
","I managed to find the problem.
Although in Python (PyCrypto) the sign function should receive the hash of the data to sign, using the Web Cryptography API, the sign method applies a hash function to the received data before signing it. 
Consequently, the data in JS was being hashed twice, one before invoking the sign method and one in the sign method, before creating the signature.
function signData(private_key, data, callback){

    var dataForHash = str2ab(JSON.stringify(sortObject(data)));

    signRSA(private_key, dataForHash, function(data){           

        callback(data.buffer.b64encode(), dataForHash.b64encode());
    });    
}

ArrayBuffer.prototype.b64encode = function(){
    return btoa(String.fromCharCode.apply(null, new Uint8Array(this)));
};

String.prototype.b64decode = function(){
    var binary_string = window.atob(this);
    var len = binary_string.length;
    var bytes = new Uint8Array(new ArrayBuffer(len));
    for (var i = 0; i < len; i++)        {
        bytes[i] = binary_string.charCodeAt(i);
    }
    return bytes;
};

With this modification, the verification in python returns True now.
","727","<javascript><python><pycrypto><webcrypto-api><jwk>","1","0","1","2016-04-28 13:51:35","36916754","0","","","","","2016-04-21 14:14:06",""
"23459055","Python AES encryption(PyCrypto) -> AS3 decryption (as3Crypto) using AES","I've a django app which serves encrypted media files to Flash apps. Encryption in python is done with PyCrypto as follows (I include description too in case useful):
 def encrypt_aes(key, text):
    try:
        raw = _pad(text)
        iv = Random.new().read(AES.block_size)
        cipher = AES.new(key, AES.MODE_CBC, iv)
        return base64.b64encode(iv + cipher.encrypt(raw))
    except Exception as e:
        print e.message
        return text


def decrypt_aes(key, text):
    try:
        enc = base64.b64decode(text)
        iv = enc[:AES.block_size]
        cipher = AES.new(key, AES.MODE_CBC, iv)
        return _unpad(cipher.decrypt(enc[AES.block_size:]))
    except Exception as e:
        print e.message
        return text

    def _pad(s):
    bs = 16
    return s + (bs - len(s) % bs) * chr(bs - len(s) % bs)

    def _unpad(s):
        return s[:-ord(s[len(s) - 1:])]

I cannot yet decrypt the Python provided media files (downloaded with LoaderMax by GreenSock, using 'DataLoader').  My AS3 code (using AS3Crypto) is as follows:
public static function decipher(_key:String):void{
    key=_key;
    cipher = Crypto.getCipher(""simple-aes-cbc"", Hex.toArray(key));
    cipher.decrypt(ByteArray(_content));    
}

I get 

RangeError: Error #2006

One suspicion is that in Python I have 64bit base but I think that AS3 ByteArray is 32bit base. I have tried the below, but get the same Error.
cipher.decrypt(ByteArray(com.hurlant.util.Base64.decodeToByteArray(_content)));  

Another suspicion is that I have not appropriately removed 'padding' from the _content / set up my IV appropriately (which is specified by the padding I must remove from the _content). This should be done via that ""simple"" statement however.  I have been trying this, but with no success:
var pad:IPad = new PKCS5
cipher = Crypto.getCipher(""simple-aes"", Hex.toArray(key),pad);
pad.setBlockSize(cipher.getBlockSize());

Could anyone advise on how I can fix this ? :)
Many thanks!
","OK finally figured out what was going wrong. Besides some AS3 tweaks, we wrongly were transmitting files as MP3/image (should have been text/html). 
Our Python remains as above. Our AS3 is tweaked to the below.
Here's the AS3 class we used:
package com.xperiment.preloader
{

import com.greensock.loading.DataLoader;
import com.hurlant.crypto.Crypto;
import com.hurlant.crypto.symmetric.ICipher;
import com.hurlant.util.Base64;
import flash.events.Event;
import flash.utils.ByteArray;


public class EncryptedDataLoader extends DataLoader
{
    private static var backlog:Vector.<EncryptedDataLoader>;
    private static var cipher:ICipher;
    private var decrypted:Boolean = true;

    public function EncryptedDataLoader(urlOrRequest:*, vars:Object=null)
    {
        this.addEventListener(Event.COMPLETE,decryptL);
        super(urlOrRequest, vars);
    }

    public function decryptL(e:Event):void {
        trace(""start decrypt"");
        e.stopImmediatePropagation();
        this.removeEventListener(Event.COMPLETE,decryptL);

        backlog ||= new Vector.<EncryptedDataLoader>;
        backlog.push(this);
        if(cipher)  pingBacklog();
    }

    public function decipher():void
    {
        _content = Base64.decodeToByteArray( _content );
        cipher.decrypt( _content );     

        decrypted=true;
        this.dispatchEvent(new Event(Event.COMPLETE));
    }

    public static function setCipher(_key:String):void{
        var keyBA:ByteArray = new ByteArray;
        keyBA.writeMultiByte(_key, ""iso-8859-1""); 
        cipher = Crypto.getCipher(""simple-aes"", keyBA);
        pingBacklog();
    }

    public static function kill():void{
        cipher.dispose();
        cipher = null;  
    }

    public static function pingBacklog():void{
        if(backlog){
            var encrypted:EncryptedDataLoader;
            while(backlog.length>0){
                encrypted=backlog.shift();
                encrypted.decipher();
            }
            backlog=null;
        }
    }
}

}
","716","<python><actionscript-3><aes><pycrypto><as3crypto>","1","0","1","2014-05-05 15:18:29","","8","","960471","","2014-05-04 17:14:11","2014-05-04 17:07:24",""
"53320143","PyCryptodome AES CBC encryption does not give desired output","I'm trying to encrpyt & decrypt a simple text in AES with CBC mode in Python (2.7.14) with Pycryptodome (3.7.0)
Here's my code to attempt encryption:
from Crypto.Cipher import AES
from Crypto.Util import Padding
import base64
encryption_key = ""1111111111111111111111111111111111111111111111111111111111111111"".decode(""hex"")
text = ""Test text""
text_padded = Padding.pad(text, AES.block_size)
iv = ""0000000000000000""
cipher = AES.new(encryption_key, AES.MODE_CBC, iv)
cipher_enc = cipher.encrypt(text_padded)
encrypted = iv + cipher_enc
print encrypted
print base64.b64encode(encrypted)
print encrypted.encode(""hex"")
print base64.b64encode(encrypted).encode(""hex"")

And the outputs are
0000000000000000X???]????H?
MDAwMDAwMDAwMDAwMDAwMFje9RzRXc3LHt8GBBLTSPQ=
3030303030303030303030303030303058def51cd15dcdcb1edf060412d348f4
4d4441774d4441774d4441774d4441774d4441774d466a6539527a525863334c4874384742424c545350513d

But when I enter the same key, text and initial vector values to http://aes.online-domain-tools.com/, I got different results.
Output is : 6a56bc5c0b05892ae4e63d0ca6b3169b
Here's the screenshot:

What am I doing wrong? How can I get the output value at the online encryption website by pycrypto?
","first in python 3: python 3 is a lot stricter about bytes vs strings.
this reproduces the given example:
from Crypto.Cipher import AES

encryption_key = 32 * b'\x11'
text = ""Test text"".encode()
text_padded = text + (AES.block_size - (len(text) % AES.block_size)) * b'\x00'
iv = 16 * b'\x00'
cipher = AES.new(encryption_key, AES.MODE_CBC, iv)
cipher_enc = cipher.encrypt(text_padded)
print(encryption_key.hex())
print(iv.hex())
print(cipher_enc.hex())

# 1111111111111111111111111111111111111111111111111111111111111111
# 00000000000000000000000000000000
# 6a56bc5c0b05892ae4e63d0ca6b3169b

note that there is no need for encrypted = iv + cipher_enc; you are running AES in CBC mode already.

got it to run on python 2 as well:
from Crypto.Cipher import AES

encryption_key = 32 * b'\x11'
text = ""Test text"".encode()
text_padded = text + (AES.block_size - (len(text) % AES.block_size)) * b'\x00'
iv = 16 * b'\x00'
cipher = AES.new(encryption_key, AES.MODE_CBC, iv)
cipher_enc = cipher.encrypt(text_padded)
print(encryption_key.encode('hex'))
print(iv.encode('hex'))
print(cipher_enc.encode('hex'))

","714","<python><encryption><pycrypto><pycryptodome>","1","1","1","2018-11-15 13:39:10","53320664","0","","1793772","","2018-11-15 13:23:13","2018-11-15 13:05:22",""
"42784876","Using PyCrypto to calculate SHA256 hash of RSA public key","I used OpenSSL to generate a 2048-bit RSA key:
openssl genrsa -out mykey.pem 2048
openssl rsa -pubout -in mykey.pem -out mypubkey.pub

I would like to use OpenSSL to calculate the SHA256 hash value of the public key (not the file, just the key)
I used the command: dgst -sha256 mypubkey.pub
The hash value generated by OpenSSL was:
876e4b63c2fa294c27e07c7449f5cb7ce2edae6deb74370440550700db67bbc3
Am I doing it right? As in getting the SHA256 hash value of the public key value and not the whole key file.
Also, how do I use PyCrypto to verify this?
The public key was:
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEApOa9doLz8vrN9aNfGf/m
iUT1czZz2PDWIVY5OtUXSB/Xm/26+QBKTR0si4vF2FW3rwn6ayBcYvGzsmtmwwA8
tfRWw78XrgeHevynKvZXVbsggI2gJqwPQr/xvmyfUrYj/EOgG72ryJo219dFJBCR
4gB6K/ZfIS8qLO4c4+z2WaXxZDDeur2X21UttTzIk878NT+VASmdt/avjsc7K5bD
Wu2Wmtg82LTPHCp56NgV08tMX9QUacidJzQ02eK1hWuDkpz1BRWXbE3Jas+sNBqN
mWMSRZ3sxMblQKNXVaXy/0IU9M5EHZEC135M2lHiumzJSZPs0pckjJFOTT2pTo2c
wQIDAQAB

","","713","<rsa><sha256><pycrypto>","0","","0","2017-03-14 14:52:47","","3","","608639","","2017-03-14 14:52:47","2017-03-14 11:33:28",""
"43426748","PKCS1_PSS sign() method","I have been trying to fix an issue but failed countless times. I need to use a method, sign(), and I have the correct library imported, however its still not being recognized.
I'm coding in Python and this is what I have that seems important:
#importing the library
from Crypto.Signature import PKCS1_PSS

[...]
signer = PKCS1_PSS.new(keypair)
sig = PKCS1_PSS.sign(keypair)

But the sign() method is the only thing in the entire code from that library that doesn't get recognized:

""This inspection detects names that should resolve but don't. Due to
  dynamic dispatch and duck typing, this is possible in a limited but
  useful number of cases. Top-level and class-level items are supported
  better than instance items.""

Does anyone have any suggestions on how to fix this or know what I'm doing wrong?
","The documentation of PKCS1_PSS is wrong. It currently says:
from Crypto.Signature import PKCS1_PSS
from Crypto.Hash import SHA
from Crypto.PublicKey import RSA
from Crypto import Random

message = 'To be signed'
key = RSA.importKey(open('privkey.der').read())
h = SHA.new()
h.update(message)
signer = PKCS1_PSS.new(key)
signature = PKCS1_PSS.sign(key)

But it should be the following analogous to the documentation of PKCS1_v1_5
from Crypto.Signature import PKCS1_PSS
from Crypto.Hash import SHA
from Crypto.PublicKey import RSA
from Crypto import Random

message = 'To be signed'
key = RSA.importKey(open('privkey.der').read())
h = SHA.new()
h.update(message)
signer = PKCS1_PSS.new(key)
signature = signer.sign(h)

","712","<python><digital-signature><signature><pycrypto>","2","5","1","2017-04-15 13:57:44","43426905","0","","1816580","","2017-04-15 13:57:44","2017-04-15 13:39:52",""
"40577754","Pycrypto 2.6.1 for android smartphone","I am doing a project where I am required to do an encryption on Windows system and then I need to decrypt the message on an Android smartphone. I am using Python with pycrypto 2.6.1 module on Windows and qpython app on the smartphone. Qpython is not recognizing the the encryption code I am using on Windows and it is telling me that no module Crypto can be found. How do I implement pycrypto 2.6.1 module on smartphone?
","https://drive.google.com/file/d/0B9cgr9L98QxzR0t3S0VoUWxQeTg/view?usp=drivesdk
Download this package then extract and copy to /sdcard/qpython/lib/python2.7/site-packages/Crypto may solve this.

I forget where this package comes from, maybe it's from qpypi. But it works fine for me. If there's any problem to use it, please tell me.
Hope this help you!
","708","<android><encryption><smartphone><pycrypto><qpython>","0","0","1","2019-05-26 10:45:25","42454603","0","1","1007939","","2016-11-17 16:22:52","2016-11-13 19:10:51",""
"51943598","Pycrypto AES-256 - How to Encrypt Texts with Large Bytes?","I've been playing around with pycrypto and AES-256, and I've run into a bit of an issue with larger file sizes.
For small strings, like ""hello world!"", the encryption/decryption works fine.
But I would like to extend the encryption to text files of any reasonable size, but I've been running into this error:
ValueError: Input strings must be a multiple of 16 in length
I understand that this is because AES-256 is a block cipher, and so the texts need to be in multiples of 16 bytes, and if bytes are big, then I need to chunk them.
My question is, how do I exactly go about doing that? Is there a built-in pycrypto method for it? I'm quite new to cryptography, so I don't think I'd be able to write a chunking method on my own.
Here's how I pad/unpad the string to be encrypted (from https://gist.github.com/gustavohenrique/79cc95cc351d975a075f18a5c9f49319):
def pad(self, s):
    return s + (self.bs - len(s) % self.bs) * chr(self.bs - len(s) % self.bs)

def unpad(self, s):
    return s[:-ord(s[len(s)-1:])]

And here's how the Cipher class is initialized: 
def __init__(self, key):
    self.bs = 16
    self.cipher = AES.new(key, AES.MODE_ECB)

Encryption/Decryption:
def encrypt(self, raw):
    raw = self._pad(raw)
    encrypted = self.cipher.encrypt(raw)
    encoded = base64.b64encode(encrypted)

    return str(encoded, 'utf-8')

def decrypt(self, raw):
    decoded = base64.b64decode(raw)
    decrypted = self.cipher.decrypt(decoded)

    return str(self._unpad(decrypted), 'utf-8')

","","701","<python><encryption><aes><pycrypto>","0","","0","2018-08-21 07:25:48","","3","","","","","2018-08-21 07:25:48",""
"58569361","AttributeError: module 'time' has no attribute 'clock' in Python 3.8","I have written code to generate public and private keys. It works great at Python 3.7 but it fails in Python 3.8. I don't know how it fails in the latest version. Help me with some solutions. 
Here's the Code:
from Crypto.PublicKey import RSA


def generate_keys():
    modulus_length = 1024
    key = RSA.generate(modulus_length)
    pub_key = key.publickey()
    private_key = key.exportKey()
    public_key = pub_key.exportKey()
    return private_key, public_key


a = generate_keys()
print(a)

Error in Python 3.8 version:
Traceback (most recent call last):
  File ""temp.py"", line 18, in <module>
    a = generate_keys()
  File ""temp.py"", line 8, in generate_keys
    key = RSA.generate(modulus_length)
  File ""/home/paulsteven/.local/lib/python3.8/site-packages/Crypto/PublicKey/RSA.py"", line 508, in generate
    obj = _RSA.generate_py(bits, rf, progress_func, e)    # TODO: Don't use legacy _RSA module
  File ""/home/paulsteven/.local/lib/python3.8/site-packages/Crypto/PublicKey/_RSA.py"", line 50, in generate_py
    p = pubkey.getStrongPrime(bits>>1, obj.e, 1e-12, randfunc)
  File ""/home/paulsteven/.local/lib/python3.8/site-packages/Crypto/Util/number.py"", line 282, in getStrongPrime
    X = getRandomRange (lower_bound, upper_bound, randfunc)
  File ""/home/paulsteven/.local/lib/python3.8/site-packages/Crypto/Util/number.py"", line 123, in getRandomRange
    value = getRandomInteger(bits, randfunc)
  File ""/home/paulsteven/.local/lib/python3.8/site-packages/Crypto/Util/number.py"", line 104, in getRandomInteger
    S = randfunc(N>>3)
  File ""/home/paulsteven/.local/lib/python3.8/site-packages/Crypto/Random/_UserFriendlyRNG.py"", line 202, in read
    return self._singleton.read(bytes)
  File ""/home/paulsteven/.local/lib/python3.8/site-packages/Crypto/Random/_UserFriendlyRNG.py"", line 178, in read
    return _UserFriendlyRNG.read(self, bytes)
  File ""/home/paulsteven/.local/lib/python3.8/site-packages/Crypto/Random/_UserFriendlyRNG.py"", line 129, in read
    self._ec.collect()
  File ""/home/paulsteven/.local/lib/python3.8/site-packages/Crypto/Random/_UserFriendlyRNG.py"", line 77, in collect
    t = time.clock()
AttributeError: module 'time' has no attribute 'clock'

","The module you use to generate key call a method that have been depreciated since python 3.3 time.clock(). 
You could downgrade to python 3.7 or change the source code to replace it. You should open an issue for that as well. 
","694","<python><attributeerror><pycrypto><python-3.8>","4","0","2","2019-10-26 17:40:34","","0","","11090395","","2019-10-26 17:40:34","2019-10-26 08:51:54",""
"58569361","AttributeError: module 'time' has no attribute 'clock' in Python 3.8","I have written code to generate public and private keys. It works great at Python 3.7 but it fails in Python 3.8. I don't know how it fails in the latest version. Help me with some solutions. 
Here's the Code:
from Crypto.PublicKey import RSA


def generate_keys():
    modulus_length = 1024
    key = RSA.generate(modulus_length)
    pub_key = key.publickey()
    private_key = key.exportKey()
    public_key = pub_key.exportKey()
    return private_key, public_key


a = generate_keys()
print(a)

Error in Python 3.8 version:
Traceback (most recent call last):
  File ""temp.py"", line 18, in <module>
    a = generate_keys()
  File ""temp.py"", line 8, in generate_keys
    key = RSA.generate(modulus_length)
  File ""/home/paulsteven/.local/lib/python3.8/site-packages/Crypto/PublicKey/RSA.py"", line 508, in generate
    obj = _RSA.generate_py(bits, rf, progress_func, e)    # TODO: Don't use legacy _RSA module
  File ""/home/paulsteven/.local/lib/python3.8/site-packages/Crypto/PublicKey/_RSA.py"", line 50, in generate_py
    p = pubkey.getStrongPrime(bits>>1, obj.e, 1e-12, randfunc)
  File ""/home/paulsteven/.local/lib/python3.8/site-packages/Crypto/Util/number.py"", line 282, in getStrongPrime
    X = getRandomRange (lower_bound, upper_bound, randfunc)
  File ""/home/paulsteven/.local/lib/python3.8/site-packages/Crypto/Util/number.py"", line 123, in getRandomRange
    value = getRandomInteger(bits, randfunc)
  File ""/home/paulsteven/.local/lib/python3.8/site-packages/Crypto/Util/number.py"", line 104, in getRandomInteger
    S = randfunc(N>>3)
  File ""/home/paulsteven/.local/lib/python3.8/site-packages/Crypto/Random/_UserFriendlyRNG.py"", line 202, in read
    return self._singleton.read(bytes)
  File ""/home/paulsteven/.local/lib/python3.8/site-packages/Crypto/Random/_UserFriendlyRNG.py"", line 178, in read
    return _UserFriendlyRNG.read(self, bytes)
  File ""/home/paulsteven/.local/lib/python3.8/site-packages/Crypto/Random/_UserFriendlyRNG.py"", line 129, in read
    self._ec.collect()
  File ""/home/paulsteven/.local/lib/python3.8/site-packages/Crypto/Random/_UserFriendlyRNG.py"", line 77, in collect
    t = time.clock()
AttributeError: module 'time' has no attribute 'clock'

","From the Python 3.8 doc:

The function time.clock() has been removed, after having been deprecated since Python 3.3: use time.perf_counter() or time.process_time() instead, depending on your requirements, to have well-defined behavior. (Contributed by Matthias Bussonnier in bpo-36895.)

","694","<python><attributeerror><pycrypto><python-3.8>","4","3","2","2019-10-26 17:40:34","","0","","11090395","","2019-10-26 17:40:34","2019-10-26 08:51:54",""
"13615594","installing python packages StarCluster and pycrypto","Hi I am very new to python...so please forgive me if this is a silly question...
Having installed python 2.7.3 i wanted to install the package StarCluster which i tried doing via the command:
$ sudo easy_install StarCluster

but this led to errors when installing the dependent package pycrypto so tried separately to install that by using the command:
$ easy_install pycrypto

but get the following error message....Am I missing something that I need to do?
Searching for pycrypto
Reading http://pypi.python.org/simple/pycrypto/
Reading http://pycrypto.sourceforge.net
Reading http://www.pycrypto.org/
Reading http://www.amk.ca/python/code/crypto
Best match: pycrypto 2.6
Downloading http://ftp.dlitz.net/pub/dlitz/crypto/pycrypto/pycrypto-2.6.tar.gz
Processing pycrypto-2.6.tar.gz
Running pycrypto-2.6/setup.py -q bdist_egg --dist-dir /var/folders/N3/N3c0k2wGFciTmmsVNCCRE++++TI/-Tmp-/easy_install-udIVh6/pycrypto-2.6/egg-dist-tmp-K6hQbK
warning: GMP or MPIR library not found; Not building Crypto.PublicKey._fastmath.
/usr/libexec/gcc/powerpc-apple-darwin10/4.2.1/as: assembler (/usr/bin/../libexec/gcc/darwin/ppc/as or /usr/bin/../local/libexec/gcc/darwin/ppc/as) for architecture ppc not installed
Installed assemblers are:
/usr/bin/../libexec/gcc/darwin/x86_64/as for architecture x86_64
/usr/bin/../libexec/gcc/darwin/i386/as for architecture i386
src/MD2.c:147: fatal error: error writing to -: Broken pipe
compilation terminated.
lipo: can't open input file: /var/folders/N3/N3c0k2wGFciTmmsVNCCRE++++TI/-Tmp-//ccyyE9rh.out (No such file or directory)
error: Setup script exited with error: command 'gcc-4.2' failed with exit status 1

thanks
HLM
","EDIT:
Follow the instructions here to use 4.2 instead of 4.1 as the version of gcc.

Try his:
sudo apt-get install python-pip

pip is a python package manager: pip=pip installs packages. Then,
sudo pip install StarCluster

Then you can start python and import starcluster:
python
import starcluster

You can do the same with pycrypto:
sudo pip install pycrypto

","687","<python><pycrypto>","1","0","1","2012-11-28 23:08:34","","2","","1199712","","2012-11-28 22:45:01","2012-11-28 22:31:34",""
"41895868","Getting ImportError: No module named 'Crypto' after installation","I am getting ImportError: No module named 'Crypto' error when trying to run. I have installed pycrypto using pip install pycrypto and updated it also. Everything I have tried to far has been unsuccessful.
Tried:

reinstalling pycrypto,  
updating both python and pycrypto

Any suggestions?
","Is python defined properly on your machine?
Make sure PATH environment variable has python's installation folder in it
","684","<python><python-3.x><ubuntu><importerror><pycrypto>","0","0","2","2017-01-27 15:28:34","41897007","3","","355230","","2017-01-27 14:14:20","2017-01-27 14:08:13",""
"41895868","Getting ImportError: No module named 'Crypto' after installation","I am getting ImportError: No module named 'Crypto' error when trying to run. I have installed pycrypto using pip install pycrypto and updated it also. Everything I have tried to far has been unsuccessful.
Tried:

reinstalling pycrypto,  
updating both python and pycrypto

Any suggestions?
","The error messages says, it does not able to find the module so please try to run below command,
#pip list -- # what does it show to you, if it would have installed successfully it will show you up there.

if ""pip install pycrypto"" doesn't work so try to download the source tar ball and try to install it from prompt.
pip download pycrypto

it will download tar.gz file.. so you can install using with pip install --no-index --find-links /path/to/some/dir/ pycrypto
for python3.5 version 
python3.5 -m pip install pycrypto

this will install in python3.5 environment and after that you can able to import pycrypto module
","684","<python><python-3.x><ubuntu><importerror><pycrypto>","0","0","2","2017-01-27 15:28:34","41897007","3","","355230","","2017-01-27 14:14:20","2017-01-27 14:08:13",""
"45628726","Crypto.js equivalent module in python for AES encryption and decryption","I am trying to decrypt a file in python which was encrypted using CryptoJS(AES) in Node.js. I know there is an equivalent module in python (Pycrypto) but I don't know how to use it or which mode of AES decryption to use for decrypting the data(I have the cipher and the key but don't have any iv). Here is the code(Node.js) which i am trying to translate to Python:
  function fileEncrypt(plaintext, password){        
     return CryptoJS.AES.encrypt(plaintext,password).toString();

}
function fileDecrypt(ciphertext, password){     
    return CryptoJS.AES.decrypt(ciphertext,password).toString(CryptoJS.enc.Latin1);     
}   

As you can see, no iv has been passed here. Please help me translate the code to Python. Thank you in advance :)
","","680","<python><node.js><encryption><pycrypto><cryptojs>","0","","0","2017-08-11 17:13:38","","7","","1816580","","2017-08-11 17:13:38","2017-08-11 06:50:35",""
"41943147","Decrypt RSA based encryption using Apache NiFi","I am using a python script that uses pycrypto to encrypt files using RSA. I have used encrypt(data, 2048) function during encryption.
Now, I am trying to decrypt that encrypted file using the decrypt processor in Apache NiFi and I am not sure which KDF and Encryption Algorithm to select.
I do not see anything termed RSA in the Configure Processor window of Apache NiFi.
","Currently, the EncryptContent processor does not support arbitrary RSA decryption. I would suggest you file a Jira requesting this enhancement (don't be scared by the graph showing a discrepancy between opened & closed; we're currently at the phase of the lifecycle where a release went out recently and now all the feedback is generating new tickets for the next release). 
For immediate solutions, I have a few suggestions:

You can use GPG to encrypt and decrypt the data, and NiFi provides first-class support for GPG decryption. The GPG key uses an underlying DSA/RSA key alongside AES encryption for the data, so this would be effectively the same process (asymmetric encryption). 
You can use the ExecuteScript processor to run a small script which performs the decryption. The processor supports Ruby, Groovy, Lua, Javascript, and Python*. Unfortunately the limitation on Python is that Jython doesn't support native libraries (such as pycrypto). One possible solution is to use JyNI which allows Jython to load CPython libraries, but I have not evaluated it in this context. If you are comfortable with Groovy & BouncyCastle or Ruby & OpenSSL, you can write the decrypt script in either of those languages with only a few lines of code. 
If you really want to use the Python code you already have, you can invoke it on the command-line via ExecuteProcess or ExecuteStreamCommand. 

One outstanding question -- how are you using RSA to encrypt the files? RSA with a 2048 bit key length can only encrypt 245 bytes. If you are encrypting files, it is more likely you would want to use a hybrid cryptosystem, where you encrypt the arbitrary data with a randomly-generated AES key and then encrypt just that AES key with RSA. This will be much faster as well. This is the model used by SSL, S/MIME, OpenPGP, etc. 
","680","<python><encryption><gnupg><pycrypto><apache-nifi>","1","4","1","2017-01-31 18:31:45","41944395","0","","70465","","2017-01-31 18:31:45","2017-01-30 18:40:08",""
"50116952","Python Appengine - ""ImportError: cannot import name OSRNG"" when invoking the Endpoints tool","I am following this tutorial on Google Cloud Endpoints. I am having trouble at the ""Generating the OpenApi configuration file"" section. Specifically, when I invoke the Endpoints tool.
The Traceback is saying that the file on lib/Crypto/Random/init.py ""from Crypto.Random import OSRNG"" is producing the import error.
What I have done so far

Looked at the path lib/Crypto/Random and saw a folder named OSRNG - thus made sure that there was a folder called OSRNG (I didnt see any py file name OSRNG.py though)
Followed the answer for this question by putting the pycrypto version to ""latest"" in the app.yaml file.
Looked into this question but doesnt apply.
Looked into this question by specifying the version rather than ""latest"" in app.yaml.

I don't understand why it is saying there is an import error when I can literally see the package/module in the directory.
Can someone help why it is producing an import error?
","Are you running on OSX?
I encountered a similar problem and the solution for me was installing google-endpoints (which for some reason is missing from the instructions):
pip install -t lib google-endpoints --ignore-installed
","680","<python-2.7><google-app-engine><pycrypto>","1","0","1","2018-05-02 23:29:17","","4","","2226440","","2018-05-02 23:29:17","2018-05-01 13:01:39",""
"14356471","Porting AES code from M2Crypto to pycrypto","I want to convert some existing AES code from M2Crypto to the equivalent pycrypto but the documentation is thin, especially for M2Crypto. I have reduced the relevant code to a gist. The main issues are:

Pycrypto requires the input to be multiple of 16 in length, m2crypto does not.
Even when the input length is multiple of 16, the ciphertext differs. After experimenting with M2Crypto cipher parameters, it turns out that setting padding and key_as_bytes to false encrypts to the same ciphertext with  pycrypto. So I need to emulate padding=True and key_as_bytes=True in pure python.

Any help would be much appreciated.
EDIT: Solved - the gist has been updated with the equivalent M2Crypto/pycrypto code and tests, I'll leave it there in case someone finds it useful in the future.
","You will have to implement PKCS#7 padding/unpadding, which is kind of simple and specified in the publicly available standard from RSA labs, and of course on Wikipedia. Also see this answer:
AES 256 Encryption with PyCrypto using CBC mode - any weaknesses?
Note that PKCS#7 padding and PKCS#5 padding are identical, although the latter is officially only for 8 byte block ciphers (e.g. DES/TDEA). OpenSSL uses PKCS#7 padding by default.
","677","<encryption><aes><pycrypto><m2crypto>","1","2","1","2013-01-19 13:10:39","14370584","0","","240525","","2013-01-19 13:10:39","2013-01-16 10:41:49",""
"13047450","linker command failed at fastmath installing pycrypto on OSX","I did pip install pycrypto (actually wanted to install fabric but it failed at pycrypto) and got the error below. I'm on python 2.7.3. Tried 3.3 too but same error. How do I fix this please?
My clang version:
$ clang --version
Apple clang version 4.1 (tags/Apple/clang-421.11.66) (based on LLVM 3.1svn)
Target: x86_64-apple-darwin11.4.2
Thread model: posix

Error:
...

creating build/lib.macosx-10.7-x86_64-2.7/Crypto/Signature

copying lib/Crypto/Signature/__init__.py -> build/lib.macosx-10.7-x86_64-2.7/Crypto/Signature

copying lib/Crypto/Signature/PKCS1_PSS.py -> build/lib.macosx-10.7-x86_64-2.7/Crypto/Signature

copying lib/Crypto/Signature/PKCS1_v1_5.py -> build/lib.macosx-10.7-x86_64-2.7/Crypto/Signature

running build_ext

running build_configure

building 'Crypto.PublicKey._fastmath' extension

creating build/temp.macosx-10.7-x86_64-2.7

creating build/temp.macosx-10.7-x86_64-2.7/src

cc -fno-strict-aliasing -fno-common -dynamic -I/usr/local/include -Wall -Wstrict-prototypes -std=c99 -O3 -fomit-frame-pointer -Isrc/ -I/usr/include/ -I/usr/local/Cellar/python/2.7.3/Frameworks/Python.framework/Versions/2.7/include/python2.7 -c src/_fastmath.c -o build/temp.macosx-10.7-x86_64-2.7/src/_fastmath.o

src/_fastmath.c:1545:20: warning: comparison of unsigned expression < 0 is always false [-Wtautological-compare]

                        else if (result < 0)

                                 ~~~~~~ ^ ~

src/_fastmath.c:1621:20: warning: comparison of unsigned expression < 0 is always false [-Wtautological-compare]

                        else if (result < 0)

                                 ~~~~~~ ^ ~

2 warnings generated.

cc -bundle -undefined dynamic_lookup -L/usr/local/lib build/temp.macosx-10.7-x86_64-2.7/src/_fastmath.o -lgmp -o build/lib.macosx-10.7-x86_64-2.7/Crypto/PublicKey/_fastmath.so

ld: illegal text-relocation to ___gmp_binvert_limb_table in /usr/local/lib/libgmp.a(mp_minv_tab.o) from ___gmpn_divexact_1 in /usr/local/lib/libgmp.a(dive_1.o) for architecture x86_64

clang: error: linker command failed with exit code 1 (use -v to see invocation)

error: command 'cc' failed with exit status 1

----------------------------------------

Command /usr/local/Cellar/python/2.7.3/Frameworks/Python.framework/Versions/2.7/Resources/Python.app/Contents/MacOS/Python -c ""import setuptools;__file__='/var/folders/_2/fwbd8jjn0mj_y_9w4f31g2nm0000gn/T/pip-build/pycrypto/setup.py';exec(compile(open(__file__).read().replace('\r\n', '\n'), __file__, 'exec'))"" install --record /var/folders/_2/fwbd8jjn0mj_y_9w4f31g2nm0000gn/T/pip-riA3zG-record/install-record.txt --single-version-externally-managed failed with error code 1 in /var/folders/_2/fwbd8jjn0mj_y_9w4f31g2nm0000gn/T/pip-build/pycrypto

Exception information:
Traceback (most recent call last):
  File ""/usr/local/Cellar/python/2.7.3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/pip-1.2.1-py2.7.egg/pip/basecommand.py"", line 107, in main
    status = self.run(options, args)
  File ""/usr/local/Cellar/python/2.7.3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/pip-1.2.1-py2.7.egg/pip/commands/install.py"", line 261, in run
    requirement_set.install(install_options, global_options)
  File ""/usr/local/Cellar/python/2.7.3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/pip-1.2.1-py2.7.egg/pip/req.py"", line 1166, in install
    requirement.install(install_options, global_options)
  File ""/usr/local/Cellar/python/2.7.3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/pip-1.2.1-py2.7.egg/pip/req.py"", line 589, in install
    cwd=self.source_dir, filter_stdout=self._filter_install, show_stdout=False)
  File ""/usr/local/Cellar/python/2.7.3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/pip-1.2.1-py2.7.egg/pip/util.py"", line 612, in call_subprocess
    % (command_desc, proc.returncode, cwd))
InstallationError: Command /usr/local/Cellar/python/2.7.3/Frameworks/Python.framework/Versions/2.7/Resources/Python.app/Contents/MacOS/Python -c ""import setuptools;__file__='/var/folders/_2/fwbd8jjn0mj_y_9w4f31g2nm0000gn/T/pip-build/pycrypto/setup.py';exec(compile(open(__file__).read().replace('\r\n', '\n'), __file__, 'exec'))"" install --record /var/folders/_2/fwbd8jjn0mj_y_9w4f31g2nm0000gn/T/pip-riA3zG-record/install-record.txt --single-version-externally-managed failed with error code 1 in /var/folders/_2/fwbd8jjn0mj_y_9w4f31g2nm0000gn/T/pip-build/pycrypto

","I was using an HPC version of gcc. So I removed that and reinstalled Command Line Tools in Xcode. Then I was able to install pycrypto and fabric.
","677","<python><pip><fabric><pycrypto>","1","0","1","2012-10-28 21:19:02","13113129","0","1","","","","2012-10-24 10:34:08",""
"16182228","Keys generated via pycrypto prompting for password","I generated public/private keypairs using a simple function:
def _generate_rsa_key_pair(size=2048):
    rng = Random.new().read
    rsa_key = RSA.generate(size, rng)
    public_key = rsa_key.publickey().exportKey(format='OpenSSH')
    private_key = rsa_key.exportKey()
    return (public_key, private_key)

However, if I place the private key on my laptop and the public key in the authorized_keys of the remote and try logging in vis ssh i.e.
local/.ssh> ssh -i ~/.ssh/my_new_private_key myself@remote
I get prompted for a passphrase.
How do I get rid of the passphrase? The default for exportKey is passphrase=None so I assumed it should work.
","","675","<python><pycrypto><passphrase>","0","","0","2013-04-24 02:09:26","","3","1","","","","2013-04-24 02:09:26",""
"11432742","Replace OpenSSL in oauth2client.crypt to work with PyCrypto","Google App Engine supports PyCrypto, but does not support OpenSSL. 
I want to use the oauth2client SignedJwtAssertionCredentials, which internally calls OpenSSL . Is there is a way to get oauth2client to work with PyCrypto. 
I am assuming that it might be possible to create a local version of SignedJwtAssertionCredential equivalent by using PyCrypto instead ?
Also is there a way I can make a request to Google App Engine to provide a version that support the functionality for certificate/Assertions for server-to-server Oauth2.0 dance ?
Any pointers/help would be much appreciated.
Thanks.
","Found this link and this avoids any special handling to avoid ssl/etc.. This link has Google Data support for App Engine use.
I have not tried it yet - but once I use it, I will share feedback, if worthwhile for others.
","671","<google-app-engine><oauth-2.0><pycrypto><google-api-client><pyopenssl>","3","0","1","2012-07-22 16:22:07","","1","1","1055761","","2012-07-11 22:38:32","2012-07-11 12:32:44",""
"20129687","Python pycrypto AES File block encryption fails","I am reading 64kb from a generated text file ""generated.txt"" and writing the data to txt files
at the beginning of every written txt file there is strange data, except at the first written file. 
The generated test file
Script to generate the file
If i use:
with open('generated.txt', 'rb') as f:

instead of:
f = open('generated.txt', 'rb')

I get the same strange data in the first file.
Beginning of the second 64k block of the orginal file in hex:
0a31303935300d0a31303935310d0a31

""Strange"" Data form the second txt file in hex:
e7fadb0930588fb74d1aba3fd3bafc84

Beginning of the second file encryptet in hex:
bde07ad1e305193105655a42998a1fc9

Unfortunately not the same
Full Code below:
#!/usr/bin/env python
# -*- coding: utf-8 -*-

from Crypto.Cipher import AES
from Crypto.Protocol.KDF import PBKDF2
from Crypto import Random

key_size = 32
iterations = 10000
key = 'password'

salt = Random.new().read(key_size)
iv = Random.new().read(AES.block_size)
derived_key = PBKDF2(key, salt, key_size, iterations)
cipher = AES.new(derived_key, AES.MODE_CFB, iv)

i = 1
f = open('generated.txt', 'rb')


while True:

    data = f.read(65536)

    if not data:
        break

    encodedtext = iv + cipher.encrypt(data)
    decodedtext = str(cipher.decrypt(encodedtext))[16:]
    print 'Writing ' + str(i) 

    g = open('LOG_' + str(i) + '.txt', 'wb')
    g.write(decodedtext)
    g.close()

    d = open('LOG_' + str(i) + '_ENC.txt', 'wb')
    d.write(encodedtext)
    d.close()
    i = i+1

f.close()

Thanks for your help :)
","Please make sure that you understand about character-encoding and encoding.
Character encoding defines what text looks like if you represent it as bytes. There are many encoding standards, but the most common ones include ASCII, Windows-1252, UTF-8 and UTF-16. The first one is a limited single (7-bit) set, Windows-1252 contains mostly European/Latin characters and the latter two are encodings used for Unicode text. If a file is viewed in the wrong encoding then it may show like nonsense - but most text editors can guess the text encoding pretty well nowadays.
Note that not all - and sometimes even many - bytes can be interpreted as text in most encodings. Bytes may not represent a character at all, or it may encode (or encode part of) a control-character. It is possible to go around this issue by encoding your bytes as text. A common encoding uses hexadecimals. Each byte is encoded in exactly two characters, 4 bits per character. This makes it easy for programmers to see the contents of the bytes. Base64 on the other hand is not that legible as it encodes each 6 bits as a character. So base 64 is a more efficient encoding, but it is not very easy for humans to read.
Make sure you use a good character-encoding if you want your plaintext input to be legible. The ciphertext - despite the name - consists of bytes. If you want to create characters from that, use base 64.
","671","<python><encryption><io><aes><pycrypto>","-1","0","1","2013-11-25 02:01:44","","5","","2992048","","2013-11-22 14:54:21","2013-11-21 19:01:44",""
"48595705","Cant encrypt strings with special characters with pycrypto AES","Description
I want to store people's names in MySQL database. Because the data is sensitive information i want to encrypt it with AES. I am using PyCrypto AES module.
The code that I am using is:
class AESCipher(object):

    def __init__(self, key):
        self.bs = 64
        self.key = hashlib.sha256(key.encode()).digest()

    def encrypt(self, raw):
        raw = self._pad(raw)
        iv = Random.new().read(AES.block_size)
        cipher = AES.new(self.key, AES.MODE_CBC, iv)
        return base64.b64encode(iv + cipher.encrypt(raw))

    def decrypt(self, enc):
        enc = base64.b64decode(enc)
        iv = enc[:AES.block_size]
        cipher = AES.new(self.key, AES.MODE_CBC, iv)
        return self._unpad(cipher.decrypt(enc[AES.block_size:])).decode('utf-8')

    def _pad(self, s):
        return s + (self.bs - len(s) % self.bs) * chr(self.bs - len(s) % self.bs)

    @staticmethod
    def _unpad(s):
        return s[:-ord(s[len(s)-1:])]

operator = AESCipher(data_encryption_key)

The key used for encryption is a random long string.
Problem
Lets say the string (example name) i want to encrypt is ""Strah"". I get the folowing cipher text.
b'kA/Q5snPUHltzh3Kl8QMH/uTpfcjdXtvrx0JUrGv2tk+P86ERfkv0eTBV5j6MThkKplLLcn4f1Ei4Q1gT/FcVx+PhEnqczKhuvLzrLHYlQ4='

But if the name includes some special characters like č,š or ž and i want to encrypt a name like ""Štrah"" i will get the following error:
ValueError: Input strings must be a multiple of 16 in length

So the question is, what should I do to encrypt strings with special characters.
","The problem here is that the cipher internally operates on bytes, but you're giving it a string. You're padding the string to a multiple of 16, but when that string is encoded to bytes, it's no longer a multiple a 16.
>>> text = 'Štrah'
>>> padded = AESCipher('')._pad(raw)
>>> len(padded)
64
>>> len(padded.encode('utf8'))
65


The solution is to encode the string yourself instead of letting the cipher do it for you. You have to make 2 small changes:
def encrypt(self, raw):
    raw = raw.encode('utf8')  # encode to bytes here
    raw = self._pad(raw)
    iv = Random.new().read(AES.block_size)
    cipher = AES.new(self.key, AES.MODE_CBC, iv)
    return base64.b64encode(iv + cipher.encrypt(raw))

def _pad(self, s):
    # pad with bytes instead of str
    return s + (self.bs - len(s) % self.bs) * \
           chr(self.bs - len(s) % self.bs).encode('utf8')

","669","<python><encryption><aes><pycrypto>","1","3","1","2018-02-03 15:49:24","48599154","0","0","","","","2018-02-03 09:03:26",""
"46265015","How to RSA encode large data in python 3","I try to encrypt data with python3.x using pycrypto library. It works fine for short data but not for long arrays. How can I encrypt long data? Should I write a wrapper to split data smaller chunks? Or is there any other crypto library that can handle long data?
from Crypto.PublicKey import RSA
from Crypto import Random

random_generator = Random.new().read
key = RSA.generate(1024, random_generator)
publickey = key.publickey() 

""""""
Shorter (128 bytes)
""""""
msg = b'abcd'*32
print(msg)          # b'abcdabcdabcd...
enc=publickey.encrypt(msg, 32)
print(enc)          # Depends on key. Ex.: (b""hd\n\xbb\xe4\x8b...
dec=key.decrypt(enc)
print(dec)          # b'abcdabcdabcdabcda...

if msg==dec:        # TRUE
    print('TRUE')
else:
    print('FALSE')

""""""
LONGER (132 bytes)
""""""
msg = b'abcd'*33
print(msg)          # b'abcdabcdabcd...
enc=publickey.encrypt(msg, 32)
print(enc)          # Depends on key. Ex.: (b'\xa2J1;\xd4`\xc5i\x...   
dec=key.decrypt(enc)
print(dec)          # Depends on key. Ex.: b'|*\xb85\\B\\r2\xea\...   

if msg==dec:        # FALSE
    print('TRUE')
else:
    print('FALSE')

","This is not the exact answer for the original question but this solved my problem:
Based on https://security.stackexchange.com/a/10953 

... public-key cryptography is expensive for large messages; the public key algorithm is only used to encrypt the symmetric key and to sign a digest of the file.

So it is not recommended to encrypt large data/files using RSA. Use AES instead:
from Crypto.Cipher import AES
obj = AES.new('This is a key123', AES.MODE_CBC, 'This is an IV456')
message = ""The answer is no""*32
ciphertext = obj.encrypt(message)
print(ciphertext)
# '\xd6\x83\x8dd!VT\x92\xaa`A\x05\xe0\x9b\x8b\xf1'
obj2 = AES.new('This is a key123', AES.MODE_CBC, 'This is an IV456')
print(obj2.decrypt(ciphertext))
# 'The answer is no'

","667","<python-3.x><large-files><pycrypto>","0","0","1","2017-09-17 20:10:44","46268415","0","","","","","2017-09-17 14:12:23",""
"38840305","Django PyCrypto - Save Encrypted String to Database Bad Unicode Data","I'm working with PyCrypto in Django and I need to encrypt a string using the user's secret key they made themselves. I successfully wrote an encryption method as follows:
from Crypto.Cipher import AES
from Crypto.Random import get_random_string

def encrypt(value, key):
    """"""
    Return an encryption of value under key, as well as IV.
    Pads value with extra bytes to make it multiple of 16.
    """"""
    extra = 16 - (len(value) % 16)
    data = value + chr(extra) * extra
    iv = get_random_bytes(16)
    encryption_suite = AES.new(key, AES.MODE_CBC, iv)
    cipher_text = encryption_suite.encrypt(data)
    return cipher_text, iv

Why am I not using Django's encryptions? Because there is a client application that is NOT written in Django (and won't ever be) that accepts the encrypted value the user stored previously and decrypts it once the user enters their secret key.
Problem is that I can't seem to save the encrypted value to the database for the User model. For example:
user = User.objects.get(id=user_id)
cipher, iv = encrypt(user_value, user_key)
user.secret_value = cipher
user.iv = iv
user.save()

This results in this error:
Warning: Incorrect string value: '\xE7\xAA\x13\x036\xC8...' for column 'iv' at row 1 
(same error for secret_value)
I know this must be something to do with improper encoding. What's the right way to go about fixing this? Should I convert each byte into a string character?
Thanks.
","I guess you're trying to save binary data into CharFields. Either change field types of user.iv and user.secret_value to BinaryField, or encode these values using for example base64 encoder.
","655","<python><django><unicode><pycrypto>","0","1","1","2016-08-09 01:16:27","38840609","0","","","","","2016-08-09 00:23:12",""
"19282001","Pycrypto OpenPGP encryption: Why is there a 16byte limit to the key, what part of the key do I provide to hit 16 bytes?","I'm trying to encrypt a file using OpenPGP in python via the pycrypto application. I've been following the sample provided in their code here: https://github.com/dlitz/pycrypto/blob/master/lib/Crypto/Cipher/CAST.py
So I'm using mode.openPGP, but I can't seem to encrypt anything using a public key. My public key is well over the 16byte limit they specify (and any generation I've seen is over this limit as well). Is there a different value I'm supposed to use here, like the fingerprint ID? 
I'm trying to read the contents of a file, encrypt it with a key, then print it into a new file to be sent (both will be deleted later on).
My code is as follows:
iv = CryptoRandom.new().read(CAST.block_size)
cipher = CAST.new(public_key, CAST.MODE_OPENPGP, iv)
file = open(filename)
contents = ''.join(file.readlines())
encrypted_contents = cipher.encrypt(contents)
encrypted_filename = filename.replace('/tmp/', '/tmp/encrypted')
encrypted_filename = encrypted_filename.replace('.csv', '.asc')
encrypted_file = open(encrypted_filename, 'w')
encrypted_file.write(encrypted_contents)
return encrypted_filename

","I think you may be misunderstanding the algorithm you're using here. CAST is a symmetric-key algorithm, but whilst this implementation has an ""OpenPGP mode"", that doesn't mean that you simply pass your public key to it.
You should be generating a unique 16 byte key and passing that to CAST.new(). You would then generally encrypt that randomly-generated key using the public-key, and store/transmit the cipher text, and encrypted random-key together. The decryption process would decrypt the random-key using the private-key, then use the decrypted random-key to decrypt the cipher text.
","655","<python><encryption><pycrypto><openpgp>","1","0","1","2013-10-10 17:17:09","19297454","0","","695343","","2013-10-10 17:17:09","2013-10-09 20:28:56",""
"45032828","pycrypto package installation error - On Linux","Finding the below issue while installing pycrypto 2.6.1 package on linux machine.Installed python version - 3.4.3
python setup.py install
running install
running build
running build_py
running build_ext
running build_configure
configure: line 18: $'\r': command not found
configure: line 33: syntax error near unexpected token `newline'
'onfigure: line 33: `     ;;
Traceback (most recent call last):
  File ""setup.py"", line 456, in <module>
    core.setup(**kw)
    cmd_obj.run()
  File ""setup.py"", line 251, in run
    self.run_command(cmd_name)
  File ""/usr/software/lib/python3.4/distutils/cmd.py"", line 313, in run_command
    self.distribution.run_command(command)
  File ""/usr/software/lib/python3.4/distutils/dist.py"", line 974, in run_command
    cmd_obj.run()
  File ""setup.py"", line 278, in run
    raise RuntimeError(""autoconf error"")
RuntimeError: autoconf error

Can any one help me resolving this?
","","655","<python><linux><pycrypto>","1","","0","2017-07-11 12:19:06","","8","","4715839","","2017-07-11 12:19:06","2017-07-11 11:08:00",""
"9361094","Nested import errors","Running python version 2.4.3. I am using python-amazon-product-api. However in api.py the following lines of code is causing problem:
if sys.version_info[:2] > (2, 4): # pragma: no cover
    from urllib2 import quote
    from hashlib import sha256 # pylint: disable-msg=E0611
else:
    from urllib import quote
    from Crypto.Hash import SHA256 as sha256

As my version is 2.4.3 it go in to else and try to import Crypto. So i downloaded that but i got import error in SHA256.py cannot import _SHA256. There is no _SHA256.py in library. After all my unsuccessful efforts i quit to use pyCrypto and i try to use standalone hashlib library. So i modified else part in api.py:
else:
    from hashlib import hashlib
    sha256 = hashlib.sha256()

Then again while importing hashlib i got this import error.
File ""C:\Python24\lib\site-packages\hashlib.py"", line 63, in __get_builtin_constructor
    import _md5
ImportError: DLL load failed: The specified module could not be found.

I posted similar question yesterday but not able to find the exact solution that is why i am posting this again. I desperately need a solution :(
","Several questions based on what you've said above.
1) Why are you using an ancient version of Python?  Install Python 2.7 and be happier!
2) assuming you're unfortunately stuck with 2.4 for some unknown reason... it appears that Python is unable to find any of the binary extension module (.pyd) files that came with the hashlib package you installed.  Did you compile your own hashlib or install a binary version?
If so, make sure the _hashlib.pyd file is put somewhere in the PYTHONPATH or sys.path.
I haven't had a windows installer with precompiled binaries for hashlib up on http://code.krypto.org/python/hashlib in years as I lack the ability to build and test it... and Python 2.4 is so old that I assume anyone with the ability to install a binary on their system can just install a modern version of Python itself.
","645","<python><pycrypto><python-2.4><amazon-product-api><hashlib>","0","0","1","2012-02-21 16:33:31","9381307","1","","-1","","2017-05-23 11:56:41","2012-02-20 12:27:08",""
"34774612","How to write encrypted data in a file using pycrypto?","I have been using RSA Public/Private Key Pair to encrpyt data:
random_generator = Random.new().read
key = RSA.generate(1024, random_generator)
publickey = key.publickey()

and write it to a file. The probelm I am getting is when I read any file in bytes:
f = open('test','rb')
d = f.read()
enc_data = publickey.encrypt(d,32)

I am getting the encrypted data as a tuple
>>> type(enc_data)
>>> <class 'tuple'>

The problem is when I try to write the encrypted text in any newly created file I am not able to do it in any mode
o = open('out','wb') #same with 'w' mode
o.write(enc_data)

It displays the error:
Traceback (most recent call last):
File ""<pyshell#103>"", line 1, in <module>
o.write(enc_data)
TypeError: must be str, not tuple

How to get my encrypted data saved?
","According to these docs, the encrypt function returns a tuple, where the second value is always None. I'm assuming this is to support backwards compatibility. Try:
enc_data, other =  publickey.encrypt(d,32)

Then write enc_data (this is called ""ciphertext"")
In the future, it would be a good idea to explicitly say what library you are using. Also emcrytp... 
","642","<python><pycrypto>","0","0","1","2016-01-13 20:28:14","","2","","5612751","","2016-01-13 20:28:14","2016-01-13 18:42:52","2016-01-13 19:27:02"
"31599232","Why am I still getting the error: ""CryptoUnavailableError: No crypto library available"" in Python?","I am trying to make an API call through Python to Google's DFA and am using their suggested code. However, it is still not saying the credentials object is defined and throws the error:
Traceback (most recent call last):
  File ""<input>"", line 2, in <module>
  File ""C:\Python27\lib\site-packages\oauth2client\util.py"", line 137, in positional_wrapper
    return wrapped(*args, **kwargs)
  File ""C:\Python27\lib\site-packages\oauth2client\client.py"", line 1502, in __init__
    _RequireCryptoOrDie()
  File ""C:\Python27\lib\site-packages\oauth2client\client.py"", line 1456, in _RequireCryptoOrDie
    raise CryptoUnavailableError('No crypto library available')
CryptoUnavailableError: No crypto library available

I have installed the pyOpenSSL library, and pycrypto library with the VCForPython compiler. I have also managed to edit all 3 app.yaml files in the LiClipse client to append: 
libraries:
- name: pycrypto
  version: ""latest""

onto it. 
This is what my code looks like so far with arbitrary credentials:
import json    
import sys    
import apiclient    
from oauth2client import crypt    
import ssl    
import urllib2    
from OpenSSL import crypto    


HAS_OPENSSL = False    
HAS_CRYPTO = False    
try:    
  from oauth2client import crypt    
  HAS_CRYPTO = True    
  if crypt.OpenSSLVerifier is not None:    
    HAS_OPENSSL = True    
except ImportError:    
  pass


from oauth2client.client import SignedJwtAssertionCredentials    

client_email = 'example.apps.googleusercontent.com'    

with open(""C:\My Project-1234.p12"") as f:    
        private_key = f.read()     


credentials = SignedJwtAssertionCredentials(client_email, private_key,
    'https://www.googleapis.com/auth/dfareporting')    

from httplib2 import Http

I realize there is probably some excess in the beginning. I have not been able to get past this step.
I feel like I have tried everything and am still getting thrown the 'no crypto library' error.
Can anyone help? THANK YOU!
PS - I am using Windows 7 and Python 2.7 and LiClipse. 
","The above method was to make an API call as a 'service' Google account. I retried as an 'installed application' account with new credentials and a different way to make the API call which did not require any crypto type libraries. 
","642","<python><python-2.7><google-api><pycrypto><pyopenssl>","2","0","1","2015-07-25 15:12:25","","3","","","","","2015-07-23 22:36:58",""
"17197446","Security in Android - Google app engine system","So i have an android app, and a google app engine server written in python.
The android app needs to send some sensible information to the server, and the way I do that is by doing an http post.
Now i have been thinking about encrypting the data in android before sending it, and decrypting it once it is on the gae server.
This is how i encrypt and decrypt in java :
private static final String ALGO = ""AES"";



public static String encrypt(String Data) throws Exception {
        Key key = generateKey();
        Cipher c = Cipher.getInstance(ALGO);
        c.init(Cipher.ENCRYPT_MODE, key);
        byte[] encVal = c.doFinal(Data.getBytes());
     //   String encryptedValue = new BASE64Encoder().encode(encVal);

        byte[] decoded = Base64.encodeBase64(encVal);

        return (new String(decoded, ""UTF-8"") + ""\n"");
    }

public static String decrypt(String encryptedData) throws Exception {
        Key key = generateKey();
        Cipher c = Cipher.getInstance(ALGO);
        c.init(Cipher.DECRYPT_MODE, key);
        byte[] decordedValue =Base64.decodeBase64(encryptedData);
        byte[] decValue = c.doFinal(decordedValue);
        String decryptedValue = new String(decValue);

        return decryptedValue;

    }

    private static Key generateKey() throws Exception {
        Key key = new SecretKeySpec(Constant.keyValue, ALGO);
        return key;
    }

And this is how i try to decrypt on the server (i don't know yet how to do the encryption..maybe you guys can help with that too)
def decrypt(value):
    key = b'1234567891234567'

    cipher = AES.new(key, AES.MODE_ECB)
    msg = cipher.decrypt(value)

    return msg

As i looked in the logs, the string test that i get is : xVF79DzOplxBTMCwAx+hoeDJhyhifPZEoACQJcFhrXA= and because it is not a multiple of 16 (idk why, i guess this is because of the java encryption) i get the error
ValueError: Input strings must be a multiple of 16 in lenght
What am i doing wrong?
","This string ""xVF79DzOplxBTMCwAx+hoeDJhyhifPZEoACQJcFhrXA="" is a base64-encoded value.  
https://en.wikipedia.org/wiki/Base64
Base64 encoding is widely used lots of applications, it's a good way to encode binary data into text.  If you're looking at a long encoded value, the ""="" at the end can be a good indicator of base64 encoding.  
In your python code you probably need to base64 decode the data before handing it to the decryption function.
I have two recommendations:

If crypto isn't a comfort zone for you, consult with someone who is good in this area for your project.
Be aware that embedding a symmetric encryption key in an Android app that you distribute is a bad idea.  Anyone that can get a copy of your app can extract that key and use it to decrypt or spoof your messages. 

","640","<java><android><python><google-app-engine><pycrypto>","1","0","2","2013-06-19 18:40:26","17197665","3","4","","","","2013-06-19 17:21:04",""
"17197446","Security in Android - Google app engine system","So i have an android app, and a google app engine server written in python.
The android app needs to send some sensible information to the server, and the way I do that is by doing an http post.
Now i have been thinking about encrypting the data in android before sending it, and decrypting it once it is on the gae server.
This is how i encrypt and decrypt in java :
private static final String ALGO = ""AES"";



public static String encrypt(String Data) throws Exception {
        Key key = generateKey();
        Cipher c = Cipher.getInstance(ALGO);
        c.init(Cipher.ENCRYPT_MODE, key);
        byte[] encVal = c.doFinal(Data.getBytes());
     //   String encryptedValue = new BASE64Encoder().encode(encVal);

        byte[] decoded = Base64.encodeBase64(encVal);

        return (new String(decoded, ""UTF-8"") + ""\n"");
    }

public static String decrypt(String encryptedData) throws Exception {
        Key key = generateKey();
        Cipher c = Cipher.getInstance(ALGO);
        c.init(Cipher.DECRYPT_MODE, key);
        byte[] decordedValue =Base64.decodeBase64(encryptedData);
        byte[] decValue = c.doFinal(decordedValue);
        String decryptedValue = new String(decValue);

        return decryptedValue;

    }

    private static Key generateKey() throws Exception {
        Key key = new SecretKeySpec(Constant.keyValue, ALGO);
        return key;
    }

And this is how i try to decrypt on the server (i don't know yet how to do the encryption..maybe you guys can help with that too)
def decrypt(value):
    key = b'1234567891234567'

    cipher = AES.new(key, AES.MODE_ECB)
    msg = cipher.decrypt(value)

    return msg

As i looked in the logs, the string test that i get is : xVF79DzOplxBTMCwAx+hoeDJhyhifPZEoACQJcFhrXA= and because it is not a multiple of 16 (idk why, i guess this is because of the java encryption) i get the error
ValueError: Input strings must be a multiple of 16 in lenght
What am i doing wrong?
","Why are you not using ssl (aka https)? That should provide all the encryption needed to transport data securely and privately between the phone and App Engine.
The basics of it: Instead of sending data to http://yourapp.appspot.com/, send it to https://yourapp.appspot.com/.
For a complete secure and authenticated channel between App Engine and Android, you can use Google Cloud Endpoints. It will even generate the Android side code to call it.
Java:

https://developers.google.com/appengine/docs/java/endpoints/
https://developers.google.com/appengine/docs/java/endpoints/consume_android

Python:

https://developers.google.com/appengine/docs/python/endpoints/
https://developers.google.com/appengine/docs/python/endpoints/consume_android

For a longer show and tell, check the IO 13 talk: https://www.youtube.com/watch?v=v5u_Owtbfew
","640","<java><android><python><google-app-engine><pycrypto>","1","2","2","2013-06-19 18:40:26","17197665","3","4","","","","2013-06-19 17:21:04",""
"42556856","Python encrypt/decrypt txt with a given password","I have a custom account manager. At the moment I store the whole information in a single txt document. I'm trying to figure out how to encrypt all the whole txt with a password introduced by user. 
I've seen PyCrypto but I have so many problems because there must be everything 16-bytes multiple.
Can someone tell me how to do that?
Thanks.
","I used this as solution:
from simplecrypt import encrypt, decrypt
ciphertext = encrypt('password', plaintext)
plaintext = decrypt('password', ciphertext)

","639","<python><encryption><pycrypto>","-1","0","1","2017-03-02 17:10:59","42561718","7","","","","","2017-03-02 13:31:04",""
"40615753","Need advice about AES CTR cipher python vs. Java","I'm working on project when some arbitrary data are encrypted using Python simple-crypt (source here) and same encrypted data are then used in java application.
I would like to understand conceptual difference between JSSE and Pycrypto.
This is python part doing encryption (source):
counter = Counter.new(HALF_BLOCK, prefix=salt[:HALF_BLOCK//8])
cipher = AES.new(cipher_key, AES.MODE_CTR, counter=counter)

This is my attempt for java re-implementation of same operation:
SecretKeySpec key = new SecretKeySpec(cipher_key, ""AES"");
IvParameterSpec ivSpec = new IvParameterSpec(salt, 0, HALF_BLOCK / 8);
Cipher cipher = Cipher.getInstance(""AES/CTR/NoPadding"", ""BC"");
cipher.init(Cipher.ENCRYPT_MODE, key, ivSpec);

Problem here is that initialization of java Cipher throw exception:
java.security.InvalidAlgorithmParameterException: IV must be 16 bytes long.
    at org.bouncycastle.jce.provider.JCEBlockCipher.engineInit(Unknown Source)
    at javax.crypto.Cipher.init(Cipher.java:1394)
    at javax.crypto.Cipher.init(Cipher.java:1327)

Value of HALF_BLOCK is 64.
So question is, how does python's AES implementation works with HALF_BLOCK/8 key size and java's not?
Thanks!
","The nonce (the ""left side"" of the IV; the ""right"" being the sequential counter) should be transported alongside the cipher text as the IV. There is no need to keep the nonce secret. It just must not be re-used for another message encrypted by the same key.  
It appears the Python code is generating a new Counter which is 64 bits long and sets the prefix (I'm assuming the nonce value) to be the first 8 bytes of the salt variable. It likely (huge assumption here because I don't have access to the Python code) starts the actual counter value at 0x00 * 8, so your initial IV would be:
salt = '#Eg����' # => UTF-8 encoding of 0x0123456789ABCDEF (not familiar enough with Python for the actual expression)
# Really may be misunderstanding, but as the AES IV must be 16 bytes, I imagine the terminology here is prefix = 8 bytes, sequence = 8 bytes
counter = Counter.new(HALF_BLOCK, prefix=salt[:HALF_BLOCK]) # => '0x01234567 89ABCDEF 00000000 00000000'
# Perform one encryption
counter # => '0x01234567 89ABCDEF 00000000 00000001'
# etc.

To perform the same operation in Java, it should be as simple as initializing your IvParameterSpec to the same as above (i.e. right-pad the first 8 bytes of the salt with 0 to 16 bytes).
// Intentionally verbose for demonstration; this can obviously be compacted
byte[] salt = org.bouncycastle.util.encoders.Hex.decode(""0123456789ABCDEF"");
byte[] nonceAndCounter = new byte[16];
System.arraycopy(salt, 0, nonceAndCounter, 0, ((int) (HALF_BLOCK / 8)));
IvParameterSpec iv = new IvParameterSpec(nonceAndCounter);

Here's a full test case which asserts that the encrypt and decrypt are internally compatible; you could also run this with data from the Python side to verify. 
    @Test
    public void testPythonCompatibility() {
        // Arrange
        byte[] cipher_key = org.bouncycastle.util.encoders.Hex.decode(""0123456789ABCDEFFEDCBA9876543210"");
        final int HALF_BLOCK = 64;
        byte[] salt = org.bouncycastle.util.encoders.Hex.decode(""0123456789ABCDEF"");
        byte[] nonceAndCounter = new byte[16];
        System.arraycopy(salt, 0, nonceAndCounter, 0, ((int) (HALF_BLOCK / 8)));
        IvParameterSpec iv = new IvParameterSpec(nonceAndCounter);
        Cipher cipher = Cipher.getInstance(""AES/CTR/NoPadding"", ""BC"");
        SecretKeySpec key = new SecretKeySpec(cipher_key, ""AES"");
        cipher.init(Cipher.ENCRYPT_MODE, key, iv);

        final String plaintext = ""This is a plaintext message."";

        // Act
        byte[] cipherBytes = cipher.doFinal(plaintext.getBytes(StandardCharsets.UTF_8));

        // Assert
        cipher.init(Cipher.DECRYPT_MODE, key, iv);
        byte[] recoveredBytes = cipher.doFinal(cipherBytes);
        String recovered = new String(recoveredBytes, StandardCharsets.UTF_8);
        assert recovered.equals(plaintext);
    }

","639","<java><aes><pycrypto><python-simple-crypt>","1","2","1","2016-12-07 04:28:00","41009420","2","3","","","","2016-11-15 17:10:07",""
"39066220","How to decrypt a RC2 ciphertext?","Python 3.5, pycrypto 2.7a1, Windows, RC2 ciphering
Example:
print('Введите текс, который хотите зашифровать:')
text = input()

with open('plaintext.txt', 'w') as f:
    f.write(text)

key = os.urandom(32)

with open('rc2key.bin', 'wb') as keyfile:
    keyfile.write(key)

iv = Random.new().read(ARC2.block_size)

cipher = ARC2.new(key, ARC2.MODE_CFB, iv)
ciphertext = iv + cipher.encrypt(bytes(text, ""utf-8""))

with open('iv.bin', 'wb') as f:
    f.write(iv)

with open('ciphertext.bin', 'wb') as f:
    f.write(ciphertext)

print(ciphertext.decode(""cp1251""))

And I'd like to know how can I decrypt this text, I tried, but couldn't do it. 
My try to decrypt:
os.system('cls')
print('Дешифруем значит')

with open('ciphertext.bin', 'rb') as f:
    ciphertext = f.read()

with open('rc2key.bin', 'rb') as f:
    key = f.read()

with open('iv.bin', 'rb') as f:
    iv = f.read()

ciphertext = ciphertext.decode('cp1251')
iv = iv.decode('cp1251')

text =  ciphertext.replace(iv, '')
text = cipher.decrypt(text)

with open('plaintext.txt', 'w') as f:
    f.write(text)

print(text.decode(""ascii""))

But I understood that I need cipher variable, and I can't save it to .txt or .bin file, so that why I'm asking for help. 
","The IV is a non-secret value and is commonly written in front of the ciphertext. Since, you've done that already, you don't need to write an additional IV file. RC2 has a block size of 64 bit, so the IV will always be 8 byte long.
with open('ciphertext.bin', 'rb') as f:
    ciphertext = f.read()

with open('rc2key.bin', 'rb') as f:
    key = f.read()

iv = ciphertext[:ARC2.block_size]
ciphertext = ciphertext[ARC2.block_size:]

cipher = ARC2.new(key, ARC2.MODE_CFB, iv)
text = cipher.decrypt(ciphertext).decode(""utf-8"")

with open('plaintext.txt', 'w') as f:
    f.write(text)

print(text)

Other problems:

Don't simply decode binary data such as ciphertexts, keys or IV, because those are most likely not printable.
Don't re-use the same cipher object if you're doing something different. The decryption needs a freshly initialized ARC2 object.

","638","<python><python-3.x><encryption><pycrypto><rc2-cipher>","-1","0","1","2016-08-21 16:47:45","39066539","2","","1816580","","2016-08-21 16:47:45","2016-08-21 16:09:47",""
"25608798","Block Size relation in AES PyCrypto using Cipher block chaining","I am using numpy to create array of strings or bits in the following code and have tiny methods for conversions.
What I want to know is, given the plaintext, is it possible given a block_size = 128,
that full text can be decrypted using AES standard using ECB in the following code?
from operator import add
from itertools import imap, izip
import numpy as np

from Crypto.Cipher import AES

ASCII_BITS = 8

XOR = lambda k,m: k ^ m

#converts a string to list of binary repr of char
mbin = lambda word: imap(np.binary_repr,imap(ord, word))
#concatenates list of N ASCII_BIT binary repr of char to one string
string_to_bits = lambda word: reduce(add,(i.zfill(ASCII_BITS) for i in mbin(word)))

#Converts byte string to int to ascii character
bits_to_string = lambda bitstr: ''.join([chr(int(bitstr[i:i+ASCII_BITS], 2)) for i in xrange(0,len(bitstr), ASCII_BITS)])

#Convert byte string to 1D matrix of bits
strbits_to_bitmat = lambda X: np.matrix(list(X), dtype=int)
#Convert 1D matrix of bits to byte string
bitmat_to_strbits = lambda X: ''.join((np.matrix(X, dtype=str)).tolist()[0])

def arr_ascii_bin_strchops(string, block_size):
    '''Array of ASCII Binary String Chops of size block_size'''
    return (string[i:i+block_size] for i in xrange(0,len(string),block_size))

these are the standard conversion function im using.
arr_ascii_bin_strchops: chops a bit string into list of block_size length bit strings
aes encoder and decoder
def aes_encoder(block, key):
    #block = pad_bits_append(block, len(key))
    maxibit = abs(len(block)-len(key))
    block += ''.zfill(maxibit)
    # the pycrypto library expects the key and block in 8 bit ascii
    # encoded strings so we have to convert from the bit string
    block = bits_to_string(block)
    key = bits_to_string(key)
    ecb = AES.new(key, AES.MODE_ECB)
    return string_to_bits(ecb.encrypt(block))

def aes_decoder(block, key):
    #block = pad_bits_append(block, len(key))
    maxibit = abs(len(block)-len(key))
    block += ''.zfill(maxibit)
    # the pycrypto library expects the key and block in 8 bit ascii
    # encoded strings so we have to convert from the bit string
    block = bits_to_string(block)
    key = bits_to_string(key)
    #AES.new( self.key, AES.MODE_CBC, iv )
    ecb = AES.new(key, AES.MODE_ECB)
    return string_to_bits(ecb.decrypt(block))

CBC Encryption with its dependency method
def crypto_cal(m,k,cminus,block_size,block_enc):
    '''
    for Cipher Block Chaining - Main Block_Enc(M^IV,Key)
    '''
    m += ''.zfill(block_size - len(m))
    k += ''.zfill(block_size - len(k))
    cminus += ''.zfill(block_size - len(cminus))

    cminus = np.matrix(list(cminus), dtype=int)
    m = np.matrix(list(m), dtype=int)
    #convert 1D XORed matrix of int to byte string
    xor = ''.join(np.matrix(XOR(cminus,m),dtype=str).tolist()[0])
    cminus = block_enc(xor,k)  #xor = iv ^ mbloc0
    return cminus

def cipher_block_chaining(plaintext, key, init_vec, block_size, block_enc):
    """"""Return the cbc encoding of `plaintext`

    Args:
        plaintext: bits to be encoded
        key: bits used as key for the block encoder
            init_vec: bits used as the initalization vector for
                  the block encoder
        block_size: size of the block used by `block_enc`
        block_enc: function that encodes a block using `key`
    """"""
    cipher = []
    key = string_to_bits(key)
    iv = string_to_bits(init_vec)
    plaintext = string_to_bits(plaintext)

    mbloc = arr_ascii_bin_strchops(plaintext,block_size)
    kbloc = arr_ascii_bin_strchops(key,block_size)
    iv = next(arr_ascii_bin_strchops(iv,block_size))
    mbloc0 = next(mbloc)
    kbloc0 = next(kbloc)
    cminus = crypto_cal(mbloc0,kbloc0,iv,block_size,block_enc)
    cipher.append(cminus)

    for m,k in izip(mbloc, kbloc):
        assert len(cminus) == block_size  #len(''.zfill(block_size - len(cminus)))
        cminus = crypto_cal(m,k,cminus,block_size,block_enc)
        cipher.append(cminus)
    return ''.join(cipher)

CBC Decryption with its dependency method
def decrypto_cal(cipher_msg,key,cminus,block_size,block_enc):
    key += ''.zfill(block_size - len(key))
    cminus += ''.zfill(block_size - len(cminus))

    return bitmat_to_strbits(XOR(strbits_to_bitmat(block_enc(cipher_msg,key)),\
    strbits_to_bitmat(cminus)))

def cipher_block_decrypt(cipher, key, init_vec, block_size, block_enc):
    '''
    Return the cbc decoding of `cipher`

    Args:
        cipher: bit string to be decoded
        key: bits used as symmetric key for the block decoder
            init_vec: bits used as the initalization vector for
                  the block encoder/decoder
        block_size: size of the block used by `block_enc`
        block_enc: function that decodes a block using `key`
    '''
    cipher_blocks = []
    key = string_to_bits(key)
    iv = string_to_bits(init_vec)
    cipher = string_to_bits(cipher)
    #print ""init vec {}"".format(init_vec)
    iv = next(arr_ascii_bin_strchops(iv,block_size))
    kbloc = (arr_ascii_bin_strchops(key,block_size))
    cipher_chops = (arr_ascii_bin_strchops(cipher, block_size))
    lst = zip(cipher_chops, kbloc)
    cipher_blocks.extend([decrypto_cal(cipher_msg,key,lst[num-1][0],block_size,block_enc)\
     if num > 0 else decrypto_cal(cipher_msg,key,iv,block_size,block_enc) \
     for num,(cipher_msg,key) in enumerate(lst)])

    return ''.join(cipher_blocks)


def test():
    block_size = 256
    key = '4h8f.093mJo:*9#$'
    iv = '89JIlkj3$%0lkjdg'
    plaintext = ""One if by land; two if by sea""
    cipher = (cipher_block_chaining(plaintext, key, iv, block_size, aes_encoder))
    cipher = bits_to_string(cipher)
    print ""cipher {}"".format(cipher)
    msg_bits = cipher_block_decrypt(cipher, key, iv, block_size, aes_decoder)
    p = bits_to_string(msg_bits)
    print p
    return

it works using 256 block size and im able to decrypt back the whole plaintext but using 128, only

One if by land;

gets decrypted.
Why is that when im only slicing bit strings of that size? It should not limit the string length.
Is there some method that im using that is limiting the total number of array of of strings?
","","638","<python><python-2.7><pycrypto>","0","","0","2014-09-01 15:13:12","","2","1","","","","2014-09-01 15:13:12",""
"2798998","using crypto++ on iphone sdk with pycrypto on app engine","I'm trying to encrypt http requests using crypto++ and decrypt them with pycrypto on the app engine server end. Using Arc4 encryption, I can successfully encrypt and decrypt on the iphone end but when I try decrypting on app engine, the result is garbled.  The ciphertext after encrypting on the client is the same as the text received on the server when I check logging, so if they are visually the same, why would decrypting fail? 
I thought maybe it has something to do with the encoding of the NSString, as I find I need to call encode() on the cipher on the server end before decrypting just to avoid decrypt() failing on it attempting to encode the cipher in ascii. I have a separate post that delves a bit into this. Can anyone offer some advice?
crypto++ / pycrypto with google app engine
Update:
I have discovered that the ciphertext resulting from encrypting in C with Crypto++ is not the same as the ciphertext from encrypting in python with PyCrypto.  Could there be something I'm doing wrong with initializing the keys?  I do something like:
    ARC4::Encryption enc(""a"");

in C. And in python I do:
testobj=ARC4.new('a')

The %-encoded resulting cipher is different in C than in python.  I noticed that in C, I can pass a 2nd parameter for keylength, which I guessed should be 1 for ""a"", resulting in a different cipher than when putting no parameter.  The %-encoded result was still different from the python encoding, though.
Does anything look particularly amiss with my init perhaps?
","I've discovered that the problem was not with the init of either crypto impl but rather mistakenly trying to stuff the encrypted cipher text into an NSString which cant simply take raw binary data with no particular encoding. The trick was to encode the data in base64 or base16 so that it is is readable, then use unhexlify on the server end before decrypting. 
","627","<iphone><objective-c><google-app-engine><crypto++><pycrypto>","1","0","1","2010-05-12 03:32:27","2815965","3","","-1","","2017-05-23 12:30:45","2010-05-09 20:05:10",""
"53019859","I tried to download PyCrypto for Python 3.7 but failed","I ran command prompt as administrator then typed pip install pycrypto
and got this error message:

Command """"c:\program files (x86)\python37-32\python.exe"" -u -c ""import
  setuptools,
  tokenize;file='C:\Users\Berkay\AppData\Local\Temp\pip-install-yikt7auh\pycrypto\setup.py';f=getattr(tokenize,
  'open', open)(file);code=f.read().replace('\r\n',
  '\n');f.close();exec(compile(code, file, 'exec'))"" install
  --record C:\Users\Berkay\AppData\Local\Temp\pip-record-rjhqqr19\install-record.txt
  --single-version-externally-managed --compile"" failed with error code 1 in C:\Users\Berkay\AppData\Local\Temp\pip-install-yikt7auh\pycrypto\

","For easily installing python packages on windows install miniconda. 
1.Open search and search for anaconda as follows:

2.Click on Anaconda Prompt, this will open a Anaconda command line for windows 
 as given below:


For installing pycrypto write the command 
conda install -c anaconda pycrypto

as given here. In this way pycrypto is installed using conda in windows environment:

To execute a script using anaconda in windows, first get the current working 
directory used by conda on your system using:
 import os
 os.getcwd()

This will give the current working directory.

Then come out of python compiler into anaconda command line using:
 import sys
 sys.exit()


Put your code in current working directory as shown below:

Now execute this code using anaconda command line as shown below:


This concludes the tutorial for installing packages and compiling python code using conda on windows.
","626","<python><pycrypto>","-2","0","1","2018-10-27 15:35:52","53020346","1","","7992142","","2018-10-27 09:10:50","2018-10-27 07:55:01",""
"41658258","ValueError when reading RSA key from .PEM file using ImportKey","This documentation of PyCrypto for RSA
https://www.dlitz.net/software/pycrypto/api/current/Crypto.PublicKey.RSA-module.html mentions this how we are supposed to write and read keys to and from .PEM :
from Crypto.PublicKey import RSA

key = RSA.generate(2048)
f = open('mykey.pem','w')
f.write(RSA.exportKey('PEM'))
f.close()
...
f = open('mykey.pem','r')
key = RSA.importKey(f.read())

and this is how i have done it.
random_generator = Random.new().read
rsakey = RSA.generate(1024, random_generator)
f = open(email + '.pem', 'w')
cipher = PKCS1_OAEP.new(rsakey.publickey())
f.write(str(rsakey.exportKey(""PEM"")))
f.write(str(rsakey.publickey().exportKey(""PEM"")))
...
f = open(receiver + '.pem', 'r')
key = RSA.importKey(f.read())
pubkey = key.publickey()
f.close()

but it returns this error: 
File ""/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Crypto/PublicKey/RSA.py"", line 682, in importKey
    raise ValueError(""RSA key format is not supported"")
ValueError: RSA key format is not supported

","writing the keys in ""wb"" mode solved the problem
random_generator = Random.new().read
rsakey = RSA.generate(1024, random_generator)
f = open(email + '.pem', 'wb')
cipher = PKCS1_OAEP.new(rsakey.publickey())
f.write(str(rsakey.exportKey(""PEM"")))
f.write(str(rsakey.publickey().exportKey(""PEM"")))
...
f = open(receiver + '.pem', 'r')
key = RSA.importKey(f.read())
pubkey = key.publickey()
f.close()

","624","<python><encryption><pycrypto>","0","1","1","2017-01-16 15:23:37","41679630","0","","3822467","","2017-01-15 05:59:29","2017-01-15 05:53:12",""
"31273823","ImportError: No module named 'Crypto' is occuring after installing packages also","After installing simpleCrypto and PyCrypto in windows... i am getting this error...
steps followed:
cd simplecryto/dist; python setup.py install
cd pycrypto/dist; python setup.py install
test.py:
from simplecrypt import encrypt, decrypt

ciphertext = encrypt(password, 'my secret message')
plaintext = decrypt(password, ciphertext)

python test.py
Traceback (most recent call last):
  File ""test.py"", line 1, in <module>
    from simplecrypt import encrypt, decrypt
  File ""C:\Python34\lib\site-packages\simplecrypt\__init__.py"", line 2, in <module>
    from Crypto.Cipher import AES
ImportError: No module named 'Crypto'

","I had to fix that with installing the module through an installer instead of the setup.py. Here's a link to the installer: http://www.voidspace.org.uk/downloads/pycrypto26/pycrypto-2.6.win32-py2.7.exe
","622","<python><python-3.4><importerror><pycrypto>","0","0","1","2015-10-20 20:14:39","","1","","3622","","2015-07-07 17:05:55","2015-07-07 16:04:26",""
"47563175","Pycrypto on RHEL Fails","I am trying to install pycrypto via pip. The installation fails with:
Command ""/usr/bin/python -u -c ""import setuptools, tokenize;__file__='/tmp/pip-build-zWtfwz/pycrypto/setup.py';f=getattr(tokenize, 'open', open)(__file__);code=f.read().replace('\r\n', '\n');f.close();exec(compile(code, __file__, 'exec'))"" install --record /tmp/pip-OrjLDy-record/install-record.txt --single-version-externally-managed --compile"" failed with error code 1 in /tmp/pip-build-zWtfwz/pycrypto/

I have found other posts that say I need to download pycrypto via yum, however, the package referenced doesn't seem to exist anymore - at least not by that name.
","I found the answer to my problem, for anyone who may find this in the future.
Further up in the log, I noticed:

configure: error: no acceptable C compiler found in $PATH

Per https://www.thelinuxfaq.com/74-error-no-acceptable-c-compiler-found-in-path-linux
I executed:
yum groupinstall ""Development tools""

and then
pip install pycrypto

Worked as expected.

Collecting pycrypto
    Using cached pycrypto-2.6.1.tar.gz
  Building wheels for collected packages: pycrypto
    Running setup.py bdist_wheel for pycrypto ... done
    Stored in directory: /root/.cache/pip/wheels/80/1f/94/f76e9746864f198eb0e304aeec319159fa41b082f61281ffce
  Successfully built pycrypto
  Installing collected packages: pycrypto
  Successfully installed pycrypto-2.6.1

","622","<pycrypto>","0","0","1","2017-11-30 18:01:17","47579841","0","","","","","2017-11-29 22:50:33",""
"24638786","Python AES Decryption Routine (Code Help)","I developed a code based on information available online regarding an AES Encryption and Decryption routine.
Language: Python 2.7.x
Complete Code - 
#!/usr/bin/python

import sys, os
import hashlib
import base64
from Crypto.Cipher import AES

## Variables in computation.
IV = u'1234567890123456'
BLOCK_SIZE = 32
INTERRUPT = u'\u0001'
PAD = u'\u0000'
SECRET = os.urandom(32)
filename=sys.argv[1]

def AddPadding(data, interrupt, pad, block_size):
   new_data = ''.join([data, interrupt])
   new_data_len = len(new_data)
   remaining_len = block_size - new_data_len
   to_pad_len = remaining_len % block_size
   pad_string = pad * to_pad_len
   return ''.join([new_data, pad_string])

def StripPadding(data, interrupt, pad):
   return data.rstrip(pad).rstrip(interrupt)

def encAES(cipher_code, file_data):
   data_padded = AddPadding(file_data, INTERRUPT, PAD, BLOCK_SIZE)
   encrypted = cipher_code.encrypt(data_padded)
   return encrypted

def decAES(cipher_code, file_data):
   decrypted  = cipher_code.decrypt(file_data)
   return StripPadding(decrypted, INTERRUPT, PAD)

def FileSave(fwname, fwdata):
   f = open(fwname, 'w')
   f.write(fwdata)
   f.close

def FileRead(frname):
   f = open(frname, 'rb')
   frdata = f.read()
   return frdata

cipher = AES.new(SECRET, AES.MODE_CBC, IV)

## Encryption
data2encrypt = base64.b64encode(FileRead(filename))
encrypted_data = encAES(cipher, data2encrypt)
encrypted_content = base64.b64encode(encrypted_data)

encrypted_filename = ""enc_""+filename
FileSave(encrypted_filename, encrypted_content)
print ""Encryption complete. File saved as: ""+ encrypted_filename

## Decryption
data2decrypt = base64.b64decode(FileRead(encrypted_filename))
decrypted_data = decAES(cipher, data2decrypt)
decrypted_content = base64.b64decode(decrypted_data)

decrypted_filename = ""dec_""+filename
FileSave(decrypted_filename, decrypted_content)
print ""Decryption complete. File saved as: ""+ decrypted_filename

Now, the encryption routine is working fine but Decryption Routine is giving an error -
Commandline - python test.py sample.txt 
ERROR:
Traceback (most recent call last):
  File ""test.py"", line 65, in <module>
    decrypted_data = decAES(cipher, data2decrypt)
  File ""test.py"", line 38, in decAES
    return StripPadding(decrypted, INTERRUPT, PAD)
  File ""test.py"", line 29, in StripPadding
    return data.rstrip(pad).rstrip(interrupt)
UnicodeDecodeError: 'ascii' codec can't decode byte 0xe6 in position 3: ordinal not in range(128)

What can be the possible workaround?
","You are concatenating a byte string with a Unicode value, triggering an automatic decode of the bytestring. This fails, as your decrypted text is not decodable as ASCII.
Don't use Unicode INTERRUPT and PAD values here; you are not reading Unicode data from the file here anyway:
INTERRUPT = '\1'
PAD = '\0'

You'll have to create a new instance of the AES object to decrypt; you cannot reuse the object you used for encrypting as it's IV state has been altered by the encryption:
decrypt_cipher = AES.new(SECRET, AES.MODE_CBC, IV)
decrypted_data = decAES(decrypt_cipher, data2decrypt)

With those changes your code works and can encrypt and again decrypt the data.
","617","<python><encryption><aes><pycrypto>","1","2","1","2014-07-08 19:02:11","24639215","3","","100297","","2014-07-08 19:02:11","2014-07-08 18:06:11",""
"8719893","Django not loading Module Pycrypto into model, will load into shell","I am using a Virtualenv on my Django install and have loaded in Pycrypto using    
pip install pycrypto

after sourcing my environment.
When I try to import Crypto into my model, I get an import error, however if load the shell using
manage.py shell

it does load in, with out an issue.
I am pretty sure that django is running from the virtualenv as is it running 1.3.1 which more current than what is installed on the path and I have installed South via pip which is working.
I have also tried to install Pycrypto using 
setup.py install

Any thoughts on how I fix/debug this?
Thanks
Edit:
I am relatively new to Django and Python so it could be something simple
Edit 2:
Hey Issac,
Is there any way that you can find all the modules getting loaded in?
I don't understand why it wouldn't work in browser but would work in the interactive shell? I am not saying that it can't, i just don't know if/how that could happen.
The import error as requested:
ImportError at /
No module named Crypto
Request Method: GET
Request URL:    http://*/
Django Version: 1.3.1
Exception Type: ImportError
Exception Value:    
No module named Crypto
Exception Location: /home/*************/project/app/models.py in <module>, line 1
Python Executable:  /home/*************/env/bin/python
Python Version: 2.6.6
Python Path:    
['/usr/local/dh/passenger/lib/phusion_passenger/wsgi',
 '/home/*************/env/lib/python2.6/site-packages/distribute-0.6.10-py2.6.egg',
 '/home/*************/env/lib/python2.6/site-packages/pip-0.7.2-py2.6.egg',
 '/home/*************/env/src/django-debug-toolbar',
 '/home/*************/env/lib/python2.6',
 '/home/*************/env/lib/python2.6/plat-linux2',
 '/home/*************/env/lib/python2.6/lib-tk',
 '/home/*************/env/lib/python2.6/lib-old',
 '/home/*************/env/lib/python2.6/lib-dynload',
 '/usr/lib/python2.6',
 '/usr/lib64/python2.6',
 '/usr/lib/python2.6/plat-linux2',
 '/usr/lib/python2.6/lib-tk',
 '/usr/lib64/python2.6/lib-tk',
 '/home/*************/env/lib/python2.6/site-packages',
 '/home/*************',
 '/home/*************/project']
Server time:    Tue, 3 Jan 2012 20:08:19 +1100

","Just before the line which causes the import error insert this code:
import sys
assert False, sys.path

Compare both results.
In the shell (where you can import the module). You can do this:
import Crypto
assert False, Crypto.__file__

Is the directory of this result in sys.path of your webserver?
","611","<django><virtualenv><pycrypto>","1","0","1","2012-01-04 11:56:59","8726493","2","","908646","","2012-01-04 11:47:27","2012-01-03 23:03:40",""
"18933495","Installation issue pycrypto-2.6 on Windows 8","Not sure what I'm doing wrong but when I run pycrypto-2.6.win-amd64-py3.3.exe I get Python 3.3 is required, which I have just installed before I tried to install the crypto. I should also note that I have VS 2013 installed, as I'm reading that I may need to compile the whole thing or something.
Anyway, as an option I have a Fedora installed on a Virtual Box, not sure how use it though but if it is ""easier"" on Fedora I can try to install it there.
I'm actively searching for a solution but am short on time and would like some help. Thanks.
","You probably installed 32bit version of Python - install 64bit version.
pycrypto-2.6.win-amd64-py3.3.exe is binary package which means it's already compiled so you don't need compiler to install it. If compilation were needed you would have to have the same version of Visual C++ which was used to build Python itself; in case of the official Python 3.3 that's Visual C++ 2010 not 2013. See What version of Visual Studio and/or MinGW do I need to build extension modules for a given version of Python? question for more details.
","609","<python><windows><pycrypto>","0","0","1","2013-09-21 17:04:09","18935261","0","","234188","","2013-09-21 16:10:59","2013-09-21 14:03:21",""
"39109607","PyCrypto RSA and Pickle","I'm working with pyCrpyto's RSA class:
from Crypto.Cipher import PKCS1_v1_5
from Crypto.PublicKey import RSA

message = 'To be encrypted'
key = RSA.generate(2048)
cipher = PKCS1_v1_5.new(key)
ciphertext = cipher.encrypt(message)

That code runs fine, and I'm able to decrypt the ciphertext. However, I need to be able to serialize these ciphers. I haven't had any problem pickle-ing other pyCrypto ciphers, like AES, but when I try to pickle an RSA cipher I run into the following error:
from Crypto.Cipher import PKCS1_v1_5
from Crypto.PublicKey import RSA
import pickle

message = 'To be encrypted'
key = RSA.generate(2048)
cipher = PKCS1_v1_5.new(key)

pickle.dump(cipher, open(""cipher.temp"", ""wb""))
cipher = pickle.load(open(""cipher.temp"", ""rb""))
ciphertext = cipher.encrypt(message)

Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
  File ""/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Crypto/Cipher/PKCS1_v1_5.py"", line 119, in encrypt
randFunc = self._key._randfunc
  File ""/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Crypto/PublicKey/RSA.py"", line 126, in __getattr__
  raise AttributeError(""%s object has no %r attribute"" % (self.__class__.__name__, attrname,))
  AttributeError: _RSAobj object has no '_randfunc' attribute

Is there anything I can do to get around this -- another serialization framework, a different construction method for the RSA object, etc., or is this just an un-pickle-able object?
","Pickling works fine for the public key component, but when it comes to the whole key, the _randfunc doesn't survive pickling. I had come across the same error when working on a project.
You can fine more information here: https://github.com/google/oauth2client/issues/638
Make use of PyCrypto's importKey and exportKey functions, whose documentation can be found here: https://www.dlitz.net/software/pycrypto/api/2.6/
","609","<python><pickle><pycrypto>","0","0","1","2017-05-01 11:42:44","","2","","","","","2016-08-23 19:52:32",""
"37289321","Crypto Random get_random_bytes is not working in py3 as it did in py2","This code used to work in py2.  In py3 I get this:

Here is the code:
from Crypto import Random
import os

def generate_random_bytes(length):
    return Random.get_random_bytes(length)
    #return bytearray(os.urandom(length))  I tried this line but got the same result

def generate_server_id():
    """"""Generates 20 random hex characters""""""
    print(generate_random_bytes(10))
    print(ord(c) for c in generate_random_bytes(10))
    return """".join(""%02x"" % ord(c) for c in generate_random_bytes(10))

","Just replace ord(c) with c, in Py3 a byte array item is already an integer instead of a character, so you don't need the conversion.
You may want to rewrite it like this, in order to make it work on both versions:
def generate_server_id():
    """"""Generates 20 random hex characters""""""
    try:
        return """".join(""%02x"" % ord(c) for c in generate_random_bytes(10))
    except TypeError:
        return """".join(""%02x"" % c for c in generate_random_bytes(10))

","608","<python><python-3.4><pycrypto>","1","0","1","2016-05-18 02:51:14","37289429","1","","","","","2016-05-18 02:39:12",""
"25273197","PyCrypto Cipher Can't Encode Character","I am using PyCrypto in Python 2.7 and Google's App Engine.  I am using it to encode a message which gets stored in NDB.  Generally this is not an issue, however, there are come characters that it won't accept returning the following error: 
UnicodeEncodeError: 'ascii' codec can't encode character u'\U0001f601' in position 0: ordinal not in range(128)
In the case above it is choking on an emoticon that was submitted.  I am using the following code for encryption:
def encypt_data(self,message,PIN):
        key = aes_key+PIN
        BS = 16
        pad = lambda s: s + (BS - len(s) % BS) * chr(BS - len(s) % BS)
        message = pad(message)
        iv = Random.new().read(AES.block_size)
        cipher = AES.new(key, AES.MODE_CFB, iv)
        return base64.b64encode( iv + cipher.encrypt( message ) )

I do want to allow the submission of these characters.  How can I accommodate?
","I found that the issue was not really with PyCrypto in this case but rather with the mixture of ASCII and Unicode characters.  This is a more general issue and my fix below also solved the problem when it came to using encryption:
for char in message:
   try:
      char.decode(""ascii"")
    except:
       msgFormat += str(char.encode(""utf-8""))
     else:
        msgFormat += str(char)

","603","<python><google-app-engine><pycrypto>","1","0","1","2014-08-12 22:14:34","25274983","0","","","","","2014-08-12 20:08:00",""
"38179489","Install Fabric error in pyenv","I want use Fabric when I product my project in AWS Ubuntu. When I read about Fabric, it required python 2.5~2.7, so I create Python virtualenv on Mac OS X:
pyenv virtualenv 2.7.5 fabric
mkdir fabric

and I run pip install fabric
(fabric)fabric $ pip install fabric

but it has 2 errors
Collecting fabric

[...]

configure: creating ./config.status
config.status: creating src/config.h
building 'Crypto.PublicKey._fastmath' extension
creating build/temp.macosx-10.11-x86_64-2.7
creating build/temp.macosx-10.11-x86_64-2.7/src
clang -fno-strict-aliasing -fwrapv -Wall -Wstrict-prototypes -std=c99 -O3 -fomit-frame-pointer -Isrc/ -I/usr/include/ -I/Users/hanminsoo/.pyenv/versions/2.7.5/include/python2.7 -c     
src/_fastmath.c -o build/temp.macosx-10.11-x86_64-2.7/src/_fastmath.o
src/_fastmath.c:1545:20: warning: comparison of unsigned expression < 0     is always false [-Wtautological-compare]
                      else if (result < 0)
                               ~~~~~~ ^ ~
src/_fastmath.c:1621:20: warning: comparison of unsigned expression < 0 is always false [-Wtautological-compare]
                      else if (result < 0)
                               ~~~~~~ ^ ~
2 warnings generated.
clang -bundle -bundle_loader python.exe -L/usr/local/opt/readline/lib -L/usr/local/opt/readline/lib -L/usr/local/opt/openssl/lib -L/Users/hanminsoo/.pyenv/versions/2.7.5/lib build/temp.macosx-10.11-x86_64-2.7/src/_fastmath.o -lgmp -o build/lib.macosx-10.11-x86_64-2.7/Crypto/PublicKey/_fastmath.so
ld: file not found: python.exe
clang: error: linker command failed with exit code 1 (use -v to see invocation)
error: command 'clang' failed with exit status 1


------------------------------------------------------

Failed building wheel for pycrypto
Running setup.py clean for pycrypto
Failed to build pycrypto

Installing collected packages: pycrypto, paramiko, fabric
Running setup.py install for pycrypto ... error

Complete output from command /Users/hanminsoo/.pyenv/versions/2.7.5/envs/fabric/bin/python2.7 -u -c ""import setuptools, tokenize;__file__='/private/var/folders/c5/d1_cb4j92f19h5q0_cbv7bpc0000gn/T/pip-build-vsA2vJ/pycrypto/setup.py';exec(compile(getattr(tokenize, 'open', open)(__file__).read().replace('\r\n', '\n'), __file__, 'exec'))"" install --record /var/folders/c5/d1_cb4j92f19h5q0_cbv7bpc0000gn/T/pip-iE2TRI-record/install-record.txt --single-version-externally-managed --compile --install-headers /Users/hanminsoo/.pyenv/versions/2.7.5/envs/fabric/include/site/python2.7/pycrypto:

clang -fno-strict-aliasing -fwrapv -Wall -Wstrict-prototypes -std=c99 -O3 -fomit-frame-pointer -Isrc/ -I/usr/include/ -I/Users/hanminsoo/.pyenv/versions/2.7.5/include/python2.7 -c src/_fastmath.c -o build/temp.macosx-10.11-x86_64-2.7/src/_fastmath.o
src/_fastmath.c:1545:20: warning: comparison of unsigned expression < 0 is always false [-Wtautological-compare]
                        else if (result < 0)
                                 ~~~~~~ ^ ~
src/_fastmath.c:1621:20: warning: comparison of unsigned expression < 0 is always false [-Wtautological-compare]
                        else if (result < 0)
                                 ~~~~~~ ^ ~
2 warnings generated.
clang -bundle -bundle_loader python.exe -L/usr/local/opt/readline/lib -L/usr/local/opt/readline/lib -L/usr/local/opt/openssl/lib -L/Users/hanminsoo/.pyenv/versions/2.7.5/lib build/temp.macosx-10.11-x86_64-2.7/src/_fastmath.o -lgmp -o build/lib.macosx-10.11-x86_64-2.7/Crypto/PublicKey/_fastmath.so
ld: file not found: python.exe
clang: error: linker command failed with exit code 1 (use -v to see invocation)
error: command 'clang' failed with exit status 1

-------------------------------------------------------

Command ""/Users/hanminsoo/.pyenv/versions/2.7.5/envs/fabric/bin/python2.7 -u -c ""import setuptools, tokenize;__file__='/private/var/folders/c5/d1_cb4j92f19h5q0_cbv7bpc0000gn/T/pip-build-vsA2vJ/pycrypto/setup.py';exec(compile(getattr(tokenize, 'open', open)(__file__).read().replace('\r\n', '\n'), __file__, 'exec'))"" install --record /var/folders/c5/d1_cb4j92f19h5q0_cbv7bpc0000gn/T/pip-iE2TRI-record/install-record.txt --single-version-externally-managed --compile --install-headers /Users/hanminsoo/.pyenv/versions/2.7.5/envs/fabric/include/site/python2.7/pycrypto"" failed with error code 1 in /private/var/folders/c5/d1_cb4j92f19h5q0_cbv7bpc0000gn/T/pip-build-vsA2vJ/pycrypto/

Some people tell me ""you should install pycrpto"" so I install pycrpto
pip install pycrpto

but it has the same error when I pip install fabric. I found this solution link, so I run:
brew install gmp
export LIBRARY_PATH=/usr/local/lib
pip install pycrypto

but it has the same error and second solution is link
$ bunzip2 gmp-5.0.5.tar.bz2

but it has another error:
bunzip2: Can't open input file gmp-5.0.5.tar.bz2: No such file or directory. 

I can't understand why fabric doesn't install...
","It's a bug in Python <2.7.8. See pyenv#273. 
You can fix it by patching _sysconfigdata.py:
$ export p=/Users/andrei/.pyenv/versions/2.7.6
$ sed -i -e ""s#python.exe#${p}/bin/python2.7#g"" ""$p/lib/python2.7/_sysconfigdata.py""

","600","<python><macos><fabric><pycrypto>","0","0","1","2017-03-08 15:00:03","","3","","-1","","2017-05-23 11:53:56","2016-07-04 07:55:09",""
"25470719","Pycrypto AES decryption resulting in extra ""\x07\x07\x07\x07\x07\x07\x07'""","After decryption with Pycrypto Aes, result after base64 decoding is geting extra (at end) ""\x07\x07\x07\x07\x07\x07\x07"".
Python Output:
Decrypted json Message:
b'{""EndTime"":""\\/Date(1408876230508+0530)\\/"",""SessionID"":""ddbecfdb-b87f-48d5-84dd-9dce439459ac"",""TestString"":""WORKING FINE""}\x07\x07\x07\x07\x07\x07\x07'

Unencrypted Json Message:
{""EndTime"":""\/Date(1408876230508+0530)\/"",""SessionID"":""ddbecfdb-b87f-48d5-84dd-9dce439459ac"",""TestString"":""WORKING FINE""}

Also, when I try to Json.loads the decrypted message I am getting the TYPE Error, hence I tried to do base64.b64decode() but this one is erroring out as binascii.Error: Incorrect padding.
My REST service Encoding code:
    Dim rawdatastream As New MemoryStream
    Dim jsonserialization As New Json.DataContractJsonSerializer(GetType(AuthorizationResultType))
    jsonserialization.WriteObject(rawdatastream, c)

    Using encryptor As Aes = Aes.Create()
        encryptor.Key = {66, 16, 1, 61, 58, 16, 16, 49, 66, 16, 46, 46, 16, 146, 49, 255,
                         240, 127, 189, 191, 3, 151, 89, 124, 56, 89, 134, 164, 165, 201, 212, 216}
        encryptor.Mode = CipherMode.CBC
        encryptor.IV = {66, 16, 1, 61, 58, 16, 16, 49, 66, 16, 46, 46, 16, 146, 49, 66}
        Dim clearBytes As Byte() = Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(rawdatastream.ToArray()))
        Using ms As New MemoryStream()
            Using cs As New CryptoStream(ms, encryptor.CreateEncryptor(), CryptoStreamMode.Write)
                cs.Write(clearBytes, 0, clearBytes.Length)
                cs.Close()
            End Using
            result.Msg = Convert.ToBase64String(ms.ToArray())
        End Using
    End Using

Python Code:
import requests
import json
import base64
from Crypto.Cipher import AES

baseurl = 'http://localhost:9624/'

def LoginAccess(userid, password):
    print('Accessing Authorization info')
    response = requests.get(baseurl +'BasicServ.svc/auth/Authorize/'+userid+'/'+password+'/2')
    print (response.json())

    rawmsg =response.json()
    msg= rawmsg['AuthorizeResult']['Msg']

    cypherkey=[66, 16, 1, 61, 58, 16, 16, 49, 66, 16, 46, 46, 16, 146, 49, 255,240, 127, 189, 191, 3, 151, 89, 124, 56, 89, 134, 164, 165, 201, 212, 216]
    iv=[66, 16, 1, 61, 58, 16, 16, 49, 66, 16, 46, 46, 16, 146, 49, 66]
    cry=AES.new(bytes(cypherkey),AES.MODE_CBC,bytes(iv))
    print(""decryption done"")
    c = cry.decrypt(base64.b64decode(msg))
    print (c)
    print(base64.b64decode(c))
    print (json.loads(base64.b64decode(c)))
    print (rawmsg['AuthorizeResult']['MsgN'])

Finally, what mistake did I do in my decryption, base64decode and json conversion error ( I think all errors are due to extra padding getting generated)
EDIT: CODE AFTER PADDING:
WCF REST CODE:
    Dim rawdatastream As New MemoryStream
    Dim jsonserialization As New Json.DataContractJsonSerializer(GetType(AuthorizationResultType))
    jsonserialization.WriteObject(rawdatastream, c)
    result.Unlocksize = Encoding.UTF8.GetString(rawdatastream.ToArray()).Length


    Using encryptor As Aes = Aes.Create()
        encryptor.Mode = CipherMode.CBC
        encryptor.Key = {66, 16, 1, 61, 58, 16, 16, 49, 66, 16, 46, 46, 16, 146, 49, 255, 240, 127, 189, 191, 3, 151, 89, 124, 56, 89, 134, 164, 165, 201, 212, 216}
        encryptor.IV = {66, 16, 1, 61, 58, 16, 16, 49, 66, 16, 46, 46, 16, 146, 49, 66}

        Console.WriteLine(encryptor.IV)
        Console.WriteLine(encryptor.Key)
        Dim datalen As Integer
        Dim actualcoount As Integer = Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(rawdatastream.ToArray())).Count
        datalen = 32 - (Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(rawdatastream.ToArray())).Count Mod 32)
        Dim correctionbytes As String = """"
        For i = 1 To datalen
            correctionbytes = correctionbytes + ""1""
        Next
        result.Unlocksize = datalen

        Dim clearBytes As Byte() = Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(rawdatastream.ToArray()) + correctionbytes)
        Using ms As New MemoryStream()
            Using cs As New CryptoStream(ms, encryptor.CreateEncryptor(), CryptoStreamMode.Write)
                cs.Write(clearBytes, 0, clearBytes.Length)
                cs.Close()
            End Using
            result.Msg = Convert.ToBase64String(ms.ToArray())
        End Using
    End Using

","It seems like PyCrypto does not provide PKCS#7 padding / unpadding (as it should). So you should implement this using data = data[:-data[-1]]. So you should perform this on variable c directly after the call to decrypt.
You could check all the (in this case 7) padding bytes, but if you want to protect against invalid ciphertext, you should really add a MAC (HMAC) instead.
More information here
","599","<python><character-encoding><aes><pycrypto>","0","3","1","2014-08-24 17:56:18","25471258","6","","610928","","2014-08-24 16:40:30","2014-08-24 10:26:58",""
"37882488","Pycrypto read text file into string and decrypt AES 256","I'm attempting to read a text file into a string and then decrypt that string but it keeps failing and giving the following error
ValueError: Input strings must be a multiple of 16 in length

I know the encryption works because I've tested it so it has something to do with the Display_All function and presumably how the file is being read, any help would be really appreciated!  
class Encryption(object):

    def __init__(self, key):
        self.blockSize = 32
        self.key = key



    def Encrypt(self, plainText):
        plainText = self.Pad_Text(plainText)
        iv = Random.new().read(AES.block_size)
        cipher = AES.new(self.key, AES.MODE_CBC, iv)
        return base64.b64encode(iv + cipher.encrypt(plainText)) 




    def Decrypt(self, secretText):  
        secretText = base64.b64decode(secretText)
        iv = secretText[:AES.block_size]
        cipher = AES.new(self.key, AES.MODE_CBC, iv)
        return self.Unpad_Text(cipher.decrypt(secretText[AES.block_size:])).decode('utf-8')




    def Pad_Text(self, text):
         return text + (self.blockSize - len(text) % self.blockSize) * chr(self.blockSize - len(text) % self.blockSize)


    @staticmethod
    def Unpad_Text(text):
        return text[:-ord(text[len(text)-1:])]


def Display_All():
    try:
        if sys.platform == 'win32':
            if os.path.isdir(""C:\\APV\\""):           
                file = open(""C:\\APV\\Private.txt"", ""rb"")
                string = file.read()
                plain = e.Decrypt(string)
                displayWindow.insert('end', plain)
    except OSError:
        pass

    return None

def Write_Test(event): 
    try:
        if sys.platform == ""win32"":
            if os.path.isdir(""C:\\APV\\""):
                file = open(""C:\\APV\\Private.txt"", ""a"")
                temp2 = Test_entry.get()
                encrypted = e.Encrypt(temp2)
                file.write(str(encrypted) + ""\n"")
                file.close()
                Test_entry.delete(0, END)
    except OSError:
       pass 

I realize there are much better ways of doing this and while I'm more than interested in learning about them my priority is simply learning pycryptos libraries which is why I decided to use an example I found here as a simple test. See below for a small example
e = Encryption(""!.o8d@c#)*=_FFsxc*@^;:12axcvbfd|"")

tempTest = ""This is just a quick dirty example\nshowing that the encryption does work""
random = e.Encrypt(tempTest)
print(random)

decrypted = e.Decrypt(random)
print(""\n\n\n\n"" + decrypted)

Produces the following output
b'ZiQ1nBUUx3Q+ZKeMlw2IXBlJoSXnWyTkWZsKVivFbENrVt78BV13/aLlFosw5v590y8WECu9f6U3D4sxlQhwbCNiDGSqMIm7Qids1aprD7JeAm/0mTpXhuF5nPJKqlylhweMsxfql7Ba6EplNyehnQ=='




This is just a quick dirty example
showing that the encryption does work

","","593","<python><pycrypto>","0","","0","2016-06-17 13:28:51","","8","","5959072","","2016-06-17 13:28:51","2016-06-17 13:12:08",""
"37734990","ImportError: cannot import name _counter but _counter.pyd exists","I am encountering the below stacktrace when running import paramiko (this is in windows platform)
  File ""/usr/lib/python2.7/site-packages/paramiko/__init__.py"", line 30, in <module>
    from paramiko.transport import SecurityOptions, Transport
  File ""/usr/lib/python2.7/site-packages/paramiko/transport.py"", line 50, in <module>
    from paramiko.dsskey import DSSKey
  File ""/usr/lib/python2.7/site-packages/paramiko/dsskey.py"", line 26, in <module>
    from Crypto.PublicKey import DSA
  File ""/usr/lib/python2.7/site-packages/Crypto/PublicKey/DSA.py"", line 89, in <module>
    from Crypto import Random
  File ""/usr/lib/python2.7/site-packages/Crypto/Random/__init__.py"", line 29, in <module>
    from Crypto.Random import _UserFriendlyRNG
  File ""/usr/lib/python2.7/site-packages/Crypto/Random/_UserFriendlyRNG.py"", line 38, in <module>
    from Crypto.Random.Fortuna import FortunaAccumulator
  File ""/usr/lib/python2.7/site-packages/Crypto/Random/Fortuna/FortunaAccumulator.py"", line 39, in <module>
    import FortunaGenerator
  File ""/usr/lib/python2.7/site-packages/Crypto/Random/Fortuna/FortunaGenerator.py"", line 35, in <module>
    from Crypto.Util import Counter
  File ""/usr/lib/python2.7/site-packages/Crypto/Util/Counter.py"", line 59, in <module>
    from Crypto.Util import _counter
ImportError: cannot import name _counter

I see that _counter.pyd exists in Pycrypto folder. Why is this not getting picked?
","","588","<python-2.7><paramiko><pycrypto>","1","","0","2016-06-09 20:08:55","","0","","1816580","","2016-06-09 20:08:55","2016-06-09 19:50:44",""
"34366428","Diffie-Hellman (to RC4) with Wincrypt From Python","I am currently working on a project written in C++ that leverages the CryptoAPI to perform a Diffie-Hellman key exchange. I'm having a bit of trouble getting this to work as the eventual RC4 session key I get cannot be used to encrypt the same text in Python (using pycrypto).
The C++ code to perform the Diffie-Hellman key exchange was taken from msdn, but is included here for posterity:
#include <tchar.h>
#include <windows.h>
#include <wincrypt.h>
#pragma comment(lib, ""crypt32.lib"")

// The key size, in bits.
#define DHKEYSIZE 512

// Prime in little-endian format.
static const BYTE g_rgbPrime[] = 
{
    0x91, 0x02, 0xc8, 0x31, 0xee, 0x36, 0x07, 0xec, 
    0xc2, 0x24, 0x37, 0xf8, 0xfb, 0x3d, 0x69, 0x49, 
    0xac, 0x7a, 0xab, 0x32, 0xac, 0xad, 0xe9, 0xc2, 
    0xaf, 0x0e, 0x21, 0xb7, 0xc5, 0x2f, 0x76, 0xd0, 
    0xe5, 0x82, 0x78, 0x0d, 0x4f, 0x32, 0xb8, 0xcb,
    0xf7, 0x0c, 0x8d, 0xfb, 0x3a, 0xd8, 0xc0, 0xea, 
    0xcb, 0x69, 0x68, 0xb0, 0x9b, 0x75, 0x25, 0x3d,
    0xaa, 0x76, 0x22, 0x49, 0x94, 0xa4, 0xf2, 0x8d 
};

// Generator in little-endian format.
static BYTE g_rgbGenerator[] = 
{
    0x02, 0x88, 0xd7, 0xe6, 0x53, 0xaf, 0x72, 0xc5,
    0x8c, 0x08, 0x4b, 0x46, 0x6f, 0x9f, 0x2e, 0xc4,
    0x9c, 0x5c, 0x92, 0x21, 0x95, 0xb7, 0xe5, 0x58, 
    0xbf, 0xba, 0x24, 0xfa, 0xe5, 0x9d, 0xcb, 0x71, 
    0x2e, 0x2c, 0xce, 0x99, 0xf3, 0x10, 0xff, 0x3b,
    0xcb, 0xef, 0x6c, 0x95, 0x22, 0x55, 0x9d, 0x29,
    0x00, 0xb5, 0x4c, 0x5b, 0xa5, 0x63, 0x31, 0x41,
    0x13, 0x0a, 0xea, 0x39, 0x78, 0x02, 0x6d, 0x62
};

BYTE g_rgbData[] = {0x01, 0x02, 0x03, 0x04,    0x05, 0x06, 0x07, 0x08};

int _tmain(int argc, _TCHAR* argv[])
{
    UNREFERENCED_PARAMETER(argc);
    UNREFERENCED_PARAMETER(argv);

    BOOL fReturn;
    HCRYPTPROV hProvParty1 = NULL; 
    HCRYPTPROV hProvParty2 = NULL; 
    DATA_BLOB P;
    DATA_BLOB G;
    HCRYPTKEY hPrivateKey1 = NULL;
    HCRYPTKEY hPrivateKey2 = NULL;
    PBYTE pbKeyBlob1 = NULL;
    PBYTE pbKeyBlob2 = NULL;
    HCRYPTKEY hSessionKey1 = NULL;
    HCRYPTKEY hSessionKey2 = NULL;
    PBYTE pbData = NULL;

    /************************
    Construct data BLOBs for the prime and generator. The P and G 
    values, represented by the g_rgbPrime and g_rgbGenerator arrays 
    respectively, are shared values that have been agreed to by both 
    parties.
    ************************/
    P.cbData = DHKEYSIZE/8;
    P.pbData = (BYTE*)(g_rgbPrime);

    G.cbData = DHKEYSIZE/8;
    G.pbData = (BYTE*)(g_rgbGenerator);

    /************************
    Create the private Diffie-Hellman key for party 1. 
    ************************/
    // Acquire a provider handle for party 1.
    fReturn = CryptAcquireContext(
        &hProvParty1, 
        NULL,
        MS_ENH_DSS_DH_PROV,
        PROV_DSS_DH, 
        CRYPT_VERIFYCONTEXT);
    if(!fReturn)
    {
        goto ErrorExit;
    }

    // Create an ephemeral private key for party 1.
    fReturn = CryptGenKey(
        hProvParty1, 
        CALG_DH_EPHEM, 
        DHKEYSIZE << 16 | CRYPT_EXPORTABLE | CRYPT_PREGEN,
        &hPrivateKey1);
    if(!fReturn)
    {
        goto ErrorExit;
    }

    // Set the prime for party 1's private key.
    fReturn = CryptSetKeyParam(
        hPrivateKey1,
        KP_P,
        (PBYTE)&P,
        0);
    if(!fReturn)
    {
        goto ErrorExit;
    }

    // Set the generator for party 1's private key.
    fReturn = CryptSetKeyParam(
        hPrivateKey1,
        KP_G,
        (PBYTE)&G,
        0);
    if(!fReturn)
    {
        goto ErrorExit;
    }

    // Generate the secret values for party 1's private key.
    fReturn = CryptSetKeyParam(
        hPrivateKey1,
        KP_X,
        NULL,
        0);
    if(!fReturn)
    {
        goto ErrorExit;
    }

    /************************
    Create the private Diffie-Hellman key for party 2. 
    ************************/
    // Acquire a provider handle for party 2.
    fReturn = CryptAcquireContext(
        &hProvParty2, 
        NULL,
        MS_ENH_DSS_DH_PROV,
        PROV_DSS_DH, 
        CRYPT_VERIFYCONTEXT);
    if(!fReturn)
    {
        goto ErrorExit;
    }

    // Create an ephemeral private key for party 2.
    fReturn = CryptGenKey(
        hProvParty2, 
        CALG_DH_EPHEM, 
        DHKEYSIZE << 16 | CRYPT_EXPORTABLE | CRYPT_PREGEN,
        &hPrivateKey2);
    if(!fReturn)
    {
        goto ErrorExit;
    }

    // Set the prime for party 2's private key.
    fReturn = CryptSetKeyParam(
        hPrivateKey2,
        KP_P,
        (PBYTE)&P,
        0);
    if(!fReturn)
    {
        goto ErrorExit;
    }

    // Set the generator for party 2's private key.
    fReturn = CryptSetKeyParam(
        hPrivateKey2,
        KP_G,
        (PBYTE)&G,
        0);
    if(!fReturn)
    {
        goto ErrorExit;
    }

    // Generate the secret values for party 2's private key.
    fReturn = CryptSetKeyParam(
        hPrivateKey2,
        KP_X,
        NULL,
        0);
    if(!fReturn)
    {
        goto ErrorExit;
    }

    /************************
    Export Party 1's public key.
    ************************/
    // Public key value, (G^X) mod P is calculated.
    DWORD dwDataLen1;

    // Get the size for the key BLOB.
    fReturn = CryptExportKey(
        hPrivateKey1,
        NULL,
        PUBLICKEYBLOB,
        0,
        NULL,
        &dwDataLen1);
    if(!fReturn)
    {
        goto ErrorExit;
    }

    // Allocate the memory for the key BLOB.
    if(!(pbKeyBlob1 = (PBYTE)malloc(dwDataLen1)))
    { 
        goto ErrorExit;
    }

    // Get the key BLOB.
    fReturn = CryptExportKey(
        hPrivateKey1,
        0,
        PUBLICKEYBLOB,
        0,
        pbKeyBlob1,
        &dwDataLen1);
    if(!fReturn)
    {
        goto ErrorExit;
    }

    /************************
    Export Party 2's public key.
    ************************/
    // Public key value, (G^X) mod P is calculated.
    DWORD dwDataLen2;

    // Get the size for the key BLOB.
    fReturn = CryptExportKey(
        hPrivateKey2,
        NULL,
        PUBLICKEYBLOB,
        0,
        NULL,
        &dwDataLen2);
    if(!fReturn)
    {
        goto ErrorExit;
    }

    // Allocate the memory for the key BLOB.
    if(!(pbKeyBlob2 = (PBYTE)malloc(dwDataLen2)))
    { 
        goto ErrorExit;
    }

    // Get the key BLOB.
    fReturn = CryptExportKey(
        hPrivateKey2,
        0,
        PUBLICKEYBLOB,
        0,
        pbKeyBlob2,
        &dwDataLen2);
    if(!fReturn)
    {
        goto ErrorExit;
    }

    /************************
    Party 1 imports party 2's public key.
    The imported key will contain the new shared secret 
    key (Y^X) mod P. 
    ************************/
    fReturn = CryptImportKey(
        hProvParty1,
        pbKeyBlob2,
        dwDataLen2,
        hPrivateKey1,
        0,
        &hSessionKey2);
    if(!fReturn)
    {
        goto ErrorExit;
    }

    /************************
    Party 2 imports party 1's public key.
    The imported key will contain the new shared secret 
    key (Y^X) mod P. 
    ************************/
    fReturn = CryptImportKey(
        hProvParty2,
        pbKeyBlob1,
        dwDataLen1,
        hPrivateKey2,
        0,
        &hSessionKey1);
    if(!fReturn)
    {
        goto ErrorExit;
    }

    /************************
    Convert the agreed keys to symmetric keys. They are currently of 
    the form CALG_AGREEDKEY_ANY. Convert them to CALG_RC4.
    ************************/
    ALG_ID Algid = CALG_RC4;

    // Enable the party 1 public session key for use by setting the 
    // ALGID.
    fReturn = CryptSetKeyParam(
        hSessionKey1,
        KP_ALGID,
        (PBYTE)&Algid,
        0);
    if(!fReturn)
    {
        goto ErrorExit;
    }

    // Enable the party 2 public session key for use by setting the 
    // ALGID.
    fReturn = CryptSetKeyParam(
        hSessionKey2,
        KP_ALGID,
        (PBYTE)&Algid,
        0);
    if(!fReturn)
    {
        goto ErrorExit;
    }

    /************************
    Encrypt some data with party 1's session key. 
    ************************/
    // Get the size.
    DWORD dwLength = sizeof(g_rgbData);
    fReturn = CryptEncrypt(
        hSessionKey1, 
        0, 
        TRUE,
        0, 
        NULL, 
        &dwLength,
        sizeof(g_rgbData));
    if(!fReturn)
    {
        goto ErrorExit;
    }

    // Allocate a buffer to hold the encrypted data.
    pbData = (PBYTE)malloc(dwLength);
    if(!pbData)
    {
        goto ErrorExit;
    }

    // Copy the unencrypted data to the buffer. The data will be 
    // encrypted in place.
    memcpy(pbData, g_rgbData, sizeof(g_rgbData)); 

    // Encrypt the data.
    dwLength = sizeof(g_rgbData);
    fReturn = CryptEncrypt(
        hSessionKey1, 
        0, 
        TRUE,
        0, 
        pbData, 
        &dwLength,
        sizeof(g_rgbData));
    if(!fReturn)
    {
        goto ErrorExit;
    }

    /************************
    Decrypt the data with party 2's session key. 
    ************************/
    dwLength = sizeof(g_rgbData);
    fReturn = CryptDecrypt(
        hSessionKey2,
        0,
        TRUE,
        0,
        pbData,
        &dwLength);
    if(!fReturn)
    {
        goto ErrorExit;
    }


ErrorExit:
    if(pbData)
    {
        free(pbData);
        pbData = NULL;
    }

    if(hSessionKey2)
    {
        CryptDestroyKey(hSessionKey2);
        hSessionKey2 = NULL;
    }

    if(hSessionKey1)
    {
        CryptDestroyKey(hSessionKey1);
        hSessionKey1 = NULL;
    }

    if(pbKeyBlob2)
    {
        free(pbKeyBlob2);
        pbKeyBlob2 = NULL;
    }

    if(pbKeyBlob1)
    {
        free(pbKeyBlob1);
        pbKeyBlob1 = NULL;
    }

    if(hPrivateKey2)
    {
        CryptDestroyKey(hPrivateKey2);
        hPrivateKey2 = NULL;
    }

    if(hPrivateKey1)
    {
        CryptDestroyKey(hPrivateKey1);
        hPrivateKey1 = NULL;
    }

    if(hProvParty2)
    {
        CryptReleaseContext(hProvParty2, 0);
        hProvParty2 = NULL;
    }

    if(hProvParty1)
    {
        CryptReleaseContext(hProvParty1, 0);
        hProvParty1 = NULL;
    }

    return 0;
}

I believe that I can complete the Diffie-Hellman key exchange in Python, as I can generate the same public and private keys without error. I've based my Diffie-Hellman key exchange on this repository.
I haven't been able to test this, however as I can't seem to get the shared secret exported from the C++ code (similar to this thread, that was never satisfactorily answered). I can however get the RC4 session key with the following code:
// Get the key length
DWORD keylen;
CryptExportKey(   
    hSessionKey1,
    NULL,    
    PLAINTEXTKEYBLOB,
    0,
    NULL,
    &keylen);

// Get the session key
CryptExportKey(   
    hSessionKey1,
    NULL,     
    PLAINTEXTKEYBLOB,   
    0,  
    encKey,    
    &keylen);

The output from this function gets me:
08 02 00 00 01 68 00 00 10 00 00 00 75 2c 59 8c 6e e0 8c 9f ed 30 17 7e 9d a5 85 2b

I know there is a 12 byte header+length on this, so that leaves me with the following 16 byte RC4 session key:
75 2c 59 8c 6e e0 8c 9f ed 30 17 7e 9d a5 85 2b

So I am currently trying to validate that I can encrypt the same plaintext using the RC4 that I have acquired from the CryptExportKey. I am currently trying to encrypt g_rgbData from the C++ code above, which is set to:
BYTE g_rgbData[] = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};

With the C++ code I get the following encrypted output:
cc 94 aa ec 86 6e a8 26

Using pycrypto I have the following code:
from Crypto.Cipher import ARC4
key = '75 2c 59 8c 6e e0 8c 9f ed 30 17 7e 9d a5 85 2b'
key = key.replace(' ', '').decode('hex')

plaintext = '0102030405060708'
plaintext = plaintext.replace(' ', '').decode('hex')

rc4 = ARC4.new(key)
encrypted = rc4.encrypt(plaintext)

print encrypted.encode('hex')

This results in the following output:
00 5b 64 25 4e a5 62 e3

Which doesn't match the C++ output. I've played around with endianess, but I suspect something else might be going on. 
Sorry if this is long winded, but it brings me to my two questions:

Whenever you transition from the shared key to RC4 (using CryptSetKeyParam with CALG_RC4), what is actually going on under the hood here? I can't seem to find any information about this process anywhere so that I can implement it in Python.
Any idea why my RC4 will not work with the same key and the same plaintext in Python?

Any help would be greatly appreciated!
","According to the PyCrypto docs your key must be minimum 40 bytes:

key (byte string) - The secret key to use in the symmetric cipher. It can have any length, with a minimum of 40 bytes. Its cryptograpic strength is always capped to 2048 bits (256 bytes).

but then there is a contradiction just above:

key_size = xrange(1, 257)
Size of a key (in bytes)

allowing key-lengths to be from 1-256, so I'm not sure if this even helps.
","586","<python><c++><encryption><pycrypto><cryptoapi>","16","1","2","2015-12-22 01:30:50","34407142","5","3","-1","","2017-05-23 12:31:23","2015-12-19 01:50:53",""
"34366428","Diffie-Hellman (to RC4) with Wincrypt From Python","I am currently working on a project written in C++ that leverages the CryptoAPI to perform a Diffie-Hellman key exchange. I'm having a bit of trouble getting this to work as the eventual RC4 session key I get cannot be used to encrypt the same text in Python (using pycrypto).
The C++ code to perform the Diffie-Hellman key exchange was taken from msdn, but is included here for posterity:
#include <tchar.h>
#include <windows.h>
#include <wincrypt.h>
#pragma comment(lib, ""crypt32.lib"")

// The key size, in bits.
#define DHKEYSIZE 512

// Prime in little-endian format.
static const BYTE g_rgbPrime[] = 
{
    0x91, 0x02, 0xc8, 0x31, 0xee, 0x36, 0x07, 0xec, 
    0xc2, 0x24, 0x37, 0xf8, 0xfb, 0x3d, 0x69, 0x49, 
    0xac, 0x7a, 0xab, 0x32, 0xac, 0xad, 0xe9, 0xc2, 
    0xaf, 0x0e, 0x21, 0xb7, 0xc5, 0x2f, 0x76, 0xd0, 
    0xe5, 0x82, 0x78, 0x0d, 0x4f, 0x32, 0xb8, 0xcb,
    0xf7, 0x0c, 0x8d, 0xfb, 0x3a, 0xd8, 0xc0, 0xea, 
    0xcb, 0x69, 0x68, 0xb0, 0x9b, 0x75, 0x25, 0x3d,
    0xaa, 0x76, 0x22, 0x49, 0x94, 0xa4, 0xf2, 0x8d 
};

// Generator in little-endian format.
static BYTE g_rgbGenerator[] = 
{
    0x02, 0x88, 0xd7, 0xe6, 0x53, 0xaf, 0x72, 0xc5,
    0x8c, 0x08, 0x4b, 0x46, 0x6f, 0x9f, 0x2e, 0xc4,
    0x9c, 0x5c, 0x92, 0x21, 0x95, 0xb7, 0xe5, 0x58, 
    0xbf, 0xba, 0x24, 0xfa, 0xe5, 0x9d, 0xcb, 0x71, 
    0x2e, 0x2c, 0xce, 0x99, 0xf3, 0x10, 0xff, 0x3b,
    0xcb, 0xef, 0x6c, 0x95, 0x22, 0x55, 0x9d, 0x29,
    0x00, 0xb5, 0x4c, 0x5b, 0xa5, 0x63, 0x31, 0x41,
    0x13, 0x0a, 0xea, 0x39, 0x78, 0x02, 0x6d, 0x62
};

BYTE g_rgbData[] = {0x01, 0x02, 0x03, 0x04,    0x05, 0x06, 0x07, 0x08};

int _tmain(int argc, _TCHAR* argv[])
{
    UNREFERENCED_PARAMETER(argc);
    UNREFERENCED_PARAMETER(argv);

    BOOL fReturn;
    HCRYPTPROV hProvParty1 = NULL; 
    HCRYPTPROV hProvParty2 = NULL; 
    DATA_BLOB P;
    DATA_BLOB G;
    HCRYPTKEY hPrivateKey1 = NULL;
    HCRYPTKEY hPrivateKey2 = NULL;
    PBYTE pbKeyBlob1 = NULL;
    PBYTE pbKeyBlob2 = NULL;
    HCRYPTKEY hSessionKey1 = NULL;
    HCRYPTKEY hSessionKey2 = NULL;
    PBYTE pbData = NULL;

    /************************
    Construct data BLOBs for the prime and generator. The P and G 
    values, represented by the g_rgbPrime and g_rgbGenerator arrays 
    respectively, are shared values that have been agreed to by both 
    parties.
    ************************/
    P.cbData = DHKEYSIZE/8;
    P.pbData = (BYTE*)(g_rgbPrime);

    G.cbData = DHKEYSIZE/8;
    G.pbData = (BYTE*)(g_rgbGenerator);

    /************************
    Create the private Diffie-Hellman key for party 1. 
    ************************/
    // Acquire a provider handle for party 1.
    fReturn = CryptAcquireContext(
        &hProvParty1, 
        NULL,
        MS_ENH_DSS_DH_PROV,
        PROV_DSS_DH, 
        CRYPT_VERIFYCONTEXT);
    if(!fReturn)
    {
        goto ErrorExit;
    }

    // Create an ephemeral private key for party 1.
    fReturn = CryptGenKey(
        hProvParty1, 
        CALG_DH_EPHEM, 
        DHKEYSIZE << 16 | CRYPT_EXPORTABLE | CRYPT_PREGEN,
        &hPrivateKey1);
    if(!fReturn)
    {
        goto ErrorExit;
    }

    // Set the prime for party 1's private key.
    fReturn = CryptSetKeyParam(
        hPrivateKey1,
        KP_P,
        (PBYTE)&P,
        0);
    if(!fReturn)
    {
        goto ErrorExit;
    }

    // Set the generator for party 1's private key.
    fReturn = CryptSetKeyParam(
        hPrivateKey1,
        KP_G,
        (PBYTE)&G,
        0);
    if(!fReturn)
    {
        goto ErrorExit;
    }

    // Generate the secret values for party 1's private key.
    fReturn = CryptSetKeyParam(
        hPrivateKey1,
        KP_X,
        NULL,
        0);
    if(!fReturn)
    {
        goto ErrorExit;
    }

    /************************
    Create the private Diffie-Hellman key for party 2. 
    ************************/
    // Acquire a provider handle for party 2.
    fReturn = CryptAcquireContext(
        &hProvParty2, 
        NULL,
        MS_ENH_DSS_DH_PROV,
        PROV_DSS_DH, 
        CRYPT_VERIFYCONTEXT);
    if(!fReturn)
    {
        goto ErrorExit;
    }

    // Create an ephemeral private key for party 2.
    fReturn = CryptGenKey(
        hProvParty2, 
        CALG_DH_EPHEM, 
        DHKEYSIZE << 16 | CRYPT_EXPORTABLE | CRYPT_PREGEN,
        &hPrivateKey2);
    if(!fReturn)
    {
        goto ErrorExit;
    }

    // Set the prime for party 2's private key.
    fReturn = CryptSetKeyParam(
        hPrivateKey2,
        KP_P,
        (PBYTE)&P,
        0);
    if(!fReturn)
    {
        goto ErrorExit;
    }

    // Set the generator for party 2's private key.
    fReturn = CryptSetKeyParam(
        hPrivateKey2,
        KP_G,
        (PBYTE)&G,
        0);
    if(!fReturn)
    {
        goto ErrorExit;
    }

    // Generate the secret values for party 2's private key.
    fReturn = CryptSetKeyParam(
        hPrivateKey2,
        KP_X,
        NULL,
        0);
    if(!fReturn)
    {
        goto ErrorExit;
    }

    /************************
    Export Party 1's public key.
    ************************/
    // Public key value, (G^X) mod P is calculated.
    DWORD dwDataLen1;

    // Get the size for the key BLOB.
    fReturn = CryptExportKey(
        hPrivateKey1,
        NULL,
        PUBLICKEYBLOB,
        0,
        NULL,
        &dwDataLen1);
    if(!fReturn)
    {
        goto ErrorExit;
    }

    // Allocate the memory for the key BLOB.
    if(!(pbKeyBlob1 = (PBYTE)malloc(dwDataLen1)))
    { 
        goto ErrorExit;
    }

    // Get the key BLOB.
    fReturn = CryptExportKey(
        hPrivateKey1,
        0,
        PUBLICKEYBLOB,
        0,
        pbKeyBlob1,
        &dwDataLen1);
    if(!fReturn)
    {
        goto ErrorExit;
    }

    /************************
    Export Party 2's public key.
    ************************/
    // Public key value, (G^X) mod P is calculated.
    DWORD dwDataLen2;

    // Get the size for the key BLOB.
    fReturn = CryptExportKey(
        hPrivateKey2,
        NULL,
        PUBLICKEYBLOB,
        0,
        NULL,
        &dwDataLen2);
    if(!fReturn)
    {
        goto ErrorExit;
    }

    // Allocate the memory for the key BLOB.
    if(!(pbKeyBlob2 = (PBYTE)malloc(dwDataLen2)))
    { 
        goto ErrorExit;
    }

    // Get the key BLOB.
    fReturn = CryptExportKey(
        hPrivateKey2,
        0,
        PUBLICKEYBLOB,
        0,
        pbKeyBlob2,
        &dwDataLen2);
    if(!fReturn)
    {
        goto ErrorExit;
    }

    /************************
    Party 1 imports party 2's public key.
    The imported key will contain the new shared secret 
    key (Y^X) mod P. 
    ************************/
    fReturn = CryptImportKey(
        hProvParty1,
        pbKeyBlob2,
        dwDataLen2,
        hPrivateKey1,
        0,
        &hSessionKey2);
    if(!fReturn)
    {
        goto ErrorExit;
    }

    /************************
    Party 2 imports party 1's public key.
    The imported key will contain the new shared secret 
    key (Y^X) mod P. 
    ************************/
    fReturn = CryptImportKey(
        hProvParty2,
        pbKeyBlob1,
        dwDataLen1,
        hPrivateKey2,
        0,
        &hSessionKey1);
    if(!fReturn)
    {
        goto ErrorExit;
    }

    /************************
    Convert the agreed keys to symmetric keys. They are currently of 
    the form CALG_AGREEDKEY_ANY. Convert them to CALG_RC4.
    ************************/
    ALG_ID Algid = CALG_RC4;

    // Enable the party 1 public session key for use by setting the 
    // ALGID.
    fReturn = CryptSetKeyParam(
        hSessionKey1,
        KP_ALGID,
        (PBYTE)&Algid,
        0);
    if(!fReturn)
    {
        goto ErrorExit;
    }

    // Enable the party 2 public session key for use by setting the 
    // ALGID.
    fReturn = CryptSetKeyParam(
        hSessionKey2,
        KP_ALGID,
        (PBYTE)&Algid,
        0);
    if(!fReturn)
    {
        goto ErrorExit;
    }

    /************************
    Encrypt some data with party 1's session key. 
    ************************/
    // Get the size.
    DWORD dwLength = sizeof(g_rgbData);
    fReturn = CryptEncrypt(
        hSessionKey1, 
        0, 
        TRUE,
        0, 
        NULL, 
        &dwLength,
        sizeof(g_rgbData));
    if(!fReturn)
    {
        goto ErrorExit;
    }

    // Allocate a buffer to hold the encrypted data.
    pbData = (PBYTE)malloc(dwLength);
    if(!pbData)
    {
        goto ErrorExit;
    }

    // Copy the unencrypted data to the buffer. The data will be 
    // encrypted in place.
    memcpy(pbData, g_rgbData, sizeof(g_rgbData)); 

    // Encrypt the data.
    dwLength = sizeof(g_rgbData);
    fReturn = CryptEncrypt(
        hSessionKey1, 
        0, 
        TRUE,
        0, 
        pbData, 
        &dwLength,
        sizeof(g_rgbData));
    if(!fReturn)
    {
        goto ErrorExit;
    }

    /************************
    Decrypt the data with party 2's session key. 
    ************************/
    dwLength = sizeof(g_rgbData);
    fReturn = CryptDecrypt(
        hSessionKey2,
        0,
        TRUE,
        0,
        pbData,
        &dwLength);
    if(!fReturn)
    {
        goto ErrorExit;
    }


ErrorExit:
    if(pbData)
    {
        free(pbData);
        pbData = NULL;
    }

    if(hSessionKey2)
    {
        CryptDestroyKey(hSessionKey2);
        hSessionKey2 = NULL;
    }

    if(hSessionKey1)
    {
        CryptDestroyKey(hSessionKey1);
        hSessionKey1 = NULL;
    }

    if(pbKeyBlob2)
    {
        free(pbKeyBlob2);
        pbKeyBlob2 = NULL;
    }

    if(pbKeyBlob1)
    {
        free(pbKeyBlob1);
        pbKeyBlob1 = NULL;
    }

    if(hPrivateKey2)
    {
        CryptDestroyKey(hPrivateKey2);
        hPrivateKey2 = NULL;
    }

    if(hPrivateKey1)
    {
        CryptDestroyKey(hPrivateKey1);
        hPrivateKey1 = NULL;
    }

    if(hProvParty2)
    {
        CryptReleaseContext(hProvParty2, 0);
        hProvParty2 = NULL;
    }

    if(hProvParty1)
    {
        CryptReleaseContext(hProvParty1, 0);
        hProvParty1 = NULL;
    }

    return 0;
}

I believe that I can complete the Diffie-Hellman key exchange in Python, as I can generate the same public and private keys without error. I've based my Diffie-Hellman key exchange on this repository.
I haven't been able to test this, however as I can't seem to get the shared secret exported from the C++ code (similar to this thread, that was never satisfactorily answered). I can however get the RC4 session key with the following code:
// Get the key length
DWORD keylen;
CryptExportKey(   
    hSessionKey1,
    NULL,    
    PLAINTEXTKEYBLOB,
    0,
    NULL,
    &keylen);

// Get the session key
CryptExportKey(   
    hSessionKey1,
    NULL,     
    PLAINTEXTKEYBLOB,   
    0,  
    encKey,    
    &keylen);

The output from this function gets me:
08 02 00 00 01 68 00 00 10 00 00 00 75 2c 59 8c 6e e0 8c 9f ed 30 17 7e 9d a5 85 2b

I know there is a 12 byte header+length on this, so that leaves me with the following 16 byte RC4 session key:
75 2c 59 8c 6e e0 8c 9f ed 30 17 7e 9d a5 85 2b

So I am currently trying to validate that I can encrypt the same plaintext using the RC4 that I have acquired from the CryptExportKey. I am currently trying to encrypt g_rgbData from the C++ code above, which is set to:
BYTE g_rgbData[] = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};

With the C++ code I get the following encrypted output:
cc 94 aa ec 86 6e a8 26

Using pycrypto I have the following code:
from Crypto.Cipher import ARC4
key = '75 2c 59 8c 6e e0 8c 9f ed 30 17 7e 9d a5 85 2b'
key = key.replace(' ', '').decode('hex')

plaintext = '0102030405060708'
plaintext = plaintext.replace(' ', '').decode('hex')

rc4 = ARC4.new(key)
encrypted = rc4.encrypt(plaintext)

print encrypted.encode('hex')

This results in the following output:
00 5b 64 25 4e a5 62 e3

Which doesn't match the C++ output. I've played around with endianess, but I suspect something else might be going on. 
Sorry if this is long winded, but it brings me to my two questions:

Whenever you transition from the shared key to RC4 (using CryptSetKeyParam with CALG_RC4), what is actually going on under the hood here? I can't seem to find any information about this process anywhere so that I can implement it in Python.
Any idea why my RC4 will not work with the same key and the same plaintext in Python?

Any help would be greatly appreciated!
","Finally had some time to look over your code. When I run your code locally, I am able to export the session key and can use it successfully in pycrypto. My guess is that you are either not exporting the session key correctly (e.g. is what you posted what you are running?) or the data you are encrypting in C++ is not the same data that you are encrypting in Python - double check that the data you are encrypting is also correct. I suspect that it's probably the latter, as there isn't really much you can screw up with the CryptExportKey you've posted.
","586","<python><c++><encryption><pycrypto><cryptoapi>","16","6","2","2015-12-22 01:30:50","34407142","5","3","-1","","2017-05-23 12:31:23","2015-12-19 01:50:53",""
"30911021","How to install the third-party python (2.7) modules (e.g. Pycrypto) on ARM?","I have compiled and installed Python-2.7.9 on my ARM-based device. 
When I try to install the Pycrypto, there comes the problems as follows.

First, I downloaded the source code, did python setup.py install, but it went wrong by telling the the Pycrypto needs C compiler on ARM. Apparently my ARM does not have the C compiler. So this method of installation didn't work.
Then, I tried the pip and easy_install way. It still failed by telling No matching distribution found for pycrypto while I successfully installed on x86 platform (my Ubuntu) using the same pip command.

So, what I want to ask is that how to install the third-party python module which includes the C code, like Pycrypto, on ARM platform.
Many thanks in advance!
","","584","<python><python-2.7><arm><cross-compiling><pycrypto>","0","","0","2015-06-18 09:14:42","","4","","1067618","","2015-06-18 09:14:42","2015-06-18 09:06:14",""
"20390762","Python Crypto RSA textbook encryption versus openssl - what is it doing?","I have an existing set of Python code that uses the primitive (textbook) RSA encryption mechanism to encrypt small pieces of data. Specifically, the python code loads a public key into variable publickey and then encrypts this data using the following code:
ciphertext = publickey.encrypt(plaintext,None)

Yes I have read the disclaimer that ""this function performs the plain, primitive RSA encryption (textbook). In real applications, you always need to use proper cryptographic padding,..."" Unfortunately, I cannot change this code at the present time, so I am stuck with using this ""textbook"" encrypt command.
Note that even though this command does not use any padding scheme, it still seems to be able to encrypt any (appropriately small) amount of plaintext. In other words, the plaintext can be any length up to whatever limit is imposed by RSA.
Now however, I want to use the OPENSSL C library in an IOS app to do an identical RSA encryption. I cannot figure out how to do the exact same thing that the python function is doing. OPENSSL has a method RSA_public_encrypt where you pass in the size of the plaintext, the plaintext itself, an RSA object pointer which contains public key information, and the RSA padding mechanism. To replicate what python is doing in the crypto library, I thought I could use RSA_NO_PADDING as the padding mechanism. The problem is that OPENSSL states in their documentation that if you use RSA_NO_PADDING, then the length of the plaintext to encrypt must be EXACTLY equal to a certain value: RSA_Size(rsa) where rsa is a pointer to the RSA object passed in (the object that contains the public key).
In other words, the python crypto library seems to be able to encrypt variable length plaintext with no padding, but OPENSSL requires plaintext to be fixed length. So what exactly is the python crypto library doing to handle the variable size of the plaintext, and is there any way I can replicate this in OPENSSL?
","If you look at the documentation for RSA_NO_PADDING, they explain:

This mode should only be used to implement cryptographically sound
  padding modes in the application code. Encrypting user data directly
  with RSA is insecure.

In other words, RSA_NO_PADDING is for cases where you're going to handle padding on your own, so OpenSSL expects an input of the proper size. It doesn't mean ""textbook RSA"". 
Is there a compelling reason you can't change the python code? Textbook RSA is insecure and you're taking a great risk by using it. 
","581","<encryption><openssl><rsa><public-key-encryption><pycrypto>","0","-1","1","2013-12-05 03:31:05","20390858","0","","","","","2013-12-05 03:20:20",""
"33432775","AES decryption fails when decrypting a second time","I have this implementation of a reversible encoding:
# coding=utf-8

from Crypto.Cipher import AES
from Crypto import Random
import uuid
import unittest
import random


key = r'Sixteen byte key'  # Keep this real secret
iv = Random.new().read(AES.block_size)
cipher = AES.new(key, AES.MODE_CFB, iv)


def encode(role, plaintext):
    '''Encode the message, prefix with the role specifier'''
    msg = iv + cipher.encrypt(plaintext)
    msg = msg.encode('hex')
    msg = role + '-' + msg
    return msg


def decode(msg):
    '''Decode message, return role and plaintext'''
    role, msg = msg.split('-', 1)
    plaintext = cipher.decrypt(msg.decode('hex'))[len(iv):]
    return role, plaintext


class TestMe(unittest.TestCase):

    def test_whole(self):
        ROLES = ['sales', 'vendor', 'designer']
        for _ in xrange(100):
            role = random.choice(ROLES)
            txt = uuid.uuid4().hex
            msg = encode(role, txt)
            drole, dtxt = decode(msg)
            self.assertEqual(role, drole)
            self.assertEqual(txt, dtxt)
            print 'ok'


if __name__ == '__main__':
    unittest.main()

But this is failing, always on the second test round. I am doing something obviously wrong, but I do not know what.
Note
You need to:
pip install pycrypto

To run that code
The code fails with:
» python test.py 
ok
F
======================================================================
FAIL: test_whole (__main__.TestMe)
----------------------------------------------------------------------
Traceback (most recent call last):
  File ""test.py"", line 40, in test_whole
    self.assertEqual(txt, dtxt)
AssertionError: 'b2e7894dd6254b259ae06350f199e6a2' != '\xa7\xcd\t\xde~\x15\xce\x9d\xcfU\x8f\xb2\xfa\x08\x98\x1c9ae06350f199e6a2'

----------------------------------------------------------------------
Ran 1 test in 0.000s

FAILED (failures=1)

","The error message provides vital clues as to what is going on. As you can see, the first 16 bytes of the decrypted message are different, but the next 16 bytes are the same. This happens when the key is correct, but the IV isn't.
The problem seems to be that pyCrypto doesn't reset the state of the cipher after the encryption/decryption and the IV is some other value.
Either way, you shouldn't be setting the IV once and reusing it multiple times. The IV is there to provide randomization of the ciphertexts so that attackers who observe the ciphertexts cannot determine whether the plaintext that is encrypted has repeated.
Moving AES object creation into the function, solves this issue:
key = r'Sixteen byte key'  # Keep this real secret

def encode(role, plaintext):
    '''Encode the message, prefix with the role specifier'''
    iv = Random.new().read(AES.block_size)
    cipher = AES.new(key, AES.MODE_CFB, iv)
    msg = iv + cipher.encrypt(plaintext)
    msg = msg.encode('hex')
    msg = role + '-' + msg
    return msg


def decode(msg):
    '''Decode message, return role and plaintext'''
    role, msg = msg.split('-', 1)
    msg = msg.decode('hex')
    iv = msg[:AES.block_size]
    cipher = AES.new(key, AES.MODE_CFB, iv)
    plaintext = cipher.decrypt(msg[AES.block_size:])
    return role, plaintext

You should check out the 2.7-alpha release of pyCrypto which includes authenticated modes such as GCM, EAX, SIV. Ciphertext authentication is important, because it might be possible to use a padding oracle attack in your system to decrypt any ciphertext.
","577","<python><encryption><pycrypto>","-1","2","1","2015-10-30 11:51:46","33435149","4","","1816580","","2015-10-30 11:51:46","2015-10-30 09:36:48",""
"35605168","How to use pyCrypto in order to encrypt and decrypt files","I have the following code written in python and a few lines in the bottom to debug and execute the code:
class encoder:
    encryptor = False
    IV = 16 * '\x00'
    def __init__(self, password):
            self.encryptor = AES.new(sha256(password).digest(), AES.MODE_CBC, self.IV)

    def encode_file(self, path):
        filesize = os.path.getsize(path)

        with open(path, 'rb') as infile:
            with open((path+""1""), 'wb') as outfile:
                outfile.write(struct.pack('<Q', filesize))
                outfile.write(self.IV)

                while True:
                    chunk = infile.read(64*1024)
                    if len(chunk) == 0:
                        break
                    elif len(chunk) % 16 != 0:
                        chunk += ' ' * (16 - len(chunk) % 16)

                    outfile.write(self.encryptor.encrypt(chunk))
    def decrypt_file(self, in_filename,chunksize=24*1024):
        out_filename = ""E:\\digested.txt""

        with open(in_filename, 'rb') as infile:
            origsize = struct.unpack('<Q', infile.read(struct.calcsize('Q')))[0]
            iv = infile.read(16)
            with open(out_filename, 'wb') as outfile:
                chunk = infile.read(chunksize)
                outfile.write(self.encryptor.decrypt(chunk))
                outfile.truncate(origsize)

enc = encoder(""password"")
enc.encode_file(""E:\\txt.txt"")
enc.decrypt_file(""E:\\txt.txt1"")

the code is part of an attempt to encrypt whole folders but I am currently testing the encryption and the decryption of a single file. I left the IV simple and have not salted the hash for comfort reasons. 
for some reason this code does not digest and decrypt the encrypted file correctly. 
Also, as I am pretty new in this field I have a pretty basic question, why is IV so important?
EDIT:
I mistakenly wrote decrypt instead of encrypt, now I fixed this it seems to manage to decrypt the file other than the first 16 bytes, does this have something to do with the IV(my guess due tot the fact the IV is 16 bytes long)?
EDIT 2:
Solved it by making the IV the first 16 bytes of the file instead of the same IV used for encoding, sorry for the hassle. Would love to get an answer on the reason and importance of the IV, if possible. thank you.
","","576","<python><python-2.7><encryption><aes><pycrypto>","0","","0","2016-02-24 15:53:55","","2","0","2307698","","2016-02-24 15:53:55","2016-02-24 14:41:56",""
"18340398","Converting Python RSA Decryption Script to C#, Output is only last 16B instead of 128B","I come to you today, hat in hand, after pounding my head against the brick wall that is encryption.
Here's the premise:
I have a python script that generates a ASN.1 encoded DER key.
I then have another python script that takes that DER private key and uses it to decrypt a base64 encoded string.
I'm currently attempting to convert that second script into its C# alternative, and I've got it working--to a point.
When using the original python scripts, the decrypted output is 127 bytes long, while the C# code I have is 16 bytes long. 
At this point I thought the C# code I had was completely wrong, until I noticed that the last 16 bytes of both the python output and the C# output are the exact same. WAT?
Here's the code I have for prosterity (obv no error checking, etc.)
Input DER Private Key (Base64 encoded for web)
MIICXAIBAAKBgQDMJQczcaoGepZIPcTGJB5AfSBFqhCt5B+HRpaUosZzAhooljxKrlRd3oLww2pqyjyGl9bqrKhaRuCPaEg/RHYvqT3gEjtW9XrF3absMP2ihp+SgOTnRaQLlK7Wyh2QU4XKTd0Pyjv+nYTM3R1LRveN2YEg+dWUeGqGJuNs9NArqwIDAQABAoGBAMT0kI78gbrAeM938Knt3NYBIqqzmmX6qsR7wPnkVaxOAejYkZDHwpPSAujA0KH5Pg3o3qwJKl/2897IELQhnBdCfb1AvL87ENj0Kh1+SP5Y2LeqQVRE3HT1fGXlbBDdXDiCNiBcgnIT7nsVKA+KmKUjJI/MvefM9p2sVJudVfdxAkEA+6GtJqjOF4Ver/O+J8LJF5O0/fh6MRvdHKqPNehm+NygtAxsygu1MTpZFJVAHsfdQnL+rRJi9vbqiwHfNbsVmQJBAM+wTmCHhJ7g3RAGswhbgAqg3LfM8dre03b4fwHkp4+S6j5tcYazrN8dqifiL83Hyo0522BQsRt+YADIk7f1TeMCQFhEXWW7Pxf3G8Di4mg2Jq4TjSCtocdKO+TLW5MQY9aWJfUiiqLROoz7J7ZVqHljqJSfnAB/+6Ef+iQq0u6ZIrkCQGDELZBuM81uybD43hurvjm1f4EnvRwULATHfS2dorCTbA6QIY/4UThXcvtIOKuxRd+NMHhswEgmFobm7WSNp68CQEMn75sLC874hitiqVVu6bNyDsOG4X6Cyc8uLKA58BeIg8eG590ehrFHYR0JsawgePsAVXb/RCPuYgONi5TRHBk=

Input Encypted String (Base64 encoded)
e1algxNK5vfiLQmN42bQf9CHJnRGH06w13P+ObHx5U7XJWbCsh9HKclXX88b2peEG4U3K4WC+dSNGLEPe8d3bPwxlBOYXVgsAHKLrgD7gXJDOG+gMawUsUlVx+hWPESITHXDscbcM6zASUuIWGtPkJw3r00MwJy9ZzYqfr2OiJg=

Python RSA Script using (PyCrypt) to decode Encrypted String
//removed python code to convert base64 encoded DER key to ASN.1 and then to RSA key tuple for pycrypto, the following is the hex data within the tuple:
key = ['0x0:0xcc:0x25:0x7:0x33:0x71:0xaa:0x6:0x7a:0x96:0x48:0x3d:0xc4:0xc6:0x24:0x1e:0x40:0x7d:0x20:0x45:0xaa:0x10:0xad:0xe4:0x1f:0x87:0x46:0x96:0x94:0xa2:0xc6:0x73:0x2:0x1a:0x28:0x96:0x3c:0x4a:0xae:0x54:0x5d:0xde:0x82:0xf0:0xc3:0x6a:0x6a:0xca:0x3c:0x86:0x97:0xd6:0xea:0xac:0xa8:0x5a:0x46:0xe0:0x8f:0x68:0x48:0x3f:0x44:0x76:0x2f:0xa9:0x3d:0xe0:0x12:0x3b:0x56:0xf5:0x7a:0xc5:0xdd:0xa6:0xec:0x30:0xfd:0xa2:0x86:0x9f:0x92:0x80:0xe4:0xe7:0x45:0xa4:0xb:0x94:0xae:0xd6:0xca:0x1d:0x90:0x53:0x85:0xca:0x4d:0xdd:0xf:0xca:0x3b:0xfe:0x9d:0x84:0xcc:0xdd:0x1d:0x4b:0x46:0xf7:0x8d:0xd9:0x81:0x20:0xf9:0xd5:0x94:0x78:0x6a:0x86:0x26:0xe3:0x6c:0xf4:0xd0:0x2b:0xab',
'0x1:0x0:0x1',
'0x0:0xc4:0xf4:0x90:0x8e:0xfc:0x81:0xba:0xc0:0x78:0xcf:0x77:0xf0:0xa9:0xed:0xdc:0xd6:0x1:0x22:0xaa:0xb3:0x9a:0x65:0xfa:0xaa:0xc4:0x7b:0xc0:0xf9:0xe4:0x55:0xac:0x4e:0x1:0xe8:0xd8:0x91:0x90:0xc7:0xc2:0x93:0xd2:0x2:0xe8:0xc0:0xd0:0xa1:0xf9:0x3e:0xd:0xe8:0xde:0xac:0x9:0x2a:0x5f:0xf6:0xf3:0xde:0xc8:0x10:0xb4:0x21:0x9c:0x17:0x42:0x7d:0xbd:0x40:0xbc:0xbf:0x3b:0x10:0xd8:0xf4:0x2a:0x1d:0x7e:0x48:0xfe:0x58:0xd8:0xb7:0xaa:0x41:0x54:0x44:0xdc:0x74:0xf5:0x7c:0x65:0xe5:0x6c:0x10:0xdd:0x5c:0x38:0x82:0x36:0x20:0x5c:0x82:0x72:0x13:0xee:0x7b:0x15:0x28:0xf:0x8a:0x98:0xa5:0x23:0x24:0x8f:0xcc:0xbd:0xe7:0xcc:0xf6:0x9d:0xac:0x54:0x9b:0x9d:0x55:0xf7:0x71']

// from https://www.dlitz.net/software/pycrypto/api/current/Crypto.PublicKey.RSA-module.html
// from Crypto.PublicKey import RSA

rsa = RSA.construct(key)
plain_text = RSA.decrypt(cipher_text.decode('base64'))

Python Script Output
0x02:0x96:0xd3:0x80:0xeb:0xcc:0x89:0xa1:0xff:0x0f:0x97:0x64:0x21:0x6b:0xf1:0x69:0xe3:0xa9:0xb7:0x5a:0x7e:0xd8:0xe8:0x2d:0xa9:0x27:0x78:0x90:0x8a:0x56:0x58:0xcd:0x4a:0x08:0x24:0x22:0xdd:0x88:0xa0:0x58:0xe1:0x18:0xd2:0xe4:0xca:0xa3:0xba:0x70:0xa7:0x6d:0x07:0x40:0x9e:0x2a:0x23:0x05:0x73:0x5e:0x23:0xb3:0x0c:0xa8:0xb4:0x43:0xf8:0xee:0xa6:0x67:0xfb:0x56:0xb0:0xcc:0x59:0xe3:0x59:0x9b:0xe5:0x9c:0xae:0xca:0x3f:0x17:0x73:0xf8:0x69:0x1b:0x73:0x20:0xfe:0x2a:0x0d:0x91:0x8f:0x94:0x26:0xde:0x3c:0xdb:0xa2:0x3e:0xf9:0x8f:0x0d:0x8c:0xd2:0x7b:0xfb:0xd6:0x92:0x8c:0x00:0x11:0x5c:0x31:0x5e:0xee:0x76:0xfe:0xf5:0x4a:0x9e:0x04:0x51:0x8a:0x3d:0x93:0xec

C# RSA Decryption Script
static void Main(string[] args)
{
    var derContent = Convert.FromBase64String(base64DerContent); //base64DerContent is the ""Input DER Private Key"" above
    var rsa = DecodeRSAPrivateKey(derContent);
    Byte[] cipher_text_data = Convert.FromBase64String(""e1algxNK5vfiLQmN42bQf9CHJnRGH06w13P+ObHx5U7XJWbCsh9HKclXX88b2peEG4U3K4WC+dSNGLEPe8d3bPwxlBOYXVgsAHKLrgD7gXJDOG+gMawUsUlVx+hWPESITHXDscbcM6zASUuIWGtPkJw3r00MwJy9ZzYqfr2OiJg="");

    Byte[] raw = rsa.Decrypt(cipher_text_data, false);
        string hex = BitConverter.ToString(raw);
        System.Console.WriteLine(""Decrypted: "" + hex);
}
//the following code taken from http://www.jensign.com/opensslkey/opensslkey.cs
//------- Parses binary ans.1 RSA private key; returns RSACryptoServiceProvider  ---
    public static RSACryptoServiceProvider DecodeRSAPrivateKey(byte[] privkey)
    {
        byte[] MODULUS, E, D, P, Q, DP, DQ, IQ;

        // ---------  Set up stream to decode the asn.1 encoded RSA private key  ------
        MemoryStream mem = new MemoryStream(privkey);
        BinaryReader binr = new BinaryReader(mem);    //wrap Memory Stream with BinaryReader for easy reading
        byte bt = 0;
        ushort twobytes = 0;
        int elems = 0;
        try
        {
            twobytes = binr.ReadUInt16();
            if (twobytes == 0x8130) //data read as little endian order (actual data order for Sequence is 30 81)
                binr.ReadByte();        //advance 1 byte
            else if (twobytes == 0x8230)
                binr.ReadInt16();       //advance 2 bytes
            else
                return null;

            twobytes = binr.ReadUInt16();
            if (twobytes != 0x0102) //version number
                return null;
            bt = binr.ReadByte();
            if (bt != 0x00)
                return null;


            //------  all private key components are Integer sequences ----
            elems = GetIntegerSize(binr);
            MODULUS = binr.ReadBytes(elems);

            elems = GetIntegerSize(binr);
            E = binr.ReadBytes(elems);

            elems = GetIntegerSize(binr);
            D = binr.ReadBytes(elems);

            elems = GetIntegerSize(binr);
            P = binr.ReadBytes(elems);

            elems = GetIntegerSize(binr);
            Q = binr.ReadBytes(elems);

            elems = GetIntegerSize(binr);
            DP = binr.ReadBytes(elems);

            elems = GetIntegerSize(binr);
            DQ = binr.ReadBytes(elems);

            elems = GetIntegerSize(binr);
            IQ = binr.ReadBytes(elems);

            System.Console.WriteLine(""showing components .."");
            if (true)
            {
                System.Console.WriteLine(""\nModulus"", MODULUS);
                System.Console.WriteLine(""\nExponent"", E);
                System.Console.WriteLine(""\nD"", D);
                System.Console.WriteLine(""\nP"", P);
                System.Console.WriteLine(""\nQ"", Q);
                System.Console.WriteLine(""\nDP"", DP);
                System.Console.WriteLine(""\nDQ"", DQ);
                System.Console.WriteLine(""\nIQ"", IQ);
            }

            // ------- create RSACryptoServiceProvider instance and initialize with public key -----
            RSACryptoServiceProvider RSA = new RSACryptoServiceProvider();
            RSAParameters RSAparams = new RSAParameters();
            RSAparams.Modulus = MODULUS;
            RSAparams.Exponent = E;
            RSAparams.D = D;
            RSAparams.P = P;
            RSAparams.Q = Q;
            RSAparams.DP = DP;
            RSAparams.DQ = DQ;
            RSAparams.InverseQ = IQ;
            RSA.ImportParameters(RSAparams);
            return RSA;
        }
        catch (Exception)
        {
            return null;
        }
        finally
        {
            binr.Close();
        }
    }
    private static int GetIntegerSize(BinaryReader binr)
    {
        byte bt = 0;
        byte lowbyte = 0x00;
        byte highbyte = 0x00;
        int count = 0;
        bt = binr.ReadByte();
        if (bt != 0x02)     //expect integer
            return 0;
        bt = binr.ReadByte();

        if (bt == 0x81)
            count = binr.ReadByte();    // data size in next byte
        else
            if (bt == 0x82)
            {
                highbyte = binr.ReadByte(); // data size in next 2 bytes
                lowbyte = binr.ReadByte();
                byte[] modint = { lowbyte, highbyte, 0x00, 0x00 };
                count = BitConverter.ToInt32(modint, 0);
            }
            else
            {
                count = bt;     // we already have the data size
            }



        while (binr.ReadByte() == 0x00)
        {   //remove high order zeros in data
            count -= 1;
        }
        binr.BaseStream.Seek(-1, SeekOrigin.Current);       //last ReadByte wasn't a removed zero, so back up a byte
        return count;
    }

C# Script Output
11-5C-31-5E-EE-76-FE-F5-4A-9E-04-51-8A-3D-93-EC

As you can see the output of the C# code is only 16 bytes long, however it directly matches the last 16 bytes of the python script. I'm not sure exactly what is going on, and my (basic) understanding of RSA tells me it should be an all or nothing function--the whole text gets decrypted, or I get gibberish.
","The issue here is padding. RSA operations require that the message be padded with a secure padding scheme before encryption. Otherwise, certain attacks exist that could recover the private key. Here's a good article explaining why.
For some reason, the Python crypto library is not removing the padding for you, but the C# library is. So you'll have to remove the padding manually in the Python code.
Lucky for you, from the data you give, it looks like the padding scheme being used here is PKCS#1.5. That's a relatively simple padding scheme that will be easy to handle. The full specs are in RFC 3447, but it boils down to this:
EM = 0x00 || 0x02 || PS || 0x00 || M.

where EM is the padded message before encryption, PS is the padding, and M is the original, unpadded message.
Here's a Python function that should do the job for you:
def RemovePKCS15Padding( padded_msg ):
    if len(padded_msg) < 2 or padded_msg[0]!='\x02':
        raise PaddingError # or whatever
    p = padded_msg.find('\x00')
    if p < 0:
        raise PaddingError # or whatever
    return padded_msg[p+1:]

","573","<c#><python><encryption><pycrypto><rsacryptoserviceprovider>","1","3","1","2013-08-20 18:17:59","18342239","0","1","1157633","","2013-08-20 16:55:07","2013-08-20 16:33:16",""
"38520912","firebase authentication with google python endpoints","I am integrating federated login using firebase authentication and I have REST API's on google appengine endpoints and other servers that am accessing.
Conceptually, the user logs in via firebase google signin, the angular web client gets the id token using the firebase client libraries and sends it to the google endpoint. The google endpoint verifies the id token to grant access.
After reading and working through various articles I have finally got something working, however I have very little experience in this area of authorization and was wondering if there was a better way to do this.
Code to get the id token on the client side is 
firebase.auth().currentUser.getToken(true).then(function(idToken) {
   // Send token to your backend via HTTPS
}

This code works and I get the correct id token.
For now I am using postman to send this id token to the app engine endpoint in the authorization header.
Google appengine endpoint code is
# only showing imports specifically required for cryptography 
import jwt
import jwt.algorithms

from jwt.contrib.algorithms.pycrypto import RSAAlgorithm
jwt.register_algorithm('RS256', RSAAlgorithm(RSAAlgorithm.SHA256))

logging.debug(""algorithms = "", jwt.algorithms.get_default_algorithms())

#had to install pyjwt as a library in appengine https://cloud.google.com/appengine/docs/python/tools/using-libraries-python-27

import json
import base64

from Crypto.Util.asn1 import DerSequence
from Crypto.PublicKey import RSA
from binascii import a2b_base64

import httplib


"""""" Message to accept a JWT for access """"""
class UserJWTMsg(messages.Message):
    token = messages.StringField(1)

class UserMsg(messages.Message):
    name = messages.StringField(1)

# [START user_api]
@endpoints.api(name='user', version='v1')
class UserApi(remote.Service):

    """""" Access with id Token """"""
    @endpoints.method(
        message_types.VoidMessage,
        UserMsg,
        path='access-with-idToken',
        http_method='GET',
        name='access-with-idToken')
    def access_with_id_token(self, request):
      id_token = self.request_state.headers.get('authorization')

      id_token_parts = id_token.split('.')

      #get key id from the token header
      #check if padding needs to be added to the id token header
      padding_count = 4 - len(id_token_parts[0])%4
      if padding_count:
        id_token_header = id_token_parts[0] + b'='*padding_count

      #decode base64 header
      decoded_id_token_header_json = base64.b64decode(id_token_header)
      decoded_id_token_header = json.loads(decoded_id_token_header_json)

      #get key id from the header
      key_id = decoded_id_token_header['kid']

      #get certificate for the given key id, #cert = CERTS.get(key_id)
      cert = getCertificate(key_id)

      #get the public key from certificate
      public_key = pubKeyFrmCert(cert)

      #decode / verify id token
      decoded_payload = jwt.decode(id_token, public_key, audience='audience')

      return UserMsg(name=json.dumps(decoded_payload));


"""""" get Certificate for key id """"""
def getCertificate(key_id):

    c =       httplib.HTTPSConnection(""www.googleapis.com/robot/v1/metadata/x509/securetoken@system.gserviceaccount.com"")
    c.request(""GET"", ""/"")

    response = c.getresponse()

    cert_str = response.read()
    cert_obj = json.loads(cert_str)
    cert = cert_obj.get(key_id)

    return(cert)


"""""" return a public key from a X509 certificate """"""
"""""" http://stackoverflow.com/questions/12911373/how-do-i-use-a-x509-certificate-with-pycrypto """"""
def pubKeyFrmCert(cert):

    lines = cert.replace("" "",'').split()
    der = a2b_base64(''.join(lines[1:-1]))

    # Extract subjectPublicKeyInfo field from X.509 certificate (see RFC3280)
    cert = DerSequence()
    cert.decode(der)
    tbsCertificate = DerSequence()
    tbsCertificate.decode(cert[0])
    subjectPublicKeyInfo = tbsCertificate[6]

    # Initialize RSA key
    rsa_key = RSA.importKey(subjectPublicKeyInfo)

    return(rsa_key)

","","571","<google-app-engine><google-cloud-endpoints><jwt><firebase-authentication><pycrypto>","1","","0","2016-07-23 02:25:33","","0","1","4495081","","2016-07-23 02:25:33","2016-07-22 07:43:50",""
"50526408","pycrypto works on python2.7 not python3.6","I am using Ubuntu 16 machine. I want to use python 3. I isntalled it. However, I have to use the command python3 otherwise it runs python2.7.
I installed pycrypto library using pip install pycrypto but when I try to import from pycrypto using python3 I get this error:
>>> from Crypto.Cipher import AES
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
ImportError: No module named 'Crypto'

While I do not face the same problem in python 2.7 (the import works fine). What is the problem? how to solve it?
UPDATE:
I tried pip3 and this is the result:
x@x-VirtualBox:~$ sudo -H pip3 install pycrypto
Requirement already satisfied: pycrypto in /usr/local/lib/python3.6/dist-packages (2.6.1)
x@x-VirtualBox:~$ python3
Python 3.5.2 (default, Nov 23 2017, 16:37:01) 
[GCC 5.4.0 20160609] on linux
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> from Crypto.Cipher import AES
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
ImportError: No module named 'Crypto'
>>> 

","As you are using python3:
pip3 install pycrypto

","570","<python><python-3.x><python-2.7><python-3.6><pycrypto>","0","0","2","2018-05-25 14:55:48","","2","","9371654","","2018-05-25 10:18:21","2018-05-25 09:54:33",""
"50526408","pycrypto works on python2.7 not python3.6","I am using Ubuntu 16 machine. I want to use python 3. I isntalled it. However, I have to use the command python3 otherwise it runs python2.7.
I installed pycrypto library using pip install pycrypto but when I try to import from pycrypto using python3 I get this error:
>>> from Crypto.Cipher import AES
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
ImportError: No module named 'Crypto'

While I do not face the same problem in python 2.7 (the import works fine). What is the problem? how to solve it?
UPDATE:
I tried pip3 and this is the result:
x@x-VirtualBox:~$ sudo -H pip3 install pycrypto
Requirement already satisfied: pycrypto in /usr/local/lib/python3.6/dist-packages (2.6.1)
x@x-VirtualBox:~$ python3
Python 3.5.2 (default, Nov 23 2017, 16:37:01) 
[GCC 5.4.0 20160609] on linux
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> from Crypto.Cipher import AES
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
ImportError: No module named 'Crypto'
>>> 

","Apparently, you have 2 Python3 instances installed:

Python3.6:


Which is the one you want to use
Where pycrypto is installed (by pip3)

Python3.5.2:


Which is launched by python3 command


So, you are launching the wrong Python interpreter, most likely because python3 points to /usr/bin/python3 (you can check that by typing which python3 in your shell), which is Python3.5.2, and whose path is in the ${PATH} env var.
From your pip paths, it seems like Python3.6 is installed under /usr/local (and the executable would be /usr/local/bin/python3), so you can either:

Launch the Python3 executable by its full path (/usr/local/bin/python3, as stated above)
Add /usr/local/bin to ${PATH} before /usr/bin, and then simply launch Python3.6 by typing python3 in your shell - but I'd advise against that
There are other methods (e.g. creating an alias), but I guess you got the idea

@EDIT0:
Some more info as requested in comments. This has nothing to do with Python, it' all just Ubtu stuff:

To list packages: use apt or dpkg
To check Python2.7 (or any other version): use which (as above)
You don't need to uninstall Python3.5. Multiple version can coexist safely
If you want to make one as default, make an alias (like I did at the end of the example below) and if you want it to be persistent, place it in your profile file (e.g. .profile, .bashrc, .bash_profile)

Examples (on my VM):

[cfati@cfati-ubtu16x64-0:~/Work/Dev/StackOverflow/q050526408]> apt list python python3
Listing... Done
python/xenial-updates,now 2.7.12-1~16.04 amd64 [installed]
python3/xenial,now 3.5.1-3 amd64 [installed]
[cfati@cfati-ubtu16x64-0:~/Work/Dev/StackOverflow/q050526408]> which python
/usr/bin/python
[cfati@cfati-ubtu16x64-0:~/Work/Dev/StackOverflow/q050526408]> ll /usr/bin/python
lrwxrwxrwx 1 root root 7 mar 12 16:25 /usr/bin/python -> python2*
[cfati@cfati-ubtu16x64-0:~/Work/Dev/StackOverflow/q050526408]> dpkg -S /usr/bin/python3 /usr/bin/python2
python3-minimal: /usr/bin/python3
python-minimal: /usr/bin/python2
[cfati@cfati-ubtu16x64-0:~/Work/Dev/StackOverflow/q050526408]> alias python3=/usr/local/bin/python3


","570","<python><python-3.x><python-2.7><python-3.6><pycrypto>","0","2","2","2018-05-25 14:55:48","","2","","9371654","","2018-05-25 10:18:21","2018-05-25 09:54:33",""
"19884014","Not able to install python module pycrypto","I am trying to use a python module for using Mega and it requires me to have pycrypto installed. I tried using both pip and easy_install to install it but I have had no luck. With pip I am getting an error like this post. I followed the link from the answer in that post, but I really have no idea where to go from there. I am using Windows 7.
","Pycripto is C-based extension. You can compile PyCrypto on Windows, here is a step-by-step guide.
Alternatively, you can install compiled binaries. 
Here is extensive source of compiled python packages for Windows:
Unofficial Windows Binaries for Python Extension Packages
","569","<python><pycrypto>","0","2","1","2014-06-11 17:35:59","19884061","0","","-1","user3413108","2017-05-23 10:26:48","2013-11-09 22:41:49","2013-11-10 12:28:15"
"48280670","Pycrypto: How to view raw RSA signature data?","I'm working with a service that uses raw RSA with a private key to sign a payload. The data is effectively produced using:
openssl rsautl -inkey private_key.pem -raw -sign

(Also, the result of encrypting with the private key)
Unfortunately, in Pycrypto the corresponding .verify() method only takes an argument to verify the data against to return true or false.
In openssl, this could be achieved with one of the following:
# Private key based
openssl rsautl -inkey private_key.pem -raw -verify
# Public key based
openssl rsautl -inkey public_key.pem -pubin -raw -verify

How can I achieve the same functionality in Pycrypto?
(I understand the risks of raw RSA. A custom padding mechanism has been implemented to mitigate some of those risks. Unfortunately, it's not possible to change the current implementation)
","Delving into the .verify() method, one can find how Pycrypto builds the verification signature before comparing it to the given required signature.
It essentially uses Python's pow() method with the key's public (e) and the key's modulus (n). You will first need to pack the secret message into a (long) integer and then convert the result back to bytes. Fortunately, Pycrypto provides everything you need.
from Crypto.PublicKey import RSA
from Crypto.Util import number

key = RSA.importKey(private_key_str, key_password_str)

# The message must be packed as a long first.
secret_message_long = number.bytes_to_long(secret_message_bytes)
# The magic!        
verify_long = pow(encrypted_session_key_long, key.e, key.n)
# and back to bytes
verify_bytes = number.long_to_bytes(result_long)

# Convert message back to a str (Unicode str in Py2).
# Replace 'utf-8' with the correct encoding for *your* message!!!!!
verify_str = verify_bytes.decode('utf-8')

","568","<python><encryption><rsa><pycrypto>","0","0","1","2018-01-16 11:54:45","48280671","4","","","","","2018-01-16 11:54:45",""
"43059468","SHA1withRSA verify in python?","I want to rewrite the code of Java to Python.The code is used to verify data through a .cer file.
public static boolean verifyByRSA(String certPath, byte[] aPlainData,
        byte[] aSignature) {
    boolean tResult = false;
    try {
        InputStream inStream = new FileInputStream(certPath);
        CertificateFactory tCertFactory = CertificateFactory
                .getInstance(""X.509"");
        Certificate tCertificate = tCertFactory
                .generateCertificate(inStream);

        Signature tSign = Signature.getInstance(""SHA1withRSA"", ""BC"");
        tSign.initVerify(tCertificate);

        tSign.update(aPlainData);
        tResult = tSign.verify(aSignature);

    } catch (Exception e) {
        e.printStackTrace();
    }
    return tResult;
}

The .cer file is like:  
-----BEGIN CERTIFICATE-----
MIIDhzCCAm+gAwIBAgIGASYISh96MA0GCSqGSIb3DQEBBQUAMF8xCzAJBgNVBAYTAkNOMSkwJwYDVQQKDCBBbGxpbnBheSBOZXR3b3JrIFNlcnZpY2VzIENvLkx0ZDElMCMGA1UECwwcQWxsaW5wYXkgUHJpbWFyeSBDZXJ0aWZpY2F0ZTAeFw0xMDAxMDcxMDE3NDBaFw0zMDAxMDIxMDE3NDBaMGQxCzAJBgNVBAYTAkNOMSkwJwYDVQQKDCBBbGxpbnBheSBOZXR3b3JrIFNlcnZpY2VzIENvLkx0ZDEqMCgGA1UECwwhQWxsaW5wYXkgRGlnaXRhbCBTaWduIENlcnRpZmljYXRlMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDEv2q2/xN5PF0dLn1vhIaVlyWsvJFVFxWgH7sQBObzYbZXOOVzoQpmXuSFOrF0/ol4Okd/2OGfdXUUFSUZfzAQOT1Wmjupec7z2V6l4/PT7aOg6t/MJwU9aW9Iw+AFzM1vnLOXdTlWVLZbtB7IiJ/HhfwBDkyvhp1zNYoAPrwC5QIDAQABo4HHMIHEMB0GA1UdDgQWBBQlWQA//YbuEdfE1yP+PpnokDO8WDCBjgYDVR0jBIGGMIGDgBSBWR3Bvx8To7TrecKhCM4smeabN6FjpGEwXzELMAkGA1UEBhMCQ04xKTAnBgNVBAoMIEFsbGlucGF5IE5ldHdvcmsgU2VydmljZXMgQ28uTHRkMSUwIwYDVQQLDBxBbGxpbnBheSBQcmltYXJ5IENlcnRpZmljYXRlggYBJghKHowwEgYDVR0TAQH/BAgwBgEB/wIBADANBgkqhkiG9w0BAQUFAAOCAQEATzT9GuAmAXLSWpoGc0F7Km7DPMWvSAkq8ckJLftF0/lB3JTR6QT5rsTnQHCdRU7SJX+eLNwhJQdRg34dPJAI2z/HpgGu7tW7pdsHjCjlVae3I64h2OzYBGXdtdRyPmyXfBOgXUfqtH0Fg+1QqsRmcRugywjZH8ZQAVYm0TkVJmdBknPp60bJ2gE/nj0w6VaSL6HMAQ+A7AVne3NDreBXepMHgiFqiqMHrZFBQCgTSR1UwZoT8hwXaaUgwf2h9l/D2QOGCD8G3sRKfMsH3clkehXbprWPNk3uww7dCT0pGz845AyKzCmRK60Z/NOgMG5X+f+JmugsS/bKYwjetXHg9Q==
-----END CERTIFICATE-----  
I have tried  
from Crypto.PublicKey import RSA
from Crypto.Signature import PKCS1_v1_5
from Crypto.Hash import SHA

key = RSA.importKey(open(cer_path).read())
signer = PKCS1_v1_5.new(key)
digest = SHA.new()
digest.update(str_to_sign)
if signer.verify(digest, base64.decodestring(signature)):
    return True
return False  

But can't get the right result.What does the java code means?
","The importKey function supports the following:

X.509 subjectPublicKeyInfo DER SEQUENCE (binary or PEM encoding)
PKCS#1 RSAPublicKey DER SEQUENCE (binary or PEM encoding)
OpenSSH (textual public key only)

Now only the first and second are part of an X.509 certificate.
You need a library to parse X.509 certificates, such as the cryptography package.
As a stopgap measure you can get the RSAPublicKey object in your Java code and call getEncoded. This will return a DER SEQUENCE with a subjectPublicKeyInfo that can be imported in Python crypto (the first supported format by the importKey function).
","561","<java><python><rsa><digital-signature><pycrypto>","0","1","1","2017-03-28 23:01:14","43081411","2","","1816580","","2017-03-28 07:39:18","2017-03-28 02:09:48",""
"36906461","Script made compiled with pyinstaller DLL load fail","I have compiled a script with pyinstaller and it compiles fine but when I run the program I get the following error in the console window.
ImportError: DLL load failed: The specified module could not be found.

I am trying to import Crypto when I get this error. Why does this happen and how can I fix it?
","According to the pyinstaller manual:

You can verify that hidden import is the problem by using Python's verbose imports flag. If the import messages say ""module not found"", but the warnproject.txt file has no ""no module named..."" message for the same module, then the problem is a hidden import.
Hidden imports are handled by hooking the module (the one doing the hidden imports) at Analysis time. Do this as follows:

Create a file named hook-module.py (where module is the fully-qualified Python name, eg, hook-xml.dom.py) and place it somewhere. Remember the place as your private hooks directory.
In the .spec file, pass your private hooks directory as hookspath argument to Analysis so will be searched. Example:
a = Analysis(['myscript.py'], hookspath='/my/priv/hooks') 
  In most cases the hook module will have only one line:
hiddenimports = ['module1', 'module2']
  When the Analysis finds this file, it will proceed exactly as though the module explicitly imported module1 and module2.


This question seems related, the answers might also be useful for you.
Finally, this report seems to contain a similar problem. The user seemingly was able to fix it by updating to pyinstaller 2.1, so you might want to give that a try if you haven't already.
","559","<python><pyinstaller><pycrypto>","0","0","1","2016-04-28 06:22:24","36906779","1","","","","","2016-04-28 06:03:30",""
"51350462","Python encryption unicode error when converting from Python 2 to python 3","I found some code which I want to incorporate into my Python encryption program. It should encrypt the files in the code's same directory, and I want it to target a directory. But, it's written in Python 2 and when I change around some code to fit Python 3, I get the following error:
Traceback (most recent call last):
  File ""/home/pi/Desktop/Projects/FyleCript/Dev Files/encryption.py"", line 77, in <module>
    encrypt(SHA256.new(password).digest(), str(Tfiles))
  File ""/usr/lib/python3/dist-packages/Crypto/Hash/SHA256.py"", line 88, in new
    return SHA256Hash().new(data)
  File ""/usr/lib/python3/dist-packages/Crypto/Hash/SHA256.py"", line 75, in new
    return SHA256Hash(data)
  File ""/usr/lib/python3/dist-packages/Crypto/Hash/SHA256.py"", line 72, in __init__
    HashAlgo.__init__(self, hashFactory, data)
  File ""/usr/lib/python3/dist-packages/Crypto/Hash/hashalgo.py"", line 51, in __init__
    self.update(data)
  File ""/usr/lib/python3/dist-packages/Crypto/Hash/hashalgo.py"", line 69, in update
    return self._hash.update(data)
TypeError: Unicode-objects must be encoded before hashing

But the code works perfectly in Python 2. I have tried looking for similar questions on SO and Googling, but no help.

Code:
#-*- coding:utf-8 -*-

#Python 
from Crypto.Hash import SHA256
from Crypto.Cipher import AES
import os, random, sys, pkg_resources

def encrypt(key, filename):
        chunksize = 64 * 1024
        outFile = os.path.join(os.path.dirname(filename), ""(encrypted)""+os.path.basename(filename))
        filesize = str(os.path.getsize(filename)).zfill(16)
        IV = ''

        for i in range(16):
                IV += chr(random.randint(0, 0xFF))

        encryptor = AES.new(key, AES.MODE_CBC, IV)

        with open(filename, ""rb"") as infile:
                with open(outFile, ""wb"") as outfile:
                        outfile.write(filesize)
                        outfile.write(IV)
                        while True:
                                chunk = infile.read(chunksize)

                                if len(chunk) == 0:
                                        break

                                elif len(chunk) % 16 !=0:
                                        chunk += ' ' *  (16 - (len(chunk) % 16))

                                outfile.write(encryptor.encrypt(chunk))


def decrypt(key, filename):
        outFile = os.path.join(os.path.dirname(filename), os.path.basename(filename[11:]))
        chunksize = 64 * 1024
        with open(filename, ""rb"") as infile:
                filesize = infile.read(16)
                IV = infile.read(16)

                decryptor = AES.new(key, AES.MODE_CBC, IV)

                with open(outFile, ""wb"") as outfile:
                        while True:
                                chunk = infile.read(chunksize)
                                if len(chunk) == 0:
                                        break

                                outfile.write(decryptor.decrypt(chunk))

                        outfile.truncate(int(filesize))

def allfiles():
        allFiles = []
        for root, subfiles, files in os.walk(os.getcwd()):
                for names in files:
                        allFiles.append(os.path.join(root, names))

        return allFiles


choice = input(""Do you want to (E)ncrypt or (D)ecrypt? "")
password = input(""Enter the password: "") 

encFiles = allfiles()

if choice == ""E"" or 'e':
        for Tfiles in encFiles:
                if os.path.basename(Tfiles).startswith(""(encrypted)""):
                        print(""%s is already encrypted"" %str(Tfiles))
                        pass

                elif Tfiles == os.path.join(os.getcwd(), sys.argv[0]):
                        pass
                else:
                        encrypt(SHA256.new(password).digest(), str(Tfiles))
                        print(""Done encrypting %s"" %str(Tfiles))
                        os.remove(Tfiles)


elif choice == ""D"" or 'd':
        filename = input(""Enter the filename to decrypt: "")
        if not os.path.exists(filename):
                print(""The file does not exist"")
                sys.exit()
        elif not filename.startswith(""(encrypted)""):
                print(""%s is already not encrypted"" %filename)
                sys.exit()
        else:
                decrypt(SHA256.new(password).digest(), filename)
                print(""Done decrypting %s"" %filename)
                os.remove(filename)

else:
        print(""Please choose a valid command."")
        sys.exit()

Can anyone help me with this problem? I have used a Python 2 to 3 tool, but it still didn't work.
Also, could you please fix the directory problem? It isn't necessary, but I would like it.

EDIT: I have replaced str with bytes and bytearray but it returns the same error.
","Your 'password' variable is a string, but SHA256.new expects bytes (to allow for unicode, for example). That you need bytes is listed in the Crypto.Hash.SHA256 documentation.
The solution is to encode the password to bytes before hashing. This is almost literally what the error message says (if you know that all strings in python 3 are unicode objects):
TypeError: Unicode-objects must be encoded before hashing

The solution is for example to encode with utf8 :
SHA256.new(password.encode('utf8')).digest()

","558","<python><python-3.x><python-2.7><pycrypto><python-unicode>","0","2","1","2018-09-07 01:25:33","51352758","18","1","9190768","","2018-09-07 01:25:33","2018-07-15 17:12:48",""
"12468835","Errors when including DES.pyd in python 2.6 solution","I have installed Python 2.7 on my windows 7 x64 system with PyCrypto 2.5 compiled and built in. In my install path of D:\Python27\Lib\site-packages\Crypto\Cipher I see DES.pyd. I have opened it with dependency walker and ensured it had initDES as its only export.
What I wanted to do was copy/paste DES.pyd out now that it's built and use it in my code. So now I have my project folder D:\project containing test.py and DES.pyd.
test.py contains the code:
import sys
sys.path.append(""D:\\project\\"")
import DES
print 'hi'

when running test.py, i receive the following error:
Traceback (most recent call last):
  File ""test.py"", line 3, in <module>
    import DES
SystemError: dynamic module not initialized properly</code></pre>

The purpose of this exercise is to be able to send DES.pyd and test.py to my friend without having them require to build and install pycrypto (a PITA). I fully understand my code above does absolutely nothing involving DES, the fact that it cannot import it is my main curiosity. Real code using DES will follow. 
Also, if I import DES.pyd directly from the python path like from Crypto.Cipher import DES works just fine.
Thanks!
","Take a look at the source code at https://github.com/dlitz/pycrypto/blob/master/src/block_template.c#L801. The module name is hard coded to Crypto.Cipher._DES. Initialization will fail if _DES.pyd is not in the Crypto.Cipher package directory.
","556","<python><des><pycrypto><pyd>","0","0","1","2012-09-18 12:23:35","12471049","0","","1491200","","2012-09-18 12:23:35","2012-09-18 00:23:52",""
"47290667","Simple Python AES decryption for longer ciphertexts","I am not an expert in AES and moreover I have to deliver the deciphering function to a very limited Python 2 environment.
I have a 32-byte key and a 16-byte initialisation vector along with a 64-byte test cipher message - all of type str. AES operates in a cipher-block chaining mode.
With pycrypto it all works and I get a 64-symbol decrypted message of type unicode.
from Crypto.Cipher import AES

cipher = AES.new(key, AES.MODE_CBC, vector)
decryption = cipher.decrypt(message).decode()
print(decryption)

Unfortunately the pycrypto itself is not supported in the final environment as I believe it has some fancy compiled dependencies for AES.
There is a purely Python alternative called pyaes:
import pyaes

cipher = pyaes.AESModeOfOperationCBC(key, vector)
decryption = cipher.decrypt(message[0:16]).decode()
print(decryption)

Notice that I sliced the first 16 bytes and got the first 16 symbols of the decrypted message (of type unicode) correctly.
However, once I try the full message I get
ValueError: ciphertext block must be 16 bytes.
Even if I slice message[16:32], I get 
UnicodeDecodeError: 'ascii' codec can't decode byte 0xb8 in position 0: ordinal not in range(128).
So how to use the pyaes and decrypt longer ciphertexts in my case?

The secret plaintext looks like this
{""valueInt"":123, ""valueFloat"":1.23, ""valueString"":""123""}

with trailing (padded) spaces.
","Possibility 1. The case of the message[16:32] is that the first part of your unencrypted text could have multibyte characters, so after taking 16 bytes, 1+ byte is leaking to the second part of your original/unencrypted string. Though this is only if you are using multibyte characters.
If you are also encrypting them, you could try converting the text to binary first if your encoding is utf8: 
cipher.encrypt(mystring.encode('utf8'))

and in reverse
cipher.decrypt(mystring.decode('utf8'))

Possiblity 2. If you are decrypting with the same AESModeOfOperationCFB you should try with a new instance for decryption. The following code fails to decrypt the correct text which contains non valid ascii bytes.
cipher = pyaes.AESModeOfOperationCBC(key, vector)
encrypted = cipher.decrypt('Hello world')
print(encrypted)
# ?Eg?m??K?(|
decrypted = cipher.decrypt(encrypted)
print(decrypted)
# ?XL=?-QE??Y?=k

But if you do this way:
encrypter = pyaes.AESModeOfOperationCBC(key, vector)
encrypted = cipher.encrypt('Hello world !!!!')
print(encrypted)
# ?Eg?m??K?(|
decrypter = pyaes.AESModeOfOperationCBC(key, vector)
decrypted = decrypter.decrypt(encrypted)
# Hello world !!!!

If you are encrypting 2 blocks with same instance and then concatenate them, you need a new instance which decrypt 2 new blocks. Or encrypt/decrypt each block with a new instance each.
","555","<python><python-2.7><unicode><pycrypto>","1","0","1","2017-11-15 16:29:57","47299525","1","","2153626","","2017-11-15 16:29:57","2017-11-14 16:26:35",""
"32020356","Non-detached PKCS#7 SHA1+RSA signature without M2Crypto","I'm trying to create a non-detached signature on python3. I currently have code that does this on python2 with m2crypto, but m2crypto isn't available for python3.
I've been trying rsa, pycrypto and openssl, but haven't seen to find how.
Here's the equivalent OpenSSL command:
openssl smime -sign -signer $CRTFILE -inkey $KEYFILE -outformDER -nodetach

It's the nodetach option that I can't imitate with either rsa, pyopenssl or pycrypto.
Has anyone does this on python3? I'd like to avoid using Popen+openssl as much as possible.
","I actually ended up solving this with OpenSSL.crypto, albeit, with some internal methods:
from OpenSSL import crypto

PKCS7_NOSIGS = 0x4  # defined in pkcs7.h


def create_embeded_pkcs7_signature(data, cert, key):
    """"""
    Creates an embeded (""nodetached"") pkcs7 signature.

    This is equivalent to the output of::

        openssl smime -sign -signer cert -inkey key -outform DER -nodetach < data

    :type data: bytes
    :type cert: str
    :type key: str
    """"""  # noqa: E501

    assert isinstance(data, bytes)
    assert isinstance(cert, str)

    try:
        pkey = crypto.load_privatekey(crypto.FILETYPE_PEM, key)
        signcert = crypto.load_certificate(crypto.FILETYPE_PEM, cert)
    except crypto.Error as e:
        raise ValueError('Certificates files are invalid') from e

    bio_in = crypto._new_mem_buf(data)
    pkcs7 = crypto._lib.PKCS7_sign(
        signcert._x509, pkey._pkey, crypto._ffi.NULL, bio_in, PKCS7_NOSIGS
    )
    bio_out = crypto._new_mem_buf()
    crypto._lib.i2d_PKCS7_bio(bio_out, pkcs7)
    signed_data = crypto._bio_to_string(bio_out)

    return signed_data

","552","<python><rsa><signing><pycrypto><pyopenssl>","5","1","2","2017-11-03 15:08:14","47098879","0","1","","","","2015-08-15 00:33:55",""
"32020356","Non-detached PKCS#7 SHA1+RSA signature without M2Crypto","I'm trying to create a non-detached signature on python3. I currently have code that does this on python2 with m2crypto, but m2crypto isn't available for python3.
I've been trying rsa, pycrypto and openssl, but haven't seen to find how.
Here's the equivalent OpenSSL command:
openssl smime -sign -signer $CRTFILE -inkey $KEYFILE -outformDER -nodetach

It's the nodetach option that I can't imitate with either rsa, pyopenssl or pycrypto.
Has anyone does this on python3? I'd like to avoid using Popen+openssl as much as possible.
","It looks like you can achieve this with pyca/cryptography if you do not mind doing some lower-level OpenSSL programming. You can give this a try:
from cryptography import x509
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.bindings.openssl.binding import Binding

_lib = Binding.lib
_ffi = Binding.ffi

msg = ""Hello, World!""

with open('key.pem', 'rb') as key_file:
    private_key = serialization.load_pem_private_key(
        key_file.read(), None, default_backend())

with open('cert.pem', 'rb') as cert_file:
    cert = x509.load_pem_x509_certificate(
        cert_file.read(), default_backend())

bio_in = _lib.BIO_new_mem_buf(msg.encode('utf-8'), len(msg))
pkcs7 = _lib.PKCS7_sign(cert._x509, private_key._evp_pkey, _ffi.NULL, bio_in, 0)

bio_out=_lib.BIO_new(_lib.BIO_s_mem())
_lib.PEM_write_bio_PKCS7(bio_out, pkcs7)

result_buffer = _ffi.new('char**')
buffer_length = _lib.BIO_get_mem_data(bio_out, result_buffer)
sout = _ffi.buffer(result_buffer[0], buffer_length)[:]

print(sout.decode('utf-8'))

This script is for illustration purposes only and there might be better ways to do it. This approach basically mimics your openssl smime command.
If you do want to go down this path, you will have to look closer at memory management and free up things when you are done. There is a reason why this stuff is called hazmat...
","552","<python><rsa><signing><pycrypto><pyopenssl>","5","2","2","2017-11-03 15:08:14","47098879","0","1","","","","2015-08-15 00:33:55",""
"53577563","pycryptodome setup.py causing an error when installing pyrebase","I am trying to install Pyrebase, but I keep getting an error that I believe is caused by setup.py for pycryptodome. I have searched all over but cannot find a solution, does anyone know how to solve this? 
My output is below - I added in (...) in places to truncate the output, which was creating and copying libraries. 
Thanks for the help
(backend-ragxWAh7) bash-3.2$ pip install Pyrebase
Collecting Pyrebase
 (...)
Building wheels for collected packages: pycryptodome
  Running setup.py bdist_wheel for pycryptodome ... error
  Complete output from command /Users/rafilurie/.local/share/virtualenvs/backend-ragxWAh7/bin/python -u -c ""import setuptools, tokenize;__file__='/private/var/folders/d5/zwblxz7d3gxcks_wgjcyxw_00000gn/T/pip-install-q_NyfS/pycryptodome/setup.py';f=getattr(tokenize, 'open', open)(__file__);code=f.read().replace('\r\n', '\n');f.close();exec(compile(code, __file__, 'exec'))"" bdist_wheel -d /private/var/folders/d5/zwblxz7d3gxcks_wgjcyxw_00000gn/T/pip-wheel-8ox7HU --python-tag cp27:
  running bdist_wheel
  running build
  running build_py
  creating build
  creating build/lib.macosx-10.14-intel-2.7
  creating build/lib.macosx-10.14-intel-2.7/Crypto
  copying lib/Crypto/__init__.py -> build/lib.macosx-10.14-intel-2.7/Crypto
  (...)
  copying lib/Crypto/SelfTest/Signature/test_vectors/PKCS1-PSS/SigVerPSS_186-3.rsp -> build/lib.macosx-10.14-intel-2.7/Crypto/SelfTest/Signature/test_vectors/PKCS1-PSS
  warning: PCTBuildPy: byte-compiling is disabled, skipping.

  running build_ext
  warning: no support for Intel AESNI instructions
  building 'Crypto.Hash._MD2' extension
  creating build/temp.macosx-10.14-intel-2.7
  creating build/temp.macosx-10.14-intel-2.7/src
  cc -fno-strict-aliasing -fno-common -dynamic -g -Os -pipe -fno-common -fno-strict-aliasing -fwrapv -DENABLE_DTRACE -DMACOSX -DNDEBUG -Wall -Wstrict-prototypes -Wshorten-64-to-32 -DNDEBUG -g -fwrapv -Os -Wall -Wstrict-prototypes -DENABLE_DTRACE -arch i386 -arch x86_64 -pipe -DLTC_NO_ASM -Isrc/ -I/System/Library/Frameworks/Python.framework/Versions/2.7/include/python2.7 -c src/MD2.c -o build/temp.macosx-10.14-intel-2.7/src/MD2.o
  xcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun
  error: command 'cc' failed with exit status 1

  ----------------------------------------
  Failed building wheel for pycryptodome
  Running setup.py clean for pycryptodome
Failed to build pycryptodome
Installing collected packages: pycryptodome, Pyrebase
  Running setup.py install for pycryptodome ... error
    Complete output from command /Users/rafilurie/.local/share/virtualenvs/backend-ragxWAh7/bin/python -u -c ""import setuptools, tokenize;__file__='/private/var/folders/d5/zwblxz7d3gxcks_wgjcyxw_00000gn/T/pip-install-q_NyfS/pycryptodome/setup.py';f=getattr(tokenize, 'open', open)(__file__);code=f.read().replace('\r\n', '\n');f.close();exec(compile(code, __file__, 'exec'))"" install --record /private/var/folders/d5/zwblxz7d3gxcks_wgjcyxw_00000gn/T/pip-record-1TJZWz/install-record.txt --single-version-externally-managed --compile --install-headers /Users/rafilurie/.local/share/virtualenvs/backend-ragxWAh7/include/site/python2.7/pycryptodome:
    running install
    running build
    running build_py
    (...)
    creating build/lib.macosx-10.14-intel-2.7/Crypto/SelfTest/Signature/test_vectors/PKCS1-v1.5
    copying lib/Crypto/SelfTest/Signature/test_vectors/PKCS1-v1.5/SigVer15_186-3.rsp -> build/lib.macosx-10.14-intel-2.7/Crypto/SelfTest/Signature/test_vectors/PKCS1-v1.5
    copying lib/Crypto/SelfTest/Signature/test_vectors/PKCS1-v1.5/SigGen15_186-3.txt -> build/lib.macosx-10.14-intel-2.7/Crypto/SelfTest/Signature/test_vectors/PKCS1-v1.5
    copying lib/Crypto/SelfTest/Signature/test_vectors/PKCS1-v1.5/SigGen15_186-2.txt -> build/lib.macosx-10.14-intel-2.7/Crypto/SelfTest/Signature/test_vectors/PKCS1-v1.5
    creating build/lib.macosx-10.14-intel-2.7/Crypto/SelfTest/Signature/test_vectors/PKCS1-PSS
    copying lib/Crypto/SelfTest/Signature/test_vectors/PKCS1-PSS/SigGenPSS_186-2.txt -> build/lib.macosx-10.14-intel-2.7/Crypto/SelfTest/Signature/test_vectors/PKCS1-PSS
    copying lib/Crypto/SelfTest/Signature/test_vectors/PKCS1-PSS/SigGenPSS_186-3.txt -> build/lib.macosx-10.14-intel-2.7/Crypto/SelfTest/Signature/test_vectors/PKCS1-PSS
    copying lib/Crypto/SelfTest/Signature/test_vectors/PKCS1-PSS/SigVerPSS_186-3.rsp -> build/lib.macosx-10.14-intel-2.7/Crypto/SelfTest/Signature/test_vectors/PKCS1-PSS
    warning: PCTBuildPy: byte-compiling is disabled, skipping.

    running build_ext
    warning: no support for Intel AESNI instructions
    building 'Crypto.Hash._MD2' extension
    creating build/temp.macosx-10.14-intel-2.7
    creating build/temp.macosx-10.14-intel-2.7/src
    cc -fno-strict-aliasing -fno-common -dynamic -g -Os -pipe -fno-common -fno-strict-aliasing -fwrapv -DENABLE_DTRACE -DMACOSX -DNDEBUG -Wall -Wstrict-prototypes -Wshorten-64-to-32 -DNDEBUG -g -fwrapv -Os -Wall -Wstrict-prototypes -DENABLE_DTRACE -arch i386 -arch x86_64 -pipe -DLTC_NO_ASM -Isrc/ -I/System/Library/Frameworks/Python.framework/Versions/2.7/include/python2.7 -c src/MD2.c -o build/temp.macosx-10.14-intel-2.7/src/MD2.o
    xcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun
    error: command 'cc' failed with exit status 1

    ----------------------------------------
Command ""/Users/rafilurie/.local/share/virtualenvs/backend-ragxWAh7/bin/python -u -c ""import setuptools, tokenize;__file__='/private/var/folders/d5/zwblxz7d3gxcks_wgjcyxw_00000gn/T/pip-install-q_NyfS/pycryptodome/setup.py';f=getattr(tokenize, 'open', open)(__file__);code=f.read().replace('\r\n', '\n');f.close();exec(compile(code, __file__, 'exec'))"" install --record /private/var/folders/d5/zwblxz7d3gxcks_wgjcyxw_00000gn/T/pip-record-1TJZWz/install-record.txt --single-version-externally-managed --compile --install-headers /Users/rafilurie/.local/share/virtualenvs/backend-ragxWAh7/include/site/python2.7/pycryptodome"" failed with error code 1 in /private/var/folders/d5/zwblxz7d3gxcks_wgjcyxw_00000gn/T/pip-install-q_NyfS/pycryptodome/

","You don't have a valid C compiler environment (xcode).
See also here: https://apple.stackexchange.com/questions/254380/macos-mojave-invalid-active-developer-path.
","551","<python><firebase><pycrypto><pycryptodome><pyrebase>","2","0","1","2018-12-03 20:56:30","","0","","","","","2018-12-02 05:03:54",""
"51789257","RSA OAEP Decryption in Python","I have a hex encoded string which I need to decrypt using RSA_OAEP algorithm.Below is my code snippet:
final_token = decoded_req['token']
print(final_token)
print(""Converting actual token into bytes"")
## Hex encoded string to bytes
token_to_bytes = bytes.fromhex(final_token)
print(token_to_bytes)

## Read the private key
with open('private.rsa', 'r') as pvt_key:
    miPvt = pvt_key.read()

## Decrypt the token using RSA_OAEP
print(""Decrypting the token"")
rsakey_obj = RSA.importKey(miPvt)
cipher = PKCS1_OAEP.new(rsakey_obj)
dec_token = cipher.decrypt(token_to_bytes)
print(dec_token)

Below is the command line output:
6c79855ca15a3ac0308d17db97a1c576b6f35e4bb630da22867d0d081d55f05e1b1c640d7e7bd8c8de06b6a03e2ef7449e31fa9c0f0c675ebbf838bb880a4c6e309391441e1c41a0c42fbe11eaf6306bb39e7bbbffbe2dbced8c9bb07679ff18cef348b2b7ce08aa05028fda818ac4ce08ad84246c94afbcac405db5258c5333f66148007be8fa5384fa78a0d54ccf26028571180723b2a61fe18ebd0124f7e008902e79b48a53d29953ffde949878b4eb99d376ccf68341b0ec2ceb03b050e7c260f8905dccddb5e50cb331a3bb6bc034fc06dfaf722fd8fad8cb7a311b020be8b1a9115279173b18f46ccc0e28c71f0a6f67e8362a103fa4729057d8924ef0a6fb5a33eeb5b42cdc764fde53b9d6338472fc73e80cf785eb54ffb4ac15a6bf63db19baca586508b8160bf73dbad322221ddb632f5ae8040ef86805a408fc7df6f4a8ee5c7a444a5a13dbdcb8b958c52a8bdc4394e5deaabce203a3ff8675079e6618ac3558cdaf5ce6da77ca667bd5349ba82cc1ad3f71a662a2b7c8b47cc548209264a45a65b3f6f25fedcad8449699a19e2910d24c13b44e3e9445a62f88213346e00048480218996ade7e01151b7e038fbc8a5ff03bfa511126763d4571dec6ce0f5183302a99eee62facabe09211f3a61b8d154a38f0ee9a2647998e2ec1b8ee96b52c443f408cec24140838616c79d82cba4b77171b621f261539e239

Converting actual token into bytes

b'ly\x85\\\xa1Z:\xc00\x8d\x17\xdb\x97\xa1\xc5v\xb6\xf3^K\xb60\xda""\x86}\r\x08\x1dU\xf0^\x1b\x1cd\r~{\xd8\xc8\xde\x06\xb6\xa0>.\xf7D\x9e1\xfa\x9c\x0f\x0cg^\xbb\xf88\xbb\x88\nLn0\x93\x91D\x1e\x1cA\xa0\xc4/\xbe\x11\xea\xf60k\xb3\x9e{\xbb\xff\xbe-\xbc\xed\x8c\x9b\xb0vy\xff\x18\xce\xf3H\xb2\xb7\xce\x08\xaa\x05\x02\x8f\xda\x81\x8a\xc4\xce\x08\xad\x84$l\x94\xaf\xbc\xac@]\xb5%\x8cS3\xf6aH\x00{\xe8\xfaS\x84\xfax\xa0\xd5L\xcf&\x02\x85q\x18\x07#\xb2\xa6\x1f\xe1\x8e\xbd\x01$\xf7\xe0\x08\x90.y\xb4\x8aS\xd2\x99S\xff\xde\x94\x98x\xb4\xeb\x99\xd3v\xcc\xf6\x83A\xb0\xec,\xeb\x03\xb0P\xe7\xc2`\xf8\x90]\xcc\xdd\xb5\xe5\x0c\xb31\xa3\xbbk\xc04\xfc\x06\xdf\xafr/\xd8\xfa\xd8\xcbz1\x1b\x02\x0b\xe8\xb1\xa9\x11Ry\x17;\x18\xf4l\xcc\x0e(\xc7\x1f\nog\xe86*\x10?\xa4r\x90W\xd8\x92N\xf0\xa6\xfbZ3\xee\xb5\xb4,\xdcvO\xdeS\xb9\xd63\x84r\xfcs\xe8\x0c\xf7\x85\xebT\xff\xb4\xac\x15\xa6\xbfc\xdb\x19\xba\xcaXe\x08\xb8\x16\x0b\xf7=\xba\xd3""""\x1d\xdbc/Z\xe8\x04\x0e\xf8h\x05\xa4\x08\xfc}\xf6\xf4\xa8\xee\\zDJZ\x13\xdb\xdc\xb8\xb9X\xc5*\x8b\xdcC\x94\xe5\xde\xaa\xbc\xe2\x03\xa3\xff\x86u\x07\x9ef\x18\xac5X\xcd\xaf\\\xe6\xdaw\xcaf{\xd54\x9b\xa8,\xc1\xad?q\xa6b\xa2\xb7\xc8\xb4|\xc5H \x92d\xa4Ze\xb3\xf6\xf2_\xed\xca\xd8D\x96\x99\xa1\x9e)\x10\xd2L\x13\xb4N>\x94E\xa6/\x88!3F\xe0\x00HH\x02\x18\x99j\xde~\x01\x15\x1b~\x03\x8f\xbc\x8a_\xf0;\xfaQ\x11&v=Eq\xde\xc6\xce\x0fQ\x830*\x99\xee\xe6/\xac\xab\xe0\x92\x11\xf3\xa6\x1b\x8d\x15J8\xf0\xee\x9a&G\x99\x8e.\xc1\xb8\xee\x96\xb5,D?@\x8c\xec$\x14\x088aly\xd8,\xbaKw\x17\x1bb\x1f&\x159\xe29'

Decrypting the token

Traceback (most recent call last):
  File ""script.py"", line 80, in <module>
    dec_token = cipher.decrypt(token_to_bytes)
  File ""/home/venv/lib/python3.6/site-packages/Crypto/Cipher/PKCS1_OAEP.py"", line 201, in decrypt
    raise ValueError(""Incorrect decryption."")
ValueError: Incorrect decryption.

Can someone help me in resolving this issue?
","I suspect you have not correctly transferred your encrypted token. But there isn't a lot to go on.
I've used you example code though to help me write the below which does seem to work, (thank you for that) or at least it decrypted a value from another implementation.
In my case it was a node JS implementation
var nodeRsa = require(""node-rsa"");
const key = new nodeRsa( ""-----BEGIN PUBLIC KEY-----\n\
                              .
                              .
                              .
                          -----END PUBLIC KEY-----"");
key.encrypt(""passwd"",""base64"");

If I took the output of the above and put in a file called 'ciphertext', this following python decrypts the message correctly.
import Crypto.Cipher.PKCS1_OAEP as rsaenc
import Crypto.PublicKey.RSA as RSA
import codecs

## Load the private key and the base 64 ciphertext.
with open(""key.pem"") as f:
    keystring = f.read()

with open(""ciphertext"",""rb"") as f:
    base64msg = f.read()

# Create the binary ciphertext
binmsg=codecs.decode(base64msg,'base64')

# Setup the RSA objetcs
k = RSA.importKey(keystring)
cipher = rsaenc.new(k)

plaintext = cipher.decrypt(binmsg)
print (plaintext)

","549","<python-3.x><pycrypto>","2","0","1","2018-12-23 11:25:43","","0","","","","","2018-08-10 15:00:18",""
"9367706","Using pycrypto appengine with python 2.7","What's the best way to protect a symmetric key that needs to be used in code within Google Appengine? 
Our application uses Python 2.7
EDIT: we have some database fields that we want protected, that need to be accessed in the code but there is no reason to leave them in the database in plain text. Obviously I'd like to make it as hard as possible to retrieve the key (understanding that it is never impossible). 
","There is no way to absolutely protect a key if you don't trust the environment that the code is running in. You could store (part of) the key in a trusted location and only accept queries for the key from the domain/IP of your app. But then it would still be in that appengine instance's memory.
The best solution for outgoing messages is to use public-key crypto. Let your code use the public key of the remote party, since those don't have to be kept secret. It can then only be decrypted with the remote's private key.
If you can't trust the appengine's environment, you can't decrypt incoming public-key messages because that would require your secret key to be available to the application.
Edit: Since you've added that you want to protect some database fields, have you thought about hashing them? 
","547","<python><google-app-engine><pycrypto>","0","0","1","2012-02-26 16:56:34","","1","0","167516","","2012-02-21 11:58:04","2012-02-20 20:07:27",""
"29695473","DES.MODE_OFB doesn't recover the plaintext","Consider the two codes below (based on http://pythonhosted.org//pycrypto/):
1) DES.MODE_ECB 
from Crypto.Cipher import DES    
from Crypto import Random    
key = b'Eight888'    
cipher = DES.new(key, DES.MODE_ECB)    
plaintext = b'sona si latine loqueris '    
msg = cipher.encrypt(plaintext)    
msgback= cipher.decrypt(msg)

2) DES.MODE_OFB
from Crypto.Cipher import DES
from Crypto import Random
key = b'Eight888'
iv = Random.new().read(DES.block_size)
cipher = DES.new(key, DES.MODE_OFB, iv)
plaintext = b'sona si latine loqueris '
msg = iv + cipher.encrypt(plaintext)
msgback= cipher.decrypt(msg)

Why is that code 1) recovers the original plaintext and 2) doesn't?
","You have to slice off the IV before decrypting, because it is not part of the ciphertext.
decCipher = DES.new(key, DES.MODE_OFB, msg[:DES.block_size])
msgback = decCipher.decrypt(msg[DES.block_size:])

Unlike CBC where decrypting with the IV recovers at least a part of the plaintext, OFB is a streaming mode. If the alignment between actual ciphertext and generated stream (based in IV and key) is not perfect, the original plaintext cannot be recovered.
","542","<python><encryption><des><pycrypto>","1","2","1","2015-04-17 09:58:18","29695641","3","","1816580","","2015-04-17 09:45:07","2015-04-17 09:33:16",""
"44432232","How to decrypt the encrypted string coming from python?","I get a encrypted base64 string from python. The format is AES 256 CBC. But when I try to decrypt using iOS Swift it return decrypted string as nil.
# coding=utf-8
import base64
from random import choice
from string import letters

try:
    from Crypto import Random
    from Crypto.Cipher import AES
except ImportError:
    import crypto
    import sys

    sys.modules['Crypto'] = crypto
    from crypto.Cipher import AES
    from crypto import Random


class AESCipher(object):
    def __init__(self, key):
        self.bs = 32
        self.key = key

    def encrypt(self, raw):
        _raw = raw
        raw = self._pad(raw)

        print raw, ';'
        print _raw, ';'

        iv = """".join([choice(letters[:26]) for i in xrange(16)])
        print "" iv :"", iv
        cipher = AES.new(self.key, AES.MODE_CBC, iv)
        return base64.b64encode(iv + cipher.encrypt(raw))

    def decrypt(self, enc):
        enc = base64.b64decode(enc)
        iv = enc[:AES.block_size]
        cipher = AES.new(self.key, AES.MODE_CBC, iv)
        return self._unpad(cipher.decrypt(enc[AES.block_size:])).decode('utf-8')

    def _pad(self, s):
        a = (self.bs - len(s) % self.bs)
        b = chr(self.bs - len(s) % self.bs)
        return s + a * b

    @staticmethod
    def _unpad(s):
        return s[:-ord(s[len(s) - 1:])]
def encrypt(k, t):
    o = AESCipher(k)
    return o.encrypt(t)


def decrypt(k, t):
    o = AESCipher(k)
    return o.decrypt(t)


def main():
    k = ""qwertyuiopasdfghjklzxcvbnmqwerty""
    s1 = ""Hello World!""

    d2 = encrypt(k, s1)

    print "" Password :"", k
    print ""Encrypted :"", d2
    print ""    Plain :"", decrypt(k, d2)

if __name__ == '__main__':
    main()

iOS
Here I use AES256CBC Lib https://github.com/SwiftyBeaver/AES256CBC
let decrypted = AES256CBC.decryptString(""Ymdqc3ZqdmZ1cXdsZG1sZenhgr4Xt0+ceARYRh1n40QkNDV/dyKbQjYLcbiXBBeO"", password: ""qwertyuiopasdfghjklzxcvbnmqwerty"")

        print(""decrypted: \(String(describing: decrypted))"") // here I get nil

when python run I get this Logs
iv : bgjsvjvfuqwldmle
 Password : qwertyuiopasdfghjklzxcvbnmqwerty
Encrypted : Ymdqc3ZqdmZ1cXdsZG1sZenhgr4Xt0+ceARYRh1n40QkNDV/dyKbQjYLcbiXBBeO
    Plain : Hello World!

I don't know why python and iOS not same in AES. Anyone solve this issue please put answer below. Thanks in advance.
","I think you need to decode your base64 string first.
Maybe this will work (just googled it, I'm not a iOS dev, so I'm sorry to eventual errors)
let decodedData = NSData(""Ymdqc3ZqdmZ1cXdsZG1sZenhgr4Xt0+ceARYRh1n40QkNDV/dyKbQjYLcbiXBBeO"": base64String, options:NSDataBase64DecodingOptions.fromRaw(0)!)
let decodedString = NSString(data: decodedData, encoding: NSUTF8StringEncoding)
let decrypted = AES256CBC.decryptString(decodedString, password: ""qwertyuiopasdfghjklzxcvbnmqwerty"")
        print(""decrypted: \(String(describing: decrypted))"")

It's also stated in the documentation
","541","<ios><swift><python-2.7><aes><pycrypto>","1","0","1","2017-06-08 10:21:40","","0","1","1457385","","2017-06-08 10:10:05","2017-06-08 09:45:48",""
"5062507","Twisted Conch for Python 2.71 on Windows Server 2008 R2 x64?","I'm planning on using Twisted Conch for the SFTP protion of an application I'm working on. The rest of the application is built on Python 2.71, and while it appears that Twisted as a whole is available for Python 2.7, the Download page at http://twistedmatrix.com/trac/wiki/Downloads would appear to show that only Python 2.5 is supported by Conch, because it depends on PyCrypto 2.0.1.
Is this the case, or is there a build of Conch for Python 2.7 out there somewhere?
This is on a Windows Server 2006 R2 x64 box, for what its worth.
Thanks.
","Google turns up http://www.voidspace.org.uk/python/modules.shtml#pycrypto
","540","<twisted><windows-server-2008-r2><python-2.7><pycrypto>","1","1","2","2011-12-19 13:45:57","","0","","89334","","2011-03-27 04:44:07","2011-02-21 05:05:10",""
"5062507","Twisted Conch for Python 2.71 on Windows Server 2008 R2 x64?","I'm planning on using Twisted Conch for the SFTP protion of an application I'm working on. The rest of the application is built on Python 2.71, and while it appears that Twisted as a whole is available for Python 2.7, the Download page at http://twistedmatrix.com/trac/wiki/Downloads would appear to show that only Python 2.5 is supported by Conch, because it depends on PyCrypto 2.0.1.
Is this the case, or is there a build of Conch for Python 2.7 out there somewhere?
This is on a Windows Server 2006 R2 x64 box, for what its worth.
Thanks.
","for windows x64 here is workaround 
Compiling Python 2.7 Modules. Although it looks like a big task I managed to compile and build pycrypto2.4.1 for win64. 
","540","<twisted><windows-server-2008-r2><python-2.7><pycrypto>","1","1","2","2011-12-19 13:45:57","","0","","89334","","2011-03-27 04:44:07","2011-02-21 05:05:10",""
"16081930","How to get jCryption work with django and python-rsa (or another python library)","I want to send some secret data to the client, so I want to encrypt it.
I'm using jCryption in client side. It uses handshaking in the beginning of the connection, the procedures happen as follows:

client generate random AES password.
client request RSA publicKey form server
server send it
Client use RSA public key to encrypt the password and send it to server.
Now, both use that password to encrypt data they send to each other.

My problem is in the step of sending the password encrypted with RSA (step 4), since jCryption sends it in hex format, but python-rsa expect binary integer ,,
How to convert the jCryption output to a format python-rsa can deal with, or is there are another library that can do it ?
the RSA ciphertext is look like this:

TO\xa75[\x9a\x07s4\x86\xbc\xae\xe3\xd5s)1\x0cd5\xdfY\xf7\xeds9\xf3~\n\x9fA$\xa9\xfb;\x04\x1e\x18\xf4\xea\x7f\x91\xd9\xb7[\xd3\x138\xb6b\x9c\xb6\x1b\xe7\x11\x9aB\x1d@`y\x9c0\xe8\xb6!\x8b~lg\xabO\xbeny\xf7Xu\x89YW\xb0\xda@\x10\x0c\xe7\x85\x9bX\x8f\x02e\xdalf|\xa6\x0e\x8e\x8e\x9d\xd8=\x9bQLO7\x0fd\x19/]t?\xf1\x96\x1b\xb9\x8bv\xb4\xb4rS\x1c\xb9

and data send from jCryption is looked like this:

11a6ebb863c379255df711aba86ad3986d6ecc33402a1596e6036b8d33f41932909a3e8c10cc4e0d2ece5f369808020ac7241a4285c80e6e483a1f6b43d933149961f50b72a808c769d39215ce08c33cfdb543b68bb0cf644f32dccf7eb90547290d47b96758449df3e7d4ec 2b50aef21ff4735c79f74bf5214ff356e4338ff2b292110ad537d160e41e34b350c7bc857601a943f915285e62f308fb6bd61d275321b68fbf27a52fbffc27b9ad15810795ccdea6d9776246b84b00503c2711d49a3f101af6f2c822d697a71aeca684e20328071ce84da907

","Ok I've done this quest but first I want to say that it's much easier to obtain LetsEncrypt free cert for https what i did later.
For this solution you need openssl to be installed.
Lets write views for our ajaxes
Getting public key. If we don't have one in project directory then generate the pair.
    def public_key(req):
        if not os.path.isfile(os.path.join(settings.BASE_DIR, 'form_key.pem')) or not os.path.isfile(os.path.join( settings.BASE_DIR,'form_key_pub.pem')):
            check_call(['openssl', 'genrsa', '-out', os.path.join(settings.BASE_DIR,'form_key.pem'), '4096'])
            check_call(['openssl', 'rsa', '-pubout', '-in', os.path.join(settings.BASE_DIR,'form_key.pem'), '-out', os.path.join(settings.BASE_DIR,'form_key_pub.pem')])
        f = open(os.path.join(settings.BASE_DIR,'form_key_pub.pem'))
        key = f.read()
        f.close()
        return JsonResponse({""publickey"": key})

Ok, and the handshake. To CSRF protect this view we need to patch the jCryption javascript library what i didn't.
I save AES key in session storage here.
    @csrf_exempt
    def handshake(req):
        if req.method == 'POST':
            encb64key = req.POST['key']
            encb64key = re.sub(r'[^a-zA-Z0-9/=+]', '', encb64key)
            enckey = b64decode(encb64key)
            openssl = Popen(['openssl', 'rsautl', '-decrypt', '-inkey', os.path.join(settings.BASE_DIR,'form_key.pem')], stdin = PIPE, stdout=PIPE, stderr=PIPE)
            key, stderr = openssl.communicate(enckey)
            print stderr
            key = re.sub(r'[^a-zA-Z0-9]', '', key)
            req.session['form_key'] = key 
            openssl = Popen(['openssl', 'enc', '-aes-256-cbc', '-pass', 'pass:'+key, '-a', '-e'], stdin = PIPE, stdout = PIPE, stderr = PIPE)
            enckey , stderr = openssl.communicate(key)
            print stderr
            enckey = re.sub('[^a-zA-Z0-9/+=]', '' , enckey)
            return JsonResponse({'challenge': enckey})
        raise Http404() 

Lets choose urls for the views in urls.py
    url('^pubkey', public_key, name = 'publickey'),
    url('^handshake', handshake, name = 'handshake'),

And the most tricky part. Our own middleware. You need to add it to MIDDLEWARE_CLASSES in settings.py . Something like 'myapp.views.JCryptionMiddleware' if you place it in your myapp's views.py file.
The trick is that we send the wrong POST data with only 'jCryption' attr. The middleware decrypts apropriate data in this attr and rewrites the POST data in the request object with it.
Read about middlewares in Django documentation.
    class JCryptionMiddleware(object):
        def process_view(self, request, callback, callback_args, callback_kwargs):
            jcryptedb64 = request.POST.get('jCryption', '')
            if jcryptedb64:
                try:
                    jcrypted = b64decode(jcryptedb64)
                    p = Popen(['openssl', 'enc', '-aes-256-cbc', '-pass', 'pass:'+request.session['form_key'], '-d'], stdin = PIPE, stdout = PIPE, stderr = PIPE)
                    qstr, stderr = p.communicate(jcrypted)
                    print stderr
                    wasmutable = request.POST._mutable
                    request.POST._mutable = True
                    request.POST.__init__(qstr)
                    request.POST._mutable = wasmutable
                except Exception as e:
                    print e
            return None

And the client code in the page with the form template.
    <script src=""{{ STATIC_URL }}js/jquery.min.js""></script>
    <script src=""{{ STATIC_URL }}js/jcryption.js""></script>
    <script>
    $(function() {
        $('form').jCryption({""getKeysURL"": ""/pubkey"", ""handshakeURL"": ""/handshake""});
    });
    </script>

See the urls from our urls.py .
For example you can encrypt your admin login form. Copy login.html from django contrib admin to templates/admin/login.html and add this javascript code to the template.
ta da!
Don't use this, use HTTPS.
","533","<python><django><rsa><pycrypto><jcryption>","1","0","1","2015-12-29 11:28:46","","1","","569976","","2014-06-02 13:33:11","2013-04-18 11:39:03",""
"45228282","Encryption (aes-128-cbc) not matching between python(pycrypto) and nodejs(crypto)","I have got this piece of python code which I need to translate into nodejs. The python code uses pycrypto from encryption. On the nodejs side, I am using the native crypto module. There seems to be a mismatch between the encrypted strings.   
from Crypto.Cipher import AES
from binascii import b2a_hex, a2b_hex
import json

raw_key = [0x58, 0x86, 0x17, 0x6d, 0x88, 0x7c, 0x9a, 0xa0, 0x61, 0x1b, 0xbb, 0x3e, 0x20, 0x28, 0xa4, 0x5a]
key = str(bytearray(raw_key))

raw_iv =  [0x34, 0x2e, 0x17, 0x99, 0x6d, 0x19, 0x3d, 0x28, 0xdd, 0xb3, 0xa2, 0x69, 0x5a, 0x2e, 0x6f, 0x1b]
iv = str(bytearray(raw_iv))

text = json.dumps({ ""a"": 1, ""b"": 2 })

cryptor = AES.new(key, AES.MODE_CBC, iv)
length = 16
count = len(text)
add = length - (count % length)
text = text + ('\0' * add)
encrypted = cryptor.encrypt(text);
print b2a_hex(encrypted)

The above python code outputs
5c72b1a394654b6dab9ea8fdd90fe56b92141d74cb32ac65ede4d3154801bb57

whereas the below nodejs code
const crypto = require('crypto');

const KEY = Buffer.from([0x58, 0x86, 0x17, 0x6d, 0x88, 0x7c, 0x9a, 0xa0, 0x61, 0x1b, 0xbb, 0x3e, 0x20, 0x28, 0xa4, 0x5a]);
const IV = Buffer.from([0x34, 0x2e, 0x17, 0x99, 0x6d, 0x19, 0x3d, 0x28, 0xdd, 0xb3, 0xa2, 0x69, 0x5a, 0x2e, 0x6f, 0x1b]);

const text = JSON.stringify({ a: 1, b: 2 });

const cipher = crypto.createCipheriv('aes-128-cbc', KEY, IV);
cipher.setAutoPadding(true);
const encrypted = Buffer.concat([cipher.update(text, 'utf-8'), cipher.final()]);
console.log(encrypted.toString('hex'));

outputs
d6a0dbc6df2a1038036e4db985f9ca10

Why don't they match? Am I doing something wrong?
","There are two issues here:

Node's automatic padding is PKCS padding. Your python code is using null bytes for padding instead, which is a different format. The node documentation even explicitly mentions disabling auto padding in order to use null byte padding.
The JSON is formatted slightly differently between node and python. Javascript's JSON.stringify() removes all unnecessary whitespace, whereas python leaves some whitespace (e.g. between elements in an array/object). The easiest solution to this will probably be to change the python code to specify an explicit separators option: json.dumps({ ""a"": 1, ""b"": 2 }, separators=(',', ':')), since the javascript's JSON.stringify() isn't as flexible when it comes to changing the formatting in this way.

The node code below shows that by matching the JSON output and using the proper padding, you will get the same hex output as python:
const crypto = require('crypto');

const KEY = Buffer.from([0x58, 0x86, 0x17, 0x6d, 0x88, 0x7c, 0x9a, 0xa0, 0x61, 0x1b, 0xbb, 0x3e, 0x20, 0x28, 0xa4, 0x5a]);
const IV = Buffer.from([0x34, 0x2e, 0x17, 0x99, 0x6d, 0x19, 0x3d, 0x28, 0xdd, 0xb3, 0xa2, 0x69, 0x5a, 0x2e, 0x6f, 0x1b]);

var text = '{""a"": 1, ""b"": 2}';

const cipher = crypto.createCipheriv('aes-128-cbc', KEY, IV);
cipher.setAutoPadding(false);

var length = 16;
var count = Buffer.byteLength(text);
var add = length - (count % length);
if (add > 0)
  text += '\0'.repeat(add);

const encrypted = Buffer.concat([cipher.update(text, 'utf-8'), cipher.final()]);
console.log(encrypted.toString('hex'));

","530","<python><node.js><aes><pycrypto><node-crypto>","1","1","1","2017-07-21 04:26:34","","5","","","","","2017-07-21 03:00:22",""
"9033329","Printing/exporting a public key on AppEngine PyCrypto","Google AppEngine currently uses an old version of PyCrypto.
After making an RSAkey, I can't find any way to export the publickey.
Alas docs for pycrypto 2.01 currently 404. And the .export methods I see in current code don't work on PyCrypto 2.01:
Making the keypair:
rsa_key = RSA.generate(384, random_generator) 

Checking methods available:
In [84]: rsa_key.publickey. <tab>
RSAkey.publickey.__call__          RSAkey.publickey.__func__          RSAkey.publickey.__reduce__        RSAkey.publickey.__str__
RSAkey.publickey.__class__         RSAkey.publickey.__get__           RSAkey.publickey.__reduce_ex__     RSAkey.publickey.__subclasshook__
RSAkey.publickey.__cmp__           RSAkey.publickey.__getattribute__  RSAkey.publickey.__repr__          RSAkey.publickey.im_class
RSAkey.publickey.__delattr__       RSAkey.publickey.__hash__          RSAkey.publickey.__self__          RSAkey.publickey.im_func
RSAkey.publickey.__doc__           RSAkey.publickey.__init__          RSAkey.publickey.__setattr__       RSAkey.publickey.im_self
RSAkey.publickey.__format__        RSAkey.publickey.__new__           RSAkey.publickey.__sizeof__        

Printing doesn't work. 
","It should be possible to use the pickle module, provided interoperability is not that important to you.
import pickle

keyout = pickle.dumps(rsa_key)
# Save keyout into a file or a db
[ ... ]
# Retrieve keyin from the same file or db
rsa_key = pickle.loads(keyin)

","530","<google-app-engine><encryption><rsa><pycrypto>","2","1","2","2012-03-21 03:24:41","","1","","","","","2012-01-27 12:35:52",""
"9033329","Printing/exporting a public key on AppEngine PyCrypto","Google AppEngine currently uses an old version of PyCrypto.
After making an RSAkey, I can't find any way to export the publickey.
Alas docs for pycrypto 2.01 currently 404. And the .export methods I see in current code don't work on PyCrypto 2.01:
Making the keypair:
rsa_key = RSA.generate(384, random_generator) 

Checking methods available:
In [84]: rsa_key.publickey. <tab>
RSAkey.publickey.__call__          RSAkey.publickey.__func__          RSAkey.publickey.__reduce__        RSAkey.publickey.__str__
RSAkey.publickey.__class__         RSAkey.publickey.__get__           RSAkey.publickey.__reduce_ex__     RSAkey.publickey.__subclasshook__
RSAkey.publickey.__cmp__           RSAkey.publickey.__getattribute__  RSAkey.publickey.__repr__          RSAkey.publickey.im_class
RSAkey.publickey.__delattr__       RSAkey.publickey.__hash__          RSAkey.publickey.__self__          RSAkey.publickey.im_func
RSAkey.publickey.__doc__           RSAkey.publickey.__init__          RSAkey.publickey.__setattr__       RSAkey.publickey.im_self
RSAkey.publickey.__format__        RSAkey.publickey.__new__           RSAkey.publickey.__sizeof__        

Printing doesn't work. 
","Just take a look at the code to see:
def generate(bits, randfunc, progress_func=None):
    """"""generate(bits:int, randfunc:callable, progress_func:callable)

    Generate an RSA key of length 'bits', using 'randfunc' to get
    random data and 'progress_func', if present, to display
    the progress of the key generation.
    """"""
    obj=RSAobj()
    # Generate random number from 0 to 7
    difference=ord(randfunc(1)) & 7

    # Generate the prime factors of n
    if progress_func: progress_func('p\n')
    obj.p=pubkey.getPrime(bits/2, randfunc)
    if progress_func: progress_func('q\n')
    obj.q=pubkey.getPrime((bits/2)+difference, randfunc)
    obj.n=obj.p*obj.q

    # Generate encryption exponent
    if progress_func: progress_func('e\n')
    obj.e=pubkey.getPrime(17, randfunc)
    if progress_func: progress_func('d\n')
    obj.d=pubkey.inverse(obj.e, (obj.p-1)*(obj.q-1))
    return obj

This site has a good explanation of what each variable means.
","530","<google-app-engine><encryption><rsa><pycrypto>","2","1","2","2012-03-21 03:24:41","","1","","","","","2012-01-27 12:35:52",""
"53919245","RSA encoding in PyCrypto vs C -- RSA_PKCS1_PADDING","I was under the impression that PyCrypto was a direct wrapper of OpenSSL, but I seem to be getting unexpected results. I wrote a simple test in C;
int main() {
    const unsigned char test[] = ""TEST_TEST_TEST"";
    FILE *privateFile = fopen(""private.pem"", ""r"");
    RSA *privateRsa = PEM_read_RSAPrivateKey(privateFile, NULL, NULL, NULL);

    unsigned char *target = malloc(512);
    int len = RSA_private_encrypt(strlen(test), test, target, privateRsa, 1);

    for (int i = 0; i < 256; i++) {
        printf(""%02x"", target[i]);
    }
    printf(""\n"");
}

Which gives me one result;
a7c5832cf6390bcf75612e46c55759167e02173b2c6741ec4779af5d88488df8bfa6a6ba4c
fbc93d730dd3b4e681fca34d23c862712954ec85c087d9b36efa725b942fa7d8383019bcba
d467a1b31a3b0aeccf85cf1b4e4600801e3d40db75640f7e56f9bbb2a525d58e6decd02400
2049cadef9feea23f72f0fef72e9d2a5e9209011b7726422561f8fdfc7e983c28b600ff875
14b6ea4bb59addfaf8492ba71261d3837d9ae82507ab2f6cb7aaa0fe647f5d8d469b7a5e83
7b3bdf9994be8e621cdb04cec955ddd44170b9899daec891b492562b0df3d30d50367c710d
81400aefadb494d6f13d37237cf015280879d787de4d58ef3a5d61a200dd68642fdf

Then I used the same private.pem and did what I believe is the equivalent in Python;
from Crypto.Cipher import PKCS1_v1_5
from Crypto.PublicKey import RSA

private_key_filename = 'private.pem'
private_key_file = open(private_key_filename, 'rb')
private_key = RSA.importKey(private_key_file.read())
private_key_file.close()
cipher = PKCS1_v1_5.new(private_key)

encrypted = cipher.encrypt(bytes(""TEST_TEST_TEST"", ""ascii""))
print(""Encrypted: "", encrypted.hex())

Which gives me a very different result;
ac3de0ad667f26912b71baaf3f0c84198482a1822ef05f1d0b339a9e13be0fdc74c446bf74
0e14d07edbff1d893eb9a9745ee42501c50a7a0ec1352f96bf72c603afe6d4709ef3ea936a
4cda182dfc70d0a76967e79120f02e017e8f9aa30b1b444b5fe46396d6908e1e55febb948e
69cc1dcd9f9fbd44f449056d0655489834b564216c81c19f193548a53c77af8683d4c77d06
2f61fc4fe2c9e947f22523e0afb522f7addbedb2b1094c1a76245849d05acf465ba024f2da
77abe5fe6aac5913baf3ca4932806006bd41b82c76bdc328f24d5de9027819888b93a06c2d
2f972b78c775280691b4f53c181cc8d637ace1ea4642d1c510dceada85ae5957006e

Why does the python wrapper not produce the same result as the underlying C library? I'm guessing I'm doing something incorrect on the Python side, but I can not figure out what that might be. EDIT: For clarity, the C code is returning what I'm after, I need to make Python return the same thing. In doing some more digging, I'm thinking that my issue is that I need to specify RSA_PKCS1_PADDING in my Python code. When I try to decrypt on the C side, I get back;
4144797508:error:0407006A:rsa routines:RSA_padding_check_PKCS1_type_1:block type is not 01:rsa_pk1.c:103:
4144797508:error:04067072:rsa routines:RSA_EAY_PUBLIC_DECRYPT:padding check failed:rsa_eay.c:773:

Oddly enough, I do not see any sort of padding options in the pycrypto API..
I've re-generated my RSA key a few times, so any key will do, but just in case anyone cares to reproduce locally, here's the dummy key I'm testing with;
-----BEGIN RSA PRIVATE KEY-----
MIIEpAIBAAKCAQEAt1bExeH8DAuRercWwSxy/ysS9zDNUziJpY00gsESK2TVc6W7
mw8Rmv/RoJPZBH4xsHIeCA3eO36jv6abN9kPWjmn8deI3IG1bz78UUAYSSFrPher
8XtpDLMPqf5D2gqddS9GydroX1TUyxyXeZZXRhFuLQwiu9tqVvr3WJDvpXNUtj8/
O2zfM2UhiKAgOwVRk2h/UX+FVsvck4SYVaJTc+8zcaiUuAVBVwimTLTj6L9jo+wD
TMpWLdjPq1iL9N1SxvJkiPoGyDL73jS9RXvFdDP8uknsid92GtyQLs0g+xCo4Ywp
qml5jWONT7dsL/zly4pagvNrYy9VjCMTGIsDowIDAQABAoIBAQCLoYjh0Nf+cH0P
AgxReUHn9u1N2Bw4qpGixWVdxB/LbtNmba3xTUuySe1kp9Wbp2S+plsa9TzxAOVD
nGcQ5L7dj5XKCcZRcnQ1UromQ3N7lvkvZCXvF3eNVX6zkFQq5vS/AA+gwplBqcEb
JB51WrwDQFkx89EsU9Kshh0FlfT+gweZMDh6WNoF+pfHp6sN2Qv+mRdvPEVFYy93
YAT7UXWK3afJJfCEQKbhImIkMngRx+7V2VVOdivQME8CAjfiC/P8dlSStkWm2+Gs
1l34m0z9a0RODXbf8RaY5os2I2/GPNHx4AlilxEhnRRicwr1TqLRHSp8p2h5m3oM
zagO/q8RAoGBALw8tg/3U+5UWA6vDfoHaxxrbWfbR7S7uud/7J4PZs73Vv7BB1DI
iyKlYd2b8L03zX2QWN1zVHlvtZmFPGjc6U5tXX6Pzk/v2/Gv24r7F4W4lpA/BdSi
DBJeVe0Uuvh8+qaFQQv0ek/JAHGoEgpo7HTIuTAqDtJD78C2o20a/EhrAoGBAPlW
p62ERiKU6hh5nI6rhB+QspgZQf5BQaWfGmDy1CugXNcebm3fqefI55oUux9z95Vj
rB6qNdYlJB+bCbg8d4Mekl1NexZtUn94gd/7U+z4BvfabzJ96JRdIzEbpbZv6rW8
Z4i6RA78S+T/kvjeaHVSEbxJXPU7emwSrt2xPt+pAoGAGRVJ+XSutXp9xW8kQKYO
atoR2R4KPxYpAMI2KJXK0Fd7OzVDoUsn5zT8hohKGxy9gDbk8JV2szvkihGMDDkr
yayfIcdN6a7/swQJEEsHRmVjgtMzFrOFQklZz97MT2JwEBJ/qXUpe0pAieSoisSS
hbldnAJuuSweXaK4wkgvSAMCgYEA8TVLcSkNUFcPQC4lrj9uybqJi2qj1Pv8LeUE
99TyPGIebl0aJ2DAVWKd6wkzHPJrCTIrSF8RReEYWRr7BCg61bW1kl1qPf/0VyyV
N8FDJ3OqCgxellIHtb+EU/WTEjKitL1Wy4amYHjiUt6LqAZAt351edje/L5VaEeK
sxzM3kECgYAjm2igRLqK2SoPSMtrgjjATChYCEkZXE5G86oNjdo5zcd2q+iFMxys
xD1U7taKW1q3mKlOJmzI/04MFdnI+WAUvyRFWuAxiwEqJBB90XfooYe/Pda1Fg1H
mIxuZP5kRx9zYWF1vPzNnEyAn/9yUiap8Gi9DK/YigEOcVrIjnuFMA==
-----END RSA PRIVATE KEY-----

","Why does the Python implementation not produce the same results as the C code?  Because you're using the PKCS #1.5 signature algorithm.
PKCS #1.5 calls for adding random padding to the message before signing it.  Because of this, signing the same message multiple times will give a different value each time -- which you'll see if you run the Python version repeatedly.  The OpenSSL documentation is an impenetrable morass, so I can't say exactly why you're getting the same signature every time with the C version, but I suspect you're failing to initialize a random-number generator or something.
","526","<python><rsa><pycrypto>","2","0","2","2018-12-25 18:08:09","","3","","998101","","2018-12-25 17:45:21","2018-12-25 04:00:10",""
"53919245","RSA encoding in PyCrypto vs C -- RSA_PKCS1_PADDING","I was under the impression that PyCrypto was a direct wrapper of OpenSSL, but I seem to be getting unexpected results. I wrote a simple test in C;
int main() {
    const unsigned char test[] = ""TEST_TEST_TEST"";
    FILE *privateFile = fopen(""private.pem"", ""r"");
    RSA *privateRsa = PEM_read_RSAPrivateKey(privateFile, NULL, NULL, NULL);

    unsigned char *target = malloc(512);
    int len = RSA_private_encrypt(strlen(test), test, target, privateRsa, 1);

    for (int i = 0; i < 256; i++) {
        printf(""%02x"", target[i]);
    }
    printf(""\n"");
}

Which gives me one result;
a7c5832cf6390bcf75612e46c55759167e02173b2c6741ec4779af5d88488df8bfa6a6ba4c
fbc93d730dd3b4e681fca34d23c862712954ec85c087d9b36efa725b942fa7d8383019bcba
d467a1b31a3b0aeccf85cf1b4e4600801e3d40db75640f7e56f9bbb2a525d58e6decd02400
2049cadef9feea23f72f0fef72e9d2a5e9209011b7726422561f8fdfc7e983c28b600ff875
14b6ea4bb59addfaf8492ba71261d3837d9ae82507ab2f6cb7aaa0fe647f5d8d469b7a5e83
7b3bdf9994be8e621cdb04cec955ddd44170b9899daec891b492562b0df3d30d50367c710d
81400aefadb494d6f13d37237cf015280879d787de4d58ef3a5d61a200dd68642fdf

Then I used the same private.pem and did what I believe is the equivalent in Python;
from Crypto.Cipher import PKCS1_v1_5
from Crypto.PublicKey import RSA

private_key_filename = 'private.pem'
private_key_file = open(private_key_filename, 'rb')
private_key = RSA.importKey(private_key_file.read())
private_key_file.close()
cipher = PKCS1_v1_5.new(private_key)

encrypted = cipher.encrypt(bytes(""TEST_TEST_TEST"", ""ascii""))
print(""Encrypted: "", encrypted.hex())

Which gives me a very different result;
ac3de0ad667f26912b71baaf3f0c84198482a1822ef05f1d0b339a9e13be0fdc74c446bf74
0e14d07edbff1d893eb9a9745ee42501c50a7a0ec1352f96bf72c603afe6d4709ef3ea936a
4cda182dfc70d0a76967e79120f02e017e8f9aa30b1b444b5fe46396d6908e1e55febb948e
69cc1dcd9f9fbd44f449056d0655489834b564216c81c19f193548a53c77af8683d4c77d06
2f61fc4fe2c9e947f22523e0afb522f7addbedb2b1094c1a76245849d05acf465ba024f2da
77abe5fe6aac5913baf3ca4932806006bd41b82c76bdc328f24d5de9027819888b93a06c2d
2f972b78c775280691b4f53c181cc8d637ace1ea4642d1c510dceada85ae5957006e

Why does the python wrapper not produce the same result as the underlying C library? I'm guessing I'm doing something incorrect on the Python side, but I can not figure out what that might be. EDIT: For clarity, the C code is returning what I'm after, I need to make Python return the same thing. In doing some more digging, I'm thinking that my issue is that I need to specify RSA_PKCS1_PADDING in my Python code. When I try to decrypt on the C side, I get back;
4144797508:error:0407006A:rsa routines:RSA_padding_check_PKCS1_type_1:block type is not 01:rsa_pk1.c:103:
4144797508:error:04067072:rsa routines:RSA_EAY_PUBLIC_DECRYPT:padding check failed:rsa_eay.c:773:

Oddly enough, I do not see any sort of padding options in the pycrypto API..
I've re-generated my RSA key a few times, so any key will do, but just in case anyone cares to reproduce locally, here's the dummy key I'm testing with;
-----BEGIN RSA PRIVATE KEY-----
MIIEpAIBAAKCAQEAt1bExeH8DAuRercWwSxy/ysS9zDNUziJpY00gsESK2TVc6W7
mw8Rmv/RoJPZBH4xsHIeCA3eO36jv6abN9kPWjmn8deI3IG1bz78UUAYSSFrPher
8XtpDLMPqf5D2gqddS9GydroX1TUyxyXeZZXRhFuLQwiu9tqVvr3WJDvpXNUtj8/
O2zfM2UhiKAgOwVRk2h/UX+FVsvck4SYVaJTc+8zcaiUuAVBVwimTLTj6L9jo+wD
TMpWLdjPq1iL9N1SxvJkiPoGyDL73jS9RXvFdDP8uknsid92GtyQLs0g+xCo4Ywp
qml5jWONT7dsL/zly4pagvNrYy9VjCMTGIsDowIDAQABAoIBAQCLoYjh0Nf+cH0P
AgxReUHn9u1N2Bw4qpGixWVdxB/LbtNmba3xTUuySe1kp9Wbp2S+plsa9TzxAOVD
nGcQ5L7dj5XKCcZRcnQ1UromQ3N7lvkvZCXvF3eNVX6zkFQq5vS/AA+gwplBqcEb
JB51WrwDQFkx89EsU9Kshh0FlfT+gweZMDh6WNoF+pfHp6sN2Qv+mRdvPEVFYy93
YAT7UXWK3afJJfCEQKbhImIkMngRx+7V2VVOdivQME8CAjfiC/P8dlSStkWm2+Gs
1l34m0z9a0RODXbf8RaY5os2I2/GPNHx4AlilxEhnRRicwr1TqLRHSp8p2h5m3oM
zagO/q8RAoGBALw8tg/3U+5UWA6vDfoHaxxrbWfbR7S7uud/7J4PZs73Vv7BB1DI
iyKlYd2b8L03zX2QWN1zVHlvtZmFPGjc6U5tXX6Pzk/v2/Gv24r7F4W4lpA/BdSi
DBJeVe0Uuvh8+qaFQQv0ek/JAHGoEgpo7HTIuTAqDtJD78C2o20a/EhrAoGBAPlW
p62ERiKU6hh5nI6rhB+QspgZQf5BQaWfGmDy1CugXNcebm3fqefI55oUux9z95Vj
rB6qNdYlJB+bCbg8d4Mekl1NexZtUn94gd/7U+z4BvfabzJ96JRdIzEbpbZv6rW8
Z4i6RA78S+T/kvjeaHVSEbxJXPU7emwSrt2xPt+pAoGAGRVJ+XSutXp9xW8kQKYO
atoR2R4KPxYpAMI2KJXK0Fd7OzVDoUsn5zT8hohKGxy9gDbk8JV2szvkihGMDDkr
yayfIcdN6a7/swQJEEsHRmVjgtMzFrOFQklZz97MT2JwEBJ/qXUpe0pAieSoisSS
hbldnAJuuSweXaK4wkgvSAMCgYEA8TVLcSkNUFcPQC4lrj9uybqJi2qj1Pv8LeUE
99TyPGIebl0aJ2DAVWKd6wkzHPJrCTIrSF8RReEYWRr7BCg61bW1kl1qPf/0VyyV
N8FDJ3OqCgxellIHtb+EU/WTEjKitL1Wy4amYHjiUt6LqAZAt351edje/L5VaEeK
sxzM3kECgYAjm2igRLqK2SoPSMtrgjjATChYCEkZXE5G86oNjdo5zcd2q+iFMxys
xD1U7taKW1q3mKlOJmzI/04MFdnI+WAUvyRFWuAxiwEqJBB90XfooYe/Pda1Fg1H
mIxuZP5kRx9zYWF1vPzNnEyAn/9yUiap8Gi9DK/YigEOcVrIjnuFMA==
-----END RSA PRIVATE KEY-----

","You are doing completely different operations with openssl and with Python. You are performing RSA signing with openssl, but RSA encryption with PyCrypto. With openssl, as the documentation makes clear:
#include <openssl/rsa.h>
int RSA_private_encrypt(int flen, unsigned char *from, unsigned char *to, RSA *rsa, int padding);


RSA_private_encrypt() signs the flen bytes at from (usually a
  message digest with an algorithm identifier) using the private key rsa
  and stores the signature in to. to must point to RSA_size(rsa) bytes
  of memory.

In other words it perform RSA PKCS #1 ver 1.5 block type 1 signing.
Whereas in PyCrypto, despite the fact that you are using a private key, the encrypt method treats it as a public key (a pycrypto RSA private key is a subclass of RSA public key) and performs RSA PKCS#1 version 1.5 block type 2 encryption.
Since you give no hint of what you are trying to accomplish I can't say which result is the correct one.
If you want PyCrypto RSA signing, the documentation has this example:
>>> from Crypto.Signature import pkcs1_15
>>> from Crypto.Hash import SHA256
>>> from Crypto.PublicKey import RSA
>>>
>>> message = 'To be signed'
>>> key = RSA.import_key(open('private_key.der').read())
>>> h = SHA256.new(message)
>>> signature = pkcs1_15.new(key).sign(h)

","526","<python><rsa><pycrypto>","2","0","2","2018-12-25 18:08:09","","3","","998101","","2018-12-25 17:45:21","2018-12-25 04:00:10",""
"28288397","Import CSP blob exported from .NET into python pyCrypto","I have a CPS Blob exported from certificate using RSACryptoServiceProvider.ExportCspBlob in my .NET application.

return Convert.ToBase64String(rsaAlg.ExportCspBlob(false /*includePrivateParameters*/));

Now, I need to import that blob in python application. I tried using pyCrypto, but with no luck.

# that's the value I'm getting from .NET code above
key = 'BgIAAAAkAABSU0ExAAgAAAEAAQARMnLlzOgHkmHssf6ZSFJn8TlTiOBSoRSEnkI4U0UI6n1jFY2bTWS9O5uApMNXz1vr5OyxoXsNVF2XrNM4DOC+lRn3R/H+mZZxZY1F8oXxhe4L5AFOMhyykPreQtu9z+oKOzVB80zR+EU+nc/290POVK9/LGzP94cTk0VHSZdXDgL1eOiXLSg8h1OnJmMGxY6HyNvbF90onoHMWNrIeRue1vP/S5QLwuzkHv6tgm54bSwXWXFdDRbjtrA9HJkbf74hflAIqivO34bx+53whl2fEsC51eXqFdCr7XJJw+bwlENwDF9bUtCXQ+jXbiYtzvMbntRCKZ8LPRqlN9OWrBC2';

from Crypto.PublicKey import RSA
from Crypto.Util import asn1
from base64 import b64decode

# let's decrypt base64 first
keyDER = b64decode(key)

seq = asn1.DerSequence()
seq.decode(keyDER)
keyPub = RSA.importKey(keyDER)

I'm getting

Traceback (most recent call last):   File ""C:\Program Files
  (x86)\Microsoft Visual Studio 12.0\Common7\IDE\Extensio
  ns\Microsoft\Python Tools for Visual
  Studio\2.1\visualstudio_py_util.py"", line 1 06, in exec_file
      exec_code(code, file, global_variables)   File ""C:\Program Files (x86)\Microsoft Visual Studio 12.0\Common7\IDE\Extensio
  ns\Microsoft\Python Tools for Visual
  Studio\2.1\visualstudio_py_util.py"", line 8 2, in exec_code
      exec(code_obj, global_variables)   File ""c:\users\marcinj\documents\visual studio
  2013\Projects\PythonApplication
  1\PythonApplication1\PythonApplication1.py"", line 12, in 
      seq.decode(keyDER)   File ""C:\Python27\lib\site-packages\Crypto\Util\asn1.py"", line 237, in
  decode
      raise ValueError(""Not a DER SEQUENCE."") ValueError: Not a DER SEQUENCE.

","The CSP blob format is proprietary to Microsoft and poorly documented. Rather than use that format I would instead use the ExportParameters method to get an RSAParameters struct. From this struct I would directly access the Exponent and Modulus byte arrays and base64 encode them for transfer to the python program, as in the following snippet:
var rsa = RSA.Create ();
var RsaParms = rsa.ExportParameters (false);
Console.WriteLine (Convert.ToBase64String( RsaParms.Modulus));
Console.WriteLine (Convert.ToBase64String (RsaParms.Exponent));

In the python program, the documentation for PyCrypto's RSA importKey mentions a few options for acceptable formats. The simplest of these is the PKCS#1 RSAPublicKey structure. This is quite easy to construct from the asn1 module, as in the following snippet:
mod_raw = b64decode('qLhDLGNh7+9xRahkaWILm5HcG3T0Q4SUoDA3bpQtqLxU3AQ/fmYQWLXh0Se1mhQ3AIMduVgKaJhK1sH+G/toXuQ0n5ENw6PtGMODwsDXF072kaBKD3JBZSESC9a9a8QDoGtv7WwvH1UcIE9di60C7YdBMlqqBgkjMQ6c3CTh9KU=')
exp_raw = b64decode('EQ==')
mod = int.from_bytes(mod_raw, 'big')
exp = int.from_bytes(exp_raw, 'big')
seq = asn1.DerSequence()
seq.append(mod)
seq.append(exp)
der = seq.encode()
keyPub = RSA.importKey(der)

","525","<python><.net><rsa><pycrypto><cryptoapi>","2","3","1","2016-12-26 11:09:23","28290057","0","","4082217","","2016-12-26 11:09:23","2015-02-02 22:56:21",""
"33720506","What should I use for randfunc in RSA.generate() with PyCrypto 2.0.1?","I'm trying to generate RSA keys in versions 2.0.1 and 2.6.1 of PyCrypto.
When I specify a single argument to RSA.generate – the number of bits, e.g. 4096 – such as the code below, everything works fine in version 2.6.1:
from Crypto.PublicKey import RSA
keys = RSA.generate(4096)

But when I run it with PyCrypto version 2.0.1, I get the following error:
TypeError: generate_c() takes at least 2 arguments (1 given)

I know that the new API has a randfunc=None and that is the reason why it works in 2.6.1.
My problem is that I do not know what is an acceptable randfunc in 2.0.1. What should I use?
","You should use os.urandom.
Quoting from the PyCrypto documentation:

randfunc (callable) - Random number generation function; it should accept a single integer N and return a string of random data N bytes long. If not specified, a new one will be instantiated from Crypto.Random.


and then there’s an “Attention” section:

You should always use a cryptographically secure random number generator, such as the one defined in the Crypto.Random module; don't just use the current time and the random module.


The Crypto.Random module isn’t present in PyCrypto 2.0.1, so you can’t use this approach here. Instead, you should use os.urandom(). Quoting from the docs (emphasis mine):

Return a string of n random bytes suitable for cryptographic use.
This function returns random bytes from an OS-specific randomness source. The returned data should be unpredictable enough for cryptographic applications, though its exact quality depends on the OS implementation. On a UNIX-like system this will query /dev/urandom, and on Windows it will use CryptGenRandom(). If a randomness source is not found, NotImplementedError will be raised.


That sounds like an appropriate choice of randfunc to me.
","525","<python><pycrypto>","2","1","2","2019-10-26 11:28:13","33720869","0","","1558022","","2015-11-15 15:01:24","2015-11-15 13:56:26",""
"33720506","What should I use for randfunc in RSA.generate() with PyCrypto 2.0.1?","I'm trying to generate RSA keys in versions 2.0.1 and 2.6.1 of PyCrypto.
When I specify a single argument to RSA.generate – the number of bits, e.g. 4096 – such as the code below, everything works fine in version 2.6.1:
from Crypto.PublicKey import RSA
keys = RSA.generate(4096)

But when I run it with PyCrypto version 2.0.1, I get the following error:
TypeError: generate_c() takes at least 2 arguments (1 given)

I know that the new API has a randfunc=None and that is the reason why it works in 2.6.1.
My problem is that I do not know what is an acceptable randfunc in 2.0.1. What should I use?
","I know the thread is really old but i try the same thing in ElGamal with error:
'bytes' object is not callable

My line is: key = ElGamal.generate(length, randfunc=os.urandom(10))
","525","<python><pycrypto>","2","0","2","2019-10-26 11:28:13","33720869","0","","1558022","","2015-11-15 15:01:24","2015-11-15 13:56:26",""
"31525148","Length of output of AES 128 encryption in python","When I am trying to convert to hex the output of my AES 128 encryption code using pycrypto. I am using hexlify .the output is 64 bits for a 32 bits input.  The output is always double the size for any input and when  use an online compiler I get a perfect 32 bit output.Whats the wrong 
What format should i convert the data to get the same size as the input while implementing it.
text= 3235383334332b352b3934363230383037312b3100000000

key ='0123456789abcdef'

iv = '/00/00/00/00/00/00/00/00/00/00/00/00/00/00/00/00'

encryptor = AES.new(key,mode,IV=iv)

output=encryptor.encrypt(text)

I get encrypted output as 
?""?χ?v???
         ؛?3(???nyA??U?}??/??>

I wanted to convert it into a format where i could read it hence was converting it hex
efb82283cf87e7127696baad0c1bd89b3781331c289db9f96e7941d3cd55c77db8a72fdcdd3e1ac1bc9031c61c998e49

can you suggest some other readable format to which i could convert my data to??
","I quote from the python documentation for binascii.hexlify (emphasis added):

Return the hexadecimal representation of the binary data. Every byte of data is converted into the corresponding 2-digit hex representation. The resulting string is therefore twice as long as the length of data.

 

What format should i convert the data to get the same size as the input while implementing it.

Don't convert it at all. Just write it as binary data.
","515","<python><encryption><hex><aes><pycrypto>","0","1","1","2015-07-21 17:44:00","","2","","19679","","2015-07-21 17:44:00","2015-07-20 19:34:04",""
"33620584","Problems with encryption when converting Crypt:CBC example from Perl to Python (Blowfish)","I am trying to translate the program below to Python. 
In the end the Python code should produce the same passphrase output as the Perl variant.
#!/usr/bin/env perl
use Crypt::CBC;

my $key = 'key to the gates'; 
my $cipher = Crypt::CBC->new(
    -key    => $key,
    -cipher => 'Blowfish',
    -salt => '12341234'  
);
my $pass_phrase = ""secret text"";
print $cipher->encrypt_hex($pass_phrase),""\n"";
print unpack('H*', $cipher->key()), ""\n"";
print unpack('H*', $cipher->iv()), ""\n"";
print unpack('H*', $cipher->salt()), ""\n"";
print unpack('H*', $cipher->keysize()), ""\n"";

#output:
#pass:53616c7465645f5f31323334313233344c0ad60f0eb9fdffc46b5cc02d76d473 <- hex enc ""Salted__12341234<gibberish>""
#key:031f2cc96d063cf836ce42c77a8a3d25bdd959659d00a892a02b13930e92f47c82a7054256be4a0f1b3771bd36c07fe3ea4f6900f8ddebe5
#iv:f4d50b2385a2a996
#salt:3132333431323334
#keysize:3536

Below is my python code than that decrypts successfully, but encrypts unsuccessfully.
The successfull decryption of the perl passphrase was mostly for verify input params. (Taking IV straight from perl and removing Crypt::CBC's added 16 char of salt before decrypting made it work, various posts on SO helped me..).
Then is the unsuccessful attempt to encryption passhphrase and generate the same output as perl.
I think i just need to use the right combination of the verified input params to get it working...maybe the salt should be padded? Or padding in general is wrong? Or iv input should not be hexlified? (it need to be 8 chars..)
Any input is appreciated!
!/usr/bin/env python
from Crypto.Cipher import Blowfish
from binascii import hexlify, unhexlify
from struct import pack
import base64

# working decryption
passphrase =  unhexlify(""53616c7465645f5f31323334313233344c0ad60f0eb9fdffc46b5cc02d76d473""[32:])
key = unhexlify(""031f2cc96d063cf836ce42c77a8a3d25bdd959659d00a892a02b13930e92f47c82a7054256be4a0f1b3771bd36c07fe3ea4f6900f8ddebe5"")
iv  = unhexlify('f4d50b2385a2a996')
num_padding = ord(Blowfish.new(key, Blowfish.MODE_CBC, iv).decrypt(passphrase)[-1])
print Blowfish.new(key, Blowfish.MODE_CBC, iv).decrypt(passphrase)[:(-1*num_padding)]

# --- non working encryption!
passphrase2 = ""secret text""
key2 = 'key to the gates'
iv2  = unhexlify('f4d50b2385a2a996')
plength = Blowfish.block_size - len(passphrase2) % Blowfish.block_size
padding = [plength] * plength
pad_str = passphrase2 + pack('b' * plength, *padding)
cipher = Blowfish.new(key2, Blowfish.MODE_CBC, iv2)
print hexlify(""Salted__12341234""+cipher.encrypt(pad_str))

#output:
#secret text
#53616c7465645f5f31323334313233346aa3f2169677cbf282b1330b46da3114

","I guess you are not supposed to answer your own question, but i leave it here anyway:)
I think maybe padding was off in the original code, not really sure.
This time i used the nice ""Padding"" lib https://pypi.python.org/pypi/Padding 
from Crypto.Cipher import Blowfish
from binascii import hexlify, unhexlify
import Padding 

class BlowFishCipher:
    def __init__( self, key,iv,salt ):
    self.key = unhexlify(key)
    self.iv = unhexlify(iv)
    self.salt = unhexlify(salt)
def encrypt( self, raw ):
    raw = Padding.appendPadding(raw, BS)
    cipher = Blowfish.new( self.key, Blowfish.MODE_CBC, self.iv )
    return hexlify(""Salted__""+self.salt+cipher.encrypt(raw))
def decrypt( self, enc):
    enc = unhexlify(enc)
    cipher = Blowfish.new(self.key, Blowfish.MODE_CBC, self.iv )
    return Padding.removePadding(cipher.decrypt( enc), BS)

if __name__== ""__main__"":
    BS = Blowfish.block_size
    key_perl = ""031f2cc96d063cf836ce42c77a8a3d25bdd959659d00a892a02b13930e92f47c82a7054256be4a0f1b3771bd36c07fe3ea4f6900f8ddebe5""
    iv_perl = ""f4d50b2385a2a996""
    salt_perl= ""3132333431323334""
    passphrase_perl = ""53616c7465645f5f31323334313233344c0ad60f0eb9fdffc46b5cc02d76d473""
    # remove ""Salted__12341234"" from passhphrase_perl by [32:]  
    passphrase = passphrase_perl[32:]
    decryptor = BlowFishCipher(key_perl,iv_perl,salt_perl)
    plaintext = decryptor.decrypt(passphrase)
    print ""decrypted        {:>70}"".format(plaintext)
    ciphertext = ""secret text""
    encodedtext = decryptor.encrypt(ciphertext)
    print ""encrypted pyhton {:>70}"".format(encodedtext)
    print ""encrypted perl   {:>70}"".format(passphrase_perl)

decrypted                                                            secret text
encrypted pyhton       53616c7465645f5f31323334313233344c0ad60f0eb9fdffc46b5cc02d76d473
encrypted perl         53616c7465645f5f31323334313233344c0ad60f0eb9fdffc46b5cc02d76d473
","503","<python><perl><encryption><pycrypto><blowfish>","0","0","1","2015-11-12 21:34:41","","0","","5540257","","2015-11-12 07:18:41","2015-11-09 23:59:37",""
"36634517","From M2Crypto to pyCrypto","I'm trying to port an M2Crypto function to pyCrypto or any other solution, 'cause the last version of M2Crypto doesn't work with pypy.
So, i'm trying to port an existing code from pysimplesoap:
https://github.com/pysimplesoap/pysimplesoap/blob/master/pysimplesoap/xmlsec.py
This is the only function that i don't know how to port:
def x509_extract_rsa_public_key(cert, binary=False):
    ""Return the public key (PEM format) from a X509 certificate""
    x509 = x509_parse_cert(cert, binary)
    return x509.get_pubkey().get_rsa().as_pem()

The original public certificate is:
-----BEGIN CERTIFICATE-----
MIIFhTCCA20CBFOF3SIwDQYJKoZIhvcNAQEFBQAwgYYxIDAeBgkqhkiG9w0BCQEW
EWpjZXJkYUBleHBlcnRpLmNsMQswCQYDVQQGEwJDTDERMA8GA1UECAwIU2FudGlh
Z28xETAPBgNVBAcMCFNhbnRpYWdvMRAwDgYDVQQKDAdFeHBlclRJMRAwDgYDVQQL
DAdFeHBlclRJMQswCQYDVQQDDAIxMDAeFw0xNDA1MjgxMjU3MDZaFw0xNjA1Mjcx
MjU3MDZaMIGGMSAwHgYJKoZIhvcNAQkBFhFqY2VyZGFAZXhwZXJ0aS5jbDELMAkG
A1UEBhMCQ0wxETAPBgNVBAgMCFNhbnRpYWdvMREwDwYDVQQHDAhTYW50aWFnbzEQ
MA4GA1UECgwHRXhwZXJUSTEQMA4GA1UECwwHRXhwZXJUSTELMAkGA1UEAwwCMTAw
ggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQCX1t11QZSgfodg+NPwKdof
lakbpxsFmCvjbY3Vpp6/bTv56XIZe/Z3gBlU4zeGslEaqzs1k4cGAcdZPHxSMydC
oLxmyXpdS2hVFUZTYAeanXHhQzUKmNlgYj3uObprPEEQzD/vEuqpwz2/ZGyaHsWs
exu9aeuLAUUSNne0yqobrzRfEp2FqCp4sJB80cXgGfPA4Cr5jROHqUi8sVWpWRy5
ai5ZaiXRPo3YKF1336twuw9lRS3cRtJh9/AoJElGT7G7BMDpxyTTa08y1iRliDGu
mwWivQMHoKqEs0lCtF9Uz8cFdmiIoRPTt6McpmLoapL9v19xjNnim4lke6DPvtcg
uato7T+frDqA5Cj5GRP/8jbe90Y+YjHuJTkw+fkV6gDTRmJ3wCWDIw/07aY6nZ+H
24Imu6N2YBsMEsa8j9OW04mNgtppRC4dFBh0FIKXC35kJgN38y+6T7MsQThX1XZS
SlK0FygJJADVGelmxtsrRRfnp4yLYRjwdkRGExRjVs/+fkOyKI+fX0o68z6MEDyA
5epVHpgwJ/Yz3Lo7cgXy0hO5a/MfZc0Y0ofb29g8sJMJ8j/SSR85i4pFxudn+HH0
SmkkzE/P10adF/X+pqjscOE+aXwnX09lUUQ9TIlpYaR3hUhONsuefYJ2sHz2z+vt
K5btQwN7u9+QeXLgb20PMwIDAQABMA0GCSqGSIb3DQEBBQUAA4ICAQAqCepOSFi7
8d6lKTfWpMuj5ygpplBa3Bj81AKkNfSGDN7zkNX2sCbqn9aEjniIPtldG6I2fgCs
FYTZE9oEPNiuEuH7PNtAjTExIUi9Jzm7bqjCdSs7Ioek1cPePgst017zJ6NSTkaM
r7pUDaS3855xO92uaJskppAeegwz9Dv3d5wY+wVViqUki4pZyxa95IvBJz4NR1Xr
cO6XtUUT9M0wbd0jAkRp7DPQfkihZj8vLSvlUYTRdlF2swIBE/ME2T3NCa0/kt1c
IA1Aq/zn7t0yKvyaJ/O//LrHA1Lfa/uC61O/9P3t+eXDsYl73CeGQdSYZp2DAZmA
Ek3tzwhFa6HR+POIo8MptWMT3DQ0ISHH+EW1Xp8GHIGsk2ELsXuA6XTNwpfz9yvl
9d7IGsq4cdX88cNUCbXm4tj7F3s6i8pNWeCImaYcXKGCBdsLM+lbmqbuV7o3d1Ei
efbR1TQkCxRBNCMUI0pF7NW8PvY3QER9/jEnN52SX+tuQRVdpgl+PyTdSASr4FhV
+HHmgeOgeOewXDnZ7aA1F6f8+CY8Niv4FGZIAptdxTqdynY4nUy/wFowBouO3LEF
6nIcQ3Jx1pDXoEmcLa03JaL7qQNSHyqSe/YEl8E5fdDr7vApzw9pvpAjj1aslidL
bNd4l1YGlL2vbGsIXZlbdBLiblXRi78AyQ==

And when i execute that function, the result is:
-----BEGIN PUBLIC KEY-----
MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAl9bddUGUoH6HYPjT8Cna
H5WpG6cbBZgr422N1aaev207+elyGXv2d4AZVOM3hrJRGqs7NZOHBgHHWTx8UjMn
QqC8Zsl6XUtoVRVGU2AHmp1x4UM1CpjZYGI97jm6azxBEMw/7xLqqcM9v2Rsmh7F
rHsbvWnriwFFEjZ3tMqqG680XxKdhagqeLCQfNHF4BnzwOAq+Y0Th6lIvLFVqVkc
uWouWWol0T6N2Chdd9+rcLsPZUUt3EbSYffwKCRJRk+xuwTA6cck02tPMtYkZYgx
rpsFor0DB6CqhLNJQrRfVM/HBXZoiKET07ejHKZi6GqS/b9fcYzZ4puJZHugz77X
ILmraO0/n6w6gOQo+RkT//I23vdGPmIx7iU5MPn5FeoA00Zid8AlgyMP9O2mOp2f
h9uCJrujdmAbDBLGvI/TltOJjYLaaUQuHRQYdBSClwt+ZCYDd/Mvuk+zLEE4V9V2
UkpStBcoCSQA1RnpZsbbK0UX56eMi2EY8HZERhMUY1bP/n5DsiiPn19KOvM+jBA8
gOXqVR6YMCf2M9y6O3IF8tITuWvzH2XNGNKH29vYPLCTCfI/0kkfOYuKRcbnZ/hx
9EppJMxPz9dGnRf1/qao7HDhPml8J19PZVFEPUyJaWGkd4VITjbLnn2CdrB89s/r
7SuW7UMDe7vfkHly4G9tDzMCAwEAAQ==
-----END PUBLIC KEY-----

I was trying to do something like this, but it doesn't work:
pub = open(""certificate_server.crt"", ""r"").read()
a2 = crypto.load_certificate(FILETYPE_PEM, pub)
b2 = a2.get_pubkey()

But then i don't know how to proceed, can someone help me?
","Using pyOpenSSL, after you call get_pubkey() you can call OpenSSL.crypto.dump_publickey(OpenSSL.crypto.FILETYPE_PEM, b2) to get the PEM output.
","503","<python><pycrypto><pypy><m2crypto>","0","0","1","2016-05-22 01:50:57","","1","1","274466","","2016-04-14 22:03:31","2016-04-14 21:41:42",""
"51988848","Error 1 while installing pip package (pycrypto)","I've been trying to install pycrypto. After getting this error, I tried to uninstall python 3.7 and install 3.6 as specified by a thread somewhere. This didn't make it any better. Please let me know how to resolve this. I'm on Windows 7, 64 bit, Python 3.6.
    ----------------------------------------
Command ""c:\users\admin\appdata\local\programs\python\python36\python.exe -u -c
""import setuptools, tokenize;__file__='C:\\Users\\Admin\\AppData\\Local\\Temp\\p
ip-install-lm9pf3lz\\pycrypto\\setup.py';f=getattr(tokenize, 'open', open)(__fil
e__);code=f.read().replace('\r\n', '\n');f.close();exec(compile(code, __file__,
'exec'))"" install --record C:\Users\Admin\AppData\Local\Temp\pip-record-0pd9vdl0
\install-record.txt --single-version-externally-managed --compile"" failed with e
rror code 1 in C:\Users\Admin\AppData\Local\Temp\pip-install-lm9pf3lz\pycrypto\

","You can also install via wheels, which usually include the binary so you don't have to compile.  
https://github.com/sfbahr/PyCrypto-Wheels
","497","<python><pip><pycrypto>","0","0","1","2018-08-23 15:18:13","51989121","5","","","","","2018-08-23 15:03:03",""
"42127072","How can I use Keystore in Android Native Code?","I need to encrypt the some file which are created by the android native service written in C++. I have to use Keystore but I dont know how to use. is there any libraries or document?
","I know the thread is old but maybe it will help someone in the future. The hints below refer to Android Keystore v3 and v4 (Oreo and Pie respectively).
Basically the HAL keystore (as described here) is wrapped in the keystore service.
The service API mimics the interface described in IKeymasterDevice.hal. Instead of blob you can use a string alias for the key (e.g. ""mySecretKey"").
The service stores the keyblobs (raw key material + key parameters) to the file system. Default location is /data/misc/keystore/user_0/<uid>_<key_alias>.
Keystore service is also the layer which checks whether requesting process is allowed to use the key (based on process uid).
The communication with keystore service is done via binder interface (IPC). You may want to read more about it here.
AOSP contains reference client implementation here.
Example usage can be found in the stock CLI here
The AOSP comes with SW based keystore implementation which can be found here. By default the keyblob on AOSP builds are not encrypted.
Note that the stock keystore_cli_v2 does NOT provide support for key import. If you plan to encrypt the data offline (e.g. pycrypto) you must extend it. If you plan to do so remember that the keystore_client_impl.cpp is linked to libkeystore_binder.so and not the keystore_cli_v2.
For the asymmetric key ciphers you may export the public key component using the API.
","493","<android><java-native-interface><keystore><pycrypto>","3","2","1","2019-09-01 19:28:58","","2","1","","","","2017-02-09 02:13:16",""
"23272959","Is there any library or code for DES which take 7 byte key?","Do we have any library or any mechanism where we can use true 7 byte key for DES instead of 8 byte key. I need it for keys  analysis in DES and 8 byte key requirement for associated library is creating problem in getting actual keys analysis.
","As explained in http://en.wikipedia.org/wiki/Data_Encryption_Standard, the 8-byte key for DES is just a 56-bit key in 8 bytes with odd parity check added:
The key is nominally stored or transmitted as 8 bytes, each with odd parity. According to ANSI X3.92-1981, section 3.5:
One bit in each 8-bit byte of the KEY may be utilized for error detection in key generation, distribution, and storage. Bits 8, 16,..., 64 are for use in ensuring that each byte is of odd parity.

(end quote)
So given an 8-byte key I can generate a 7-byte key by dropping the parity check bits and reformatting, and given a 7-byte key I can generate an 8-byte key by reformatting and adding parity check bits. It should therefore be easy to produce wrappers to make a library for one key format look like a library for another - or are you having some other problem I haven't noticed?
","483","<algorithm><openssl><key><des><pycrypto>","0","2","3","2014-04-24 20:25:46","23277594","0","","3559830","","2014-04-24 16:41:02","2014-04-24 15:14:14","2014-04-26 06:58:09"
"23272959","Is there any library or code for DES which take 7 byte key?","Do we have any library or any mechanism where we can use true 7 byte key for DES instead of 8 byte key. I need it for keys  analysis in DES and 8 byte key requirement for associated library is creating problem in getting actual keys analysis.
","In DES a key is comprised of 8 bytes with the LSB a parity bit, a nice and regular structure.  There's an implication there for the relationship between input bytes and Permuted Choice 1, which loads the two 28 bit C and D Registers. 
In parlance of the NBS standard a Permuted Choice is a selection permutation not using all the values of a greater whole.
Historically any DES implementation that used 7 bytes wasn't compatible where there are several FIPS/Nist pubs specifying key/ciphertext/plaintext triplets.
If you have a need for a 56 bit number representing a key there's an implication you're using or storing them in a tabular fashion.  Otherwise you could simply guarantee the parity bit is either correct or say '0'.  'Packed' keys are only of interest for saving storage space.
All that said and done if you need a 56 bit number representing a key you could represent 8 bytes of key in a 64 bit value and after identifying the parity bit locations with respect to endian-ness, shift the 64 bit array value obliterating the parity bits one at a time in 8 operations on a 64 bit machine, leaving 56 'effective' key bits.
On a 32 bit or smaller machine you'd also have to track byte position to keep track of bit shift offsets and would have to deal with bits moving between bytes to pack bits into 7 bytes.
For a 32 bit machine you could pack two 32 bit values into 28 bits in opposite directions then merge the proper 4 bits of the second one into the first followed by shifting the second value down 8 bits.
For a big-endian bit in byte numbering system 1 to 8 with bit 8 the LSB (from the standard)
Bits 1-4 go to the C register, with only four  bit 4 values from 8 successive bytes of an input key (described as an input array of bits).  The D block shares bit 4 and uses bits 5-7 to derived 28 bits:

The bigger issue here may be the ability to communicate any interesting finding in terms of keys useful to those dealing with an 8 byte key representation.  It may be handy to have an inverse function available as well.
There's also a relationship between round keys and the C and D concatenated block, shown in Carl Meyers and Stephen Metyas book ""Cryptography, A New Dimension in Computer Security', subtitled 'A Guide for the Design and Implementation of Secure Systems', Wiley Interscience, 1982, ISBN-0-471- 04892-5.
I recreated the table using a derivative of the original BSD libcrypt source.  The significance of this is that C and D bits don't mix in the two 24 bit values derived from Permuted Choice 2 (which is visible in selected key (KS) in round 16 of the table).
  Bit  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  
KS  
   1  15 18 12 25  2  6  4  1 16  7 22 11 24 20 13  5 27  9 17  8 28 21 14  3  
   2  16 19 13 26  3  7  5  2 17  8 23 12 25 21 14  6 28 10 18  9  1 22 15  4  
   3  18 21 15 28  5  9  7  4 19 10 25 14 27 23 16  8  2 12 20 11  3 24 17  6  
   4  20 23 17  2  7 11  9  6 21 12 27 16  1 25 18 10  4 14 22 13  5 26 19  8  
   5  22 25 19  4  9 13 11  8 23 14  1 18  3 27 20 12  6 16 24 15  7 28 21 10  
   6  24 27 21  6 11 15 13 10 25 16  3 20  5  1 22 14  8 18 26 17  9  2 23 12  
   7  26  1 23  8 13 17 15 12 27 18  5 22  7  3 24 16 10 20 28 19 11  4 25 14  
   8  28  3 25 10 15 19 17 14  1 20  7 24  9  5 26 18 12 22  2 21 13  6 27 16  
   9   1  4 26 11 16 20 18 15  2 21  8 25 10  6 27 19 13 23  3 22 14  7 28 17  
  10   3  6 28 13 18 22 20 17  4 23 10 27 12  8  1 21 15 25  5 24 16  9  2 19  
  11   5  8  2 15 20 24 22 19  6 25 12  1 14 10  3 23 17 27  7 26 18 11  4 21  
  12   7 10  4 17 22 26 24 21  8 27 14  3 16 12  5 25 19  1  9 28 20 13  6 23  
  13   9 12  6 19 24 28 26 23 10  1 16  5 18 14  7 27 21  3 11  2 22 15  8 25  
  14  11 14  8 21 26  2 28 25 12  3 18  7 20 16  9  1 23  5 13  4 24 17 10 27  
  15  13 16 10 23 28  4  2 27 14  5 20  9 22 18 11  3 25  7 15  6 26 19 12  1  
  16  14 17 11 24  1  5  3 28 15  6 21 10 23 19 12  4 26  8 16  7 27 20 13  2  

  Bit 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48  
KS  
   1  42 53 32 38 48 56 31 41 52 46 34 49 45 50 40 29 35 54 47 43 51 37 30 33  
   2  43 54 33 39 49 29 32 42 53 47 35 50 46 51 41 30 36 55 48 44 52 38 31 34  
   3  45 56 35 41 51 31 34 44 55 49 37 52 48 53 43 32 38 29 50 46 54 40 33 36  
   4  47 30 37 43 53 33 36 46 29 51 39 54 50 55 45 34 40 31 52 48 56 42 35 38  
   5  49 32 39 45 55 35 38 48 31 53 41 56 52 29 47 36 42 33 54 50 30 44 37 40  
   6  51 34 41 47 29 37 40 50 33 55 43 30 54 31 49 38 44 35 56 52 32 46 39 42  
   7  53 36 43 49 31 39 42 52 35 29 45 32 56 33 51 40 46 37 30 54 34 48 41 44  
   8  55 38 45 51 33 41 44 54 37 31 47 34 30 35 53 42 48 39 32 56 36 50 43 46  
   9  56 39 46 52 34 42 45 55 38 32 48 35 31 36 54 43 49 40 33 29 37 51 44 47  
  10  30 41 48 54 36 44 47 29 40 34 50 37 33 38 56 45 51 42 35 31 39 53 46 49  
  11  32 43 50 56 38 46 49 31 42 36 52 39 35 40 30 47 53 44 37 33 41 55 48 51  
  12  34 45 52 30 40 48 51 33 44 38 54 41 37 42 32 49 55 46 39 35 43 29 50 53  
  13  36 47 54 32 42 50 53 35 46 40 56 43 39 44 34 51 29 48 41 37 45 31 52 55  
  14  38 49 56 34 44 52 55 37 48 42 30 45 41 46 36 53 31 50 43 39 47 33 54 29  
  15  40 51 30 36 46 54 29 39 50 44 32 47 43 48 38 55 33 52 45 41 49 35 56 31  
  16  41 52 31 37 47 55 30 40 51 45 33 48 44 49 39 56 34 53 46 42 50 36 29 32  

This almost says your 56 bit number should be concatenated from the C and D Register values so there's a discernible relationship with round keys while allowing you to index based on C and/or D values.
","483","<algorithm><openssl><key><des><pycrypto>","0","1","3","2014-04-24 20:25:46","23277594","0","","3559830","","2014-04-24 16:41:02","2014-04-24 15:14:14","2014-04-26 06:58:09"
"23272959","Is there any library or code for DES which take 7 byte key?","Do we have any library or any mechanism where we can use true 7 byte key for DES instead of 8 byte key. I need it for keys  analysis in DES and 8 byte key requirement for associated library is creating problem in getting actual keys analysis.
","I tried editing pyDes library code I just took 7 byte key and converted back to 64 bits by padding '0' to every multiple of 8th positions of bits.  so the analysis on 7 byte-key actually required for algorithm hopefully is gained and the the parity bits are taken as 0 (that is not associated to my key now)  :) . please comment if my key still is not solely for DES algorithm.. 
","483","<algorithm><openssl><key><des><pycrypto>","0","0","3","2014-04-24 20:25:46","23277594","0","","3559830","","2014-04-24 16:41:02","2014-04-24 15:14:14","2014-04-26 06:58:09"
"43181912","Encrypting and Decrypting with python and nodejs","I am trying to pass data between Python and Node.js application. For that i am using AES encryption. The problem is that Node.js produces encrypted data which is twice longer than the one produced using Python.
Below are code snippets.
Python 3.6
import binascii
from Crypto.Cipher import AES

key = 'key-xxxxxxxxxxxxxxxxxxZZ'
iv = '1234567812345678'
data = 'some_secret_data'

def _encrypt(data):
    aes = AES.new(key, AES.MODE_CBC, iv[:16])
    encrypted = aes.encrypt(data)
    # encrypted = b'\xd54\xbb\x96\xd3\xbet@\x10\x01 [\reg\xaa'

    encrypted_base64 = binascii.b2a_base64(encrypted)
    # encrypted_base64 = b'1TS7ltO+dEAQASBbDWVnqg==\n'

    encrypted_hex = binascii.hexlify(encrypted)
    # encrypted_hex = b'd534bb96d3be74401001205b0d6567aa'

    return encrypted_base64

output = _encrypt(data)

Node v6.10.0
let crypto = require(""crypto"");
let enc = require(""./encryption"");

var key = 'key-xxxxxxxxxxxxxxxxxxZZ';
var iv = '1234567812345678';
var data = 'some_secret_data';

var encrypted_hex = encrypt(data, 'hex');
var encrypted_base64 = encrypt(data, 'base64');

console.log(encrypted_hex);
// encrypted_hex = 'd534bb96d3be74401001205b0d6567aab4c31f7a76936598e5a1cc05385f3a91'

console.log(encrypted_base64);
// encrypted_base64 = '1TS7ltO+dEAQASBbDWVnqrTDH3p2k2WY5aHMBThfOpE='

function encrypt(msg, encoding){
    var aes = crypto.createCipheriv('aes-192-cbc', key, iv);
    var crypted = aes.update(msg,'utf8', encoding)
    crypted += aes.final(encoding);

    return crypted;
}

As you can see above, Python produces encrypted_hex which equals to d534bb96d3be74401001205b0d6567aa. In Node, encrypted_hex contains the value mentioned above + b4c31f7a76936598e5a1cc05385f3a91.
Could anyone help me understand what is going on here:
Why does Node.js produces result which is twice longer ?
","I figured it out.
This happens because of different  behavior of Pythons' PyCrypto package and Nodes' Crypto module. I am using AES, and since it is a block cypher, it requires data to come in chunks of specified length.
PyCrypto fails if it encounters data which doesn't come in 16 bit chunks. Nodes' Crypto, by default will pad data, so data will always come in chunks of good size.
For the sake of simplicity i've tested data having length of 16 bytes in the examples above. So why were the results different?
Python module did not pad data by default, and because data contained correct length, we've got expected result.
Node Crypto module, however, does pad the data, and apparently adds the whole 16 bit chunk of padding to original message (which really sounds like a bug). That is why the first part of encrypted Nodes' message corresponds to the one created in Python, the other one is just Node Crypto trying to encrypt its own excessive padding.
Anyway, to get rid of the error, i've simply added
 aes.setAutoPadding(false);

in my encrypt() function.
Wooh.
","483","<python><node.js><encryption><aes><pycrypto>","0","0","1","2017-04-03 12:59:48","","1","","","","","2017-04-03 10:13:16",""
"49767968","pycryprodome AES CBC mismatch after decryption in Python","my goal is to have a very simple AES 128 CBC scheme which encrypts a plaintext and then decrypts it based on a given key in Python. I'm using pycryptodome framework and I couldnt find any documentation with an example of the AES CBC scheme. 
Following is my code. The decrypted data is not same as the data before encryption. Will be fantastic if someone can help me identify what is going wrong here. 
key = b'Sixteen byte key'
data = 'Jeevan B Manoj'.encode(""UTF-8"")
data = pad(data,16)
cipher = AES.new(key, AES.MODE_CBC)
print(""data before encryption"")
print(data)
ciphertext = cipher.encrypt(data)
cipher = AES.new(key, AES.MODE_CBC)
plaintext = cipher.decrypt(ciphertext)
print(plaintext)

","If you use MODE_ECB instead of MODE_CBC it works.  I also didn't know what padding routine you are using so I used this one.
I have several other examples here:
https://github.com/SolarDon/pycryptodome/tree/master/Examples
from Crypto.Cipher import AES
 # Padding for the input string --not related to encryption itself.
BLOCK_SIZE = 16  # Bytes
pad = lambda s: s + (BLOCK_SIZE - len(s) % BLOCK_SIZE) * chr(BLOCK_SIZE - len(s) % BLOCK_SIZE)
unpad = lambda s: s[:-ord(s[len(s) - 1:])]

key = b'Sixteen byte key'
data = 'Jeevan B Manoj'.encode(""UTF-8"")
data = pad(data)
cipher = AES.new(key, AES.MODE_ECB) # AES.MODE_CBC
print(""data before encryption"")
print(data)
ciphertext = cipher.encrypt(data)
cipher = AES.new(key, AES.MODE_ECB) # MODE_CBC
plaintext = cipher.decrypt(ciphertext)
print(unpad(plaintext))

","482","<python><encryption><aes><pycrypto><pycryptodome>","0","0","2","2018-05-22 04:17:50","","1","","","","","2018-04-11 06:27:49",""
"49767968","pycryprodome AES CBC mismatch after decryption in Python","my goal is to have a very simple AES 128 CBC scheme which encrypts a plaintext and then decrypts it based on a given key in Python. I'm using pycryptodome framework and I couldnt find any documentation with an example of the AES CBC scheme. 
Following is my code. The decrypted data is not same as the data before encryption. Will be fantastic if someone can help me identify what is going wrong here. 
key = b'Sixteen byte key'
data = 'Jeevan B Manoj'.encode(""UTF-8"")
data = pad(data,16)
cipher = AES.new(key, AES.MODE_CBC)
print(""data before encryption"")
print(data)
ciphertext = cipher.encrypt(data)
cipher = AES.new(key, AES.MODE_CBC)
plaintext = cipher.decrypt(ciphertext)
print(plaintext)

","As t.m.adam noted, the CBC mode of operation requires an initialization vector (IV) to work. Because the IV is commonly forgotten (also that it has to be unique and unpredictable, e.g. random), Pycryptodome creates a random one when a cipher object is initialized.
The IV must be unique for each encryption and is required for decryption. Common practice (source?) is to put the IV at the start of the ciphertext (the IV does not to need to be secret).
To make your example work:
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad

# Do not use raw passwords as keys,
# use a derivation functions to generate keys from them
key = b'Sixteen byte key'  
data = 'Jeevan B Manoj'.encode(""UTF-8"")
data = pad(data, AES.block_size)
encryptor = AES.new(key, AES.MODE_CBC)
iv = encryptor.IV
decryptor = AES.new(key, AES.MODE_CBC, IV=iv)

ciphertext = encryptor.encrypt(data)
plaintext = decryptor.decrypt(ciphertext)

assert plaintext == data

Important note: The ciphertext and IV must be authenticated for security (so data cannot be tampered with). For that, Pycryptodome offers AEAD modes like EAX and GCM as pointed out by Hans-Peter Jansen on GitHub. For many of them padding is not required.
","482","<python><encryption><aes><pycrypto><pycryptodome>","0","3","2","2018-05-22 04:17:50","","1","","","","","2018-04-11 06:27:49",""
"37996442","Decrypt cipher text encrypted with PyCrypto using cryptopp","My server encrypts files using pycrypto with AES in CTR mode. My counter is a simple counter like this:
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03

I wanna decrypt the cipher text with c++'s cryptopp library in my clients. How should I do so?
Python code:
encryptor = AES.new(
    CRYPTOGRAPHY_KEY,
    AES.MODE_CTR,
    counter=Counter.new(128),
)
cipher = encryptor.encrypt(plain_text)

C++ code so far:
byte ctr[] = ""\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01""
mDecryptor = new CryptoPP::CTR_Mode<CryptoPP::AES>::Decryption(key, 32, ctr);
std::string plain;
CryptoPP::StringSource(std::string(data, len), true, new CryptoPP::StreamTransformationFilter(*mDecryptor, new CryptoPP::StringSink(plain)));

but after running this plain is garbage.
Update:
Sample encrypted data you can try to decrypt with crypto++ so that you can help me even if you don't know python and you're just experienced with crypto++:
Try to decrypt this base64 encoded text:
2t0lLuSBY7NkfK5I4kML0qjcZl3xHcEQBPbDo4TbvQaXuUT8W7lNbRCl8hfSGJA00wgUXhAjQApcuTCZckb9e6EVOwsa+eLY78jo2CqYWzhGez9zn0D2LMKNmZQi88WuTFVw9r1GSKIHstoDWvn54zISmr/1JgjC++mv2yRvatcvs8GhcsZVZT8dueaNK6tXLd1fQumhXCjpMyFjOlPWVTBPjlnsC5Uh98V/YiIa898SF4dwfjtDrG/fQZYmWUzJ8k2AslYLKGs=

with this key:
12341234123412341234123412341234

with counter function described in the beginning of this post using crypto++. If you succeed post the decrypted text (which contains only numbers) and your solution please.
Update2:
I'm not providing an IV in python code, the python module ignores IV. I the IV thing is what causing the problem.
","As I read their source codes I can say PyCrypto and Crypto++ Both are perfect libraries for cryptography for Python and C++. The problem was that I was prefixing the encrypted data with some meta information about file and I totally forgot about that, after handling these meta data in client Crypto++ decrypted my files.
As I didn't find this documented explicitly anywhere (not even in Wikipedia) I write it here:
Any combination of Nonce, IV and Counter like concatenation, xor, or likes will work for CTR mode, but the standard that most libraries implement is to concatenate these values in order. So the value that is used in block cipher algorithm is usually: Nonce + IV + Counter. And counter usually starts from 1 (not 0).
","480","<python><pycrypto><crypto++>","0","0","1","2016-06-27 19:31:36","38002618","9","","1349278","","2016-06-27 19:31:36","2016-06-23 15:54:08",""
"13544061","compressed encrypted file is bigger then source","I created a encrypted file from a text file in python with beefish.
beefish uses pycrypto.
so my source text file is 33742 bytes and the encrypted version is 33752.
thats ok so far but ...
when I compress the test.enc (encrypted test file) with tar -czvf the final file is 33989 bytes. Why does the compression not work when the source file is encrypted?
So far the only option then seems to compress it first and then encrypt it cause then the file stays that small.
","Compression works by identifying patterns in the data. Since you can't identify patterns in encrypted data (that's the whole point), you can't compress it.
For a perfect encryption algorithm that produced a 33,742 byte output, ideally all you would be able to determine about the decrypted original data is that it can fit in 33,742 bytes, but no more than that. If you could compress it to, say, 31,400 bytes, then you would immediately know the input data was not, say, 32,000 bytes of random data since random data is patternless and thus incompressible. That would indicate a failure on the part of the encryption scheme. It's nobody's business whether the decrypted data is random or not.
","478","<python><python-2.7><pycrypto>","1","7","2","2012-11-24 19:13:30","13544079","0","","","","","2012-11-24 18:10:33",""
"13544061","compressed encrypted file is bigger then source","I created a encrypted file from a text file in python with beefish.
beefish uses pycrypto.
so my source text file is 33742 bytes and the encrypted version is 33752.
thats ok so far but ...
when I compress the test.enc (encrypted test file) with tar -czvf the final file is 33989 bytes. Why does the compression not work when the source file is encrypted?
So far the only option then seems to compress it first and then encrypt it cause then the file stays that small.
","The compression method used by tar -z relies on repeating patterns in the input file, replacing these patterns by a count of how many times the pattern repeated (grossly simplified).
However, when you encrypt a file, you are basically trying to hide any repeating patterns in as much 'random'-looking noise as possible. That makes your file nearly incompressible. Combine that with the overhead of the archive and compression file format (metadata, etc.) and your file actually ends up slightly larger instead.
You should reverse the process; compress first, then encrypt, and you'll increase the chances you end up with a smaller payload significantly.
","478","<python><python-2.7><pycrypto>","1","1","2","2012-11-24 19:13:30","13544079","0","","","","","2012-11-24 18:10:33",""
"31866028","Error converting bytes to string in Python 3","I got an error when trying to convert the byte sequence I got from a pkcs8 key extraction:
b'0\x82\x02[\x02\x01\x00\x02\x81\x81\x00\xb9_\xc3\xe7x\xd6\x96W\xb0\xaf\xcb\x8f\x08\xe6f<\x00\x14\xd4&d\xad\x0b}\x1d\xaf\xaf,\x87\xf5\x9f\x9bL\x12K\xbcO\x18\xe9N`\xe7\xa6\x0b\xf9\xc2\x84\x84n\xa1\xc2\xac\xc6|8&mR,YY\t\x9aV&E\xc2\x8eZ\\=\x18\x98\x10\xa2pO\xbezpe\xa6\xa6\xf01!\xcd\xfeK\xdd\xb6$\x14\xe8\xfa0\x17\x8e0\xfb\xf6\xc8\xb8\x17\xf7g\x9c\x8c\xb2d\xee\x8f\x7fg~\xea\x03\xd3\x8a\x0f\x9e\xfb~\xe0F\xda\xca\xfd\x02\x03\x01\x00\x01\x02\x81\x80.\x18\t\xf6|\xad\x9f$\x9e\xe2\x97\x931{X\xe0\x82\x84\xab\\\x00\x9c\xa6\xc6\xad\xa3\t\xc3\xe0\xea\xca\x8d+\x15A\x8f\xc9{@H%\x00t\xe1uqP\xd2=P+\xc0\x1az\xb8\xdb\x95Ca\x93\xb5\xf8\x15O\xf9\xa6?\x08\xf4\xd8\xa6\x83X-\xe3\xfd>\xcb\xe7\x7f\x00\x1d\xcf<\x9dI\xdf\xaca\x84\xb5\x06\xd2\xb0\xd3\x0f\x84\x96\xcdrf\xeb\x99o\x8eh\x9f\xc5\xd6\xde\x06\xdf@\x02\x04\xe1\x7f\xce\x11;\xa0\x06I\x0e#f\x8e\x01\x02A\x00\xf3*\xa2\x82\xd5w\x0f\x93=\xa3\xa4;\x10Y\x0f\xca\xf7\xeeX\xc3\xd4\xaa\x83\x82Jr\xa8\x06M\x10BO\xda\xf9\x01P\x14\x84\xb0\xe8P\xf8u\x94K:!4\xc8\x7fM\x92\n\xbb\x05w\xd2\xf0s\xe5\xe45\xec-\x02A\x00\xc3(Oo\xdf[""E\xe8kK2\x90\x90l\x9c\x83\x02V\x8e0\xe1h\x8cS\x17\x00\\\xbf\x8e\xbb#ZD\xb8\xe3\xbd\x99\x9bn\xdd\xfa\xceD\x95Z\xd8t\xdfZ\xbbG\x8f\xc9s\xb9\xd5\xd0\xd6\xa0\xb5\x84\x0c\x11\x02@\x07S\xf6\x97\xc8\xc5\x10\xc4\x18,qK\x92_\x8c\xb9J%u\xa9Y$VX;\xd4\x1e\xba)\xe2^\x8d7\x85\x1f\x84\x01JJf\x85\xe2&\xf0\xf4\x1fiV\xc4\xe0\t?hq`e\xcf\x06\x8e\x07\x94\x8c\x07u\x02@rf\xe4\xfa=\xc2\xdc\xba\x82^\xb3<7\x06\x92\xc4\xc4\xff\xcf\xe1\x96\xc1\xecY\xa63\xab\xa0\xb3""f\x8dx\xd3$WL\xc4\t\x1b\xda\xc0\xb5\xbd\xfa\x97\xc0\x9f\xf2v\xeb\xa6-\xa1\xf8W\x0e\x02Xn\xe999!\x02@-\xfeH\xf4\xdc\xab\x8cI4\x11\xbb\x0e\xfb<\xe49\x99\xba}\xf0`5\x9f\xd0\xcaW\x86U\x910%wT\xcb\x10X\x80\xf7\xed\xa4\x15\t\xc3%ie\x88Qd\x82\x1d\xf5\x82\x00\xb3\xf5\xcf\xc7""f\xd3\x00\xa5?'

This is my code
from Crypto.IO.PKCS8 import unwrap

file = open('file.key', 'rb')

key = unwrap(file.read(), passphrase='mypass')

print(key.decode('utf-8'))

But I keep getting
UnicodeDecodeError: 'utf-8' codec can't decode byte 0x82 in position 1: invalid start byte

How can I get the correct output in utf-8 encoding?
","","477","<python-3.4><pycrypto><pkcs#8>","0","","0","2015-08-07 17:24:03","","4","","3080244","","2015-08-07 17:24:03","2015-08-06 21:21:28",""
"41691814","Encrypting message containing public key with another public key","I have two asymmetric key pairs client_key, A and another_key, B.
I want to send a encrypt a dict with B's public key. However, the dict must contain A's public key, like the following example:
message_dict = {
  'hostname': socket.getfqdn(),
  'request': 'MY_REQUEST',
  'client_pub_key': client_key.publickey().exportKey(),
}

I did a json.dumps of the above and encrypted with B's public key. After I decrypt it, I do not get the same message. I noticed that it goes wrong only if I include client_pub_key in the dict.
I have been looking for answers online and this is possibly why it might be going wrong:

The message is too long to encrypt with B's public key
The client_pub_key has special characters which leads to a situation where JSON encoding is messed up

I tried the following:

Used pickle instead of JSON
Used binascii.hexlify to encode client_pub_key
Used base64.b64encode to encode client_pub_key
Used Crypto.Util.RFC1751.key_to_english to convert to some characters client_pub_key
Set B's key 2048 bytes and A's key 1024 bytes

All my above efforts failed. Hence I'm here looking for help.
My Question: How do I encrypt a message of the above dict format so I can send it over to the server? 
(I'm using thrift's TTornadoStreamTransport and TBinaryProtocol, if that helps)
My test code snippet:
#!/usr/bin/env python

import base64
import binascii
import json
import pickle
import socket

from Crypto.PublicKey import RSA
from Crypto.Util.RFC1751 import key_to_english

client_key = RSA.generate(1024)

message_dict = {
  'hostname': socket.getfqdn(),
  'request': 'MY_REQUEST',
  'client_pub_key': int(binascii.hexlify(client_key.publickey().exportKey()),16),
}

another_key = RSA.generate(2048)

print '\n\nDICT: {0}'.format(message_dict)
message = json.dumps(message_dict)

print '\n\nMESSAGE: {0}'.format(message)
encrypted = another_key.publickey().encrypt(message, 32)[0]

print '\n\nENCRYPTED: {0}'.format(encrypted)

decrypted = another_key.decrypt(encrypted)
print '\n\nMESSAGE: {0}'.format(decrypted)

result = json.loads(decrypted)
print '\n\nDICT: {0}'.format(result)
# result should be same message_dict

","Your problem will be, that the message which you try to encrypt should be never larger than the n-modulo!
Because:
cipher = message ** e (mod N)
If your message is numerically larger than the RSA module (in your case 2048 BITS - not Bytes), you won't get the correct ciphertext, and decription will never work. (mathematically)
In your case this happens.
You should be careful, because I guess, that after the json.dumps() the message should not larger than (in your case of the 2048bit another_key) 2048//8 = 256 bytes long - you can test it after json.dumps() via len(message).
In your abovementioned example the length of your message will be larger than 700 bytes... and 700 > 256.
Just to show the meaning of this:
first try a message with exactly 256bytes of length:
>>> import json
>>> from Crypto.PublicKey import RSA
>>> another_key = RSA.generate(2048)
>>> message_dict = {'t':'a'*248}
>>> message = json.dumps(message_dict)
>>> len(str(message))
256
>>> enc = another_key.publickey().encrypt(message, 32)[0]
>>> dec = another_key.decrypt(enc)

You will see, in this example the length of the message is exactly 256 bytes (not bits, but 256*8 = 2048 bits) long - and it works fine!
But now let us try a length of 257 bytes (more than the length of the n modulo (2048 bits = 256 bytes):
>>> import json
>>> from Crypto.PublicKey import RSA
>>> another_key = RSA.generate(2048)
>>> message_dict = {'t':'a'*249}
>>> message = json.dumps(message_dict)
>>> len(str(message))
257
>>> enc = another_key.publickey().encrypt(message, 32)[0]
>>> dec = another_key.decrypt(enc)

In this case dec != enc - because the message is numerically larger than the n modulo.
If you will mathematically understand the reason for this, take a look in the meaning of ""cipher = message ** e (mod N)"" ;)
","476","<python><encryption><pycrypto>","0","0","1","2018-05-14 17:45:46","","2","","","","","2017-01-17 08:03:32",""
"27115852","function encrypt file - input & output to same file in python","i have this script : http://pastebin.com/JypqErN5
in this moment the function working input output file :
encrypt_file(in_file, out_file, password):

need input output to same file, simile to this :
encrypt_file(in_file, password):

im try to make same name input output bat not encrypt file correctly.
the function is this :
def encrypt_file(input_file, output_file, password):
    with open(input_file, 'rb') as in_file, open(output_file, 'wb') as out_file:
        encrypt(in_file, out_file, password)

how can i make this edits ? thanks all
","You can't generally read from and write to a file at the same time.
So, you have two basic options.

First, you can read into memory, then encrypt, then write back out. Hopefully you have an encrypt function that works on strings rather than files. Since you've tagged this pycrypto, and all of its engines work on strings, this should be trivial. But if you have to use files, you can usually use BytesIO (or, for 2.x, cStringIO.StringIO), which wraps up a byte string in a file-like object, like this:
def encrypt_file(path, password):
    temp = io.BytesIO()
    with open(path, 'rb') as in_file:
        encrypt(in_file, temp, password)
    with open(path, 'wb') as out_file:
        out_file.write(temp.getvalue())

This is dead simple, but of course it could be a problem if your files are gigantic.

Or you can write to a NamedTemporaryFile, then replace the original file with the temporary:
def encrypt_file(path, password):
    dir = os.path.dirname(path)
    with open(path, 'rb') as in_file, tempfile.NamedTemporaryFile(dir=dir, delete=False) as out_file:
        encrypt(in_file, temp, password)
    os.replace(temp.name, path)

This has some major advantages over the other method—it doesn't necessarily take a ton of memory (that depends on how encrypt is written), and there's no chance of leaving behind a partially-written file if you pull the plug (os.replace is atomic—it either happens completely, or not at all). But it's a little more complicated. And, before Python 3.3, there was no replace function. On Unix, rename works just as well. On Windows… well, that's a whole mess.
","471","<python><pycrypto>","-1","1","1","2014-11-24 23:15:52","27115927","2","","","","","2014-11-24 23:04:43",""
"44123164","Skipping elif statement?","Am trying to create a simple encryption/decryption using pycryptodome but keeping getting the following error:
ValueError: Error 3 while encrypting in CBC mode

after some digging I saw that you get this error if there is not enough data to encrypt, as in there is no padding in effect. The thing is that I've added a padding function. After debugging it seems as if my code literally skips the padding part completely and causes this error. What am I doing wrong?
import os, random
from Crypto.Cipher import AES
from Crypto.Hash import SHA256

def encrypt(key, filename):
    chunksize = 64*1024
    outputfile = filename + ""(encrypted)""
    filesize = str(os.path.getsize(filename)).zfill(16)

    IV =''
    for i in range(16):
        IV += chr(random.randint(0, 0xFF))

    encryptor = AES.new(key, AES.MODE_CBC, IV.encode(""latin-1""))

    with open(filename, 'rb') as infile:
        with open(outputfile, 'wb') as outfile:
            outfile.write(filesize.encode(""latin-1""))
            outfile.write(IV.encode(""latin-1""))

            while True:
                chunk = infile.read(chunksize)
                print(len(chunk))
                if len(chunk) == 0:
                    break
                elif len(chunk) % 16 != 0:
                    chunk += ' ' * (16 - (len(chunk) % 16))

                outfile.write(encryptor.encrypt(chunk))

def decrypt(key, filename):
    chunksize = 64 *1024
    outputfile = filename[:11]
    with open(filename, 'rb') as infile:
        filesize = int(infile.read(16))
        IV = infile.read(16)
        decryptor = AES.new(key, AES.MODE_CBC, IV.encode(""latin-1""))
        with open(outputfile, 'wb') as outfile:
            while True:
                chunk = infile.read(chunksize)
                if len(chunk) == 0:
                    break
                outfile.write(decryptor.decrypt(chunk))
            outfile.truncate(filesize)

def getkey (password):
    hasher = SHA256.new(password.encode(""latin-1""))
    return hasher.digest()

def main():
    choice = input (""do you want to [E]ncrypt of [D]ecrypt?"")
    if choice == 'E':
        filename = input(""File to encrypt >"")
        password = input(""Password >"")
        encrypt(getkey(password), filename)
        print(""Encryption done!"")
    elif choice == 'D':
        filename = input(""File to Decrypt >"")
        password = input(""Password >"")
        decrypt(getkey(password), filename)
        print(""Decryption done!"")
    else:
        print(""No option selected"")

if __name__ == '__main__':
    main()

*I am using python 3.6
EDIT:
Here are the full console output when I run the code:
   C:\Users\itayg\AppData\Local\Programs\Python\Python36\python.exe ""C:\Program Files\JetBrains\PyCharm Community Edition 2017.1.2\helpers\pydev\pydevd.py"" --multiproc --qt-support --client 127.0.0.1 --port 21111 --file C:/Users/itayg/PycharmProjects/PyCrypto/encrypt.py
Connected to pydev debugger (build 171.4249.47)
pydev debugger: process 12876 is connecting

do you want to [E]ncrypt of [D]ecrypt?E
File to encrypt >grades.jpg
Password >123
65536
49373
Traceback (most recent call last):
  File ""C:\Program Files\JetBrains\PyCharm Community Edition 2017.1.2\helpers\pydev\pydevd.py"", line 1585, in <module>
    globals = debugger.run(setup['file'], None, None, is_module)
  File ""C:\Program Files\JetBrains\PyCharm Community Edition 2017.1.2\helpers\pydev\pydevd.py"", line 1015, in run
    pydev_imports.execfile(file, globals, locals)  # execute the script
  File ""C:\Program Files\JetBrains\PyCharm Community Edition 2017.1.2\helpers\pydev\_pydev_imps\_pydev_execfile.py"", line 18, in execfile
    exec(compile(contents+""\n"", file, 'exec'), glob, loc)
  File ""C:/Users/itayg/PycharmProjects/PyCrypto/encrypt.py"", line 66, in <module>
    main()
  File ""C:/Users/itayg/PycharmProjects/PyCrypto/encrypt.py"", line 55, in main
    encrypt(getkey(password), filename)
  File ""C:/Users/itayg/PycharmProjects/PyCrypto/encrypt.py"", line 29, in encrypt
    outfile.write(encryptor.encrypt(chunk))
  File ""C:\Users\itayg\AppData\Local\Programs\Python\Python36\lib\site-packages\pycryptodome-3.4.6-py3.6-win-amd64.egg\Crypto\Cipher\_mode_cbc.py"", line 167, in encrypt
    raise ValueError(""Error %d while encrypting in CBC mode"" % result)
ValueError: Error 3 while encrypting in CBC mode

","Ok, let's fix a few things that are wrong with your code. First the most obvious one - your padding would break on Python 3.5+ (and your user 'menu' would break on 2.x) because infile.read() would give you bytes array so trying to add a string formed by chunk += ' ' * (16 - (len(chunk) % 16)) would result in an error. You would need to convert your whitespace pad to bytes array first:  chunk += b' ' * (16 - (len(chunk) % 16))
But whitespace padding like this is a bad idea - when you're later decrypting your file how will you know how much, if any, padding you've added? You need to store this somewhere - and you do in the 'header' via the filesize value, telling a potential attacker how exactly big is your file and how much padding was added opening you to a padding oracle attack (which is possible with the bellow code so do not use it for passing messages without adding a proper MAC to it).
There are plenty of robust padding schemes that you can use - I personally prefer PKCS#7 which is simply padding your uneven block or adding a whole new block with n number of bytes with the value of n - that way, after decryption, you can pick the last byte from your block and know exactly how many bytes were padded so you can strip them. So, replace your encryption portion with:
def encrypt(key, filename):
    outputfile = filename + ""(encrypted)""
    chunksize = 1024 * AES.block_size  # use the cipher's defined block size as a multiplier
    IV = bytes([random.randint(0, 0xFF) for _ in range(AES.block_size)])  # bytes immediately
    encryptor = AES.new(key, AES.MODE_CBC, IV)
    with open(filename, 'rb') as infile:
        with open(outputfile, 'wb') as outfile:
            outfile.write(IV)  # write the IV
            padded = False
            while not padded:  # loop until the last block is padded
                chunk = infile.read(chunksize)
                chunk_len = len(chunk)
                # if no more data or the data is shorter than the required block size
                if chunk_len == 0 or chunk_len % AES.block_size != 0:
                    padding = AES.block_size - (chunk_len % AES.block_size)
                    chunk += bytes([padding]) * padding
                    # on Python 2.x replace with: chunk += chr(padding_len) * padding_len
                    padded = True
                outfile.write(encryptor.encrypt(chunk))

I've also changed your chunksize to match the block size you're using (multiples of AES.block_size) - it just happens that 64 is a multiple of 16 but you should pay attention to those things.
Now that we have the encryption sorted out, the decryption is all this but in reversal - decrypt all blocks, read the last byte of the last block and remove n amount of bytes from behind matching the value of the last byte:
def decrypt(key, filename):
    outputfile = filename[:-11] + ""(decrypted)""
    chunksize = 1024 * AES.block_size  # use the cipher's defined block size as a multiplier
    with open(filename, 'rb') as infile:
        IV = infile.read(AES.block_size)
        decryptor = AES.new(key, AES.MODE_CBC, IV)
        with open(outputfile, 'wb') as outfile:
            old_chunk = b''  # stores last chunk, needed for reading data with a delay
            stripped = False
            while not stripped:  # delayed loop until the last block is stripped
                chunk = decryptor.decrypt(infile.read(chunksize))  # decrypt as we read
                if len(chunk) == 0:  # no more data
                    padding = old_chunk[-1]  # pick the padding value from the last byte
                    if old_chunk[-padding:] != bytes([padding]) * padding:
                        raise ValueError(""Invalid padding..."")
                    old_chunk = old_chunk[:-padding]  # strip the padding
                    stripped = True
                outfile.write(old_chunk)  # write down the 'last' chunk
                old_chunk = chunk  # set the new chunk for checking in the next loop

","470","<python-3.x><pycrypto><cbc-mode><pycryptodome>","0","2","1","2017-05-23 13:39:24","44126075","2","","1432271","","2017-05-23 01:49:14","2017-05-22 22:40:47",""
"16836733","What is the encoding of ciphers in PyCrypto? Need to send to a JS client to decrypt","Using PyCrypto RSA
import base64
from Crypto.PublicKey import RSA

key = RSA.importKey(open('./keyBR.pub', 'r').read())
privkey = RSA.importKey(open('./privkeyBR.pem', 'r').read())

>>> message = ""This is the story""
>>> ciphertext = key.encrypt( message, None )
>>> print ciphertext
(""\xd9\x97o\x85#\xc8\xba\x14\xc9\xa4h\xacg\xc8\xc7\xb3\xbfA\xf1\x8e\x8aI\xe72IT\x03\x1a\xb7\x19\xd4\xb0\x9f\x9a\xde\x13-m\x9dw\x9d\\\x8f\x9fG\xb8(\x91\xa3\xcd\xad\xf6\xea(\x16\xd5]\xeb\x96\xc5\xe3\xecy\x9b\xf9o\x0b\\P3b\xac\xcf\xcf#\xe5\x9e\x07\xe0&\x1f8\x145!\xc8\xc9\xe0x\x7f\xa1\xbf\x03\xda\xa8z]\xa3\xff\xa7\xf0\xa7\t\xef\x80An\xd8i\xd9\xb8_1\xb7\x02\x1e\xa3\xb4z\x99c\x1d\x85\xef#b\xe8a\x18\xd3\xe09\x7f\xb6\x91!\x0b\x06\x07\xb0\xd3\xa3\x7f\xc5\x97\xa1\x90\x94\xa7M\xd8\xf2(\xe3\xe3\xc2\x1es\xba\xae\x0c\xb7\xa6\xe1\xd2\xb03\xc1\xcaU\xca@\xd1\x81\xde@\xa0\t\xf1<c\x9e\x8a\x8b\x88Lj\x16 lc\xae<\xbf\x16R\xe8\x04}\xcd\x7f\x0bZA\xd9y\x14\x03\xb7Hg\xac\xf4\xa5\xce\xe0\xa2\x8b\xdai\x03\xbb5\x99XS\xfe/\xc7I\xd3D\x81'xZ\xed\xce\t,E\xfc\x90\x1a_\xb3\xa7s\x0coA&1/\x06 "",)




privkey.decrypt(ciphertext[0])
      'This is the story'



What is the format of ciphertext[0]? I thought it was utf-8 but it fails when I try. 
I am using Debian 64bits, python 2.7, just in case. 
","It's encrypted text. It's just a stream of bytes.
If you want to send it as text, use base64 or something similar.

And one more thing. It is not directly related to your question, but it is very important. You are using RSA in a very wrong way. Your code is totally insecure.
The right thing to do is generate a fixed-length random key and use it for symmetric encryption (I'd suggest AES in CTR mode) of your data. Then you should use PKCS#1-OAEP at the beginning of your session only to establish this key.
","470","<python><python-2.7><rsa><pycrypto>","0","1","1","2013-05-30 13:47:55","16837594","0","1","","","","2013-05-30 12:50:52",""
"25520264","Error installing pycrypto in mac 10.9.6","I am trying to install 'fabric'. I tried using 'pip install fabric' and the installation is failing when it is trying to install the 'pycrypto'
I see it is fetching the 2.6.1 version. I tried installing lower versions and I am getting same error.
'sudo easy_install fabric' also throws same error. 
I also have the gmplib installed. I have the lib file in these places
/usr/lib/libgmp.dylib
/usr/local/lib/libgmp.dylib
pip install fabric
Requirement already satisfied (use --upgrade to upgrade): fabric in /Library/Python/2.7/site-packages
Requirement already satisfied (use --upgrade to upgrade): paramiko>=1.10.0 in /Library/Python/2.7/site-packages/paramiko-1.14.1-py2.7.egg (from fabric)
Downloading/unpacking pycrypto>=2.1,!=2.4 (from paramiko>=1.10.0->fabric)
  Downloading pycrypto-2.6.1.tar.gz (446kB): 446kB downloaded
  Running setup.py (path:/private/tmp/pip_build_root/pycrypto/setup.py) egg_info for package pycrypto
Requirement already satisfied (use --upgrade to upgrade): ecdsa in /Library/Python/2.7/site-packages/ecdsa-0.11-py2.7.egg (from paramiko>=1.10.0->fabric)
Installing collected packages: pycrypto
  Running setup.py install for pycrypto
    checking for gcc... gcc
    checking whether the C compiler works... yes
    checking for C compiler default output file name... a.out
    checking for suffix of executables...
    checking whether we are cross compiling... no
    checking for suffix of object files... o
    checking whether we are using the GNU C compiler... yes
    checking whether gcc accepts -g... yes
    checking for gcc option to accept ISO C89... none needed
    checking for __gmpz_init in -lgmp... yes
    checking for __gmpz_init in -lmpir... no
    checking whether mpz_powm is declared... yes
    checking whether mpz_powm_sec is declared... yes
    checking how to run the C preprocessor... gcc -E
    checking for grep that handles long lines and -e... /usr/bin/grep
    checking for egrep... /usr/bin/grep -E
    checking for ANSI C header files... yes
    checking for sys/types.h... yes
    checking for sys/stat.h... yes
    checking for stdlib.h... yes
    checking for string.h... yes
    checking for memory.h... yes
    checking for strings.h... yes
    checking for inttypes.h... yes
    checking for stdint.h... yes
    checking for unistd.h... yes
    checking for inttypes.h... (cached) yes
    checking limits.h usability... yes
    checking limits.h presence... yes
    checking for limits.h... yes
    checking stddef.h usability... yes
    checking stddef.h presence... yes
    checking for stddef.h... yes
    checking for stdint.h... (cached) yes
    checking for stdlib.h... (cached) yes
    checking for string.h... (cached) yes
    checking wchar.h usability... yes
    checking wchar.h presence... yes
    checking for wchar.h... yes
    checking for inline... inline
    checking for int16_t... yes
    checking for int32_t... yes
    checking for int64_t... yes
    checking for int8_t... yes
    checking for size_t... yes
    checking for uint16_t... yes
    checking for uint32_t... yes
    checking for uint64_t... yes
    checking for uint8_t... yes
    checking for stdlib.h... (cached) yes
    checking for GNU libc compatible malloc... yes
    checking for memmove... yes
    checking for memset... yes
    configure: creating ./config.status
    config.status: creating src/config.h
    building 'Crypto.PublicKey._fastmath' extension
    cc -fno-strict-aliasing -fno-common -dynamic -arch x86_64 -arch i386 -pipe -fno-common -fno-strict-aliasing -fwrapv -DENABLE_DTRACE -DMACOSX -Wall -Wstrict-prototypes -Wshorten-64-to-32 -fwrapv -Wall -Wstrict-prototypes -DENABLE_DTRACE -arch x86_64 -arch i386 -pipe -std=c99 -O3 -fomit-frame-pointer -Isrc/ -I/usr/include/ -I/System/Library/Frameworks/Python.framework/Versions/2.7/include/python2.7 -c src/_fastmath.c -o build/temp.macosx-10.9-intel-2.7/src/_fastmath.o
    src/_fastmath.c:83:13: warning: implicit conversion loses integer precision: 'Py_ssize_t' (aka 'long') to 'int' [-Wshorten-64-to-32]
                    size = p->ob_size;
                         ~ ~~~^~~~~~~
    src/_fastmath.c:86:10: warning: implicit conversion loses integer precision: 'Py_ssize_t' (aka 'long') to 'int' [-Wshorten-64-to-32]
                    size = -p->ob_size;
                         ~ ^~~~~~~~~~~
    src/_fastmath.c:113:49: warning: implicit conversion loses integer precision: 'unsigned long' to 'int' [-Wshorten-64-to-32]
            int size = (mpz_sizeinbase (m, 2) + SHIFT - 1) / SHIFT;
                ~~~~   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~
    src/_fastmath.c:1310:12: warning: implicit conversion loses integer precision: 'unsigned long' to 'unsigned int' [-Wshorten-64-to-32]
                    offset = mpz_get_ui (mpz_offset);
                           ~ ^~~~~~~~~~~~~~~~~~~~~~~
    /usr/local/include/gmp.h:840:20: note: expanded from macro 'mpz_get_ui'
    #define mpz_get_ui __gmpz_get_ui
                       ^
    src/_fastmath.c:1360:10: warning: implicit conversion loses integer precision: 'unsigned long' to 'int' [-Wshorten-64-to-32]
                    return return_val;
                    ~~~~~~ ^~~~~~~~~~
    src/_fastmath.c:1373:27: warning: implicit conversion loses integer precision: 'unsigned long' to 'int' [-Wshorten-64-to-32]
                    rounds = mpz_get_ui (n) - 2;
                           ~ ~~~~~~~~~~~~~~~^~~
    src/_fastmath.c:1433:9: warning: implicit conversion loses integer precision: 'unsigned long' to 'int' [-Wshorten-64-to-32]
            return return_val;
            ~~~~~~ ^~~~~~~~~~
    src/_fastmath.c:1545:20: warning: comparison of unsigned expression < 0 is always false [-Wtautological-compare]
                            else if (result < 0)
                                     ~~~~~~ ^ ~
    src/_fastmath.c:1621:20: warning: comparison of unsigned expression < 0 is always false [-Wtautological-compare]
                            else if (result < 0)
                                     ~~~~~~ ^ ~
    9 warnings generated.
    src/_fastmath.c:1545:20: warning: comparison of unsigned expression < 0 is always false [-Wtautological-compare]
                            else if (result < 0)
                                     ~~~~~~ ^ ~
    src/_fastmath.c:1621:20: warning: comparison of unsigned expression < 0 is always false [-Wtautological-compare]
                            else if (result < 0)
                                     ~~~~~~ ^ ~
    2 warnings generated.

This is the error i get when i execute 'fab'
Traceback (most recent call last):
  File ""/usr/local/bin/fab"", line 5, in 
    from pkg_resources import load_entry_point
  File ""/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/pkg_resources.py"", line 2603, in 
    working_set.require(requires)
  File ""/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/pkg_resources.py"", line 666, in require
    needed = self.resolve(parse_requirements(requirements))
  File ""/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/pkg_resources.py"", line 565, in resolve
    raise DistributionNotFound(req)  # XXX put more info here
pkg_resources.DistributionNotFound: pycrypto>=2.1,!=2.4

","Got it working after installing xcode.
pycrypto was installed by default once xcode was installed and fabric is working now.
(I should have mentioned that I am new to MAC in the question)
","466","<python><pycrypto>","0","0","1","2014-08-28 06:20:44","","0","0","","","","2014-08-27 06:25:46",""
"22693626","Is there any version of PyCrypto for android","i'm writing an encryption and brute force attack on different algorithms in python using PyCrypto.
in order to test them and get some data to see how would they perform when used in RFID applications.
the only device that i can test for now is raspberry pi. and i wanted to run my program on other devices equipped with RFID/NFC capabilities in order to have a broader range of data
im trying to run my program on a samsung galaxy nexus running android 4.4.2, the python client works fine, but the problem is the program imports from PyCrypto which is not installed 
i have installed some version of pycrypto from the link provided by Google and still with no luck
is there any way i can run my program on android ??
","","461","<android><python><pycrypto>","1","","0","2015-02-18 17:47:17","","0","","","","","2014-03-27 16:28:44",""
"36846363","Unable to decrypt using Blowfish","I am using Python3 and PyCrypto module for Blowfish Algorithm. I am able to encrypt when i give the key and plaintext via command line but i am unable to decrypt. However, the code is working correctly if I use it in Python Interpreter.
ENCRYPTION (blowfish_encr.py)
from Crypto.Cipher import Blowfish
from Crypto import Random
from struct import pack
import sys

bs = Blowfish.block_size
key = sys.argv[1].encode()
iv = Random.new().read(bs)
cipher = Blowfish.new(key, Blowfish.MODE_CBC, iv)

plaintext = sys.argv[2].encode()
plen = bs - divmod(len(plaintext),bs)[1]
padding = [plen]*plen
padding = pack('b'*plen, *padding)

msg = iv + cipher.encrypt(plaintext + padding)
print(msg)

DECRYPTION (blowfish_decr.py)
from Crypto.Cipher import Blowfish
from struct import pack
import sys

bs = Blowfish.block_size
ciphertext = sys.argv[2].encode()
key = sys.argv[1].encode()

iv = ciphertext[:bs]
ciphertext = ciphertext[bs:]
cipher = Blowfish.new(key, Blowfish.MODE_CBC, iv)
msg = cipher.decrypt(ciphertext)
last_byte = msg[-1]

msg = msg[:- (last_byte if type(last_byte) is int else ord(last_byte))]
print(repr(msg))

OUTPUT:

$python3 blowfish_encr.py key 'Test it!'

b'\xf8\x1eK)\x81?\xa2\x88\x01\x16\x8e\xdc\xe5\xb9\xd8_K\xce\x03\xe4\x88g\xf8\xa1'


$python3 blowfish_decr.py key '\xf8\x1eK)\x81?\xa2\x88\x01\x16\x8e\xdc\xe5\xb9\xd8_K\xce\x03\xe4\x88g\xf8\xa1'

  File ""blowfish_decr.py"", line 12, in <module>
   msg = cipher.decrypt(ciphertext)
     File ""/usr/lib/python3/dist-packages/Crypto/Cipher/blockalgo.py"", line 295, in decrypt
   return self._cipher.decrypt(ciphertext)
  ValueError: Input strings must be a multiple of 8 in length

How to get it decrypted ? I know the error is because when I input the encoded text as a string it converts all the \ to \\ , and when I try sys.argv[2].encode().replace('\\','\') it it doesn't work because \' is a string literal.
How to get it done using the command line argument?
","","456","<python><pycrypto>","1","","0","2016-04-25 16:52:22","","3","","5612751","","2016-04-25 16:52:22","2016-04-25 16:41:20",""
"49932055","Convert PasswordDeriveBytes functionality to Python","I'm trying to re-create PowerShell's PasswordDeriveBytes method in python using pycryptodome's KDF module.
The main thing I can't get passed right now is getting the correct DerivedKey result in Python that I get from PowerShell.
PARAMETERS:
password = '1234567890'
salt = '0987654321'
length = 16
iterations = 2

SAMPLE POWERSHELL CODE:
$AsciiEncoder = New-Object System.Text.ASCIIEncoding;
$DerivedPass = New-Object System.Security.Cryptography.PasswordDeriveBytes('1234567890', $AsciiEncoder.GetBytes('0987654321'), ""SHA1"", 2);
[Byte[]] $KeyBytes = $DerivedPass.GetBytes(16);
-join($KeyBytes | ForEach { $_.ToString(""X2"")});

RESULT:
C937511EBDBE12C7A0FCC8D6CB42BEDC 

*NOTE: The PowerShell code above is amended from https://github.com/PowerShellMafia/PowerSploit/blob/master/ScriptModification/Out-EncryptedScript.ps1. I am trying to re-implement the functionality in the Python code below.
PYTHON CODE:
from Crypto.Protocol import KDF
from Crypto.Hash import SHA1

def password_derive_key(password, salt, length, count):
    return KDF.PBKDF2(password, salt, length, count)

def main():
    derivedKey = password_derive_key('1234567890', '0987654321', 16, 2)
    print derivedKey.encode('hex')

if __name__ == ""__main__"":
    main()

RESULT:
5a3f103f5dc4558f8dca5d5b145ed0b4

The only thing that I can think of us that the "".GetBytes"" method of PasswordDeriveBytes is generating a different result than what pycryptodome's KDF module.
Any help would be greatly appreciated.
","The arguments need to be the same, in the question code the iterations are different:
POWERSHELL iterations: 2
System.Security.Cryptography.PasswordDeriveBytes('1234567890', $AsciiEncoder.GetBytes('0987654321'), ""SHA1"", 2);
PYTHON iterations: 1000
derivedKey = password_derive_key('1234567890', '0987654321', 16, 1000)
Make sure the correct encoding are used for each.
Note: By using functions as arguments makes debugging more difficult, example: $AsciiEncoder.GetBytes('0987654321').
","452","<python><powershell><pycrypto><password-hash><kdf>","-1","0","1","2018-04-21 18:41:22","","0","2","1937972","","2018-04-21 18:41:22","2018-04-20 00:17:15",""
"8524857","MySQL Not Properly Storing Ciphertext Produced from the PyCrypto Library","I'm building an application in web.py, but am having some trouble when it comes to storing encrypted data in MySQL.
PyCrypto creates cypher text that looks like:'\x06\x7f\x81\xa0\xf4d\x00H\xef\xd0\x18[c\x18Z\xf8', which when printed, shows up as "" ôdHïÐ[cZø""
However, MySQL is storing it as: ???d H??[cZ?
I'm storing it in the following manner:
query_string = ""INSERT INTO %s (%s) VALUES (\""%s\"")"" % (table, column, value) 

I tried using ""SET character_set_connection=utf8"" after connecting to the database, but it didn't yield any change in the results. 
I'm obviously missing something very important. Any thoughts?
","I have figured out a solution. I'm not sure how elegant it is, but it was the best I could figure out. 
ENCODING:
1) import binascii
2) ciphertext = cipher.encrypt(plaintext)
3) asciitext = binascii.b2a_uu(ciphertext)
4) webpy_workaround = asciitext.replace('$', 'DOLLARSIGN') //if there are dollar signs in the text, webpy will try to use anything afterward, and will complain at you.
5) Store webpy_workaround into sql.
DECODING:
1) Retrieve value from SQL
2) asciitext = sql_value.replace('DOLLARSIGN', '$')
3) ciphertext = binascii.a2b_uu(asciitext)
4) plaintext = cipher.decrypt(ciphertext)
","450","<mysql><unicode><web.py><pycrypto>","1","0","2","2011-12-17 16:39:02","8546215","1","","677283","","2011-12-15 18:34:33","2011-12-15 18:28:41",""
"8524857","MySQL Not Properly Storing Ciphertext Produced from the PyCrypto Library","I'm building an application in web.py, but am having some trouble when it comes to storing encrypted data in MySQL.
PyCrypto creates cypher text that looks like:'\x06\x7f\x81\xa0\xf4d\x00H\xef\xd0\x18[c\x18Z\xf8', which when printed, shows up as "" ôdHïÐ[cZø""
However, MySQL is storing it as: ???d H??[cZ?
I'm storing it in the following manner:
query_string = ""INSERT INTO %s (%s) VALUES (\""%s\"")"" % (table, column, value) 

I tried using ""SET character_set_connection=utf8"" after connecting to the database, but it didn't yield any change in the results. 
I'm obviously missing something very important. Any thoughts?
","MySQL is trying to store your byte string in a character column. Because the connection character set is UTF-8 but the byte string doesn't represent a valid UTF-8 sequence, it gets mangled.
To get raw bytes into the database properly you need to:

make the column a BINARY type (or generally character type with a binary collation), and
use parameterised queries to get the data into the database instead of interpolating them into the query string where they might mix with non-binary (Unicode) content.

You should use parameterised queries anyway because the string interpolation you're using now, with no escaping, is vulnerable to SQL injection. In web.py that might look like:
query_string= 'INSERT INTO %s (%s) VALUES ($value)' % (table, column)
db.query(query_string, vars= {'value': value})

(assuming that the table and column values are known-good.)
Doing it like this also means you don't have to worry about the dollar sign.
The other approach is to use a normal character string, encoding away the non-ASCII bytes. You're doing this with uucode in your current workaround, but base64 would be a more common alternative that's easier to get to in Python (ciphertext.encode('base64')). Hex encoding (.encode('hex')) is most common for the case of a hash.
","450","<mysql><unicode><web.py><pycrypto>","1","3","2","2011-12-17 16:39:02","8546215","1","","677283","","2011-12-15 18:34:33","2011-12-15 18:28:41",""
"24224653","Send login credentials to another server","I have two servers running django.  I'll call one server my ""logging"" server and another my ""client"" server.  The client server wants to log a message with the logging server by passing over a username, password, and message over the internet.  With my current implementation I'm hitting an error when trying to decrypt the encrypted message, username, and password that was sent over the wire.  It looks like I should be trying to decrypt a ""byte string"" according to the pycrypto documentation, but I can't seem to create a byte string correctly since I haven't been able to get around this problem.  Also, it feels like my implementation is taking me down a rabbit hole of security vulnerabilities and codec confusion.  Is there a package that I should look at which already implements this type of functionality?  If so what would that implementation look like?
client:
from Crypto.Hash import MD5
from Crypto.PublicKey import RSA
from base64 import b64decode
import urllib2
import urllib

#I realize recreating the hash everytime is slow.  I just included it here for simplicity.
logger_public_signature_message = ""I am a client :)""
logger_public_signature_hash = MD5.new(logger_public_signature_message).digest()

client_private_key = #private key
logger_public_key = #public key
client_private = RSA.importKey(client_private_key)
client_public = client_private.publickey()
logger_public = RSA.importKey(logger_public_key)

message = ""my message""
username = ""user""
password = ""password""

encrypted_message = logger_public.encrypt(message, ""ignored_param"")
encrypted_username = logger_public.encrypt(username, ""ignored_param"")
encrypted_password = logger_public.encrypt(password, ""ignored_param"")
signature = client_private.sign(logger_public_signature_hash, '')

params = { ""message"": encrypted_message, ""username"": encrypted_username, ""password"": encrypted_password, ""signature"": signature }
url_encoded_params = urllib.urlencode(params)
url = 'http://localhost:8000/url/to/logger/'
req = urllib2.Request(url, url_encoded_params)

logger:
from Crypto.Hash import MD5
from Crypto.PublicKey import RSA
from base64 import b64decode

def log(request):
    #I realize recreating the hash everytime is slow.  I just included it here for simplicity.
    logger_public_signature_message = ""I am a client :)""
    logger_public_signature_hash = MD5.new(logger_public_signature_message).digest()

    client_public_key = #client public key
    logger_private_key = #logger private key
    client_public = RSA.importKey(client_public_key)
    logger_private = RSA.importKey(logger_private_key)

    p = request.POST

    encrypted_message = urllib2.unquote(p[""message""])
    encrypted_username = urllib2.unquote(p[""username""])
    encrypted_password = urllib2.unquote(p[""password""])
    signature = urllib2.unquote(p[""signature""])


    #I'm hitting exceptions when trying to decrypt the encrypted messages.
    #The exceptions are: ""ValueError: Message too large""  I think the issue is that
    #I'm trying to decrypt a base64 string where I should be trying to decrypt a byte
    #string from reading the documentation.  But I haven't been able I guess to correctly
    #create a byte string because I can't get it to work.
    decrypted_message = logger_private.decrypt(encrypted_message.encode(""base64""))
    decrypted_username = logger_private.decrypt(encrypted_username.encode(""base64""))
    decrypted_password = logger_private.decrypt(encrypted_password.encode(""base64""))
    verified = client_public.verify(logger_public_signature_hash, signature)

","I think you are putting a lot of effort into stuff, that doesn't need to be handled by Django.
Here is what I would usually do:

Use HTTPS, as transport encryption layer
Use HTTP Basic Auth. Basic auth is implemented in urllib2 as well as requests.

But there is an even better solution: Django REST framework
It provides you will a full blown REST API including different authentication solutions.
If you need any help, setting up one of these options, let me know and I'll add an example.
","448","<django><encryption><rsa><pycrypto><bytestring>","3","4","3","2014-06-21 00:13:39","24265478","1","","471321","","2014-06-14 22:15:12","2014-06-14 21:51:22",""
"24224653","Send login credentials to another server","I have two servers running django.  I'll call one server my ""logging"" server and another my ""client"" server.  The client server wants to log a message with the logging server by passing over a username, password, and message over the internet.  With my current implementation I'm hitting an error when trying to decrypt the encrypted message, username, and password that was sent over the wire.  It looks like I should be trying to decrypt a ""byte string"" according to the pycrypto documentation, but I can't seem to create a byte string correctly since I haven't been able to get around this problem.  Also, it feels like my implementation is taking me down a rabbit hole of security vulnerabilities and codec confusion.  Is there a package that I should look at which already implements this type of functionality?  If so what would that implementation look like?
client:
from Crypto.Hash import MD5
from Crypto.PublicKey import RSA
from base64 import b64decode
import urllib2
import urllib

#I realize recreating the hash everytime is slow.  I just included it here for simplicity.
logger_public_signature_message = ""I am a client :)""
logger_public_signature_hash = MD5.new(logger_public_signature_message).digest()

client_private_key = #private key
logger_public_key = #public key
client_private = RSA.importKey(client_private_key)
client_public = client_private.publickey()
logger_public = RSA.importKey(logger_public_key)

message = ""my message""
username = ""user""
password = ""password""

encrypted_message = logger_public.encrypt(message, ""ignored_param"")
encrypted_username = logger_public.encrypt(username, ""ignored_param"")
encrypted_password = logger_public.encrypt(password, ""ignored_param"")
signature = client_private.sign(logger_public_signature_hash, '')

params = { ""message"": encrypted_message, ""username"": encrypted_username, ""password"": encrypted_password, ""signature"": signature }
url_encoded_params = urllib.urlencode(params)
url = 'http://localhost:8000/url/to/logger/'
req = urllib2.Request(url, url_encoded_params)

logger:
from Crypto.Hash import MD5
from Crypto.PublicKey import RSA
from base64 import b64decode

def log(request):
    #I realize recreating the hash everytime is slow.  I just included it here for simplicity.
    logger_public_signature_message = ""I am a client :)""
    logger_public_signature_hash = MD5.new(logger_public_signature_message).digest()

    client_public_key = #client public key
    logger_private_key = #logger private key
    client_public = RSA.importKey(client_public_key)
    logger_private = RSA.importKey(logger_private_key)

    p = request.POST

    encrypted_message = urllib2.unquote(p[""message""])
    encrypted_username = urllib2.unquote(p[""username""])
    encrypted_password = urllib2.unquote(p[""password""])
    signature = urllib2.unquote(p[""signature""])


    #I'm hitting exceptions when trying to decrypt the encrypted messages.
    #The exceptions are: ""ValueError: Message too large""  I think the issue is that
    #I'm trying to decrypt a base64 string where I should be trying to decrypt a byte
    #string from reading the documentation.  But I haven't been able I guess to correctly
    #create a byte string because I can't get it to work.
    decrypted_message = logger_private.decrypt(encrypted_message.encode(""base64""))
    decrypted_username = logger_private.decrypt(encrypted_username.encode(""base64""))
    decrypted_password = logger_private.decrypt(encrypted_password.encode(""base64""))
    verified = client_public.verify(logger_public_signature_hash, signature)

","May it be that you would use sentry for logging? Of course if it isn't task for training.
I look at the sentry since it been django application, and now it surely is excellent  production-ready solution.
We're using it in banking-sphere software development.
","448","<django><encryption><rsa><pycrypto><bytestring>","3","1","3","2014-06-21 00:13:39","24265478","1","","471321","","2014-06-14 22:15:12","2014-06-14 21:51:22",""
"24224653","Send login credentials to another server","I have two servers running django.  I'll call one server my ""logging"" server and another my ""client"" server.  The client server wants to log a message with the logging server by passing over a username, password, and message over the internet.  With my current implementation I'm hitting an error when trying to decrypt the encrypted message, username, and password that was sent over the wire.  It looks like I should be trying to decrypt a ""byte string"" according to the pycrypto documentation, but I can't seem to create a byte string correctly since I haven't been able to get around this problem.  Also, it feels like my implementation is taking me down a rabbit hole of security vulnerabilities and codec confusion.  Is there a package that I should look at which already implements this type of functionality?  If so what would that implementation look like?
client:
from Crypto.Hash import MD5
from Crypto.PublicKey import RSA
from base64 import b64decode
import urllib2
import urllib

#I realize recreating the hash everytime is slow.  I just included it here for simplicity.
logger_public_signature_message = ""I am a client :)""
logger_public_signature_hash = MD5.new(logger_public_signature_message).digest()

client_private_key = #private key
logger_public_key = #public key
client_private = RSA.importKey(client_private_key)
client_public = client_private.publickey()
logger_public = RSA.importKey(logger_public_key)

message = ""my message""
username = ""user""
password = ""password""

encrypted_message = logger_public.encrypt(message, ""ignored_param"")
encrypted_username = logger_public.encrypt(username, ""ignored_param"")
encrypted_password = logger_public.encrypt(password, ""ignored_param"")
signature = client_private.sign(logger_public_signature_hash, '')

params = { ""message"": encrypted_message, ""username"": encrypted_username, ""password"": encrypted_password, ""signature"": signature }
url_encoded_params = urllib.urlencode(params)
url = 'http://localhost:8000/url/to/logger/'
req = urllib2.Request(url, url_encoded_params)

logger:
from Crypto.Hash import MD5
from Crypto.PublicKey import RSA
from base64 import b64decode

def log(request):
    #I realize recreating the hash everytime is slow.  I just included it here for simplicity.
    logger_public_signature_message = ""I am a client :)""
    logger_public_signature_hash = MD5.new(logger_public_signature_message).digest()

    client_public_key = #client public key
    logger_private_key = #logger private key
    client_public = RSA.importKey(client_public_key)
    logger_private = RSA.importKey(logger_private_key)

    p = request.POST

    encrypted_message = urllib2.unquote(p[""message""])
    encrypted_username = urllib2.unquote(p[""username""])
    encrypted_password = urllib2.unquote(p[""password""])
    signature = urllib2.unquote(p[""signature""])


    #I'm hitting exceptions when trying to decrypt the encrypted messages.
    #The exceptions are: ""ValueError: Message too large""  I think the issue is that
    #I'm trying to decrypt a base64 string where I should be trying to decrypt a byte
    #string from reading the documentation.  But I haven't been able I guess to correctly
    #create a byte string because I can't get it to work.
    decrypted_message = logger_private.decrypt(encrypted_message.encode(""base64""))
    decrypted_username = logger_private.decrypt(encrypted_username.encode(""base64""))
    decrypted_password = logger_private.decrypt(encrypted_password.encode(""base64""))
    verified = client_public.verify(logger_public_signature_hash, signature)

","You are very close to decrypting the values on the server. The result of the encryption on the client is a tuple. When you urllib2.unquote the items on the server, you then recreate tuples from them.
For example:
>>> c = public.encrypt('Hello', ""ignored"")
>>> c
('3\xae0\x1f\xd7\xe4b\xd4\xf1\xf4\x88!Be\xff!\x1e\xda\x82\x10\x9bRy\x0c\xa0v\xed\x84\xf9\xe35\xc6QG\xcf\xb7\x1b\xea\x9fe\t\x9b\x8d\xd6\xf3\x8cw\xde\x17\xb5\xf7\x9a+\x84i%@\x8a\xdf\xf4\xdd\xc8wY',)

which in your code you pack into params like this:
>>> params = { ""message"" : c }
>>> params
{'message': ('3\xae0\x1f\xd7\xe4b\xd4\xf1\xf4\x88!Be\xff!\x1e\xda\x82\x10\x9bRy\x0c\xa0v\xed\x84\xf9\xe35\xc6QG\xcf\xb7\x1b\xea\x9fe\t\x9b\x8d\xd6\xf3\x8cw\xde\x17\xb5\xf7\x9a+\x84i%@\x8a\xdf\xf4\xdd\xc8wY',)}
>>> urllib.urlencode(params)
'message=%28%273%5Cxae0%5Cx1f%5Cxd7%5Cxe4b%5Cxd4%5Cxf1%5Cxf4%5Cx88%21Be%5Cxff%21%5Cx1e%5Cxda%5Cx82%5Cx10%5Cx9bRy%5Cx0c%5Cxa0v%5Cxed%5Cx84%5Cxf9%5Cxe35%5Cxc6QG%5Cxcf%5Cxb7%5Cx1b%5Cxea%5Cx9fe%5Ct%5Cx9b%5Cx8d%5Cxd6%5Cxf3%5Cx8cw%5Cxde%5Cx17%5Cxb5%5Cxf7%5Cx9a%2B%5Cx84i%25%40%5Cx8a%5Cxdf%5Cxf4%5Cxdd%5Cxc8wY%27%2C%29'

I would guess that urllib2.unquote(p[""message""]) returns this (but I did not try this):
""('3\\xae0\\x1f\\xd7\\xe4b\\xd4\\xf1\\xf4\\x88!Be\\xff!\\x1e\\xda\\x82\\x10\\x9bRy\\x0c\\xa0v\\xed\\x84\\xf9\\xe35\\xc6QG\\xcf\\xb7\\x1b\\xea\\x9fe\\t\\x9b\\x8d\\xd6\\xf3\\x8cw\\xde\\x17\\xb5\\xf7\\x9a+\\x84i%@\\x8a\\xdf\\xf4\\xdd\\xc8wY',)""

then you can recreate the tuple at the server like this (m is the unquoted message):
>>> from ast import literal_eval
>>> literal_eval(m)
('3\xae0\x1f\xd7\xe4b\xd4\xf1\xf4\x88!Be\xff!\x1e\xda\x82\x10\x9bRy\x0c\xa0v\xed\x84\xf9\xe35\xc6QG\xcf\xb7\x1b\xea\x9fe\t\x9b\x8d\xd6\xf3\x8cw\xde\x17\xb5\xf7\x9a+\x84i%@\x8a\xdf\xf4\xdd\xc8wY',)

once you have the tuple back, you can decrypt it:
>>> private.decrypt(literal_eval(m))
'Hello'

It would be better to find a vetted and standard mechanism to do this rather than roll your own. For example, in your scheme, I could capture different messages between the client and server, and then mix and match messages and username/password pairs, making it appear that the messages came from different users.
However, with just this minor tweak (recreating the tuples from the ""unquoted"" strings) your code should decrypt just fine.
","448","<django><encryption><rsa><pycrypto><bytestring>","3","1","3","2014-06-21 00:13:39","24265478","1","","471321","","2014-06-14 22:15:12","2014-06-14 21:51:22",""
"7395874","How can I specify an AES key in Python?","I'm working on converting a Java program into Python and part of its core networking uses AES encryption to handle packets going up and down the line. Java's AES is initialized like so:
byte[] key = { 0x13, 0x00, 0x00, 0x00 };
sKeySpec = new SecretKeySpec(key, ""AES"");

I want to do the same in Python, and will use PyCrypto, but I'm not sure how to initialize the above in it as it only allows string-based ""secret keys.""
","Why Don't you Try using Jython , because You can directly import the .class file without having to re-write it .
","448","<java><python><aes><pycrypto>","0","1","2","2011-09-13 15:25:13","7395983","1","3","600500","","2011-09-13 15:25:13","2011-09-13 01:33:44",""
"7395874","How can I specify an AES key in Python?","I'm working on converting a Java program into Python and part of its core networking uses AES encryption to handle packets going up and down the line. Java's AES is initialized like so:
byte[] key = { 0x13, 0x00, 0x00, 0x00 };
sKeySpec = new SecretKeySpec(key, ""AES"");

I want to do the same in Python, and will use PyCrypto, but I'm not sure how to initialize the above in it as it only allows string-based ""secret keys.""
","Use a string then
key = '\x13\x00\x00\x00'

","448","<java><python><aes><pycrypto>","0","2","2","2011-09-13 15:25:13","7395983","1","3","600500","","2011-09-13 15:25:13","2011-09-13 01:33:44",""
"52356956","Python Implement AES in CBC encryption mode","I'm trying to complete this challenge online which asks to implement ourselves the AES CBC mode without using any library function that will do the job for me (ofc xD). I'm using python3.7 and PyCrypto for the AES modules (I'm a python beginner btw)
I'm at a point where I feel like I found the solution but it's not the case, I don't see what I'm doing wrong.
I'm entering this text: `

In september 2017 In september 2017 In september 2017 In september
  2017

`
with this key:

YELLOW SUBMARINE

and with an 16 bytes long IV full of 0 (\x00)
but my ouput differs from the different websites I can find online or when using the AES CBC mode from the PyCrypto module
here's the small program that I made so far in order to generate my aes cbc encryption with comments:
#!/usr/bin/env python
from sys import argv
from Crypto.Cipher import AES
import codecs


def pad(plaintext):
    padding_len = 16 - (len(plaintext) % 16)
    print(padding_len)
    if padding_len == 16:
         return plaintext
padding = bytes([padding_len] * padding_len)
return plaintext + padding


def xor_for_char(input_bytes, key_input):
    index = 0
    output_bytes = b''
    for byte in input_bytes:
        if index >= len(key_input):
            index = 0
        output_bytes += bytes([byte ^ key_input[index]])
        index += 1
    return output_bytes


class AESCBCTool:
    def __init__(self):
        self.best_occurence = 0
        self.best_line = 0

def encrypt_CBC(self, enc, key):
    enc = pad(enc) # here I pad the text (PCKS#7 way)
    nb_blocks = (int)(len(enc) / 16) #calculate the number of blocks I've to iter through
    IV = bytearray(16)
    cipher = AES.new(key, AES.MODE_ECB)
    for i in range(nb_blocks):
            enc2 = xor_for_char(enc[i * 16:(i + 1) * 16], IV) #xor a block with IV
            IV = cipher.encrypt(enc2) # set the the IV based on the encryption of the xored text
            print(codecs.decode(codecs.encode(IV, 'base64')).replace(""\n"", """"), end='') #print the encrypted text in base 64


def main(filepath):
    f = open(filepath, ""r"")
    if f.mode == 'r':
        content = f.readlines()
        tool = AESCBCTool()
        for line_content in content:
            tool.encrypt_CBC(bytes(line_content, ""utf-8""), bytes(""YELLOW SUBMARINE"", ""utf-8""))
    f.close()


if __name__== ""__main__"":
    try:
        main(argv[1]) #this is the path to the file that contains the text
    except Exception as e:
        print(e)
        exit(84)
    exit(0)

here's my output:

0TKm+DjGff6fB/l0Z+M5TQ==8do1FSVvjbN2+MhAULmjHA==w5vZtuiL2SrtSLi2CkMBzQ==nvKLm7C7QDmSxk2PqV3NHQ==2+DSu4BqXskn8/znFCUCcQ==

meanwhile the output should be:

IS4p7kpY9g0a68AUzpKzazbtbP0h3nYZvhptuxNajBS3KIUHGI3fu79e4fw+E34miyn5dMBle8Tqn2DvHsromy7AupMy0zbtlqPwU5uHoyY=

Do you have any advice for me please?
","","447","<python><encryption><aes><pycrypto><cbc-mode>","2","","0","2018-09-16 18:14:48","","2","","8466102","","2018-09-16 18:14:48","2018-09-16 18:01:08",""
"9328474","Import RSA public key saved with pycrypto 2.0.1 into newer versions","I have a pickled RSA public key generated using PyCrypto 2.0.1.  I'm looking to upgrade my application to use PyCrypto 2.5.
The pickle key data begins with
iCrypto.PublicKey.RSA\nRSAobj_c
Unfortunately, RSAobj_c is removed in PyCrypto >=2.1, so depickling fails.
How should I go about making the key compatible with the new PyCrypto?
","","439","<python><pycrypto>","1","","0","2012-02-17 12:47:31","","1","2","","","","2012-02-17 12:47:31",""
"34956921","python Crypto AES cipher decode type","I'm having a little problem using AES_CBC cipher decode function. When I assume (via a file open(x,'wb')) its return is bytes, python complains about getting a string in the write() function. When I assume (open(x,'w')) its return is string, python complains about getting bytes in the write() function. Can anyone please explain the issue here? (Python 3.5.1 for reference on Win7)
def decrypt(in_file, out_file, key,iv):
bs = AES.block_size
cipher = AES.new(key,AES.MODE_CBC,iv)
next_chunk = ''
finished = False
while not finished:
    try:
        chunk, next_chunk = next_chunk, cipher.decrypt(in_file.read(bs))
    except ValueError:
        finished = True
    out_file.write(chunk)

with open(in_filename, 'rb') as in_file, open(out_filename, 'wb') as out_file:
    decrypt(in_file, out_file, key, iv)

Results in
TypeError: a bytes-like object is required, not 'str'

Changing the file opening statement to
with open(in_filename, 'rb') as in_file, open(out_filename, 'w') as out_file:
decrypt(in_file, out_file, key, iv)

Results in
TypeError: write() argument must be str, not bytes

The best I could do is cast the chunk to string with str(chunk),
but then my output file is a bunch of byte strings like
b"", 'Shutdown', 'R""b""eboot', 'SetPowe""b""rSave'} (string ""

Any thoughts? What am I doing wrong here? FYI the file was encrypted on a Fedora PC using CryptoPP. When I decode it in CryptoPP everything works out ok, but this is my first time working with pycrypto.
","","437","<python><python-3.x><pycrypto>","1","","0","2016-01-22 22:22:51","","3","","","","","2016-01-22 22:22:51",""
"33793114","PyCrypto yielding ""no commands supplied"" error during build","I am a hardcore newb when it comes to computers, but I am doing my best to learn Python. Namely, I'm taking an online Crypto course, and I'm trying to do an assignment which requires PyCrypto. I'm using the 32-bit version of Python 3.5. 
I downloaded and extracted the PyCrypto file (2.6.1 if I'm not mistaken) to a folder, and then I double-clicked ""setup.py"" in the ""dist"" file. Once I executed the file, it transfers to another code called ""core.py"" and shows the following error message:
Traceback (most recent call last):
  File ""C:\Users\Neil\Python\dist\pycrypto-2.6\setup.py"", line 456, in <module>
    core.setup(**kw)
  File ""C:\Users\Neil\AppData\Local\Programs\Python\Python35-32\Lib\distutils\core.py"", line 136, in setup
    raise SystemExit(gen_usage(dist.script_name) + ""\nerror: %s"" % msg)
builtins.SystemExit: usage: _sandbox.py [global_opts] cmd1 [cmd1_opts] [cmd2 [cmd2_opts] ...]
   or: _sandbox.py --help [cmd1 cmd2 ...]
   or: _sandbox.py --help-commands
   or: _sandbox.py cmd --help
error: no commands supplied
I have no idea what is going on, and I'm hoping someone can explain very simply what I should do to get this to work properly. I'm sorry for being that one annoying person! 
","","434","<python-3.x><core><setup.py><pycrypto>","0","","0","2015-11-19 00:21:58","","6","","","","","2015-11-19 00:21:58",""
"40623105","Why node.js not remove the padding on the decryption of message which has been encrypted by python code","I'm trying to encrypt some content in Python and decrypt it in a nodejs application and the opposite.
import base64
import hashlib
from Crypto import Random
from Crypto.Cipher import AES

    def Encrypt(self, PlainText, SecurePassword):
        pw_encode = SecurePassword.encode('utf-8')
        text_encode= PlainText.encode('utf-8')

        key = hashlib.md5(pw_encode).digest()
        iv = Random.new().read(16)

        cipher = AES.new(key, AES.MODE_CBC, iv)
        pad_text = pkcs7.encode(text_encode)
        msg = iv + cipher.encrypt(pad_text)

        EncodeMsg = base64.b64encode(msg)
        return EncodeMsg

    def Decrypt(self, Encrypted, SecurePassword):
        decodbase64 = base64.b64decode(Encrypted.decode(""utf-8""))
        pw_encode = SecurePassword.decode('utf-8')

        iv = decodbase64[:AES.block_size]
        key = hashlib.md5(pw_encode).digest()

        cipher = AES.new(key, AES.MODE_CBC, iv)
        msg = cipher.decrypt(decodbase64[AES.block_size:])
        pad_text = pkcs7.decode(msg)

        decryptedString = pad_text.decode('utf-8')
        return decryptedString;

Here is the pcks7 Padding
import StringIO
import binascii


def decode(bytestring, k=16):
    nl = len(bytestring)
    val = int(binascii.hexlify(bytestring[-1]), 16)
    if val > k:
        raise ValueError('Input is not padded or padding is corrupt')

    l = nl - val
    return bytestring


def encode(bytestring, k=16):
    l = len(bytestring)
    output = StringIO.StringIO()
    val = k - (l % k)
    for _ in xrange(val):
        output.write('%02x' % val)
    return bytestring + binascii.unhexlify(output.getvalue())

Here is the Node.js code
const crypto = require('crypto');

var AESalgoProv = 'aes-128-cbc';
const IV= Buffer.from([0x15, 0x14, 0x13, 0x12, 0x11,
                0x10, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00]);

    exports.AesEncryption = function(data, key) {
        var encodeKey = crypto.createHash('md5').update(new Buffer(key), 'utf-8').digest();
        var cipher = crypto.createCipheriv(AESalgoProv, encodeKey, IV);
        var encrypted = cipher.update(data, 'utf-8', 'base64');
        encrypted += cipher.final('base64');
        return encrypted;
    };
    exports.AesDecryption = function(encryptedata, key) {
        var encodeKey = crypto.createHash('md5').update(new Buffer(key), 'utf-8').digest();
        var decipher = crypto.createDecipheriv(AESalgoProv, encodeKey, IV);
        var decoded  = decipher.update(encryptedata,'base64', 'utf8');

        decoded += decipher.final('utf8');
        return decoded;
    };

Here is the Node.js Output when decrypt
�����!����̪�T�Example
As you can see above i took the decrypted  Message ""Example"" which i encrypted. Also i got this weird symbols   it looks like padding which node.js failed to decode. Why this Happened and how can i fix it?i don't think i am doing something wrong i cant understand
Here is the Python Output when decode
File""C:\Users\user\...\pkcs7.py"", line 7, in decode
    val = int(binascii.hexlify(text[-1]), 16)
IndexError: string index out of range

","","429","<javascript><python><encryption><pycrypto><cryptojs>","2","","0","2016-11-20 15:35:22","","0","2","3163824","","2016-11-20 15:35:22","2016-11-16 02:29:50",""
"42624041","Error when trying to install paramiko and cryptography in Kivy Buildozer","I am using a Kivy as a Virtual Machine (in MAC OS). I am trying to install the python packages pycrypto and paramiko. Starting with pycrypto, I tried

pip install pycrypto
Requirement already satisfied: pycrypto in /usr/local/lib/python2.7/dist-packages

but when I try to import it in python
>>> import pycrypto
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
ImportError: No module named pycrypto

In paramico, I get the following:
kivy@kivy-VirtualBox:~$ pip install paramiko
Collecting paramiko
/usr/local/lib/python2.7/dist-packages/pip/_vendor/requests/packages/urllib3/util/ssl_.py:318: SNIMissingWarning: An HTTPS request has been made, but the SNI (Subject Name Indication) extension to TLS is not available on this platform. This may cause the server to present an incorrect TLS certificate, which can cause validation failures. You can upgrade to a newer version of Python to solve this. For more information, see https://urllib3.readthedocs.io/en/latest/security.html#snimissingwarning.
  SNIMissingWarning
/usr/local/lib/python2.7/dist-packages/pip/_vendor/requests/packages/urllib3/util/ssl_.py:122: InsecurePlatformWarning: A true SSLContext object is not available. This prevents urllib3 from configuring SSL appropriately and may cause certain SSL connections to fail. You can upgrade to a newer version of Python to solve this. For more information, see https://urllib3.readthedocs.io/en/latest/security.html#insecureplatformwarning.
  InsecurePlatformWarning
  Using cached paramiko-2.1.2-py2.py3-none-any.whl
Requirement already satisfied: pyasn1>=0.1.7 in /usr/local/lib/python2.7/dist-packages (from paramiko)
Collecting cryptography>=1.1 (from paramiko)
  Using cached cryptography-1.7.2.tar.gz
    Complete output from command python setup.py egg_info:
    Traceback (most recent call last):
      File ""<string>"", line 1, in <module>
      File ""/tmp/pip-build-ZboIFP/cryptography/setup.py"", line 334, in <module>
        **keywords_with_side_effects(sys.argv)
      File ""/usr/lib/python2.7/distutils/core.py"", line 111, in setup
        _setup_distribution = dist = klass(attrs)
      File ""/usr/local/lib/python2.7/dist-packages/setuptools/dist.py"", line 320, in __init__
        _Distribution.__init__(self, attrs)
      File ""/usr/lib/python2.7/distutils/dist.py"", line 287, in __init__
        self.finalize_options()
      File ""/usr/local/lib/python2.7/dist-packages/setuptools/dist.py"", line 386, in finalize_options
        ep.require(installer=self.fetch_build_egg)
      File ""/usr/local/lib/python2.7/dist-packages/pkg_resources/__init__.py"", line 2324, in require
        items = working_set.resolve(reqs, env, installer, extras=self.extras)
      File ""/usr/local/lib/python2.7/dist-packages/pkg_resources/__init__.py"", line 859, in resolve
        raise VersionConflict(dist, req).with_context(dependent_req)
    pkg_resources.VersionConflict: (six 1.5.2 (/usr/lib/python2.7/dist-packages), Requirement.parse('six>=1.6.0'))

    ----------------------------------------
Command ""python setup.py egg_info"" failed with error code 1 in /tmp/pip-build-ZboIFP/cryptography/

Any suggestions?
","From the command line try:
python 2.7 import pycrypto

","427","<python><kivy><paramiko><pycrypto>","0","1","1","2017-03-06 11:28:55","42624459","3","","","","","2017-03-06 11:08:31",""
"22213681","RSA public key format for CommonCrypto (iOS)","I'm trying to import a public key from my python server into an iOS keychain. I receive the key from my server as an NSData object. 
I'm using the addPeerPublicKey:keyBits: function from Apple's Crypto example to convert the NSData into a SecKeyRef, which is how I need to reference it. The function is failing to store the key in the keychain and I'm not sure why. (SecItemAdd() returns 0=success but getKeyRefWithPersistentKeyRef: returns null). 
I'm using PyCrypto on my server to generate the RSA keys and exporting them to my client in DER format. Is there anything else I need to do to convert the format to make it storable in the Apple keychain?
","","420","<python><ios><rsa><pycrypto><commoncrypto>","1","","0","2014-03-06 02:28:30","","0","","","","","2014-03-06 02:28:30",""
"28058173","Get a Public Key from Python String (SHA)","Let's say that I have a python string:
string_full = """"""
              -----BEGIN CERTIFICATE----- 
              GIBBERISH................
              ......................
              ........................
              -----END CERTIFICATE-----
              """"""

After removing the first line, newlines, and last line I got something like this:
 string = """""" GIBBERISH .................................. """"""

What I'm trying to do is to get the Public Key from that certificate.
I was having a look at this post, but it seems that the string must be formated as string_full but the real problem is that I'm reading that line from a user uploaded file (django), but since this file is structured by the Mexican Goverment, it would be really easy for me to calculate the public key from the string as shown in string.
a
Got any ideas? I was having a look at M2Cryptolib which implements a get_pukeybut it will only work on requests and I have no way to get this request from an external server. 
Any help would be appreciated. 
","I'm not sure why you are trying to get that string since to my knowledge most ssl functions will take the whole cert to verify. 
Have you seen this post? It looks like what you want.
Hope that helps.
EDIT:
I think this example will help you understand what's every
 argument and in what format should it be. 
","415","<python><sha><pycrypto>","0","1","1","2015-01-21 12:12:52","28058285","0","","-1","","2017-05-23 11:43:30","2015-01-21 01:32:49",""
"24204802","Pycrypto - Encrypt on Linux / decrypt on Windows","I've got a encryption/decryption class that I'm using cross platform. I'm using the same class on both server and client. I encrypt a file on a Linux server, then decrypt on either a Linux or Windows client. I have no problems when decrypting on Linux, but when I transfer the file to Windows and try to decrypt, I get the following exception:
ValueError: Input strings must be a multiple of 16 in length
My first thought is that it is caused by the different filesystems, and any characters that are used to create the padding. Here is my class code:
class FileSec:
    def __init__(self):

        # File chunk size
        self.chunk_size = 64*1024

    # Encrypt file with OpenSSL
    def encrypt(self, infile, outfile, key):
        if not infile or not os.path.isfile(infile):
            return False
        if not outfile or os.path.isfile(outfile):
            return False
        if not key:
            return False

        # Encrypt the file
        iv        = ''.join(chr(random.randint(0, 0xFF)) for i in range(16))
        encryptor = AES.new(key, AES.MODE_CBC, iv)
        filesize  = os.path.getsize(infile)
        with open(infile, 'rb') as ifh:
            with open(outfile, 'wb') as ofh:
                ofh.write(struct.pack('<Q', filesize))
                ofh.write(iv)
                while True:
                    chunk = ifh.read(self.chunk_size)
                    if len(chunk) == 0:
                        break
                    elif len(chunk) % 16 != 0:
                        chunk += ' ' * (16 - len(chunk) % 16)
                    ofh.write(encryptor.encrypt(chunk))
        return True

    # Decrypt file with OpenSSL
    def decrypt(self, infile, outfile, key):
        if not infile or not os.path.isfile(infile):
            return False
        if not outfile or os.path.isfile(outfile):
            return False
        if not key:
            return False

        # Decrypt the file
        with open(infile, 'rb') as ifh:
            origsize  = struct.unpack('<Q', ifh.read(struct.calcsize('Q')))[0]
            iv        = ifh.read(16)
            decryptor = AES.new(key, AES.MODE_CBC, iv)
            with open(outfile, 'wb') as ofh:
                while True:
                    chunk = ifh.read(self.chunk_size)
                    if len(chunk) == 0:
                        break
                    ofh.write(decryptor.decrypt(chunk))
                ofh.truncate(origsize)
        return True

http://pastebin.com/Dvf6nUxH
I'm using code adapted from here: http://eli.thegreenplace.net/2010/06/25/aes-encryption-of-files-in-python-with-pycrypto/
Anyone have any suggestions on how I can modify this class to work cross-platform?
","myfile.read(x) reads any amount up to x bytes; it is not guaranteed to return all x.
Note that it will always return at least one until the file is empty, so it is possible to wrap this in a loop, and then join the returned strings.
","413","<python><linux><windows><encryption><pycrypto>","0","0","2","2014-06-15 07:14:08","","1","","","","","2014-06-13 12:00:20",""
"24204802","Pycrypto - Encrypt on Linux / decrypt on Windows","I've got a encryption/decryption class that I'm using cross platform. I'm using the same class on both server and client. I encrypt a file on a Linux server, then decrypt on either a Linux or Windows client. I have no problems when decrypting on Linux, but when I transfer the file to Windows and try to decrypt, I get the following exception:
ValueError: Input strings must be a multiple of 16 in length
My first thought is that it is caused by the different filesystems, and any characters that are used to create the padding. Here is my class code:
class FileSec:
    def __init__(self):

        # File chunk size
        self.chunk_size = 64*1024

    # Encrypt file with OpenSSL
    def encrypt(self, infile, outfile, key):
        if not infile or not os.path.isfile(infile):
            return False
        if not outfile or os.path.isfile(outfile):
            return False
        if not key:
            return False

        # Encrypt the file
        iv        = ''.join(chr(random.randint(0, 0xFF)) for i in range(16))
        encryptor = AES.new(key, AES.MODE_CBC, iv)
        filesize  = os.path.getsize(infile)
        with open(infile, 'rb') as ifh:
            with open(outfile, 'wb') as ofh:
                ofh.write(struct.pack('<Q', filesize))
                ofh.write(iv)
                while True:
                    chunk = ifh.read(self.chunk_size)
                    if len(chunk) == 0:
                        break
                    elif len(chunk) % 16 != 0:
                        chunk += ' ' * (16 - len(chunk) % 16)
                    ofh.write(encryptor.encrypt(chunk))
        return True

    # Decrypt file with OpenSSL
    def decrypt(self, infile, outfile, key):
        if not infile or not os.path.isfile(infile):
            return False
        if not outfile or os.path.isfile(outfile):
            return False
        if not key:
            return False

        # Decrypt the file
        with open(infile, 'rb') as ifh:
            origsize  = struct.unpack('<Q', ifh.read(struct.calcsize('Q')))[0]
            iv        = ifh.read(16)
            decryptor = AES.new(key, AES.MODE_CBC, iv)
            with open(outfile, 'wb') as ofh:
                while True:
                    chunk = ifh.read(self.chunk_size)
                    if len(chunk) == 0:
                        break
                    ofh.write(decryptor.decrypt(chunk))
                ofh.truncate(origsize)
        return True

http://pastebin.com/Dvf6nUxH
I'm using code adapted from here: http://eli.thegreenplace.net/2010/06/25/aes-encryption-of-files-in-python-with-pycrypto/
Anyone have any suggestions on how I can modify this class to work cross-platform?
","Closing this one. Turns out the problem has nothing to do with the encryption/decryption function, but with an extra byte being tacked on to the encrypted file when I transfer it to the Windows machine, causing the exception.
","413","<python><linux><windows><encryption><pycrypto>","0","0","2","2014-06-15 07:14:08","","1","","","","","2014-06-13 12:00:20",""
"36873095","Invalid syntax error in pycrypto while importing paramiko","I am getting the following error when I am trying to import paramiko. I am using python3.5 and paramiko 2.6
Traceback (most recent call last):
  File ""paramiko_test.py"", line 1, in <module>
    import paramiko
  File ""C:\Python35\lib\site-packages\paramiko\__init__.py"", line 30, in <module>
    from paramiko.transport import SecurityOptions, Transport
  File ""C:\Python35\lib\site-packages\paramiko\transport.py"", line 50, in <module>
    from paramiko.dsskey import DSSKey
  File ""C:\Python35\lib\site-packages\paramiko\dsskey.py"", line 26, in <module>
    from Crypto.PublicKey import DSA
  File ""C:\Python35\lib\site-packages\pycrypto-2.6.1-py3.5-win32.egg\Crypto\PublicKey\DSA.py"", line 88, in <module>
    from Crypto.PublicKey import _DSA, _slowmath, pubkey
  File ""C:\Python35\lib\site-packages\pycrypto-2.6.1-py3.5-win32.egg\Crypto\PublicKey\_DSA.py"", line 53
    if pow(2,159L) < q < pow(2,160L):
                ^
SyntaxError: invalid syntax

Has anyone resolved this?
","","410","<python><paramiko><python-3.5><pycrypto>","0","","0","2016-10-17 02:09:08","","2","","","","","2016-04-26 18:34:25",""
"43169738","How to install pycrypto on qpython?","I have been using pycrypto on my windows machine running python 2.7. 
When I tried to install pycrypto on qpython2.7 via pip I got Runtime error (""autoconf error""). For reference I am running qpython on stock android nougat with no root access.
Is there any way to install pycrypto for qpython 
Not a problem ended up using pyaes instead of pycrypto.
","Qpython didn't support pycrypto now, we will consider to support it as soon after we have delivered our brand new version which we were developing.
","409","<android><pycrypto><qpython>","1","0","1","2017-05-11 20:27:07","","0","3","5308938","","2017-05-11 20:27:07","2017-04-02 14:52:23",""
"47173762","PyCrypto: function returned by the decrypt() method","I want to use RSA in my python web, and I used the pycrypto. But I have some questions in it.
this is my code:
from Crypto import Random
from Crypto.Cipher import PKCS1_v1_5
from Crypto.PublicKey import RSA
import base64

random_generator = Random.new().read


def decrypt_rsa(secret):
    with open('/home/ubuntu/project/all/all_test/all_python/util/private_rsa.pem') as file:
        private_key = RSA.importKey(file.read())
        cipher = PKCS1_v1_5.new(private_key)
        text = cipher.decrypt(base64.b64decode(secret), random_generator)
        print(str(text))
        return text.decode('utf-8')

But when I run a application, I break down with an error like:
Traceback (most recent call last):
File ""/home/ubuntu/project/all/venv/lib/python3.5/site-packages/flask/app.py"", line1982, in wsgi_app
response = self.full_dispatch_request()
File ""/home/ubuntu/project/all/venv/lib/python3.5/site-packages/flask/app.py"", line1614, in full_dispatch_request
rv = self.handle_user_exception(e)
File ""/home/ubuntu/project/all/venv/lib/python3.5/site-packages/flask/app.py"", line1517, in handle_user_exception
reraise(exc_type, exc_value, tb)
File ""/home/ubuntu/project/all/venv/lib/python3.5/sitepackages/flask/app.py"", line1612, in full_dispatch_request
rv = self.dispatch_request()
File ""/home/ubuntu/project/all/venv/lib/python3.5/site-packages/flask/app.py"", line 1598, in dispatch_request
return self.view_functions[rule.endpoint](**req.view_args)
File ""/home/ubuntu/project/all/all_test/all_python/v3/v3_main.py"", line 192, in v3_set_article_love
if check_secret(secret):
File ""/home/ubuntu/project/all/all_test/all_python/v3/v3_main.py"", line 18, in check_secret
t = int(secret_util.decrypt_rsa(secret))
File ""/home/ubuntu/project/all/all_test/all_python/util/secret_util.py"", line14, in decrypt_rsa
return text.decode('utf-8')
AttributeError: 'function' object has no attribute 'decode'

my server os is ubuntu 16.04, with python3.*, and the secret is encode by base64, just like FRw3kfdpHKD4Ms2O3hmaEoD4Gqp5onwF/OUkkp5zSVDsYnJ9Bej8f6kRewoZ/WBZuJIKy8qAUmhi
6qLwK063quA4JKE96Ne6bACIcmkj+boWLoE5TsE3zus4Y8vdwhzsT3Hi9qBjjvmE7IV/LILNQizH
ELp8fdbpGBwwRNlncAQ=
I would thank you very much for your help.
","Short answer (TL;DR):
The decrypt() method is returning your random_generator function.
Details
If you type
help(PKCS1_v1_5.PKCS115_Cipher.decrypt)

you can read this from the official documentation:  
decrypt(self, ct, sentinel) method of 
Crypto.Cipher.PKCS1_v1_5.PKCS115_Cipher instance
Decrypt a PKCS#1 v1.5 ciphertext.

[...]    

:Parameters:
[...]
 sentinel : any type
        The object to return to indicate that an error was detected  
        during decryption.

As you can read from above, if there is an error during decryption then the sentinel object is returned instead of a byte string, then in your code the decrypt() method would return the random_generator function.   
This is why your text variable is a function and you cannot treat it as a byte string.
Further note
I think there is no need to pass a random generator to decrypt() as a sentinel object, because it is just a sentinel object used to detect errors. Please see the PyCrypto documentation to learn more about this library (but also read this and this and consider using PyCryptodome instead).
","394","<python><pycrypto><pkcs#1>","0","0","1","2018-05-05 12:54:16","","0","","6854564","","2018-05-05 12:52:02","2017-11-08 07:20:47",""
"5981117","PyExc_ValueError and Firefox extension","I'm developing a firefox addon which is depended on Python (which means that the user must install PyXpcomExt on his firefox). On the other hand I used PyCrypto lib (based on python) for encryption purposes.
So when firefox is loaded I have registered path to this library. However when the extension is run I get the following error:  
File ""/home/.../.mozilla/firefox/qvpgc3wq.default/extensions/..../pylib/mycryptoclass.py"", line 4, in 
    from Crypto.Cipher import AES
ImportError: /home/.../.mozilla/firefox/qvpgc3wq.default/extensions/.../platform/Linux_x86-gcc3/pylib/Crypto/Cipher/AES.so: undefined symbol: PyExc_ValueError
I also tried:
import Crypto
from Crypto import Cipher
No error is thrown!
Any Ideas?
Thanks
","AES.so has not been linked against the Python dynamic library. It's finding other symbols it needs in the process's symbol table, but it can't find that one and doesn't know where it is.
","392","<python><firefox-addon><xpcom><pycrypto>","0","0","1","2011-05-13 09:13:37","","2","","","","","2011-05-12 16:17:45",""
"50319454","Decrypting AES CBC data from PyCrypto with Powershell","I am working on a project where I will be encrypting a string of data using the AES module from PyCrypto and then decrypting it using Powershell.
I've written a simple encryption function to do what I need here:
import base64

from Crypto import Random
from Crypto.Cipher import AES

key = ""SuperSecret"" #Insecure and just for testing
plaintext = ""Secret message please don't look""

BS = 16
pad = lambda s: s + (BS - len(s) % BS) * chr(BS - len(s) % BS)

def padKey(s): #Pad key to 32 bytes for AES256
    return (s * (int(32/len(s))+1))[:32]

class AESCipher:

    def __init__(self, key):
        self.key = key

    def encrypt(self, raw):
        raw = pad(raw)
        iv = Random.new().read( AES.block_size )
        cipher = AES.new( self.key, AES.MODE_CBC, iv )
        return base64.b64encode( iv + cipher.encrypt( raw ) )

paddedKey = padKey(key)
cipher = AESCipher(paddedKey)

encrypted = str(cipher.encrypt(plaintext))
encrypted = encrypted[2:-1]

print(""Key:"", paddedKey)
print(""Plaintext:"",plaintext)
print(""Encrypted and B64:"",encrypted)

I am having some issues with decrypting and decoding the output with Powershell and could use some help. I was able to find a simple decryption script that I've been working with online, but the output is all garbage:
function Create-AesManagedObject($key, $IV) {
    $aesManaged = New-Object ""System.Security.Cryptography.AesManaged""
    $aesManaged.Mode = [System.Security.Cryptography.CipherMode]::CBC
    $aesManaged.Padding = [System.Security.Cryptography.PaddingMode]::Zeros
    $aesManaged.BlockSize = 128
    $aesManaged.KeySize = 256
    if ($IV) {
        if ($IV.getType().Name -eq ""String"") {
            $aesManaged.IV = [System.Convert]::FromBase64String($IV)
        }
        else {
            $aesManaged.IV = $IV
        }
    }
    if ($key) {
        if ($key.getType().Name -eq ""String"") {
            $aesManaged.Key = [System.Convert]::FromBase64String($key)
        }
        else {
            $aesManaged.Key = $key
        }
    }
    $aesManaged
}

function Decrypt-String($key, $encryptedStringWithIV) {
    $bytes = [System.Convert]::FromBase64String($encryptedStringWithIV)
    $IV = $bytes[0..15]
    $aesManaged = Create-AesManagedObject $key $IV
    $decryptor = $aesManaged.CreateDecryptor();
    $unencryptedData = $decryptor.TransformFinalBlock($bytes, 16, $bytes.Length - 16);
    $aesManaged.Dispose()
    [System.Text.Encoding]::UTF8.GetString($unencryptedData).Trim([char]0)
}

Sample output:
PS C:\> Decrypt-String 'SuperSecretSuperSecretSuperSecre' $encryptedString
���H�'G zM۞� �i�ZtCI���H~N�GG��A�Pc��aF��`)��GS�N�2{�[.

Related: Using PowerShell to decrypt a Python encrypted String
","In the Python code, the following is entirely unnecessary and should be removed:
encrypted = str(cipher.encrypt(plaintext))
encrypted = encrypted[2:-1]

In your PowerShell code, you need to use PKCS7 instead of Zeros for the padding.
In the PowerShell code you don't implement the key padding with zeros anywhere. This is required (I'm not sure how you get this to work at all without it).
","390","<python><powershell><encryption><aes><pycrypto>","0","0","2","2018-05-14 23:20:52","50340315","4","1","9784946","","2018-05-13 18:48:57","2018-05-13 18:41:34",""
"50319454","Decrypting AES CBC data from PyCrypto with Powershell","I am working on a project where I will be encrypting a string of data using the AES module from PyCrypto and then decrypting it using Powershell.
I've written a simple encryption function to do what I need here:
import base64

from Crypto import Random
from Crypto.Cipher import AES

key = ""SuperSecret"" #Insecure and just for testing
plaintext = ""Secret message please don't look""

BS = 16
pad = lambda s: s + (BS - len(s) % BS) * chr(BS - len(s) % BS)

def padKey(s): #Pad key to 32 bytes for AES256
    return (s * (int(32/len(s))+1))[:32]

class AESCipher:

    def __init__(self, key):
        self.key = key

    def encrypt(self, raw):
        raw = pad(raw)
        iv = Random.new().read( AES.block_size )
        cipher = AES.new( self.key, AES.MODE_CBC, iv )
        return base64.b64encode( iv + cipher.encrypt( raw ) )

paddedKey = padKey(key)
cipher = AESCipher(paddedKey)

encrypted = str(cipher.encrypt(plaintext))
encrypted = encrypted[2:-1]

print(""Key:"", paddedKey)
print(""Plaintext:"",plaintext)
print(""Encrypted and B64:"",encrypted)

I am having some issues with decrypting and decoding the output with Powershell and could use some help. I was able to find a simple decryption script that I've been working with online, but the output is all garbage:
function Create-AesManagedObject($key, $IV) {
    $aesManaged = New-Object ""System.Security.Cryptography.AesManaged""
    $aesManaged.Mode = [System.Security.Cryptography.CipherMode]::CBC
    $aesManaged.Padding = [System.Security.Cryptography.PaddingMode]::Zeros
    $aesManaged.BlockSize = 128
    $aesManaged.KeySize = 256
    if ($IV) {
        if ($IV.getType().Name -eq ""String"") {
            $aesManaged.IV = [System.Convert]::FromBase64String($IV)
        }
        else {
            $aesManaged.IV = $IV
        }
    }
    if ($key) {
        if ($key.getType().Name -eq ""String"") {
            $aesManaged.Key = [System.Convert]::FromBase64String($key)
        }
        else {
            $aesManaged.Key = $key
        }
    }
    $aesManaged
}

function Decrypt-String($key, $encryptedStringWithIV) {
    $bytes = [System.Convert]::FromBase64String($encryptedStringWithIV)
    $IV = $bytes[0..15]
    $aesManaged = Create-AesManagedObject $key $IV
    $decryptor = $aesManaged.CreateDecryptor();
    $unencryptedData = $decryptor.TransformFinalBlock($bytes, 16, $bytes.Length - 16);
    $aesManaged.Dispose()
    [System.Text.Encoding]::UTF8.GetString($unencryptedData).Trim([char]0)
}

Sample output:
PS C:\> Decrypt-String 'SuperSecretSuperSecretSuperSecre' $encryptedString
���H�'G zM۞� �i�ZtCI���H~N�GG��A�Pc��aF��`)��GS�N�2{�[.

Related: Using PowerShell to decrypt a Python encrypted String
","Closing this out with the solution (Thanks @Maarten and @t.m.adam). The issue was twofold. First, the key needs to be passed to Powershell in Base64 format, and the padding needed to me moved to PKCS7. The final code is as follows:
Python Encryption:
import base64

from Crypto import Random
from Crypto.Cipher import AES

key = ""SuperSecret"" #Insecure and just for testing
plaintext = ""Secret message please don't look""

BS = 16
pad = lambda s: s + (BS - len(s) % BS) * chr(BS - len(s) % BS)

def padKey(s): #Pad key to 32 bytes for AES256
    return (s * (int(32/len(s))+1))[:32]

class AESCipher:

    def __init__(self, key):
        self.key = key

    def encrypt(self, raw):
        raw = pad(raw)
        iv = Random.new().read( AES.block_size )
        cipher = AES.new( self.key, AES.MODE_CBC, iv )
        return base64.b64encode( iv + cipher.encrypt( raw ) )

paddedKey = padKey(key)
cipher = AESCipher(paddedKey)

encrypted = str(cipher.encrypt(plaintext))
encrypted = encrypted[2:-1]

print(""Key:"", base64.b64encode(paddedKey))
print(""Plaintext:"",plaintext)
print(""Encrypted and B64:"",encrypted)

Powershell Decryption:
function Create-AesManagedObject($key, $IV) {
    $aesManaged = New-Object ""System.Security.Cryptography.AesManaged""
    $aesManaged.Mode = [System.Security.Cryptography.CipherMode]::CBC
    $aesManaged.Padding = [System.Security.Cryptography.PaddingMode]::PKCS7
    $aesManaged.BlockSize = 128
    $aesManaged.KeySize = 256
    if ($IV) {
        if ($IV.getType().Name -eq ""String"") {
            $aesManaged.IV = [System.Convert]::FromBase64String($IV)
        }
        else {
            $aesManaged.IV = $IV
        }
    }
    if ($key) {
        if ($key.getType().Name -eq ""String"") {
            $aesManaged.Key = [System.Convert]::FromBase64String($key)
        }
        else {
            $aesManaged.Key = $key
        }
    }
    $aesManaged
}

function Decrypt-String($key, $encryptedStringWithIV) {
    $bytes = [System.Convert]::FromBase64String($encryptedStringWithIV)
    $IV = $bytes[0..15]
    $aesManaged = Create-AesManagedObject $key $IV
    $decryptor = $aesManaged.CreateDecryptor();
    $unencryptedData = $decryptor.TransformFinalBlock($bytes, 16, $bytes.Length - 16);
    $aesManaged.Dispose()
    [System.Text.Encoding]::UTF8.GetString($unencryptedData).Trim([char]0)
}

Usage:
PS C:> $key = 'U3VwZXJTZWNyZXRTdXBlclNlY3JldFN1cGVyU2VjcmU='
PS C:> $encryptedString = 'Opgtr8XEcvkcYT5UzsFjZR4Wt5DI++fU4Gm0dTM/22m+xyObjP162rFphIS/xkS4I7ErJfshwI7T4X1MNz
wMog=='
PS C:> Decrypt-String $key $encryptedString
Secret message please don't look

","390","<python><powershell><encryption><aes><pycrypto>","0","2","2","2018-05-14 23:20:52","50340315","4","1","9784946","","2018-05-13 18:48:57","2018-05-13 18:41:34",""
"34837925","Online tool and Python Script have two different AES cipher text result?","I wrote the following program to encrypt my data using AES algorithm in CBC mode:
import hmac
import base64
import hashlib
from Crypto.Cipher import AES   

AES_KEY = ""\x00\x11\x22\x33\x44\x55\x66\x77\x88\x99\xAA\xBB\xCC\xDD\xEE\xFF""
IV = ""\x00\x11\x22\x33\x44\x55\x66\x77\x88\x99\xAA\xBB\xCC\xDD\xEE\xFF""

print ""KEY: "",
for i in AES_KEY:
    print str(i).encode(""hex""),
print

print ""IV:  "",
for i in IV:
    print str(i).encode(""hex""),
print

# Encryption
def aes_encrypt(plain, key, iv):
    AES.key_size =16
    encryption_suite = AES.new(key, AES.MODE_CBC, iv)
    cipher_text = encryption_suite.encrypt(plain)
    return cipher_text

# Decryption
def aes_decrypt(cipher, key, iv):
    decryption_suite = AES.new(key, AES.MODE_CBC, iv)
    plain_text = decryption_suite.decrypt(cipher)
    return plain_text

result = aes_encrypt(""testtesttesttest"",AES_KEY,IV)

print ""OUT: "",
for l in result:
    print str(l).encode(""hex""),

But when I check its output with this online tool, they are not equal:
My program output:
Python 2.7.10 (default, May 23 2015, 09:44:00) [MSC v.1500 64 bit (AMD64)] on win32
Type ""copyright"", ""credits"" or ""license()"" for more information.
>>> ================================ RESTART ================================
>>> 
KEY:  00 11 22 33 44 55 66 77 88 99 aa bb cc dd ee ff
IV:   00 11 22 33 44 55 66 77 88 99 aa bb cc dd ee ff
OUT:  90 e6 d6 31 61 66 eb dd ad 48 53 e8 a0 ca c6 48
>>> 

The Online tool:

Why?
","Your code uses key 00112233445566778899AABBCCDDEEFF but you use another key on the web namly 00112233445566778899AABBCCEEDDFF 
where DD and EE are switched. The same goes for the Initialization vector.
","389","<python><python-2.7><encryption><aes><pycrypto>","2","2","1","2016-01-17 12:45:30","34838462","0","","","","","2016-01-17 11:43:51",""
"32201658","Install pycrypto on Mac OS X without gcc","I'm trying to install pycrypto because it's one of the dependencies for ansible. I know that gcc can be installed on Mac by installing Xcode Command Line Tools but I don't want to install Xcode because its installation can't be automated. (I need to do it on many client computers)
I've read this but it addresses linux system and not OS X.
Is there any way to install pycrypto or any similar package without gcc?
","you could  build pycrpyto, install locally (i.e. to $HOME) and then distribute this to the other machines
","387","<python><macos><gcc><installation><pycrypto>","0","1","1","2015-08-25 10:48:17","32202007","1","","-1","","2017-05-23 10:27:03","2015-08-25 10:32:28",""
"29514344","How to import PyCrypto inside App Engine development server (OS X)?","My app.yaml include this lines:
libraries:
- name: pycrypto
  version: ""2.6""

I have the correct version of PyCrypto:
$ python
>>> import Crypto
>>> Crypto.__version__
'2.6'

But when I try evaluate import Crypto in GAE Development SDK interactive console, I get this:
Traceback (most recent call last):
  File ""/Applications/GoogleAppEngineLauncher.app/Contents/Resources/GoogleAppEngine-default.bundle/Contents/Resources/google_appengine/google/appengine/tools/devappserver2/python/request_handler.py"", line 225, in handle_interactive_request
    exec(compiled_code, self._command_globals)
  File ""<string>"", line 12, in <module>
ImportError: No module named Crypto

","Because pycrypto includes native compiled code, you need to install that yourself for your Python installation. Assuming you have pip installed:
pip install pycrypto

","387","<python><google-app-engine><pycrypto>","0","1","1","2015-04-08 18:02:00","","0","","","","","2015-04-08 12:15:36",""
"31996117","Migrating RSA signature generation from m2crypto to pycrypto","I am hoping you can help me out with my migration to PyCrypto from M2Crypto. 
The content to encrypt is XML. 
I am loading the pk as follows:
M2Crypto:
sha = hashlib.sha1(xml)
rsa_private_key = M2Crypto.RSA.load_key_string(PRIVATE_KEY)
signature = rsa_private_key.private_encrypt(sha.digest(), M2Crypto.RSA.pkcs1_padding)

PyCrypto:
sha = hashlib.sha1(xml.encode('utf-8'))
rsa_private_key = RSA.importKey(PRIVATE_KEY)
rsa_private_key = PKCS1_OAEP.new(rsa_private_key)
signature = rsa_private_key.encrypt(sha.digest())

It is at this point that the signature value is different for both M2Crypto and Pycrypto. Can anyone please let me know what am I doing different in PyCrypto?
","It's different because:

the padding is randomized and 
you're not actually using the same padding scheme.

pkcs1_padding usually means PKCS#1 v1.5 padding whereas OAEP is PKCS#1 v2 padding. You would need to use PKCS1_v1_5 in pycrypto.
Since the padding is randomized, you cannot compare the ciphertext of both. You need to encrypt in one and decrypt in the other to see if the same hash is produced.
sha = hashlib.sha1(xml.encode('utf-8'))
rsa_public_key = RSA.importKey(PUBLIC_KEY)
rsa_public_key = PKCS1_v1_5.new(rsa_public_key)
recovered_hash = rsa_public_key.decrypt(signature_from_m2)
print(""success?"", sha.digest() == recovered_hash)

Note that there are dedicated classes in PyCrypto for generating signatures and verifying them. M2Crypto has additional functions on the RSA object to create (sign) and verify signatures.
","387","<python><digital-signature><public-key-encryption><pycrypto><m2crypto>","0","1","1","2015-08-13 20:06:47","","0","","1816580","","2015-08-13 20:06:47","2015-08-13 18:45:25",""
"18223523","installing pycrypto on mountain lion with xcode 5","I can't install pycrypto on mountain lion. I have command line tools installed (done from xcode 5)
When I type in pip install pycrypto:
.../.../ build/pycrypto':
configure: error: C compiler cannot create executables

I've tried to symlink gcc as well as mess around with the xctoolchain, nothing is working here. Any ideas?
","The solution was to reset my active Xcode to Xcode4.
You were right, XCode5 has all kinds of problems and isn't ready for primetime.
To switch back to your 'regular' XCode (Xcode 4.6 current release)
  sudo xcode-select -switch /Applications/Xcode.app

credit to: http://stackoverflow.com/questions/11961032/xcrun-error-could-not-stat-active-xcode-path-volumes-xcode-xcode45-dp1-app-c
Now pycrypto installs perfectly.
","386","<python><django><pycrypto>","0","0","1","2013-08-14 06:12:13","","1","","","","","2013-08-14 04:58:16",""
"24291126","As3Crypto (flex) with PyCrypto - how to make AES work?","I have a client in Flex and a server in Python and i'm trying to make AES work between them but for some reason it doesn't work.
My server code:
import sys
from Crypto.Cipher import AES
from binascii import hexlify, unhexlify

BS = 16
pad = lambda s: s + (BS - len(s) % BS) * chr(BS - len(s) % BS)
unpad = lambda s : s[0:-ord(s[-1])]

def encrypt(str):
    cipher = AES.new(unhexlify('some 64 byte key here'), AES.MODE_CBC, '16 byte iv')
    hex_str = hexlify(cipher.encrypt(pad(str)))
    return hex_str

My client code:
static public function decrypt(txt:String) : String
{
    var k:String = ""some 64 byte key here"";
    var pad:IPad = new PKCS5();
    var mode:ICipher = Crypto.getCipher(""aes-cbc"", Hex.toArray(k), pad);
    pad.setBlockSize(mode.getBlockSize());

    var ivmode:IVMode = mode as IVMode;
    ivmode.IV = Hex.toArray(Hex.fromString(""16 byte iv""));

    var data:ByteArray = Hex.toArray(Hex.toString(txt));
    mode.decrypt(data);

    return Hex.fromArray(data);
}

It seems like a simple case but I'm doing something wrong. What is it?
BTW: I get RangeError: Error #2006: The supplied index is out of bounds from mode.decrypt(data);
","I finally managed to get it to work.
The client code should look like this:
static public function decrypt(txt:String) : String
{
    var k:String = ""some 64 byte key here"";
    var pad:IPad = new PKCS5();
    var mode:ICipher = Crypto.getCipher(""aes-cbc"", Hex.toArray(k), pad);
    pad.setBlockSize(mode.getBlockSize());

    var ivmode:IVMode = mode as IVMode;
    ivmode.IV = Hex.toArray(Hex.fromString(""16 byte iv""));

    var data:ByteArray = Hex.toArray(txt);
    mode.decrypt(data);

    return Hex.toString(Hex.fromArray(data));
}

","385","<python><apache-flex><encryption><pycrypto><as3crypto>","0","1","1","2014-06-25 14:32:44","24411498","2","","187610","","2014-06-19 18:06:01","2014-06-18 16:53:37",""
"42836707","Input string length limit in pycrypto","I am trying to encrypt my data using pycrypto. I have written below code for that.
from Crypto.Cipher import AES
obj = AES.new('1234567891011123', AES.MODE_CBC, 'This is an IV456')
message = ""Jeannine""
ciphertext1 = obj.encrypt(message)
print(ciphertext1)
message1 = ""Jeannine""
ciphertext2 = obj.encrypt(message1)
print(ciphertext2)
obj2 = AES.new('1234567891011123', AES.MODE_CBC, 'This is an IV456')
dciphertext1 = obj2.decrypt(ciphertext1)
print(dciphertext1)
dciphertext2=obj2.decrypt(ciphertext2)
print(dciphertext2)

but i am getting below error
Traceback (most recent call last):
  File ""cipher.py"", line 4, in <module>
    ciphertext1 = obj.encrypt(message)
ValueError: Input strings must be a multiple of 16 in length

How can i keep control in my input string ? Input string can be of any length.
","You're using AES in CBC mode, it requires the string in length that's multiple of 16, so you might need to add some padding.
Follow the steps described in this topic (this doesn't look like a duplicate to me, but the answer is useful for you).
","372","<python><pycrypto>","1","1","1","2017-03-16 14:27:18","42836884","3","","","","","2017-03-16 14:20:28",""
"35671880","TypeError: 'str' does not support the buffer interface when using PyCrypto.AES","I am trying to do some experimenting in encrypting and decrypting using PyCrypto.AES when I try to decrypt it gives me TypeError: 'str' does not support the buffer interface
I found some solutions where I have to encode or use string, but I couldn't figure how to use it. 
AESModule.py
from Crypto.Cipher import AES
#base64 is used for encoding. dont confuse encoding with encryption#
#encryption is used for disguising data
#encoding is used for putting data in a specific format
import base64
# os is for urandom, which is an accepted producer of randomness that
# is suitable for cryptology.
import os

def encryption(privateInfo,secret,BLOCK_SIZE):
    #32 bytes = 256 bits
    #16 = 128 bits
    # the block size for cipher obj, can be 16 24 or 32. 16 matches 128 bit.
    # the character used for padding
    # used to ensure that your value is always a multiple of BLOCK_SIZE
    PADDING = '{'
    # function to pad the functions. Lambda
    # is used for abstraction of functions.
    # basically, its a function, and you define it, followed by the param
    # followed by a colon,
    # ex = lambda x: x+5
    pad = lambda s: s + (BLOCK_SIZE - len(s) % BLOCK_SIZE) * PADDING
    # encrypt with AES, encode with base64
    EncodeAES = lambda c, s: base64.b64encode(c.encrypt(pad(s)))
    # generate a randomized secret key with urandom
    #secret = os.urandom(BLOCK_SIZE)
    print('Encryption key:',secret)
    # creates the cipher obj using the key
    cipher = AES.new(secret)
    # encodes you private info!
    encoded = EncodeAES(cipher, privateInfo)
    print('Encrypted string:', encoded)
    return(encoded)

def decryption(encryptedString,secret):
    PADDING = '{'
    DecodeAES = lambda c, e: c.decrypt(base64.b64decode(e)).rstrip(PADDING)
    #Key is FROM the printout of 'secret' in encryption
    #below is the encryption.
    encryption = encryptedString
    cipher = AES.new(secret)
    decoded = DecodeAES(cipher, encryption)
    print(decoded)

test.py
import AESModule
import base64
import os

BLOCK_SIZE = 16
key = os.urandom(BLOCK_SIZE)
c = AESRun2.encryption('password',key,BLOCK_SIZE)
AESRun2.decryption(c,key)

","Strings (str) are text. Encryption does not deal in text, it deals in bytes (bytes).
In practice insert .encode and .decode calls where necessary to convert between the two. I recommend UTF-8 encoding.
In your case since you are already encoding and decoding the ciphertext as base-64 which is another bytes/text conversion, you only need to encode and decode your plaintext. Encode your string with .encode(""utf-8"") when passing it into the encryption function, and decode the final result with .decode(""utf-8"") when getting it out of the decryption function.
If you're reading examples or tutorials make sure they are for Python 3. In Python 2 str was a byte string and it was commonplace to use it for both text and bytes, which was very confusing. In Python 3 they fixed it.
","371","<python-3.x><aes><pycrypto>","0","2","1","2016-02-27 16:36:12","","0","","608639","","2016-02-27 16:02:59","2016-02-27 15:57:44",""
"50556396","how do I use this pycrypto code in pycryptodome","how do I use this pycrypto code in pycryptodome:
#!/usr/bin/env python

from Crypto.Cipher import AES
import base64
import os

# the block size for the cipher object; must be 16 per FIPS-197
BLOCK_SIZE = 16

# the character used for padding--with a block cipher such as AES, the value
# you encrypt must be a multiple of BLOCK_SIZE in length.  This character is
# used to ensure that your value is always a multiple of BLOCK_SIZE
PADDING = '{'

# one-liner to sufficiently pad the text to be encrypted
pad = lambda s: s + (BLOCK_SIZE - len(s) % BLOCK_SIZE) * PADDING

# one-liners to encrypt/encode and decrypt/decode a string
# encrypt with AES, encode with base64
EncodeAES = lambda c, s: base64.b64encode(c.encrypt(pad(s)))
DecodeAES = lambda c, e: c.decrypt(base64.b64decode(e)).rstrip(PADDING)

# generate a random secret key
secret = os.urandom(BLOCK_SIZE)

# create a cipher object using the random secret
cipher = AES.new(secret)

# encode a string
encoded = EncodeAES(cipher, 'password')
print 'Encrypted string:', encoded

# decode the encoded string
decoded = DecodeAES(cipher, encoded)
print 'Decrypted string:', decoded

","At the very least, you need to replace:
cipher = AES.new(secret)

with:
cipher = AES.new(secret, AES.MODE_ECB)

PyCryptodome is almost compatible with PyCrypto, with the exceptions of a few dangeours APIs (like leaving ECB as default encryption mode).
","369","<python><encryption><pycrypto><pycryptodome>","-1","0","1","2018-05-28 10:46:47","50564607","4","1","4909087","","2018-05-27 21:35:04","2018-05-27 20:50:58",""
"35461614","Python - How to exchange AES key over socket","I'm trying to make a client which gets an AES key from a sever over socket.
both client and server have this code:
import base64
from Crypto.Cipher import AES
from Crypto import Random

BS = 16
pad = lambda s: s + (BS - len(s) % BS) * chr(BS - len(s) % BS) 
unpad = lambda s : s[:-ord(s[len(s)-1:])]

class AESCipher:
 def __init__( self, key ):
    self.key = key

 def encrypt( self, raw ):
    raw = pad(raw)
    iv = Random.new().read( AES.block_size )
    cipher = AES.new( self.key, AES.MODE_CBC, iv )
    return base64.b64encode( iv + cipher.encrypt( raw ) ) 

 def decrypt( self, enc ):
    enc = base64.b64decode(enc)
    iv = enc[:16]
    cipher = AES.new(self.key, AES.MODE_CBC, iv )
    return unpad(cipher.decrypt( enc[16:] ))

How do I exchange AES key from the server to the client?
","I am making something similar. I made a random key with RSA and then i have send the public key from client to server (Assuming that the client is the one that generate the AES key). So the server encrypts the key and send it to client. The client Decrypts the AES key with is private RSA key.  
","368","<python><sockets><encryption><pycrypto>","0","0","1","2017-11-24 09:46:38","","3","","","","","2016-02-17 15:57:01",""
"45454838","Cython pycrypto performance","I have some problem with time encryption PyCrypto AES-128. My setup Raspberry Pi 2 + Python and other stuff. I'm trying to encrypt a message, but for some reason, it process takes a large part of processor time. That's why I decided to try using Cython and write the tests to compare my time benefit what I got.
main_py.py
from Crypto.Cipher import AES

key = ""...""
plain_text = ""...""
enc_obj = AES.new(key, AES.MODE_ECB)

def test():
    enc_obj.encrypt(plain_text)

main_cy.pyx
from Crypto.Cipher import AES

cdef char* key = ""...""
cdef char* plain_text = ""...""
cdef object enc_obj = AES.new(key, AES.MODE_ECB)

cpdef void test():
    enc_obj.encrypt(plain_text)

test.py
import timeit

cy = timeit.timeit('main_cy.test()', setup='import main_cy', number=100000)
py = timeit.timeit('main_py.test()', setup=""import main_py"", number=100000)

print(cy, py)
print(py / cy)

And result what I got cython encrypted slower than python. If I'm doing something wrong let me know, because I just start to learn cython. Maybe you have some proposals like use other lib or use C lib and import in cython program, please let me know, but I must use AES with lookup tables optimization.
","","367","<python><encryption><aes><cython><pycrypto>","1","","0","2017-08-02 08:04:29","","5","","5114768","","2017-08-02 08:04:29","2017-08-02 07:57:12",""
"31817932","CryptoUnavailableError: No crypto library available","I'm trying to run an application for AppEngine with python where I'm import the example module to get data from Google Analytics https://developers.google.com/analytics/devguides/reporting/core/v3/quickstart/service-py but when I run the server with dev_appserver.py and go to localhost:8080/ I recive  an 505 error with his error in the console:
Traceback (most recent call last):
  File ""/home/ingdavid/google-cloud-sdk/platform/google_appengine/lib/webapp2-2.3/webapp2.py"", line 1511, in __call__
    rv = self.handle_exception(request, response, e)
  File ""/home/ingdavid/google-cloud-sdk/platform/google_appengine/lib/webapp2-2.3/webapp2.py"", line 1505, in __call__
    rv = self.router.dispatch(request, response)
  File ""/home/ingdavid/google-cloud-sdk/platform/google_appengine/lib/webapp2-2.3/webapp2.py"", line 1253, in default_dispatcher
    return route.handler_adapter(request, response)
  File ""/home/ingdavid/google-cloud-sdk/platform/google_appengine/lib/webapp2-2.3/webapp2.py"", line 1077, in __call__
    return handler.dispatch()
  File ""/home/ingdavid/google-cloud-sdk/platform/google_appengine/lib/webapp2-2.3/webapp2.py"", line 547, in dispatch
    return self.handle_exception(e, self.app.debug)
  File ""/home/ingdavid/google-cloud-sdk/platform/google_appengine/lib/webapp2-2.3/webapp2.py"", line 545, in dispatch
    return method(*args, **kwargs)
  File ""/var/www/repositorios/PYTHON/dashboard/app.py"", line 248, in get
    print analyticsH.main()
  File ""/var/www/repositorios/PYTHON/dashboard/analyticsH.py"", line 111, in main
    service_account_email)
  File ""/var/www/repositorios/PYTHON/dashboard/analyticsH.py"", line 35, in get_service
    scope=scope)
  File ""/var/www/repositorios/PYTHON/dashboard/oauth2client/util.py"", line 137, in positional_wrapper
    return wrapped(*args, **kwargs)
  File ""/var/www/repositorios/PYTHON/dashboard/oauth2client/client.py"", line 1503, in __init__   _RequireCryptoOrDie()
  File ""/var/www/repositorios/PYTHON/dashboard/oauth2client/client.py"", line 1457, in _RequireCryptoOrDie
    raise CryptoUnavailableError('No crypto library available')
CryptoUnavailableError: No crypto library available

I've searched and all that I've found is install openssl or install python-crypto or update python-dev, I doing everything but not works.
Thank you.
","","365","<python><google-app-engine><google-analytics><pycrypto>","1","","0","2015-08-04 19:45:30","","4","0","","","","2015-08-04 19:45:30",""
"34237433","When I try pack pycrypto using pyinstaller error has occurred","I use last version pyinstaller, python 2.7.5, OSX 
And when I try pack this code:
import  Crypto.Cipher._AES as AES
import Crypto.Hash._SHA256 as SHA256 
if __name__ == '__main__':
    c = AES.new('1234567890123456')
    cipher = c.encrypt('blabblabblabblab')
    print(cipher.encode('hex'))

    h = SHA256.new('blabblabblabblab')
    print(h.hexdigest())


python pyinstaller.py /Users/alexey/secure_backup/cryptotest.py -F

It successful, but this output has occurs when I run program from console:
Traceback (most recent call last):
  File ""<string>"", line 1, in <module>
  File ""/Users/alexey/Downloads/pyinstaller-develop/PyInstaller/loader/pyimod03_importers.py"", line 382, in load_module
    exec(bytecode, module.__dict__)
  File ""build/bdist.macosx-10.9-intel/egg/Crypto/Cipher/_AES.py"", line 7, in <module>
  File ""build/bdist.macosx-10.9-intel/egg/Crypto/Cipher/_AES.py"", line 6, in __bootstrap__
ImportError: dlopen(/var/folders/nd/1m2t9wmx4jv1gdw_h0s9sp3w0000gp/T/_MEI81X1du/Crypto/Cipher/_AES.so, 2): image not found

--hidden-import=Crypto.Cipher._AES also not work 
","","364","<python><pyinstaller><pycrypto>","2","","0","2015-12-12 07:28:55","","2","","","","","2015-12-12 07:28:55",""
"43826581","Pycrypto for windows 7 python 3.5","Ok so i am trying to encrypt /decrypt a .txt file as part of a longer script.
So i am trying to install PyCrypto for windows 7 64bit python 3.5 using this link, https://github.com/sfbahr/PyCrypto-Wheels.
But alias keeps failing. With the a bit of investigation i believe it is the wheel so i have tried to upgrade without success with the following error:
""
could not find a version that satisifes the requirement wheel--upgrade
no matching distribution found for wheel--upgrade

.
Any ideas? all i want to achieve is encrypt /decrypt a .txt file with aes or similar on 3.5 win7.
","","356","<python><python-3.5><windows-7-x64><pycrypto>","0","","0","2017-05-07 00:13:16","","3","","","","","2017-05-07 00:13:16",""
"43425522","What does the b in front of the decrypted plaintext mean in pycrypto?","I'm trying to encrypt a plain text using DES algorithm implemented in PyCrypto. However, when I print the encrypted text and then decrypt it using the generated encrypted text an additional b seems to get added every time. Is this an error or just something else that I'm being ignorant about?
Here's the code sample:
des = DES.new('01234567', DES.MODE_ECB)
text = input('Enter plain text: ')
cipher_text = des.encrypt(text)
print('Cipher Text:' + str(cipher_text))
decipher_text = des.decrypt(ciphertext=cipher_text)
print('Deciphered text is: ' + str(decipher_text))

And the resultant output:
Enter plain text: abcdefgh
Cipher Text:b'\xec\xc2\x9e\xd9] a\xd0'
Deciphered text is: b'abcdefgh'

","The b indictes this is a binary string.
","354","<python><python-3.x><encryption><encoding><pycrypto>","1","3","1","2017-04-15 17:10:20","43425551","7","","1816580","","2017-04-15 12:02:27","2017-04-15 11:33:03",""
"35214985","PyCrypto is throwing an Invalid Syntax Error when I import pysftp","I am making an SFTP application that connects to my schools server where I have to upload my Python Programs to for class. After adding pysftp, pycrypto and paramiko to the Python 3.5 Library I tried importing the pysftp module only to get an Invalid Syntax Error from a line in PyCrypto's DSA.py file. The error is being raised on this line if pow(2,159L) < q < pow(2,160L): on the ""L"" value in the class error(Exception): class. I tried researching to find a solution or to see if someone else experienced this issue but was unable to find anything. Has anyone else experienced the Syntax Error when importing pysftp on Python 3.5.1. If so how can I resolve this issue? Any insight on how to resolve this? 
","for python 3x, use the following code for making an sftp application:
from ftplib import FTP

","349","<python-3.x><paramiko><pycrypto><dsa><pysftp>","2","0","1","2016-03-01 11:09:07","","0","","","","","2016-02-05 01:47:11",""
"56572677","Java - Python AES encryption decryption","I have an encrypted text from Java(v8) using AES, which I am trying to decrypt in python using same SecretKey, Salt but I am getting issue while unpading about index out of range. When I do the reverse i.e encrypt in python and decrypt in java then I am able to get the text but with some unwanted prefix.
Following is my java and python code, which I have tried.
Java Code(Base64 from org.apache.commons.codec.binary.Base64)
public static String encrypt(String secretKey, String salt, String value) throws Exception {
        Cipher cipher = initCipher(secretKey, salt, Cipher.ENCRYPT_MODE);
        byte[] encrypted = cipher.doFinal(value.getBytes());
        return Base64.encodeBase64String(encrypted);
    }

    public static String decrypt(String secretKey, String salt, String encrypted) throws Exception {
        Cipher cipher = initCipher(secretKey, salt, Cipher.DECRYPT_MODE);
        byte[] original = cipher.doFinal(Base64.decodeBase64(encrypted));
        return new String(original);
    }

    private static Cipher initCipher(String secretKey, String salt, int mode) throws Exception {

        SecretKeyFactory factory = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA256"");

        KeySpec spec = new PBEKeySpec(secretKey.toCharArray(), salt.getBytes(), 65536, 256);
        SecretKey tmp = factory.generateSecret(spec);
        SecretKeySpec skeySpec = new SecretKeySpec(tmp.getEncoded(), ""AES"");

        Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5PADDING"");
        cipher.init(mode, skeySpec, new IvParameterSpec(new byte[16]));
        return cipher;
    }

    public static void main(String[] args) throws Exception {
        String secretKey = ""Secret"";
        String fSalt = ""tJHnN5b1i6wvXMwzYMRk"";
        String plainText = ""England"";

        String cipherText = encrypt(secretKey, fSalt, plainText);
        System.out.println(""Cipher: "" + cipherText);
//      cipherText = ""6peDTxE1xgLE4hTGg0PKTnuuhFC1Vftsd7NH9DF/7WM=""; // Cipher from python
        String dcrCipherText = decrypt(secretKey, fSalt, cipherText);
        System.out.println(dcrCipherText);

    }

Python Code(version 3.6) & Pycrypto V2.6
import base64
import hashlib
import os

from Crypto.Cipher import AES

BS = 16
pad = lambda s: s + (BS - len(s) % BS) * chr(BS - len(s) % BS)

# unpad = lambda s: s[:-ord(s[len(s) - 1:])]
unpad = lambda s: s[0:-s[-1]]

def get_private_key(secretKey, salt):
    key = hashlib.pbkdf2_hmac('SHA256', secretKey.encode(), salt.encode(), 65536, 32)
    return key


def encrypt(message, salt, secretKey):
    private_key = get_private_key(secretKey, salt)
    message = pad(message)
    iv = os.urandom(BS)  # 128-bit IV
    cipher = AES.new(private_key, AES.MODE_CBC, iv, segment_size=256)
    return base64.b64encode(iv + cipher.encrypt(message))


def decrypt(enc, salt, secretKey):
    private_key = get_private_key(secretKey, salt)
    enc = base64.b64decode(enc)
    iv = enc[:BS]
    cipher = AES.new(private_key, AES.MODE_CBC, iv, segment_size=256)
    return unpad(cipher.decrypt(enc[BS:]))


secretKey = ""Secret""
salt = ""tJHnN5b1i6wvXMwzYMRk""
plainText = ""England""
cipher = encrypt(plainText, salt, secretKey)
print(""Cipher: "" + bytes.decode(cipher))

# cipher = ""0JrZdg9YBRshfTdr1d4zwQ=="" # Cipher from java
decrypted = decrypt(cipher, salt, secretKey)
print(""Decrypted "" + bytes.decode(decrypted))

Java Decrypt output: �U�����or���England when I pass python cipher, expected: England
Python Decrypt output: unpad = lambda s : s[0:-s[-1]]
IndexError: index out of range, expected: England
I went through other post as well on stack regarding this issue but, it doesn't worked out as they have used different mode.
","In python, you're storing the iv (initialization vector) in the first 16 bytes of the encrypted message. 
In Java, you're doing no such thing - you're passing an empty IV and you treat the whole message including the first 16 bytes as ciphertext.
You need to make sure that Java and Python match up.
Either you don't use an IV in both, in which case you remove that part in Python. 
Or you use an IV in both, in which case you need to update your Java code to generate a random IV on encryption, adding it to the result of the encryption. On decryption, the Java code needs to take the first 16 bytes as the IV and pass it to the Cipher.
","347","<java><python><aes><pycrypto><pbkdf2>","0","1","1","2019-06-13 03:19:55","56572937","0","1","","","","2019-06-13 02:41:07",""
"16546321","Incompatible libgmp.a error when building Pycrypto 2.6","I have build the gmp 5.1.1 library using gcc 4.7.2 all in the Windows-7 environment.
I configured the build with ./configure and commanded the make and after finished the
make check without any errors.
However, when I put the resulting libgmp.a into the Python33/libs and lunch the
c:\Users\egargio\Downloads\pycrypto-2.6\pycrypto-2.6>c:\Python33\python setup.py
 build_ext --compiler=mingw32

the following errors reporting incompatibility for libgmp.a occur:
c:\Users\egargio\Downloads\pycrypto-2.6\pycrypto-2.6>c:\Python33\python setup.py
 build_ext --compiler=mingw32
running build_ext
running build_configure
building 'Crypto.PublicKey._fastmath' extension
C:\MinGW64\bin\gcc.exe -std=c99 -O3 -fomit-frame-pointer -Isrc/ -I/usr/include/
-Ic:\Python33\include -Ic:\Python33\include -c src/_fastmath.c -o build\temp.win
-amd64-3.3\Release\src\_fastmath.o
writing build\temp.win-amd64-3.3\Release\src\_fastmath.def
C:\MinGW64\bin\gcc.exe -shared -Wl,--enable-auto-image-base -s build\temp.win-am
d64-3.3\Release\src\_fastmath.o build\temp.win-amd64-3.3\Release\src\_fastmath.d
ef -Lc:\Python33\libs -Lc:\Python33\PCbuild\amd64 -lgmp -lpython33 -lmsvcr100 -o
 build\lib.win-amd64-3.3\Crypto\PublicKey\_fastmath.pyd
c:/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/4.7.1/../../../../x86_64-w64-mingw3
2/bin/ld.exe: skipping incompatible c:\Python33\libs/libgmp.a when searching for
 -lgmp
c:/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/4.7.1/../../../../x86_64-w64-mingw3
2/bin/ld.exe: skipping incompatible c:\Python33\libs\libgmp.a when searching for
 -lgmp
c:/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/4.7.1/../../../../x86_64-w64-mingw3
2/bin/ld.exe: skipping incompatible c:\Python33\libs/libgmp.a when searching for
 -lgmp
c:/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/4.7.1/../../../../x86_64-w64-mingw3
2/bin/ld.exe: cannot find -lgmp
collect2.exe: error: ld returned 1 exit status
error: command 'gcc' failed with exit status 1

Please any suggestions ? Thanks.
-- Giorgio
","","346","<python><gmp><pycrypto>","2","","0","2013-05-14 14:48:00","","3","0","","","","2013-05-14 14:48:00",""
"38483378","How to AES decrypt data encrypted in Javascript with Python?","I have a javascript code from a page that looks like
    var link = '{""ct"":""AAQz1rUDqp849MRxu0tqGRGvPcLzVG24xa5zbYxpwVHH6Z2p95xPPzNhMIRMcaTPvijE71RQU1X3cQhtnXdRScA6UBiLWNs9vMul2gldnMTpT92sDYHl+hKBGy2dR22Un7ElToipSqeqRrwhEK8T9ROMChrBw8i7JOICpOYoVhqDB72BH2RG\/PqjRqsKittES5BVhTTY9cs+zQI0rM+FQA62bVCL57P3RD+E+aWJJLjUvoXBqct6Jc5W7li9mk9udgn9rPKkCbXSCvwIxcWS5C1kw4uSO7y0IlovaTWLAIw5nY0l4REjbC1wPWrtxDWLlr8J+\/sQdDF+P61VHz6yiC+w56QLDjVwz4kBl3r3uP\/VZ7kUuLwWHSHnbmmXv31f"",""iv"":""feae762ac889376169708872d9676319"",""s"":""9b2328e8a4ee2717""}';
    var msg = ""f12c8b59265dc1e898135211cc30be49"";    
    var finalUrl = JSON.parse(CryptoJS.AES.decrypt(link, msg, {format: CryptoJSAesJson}).toString(CryptoJS.enc.Utf8));

I figure that ct is encrypted msg, s is for Salt and iv is iv
I am trying to decode the finalUrl with python.
    AES=AESDecrypter()
    decryptor = AES.new(s, AES.MODE_CBC, IV=iv)
    dec = decryptor.decrypt(ct)

I know it is not going to work as I can't figure how to use 
    var msg = ""f12c8b59265dc1e898135211cc30be49"" in Python.

Also figured that CryptoJSAesJson may have some extra function.
Someone please show me steps how I can retrieve the finalUrl with Python with the data given here.
Any suggestion is really appreciated. Apology for my poor coding knowledge.
","","346","<javascript><python><aes><pycrypto><cryptojs>","2","","0","2016-07-21 01:14:12","","0","2","190597","","2016-07-21 01:14:12","2016-07-20 13:58:20",""
"49981694","Using mysql AES encrypt and decrypt from Django","In my Django app, I want to use AES_ENCRYPT and AES_DECRYPT from the mysql database to encrypt and decrypt stuff.
I know that python's Crypto package has AES support but the Crypto AES doesn't produce the same result as mysql AES although I made sure that both are using the ECB mode.
So, now I'm doing this:  
sql = ""select 1 as id, AES_ENCRYPT(my_field, '16-bytes encryption key') as field_enc from appname_table""
encrypted_fields = MyModel.objects.raw(sql)

This gets me the field values after encryption and it works fine. The issue is that the AES algorithm encryption final result has many unprintable characters, it looks like this:  
encrypted_fields[3].field_enc
'\x88\xc5\xe4\xa0c?\xf8\x16|^1JB\x83{\xdf'
print(encrypted_fields[3].field_enc)
���c?�|^1JB�{�

So, now when I try to take this same value to decrypt it, the mysql replies with an error that says 

""OperationalError: (1300, ""Invalid utf8 character string:
  '\x88\xC5\xE4\xA0c'"")""

I guess this is because I tried to send unprintable characters to the mysql query.  
So, how do I approach this?
Please note that I have to use the MySQL functions because I encrypted some database fields using these functions so I need to decrypt them with the same function because Crypto's AES doesn't get the same results. Crypto keeps asking that the text to be encrypted has to be 16 bytes long like the key, while mysql doesn't require that.  
I also tried to see if mysql use some kind of padding for the text before encryption but it doesn't say what characters they pad on their webpage:  

The str and crypt_str arguments can be any length, and padding is
  automatically added to str so it is a multiple of a block as required
  by block-based algorithms such as AES. This padding is automatically
  removed by the AES_DECRYPT() function

","After many googles, I found this blog article about replicating mysql AES Encryption in PHP.
They key turned out to be that the character used for padding is the character that has an ascii code equal to the difference in length between the AES block size and the length of the text.  
c = chr(16 - len(text_to_be_encrypted))
def align_str(s, n, char):
    if len(s) < n:
        diff = n - len(s)
        for i in range(diff):
            s += char
    return s
s = align_str(text_to_be_encrypted, 16, c)
e = encryption_suite.encrypt(s)

and it worked. It produced the same output as mysql encryption. 
","342","<mysql><django><encryption><aes><pycrypto>","0","0","1","2018-04-23 13:16:02","49982101","0","","","","","2018-04-23 12:57:00",""
"29347075","PyCrypto script producing wrong MD2 hashes","I am trying to calculate MD2 hashes using PyCrypto until i find one or more  starting with a given string. (Please don't ask why :=) 
I am able to find several hashes. If i check the correctness of my hash calculation via online tools, i will not get the same hash. 
Code:
import itertools
from Crypto.Hash import MD2

charset = 'abcdefghijklmnopqrstuvwxyz0123456789'
md2hasher = MD2.new()

res = itertools.product(charset, repeat=6)
for i in res: 
    md2hasher.update(bytes(i))
    strMD2 = md2hasher.hexdigest()
    if strMD2.startswith('757c47'):
        print i
        print strMD2

Sample output:
('a', 'e', 's', '1', 'x', 'e')
757c47bf59afdcd8d05bd4c5d571ef5d
('a', 'i', 'p', '3', 'v', '4')
757c4758262eb9a3ce3a021728f0a842
('a', 'j', '3', 'j', 'p', '3')
757c475ffc257d31026674cb6b346094

Online verification:
http://md5hashing.net/hash/md2/d25e0cd52f62792daff6f76c5a640b4c
(d25e0cd52f62792daff6f76c5a640b4c)   
What am i doing wrong?
","You are using Python 2 - bytes is synonymous to str. str(i) returns a byte string ""('a', 'e', 's', '1', 'x', 'e')"" instead of 'aes1xe'; to get the latter, use ''.join(i)
Also you're reusing the hash, which is nono. You must create a new hash object unless you want to concatenate.
Thus we get:
charset = ""abcdefghijklmnopqrstuvwxyz0123456789""
for i in itertools.product(charset, repeat=6): 
    strMD2 = MD2.new("""".join(i)).hexdigest()
    if strMD2.startswith(""757c47""):
        print strMD2

","339","<python><pycrypto>","0","1","2","2015-05-11 06:23:12","29347184","1","","","","","2015-03-30 13:08:25",""
"29347075","PyCrypto script producing wrong MD2 hashes","I am trying to calculate MD2 hashes using PyCrypto until i find one or more  starting with a given string. (Please don't ask why :=) 
I am able to find several hashes. If i check the correctness of my hash calculation via online tools, i will not get the same hash. 
Code:
import itertools
from Crypto.Hash import MD2

charset = 'abcdefghijklmnopqrstuvwxyz0123456789'
md2hasher = MD2.new()

res = itertools.product(charset, repeat=6)
for i in res: 
    md2hasher.update(bytes(i))
    strMD2 = md2hasher.hexdigest()
    if strMD2.startswith('757c47'):
        print i
        print strMD2

Sample output:
('a', 'e', 's', '1', 'x', 'e')
757c47bf59afdcd8d05bd4c5d571ef5d
('a', 'i', 'p', '3', 'v', '4')
757c4758262eb9a3ce3a021728f0a842
('a', 'j', '3', 'j', 'p', '3')
757c475ffc257d31026674cb6b346094

Online verification:
http://md5hashing.net/hash/md2/d25e0cd52f62792daff6f76c5a640b4c
(d25e0cd52f62792daff6f76c5a640b4c)   
What am i doing wrong?
","I've a similar problem, I've tried to check the same string, my code looks a little bit different:
from Crypto.Hash import MD2
import itertools

letters = ""abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ123456789\""_$&#@""
h = MD2.new()

for guess in itertools.product(letters, repeat=6):
    h.update(''.join(guess).encode())    
    if(h.hexdigest()[0:6:1] == ""757c47""):
        print (""String: "" + ''.join(guess))
        print (h.hexdigest())

I've tried the solution above, this works fine. But I don't know what's the mistake in my code.
Output:
String: aa8LVM
757c4765c5a45c70128c02766c63255b
String: abto9L
757c47e274e0d7e3a5a0a0574f154c7e
String: abFjlK
....

","339","<python><pycrypto>","0","0","2","2015-05-11 06:23:12","29347184","1","","","","","2015-03-30 13:08:25",""
"19618260","How to use AES with GAE python?","I would like to encrypt the data transferred between GAE app and my android application (https will not help since the key should be dynamic). I am thinking about AES (128-bit) encryption.
I've tried to use pycrypto (GAE SDK 1.8.6, python 2.7, OS X 10.9):
libraries:
- name: pycrypto
  version: ""2.6""

But when I import Crypto it can not find the module:
ImportError: No module named Crypto

Is there any other built-in module I can use? Or, is there any way to be able to use pycrypto (should I install it manually)?
","This happens to be an App Engine supplied module, as detailed here:
https://developers.google.com/appengine/docs/python/tools/libraries27

The Python 2.7 runtime includes some third-party modules. Some of
  these are available by default; others are only available if
  configured. You can specify which version you want to use.
  https://developers.google.com/appengine/docs/python/python25/migrate27#Configuring_Libraries

To enable included libraries edit your app.yaml like this:
libraries:
- name: pycrypto
  version: latest

In general you'd need to add the files themselves to the same directory that app.yaml is in, as per this question: Uploading Python third party libraries but this happens to be a supplied library. 
","338","<python><macos><google-app-engine><python-2.7><pycrypto>","2","1","2","2013-10-29 01:35:54","","1","","","","","2013-10-27 12:53:34",""
"19618260","How to use AES with GAE python?","I would like to encrypt the data transferred between GAE app and my android application (https will not help since the key should be dynamic). I am thinking about AES (128-bit) encryption.
I've tried to use pycrypto (GAE SDK 1.8.6, python 2.7, OS X 10.9):
libraries:
- name: pycrypto
  version: ""2.6""

But when I import Crypto it can not find the module:
ImportError: No module named Crypto

Is there any other built-in module I can use? Or, is there any way to be able to use pycrypto (should I install it manually)?
","Last time I used easy_install to install pycrypto, it's not working (old gae version though) so I did this:
- download pycrypto 
- extract, cd to the pycrypto folder
- python setup.py build
- sudo python setup.py install
","338","<python><macos><google-app-engine><python-2.7><pycrypto>","2","0","2","2013-10-29 01:35:54","","1","","","","","2013-10-27 12:53:34",""
"52612685","Can't import ChaCha20","I've been trying to use ChaCha20 for some school work but I can't seem to import it.
When I run the code I get an error
from Crypto.Cipher import ChaCha20
ImportError: cannot import name ChaCha20

I have tried to import other stuff from Crypto.Cipher (AES for example) and I don't get any errors.
EDIT: 
Even after uninstalling everything and reinstalling pycryptodome (only) I still get the same error any ideias why? 
EDIT2: Now I was being an idiot. After uninstalling pycrypto and installing pycryptodome it didn't work because I installed it for python2.x and I was using python3.x to solve it I only had to do was pip3 install pycryptodome
","","338","<python><encryption><pycrypto><pycryptodome>","1","","0","2018-10-07 18:15:59","","8","","4266380","","2018-10-07 18:15:59","2018-10-02 16:35:40",""
"48386714","error: command 'gcc' failed with exit status 1 while installing pycrypto on RHEL","I am trying to manually install Crypto module for Python (pycrypto) on RHEL. However, I seem to always get this error after I run the build command (i.e. python setup.py build):

error: command 'gcc' failed with exit status 1

Does anyone know how to solve this problem?
","Do you have any missing libraries or dependencies? pycrypto installation mentions:

The modules are packaged using the Distutils

Also, this might be a possible duplicate: https://stackoverflow.com/a/11094752/5224887
","334","<python><gcc><rhel><pycrypto><rhel7>","1","0","1","2018-01-22 18:16:39","","0","","","","","2018-01-22 17:02:04",""
"17898209","Unknown Error in AES CBC encryption pycrypto 2.6","Unknown Error in pycrypto AES CBC encryption,
The key is stripped to  16bytes but still it gives this error:
Source Help Article:
http://support.ideascale.com/kb/ideascale-setup/single-sign-on-multipass-token-based
Update Class module: 
    class multipassGenerator():
        def init(self):
            api_key = ""61fd537c-8961-479f-a413-aa91a401c3f5-5e866a4c-09c7-4ba0-8da1-cd8e4e88e3ec""
            app_key = ""25151""
    def generateMultipass(self,usrEmail,usrName):
        if usrEmail and usrName:
            # EXAMPLE: Multipass JSON Token
            message = {""email"":usrEmail,""name"":usrName,""expires"":""2099-02-24T19:55:31.111-08:00""}
            block_size = 16
            mode = AES.MODE_CBC

            # Replace api_key and app_key with your Community's API Key and Site Key
            # The keys below are for this community: http://multipass.ideascale.com/
            # Do not share your keys - the keys below are for testing purposes only.
            # See: http://support.ideascale.com/kb/ideascale-setup/single-sign-on-multipass-token-based
            api_key = self.api_key
            app_key = self.app_key

            json = JSON.dumps(message, separators=(',',':'))

            salted = api_key+app_key
            saltedHash = hashlib.sha1(salted).digest()[:16]
            logging.info(message)
            logging.info(salted)
            #logging.info(saltedHash)
            logging.info(len(saltedHash))
            json_bytes = array.array('b', json[0 : len(json)]) 

            pad = block_size - len(json_bytes.tostring()) % block_size
            data = json_bytes.tostring() + pad * chr(pad)
            aes = AES.new(saltedHash, mode)
            encrypted_bytes = aes.encrypt(data)

            b64token = base64.b64encode(encrypted_bytes)
            b64token = re.sub(r'\s+' ,'' ,b64token)
            b64token = re.sub(r'\=+$','' ,b64token)
            b64token = re.sub(r'\+'  ,'-',b64token)
            b64token = re.sub(r'\/'  ,'_',b64token)
            token = urllib.quote(b64token)

            return token

We execute this:
from getUserMuiltipass import multipassGenerator
tokenGenerator = multipassGenerator()
tokenGenerator.api_key = u""61fd537c-8961-479f-a413-aa91a401c3f5-5e866a4c-09c7-4ba0-8da1-cd8e4e88e3ec""
tokenGenerator.app_key = u""25151""
email = 'sanvvvdeepkffffs@advaiddddya.com' # any input same issue 
print  email.split('@')[0]
ssoToken = tokenGenerator.generateMultipass(email,email.split('@')[0]) 
print ssoToken

this part of code is causing issue : AES.new(saltedHash, mode)
Traceback (most recent call last):
  File ""C:\Program Files (x86)\Google\google_appengine\google\appengine\tools\devappserver2\python\request_handler.py"", line 156, in handle_interactive_request
    exec(compiled_code, self._command_globals)
  File ""<string>"", line 7, in <module>
  File ""C:\appengine\ideasONSMS\getUserMuiltipass.py"", line 59, in generateMultipass
    aes = AES.new(saltedHash, mode)
  File ""C:\Python27\lib\site-packages\Crypto\Cipher\AES.py"", line 95, in new
    return AESCipher(key, *args, **kwargs)
  File ""C:\Python27\lib\site-packages\Crypto\Cipher\AES.py"", line 59, in __init__
    blockalgo.BlockAlgo.__init__(self, _AES, key, *args, **kwargs)
  File ""C:\Python27\lib\site-packages\Crypto\Cipher\blockalgo.py"", line 141, in __init__
    self._cipher = factory.new(key, *args, **kwargs)
ValueError: IV must be 16 bytes long

","It is probably because AES.new fn needs 3 args for CBC mode:
AES.new(key, *args, **kwargs)

3-d arg is IV.
Can be generated like this:
iv = Random.new().read(AES.block_size)

","332","<google-app-engine><pycrypto>","0","1","1","2013-07-27 21:09:17","17902486","0","","","","","2013-07-27 13:13:53",""
"17555855","RSA decryption strips leading null-bytes","Why does this code:
s = ""\x00\x00\x00\x00\x03\x00\x00\x00id\x00\x00""
from Crypto.PublicKey import RSA
from Crypto.Util import randpool
key = RSA.generate(1024, randpool.RandomPool().get_bytes)
d = key.encrypt(s, None)
dec = key.decrypt(d)
print ''.join( [ ""%02X "" % ord( x ) for x in dec ] ).strip()

output:
03 00 00 00 69 64 00 00

instead of
00 00 00 00 03 00 00 00 69 64 00 00

","It happens because the default encryption algorithm adds some leading null-bytes to the message and the decryption algorithm strips all the leading null-bytes even if they were in the original message.
The solution is to use Crypto.Cipher.PKCS1_OAEP for encryption/decryption.
from Crypto.PublicKey import RSA
from Crypto.Util import randpool
from Crypto.Cipher import PKCS1_OAEP as PKCS


s = ""\x00\x00\x00\x00\x03\x00\x00\x00id\x00\x00""
key = RSA.generate(1024, randpool.RandomPool().get_bytes)

cipher = PKCS.new(key)
encr = cipher.encrypt(s)
decr = cipher.decrypt(encr)

","331","<python><rsa><pycrypto>","1","2","1","2013-07-10 10:21:41","17558408","0","","1137432","","2013-07-09 18:48:46","2013-07-09 18:45:44",""
"24770982","Is there any method similar to toXMLString() in pycrypto RSA?","I know in C# RSACryptoServiceProvider has ToXmlString method that supports exporting the n and e values in base64(?) format in a XML file. I am using PyCrypto RSA modules's RSA.generate to create a new key. 
I am aware that there is a exportKey() function and currently I can save it in PEM format. Saving it in PEM format gives me something as follows:
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCfGtS6zBwWeXWelsSOhG1/pe40
goxMGHe9bb1UBtKBAjhi00ZKxwygM5cbTj+k1+wNaIi64UpE8ixOfRY9hVUpYZ1r
QP/Ox8rWyvqdKW6FTm9PIUz4chrbyjgTUENWdfk9Nl6GJ1ZyeN49z4j4QavFBxe9
h+VkLc91hr7MHbq53QIDAQAB
Out of which, last 4 characters AQAB seems like the base64 representation for 65537 which is the exponent. But if I interpret the rest of the pem except AQAB as base64 representation of modulus then I end up with decode error. 
I attempted to use struct.pack to convert the n(modulus) to bytes for getting a base64 representation but I end up with a overflow. n is really big, I am not sure what data type is it:
1117271960777822123914386767255132691236470141330742633576958345789905066768642795553191088144426491796396398212407134324451       3691835386930230821948992495529518257623152363611603952277356641370464835962436639078429958826695573074110215764561518716014                                    9223488427614600372039517756352143348068193387291216981965277
Is there any way to convert the modulus and exponent of public key created by PyCrypto RSA module to ToXmlString functionality?
","","330","<c#><python><encryption><pycrypto>","1","","0","2014-07-16 01:50:32","","2","","","","","2014-07-16 01:50:32",""
"31363687","Problems retrieving stored AES encrypted string in Python","I am having a problem storing a string encrypted, then b64 encoded in a text file. 
The code to encrypt is 
from base64 import b64encode, b64decode # import library for B64
from Crypto.Cipher import AES
import datetime
d = datetime.date.today()
shortd = d.strftime(""%y%m%d"")

docNum = raw_input(""Enter Doc Number: "")
#Doc num is always 20 characters,

obj = AES.new('ThisIsA16digitPs', AES.MODE_CBC, 'This is an IV456')
ciphertext = obj.encrypt(shortd+docNum+""000000"") #Zeroes for filler
lognum = b64encode(ciphertext)

f = open(""e:\log.txt"", ""a"")
f.write(str(lognum) + ""\n"")
f.close()

The file shows the following text:
uTfZKAuVYbZJM28Tbcv3OBHvDn8QBKm1Nbb0wjcq9rE=
wCeIeyDBShmbsjM1yIpzEPdijAe4o12J4FAhigDotCU=
wCeIeyDBShmbsjM1yIpzEPHZ9fsBlE+svpzBxwcunoU=
wCeIeyDBShmbsjM1yIpzEODr4Ko91q0lsSnlMSuUlJo=

As I have 4 numbers in there. 
The code to decrypt is
from base64 import b64encode, b64decode # import library for B64
from Crypto.Cipher import AES  # Import AES encryption module

obj2 = AES.new('ThisIsA16digitPs', AES.MODE_CBC, 'This is an IV456')
with open('e:\\log.txt', ""r"") as logfile:
    for line in logfile:
        docstring2 = obj2.decrypt(b64decode(line))
        print docstring2
        if not line:
            logfile.close()
            break

But when I run it, the returned result is 
15071110000000000000000001000000
t²W;\è¥dèä»Q.ó·0000000002000000
’?ÕC©û™±1ófì±#0000000003000000
”„¬¿Ì¼ïÂÑ¾a*›ƒ0000000004000000

The first line is correct. The others should loook just like it. 
15071110000000000000000001000000
15071120000000000000000002000000
15071120000000000000000003000000
15071120000000000000000004000000

So, what am I doing wrong? I'm new at python, and cannot figure this one out. 
Edit: I am on Python 2.7.10 on win32. 
","I think your problem is that you forgot to use binary mode when storing and retrieving a file.
With b64 it shouldn't be a problem, but something obviously is.
Try using ab and rb, just in case.
Maybe Python made a mess with new lines. If you are using Python 3, I wouldn't be surprised.
I am not hopeful though.
Anyway, try printing repr(line) and len(line) so that you have something to compare to. 
","329","<python><encryption><pycrypto>","0","0","2","2015-07-12 19:50:12","31371881","0","","5106906","","2015-07-12 12:54:17","2015-07-12 02:06:55",""
"31363687","Problems retrieving stored AES encrypted string in Python","I am having a problem storing a string encrypted, then b64 encoded in a text file. 
The code to encrypt is 
from base64 import b64encode, b64decode # import library for B64
from Crypto.Cipher import AES
import datetime
d = datetime.date.today()
shortd = d.strftime(""%y%m%d"")

docNum = raw_input(""Enter Doc Number: "")
#Doc num is always 20 characters,

obj = AES.new('ThisIsA16digitPs', AES.MODE_CBC, 'This is an IV456')
ciphertext = obj.encrypt(shortd+docNum+""000000"") #Zeroes for filler
lognum = b64encode(ciphertext)

f = open(""e:\log.txt"", ""a"")
f.write(str(lognum) + ""\n"")
f.close()

The file shows the following text:
uTfZKAuVYbZJM28Tbcv3OBHvDn8QBKm1Nbb0wjcq9rE=
wCeIeyDBShmbsjM1yIpzEPdijAe4o12J4FAhigDotCU=
wCeIeyDBShmbsjM1yIpzEPHZ9fsBlE+svpzBxwcunoU=
wCeIeyDBShmbsjM1yIpzEODr4Ko91q0lsSnlMSuUlJo=

As I have 4 numbers in there. 
The code to decrypt is
from base64 import b64encode, b64decode # import library for B64
from Crypto.Cipher import AES  # Import AES encryption module

obj2 = AES.new('ThisIsA16digitPs', AES.MODE_CBC, 'This is an IV456')
with open('e:\\log.txt', ""r"") as logfile:
    for line in logfile:
        docstring2 = obj2.decrypt(b64decode(line))
        print docstring2
        if not line:
            logfile.close()
            break

But when I run it, the returned result is 
15071110000000000000000001000000
t²W;\è¥dèä»Q.ó·0000000002000000
’?ÕC©û™±1ófì±#0000000003000000
”„¬¿Ì¼ïÂÑ¾a*›ƒ0000000004000000

The first line is correct. The others should loook just like it. 
15071110000000000000000001000000
15071120000000000000000002000000
15071120000000000000000003000000
15071120000000000000000004000000

So, what am I doing wrong? I'm new at python, and cannot figure this one out. 
Edit: I am on Python 2.7.10 on win32. 
","At decryption time, you initialize the CBC cipher once and then decrypt all rows with it, one after the other.
I believe you do not do that at encryption time. In other words, you might be initializing the CBC cipher four times, right before encrypting each line.
The fix is to move obj2 creation inside the first loop in the decryption code.
On a separate note, the IV for CBC should be random, not take a fixed value.
","329","<python><encryption><pycrypto>","0","0","2","2015-07-12 19:50:12","31371881","0","","5106906","","2015-07-12 12:54:17","2015-07-12 02:06:55",""
"23031149","how to install python package in Raspbian?","I'm trying to install pycrypto for python 3.x.x on raspberry pi
but when i run python setup.py install
from the command line, it is by default installed to python 2.7.x
i have installed python-dev and still with no luck, i have read that using a PIP might help, but unfortunately i don't know how to use it. all my codes are written for python 3.3.x  and it would take me a very long time to re-write them all for 2.7.
so how can i fix it without re-writing my codes
","Having looked into it there does not seem to be a pycrypto version for python3 at the moment. I think you're options are to look for an alternative package or to convert your code to python 2. There are tools available which can do this automatically, for example 3to2 is available in pip.
","327","<python><python-3.x><raspbian><pycrypto>","0","0","1","2015-12-23 14:55:58","","0","","587395","","2015-12-23 14:55:58","2014-04-12 13:42:05",""
"54528371","RSA cipher incompatibility - python script cannot decrypt a key encrypted by a bash script","I have written a python script that implements encryption and decryption. To send a key for the encrypted data to the receiver the program uses RSA public key encryption and decryption on a randomly generated key.  
Below is the encryption and decryption methods in the python script I have used to encrypt and decrypt a key with public/private keys:  
from Crypto.Cipher import PKCS1_OAEP

def encrypt_public_key(msg, public_key):
    cipher = PKCS1_OAEP.new(public_key)
    return cipher.encrypt(msg)

def decrypt_private_key(msg, private_key):
    cipher = PKCS1_OAEP.new(private_key)
    return cipher.decrypt(msg)

My program should communicate with a classmates program, however, this person has written his program as a bash script using the following command to encrypt and decrypt:
openssl rsautl -encrypt -inkey id_rsa.pub.pem -pubin -in key.bin -out key.bin.enc
openssl rsautl -decrypt -inkey id_rsa.pem -in key.bin.enc -out key.bin 

When my program tries to decrypt my classmates encrypted key I get this error:
File ""[script-path]"", line 54, in decrypt_private_key
return cipher.decrypt(msg)
File ""C:\[path_to_python]\Python37-32\lib\site-packages\Crypto\Cipher\PKCS1_OAEP.py"", line 167, in decrypt
    raise ValueError(""Ciphertext with incorrect length."")
ValueError: Ciphertext with incorrect length.

I believe that this means that our scripts does not use the same cipher, am I correct with this assumtion? However, I cannot find which cipher is used for the bash script (and my classmate does not know either) and I am struggling to find how I can use another cipher with the python Crypto module.
I have tried to switch my encryption and decryption methods to something similar to this:
from Crypto.PublicKey import RSA

def encrypt_public_key(msg, public_key):
    return public_key.encrypt(msg, 32)
def decrypt_private_key(msg, private_key):
    return private_key.decrypt(msg)

But this gives me the following error:
File ""[script_path]"", line 52, in decrypt_private_key
    return private_key.decrypt(msg)
  File ""[python-path]\Python37-32\lib\site-packages\Crypto\PublicKey\RSA.py"", line 378, in decrypt
    raise NotImplementedError(""Use module Crypto.Cipher.PKCS1_OAEP instead"")
NotImplementedError: Use module Crypto.Cipher.PKCS1_OAEP instead

Which is the cipher (PKCS1_OAEP) that is not working with the encrypted key from my classmate. 
Do you have any suggestions on what I can do to solve this? Is the problem that we are using different ciphers and is there a way to switch my cipher or do I have to switch from my python Crypto module? 
","You are probably using different RSA padding schemes. 
Maybe your classmate could try using the rsautl OAEP padding option -oaep. 
It seems the default padding mode for openssl rsautl is -pkcs (PKCS#1 v1.5).
So alternatively, you could try using: 
from Crypto.Cipher import PKCS1_v1_5

","325","<python><encryption><openssl><rsa><pycrypto>","0","0","1","2019-02-05 06:55:38","","1","","","","","2019-02-05 05:50:56",""
"53591395","Python cryptography RSASSA PSS signature returns not valid when check with pycrypto APIs","I'm trying to build a wrapper program around Crypto modules of python for testing and generation of test vectors for a hardware implementation. On the hardware RSASSA_PSS with SHA256 data hash and MGF1 SHA1 identifier is used.
I get a valid signature response from the signature generated by pycrypto while the signature seems to be invalid in case of cryptography module.
The below implementation is for pycrpto:
from Crypto.Hash import SHA256
from Crypto.Signature import PKCS1_PSS
import binascii

string = ""ABCD""
message = bytes.fromhex(string)
digest = SHA256.new()
digest.update(message)
print(digest.hexdigest())
private_key = False

with open (""RSATest_private.pem"", ""rb"") as myfile:
    private_key = RSA.importKey(myfile.read())

# Load private key and sign message
signer = PKCS1_PSS.new(private_key)
sig = signer.sign(digest)
print(binascii.hexlify(sig))

and the below implementation is for cryptogrpahy module:
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import padding
from cryptography.hazmat.primitives.asymmetric import utils
from cryptography.hazmat.primitives import hashes
import binascii

digestAlg_obj = hashes.SHA256()
digest_obj = hashes.Hash(self.digestAlg_obj, backend = default_backend())
digest_obj.update(bytes.fromhex('ABCD'))
digest_bytv = digest_obj.finalize()
print(binascii.hexlify(sha256_data))

with open(RSATest_private.pem, ""rb"") as key_file:
    self.prvKey_obj = serialization.load_pem_private_key(key_file.read(),password=None,backend=default_backend())
signature_bytv = self.prvKey_obj.sign(digest_bytv,padding.PSS(mgf = padding.MGF1(hashes.SHA1()),salt_length=padding.PSS.MAX_LENGTH),utils.Prehashed(hashes.SHA256()))
print(binascii.hexlify(signature_bytv))

I understand that the signatures obtained are not the same due to the randomness involved in the generation for PSS algorithm. The algorithm setting in both the cases is the same.
The HASH value from SHA256 for the data match in both the modules, but the signature generated when checked on the hardware returns invalid in case of cryptography module.
 
Is something wrong with the parameter usage in case of cryptography module?
From the documentation of the pycrypto module, I see that SHA1 is used for mgf1 and the salt length also equals the maximum length of the hash algorithm.
So using the same values in cryptography module should provide me a valid signature.
Also verifying the signature generated by cryptography APIs return sign invalid when checked using the corresponding public key with the pycrypto APIs.
I have tried to generate signature with mgf1 with hash Alg of sha256 as well just to check with the latest predominant embedded hardware implementations but with no progress here as well.
Used python3.6, pycrypto v2.6.1 and cryptography v2.2.2
","The issue seems is solved :)
For anyone facing a similar issue, the default hash alg in MGF1 function in pycrypto or OPENSSL for RSASSA-PSS is SHA256 and a salt_length equal to the digest length of the data.
So changing the MGF1 algorithm to hashes.SHA256() and salt_length to 32 solved the problem.
","323","<python-3.x><pycrypto><pycryptodome><python-cryptography>","0","1","1","2018-12-04 08:02:17","","0","","9152218","","2018-12-03 10:10:49","2018-12-03 10:04:29",""
"36967439","Django Login fails with ValueError: unknown reasons","I am getting a strange error when trying to log in. This happens when logging in to admin as well.
ValueError: unknown reasons
The Stack Trace is at http://dpaste.com/3S8ZFJC
Basically its this line in crypto.py that is failing
return hashlib.pbkdf2_hmac(
            digest().name, password, salt, iterations, dklen)

This is in Django-1.9.5 with Python 2.7.9 on RHEL 5.3           
","I had the same problem with a centos 5.8 with python 2.7.12 and I add to change the password hashers in django settings.
by default it is :
PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
    'django.contrib.auth.hashers.BCryptPasswordHasher',
    'django.contrib.auth.hashers.SHA1PasswordHasher',
    'django.contrib.auth.hashers.MD5PasswordHasher',
    'django.contrib.auth.hashers.CryptPasswordHasher',
]

I changed it to :
PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.MD5PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
    'django.contrib.auth.hashers.BCryptPasswordHasher',
    'django.contrib.auth.hashers.SHA1PasswordHasher',
    'django.contrib.auth.hashers.CryptPasswordHasher',
]

I don't think using MD5 is good enough so I'm looking to find what system library could be missing. You wil also need to create new users or superusers bacause it you have already create some their passwords won't have the right encryption.
","319","<django><django-admin><django-authentication><pycrypto><django-login>","1","0","1","2016-07-05 14:10:05","","0","","","","","2016-05-01 13:52:31",""
"43623645","Understand pycrypto example","     As an example, encryption can be done as follows:

    >>> from Crypto.Cipher import AES
    >>> from Crypto import Random
    >>>
    >>> key = b'Sixteen byte key'
    >>> iv = Random.new().read(AES.block_size)
    >>> cipher = AES.new(key, AES.MODE_CFB, iv)
    >>> msg = iv + cipher.encrypt(b'Attack at dawn')

when i execute 'msg' out on the interpreter i receive 
    b'D\x9e\nRF\xb9\xe3\xa0%vN\xe8bC\xe7\r8\xec\xae\x84\x9b\xf9\x11\xdc\xdf\xcb\xf4\xfev\x9b'   

i understand that this is the 'key' variable being the 'Sixteen byte key' in byte form. 
Now that the 'msg' is encrypted what can I do to decrypt this message?
","","315","<python><encryption><aes><pycrypto>","0","","0","2017-04-26 01:46:51","","12","","2308683","","2017-04-26 01:46:51","2017-04-26 01:45:31",""
"7572178","RuntimeWarning: in python 2.6 while importing python-pycrypto-2.3-1.el3.pp","I have installed ""python-pycrypto-2.3-1.el3.pp"" and ""python-paramiko-1.7.6-1.el3.rf"" in red hat linux and using python2.6 version.
And when I import paramiko, I get below RuntimeWarning mismatch:
/usr/local/lib/python2.6/site-packages/Crypto/Random/Fortuna/SHAd256.py:38: 
RuntimeWarning: Python C API version mismatch for module Crypto.Hash.SHA256: This Python has API version 1013, module Crypto.Hash.SHA256 has version 1011.

please help how to resolve this problem.
","The EL3 packages are for EL3 Python. Since you've installed Python from source yourself, perform a source installation of those modules.
","313","<python><ssh><paramiko><pycrypto>","0","1","1","2011-09-27 16:05:50","","1","","","","","2011-09-27 16:01:32",""
"25688535","Django EncryptedCharField Error When Editing Value","Here's one for my Django comrades. 
I am trying to build an application in Django 1.6.5 and MySQL where some database fields are encrypted in order to respect the privacy of users.  I have successfully installed django-extensions and successfully used the EncryptedCharField to do a simple save and data retrieval.
However, I am running into a problem when using EncryptedCharField for floats.  Now, simple typecasting has been useful--this problem doesn't seem to be that problem.  I'm trying to start with an encrypted field that is a value, change the value by adding/subtracting some number, then save the back to the database.  I've managed to reduce and reproduce the error like this:
>>> user_id = 1
>>> account = AccountCash.objects.get( id = 1 )
>>> account.id
1L
>>> account.portfolio_id
1L
>>> account.account_name
u'My Cash'
>>> account.current_value
u'200'
>>> account.current_value = account.current_value - 10
Traceback (most recent call last):
  File ""<console>"", line 1, in <module>
TypeError: unsupported operand type(s) for -: 'unicode' and 'int'

Here, account_name and current_value are both EncryptedCharFields.  We see that current_value is a unicode, so typecasting to a float should (I thought) resolve the issue, as it has for me in other places.  
However, doing so leads to another problem in 
>>> account.current_value = float(account.current_value) - 10
Traceback (most recent call last):
  File ""<console>"", line 1, in <module>
  File ""/Users/jasonnett/anaconda/envs/bb_env/lib/python2.7/site-packages/django/db/models/fields/subclassing.py"", line 35, in __set__
    obj.__dict__[self.field.name] = self.field.to_python(value)
  File ""/Users/jasonnett/anaconda/envs/bb_env/lib/python2.7/site-packages/django_extensions/db/fields/encrypted.py"", line 69, in to_python
    elif value and (value.startswith(self.prefix)):
AttributeError: 'float' object has no attribute 'startswith'

I haven't been able to figure out what is different about assigning a float value to the encrypted field here vs. where I originally set the value like this:
        # Make the new account, passing in the portfolio it belongs to
        new_account = AccountCash(
            portfolio                   = portfolio,
            account_name                = newCashAccountForm.cleaned_data['account_name'],
            starting_balance            = newCashAccountForm.cleaned_data['starting_balance'],
            current_value               = newCashAccountForm.cleaned_data['starting_balance'],
        )
        new_account.save()

","","309","<django><encryption><pycrypto><django-extensions>","1","","0","2014-09-05 14:46:43","","4","","","","","2014-09-05 14:46:43",""
"44945567","RSA sign in python and verify in JS","I am using pyCrypto PKCS1_v1_5 signature to sign the message. (Original code)
from Crypto.Signature import PKCS1_v1_5
from Crypto.Hash import *
from Crypto.PublicKey import RSA
from Crypto import Random
import base64
import codecs

private_key = """"""-----BEGIN RSA PRIVATE KEY-----
MIICXAIBAAKBgQDtmBQTFLfaYOsio48B0Sbw4qMnaXJ7Qk4i1gzI+lgLIOPV0YyU
fWMKgl24iJsGN6W5Vk+4GfDE7jKGkti9ZsswaJ/1Un+zFpXlVCOjEe9CZz3npIEK
G8jJL1rwnBc2qPY3YD8jWBhLaPUgchbxUbe1Q2eKDmlRF7B8BzeNG4aVdQIDAQAB
AoGBAK+x6Q5fIMHVL6vyxRqz3pb9EWdgm664Tm2GWff44EiCbti717gqrKWl18ZR
Bkpnth5CzDq4vAn0ltpbFvmgXRmnUL8WsxigrL6tf2mcx4QAgcqr4B6er7X738lB
UDSaEiSLmT/hr9Rg6H/P8IoP01tLKnj/gYQd5CVLkh/VD+dVAkEA9InBNnM5ViAM
Aq7lL/+RWc+jfKnT9kWo+X0v7K8fD9/188K45G6zK/9X0J6Qj83dk1uni5QGx1i1
VVBXIlUnqwJBAPi7AEl8nmmohrSsq8YHX6lTTy6EybSgQS4Qu3SBcVl2RoG89BLx
kReqyTRGupZz/fNS9VfGFZU9VOHcFCeVl18CQEOiLgwvRjZp2qiLUtw5pSvf3+nE
1tkQXzHRzAV8Ue0EFnR68MRNUcTjdJhAot8DIzt0aByUrmNIR67274KRZs0CQC1X
kZ7T2+Dw+tV24L1x3Kt2Z2nYhRirWhZ2sGV1r18ao5HFC01kwglpddJUznDc5j90
MQt2LbsN+ipOP1JT/8sCQE4qVh+TeYVd8aXSqlJaTsLZNzDMjmREYfuodmyZp5WR
q1R6SaZoxQltHgTtK85QqhDxmmWPkR6jdNLDlIR0Bx4=
-----END RSA PRIVATE KEY-----""""""

public_key = """"""""-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDtmBQTFLfaYOsio48B0Sbw4qMn
aXJ7Qk4i1gzI+lgLIOPV0YyUfWMKgl24iJsGN6W5Vk+4GfDE7jKGkti9ZsswaJ/1
Un+zFpXlVCOjEe9CZz3npIEKG8jJL1rwnBc2qPY3YD8jWBhLaPUgchbxUbe1Q2eK
DmlRF7B8BzeNG4aVdQIDAQAB
-----END PUBLIC KEY-----""""""

message = 'To be signed'
key = RSA.generate(1024)
pub_key = key.publickey().exportKey(public_key) 
priv_key = key.exportKey(private_key)

h = SHA256.new(message)
print '-----------------'
signer = PKCS1_v1_5.new(key)
signature = signer.sign(h)
print signature
hexlify = codecs.getencoder('hex')
m = hexlify(signature)[0]  #<--- I am sending this hex signature to JS. 
#--------------Code below is to test the verify in python, n it works !   
h = SHA256.new('To be signed')
verifier = PKCS1_v1_5.new(key.publickey())
if verifier.verify(h, signature):
   print ""The signature is authentic.""
else:
   print ""The signature is not authentic.""

for testing to verify in JS, I am using this demo sample page. Its written on the page that Signature value should be hexa decimal encoded 'RSASSA-PKCS1-v1_5' signature, so thats why I am converting my signature to hex value in python, but still the signature doesn't match in JS. 
I've noticed one strange thing in python code, that is, when ever I generate a signature with fixed private key, the signature is not the same. Is this normal ? but in JS it gives me fixed signature every time. 
Note: There is a little bug in JS DEMO sample page,go to the source code and change rsa.signString to rsa.sign. And also, change rsa.verifyString to rsa.verify. I've raised this issue in his Github, he said he'll gona fix it shortly.  
","
when ever I generate a signature with fixed private key, the signature is not the same. Is this normal ?

Not normal. With PKCS#1 v1.5 the signature should always be the same with the same private key.
Check the following:

The SHA256 hash is exactly the same on both ends
I'm not a Python expert, but it also seems weird that you are calling RSA.generate() when you already have key

Given that your Python code is giving different signature every time, I would concentrate my investigation on that part. If a single byte is different in the input data the produced hash is different - so check with your Python code if the hash is changing with the same input data.
","309","<javascript><python><digital-signature><pycrypto>","1","1","2","2017-07-26 15:55:20","","2","1","1816580","","2017-07-06 17:45:58","2017-07-06 09:53:11",""
"44945567","RSA sign in python and verify in JS","I am using pyCrypto PKCS1_v1_5 signature to sign the message. (Original code)
from Crypto.Signature import PKCS1_v1_5
from Crypto.Hash import *
from Crypto.PublicKey import RSA
from Crypto import Random
import base64
import codecs

private_key = """"""-----BEGIN RSA PRIVATE KEY-----
MIICXAIBAAKBgQDtmBQTFLfaYOsio48B0Sbw4qMnaXJ7Qk4i1gzI+lgLIOPV0YyU
fWMKgl24iJsGN6W5Vk+4GfDE7jKGkti9ZsswaJ/1Un+zFpXlVCOjEe9CZz3npIEK
G8jJL1rwnBc2qPY3YD8jWBhLaPUgchbxUbe1Q2eKDmlRF7B8BzeNG4aVdQIDAQAB
AoGBAK+x6Q5fIMHVL6vyxRqz3pb9EWdgm664Tm2GWff44EiCbti717gqrKWl18ZR
Bkpnth5CzDq4vAn0ltpbFvmgXRmnUL8WsxigrL6tf2mcx4QAgcqr4B6er7X738lB
UDSaEiSLmT/hr9Rg6H/P8IoP01tLKnj/gYQd5CVLkh/VD+dVAkEA9InBNnM5ViAM
Aq7lL/+RWc+jfKnT9kWo+X0v7K8fD9/188K45G6zK/9X0J6Qj83dk1uni5QGx1i1
VVBXIlUnqwJBAPi7AEl8nmmohrSsq8YHX6lTTy6EybSgQS4Qu3SBcVl2RoG89BLx
kReqyTRGupZz/fNS9VfGFZU9VOHcFCeVl18CQEOiLgwvRjZp2qiLUtw5pSvf3+nE
1tkQXzHRzAV8Ue0EFnR68MRNUcTjdJhAot8DIzt0aByUrmNIR67274KRZs0CQC1X
kZ7T2+Dw+tV24L1x3Kt2Z2nYhRirWhZ2sGV1r18ao5HFC01kwglpddJUznDc5j90
MQt2LbsN+ipOP1JT/8sCQE4qVh+TeYVd8aXSqlJaTsLZNzDMjmREYfuodmyZp5WR
q1R6SaZoxQltHgTtK85QqhDxmmWPkR6jdNLDlIR0Bx4=
-----END RSA PRIVATE KEY-----""""""

public_key = """"""""-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDtmBQTFLfaYOsio48B0Sbw4qMn
aXJ7Qk4i1gzI+lgLIOPV0YyUfWMKgl24iJsGN6W5Vk+4GfDE7jKGkti9ZsswaJ/1
Un+zFpXlVCOjEe9CZz3npIEKG8jJL1rwnBc2qPY3YD8jWBhLaPUgchbxUbe1Q2eK
DmlRF7B8BzeNG4aVdQIDAQAB
-----END PUBLIC KEY-----""""""

message = 'To be signed'
key = RSA.generate(1024)
pub_key = key.publickey().exportKey(public_key) 
priv_key = key.exportKey(private_key)

h = SHA256.new(message)
print '-----------------'
signer = PKCS1_v1_5.new(key)
signature = signer.sign(h)
print signature
hexlify = codecs.getencoder('hex')
m = hexlify(signature)[0]  #<--- I am sending this hex signature to JS. 
#--------------Code below is to test the verify in python, n it works !   
h = SHA256.new('To be signed')
verifier = PKCS1_v1_5.new(key.publickey())
if verifier.verify(h, signature):
   print ""The signature is authentic.""
else:
   print ""The signature is not authentic.""

for testing to verify in JS, I am using this demo sample page. Its written on the page that Signature value should be hexa decimal encoded 'RSASSA-PKCS1-v1_5' signature, so thats why I am converting my signature to hex value in python, but still the signature doesn't match in JS. 
I've noticed one strange thing in python code, that is, when ever I generate a signature with fixed private key, the signature is not the same. Is this normal ? but in JS it gives me fixed signature every time. 
Note: There is a little bug in JS DEMO sample page,go to the source code and change rsa.signString to rsa.sign. And also, change rsa.verifyString to rsa.verify. I've raised this issue in his Github, he said he'll gona fix it shortly.  
","Someone posted an answer, suggesting me to check python code and told that its NOT normal to get different signature for fixed private key. I don't know for what reason he deleted the answer, but his observation was right. Actually the way I was getting the key pairs in python is totally wrong. I am generating new key pair every time and exporting it to local variable pub_key & priv_key. Instead I should do something like this;
#key = RSA.generate(2048)
#pub_key = RSA.publickey().exportKey(public_key) 
priv_key = RSA.importKey(private_key)
pub_key = RSA.importKey(public_key)

In this way, I get same signature for this fixed private key, and it really matches the signature of JS code :D ... 
","309","<javascript><python><digital-signature><pycrypto>","1","0","2","2017-07-26 15:55:20","","2","1","1816580","","2017-07-06 17:45:58","2017-07-06 09:53:11",""
"55398766","Python Pycryptodome encryption throws ""Ciphertext with incorrect length"" error","In continuation to my previous pycryptodome question my requirement now got changed to support 90G of data for encryption. So I have done some design changes, de-factoring the encryption code and make them all run in the subprocess.
tar zcvf - /array22/vol4/home | openssl des3 -salt | dd of=/dev/st0

The above idea got triggered from here
Now I have 2 files:
encutil.py
#!/usr/bin/python

import sys, os, pwd
from Crypto.PublicKey import RSA
from Crypto.Cipher import AES, PKCS1_OAEP
from Crypto.Random import get_random_bytes

symmetric_key = get_random_bytes(16 * 2)
cipher_rsa = PKCS1_OAEP.new(RSA.import_key(open(""./public.pem"").read()))
enc_symmetric_key = cipher_rsa.encrypt(symmetric_key)
cipher = AES.new(symmetric_key, AES.MODE_GCM)
[sys.stdout.write(x) for x in (enc_symmetric_key, cipher.nonce,"""".join(reversed(cipher.encrypt_and_digest(sys.stdin.read()))))]

main.py
#! /usr/bin/python

import os, sys, time
import tarfile, StringIO, time
from subprocess import Popen, PIPE, call
from Crypto.PublicKey import RSA
from Crypto.Cipher import AES, PKCS1_OAEP
from Crypto.Random import get_random_bytes

print ""Start time %s""%time.time()
try:
    p1=Popen(""tar -czf - ./src"", shell=True, stdout=PIPE)
    p2=Popen(""python ./encutil.py"", shell=True, stdin=p1.stdout, stdout=PIPE)
    FNULL = open(os.devnull, 'w')
    p3=Popen(""/bin/dd bs=10M iflag=fullblock oflag=direct,sync conv=fsync,notrunc,noerror status=progress of=./data.bin"", shell=True, stdin=p2.stdout, stderr=FNULL)
    p3.wait()
except Exception,e:
    raise str(e)
finally:
    p2.stdout.close()
    p1.stdout.close()

def doRestore():
        try:
            privKey = RSA.import_key(open(""./private.pem"").read())
            cipher_rsa = PKCS1_OAEP.new(privKey)
            file_in = open(""./data.bin"", ""rb"")
            enc_symmetric_key, nonce, tag, ciphertext = [file_in.read(x) for x in (privKey.size_in_bytes(), 16, 16, -1)]
            symmetric_key = cipher_rsa.decrypt(enc_symmetric_key)
            cipher = AES.new(symmetric_key, AES.MODE_GCM, nonce)
            tar = tarfile.open(fileobj=StringIO.StringIO(cipher.decrypt_and_verify(ciphertext, tag)), mode='r|*')
            tar.extractall(path='./dst')
        except Exception,e:
            print e
        finally:
            if file_in != None:
                file_in.close()
            if tar != None:
                tar.close()
            os.remove(""./data.bin"")

doRestore()
print ""End time %s""%time.time()

Assume both the public and private keys are available and in place.
And, when I execute the below command after some time of execution I get the error: Ciphertext with incorrect length without any traceback:
/usr/bin/systemd-run --scope -p MemoryLimit=80G ./main.py

But it runs successful for lesser data input, like 40G of data
My system details are:
HW: HP ProLiant DL360 Gen10 with more than 500G of HDD space and 125G of RAM
OS: RHEL7.4 64-bit Kernel: 3.10.0-693.el7.x86_64
Python version: 2.7.5
Pycryptodome version: 3.7.2

If I do not control the memory resource through systemd-run then Python throws MemoryError at some point of execution and fails in the same way with ""Ciphertext with incorrect length."" message
Traceback (most recent call last):
  File ""./encutil.py"", line 12, in <module>
    [sys.stdout.write(x) for x in (enc_symmetric_key, cipher.nonce,"""".join(reversed(cipher.encrypt_and_digest(sys.stdin.read()))))]
  File ""/opt/LEBackupandRestore/lib/3pp/Crypto/Cipher/_mode_gcm.py"", line 547, in encrypt_and_digest
    return self.encrypt(plaintext, output=output), self.digest()
  File ""/opt/LEBackupandRestore/lib/3pp/Crypto/Cipher/_mode_gcm.py"", line 374, in encrypt
    ciphertext = self._cipher.encrypt(plaintext, output=output)
  File ""/opt/LEBackupandRestore/lib/3pp/Crypto/Cipher/_mode_ctr.py"", line 211, in encrypt
    return get_raw_buffer(ciphertext)
  File ""/opt/LEBackupandRestore/lib/3pp/Crypto/Util/_raw_api.py"", line 187, in get_raw_buffer
    return buf.raw
MemoryError
Ciphertext with incorrect length.

I could not get any clue from the solution already proposed in stackoverflow
The original code design is as follows before changes:
#! /usr/bin/python    
import os, pwd, sys
from subprocess import Popen, PIPE, check_call
from BackupRestoreException import BackupRestoreException, ErrorCode
from Crypto.PublicKey import RSA
from Crypto.Cipher import AES, PKCS1_OAEP
from Crypto.Random import get_random_bytes
from Crypto.Util.Padding import pad,unpad
import tarfile,StringIO,time

# Key Generation
key = RSA.generate(2048)
private_key = key.export_key()
file_out = open(""private.pem"", ""wb"")
file_out.write(private_key)
file_out.close()

public_key = key.publickey().export_key()
file_out = open(""public.pem"", ""wb"")
file_out.write(public_key)
file_out.close()

public_key = RSA.import_key(open(""public.pem"").read())
session_key = get_random_bytes(16)
cipher_rsa = PKCS1_OAEP.new(public_key)
enc_session_key = cipher_rsa.encrypt(session_key)

def archiveData():
    cmd = [""tar"", ""--acls"", ""--selinux"", ""-zcPf"", ""-"", ""./src""]
    return Popen(cmd,stdout=PIPE).communicate()[0]

# Encryption
cipher_aes = AES.new(session_key, AES.MODE_EAX)
ciphertext, tag = cipher_aes.encrypt_and_digest(archiveData())
file_out = open(""data.bin"", ""wb"")
[ file_out.write(x) for x in (enc_session_key, cipher_aes.nonce, tag, ciphertext) ]
file_out.close()


# Decryption
private_key = RSA.import_key(open(""private.pem"").read())
file_in = open(""data.bin"", ""rb"")
enc_session_key, nonce, tag, ciphertext = [ file_in.read(x) for x in (private_key.size_in_bytes(), 16, 16, -1) ]
file_in.close()
cipher_rsa = PKCS1_OAEP.new(private_key)
session_key = cipher_rsa.decrypt(enc_session_key)
cipher = AES.new(session_key, AES.MODE_EAX, nonce)
tar = tarfile.open(fileobj=StringIO.StringIO(cipher.decrypt_and_verify(ciphertext, tag)), mode='r|*')
os.chdir(""/home/cfuser/target"")
tar.extractall(path='.')

","I have solved the problem and the below code works for larger datasize. Still any code comments / improvement ideas / suggestions are most welcome!
#! /usr/bin/python

import os, time, tarfile, io
from subprocess import Popen, PIPE, check_call
from Crypto.PublicKey import RSA
from Crypto.Cipher import AES, PKCS1_OAEP
from Crypto.Random import get_random_bytes

print ""****** Start time %s"" % time.time()

BLOCK_SIZE = 16
BIN_FILE = ""/nfs/data.bin""
symmetric_key = get_random_bytes(BLOCK_SIZE * 2)
enc_symmetric_key = PKCS1_OAEP.new(RSA.import_key(open(""./public.pem"").read())).encrypt(symmetric_key)
cipher_rsa_prikey = PKCS1_OAEP.new(RSA.import_key(open(""./private.pem"").read()))

chunk_size = BLOCK_SIZE * 1024 * 1024 + BLOCK_SIZE
tag_size = BLOCK_SIZE
ciphertxt_size = chunk_size - tag_size
nonce_size = BLOCK_SIZE
enc_key_size = RSA.import_key(open(""./private.pem"").read()).size_in_bytes() # 256

def runTarCommand():
    cmd = ""/usr/bin/systemd-run -q --scope -p MemoryLimit=10G tar -czPf - /root/src""
    return Popen(cmd, bufsize=chunk_size, shell=True, stdout=PIPE)

def doNFSBackup():
    try:
        p = runTarCommand()
        with open(BIN_FILE,'wb') as f:
            f.write(enc_symmetric_key)
            while True:
               dataChunk = p.stdout.read(ciphertxt_size)
               if dataChunk:
                  cipher = AES.new(symmetric_key, AES.MODE_GCM)
                  f.write(cipher.nonce + b"""".join(reversed(cipher.encrypt_and_digest(dataChunk))))
               else:
                  break
    except Exception,e:
        print e
    finally:
        p.stdout.close()

def doNFSRestore():
    try:
        extractProc = Popen('tar -C /root/src -xzPf -', bufsize=8192, stdin=PIPE,shell=True)
        file_in = open(BIN_FILE, ""rb"")
        symmetric_key = cipher_rsa_prikey.decrypt(file_in.read(enc_key_size))
        nonce = file_in.read(nonce_size)
        while nonce:
            ciphertxtTag = file_in.read(chunk_size)
            cipher = AES.new(symmetric_key, AES.MODE_GCM, nonce)
            extractProc.stdin.write(cipher.decrypt_and_verify(ciphertxtTag[BLOCK_SIZE:], ciphertxtTag[:BLOCK_SIZE]))
            nonce = file_in.read(nonce_size)
    except Exception,e:
        print e
    finally:
        if file_in != None:
            file_in.close()
        if os.path.exists(BIN_FILE): os.remove(BIN_FILE)

def doTapeBackup():
    def tarinfoFun(tar, bytsIO):
        info = tarfile.TarInfo(name='test.tar')
        info.size = len(bytsIO.getvalue())
        info.mtime = time.time()
        info.mode = 0755
        tar.addfile(tarinfo=info, fileobj=bytsIO)

    try:
        cmd = ""mt -f /dev/nst0 load; mt -f /dev/nst0 rewind; mt -f /dev/nst0 setblk %d"" %(chunk_size + nonce_size)
        check_call(cmd, shell=True)
        p = runTarCommand()
        tar = tarfile.TarFile(""/dev/nst0"", ""w"")

        bytsIO = io.BytesIO()
        bytsIO.write(enc_symmetric_key)
        bytsIO.seek(0)
        tarinfoFun(tar, bytsIO)
        bytsIO.close()

        bytsIO = io.BytesIO()
        bytesread = 0
        while True:
            dataChunk = p.stdout.read(ciphertxt_size)
            if not dataChunk:
                if bytesread != 0:
                    bytsIO.seek(0)
                    tarinfoFun(tar, bytsIO)
                    bytsIO.close()
                p.communicate()
                break
            cipher = AES.new(symmetric_key, AES.MODE_GCM)
            bytsIO.write(cipher.nonce + b"""".join(reversed(cipher.encrypt_and_digest(dataChunk))))
            bytesread += chunk_size + nonce_size
            if bytesread == (chunk_size + nonce_size) * 8:
                bytsIO.seek(0)
                tarinfoFun(tar, bytsIO)
                bytsIO.close()
                bytsIO = io.BytesIO()
                bytesread = 0
    except Exception,e:
        print e
    finally:
        tar.close()
        p.stdout.close()

def doTapeRestore():
    try:
        check_call(""mt -f /dev/nst0 load; mt -f /dev/nst0 rewind"", shell=True, stdout=PIPE)
        p1 = Popen(""tar -xPf /dev/nst0 -O"", shell=True, stdout=PIPE)
        p2 = Popen(""tar -C /nfs -xzPf -"", shell=True, stdin=PIPE)
        symmetric_key = cipher_rsa_prikey.decrypt(p1.stdout.read(enc_key_size))
        while True:
            ciphertxtTag = p1.stdout.read(chunk_size + nonce_size)
            if not ciphertxtTag:
                p2.communicate()
                break
            nonce = ciphertxtTag[:nonce_size]
            cipher = AES.new(symmetric_key, AES.MODE_GCM, nonce)
            p2.stdin.write(cipher.decrypt_and_verify(ciphertxtTag[32:], ciphertxtTag[BLOCK_SIZE:32]))
    except Exception,e:
        print e
    finally:
       pass

doNFSBackup()
doNFSRestore()
doTapeBackup()
doTapeRestore()

print ""****** End time %s"" % time.time()

","308","<python><encryption><pycrypto><pycryptodome>","0","0","2","2019-07-10 08:35:53","55869876","3","","1335601","","2019-04-11 13:50:03","2019-03-28 13:24:25",""
"55398766","Python Pycryptodome encryption throws ""Ciphertext with incorrect length"" error","In continuation to my previous pycryptodome question my requirement now got changed to support 90G of data for encryption. So I have done some design changes, de-factoring the encryption code and make them all run in the subprocess.
tar zcvf - /array22/vol4/home | openssl des3 -salt | dd of=/dev/st0

The above idea got triggered from here
Now I have 2 files:
encutil.py
#!/usr/bin/python

import sys, os, pwd
from Crypto.PublicKey import RSA
from Crypto.Cipher import AES, PKCS1_OAEP
from Crypto.Random import get_random_bytes

symmetric_key = get_random_bytes(16 * 2)
cipher_rsa = PKCS1_OAEP.new(RSA.import_key(open(""./public.pem"").read()))
enc_symmetric_key = cipher_rsa.encrypt(symmetric_key)
cipher = AES.new(symmetric_key, AES.MODE_GCM)
[sys.stdout.write(x) for x in (enc_symmetric_key, cipher.nonce,"""".join(reversed(cipher.encrypt_and_digest(sys.stdin.read()))))]

main.py
#! /usr/bin/python

import os, sys, time
import tarfile, StringIO, time
from subprocess import Popen, PIPE, call
from Crypto.PublicKey import RSA
from Crypto.Cipher import AES, PKCS1_OAEP
from Crypto.Random import get_random_bytes

print ""Start time %s""%time.time()
try:
    p1=Popen(""tar -czf - ./src"", shell=True, stdout=PIPE)
    p2=Popen(""python ./encutil.py"", shell=True, stdin=p1.stdout, stdout=PIPE)
    FNULL = open(os.devnull, 'w')
    p3=Popen(""/bin/dd bs=10M iflag=fullblock oflag=direct,sync conv=fsync,notrunc,noerror status=progress of=./data.bin"", shell=True, stdin=p2.stdout, stderr=FNULL)
    p3.wait()
except Exception,e:
    raise str(e)
finally:
    p2.stdout.close()
    p1.stdout.close()

def doRestore():
        try:
            privKey = RSA.import_key(open(""./private.pem"").read())
            cipher_rsa = PKCS1_OAEP.new(privKey)
            file_in = open(""./data.bin"", ""rb"")
            enc_symmetric_key, nonce, tag, ciphertext = [file_in.read(x) for x in (privKey.size_in_bytes(), 16, 16, -1)]
            symmetric_key = cipher_rsa.decrypt(enc_symmetric_key)
            cipher = AES.new(symmetric_key, AES.MODE_GCM, nonce)
            tar = tarfile.open(fileobj=StringIO.StringIO(cipher.decrypt_and_verify(ciphertext, tag)), mode='r|*')
            tar.extractall(path='./dst')
        except Exception,e:
            print e
        finally:
            if file_in != None:
                file_in.close()
            if tar != None:
                tar.close()
            os.remove(""./data.bin"")

doRestore()
print ""End time %s""%time.time()

Assume both the public and private keys are available and in place.
And, when I execute the below command after some time of execution I get the error: Ciphertext with incorrect length without any traceback:
/usr/bin/systemd-run --scope -p MemoryLimit=80G ./main.py

But it runs successful for lesser data input, like 40G of data
My system details are:
HW: HP ProLiant DL360 Gen10 with more than 500G of HDD space and 125G of RAM
OS: RHEL7.4 64-bit Kernel: 3.10.0-693.el7.x86_64
Python version: 2.7.5
Pycryptodome version: 3.7.2

If I do not control the memory resource through systemd-run then Python throws MemoryError at some point of execution and fails in the same way with ""Ciphertext with incorrect length."" message
Traceback (most recent call last):
  File ""./encutil.py"", line 12, in <module>
    [sys.stdout.write(x) for x in (enc_symmetric_key, cipher.nonce,"""".join(reversed(cipher.encrypt_and_digest(sys.stdin.read()))))]
  File ""/opt/LEBackupandRestore/lib/3pp/Crypto/Cipher/_mode_gcm.py"", line 547, in encrypt_and_digest
    return self.encrypt(plaintext, output=output), self.digest()
  File ""/opt/LEBackupandRestore/lib/3pp/Crypto/Cipher/_mode_gcm.py"", line 374, in encrypt
    ciphertext = self._cipher.encrypt(plaintext, output=output)
  File ""/opt/LEBackupandRestore/lib/3pp/Crypto/Cipher/_mode_ctr.py"", line 211, in encrypt
    return get_raw_buffer(ciphertext)
  File ""/opt/LEBackupandRestore/lib/3pp/Crypto/Util/_raw_api.py"", line 187, in get_raw_buffer
    return buf.raw
MemoryError
Ciphertext with incorrect length.

I could not get any clue from the solution already proposed in stackoverflow
The original code design is as follows before changes:
#! /usr/bin/python    
import os, pwd, sys
from subprocess import Popen, PIPE, check_call
from BackupRestoreException import BackupRestoreException, ErrorCode
from Crypto.PublicKey import RSA
from Crypto.Cipher import AES, PKCS1_OAEP
from Crypto.Random import get_random_bytes
from Crypto.Util.Padding import pad,unpad
import tarfile,StringIO,time

# Key Generation
key = RSA.generate(2048)
private_key = key.export_key()
file_out = open(""private.pem"", ""wb"")
file_out.write(private_key)
file_out.close()

public_key = key.publickey().export_key()
file_out = open(""public.pem"", ""wb"")
file_out.write(public_key)
file_out.close()

public_key = RSA.import_key(open(""public.pem"").read())
session_key = get_random_bytes(16)
cipher_rsa = PKCS1_OAEP.new(public_key)
enc_session_key = cipher_rsa.encrypt(session_key)

def archiveData():
    cmd = [""tar"", ""--acls"", ""--selinux"", ""-zcPf"", ""-"", ""./src""]
    return Popen(cmd,stdout=PIPE).communicate()[0]

# Encryption
cipher_aes = AES.new(session_key, AES.MODE_EAX)
ciphertext, tag = cipher_aes.encrypt_and_digest(archiveData())
file_out = open(""data.bin"", ""wb"")
[ file_out.write(x) for x in (enc_session_key, cipher_aes.nonce, tag, ciphertext) ]
file_out.close()


# Decryption
private_key = RSA.import_key(open(""private.pem"").read())
file_in = open(""data.bin"", ""rb"")
enc_session_key, nonce, tag, ciphertext = [ file_in.read(x) for x in (private_key.size_in_bytes(), 16, 16, -1) ]
file_in.close()
cipher_rsa = PKCS1_OAEP.new(private_key)
session_key = cipher_rsa.decrypt(enc_session_key)
cipher = AES.new(session_key, AES.MODE_EAX, nonce)
tar = tarfile.open(fileobj=StringIO.StringIO(cipher.decrypt_and_verify(ciphertext, tag)), mode='r|*')
os.chdir(""/home/cfuser/target"")
tar.extractall(path='.')

","Check out this rsa helper class I implemented with 
pycryptodome.
https://gist.github.com/kadaliao/4b111855037c8d2aad33627ae1f5817e
It can handle large size message encryption and decryption.
will not see these errors:

""ValueError: Plaintext is too long. ""
""ValueError: Ciphertext with
incorrect length.""

","308","<python><encryption><pycrypto><pycryptodome>","0","0","2","2019-07-10 08:35:53","55869876","3","","1335601","","2019-04-11 13:50:03","2019-03-28 13:24:25",""
"9231652","PyCrypto not loading with mod_wsgi on Windows server 2008","I have a project set up on Windows 2008 Server 64-bit, with Apache 2.2, mod_wsgi 3.3, django 1.2, and python 2.7 (32-bit).
I have installed PyCrypto 2.3 (for 32-bit python 2.7) using the installer found on VoidSpace:
http://www.voidspace.org.uk/python/modules.shtml#pycrypto
When I attempt to import the PyCrypto module via the interpreter, it works perfectly. I then run the Django server using: manage.py runserver
This also is performing as expected, the CSS and other static images do not show properly, but the site is working properly. 
When using mod_wsgi and Apache I instead get a import error, and a note that the DLL's failed to load.
The full stacktrace has been posted on pastebin:
http://pastebin.com/hav7sqB0
I used DependencyWalker to see what dependencies  that may be missing, and downloaded all of the DLL's that appeared to be missing. Those were then copied to both the System32 windows directory, and SysWOW64 directories.
The DependencyWalker app now shows only ""Delayed"" dependency errors, but nothing to block functionality.
I did see the related issue: 
Why do no Python DLLs built with MSVC load with mod_wsgi?
However, as I stated previously, installing with the VoidSpace installers did NOT resolve the issue.
I have tried compiling with MinGW32, and I am getting the error stating that it does not know how to compile on the ""nt"" operating system.
","Try this method of adding a new manifest to Apache.
http://groups.google.com/group/modwsgi/msg/afb025dc949c7051
","305","<windows><mod-wsgi><pycrypto>","0","1","2","2013-01-08 17:53:48","9237951","0","","-1","","2017-05-23 12:27:29","2012-02-10 17:00:03",""
"9231652","PyCrypto not loading with mod_wsgi on Windows server 2008","I have a project set up on Windows 2008 Server 64-bit, with Apache 2.2, mod_wsgi 3.3, django 1.2, and python 2.7 (32-bit).
I have installed PyCrypto 2.3 (for 32-bit python 2.7) using the installer found on VoidSpace:
http://www.voidspace.org.uk/python/modules.shtml#pycrypto
When I attempt to import the PyCrypto module via the interpreter, it works perfectly. I then run the Django server using: manage.py runserver
This also is performing as expected, the CSS and other static images do not show properly, but the site is working properly. 
When using mod_wsgi and Apache I instead get a import error, and a note that the DLL's failed to load.
The full stacktrace has been posted on pastebin:
http://pastebin.com/hav7sqB0
I used DependencyWalker to see what dependencies  that may be missing, and downloaded all of the DLL's that appeared to be missing. Those were then copied to both the System32 windows directory, and SysWOW64 directories.
The DependencyWalker app now shows only ""Delayed"" dependency errors, but nothing to block functionality.
I did see the related issue: 
Why do no Python DLLs built with MSVC load with mod_wsgi?
However, as I stated previously, installing with the VoidSpace installers did NOT resolve the issue.
I have tried compiling with MinGW32, and I am getting the error stating that it does not know how to compile on the ""nt"" operating system.
","Had the same issue with pyodbc.

Grabbed Resource Hacker:
http://www.angusj.com/resourcehacker/
Used it to find and copy the dependency on MSVCR90 in python27/python.exe (under tree 24/1):
<dependentAssembly>
    <assemblyIdentity type=""win32"" name=""Microsoft.VC90.CRT"" version=""9.0.21022.8"" processorArchitecture=""x86"" publicKeyToken=""1fc8b3b9a1e18e3b""></assemblyIdentity> 
</dependentAssembly>

Opened up pyodbc.pyd with Resource Hacker and pasted it into the tree (under tree 24/2):

","305","<windows><mod-wsgi><pycrypto>","0","1","2","2013-01-08 17:53:48","9237951","0","","-1","","2017-05-23 12:27:29","2012-02-10 17:00:03",""
"56775625","Solve Unable to import module 'lambda_function': cannot import name '_AES'","I am trying to deploy my lambda function that makes a requests and decrypts data using pycrypto's module Crypto.Cipher AES. This is how my import looks:
import boto3
from botocore.vendored import requests
import gzip
from io import StringIO, BytesIO
import base64
import sys
from datetime import datetime
import time
from Crypto.Cipher import AES

I run my code in my local Mac Environment and it works perfectly, but when I upload my package to AWS Lambda and test it, I get the following error:
Unable to import module 'lambda_function': cannot import name '_AES'

I checked this question and downloaded the pycrypto package from this git repo, made the build and copied the results to my lambda folder, packaged it and still didn't work.
I checked the result of the build and I noticed that within this folder:
pycrypto-2.6.1/build/lib.linux-x86_64-3.7/Crypto/Cipher

The AES files are generated with an extension related to my Mac OS

I tried building the package on a Linux EC2 instance, but still get the same error (although the files change)

I tried a new path based on the following question but still failed with the exact same error.
"errorMessage": "Unable to import module 'lambda_function'"
Why is AWS Lambda not able to read the AES module in the pycrypto package? I have deployed Lambda function with other external libraries and never faced this issue. 
","This worked for me now using python2: 
https://www.github.com/Doerge/awslambda-pycrypto 
I just downloaded this project and zipped my lambda_function.py file with both the Crypto and pycrypto-2.6.1.dist-info folders.
I see that the compiled .so files in Crypto/Cipher/ (like _AES.so) lack the python version and OS architecture and distribution that mine had (i.e: AES.cpython-27m-x86_64-linux-gnu.so). I will update my answer if I find a way to build the package properly by myself rather than using a third person compiled library.
","301","<python><aws-lambda><pycrypto><zappa>","1","0","1","2019-06-27 23:39:46","56799508","1","","","","","2019-06-26 14:52:06",""
"24252835","Can't Use Pycrypto in Google App Engine Production","I am successfully using Pycrypto vs. 2.6 in my GAE development environment under Python 2.7.  However, deploying it to Google production I see the following error in the logs:
from Crypto.Cipher import _AES ImportError: cannot import name _AES

My App.Yaml:
application: appname
version: 1
runtime: python27
api_version: 1
threadsafe: yes

handlers:
- url: /favicon\.ico
  static_files: favicon.ico
  upload: favicon\.ico

- url: .*
  script: main.app
  secure: always

libraries:
- name: webapp2
  version: ""2.5.2""
- name: pycrypto
  version: ""2.6""

The Python call in question:
from Crypto.Cipher import AES

Checking Google support documents and they do list Pycrypto 2.6 as supported.  I also tried to enter ""latest"" for the version and received the same error.  Again in development GAE on my local machine it works perfectly.
","Issue resolved.  I had a directory from my Windows installation called ""Crypto"" in my App Engine project directory.  When the app loader loaded the files it also included this directory which conflicted with what Google has loaded in production.  Removal of this directory from the local project directory resolved the problem upon the next push to Google.
","298","<python><google-app-engine><pycrypto>","1","1","1","2014-06-16 23:55:56","24253872","0","","","","","2014-06-16 21:51:53",""
"27810325","Import Public Key from GameCenter using PyCrypto on Google App Engine","I'm trying to verify a GameCenter player on a remote server using Apple's documented method:
GKLocalPlayer generateIdentityVerificationSignatureWithCompletionHandler:

Calling this method on iOS returns, among other things, a link to this file (this file location is fairly static, and you can download it to see its contents):
https://sandbox.gc.apple.com/public-key/gc-sb.cer

This file holds the public key that must be downloaded on the server to begin the verification process for the local GameCenter player.
I am using Google App Engine for my project, which limits me to using the PyCrypto library.  I am trying to import this file using these calls (I use the filename directly here for clarity):
from Crypto.PublicKey import RSA 

apple_cert = urllib2.urlopen(""https://sandbox.gc.apple.com/public-key/gc-sb.cer"").read()
rsakey = RSA.importKey(apple_cert) 

Unfortunately, this is failing with the following message:
raise ValueError(""RSA key format is not supported"")

From what I understand, PyCrypto is expecting a DER formatted certificate, which is what I think Apple is supplying.  Does anyone know what I'm doing wrong, or can point me in the right direction?  Thanks.
Also, I have setup my GAE project to use the latest version of PyCrypto, which I think is 2.6.  
The process of getting GameCenter authentication working with Google App Engine is proving to  be very troublesome.
","As it turns out, the reason is because the file downloaded from Apple is actually an X.509 certificate.  The public key has to be extracted from this certificate before it can be used.  This answer is demonstrated in a similar post:
How do I use a X509 certificate with PyCrypto?
For the full solution on validating a GameCenter user using Google App Engine, see my answer in this post:
How to authenticate the GKLocalPlayer on my 'third party server'?
","293","<ios><google-app-engine><game-center><pycrypto>","0","0","1","2015-01-07 21:24:06","","0","","","","","2015-01-07 01:58:34",""
"36534522","Pycrypto string too long to sign/verify","I have this code, but when I run it, it only accepts ""to_address"" variable of a certain lenth. When it is too long, I receive an exception:
  Traceback (most recent call last):
** IDLE Internal Exception: 
  File ""C:\Python27\lib\idlelib\run.py"", line 325, in runcode
    exec code in self.locals
  File ""C:\Python27\lib\idlelib\run.py"", line 111, in main
    seq, request = rpc.request_queue.get(block=True, timeout=0.05)
  File ""C:\Python27\lib\Queue.py"", line 176, in get
    raise Empty
Empty

This is my code:
import hashlib
import sqlite3
import socket
import time
from Crypto.PublicKey import RSA

# import keys
key_file = open('keys.pem','r')
key = RSA.importKey(key_file.read())
public_key = key.publickey()
private_key_readable = str(key.exportKey())
public_key_readable = str(key.publickey().exportKey())
address = hashlib.sha224(public_key_readable).hexdigest()

to_address = str(raw_input (""Send to address: ""))
amount = str(raw_input (""How much to send: ""))
timestamp = str(time.time())

transaction = str(timestamp) +"":""+ str(address) +"":""+ str(to_address) +"":""+ str(amount)
signature = key.sign(transaction, '')
print ""Client: Signature: ""+str(signature)

if public_key.verify(transaction, signature) == True:
    if int(amount) < 0:
        print ""Client: Signature OK, but cannot use negative amounts""

    else:
        ...process...

else:
    print ""Client: Invalid signature""
    raise
#enter transaction end

If anyone knows how to go around this length limitation, it would be appreciated. Do I need to encrypt the string somehow to make it shorter in order to verify it and then decrypt it again?
","Perhaps sign a hash of the transaction. At verification time you can take the hash again verify that.
Regarding the signing of messages, the documentation says:

The piece of data to sign with RSA. It may not be numerically larger
  than the RSA module (n).

Watch out though. The documentation for sign and verify says:

Attention: this function performs the plain, primitive RSA encryption
  (textbook). In real applications, you always need to use proper
  cryptographic padding, and you should not directly verify data with
  this method. Failure to do so may lead to security vulnerabilities. It
  is recommended to use modules Crypto.Signature.PKCS1_PSS or
  Crypto.Signature.PKCS1_v1_5 instead.

https://www.dlitz.net/software/pycrypto/api/current/Crypto.PublicKey.RSA._RSAobj-class.html#publickey
","287","<python><rsa><digital-signature><pycrypto>","1","4","1","2016-04-10 19:51:40","36534684","0","1","1816580","","2016-04-10 19:51:40","2016-04-10 19:29:18",""
"45761016","pycrypto does not reproduce NIST test vectors for AES (CFB mode)","This small python program should encrypt plain to cipher using AES in the CFB mode using a 128bit key
from Crypto.Cipher import AES

#            1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
key   = b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
iv    = b'\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
plain = b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'

aes = AES.new(key, AES.MODE_CFB, iv)
cipher = aes.encrypt(plain)

print(' '.join('{:2x}'.format(b) for b in cipher))

I took this key, IV and plain cipher combination from one of the NIST test vectors (CFB128VarTxt128.rsp). For this particular combination I expect the cipher: 
3a d7 8e 72 6c 1e c0 2b 7e bf e9 2b 23 d9 ec 34

but pycrypto calculates 
3a 81 e1 d4 b8 24 75 61 46 31 63 4b 5c 79 d6 bc

The first byte is correct, whereas the others do not match. I also tried different test vectors, but the result stays the same. All bytes, except for the first byte, do not match.
I am quite sure, that the NIST test vectors are valid since I used them before when using AES with Crypto++ and I am also pretty sure, that the implementation of pycrypto is correct since its output agrees with online tools such as this page. Obviously, it is me, who is using the tools in an incorrect way...
Does anyone have a clue, how to reproduce the NIST test vectors with pycrypto?
This is the NIST example
# CAVS 11.1
# Config info for aes_values
# AESVS VarTxt test data for CFB128
# State : Encrypt and Decrypt
# Key Length : 128
# Generated on Fri Apr 22 15:11:53 2011
...
COUNT = 0
KEY = 00000000000000000000000000000000
IV = 80000000000000000000000000000000
PLAINTEXT = 00000000000000000000000000000000
CIPHERTEXT = 3ad78e726c1ec02b7ebfe92b23d9ec34

","I also get the same results as you when using AES.MODE_CFB, but I get the results you expect when I use AES.MODE_CBC instead.
from Crypto.Cipher import AES

def show(b):
    print(*['{:02x}'.format(u) for u in b])

key   = b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
iv    = b'\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
plain = b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'

crypto = AES.new(key, AES.MODE_CBC, iv)
cipher = crypto.encrypt(plain)
show(cipher)

# We need a fresh AES object to decrypt
crypto = AES.new(key, AES.MODE_CBC, iv)
decoded = crypto.decrypt(cipher)
show(decoded)

output
3a d7 8e 72 6c 1e c0 2b 7e bf e9 2b 23 d9 ec 34
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00

","287","<python><encryption><aes><pycrypto>","2","0","2","2017-08-18 18:01:15","45762441","1","","5106069","","2017-08-18 17:13:29","2017-08-18 16:18:24",""
"45761016","pycrypto does not reproduce NIST test vectors for AES (CFB mode)","This small python program should encrypt plain to cipher using AES in the CFB mode using a 128bit key
from Crypto.Cipher import AES

#            1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
key   = b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
iv    = b'\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
plain = b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'

aes = AES.new(key, AES.MODE_CFB, iv)
cipher = aes.encrypt(plain)

print(' '.join('{:2x}'.format(b) for b in cipher))

I took this key, IV and plain cipher combination from one of the NIST test vectors (CFB128VarTxt128.rsp). For this particular combination I expect the cipher: 
3a d7 8e 72 6c 1e c0 2b 7e bf e9 2b 23 d9 ec 34

but pycrypto calculates 
3a 81 e1 d4 b8 24 75 61 46 31 63 4b 5c 79 d6 bc

The first byte is correct, whereas the others do not match. I also tried different test vectors, but the result stays the same. All bytes, except for the first byte, do not match.
I am quite sure, that the NIST test vectors are valid since I used them before when using AES with Crypto++ and I am also pretty sure, that the implementation of pycrypto is correct since its output agrees with online tools such as this page. Obviously, it is me, who is using the tools in an incorrect way...
Does anyone have a clue, how to reproduce the NIST test vectors with pycrypto?
This is the NIST example
# CAVS 11.1
# Config info for aes_values
# AESVS VarTxt test data for CFB128
# State : Encrypt and Decrypt
# Key Length : 128
# Generated on Fri Apr 22 15:11:53 2011
...
COUNT = 0
KEY = 00000000000000000000000000000000
IV = 80000000000000000000000000000000
PLAINTEXT = 00000000000000000000000000000000
CIPHERTEXT = 3ad78e726c1ec02b7ebfe92b23d9ec34

","You are missing a keyword argument, segment_size, in your AES.new(...) call. This is the feedback size, and it defaults to 8. If your line of code is changed to 
aes = AES.new(key, AES.MODE_CFB, iv, segment_size=128)

you get the correct result.
As stated in the docs:

segment_size (integer) - (Only MODE_CFB).The number of bits the
  plaintext and ciphertext are segmented in. It must be a multiple of 8.
  If 0 or not specified, it will be assumed to be 8.

Your results correspond to what would likely be labeled ""CFB8"" in NIST docs.
","287","<python><encryption><aes><pycrypto>","2","3","2","2017-08-18 18:01:15","45762441","1","","5106069","","2017-08-18 17:13:29","2017-08-18 16:18:24",""
"52942268","Are there any python modules to store passwords securely in .conf/.txt files?","I am trying to read and write username and password in a secured manner. With my current implementation I am following AES-CBC encryption/decryption but storing the encrypted username the with random key in a config file is a security issue. I found an option that keystore is a better way of storing passwords. I have checked similar question but the information is not clear to me. Another option that I found is the keyring, it is working fine in windows but on Linux , I am getting following error. I have checked for the possible solutions but couldn't find one.
python keyring-test.py
Traceback (most recent call last):
  File ""keyring-test.py"", line 3, in <module>
    keyring.set_password(service_name=""demo-service"",username=""admin"",password=""test"")
  File ""/usr/lib/python2.7/site-packages/keyring/core.py"", line 64, in set_password
    _keyring_backend.set_password(service_name, username, password)
  File ""/usr/lib/python2.7/site-packages/keyring/backends/fail.py"", line 23, in get_password
    raise RuntimeError(msg)
RuntimeError: No recommended backend was available. Install the keyrings.alt package if you want to use the non-recommended backends. See README.rst for details.

Can someone suggest me any better solution or modules from python to store passwords securely? 
","My implementation whas this:
I made a random string and store it to a txt file then encrypt its bytes file under a key! I use two function that i have made which the def encrypt_file takes a file encrypt their bytes and returns an encrypted file and def dencrypt_file does the opposite . 
from Crypto.Cipher import AES
import hashlib
import os
import pathlib

def encrypt_file(key,filein,fileout=None,IV=None):
    modes = [1,2,8,3,6,9,11,12,10,5]
    if os.path.isfile(filein):
        if IV == None:
            IV = 16 * b'\x00'
        else:
            IV = IV.encode(""utf-8"")
        if len(IV)==16:
            if fileout == None:
                fileout_path = pathlib.Path(filein).parent
                fileout_name = pathlib.Path(filein).name
            else:
                fileout_path = pathlib.Path(fileout).parent
                fileout_name = pathlib.Path(fileout).name
                print (fileout_path, fileout_name )
                if os.path.exists(fileout_path) == False:
                    print(""Path Does Not Exists"")
                    return

            encryptor = AES.new(hashlib.sha256(key.encode(""utf-8"")).digest(), 3, IV=IV)
            with open(filein,""rb"") as f :
                f = f.read()
                encr_bytes = encryptor.encrypt(f)
                file = open(str(fileout_path)+""\\""+str(fileout_name)+"".enc"",""wb"")
                file.write(encr_bytes)
                file.close()
                del encryptor
        else:
            print (""IV must 16 bytes long"")
            return
    else:
        print(""No file path"")
        return




def dencrypt_file(key,filein,fileout=None,IV=None,TXT = False):
    if os.path.isfile(filein):
        if IV == None:
            IV = 16 * b'\x00'
        else:
            IV = IV.encode(""utf-8"")
        if len(IV)==16:
            if fileout == None:
                fileout_path = pathlib.Path(filein).parent
                fileout_name = pathlib.Path(filein).name
                list_name = fileout_name.split(""."")
            else:
                fileout_path = pathlib.Path(fileout).parent
                fileout_name = pathlib.Path(fileout).name
                list_name =  fileout_name.split(""."")
                if os.path.exists(fileout_path) == False:
                    print(""Path Does Not Exists"")
                    return
            file_name = list_name[0] + ""."" + list_name[1]
            if os.path.isfile(str(fileout_path)+""\\""+str(file_name)):
                file_name = list_name[0] + ""new"" +""."" + list_name[1]
                print(file_name, ""OK"")
            else:
                file_name = file_name
            final_path = str(fileout_path) + ""\\"" +  file_name
            encryptor = AES.new(hashlib.sha256(key.encode(""utf-8"")).digest(), 3, IV=IV)
            with open(filein,""rb"") as f :
                if TXT == False:
                    file = open(final_path,""wb"")
                    file.write(encryptor.decrypt(f.read()))
                    file.close()
                else:
                    return encryptor.decrypt(f.read()).decode(""utf-8"")
        else:
            print (""IV must 16 bytes long"")
            return
    else:
        print(""No file path"")
return 

The parameters are 

key : your secret key
filein : the file that you want to encrypt
fileout : the output file
IV : the initialization Vector

","286","<python><pycrypto><python-keyring><pyjks>","-1","0","1","2018-10-23 10:39:14","52946964","5","","6314389","","2018-10-23 10:26:55","2018-10-23 06:15:55",""
"48964004","private encrypt (generate signature) using cryptography/ pycrypto as generated by M2Crypto","I am trying to generate a signature for a payload. My tech stack is in Python3.6, which provides library like cryptography or pycrypto. Problem is, I am unable to recreate the function private_encrypt of M2Crypto in libraries like cryptography. The signature generated by M2Crypto is accepted by my peer end as valid signature, while the ones generated by either two libraries are discarded saying invalid signature. 
I have created a minimal POC using python2.7 to make my case. 
import base64

payload = b'This is the payload for which I wish to generate signature'

### Using library cryptography ###
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import serialization, hashes
from cryptography.hazmat.primitives.asymmetric import padding

with open(""private_key"", ""rb"") as key_file:
    private_key = serialization.load_pem_private_key(
        key_file.read(),
        password=None,
        backend=default_backend()
    )


signature = private_key.sign(
    payload,
    padding=padding.PKCS1v15(),
    algorithm=hashes.SHA1()
)
encoded_signature = base64.b16encode(signature)
print(""Signature using cryptography - "", encoded_signature)


### Using library pycrypto ###
from Crypto.Signature import PKCS1_v1_5, PKCS1_PSS
from Crypto.Hash import SHA
from Crypto.PublicKey import RSA

key = RSA.importKey(open('private_key').read())
h = SHA.new(payload)
signer = PKCS1_v1_5.new(key)
signature = signer.sign(h)
encoded_signature = base64.b16encode(signature)
print(""Signature using pycrypto - "", encoded_signature)


### Using M2Crypto ###
import hashlib
import M2Crypto
digest = hashlib.sha1(payload).hexdigest()
private_key = M2Crypto.RSA.load_key('./private_key')

# Encrypt digest using private key and encode in Hex (Base16)
encoded_signature = base64.b16encode(private_key.private_encrypt(
    digest, M2Crypto.RSA.pkcs1_padding))
print(""Signature using M2Crypto - "", encoded_signature)

The signatures created by cryptography and Crypto are same, and different from one generated by M2Crypto. TIA. 
","","285","<python><rsa><pycrypto><m2crypto><python-cryptography>","4","","0","2018-03-01 03:55:28","","1","1","520554","","2018-03-01 03:55:28","2018-02-24 14:40:10",""
"55586710","how to encrypt decrypt data between angular app and django app","We are having a scenario in which our angular app calls our backend APIs (developed using django rest framework). We are using Jwt for API authentication. We have one endpoint url which takes username and password (POST request) and authenticate the user using django backends. We have deployed both the application on APACHE HTTP Server and using SSL (Https) for encryption. 
But we also want to encrypt the request payload (data sent to the django API). In current case encrypt the username and password from angular app and decrypt the corresponding data in django. For this, we are using CryptoJs in angular app and Pycrypto in Django. But we are unable to decrypt the data in django.
Here is the decrypt function code we are using on django app:
MODE = AES.MODE_CBC

key = 'k%eu6sy)h&vue#5yrpok#1)^1ya#l1t('

def decrypt(ciphertext,key, mode):
    encobj = AES.new('k%eu6sy)h&vue#5yrpok#1)^1ya#l1t(', AES.MODE_CBC)
    decrypted = encobj.decrypt(ciphertext)
    return decrypted.decode('utf-8')



ciphertext_user_name=request.data['username'].encode(""utf8"")
ciphertext_pwd=request.data['password'].encode(""utf8"")
usr = decrypt(ciphertext_user_name,key,MODE)
pwd = decrypt(ciphertext_pwd,key,MODE)


We are using CBC mode in CryptoJs as well. 
Above code is just a sample code. Can somebody suggest, is this the right approach to go, or we should change the approach and do something else.
Thanks in advance !
","
Can somebody suggest, is this the right approach to go

Why do you want to encrypting the payload separately (outside ssl)? 
When it comes to credentials (username, password), if you encrypt in the browser, you need to have a key inside the script somewhere. That doesn't add anything to security, only increases the solution complexity. 
You may use an asymmetric cipher (RSA, ECC) to encrypt data using server's public key. Oh, wait - HTTPS does that already for you.
Client side encryption may have its place where you don't want the server to access the data (e.g. secured messaging, password manager, ..), however for username and password the server needs to read and process the credentials anyway. 

But we are unable to decrypt the data in django.

Here we have no idea how do you encrypt data on the client side. You may try to edit your question and add the encryption code and error message

or we should change the approach and do something else

Though there are definitely some issues in your code (I am unable to tell if it's all of them)

ciphertext (encrypted data) are usually binary (having non-printable characters). That's why when passing as parameters, the data are usually encoded to printable common characters (hex, base64, ..). I see you directly decrypt the parameters, are you sure the data are not encoded / posted  correctly?
I see you are not using any IV (initialization vector for CBC mode). I assume you library used will just use zero array IV. Using static / zero IV is VERY unsafe for CBC mode (or any mode generally). Are you sure the client doesn't include some sort of IV? 
CBC mode is malleable, you should apply some integrity check (with the integrity secret in the client script it doesn't add any value either)

This all is already done (and done well) using HTTPS, so so you are just trying to implement another layer of encryption with not really added value (and as well with apparent weaknesses). I believe common advice here is to lean on HTTPS with confidence
","283","<encryption><cryptojs><pycrypto>","0","1","1","2019-04-09 11:56:08","","0","","","","","2019-04-09 06:51:31",""
"42568468","RSA : decrypt openSSL certificate","I am trying to decrypt an encrypted openSSL certificate using the Crypto library.
For that, I use the following function :
def decryptMessage(privateKeyString, encryptedMessage):

    print 'Enter private key pass phrase'
    passPhrase = raw_input()

    privateKey= RSA.importKey(privateKeyString, passPhrase)

    return privateKey.decrypt(ast.literal_eval(str(encryptedMessage)))

This function works fine with small strings such as foo or lorem ipsum.
However, when I try to decrypt a larger string such as an OpenSSL certificate, the decryption fails and returns this
 #«$,^5ô¦┬{¯9██─╚áW¸ÍÀóÂ╗ö▓├ô{Òv&s´À;d▒§= I×òòòÿÞ:Mu▄ñ├Zc╬a╣fÙ╚g╝z¯¹þÞÖ*└²}?õÑ:~Ì ôı*▓açõ─░3Ñz{³é├     p}7Ä¬/tıN®╣¥‗Pzô£▄¤▄╩Ý,æQ'mfî.«¯┴C%tÏ­ýõ/ñlÚ0╗ò¼(Ï5▓ø5Ì└ûƒuƒä£█ÂF=)─y@O~§LßÆ▄Ð░mËÅ9Uwõh▀Û/▓Ï,APð HÑªm■Îç¼""§Ô,XvÓÏÄÃM■▓v╠@örÂùuE­
Thus, I'd like to know how my function fails to decrypt bigger strings.
","RSA is for en/decrypting small chunks of data, e. g. a random number which is then used for en/decrypting the communication using a block cipher like AES.  Large chunks of data are simply not supported by asymmetric encryption algorithms like RSA.
Your approach seems to lack the knowledge needed for doing encryption right.  This is very dangerous.  I propose to have a look at the ""cryptography"" Python package which contains everything you will need: https://pypi.python.org/pypi/cryptography
There are also some very nice Youtube videos of presentations before an audience the developers of this package made in which they explain how to use what and how they develop cryptography.
","280","<python><python-2.7><encryption><rsa><pycrypto>","0","1","1","2017-03-03 00:45:18","42568647","0","","","","","2017-03-03 00:24:22",""
"41700910","Encrypt with Crypto++ and Decrypt with Python.CRYPTO","I'm working on a project that uses Crypto++ to encrypt some data using RSA.
Here is my Crypto++ code: 
string plain = ""Text123"", encoded, cipher;
string pkey = ""..."";

StringSource ss1(pkey, true);
RSA::PublicKey publicKey;
PEM_Load(ss, publicKey);
RSAES_OAEP_SHA_Encryptor e(publicKey);

StringSource ss2(plain, true,
    new PK_EncryptorFilter(prng, e,
        new StringSink(cipher)
    ) 
); 

StringSource ss3(cipher, true,
    new Base64Encoder(
        new StringSink(encoded)
    )
);
cout << encoded;

And I'm trying to decrypt the encrypted message in Python. Here is my Python code: 
from Crypto.PublicKey import RSA
from base64 import b64decode  

cipher_text = ""[THE OUTPUT OF C++]""
rsakey = RSA.importKey(open(""private.txt"", ""r"").read())
raw_cipher_data = b64decode(cipher_text)
decrypted = rsakey.decrypt(raw_cipher_data)

But I'm getting unreadable characters.
Whys am I getting unreadable characters? Can any one help me with this?
Thanks in advance.
","","278","<python><c++><encryption><pycrypto><crypto++>","2","","0","2017-01-17 23:36:25","","1","","608639","","2017-01-17 23:36:25","2017-01-17 15:24:31",""
"45231430","Different outputs from openssl command and pycrypto when encrypting with Triple DES in CFB mode","I'm now trying to encrypt some plain texts with given 3 keys and initialization vector (iv) with Triple DES algorithm in CFB mode. My implementation in python using pycrypto is as follows.
import base64
from Crypto.Cipher import DES3

key1 = b'key1____'
key2 = b'key2____'
key3 = b'key3____'
key = key1 + key2 + key3
initialization_vector = b'init____'

des3 = DES3.new(key, mode=DES3.MODE_CFB, IV=initialization_vector)
plain_text = ""this is plain text.""
encrpted = des3.encrypt(plain_text)
b64 = base64.b64encode(encrpted)

print('key = {}'.format(key.hex()))
print('iv = {}'.format(initialization_vector.hex()))
print('encrypted = {}'.format(b64.decode()))

This program outputs:
key = 6b6579315f5f5f5f6b6579325f5f5f5f6b6579335f5f5f5f
iv = 696e69745f5f5f5f
encrypted = TGlbmL795TWPX0h39F19N6WZ6Q==

To cross-check the result, I compared this output from python and the one from openssl command. But the openssl outputs different result.
$ echo -n ""this is plain text."" | openssl des-ede3-cfb -K 6b6579315f5f5f5f6b6579325f5f5f5f6b6579335f5f5f5f -iv 696e69745f5f5f5f -base64
TEkV+qFiNHi+C8cxpG2qyzGw9A==

Why does the outputs vary even though the algorithm and the mode are same? Any help is greatly appreciated.
","I have solved the problem by myself. The difference was the default segment size for CFB. pycrypto's default is 8 bits, but openssl's default is 64bits. I've got a same result by specifying segment size in openssl command as follows.
~$ echo -n ""this is plain text."" | openssl des-ede3-cfb8 -K 6b6579315f5f5f5f6b6579325f5f5f5f6b6579335f5f5f5f -iv 696e69745f5f5f5f -base64
TGlbmL795TWPX0h39F19N6WZ6Q==

","270","<python><encryption><openssl><pycrypto>","0","3","1","2017-07-21 10:12:57","45235001","0","","","","","2017-07-21 07:19:56",""
"45711695","Error Python 3.6, WIN10 , Error Installing pycrpto","I have a problem with installing a library (pycrypto,  using ""pip install pycrypto"")  in python 3.6 (windows 10).
i have searched  about my problem and some answers says that i need to install this http://landinghub.visualstudio.com/visual-cpp-build-tools , but it did not solve the issue , 
the code :
C:\WINDOWS\system32>pip install pycrypto
Collecting pycrypto
  Using cached pycrypto-2.6.1.tar.gz
Installing collected packages: pycrypto
  Running setup.py install for pycrypto ... error
    Complete output from command c:\users\devil-pc\appdata\local\programs\python\python36-32\python.exe -u -c ""import setuptools, tokenize;__file__='C:\\Users\\Devil-PC\\AppData\\Local\\Temp\\pip-build-2lnkn32w\\pycrypto\\setup.py';f=getattr(tokenize, 'open', open)(__file__);code=f.read().replace('\r\n', '\n');f.close();exec(compile(code, __file__, 'exec'))"" install --record C:\Users\Devil-PC\AppData\Local\Temp\pip-woepuan3-record\install-record.txt --single-version-externally-managed --compile:
    running install
    running build
    running build_py
    creating build
    creating build\lib.win32-3.6
    creating build\lib.win32-3.6\Crypto
    copying lib\Crypto\pct_warnings.py -> build\lib.win32-3.6\Crypto
    copying lib\Crypto\__init__.py -> build\lib.win32-3.6\Crypto
    creating build\lib.win32-3.6\Crypto\Hash
    copying lib\Crypto\Hash\hashalgo.py -> build\lib.win32-3.6\Crypto\Hash
    copying lib\Crypto\Hash\HMAC.py -> build\lib.win32-3.6\Crypto\Hash
    copying lib\Crypto\Hash\MD2.py -> build\lib.win32-3.6\Crypto\Hash
    copying lib\Crypto\Hash\MD4.py -> build\lib.win32-3.6\Crypto\Hash
    copying lib\Crypto\Hash\MD5.py -> build\lib.win32-3.6\Crypto\Hash
    copying lib\Crypto\Hash\RIPEMD.py -> build\lib.win32-3.6\Crypto\Hash
    copying lib\Crypto\Hash\SHA.py -> build\lib.win32-3.6\Crypto\Hash
    copying lib\Crypto\Hash\SHA224.py -> build\lib.win32-3.6\Crypto\Hash
    copying lib\Crypto\Hash\SHA256.py -> build\lib.win32-3.6\Crypto\Hash
    copying lib\Crypto\Hash\SHA384.py -> build\lib.win32-3.6\Crypto\Hash
    copying lib\Crypto\Hash\SHA512.py -> build\lib.win32-3.6\Crypto\Hash
    copying lib\Crypto\Hash\__init__.py -> build\lib.win32-3.6\Crypto\Hash
    creating build\lib.win32-3.6\Crypto\Cipher
    copying lib\Crypto\Cipher\AES.py -> build\lib.win32-3.6\Crypto\Cipher
    copying lib\Crypto\Cipher\ARC2.py -> build\lib.win32-3.6\Crypto\Cipher
    copying lib\Crypto\Cipher\ARC4.py -> build\lib.win32-3.6\Crypto\Cipher
    copying lib\Crypto\Cipher\blockalgo.py -> build\lib.win32-3.6\Crypto\Cipher
    copying lib\Crypto\Cipher\Blowfish.py -> build\lib.win32-3.6\Crypto\Cipher
    copying lib\Crypto\Cipher\CAST.py -> build\lib.win32-3.6\Crypto\Cipher
    copying lib\Crypto\Cipher\DES.py -> build\lib.win32-3.6\Crypto\Cipher
    copying lib\Crypto\Cipher\DES3.py -> build\lib.win32-3.6\Crypto\Cipher
    copying lib\Crypto\Cipher\PKCS1_OAEP.py -> build\lib.win32-3.6\Crypto\Cipher
    copying lib\Crypto\Cipher\PKCS1_v1_5.py -> build\lib.win32-3.6\Crypto\Cipher
    copying lib\Crypto\Cipher\XOR.py -> build\lib.win32-3.6\Crypto\Cipher
    copying lib\Crypto\Cipher\__init__.py -> build\lib.win32-3.6\Crypto\Cipher
    creating build\lib.win32-3.6\Crypto\Util
    copying lib\Crypto\Util\asn1.py -> build\lib.win32-3.6\Crypto\Util
    copying lib\Crypto\Util\Counter.py -> build\lib.win32-3.6\Crypto\Util
    copying lib\Crypto\Util\number.py -> build\lib.win32-3.6\Crypto\Util
    copying lib\Crypto\Util\py3compat.py -> build\lib.win32-3.6\Crypto\Util
    copying lib\Crypto\Util\randpool.py -> build\lib.win32-3.6\Crypto\Util
    copying lib\Crypto\Util\RFC1751.py -> build\lib.win32-3.6\Crypto\Util
    copying lib\Crypto\Util\winrandom.py -> build\lib.win32-3.6\Crypto\Util
    copying lib\Crypto\Util\_number_new.py -> build\lib.win32-3.6\Crypto\Util
    copying lib\Crypto\Util\__init__.py -> build\lib.win32-3.6\Crypto\Util
    creating build\lib.win32-3.6\Crypto\Random
    copying lib\Crypto\Random\random.py -> build\lib.win32-3.6\Crypto\Random
    copying lib\Crypto\Random\_UserFriendlyRNG.py -> build\lib.win32-3.6\Crypto\Random
    copying lib\Crypto\Random\__init__.py -> build\lib.win32-3.6\Crypto\Random
    creating build\lib.win32-3.6\Crypto\Random\Fortuna
    copying lib\Crypto\Random\Fortuna\FortunaAccumulator.py -> build\lib.win32-3.6\Crypto\Random\Fortuna
    copying lib\Crypto\Random\Fortuna\FortunaGenerator.py -> build\lib.win32-3.6\Crypto\Random\Fortuna
    copying lib\Crypto\Random\Fortuna\SHAd256.py -> build\lib.win32-3.6\Crypto\Random\Fortuna
    copying lib\Crypto\Random\Fortuna\__init__.py -> build\lib.win32-3.6\Crypto\Random\Fortuna
    creating build\lib.win32-3.6\Crypto\Random\OSRNG
    copying lib\Crypto\Random\OSRNG\fallback.py -> build\lib.win32-3.6\Crypto\Random\OSRNG
    copying lib\Crypto\Random\OSRNG\nt.py -> build\lib.win32-3.6\Crypto\Random\OSRNG
    copying lib\Crypto\Random\OSRNG\posix.py -> build\lib.win32-3.6\Crypto\Random\OSRNG
    copying lib\Crypto\Random\OSRNG\rng_base.py -> build\lib.win32-3.6\Crypto\Random\OSRNG
    copying lib\Crypto\Random\OSRNG\__init__.py -> build\lib.win32-3.6\Crypto\Random\OSRNG
    creating build\lib.win32-3.6\Crypto\SelfTest
    copying lib\Crypto\SelfTest\st_common.py -> build\lib.win32-3.6\Crypto\SelfTest
    copying lib\Crypto\SelfTest\__init__.py -> build\lib.win32-3.6\Crypto\SelfTest
    creating build\lib.win32-3.6\Crypto\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\common.py -> build\lib.win32-3.6\Crypto\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_AES.py -> build\lib.win32-3.6\Crypto\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_ARC2.py -> build\lib.win32-3.6\Crypto\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_ARC4.py -> build\lib.win32-3.6\Crypto\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_Blowfish.py -> build\lib.win32-3.6\Crypto\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_CAST.py -> build\lib.win32-3.6\Crypto\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_DES.py -> build\lib.win32-3.6\Crypto\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_DES3.py -> build\lib.win32-3.6\Crypto\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_pkcs1_15.py -> build\lib.win32-3.6\Crypto\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_pkcs1_oaep.py -> build\lib.win32-3.6\Crypto\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_XOR.py -> build\lib.win32-3.6\Crypto\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\__init__.py -> build\lib.win32-3.6\Crypto\SelfTest\Cipher
    creating build\lib.win32-3.6\Crypto\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\common.py -> build\lib.win32-3.6\Crypto\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_HMAC.py -> build\lib.win32-3.6\Crypto\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_MD2.py -> build\lib.win32-3.6\Crypto\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_MD4.py -> build\lib.win32-3.6\Crypto\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_MD5.py -> build\lib.win32-3.6\Crypto\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_RIPEMD.py -> build\lib.win32-3.6\Crypto\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_SHA.py -> build\lib.win32-3.6\Crypto\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_SHA224.py -> build\lib.win32-3.6\Crypto\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_SHA256.py -> build\lib.win32-3.6\Crypto\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_SHA384.py -> build\lib.win32-3.6\Crypto\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_SHA512.py -> build\lib.win32-3.6\Crypto\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\__init__.py -> build\lib.win32-3.6\Crypto\SelfTest\Hash
    creating build\lib.win32-3.6\Crypto\SelfTest\Protocol
    copying lib\Crypto\SelfTest\Protocol\test_AllOrNothing.py -> build\lib.win32-3.6\Crypto\SelfTest\Protocol
    copying lib\Crypto\SelfTest\Protocol\test_chaffing.py -> build\lib.win32-3.6\Crypto\SelfTest\Protocol
    copying lib\Crypto\SelfTest\Protocol\test_KDF.py -> build\lib.win32-3.6\Crypto\SelfTest\Protocol
    copying lib\Crypto\SelfTest\Protocol\test_rfc1751.py -> build\lib.win32-3.6\Crypto\SelfTest\Protocol
    copying lib\Crypto\SelfTest\Protocol\__init__.py -> build\lib.win32-3.6\Crypto\SelfTest\Protocol
    creating build\lib.win32-3.6\Crypto\SelfTest\PublicKey
    copying lib\Crypto\SelfTest\PublicKey\test_DSA.py -> build\lib.win32-3.6\Crypto\SelfTest\PublicKey
    copying lib\Crypto\SelfTest\PublicKey\test_ElGamal.py -> build\lib.win32-3.6\Crypto\SelfTest\PublicKey
    copying lib\Crypto\SelfTest\PublicKey\test_importKey.py -> build\lib.win32-3.6\Crypto\SelfTest\PublicKey
    copying lib\Crypto\SelfTest\PublicKey\test_RSA.py -> build\lib.win32-3.6\Crypto\SelfTest\PublicKey
    copying lib\Crypto\SelfTest\PublicKey\__init__.py -> build\lib.win32-3.6\Crypto\SelfTest\PublicKey
    creating build\lib.win32-3.6\Crypto\SelfTest\Random
    copying lib\Crypto\SelfTest\Random\test_random.py -> build\lib.win32-3.6\Crypto\SelfTest\Random
    copying lib\Crypto\SelfTest\Random\test_rpoolcompat.py -> build\lib.win32-3.6\Crypto\SelfTest\Random
    copying lib\Crypto\SelfTest\Random\test__UserFriendlyRNG.py -> build\lib.win32-3.6\Crypto\SelfTest\Random
    copying lib\Crypto\SelfTest\Random\__init__.py -> build\lib.win32-3.6\Crypto\SelfTest\Random
    creating build\lib.win32-3.6\Crypto\SelfTest\Random\Fortuna
    copying lib\Crypto\SelfTest\Random\Fortuna\test_FortunaAccumulator.py -> build\lib.win32-3.6\Crypto\SelfTest\Random\Fortuna
    copying lib\Crypto\SelfTest\Random\Fortuna\test_FortunaGenerator.py -> build\lib.win32-3.6\Crypto\SelfTest\Random\Fortuna
    copying lib\Crypto\SelfTest\Random\Fortuna\test_SHAd256.py -> build\lib.win32-3.6\Crypto\SelfTest\Random\Fortuna
    copying lib\Crypto\SelfTest\Random\Fortuna\__init__.py -> build\lib.win32-3.6\Crypto\SelfTest\Random\Fortuna
    creating build\lib.win32-3.6\Crypto\SelfTest\Random\OSRNG
    copying lib\Crypto\SelfTest\Random\OSRNG\test_fallback.py -> build\lib.win32-3.6\Crypto\SelfTest\Random\OSRNG
    copying lib\Crypto\SelfTest\Random\OSRNG\test_generic.py -> build\lib.win32-3.6\Crypto\SelfTest\Random\OSRNG
    copying lib\Crypto\SelfTest\Random\OSRNG\test_nt.py -> build\lib.win32-3.6\Crypto\SelfTest\Random\OSRNG
    copying lib\Crypto\SelfTest\Random\OSRNG\test_posix.py -> build\lib.win32-3.6\Crypto\SelfTest\Random\OSRNG
    copying lib\Crypto\SelfTest\Random\OSRNG\test_winrandom.py -> build\lib.win32-3.6\Crypto\SelfTest\Random\OSRNG
    copying lib\Crypto\SelfTest\Random\OSRNG\__init__.py -> build\lib.win32-3.6\Crypto\SelfTest\Random\OSRNG
    creating build\lib.win32-3.6\Crypto\SelfTest\Util
    copying lib\Crypto\SelfTest\Util\test_asn1.py -> build\lib.win32-3.6\Crypto\SelfTest\Util
    copying lib\Crypto\SelfTest\Util\test_Counter.py -> build\lib.win32-3.6\Crypto\SelfTest\Util
    copying lib\Crypto\SelfTest\Util\test_number.py -> build\lib.win32-3.6\Crypto\SelfTest\Util
    copying lib\Crypto\SelfTest\Util\test_winrandom.py -> build\lib.win32-3.6\Crypto\SelfTest\Util
    copying lib\Crypto\SelfTest\Util\__init__.py -> build\lib.win32-3.6\Crypto\SelfTest\Util
    creating build\lib.win32-3.6\Crypto\SelfTest\Signature
    copying lib\Crypto\SelfTest\Signature\test_pkcs1_15.py -> build\lib.win32-3.6\Crypto\SelfTest\Signature
    copying lib\Crypto\SelfTest\Signature\test_pkcs1_pss.py -> build\lib.win32-3.6\Crypto\SelfTest\Signature
    copying lib\Crypto\SelfTest\Signature\__init__.py -> build\lib.win32-3.6\Crypto\SelfTest\Signature
    creating build\lib.win32-3.6\Crypto\Protocol
    copying lib\Crypto\Protocol\AllOrNothing.py -> build\lib.win32-3.6\Crypto\Protocol
    copying lib\Crypto\Protocol\Chaffing.py -> build\lib.win32-3.6\Crypto\Protocol
    copying lib\Crypto\Protocol\KDF.py -> build\lib.win32-3.6\Crypto\Protocol
    copying lib\Crypto\Protocol\__init__.py -> build\lib.win32-3.6\Crypto\Protocol
    creating build\lib.win32-3.6\Crypto\PublicKey
    copying lib\Crypto\PublicKey\DSA.py -> build\lib.win32-3.6\Crypto\PublicKey
    copying lib\Crypto\PublicKey\ElGamal.py -> build\lib.win32-3.6\Crypto\PublicKey
    copying lib\Crypto\PublicKey\pubkey.py -> build\lib.win32-3.6\Crypto\PublicKey
    copying lib\Crypto\PublicKey\RSA.py -> build\lib.win32-3.6\Crypto\PublicKey
    copying lib\Crypto\PublicKey\_DSA.py -> build\lib.win32-3.6\Crypto\PublicKey
    copying lib\Crypto\PublicKey\_RSA.py -> build\lib.win32-3.6\Crypto\PublicKey
    copying lib\Crypto\PublicKey\_slowmath.py -> build\lib.win32-3.6\Crypto\PublicKey
    copying lib\Crypto\PublicKey\__init__.py -> build\lib.win32-3.6\Crypto\PublicKey
    creating build\lib.win32-3.6\Crypto\Signature
    copying lib\Crypto\Signature\PKCS1_PSS.py -> build\lib.win32-3.6\Crypto\Signature
    copying lib\Crypto\Signature\PKCS1_v1_5.py -> build\lib.win32-3.6\Crypto\Signature
    copying lib\Crypto\Signature\__init__.py -> build\lib.win32-3.6\Crypto\Signature
    Skipping optional fixer: buffer
    Skipping optional fixer: idioms
    Skipping optional fixer: set_literal
    Skipping optional fixer: ws_comma
    running build_ext
    warning: GMP or MPIR library not found; Not building Crypto.PublicKey._fastmath.
    building 'Crypto.Random.OSRNG.winrandom' extension
    creating build\temp.win32-3.6
    creating build\temp.win32-3.6\Release
    creating build\temp.win32-3.6\Release\src
    C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\BIN\cl.exe /c /nologo /Ox /W3 /GL /DNDEBUG /MD -Isrc/ -Isrc/inc-msvc/ -Ic:\users\devil-pc\appdata\local\programs\python\python36-32\include -Ic:\users\devil-pc\appdata\local\programs\python\python36-32\include ""-IC:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\INCLUDE"" ""-IC:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt"" ""-IC:\Program Files (x86)\Windows Kits\8.1\include\shared"" ""-IC:\Program Files (x86)\Windows Kits\8.1\include\um"" ""-IC:\Program Files (x86)\Windows Kits\8.1\include\winrt"" /Tcsrc/winrand.c /Fobuild\temp.win32-3.6\Release\src/winrand.obj
    winrand.c
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(26): error C2061: syntax error: identifier 'intmax_t'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(27): error C2061: syntax error: identifier 'rem'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(27): error C2059: syntax error: ';'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(28): error C2059: syntax error: '}'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(30): error C2061: syntax error: identifier 'imaxdiv_t'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(30): error C2059: syntax error: ';'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(40): error C2143: syntax error: missing '{' before '__cdecl'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(41): error C2146: syntax error: missing ')' before identifier '_Number'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(41): error C2061: syntax error: identifier '_Number'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(41): error C2059: syntax error: ';'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(42): error C2059: syntax error: ')'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(45): error C2143: syntax error: missing '{' before '__cdecl'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(46): error C2146: syntax error: missing ')' before identifier '_Numerator'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(46): error C2061: syntax error: identifier '_Numerator'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(46): error C2059: syntax error: ';'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(46): error C2059: syntax error: ','
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(48): error C2059: syntax error: ')'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(50): error C2143: syntax error: missing '{' before '__cdecl'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(56): error C2143: syntax error: missing '{' before '__cdecl'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(63): error C2143: syntax error: missing '{' before '__cdecl'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(69): error C2143: syntax error: missing '{' before '__cdecl'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(76): error C2143: syntax error: missing '{' before '__cdecl'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(82): error C2143: syntax error: missing '{' before '__cdecl'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(89): error C2143: syntax error: missing '{' before '__cdecl'
    C:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt\inttypes.h(95): error C2143: syntax error: missing '{' before '__cdecl'
    error: command 'C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\BIN\\cl.exe' failed with exit status 2

    ----------------------------------------
Command ""c:\users\devil-pc\appdata\local\programs\python\python36-32\python.exe -u -c ""import setuptools, tokenize;__file__='C:\\Users\\Devil-PC\\AppData\\Local\\Temp\\pip-build-2lnkn32w\\pycrypto\\setup.py';f=getattr(tokenize, 'open', open)(__file__);code=f.read().replace('\r\n', '\n');f.close();exec(compile(code, __file__, 'exec'))"" install --record C:\Users\Devil-PC\AppData\Local\Temp\pip-woepuan3-record\install-record.txt --single-version-externally-managed --compile"" failed with error code 1 in C:\Users\Devil-PC\AppData\Local\Temp\pip-build-2lnkn32w\pycrypto\

Thanks 
","You probably need gmp-devel installed, too. This gives pycrypto the headers it needs to build using libgmp.
On Ubuntu, I only had libgmp10 installed. I hit the same warning when trying to install pycrypto. After installing the Ubuntu package libgmp-dev, the warning went away and the build script indicated it was using the _fastmath extension.
If you already installed pycrypto without _fastmath, you can reinstall it with the -I flag, e.g.
sudo pip install -I pycrypto

","268","<python><python-3.x><pycrypto>","0","0","1","2017-08-16 11:24:02","","0","","","","","2017-08-16 10:57:14",""
"43799066","xoring bytes and str (AES CBC)","Hi I would really appreciate the help on this one since i'm really lost and I don't get why it's not working.
I have a 16 byte key and 16 byte block
but the key type is 'str' and the block type is 'bytes' and I want to xor between them but the value is incorrect(I think)
this code is based on this post
def xor(data, key):
  if type(key) != str:
    key = str(key)

  l = len(key)
  buff=""""
  for i in range(0,len(data)):
    buff+=chr(data[i]^ord(key[i]))
  return str.encode(buff)

and in context:(ref to CBC)
def CBC_decrypt(blocklist,IV,decrypter):
'''

:param blocklist: a 16 byte item list(or other iteratable)
:param IV: 16 byte sized iv
:param decrypter: decrypter: a generic decrypter-must provide an decrypt(plaintext) method
where plaintext is 16 byte size
:return:  a list of decrypted blocks of 16 bytes
'''
 decrypted_msg=[]

 prev = IV
 for x in blocklist:
     r = xor(decrypter.decrypt(x),prev)
     decrypted_msg.append(r)
     prev = x
 return decrypted_msg


a = FileTo16ByteBlocks(path) #just read 16 bytes at a time and return a list
cipher2= AES.new(loadKey(),AES.MODE_ECB) #init AES in ECB cause we had to implement CBC
d = CBC_decrypt(a,iv[0],cipher2)

and here i'm writing it all to the file 
# create new file iterate through the deciphered data and write it to that file
with open(str(fileSeq)+'.mp4','wb') as f:
    for i in d:
        f.write(i)
    f.write(b'')

I've tried other things regarding the xor (since the ECB decryption is made by the library-pycrypto) like using it's number.bytes to long and xoring that
and I've tried to cast it to ints and see how it goes, all goes really bad
and the xor thing is just a hunch I can't really lay my finger on why this is not working properly!
thanks for all the helpers
","I've managed to solve it!
the problem was indeed with the xor function as i thought, apparently the length of the result of the xor wasn't 16 but because of conversions it was variant(why is that though?)
I'm adding the code here incase anyone will need it in the future
def xor(data, key1):
  b=key1
  if type(key1) is str:
    b = bytes(key1,encoding='utf8')

  iData = int.from_bytes(data, sys.byteorder)
  iKey = int.from_bytes(b, sys.byteorder)
  xored = iData ^ iKey
  xored = xored.to_bytes(len(data), sys.byteorder)
  return xored

","261","<python-3.x><encryption><xor><pycrypto><cbc-mode>","-2","0","1","2017-05-05 16:21:56","43809362","4","","-1","","2017-05-23 11:47:12","2017-05-05 07:32:11",""
"51024093","Pycryptodome: AES CBC mode Error 65537","I have to decrypt Data with AES in CBC Mode and Zero-Byte-Padding.
Heres my Code (similar to the one in the Documentation): 
from Cryptodome.Cipher import AES
from base64 import b64decode
from Cryptodome.Util.Padding import unpad

key = b64decode('QkFDR0FubzR0WkdIUkp2WQ==')
iv = b64decode('zBN6M2DMdbAsLcSc')
ct = b64decode('Ie+LMEUM66aEDJkKI61i0+Frh/g9xA8Pb7FR1bVSLohl21V4BHo1ZH7BSNkClaPy/ejKw8r6lDFhUuIzu2JfNHn3W9h6sdM3ZiSniBNQP/dFrhrmc3I7xuZIvfTQqoyV6/DsFSZnyoObrCeF7Wi3VvPnNk9f3/PCQ2hAXPiA1soA05ALkGRgBPen8kxm8NEUTxogc8kSQ01P7/yvodKxn+iqmyG4x5CXOei7ePNovKxxj/c+xhVLm+Aaz2HundQ0zo0fmKBHUnAquzWzTTpRX1fq74XQdQG5gmv8XbiMac+KfyutbGiRU/nPPXPo5cPo9Ghkw++ZN8iApOdU5zXyXW0ChwvIrRmw7w0GFqNhX0JCdivmlnj2g3NhHvwKANgYn3lLOoNB+tOpQfQ/CVs6qzFzBDx2o6URpGwodEOuSIKMINCeQ/QmcosGdVOVMs4LvTwG2U88uUW2zt1elrt8q9NR5mSqJiX9YOVMEnLTms30eKLbJ3zwCMEzD/40bIcfwvdx1olx8x/HgB9flJT7fy0V3HCNwlLOejHUvTa9v8iB3hwwmK1691YR+LVzK1zD7xtBeyvhjeF69axdkW9yW+GLDqPop/TmjQ2mBvM/tch//cZEMU2gMEPd6m/RdK4TCMSrj9eUksdOCm4bF3m/h09PTw0VtwT313WF+YESNadz8Hm4+u0a87OADoPQ/psZ2RTLszIuQfkmMUPPW4XwWUDWFoVxjF6REq7gKF5qOyDJyi27EOnCC7LTIze7DZ1BlqrnmfYIQTGv+WKwqmF45txQyadYNcXA05GCd4u4PgbcB6hSZq9eMi9JNY/srz7SnTu2nb+UJ2DKV2KSXIlowMvPcd1wYs4RWXiwjMlucVw4ezyMAHHxFoLvuG++qDwCExBtldPLW+zbmfps7qZVO2YbTRIqXHePccfvjX6Pt3LoSg7a3mHpPpNvFr6CXkQXzGkEI52GJO3LCSGbz7rVf7E1bkjfjsjNxfgeGT8CHj5uF5KTBGsWG7bSyjzGsyTv4fUopXVe7yzlaLZ+uwCsEu5/MSHCgh9AiFZS6JACYJPA0BE4BMk6yYsJZ51Up4rB9OYMYjiVNMKHLfzJKj3mS0cfIegW8aYcESlfzdjom3Q2a+3xwh1nLVJ/8psMXgNpjNKNrSO3OW/4cQxBdT5Vp9OPAfbD/BUX5dJ9Xvsp6D8tZIwlckh//d7riY8t6j5jS4h5bIclKF3hQn9GV6m+HC/z67QOrfbU8hNwuJS/BI2aI3yJNrrH4lh5BnKvtqk2eEURarp4MtNFjyYsTuX+xI79ISD4qdG5O+Y89jYgQDNt0y9GjQVm0xYVpEyCTtyZoRNjnLKGGWex/6WDGewayUf9llTnr73ZKYzb3aCac7Kf1MgelegCttFCoNCxEViLSPO2uj27P2PlZ2yZCKG5o9OthWR2qLJ9mTr30oGgguTX265OfAQFWaTdPnuyGalmlfZH4uaX+KACdq+8Okynp+0xXWMX+YX8f9pBA3YjAVgh/3ZFIP89fm7TBiH9lYQMHtJgiQXuM7+2sobP5eJl9oPRnjoO+65rhEYi4Wagmw/JMKV4JqIEM7k9czVcZpolQt6uOLBqGffbXSEh/bzpugRkKNXHVOT1W496ukP+Fo/B1Z/Vvj2RVSFXTpK2SoPMfTHTNLO0Nk90StQLJ9sW4zIe6ykHV8pOPZC3mBkfaimWNue/2v4Jz29B+9fSz7PWX/+ZVFgPN9p/cS50ZpD7v5QTZCMWJBgPv4TqSkV2UCvwmFT8dLm7GCsHOT9J4g9OX5awMPJMAKdYmPGcob74AuSxVFSlT0iqNV2JIAn4SrMxJb694o8kAg+RepF7ubnpKhE4s/t7Sv76rkfWAXa6JybJ931R8C8+2Fsa4iKN+/0rpL9S47+QVs0Fq54LlHKJhlvd0bpezRM7UDHpDDPXJ3tqL8k9gl1RjCji0t86xX5NQjT7bGJSsQr50KzlU3di1kfMqTv4gPokBbWhFFJpi1z77QigrkpORboA4wwnbny16IwQP88LqwI6jNCVn1H21NfC6ETdJ/QdY0xpvMTAYa2M+AO4WpQuWjSa3XT0iWmRyKsfftMaOcPAVFSn0Cx40B9t58gSokQ4fLXJa1dlIf46is09Pi0CRpP04qrIje37Gcu1nzxFobXXi8qxnIIVSvTR2rs/XI/Hu4T+RcZY4qaZVOVqBTXPdplawH3Rzt2bkbfp0dszhqfc2krcJgiiujqU1qNXfuo9lBDCm0+y1tm0bUoAVidbaD1AXAAxfa3g/dConkEoFF/KvV1TGVK0i8e3GWCiGxSdgSGfG6TmgvEMlNqMqMyfnvZv820vBOdn9/7UZdqCpvpnTlOAHt+yAm+CMBgQg7XJwi6Gbe1xvgXlq8CC3uuu9ApNdHvQbVzvKowKuixlD9lxgke7OKjvJELh+detEOfWU95meL3xnC6FicSqBnfek1NrCIUjWY/Xy+0JvoA1HgvL77Wvf52CDo1YefIT0ch02NNUZvLn1ZaU3HnmO6ED0iCeAxImdTZZihh6VAhyCWzBSBiWuFjvSjhrDOloijEcumkt/BZ8/rmIyOrOamBes4Tq1AT/sJoFe0+9EnRA9vACaA3FOtw7ryHxSVhke3QYiPQgxjb1U+IAw685DCOfIDuWnDeubvKRZ+gB5rfOqUTMquOVUckRGuU/UtkZ9T+DUcKR6RBfQJDbq5C5FeGCttgPu5XqOtmPpvWgXoIvddAqdD5vXzttaTZYodB3tfZdt8zmdfkpmEYCBlSpwjtvK0tew1DUY7NWsvjIkOc9XVSHxAXC+QxmQOnKhCU5p14Px/RtF5gMbrVrNx5qFSjuzoSmgtN2cMB2Bhp0XpJu1weWCrRTTV1gMSy23ix3tILnpgz+pE8Wjb0Z8mxH1JdOWroD3heW8VZGo8kCfZBFxVmIMMwNMQCfz7+TpYQ2UhtYbzGiPwStOt41Z+NTkSQT0YJmO63QtXCQP/gYtX5JJ6oq6co8EUJI7VOu5SSjtekQMKuGYWyS6ZXxrNfUQ46z6C6tgVhAMJu45UvLesGDtT3C24VamDQqfUj0+kaM31incFlfvDOCsIljled7pp31hxN1mdS6KiI45Ydwh0OVHtw4FLqTq0Kq2vS1N30cWsWs3VKFF286fwqDWUualzi/XiLbSE+9x0tTdE3/5tr8Zr3oGf1UktDU5b2ATZQ53BojX7XT6HimulFIPK9wYTnlhvjhe2DEM+jw1i7w3frXk0oZxDy8hO94AGtJXpjYCwj9D7QSIuPFm+L8+83H2SzVyAuvdCE+cKst8c+rjgRvOkFdgKN3tmXKdvRACvO5+wgx7LqZmyUOCNhYzmmYooxwMVgR80ORdvqwf+8pFUFgyFD+E4Yw2Xr0r0TiqqkRnl6MLftLppNQf0qX9Pt7Lm9GVp8JWBAIjJZ3jkX2b4KN2EJpJpPqs51m/evwF8T5uB/nbtWqwW29W65ZHuo/2gTYjat9twOYFNQqJNva7W8oaJc6NSVEhWL5Ys17dmGQadbFXRo5TNfMfyKQwewFeuRvQkMzhB5/favJWh75nHbbIZoNGirdMoa5LOYizrLKI5SuzSpzEbeUoN4DLu0zYtT0mjBeVdsSNllcJuoPtvrNjyH85iinivKRcNtUYRJvwAXpw+XdLNEBifZanJ5xlweqkvyObeznxdnbJfxVF4gQoY6Do12T6X9zm2K78MKCIRBIX+88hgtb4gOS/X+H25JSvE2xSI+g12Adfc0cX8VPhqoNmLIfPaRiyBJgDNuO8KRQ8/5uOVMJCNOTsqLTFlSbQkOSnfR4650X+r+0G+cXsVyN9uYXvbeBztTN/UHkCgNQMr35IwdF5tX51M+zL/OHQS/5TQjPTf/wU7/gJ2laS2bOlTFlBzeT2jh7oOzqLIoJDX7EqfgJi0q26Ma8TEkidAxSpeiBXfe6yGiOMo4Iu1tYO0udf2/HehvLwXP+E4SVV7aSpwWkicAocB7b6y8H7gBRoXtBQ5UzCMWPGVRTqKM52FgO+rOf3dtHw8Cx8d/iQwA2dS8kOmKHl9qS8qcmm3qqNHjadJjvbl6gh6pEdZSE5lvWsIpy9xDGIRDorUWOE0aEijrvA/KHtbPTh9tVtLaIVLRWVulaBjyy4TwYOR+PQ49TLnim2kIIhuM2pPf4jkDHAUm/NjReUFhwnfPd+Tvht8WkcrsWZms9LcUC/IRpLKFPu8H8jtzgpXxI1BzFfQAGdcuZ8imxbp39KPfh2KoScX+hiLTNhD9k8jCjz4KAw4rTm68IFqoPS1LMcwixgwtux8CyRgFdviC4/oT0eZcsxFvODqnuQ/IMGjQk5MVj852CtbNxYAWyktUaI6PWpBcbU7x3ZgGL7XlSFyb6nE8m9rYkGRcKUwieRlTsCMhnyCDKl3/AjhD09j9Lwtud08Dt7SCe+JWNAaVcVPT9k3IZYj0vav9mAeA4ZKE8KQqDAQBjHlsQZ7Hqn/pzCxfYhXq1IQ+TXIAHhoBz0w7j48O7znsN5lAMgvnH+3lznPZ3ayrF8KNJSAuHnhqrBErOGK4A3Kv1m3bh/LumzmhQloCi1GNdYVhMUtovg5vhKVzfSTzgWzxzPkWny30cwae1jzNxgBbrLxx8zdg0hJun4+pjPujEO9B31QXhCoYtb3l5oEO1hPSjXNuboYjbCaNBbCCQy++t/kaKSpYnYT3/C1A50tXFg9q86/FZnW860befMbii+Xi5IJE8ig7WouGtdCXGtMhio7Qk6EMYv0HbSqmGoE56P/C4FJILiEFlNlCWKF/USj6HpyoScwALnJLJTe0lR4RPz3Udoq1ev8pyEU2tCasd+8J1AUGpo0wbY/WMiBoIx9BEZOZs+FxBJSF45h2zrz6+4oA3TVGS5981rSlQ/g8jBSh0xApG8SXC3IvdN0O58AgTV7KLgoydSO/DhrNo4pjz34mSs1TSvRUPcHj0xy1t+LDz3W96hsjto2K6zbIw7y6v3/dqoRTV7uP6v8huY19mZYF9XPoAGwC1xabQLGnv7LHd7leugYnKQSZFoVXHavOm5kZm+Zuh2Qn9MRjZBY6qjq2rN1FDbIXqbHYGzpug3Jikui4fEyTwV2bur0+17Nbocx3cD1+UnTlPZFgw2cfWnNrN7MMiJ+ZRhAk3q+/izMTYrxWMto6dD37Hr6EA0MvrfwL+WKV1487FHiAjmHJ84LZKrJH91m5nvJYTQ7IDKMTqZYiVOJ7CvlByrogNzwpCqnZs/bco1ZMYxZZnzdpODOA0J5Q6JVnbr7NmWZSTGwixC7EltOuNPLxwKMeecp64Bod6EhDZ1GMe9FUr7YAmM4K9r4KZIe5jNl4RJL8zVa753o7q1aAdNaltZnhHE7SWmrRSIG81yukG6s4jjJF3GsilJrXImHbJTRxOXZxMbdQETIo/LGSyJI4XuBLpWhv5Rk7tcnZ2jobJuNPea4L/BcFTTfZNkpR6VBpmSUiP2MWmX8H5HnWs/4g9aKy+QIO4KEvO9CiP3E4rLwl662tpMOOZfet1GSLtw/ygHOBCIv7AUj3vS9IKZukL10+qysGTjQXrhzCVDGYd+QAMSZk518nE6WYIB6qHf3RJqvj7Obow3Oe/+zNNqayhIO/LMxLVemc8xaBxuLuiz3Ch86tonabtQ6IjEbMhcxgy5x1b8Gu7eZxnkUTbFPGebgKIzjUSmaVs1gwJVo70Qe/lwiR7ThnkZaplmT2ErvrWfkhT31pJc2Uqsf4nWx8VS2o7s/aEpx/qtMKUqP51A8VD8U9TrFodnj3vH4oaCf7d4crr1X3jTSYCq6oSBnzIcQHXYjq10wKWKiLtXFMs50aphj/mSI1BmGruN1otd7mD+eUsM49wLO7N+du86zgehOhQIDok4eH6T+f76bhNHtg/7Z8JM5T4FzB+mLcIpbHy+xPq+Mihg8pblcU1LwFbh+qLBWlBIYUlaeSz5bASQbeGQ3wFK+Iz+bJa4NUh5ZQx5l3Ed1Hls1lg4Yjune2+q8D7vb8BfKAZAVSVqliKoVdCAnwGOFf65SSg922aHRGzk0gyCDN3SApWlkX2ol4x8M6McKP+CdCV0mCSwSWAwSP6k+RnFWbXcgKg/AlaQs0jXWCseIxmWuHpVDoZEgkPUqlehdiL6qulq3YjzLeH9QvDc8z0JSbZGPSsOb9BJZ+oO1gLzdlXKWm0rH+PAXTxMur8HT9En5qVqdmabBHz5/RijywUlZEP5ySYOF+d0hMLAROkpSVSTJoPKYpyWhqB0VcdHP+QdO9ZVFpokIN4S3JTIva2GXNk0eUty8ueDIOAhye5VYHTDM3dyOFa9dqHMpmRCJMIMYe3SjbP2nwvAHrRNpqZDMZs7a0CwShZzbSMzvs2vWciIVDkPuLBgZ2WPE/xeWfOyTdwEq7Xmr2JeirGPHdnPG1QrD6DrHbjUaqKIFTKWFG3/xA/+EcCm5OFqcA+kpO3n03KqaKWIGP5LHO5By6ClGYltFndSPiBudAll1RFVt6Qw41oNpn1tn0agjryDdiXeXGPheYfa3QdZf0o28P+UTuKs93cRqdb7hhSn7pAaa6BXRBbZzpgNAHMcX2yR+MY5zAc77PEl5HrjWVeI/TVIQNucCZjJDoKtsp4B64WPbOWsRenVheiaoooxMGlEqtX+UVG3veIUzllWrpaok9RMNcK1qkPj9c2xAWr+1cTu0Pd/1w56Tg2MNKDd3KSKjjM2Vdeh2JUjwPoGdk76qedwmyHzgzLcDG3uI5uKH024w1X50uYmguglwWnMTj0KONw8ourq0wVVLZyUoCDQtwPu/KlR57MCY3eiWzBCQiWmaphQxCR4sNG3U2g5e18brGfdlVajow/DtBRhM1qFoJlebGMbbTpcQSXQS+qVPpcGAos49lHU48r3e2lTPG0539l47fMdH/5CKLhaKeZgzvOnp5PVLc6ZYh0ad2TH/5I0L8gakQXnS1AHZ9BXMzx3x8DhzTeO8H4VDiHyBLdGYOT4VtiPxDjnc8WLhZoFkeW1pGR8RiJc7m1+ZGu2Q/VPfW1yqEYtJIBMEIXHA4qJ1IaU5tRfh2F3i6fKIOnD8bU0U82aE2Pq23/bUga4t84rhys4sskAUhEj/sWSCpiC8p1RTfuXQsvTfdW0AJ5mMZzOgFDqZ1YKOjp4cs0XknzJoj7jbisoiLv9AQZLeHSIEiqmSKLUiYgk6cOwuHVDafyCf2SudSPh5cnWck5RYdwUzWyxeuPhKO6knJnOJB6SDf99KZFbQz1xd2xo7Rk2PSkngOHSdfHfya5jj2jzLH1hmT5UzJfpLVxDGYVHRV+RwZbzJup3guSnayZQreKm4BV7wTXUf9a+u9RMl88ddAZh9DrLZZGMvE2hpzTsihXHrYXKmfxNP/SA4Khy6ZpR8Bvfil4muOr')
cipher = AES.new(key, AES.MODE_CBC, iv)
pt = unpad(cipher.decrypt(ct), AES.block_size)
print(""MSG:"", pt)

So here are my questions:

If i run it I get this Error: ValueError: Error 65537 while instantiating the CBC mode. It occurs when it runs line 8 (cipher = AES.new(key, AES.MODE_CBC, iv) and i don't know why. I saw the other Question about that error, but there he tried to decrypt an input, that wasn't declarated, which doesn't seem to be the case here.
Solved: Like 'SquareRootOfTwentyThree' said, the length of my IV wasn't correct... Base64 encodes 8b to 6b. I will post the updated code with the (new) Questions under this.
from Cryptodome.Cipher import AES
from base64 import b64decode,b64encode

key = bytes.fromhex('42414347416E6F34745A4748524A7659')
ct =b64decode('zBN6M2DMdbAsLcScIe+LMEUM66aEDJkKI61i0+Frh/g9xA8Pb7FR1bVSLohl21V4BHo1ZH7BSNkClaPy/ejKw8r6lDFhUuIzu2JfNHn3W9h6sdM3ZiSniBNQP/dFrhrmc3I7xuZIvfTQqoyV6/DsFSZnyoObrCeF7Wi3VvPnNk9f3/PCQ2hAXPiA1soA05ALkGRgBPen8kxm8NEUTxogc8kSQ01P7/yvodKxn+iqmyG4x5CXOei7ePNovKxxj/c+xhVLm+Aaz2HundQ0zo0fmKBHUnAquzWzTTpRX1fq74XQdQG5gmv8XbiMac+KfyutbGiRU/nPPXPo5cPo9Ghkw++ZN8iApOdU5zXyXW0ChwvIrRmw7w0GFqNhX0JCdivmlnj2g3NhHvwKANgYn3lLOoNB+tOpQfQ/CVs6qzFzBDx2o6URpGwodEOuSIKMINCeQ/QmcosGdVOVMs4LvTwG2U88uUW2zt1elrt8q9NR5mSqJiX9YOVMEnLTms30eKLbJ3zwCMEzD/40bIcfwvdx1olx8x/HgB9flJT7fy0V3HCNwlLOejHUvTa9v8iB3hwwmK1691YR+LVzK1zD7xtBeyvhjeF69axdkW9yW+GLDqPop/TmjQ2mBvM/tch//cZEMU2gMEPd6m/RdK4TCMSrj9eUksdOCm4bF3m/h09PTw0VtwT313WF+YESNadz8Hm4+u0a87OADoPQ/psZ2RTLszIuQfkmMUPPW4XwWUDWFoVxjF6REq7gKF5qOyDJyi27EOnCC7LTIze7DZ1BlqrnmfYIQTGv+WKwqmF45txQyadYNcXA05GCd4u4PgbcB6hSZq9eMi9JNY/srz7SnTu2nb+UJ2DKV2KSXIlowMvPcd1wYs4RWXiwjMlucVw4ezyMAHHxFoLvuG++qDwCExBtldPLW+zbmfps7qZVO2YbTRIqXHePccfvjX6Pt3LoSg7a3mHpPpNvFr6CXkQXzGkEI52GJO3LCSGbz7rVf7E1bkjfjsjNxfgeGT8CHj5uF5KTBGsWG7bSyjzGsyTv4fUopXVe7yzlaLZ+uwCsEu5/MSHCgh9AiFZS6JACYJPA0BE4BMk6yYsJZ51Up4rB9OYMYjiVNMKHLfzJKj3mS0cfIegW8aYcESlfzdjom3Q2a+3xwh1nLVJ/8psMXgNpjNKNrSO3OW/4cQxBdT5Vp9OPAfbD/BUX5dJ9Xvsp6D8tZIwlckh//d7riY8t6j5jS4h5bIclKF3hQn9GV6m+HC/z67QOrfbU8hNwuJS/BI2aI3yJNrrH4lh5BnKvtqk2eEURarp4MtNFjyYsTuX+xI79ISD4qdG5O+Y89jYgQDNt0y9GjQVm0xYVpEyCTtyZoRNjnLKGGWex/6WDGewayUf9llTnr73ZKYzb3aCac7Kf1MgelegCttFCoNCxEViLSPO2uj27P2PlZ2yZCKG5o9OthWR2qLJ9mTr30oGgguTX265OfAQFWaTdPnuyGalmlfZH4uaX+KACdq+8Okynp+0xXWMX+YX8f9pBA3YjAVgh/3ZFIP89fm7TBiH9lYQMHtJgiQXuM7+2sobP5eJl9oPRnjoO+65rhEYi4Wagmw/JMKV4JqIEM7k9czVcZpolQt6uOLBqGffbXSEh/bzpugRkKNXHVOT1W496ukP+Fo/B1Z/Vvj2RVSFXTpK2SoPMfTHTNLO0Nk90StQLJ9sW4zIe6ykHV8pOPZC3mBkfaimWNue/2v4Jz29B+9fSz7PWX/+ZVFgPN9p/cS50ZpD7v5QTZCMWJBgPv4TqSkV2UCvwmFT8dLm7GCsHOT9J4g9OX5awMPJMAKdYmPGcob74AuSxVFSlT0iqNV2JIAn4SrMxJb694o8kAg+RepF7ubnpKhE4s/t7Sv76rkfWAXa6JybJ931R8C8+2Fsa4iKN+/0rpL9S47+QVs0Fq54LlHKJhlvd0bpezRM7UDHpDDPXJ3tqL8k9gl1RjCji0t86xX5NQjT7bGJSsQr50KzlU3di1kfMqTv4gPokBbWhFFJpi1z77QigrkpORboA4wwnbny16IwQP88LqwI6jNCVn1H21NfC6ETdJ/QdY0xpvMTAYa2M+AO4WpQuWjSa3XT0iWmRyKsfftMaOcPAVFSn0Cx40B9t58gSokQ4fLXJa1dlIf46is09Pi0CRpP04qrIje37Gcu1nzxFobXXi8qxnIIVSvTR2rs/XI/Hu4T+RcZY4qaZVOVqBTXPdplawH3Rzt2bkbfp0dszhqfc2krcJgiiujqU1qNXfuo9lBDCm0+y1tm0bUoAVidbaD1AXAAxfa3g/dConkEoFF/KvV1TGVK0i8e3GWCiGxSdgSGfG6TmgvEMlNqMqMyfnvZv820vBOdn9/7UZdqCpvpnTlOAHt+yAm+CMBgQg7XJwi6Gbe1xvgXlq8CC3uuu9ApNdHvQbVzvKowKuixlD9lxgke7OKjvJELh+detEOfWU95meL3xnC6FicSqBnfek1NrCIUjWY/Xy+0JvoA1HgvL77Wvf52CDo1YefIT0ch02NNUZvLn1ZaU3HnmO6ED0iCeAxImdTZZihh6VAhyCWzBSBiWuFjvSjhrDOloijEcumkt/BZ8/rmIyOrOamBes4Tq1AT/sJoFe0+9EnRA9vACaA3FOtw7ryHxSVhke3QYiPQgxjb1U+IAw685DCOfIDuWnDeubvKRZ+gB5rfOqUTMquOVUckRGuU/UtkZ9T+DUcKR6RBfQJDbq5C5FeGCttgPu5XqOtmPpvWgXoIvddAqdD5vXzttaTZYodB3tfZdt8zmdfkpmEYCBlSpwjtvK0tew1DUY7NWsvjIkOc9XVSHxAXC+QxmQOnKhCU5p14Px/RtF5gMbrVrNx5qFSjuzoSmgtN2cMB2Bhp0XpJu1weWCrRTTV1gMSy23ix3tILnpgz+pE8Wjb0Z8mxH1JdOWroD3heW8VZGo8kCfZBFxVmIMMwNMQCfz7+TpYQ2UhtYbzGiPwStOt41Z+NTkSQT0YJmO63QtXCQP/gYtX5JJ6oq6co8EUJI7VOu5SSjtekQMKuGYWyS6ZXxrNfUQ46z6C6tgVhAMJu45UvLesGDtT3C24VamDQqfUj0+kaM31incFlfvDOCsIljled7pp31hxN1mdS6KiI45Ydwh0OVHtw4FLqTq0Kq2vS1N30cWsWs3VKFF286fwqDWUualzi/XiLbSE+9x0tTdE3/5tr8Zr3oGf1UktDU5b2ATZQ53BojX7XT6HimulFIPK9wYTnlhvjhe2DEM+jw1i7w3frXk0oZxDy8hO94AGtJXpjYCwj9D7QSIuPFm+L8+83H2SzVyAuvdCE+cKst8c+rjgRvOkFdgKN3tmXKdvRACvO5+wgx7LqZmyUOCNhYzmmYooxwMVgR80ORdvqwf+8pFUFgyFD+E4Yw2Xr0r0TiqqkRnl6MLftLppNQf0qX9Pt7Lm9GVp8JWBAIjJZ3jkX2b4KN2EJpJpPqs51m/evwF8T5uB/nbtWqwW29W65ZHuo/2gTYjat9twOYFNQqJNva7W8oaJc6NSVEhWL5Ys17dmGQadbFXRo5TNfMfyKQwewFeuRvQkMzhB5/favJWh75nHbbIZoNGirdMoa5LOYizrLKI5SuzSpzEbeUoN4DLu0zYtT0mjBeVdsSNllcJuoPtvrNjyH85iinivKRcNtUYRJvwAXpw+XdLNEBifZanJ5xlweqkvyObeznxdnbJfxVF4gQoY6Do12T6X9zm2K78MKCIRBIX+88hgtb4gOS/X+H25JSvE2xSI+g12Adfc0cX8VPhqoNmLIfPaRiyBJgDNuO8KRQ8/5uOVMJCNOTsqLTFlSbQkOSnfR4650X+r+0G+cXsVyN9uYXvbeBztTN/UHkCgNQMr35IwdF5tX51M+zL/OHQS/5TQjPTf/wU7/gJ2laS2bOlTFlBzeT2jh7oOzqLIoJDX7EqfgJi0q26Ma8TEkidAxSpeiBXfe6yGiOMo4Iu1tYO0udf2/HehvLwXP+E4SVV7aSpwWkicAocB7b6y8H7gBRoXtBQ5UzCMWPGVRTqKM52FgO+rOf3dtHw8Cx8d/iQwA2dS8kOmKHl9qS8qcmm3qqNHjadJjvbl6gh6pEdZSE5lvWsIpy9xDGIRDorUWOE0aEijrvA/KHtbPTh9tVtLaIVLRWVulaBjyy4TwYOR+PQ49TLnim2kIIhuM2pPf4jkDHAUm/NjReUFhwnfPd+Tvht8WkcrsWZms9LcUC/IRpLKFPu8H8jtzgpXxI1BzFfQAGdcuZ8imxbp39KPfh2KoScX+hiLTNhD9k8jCjz4KAw4rTm68IFqoPS1LMcwixgwtux8CyRgFdviC4/oT0eZcsxFvODqnuQ/IMGjQk5MVj852CtbNxYAWyktUaI6PWpBcbU7x3ZgGL7XlSFyb6nE8m9rYkGRcKUwieRlTsCMhnyCDKl3/AjhD09j9Lwtud08Dt7SCe+JWNAaVcVPT9k3IZYj0vav9mAeA4ZKE8KQqDAQBjHlsQZ7Hqn/pzCxfYhXq1IQ+TXIAHhoBz0w7j48O7znsN5lAMgvnH+3lznPZ3ayrF8KNJSAuHnhqrBErOGK4A3Kv1m3bh/LumzmhQloCi1GNdYVhMUtovg5vhKVzfSTzgWzxzPkWny30cwae1jzNxgBbrLxx8zdg0hJun4+pjPujEO9B31QXhCoYtb3l5oEO1hPSjXNuboYjbCaNBbCCQy++t/kaKSpYnYT3/C1A50tXFg9q86/FZnW860befMbii+Xi5IJE8ig7WouGtdCXGtMhio7Qk6EMYv0HbSqmGoE56P/C4FJILiEFlNlCWKF/USj6HpyoScwALnJLJTe0lR4RPz3Udoq1ev8pyEU2tCasd+8J1AUGpo0wbY/WMiBoIx9BEZOZs+FxBJSF45h2zrz6+4oA3TVGS5981rSlQ/g8jBSh0xApG8SXC3IvdN0O58AgTV7KLgoydSO/DhrNo4pjz34mSs1TSvRUPcHj0xy1t+LDz3W96hsjto2K6zbIw7y6v3/dqoRTV7uP6v8huY19mZYF9XPoAGwC1xabQLGnv7LHd7leugYnKQSZFoVXHavOm5kZm+Zuh2Qn9MRjZBY6qjq2rN1FDbIXqbHYGzpug3Jikui4fEyTwV2bur0+17Nbocx3cD1+UnTlPZFgw2cfWnNrN7MMiJ+ZRhAk3q+/izMTYrxWMto6dD37Hr6EA0MvrfwL+WKV1487FHiAjmHJ84LZKrJH91m5nvJYTQ7IDKMTqZYiVOJ7CvlByrogNzwpCqnZs/bco1ZMYxZZnzdpODOA0J5Q6JVnbr7NmWZSTGwixC7EltOuNPLxwKMeecp64Bod6EhDZ1GMe9FUr7YAmM4K9r4KZIe5jNl4RJL8zVa753o7q1aAdNaltZnhHE7SWmrRSIG81yukG6s4jjJF3GsilJrXImHbJTRxOXZxMbdQETIo/LGSyJI4XuBLpWhv5Rk7tcnZ2jobJuNPea4L/BcFTTfZNkpR6VBpmSUiP2MWmX8H5HnWs/4g9aKy+QIO4KEvO9CiP3E4rLwl662tpMOOZfet1GSLtw/ygHOBCIv7AUj3vS9IKZukL10+qysGTjQXrhzCVDGYd+QAMSZk518nE6WYIB6qHf3RJqvj7Obow3Oe/+zNNqayhIO/LMxLVemc8xaBxuLuiz3Ch86tonabtQ6IjEbMhcxgy5x1b8Gu7eZxnkUTbFPGebgKIzjUSmaVs1gwJVo70Qe/lwiR7ThnkZaplmT2ErvrWfkhT31pJc2Uqsf4nWx8VS2o7s/aEpx/qtMKUqP51A8VD8U9TrFodnj3vH4oaCf7d4crr1X3jTSYCq6oSBnzIcQHXYjq10wKWKiLtXFMs50aphj/mSI1BmGruN1otd7mD+eUsM49wLO7N+du86zgehOhQIDok4eH6T+f76bhNHtg/7Z8JM5T4FzB+mLcIpbHy+xPq+Mihg8pblcU1LwFbh+qLBWlBIYUlaeSz5bASQbeGQ3wFK+Iz+bJa4NUh5ZQx5l3Ed1Hls1lg4Yjune2+q8D7vb8BfKAZAVSVqliKoVdCAnwGOFf65SSg922aHRGzk0gyCDN3SApWlkX2ol4x8M6McKP+CdCV0mCSwSWAwSP6k+RnFWbXcgKg/AlaQs0jXWCseIxmWuHpVDoZEgkPUqlehdiL6qulq3YjzLeH9QvDc8z0JSbZGPSsOb9BJZ+oO1gLzdlXKWm0rH+PAXTxMur8HT9En5qVqdmabBHz5/RijywUlZEP5ySYOF+d0hMLAROkpSVSTJoPKYpyWhqB0VcdHP+QdO9ZVFpokIN4S3JTIva2GXNk0eUty8ueDIOAhye5VYHTDM3dyOFa9dqHMpmRCJMIMYe3SjbP2nwvAHrRNpqZDMZs7a0CwShZzbSMzvs2vWciIVDkPuLBgZ2WPE/xeWfOyTdwEq7Xmr2JeirGPHdnPG1QrD6DrHbjUaqKIFTKWFG3/xA/+EcCm5OFqcA+kpO3n03KqaKWIGP5LHO5By6ClGYltFndSPiBudAll1RFVt6Qw41oNpn1tn0agjryDdiXeXGPheYfa3QdZf0o28P+UTuKs93cRqdb7hhSn7pAaa6BXRBbZzpgNAHMcX2yR+MY5zAc77PEl5HrjWVeI/TVIQNucCZjJDoKtsp4B64WPbOWsRenVheiaoooxMGlEqtX+UVG3veIUzllWrpaok9RMNcK1qkPj9c2xAWr+1cTu0Pd/1w56Tg2MNKDd3KSKjjM2Vdeh2JUjwPoGdk76qedwmyHzgzLcDG3uI5uKH024w1X50uYmguglwWnMTj0KONw8ourq0wVVLZyUoCDQtwPu/KlR57MCY3eiWzBCQiWmaphQxCR4sNG3U2g5e18brGfdlVajow/DtBRhM1qFoJlebGMbbTpcQSXQS+qVPpcGAos49lHU48r3e2lTPG0539l47fMdH/5CKLhaKeZgzvOnp5PVLc6ZYh0ad2TH/5I0L8gakQXnS1AHZ9BXMzx3x8DhzTeO8H4VDiHyBLdGYOT4VtiPxDjnc8WLhZoFkeW1pGR8RiJc7m1+ZGu2Q/VPfW1yqEYtJIBMEIXHA4qJ1IaU5tRfh2F3i6fKIOnD8bU0U82aE2Pq23/bUga4t84rhys4sskAUhEj/sWSCpiC8p1RTfuXQsvTfdW0AJ5mMZzOgFDqZ1YKOjp4cs0XknzJoj7jbisoiLv9AQZLeHSIEiqmSKLUiYgk6cOwuHVDafyCf2SudSPh5cnWck5RYdwUzWyxeuPhKO6knJnOJB6SDf99KZFbQz1xd2xo7Rk2PSkngOHSdfHfya5jj2jzLH1hmT5UzJfpLVxDGYVHRV+RwZbzJup3guSnayZQreKm4BV7wTXUf9a+u9RMl88ddAZh9DrLZZGMvE2hpzTsihXHrYXKmfxNP/SA4Khy6ZpR8Bvfil4muOr')
iv = ct[:16]

ciph = AES.new(key, AES.MODE_CBC, iv)
res = ciph.decrypt(ct[16:])
print(res)
print(b64encode(res))

The task I have to solve says, the msg uses Zero-Byte-Padding (Null-Padding) and if I i run it i get Zero-Bytes at the end. So Can i assume the decryption gone right? Because the thing is, I cant read the secret out of the message..

Thank you in Advance!
Greetings, 
SomeDude
","","260","<python><aes><pycrypto><cbc-mode><pycryptodome>","0","","0","2018-06-28 11:50:10","","2","1","9989056","","2018-06-28 11:50:10","2018-06-25 13:00:10",""
"29611625","How to install pycrypto _fastmath.so in the correct place","My question is how can I configure the installation of pycrypto so _fastmath gets put into the correct place.
I have followed the instructions in this excellent SO post. However, I cannot get past this error and need some help.
/usr/local/lib/python2.7/site-packages/pycrypto-2.6.1-py2.7-linux-x86_64.egg/Crypto/Util/number.py:57: PowmInsecureWarning: Not using mpz_powm_sec.  You should rebuild using libgmp >= 5 to avoid timing attack vulnerability.
","","257","<python-2.7><gmp><pycrypto>","0","","0","2015-09-08 20:04:21","","2","","-1","","2017-05-23 12:14:40","2015-04-13 17:42:07",""
"38935777","Using pyCrypto to hash results in a TypeError","I'm trying to use pycrypto for python 3.5.1 on win10
using this simple piece of code for has:  
from Crypto.Hash import SHA256  
SHA256.new('abc').hexdigest()

resulting this error:
Traceback (most recent call last):  
  File ""E:/Python/C.py"", line 2, in <module>  
    SHA256.new('abc').hexdigest()  
  File ""E:\Python\lib\site-packages\Crypto\Hash\SHA256.py"", line 88, in new
    return SHA256Hash().new(data)
  File ""E:\Python\lib\site-packages\Crypto\Hash\SHA256.py"", line 75, in new
    return SHA256Hash(data)
  File ""E:\Python\lib\site-packages\Crypto\Hash\SHA256.py"", line 72, in __init__
    HashAlgo.__init__(self, hashFactory, data)
  File ""E:\Python\lib\site-packages\Crypto\Hash\hashalgo.py"", line 51, in __init__
    self.update(data)
  File ""E:\Python\lib\site-packages\Crypto\Hash\hashalgo.py"", line 69, in update
    return self._hash.update(data)
TypeError: Unicode-objects must be encoded before hashing

Anyone know what the problem is?
","Use the .encode() function on your 'abc' string before running the hashing function. 
For example, if you wish to use Unicode encoding:
'abc'.encode('utf-8')

","257","<python><hash><encoding><pycrypto>","0","0","2","2016-08-13 20:02:16","38936070","4","","1816580","","2016-08-13 18:36:44","2016-08-13 18:31:05",""
"38935777","Using pyCrypto to hash results in a TypeError","I'm trying to use pycrypto for python 3.5.1 on win10
using this simple piece of code for has:  
from Crypto.Hash import SHA256  
SHA256.new('abc').hexdigest()

resulting this error:
Traceback (most recent call last):  
  File ""E:/Python/C.py"", line 2, in <module>  
    SHA256.new('abc').hexdigest()  
  File ""E:\Python\lib\site-packages\Crypto\Hash\SHA256.py"", line 88, in new
    return SHA256Hash().new(data)
  File ""E:\Python\lib\site-packages\Crypto\Hash\SHA256.py"", line 75, in new
    return SHA256Hash(data)
  File ""E:\Python\lib\site-packages\Crypto\Hash\SHA256.py"", line 72, in __init__
    HashAlgo.__init__(self, hashFactory, data)
  File ""E:\Python\lib\site-packages\Crypto\Hash\hashalgo.py"", line 51, in __init__
    self.update(data)
  File ""E:\Python\lib\site-packages\Crypto\Hash\hashalgo.py"", line 69, in update
    return self._hash.update(data)
TypeError: Unicode-objects must be encoded before hashing

Anyone know what the problem is?
","
TypeError: Unicode-objects must be encoded before hashing

means you should do something like this:
from Crypto.Hash import SHA256

print(SHA256.new('abc'.encode('utf-8')).hexdigest())

","257","<python><hash><encoding><pycrypto>","0","0","2","2016-08-13 20:02:16","38936070","4","","1816580","","2016-08-13 18:36:44","2016-08-13 18:31:05",""
"52927037","How to perform blowfish decryption using pycrypto","Hello I'm trying to perform BlowFish Encryption/Decryption using pycrypto 
Here is my sample code file, The encryption works well while decrypting the data 
It just prints:
 Hello 8g

instead of this
Here is the complete sample code for BlowFIsh Encryption and Decryption, not sure what padding I need to add extra, I'm aware of the fact that BlowFISH  has a fixed data block size of 8 bytes and its keys can vary in length from 32 to 448 bits (4 to 56 bytes).
from Crypto.Cipher import Blowfish
from Crypto import Random
from struct import pack
bs = Blowfish.block_size
import os


encryptedpass = ""myverystrongpassword""
plaintextMessage = ""Hello 8gwifi.org""

iv = os.urandom(Blowfish.block_size)
bs = Blowfish.block_size


# ENcryption
cipher = Blowfish.new(encryptedpass, Blowfish.MODE_CBC, iv)
plen = bs - divmod(len(plaintextMessage),bs)[1]
padding = [plen]*plen
padding = pack('b'*plen, *padding)
ct = iv + cipher.encrypt(plaintextMessage + padding)


#Decryption
cipher = Blowfish.new(encryptedpass, Blowfish.MODE_CBC, iv)
msg = cipher.decrypt(ct[bs:])

print msg

","You failed to remove the padding after decrypt. Your padding is 8 bytes of the ASCII character ""\x08"", also known as the backspace character. When you printed it your terminal dutifully ""backspaced"" over and erased the previous 8 characters which were ""wifi.org"".
","255","<python><encryption><pycrypto>","1","0","1","2018-10-23 01:43:18","","0","","7470786","","2018-10-22 11:38:00","2018-10-22 10:20:40",""
"53234913","pycrypto AES CBC","I have written some code using the pycrypt library and I must be doing something wrong, but I can't figure out what it is that I am doing wrong.  I can (nearly) decrypt messages with the wrong initialization vector even though I believe I am following their examples.
from Crypto.Cipher import AES
import os
from string import ascii_letters

key, iv = os.urandom(32), os.urandom(16)
cipher = AES.new(key, AES.MODE_CBC, iv)
plaintext = ascii_letters
plaintext += ' ' * (-len(plaintext) % 16)  # Padding
ciphertext = cipher.encrypt(plaintext)

cipher = AES.new(key, AES.MODE_CBC, os.urandom(16))
text = cipher.decrypt(ciphertext)
# text[16:] = b'qrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ            '

Now aside from the first 16 bytes of the decrypted text, you have everything decrypted correctly with a totally random choice of IV.  Can someone help me figure out where I am going wrong?
","That's normal for cipher block chaining. In CBC decryption, the IV is only necessary to reconstruct the first block of plaintext. The computation of other blocks of plaintext doesn't actually involve the IV. Here's a diagram (source: Wikimedia user WhiteTimberwolf, public domain):

","254","<python><encryption><aes><pycrypto>","0","1","1","2018-11-10 00:34:37","","0","","","","","2018-11-10 00:21:04",""
"13842824","Is my PyCrypto implementation secure for my purposes?","I'm not experienced with programming, and the PyCrypto documentation is pretty sparse for a beginner. Let's say that I encrypt a file with the code I have written below, and send it over the internet. What I'm concerned about is the security of the file between computers A and B. Let's assume that the computers themselves are secure and the key is transported securely. Have I implemented things correctly? Anything else I should know about? Using Python 2.7 and PyCrypto 2.6
Thank you in advance for any answer.
from Crypto.Cipher import AES
from Crypto import Random

def get_random(length):
    r = Random.new().read(length)
    return r

def aes_encrypt(key, file_in, file_out):
    data_source = open(file_in, 'rb')
    data = data_source.read()
    data_source.close()
    iv = get_random(AES.block_size)
    cipher = AES.new(key, AES.MODE_CFB, iv)
    data_encrypted = iv+cipher.encrypt(data)
    file_encrypted = open(file_out, 'wb')
    file_encrypted.write(data_encrypted)
    file_encrypted.close()

def aes_decrypt(key, file_in, file_out):
    data_source = open(file_in, 'rb')
    data = data_source.read()
    data_source.close()
    iv = data[:AES.block_size]
    data = data[AES.block_size:]
    cipher = AES.new(key, AES.MODE_CFB, iv)
    data_decrypted = cipher.decrypt(data)
    file_decrypted = open(file_out, 'wb')
    file_decrypted.write(data_decrypted)
    file_decrypted.close()

#testing
key = get_random(32)
#encrypting the file on computer A
aes_encrypt(key, 'file.dat', 'file.enc')
#decrypting the file on computer B
aes_decrypt(key, 'file.enc', 'file.dat')

","You are missing one of the most important considerations in implementing crypto, which is message integrity. Unfortunately just encrypting a message isn't enough to ensure it isn't tampered with, especially in the case of streaming modes like CTR, CFB, and OFB. 
It looks like you are using CFB mode (MODE_CFB). The way this works is a random keystream is generated with AES, and the result is XOR-ed against the plaintext. This means that if someone flips a bit in the ciphertext, the corresponding bit will flip in the decrypted plaintext. An attacker could alter your message to mean something entirely different, and there'd be no way for you to detect it. For reference of how CFB mode (decryption) works:

If I flip the first bit of the first block of the ciphertext, it'll flip the first bit of the first block of the decrypted plaintext. 
You need to either apply an HMAC or use AES-GCM mode, which will handle confidentiality and integrity together. 
There are better mode choices than CFB, so if there's no strong reason for preferring it, I would recommend AES-GCM first, then AES-CTR with HMAC second. 
","251","<encryption><python-2.7><aes><pycrypto>","2","2","1","2012-12-12 17:25:12","","0","","1898198","","2012-12-12 15:43:38","2012-12-12 15:18:29",""
"53513303","Visual studio required for pycrypto?","I am a newbie to Python. So, please be gentle
I tried to install pycrypto to use encryption and deceryption. I used the Python command pip install pycrypto. On running the command received the following error:
error: [WinError 3] The system cannot find the path specified: 'C:\\Program Files\\Microsoft Visual Studio 14.0\\VC\\PlatformSDK\\lib'

1) Since the error refers Microsoft visual studio, does Visual studio have to be installed to install pycrypto? I've verified the path in the system (already have visual studio for C# projects). I've the path - c:\Program Files\Microsoft Visual Studio 14.0\vc\, but PlatformSDK folder does not exist
2) c:\Program Files\Microsoft Visual Studio 14.0\vc\ - May I know why it refers VC?
3) If visual studio not required, what do I've to do fix the error?
Additional info - I've Python 3.7 installed in the machine.
UPDATED: As per Moses answer, Pycryptodome does not require Microsoft Visual C++ and I could install without any issue. But yet to test code against library
","I think Dave's answer answer may help you get past the installation problem you are facing. As for alternatives to pycrypto on Python 3.7, you could try PyCryptodome
","247","<python><python-3.x><pycrypto>","2","2","1","2018-11-28 07:12:51","53513852","1","","7862492","","2018-11-28 07:12:51","2018-11-28 06:21:45","2018-11-28 20:05:07"
"53991964","ImportError: cannot import name '_AES' after upgraded to Python 3.6","I recently upgraded Linux Mint to 19.1 X64 with Python 3.6 from Linux Mint 18.3 X64 (with Python 3.5.2), and tried
from Crypto.Cipher import AES

I first got,
ImportError: No module named apt_pkg

fixed it by
sudo ln -s apt_pkg.cpython-{36m,35m}-x86_64-linux-gnu.so

in /usr/lib/python3/dist-packages;
then got another error,
ImportError: cannot import name '_AES'

I am wondering how to fix it. The interpreter for the project in PyCharm is currently set to Python 3.5.2;
","Most likely, your PyCrypto installation is broken and _AES.dll is missing. The reason might be that your computer is 64 bit but the Crypto which is 32 bit was downloaded by pip. Try to reinstall it according to this question: How do I install PyCrypto on Windows?
Alternatively, you can download Crypto 64 bit from here: https://github.com/BConcernedOnFamily/Crypto_64bit with the fix and add the files my github downloaded to the corresponding location under your python3/Lib. 
","246","<python-3.x><importerror><pycrypto>","0","0","1","2019-06-27 14:22:37","","0","","","","","2018-12-31 22:50:12",""
"53126706","How to decode bytes to first forward slash?","Hey everyone I'm having a slight issue with some python AES Decryption code I wrote. I'm trying to decrypt two different emails (of different lengths) using PyCryptoDome and AES-256-CBC encryption. My code is below:
import base64
from Crypto.Cipher import AES
import json
from Crypto.Util.Padding import pad, unpad

def decrypt(enc):
    # Get key
    key = base64.b64decode(""mybase64key"")

    # Load dictionary of Base64 values of the payload to decrypt
    dataDict = json.loads(base64.b64decode(myEncryptedData))

    # Create decrypter with our IV
    decrypter = AES.new(key, AES.MODE_CBC, base64.b64decode(dataDict['iv']))

    # Pad and decode data
    data = decrypter.decrypt(pad(base64.b64decode(dataDict['value']), 16))

    # EDIT: PRINTING DATA HERE
    print(data)

    # Works for shorter password
    print(data[:-24].decode())
    # Works for longer password
    print(data.decode())

It seems like just a padding issue, but I'm not sure how to go about getting the correct padding size. Both passwords/IV's have the same exact encrypted length, so
print(len(dataDict['value']))

prints 44 for both emails, and padding it prints 48 for both emails which stops me from getting the padding length since it's the same in all cases.
Using
print(len(data))

returns the same length value for both emails as well. However, when I just print data, I can see the two emails like so:
b'abcdefghijklmnop@gmail.com\x06\x06\x06\x06\x06\x06\x0f\xef\xe2\xa3\xdd\xH9\x7f\xj4\xwf\x14\x88\xd8(x\x90N'

b'abcd.efghi@myydomain.com\x08\x08\x08\x08\x08\x08\x08\x08y\xg3?\xa0\x1e\xaa`\xc2\x67\xf1i]3\xe1\xa0F'

How can I go about just getting the string I can see within the bytes array without knowing the length of the original text? Is there a workaround? The two example byte arrays I provided have the same exact length/format of the emails, just not sure how to deal with this issue.
","I really don't know what the \x06 or \x08 mean or signify, but they both happen to not be printable characters (which is why they display in hexadecimal like that). In addition, the values you show for the two email isn't valid Python syntax.
Ignoring that issue, something along these lines might work:
import string

# Leaving the invalid '\xH9\x7f\xj4\xwf\x14\x88\xd8(x\x90N' part off.
email1 = b'abcdefghijklmnop@gmail.com\x06\x06\x06\x06\x06\x06\x0f\xef\xe2\xa3\xdd'

for i, value in enumerate(email1):
    if chr(value) not in string.printable:
        print(i, '\\x{:02x}'.format(value))
        print(email1[:i])  # Show everything up to that point.
        break
else:
    print('all values were printable')

Output:
26 \x06
b'abcdefghijklmnop@gmail.com'

","241","<python><encryption><aes><pycrypto><encryption-symmetric>","1","1","2","2018-11-03 10:44:02","53127265","9","","8093698","","2018-11-03 00:08:04","2018-11-02 22:49:24",""
"53126706","How to decode bytes to first forward slash?","Hey everyone I'm having a slight issue with some python AES Decryption code I wrote. I'm trying to decrypt two different emails (of different lengths) using PyCryptoDome and AES-256-CBC encryption. My code is below:
import base64
from Crypto.Cipher import AES
import json
from Crypto.Util.Padding import pad, unpad

def decrypt(enc):
    # Get key
    key = base64.b64decode(""mybase64key"")

    # Load dictionary of Base64 values of the payload to decrypt
    dataDict = json.loads(base64.b64decode(myEncryptedData))

    # Create decrypter with our IV
    decrypter = AES.new(key, AES.MODE_CBC, base64.b64decode(dataDict['iv']))

    # Pad and decode data
    data = decrypter.decrypt(pad(base64.b64decode(dataDict['value']), 16))

    # EDIT: PRINTING DATA HERE
    print(data)

    # Works for shorter password
    print(data[:-24].decode())
    # Works for longer password
    print(data.decode())

It seems like just a padding issue, but I'm not sure how to go about getting the correct padding size. Both passwords/IV's have the same exact encrypted length, so
print(len(dataDict['value']))

prints 44 for both emails, and padding it prints 48 for both emails which stops me from getting the padding length since it's the same in all cases.
Using
print(len(data))

returns the same length value for both emails as well. However, when I just print data, I can see the two emails like so:
b'abcdefghijklmnop@gmail.com\x06\x06\x06\x06\x06\x06\x0f\xef\xe2\xa3\xdd\xH9\x7f\xj4\xwf\x14\x88\xd8(x\x90N'

b'abcd.efghi@myydomain.com\x08\x08\x08\x08\x08\x08\x08\x08y\xg3?\xa0\x1e\xaa`\xc2\x67\xf1i]3\xe1\xa0F'

How can I go about just getting the string I can see within the bytes array without knowing the length of the original text? Is there a workaround? The two example byte arrays I provided have the same exact length/format of the emails, just not sure how to deal with this issue.
","The problem is that you forget to unpad, that is your issue. 
Depending on how you padded;
pad(data_to_pad, block_size, style='pkcs7')
Apply standard padding. 

Unpad it reversely; 
unpad(padded_data, block_size, style='pkcs7')
Remove standard padding.

","241","<python><encryption><aes><pycrypto><encryption-symmetric>","1","1","2","2018-11-03 10:44:02","53127265","9","","8093698","","2018-11-03 00:08:04","2018-11-02 22:49:24",""
"35228597","pyqtdeploy: add external modules","is there someone who has experience with pyqtdeploy and adding external modules? I am currently using pyqtdeploy (version 1.2) together with PyQt 5.5.1 to write an application that can be deployed to an Android device. Without any external modules, the freezing with pyqtdeploy works pretty well. However, I am not really sure how I can add external modules (not pure Python ones) to my application. 
In particular, I want to add the external module pycrypto. Therefore, I downloaded the pycrypto sourcecode, compiled it with the Android toolchain (from the Android NDK) and now I have a bunch of *.py and *.so files. How can I add them to my application? 
My initial attempt was to add the *.py and the *.so files (so basically the whole pycrypto module) to the ""Other Packages"" tab in pyqtdeploy. 
But now, when I import something pycrypto related in my application (from Crypto.Cipher import AES) i get the following error message: 
File: "":/Crypto/Cipher/_AES.py"", line 20 in __bootstrap__
TypeError: 'NoneType' object is not callable 
The _AES.py file where the error is thrown, looks like this:
def __bootstrap__():
   global __bootstrap__, __loader__, __file__
   import sys, pkgutil, imp
   __file__ = pkgutil.get_data(__name__,'_AES.cpython-34m.so')
   __loader__ = None; del __bootstrap__, __loader__
   imp.load_dynamic(__name__,__file__)
__bootstrap__()

At first I thought, that the *.so filename was just wrong and therefore, I got the NoneType Error, so I changed the filename in _AES.py to something other like 'test.so'. Surprisingly, now, I get a different error message than before:
File "":/pkgutil.py"" line 629, in get_data
ImportError: qrcimporter: error opening file :/Crypto/Cipher/test.so
Ok, so the filename should be fine, right? But why do i get the 'NoneType` error message? What am I doing wrong? Is this the right way to accomplish this? 
Any help is highly appreciated. I am pretty sure, that i'm only one small step away from getting this thing to work, but I can't figure out what i'm doing wrong. 
Thanks!
","","237","<android><python><pyqt><pycrypto><pyqtdeploy>","1","","0","2018-02-20 23:22:21","","1","","984421","","2018-02-20 23:22:21","2016-02-05 16:10:24",""
"45186861","Two ways of printing a SHA-256 hash differ in 1 byte in Python","Consider the snippet:
from Cryptodome.Hash import SHA256
text = b'Jeanny'
print('Hash of', text)

hx = SHA256.new(text).hexdigest()
print(hx)

h = SHA256.new(text).digest()
[print('{0:x}'.format(h[i]), end = '' ) for i in range(0,len(h))]

It prints:
Hash of b'Jeanny'
f51c7dbd56cc25c565f7c7ef951b06121e87e34f2e3bb466e873a2518715fe50
f51c7dbd56cc25c565f7c7ef951b6121e87e34f2e3bb466e873a2518715fe50

Why is it that the second printed string of hex digits misses  0 in position 29?
","Because it's trying to print ""06"", but you haven't told it to zero-fill the numbers.
","234","<python><hex><pycrypto>","0","1","1","2017-07-19 18:21:01","45198251","1","","1816580","","2017-07-19 18:12:56","2017-07-19 09:46:41",""
"25703151","How to use a different version of PyCrypto in GAE Python","I downloaded the experimental version of PyCrypto (pycrypto-2.7a1.tar.gz). I have copied the ""Crypto"" directory (extracted from pycrypto-2.7a1.tar.gz) to my project folder. 
In app.yaml file:
libraries:
- name: pycrypto
  version: 2.7 # latest 

I get error (at the time of deployment) if I try to give version as 2.7a1 or 2.7 for PyCrypto in app.yaml:
appcfg.py: error: Error parsing C:\gaurav\coding\python\x\x\app.yaml: pycrypto version ""2.7"" is not supported, use one of: ""2.3"", ""2.6"" or ""latest"" (""latest"" recommended for development only)
  in ""C:\gaurav\coding\python\x\x\app.yaml"", line 73, column 1.

How do I provide the correct PyCrypto version in app.yaml ? 
","You use the app.yaml file to tell App Engine which libraries and versions you want to use only for those Third-party libraries available at the platform.
In your case, you want to use a version of the library that is not available, so you can't use that method to configure it.
Instead of that, you can upload to App Engine the libraries you want to use by following the method outlined in this other question:

To download the library and unzipped inside your GAE application directory. In this example, the destination directory is called pycrypto26.
To include the path to that library with something like 


import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'pycrypto26/lib'))



To import the relevant modules


import Crypto
from Crypto.Hash import SHA256, SHA512


A full working example is
import webapp2
import logging

import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'pycrypto26/lib'))

import Crypto
from Crypto.Hash import SHA256, SHA512

class MainPage(webapp2.RequestHandler):
    def get(self):
        logging.info(""Running PyCrypto with version %s"" % Crypto.__version__)
        self.response.write('<html><body>')
        self.response.write( SHA256.new('abcd').hexdigest() + ""<br>"" )
        self.response.write( SHA512.new('abcd').hexdigest() + ""<br>"")
        self.response.write('</body></html>')

application = webapp2.WSGIApplication([
    ('/', MainPage),
], debug=True)

","233","<google-app-engine><python-2.7><pycrypto><app.yaml>","0","1","1","2014-12-04 10:14:40","","0","","","","","2014-09-06 17:54:58",""
"4858307","Why are there forty characters left over in Google's PEM for packing a Chrome extension","I've recently been trying to figure out how to get PyCrypto to recognize PEM's which are produced by Google Chrome's packing process.  The problem is that the standard importKey method causes errors.  After a rather long process, I finally realized that I can initially simulate the import by reverse-engineering the DerSequence.decode method (all of the details here).  Unfortunately, it leaves me with one issue unresolved.
I can get the key to import, and it looks like it's fairly consistent, but I have 40 characters left over.
import binascii

# read the pem file into chromepem
# the first and last lines are useless, 
# we need it to be a string, not a tuple 
# and it needs to be one string with no newlines.
chromepem = ''.join(open(""chrome.pem"",""r"").readlines()[1:-1]).replace(""\n"","""")

# not sure why, but it looks like the first 40 characters aren't necessary.
# removing them seems to create a consistent public key anyway...
pem = binascii.a2b_base64(chromepem[40:])

Does anyone know why those 40 characters are there?  Will ignoring them cause issues with some private/public key pairs?
","For now, the simplest thing to do is to use the openssl rsa utiity to convert the chrome.pem file to a chrome.der file. Something like
openssl rsa -in chrome.pem -out chrome.der -outform DER

should do the trick. Now you can use the bytes from chrome.der directly in the RSA.importKey() method.
","231","<python><google-chrome-extension><rsa><pem><pycrypto>","1","2","1","2011-02-03 12:24:50","4886102","3","","","","","2011-02-01 02:30:11",""
"53109897","RSA with AES 128","This is my protocol:
Encryption and signing - user A

cipher using the public key from user B
sign the encrypted message with the private key A

Verifying and decrypting - user B

verify the signature with the public key A
decrypt the message with the private key B

The private key A and B are the same (128 bit)
I want to send the text using this protocol with AES in mode CBC so i create this code but doesnt work ,apperar in signature:
bytes object has no attribute n

the code is the following:
    def firmar(self, datos):

        try:
            h = SHA256.new(datos)

            signature = pss.new(self.keyprivada).sign(h)
            return signature
        except (ValueError, TypeError):
            return None

    def comprobar(self, text, signature):

        h = SHA256.new(text)

        print(h.hexdigest())
        verifier = pss.new(self.keypublica)
        try:
            verifier.verify(h, signature)
            return True
        except (ValueError, TypeError):
            return False

","This section is no longer relevant as the code has changed

Firstly, you are usine ECB this is insecure due to the relationship between text and its output being constant.
Secondly, CBC requires an IV hence a different implementation would be required.
Lastly and most crucially:
AES is NOT an asymmetric encryption algorithm
meaning that it must be encrypted and decrypted with the same key. You use the public and the private keys as you would with asymmetrical encryption methods.
An alternative:
If you were to implement RSA properly you could then generate a random byte array and use that as your key, then send it encrypted to the recipient to decrypt it and use it as the key to decrypt the aes as it would be the same.

Now:
You use the private key to sign the data... RSA  requires you to use the public key (now private - not distributed) to encrypt it however you cannot decrypt something encrypted with the private key with the public key. Instead you distribute the ‘private key’ for decryption and keep the ‘public key’ for encryption so no one else can encrypt or sign the data.
WHAT are you doing!
There is a relationship between public and private keys! You cannot just use random byte arrays.
Read the Wikipedia article.
","229","<python><aes><rsa><pycrypto>","-1","0","1","2018-11-02 08:30:36","","2","1","9922544","","2018-11-01 22:35:29","2018-11-01 21:54:14",""
"43453623","python equivalent for RSA.SignData in .NET","RSACryptoServiceProvider rsa = new RSACryptoServiceProvider();
rsa.FromXmlString(PrivateKey);

string data = ""SAMPLE TEXT."";

byte[] signedData = rsa.SignData(Encoding.UTF8.GetBytes(data), new
SHA1CryptoServiceProvider());
string signedString = Convert.ToBase64String(signedData);

The code above signs a string with a PrivateKey loaded from an xml.
Would you help me rewrite it in python?
I wrote this code myself but it produce a different signature!
from Crypto.PublicKey import RSA
from Crypto.Util.number import bytes_to_long, long_to_bytes
from hashlib import sha1
import base64

msg = ""SAMPLE TEXT.""
hashed = sha1(msg.encode('utf-8')).digest()
pubkey = RSA.construct((m,e))
encrypted = pubkey.encrypt(hashed, b'X')[0]
print(""Signature: {0}"".format(base64.b64encode(encrypted)))

","There is no builtin RSA library in Python, that I know of, but take a look at this one (just named rsa) which supports signing.
# importing rsa
import rsa

# generating a key
(pubkey, privkey) = rsa.newkeys(512)

# message
message = 'Go left at the blue tree'

# signing
signature = rsa.sign(message, privkey, 'SHA-1')

# verifying
rsa.verify(message, signature, pubkey) # True

","229","<python><rsa><digital-signature><pycrypto>","0","0","1","2017-04-19 10:32:13","","4","","1816580","","2017-04-17 21:18:05","2017-04-17 14:41:18",""
"20418696","Increasing the diffusion of the AES-CBC encryption algorithm in pycrypto for python","When encryption is done using the AES-CBC algorithm, the encryption can be thought of as chaining the cipher texts with the previous ones and an IV. However, if its on CBC mode, we give our cipher text forward diffusive properties (i.e. if we change but i in our cipher, plaintext is change for all blocks after that). To make malleability attacks harder, one can chain the cipher texts during encryption on both directions (or implement something similar as in the bitLocker paper).
Does anyone know if there a implementation of pyCrypto that provides a chaining of the cipher texts using both direction?
One way that I thought of solving this was getting the original cipher text, reversing it using python and then feed it to pyCrypto. However, this seemed a little brute force because the whole point of pyCrypto is to take advantage of their C level implementation (while reversing a string would introduce a obvious unfortunate performance hit).
","No, as far as I know there are no modes in pyCrypto that do this. This strong diffusion of the plaintext after an error in the ciphertext is called error propagation. Error propagation is nowadays not considered that important anymore; if you want to provide integrity of the plaintext then you add a MAC (say, HMAC) over the ciphertext instead, or you use an authenticated cipher (which basically provides integrity on top of confidentiality). Unfortunately I didn't see any authenticated cipher modes in pyCrypto.
","228","<python><encryption><aes><pycrypto><cbc-mode>","3","0","1","2015-10-02 10:34:47","","3","1","","","","2013-12-06 07:45:44",""
"48909852","how to convert data (to byte string?) for python pycrypto encrypt() function","I have an encryption function for which I want to use pycrypto encrypt() function. I'm new to Python (using 2.7) so I am having a hard time understading the input output data types. iv is generated with os.urandom(16), and I understand the output is random bytes. Is that the same as a byte string? the block_list is supposed to be 16 byte blocks of a message to encrypt (assuming no padding), where the msg is a plaintext string. When I encrypt, I want to xor a message block with a ciphertext block (I figured out how to do that with some added code) and then turn it back to a byte string. However, I don't think my function is outputting in the correct format. Any ideas? I'm not sure if I need to encode/decode.
def my_CBC_encrypt(key, iv, msg):
    my_cipher = AES.new(key, AES.MODE_CBC, iv)

    c_temp = iv
    c_final = iv

    block_list = s[i:i+16] for i    in range(0, len(msg), 16)

    for item in block_list:
            c_temp = my_cipher.encrypt(c_temp ^ item)
            c_final = c_final + c_temp


    return c_final

","","225","<python><python-2.7><encryption><pycrypto><bytestring>","1","","0","2018-02-21 18:22:30","","1","","9391809","","2018-02-21 18:22:30","2018-02-21 15:39:59",""
"47556297","Unable to install pycrypto on ubuntu 14.04 with python3","I'm trying to install stream package with pip install stream_django which has pycrypto dependency. So while installing pycrypto dependecy it returns me RuntimeError: autoconf error error.
How can i install pycrypto on ubuntu 14.04 with python3
","I had a other error with pycrypto, so I used pycryptodome.
It basicly is the same. You can install it by typing:
pip install pycryptodome

","221","<django><python-3.x><django-rest-framework><pycrypto>","0","0","1","2018-05-06 10:53:32","","2","","","","","2017-11-29 15:27:42",""
"22702003","Pycrypto installation failing on Travis CI","I am getting a UnicodeDecodeError on my Travis CI build during pip install pycrypto.
Traceback (most recent call last):
  File ""/home/travis/virtualenv/python2.7/bin/pip"", line 11, in <module>
    sys.exit(main())
  File ""/home/travis/virtualenv/python2.7/local/lib/python2.7/site-packages/pip/__init__.py"", line 185, in main
    return command.main(cmd_args)
  File ""/home/travis/virtualenv/python2.7/local/lib/python2.7/site-packages/pip/basecommand.py"", line 161, in main
    text = '\n'.join(complete_log)
UnicodeDecodeError: 'ascii' codec can't decode byte 0xe2 in position 36: ordinal not in range(128)

https://travis-ci.org/ruslanosipov/rblog/builds/21724008.
Any hint where to look for a solution? I can't reproduce this locally.
","","209","<python><pip><travis-ci><pycrypto>","0","","0","2014-03-28 00:31:15","","3","","","","","2014-03-28 00:31:15",""
"19066437","Error executing the result of cx_freeze using pycrypto","I am trying to freeze a Little python program using pycrypto library in Windows. Last version of everything including cx_freeze.
After running >python setup.py build apparently everything goes nice.
But running the exe file generated reports the following error : ImportError: cannot import name _AES
The error is reported by AES.py file which is part of pycrypto lybrary.
I have copied the pycrypto structure in the same directory where setup.py is and I played with the contents of setup.py making a lot of subtle changes but I always get the same error.
Does someone know what I am missing?
","","209","<cx-freeze><pycrypto>","1","","0","2013-09-28 11:29:53","","2","","","","","2013-09-28 11:29:53",""
"35521700","google-api-python-client broken by OAuth2?","I am trying to check whether a certain dataset exists in BigQuery and I get this very strange error I've never had untill yesterday:
ERROR:dsUtils.bq_utils:Could not check if dataset tmp exists.
Traceback (most recent call last):
  File ""C:\Users\paco\Anaconda3\envs\visitForecastEnv\lib\site-packages\dsUtils\bq_utils.py"", line 113, in _get
    resp = bq_service.datasets().get(projectId=self.project_id, datasetId=self.id).execute(num_retries=2)
  File ""C:\Users\paco\Anaconda3\envs\visitForecastEnv\lib\site-packages\oauth2client\util.py"", line 137, in positional_wrapper
    return wrapped(*args, **kwargs)
  File ""C:\Users\paco\Anaconda3\envs\visitForecastEnv\lib\site-packages\googleapiclient\http.py"", line 755, in execute
    method=str(self.method), body=self.body, headers=self.headers)
  File ""C:\Users\paco\Anaconda3\envs\visitForecastEnv\lib\site-packages\googleapiclient\http.py"", line 93, in _retry_request
    resp, content = http.request(uri, method, *args, **kwargs)
  File ""C:\Users\paco\Anaconda3\envs\visitForecastEnv\lib\site-packages\oauth2client\client.py"", line 598, in new_request
    self._refresh(request_orig)
  File ""C:\Users\paco\Anaconda3\envs\visitForecastEnv\lib\site-packages\oauth2client\client.py"", line 864, in _refresh
    self._do_refresh_request(http_request)
  File ""C:\Users\paco\Anaconda3\envs\visitForecastEnv\lib\site-packages\oauth2client\client.py"", line 891, in _do_refresh_request
    body = self._generate_refresh_request_body()
  File ""C:\Users\paco\Anaconda3\envs\visitForecastEnv\lib\site-packages\oauth2client\client.py"", line 1597, in _generate_refresh_request_body
    assertion = self._generate_assertion()
  File ""C:\Users\paco\Anaconda3\envs\visitForecastEnv\lib\site-packages\oauth2client\service_account.py"", line 318, in _generate_assertion
    key_id=self._private_key_id)
  File ""C:\Users\paco\Anaconda3\envs\visitForecastEnv\lib\site-packages\oauth2client\crypt.py"", line 97, in make_signed_jwt
    signature = signer.sign(signing_input)
  File ""C:\Users\paco\Anaconda3\envs\visitForecastEnv\lib\site-packages\oauth2client\_pycrypto_crypt.py"", line 101, in sign
    return PKCS1_v1_5.new(self._key).sign(SHA256.new(message))
  File ""C:\Users\paco\Anaconda3\envs\visitForecastEnv\lib\site-packages\Crypto\Signature\PKCS1_v1_5.py"", line 112, in sign
    m = self._key.decrypt(em)
  File ""C:\Users\paco\Anaconda3\envs\visitForecastEnv\lib\site-packages\Crypto\PublicKey\RSA.py"", line 174, in decrypt
    return pubkey.pubkey.decrypt(self, ciphertext)
  File ""C:\Users\paco\Anaconda3\envs\visitForecastEnv\lib\site-packages\Crypto\PublicKey\pubkey.py"", line 93, in decrypt
    plaintext=self._decrypt(ciphertext)
  File ""C:\Users\paco\Anaconda3\envs\visitForecastEnv\lib\site-packages\Crypto\PublicKey\RSA.py"", line 235, in _decrypt
    r = getRandomRange(1, self.key.n-1, randfunc=self._randfunc)
  File ""C:\Users\paco\Anaconda3\envs\visitForecastEnv\lib\site-packages\Crypto\PublicKey\RSA.py"", line 126, in __getattr__
    raise AttributeError(""%s object has no %r attribute"" % (self.__class__.__name__, attrname,))
AttributeError: _RSAobj object has no '_randfunc' attribute

Has anyone an idea of why I get these errors suddenly?
","","206","<python><oauth-2.0><google-bigquery><pycrypto><google-api-python-client>","1","","0","2016-02-20 10:05:50","","5","","","","","2016-02-20 10:05:50",""
"39971265","Convert AES encryption code in C++ to python using pycrypto","I am learning python and trying to convert the above code snippet found online to python. 
As my understanding, the below code is generating the session key based upon SHA1 hash of the password ""Microsoft"" but I am not sure how I can derive AES 256 key based upon the hash of the password in python. And when I use AES.new(), what IV should be in this case? 16 Random bytes? 
string encrypt ( const char *s ) 
{
    DWORD dwSize = strlen ( s );
    DWORD dwSize2 = strlen ( s );
    HCRYPTHASH hHash = NULL;
    HCRYPTKEY hKey = NULL;
    HCRYPTPROV hProv = NULL;
    char *buffer;

    char *pwd = ""Microsoft""; 
    int pwdLen = strlen ( pwd );

    // CryptAcquireContext function is used to acquire a handle to a particular key container within a particular cryptographic service provider (CSP)
    if ( ! CryptAcquireContext ( &hProv, NULL, MS_ENH_RSA_AES_PROV, PROV_RSA_AES, 0 ) )
    {
        printf ( ""Unable to acquire encryption context\n"" );
        return NULL;
    }

    // CryptCreateHash function initiates the hashing of a stream of data. It creates and returns to the calling application a handle to a cryptographic service provider (CSP) hash object
    if ( ! CryptCreateHash ( hProv, CALG_SHA1, 0, 0, &hHash ) )
    {
        CryptReleaseContext ( hProv, 0 );
        printf ( ""Unable to create hash\n"" );
        return NULL;
    }

    // CryptHashData function adds data to a specified hash object
    if ( ! CryptHashData ( hHash, (const byte *)pwd, pwdLen, 0 ) )
    {
        CryptDestroyHash ( hHash );
        CryptReleaseContext ( hProv, 0 );
        printf ( ""Unable to add key\n"" );
        return NULL;
    }

    // CryptDeriveKey function generates cryptographic session keys derived from a base data value
    if ( ! CryptDeriveKey ( hProv, CALG_AES_256, hHash, 0, &hKey ) )
    {
        CryptDestroyHash ( hHash );
        CryptReleaseContext ( hProv, 0 );
        printf ( ""Unable to derive key\n"" );
        return NULL;
    }

    // CryptEncrypt function encrypts data; have API return us the required buffer size
    CryptEncrypt ( hKey, 0, true, 0, 0, &dwSize, strlen ( s ) ); 

}

","","198","<python><c++><aes><pycrypto><wincrypt>","2","","0","2017-02-20 07:20:00","","0","","3329664","","2017-02-20 07:20:00","2016-10-11 06:03:38",""
"48756090","Python pyCrypto PKCS1 OAEP to Java Cipher","I have been given some Python code from the backend that decrypts some data. On my side, the Android app, I need to also decrypt it.
Here are some snippets of the Python code which I believe are the most relevant.
cipher = PKCS1_OAEP.new(privkey)

And this is the module that it comes from
from Crypto.Cipher import PKCS1_v1_5
from Crypto.Cipher import PKCS1_OAEP

Looking at the documentation for PKCS1_OAEP.new
https://www.dlitz.net/software/pycrypto/api/2.6/Crypto.Cipher.PKCS1_OAEP-module.html
And then comparing with the JavaDoc for Cipher 
https://docs.oracle.com/javase/6/docs/technotes/guides/security/StandardNames.html#Cipher
I deduced that this Python algorithm can be expressed as follows using the Java Cipher class (Note the code is in Kotlin)
   val cipher = Cipher.getInstance(""RSA/NONE/OAEPWithSHA1AndMGF1Padding"", ""BC"")

Note that BC is the provider. I found out that BouncyCastle is popular and is included in the Android framework
So what is the error?
The backend returns me a 404 when the answer to the challenge is wrong.
When I execute the Python code (which hits the same endpoints) it works. 
In terms of the POST request, I compared both and I am sending it in the correct way.
What would I like to know
Am I using the correct algorithm? I am trying to systematically cross out potential issues before moving onto another 
Note that I also tried
    val cipher = Cipher.getInstance(""RSA/NONE/OAEPPadding"", ""BC"")

","","194","<java><android><python><pycrypto>","2","","0","2018-04-29 00:31:32","","0","1","6854564","","2018-04-29 00:31:32","2018-02-12 21:50:06",""
"29119034","RSA authentication Android java client, app engine pycrypto server, encoded private key","I have an Android client sending RSA-signed messages to an App Engine server using Python and the pycrypto library. The server creates the key pair and sends the private key, encrypted, to the client. I am having trouble unpacking the received key on the Android/Java/client side for use with the signature library. The key, as it is stored looks like this:
-----BEGIN PRIVATE KEY-----
    Proc-Type: 4,ENCRYPTED
    DEK-Info: DES-EDE3-CBC,9C527448BB17EA68
    jodXz.....
    .....+FxMnI
    -----END PRIVATE KEY-----
This is the sort of thing that hundreds of people must have done already, but the examples I have found fail almost immediately.
Any help or guidance would be appreciated.
","-----BEGIN RSA PRIVATE KEY-----
Proc-Type: 4,ENCRYPTED
DEK-Info: DES-EDE3-CBC,9C527448BB17EA68

jodXz..... .....+FxMnI
-----END PRIVATE KEY-----

""DEK-Info"" contains information on how the following key data was encrypted: with Triple DES and CBC chaining mode. 9C527448BB17EA68 is input vector. Along with passphrase it allows to decrypt private key data.
Example of Triple DES in Java
","193","<android><rsa><signature><pycrypto>","-1","0","1","2015-03-18 15:30:11","","0","","","","","2015-03-18 10:02:20",""
"35122083","TypeError happens with Nginx but not with Flask Server","I am running an api behind flask in python and connections are handled through nginx and uwsgi.
Some of the api routes use pycrypto but am getting errors when using nginx on port 80 regarding this line in the pycrypto source.
The full traceback is:
Traceback (most recent call last):
  File ""/home/ubuntu/test/testvenv/local/lib/python2.7/site-packages/flask/app.py"", line 1817, in wsgi_app
    response = self.full_dispatch_request()
  File ""/home/ubuntu/test/testvenv/local/lib/python2.7/site-packages/flask/app.py"", line 1477, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File ""/home/ubuntu/test/testvenv/local/lib/python2.7/site-packages/flask_cors/extension.py"", line 188, in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
  File ""/home/ubuntu/test/testvenv/local/lib/python2.7/site-packages/flask/app.py"", line 1381, in handle_user_exception
    reraise(exc_type, exc_value, tb)
  File ""/home/ubuntu/test/testvenv/local/lib/python2.7/site-packages/flask/app.py"", line 1475, in full_dispatch_request
    rv = self.dispatch_request()
  File ""/home/ubuntu/test/testvenv/local/lib/python2.7/site-packages/flask/app.py"", line 1461, in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
  File ""./application.py"", line 113, in new_user
    decrypted_json = crypt.decrypt_json(encrypted)
  File ""./crypto_module/crypt.py"", line 201, in decrypt_json
    decrypted_text = cryptor.decrypt(data_to_decrypt, PASSWORD)
  File ""./crypto_module/crypt.py"", line 112, in decrypt
    encryption_key = self._pbkdf2(password, encryption_salt, iterations=iterations)
  File ""./crypto_module/crypt.py"", line 184, in _pbkdf2
    return KDF.PBKDF2(password, salt, dkLen=key_length, count=iterations, prf=lambda p, s: hmac.new(p, s, hashlib.sha256).digest())
  File ""/home/ubuntu/test/testvenv/local/lib/python2.7/site-packages/Crypto/Protocol/KDF.py"", line 110, in PBKDF2
    password = tobytes(password)
  File ""/home/ubuntu/test/testvenv/local/lib/python2.7/site-packages/Crypto/Util/py3compat.py"", line 85, in tobytes
    return ''.join(s)
TypeError

The TypeError is never specifically mentioned for some reason.
The error also does not show when running the server with the basic python application.py command on the default port 5000. When letting nginx and uwsgi handle the connections, I get the Internal Server Error shown above. Not really sure what's happening. All other non-crypto routes go through fine.
Update: running the server one level up in uwsgi with the following command will also work. Nginx still does not:
uwsgi --socket 0.0.0.0:8000 --protocol=http -w wsgi 

Update 2: Now getting another TypeError that's a little more descriptive but I still think the data being sent in the request is not being handled the same way/correctly with nginx as it is with uwsgi or flask.
...
  File ""./crypto_module/crypt.py"", line 202, in <lambda>
    return KDF.PBKDF2(password, salt, dkLen=key_length, count=iterations, prf=lambda p, s: hmac.new(p, s, hashlib.sha256).digest())
  File ""/usr/lib/python2.7/hmac.py"", line 133, in new
    return HMAC(key, msg, digestmod)
  File ""/usr/lib/python2.7/hmac.py"", line 68, in __init__
    if len(key) > blocksize:
TypeError: object of type 'NoneType' has no len()

I should also note that crypt.py is RNCryptor-python
","Got it working.
In /etc/nginx/sites-enabled/test
uwsgi_pass unix:/...;

Should be
uwsgi_pass unix:///...;

The original error also stemmed from the password used in the crypto file. The password was retrieved from the system's environment variables. I later found out that Nginx doesn't come with any functionality to natively use environment variables but a workaround is explained here.
","190","<python><nginx><flask><pycrypto><pbkdf2>","0","0","1","2016-02-02 06:15:41","35144190","9","","3203662","","2016-02-01 21:45:57","2016-02-01 02:14:33",""
"54908486","PyCryptodome alternative for jython","I am trying to incorporate a simple encrypting processor for Apache Nifi. I am using the Script Processor module to include a Python script that does the function on encrypting and decrypting with AES. I am having trouble loading the module PyCryptodome (I also tried pycrypto), that was offering me the functionality. I have read that this module cannot be loaded as it is not pure python, which is, aparently, not supported by Nifi.
Any suggestion of what can I use as an alternative to this module?
","It's not that NiFi doesn't support native Python modules per se, rather it is the Jython engine that we use in NiFi (as NiFi is a pure Java implementation) that does not support it. If you have a Python interpreter on the node(s) running NiFi, you could use ExecuteStreamCommand to shell out to Python using your script (with native imports), you'd get the contents of the flow file as stdin and you'd write your encrypt/decrypt logic to output to stdout, which would become the contents of the outgoing flow file.
I'm looking into a Py4J processor so we can get around Jython's limitation on native modules, but you'd still have to Bring Your Own Python (BYOP). For now, as long as you don't want to do anything more complex than taking in flow file content and writing out flow file content, ExecuteStreamCommand should do the trick.
","189","<python><apache-nifi><pycrypto>","-1","4","1","2019-02-27 15:42:08","54909199","1","","","","","2019-02-27 15:05:47",""
"54270908","How to decode IPFS private and public key in DER/PEM format?","how to decode IPFS private and public key in DER/PEM format that can work with the pycryptodome library(for Python 3)? I get the keys from the IPFS configuration file as strings, so I will not explain this process here.
What I'm trying to do:
import base64, Crypto

publicKey = ""CAASpgIwgE ... jkupAgMBAAE=""
privateKey = ""CAASqQkwgg ... Xmzva/Km7A==""

publicKey = base64.b64decode(publicKey)
key = Crypto.PublicKey.RSA.import_key(publicKey)
crypter = Crypto.Cipher.PKCS1_OAEPPKCS1_OAEP.new(key)
encryptedData = crypter.encrypt(data.encode())
result = base64.b64encode(encryptedData).decode()

I get the following exception:
key = Crypto.PublicKey.RSA.importKey(publicKey)
  File ""/usr/local/lib/python3.6/site-packages/Crypto/PublicKey/RSA.py"", line 754, in import_key
    raise ValueError(""RSA key format is not supported"")

Similar problem with privateKey. In what format is the key and how to convert it to an acceptable format? 
import_key function source code is there: https://github.com/Legrandin/pycryptodome/blob/master/lib/Crypto/PublicKey/RSA.py#L682
","The solution was not as straightforward as it seemed to me at first glance.
For a start, you need to understand that the contents of the PrivateKey and PublicKey variables are not just a pure key encoded in Base64, it is a protobuf object serialized in ByteArray and then encoded in Base64. In order to get a key out of it, you first need to get a schema of this object, which is available by reference.
We save this file and follow the instructions on this page. In short, I ran the command protoc --python_out=. crypto.proto to create a Python module called crypto_pb2.py.
All preparations are complete and now go to the code:
import crypto_pb2
import base64

publicKey = ""CAASpgIwgE ... jkupAgMBAAE=""
privateKey = ""CAASqQkwgg ... Xmzva/Km7A==""

You must first decode the base64 string to a byte array:
decoded = base64.b64decode(publicKey) 

This function deserializes an array of bytes into a familiar Python protobuf object, I took it from this answer and modified a little:
def deserialize(byte_message, proto_type):
    module_, class_ = proto_type.rsplit('.', 1)
    class_ = getattr(crypto_pb2, class_) # crypto_pb2 is a name of module we recently created and imported
    rv = class_()
    rv.ParseFromString(byte_message) # use .SerializeToString() to reverse operation
    return rv

Further we call the function, pass the decoded base64 and the name of the class to which it corresponds (PublicKey for publicKey and PrivateKey for privateKey), I'm interested in the Data property.
publicKey = deserialize(decoded, 'crypto.pb.PublicKey').Data

Now you can transfer it to the import_key function as ByteArray. Do not perform additional conversions.
key = Crypto.PublicKey.RSA.import_key(publicKey)
crypter = Crypto.Cipher.PKCS1_OAEPPKCS1_OAEP.new(key)
encryptedData = crypter.encrypt(data.encode())
result = base64.b64encode(encryptedData).decode()

","189","<python><rsa><pycrypto><ipfs><pycryptodome>","1","1","1","2019-01-20 12:54:38","54271911","0","","","","","2019-01-19 20:02:14",""
"52181366","pyCrypto: Input must be a multiple of 16 in length","I am trying to decrypt a string encoded with ""crypto-js"" and decode it in python using ""pyCrypto"". I have followed the exact steps on various blogs but still the same error. 
Last stackoverflow post i followed was
""CryptoJS and Pycrypto working together"" the answer given  by @Artjom B.
Also tried ""https://chase-seibert.github.io/blog/2016/01/29/cryptojs-pycrypto-ios-aes256.html""
My js code is
var pass = CryptoJS.AES.encrypt(text, password_encrypt_key, 
        {
            iv: password_encrypt_iv,
        })
    return password_encrypt_iv.concat(pass.ciphertext).toString(CryptoJS.enc.Base64);

And my python code is
    BLOCK_SIZE = 16
    KEY = constants.PASSWORD_ENCRYPT_KEY
    # IV = constants.PASSWORD_ENCRYPT_IV
    IV = enc_password[:BLOCK_SIZE]
    MODE = AES.MODE_CBC
    enc_password = base64.b64decode(enc_password)
    aes = AES.new(KEY, MODE, IV)
    password = unpad(aes.decrypt(enc_password[BLOCK_SIZE:]))

unpad function
def unpad(s):
  return s[:-ord(s[-1])]

","I found the solution. Not sure how this worked and not the rest of the solution but anyways posting it. Also the solution is from the below link answer by Artjom B. He has given better explaination. I am also posting the same answer.
Link - How to decrypt password from JavaScript CryptoJS.AES.encrypt(password, passphrase) in Python
Javascript - 
var KEY = encrypt_key;
var encrypted_txt_obj = CryptoJS.AES.encrypt(text, KEY);
return encrypted_txt_obj.toString();

python -
from Crypto.Cipher import AES
import base64

BLOCK_SIZE = 16

def bytes_to_key(data, salt, output=48):
    data += salt
    key = md5(data).digest()
    final_key = key
    while len(final_key) < output:
      key = md5(key + data).digest()
      final_key += key
    return final_key[:output]

def decrypt_text(enc):
    try:
        enc = base64.b64decode(enc)
        assert enc[0:8] == b""Salted__""
        salt = enc[8:16]
        key_iv = bytes_to_key(encrypt_key, salt, 32 + 16)
        key = key_iv[:32]
        iv = key_iv[32:]
        aes = AES.new(key, AES.MODE_CBC, iv)
        text = unpad(aes.decrypt(enc[16:]))
        return text
   except Exception as e:
        resp = jsonify({constants.ERR_SERVER: e.message})
        resp.status_code = 403
        logger.error(""Exception %s"", e.message)
        return resp

def unpad(data):
    return data[:-(data[-1] if type(data[-1]) == int else ord(data[-1]))]

","187","<javascript><python><pycrypto><cryptojs>","1","0","1","2018-09-10 05:31:21","52251625","2","1","","","","2018-09-05 09:12:20",""
"3083366","Using Crypto by placing folder in python path? - Python","I'm using Django in order to serve a web service. I have only access to FTP and code refresh at the moment. No access to command-line or executing any kind of executable.
I am using a Windows Server 2005 machine.
Would I be able to use Crypto just by placing the folder within my Django project?
Are there any good alternatives if not?

Help would be amazing guys!!!
","You'll need to build pycrypto before you upload it. This will need to be done on a machine with as similar an environment to your server as possible.
To build, run python setup.py build from inside the pycrypto-2.1.0 directory. This will create build\lib.win32-2.6\Crypto (the name of the libxxx directory might be a little different).
FTP the Crypto folder to somewhere on your server's python path. Inside the Django project folder may or may not work. A safe bet is to put it right in your site-packages folder, if you have access to it.
I don't know much about deploying on Windows, but usually you need to restart the server to reload the application whenever you make any changes. Hopefully that's what you meant by 'code refresh'
","186","<python><django><aes><pycrypto>","0","1","1","2010-06-21 14:48:30","","0","","","","","2010-06-21 09:16:55",""
"34613508","output blowfish string pycrypto-python","hi guys I'm new in this forum , I would ask one thing : making a simple script and using pycrypto I created ( along with my one of my friends ) this script , the problem is the output , my terminal fails to display the good ' ouput in fact there is such an output like this:  ��QIj�A
  while if I use instead of concatenating the string with "" + "" put "" , "" the result ( example ) is as follows : \\ XD7 \ x93 \ xb0 \ x9c \ x81 \ X9a . 
I would like to know why this difference and how to print the correct output , I binascii imported but do not know how to make it readable to a normal terminal ouput .
I hope I explained .
Thank you :)
#!/usr/bin/python2

import binascii
from getpass import getpass as getpasswd

try:
    from Crypto.Cipher import Blowfish as bfcipher #blowfish encryption
except ImportError:
    print(""* Install pycrypto *"")
    exit(2)

def get_enctype_user():
    ask_enctype = '''
** Crypy **
Choose encryption 
[1] Blowfish
--> '''
    try:
        enctype = int(raw_input(ask_enctype))
    except ValueError:
        print(""Non-integer value!"")
        exit(4)

    if enctype == 1:
        return 1
    else:
        print(""Non-valid option"")
        exit(1)

def autopadding(__txt):
    rlen = len(__txt)%8
    __txt = __txt +("" ""*(8-rlen))
    return __txt

def get_operation_user():
    ask_operation = '''
** What to-do
[1] Encrypt
[2] Decrypt
-->  '''
    try:
        optype = int(raw_input(ask_operation))
    except ValueError:
        print(""Non-integer value!"")
        exit(4)

    if optype == 1:
        return 1
    elif optype == 2:
        return 2
    else:
        print(""Non-valid operation"")
        exit(1)

class BlowfishCipher:
    def __init__(self, __txt, __passwd):
        self.encpasswd = __passwd
        self.text = __txt
        self.coder = bfcipher.new(self.encpasswd)

    def crypt(self):
        self.encrypt = self.coder.encrypt(self.text)
        return self.encrypt

    def decrypt(self):
        self.decrypt = self.coder.decrypt(self.text)
        return self.decrypt

def main():
    encryption = """"
    operation = """"
    __text = """"
    __passwd = """"

    use_enc = get_enctype_user()
    if use_enc == 1:
        encryption = ""blowfish""

    user_op = get_operation_user()
    if user_op == 1:
        operation = ""crypt""
    elif user_op == 2:
        operation = ""decrypt""

    print(""[---------]"")
    __text = str(raw_input(""Type text: ""))
    __passwd = getpasswd(""Type password: "")

    pad_text = autopadding(__text)

    if encryption == ""blowfish"":
        bfch_obj = BlowfishCipher(pad_text, __passwd)
        if operation == ""crypt"":
            encrypted_text = bfch_obj.crypt()
            print(""Encrypted text: ""+encrypted_text)
        elif operation == ""decrypt"":
            decrypted_text = bfch_obj.decrypt()
            print(""Decrypted text: ""+decrypted_text)

if __name__ == ""__main__"":
    try:
        main()
    except KeyboardInterrupt:
        print(""Bye bye!"")
        exit(0)
    except Exception:
        print(""General exception raised!"")
        exit(3)

","","177","<python><encryption><pycrypto>","1","","0","2016-01-05 14:02:10","","1","1","","","","2016-01-05 14:02:10",""
"55036059","A java server use SHA256WithRSA to sign message, but python can not verify","Here is the code, the second (message, signature and public key) works fine on Java, can verify the message. But when I am using python, it will failed.
If am signed the message and the code will verify the message correctly.
Would some one help me to check the problem? Thank you.
# -*- coding:utf-8 -*-
from Crypto.PublicKey import RSA
from Crypto.Hash import SHA256
from Crypto.Signature import PKCS1_v1_5
from base64 import b64decode, b64encode

public_key = 'MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBALyJy3rlD9EtWqVBzSIYxRRuFWRVn3juht2nupDCBSsWi7uKaRu3W0gn5y6aCacArtCkrf0EehwYRm0A4iHf8rkCAwEAAQ=='
private_key = 'MIIBVQIBADANBgkqhkiG9w0BAQEFAASCAT8wggE7AgEAAkEAvInLeuUP0S1apUHNIhjFFG4VZFWfeO6G3ae6kMIFKxaLu4ppG7dbSCfnLpoJpwCu0KSt/QR6HBhGbQDiId/yuQIDAQABAkEAqm/y15UtOE7Ey/HxLCqyNqbRhdN1h5AxsT0IhgYvP+PhWGc3hRElMwNCdiNaJBh04R1iK6wmKoi3DSjkdU6IAQIhAPRL9khAdPMxjy5tpswNWeaDjNJrlUKEnItQUkoHqve5AiEAxZIDz235HcUgLg9ApYK4spOpzLDGCCgfO3FxmrUEUwECIEaLjQIOQvdbT1p75Ze1H0nWoRq+YGrF+qKsPicMkc1ZAiARlNTR+K9afthGQQU3tVJKUemiVXjJ8QgWehnp8oHYAQIhANsC2fEVjWv94Oy2c8I9qhuX+yfNtvZ2m+Kmf2o4JFrR'
bank_response_data = """"""{""head"":{""vernbr"":""1.0"",""mchnbr"":""BILL0003"",""mchtyp"":""BILLTYP"",""trscod"":""BILL001"",""msgidc"":""201805011230500001"",""sigtim"":""20190307115511"",""sigalg"":""SHA256WithRSA"",""retcod"":""F"",""retmsg"":""GWB2B006 源IP地址不在商户IP白名单中；商户编号：BILL0003；IP地址：123.139.40.150""}}""""""
bank_response_signature = """"""uZl0/5D694GnAd/G9OPRs9BSd9fb0fZGXSGThBtgLnKi+CDQAdasOX05mKazXZki0blXxApGYRAWa/kOrf+Wl0USfklx0G5w/eGERfMdRWpvtV3S2MBCH/H/0T81nKGgn8svkT/Trj7+Mc+e654Jn8IijGyV9m8Ak92hG2bLtbc=""""""
bank_public_key = """"""MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDZs4l8Ez3F4MG0kF7RRSL+pn8MmxVE3nfdXzjx6d3rH8IfDbNvNRLS0X0b5iJnPyFO8sbbUo1Im4zX0M8XA0xnnviGyn5E6occiyUXJRgokphWb5BwaYdVhnLldctdimHoJTk3NFEQFav3guygR54i3tymrDc8lWtuG8EczVu8FwIDAQAB""""""

def sign():
    key_bytes = bytes(private_key, encoding=""utf-8"")
    key_bytes = b64decode(key_bytes)
    key = RSA.importKey(key_bytes)
    hash_value = SHA256.new(bytes(bank_response_data, encoding=""utf-8""))
    signer = PKCS1_v1_5.new(key)
    signature = signer.sign(hash_value)
    return b64encode(signature)


def verify(data, signature, the_pub_key):
    print(signature)
    key_bytes = bytes(the_pub_key, encoding=""utf-8"")
    key_bytes = b64decode(key_bytes)
    key = RSA.importKey(key_bytes)
    hash_value = SHA256.new(bytes(data, encoding=""utf-8""))
    verifier = PKCS1_v1_5.new(key)
    if verifier.verify(hash_value, b64decode(signature)):
        print(""The signature is authentic."")
    else:
        print(""The signature is not authentic."")


verify(bank_response_data, sign(), public_key)
verify(bank_response_data, bank_response_signature.encode('utf-8'), 
bank_public_key)

","# -*- coding:utf-8 -*-
from Cryptodome.Signature import PKCS1_v1_5  # pip install pycryptodomex
from Cryptodome.Hash import SHA256
from Cryptodome.PublicKey import RSA
from base64 import decodebytes, encodebytes

public_key = ""MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBALyJy3rlD9EtWqVBzSIYxRRuFWRVn3juht2nupDCBSsWi7uKaRu3W0gn5y6aCacArtCkrf0EehwYRm0A4iHf8rkCAwEAAQ==""
private_key = ""MIIBVQIBADANBgkqhkiG9w0BAQEFAASCAT8wggE7AgEAAkEAvInLeuUP0S1apUHNIhjFFG4VZFWfeO6G3ae6kMIFKxaLu4ppG7dbSCfnLpoJpwCu0KSt/QR6HBhGbQDiId/yuQIDAQABAkEAqm/y15UtOE7Ey/HxLCqyNqbRhdN1h5AxsT0IhgYvP+PhWGc3hRElMwNCdiNaJBh04R1iK6wmKoi3DSjkdU6IAQIhAPRL9khAdPMxjy5tpswNWeaDjNJrlUKEnItQUkoHqve5AiEAxZIDz235HcUgLg9ApYK4spOpzLDGCCgfO3FxmrUEUwECIEaLjQIOQvdbT1p75Ze1H0nWoRq+YGrF+qKsPicMkc1ZAiARlNTR+K9afthGQQU3tVJKUemiVXjJ8QgWehnp8oHYAQIhANsC2fEVjWv94Oy2c8I9qhuX+yfNtvZ2m+Kmf2o4JFrR""
bank_response_data = """"""{""head"":{""vernbr"":""1.0"",""mchnbr"":""BILL0003"",""mchtyp"":""BILLTYP"",""trscod"":""BILL001"",""msgidc"":""201805011230500001"",""sigtim"":""20190307115511"",""sigalg"":""SHA256WithRSA"",""retcod"":""F"",""retmsg"":""GWB2B006 源IP地址不在商户IP白名单中；商户编号：BILL0003；IP地址：123.139.40.150""}}""""""
bank_response_signature = """"""uZl0/5D694GnAd/G9OPRs9BSd9fb0fZGXSGThBtgLnKi+CDQAdasOX05mKazXZki0blXxApGYRAWa/kOrf+Wl0USfklx0G5w/eGERfMdRWpvtV3S2MBCH/H/0T81nKGgn8svkT/Trj7+Mc+e654Jn8IijGyV9m8Ak92hG2bLtbc=""""""
bank_public_key = """"""MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDZs4l8Ez3F4MG0kF7RRSL+pn8MmxVE3nfdXzjx6d3rH8IfDbNvNRLS0X0b5iJnPyFO8sbbUo1Im4zX0M8XA0xnnviGyn5E6occiyUXJRgokphWb5BwaYdVhnLldctdimHoJTk3NFEQFav3guygR54i3tymrDc8lWtuG8EczVu8FwIDAQAB""""""


def sign(private_key=private_key, raw_string=bank_response_data):
    private_key = RSA.importKey(decodebytes(private_key.encode()))
    signer = PKCS1_v1_5.new(private_key)
    signature = signer.sign(SHA256.new(raw_string.encode()))
    return encodebytes(signature).decode().replace(""\n"", """")


def verify(data, signature, public_key):
    print(signature)
    key = RSA.importKey(decodebytes(public_key.encode()))
    hash_value = SHA256.new(data.encode())
    verifier = PKCS1_v1_5.new(key)
    if verifier.verify(hash_value, decodebytes(signature.encode())):
        print(""The signature is authentic."")
    else:
        print(""The signature is not authentic."")


verify(bank_response_data, sign(), public_key)
verify(bank_response_data, bank_response_signature, bank_public_key)

","177","<java><python><rsa><pycrypto>","0","0","3","2019-03-07 10:34:55","","0","","","","","2019-03-07 04:23:02",""
"55036059","A java server use SHA256WithRSA to sign message, but python can not verify","Here is the code, the second (message, signature and public key) works fine on Java, can verify the message. But when I am using python, it will failed.
If am signed the message and the code will verify the message correctly.
Would some one help me to check the problem? Thank you.
# -*- coding:utf-8 -*-
from Crypto.PublicKey import RSA
from Crypto.Hash import SHA256
from Crypto.Signature import PKCS1_v1_5
from base64 import b64decode, b64encode

public_key = 'MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBALyJy3rlD9EtWqVBzSIYxRRuFWRVn3juht2nupDCBSsWi7uKaRu3W0gn5y6aCacArtCkrf0EehwYRm0A4iHf8rkCAwEAAQ=='
private_key = 'MIIBVQIBADANBgkqhkiG9w0BAQEFAASCAT8wggE7AgEAAkEAvInLeuUP0S1apUHNIhjFFG4VZFWfeO6G3ae6kMIFKxaLu4ppG7dbSCfnLpoJpwCu0KSt/QR6HBhGbQDiId/yuQIDAQABAkEAqm/y15UtOE7Ey/HxLCqyNqbRhdN1h5AxsT0IhgYvP+PhWGc3hRElMwNCdiNaJBh04R1iK6wmKoi3DSjkdU6IAQIhAPRL9khAdPMxjy5tpswNWeaDjNJrlUKEnItQUkoHqve5AiEAxZIDz235HcUgLg9ApYK4spOpzLDGCCgfO3FxmrUEUwECIEaLjQIOQvdbT1p75Ze1H0nWoRq+YGrF+qKsPicMkc1ZAiARlNTR+K9afthGQQU3tVJKUemiVXjJ8QgWehnp8oHYAQIhANsC2fEVjWv94Oy2c8I9qhuX+yfNtvZ2m+Kmf2o4JFrR'
bank_response_data = """"""{""head"":{""vernbr"":""1.0"",""mchnbr"":""BILL0003"",""mchtyp"":""BILLTYP"",""trscod"":""BILL001"",""msgidc"":""201805011230500001"",""sigtim"":""20190307115511"",""sigalg"":""SHA256WithRSA"",""retcod"":""F"",""retmsg"":""GWB2B006 源IP地址不在商户IP白名单中；商户编号：BILL0003；IP地址：123.139.40.150""}}""""""
bank_response_signature = """"""uZl0/5D694GnAd/G9OPRs9BSd9fb0fZGXSGThBtgLnKi+CDQAdasOX05mKazXZki0blXxApGYRAWa/kOrf+Wl0USfklx0G5w/eGERfMdRWpvtV3S2MBCH/H/0T81nKGgn8svkT/Trj7+Mc+e654Jn8IijGyV9m8Ak92hG2bLtbc=""""""
bank_public_key = """"""MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDZs4l8Ez3F4MG0kF7RRSL+pn8MmxVE3nfdXzjx6d3rH8IfDbNvNRLS0X0b5iJnPyFO8sbbUo1Im4zX0M8XA0xnnviGyn5E6occiyUXJRgokphWb5BwaYdVhnLldctdimHoJTk3NFEQFav3guygR54i3tymrDc8lWtuG8EczVu8FwIDAQAB""""""

def sign():
    key_bytes = bytes(private_key, encoding=""utf-8"")
    key_bytes = b64decode(key_bytes)
    key = RSA.importKey(key_bytes)
    hash_value = SHA256.new(bytes(bank_response_data, encoding=""utf-8""))
    signer = PKCS1_v1_5.new(key)
    signature = signer.sign(hash_value)
    return b64encode(signature)


def verify(data, signature, the_pub_key):
    print(signature)
    key_bytes = bytes(the_pub_key, encoding=""utf-8"")
    key_bytes = b64decode(key_bytes)
    key = RSA.importKey(key_bytes)
    hash_value = SHA256.new(bytes(data, encoding=""utf-8""))
    verifier = PKCS1_v1_5.new(key)
    if verifier.verify(hash_value, b64decode(signature)):
        print(""The signature is authentic."")
    else:
        print(""The signature is not authentic."")


verify(bank_response_data, sign(), public_key)
verify(bank_response_data, bank_response_signature.encode('utf-8'), 
bank_public_key)

","Below is the java code, it works fine with the same signature and public key.
import org.apache.commons.codec.digest.DigestUtils;

import java.security.KeyFactory;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Signature;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.util.Base64;

public class MyTest {
    public static final String KEY_ALGORITHM = ""RSA"";
    public static final String SIGNATURE_ALGORITHM = ""SHA256WithRSA"";

public static void main(String[] args) {
    String data = ""{\""head\"":{\""vernbr\"":\""1.0\"",\""mchnbr\"":\""BILL0003\"",\""mchtyp\"":\""BILLTYP\"",\""trscod\"":\""BILL001\"",\""msgidc\"":\""201805011230500001\"",\""sigtim\"":\""20190307115511\"",\""sigalg\"":\""SHA256WithRSA\"",\""retcod\"":\""F\"",\""retmsg\"":\""GWB2B006 源IP地址不在商户IP白名单中；商户编号：BILL0003；IP地址：123.139.40.150\""}}"";

    String signature = ""dnAFU2e5zFb8rJ1mXDNk5AG9UyujVIUArkBjb1Nonf7iMhZwHfHRO633eW5n7uELFnyJZk6Go2D6ovp4jEnIoA=="";

    String cmbcRespSignature = ""uZl0/5D694GnAd/G9OPRs9BSd9fb0fZGXSGThBtgLnKi+CDQAdasOX05mKazXZki0blXxApGYRAWa/kOrf+Wl0USfklx0G5w/eGERfMdRWpvtV3S2MBCH/H/0T81nKGgn8svkT/Trj7+Mc+e654Jn8IijGyV9m8Ak92hG2bLtbc="";
    String cmbcPublicKey = ""MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDZs4l8Ez3F4MG0kF7RRSL+pn8MmxVE3nfdXzjx6d3rH8IfDbNvNRLS0X0b5iJnPyFO8sbbUo1Im4zX0M8XA0xnnviGyn5E6occiyUXJRgokphWb5BwaYdVhnLldctdimHoJTk3NFEQFav3guygR54i3tymrDc8lWtuG8EczVu8FwIDAQAB"";

    try {
        boolean verify = verify(DigestUtils.sha256(data), cmbcPublicKey, cmbcRespSignature);
        if (verify) {

        }
    } catch (Exception e) {

    }
}

public static boolean verify(byte[] data, String publicKey, String sign) throws Exception {
    final Base64.Decoder decoder = Base64.getDecoder();
    final byte[] keyBytes = publicKey.getBytes(""UTF-8"");

    X509EncodedKeySpec keySpec = new X509EncodedKeySpec(decoder.decode(keyBytes));

    KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);

    PublicKey pubKey = keyFactory.generatePublic(keySpec);

    Signature signature = Signature.getInstance(SIGNATURE_ALGORITHM);
    signature.initVerify(pubKey);
    signature.update(data);

    return signature.verify(decoder.decode(sign));
}

}
","177","<java><python><rsa><pycrypto>","0","0","3","2019-03-07 10:34:55","","0","","","","","2019-03-07 04:23:02",""
"55036059","A java server use SHA256WithRSA to sign message, but python can not verify","Here is the code, the second (message, signature and public key) works fine on Java, can verify the message. But when I am using python, it will failed.
If am signed the message and the code will verify the message correctly.
Would some one help me to check the problem? Thank you.
# -*- coding:utf-8 -*-
from Crypto.PublicKey import RSA
from Crypto.Hash import SHA256
from Crypto.Signature import PKCS1_v1_5
from base64 import b64decode, b64encode

public_key = 'MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBALyJy3rlD9EtWqVBzSIYxRRuFWRVn3juht2nupDCBSsWi7uKaRu3W0gn5y6aCacArtCkrf0EehwYRm0A4iHf8rkCAwEAAQ=='
private_key = 'MIIBVQIBADANBgkqhkiG9w0BAQEFAASCAT8wggE7AgEAAkEAvInLeuUP0S1apUHNIhjFFG4VZFWfeO6G3ae6kMIFKxaLu4ppG7dbSCfnLpoJpwCu0KSt/QR6HBhGbQDiId/yuQIDAQABAkEAqm/y15UtOE7Ey/HxLCqyNqbRhdN1h5AxsT0IhgYvP+PhWGc3hRElMwNCdiNaJBh04R1iK6wmKoi3DSjkdU6IAQIhAPRL9khAdPMxjy5tpswNWeaDjNJrlUKEnItQUkoHqve5AiEAxZIDz235HcUgLg9ApYK4spOpzLDGCCgfO3FxmrUEUwECIEaLjQIOQvdbT1p75Ze1H0nWoRq+YGrF+qKsPicMkc1ZAiARlNTR+K9afthGQQU3tVJKUemiVXjJ8QgWehnp8oHYAQIhANsC2fEVjWv94Oy2c8I9qhuX+yfNtvZ2m+Kmf2o4JFrR'
bank_response_data = """"""{""head"":{""vernbr"":""1.0"",""mchnbr"":""BILL0003"",""mchtyp"":""BILLTYP"",""trscod"":""BILL001"",""msgidc"":""201805011230500001"",""sigtim"":""20190307115511"",""sigalg"":""SHA256WithRSA"",""retcod"":""F"",""retmsg"":""GWB2B006 源IP地址不在商户IP白名单中；商户编号：BILL0003；IP地址：123.139.40.150""}}""""""
bank_response_signature = """"""uZl0/5D694GnAd/G9OPRs9BSd9fb0fZGXSGThBtgLnKi+CDQAdasOX05mKazXZki0blXxApGYRAWa/kOrf+Wl0USfklx0G5w/eGERfMdRWpvtV3S2MBCH/H/0T81nKGgn8svkT/Trj7+Mc+e654Jn8IijGyV9m8Ak92hG2bLtbc=""""""
bank_public_key = """"""MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDZs4l8Ez3F4MG0kF7RRSL+pn8MmxVE3nfdXzjx6d3rH8IfDbNvNRLS0X0b5iJnPyFO8sbbUo1Im4zX0M8XA0xnnviGyn5E6occiyUXJRgokphWb5BwaYdVhnLldctdimHoJTk3NFEQFav3guygR54i3tymrDc8lWtuG8EczVu8FwIDAQAB""""""

def sign():
    key_bytes = bytes(private_key, encoding=""utf-8"")
    key_bytes = b64decode(key_bytes)
    key = RSA.importKey(key_bytes)
    hash_value = SHA256.new(bytes(bank_response_data, encoding=""utf-8""))
    signer = PKCS1_v1_5.new(key)
    signature = signer.sign(hash_value)
    return b64encode(signature)


def verify(data, signature, the_pub_key):
    print(signature)
    key_bytes = bytes(the_pub_key, encoding=""utf-8"")
    key_bytes = b64decode(key_bytes)
    key = RSA.importKey(key_bytes)
    hash_value = SHA256.new(bytes(data, encoding=""utf-8""))
    verifier = PKCS1_v1_5.new(key)
    if verifier.verify(hash_value, b64decode(signature)):
        print(""The signature is authentic."")
    else:
        print(""The signature is not authentic."")


verify(bank_response_data, sign(), public_key)
verify(bank_response_data, bank_response_signature.encode('utf-8'), 
bank_public_key)

","Finally, I get the answer.
In java 

DigestUtils.sha256(data) did hash,
  SHA256WithRSA algorithm will do hash

So what I should do is hash 2 times in my python code
","177","<java><python><rsa><pycrypto>","0","0","3","2019-03-07 10:34:55","","0","","","","","2019-03-07 04:23:02",""
"53802493","String encrypted by Java AES, Decrypt in Python Issue","I have a Java code to encrypt(AES encryption with key) a JSON and store it in Oracle database LONG RAW column.
I have a python code to read the data from that column and decrypt. Below is the code i am using for decryption.
The code is running fine but i am not able to see the JSON after decryption instead some unreadable string is getting printed.
c = conn.cursor()
c.execute(u'select KEY_VALUE from TEST1')
encoded = """";

for row in c:
    encoded = base64.b64encode(row[0])

print(encoded)
key = 'F50D518354690A8630BCE683B7AC8F55'

aes = AES.new(key, AES.MODE_CBC, 16 * b'\0')

print(aes.decrypt(encoded))

conn.close()

Can you please point where am i wrong.
Also the Encoded String is getting printed fine and matches the value in Oracle database.
I tried using AES.MODE_ECB since the java code was not iv to encrypt but still the same issue
Below is the Encryption and Decryption Code in java. I want to replicate the decrypt in python.
decrypt
public static  String decryptText(byte[] byteCipherText, SecretKey secKey) throws Exception {

                // AES defaults to AES/ECB/PKCS5Padding in Java 7

                System.out.println(secKey.toString());

                Cipher aesCipher = Cipher.getInstance(""AES"");

                aesCipher.init(Cipher.DECRYPT_MODE, secKey);

                byte[] bytePlainText = aesCipher.doFinal(byteCipherText);

                return new String(bytePlainText);

            }

encrypt
public static byte[] encryptText(String plainText, String key) throws Exception {

                    // AES defaults to AES/ECB/PKCS5Padding in Java 7

                    System.out.println(""key is ""+key);
                    SecretKey secKey=decodeKeyFromString(key);

                    Cipher aesCipher = Cipher.getInstance(""AES"");

                    aesCipher.init(Cipher.ENCRYPT_MODE, secKey);

                    byte[] byteCipherText = aesCipher.doFinal(plainText.getBytes());

                    return byteCipherText;

                }

The decodeKeyFromString method has just the below line :
 SecretKeySpec skeySpec = new SecretKeySpec(key.getBytes(""UTF-8""), ""AES"");

I Even tried writing the encrypted value as blob in oracle and then doing decryption but still the same garbage values.
for row in c:
            encoded=row[0]

        encrypted= open(blobpath,'wb')

        encrypted.write(encoded.read())

        encrypted.close()

        with open('encrypted.txt', 'r') as myfile:
            data=myfile.read().replace('\n', '')

        key='F50D518354690A8630BCE683B7AC8F55'

        aes = AES.new(key, AES.MODE_ECB)

        e=unpad(aes.decrypt(base64.b64encode(data)))

","","174","<java><python><aes><cx-oracle><pycrypto>","1","","0","2018-12-17 11:39:22","","4","2","5043145","","2018-12-17 11:35:35","2018-12-16 13:13:19",""
"54780404","Pycrypto textbook RSA with no padding","For a proof of concept i am trying to encrypt message with RSA without padding. This means that every message that is encrypted has the same encription however when using pycrypto i actually see this happening: 
from Crypto import Random
from Crypto.PublicKey import RSA

privatekey = RSA.generate(256*4, Random.new().read)
publickey = privatekey.publickey()
message = ""hello stackexchange""
encrypt1 = key.encrypt(message.encode(""utf-8""),32)
encrypt2 = key.encrypt(message.encode(""utf-8""),32)
encrypt3 = key.encrypt(message.encode(""utf-8""),32)
encrypt4 = key.encrypt(message.encode(""utf-8""),32)

when i compare these encriptions by encription1 == enciption2 i get True. 
The problem occurs when i save the publickey and rerun this script on a new python shell:
message = ""hello stackexchange""
encrypt11 = key.encrypt(message.encode(""utf-8""),32)
encrypt22 = key.encrypt(message.encode(""utf-8""),32)
encrypt33 = key.encrypt(message.encode(""utf-8""),32)
encrypt44 = key.encrypt(message.encode(""utf-8""),32)

obviously
encrypt11==encrypt22.

But somehow 
encrypt1!=encrypt11

The documentation tells me that this method does not do any sort of padding so i am confused now.
Any tips on how to make a key such that the encrypt method always gives the same encryption?
Documentation: https://www.dlitz.net/software/pycrypto/api/current/Crypto.PublicKey.RSA._RSAobj-class.html
","","174","<python-3.x><rsa><pycrypto>","0","","0","2019-02-20 06:48:27","","0","","","","","2019-02-20 06:48:27",""
"32715337","Does google app engine use python 2.7.0 or 2.7.1?","What python version does app engine use?
This is related to problems I'm having on mac osx with getting pycrypto to work. Because the python version now in mac is 2.7.1. When Google says the python version for app engine is '2.7' do they mean precisely 2.7.0? Or is python 2.7.1 okay too?
Can this cause problems for my local install of pycrypto? ( which I installed with pip: sudo pip install pycrypto==2.6 )The pycrypto library works correctly, but it somehow messes up app engine running a development server. The logging doesn't show all errors or logs which I expect to appear there.
","
When Google says the python version for app engine is '2.7' do they mean precisely 2.7.0? Or is python 2.7.1 okay too?

Any subversion of python 2.7 works. 2.7.0 works, but I have used 2.7.6 and 2.7.10 extensively as well. So I'm sure that 2.7.1 will work too.

Can this cause problems for my local install of pycrypto? ( which I installed with pip using: 'sudo pip install pycrypto==2.6' )The pycrypto library works correctly, but it somehow messes up app engine running a development server. The logging doesn't show all errors or logs which I expect to appear there.

I know you have asked about this before but I will give you an other (better) way to include pycrypto in your appengine project.
In your app.yaml, specify the following:
libraries:
- name: pycrypto
  version: ""2.6""  # or ""latest"", or ""2.3""

See https://cloud.google.com/appengine/docs/python/tools/libraries27 for more info about which libraries are supported by appengine and how you can import which versions.
","167","<python><macos><python-2.7><google-app-engine><pycrypto>","2","0","2","2015-09-22 17:05:13","","2","","1843331","","2015-09-22 11:28:17","2015-09-22 11:10:26",""
"32715337","Does google app engine use python 2.7.0 or 2.7.1?","What python version does app engine use?
This is related to problems I'm having on mac osx with getting pycrypto to work. Because the python version now in mac is 2.7.1. When Google says the python version for app engine is '2.7' do they mean precisely 2.7.0? Or is python 2.7.1 okay too?
Can this cause problems for my local install of pycrypto? ( which I installed with pip: sudo pip install pycrypto==2.6 )The pycrypto library works correctly, but it somehow messes up app engine running a development server. The logging doesn't show all errors or logs which I expect to appear there.
","It seems as though you're asking the question which inspired your title, about python verson 2.7.x, as a way to get insight into your actual problem, which is related to pycrypto. Tim's answer dealt with the question of which sub-versions of 2.7.x are supported.
It appears you're using both the app.yaml libraries stanza and pip to get an instance of pycrypto. So:
Is the pip-installed pycrypto residing on your dev-box somewhere like /usr/local/lib/python-2.7, or is it in the app's folder, specifically?
When the dev-server is running, is it possible your python path has it using the  pycrypto installed by pip on your system, with that pycrypto being a different version than the one in production? This might cause different behaviour on the dev-server vs. production.

...All this said, it still seems odd, as Tim has pointed out, that you should see a disruption to logging based on this. What is it you're logging, and are you using any exception handling which might be dropping the responsibility to log?
Finally, is there a setting when running the dev-server which you can use that would enable more verbosity? Try that to see if you can raise the logging level enough to make the exceptions you're looking for visible.
These are my thoughts so far on how to get out of your jam. 
","167","<python><macos><python-2.7><google-app-engine><pycrypto>","2","0","2","2015-09-22 17:05:13","","2","","1843331","","2015-09-22 11:28:17","2015-09-22 11:10:26",""
"34052860","pycrypto not encrypting in ascii or unicode","I am using pycrypto to encrypt and decrypt a message using a key. I followed some examples and finally wrote my own. But it turns out that the encrypted message is not in unicode or ascii. I need to store the encrypted message on a mysql database but I won't be able to store such a thing - Oք��fo�A?""���������Ϩ��w}�7. What can I do about this? Do I need to modify my mysql database or there's some other way to use Crypto?
Here is my code.
from Crypto.Cipher import AES
import random

mode = AES.MODE_CBC

def encryptor(key, message):
    IV = ''.join(chr(random.randint(0, 0xFF)) for i in range(16))
    encrypto = AES.new(key, mode, IV=IV)
    crypt_message = encrypto.encrypt(message)
    cipher = crypt_message + IV
    return cipher

def decryptor(key, cipher):
    IV = cipher[-16:]
    decrypt_message = cipher[:-16]
    decrpyto = AES.new(key, mode, IV=IV)
    message = decrpyto.decrypt(decrypt_message)
    return message

","","167","<python><mysql><encryption><unicode><pycrypto>","0","","0","2015-12-02 20:58:25","","3","","","","","2015-12-02 20:58:25","2015-12-02 21:07:46"
"39666422","Python - concatenating byte to string cutting off some bytes in string","I'm trying to decrypt an image file using Python with the AES cipher. We've been given a key with 15 bytes, and it's our job to decrypt the image running through the first byte. 
and what I have so far is:
fifteenbytes = b'\x7e\x15\x16\x28\xae\xd2\xa6\xab\xf7\x15\x88\x09\xcf\x4f\x3c'

for i in range(0, 256):
    ipack = pack('B', i)

    key = ipack + fifteenbytes

I was hoping I'd be getting key as something like:
\x00\x7e\x15\x16\x28\xae\xd2\xa6\xab\xf7\x15\x88\x09\xcf\x4f\x3c

for iterations 0 - 255, but I end up with:
b'\x00~\x15\x16(\xae\xd2\xa6\xab\xf7\x15\x88\t\xcfO<'

or sometimes exit characters and ascii values like:
b'\t~\x15\x16(\xae\xd2\xa6\xab\xf7\x15\x88\t\xcfO<'
b'%~\x15\x16(\xae\xd2\xa6\xab\xf7\x15\x88\t\xcfO<'

Can someone please explain why this happens?
","You are getting correct output, but you appear to be confused by the repr() output for a bytes value.
Python gives you a value that can safely be copied and pasted back into a Python session. This aids debugging. This display uses ASCII printable text where possible to represent the value, but the value can be exactly reproduced with what is displayed.
Your expected value b'\x00\x7e\x15\x16\x28\xae\xd2\xa6\xab\xf7\x15\x88\x09\xcf\x4f\x3c' contains several ASCII characters that are printable, so Python shows those instead of the \xhh byte value:
>>> output = b'\x00\x7e\x15\x16\x28\xae\xd2\xa6\xab\xf7\x15\x88\x09\xcf\x4f\x3c'
>>> output 
b'\x00~\x15\x16(\xae\xd2\xa6\xab\xf7\x15\x88\t\xcfO<'
>>> output == b'\x00\x7e\x15\x16\x28\xae\xd2\xa6\xab\xf7\x15\x88\x09\xcf\x4f\x3c'
True

The bytestring is still 16 bytes long:
>>> len(output)
16

That ~ is ASCII codepoint 126, or 0x7E in hexadecimal:
>>> output[1]
126
>>> hex(output[1])
'0x7e'

The same applies to \x28 and (, \x09 and \t (the tab character escape sequence), \x4f and O, and \x3c and <.
The \xhh escape sequence is just notation in a bytes object literal to define a given byte value, but you can produce the exact same value with ~. Ditto for \t, you can express that same value as \x09, but Python prefers using the \t sequence when showing the representation.
","161","<python><byte><aes><pycrypto>","1","1","1","2016-09-23 17:41:39","","4","","100297","","2016-09-23 17:41:39","2016-09-23 17:27:06",""
"50135309","Can't decrypt blowfish CTR file with pycryptodome","I'm trying to recover file encrypted with an old pure python implementation of blowfish.
the old code relied on a single blofish.py file (Copyright (C) 2002 Michael Gilfix )
The old data are encrypted performing following operations:
cipher = Blowfish(self.masterKey)
cipher.initCTR()
cleanData = cipher.decryptCTR(encData)

That code don't initialize the nonce that is required in modern implementation of blowfish, so I was unable to port it to pycryptodome function
cipher = Blowfish.new(self.masterKey, Blowfish.MODE_CTR, nonce = ?????)
cleanData = cipher.decrypt(encData)

The only suggestion that I can find is inside the initCTR function where iv is set to 0 (even if CTR mode don't have IV)
def initCTR(self, iv=0):
  """"""Initializes CTR mode of the cypher""""""
  assert struct.calcsize(""Q"") == self.blocksize()
  self.ctr_iv = iv
  self._calcCTRBUF()

def _calcCTRBUF(self):
  """"""Calculates one block of CTR keystream""""""
  self.ctr_cks = self.encrypt(struct.pack(""Q"", self.ctr_iv)) # keystream block
  self.ctr_iv += 1
  self.ctr_pos = 0

can someone help me?
","First, a few warnings:

Blowfish is not a secure cipher by today's standard. Use AES.
Counter mode (CTR) is not secure because it does not detect malicious modification of the encrypted data. Use other modes like GCM, CCM or EAX.
Counter mode really requires a random IV for every message. However, you are using a fixed IV fixed which is very wrong.

To answer your question, you should initialize the cipher as:
from Crypto.Util import Counter

ctr = Counter.new(64, initial_value=0, little_endian=True)
cipher = Blowfish.new(self.masterKey, Blowfish.MODE_CTR, counter=ctr)

The Counter object is documented here. It allows the definition of a little-endian counter (typically CTR is big-endian).
NOTE: blowfish.py encrypts differently in big-endian machines than on little-endian ones.
","158","<python-2.7><pycrypto><blowfish><pycryptodome>","0","2","1","2018-05-03 15:17:23","50149988","0","","","","","2018-05-02 13:01:22",""
"18596577","Why is decryption failing after separate writes to this file-like object?","I'm working on a toy module to encrypt tempfiles.  The idea is to expose an interface similar to that found in the tempfile module, but to have data transparently encrypted using session keys.  Again, it's just a toy project and not production code.
First, a few technical details.  This project is implemented with pycrypto and is employing:

AES-CTR
A counter with a 1-bit randomized prefix

The basic class is structured so as to mimic the file object interface.  When a method such as read or write is called, we initialize a Crypto.Cipher.AES object using the class' _cipher property.  This property is implemented as follows:
def _cipher():
    doc = doc = ""Returns a stateful AES object ready to decrypt at the required \
                 stream position""

    def fget(self):
        ctr = Counter.new(nbits=64,
                          initial_value=self.tell()  # alias of self._file.tell
                          prefix=self._nonce)  # set by `Random.new().read(8)
        return AES.new(self._key, counter=ctr, mode=self._opmode)  # self._opmode = Crypto.Cipher.AES.MODE_CTR

    def fset(self, value):
        raise AttributeError('Cannot set _cipher')

    def fdel(self, value):
        raise AttributeError('Cannot delete _cipher')

    return locals()
        _cipher = property(**_cipher())

Here is an example of how the _cipher property is used to encrypt transparently during a call to the write method.
def write(self, data):
    if not isinstance(data, str):
        raise TypeError('Data must be str (or bytestring)')
    self._file.write(self._cipher.encrypt(data))

When decrypting, we apply the opposite transaction as such:
def read(self, size=-1):
    return self._cipher.decrypt(self._file.read(size))

This works when making single calls to write, but fails when multiple calls to write are chained.  For instance:
ep = EphemeralFile()  # the class in question
ep.write('Now is the winter of our discontent')
ep.seek(0)
print ep.read()

>> Now is the winter of our discontent

So far so good... but here's where it fails
ep.write(' made glorious summer by this sun of York')
ep.seek(0)
print ep.read()

>> Now is the winter of our discontent""d_""��U�L~ �w���S��h��]""U(��P^��9k

What am I doing wrong?  Shouldn't the use of self._file.tell() in the _cipher property yield the appropriate counter position for decryption?
Please note that I first suspected that I might be off by one counter tick, so I tried modifying the initial_value=self.tell() line to initial_value=self.tell() + 1 (also tried with -1), but to no avail.
For convenience, here is the full class definition.  It's fairly short and may yield some insight.
import tempfile

from Crypto.Cipher import AES
from Crypto import Random
from Crypto.Util import Counter

PRNG = Random.new()


class EphemeralFile(object):
    def __init__(self, mode='w+b', bufsize=-1, suffix='', prefix='', dir=None,
                 key_size=32):

        self._key = PRNG.read(key_size)
        self._nonce = PRNG.read(8)
        self._opmode = AES.MODE_CTR

        self._file = tempfile.TemporaryFile(mode=mode, bufsize=bufsize,
                                            suffix=suffix, prefix=prefix, dir=dir)

        # alias tempfile methods and parameters
        self.close = self._file.close
        self.closed = self._file.closed
        self.encoding = self._file.encoding
        self.errors = self._file.errors
        self.fileno = self._file.fileno
        self.flush = self._file.flush
        self.isatty = self._file.isatty
        self.mode = self._file.mode
        self.name = self._file.name
        self.softspace = self._file.softspace
        self.truncate = self._file.truncate
        self.seek = self._file.seek
        self.tell = self._file.tell

    def __enter__(self):
        return self

    def __exit__(self, type, value, traceback):
        self._file.close()

    def __iter__(self):
        return (line for line in self.readlines())

    def _cipher():
        doc = ""Returns a stateful AES object ready to decrypt at the required \
               stream position""

        def fget(self):
            ctr = Counter.new(nbits=64,
                              initial_value=self.tell(),
                              prefix=self._nonce)
            return AES.new(self._key, counter=ctr, mode=self._opmode)

        def fset(self, value):
            raise AttributeError('Cannot set EphemeralFile._cipher')

        def fdel(self):
            raise AttributeError('Cannot delete EphemeralFile._cipher')

        return locals()
    _cipher = property(**_cipher())

    def write(self, data):
        if not isinstance(data, str):
            raise TypeError('Data must be str (or bytestring)')

        self._file.write(self._cipher.encrypt(data))

    def writelines(self, lines):
        self.write(""\n"".join(lines))

    def read(self, size=-1):
        return self._cipher.decrypt(self._file.read(size))

    def readline(self, size=-1):
        fptr = self.tell()
        bytes = []
        got_line = False
        while not got_line:
            bytes.append(self.read(1))
            if not bytes[-1] or ('\n' in bytes[-1]):
                bytes[-1] = bytes[-1][0:bytes[-1].find('\n') + 1]
                got_line = True

        plaintext = ''.join(bytes)
        self.seek(fptr + len(plaintext))  # rewind
        return plaintext

    def readlines(self, size=-1):
        return [line for line in self]

    def read_ciphertext(self, size=-1):
        """"""Read ciphertext without decrypting.

        size : int (default -1)
            Number of bytes to read.  Negative values read the entire stream

        return : str
            Ciphertext
        """"""
        return self._file.read(size)

    def next(self):
        return self.readline()

At this point I really don't see where the problem is, so please feel free to nag me with questions and suggest possible solutions.
Many thanks in advance!
","I believe one problem is that the Counter object should receive as initial_value the AES block number, not the byte offset. In other words, you need to have:
ctr = Counter.new(nbits=64,
                  initial_value=self.tell() % 16,
                  prefix=self._nonce)

That's needed because in AES CTR mode you increase the value each time you cross the AES data boundary (16 bytes).
That also means that the correct sequence for any write operation roughly is:

Start the cipher object as shown above - in encryption mode.
Encrypt self.tell() % 16 bytes of any data and throw away the result.
Encrypt the input data and write it to the file.

Similarly for reading:

Start the cipher object as shown above - in decryption mode.
Decrypt self.tell() % 16 bytes of any data and throw away the result.
Decrypt the data read from the file.

From a quick look at the code, a second problem could also be that you use the same AES object for both encryption and decryption. You need two separate objects, one for each direction.
","157","<python><encryption><aes><encryption-symmetric><pycrypto>","0","1","1","2013-09-04 18:42:43","","0","","","","","2013-09-03 15:54:58",""
"54752085","PyCrypto Cyphertext incorrect length even with a one char data","I want to encrypt/decrypt a set of data which is contained in a .csv file.
I generate my RSA public/private keys with this code :
import Crypto
from Crypto.PublicKey import RSA

key = RSA.generate(2048)

k = key.exportKey('PEM')
p = key.publickey().exportKey('PEM')

with open('private.pem', 'w') as kf:
    kf.write(k.decode())
    kf.close()

with open('public.pem', 'w') as pf:
    pf.write(p.decode())
    pf.close()

with open('private.pem','r') as fk:
    priv = fk.read()
    fk.close()

with open('public.pem','r') as fp:
    pub = fp.read()
    fp.close()

privat = RSA.importKey(priv)
public = RSA.importKey(pub)

if key == privat:
    print('Private key has been successfuly write')
if key.publickey() == public:
    print('Public key has been successfuly write')

Then I encrypt with this code without any problem:
import Crypto
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP

with open('public.pem','r') as fp:
    pub = fp.read()
    fp.close()

public = RSA.importKey(pub)

#stockage du fichier dans une variable rep
fichier = open('test.csv', 'r')
rep = fichier.read()
fichier.close()

#eliminations des spaces
rep = rep.replace(' ', '')

#encodage pour type bytes
rep = rep.encode()

#decoupage en mot de 10 chars
rep = [rep[i:i+10] for i in range(0, len(rep), 10)]

cipher = PKCS1_OAEP.new(public)

fichier2 = open('encrypted.csv', 'a')
for i in rep:
    encrypted_line = cipher.encrypt(i)
    fichier2.write(str(encrypted_line))
    fichier2.write('\n')

fichier2.close()

I can modify how my data are separate by modifying this line :

rep = [rep[i:i+n] for i in range(0, len(rep), n)]

This line separate my data by groups of n chars
Here my code to decrypt the data, it raises:

ValueError: Ciphertext with incorrect length.

import Crypto
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP

with open('private.pem','r') as fk:
    priv = fk.read()
    fk.close()

private = RSA.importKey(priv)

fichier = open('encrypted.csv', 'r')
rep = fichier.read().splitlines()
fichier.close()

cipher = PKCS1_OAEP.new(private)

fichier2 = open('decrypted.csv', 'a')
for i in rep:
    decrypted_line = cipher.decrypt(i)
    decrypted_line = decrypted_line.decode('utf-8')
    fichier2.write(str(encrypted_line))

fichier2.close()

I tried to encode a sample file and it raised this ValueError . Then I try to work with a file which contain only one char directly on the Python interpreter. Encryption worked well but decryption broke with the same error as above.
","The main problem with the code is the use of newline characters to separate the chunks of encrypted data.  The encrypted data may already contain newline characters, so attempting to split the encrypted data into lines may produce partial chunks, which will raise the ValueError that you see when decrypted.
A second problem is that the encrypted files are being opened in text mode.  When dealing with encrypted data open files in binary mode.  Encrypted bytes are unlikely to be decodable to str, so using text mode will result in encoding or decoding errors.
This version of your code works:
import functools

from Crypto.PublicKey import RSA 
from Crypto.Cipher import PKCS1_OAEP

if __name__ == '__main__':

    # Encrypt

    with open('public.pem', 'r') as fp: 
        pub = fp.read()
        fp.close()

    public = RSA.importKey(pub)

    # tockage du fichier dans une variable rep
    with open('test.csv', 'r') as fichier:
        rep = fichier.read()

    # liminations des spaces
    rep = rep.replace(' ', '') 

    # ncodage pour type bytes
    rep = rep.encode()

    cipher = PKCS1_OAEP.new(public)

    # decoupage en mot de 10 chars
    rep = [rep[i:i+10] for i in range(0, len(rep), 10)]

    # Open the file in binary mode so we can write bytes.
    with open('encrypted.csv', 'wb') as fichier2:
        for i in rep:
            fichier2.write(cipher.encrypt(i))

    # Decrypt
    with open('private.pem', 'r') as fk: 
        priv = fk.read()

    private = RSA.importKey(priv)

    CHUNK_SIZE = 256 
    # Open the file in binary mode so we can read bytes.
    with open('encrypted.csv', 'rb') as fichier:
        # Create an iterator that will return chunks of the correct size.
        chunker = iter(functools.partial(fichier.read, CHUNK_SIZE), b'')
        rep = list(chunker)

    cipher = PKCS1_OAEP.new(private)

    with open('decrypted.csv', 'w') as fichier2:
        for i in rep:
            decrypted_line = cipher.decrypt(i)
            fichier2.write(decrypted_line.decode())

Rather than splitting the encrypted data on newlines, this code reads from the file in chunks of 256 bytes, as the encryption process seems to generate 256 bytes for each chunk of input.  I'm not a cryptologist, so it's possible this isn't always true.  In that case it might be better to encrypt (or decrypt) all the data in a single step.
","157","<python><python-3.x><encryption><pycrypto><pycryptodome>","3","1","1","2019-02-18 19:05:10","54753767","0","","5320906","","2019-02-18 19:05:10","2019-02-18 17:00:05",""
"45032829","Python RSA decryption is throwing error","from Crypto.PublicKey import RSA
from Crypto.Signature import PKCS1_v1_5
from Crypto.Hash import SHA
from base64 import b64decode
def wesocket_Data_Receive(request):
    Data=request.GET.get('ContentData')
    key =open('D:\\WithOldDjango\\AssetManagment\\AssetManagment
    \\blog\\templates\\private.key', 'rb')
    rsakey = RSA.importKey(key.read())
    return HttpResponse(Data)

I am getting the following error while reading the private key using python 3.5 error:""RSA key format is not supported""
above is my code
","","156","<python><encryption><python-3.5><private-key><pycrypto>","0","","0","2017-07-11 18:09:39","","3","","1816580","","2017-07-11 18:09:39","2017-07-11 11:08:00",""
"36568753","Python Crypto AES ImportError on Fedora","I have installed pycrypto:
$> sudo pip install pycrypto

Requirement already satisfied (use --upgrade to upgrade): pycrypto in /usr/lib64/python2.7/site-packages

And I import like this in my python file
from Crypto.Cipher import AES:

But I still get this when running my python file
ImportError: No module named Crypto.Cipher

This is on a Fedora23 machine.
I recently installed and run the same code on a centos7 and on that machine I had to do:
yum install python-devel
pip install pycrypto

But that does not help on the Fedora machine.
I searched and found a few answers saying to install pycrypto and to import using capital C. But it seems this is some other problem...
","","153","<python><pycrypto><fedora-23>","1","","0","2016-04-12 09:52:29","","1","","2656029","","2016-04-12 09:52:29","2016-04-12 09:15:05",""
"11517017","Which AES mode to use to encrypt email addresses in a database?","I'm encrypting email addresses stored in my database using AES before storing them. I want to be able to tell if the email has already been added to the database. This means when I call encrypt(email) the result must always be the same for the same input email, because otherwise I'd have to decrypt every email to see if it matches.
I have am currently doing this using CFB mode with a contant IV, which gives the desired result. For any aes encryption which is not for this email field I'm using a different key and a random IV, which is the recommended way of doing AES CFB encryption.
My questions are:

Which AES mode suits this use case best?
How damaging is it to reuse the same IV?
Is encrypting emails to store in the database considered bad practice and why? (assuming my database is secured properly in the first place)

","","152","<python><aes><pycrypto>","1","","0","2012-07-17 08:17:50","","0","2","","","","2012-07-17 06:21:46",""
"37394705","Getting files of every directory (Py)","I am programming a little script that encrypts every file, located after a specific path. In my case the scripts realpath...
in the first folder (script directory) works fine, but when I go to the next directory it tries to cd into the files located in the 2nd directory tier.
So the tree looks like [file, file,  folder [file, file], file, file]
(I know, that the script and the key will be encrypted also, but I was to lazy for that yet...  and sorry for my poor english, I hope you can understand me :P)
My code:
import os
import Crypto
from Crypto.PublicKey import RSA

def cryptFilesInFolder(currentDir):
    content_list = os.listdir(currentDir)
    print content_list
    print '[+] Start encrypting files in Dir: ' + currentDir
    for filename in content_list:
        print '[+] Encrypting ' + filename
        crypt(filename, key, currentDir)

def crypt(filename, key, currentDir):
    try:
        f = open(filename, 'r')
        fileString = f.read()
        f.close()
        print '[+] Encrypting file: ' + filename + ' with 4096 bytes'
        encryptedFileString = key.publickey().encrypt(fileString, 4096)
        f = open (filename, 'w')
        f.write(str(encryptedFileString)) #write ciphertext to file
        f.close()
    except IOError:
        print '[!] File was a folder'
        cryptFilesInFolder(currentDir + '/' + filename)

print '[+] Startet Crypting'
print '[+] Reading Key'
f = open('mykey.pem','r')
key = RSA.importKey(f.read())
f.close()
print '[+] Key imported'
print '[+] Setting Root Directory'
rootDir = os.path.realpath(__file__)
print 'Root Directory set'
print '[+] Starting encryption in folder: '
cryptFilesInFolder(os.path.dirname(os.path.realpath(__file__)))
print '[+] Finished \n\n\n'

the error message:
Bjarne-2:crypt bjarne$ python crypt\ folder\ Kopie.py 
[+] Startet Crypting
[+] Reading Key
[+] Key imported
[+] Setting Root Directory
Root Directory set
[+] Starting encryption in folder: 
['.DS_Store', 'crypt folder Kopie.py', 'myKey.pem', 'Neuer Ordner']
[+] Start encrypting files in Dir: /Users/bjarne/Desktop/crypt
[+] Encrypting .DS_Store
[+] Encrypting file: .DS_Store with 4096 bytes
[+] Encrypting crypt folder Kopie.py
[+] Encrypting file: crypt folder Kopie.py with 4096 bytes
[+] Encrypting myKey.pem
[+] Encrypting file: myKey.pem with 4096 bytes
[+] Encrypting Neuer Ordner
[!] File was a folder
['.DS_Store', 'key Kopie.py']
[+] Start encrypting files in Dir: /Users/bjarne/Desktop/crypt/Neuer Ordner
[+] Encrypting .DS_Store
[+] Encrypting file: .DS_Store with 4096 bytes
[+] Encrypting key Kopie.py
[!] File was a folder
Traceback (most recent call last):
  File ""crypt folder Kopie.py"", line 37, in <module>

  File ""crypt folder Kopie.py"", line 11, in cryptFilesInFolder

  File ""crypt folder Kopie.py"", line 25, in crypt

  File ""crypt folder Kopie.py"", line 11, in cryptFilesInFolder

  File ""crypt folder Kopie.py"", line 25, in crypt

  File ""crypt folder Kopie.py"", line 6, in cryptFilesInFolder

OSError: [Errno 20] Not a directory: '/Users/bjarne/Desktop/crypt/Neuer Ordner/key Kopie.py'

","It seems that you are trying to run a certain command on every file in a folder, including any files in (recursive) subfolders of that folder.
In that case, you want to use os.walk, which will recursively traverse the given directory and yield a tuple of the (current directory, directories, files).
import os
for (root, dirs, files) in os.walk(rootDir):
    # In each iteration, files will contain the list of files in the directory,
    # where directories are traversed recursively.
    map(lambda f: crypt(f, key, root), files)

The map function simply applies crypt (well, a wrapper around crypt) to each item.
map(lambda f: crypt(f, key, root), files) is functionally equivalent to:
for f in files:
    crypt(f, key, root)

","150","<python><pycrypto>","1","4","1","2016-05-23 16:16:48","37395158","0","","4975126","","2016-05-23 16:16:48","2016-05-23 15:17:11",""
"16786947","different encrypted versions on encrypting the same string using the same key","This is simply driving me crazy.
This is what happenned:
Inside the python shell:
>>> from Crypto.Cipher import ARC4
>>> a = ARC4.new('0123456789123456')
>>> b = ARC4.new('0123456789123456')
>>> de = b.decrypt
>>> en = a.encrypt
>>> en('abcd')
'\x18\x07\x8a\xdc'
>>> en('abcd')
'\x89>\xa0T'
>>> en('abcd')
'y\xe1-\xfe'
>>> en('abcd')
'\xc7\xf6\x19\xfc'
>>> 

I encrypted abcd 4 times with the same key. And all the four times I got different encrypted strings.
And when I did the following thing(Maybe I would get the same decrypted message on decrypting all the above different encrypted messages).
>>> al  = []
>>> for i in range(10):
    al.append(en('abcd'))


>>> al
['\x81\x05h\x06', '\x11;\x88\xc7', '\xb6\xb9g\x10', '\x1e$\x8c\xca', '\xbdh\xc2\xf0', 'ruiO', '7\xec\x7f\xdf', '\x08\xf3\x90\x8a', '\x1c\x95\xf3(', '\xbd@-\x11']

>>> gl = []
>>> for i in range(10):
    gl.append(de(al[i]))


>>> gl
['\xc8\x0f6\xb7', '\x18y`A', 'tm\x12\t', '\x9c\xf65M', '\xd6\xe8\x02\xa3', 'M\xa5sc', '\x1b\x82|\x08', '\x87\xbd \xd7', '\xd3:f\xd7', '\x05\x81?\xc5']
>>> 

So not even once did I get the original message abcd..!
Why is this happening??
How do I overcome this??
Please help me solve this issue.
I am using the pyCrypto library on a Linux Mint machine.
","ACR4 is a stream cipher. It does not encrypt the way you think it does. Try this:
en(""abcd"" * 16)

and see what happens. The result will not be 16 times the same bytes but similar to what you tried in your question.
If you want to encrypt to the same bytes, you must use a new instance of ACR4:
e1 = ACR4.new('0123456789123456').encrypt
e2 = ACR4.new('0123456789123456').encrypt

assert e1(""abcd"") == e2(""abcd"")

","148","<python><pycrypto>","0","6","2","2013-05-28 08:22:47","16787098","0","","200609","","2013-05-28 08:22:47","2013-05-28 08:06:56",""
"16786947","different encrypted versions on encrypting the same string using the same key","This is simply driving me crazy.
This is what happenned:
Inside the python shell:
>>> from Crypto.Cipher import ARC4
>>> a = ARC4.new('0123456789123456')
>>> b = ARC4.new('0123456789123456')
>>> de = b.decrypt
>>> en = a.encrypt
>>> en('abcd')
'\x18\x07\x8a\xdc'
>>> en('abcd')
'\x89>\xa0T'
>>> en('abcd')
'y\xe1-\xfe'
>>> en('abcd')
'\xc7\xf6\x19\xfc'
>>> 

I encrypted abcd 4 times with the same key. And all the four times I got different encrypted strings.
And when I did the following thing(Maybe I would get the same decrypted message on decrypting all the above different encrypted messages).
>>> al  = []
>>> for i in range(10):
    al.append(en('abcd'))


>>> al
['\x81\x05h\x06', '\x11;\x88\xc7', '\xb6\xb9g\x10', '\x1e$\x8c\xca', '\xbdh\xc2\xf0', 'ruiO', '7\xec\x7f\xdf', '\x08\xf3\x90\x8a', '\x1c\x95\xf3(', '\xbd@-\x11']

>>> gl = []
>>> for i in range(10):
    gl.append(de(al[i]))


>>> gl
['\xc8\x0f6\xb7', '\x18y`A', 'tm\x12\t', '\x9c\xf65M', '\xd6\xe8\x02\xa3', 'M\xa5sc', '\x1b\x82|\x08', '\x87\xbd \xd7', '\xd3:f\xd7', '\x05\x81?\xc5']
>>> 

So not even once did I get the original message abcd..!
Why is this happening??
How do I overcome this??
Please help me solve this issue.
I am using the pyCrypto library on a Linux Mint machine.
","RC4 is a stream cipher, so the encrypted form of some plaintext depends on what the cipher has already encrypted.
>>> encrypted = [en('abcd') for i in range(4)]
>>> encrypted
['(h=\xd5', 'h \x8b\xe2', '\xa3\xb6\x16}', '\xe3\xb0\xda\xe3']
>>> decrypted = [de(x) for x in encrypted]
>>> decrypted
['abcd', 'abcd', 'abcd', 'abcd']

Create new RC4 objects before doing the encryption/decryption and you'll get the result you expect:
>>> a = ARC4.new('0123456789123456')
>>> b = ARC4.new('0123456789123456')
>>> de = b.decrypt
>>> en = a.encrypt
>>> al  = []
>>> for i in range(10):
...   al.append(en('abcd'))
... 
>>> gl = []
>>> for i in range(10):
...   gl.append(de(al[i]))
... 
>>> gl
['abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd']

","148","<python><pycrypto>","0","3","2","2013-05-28 08:22:47","16787098","0","","200609","","2013-05-28 08:22:47","2013-05-28 08:06:56",""
"51362459","Python 2 encryption program when converted and run in python 3 returns error","
This is a continuation of this question. Please do not mark this question as a duplicate for it has a different error I need to fix.

TL;DR for the link: 
So I was asking about a Unicode error in python for my encryption program and someone told me to just encode the password in utf-8 and it worked.

Now I have a second problem, where it says that the IV isn't 16 bytes, so I checked this by putting print(len(IV)) after the IV and after running 3 tests it only returns 16 once, in the middle of the printed characters, and the end character is greater than 16 (eg: 37, 35, 28, etc.). 
How could I fix this so that the IV always returns 16 bytes?
Full error:
Traceback (most recent call last):
  File ""/home/pi/Desktop/Projects/FyleCript/Dev Files/encryption.py"", line 77, in <module>
    encrypt(SHA256.new(password.encode('utf-8')).digest(), str(Tfiles))
  File ""/home/pi/Desktop/Projects/FyleCript/Dev Files/encryption.py"", line 17, in encrypt
    encryptor = AES.new(key, AES.MODE_CBC, IV)
  File ""/usr/lib/python3/dist-packages/Crypto/Cipher/AES.py"", line 94, in new
    return AESCipher(key, *args, **kwargs)
  File ""/usr/lib/python3/dist-packages/Crypto/Cipher/AES.py"", line 59, in __init__
    blockalgo.BlockAlgo.__init__(self, _AES, key, *args, **kwargs)
  File ""/usr/lib/python3/dist-packages/Crypto/Cipher/blockalgo.py"", line 141, in __init__
    self._cipher = factory.new(key, *args, **kwargs)
ValueError: IV must be 16 bytes long

Code:
#-*- coding:utf-8 -*-

#Python 
from Crypto.Hash import SHA256
from Crypto.Cipher import AES
import os, random, sys, pkg_resources

def encrypt(key, filename):
        chunksize = 64 * 1024
        outFile = os.path.join(os.path.dirname(filename), ""(encrypted)""+os.path.basename(filename))
        filesize = str(os.path.getsize(filename)).zfill(16)
        IV = ''

        for i in range(16):
                IV += chr(random.randint(0, 0xFF))

        encryptor = AES.new(key, AES.MODE_CBC, IV)

        with open(filename, ""rb"") as infile:
                with open(outFile, ""wb"") as outfile:
                        outfile.write(filesize)
                        outfile.write(IV)
                        while True:
                                chunk = infile.read(chunksize)

                                if len(chunk) == 0:
                                        break

                                elif len(chunk) % 16 !=0:
                                        chunk += ' ' *  (16 - (len(chunk) % 16))

                                outfile.write(encryptor.encrypt(chunk))


def decrypt(key, filename):
        outFile = os.path.join(os.path.dirname(filename), os.path.basename(filename[11:]))
        chunksize = 64 * 1024
        with open(filename, ""rb"") as infile:
                filesize = infile.read(16)
                IV = infile.read(16)

                decryptor = AES.new(key, AES.MODE_CBC, IV)

                with open(outFile, ""wb"") as outfile:
                        while True:
                                chunk = infile.read(chunksize)
                                if len(chunk) == 0:
                                        break

                                outfile.write(decryptor.decrypt(chunk))

                        outfile.truncate(int(filesize))

def allfiles():
        allFiles = []
        for root, subfiles, files in os.walk(os.getcwd()):
                for names in files:
                        allFiles.append(os.path.join(root, names))

        return allFiles


choice = input(""Do you want to (E)ncrypt or (D)ecrypt? "")
password = input(""Enter the password: "") 

encFiles = allfiles()

if choice in (""E"", ""e""):
        for Tfiles in encFiles:
                if os.path.basename(Tfiles).startswith(""(encrypted)""):
                        print(""%s is already encrypted"" %str(Tfiles))
                        pass

                elif Tfiles == os.path.join(os.getcwd(), sys.argv[0]):
                        pass
                else:
                        encrypt(SHA256.new(password.encode('utf-8')).digest(), str(Tfiles))
                        print(""Done encrypting %s"" %str(Tfiles))
                        os.remove(Tfiles)


elif choice in (""D"", ""d""):
        filename = input(""Enter the filename to decrypt: "")
        if not os.path.exists(filename):
                print(""The file does not exist"")
                sys.exit()
        elif not filename.startswith(""(encrypted)""):
                print(""%s is already not encrypted"" %filename)
                sys.exit()
        else:
                decrypt(SHA256.new(password.decode('utf-8')).digest(), filename)
                print(""Done decrypting %s"" %filename)
                os.remove(filename)

else:
        print(""Please choose a valid command."")
        sys.exit()

Any help would be appreciated.
","Well, let's take a look at what IV may consist of:
IV = ''

for i in range(16):
    IV += chr(random.randint(0, 0xFF))

Let's see how many bytes a character from range(0, 0xff) consumes:
>>> [len(chr(i).encode()) for i in range(0, 0xff)]
[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2,
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]

And this is the source of the problem: you're assuming each character is one byte long, but that's not the case.
You can generate a random IV of N bytes with the following code:
import os

N = 16
IV = os.urandom(N)

Another issue in your code is that you're opening all your files in 'rb' mode, which stands for ""read binary"", but attempting to write to it instances of str, like your IV. That won't work because in this mode you're only allowed to read and write bytes, not str. In my solution for calculating the IV this issue completely disappears.
","146","<python><python-3.x><encryption><pycrypto>","0","3","2","2018-10-14 16:27:26","51362868","3","","9190768","","2018-10-14 16:27:26","2018-07-16 13:01:28",""
"51362459","Python 2 encryption program when converted and run in python 3 returns error","
This is a continuation of this question. Please do not mark this question as a duplicate for it has a different error I need to fix.

TL;DR for the link: 
So I was asking about a Unicode error in python for my encryption program and someone told me to just encode the password in utf-8 and it worked.

Now I have a second problem, where it says that the IV isn't 16 bytes, so I checked this by putting print(len(IV)) after the IV and after running 3 tests it only returns 16 once, in the middle of the printed characters, and the end character is greater than 16 (eg: 37, 35, 28, etc.). 
How could I fix this so that the IV always returns 16 bytes?
Full error:
Traceback (most recent call last):
  File ""/home/pi/Desktop/Projects/FyleCript/Dev Files/encryption.py"", line 77, in <module>
    encrypt(SHA256.new(password.encode('utf-8')).digest(), str(Tfiles))
  File ""/home/pi/Desktop/Projects/FyleCript/Dev Files/encryption.py"", line 17, in encrypt
    encryptor = AES.new(key, AES.MODE_CBC, IV)
  File ""/usr/lib/python3/dist-packages/Crypto/Cipher/AES.py"", line 94, in new
    return AESCipher(key, *args, **kwargs)
  File ""/usr/lib/python3/dist-packages/Crypto/Cipher/AES.py"", line 59, in __init__
    blockalgo.BlockAlgo.__init__(self, _AES, key, *args, **kwargs)
  File ""/usr/lib/python3/dist-packages/Crypto/Cipher/blockalgo.py"", line 141, in __init__
    self._cipher = factory.new(key, *args, **kwargs)
ValueError: IV must be 16 bytes long

Code:
#-*- coding:utf-8 -*-

#Python 
from Crypto.Hash import SHA256
from Crypto.Cipher import AES
import os, random, sys, pkg_resources

def encrypt(key, filename):
        chunksize = 64 * 1024
        outFile = os.path.join(os.path.dirname(filename), ""(encrypted)""+os.path.basename(filename))
        filesize = str(os.path.getsize(filename)).zfill(16)
        IV = ''

        for i in range(16):
                IV += chr(random.randint(0, 0xFF))

        encryptor = AES.new(key, AES.MODE_CBC, IV)

        with open(filename, ""rb"") as infile:
                with open(outFile, ""wb"") as outfile:
                        outfile.write(filesize)
                        outfile.write(IV)
                        while True:
                                chunk = infile.read(chunksize)

                                if len(chunk) == 0:
                                        break

                                elif len(chunk) % 16 !=0:
                                        chunk += ' ' *  (16 - (len(chunk) % 16))

                                outfile.write(encryptor.encrypt(chunk))


def decrypt(key, filename):
        outFile = os.path.join(os.path.dirname(filename), os.path.basename(filename[11:]))
        chunksize = 64 * 1024
        with open(filename, ""rb"") as infile:
                filesize = infile.read(16)
                IV = infile.read(16)

                decryptor = AES.new(key, AES.MODE_CBC, IV)

                with open(outFile, ""wb"") as outfile:
                        while True:
                                chunk = infile.read(chunksize)
                                if len(chunk) == 0:
                                        break

                                outfile.write(decryptor.decrypt(chunk))

                        outfile.truncate(int(filesize))

def allfiles():
        allFiles = []
        for root, subfiles, files in os.walk(os.getcwd()):
                for names in files:
                        allFiles.append(os.path.join(root, names))

        return allFiles


choice = input(""Do you want to (E)ncrypt or (D)ecrypt? "")
password = input(""Enter the password: "") 

encFiles = allfiles()

if choice in (""E"", ""e""):
        for Tfiles in encFiles:
                if os.path.basename(Tfiles).startswith(""(encrypted)""):
                        print(""%s is already encrypted"" %str(Tfiles))
                        pass

                elif Tfiles == os.path.join(os.getcwd(), sys.argv[0]):
                        pass
                else:
                        encrypt(SHA256.new(password.encode('utf-8')).digest(), str(Tfiles))
                        print(""Done encrypting %s"" %str(Tfiles))
                        os.remove(Tfiles)


elif choice in (""D"", ""d""):
        filename = input(""Enter the filename to decrypt: "")
        if not os.path.exists(filename):
                print(""The file does not exist"")
                sys.exit()
        elif not filename.startswith(""(encrypted)""):
                print(""%s is already not encrypted"" %filename)
                sys.exit()
        else:
                decrypt(SHA256.new(password.decode('utf-8')).digest(), filename)
                print(""Done decrypting %s"" %filename)
                os.remove(filename)

else:
        print(""Please choose a valid command."")
        sys.exit()

Any help would be appreciated.
","You have not converted your IV string to a byte string. In Python 3 str is not a byte string, but a character string. str is abstracted away from the concept of how characters are represented as bytes.
You'll need to convert your IV variable (and perhaps others, I haven't checked) to be instances of bytes. It's also a bit easier to make your bytestring in Python 3.
random_byte_list = [random.randrange(256) for _ in range(16)]
IV = bytes(random_byte_list)

","146","<python><python-3.x><encryption><pycrypto>","0","1","2","2018-10-14 16:27:26","51362868","3","","9190768","","2018-10-14 16:27:26","2018-07-16 13:01:28",""
"57354785","How to use Crypto.Cipher AES in AWS Glue?","I am currently using the module Crypto.Cipher AES taken from https://github.com/Doerge/awslambda-pycrypto in my AWS lambda function and it works perfectly for my case.
from Crypto.Cipher import AES
from botocore.vendored import requests

url = 'my_url'
PARAMS =  {'param1':'val1', 'param2':'val2'}
CIPHER_KEY = 'cipher_key'

req = requests.get(url, params = PARAMS).json()
ciphered_value = r['ciphered_value']
decipher = AES.new(CIPHER_KEY, AES.MODE_ECB)
value =  decipher.decrypt(ciphered_value)

However, Lambda is failing as I am surpassing my 15 minute limitation due to the number of values that need to be processed
I am trying to run an AWS Glue Python Shell job that runs the exact same code as Glue can last for more than 15 minutes plus gives me access to other resources and the AWS Data Catalogue.
However, when I run my job I get the following error:
Traceback (most recent call last):
File ""/tmp/runscript.py"", line 115, in <module>
runpy.run_path(temp_file_path, run_name='__main__')
File ""/usr/local/lib/python3.6/runpy.py"", line 263, in run_path
pkg_name=pkg_name, script_name=fname)
File ""/usr/local/lib/python3.6/runpy.py"", line 96, in _run_module_code
mod_name, mod_spec, pkg_name, script_name)
File ""/usr/local/lib/python3.6/runpy.py"", line 85, in _run_code
exec(code, run_globals)
File ""/tmp/glue-python-scripts-87edl8q9/playlist_ingestor_glue.py"", line 10, in <module>
ModuleNotFoundError: No module named 'Crypto'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
File ""/tmp/runscript.py"", line 134, in <module>
raise e_type(e_value).with_tracsback(new_stack)
AttributeError: 'ModuleNotFoundError' object has no attribute 'with_tracsback'

So clearly, it's not being able to read the Crypto module.
ModuleNotFoundError: No module named 'Crypto'
I followed this:
https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-libraries.html
And this:
https://docs.aws.amazon.com/glue/latest/dg/add-job-python.html#create-python-egg-library
And added the setup.py file with the contents:
from setuptools import setup

setup(
    name=""Crypto"",
    version=""0.1"",
    packages=['Crypto']

And compressed the contents of the Crypto directory + the setup.py file into the zip file pycrypto.zip which I uploaded into S3 and referenced in my Glue job's Python library path.

After all of this, I still get the error.
I have run my script using the following combinations with no results:
from Crypto.Crypto.Cipher import AES
from Crypto.Cipher import AES
from Cipher import AES

What is the correct way to use this compiled module in AWS Glue? I find it frustrating as the compatible python libraries are very limited and there's not lots of examples, documentation or community posts to explain how to achieve this yet. 
","Found this question
AWS Glue Python
Which suggested using this:
import os
import site
from setuptools.command import easy_install
install_path = os.environ['GLUE_INSTALLATION']
easy_install.main( [""--install-dir"", install_path, ""<library-name>""] )
reload(site)


import <installed library>

So I took the latest version from https://pypi.org/project/pycrypto/#files
import os
import site
from setuptools.command import easy_install
install_path = os.environ['GLUE_INSTALLATION']

easy_install.main( [""--install-dir"", install_path, ""https://files.pythonhosted.org/packages/60/db/645aa9af249f059cc3a368b118de33889219e0362141e75d4eaf6f80f163/pycrypto-2.6.1.tar.gz""] )
reload(site)

And it's working!
Still, I would like to know how to use it as a referenced python library.
","143","<python><amazon-web-services><aes><aws-glue><pycrypto>","0","0","1","2019-08-06 11:46:11","57375363","0","","","","","2019-08-05 08:28:07",""
"45205373","How do I generate the SSH agent sign response","I am writing an internal management system that also needs to implement a SSH agent. I have so far implemented the SSH_AGENTC_REQUEST_IDENTITIES and SSH_AGENT_IDENTITIES_ANSWER correctly which causes SSH to then send the SSH_AGENTC_SIGN_REQUEST as per https://tools.ietf.org/id/draft-miller-ssh-agent-00.html
The issue I have is figuring out how to sign the request, at this point I only need to support ssh-rsa. I have attemped to implement this as per https://tools.ietf.org/html/rfc4253 but I can't seem to generate a reply that will authenticate.
From what I understand of this specification the entire data section of the SSH_AGENTC_SIGN_REQUEST message needs to be signed using RSASSA-PKCS1-v1_5
Here is the code that receives the request
if msgType == SSH_AGENTC_SIGN_REQUEST:
  blobLen = struct.unpack('!I', sock.recv(4))[0]
  blob    = sock.recv(blobLen)
  dataLen = struct.unpack('!I', sock.recv(4))[0]
  data    = sock.recv(dataLen)
  flags   = struct.unpack('!I', sock.recv(4))[0]

  print(""blob: %s\ndata: %s\n flags: %d"" % (blob, data, flags))

  if base64.b64decode(server[""public_key""]) != blob:
    sock.sendall(struct.pack('!IB', 1, SSH_AGENT_FAILURE))
    continue

  signed = rpc.root.signSSHData(server_id, data)
  if not signed:
    sock.sendall(struct.pack('!IB', 1, SSH_AGENT_FAILURE))
    continue

  buff = bytearray()
  buff.extend(struct.pack('!B', SSH_AGENT_SIGN_RESPONSE))
  packBytes(buff, bytes(""ssh-rsa"", ""UTF-8""))
  packBytes(buff, signed)
  head = struct.pack('!I', len(buff))

  sock.sendall(head);
  sock.sendall(buff);

Here is the source of rpc.root.signSSHData:
  def exposed_signSSHData(self, server_id, data):
    query = ""SELECT private_key FROM servers WHERE deleted = 0 AND id = %s LIMIT 1""
    cursor = self.core.getDBC().cursor()
    cursor.execute(query, (server_id, ))
    row    = cursor.fetchone();
    if row is None:
      cursor.close()
      return False

    key    = self.core.decryptData(row[0])
    key    = RSA.importKey(key);
    h      = SHA.new(data)
    signer = PKCS1_v1_5.new(key)
    return signer.sign(h)

Update 1: I believe I may have figured it out, seems that the data is a SSH_MSG_USERAUTH_REQUEST as defined in RFC4252. I will update my application and see how it goes.
","I found the solution, the reply was formatted incorrectly, below is the corrected code:
if msgType == SSH_AGENTC_SIGN_REQUEST:
  blobLen = struct.unpack('!I', sock.recv(4))[0]
  blob    = sock.recv(blobLen)
  dataLen = struct.unpack('!I', sock.recv(4))[0]
  data    = sock.recv(dataLen)
  flags   = struct.unpack('!I', sock.recv(4))[0]

  if base64.b64decode(server[""public_key""]) != blob:
    sock.sendall(struct.pack('!IB', 1, SSH_AGENT_FAILURE))
    continue

  sig = rpc.root.signSSHData(server_id, data);
  if not sig:
    sock.sendall(struct.pack('!IB', 1, SSH_AGENT_FAILURE))
    continue

  signature = bytearray()
  packBytes(signature, bytes(""ssh-rsa"", ""UTF-8""))
  packBytes(signature, sig)

  buff = bytearray()
  buff.extend(struct.pack('!B', SSH_AGENT_SIGN_RESPONSE))
  packBytes(buff, signature)
  head = struct.pack('!I', len(buff))

  sock.sendall(head);
  sock.sendall(buff);
  continue

","140","<python><ssh><rsa><pycrypto><ssh-agent>","1","1","1","2017-07-20 05:51:31","45206203","0","","637874","","2017-07-20 05:23:04","2017-07-20 04:46:35",""
"50761191","use a 32 byte initialisation vector in pycrypto","I am trying to decrypt a text using python with pycrypto.
But I get: ValueError: IV must be 16 bytes long
However my iv is 32 bytes long and I cant change that.
My key is also 32 bytes in size
Is there a way to do this with pycrypto? I could find anything in the docs.
import Crypto.Cipher.AES as AES
a=0x0
i='68fe3a4cf921122eda3df6c7d5458497'
print(i)
plain=""encrypted text""
print(plain)
length = 16 - (len(plain) % 16)
plain += chr(length)*length
print(plain)
plaintext=""""

for a in range(0, 0xffffff):
    s=""6af6f9fae1ab621c2aba5f80ea4""+hex(a)[2:].zfill(5)
    print(s)
    cipher = AES.new(key=s, mode=AES.MODE_CBC, IV=i)
    text=cipher.decrypt(plain)
    if isinstance(text, unicode):    plaintext=text

print(plaintext)

","","140","<python-2.7><encryption><aes><pycrypto>","0","","0","2018-06-08 14:14:01","","5","","246342","","2018-06-08 14:14:01","2018-06-08 12:59:02",""
"42754215","public key distribution python","So I am currently working on a messaging application in Python with the use of the sockets library. I have made an echo server and a simple client which allows sending messages. These messages are obviously sent to all connected users.
The next thing I want to do is to make my application secure by encrypting my messages with asymmetric encryption. To learn about encryption in Python I have made a couple of python scripts using pycrypto. 
The thing I cant quite figure out is how I can or should distribute the keys. In a messaging application with several untracked users which connects and disconnects all the time, how do I generate both public and private keys so that I can successfully implement a asymmetric encryption such as RSA? And how can I make this work using python?
I am fairly new to pycrypto and encryption in general so any suggestions or corrections are greatly appreciated!
","","134","<python><encryption><public-key><pycrypto><pki>","1","","0","2019-03-19 00:25:26","","3","","387076","","2019-03-19 00:25:26","2017-03-12 22:57:18",""
"48511632","PyCrypto encryption/decryption error client/server and CHIL engine","I have two sides:

one or more clients, running Python 2.7.10, Pycrypto 2.6.1
one server, running the same 
all running on: django 1.11.2, Centos 6.9, OpenSSL 1.0.1e-fips
the server holds an HSM-backed private key and the corresponding public key.
the clients have the public key at their disposal, and use it to encrypt before sending the encrypted data to the server.

Client-side code to encrypt:
from Crypto.Cipher import PKCS1_OAEP
from Crypto.PublicKey import RSA
from Crypto.Hash import SHA256


def encrypt_RSA(public_key_loc, clear_text):
    key = open(public_key_loc, ""r"").read()
    rsakey = RSA.importKey(key)
    cipher = PKCS1_OAEP.new(rsakey, hashAlgo=SHA256)
    encrypted = cipher.encrypt(clear_text)
    return encrypted.encode('base64')

Client-side code to send:
import json
import requests
from .crypt import encrypt_RSA

r = requests.post(
    settings.THE_URL,
    data=json.dumps({
        'text': encrypt_RSA(settings.PUBLIC_KEY, 'clear text'),
    }),
    headers={'content-type': 'application/json'},
    timeout=5
)

This works -- apparently.
When received server-side, the following happens:
engine ""chil"" set.
RSA operation error
140648313706312:error:0407106B:rsa routines:RSA_padding_check_PKCS1_type_2:block type is not 02:rsa_pk1.c:190:
140648313706312:error:04065072:rsa routines:RSA_EAY_PRIVATE_DECRYPT:padding check failed:rsa_eay.c:674:

This is the code handling decryption, after going through a layer of validators such as django REST framework.
def decrypt_RSA_CHIL(private_key_loc, encrypted_text):

    print private_key_loc

    print '######### BEFORE ##########'
    print encrypted_text
    encrypted_text = base64.b64decode(encrypted_text)
    print '######### AFTER ##########'
    print encrypted_text

    # after checking those temp files, they have a proper size of 256 byte
    # so it seems they are indeed padded
    encrypted_text_location = '/tmp/encrypted_' + str(uuid.uuid4())

    print encrypted_text_location

    f = open(encrypted_text_location, 'w')
    f.write(encrypted_text)
    f.close()

    # Running the decryption command
    result = execute(
        [
            '/opt/nfast/bin/preload /usr/bin/openssl rsautl -engine chil -decrypt -inkey '
            + str(private_key_loc) + ' -in ' + encrypted_text_location
        ],
        '/tmp'
    )
    print result

    # removing the file with encrypted data from file system
    os.remove(encrypted_text_location)

    stdout_list = result[1].split(""\n"") if result[1] else []

    print stdout_list

    if result[0] is False and stdout_list and result[2] == u'engine ""chil"" set.\n':
        return stdout_list[0]
    else:
        pass

    return None

The execute method (found somewhere on the Internet a long time ago and has worked fine so far):
import subprocess

def execute(cmd_array, working_dir):

    stdout = ''
    stderr = ''

    try:
        try:
            process = subprocess.Popen(
                cmd_array,
                cwd=working_dir,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                bufsize=1,
                shell=True,
            )
        except OSError as e:
            return [False, '', 'ERROR : command(' + ' '.join(cmd_array) + ') could not get executed!']

        for line in iter(process.stdout.readline, b''):

            try:
                echo_line = line.decode(""utf-8"")
            except:
                echo_line = str(line)

            stdout += echo_line

        for line in iter(process.stderr.readline, b''):

            try:
                echo_line = line.decode(""utf-8"")
            except:
                echo_line = str(line)

            stderr += echo_line.decode()

    except (KeyboardInterrupt, SystemExit) as err:
        return [False, '', str(err)]

    process.stdout.close()

    return_code = process.wait()
    if return_code != 0 or stderr != '':
        return [False, stdout, stderr]
    else:
        return [True, stdout, stderr]

Now I know the HSM (relatively low-end model) does work:
> sudo /opt/nfast/bin/generatekey embed name=PRIVKEYNAME cardset=Keymanager
# answer a few questions
# private key saved in /tmp/KEY

> sudo openssl rsa -in /tmp/KEY -pubout > /tmp/KEY.pub
# generates the public key

> sudo cat /tmp/clear.txt | openssl rsautl -encrypt -pubin -inkey veeip2.pub > /tmp/encrypted.txt
# ""clear.txt"" contains ""foo""
# ""encrypted.txt"" is always 256 bytes long, which is correct.

> sudo /opt/nfast/bin/preload /usr/bin/openssl rsautl -engine chil -decrypt -inkey /tmp/KEY -in /tmp/encrypted.txt
# engine ""chil"" set.
# ""foo""

There seems to be a loss (or an addition??) somewhere between the client and the server, related to padding. But for the life of me, I have no idea what it could be.
I suspect the way the encryption is done client-side could be the culprit, as when done locally, everything works flawlessly.
Thanks
","","132","<django><python-2.7><encryption><public-key-encryption><pycrypto>","0","","0","2018-01-30 12:34:01","","2","","3240457","","2018-01-30 12:34:01","2018-01-29 23:24:00",""
"24710460","Python - trying to install PyCrypto and MySQL-python in Windows and VisualStudio9","I have visual studio installed and for example I can install lxml but it does not work for PyCrypto and MySQL-python.
I am getting following error:
  File ""C:\Python27\lib\distutils\msvc9compiler.py"", line 473, in compile

    self.initialize()

  File ""C:\Python27\lib\distutils\msvc9compiler.py"", line 383, in initialize

    vc_env = query_vcvarsall(VERSION, plat_spec)

  File ""C:\Python27\lib\distutils\msvc9compiler.py"", line 299, in query_vcvarsal
l

    raise ValueError(str(list(result.keys())))

ValueError: [u'path']

My list of installed packages:
D:\>pip list
ipython (2.1.0)
lxml (3.3.5)
mysql-python (1.2.4
pip (1.5.6)
pyasn1 (0.1.7)
pywin32 (218)
rsa (3.1.4)
setuptools (5.4.1)
virtualenv (1.11.6)
wheel (0.24.0)

What's causing my error?
","","132","<python><pycrypto>","0","","0","2014-07-12 06:52:04","","2","","","","","2014-07-12 06:52:04",""
"52787559","'method-wrapper' object is not iterable in AES CTR pycrypto library","I'm trying to implement an encryption/decryption function in python2.
This is the encryption scheme:
 However, I'm getting a 'method-wrapper' object is not iterable error in the AES CTR function of the pycrypto library
This is the stacktrace:
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-5-1c44f21fcf83> in <module>()
     45         l = random.randint(16,48)
     46         m = random_bytes(l)
---> 47         assert specialDecryption(k, specialEncryption(k, m)) == m

<ipython-input-5-1c44f21fcf83> in specialEncryption(k, m)
      7     # compute PRF
      8     r = random_bytes(KEYLENGTH/8)
----> 9     prf = lengthQuadruplingPRF(k, r)
     10 
     11     # xor

<ipython-input-4-59fb6141461b> in lengthQuadruplingPRF(k, r)
     34     assert len(k) == KEYLENGTH/8
     35     assert len(r) <= KEYLENGTH/8
---> 36     obj = AES.new(k, AES.MODE_CTR, counter=make_counter())
     37     output = obj.encrypt(r*4)
     38     return output

/usr/local/lib/python2.7/site-packages/Crypto/Cipher/AES.pyc in new(key, mode, *args, **kwargs)
    204 
    205     kwargs[""add_aes_modes""] = True
--> 206     return _create_cipher(sys.modules[__name__], key, mode, *args, **kwargs)
    207 
    208 

/usr/local/lib/python2.7/site-packages/Crypto/Cipher/__init__.pyc in _create_cipher(factory, key, mode, *args, **kwargs)
     77             raise TypeError(""IV is not meaningful for the ECB mode"")
     78 
---> 79     return modes[mode](factory, **kwargs)

/usr/local/lib/python2.7/site-packages/Crypto/Cipher/_mode_ctr.pyc in _create_ctr_cipher(factory, **kwargs)
    323     # 'counter' used to be a callable object, but now it is
    324     # just a dictionary for backward compatibility.
--> 325     _counter = dict(counter)
    326     try:
    327         counter_len = _counter.pop(""counter_len"")

TypeError: 'method-wrapper' object is not iterable

Here's the code:
if __name__ == '__main__':
    k = os.urandom(KEYLENGTH/8)  # generate key
    l = random.randint(16,48)
    m = os.urandom(l)
    c = specialEncryption(k, m) ## FIRST IN THE FAILURE STACK

def specialEncryption(k, m):     
   ... other code

    # compute PRF
    r = os.urandom(KEYLENGTH/8)
    prf = lengthQuadruplingPRF(k, r) ## SECOND IN THE FAIL STACK

    ... other code

def make_counter():
    import struct
    def gen():
        i = 0;
        while True:
            yield struct.pack('>QQ', 0, i)
            i += 1
    return gen().next

def lengthQuadruplingPRF(k, r):
    # Input: 16 byte key, 16 byte value
    # Output: 64 byte pseudorandom bytes
    obj = AES.new(k, AES.MODE_CTR, counter=make_counter()) ## FAILS HERE
    output = obj.encrypt(r*4)
    return output

","Your counter should be an iterable capable of initializing a dict, not a bound method.
I suspect changing your make_counter function to:
return gen()

from:
return gen().next

is enough to fix it.
","129","<python><encryption><aes><pycrypto>","1","0","1","2018-10-13 00:59:20","","0","","7868376","","2018-10-13 00:53:40","2018-10-12 22:06:08",""
"25803130","pycrypto random not supported on GAE?","I have deployed a App engine application that uses pycrypto. I installed pycrypto locally but when i deploy on the App Engine it says:
TargetAppError: Traceback (most recent call last):
  File ""/base/data/home/apps/s~shared-playground/55de226e3bc6746b0c2a029d52be624810ea0d14.376065013735366090/mimic/__mimic/target_env.py"", line 968, in RunScript
    loader.load_module('__main__')
  File ""/base/data/home/apps/s~shared-playground/55de226e3bc6746b0c2a029d52be624810ea0d14.376065013735366090/mimic/__mimic/target_env.py"", line 316, in load_module
    return self.env.LoadModule(self, fullname)
  File ""/base/data/home/apps/s~shared-playground/55de226e3bc6746b0c2a029d52be624810ea0d14.376065013735366090/mimic/__mimic/target_env.py"", line 725, in LoadModule
    exec(code, module.__dict__)  # pylint: disable-msg=W0122
  File ""helloworld.py"", line 2, in <module>
    from pycrypto import Random
ImportError: No module named pycrypto

I have the following app.yaml:
application: my-app-id
version: 1
runtime: python27
api_version: 1
threadsafe: true

handlers:
- url: /favicon\.ico
  static_files: favicon.ico
  upload: favicon\.ico

- url: /.*
  script: helloworld.app

libraries:
- name: webapp2
  version: ""2.5.2""
- name: pycrypto
  version: ""2.6""

My code is as follows:
import webapp2
from Crypto.Cipher import AES
from Crypto import Random

from google.appengine.api import users

class MainPage(webapp2.RequestHandler):
    def get(self):
        user = users.get_current_user()

        if user:
            self.response.headers['Content-Type'] = 'text/plain'
            iv = Random.new().read(AES.block_size)
            key = b'Sixteen byte key'
            cipher = AES.new(key, AES.MODE_CFB, iv)
            msg = iv + cipher.encrypt(b'Attack at dawn')
            self.response.out.write('Hello, '+ msg + ': ' + user.nickname())


        else:
            self.redirect(users.create_login_url(self.request.uri))

app = webapp2.WSGIApplication([
    ('/', MainPage)
], debug=True)

The cause of the error seems fairly simple. There is no module named pycrypto. However the following thread suggest there is. What is the cause of this error then? Please advise thanks.
","App Engine provides third party libraries in their sandbox. Find the link[1] below for the 3rd party libraries supported by App Engine. Also you can try to change the version to ""latest"" instead of 2.6
in app.yaml
[1] https://cloud.google.com/appengine/docs/python/tools/libraries27
","126","<python><google-app-engine><pycrypto>","0","0","1","2014-12-30 00:57:45","","1","","-1","","2017-05-23 11:57:15","2014-09-12 07:36:33",""
"56313278","How to sign data with encrypted RSA private key (AES-256-CBC) in python","Partial example of private_key (this variable is a string):
-----BEGIN RSA PRIVATE KEY-----
Proc-Type: 4,ENCRYPTED
DEK-Info: AES-256-CBC,hidden_text..

lots_of_hidden_text..

-----END RSA PRIVATE KEY-----

When I try to do the following:
from Crypto.PublicKey import RSA
from Crypto.Signature import PKCS1_v1_5
rsakey = RSA.importKey(private_key, passphrase=privkey_secret_string)
signer = PKCS1_v1_5.new(rsakey)
signature = signer.sign(data)

I'm getting value error on the importKey:
Error: ValueError: Unsupport PEM encryption algorithm.

I can see that RSA.importKey doesn't support AES-256-CBC, but i can't find any way to import this private key.
The only solution i've seen in order to create an AES signer is:
signer = AES.new(privkey_secret_string, AES.MODE_CBC, IV=iv)

But this doesn't use the private key
","You can either switch to PyCryptodome or decrypt the key with a system call to openssl prior to importing the key:
echo PASSPHRASE | openssl rsa -in key.pem
","125","<python><aes><rsa><pycrypto>","0","0","1","2019-05-26 15:01:56","56314448","1","","11428059","","2019-05-26 15:01:56","2019-05-26 11:57:32",""
"23041079","Shared Server: Python Script run under UNIX Shell vs HTTP","I have a Python script on my Dreamhost shared server. When I access my script via SSH (using the UNIX Shell) my script executes fine and is able to import the Pycrypto module Crypto.Cipher.
But if I access my script via HTTP using my websites url. The script fails when it goes to import the Pycrypto module Crypto.Cipher. It gives the error ImportError: No module named Crypto.Cipher.
Do you know what might be causing this weird error? And how I can fix it.
Some important information:
 - I have installed a custom version of python on my shared server. Its just Python 2.7 with Pycrypto and easy_install installed.
- I am certain that the script is running under Python 2.7 and not Dreamhosts default 2.6 version. I know this because the script prints sys.version_info(major=2, minor=7, micro=0, releaselevel='final', serial=0) both in the UNIX shell and HTTP.
- I installed Pycrypto manually (using tar, and running setup.py) as opposed to using easy_install or pip.
- I have editted my .bash_profile's PATH variable correctly (well I believe I have done it correctly because the script is run under Python 2.7 not 2.6).
Any advice would be extremely helpful.
","Your web server does not read your .bash_profile.
","122","<python><shell><dreamhost><pycrypto>","0","0","1","2014-04-13 09:37:20","","0","","","","","2014-04-13 09:31:50",""
"26926416","Crypto.Signature missing when Travis-ci builds pycrypto","I have a software library that uses pycrypto and it works perfectly.
The project is on github (https://github.com/rohe/pyjwkest/).
Yesterday I tried to add Travis-ci integration to my github project.
But so far the CI status has been 'failed' all the time.
And it fails on:
from Crypto.Signature import PKCS1_v1_5
with the error
ImportError: No module named Signature
No error is reported when building pycrypto/Crypto so what gives ?
","","122","<travis-ci><pycrypto>","2","","0","2014-11-14 09:09:22","","0","","","","","2014-11-14 09:09:22",""
"42376145","PyCrypto Dependency issue with py3compat","I have pycrypto 2.6.1 installed but I still get this error when trying to importRSA.
>>> from Crypto.Cipher import AES
>>> from Crypto.PublicKey import RSA
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
  File ""/usr/lib64/python2.6/site-packages/Crypto/PublicKey/RSA.py"", line 73, in <module>
ImportError: No module named py3compat
>>>

As you can see, there is no problem trying to import AES but an issue when trying to import RSA.
","This was due to all my site-packages packages being owned by root.
I got around this issue by installing everything locally (for the current user) like this:
pip install pycrypto --user
and this way I had all my packages automatically install without any problems.
","121","<python><pycrypto>","0","0","1","2017-02-23 17:35:21","42422590","0","","","","","2017-02-21 19:22:36",""
"33382657","pycrypto RC2 encrypt() does not get the right cypher","I have written a simple function to encrypt a message with  RC2 in Python. The package used is pycrypto; However the result is not correct, the code as following shown
def encrypt_rc2(plain, key):
    b_size = ARC2.block_size

    # PKCS7 padding
    padding_length = b_size - len(plain) % b_size
    c_fill = chr(padding_length)

    plain += c_fill * padding_length
    iv = '\x00' * 8
    alg = ARC2.new(key, ARC2.MODE_CBC, iv)
    return alg.encrypt(plain)

The mode used is CBC, the IV is set to all zero and the padding used is PKCS7
In my test, the input plain is 51349910000011, and the key used is \x81\xda\x6c\x63\xf2.
The output (cypher) as following shown (print the integer ordinal)
[96, 106, 49, 42, 52, 195, 126, 196, 158, 199, 213, 105, 66, 217, 81, 69]

The expected cypher should be (using C# System.Security.Cryptography)
[195, 73, 163, 32, 206, 3, 56, 179, 140, 106, 47, 173, 99, 192, 180, 15]

Anybody know what's wrong with the code?
","","121","<python><pycrypto>","0","","0","2015-10-29 01:40:12","","3","","3291269","","2015-10-29 01:40:12","2015-10-28 03:56:50",""
"20296224","pycrypto AES passphrase greater than block size","I have a quick question with reference to pycrypto AES encryption. Suppose I use the accepted answer to the Encrypt & Decrypt using PyCrypto AES 256, and I have my passphrase to AES encryptor > 16 bytes(my block size), will the data be truncated or will it still be encrypted. Please shed some light. Thank you.
","I’m not sure, but you should not use the password directly as input to AES.  Instead, run your password through a key derivation function like scrypt, bcrypt, or PBKDF2 and use that as your AES key.  See my comment regarding KDFs.
","121","<python><encryption><aes><pycrypto>","0","1","1","2013-11-30 07:00:51","","0","","-1","","2017-05-23 10:25:40","2013-11-30 03:37:26",""
"57736936","AES encryption for csv file columns: Decryption is not working","I am trying to write an AES script that takes the name of a few columns and encrypts then and generates a new csv file with encrypted columns.
The script can also take a password and encrypted csv file to decrypt it. 
The decryption part of the code isn't working. 
I have tried playing around with encode and decode. And checking for logic errors.  
import pandas as pd
import sys
import base64
from Crypto.Cipher import AES
from Crypto import Random
from Crypto.Protocol.KDF import PBKDF2
from Crypto.Util.Padding import pad, unpad
import os
import time
import getpass

'''
# AES 256 encryption/decryption using pycrypto library
Credits: https://www.quickprogrammingtips.com/python/aes-256-encryption-and-decryption-in-python.html
https://stackoverflow.com/questions/12524994/encrypt-decrypt-using-pycrypto-aes-256

''' 
BLOCK_SIZE = 16


def get_private_key_salt(password, salt=None):
    if salt == None:
        salt = os.urandom(16)
    kdf = PBKDF2(password, salt, 64, 100000)
    key = kdf[:32]
    return [key,salt]


def encrypt(raw, private_key):
    iv = os.urandom(AES.block_size)
    cipher = AES.new(private_key, AES.MODE_CBC, iv)
    return base64.b64encode(iv + cipher.encrypt(pad(raw.encode('utf-8'),BLOCK_SIZE)))


def decrypt(enc, private_key):
    enc = base64.b64decode(enc)
    iv = enc[:16]
    cipher = AES.new(private_key, AES.MODE_CBC, iv)
    #line56
    return unpad(cipher.decrypt(enc[16:]),BLOCK_SIZE)


def encrypt_cols(encryption_dict,password):
    encrypted_dict = {}
    encrypted_dict['salt'] = []
    for dict_key in encryption_dict.keys():
        encrypted_dict[dict_key] = []
        for index in range(0,len(encryption_dict[dict_key])):
            try:
                key_salt_pair = get_private_key_salt(password,encrypted_dict['salt'][index])
            except IndexError:
                key_salt_pair = get_private_key_salt(password)
                encrypted_dict['salt'].append(key_salt_pair[1])
            cipher_text = encrypt(str(encryption_dict[dict_key][index]), key_salt_pair[0])
            encrypted_dict[dict_key].append(cipher_text.decode(""utf-8""))

    return encrypted_dict


def decrypt_cols(encrypted_dict,password):
    decrypted_dict = {}
    decrypted_dict['salt'] = encrypted_dict['salt']
    for dict_key in encrypted_dict.keys():
        decrypted_dict[dict_key] = []
        if dict_key != 'salt':
            for index in range(0,len(encrypted_dict[dict_key])):
                key_salt_pair = get_private_key_salt(password,encrypted_dict['salt'][index])
                cipher_text = encrypted_dict[dict_key][index].encode('utf-8')
                #line88
                plain_text = decrypt(cipher_text, key_salt_pair[0]).decode('utf-8')
                decrypted_dict[dict_key].append(plain_text)
    return decrypted_dict


def prep_encryption_cols(encrypt_list):
    encryption_dict = {}
    for col_name in encrypt_list:
        try:
            encryption_dict[col_name]=df[col_name]
        except KeyError:
            print('No column with name \''+col_name+'\' Found. De-identification Failed!')
            sys.exit()
    return encryption_dict

def encryption(df, encrypt_list,password):
    encryption_dict = prep_encryption_cols(encrypt_list)
    encrypted_dict = encrypt_cols(encryption_dict,password)

    for key in encrypted_dict.keys():
        df[key] = encrypted_dict[key]

def decryption(df, decrypt_list, password):
    encrypted_dict = {}
    for col in decrypt_list:
        encrypted_dict[col] = df[col]
    encrypted_dict['salt'] = df['salt']
    decrypted_dict = decrypt_cols(encrypted_dict,password)
    del df['salt']
    for key in decrypted_dict.keys():
        if key != 'salt':
            df[key] = decrypted_dict[key]

password = getpass.getpass(prompt='Type Password Here:')

'''
ENCRYPTION
'''
start = time.time()

#read csv file
data = pd.read_csv('test.csv')
#convert it into dataframe
df = pd.DataFrame(data)
encrypt_list = ['FIELD2', 'FIELD3']
del_list = ['FIELD4','FIELD5']
encryption(df, encrypt_list, password)

df.to_csv('encrypted_test.csv')

end = time.time()
print('It took '+str(end - start)+' seconds to encrypt')

'''
DECRYPTION
'''
start = time.time()

data = pd.read_csv('encrypted_test.csv')

df = pd.DataFrame(data)

decrypt_list = ['FIELD2', 'FIELD3']
decryption(df, decrypt_list, password)

df.to_csv('decrypted_test.csv')

end = time.time()
print('It took '+str(end - start)+' seconds to decrypt')

I get this error when I store the encrypted data in csv file and then read it for decryption
C:\Users\user\Desktop\>python3 clean.py
It took 0.06599974632263184 seconds to encrypt
Traceback (most recent call last):
  File ""clean.py"", line 167, in <module>
    decryption(df, decrypt_list, password)
  File ""clean.py"", line 128, in decryption
    decrypted_dict = decrypt_cols(encrypted_dict,password)
  File ""clean.py"", line 88, in decrypt_cols
    plain_text = decrypt(cipher_text, key_salt_pair[0]).decode('utf-8')
  File ""clean.py"", line 56, in decrypt
    return unpad(cipher.decrypt(enc[16:]),BLOCK_SIZE)
  File ""C:\Users\user\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\Crypto\Util\Padding.py"", line 90, in unpad
    raise ValueError(""Padding is incorrect."")
ValueError: Padding is incorrect.

The program performs fine if I directly use the dataframe to perform decryption without storing it in csv file.
Thank you for your time. 
","When encrypting, the salt is stored as bytes literal in the csv-file. When decrypting, the salt is interpreted as a string literal, which factually means that a different salt and thus a different key is used. The wrong decryption also leads to an invalid padding, which results in the error message Padding is incorrect. 
The different salts during encryption and decryption can be easily checked with the debugger by comparing the value and type of key_salt_pair[1] in encrypt_cols and (the corresponding) encrypted_dict['salt'][index] in decrypt_cols.
The determination of the original salt is easiest if it is stored as a hexadecimal string, and can be implemented in get_private_key_salt:
def get_private_key_salt(password, salt=None):
    if salt == None:
        saltBin = os.urandom(16)
        salt = saltBin.hex()
    else:                             
        saltBin = bytes.fromhex(salt)    

    kdf = PBKDF2(password, saltBin, 64, 100000)
    key = kdf[:32]

    return [key,salt]

Alternatively, the change can also be made in encrypt_cols and decrypt_cols.
Another point is: In the current code, the csv-files still have the DataFrame-column. This can be removed by setting the index-parameter in pandas#DataFrame#to_csv to False, here. 
","116","<pandas><csv><aes><python-3.7><pycrypto>","1","1","1","2019-09-01 06:26:20","57741091","0","","5509473","","2019-08-31 11:13:56","2019-08-31 09:51:08",""
"28804772","how to assign crc check in python","I am creating a nurse call monitor system using raspberry pi. in my project i have assigned a switch to every bed and in every room i will assign a pic micro controller. the switches from the bed will send signal to pic of that room. And the pic's will send signal to raspberry pi at the nurse station through xbee.all this module is done. Now i want to assign a crc in my raspberry pi python programme. to check what ever the pic's send is received correctly or not. if data is not correct pic will resend. Also want to assign address to every pic. How to do that. please help. 
My code is something like that--
xbee=serial.Serial(""/dev/ttyAMA0"",baudrate=9600  ,timeout=1.0)
receiveddata=StringVar()
receiveddata= xbee.readline().strip()

if receiveddata:
    if receiveddata== ""ok"" :
        monitor()
        print receiveddata
        address=address+'1'
        call()
        service()
        message()

how to assign crc in this base model. 
","","113","<python><python-2.7><raspberry-pi><raspbian><pycrypto>","1","","0","2017-08-31 06:37:15","","0","","500584","","2015-03-02 07:47:52","2015-03-02 07:42:16",""
"28038384","Python Client side tool( should work in browser) to extract values from a pfx file and sign it","Client side tool to extract values such as common name serial number and public key from pfx file which is loaded by client, and then sign the public key and send to server..
I have completed the backend python code which will import modules from OpenSSL.Crypto library.. 
How to execute the same in client side?.. i.e signing operation should be done in client side, 
In google i found like Brython, skulpt, pyjams help in this.. But i m confused to start.. Any suggestions?
","So, first things first: it is not usueal to have the same code to run on server side and client side.
Second thing: be aware that no authentication (or ""signing"") done on client side can be regarded as safe. At most, the client side can take care of closely coupling the signing with the UI to give the user dynamic feedback - but since whatever requests the client side send to the server can very easily be impersonated by an script, authentication must be performed server side for each request -  for example, a variable saying the current user has authenticated correctly can just be sent as ""True"", regardless of usernames and passwords actually known.
Third thing: despite all this, since there are these frameworks for using Python or a Python like language client side, it is indeed possible to have some modules in  a code base that are used both client side and server side. Of those, I am most familiar with Brython which has achieved a nice level of Python 3.x compatibility and I indeed have a project sharing code client side and server side.   
The re-used code would have to be refactored to abstract any I/O (like getting user input, or getting values from a database), of couse, since these are fundamentally different things on server side, and client side. Still, some core logic can be in place that is reused both sides. 
However third party python modules, like Pycrypto won't work client side (you could probably code a xmlrpc/jsonrpc like call to use it server side) -
and although Python's hashlib is not implemented now in Brython, the project has got a momentum that opening a feature request for at least the same codecs that exist in javascript could be fulfilled in a matter of days. 
(bugs/features requests can be open at github.com/brython-dev/brython)
(PS. I just found out, to my dismay, that currently there is no standard way to compute any hash, not even md5, in Javascript without third party modules - that just emphasize the utilities of frameworks like Brython or coffescript which can bring up a bundle of functionality in a clean way)
","112","<python><python-2.7><openssl><pycrypto><brython>","1","1","1","2015-01-21 10:59:10","","0","1","","","","2015-01-20 05:30:35",""
"43260687","How can I encrypt the same message on different machines?","I'm working with some sensitive data and need to encrypt identification numbers (9 digits).
In the future, I may have to get more data from where it is currently stored and add it to a database.  I want the encryption to be so such that if I add an existing subject to the database, all the plain text of the encrypted identification numbers are the same.
For instance, if I wanted to encrypt 123456789, then the resulting plain text of the encrypted data should be the same no matter which machine I use to encrypt the data.  Likewise, if any of my collaborators have to implement similar encryption in a different language (say Java for instance), their future encrypted plain text should match encrypted plain text from the past.
I know AES in ECB mode is a deterministic encryption scheme and perhaps may not be best for long messages, but since these are so short, and I need total control of the encryption, I thought it may be appropriate.
How can I implement something like I have described using pycrypto?  Is ECB mode the appropriate mode?
","","111","<python><pycrypto>","0","","0","2017-04-06 16:21:44","","7","","","","","2017-04-06 16:21:44",""
"34941374","""Stopped working"" error when installing PyCrypto","I am attempting to install PyCrypto under Windows 7, 64 bit.
I downloaded and installed ActiveState's Python 2.7.10.12, 64 bit, without issue. The interactive shell appears to work fine.
Next, I went to VoidSpace and downloaded PyCrypto 2.6 for Python 2.7 64bit (pycrypto-2.6.win-amd64-py2.7.exe). I ran it and accepted the default folders and clicked “Next” twice, after which it crashed with the following message from Windows:
pycrypto-2.6.win-amd64-py2.7.exe has stopped working 

and no other information.
I downloaded the file again and rebooted the computer and got the same result several times.
How can I figure out why it won’t install and what to do about it?
","Okay, I did some more digging and found the problem, which is:
The installation file has to be ""Run as administrator.""

In other words, right click the file name and select ""Run as administrator.""
It's as simple as that.
Here's what I did to figure that out:
Looking at the StackOverflow post, How do I install PyCrypto on Windows?, I noticed some suggestions to run the installation file using easy_install, so I tried that. (easy_install is in the Python27\Scripts folder.) That gave me a long error message, which said something about signing in as an administrator. I am the administrator, but this gave me the idea that maybe the file wants to run as an administrator. So I tried that and Voila! The installation proceeded to completion.
I don’t know if there’s a reason that I had to do that and other people don’t have to. I've sent an e-mail to Michael at VoidSpace suggesting that he add a note near the download links suggesting that it be run that way.
","110","<installation><pycrypto>","0","1","1","2016-01-24 07:31:40","34973271","1","","5803910","","2016-01-24 07:31:40","2016-01-22 07:36:59",""
"48374893","Importing web3 python module results in assert keccak('') in eth_utils/crypto.py","Importing web3 python module results in the following assertion error. I'm using python3 (also tried python2) and have web3==4.0.0b6 installed, also tried 3.16.4. eth_utils/crypto.py isn't happy. Maybe I have the wrong version python-sha3 module installed?
Traceback (most recent call last):
  File ""eth_send.py"", line 1, in <module>
    import web3
  File ""/Users/mimerrit/ethereum/envname/lib/python3.5/site-packages/web3/__init__.py"", line 7, in <module>
    from web3.account import Account  # noqa: E402
  File ""/Users/mimerrit/ethereum/envname/lib/python3.5/site-packages/web3/account.py"", line 11, in <module>
    from eth_keyfile import (
  File ""/Users/mimerrit/ethereum/envname/lib/python3.5/site-packages/eth_keyfile/__init__.py"", line 7, in <module>
    from eth_keyfile.keyfile import (  # noqa: F401
  File ""/Users/mimerrit/ethereum/envname/lib/python3.5/site-packages/eth_keyfile/keyfile.py"", line 11, in <module>
    from eth_keys import keys
  File ""/Users/mimerrit/ethereum/envname/lib/python3.5/site-packages/eth_keys/__init__.py"", line 15, in <module>
    from .main import (  # noqa: F401
  File ""/Users/mimerrit/ethereum/envname/lib/python3.5/site-packages/eth_keys/main.py"", line 3, in <module>
    from eth_utils import (
  File ""/Users/mimerrit/ethereum/envname/lib/python3.5/site-packages/eth_utils/__init__.py"", line 5, in <module>
    from .abi import (  # noqa: F401
  File ""/Users/mimerrit/ethereum/envname/lib/python3.5/site-packages/eth_utils/abi.py"", line 3, in <module>
    from .crypto import keccak
  File ""/Users/mimerrit/ethereum/envname/lib/python3.5/site-packages/eth_utils/crypto.py"", line 18, in <module>
    assert keccak('') == b""\xc5\xd2F\x01\x86\xf7#<\x92~}\xb2\xdc\xc7\x03\xc0\xe5\x00\xb6S\xca\x82';{\xfa\xd8\x04]\x85\xa4p""  # noqa: E501
AssertionError

","","110","<python><pycrypto><web3>","1","","0","2018-01-22 05:19:24","","1","","5577152","","2018-01-22 05:19:24","2018-01-22 04:55:31",""
"35539985","How to alter ciphertext in python?","I am attempting to learn python and cryptography at the same time.
I am trying to alter the cipher text by a bit (or more) to see the effect it would have on my plaintext when decrypting.
For example:
from Crypto.Cipher import AES
import base64
import os

BLOCK_SIZE = 16
key = os.urandom(BLOCK_SIZE)

PADDING = '{'
pad = lambda s: s + (BLOCK_SIZE - len(s) % BLOCK_SIZE) * PADDING

EncodeAES = lambda c, s: base64.b64encode(c.encrypt(pad(s)))
DecodeAES = lambda c, e: c.decrypt(base64.b64decode(e)).rstrip(PADDING)

cipher = AES.new(key)

# encode a string
encoded = EncodeAES(cipher, 'This is some text.')
print 'Encrypted string:', encoded

# decode the encoded string
decoded = DecodeAES(cipher, encoded)
print 'Decrypted string:', decoded

So I want to decrypt again except having modified the cipher text (""encoded"") before decrypting.
Thanks.
","The easiest way I can think of introducing some noise to the encoded string is to alter every nth character in it. You can play around with string manipulation to introduce more or less random noise (make the nth a random character, change it on every iteration, etc).
Add this function and imports somewhere before your code:
import string
import random

def noise_every_n(input, n, first=0):
    output = """"
    for i, c in enumerate(input, -first):
        if i % n == 0: # using ascii_letters and digits is just what came to mind, there's other ways to get random characters.
            output += random.choice(string.ascii_letters + string.digits)
        else:
            output += c
    return output

Then call the following between encode and decode:
every_n = random.randint(3, 5) # or just set it to a small integer
encoded = noise_every_n(encoded, every_n) 

The function above was adapted from this Stack Overflow answer.
","109","<python><aes><bit><pycrypto>","2","0","1","2016-02-21 18:54:11","","5","","","","","2016-02-21 18:17:24",""
"21196430","Is it (reasonably) possible to decrypt data with ProtectedData.Protect using some other method?","I have a program that uses the .NET method ProtectedData.Protect to encrypt a password using DataProtectionScope.LocalMachine. I have the decrypted password. From what it looks like the encryption algorithm is TripleDES.
I would like to use Python+Pycrypto to decrypt this password, but I'm not sure what the IV is. Is it reasonably possible to figure out what the IV is and decrypt the PW with Pycrypto?
","","109","<python><.net><encryption><pycrypto>","1","","0","2014-01-17 21:41:30","","4","","-1","","2017-05-23 10:31:39","2014-01-17 21:41:30",""
"38010844","Google cloud storage signed url how to generate sha256 hash in python 3?","I need to use python3 and google cloud storage tgt. The example codes here is written in python2 and I am trying to change the script so it works in python3.
In python 2, SHA256 works fine.
import Crypto.Hash.SHA256 as SHA256

def _Base64Sign(self, plaintext):
    """"""Signs and returns a base64-encoded SHA256 digest.""""""
    shahash = SHA256.new(plaintext)

but in python3, it doesn't seem to generate the same key.
import Crypto.Hash.SHA256 as SHA256
def _Base64Sign(self, plaintext):
        """"""Signs and returns a base64-encoded SHA256 digest.""""""
        t = plaintext.encode()
        shahash = SHA256.new(t)
        #print(shahash)
        signer = PKCS1_v1_5.new(self.key)
        signature_bytes = signer.sign(shahash)
        return base64.b64encode(signature_bytes)

So my question is if plaintext.encode() is changing sha256 hash or it's just pycrypto has changed for python3. What can I do to generate the same key as python 2 version? Do I have to port python2  in python 3?
Any advice would be appreciated, thanks.
","","107","<python-3.x><google-cloud-storage><pycrypto>","1","","0","2016-06-24 10:09:13","","0","","","","","2016-06-24 10:09:13",""
"51807327","Python logging encrypt with custom format","I'm trying to create a custom class logger class for printing the log and save it to a file as encrypted at the same time. I used this reference.
Here is my code:
import base64
import logging
from pprint import pprint
from Cryptodome.Cipher import AES
from Cryptodome.Hash import SHA256
from Cryptodome.Hash import MD5
from Cryptodome import Random


class logger:
    """"""
    Encrypt log messages to file as encrypted
    """"""
    class EncryptedLogFormatter(logging.Formatter):
        def __init__(self, key, fmt=None, datefmt=None):
            self._key = self.hash_gen(key, 16)
            super(logger.EncryptedLogFormatter, self).__init__(fmt=fmt, datefmt=datefmt)

        @staticmethod
        def hash_gen(key, size):
            """"""
            return a hash object of key base on size
            """"""
            key = MD5.new(key.encode('utf-8')).digest()  # use SHA-256 for a proper-sized AES key
            return key[:size]

        def format(self, record):
            # pprint(vars(record))
            message = record.msg  # log message to encrypt, if any
            asctime = record.asctime  # asctime to encrypt
            levelname = record.levelname  # levelname to encrypt

            if message:  # no sense to encrypt empty log messages
                iv = Random.new().read(AES.block_size)  # we'll be using CBC so generate an IV
                cipher = AES.new(self._key, AES.MODE_CBC, iv)
                # AES demands all blocks to be of `AES.block_size` so we have to pad the message
                # you can use any padding you prefer, I think PKCS#7 is the best option
                padding = AES.block_size - len(message) % AES.block_size
                # pad the message...
                message += chr(padding) * padding
                message_enc = iv + cipher.encrypt(message.encode())  # add iv and encrypt
                # finally, replace our plain-text message with base64 encoded encrypted one
                record.msg = base64.b64encode(message_enc).decode()

            if asctime:
                iv = Random.new().read(AES.block_size)
                cipher = AES.new(self._key, AES.MODE_CBC, iv)
                padding = AES.block_size - len(asctime) % AES.block_size
                asctime += chr(padding) * padding
                asctime_enc = iv + cipher.encrypt(asctime.encode())
                record.asctime = base64.b64encode(asctime_enc).decode()

            if levelname:
                iv = Random.new().read(AES.block_size)
                cipher = AES.new(self._key, AES.MODE_CBC, iv)
                padding = AES.block_size - len(levelname) % AES.block_size
                levelname += chr(padding) * padding
                levelname_enc = iv + cipher.encrypt(levelname.encode())
                record.levelname = base64.b64encode(levelname_enc).decode()

            return super(logger.EncryptedLogFormatter, self).format(record)

    def __init__(self, key, filename, level=logging.INFO, fmt='%(asctime)s:%(levelname)s: %(message)s', datefmt=""%Y-%m-%d %H:%M:%S""):
        root = logging.getLogger()
        root.setLevel(level)
        ch = logging.StreamHandler()
        fh = logging.FileHandler(filename)
        formatter = logging.Formatter(fmt=fmt, datefmt=datefmt)
        ch.setFormatter(formatter)
        fh.setFormatter(logger.EncryptedLogFormatter(key, fmt, datefmt))
        root.addHandler(ch)
        root.addHandler(fh)

    def print(self, message):
        logging.info(message)


if __name__ == ""__main__"":
    logg = logger(""abcdefg"", 'Some path')
    logg.print(""Hello"")

Console output:

2018-08-12 13:21:07:INFO: Hello

File output:

2018-08-12 13:21:07:QcMrG7d7gvxwiagidFozC2v4kQukgnbXv5Hs2rMDAZQ=: Px4ZlIE7usOTTtbURDjrGW4VBXaIKH/F3vhs9pj5G3o=

It seems that the asctime hasn't been encrypted.
What I want is to just use the user format and encrypt time, level and message. It would be better to just create the whole line encrypted but I don't know how to create the custom message for user input format.
","As @AntiMatterDynamite said, the whole message can be encrypted before super().format():
import base64
import logging
from pprint import pprint
from Cryptodome.Cipher import AES
from Cryptodome.Hash import SHA256
from Cryptodome.Hash import MD5
from Cryptodome import Random


class logger:
    """"""
    Encrypt log messages to file as encrypted
    """"""
    class EncryptedLogFormatter(logging.Formatter):
        def __init__(self, key, fmt=None, datefmt=None):
            self._key = self.hash_gen(key, 16)
            super(logger.EncryptedLogFormatter, self).__init__(fmt=fmt, datefmt=datefmt)

        @staticmethod
        def hash_gen(key, size):
            """"""
            return a hash object of key base on size
            """"""
            key = MD5.new(key.encode('utf-8')).digest()  # use SHA-256 for a proper-sized AES key
            return key[:size]

        def format(self, record):
            # encrypt whole message instead of record.msg
            message = super().format(record)
            if message:  # no sense to encrypt empty log messages
                iv = Random.new().read(AES.block_size)  # we'll be using CBC so generate an IV
                cipher = AES.new(self._key, AES.MODE_CBC, iv)
                # AES demands all blocks to be of `AES.block_size` so we have to pad the message
                # you can use any padding you prefer, I think PKCS#7 is the best option
                padding = AES.block_size - len(message) % AES.block_size
                # pad the message...
                message += chr(padding) * padding
                message_enc = iv + cipher.encrypt(message.encode())  # add iv and encrypt
                # finally, replace our plain-text message with base64 encoded encrypted one
                return base64.b64encode(message_enc).decode()

    def __init__(self, key, filename, level=logging.INFO, fmt='%(asctime)s:%(levelname)s: %(message)s', datefmt=""%Y-%m-%d %H:%M:%S""):
        root = logging.getLogger()
        root.setLevel(level)
        ch = logging.StreamHandler()
        fh = logging.FileHandler(filename)
        formatter = logging.Formatter(fmt=fmt, datefmt=datefmt)
        ch.setFormatter(formatter)
        fh.setFormatter(logger.EncryptedLogFormatter(key, fmt, datefmt))
        root.addHandler(ch)
        root.addHandler(fh)

    def print(self, message):
        logging.info(message)


if __name__ == ""__main__"":
    log = logger(""abcdefg"", 'Some path')
    log.print(""Hello"")

","105","<python-3.x><logging><encryption><pycrypto>","1","1","1","2018-08-13 05:16:38","51815590","4","","","","","2018-08-12 09:03:31",""
"49702480","How to slice dict values to different list","import ccxt
import time
import re

exchanges = {'mercado', 'bitfinex', 'quadrigacx','binance'}

limit = 10

def get_order_book(key,symbol):
    exchange = eval('ccxt.' + key + '()' )
    orderbook = exchange.fetch_order_book(symbol,limit)
    print (list(orderbook.keys()))

    bid = orderbook['bids']
    print (bid)

get_order_book('bitfinex', 'BTC/USD')

>>['bids', 'asks', 'timestamp', 'datetime', 'nonce']
[[6603.6, 0.02189108], [6603.1, 0.15613008], [6602.7, 1.508], [6602.0, 0.05], [6601.3, 1.0], [6601.0, 0.00499], [6600.5, 0.63660326], [6600.3, 1.5094], [6600.0, 9.0], [6598.1, 0.18676835]]

The function bids returns a list with two values for each index, first is price, second is amount.
Its possible to slice this list into two lists, one with price and another with amount?
or put this into a nested dict key, for me to use later?
Instead of returning a list it will assign the two values of each index on the list to a nested dict
Like new_orderbook['bids']['price'] for the first number
And new_orderbook['bids']['amount'] for the second number
","@ekhumoro is correct.
You can unzip these pairs by passing zip() the iterator it contains preceded by the * operator.
>>> bid
[[4030.1, 0.17328499], [4030.0, 0.73859736], [4029.7, 1.921567], [4027.9, 0.31081552], [4027.3, 0.05842284], [4027.2, 1.26534116], [4027.0, 0.19425388], [4026.9, 0.04], [4026.7, 0.0133796], [4026.3, 0.93483375]]
>>> prices, amounts = zip(*bid)
>>> list(prices)
[4030.1, 4030.0, 4029.7, 4027.9, 4027.3, 4027.2, 4027.0, 4026.9, 4026.7, 4026.3]
>>> list(amounts)
[0.17328499, 0.73859736, 1.921567, 0.31081552, 0.05842284, 1.26534116, 0.19425388, 0.04, 0.0133796, 0.93483375]

","103","<python><regex><slice><pycrypto>","0","0","1","2018-12-28 19:11:48","","1","","8291949","","2018-04-07 05:29:31","2018-04-07 00:02:59",""
"48631472","Key Kollision in DES3 Implementation of PyCrypto","I'm pretty new to cryptography and only a user really. I stumbled however over a very interesting ""vulnerability"" of the DES3 Cipher of the PyCrypto library. 
I experimented with generating Private Keys and encrypting them with DES3. Everything is fine with the following code:
from Crypto.PublicKey import RSA
from Crypto.Cipher import DES3
from Crypto import Random

random_generator = Random.new().read
key = RSA.generate(1024,random_generator)
public_key = key.publickey()
enc_data = public_key.encrypt('abcdefgh', 32)

exported_key = key.exportKey('PEM', '12345678abcdefgh', pkcs=1)
print(exported_key)
imported_key = RSA.importKey(exported_key,'12345678abcdefgi')

print(imported_key.exportKey('PEM'))

Note the minor change in the passphrase when importing the key. As expected, the result of the import is a fail, as the Private Key can not be decrypted correctly with the 16 byte passphrase provided. When I change the passphrase to the correct one, everything is fine.
However, when I experimented with encrypting something with DES3 (the standard encryption used in passphrase encrypting in this code), I stumbled accross something.
Regard the code:
from Crypto.Cipher import DES3

des = DES3.new(""12345678abcdefgh"")
secret = des.encrypt(""1234abcd"")
print(secret)

des2 = DES3.new(""12345678abcdefgi"")
result = des2.decrypt(secret)
print(result)

Which produces the following result:
��@e���
1234abcd

I can decode the message despite having an unauthorized key. For every other change I have tried so far (""12345678absdefgj"" e.g.), encryption works as expected.
Is this a vulnerability in the DES3 cipher, an incorrect implementation or a fault in my ""experiment""?
Thanks for your help!
","","102","<python><security><encryption><pycrypto>","3","","0","2018-02-05 21:12:51","","2","0","5104550","","2018-02-05 21:12:51","2018-02-05 21:06:28",""
"33323922","Python: Pycrypto decryption error","So currently I have been working on a encryption and decryption program for my school to use, for their database and storing student logon passwords. I am having trouble with this error though.
TypeError: a bytes-like object is required, not 'str'

If anyone can help me fix this error, it would be much appreciated.
Code Below:
from Crypto.Cipher import AES
import base64
import os

def en():
    message = input(""Message to encrypt: "")
    BLOCK_SIZE = 32
    PADDING = '{'

    pad = lambda s: s + (BLOCK_SIZE - len(s) % BLOCK_SIZE) * PADDING

    EncodeAES = lambda c, s: base64.b64encode(c.encrypt(pad(s)))

    en_Key = b'-\xdd\xe3\x12\xa5\xc9\xfbB\xb7\xe1\xf7?l\xb0\x91""\xb8\\\xae\xa4\x8a\xbfo\x0bf\xcf\xeek\xb1k\x00d'
    print('Encryption key: ', en_Key)

    cipher = AES.new(en_Key)

    encoded = EncodeAES(cipher, message)
    print('Encrypted message: ', encoded)

def de(en_Message):

    PADDING = '{'
    DecodeAES = lambda c, e: c.decrypt(base64.b64decode(e)).rstrip(PADDING)

    en_Key = b'-\xdd\xe3\x12\xa5\xc9\xfbB\xb7\xe1\xf7?l\xb0\x91""\xb8\\\xae\xa4\x8a\xbfo\x0bf\xcf\xeek\xb1k\x00d'

    cipher = AES.new(en_Key)

    decoded = DecodeAES(cipher, en_Message)
    print('Decoded message: ', decoded)

","","101","<python><python-3.x><encryption><pycrypto>","0","","0","2015-10-24 22:49:13","","3","","3641207","","2015-10-24 22:49:13","2015-10-24 22:12:56","2015-10-31 16:33:02"
"31661748","Passing encrypted data between Python Gae and Client","I am trying to learn how to pass encrypted data between server (Python gae) and client(jquery)
The following sketch of a code fragment at the server works:
random_generator = Random.new().read
key = RSA.generate(1024,random_generator)

publicKey        =  key.publickey()
clearText        =  ""this is a test message""
b64Text          =  base64.b64encode(clearText)
ecryptedText     =  publicKey.encrypt(b64Text,32)

b64DecryptedText =  key.decrypt(encryptedText)  
clearText        =  base64.b64decode(b64DecryptedText)


I do not understand what to pass to the client as a public key which the client can use to encrypt
(using http://crypto-js.googlecode.com/svn/tags/3.1.2/build/rollups/aes.js)
","1. Sending public key to the client
The client only needs the public key to encrypt something that the server can then decrypt. An RSA public key is made up of the modulus n and the public exponent e. The easy way would be to send both parts as hex-encoded strings.
modulus = hex(key.publickey().n)[2:-1]
exponent = hex(key.publickey().e)[2:-1]

2. Using public key to encrypt
CryptoJS doesn't provide an RSA implementation, but jsbn (GitHub) does. It's a good thing that we sent the public components as hex, because jsbn expects the modulus and public exponent as hex-encoded strings:
var rsa = new RSA();
rsa.setPublic(n_string, e_string);
var res = rsa.encrypt(plaintext);

Keep in mind that RSA can only encrypt data that is not bigger as the modulus. If you generate 1024-bit keys, then you can't encrypt data bigger than 1024-bit. If you want to encrypt bigger data, you need Hybrid Encryption with for example AES.
jsbn also only uses PKCS#1 v1.5 padding which pycrypto supports. You can try the non-yet merged pull request #3 to get PKCS#1 v2 OAEP which is more secure than v1.5 padding.
3. Decryption in python
jsbn returns a hex-encoded ciphertext. You can safely send it as you wish, but you need to decode (not shown) it to bytes before decryption in python.
sentinel = Random.new().read(32) # denotes the error result of the decryption 
cipher = PKCS1_v1_5.new(key) # private key
message = cipher.decrypt(ciphertext, sentinel)
if sentinel != message:
    print(""success: "" + str(message))
else:
    print(""failure"")

","100","<javascript><python><encryption><rsa><pycrypto>","0","1","1","2015-07-27 21:11:18","","1","","1816580","","2015-07-27 21:00:23","2015-07-27 19:35:28",""
"43180811","Python3 use installed modules on another computer","I have downloaded the pycrypto module for python 3, so I Can use AES in my python code. (EG if I have a code called encodeUsingAES.py)
However, this wouldn't work if I just copied encodeUsingAES.py to a different computer and ran it right? Because it doesn't have the pycrypto module installed so it will pop up heaps of errors.
I tried just copying the Crypto folders inside pycrypto into the same directory as my .py file but it didn't work.
Is there anyway for my to have all the files I need in the same directory so when I compress and send the folder the recipient can just run the .py file without having to install extra modules?
Thanks!
from Crypto import Random
from Crypto.Cipher import AES

EDIT:
Tried this didn't work
import sys
sys.path.append(""/pycrypto"")
from Crypto import Random
from Crypto.Cipher import AES

$ python3 testCrypto.py
  Traceback (most recent call last):
    File ""testCrypto.py"", line 5, in <module>
    from Crypto import Random
  ImportError: No module named 'Crypto'

or 
import sys
sys.path.append(""pycrypto/lib"")
from Crypto import Random
from Crypto.Cipher import AES

$ python3 testCrypto.py
  Traceback (most recent call last):
    File ""testCrypto.py"", line 5, in <module>
      from Crypto import Random
     File ""pycrypto/lib/Crypto/Random/__init__.py"", line 28, in <module>
      from Crypto.Random import OSRNG
    File ""pycrypto/lib/Crypto/Random/OSRNG/__init__.py"", line 32, in <module>
      from Crypto.Random.OSRNG.posix import new
    File ""pycrypto/lib/Crypto/Random/OSRNG/posix.py"", line 66
      except IOError, e:

","If you copy the complete folder, you should add it to your path to be able to import it. 
import sys
sys.path.append(""/path/to/your/crypto/directory"")

from Crypto import Random

If the pycrypto folder is directly placed in your project folder, following statement should work.
sys.path.append('./pycrypto')
","100","<python-3.x><aes><pycrypto>","1","0","1","2017-04-03 11:53:18","","3","","2881151","","2017-04-03 09:43:03","2017-04-03 09:17:32",""
"53972400","Why doesn't PyCrypto allow for encoding with the private and decoding with the public key to verify the sendersidentity","I've been playing around with the PyCrypto Library with the intention to make a system that works like this:

Create a RSA keyset for both the sender and the receiver and a seperate AES key
The sender:


Encrypts the message with the AES key using the ECB encryption mode ECB
Encrypts the AES key with the senders private key
Concats their own name to the result of the last step
Encrypts the result from the last step with the receivers public key
Combines the results from step 1 and 4 into 1 message and sends it to the receiver

And the receiver


Splits the message into the actual message and the double encrypted key (which also contains the senders name)
Decrypts the double encrypted key using their own private key
Uses the name of the sender to retrieve the senders public key
Decrypts the AES key with the senders public key
Decrypts the message with the AES key


But I'm having trouble with the double encryption. The problem is that I can't decrypt something with the public key when it is encrypted with the private key. I understand that it is because ARS isn't supposed to work backwards, but I want to do this to verify the senders identity to the receiver. I don't know how else to do this.
This is the current code (I know it's messy, I'm a beginner in python and totally new to encryption):
from Crypto import Random
from Crypto.PublicKey import RSA
from Crypto.Cipher import AES, PKCS1_OAEP
from termcolor import colored
import base64, os


def generate_keys_rsa():
    modulus_length = 256*4
    privatekey = RSA.generate(modulus_length, Random.new().read)
    publickey = privatekey.publickey()
    return privatekey, publickey


def encrypt_message_rsa(a_message, publickey):
    encryptor = PKCS1_OAEP.new(publickey)
    encrypted_msg = encryptor.encrypt(a_message)
    encoded_encrypted_msg = base64.b64encode(encrypted_msg)
    return encoded_encrypted_msg


def decrypt_message_rsa(encoded_encrypted_msg, privatekey):
    decoded_msg = base64.b64decode(encoded_encrypted_msg)
    decryptor = PKCS1_OAEP.new(privatekey)
    decoded_decrypted_msg = decryptor.decrypt(decoded_msg)
    return decoded_decrypted_msg


def generate_key_aes():
    aes_key_length = 32
    secret_key = os.urandom(aes_key_length)
    encoded_secret_key = base64.b64encode(secret_key)
    return encoded_secret_key


def encrypt_message_aes(private_msg, encoded_secret_key, padding_character):
    secret_key = base64.b64decode(encoded_secret_key)
    cipher = AES.new(secret_key, AES.MODE_ECB)
    padded_private_msg = private_msg + (padding_character * ((16 - len(private_msg)) % 16))
    encrypted_msg = cipher.encrypt(padded_private_msg.encode(""utf-8""))
    encoded_encrypted_msg = base64.b64encode(encrypted_msg)
    return encoded_encrypted_msg


def decrypt_message_aes(encoded_encrypted_msg, encoded_secret_key, padding_character):
    secret_key = base64.b64decode(encoded_secret_key)
    cipher = AES.new(secret_key, AES.MODE_ECB)
    encrypted_msg = base64.b64decode(encoded_encrypted_msg)
    decrypted_msg = cipher.decrypt(encrypted_msg)
    unpadded_private_msg = decrypted_msg.rstrip(padding_character)
    return unpadded_private_msg.decode(""ascii"")


#         PROCESS         #
# 'rec' means 'received'  #
# 'enc' means 'encrypted' #
# 'dec' means 'decrypted' #
# 'pad' means 'padding'   #
# 'div' means 'division'  #
#         PROCESS         #

raw_txt = input(""Message to send: "")
txt = str(raw_txt)

pad_char = ""{""
div_char = ""|""

# ASSEMBLY #
privatekey0_RSA , publickey0_RSA = generate_keys_rsa()
privatekey1_RSA , publickey1_RSA = generate_keys_rsa()
key_AES = generate_key_aes()

enc_txt = encrypt_message_aes(txt, key_AES, pad_char)
enc_key = encrypt_message_rsa(key_AES, privatekey0_RSA)

msg = (
        pad_char.encode(""utf-8"") +
        div_char.encode(""utf-8"") +
        enc_txt +
        div_char.encode(""utf-8"") +
        enc_key
)

# DISASSEMBLY #
rec_pad = msg[: 1]
rec_div = chr(msg[1])
rec_enc_txt = msg[2: (msg[2:].find(rec_div.encode(""utf-8"")) + 2)]
rec_enc_key = msg[(msg[2:].find(rec_div.encode(""utf-8"")) + 3):]
rec_dec_key = decrypt_message_rsa(rec_enc_key, publickey0_RSA)
rec_dec_txt = decrypt_message_aes(rec_enc_txt, rec_dec_key, rec_pad)

# RESULT LOG #
print()
print(colored(""Total message: "", ""blue"", None, [""bold""]), ""%s"" % msg)
print()
print(colored("" Original key_AES: "", ""blue"", None, [""bold""]), ""%s - (%d)"" % (key_AES, len(key_AES)))
print(colored(""Encrypted key_AES: "", ""blue"", None, [""bold""]), ""%s - (%d)"" % (enc_key, len(enc_key)))
print(colored(""Decrypted key_AES: "", ""blue"", None, [""bold""]), ""%s - (%d)"" % (rec_dec_key, len(rec_dec_key)))
print(colored(""Decrypted key_AES == Original key_AES: "", ""blue"", None, [""bold""]), colored(""%s"" % (rec_dec_key == key_AES), ""green"" if (rec_dec_key == key_AES) else ""red"", None, [""bold""]))
print()
print(colored("" Original text: "", ""blue"", None, [""bold""]), ""%s - (%d)"" % (txt, len(txt)))
print(colored(""Encrypted text: "", ""blue"", None, [""bold""]), ""%s - (%d)"" % (enc_txt, len(enc_txt)))
print(colored(""Decrypted text: "", ""blue"", None, [""bold""]), ""%s - (%d)"" % (rec_dec_txt, len(rec_dec_txt)))
print(colored(""Decrypted text == Original text: "", ""blue"", None, [""bold""]), colored(""%s"" % (rec_dec_txt == txt), ""green"" if (rec_dec_txt == txt) else ""red"", None, [""bold""]))

So, do you know either a solution to use ARS backwards, or an alternative way of verifying the senders identity?
","
an alternative way of verifying the senders identity

Could that be a digital signature? It is supported by PyCryptodome and uses RSA.
","98","<python><encryption><aes><pycrypto><encryption-asymmetric>","2","1","1","2018-12-30 02:12:38","53974813","5","","238704","","2018-12-29 19:08:29","2018-12-29 18:46:38",""
"53880059","Encrypt and Decrypt Using Pycrypto - Python","Below snippet of the code that I have written suing Pycrypto module of python lib to encrypt and decrypt a file.
I am able to encrypt the file, but the decryption logic seems to be not upto the mark . 
The first phase I am encrypting the file text , which ""infile1.txt"" , which works as expected . In the second phase the output of the ""verifile1.txt"" does not show the decrypted text.
import os, random, struct
from Crypto.Cipher import AES
from Crypto import Random
import hashlib

password = 'kitty'
key = hashlib.sha256(password.encode('utf-8')).digest()


%%writefile infile1.txt
ONE on FIRST
TWO on SECOND
THREE on THIRD


fsz = os.path.getsize('infile1.txt')
iv = Random.new().read(16)
encryptor = AES.new(key, AES.MODE_CBC, iv)
sz = 2048


#Encryptor Code

with open('encfile1.txt', 'wb') as fout:
    fout.write(struct.pack('<Q', fsz))
    fout.write(iv)
    with open('infile1.txt') as fin:
        while True:
            data = fin.read(sz)
            n = len(data)
            if n == 0:
                break
            elif n % 16 != 0:
                data += ' ' * (16 - n % 16)
        encd = encryptor.encrypt(data)
        fout.write(encd)



#Decryptor decode

with open('encfile1.txt','rb') as fin:
    fsz = struct.unpack('<Q', fin.read(struct.calcsize('Q')))[0]
    iv = fin.read(16)
    decryptor = AES.new(key, AES.MODE_CBC, iv)
    with open('verfile1.txt', 'wb') as fout:
        while True:
            data = fin.read(sz)
            n = len(data)
            if n == 0:
                break
            fout.write(decryptor.decrypt(data))
        fout.truncate(fsz)

","","97","<python-3.x><aes><pycrypto>","0","","0","2018-12-21 06:17:40","","1","","","","","2018-12-21 06:17:40",""
"55401266","Trying to reproduce 'openssl rsautl -decrypt' using Python","I have some files that contain ids and passwords which were encrypted using an RSA public key file, which typically, in ksh scripts, I decrypt using openssl with a private key, as:
sDecrypted=$(openssl rsautl -decrypt -inkey ""${PK}"" -in ""${EncryptedFile}"" | base64 -d - )

I need to code a Python function to do the same (since Python can do it, I would prefer to have a 'pure Python' code, rather than call 'openssl' from Python code).
I found some example codes like the one below: 
from Crypto.PublicKey import RSA

fpk = open('my.privkey.pem', 'rb')
key = RSA.importKey(fpk.read())

fcrypt = open(""MyEncryptedFile.rsa"", ""rb"")
pwdcrypt = fcrypt.read()

print(pwdcrypt)
z = key.decrypt(pwdcrypt)
print(z)

... however, my code needs to be portable to servers running Python 2.6.6 / pycrypto 2.0.1, which does not have RSA.importkey.
Any idea of how to achieve the goal with the imposed restrictions?
","","96","<python><openssl><python-2.6><pycrypto>","0","","0","2019-03-28 16:26:15","","0","","4006053","","2019-03-28 16:26:15","2019-03-28 15:22:05",""
"35484882","Why won't modules in pycrypto work?","I have installed pycrypto on my Mac Yosemite 10.10.5, using PIP. I'm using Python 2.7.10.
When I try to run code such as from Crypto import Cipher, it generates the error:

ImportError: cannot import name Cipher

When I run PIP SHOW PYCRYPTO, I get:
Metadata-Version: 2.0
Name: pycrypto
Version: 2.6.1
Summary: Cryptographic modules for Python.
Home-page: http://www.pycrypto.org/
Author: Dwayne C. Litzenberger
Author-email: dlitz@dlitz.net
License: UNKNOWN
Location: /Library/Python/2.7/site-packages
Requires: 

My SYS.PATH is:

['', '/Library/Python/2.7/site-packages/pip-8.0.2-py2.7.egg', '/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python27.zip', '/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7', '/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-darwin', '/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-mac', '/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-mac/lib-scriptpackages', '/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python', '/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-tk', '/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-old', '/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-dynload', '/Users/cameronmacintyre/Library/Python/2.7/lib/python/site-packages', '/usr/local/lib/python2.7/site-packages', '/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/PyObjC', '/Library/Python/2.7/site-packages']

I also seem to have the command line tools, including gcc, which are located at /Library/Developer/CommandLineTools/usr/bin/. 
","","96","<macos><python-2.7><pycrypto>","1","","0","2016-02-18 14:59:56","","1","","1743880","","2016-02-18 14:59:56","2016-02-18 14:58:10",""
"55226696","encrypt using ase256 gives different output in python and nodejs","I am trying to encrypt a string ""1"" using key = ""secret_key"" and text ""11869021012"". Earlier I had written this in nodejs. now I want to port this to python. but here surprisingly both are giving different outputs.
var crypto = require('crypto');

function getBytes (str) {
  let bytes = [], char;
  str = encodeURI(str);
  while (str.length) {
    char = str.slice(0, 1);
    str = str.slice(1);

    if ('%' !== char) {
      bytes.push(char.charCodeAt(0));
    } else {
      char = str.slice(0, 2);
      str = str.slice(2);

      bytes.push(parseInt(char, 16));
    }
  }
  return bytes;
};


function getIV (str, bytes){
    iv = getBytes(str);
    if(!bytes) bytes = 16;
    for(let i=iv.length;i<bytes;i++) {
      iv.push(0);
    }
    return Buffer.from(iv);
};

function getKey (pwd){
    pwd = Buffer.from(getBytes(pwd), 'utf-8');
    let hash = crypto.createHash('sha256');
    pwd = hash.update(pwd).digest();
    return pwd;
};

function createCipherIV (algorithm, input_key, iv_input, text){
    let iv = getIV(iv_input);
    let key = getKey(input_key);
    let cipher = crypto.createCipheriv(algorithm, key, iv);
    let encrypted = cipher.update(text)
    encrypted += cipher.final('base64');
    return encrypted;
}

output = createCipherIV('aes256', 'secret_key', '11869021012', '1') 
console.log(output)

This produces the output:
s6LMaE/YRT6y8vr2SehLKw==
python code:
# AES 256 encryption/decryption using pycrypto library
import base64
import hashlib

from Crypto.Cipher import AES
from Crypto import Random

BLOCK_SIZE = 16
pad = lambda s: s + (BLOCK_SIZE - len(s) % BLOCK_SIZE) * chr(BLOCK_SIZE - len(s) % BLOCK_SIZE)
unpad = lambda s: s[:-ord(s[len(s) - 1:])]

password = ""secret_key""

def encrypt(raw, password):
    private_key = hashlib.sha256(bytearray(password, ""utf-8"")).digest()
    raw = pad(raw)
    iv = b'11869021012\x00\x00\x00\x00\x00'
    cleartext = bytearray(raw, 'utf-8')
    cipher = AES.new(private_key, AES.MODE_CBC, iv)

    return base64.b64encode(iv + cipher.encrypt(cleartext))

# First let us encrypt secret message
encrypted = encrypt(""1"", password)
print(encrypted)

This produces the output:
MTE4NjkwMjEwMTIAAAAAALOizGhP2EU+svL69knoSys=
I have used aes256 algorithm here for encrypting message.
Clearly they are very close, but node seems to be padding the output with some extra bytes. Any ideas how I can get the two to interoperate?
","First, in a secure crypto system, you should expect the output to be different every time you encrypt, even using the same code. That fact that yours doesn't indicates it's an insecure cipher. Typically this is done by adding a random IV.
Your IV is ""11869021012"", which is horrible (because it's not random, and not even 16 bytes), but it does seem you're using it the same way in both, so that's fine.
Your password is the SHA-256 of a string, which is a horrible way to create a key, but still, you seem to be doing it the same way in both cases, so that's fine.
Your problem is that the Python code emits the IV followed by the cipher text. Your JS code does not emit the IV; it only emits the cipher text. So you probably meant this in the Python:
return base64.b64encode(cipher.encrypt(cleartext))

Or you need to rework the JavaScript to glue together the IV and the cipher text before Base64 encoding.
","95","<encryption><aes><cryptojs><pycrypto>","1","1","1","2019-03-18 17:37:40","55227093","6","","","","","2019-03-18 17:13:27",""
"36465886","Why does pycrypto return the same encryption result when using two different public keys?","I've generated two key pairs with openssl:
openssl genpkey -algorithm RSA -out ndkey.pem -pkeyopt rsa_keygen_bits:1023 -pkeyopt rsa_keygen_pubexp:3

I using pycrypto to encrypt cipher with primitive RSA for two public key:
key1 = importKey(open('pkey.pem'))
pk1 = key1.publickey()
enc_data1 = pk1.encrypt(text, 1)
# print enc_data1[0]
f1 = open('encrypted.1', 'w')
f1.write(enc_data1[0])
f1.close()

key2 = importKey(open('pkey2.pem'))
pk2 = key2.publickey()
enc_data2 = pk2.encrypt(text, 1)
# print enc_data2[0]
f2 = open('encrypted.2', 'w')
f2.write(enc_data2[0])
f2.close()

print key1.n
print key2.n
print '({}, {}, {})'.format(key1.n, key1.e, bytes_to_long(enc_data1[0]))
print '({}, {}, {})'.format(key2.n, key2.e, bytes_to_long(enc_data2[0]))
print enc_data1 == enc_data2

Result:
22446587435783322535029926755522036093675835913290096371282649374261751886779792158268506193653741624694526861855388271128220343487285072455172348728517611812702642248438921952478917230370355877411774793976036676098428192127612807541759106243552886208613574681618562399678299666931976649794119197607602009750603778388548285240483011272063617594153157862753765694060756437470380792465477448634937898772420338613993398024699219918370034214455085868046146614573532274141958156157669859296150827240202401991892690879375285068011539679340140386717637063432283626051255917883375261840829071425328178052796156585434620172339
27173517653161146721399399483321106051348494833126656892132038343853315394541987081201985517940371665296451046896427324444405991983593681459775927250781326318134023191438693906225250446425515737352497760790346987933424933378740267054765665975297294346138266451296229352298302247469480080897832820929109398112519858525971582557120594702836884498254069262704265059341307982026489056555170273623524529550647132999158193858003667551632101384236498921133041585007229051277169868413556175970329043233718304735481129875181130029006556378684002155199475307210851127922382666215752506594372446312743297408737452007324664998721
(22446587435783322535029926755522036093675835913290096371282649374261751886779792158268506193653741624694526861855388271128220343487285072455172348728517611812702642248438921952478917230370355877411774793976036676098428192127612807541759106243552886208613574681618562399678299666931976649794119197607602009750603778388548285240483011272063617594153157862753765694060756437470380792465477448634937898772420338613993398024699219918370034214455085868046146614573532274141958156157669859296150827240202401991892690879375285068011539679340140386717637063432283626051255917883375261840829071425328178052796156585434620172339, 3, 8919260869834175894157597887369949260094875703418884180570952000)
(27173517653161146721399399483321106051348494833126656892132038343853315394541987081201985517940371665296451046896427324444405991983593681459775927250781326318134023191438693906225250446425515737352497760790346987933424933378740267054765665975297294346138266451296229352298302247469480080897832820929109398112519858525971582557120594702836884498254069262704265059341307982026489056555170273623524529550647132999158193858003667551632101384236498921133041585007229051277169868413556175970329043233718304735481129875181130029006556378684002155199475307210851127922382666215752506594372446312743297408737452007324664998721, 3, 8919260869834175894157597887369949260094875703418884180570952000)
True

What is this mean?
","Your ""encrypted"" value is the cube of the integer which is equivalent to the ASCII codes (in bigendian order) for the text ""plaintext"". Because your plaintext value is small and you ignored the advice in every competent source including Wikipedia and the pycrypto documentation and used 'textbook' RSA (no padding) with e=3 to make it even worse, the computation msg^e mod n did not actually wrap and use the mod n part and thus provides absolutely zero security.
","92","<python><rsa><pycrypto>","0","1","1","2016-04-07 11:52:50","36466888","0","","1816580","","2016-04-07 11:52:50","2016-04-07 02:52:29",""
"32562070","Python pycrypto disables logging - google app engine","I am using python with google app engine. Working on Macbook air 2012 with python 2.7.
The problem I have is:
import logging

logging.info(""test"") # this works before importing crypto

import Crypto

logging.info(""test2"") # this one does not after importing crypto

How does crypto change logging and how can I fix it so that I can use logging normally again in my python app?
Update1:
It seems that some python errors are also not displayed in the logging from app engine, as well as correct python code also giving a '500 internal server error' which is only visible in a browser console when testing the app in localhost.
Update2:
I have completely disabled any imports of Python Crypto ( which is provide by Google App Engine ), and now my logging works correctly, displaying all my own testing logging lines and python errors. This of course does not solve the problem as I need the Crypto module. Using Crypto in this case blocks the ability to test any code because you can not see errors in the logging.
Update3: 
To be clear, I have included the crypto library in app.yaml exactly as instructed by Google App Engine docs. The crypto library itself works fine, the problem is that it breaks logging in my python app engine app.
","","90","<python><google-app-engine><logging><pycrypto>","2","","0","2015-09-17 10:02:20","","9","2","4486756","","2015-09-17 10:02:20","2015-09-14 10:04:11",""
"57215372","RSA encrypt by pycryptodome and decrypt by pycrypto","I encrypted a message by using pycryptodome on python3.6, but this encrypted string cannot be decrypted by pycrypto on python2.7.
I used
public_key = RSA.importKey(key)
public_key.encrypt(str.encode(text), 4)

to encrypt text, but when I 
am using the pycryptodome, there is a warning: ""NotImplementedError: Use module Crypto.Cipher.PKCS1_OAEP instead"".
So I change the code to:
public_key = RSA.importKey(key)
encryptor = PKCS1_OAEP.new(public_key)
encryptor.encrypt(str.encode(text))

The decryption is running on python2.7 on our server, and it cannot be modified; However, I want to support python3.6 client to encrypt message.
So using pycryptodome is must-to-have.
Please tell me what's wrong with those pieces of codes, thanks.
","","90","<python-3.x><encryption><rsa><pycrypto><pycryptodome>","0","","0","2019-07-26 07:43:39","","1","","","","","2019-07-26 07:43:39",""
"55720508","How to encrypt data with RSA private key (not normal signing) in Python?","I want to make RSA encryption with private key (not normal signing), but PyCryptodome seems not be able to do it.
The reason I need to do it with private key is, I need to get the same results as from a Java program not written by me, which wrongly uses javax.crypto.Cipher and private key to sign messages...
import java.security.KeyFactory;
import java.security.MessageDigest;
import java.security.PrivateKey;
import java.security.spec.PKCS8EncodedKeySpec;
import javax.crypto.Cipher;

...

String deviceKey = ""MIIEvgIBADANBgkqhkiG9w0BAQEFAASC..."";
PKCS8EncodedKeySpec localPKCS8EncodedKeySpec = new PKCS8EncodedKeySpec(Base64.decode(deviceKey).getBytes(""UTF-8""));
PrivateKey localPrivateKey = KeyFactory.getInstance(""RSA"").generatePrivate(localPKCS8EncodedKeySpec);

byte[] hash = MessageDigest.getInstance(""SHA-256"").digest(""test"".getBytes());
Cipher localCipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
localCipher.init(Cipher.ENCRYPT_MODE, localPrivateKey);
String sign = new String(Base64.encode(localCipher.doFinal(hash)));

from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_v1_5
from Crypto.Hash import SHA256

...

deviceKey = 'MIIEvgIBADANBgkqhkiG9w0BAQEFAASC...'
privateKey = RSA.importKey(deviceKey)
hash = SHA256.new('test'.encode()).digest()
signer = PKCS1_v1_5.new(privateKey)
sign = b64encode(signer.encrypt(hash))

Result of the Java program:

Hash: 9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08
Sign: k8y6zMfl0KVuQWWOmRxieXF1aH0dpVUX......(always the same)

Result of my Python script:

Hash: 9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08
Sign: GfLVqZDnu5aLHHbi0tM5OtCBEVKKRcjW......(it changes every time)

","You don't use private keys to encrypt data.

A private key can sign data, which can be verified by the matching public key.
A public key can encrypt data, which can be decrypted by the matching private key.

If what you really want is to sign your hash, instead of using the encrypt function, you should use the sign function.
So, instead of
from Crypto.Cipher import PKCS1_v1_5
PKCS1_v1_5.new(privateKey).encrypt(hash)

you might want to try
from Crypto.Signature import pkcs1_15
pkcs1_15.new(privateKey).sign(hash)

I wrote a little blog post about signing/verifying using pycryptodome, if you want to take a look.
","86","<python><rsa><pycrypto><pycryptodome>","1","2","1","2019-05-01 21:54:15","","0","","","","","2019-04-17 05:32:06",""
"30529742","Having issues with a corrupt encryption error","Im trying to encrypt every line of the file test.txt the function encrypt() will output basically the text all jumbled up. For an end of year project in my computer science class. But my problem is when i try to run the code ""backwards"" with decrypt_all it doesnt work and the file is still corrupted
from Crypto.Cipher import XOR
import base64
import os

def encrypt(key=None, plaintext=None):
    if key == None:
        key = ""This_is_my_hidden_key""
    cipher = XOR.new(key)
    return base64.b64encode(cipher.encrypt(plaintext))
def decrypt(key=None, ciphertext=None):
    if key == None:
            key = ""This_is_my_hidden_key""
    cipher = XOR.new(key)
    return cipher.decrypt(base64.b64decode(ciphertext))


#####Run below to encrypt all files in folder and each sub folder#######

def encrypt_all(UselessVariable = None):
    root = os.getcwd()
    path = os.path.join(root, ""targetdirectory"")
    x=0
    for path, subdirs, files in os.walk(root):
        for name in files:
            openfile = os.path.join(path, name)
            print openfile
            try:
                with open(openfile, 'r+') as a:
                    encrypted_text = []
                    for line in a:
                        encrypted_text.append(decrypt(None, line))
                    open(openfile,""w"").close()
                    for text in range(len(encrypted_text)):
                        a.write((str(encrypted_text[text]))+ '\n')
            except IOError as e:
                print 'Operation failed: %s' % e.strerror
            x+=1
        print """"
    print x



#####Run below to decrypt all files in folder and each sub folder#######

def decrypt_all(UselessVariable = None):
    root = os.getcwd()
    path = os.path.join(root, ""targetdirectory"")
    x=0
    for path, subdirs, files in os.walk(root):
        for name in files:
            openfile = os.path.join(path, name)
            print openfile
            try:
                with open(openfile, 'r+') as a:
                    encrypted_text = []
                    for line in a:
                        encrypted_text.append(decrypt(None, line))
                    open(openfile,""w"").close()
                    for text in range(len(encrypted_text)):
                        a.write((str(encrypted_text[text])))
            except IOError as e:
                print 'Operation failed: %s' % e.strerror
            x+=1
        print """"
    print x

","","84","<python><encryption><io><pycrypto>","0","","0","2015-05-29 12:33:01","","6","","","","","2015-05-29 12:33:01",""
"54503343","Bulk ETH address checker","I used https://github.com/corpetty/py-etherscan-api,
This is my simple script, for checking eth addresses for balance, but it very slow, how I can make this script much more faster?
from etherscan.accounts import Account
import sys 
import os
list = ""adr.txt""
with open(list, 'r') as f:
    for line in f:
        address = line.rstrip()
        api = Account(address=address, api_key='YourApiKey')
        balance = api.get_balance()
        print(address, (int(balance) / 1000000000000000000), file=open(""result.txt"", ""a""))

","","82","<python><python-3.x><ethereum><pycrypto><cryptoapi>","1","","0","2019-02-04 00:30:40","","0","","11008556","","2019-02-04 00:30:40","2019-02-03 13:26:25",""
"50413401","getting different results when encoding with python and when encoding with nodejs","i am trying to encode a particular string with python with pycrypto and encode the same string with nodejs with crypto.
i am getting different results in both the cases for the same input string
python code:
from Crypto.Cipher import AES
from hashlib import md5
import base64


password = 'aquickbrownfoxjumpsoverthelazydog'
input = 'hello+world'

BLOCK_SIZE = 16

def pad (data):
    pad = BLOCK_SIZE - len(data) % BLOCK_SIZE
    return data + pad * chr(pad)

def unpad (padded):
    pad = ord(padded[-1])
    return padded[:-pad]

def text_encrypt(data, nonce, password):
    m = md5()
    m.update(password)
    key = m.hexdigest()
    m = md5()
    m.update(password + key)
    iv = m.hexdigest()

    data = pad(data)

    aes = AES.new(key, AES.MODE_CBC, iv[:16])

    encrypted = aes.encrypt(data)
    return base64.urlsafe_b64encode(encrypted)

output = text_encrypt(input, """", password)
print output

and the nodejs code is as follows:
var crypto = require('crypto');

var password = 'aquickbrownfoxjumpsoverthelazydog';
var input = 'hello+world';

var encrypt = function (input, password, callback) {
    var m = crypto.createHash('md5');
    m.update(password)
    var key = m.digest('hex');

    m = crypto.createHash('md5');
    m.update(password + key)
    var iv = m.digest('hex');

    var data = new Buffer(input, 'utf8').toString('binary');

    var cipher = crypto.createCipheriv('aes-256-cbc', key, iv.slice(0,16));

    var nodev = process.version.match(/^v(\d+)\.(\d+)/);
    var encrypted;

    if( nodev[1] === '0' && parseInt(nodev[2]) < 10) {
        encrypted = cipher.update(data, 'binary') + cipher.final('binary');
    } else {
        encrypted = cipher.update(data, 'utf8', 'binary') + cipher.final('binary');
    }

    var encoded = new Buffer(encrypted, 'binary').toString('base64');

    callback(encoded);
};

encrypt(input, password, function (encoded) {
    console.log(encoded);
});

the results for both the cases is different but after decryption they both tend to give the same correct result.
what might be the issue here?
","You didn't specify what different results are you getting but those two should produce same-ish result. The only difference I see is in the base64 alphabet you're using.
In Python you're calling base64.urlsafe_b64encode() which differs from the standard Base64 in what characters it uses for values for 62 and 63 (- and _ instead of + and /). To get the same result, either in Python return:
return base64.b64encode(encrypted)

Or post-process the base64 encoded string in Node.js:
encoded = encoded.replace(/_/g, '/').replace(/-/g, '+');

All this being said, as I've mentioned in my comment, never derive an IV from your password/key (or anything else deterministic and unchanging). Use a cryptographically secure PRNG for it.
","77","<python><node.js><pycrypto><cryptojs>","-1","0","1","2018-05-18 21:15:19","50419370","2","","","","","2018-05-18 14:20:07",""
"56923762","Crypto.Cipher AES.MODE_EAX encrypt_and_digest error: argument 2 must be bytes, not bytearray","The following code gave me the error ""argument 2 must be bytes, not bytearray"".  I can't find any doc about encrypt_and_digest except some example codes which all just passed one argument to the method. Anyone knows what's the issue here?  Thanks.
key = rb(16)
cipher = AES.new(key, AES.MODE_EAX)
ciphertext, tag = cipher.encrypt_and_digest(b'hello')

","I traced the error source to the third line in the following code
partial = self._cache[:]
partial[self._cache_n:] = b'\x80' + b'\x00' * (bs - self._cache_n - 1)
pt = strxor(strxor(self._last_ct, partial), self._k2)

in the function digest in the file python3.7/site-packages/Crypto/Hash/CMAC.py. 
The error is about the second argument partial, which is a bytearray. When I modified the third line to the following, the error went away.
pt = strxor(strxor(self._last_ct, bytes(partial)), self._k2)

","77","<aes><pycrypto>","0","0","1","2019-07-07 17:38:13","","0","","","","","2019-07-07 15:53:27",""
"57976265","python 3 'function' object is not iterable","I am new to python and I am trying to create a chat server in python using socket. In my server i want to encrypt and decrypt the message sended from the client to the sever.I am trying to create a key from the server then send it to the client but i got this error: ""'function' object is not iterable"" . I am following this guide : https://riptutorial.com/python/topic/8710/sockets-and-message-encryption-decryption-between-client-and-server.
Here are the code that generate the error: 
key_128 = os.urandom(16)
#encrypt CTR MODE session key
en = AES.new(key_128,AES.MODE_CTR,counter = lambda:key_128)
encrypto = en.encrypt(key_128)

and this is the error :
Traceback (most recent call last):
  File ""test.py"", line 4, in <module>
    en = AES.new(key_128,AES.MODE_CTR,counter = lambda:key_128)
  File ""C:\Users\Admin\AppData\Local\Programs\Python\Python37\lib\site-packages\Crypto\Cipher\AES.py"", line 232, in new
    return _create_cipher(sys.modules[__name__], key, mode, *args, **kwargs)
  File ""C:\Users\Admin\AppData\Local\Programs\Python\Python37\lib\site-packages\Crypto\Cipher\__init__.py"", line 79, in _create_cipher
    return modes[mode](factory, **kwargs)
  File ""C:\Users\Admin\AppData\Local\Programs\Python\Python37\lib\site-packages\Crypto\Cipher\_mode_ctr.py"", line 366, in _create_ctr_cipher
    _counter = dict(counter)
TypeError: 'function' object is not iterable

I tried to run this guide on python 2.7 and it run ok. But i run on python 3 it has error. Can some one explain why and help me fix this?
Update :

I am using pycryptodome  instead of Pycrypto because i cant install Pycrypto in my pc.
I did some researches how to fix this. There is the link that said the error is caused by conflict between python-crypto in lib and local/lib ... But i dont think it is. Here is the link https://github.com/nccgroup/Winpayloads/issues/21

","Per the documentation:

counter : (object) – Instance of Crypto.Util.Counter, which allows full customization of the counter block. This parameter is incompatible to both nonce and initial_value.

counter in this context is an anonymous function (a lambda), but not an instance of Crypto.Util.Counter.  Given key_128 = os.urandom(16) - key_128 is a string.
","76","<python><python-3.x><aes><pycrypto>","-1","0","1","2019-09-17 16:01:41","","3","","789671","","2019-09-17 15:49:53","2019-09-17 14:16:24",""
"54964354","RSA code written with PyCrypto doesn't work with PyCryptodome","I'm trying to run two simple functions that I wrote for PyCrypto with PyCryptodome. Here are the functions with the related class member definitions: 
import Crypto.PublicKey.RSA as RSA

class MyRSA():    
    n = ""123..."" # these are actually very long string...
    p = ""345...""
    u = ""567...""
    q = ""789...""
    e = long(65537)
    t = (long(n), e, long(d), long(p), long(q), long(u))
    key = RSA.construct(t)

    def DecryptText(self, text):            
        chunk_size = 128
        enc_vec = [text[i:i+chunk_size] for i in range(0, len(text), 
                                                       chunk_size)]
        plain_text = ''
        for x in enc_vec:
            plain_text +=  MyRSA.key.decrypt(x)        
        return plain_text

    def EncryptText(self, text):
        chunk_size = 128
        text_vec = [text[i:i+chunk_size] for i in range(0, len(text), 
                                                        chunk_size)]
        enc_text = ''
        for x in text_vec:
            enc_text += MyRSA.key.encrypt(x, '')[0]            
        return enc_text

The two functions EncryptText and DecryptText use the PyCrypto methods encrypt and decrypt which are no longer mantained in PyCryptodome (a NotImplemented error is raised when they are called by external code). Can anyone help me to convert them to code which is compliant with PyCryptodome? Thanks in advance!
","A fundamental component of RSA encryption is padding. Pycrypto used to expose  the raw decrypt and encrypt methods for an RSA key object (the ones you use), but that is wrong and insecure, because they don't implement any padding.
Instead, you should use the module Crypto.Cipher.PKCS1_OAEP (the only option in pycryptodome), which securely takes care of the padding.
","76","<pycrypto><pycryptodome>","1","1","2","2019-03-13 03:38:48","","0","","","","","2019-03-03 00:11:26",""
"54964354","RSA code written with PyCrypto doesn't work with PyCryptodome","I'm trying to run two simple functions that I wrote for PyCrypto with PyCryptodome. Here are the functions with the related class member definitions: 
import Crypto.PublicKey.RSA as RSA

class MyRSA():    
    n = ""123..."" # these are actually very long string...
    p = ""345...""
    u = ""567...""
    q = ""789...""
    e = long(65537)
    t = (long(n), e, long(d), long(p), long(q), long(u))
    key = RSA.construct(t)

    def DecryptText(self, text):            
        chunk_size = 128
        enc_vec = [text[i:i+chunk_size] for i in range(0, len(text), 
                                                       chunk_size)]
        plain_text = ''
        for x in enc_vec:
            plain_text +=  MyRSA.key.decrypt(x)        
        return plain_text

    def EncryptText(self, text):
        chunk_size = 128
        text_vec = [text[i:i+chunk_size] for i in range(0, len(text), 
                                                        chunk_size)]
        enc_text = ''
        for x in text_vec:
            enc_text += MyRSA.key.encrypt(x, '')[0]            
        return enc_text

The two functions EncryptText and DecryptText use the PyCrypto methods encrypt and decrypt which are no longer mantained in PyCryptodome (a NotImplemented error is raised when they are called by external code). Can anyone help me to convert them to code which is compliant with PyCryptodome? Thanks in advance!
","This isn't the question you asked, but please be aware there is a significant cryptographic weakness in your EncryptText. You split up your messages into chunks and encrypt each one. This method is roughly the same as symmetric encryptions's ECB mode, and so it shares the same weakness:
a) An attacker is able to reorder the chunks of a message, or swap them between different encryptions.
b) Chunks that are repeated are visible, giving the attacker clues as to how to decrypt the message.
","76","<pycrypto><pycryptodome>","1","1","2","2019-03-13 03:38:48","","0","","","","","2019-03-03 00:11:26",""
"57947448","PyCryptoDome generate OpenSSL PBKDF2 key for AES encryption","I want to encrypt a file using PyCryptoDome AES-256-ECB mode, write key and password to file and then decrypt it using OpenSSL
Python password and key encryption looks like this:
import random
import string
from pathlib import Path
import sys
from Crypto.Cipher import AES

from Crypto.Protocol.KDF import PBKDF2
from Crypto.Util.Padding import pad


secret = ""123""
random_aes_key_length = 32
aes_key_file_path = ""key.key""
encrypted_message_file_path = ""message.out""
dir_path = Path(__file__).resolve().parent
random_aes_password = """".join(
        random.SystemRandom().choice(string.hexdigits) for _ in range(random_aes_key_length))
aes_key = PBKDF2(random_aes_password, b'', dkLen=32)
aes_obj = AES.new(aes_key, AES.MODE_ECB)
encrypted_message = aes_obj.encrypt(pad(secret.encode(), AES.block_size))

with open(dir_path / aes_key_file_path, 'w', encoding=""utf-8"") as aes_key_file:
    aes_key_file.write(random_aes_password)

with open(dir_path / encrypted_message_file_path, 'wb') as encrypted_message_file:
    encrypted_message_file.write(encrypted_message)

then I want to decode encrypted_message_file using OpenSSL:
openssl enc -aes-256-ecb -d -pbkdf2 -in message.out -pass file:key.key -nosalt -nopad
but I don't get my secret, just some random data:
{���""R,�b�<�-�

How can I encrypt data string using python in compatible way for OpenSSL to decrypt given my random generated encryption password?
Particulary, is my method of generating PBKDF2 key in python
same/compatible with OpenSSL method?

","","75","<python><openssl><aes><pycrypto><pbkdf2>","1","","0","2019-09-15 19:22:29","","7","","2560816","","2019-09-15 19:22:29","2019-09-15 19:14:40",""
"45151411","Python modules do not load. - PyCrypto","I've written an encryption script with PyCrypto in Python 2.7. However, when trying to convert to an executable file, Crypto does not load and the program shuts down immediately. I've tried PY2EXE, Pyinstaller, and CX_Freeze. i want to know how to make this work. Can anyone tell me how my script.py file should look for Py2exe and Pyinstaller? Thanks. My script:
import shutil
from Crypto import Random
from Crypto.Cipher import AES
from tkinter.filedialog import askopenfilename
from tkinter import *
import os



def pad(s):
    return s + b""\0"" * (AES.block_size - len(s) % AES.block_size)

def encrypt(message, key, key_size=256):
    print(""Your key for decryption is: "", key)
    message = pad(message)
    iv = Random.new().read(AES.block_size)
    cipher = AES.new(key, AES.MODE_CBC, iv)
    return iv + cipher.encrypt(message)


def decrypt(ciphertext, key):
    iv = ciphertext[:AES.block_size]
    cipher = AES.new(key, AES.MODE_CBC, iv)
    plaintext = cipher.decrypt(ciphertext[AES.block_size:])
    return plaintext.rstrip(b""\0"")

def encrypt_file(file_name, key):
    with open(file_name, 'rb') as fo:
        plaintext = fo.read()
    enc = encrypt(plaintext, key)
    with open(file_name + '.enc', 'wb') as fo:
        fo.write(enc)

def decrypt_file(file_name, key):
    with open(file_name, 'rb') as fo:
        ciphertext = fo.read()
    dec = decrypt(ciphertext, key)
    with open(file_name[:-4], 'wb') as fo:
        fo.write(dec)

key = b'\xbf\xc0\x85)\x10nc\x94\x02)j\xdf\xcb\xc4\x94\x9d(\x9e[EX\xc8\xd5\xbfI{\xa2$\x05(\xd5\x18'

filename = askopenfilename()

file_name, file_extension = os.path.splitext(filename)

dec = ""_dec""

newfile = file_name + dec

copied = ''.join((newfile, file_extension))

shutil.copy(filename, copied )

encrypt_file(filename, key)

master = Tk()

w = Message(master, text=""Encrypted!"", width = 100)
w.pack()

mainloop()

","","74","<python><python-3.x><pyinstaller><py2exe><pycrypto>","0","","0","2017-07-17 18:41:09","","2","","","","","2017-07-17 18:41:09",""
"42699984","PyCrypto in Python, cannot choose what file to open","I am fairly new to python and pycrypto. I read many guides and manuals on pycrypto and I have come up with a small bit of code. I don't understand how to choose which files I want to encrypt. Is it supposed to be defined somewhere? My code:
import os, random, struct
from Crypto.Cipher import AES

def encrypt_file(key, in_filename, out_filename=None, chunksize=64*1024):

if not out_filename:
    out_filename = in_filename + '.enc'

iv = ''.join(chr(random.randint(0, 0xFF)) for i in range(16))
encryptor = AES.new(key, AES.MODE_CBC, iv)
filesize = os.path.getsize(in_filename)

with open(in_filename, 'rb') as infile:
    with open(out_filename, 'wb') as outfile:
        outfile.write(struct.pack('<Q', filesize))
        outfile.write(iv)

        while True:
            chunk = infile.read(chunksize)
            if len(chunk) == 0:
                break
            elif len(chunk) % 16 != 0:
                chunk += ' ' * (16 - len(chunk) % 16)

            outfile.write(encryptor.encrypt(chunk))

I just want to know how to choose which specific file to encrypt. I tried to write he file path in with open but that didn't seem to work.
","","73","<python><encryption><aes><pycrypto>","0","","0","2017-03-09 16:01:38","","7","","","","","2017-03-09 16:01:38",""
"49523949","Insert PyCrypto RSA decrypted text into mySQL db","im tying to import a string from pyCryptos RSA encryption function into a mysql database.
The datatype of the column username in the database is varchar(256).
here is my code:
# coding: utf8
from InstagramAPI import InstagramAPI
import mysql.connector
import sys
import os
from Crypto.PublicKey import RSA

filereader = open('public_key.txt', 'r')
public_key = RSA.importKey(filereader.read())
filereader.close()
username = ""some_user""
encrypted_username = (public_key.encrypt(username, 32)[0])

this gives me a string of bytes, which gives me strange characters when printed.
now i try to insert the encrypted message into my database:
connection = mysql.connector.connect(user = my_username, password,
                                 host = host,
                                 database = db)
my_cursor = connection.cursor()
message = ""UPDATE accounts SET username=%s WHERE id=1"" % (encrypted_username)
print( message )
my_cursor.execute(message)
connection.commit()

which gives me the output:
UPDATE accounts SET username=
                               è��&/����a��w������J}������gG���I��-
   �#Ʃ���'�60��,��<���~k��N�����(�9\��.����� ]��Ơ�U���2�c�f�Gĥ�
^rт   ,z����o��k�����������y
^4�w1S���D��A��[3���x�脩�H_p����5h���s��y WHERE id=1����u|�����c�?

You have an error in your SQL syntax; check the manual that corresponds
to your MySQL server version for the right syntax to use near
�(�9\��.����� ]��Ơ�U���2�c�f

UPDATE:
just doing:
print (public_key.encrypt(username, 32)

gives me the output:
('\x11\x86\x8b\xfa\x82\xdf\xe3sN ~@\xdbP\x85
\x93\xe6\xb9\xe9\x95I\xa7\xadQ\x08\xe5\xc8$9\x81K\xa0\xb5\xee\x1e\xb5r
\x9bH)\xd8\xeb\x03\xf3\x86\xb5\x03\xfd\x97\xe6%\x9e\xf7\x11=\xa1Y<\xdc
\x94\xf0\x7f7@\x9c\x02suc\xcc\xc2j\x0c\xce\x92\x8d\xdc\x00uL\xd6.
\x84~/\xed\xd7\xc5\xbe\xd2\x98\xec\xe4\xda\xd1L\rM`\x88\x13V\xe1M\n X
\xce\x13 \xaf\x10|\x80\x0e\x14\xbc\x14\x1ec\xf6Rs\xbb\x93\x06\xbe',)

","Encryption and hashing are two different things. If you want easy and actual SHA hash then use :
import hashlib

hash = hashlib.sha256('text'.encode()).hexdigest()
print(hash)

Output:
982d9e3eb996f559e633f4d194def3761d909f5a3b647d1a851fead67c32c9d1

Or from hashlib docs:
>>> import hashlib, binascii
>>> dk = hashlib.pbkdf2_hmac('sha256', b'password', b'salt', 100000)
>>> binascii.hexlify(dk)
b'0394a2ede332c9a13eb82e9b24631604c31df978b4e2f0fbd2c549944f9d79a5'

.
P.S SHA256 has 64 characters so you dont need varchar[256] in your DB
Edit:
As per your edit...
import binascii

binascii.hexlify(public_key.encrypt(username, 32))
print(binascii.hexlify(public_key.encrypt(username, 32)).decode())

And the other way would be :
 binascii.unhexlify(public_key.encrypt(username, 32))
 print(binascii.unhexlify(public_key.encrypt(username, 32)).decode())

","72","<python><mysql><sql><pycrypto>","0","2","1","2018-03-28 00:50:19","49524004","4","","7161804","","2018-03-28 00:07:13","2018-03-27 23:34:52",""
"58053316","How to fix Python import error for Crypto.Signature.DSS","I am trying to run the pycryptodome example for DSA. Here is the example code:
from Crypto.PublicKey import DSA
from Crypto.Signature import DSS
from Crypto.Hash import SHA256

# Create a new DSA key
key = DSA.generate(2048)
f = open(""public_key.pem"", ""w"")
f.write(key.publickey().export_key())
f.close()

# Sign a message
message = b""Hello""
hash_obj = SHA256.new(message)
signer = DSS.new(key, 'fips-186-3')
signature = signer.sign(hash_obj)

But I am facing ImportError for DSS. Here is the error output:
Traceback (most recent call last):
  File ""/usr/lib/python3.6/code.py"", line 91, in runcode
    exec(code, self.locals)
  File ""<input>"", line 1, in <module>
  File ""/snap/pycharm-professional/154/helpers/pydev/_pydev_bundle/pydev_umd.py"", line 197, in runfile
    pydev_imports.execfile(filename, global_vars, local_vars)  # execute the script
  File ""/snap/pycharm-professional/154/helpers/pydev/_pydev_imps/_pydev_execfile.py"", line 18, in execfile
    exec(compile(contents+""\n"", file, 'exec'), glob, loc)
  File ""/home/username/Projects/DSA_Example.py"", line 2, in <module>
    from Crypto.Signature import DSS
ImportError: cannot import name 'DSS'

My development environment includes:

Ubuntu 18.04.3 LTS
Python 3.6.8
PyCharm IDE 2019.2
Using venv Python virtual environment
pip list command shows:

    (venv) username@myubuntu:~/Projects/MyProject/$ pip list
    DEPRECATION: The default format will switch to columns in the future. You can use --format=(legacy|columns) (or define a format=(legacy|columns) in your pip.conf under the [list] section) to disable this warning.
    asn1crypto (0.24.0)
    cryptography (2.1.4)
    decorator (4.1.2)
    enum34 (1.1.6)
    idna (2.6)
    ipaddress (1.0.17)
    keyring (10.6.0)
    keyrings.alt (3.0)
    networkx (1.11)
    numpy (1.13.3)
    pip (9.0.1)
    pycrypto (2.6.1)
    pycryptodome (3.9.0)
    pygobject (3.26.1)
    pyxdg (0.25)
    PyYAML (3.12)
    rubber (1.4)
    SecretStorage (2.3.1)
    setuptools (39.0.1)
    six (1.11.0)
    wheel (0.30.0)

Now how do I fix the import error for DSS?
","It looks like you also have pycrypto (2.6.1) installed which also has a module named Crypto.Signature.  What is happening is that Python is trying to import pycrypto.Crypto.Signature (which does not have a DSS module) instead of pycryptodome.Crypto.Signature. To fix this you could try running 
pip uninstall pycrypto and see if that fixes your issue.
Note on the install page for pycryptodome it says ""One must avoid having both PyCrypto and PyCryptodome installed at the same time, as they will interfere with each other"".
","69","<python><import><pycharm><pycrypto><pycryptodome>","0","1","1","2019-09-22 21:47:49","58053487","0","","","","","2019-09-22 20:52:36",""
"40996360","Decryption issue in python using AES algorithm","I am building website in python flask & using AES algorithm of pycrypto library. In sign up web page, I am saving encrypted pwd & encrypted key in text file. In login page, I am comparing entered pwd with decrypted pwd,using below code
def decryption(encryptedString,key_from_file):
    PADDING = '{'
    DecodeAES = lambda c, e: c.decrypt(base64.b64decode(e)).rstrip(PADDING)
    #Key is FROM the printout of 'secret' in encryption
    #below is the encryption.
    encryption = encryptedString
    key = key_from_file
    cipher = AES.new(key) #### error comes here 
    decoded = DecodeAES(cipher, encryption)
    return decoded

def login():
    if request.method == 'GET':
        return render_template('login.html')
    if  request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        d2 = pandas.read_csv(""Employee_Info.txt"",header=0)
        search_id = d2[d2['email'] == username]
        pdb.set_trace()
        if search_id.empty:
            error = ""username does not exists""
            return render_template('login.html', error = error)
        else:
            pwd_from_file=search_id.iloc[0]['pwd']
            key_from_file=search_id.iloc[0]['key']

            if decryption(pwd_from_file,key_from_file) == password:
                print ""matching password""
            else:
                print ""mismatch""

but I am getting error as ValueError: AES key must be 16,24 or 32 bytes long.
Text file has below fields:
id,email,pwd,key
qq,qq,h4vvEPuVNwjw22yJKz8QGg==,xéðjŸ¸AOÝ¬‡

","You are storing the key in raw Unicode bytes, so there is likely a serialization/deserialization error. Encode the raw key bytes in hexadecimal or Base64 before storing in the file, and then convert back to raw before initializing your cipher. 
Note: Storing the key in the credentials data store is very bad, and encrypting passwords for credential verification is also very bad. Look at Why should I hash passwords and How to securely hash passwords for more information. 
","68","<python><encryption><aes><pycrypto>","0","1","1","2018-04-09 12:58:10","","0","","1033581","","2018-04-09 12:58:10","2016-12-06 13:18:05",""
"58658304","How to reverse hash string, using python","I have hashed email Ids and I want to implement some process so that I can reverse hash string.
I just tried this approach using python hashlib and pycrypto modules, but unfortunately I failed , and also I read many posts on the same topic but none worked for me and fortunately I found something on google which says it do decrypt and encrypt which isn't true in case of HASHING, but it does the job. URL is https://md5decrypt.net/en/Sha256. 
I was wondering how this website manage to do that.
Using hashlib I get
import hashlib
hashlib.sha256(""mishraamrish.asm@gmail.com"".encode())
<sha256 HASH object @ 0x7f55e30c3b20>
_.hexdigest()
'3ad0c9ce5b036587d08b4a13e7478ea4472ec32de04854bc37dcfed1baf760cc'

and from that website when i opted out for Encrypt I got 
Sha256(mishraamrish.asm@gmail.com) = 3ad0c9ce5b036587d08b4a13e7478ea4472ec32de04854bc37dcfed1baf760cc

similarly when I used Decrypt option i got 
3ad0c9ce5b036587d08b4a13e7478ea4472ec32de04854bc37dcfed1baf760cc : mishraamrish.asm@gmail.com

so its a kind request from one who is willing to down vote. please analyse it before going ahead with down vote button.
I know hashing isn't reversible process, and I am curious about that website, if its not then how they are doing it?
Thank You.
","You can’t, and it’s not unique. That’s what makes it a hash.
","65","<python><python-3.x><encryption><pycrypto><hashlib>","-4","3","4","2019-11-02 16:35:00","","6","","10556923","","2019-11-01 11:39:21","2019-11-01 11:14:42",""
"58658304","How to reverse hash string, using python","I have hashed email Ids and I want to implement some process so that I can reverse hash string.
I just tried this approach using python hashlib and pycrypto modules, but unfortunately I failed , and also I read many posts on the same topic but none worked for me and fortunately I found something on google which says it do decrypt and encrypt which isn't true in case of HASHING, but it does the job. URL is https://md5decrypt.net/en/Sha256. 
I was wondering how this website manage to do that.
Using hashlib I get
import hashlib
hashlib.sha256(""mishraamrish.asm@gmail.com"".encode())
<sha256 HASH object @ 0x7f55e30c3b20>
_.hexdigest()
'3ad0c9ce5b036587d08b4a13e7478ea4472ec32de04854bc37dcfed1baf760cc'

and from that website when i opted out for Encrypt I got 
Sha256(mishraamrish.asm@gmail.com) = 3ad0c9ce5b036587d08b4a13e7478ea4472ec32de04854bc37dcfed1baf760cc

similarly when I used Decrypt option i got 
3ad0c9ce5b036587d08b4a13e7478ea4472ec32de04854bc37dcfed1baf760cc : mishraamrish.asm@gmail.com

so its a kind request from one who is willing to down vote. please analyse it before going ahead with down vote button.
I know hashing isn't reversible process, and I am curious about that website, if its not then how they are doing it?
Thank You.
","So what you want is to get the original string from a hash? The main reason we use hashes is that they are non-reversible, so I don't think that's possible. You may got confused with encryption, which can decrypted using a key. 
Sorry I can't be more helpful!
","65","<python><python-3.x><encryption><pycrypto><hashlib>","-4","0","4","2019-11-02 16:35:00","","6","","10556923","","2019-11-01 11:39:21","2019-11-01 11:14:42",""
"58658304","How to reverse hash string, using python","I have hashed email Ids and I want to implement some process so that I can reverse hash string.
I just tried this approach using python hashlib and pycrypto modules, but unfortunately I failed , and also I read many posts on the same topic but none worked for me and fortunately I found something on google which says it do decrypt and encrypt which isn't true in case of HASHING, but it does the job. URL is https://md5decrypt.net/en/Sha256. 
I was wondering how this website manage to do that.
Using hashlib I get
import hashlib
hashlib.sha256(""mishraamrish.asm@gmail.com"".encode())
<sha256 HASH object @ 0x7f55e30c3b20>
_.hexdigest()
'3ad0c9ce5b036587d08b4a13e7478ea4472ec32de04854bc37dcfed1baf760cc'

and from that website when i opted out for Encrypt I got 
Sha256(mishraamrish.asm@gmail.com) = 3ad0c9ce5b036587d08b4a13e7478ea4472ec32de04854bc37dcfed1baf760cc

similarly when I used Decrypt option i got 
3ad0c9ce5b036587d08b4a13e7478ea4472ec32de04854bc37dcfed1baf760cc : mishraamrish.asm@gmail.com

so its a kind request from one who is willing to down vote. please analyse it before going ahead with down vote button.
I know hashing isn't reversible process, and I am curious about that website, if its not then how they are doing it?
Thank You.
","Although you cannot find a unique mapping from a hashing and the data it was generated to, you can still maintain a database describing mappings between certain data and their hash.
By doing a reverse research on the hash, you can find instances of data that would produce the particular hash you are looking for (if you get a match in your database).
Of course the database could have no match or contain multiple matches of the hash, because of the mathematical definition of a hash as being unilateral.
That is exactly how sites such as the one you provided work.
It is also the same mechanism used in hash tables.
","65","<python><python-3.x><encryption><pycrypto><hashlib>","-4","0","4","2019-11-02 16:35:00","","6","","10556923","","2019-11-01 11:39:21","2019-11-01 11:14:42",""
"58658304","How to reverse hash string, using python","I have hashed email Ids and I want to implement some process so that I can reverse hash string.
I just tried this approach using python hashlib and pycrypto modules, but unfortunately I failed , and also I read many posts on the same topic but none worked for me and fortunately I found something on google which says it do decrypt and encrypt which isn't true in case of HASHING, but it does the job. URL is https://md5decrypt.net/en/Sha256. 
I was wondering how this website manage to do that.
Using hashlib I get
import hashlib
hashlib.sha256(""mishraamrish.asm@gmail.com"".encode())
<sha256 HASH object @ 0x7f55e30c3b20>
_.hexdigest()
'3ad0c9ce5b036587d08b4a13e7478ea4472ec32de04854bc37dcfed1baf760cc'

and from that website when i opted out for Encrypt I got 
Sha256(mishraamrish.asm@gmail.com) = 3ad0c9ce5b036587d08b4a13e7478ea4472ec32de04854bc37dcfed1baf760cc

similarly when I used Decrypt option i got 
3ad0c9ce5b036587d08b4a13e7478ea4472ec32de04854bc37dcfed1baf760cc : mishraamrish.asm@gmail.com

so its a kind request from one who is willing to down vote. please analyse it before going ahead with down vote button.
I know hashing isn't reversible process, and I am curious about that website, if its not then how they are doing it?
Thank You.
","Cryptographic hash functions like SHA2, SHA3, Shake, Blake2, etc. are all one-way functions. They can hash arbitrary length inputs to a fixed size like 256 in SHA-256. Due to the pigeon principle, there are collisions and they are inevitable. But we expect to find if hard. We expect them to have;

preimage-resistance — for essentially all pre-specified outputs, it is computationally infeasible to find any input which hashes to that output, i.e., to find any preimage x' such that h(x') = y when given any y for which a corresponding input is not known.
2nd-preimage resistance, weak-collision — it is computationally infeasible to find any second input which has the same output as any specified input, i.e., given x, to find a 2nd-preimage x' != x such that h(x) = h(x').
collision resistance, strong-collision — it is computationally infeasible to find any two distinct inputs x, x' which hash to the same output, i.e., such that h(x) = h(x').

In your case, it is the pre-image attack. Generic pre-image attacks on cryptographic hash functions have O(2^x)-time complexity where x is the output length of the hash function. In SHA-256 O(2^256)
The web site you have mentioned has a trick, then you want to SHA256 hash some text, they immediately store it on their database. When you asked about the hash value that you got from their site, they search for it on their database. It exists since they store it when you asked the hash value. So, you helped them to increase the hashes of their DB. They only have 6,128,202,407 sha256 hash database which is a tiny amount compared to possible outputs od SHA-256 that is 2^256
Side note: hashing is not encryption.
","65","<python><python-3.x><encryption><pycrypto><hashlib>","-4","0","4","2019-11-02 16:35:00","","6","","10556923","","2019-11-01 11:39:21","2019-11-01 11:14:42",""
"57116952","""Ciphering services not available"" error with SNMP V3 usage of pysnmp in python v3 virtual environment","I am trying to use pysnmp library with SNMP V3 settings with MD5 Auth protocol and AesCfb128 Priv protocol to obtain details from a switch. I am trying two things.
1. Install pysnmp and all dependency packages (including pycrytpto) in base machine
2. Create virtual environment for python3 and install pysnmp and all dependency packages (including pycrytpto) in this virtual environment.
When I take the 1st approach, details are retrieved properly. But when I try the 2nd approach, I am getting ""Ciphering services not available"" error. I checked that list of installed packages are pretty much same across the both.
Here are the details of base machine
$ pip3 list

pip (9.0.1)

ply (3.11)

pyasn1 (0.4.5)

pycryptodomex (3.8.2)

pysmi (0.3.4)

pysnmp (4.4.9)

setuptools (28.8.0)

My Virtual Environment is created in location ""/Users//Test/Python/Pysnmp""
$ /Users/<user_name>/Test/Python/Pysnmp/bin/pip3 list

Package Version

pip 18.1

pipdeptree 0.13.2

ply 3.11

pyasn1 0.4.5

pycryptodomex 3.8.2

pysmi 0.3.4

pysnmp 4.4.9

setuptools 40.6.2

Here is the command that I am trying to use
for (errorIndication,errorStatus,errorIndex,varBinds) in nextCmd(SnmpEngine(),
    UsmUserData('test_user', 'test_password', 'test_password', usmHMACMD5AuthProtocol, usmAesCfb128Protocol),
    UdpTransportTarget((host, 161)), ContextData(),
    ObjectType(ObjectIdentity(oid)), lexicographicMode=False):

When I run above code in base machine (like python3 script.py), it returns the details properly.
But when I run it using the python installed inside virtual environment (like /Users/<user_name>/Test/Python/Pysnmp/bin/python3 script.py), it returns ""Ciphering services not available"" as errorindication.
What am I missing???
Thanks
","","63","<snmp><pycrypto><pysnmp><pycryptodome>","0","","0","2019-07-19 17:11:32","","3","","","","","2019-07-19 17:11:32",""
"52909754","Decrypt encrypted binary file in java ( AES_CTR mode)","I know this question have been asked before. I just need a direction to complete these code. It would be very helpfull if anyone could point out the problem in my code
Here is is the Java code for decryption
import javax.crypto.Cipher;
import javax.crypto.CipherOutputStream;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.File;
class Decode{
    public static void main(String []args){
    try{
        Decode.decrypt();
        System.out.println(""Decrypted"");
    }catch(Exception e){
        System.out.println(e);
    }
}
public static void decrypt() throws Exception {
    byte[] initialIV;
    final byte[] buf = new byte[128];
    final Cipher c = Cipher.getInstance(""AES/CTR/NoPadding"");

    final InputStream is = new FileInputStream(""/home/neki/python/encVideo.mp4"");



    byte[] buffer = new byte[16];
    is.read(buffer);


    c.init(Cipher.DECRYPT_MODE,new SecretKeySpec(""1234567890123456"".getBytes(), ""AES""),new IvParameterSpec(buffer));

    final OutputStream os = new CipherOutputStream(new FileOutputStream(""/home/neki/python/javaDecVideo.mp4""), c);
    while (true) {
        int n = is.read(buf);
        if (n == -1) break;
            os.write(buf, 0, n);
    }
    os.close(); is.close();
}
}
}

and here is the python code to encrypt the file
import os, random, struct
from Crypto.Cipher import AES
from os import urandom
from Crypto.Util import Counter
def encrypt_file(key, in_filename, out_filename=None, chunksize=128):


if not out_filename:
    out_filename = in_filename + '.enc'

iv = '\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0'
encryptor = AES.new(key, AES.MODE_CTR, counter = lambda : iv)
filesize = os.path.getsize(in_filename)

with open(in_filename, 'rb') as infile:
    with open(out_filename, 'wb') as outfile:
        # outfile.write(struct.pack('<Q', filesize))
        outfile.write(iv)

        while True:
            chunk = infile.read(chunksize)
            if len(chunk) == 0:
                break

            outfile.write(encryptor.encrypt(chunk))
encrypt_file(""1234567890123456"".encode(),""/home/neki/python/Eduaid.mp4"",""/home/neki/python/encVideo.mp4"")

I have also found some ideas in stackoverflow. but can't able to understand very well.
","The way you have configured this cipher is highly insecure. DO NOT USE THIS CODE.
By setting:
counter = lambda : iv

while initializing the AES cipher in Python, you have forced AES-CTR to use the exact same counter for every block. This reduces the cipher from AES-CTR to a simple rolling XOR. Observe:
>>> key = ""abcd1234abcd1234""
>>> iv = '\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0'
>>> encryptor = AES.new(key, AES.MODE_CTR, counter = lambda : iv)
>>> encryptor.encrypt(""example block 01"")
'\xda\x7f\x00\xbdp\x1c\xe4\xf3=|\x88\xe2\xe5%\x80\xab'
>>> encryptor.encrypt(""example block 01"")
'\xda\x7f\x00\xbdp\x1c\xe4\xf3=|\x88\xe2\xe5%\x80\xab'
>>> encryptor.encrypt(""example block 02"")
'\xda\x7f\x00\xbdp\x1c\xe4\xf3=|\x88\xe2\xe5%\x80\xa8'

Notice that:

Encrypting the same block repeatedly results in the same output.
Encrypting similar blocks results in similar output. (Technically, a XOR b = E(a) XOR E(b).)

To fix this, you need to use the Counter class you have already imported:
encryptor = AES.new(key, AES.MODE_CTR, counter=Counter.new(128))

Once you have configured AES-CTR correctly, your existing Java code should be able to decrypt it.
However, note that this mode is still insecure if the same key is reused to encrypt multiple files. You must use a different key for every file.
","63","<java><python><pycrypto>","1","0","1","2018-10-22 19:13:30","","0","","10534218","","2018-10-22 18:54:30","2018-10-20 20:14:47",""
"44125252","PyCrypto Not Printing Properly","Hi so before I was getting the IV in front (decrypted value of IV I believe it was) of the decrypted string.  Now I don't get the string...  How do I make this work, been trying for hours now...
My code:
    from Crypto.Cipher import AES
    import hashlib
    import base64
    import os
    import string

    iv = os.urandom(16)
    key = hashlib.sha256(b'mypassword123').digest()
    plaintext = (b'the password is totally not secure')
    cipher = AES.new(key, AES.MODE_CFB, iv)
    ciphertext = iv + cipher.encrypt(plaintext)
    print (ciphertext)
    print (""IV = "",iv)
    ciphertext = ciphertext.split(iv)
    ciphertext = str(ciphertext)[1].strip()
    plaintext = cipher.decrypt(ciphertext)
    print (plaintext)

","encrypt will change cipher, you have to make a new one;
and str will change byte to repr(byte), like below:
a=b'xxx'
str(a) # ""b'xxx'""

from Crypto.Cipher import AES
import hashlib
import base64
import os
import string

iv = os.urandom(16)
key = hashlib.sha256(b'mypassword123').digest()
plaintext = (b'the password is totally not secure')
cipher = AES.new(key, AES.MODE_CFB, iv)
ciphertext = iv + cipher.encrypt(plaintext)
print (ciphertext)
print (""IV = "",iv)
ciphertext = ciphertext.split(iv)
ciphertext = ciphertext[1]
cipher2 = AES.new(key, AES.MODE_CFB, iv)
plaintext = cipher2.decrypt(ciphertext)
print (plaintext)

detail see pycrypto
","62","<python><python-3.x><encryption><pycrypto>","0","0","1","2017-05-23 03:41:19","44125421","0","","","","","2017-05-23 03:20:45",""
"54450159","Probles with AES encrypting. cant decrypt with a right key","I'm trying to decrypt encrypdet data. Data was encrypted with AES CBC mode using pycryptodome lib.
Have a such error - ""ValueError: Incorrect AES key length (256 bytes)
import os
from Crypto import Random
from Crypto.Cipher import AES

class AESCipher:
    def __init__(self, key):
        pass

    def pad(self, s):
        return s + b""\0"" * (AES.block_size - len(s) % AES.block_size)

    def encrypt(self, message, key, key_size=256):
        message = self.pad(message)
        iv = Random.new().read(AES.block_size)
        cipher = AES.new(key, AES.MODE_CBC, iv)
        return iv + cipher.encrypt(message)

    def decrypt(self, ciphertext, key):
        iv = ciphertext[:AES.block_size]
        cipher = AES.new(key, AES.MODE_CBC, iv)
        plaintext = cipher.decrypt(ciphertext[AES.block_size:])
        return plaintext.rstrip(b""\0"")

def send_data(data)
    key = os.urandom(16)
    cipher = AESCipher(key)
    ciphertext = cipher.encrypt(data, key)
    return key, ciphertext

def receive_data(key, data):
    cipher = AESCipher(key)
    decrypted = cipher.decrypt(data, key)
    return decrypted

data = b'12 43 42 46 af'
key, ciphertext = send_data(data)
decrypted = receive_data(key, data)

","I think that what you want to decrypt is the ciphered text, not the original data (non-encrypted):
decrypted = receive_data(key, ciphertext)

","61","<python><python-3.x><encryption><pycrypto><pycryptodome>","1","2","1","2019-01-30 22:10:14","54450336","0","","","","","2019-01-30 21:56:44",""
"38682435","Instances & classes: requiring x arguments when x-1 given","I have written the following classes to be able to test different encryption schemes. However, I'm having trouble instantiating objects from the different encryption scheme. Could someone point out to something that doesn't make sense that I'm not catching atm? I'm not sure why it doesn't work. It gives a  TypeError: encrypt() takes exactly 3 arguments (2 given) but it does have self passed, so I don't know how to fix it on the basis of the rest of them. 
class AXU:
    def __init__(self, sec_param):
        self.sec_param = sec_param

    def getHash(self):
        # sample a, b and return hash function
        a = random.randrange(self.sec_param) 
        b = random.randrange(self.sec_param)

        return lambda x : a*x+b % sec_param

class BC(object):
    def __init__(self, sec_param):
        # generate a key 
        self.sec_param = sec_param

    def encrypt(self, message, key):
        #encrypt with AES?
        cipher = AES.new(key, MODE_CFB, sec_param)
        msg = iv + cipher.encrypt(message)
        return msg

class tBC(object):
    def __init__(self, sec_param):
        self.sec_param = sec_param

    def encrypt(self, tweak, message):
        #pass
        return AES.new(message, tweak)

class Trivial(tBC):
    def __init__(self):
        self.bcs = {}

    def encrypt(self, tweak, message):
        if tweak not in self.bcs.keys():
            bc = BC()
            self.bcs[tweak] = bc
        return self.bcs[tweak].encrypt(message)

class Our(tBC):
    def __init__(self, sec_param):
        self.bc1 = BC(sec_param)
        self.bc2 = BC(sec_param)
        self.bc3 = BC(sec_param)
        self.bc4 = BC(sec_param)
        # encryption over GF field
    def encrypt(self, tweak, message):
        return self.bc1.encrypt(self.bc2.encrypt(tweak) * self.bc3.encrypt(message) + self.bc4.encrypt(tweak))

","You are passing in one argument to a bound method:
return self.bc1.encrypt(
    self.bc2.encrypt(tweak) * self.bc3.encrypt(message) + 
    self.bc4.encrypt(tweak))

That's one argument to the BC.encrypt() method each, and this method takes 2 beyond self, message and key.
Either pass in a value for key, or remove that argument from the BC.encrypt() method definition (and get the key from some place else; perhaps from an instance attribute set in __init__).
","61","<python><python-3.x><instantiation><self><pycrypto>","0","1","1","2016-07-31 11:40:26","38682444","2","","2085016","","2016-07-31 11:40:26","2016-07-31 09:06:47",""
"40575426","AES cipher process creation","I have a program that ciphers and deciphers a file, a file named a1, get transformed into a file named a1.enc, and it works properly, my problem is the -p option, which is supposed to define the number processes used to make the ciphers, if i used -p 20, its gonna use more than if i use -p 10, and for default it has to use 1 process, i got the code untill the -p option working correctly, but i missing the main point in this, thank you
import sys
import os, random, time
from Crypto.Cipher import AES
from Crypto.Hash import SHA256
from optparse import OptionParser

def pad(bytestring):
    nbytes = len(bytestring)
    padding_bytes = AES.block_size - nbytes
    padding_str = padding_bytes * chr(padding_bytes)
    return bytestring + padding_str

def cipher(filename):
    key = ""abcdefghijklmnopqrstuwvxyz012345""
    cipher = AES.new(key)
    with open(filename) as ifile, open(filename + "".enc"", ""w"") as ofile:
        bytestring = ifile.read(AES.block_size)
        while len(bytestring) == AES.block_size:
            ofile.write(cipher.encrypt(pad(bytestring)))
            bytestring = ifile.read(AES.block_size)
    ofile.write(cipher.encrypt(pad(bytestring)))

def decipher(filename):
    key = ""abcdefghijklmnopqrstuwvxyz012345""
    cipher = AES.new(key)
    with open(filename + "".enc"") as ifile, open(filename + "".dec"", ""w"") as ofile:
        previous = None
        current = None
        NOT_DONE = True
        while NOT_DONE:
            bytestring = cipher.decrypt(ifile.read(AES.block_size))
            if current == None:
                current = bytestring
            else:
                previous = current
            current = bytestring
            nbytes = len(current)
            if nbytes == 0:
                padding_bytes = ord(previous[-1])
                previous = previous[:-padding_bytes]
                NOT_DONE = False
            ofile.write(previous)

def main():
    parser = OptionParser(usage=""usage: %prog -e|-d [-p n] [-v] {files}"",
                          version=""%prog 1.0"")
    parser.add_option(""-e"", ""--encrypt"",
            action=""store_true"",
            dest=""encrypting"",
            default=False,
            help=""ecrypt file"")
    parser.add_option(""-d"", ""--decrypt"",
            action=""store_true"",
                        dest=""decrypting"",
                        default=""False"",
                        help=""Decrypt file"")
    parser.add_option(""-p"", ""--processes"",
                        action=""store"",
                        dest=""nprocessesthreads"",
                type='int', 
                        help=""Number processes/threads to create"")
    parser.add_option(""-v"", ""--existes"",
                        action=""store_true"",
                        dest=""existfile"",
                        default=""False"",
                        help=""No file exists the question command continues"")
        (options, args) = parser.parse_args()

    inputFilename = args

    if options.encrypting:
        for j in range(len(args)):
            cipher(args[j])

    elif options.decrypting:
        for i in range(len(args)):
            decipher(args[i])

    #elif options.nprocessesthreads > 1:
'''

#Option -p      
#process creation

        i=0
        while i <= options.nprocessesthreads: 


            pid = os.fork()
            if pid == 0:
                ""operates""
                ""ends""
            else:
                i+=1

''' 
    #elif options.existsfile:  
'''

#Opçao -p       
#If file does not exist option to exit or continue  

        if os.path.exists(args):
            print('This will overwrite the file %s. (C)ontinue or (Q)uit?' % (args))
            response = input('> ')
        if not response.lower().startswith('c'):
            sys.exit()

'''
if __name__ == '__main__':
    main()

and it supposed to output something like this:
so000@kali:~/so$ python pcrypt.py -e exemple

so000@kali:~/so$ ls 

a1    a2    a4    exemple      exemple.enc   exemple.key   pcrypt.py 

so000@kali:~/so$ python pcrypt.py -e -v a1 a3 a4 

O file a3 doesnt exist. Continue (s/n) ? 

n 

so000@kali:~/so$ ls 

a1    a1.enc      a1.key      a2    a4    exemple      exemplo.enc
   exemple.key 

pcrypt.py 

","","61","<python><encryption><process><aes><pycrypto>","0","","0","2016-11-13 20:03:12","","5","","2012422","","2016-11-13 20:03:12","2016-11-13 15:20:58",""
"57161142","ImportError: cannot import name 'winrandom'","I know that this question has already a ton of answers but unfortunately this hasn't fixed the issue for me. I want to run some code using PyCrytpo but winrandom doesn't want to get import.
All the other posts are for earlier releases of python. I am using Python 3.6.5 and renaming code within nt.py file to ""from . import winrandom"" doesn't do the trick for me.
Do you have any suggestions or is a rollback the only opportunity?
Windows 10
Python 3.6.5
Anaconda
from Crypto.PublicKey import RSA
Traceback (most recent call last):

  File ""<ipython-input-39-b6fe4d249eef>"", line 1, in <module>
    from Crypto.PublicKey import RSA

  File ""C:\Users\Markus\Anaconda3\lib\site-packages\Crypto\PublicKey\RSA.py"", line 78, in <module>
    from Crypto import Random

  File ""C:\Users\Markus\Anaconda3\lib\site-packages\Crypto\Random\__init__.py"", line 28, in <module>
    from Crypto.Random import OSRNG

  File ""C:\Users\Markus\Anaconda3\lib\site-packages\Crypto\Random\OSRNG\__init__.py"", line 34, in <module>
    from Crypto.Random.OSRNG.nt import new

  File ""C:\Users\Markus\Anaconda3\lib\site-packages\Crypto\Random\OSRNG\nt.py"", line 28, in <module>
    from . import winrandom

ImportError: cannot import name 'winrandom'

","","60","<python><pycrypto>","0","","0","2019-07-23 09:40:41","","2","","3457761","","2019-07-23 09:40:41","2019-07-23 09:37:46",""
"50014926","PyCrypto Library Encrypting vs Decrypting Speed","I am using Pycrypto encrypter and decrypter with AES 256 Symmetric key algorithm. My encryption part is taking much more time in comparison to decryption time. Is there any good reason for it?

I tried on 16 MB file: 
Encryption time = 3.31 secs
  Decryption time = 0.18 secs

Can someone help me in telling what could be the reason for this?
Encryption Logic Looks like below:
def encrypt_file(key, infile, chunksize=64 * 1024):
    """""" Encrypts a file using AES (CBC mode) with the
        given key.

        key:
            The encryption key - a string that must be
            either 16, 24 or 32 bytes long. Longer keys
            are more secure.

        infile:
            input file

        chunksize:
            Sets the size of the chunk which the function
            uses to read and encrypt the file. Larger chunk
            sizes can be faster for some files and machines.
            chunksize must be divisible by 16.
    """"""
    iv = os.urandom(16)
    encryptor = AES.new(key, AES.MODE_CBC, iv)
    infile.seek(0, os.SEEK_END)
    filesize = infile.tell()
    infile.seek(0, os.SEEK_SET)

    encrypted = b'';
    encrypted += struct.pack('<Q', filesize)
    encrypted += iv

    while True:
        chunk = infile.read(chunksize)
        if len(chunk) == 0:
            break
        elif len(chunk) % 16 != 0:
            chunk += b' ' * (16 - len(chunk) % 16)
        encrypted += encryptor.encrypt(chunk)

    return encrypted

And Decryption logic looks like below:
def decrypt_file(key, infile, out_filename, chunksize=24*1024):
    """""" Decrypts a file using AES (CBC mode) with the
        given key.
    """"""
    if key == '':
        with open(out_filename, 'wb') as outfile:
            for line in infile:
                outfile.write(line)
        return outfile.name

    origsize = struct.unpack('<Q', infile.read(struct.calcsize('Q')))[0]
    iv = infile.read(16)
    decryptor = AES.new(key, AES.MODE_CBC, iv)

    # for line in infile:
    #     print(line)
    with open(out_filename, 'wb+') as outfile:
        while True:
            chunk = infile.read(chunksize)
            if len(chunk) == 0:
                break
            outfile.write(decryptor.decrypt(chunk))
        outfile.truncate(origsize)

        return outfile.name

","","60","<encryption><aes><pycrypto>","0","","0","2018-04-25 05:55:40","","5","","","","","2018-04-25 05:55:40",""
"53319195","PyCrypto AES-CTR mode get different output","I use PyCrypto to encrypt my data, but why theirs output is different?
from Crypto.Cipher import AES
from Crypto.Util import Counter


data = b'\x02\x01\xf2\xca\x04\x03\x02P\x02\x02\x01\x80\xd0\x0f\x80\xd0\x0f'
key = b'random 16 string'
nonce = b'string 16 rand\x00\x01'
cipher = AES.new(key, AES.MODE_CTR, counter=lambda: nonce)
data_encrypted = cipher.encrypt(data)
print(data_encrypted)
# output is: b'_M\xed(\t4\xc4\x94\x80\x83K\x94qL\x15+R'

counter = Counter.new(2 * 8, prefix=b'string 16 rand', initial_value=1)
cipher = AES.new(key, AES.MODE_CTR, counter=counter)
data_encrypted = cipher.encrypt(data)
print(data_encrypted)
# output is: b'_M\xed(\t4\xc4\x94\x80\x83K\x94qL\x15+\xce'

Both methods will cause a memory leak. How to use pycryptodome to achieve the first effect
","","60","<python-3.x><pycrypto>","0","","0","2018-11-16 03:01:38","","2","","8007400","","2018-11-16 03:01:38","2018-11-15 12:09:27",""
"26716464","pycrypto with multiple users in virtual environment","I'm using Paramiko (which depends on PyCrypto) on Windows in a virtual environment.  
Because I'm on Windows, I don't have a C compiler by default, so I got the windows executable from XXX, and installed it using:
workon myenv
easy_install pycrypto-2.6.win32-py2.7.exe
python myscript.py

And everything worked for me.
Now my colleague (Steve) would like to use the same program, so he does:
workon myenv
python myscript.py

and it fails with ""ImportError: no module named Crypto"".  Which is odd.  What is odder is that if Steve easy_installs the PyCrypto module, he can use it, but I can't.  The library only seems to work for the person who installed it.
Any idea what I'm missing?  
","You're using virtualenvwrapper, which creates virtualenv directory in .virtualenvs inside users' home directory by default. ([WORKON_HOME][1])
Users' home directories are not shared. So other user cannot use your virtualenv.
Make a virtualenv in a directory that your friend can access.
virtualenv /some/shared/virtualenv-dir

And let other user activate it:
/some/shared/virtualenv-dir/activate


If you want to use virtualenvwrapper, you and other users need to set WORKON_HOME environmental variable to a shared directory. (Not sure this also apply for win32 version of virtualenvwrapper you're using)
","60","<python><windows><paramiko><pycrypto>","0","0","1","2014-11-03 14:52:04","","0","","","","","2014-11-03 14:40:48",""
"33861877","Can I rescue this corrupted DER format file?","I have two files that represent the same DER format public key.  They both look like this when I look at them in a text editor (sublime)
3081 9f30 0d06 092a 8648 86f7 0d01 0101
0500 0381 8d00 3081 8902 8181 00d2 d475
9de6 d795 7d0f e5e8 375f 3605 7e06 e391
83e7 58b2 3e46 d4e8 da3e 0ac5 136c fff2
2d0e 8386 af7c 6347 a3fd 4c39 1989 7764
69b1 85e1 f5cc fe3f 4957 c110 4264 f112
ad8f e1b9 c108 cf5e 9a77 8d6c 60b2 150a
954f 725f 25c7 b720 e536 ca81 9686 fe71
4e86 1822 48a9 df17 6c95 f9ed 8e9b a674
1a9f 868d 92a9 d2a5 5721 6dd9 1f02 0301
0001
but one works with RSA.importKey() and one gives me the error ""ValueError: RSA key format is not supported”.
When I read them in to python using ""key = open('pub.der', ""r"").read()”
and then print out key, the file that works prints out as:
'0\x81\x9f0\r\x06\t*\x86H\x86\xf7\r\x01\x01\x01\x05\x00\x03\x81\x8d\x000\x81\x89\x02\x81\x81\x00\xd2\xd4u\x9d\xe6\xd7\x95}\x0f\xe5\xe87_6\x05~\x06\xe3\x91\x83\xe7X\xb2>F\xd4\xe8\xda>\n\xc5\x13l\xff\xf2-\x0e\x83\x86\xaf|cG\xa3\xfdL9\x19\x89wdi\xb1\x85\xe1\xf5\xcc\xfe?IW\xc1\x10Bd\xf1\x12\xad\x8f\xe1\xb9\xc1\x08\xcf^\x9aw\x8dl`\xb2\x15\n\x95Or_%\xc7\xb7 \xe56\xca\x81\x96\x86\xfeqN\x86\x18""H\xa9\xdf\x17l\x95\xf9\xed\x8e\x9b\xa6t\x1a\x9f\x86\x8d\x92\xa9\xd2\xa5W!m\xd9\x1f\x02\x03\x01\x00\x01’
and the file that gives the error prints as:
'3081 9f30 0d06 092a 8648 86f7 0d01 0101\n0500 0381 8d00 3081 8902 8181 00d2 d475\n9de6 d795 7d0f e5e8 375f 3605 7e06 e391\n83e7 58b2 3e46 d4e8 da3e 0ac5 136c fff2\n2d0e 8386 af7c 6347 a3fd 4c39 1989 7764\n69b1 85e1 f5cc fe3f 4957 c110 4264 f112\nad8f e1b9 c108 cf5e 9a77 8d6c 60b2 150a\n954f 725f 25c7 b720 e536 ca81 9686 fe71\n4e86 1822 48a9 df17 6c95 f9ed 8e9b a674\n1a9f 868d 92a9 d2a5 5721 6dd9 1f02 0301\n0001’
I have another public key file for which I only have the corrupted/nonworking version. What is the difference between the two files, and how can I convert the version that does not work with RSA.importKey() into a version that does work with RSA.importKey()?
","","60","<rsa><public-key><pycrypto><der>","0","","0","2015-11-23 00:10:48","","3","","","","","2015-11-23 00:10:48",""
"53189657","Trailing garbage after Python decryption of JavaScript AES-GCM","I have JavaScript tied to an HTMl button, which does an AES-GCM encoding and logs the useful info to the console.
            function strToArrayBuffer(str) {
                let buf = new ArrayBuffer(str.length * 2);
                let bufView = new Uint16Array(buf);
                for (let i = 0, strLen = str.length; i < strLen; i++) {
                    bufView[i] = str.charCodeAt(i);
                }
                return buf;
            }

            function arrayBufferToString(buf) {
                return String.fromCharCode.apply(null, new Uint16Array(buf));
            }

            function arrayBufferToHex(buf) {
                return Array.from(new Uint8Array(buf)).map(b => b.toString(16).padStart(2, ""0"")).join("""");
            }

            let iv = window.crypto.getRandomValues(new Uint8Array(12));
            console.log('nonce/iv: ' + arrayBufferToHex(iv));

            let algoEncrypt = {
                name: 'AES-GCM',
                iv: iv,
                tagLength: 128
            };

            let plainText =
                ""Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer imperdiet pretium leo, et auctor velit fermentum nec. Mauris eu finibus orci."";
            console.log('Input Text: ' + plainText);

            let secretKey = null;
            window.crypto.subtle.generateKey(
                {name: 'AES-GCM', length: 256},
                true,
                ['encrypt', 'decrypt']
            ).then(function (key) {
                secretKey = key;
                return window.crypto.subtle.encrypt(algoEncrypt, key, strToArrayBuffer(plainText));
            }).then(function (cipherText) {
                console.log('Encrypted Hex:\n' + arrayBufferToHex(cipherText));
                return window.crypto.subtle.decrypt(algoEncrypt, secretKey, cipherText);
            }).then(function (newPlainText) {
                if (arrayBufferToString(newPlainText) == plainText) {
                    console.log(""decryption matches"");
                } else {
                    console.log(""decryption ERROR:"" + arrayBufferToHex(newPlainText));
                }
                return window.crypto.subtle.exportKey(""raw"", secretKey);
            }).then(function (keyData) {
                console.log('Password Hex:\n' + arrayBufferToHex(keyData));
            }).catch(function (err) {
                console.log('Error: ' + err.message);
            });

Sample Console output:
nonce/iv: b17eb886854af06d9d43d4d7

Input Text: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer imperdiet pretium leo, et auctor velit fermentum nec. Mauris eu finibus orci. 

Encrypted Hex: facdbb0b024b059d0c78a2634bd6592c04feba0ecb833eee03c7e2c8135854d8ba5bcb80cac1ce8a1c7396fc684e4aa1a44c8b30e9bc800a033ff7ca1a7542a219c42208449232aa671e6443d92c87eca16fb4c06a61d965f455822d8131c26d8bfc6fdfbb5eaae7409516653f33a2c207affdd1539e29e65e236a232b98efc3056e69526115a71837d99f2235d92f6bc64b020e160f44d7281d307ab5cc33791d37bca8423d94f21bf4eccc1717a33891381cb116bbd8dc1f2ae953d94b00f4eef0bc237a7998d99a1a46b9581c34199aeda20cf68158cce43c8492370eccec55dc0f207a495d320aa7d7d8c3bf49c50726046b02ac6e9a9ce6d10d679ff07cff3462bdda051597f0ff5a1f6fb411be3048b72c2d7fe4242783d61d4115a576fcaae05016e6c4648d835b11

decryption matches encrypt

Password Hex:
ce24825df74a15e84597a9446c4821e384661fb790281abec94eab4e5cd95b1b

I then try to decrypt using Python 2.7:
import sys                                                                                          
import binascii                                                                                     
import datetime                                                                                     
import time                                                                                         

from cryptography.hazmat.backends import default_backend                                            
from cryptography.hazmat.primitives.ciphers import (Cipher, algorithms, modes)                      
from Cryptodome.Cipher import AES

hexdata = ""facdbb0b024b059d0c78a2634bd6592c04feba0ecb833eee03c7e2c8135854d8ba5bcb80cac1ce8a1c7396fc684e4aa1a44c8b30e9bc800a033ff7ca1a7542a219c42208449232aa671e6443d92c87eca16fb4c06a61d965f455822d8131c26d8bfc6fdfbb5eaae7409516653f33a2c207affdd1539e29e65e236a232b98efc3056e69526115a71837d99f2235d92f6bc64b020e160f44d7281d307ab5cc33791d37bca8423d94f21bf4eccc1717a33891381cb116bbd8dc1f2ae953d94b00f4eef0bc237a7998d99a1a46b9581c34199aeda20cf68158cce43c8492370eccec55dc0f207a495d320aa7d7d8c3bf49c50726046b02ac6e9a9ce6d10d679ff07cff3462bdda051597f0ff5a1f6fb411be3048b72c2d7fe4242783d61d4115a576fcaae05016e6c4648d835b11""                                                                                  
noncehex = ""b17eb886854af06d9d43d4d7""                                                               
keyhex = ""ce24825df74a15e84597a9446c4821e384661fb790281abec94eab4e5cd95b1b""                         

nonce = binascii.unhexlify(noncehex)                                                                
assert(len(nonce) == 12)                                                                            

key = binascii.unhexlify(keyhex)                                                                    
assert(len(key) == 32)                                                                              

binary = binascii.unhexlify(hexdata)                                                                

cipher = Cipher(algorithms.AES(key), None, backend=default_backend())                                                                                                   
cipher.mode = modes.GCM(nonce)                                                                      
text = cipher.decryptor().update(binary)                                                            
print(text)

decryptor = AES.new(key=key, mode=AES.MODE_GCM, nonce=nonce)                                        
text = decryptor.decrypt(binary)                                                                    
print(text) 

The result is very close, but has trailing noise using two different Python decryptors: 
%> ./pydecrypt.py 
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer imperdiet pretium leo, et auctor velit fermentum nec. Mauris eu finibus orci.���7P��&���ջq�
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer imperdiet pretium leo, et auctor velit fermentum nec. Mauris eu finibus orci.���7P��&���ջq�

What am I doing wrong to cause the noise at the end? Am I missing something that is appended to the data? (The iv/nonce is 12 characters, but the extra noise is 14 characters, and the values don't seem to match, so I don't think its that.)
","As noted in this post it is the MAC tag used for verification of the block. I see it in the example code above because I am calling decrypt rather than decrypt_and_verify as shown in that post.
","59","<javascript><aes><python><pycrypto>","0","0","1","2018-11-21 01:18:15","53195699","2","1","1663987","","2018-11-07 18:36:17","2018-11-07 01:49:01",""
"42168061","Unable to cipher non english text","I use this code to encrypt string.
When I encrypt string which contains only english letters - it works fine,  but when I try to encrypt cyrillic text it throws an exception.
import base64
from Crypto.Cipher import AES
def encrypt(text):
    BLOCK_SIZE = 16
    PADDING = '{'
    pad = lambda s: s + (BLOCK_SIZE - len(s) % BLOCK_SIZE) * PADDING
    EncodeAES = lambda c, s: base64.b64encode(c.encrypt(pad(s)))
    secret = ""123456789101112A""
    iv = ""AAAABBBBCCCCDDDD""
    cipher = AES.new(key=secret, mode=AES.MODE_CBC, IV=iv)
    return EncodeAES(cipher, text)

print(encrypt('text')) # OK
print(encrypt('абвг')) # Exception

Output
b'ZVigw9c3zTbZOrGJKJe5QQ=='
Traceback (most recent call last):
  File ""/tmp/1.py"", line 14, in <module>
    print(encrypt('абвг'))
  File ""/tmp/1.py"", line 11, in encrypt
    return EncodeAES(cipher, text)
  File ""/tmp/1.py"", line 7, in <lambda>
    EncodeAES = lambda c, s: base64.b64encode(c.encrypt(pad(s)))
  File ""/usr/lib/python3.6/site-packages/Crypto/Cipher/blockalgo.py"", line 244, in encrypt
    return self._cipher.encrypt(plaintext)
ValueError: Input strings must be a multiple of 16 in length

I verified input strings using len function after padding. No matter what input string is, it's length is always multiple of 16. File is encoded in utf-8 and OS too, python 3.6.0, pycrypto==2.6.1
","","58","<python><aes><pycrypto>","0","","0","2017-02-10 20:23:48","","4","","","","","2017-02-10 20:23:48",""
"58193162","Module 'Crypto.PublicKey.RSA' has no attribute 'import_key'","I have a C# application that uses following public keys to encrypt and decrypt (using corresponding private key) successfully. I am using the same Public Key in Python to encrypt, using following code. I am getting following error:

module 'Crypto.PublicKey.RSA' has no attribute 'import_key'

I referred RSA - pycryptodome.readthedocs.io to check 'import_key'. It says extern_key (string or byte string).
Note: I have pycrypto 2.6.1  installed. Verified using conda list.
How to fix this so that Python can use the same key that was successfully used by C# application?
Python Code
import Crypto
from Crypto.PublicKey import RSA
pubkey = 'BgIAAACkAABSU0ExAAQAAAEAAQB5ad3IFUIQ+NJeJEVlHJb0BaXhPCpeP+477ql+2dsNLzpn+3f2Lm5UWZhig60rx7/5/rAlAH+emU6WwOZNxtMtFbdu9CNBUjRp9FiEmJHZLaGqqmEFDyp287k3HVCFVzxxRAEy8ftL/q6KaE3KKrHoFiMozretUXulYy5OE1yR7w=='

import base64
decodedPublicKey = base64.b64decode(pubkey)
pub_key = RSA.import_key(decodedPublicKey)
encrypted = pub_key.encrypt('hello world', None)
print(encrypted)
text = pvt_key.decrypt(encrypted)
print(text)

","Did you install it recently? We just noticed an issue with the Raspberry Pi devices we built yesterday. 
In /usr/local/lib/python3.5/dist-packages/Crypto/PublicKey folder, many of the files(including RSA.py) were empty. We just uninstalled and reinstalled pycryptodome a few minutes ago and the files are no longer empty.
","57","<python><pycrypto>","0","0","1","2019-10-02 14:55:12","","0","1","","","","2019-10-01 22:40:24",""
"39149633","Python script needs access to AES key! Looking for safe strategy?","I've written a script that clones new files from a remote server to my raspberry pi. The script automatically runs a couple of times a day and reads the login information for the server from a YAML configuration file.
For security reasons, I want to encrypt the YAML file so that nobody form outside (internet) or inside (my roommates) can read the file and steal the login information without permission. So far, I've come up with a script that uses PyCrypto for AES encryption and decryption.
I don't get how to securely hide the key (used to encrypt and decrypt) the YAML config. Can somebody recommend a good strategy?
The script needs to have access each time it is scheduled to run, in order to get the login information. Providing the key manually is thus not very handy.
","","56","<python-2.7><encryption><aes><pycrypto>","0","","0","2016-08-25 15:48:42","","2","","","","","2016-08-25 15:48:42",""
"39841368","CryptoJS to Pycrypto AES","Im trying to decrypt with Pycrypto an encrypted text with CryptoJS, and I would like to know how is generated the by default IV value from CryptoJS?An example code solving the decryption would be great.
This is the decryption code with JS:
var crypto_test = require('crypto-js'); 
var bytes = crypto_test.AES.decrypt(encrypted_text, 'test_key');

This is the equivalent Python version that Im trying to create:
BS = 32
key = 'test_key'
dkey = hashlib.sha256(key.encode()).digest()
encodedEncrypted = base64.b64decode(encrypted_text)
#block_size is 16
cipher = AES.new(dkey, AES.MODE_CBC, encodedEncrypted[:AES.block_size])
decrypted = _unpad(cipher.decrypt((encodedEncrypted[AES.block_size:])).decode('utf-8')

def _unpad(s):
    return s[:-ord(s[len(s)-1:])]

From the documentation of CryptoJS I found:

If a passphrase has been used instead of a key then It will use AES
256 by default. 
The mode is CBC.
The padding is PKCS7.

However Pycrypto by default is forcing me to use a 16 bytes IV not a 32 as the documentation from CryptoJS proposed..so Im a bit confused on the correct way to do the decryption here.. Also I saw in some documentation that CryptoJS applies to sha256 to passphrase..but still not sure about that ..
That code will not crash but will give an empty text..
","","56","<javascript><python><encryption><pycrypto><cryptojs>","0","","0","2016-10-03 22:26:03","","6","","","","","2016-10-03 22:26:03","2016-10-04 04:11:29"
"36507600","Python transfer encrypted image using CRYPTO AES","I want to know how I can encrypt and decrypt file transfer by using crypto AES encryption.
In this example I can transfer a print screen but I need to crypte sending and decrypt recieving.
Client: 
import socket
import sys
from PIL import ImageGrab
s = socket.socket()
s.connect((""10.10.10.10"",9999))
img=ImageGrab.grab().save('screen.png')
f=open (""screen.png"", ""rb"")
l = f.read(1024)
while (l):
    s.send(l)
    l = f.read(1024)
s.close()

server: 
import socket
import sys
s = socket.socket()
s.bind((""10.10.10.10"",9999))
s.listen(10)

i=1

while True:
    sc, address = s.accept()
    print address
    f = open('file_'+str(i)+"".png"",'wb') #open in binary
    i=i+1
    print(i)
    l = 1
    while(l):
        l = sc.recv(1024)
        while (l):
            f.write(l)
            l = sc.recv(1024)
        f.close()    
    sc.close()
s.close()

","","56","<python><encryption><aes><file-transfer><pycrypto>","0","","0","2016-04-11 18:38:37","","2","","3266847","","2016-04-11 18:38:37","2016-04-08 19:17:21","2016-04-09 06:31:30"
"42196378","Only Ciper is not importing , importerror but not for other modules like Random in Crypto","I have installed Crypto , using pip install pycrypto.
It got installed perfectly in CentOS. Able to see all module files under Crypto folder. /usr/lib64/python2.7/site-packages/Crypto.
in terminal, when importing Crypto. Able to do it.
But getting error for importing Ciper from Crypto with below 
from Crypto.Ciper import AES
Says below error:
Traceback (most recent call last):
  File """", line 1, in 
ImportError: No module named Ciper
But no import error for other modules in Crypto



from Crypto import Hash
from Crypto import Signature
from Crypto import Util
from Crypto import Ciper



Traceback (most recent call last):
  File """", line 1, in 
ImportError: cannot import name Ciper
See for detailed imports in my terminal
Python 2.7.5 (default, Nov  6 2016, 00:28:07)
[GCC 4.8.5 20150623 (Red Hat 4.8.5-11)] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.



import os
import Crypto
print Crypto.file



/usr/lib64/python2.7/site-packages/Crypto/init.pyc



print dir(Crypto)



['all', 'builtins', 'doc', 'file', 'name', 'package', 'path', 'revision', 'version', 'version_info']



print os.listdir(os.path.dirname(Crypto.file))



['Protocol', 'Util', 'pct_warnings.py', 'init.pyc', 'init.py', 'Signature', 'PublicKey', 'Cipher', 'Hash', 'SelfTest', 'pct_warnings.pyc', 'Random']
Any ideas how to resolve this issue ?
","That module is available as an RPM package from the EPEL repository. Uninstall what you have with pip first, then run yum install python-crypto.
","56","<python-2.7><import><centos><importerror><pycrypto>","1","0","1","2017-02-16 02:17:59","","0","","","","","2017-02-13 03:45:51",""
"31734401","Pycrypto AES blocks","Tarfile offers several modes, such as r|, to read and write a stream of blocks. The process is entirely done in tarfile.open(). Does pycrypto AES offer something similar?
I am using an implementation similar to what is described here. The requirement of pad and unpad functions, as well as the IV makes using a stream more complicated.
","","55","<python><encryption><stream><aes><pycrypto>","1","","0","2015-11-10 15:07:36","","0","","-1","","2017-05-23 12:03:56","2015-07-30 21:29:43",""
"28573156","PyCrypto RSA failing for long strings","I'm trying to use RSA with PyCrypto to encrypt/decrypt a long string. I am quite confident that my code works for short strings (to about 200 characters), but for strings longer than that, I cannot successfully decrypt.
This is what I have: 
random_generator = Random.new().read

def encrypt_RSA(message):
    key = open('public_key.der', ""r"").read()
    rsakey = RSA.importKey(key)
    encrypted = rsakey.encrypt(message, random_generator)
    return encrypted

def decrypt_RSA(package):
    key = open('private_key.der', ""r"").read() 
    rsakey = RSA.importKey(key)
    decrypted = rsakey.decrypt(package) 
    return decrypted

alphabet = 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz'
small_alphabet = 'abcdefghijklmnopqrstuvwxyz'

encrypted = encrypt_RSA(small_alphabet)
print base64.b64encode(encrypted[0])
print ""========================""
print decrypt_RSA(encrypted[0])

This works for the string small_alphabet, but not alphabet. Why is that?
I'm using PyCrypto 2.6.1, Python 2.7.6.
","","53","<python><encryption><rsa><pycrypto>","1","","0","2015-02-17 23:22:48","","1","","","","","2015-02-17 23:22:48","2015-03-02 06:32:13"
"43622458","Unable to install pycrypto, error ""TypeError: unorderable types: NoneType() >= str()""","I have MingW and I am on Windows 10 with Python 3.5.
I have done every thing guides say to do.
Do any of you know how to fix this?
","","53","<python><python-3.x><mingw><pycrypto>","0","","0","2017-04-26 01:22:55","","2","","7834724","","2017-04-26 01:22:55","2017-04-25 23:14:07",""
"58405553","Decrypt pcap RC4 encryption with pycrypto","Part of a training exercise I'm doing I need to decrypt data transmitted and saved in a pcap. 
I know the encryption is RC4 and I have the key which I know is correct
I wrote a really basic python script using pycrypto which I thought would do it but for some reason the output is still gibberish
Got the data from the pcap file by running this:
tshark -nr file.pcapng -q -z follow,tcp,ascii,5 > output
The script I wrote using pycrypto:
from Crypto.Cipher import ARC4

key = ARC4.new('my_key')
content = open('output','r')
text = content.read()
msg = key.decrypt(text)
print(msg)

Output, although different, does not seem to correctly decrypt the TCP stream. Any suggestions? Have I done anything wrong?
","","53","<python><encryption><pycrypto><tshark><rc4-cipher>","0","","0","2019-10-16 04:11:22","","6","","1749032","","2019-10-16 04:11:22","2019-10-16 03:56:29",""
"55678939","ModuleNotFoundError when creating RSA program","(Python 3.7)
A ModuleNotFoundError arises when I try to import Crypto.PublicKey:
import crypto
from crypto.PublicKey import RSA

Traceback (most recent call last):
  File ""<pyshell#10>"", line 1, in <module>
    from crypto.PublicKey import RSA
  File ""/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/crypto/PublicKey/RSA.py"", line 73, in <module>
    from Crypto.Util.py3compat import *
ModuleNotFoundError: No module named 'Crypto'

I had to import Crypto as crypto (lowercase) otherwise
Traceback (most recent call last):
  File ""<pyshell#4>"", line 1, in <module>
    import Crypto
ModuleNotFoundError: No module named 'Crypto'

So, how do I correctly import the RSA function in PublicKey in Crypto?
","","52","<python-3.x><pycrypto>","0","","0","2019-04-14 19:00:09","","4","","","","","2019-04-14 19:00:09",""
"57333697","pycrypto AES CTR error: TypeError: CTR counter function returned string not of length 16","In the following code, I've got an iv of length 16, and yet the interpreter is still spitting back a TypeError: CTR counter function returned string not of length 16
Here is the code:
from Crypto.Cipher import AES
from Crypto.Util import Counter

key = b'Jimmy ffffffffff'
IV = b'1234567891234567'

iv_int = int.from_bytes(IV, byteorder='big')

new_counter = Counter.new(16, initial_value=iv_int)
cipher = AES.new(key, AES.MODE_CTR, counter=new_counter)
output = cipher.encrypt(data)

It doesn't matter what I change my iv to, it still throws the same error. What did I miss?
I've also looked at the documentation and can't find anything wrong: https://www.dlitz.net/software/pycrypto/api/current/
","The first parameter of Counter#new is the length of the counter in bits. Therefore the value must be changed from 16 to 128.
","51","<python><encryption><pycrypto>","1","2","1","2019-08-03 08:12:42","","5","","","","","2019-08-02 21:34:57",""
"55213217","Python3 Crypto.Hash - SHA digest always starts with binary 1","I am working on a project where I am trying to create a very simple blockchain-based cryptocurrency. This is an oversimplified version of the way I try to hash a block object (obviously the fields of the Block class are much more complicated, but this is the main idea):
from Crypto.Hash import SHA
import json
from collections import OrderedDict
from random import random

class Block(object):

    def __init__(self, x, y, z):
        self.x = x
        self.y = y
        self.z = z

    def to_dict(self):
        d = OrderedDict({
            'x' : self.x,
            'y' : self.y,
            'z' : self.z
        })
        return d

    def json(self):
        return json.dumps(self.to_dict())

    def hash(self):
        return SHA.new(self.json().encode('utf8')).hexdigest()

# driver code to test hashing
while True:
    x, y, z = [random() for _ in range(3)]
    b = Block(x, y, z)
    if not bin(int(b.hash(), 16)).startswith('0b1'):
        break

The above driver program loops forever. The problem is that (regardless of the number and/or value of the fields) the hash ALWAYS starts with 0b1, which messes with the whole idea of mining difficulty and proof-of-work. More importantly, though, this is not the expected behavior of a hashing function. What do I miss?
","Python doesn't zero pad the front of binary numbers by default, so the first digit of any binary number will be one.
>>> bin(1)
'0b1'
>>> bin(2)
'0b10'
>>> bin(3)
'0b11'
>>> bin(8)
'0b1000'

If you want fixed with binary strings, use string formatting
>>> ""{:04b}"".format(1)
'0001'
>>> ""{:04b}"".format(2)
'0010'
>>> ""{:04b}"".format(8)
'1000'
>>> ""{:04b}"".format(15)
'1111'

Otherwise, just use a binary and (&) to check if the specific bit is set.
>>> bool(1 & 0b1000)
False
>>> bool(3 & 0b1000)
False
>>> bool(8 & 0b1000)
True
>>> bool(15 & 0b1000)
True

","50","<python><python-3.x><hash><pycrypto>","2","1","1","2019-03-18 00:20:41","55213239","0","","","","","2019-03-18 00:10:31",""
"54613762","Encrypt and decrypt data using and existing .pem file in python","I got a myfile.pem from somewhere that something like this:
Bag Attributes
    localKeyID: 01 00 00 00 
    Microsoft CSP Name: Microsoft Enhanced Cryptographic Provider v1.0
    friendlyName: le-Administrator-a40d2803-ae0e-5b5a-8c16-f379ea22e803
Key Attributes
    X509v3 Key Usage: 80 
-----BEGIN PRIVATE KEY-----
Something secret
-----END PRIVATE KEY-----
Bag Attributes
    localKeyID: 01 00 00 00 
    friendlyName: Myapp
subject=/C=IR/ST=THR/O=Myapp/CN=\xD8\xB4\xDA\xA9\xD9\x88\xD8\xB1\xDB\x8C \xD9\x75\xD9\x82\xD8\xAF\xD9\x85 \xE2\x80\x93 \xDB\xB1\xDB\xB0\xDB\xB0\xDB\xB0\xDB\xB0\xD9\xB064692851
issuer=/DC=ir/DC=pnaco/CN=PNA Terminal CA

-----BEGIN CERTIFICATE-----
Something binary data
-----END CERTIFICATE-----


I want to encrypt some message and send it using this file. how can I do this?
","","50","<python><encryption><openssl><pycrypto>","0","","0","2019-02-10 05:55:48","","1","","","","","2019-02-10 05:55:48",""
"53372577","Include pycrypto python library into python egg","I have written python code (using pycrypto library)to encrypt data using generate_date_key (AWS KMS API). I have created egg from that file and want to use this egg in databricks.
But after importing egg i am still getting error at line.
import Crypto.Cipher.AES
I guess pycrypto library is not getting included in egg.PFB setup.py
from setuptools import setup, find_packages
setup(
    name = ""DataKeyEncriptionLib"",
    version = ""0.1"",
    packages = find_packages(),
    install_requires=[
          'pycrypto'
    ],
    zip_safe=False,
    )

Could anyone provide some inputs here.
Thanks in Advance
","","49","<python><pycrypto>","0","","0","2018-11-19 10:25:19","","1","","","","","2018-11-19 10:25:19",""
"54432183","Mix net implementation with RSA in python","I'm trying to implement Mixnet in Python. Consider the example in the linked wiki page — A encrypts a message with A's public key and then encrypts the resulting ciphertext along with B's address with M's public key.
When I run my code which attempts to do the above, I get ValueError: Plaintext is too long. that's because I'm not appending the address B the right way and I'm exceeding the 1024 size of RSA. How do I accomplish this with RSA?
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
from Crypto import Random

def create_rsa():
    random_generator = Random.new().read
    key = RSA.generate(1024, random_generator) #generate pub and priv key

    publickey = key.publickey() # pub key export for exchange

    return key, publickey

def encrypt(message, key):
    ciphertext = PKCS1_OAEP.new(key)
    return ciphertext.encrypt(message)

message = ""chocolate milk""
prA, A = create_rsa()
prB, B = create_rsa()
prM, M = create_rsa()

# A sealing stuff
Kb = encrypt(message, B)
KbAddress = Kb + ""B""

Km = encrypt(KbAddress, M)

tl;dr How do I do  with RSA?
","","49","<python><rsa><pycrypto><pkcs#1><pycryptodome>","0","","0","2019-01-30 01:37:58","","6","","","","","2019-01-30 01:37:58",""
"32575102","python equivalent of the java RSAIO.save","I am using some java code snippets as a reference to work on a python application (2.7.9) I am making.  I know the java code parts function correctly, but my python versions are not.
I am trying to save a generated RSA key pair (2048 bit) to a file on disk.
I can generate the key pair by calling:
def generate_key_pair():
    """"""Generates a 2048 bit RSA key pair""""""
    return RSA.generate(2048)

to save them to disk in the ""required"" format is where I am having issues.  The java program does it with this statement:
RSAIO.save(rsaDirectory, keyPair);

What is the equivalent Python statement (I am using the pycrypto module)?  (If possible, please limit the answers to for cryptography to pycrypto and standard python library modules...)
Is there a sort of cheat sheet of equivalenent modules/methods between Java and Python?
EDIT:  I tried using Saving RSA keys to a file, using pycrypto as suggested, but my file ends up producing (private key example):
-----BEGIN RSA PRIVATE KEY-----
MIIEpQIBAAKCAQEA2B6XEIH24P+pA+bylZIt6KPErRFMbP5BZrTNQiyuhAMG1ku5
psob8SZQsI2ApaB3HwGaebd9KsK7Y+fdBeRiIFN37DWfyxS7o7xU4OloReNm9cdl
r92Axo2h8itQXaSlTvUhJJiv1g0rWclrsoJPKGH/RNwhV8EdoLi1ln4hw3bIOQ2H
N8Gto/YiiXujWaf5+Y2ocQNSc+TP/6AKy1RN1uh80uqQAmtN1WjW35luLrGWm0pt

<more individual lines Stack overflow wont let me paste as code>

ZnWmC5IkLbqw3VzQRCOO3aj0v51+HjtYoPF3U5VlCUTzcX3Jyt3XOoSGwEtWCsvk
1KGYv7ke+0b8wW3n6I+hwRA0Swi9fRzVuS2G/XXfGZgKDv8mksg8uAk=
-----END RSA PRIVATE KEY-----

Whereas the Java version will produce something like:
`MIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQCbo8t/mbeRYJTF80pyeU8QSDH15V>pS6AVaNWG2RxmFnx3KUm9kv/Acm9m5IFxpktfB2AE+LUhKaedk3JZP/S7Oe+45VpweOyR1bHo16QCs>d4+7ulm6zad2fzJs/fPYe0l4QFdrlj59DJNEzppdjY8pvdXL2PySj42CsTj7clJ2toHOvuxXnFwzFg>j64CFDYiXVo+FjFPi4gKEZ8Xe/5VvdrzX7TVfpXr1fpVBEP0nGD8mISoO/XO2pKYLs1hLfvoVW5/Ii>zRbShiF7cKHZgirEd7Je4JKe7oWX9HPTquaCnQGtdIHfsq7TO0Cvtami975N10m6GerVwwn9hUdEhw>XfAgMBAAECggEARFQwryBpOuXP6ufYs1EWqOtJI89BTEyYrPXqo/+q8MLebUirpuutGqJBf8j5SVAy>cOPIB+gRaLn94IYHZ66bsgMunvWrLIqCgxrQvIJCzXTgIWa6pgxLjPZiyP7k4xGdO7Hjr1QSswumS/>r4QkI3q/evuQLWP/HOCqaLgbi7A2qEj3rZhsvyqMWIy45Uv82XVMZE4Ykd5+EL6knHqtZfx1BZmjJE>0qBZjYgUVzG6lTZT23s9JOv7DdfGr4xJVoYQjcMN5Lq6U8ifEZ8RuCD77a18MU5YT6nGInBpj0vmCu>wAS/90d9Ky66lHyTi/g1NqfUDsvcCUCNoM6rZtiBY+wQKBgQDcHl7oHA5vh0g6nDgUJv0oVYD16j4f>s1Ds/x3eC0lT9UpOxxXt4plu9oRsbe+Q5GphpR96sAQf+lvvaToFnOeln+/kQR+badezplrR7OJCMf>VpmltEJwBt/gVUO9WOo+AyQ2Zyg23dBAhjU/MJXMOezJH2/xJw8A3f8JJ6iK6JpwKBgQC1ArNJ3jAz>4W/DU7zwnqtS95APYl00ntafiiMyvNkmyPeGxIAG3UMdq8Y5pse3ZWSNECBjbAN+en7z7xC+eZ4v3Y>Q/NiCpA12UEmNVW+QZRYPMSLcwhO//gT9X+HKaruv5YAVM+TF4PlhPeUubJgolaC9YpntgnZVd09UC>NBI5CQKBgQDUNzOo8+O3AuZQG2y1gSFxUX4TmNJsHaVX2F4jRR5dI4+Qg8BQqLbklCb3osXlG1K08U>14K1rOucEJAJo/7xYmSBwwI9klLNYZDblhytAYobHJLlfvTOrNIKpim405CCWOUAzlOnEhNFIh8T3P>OPAgmXngd+p/l/DIhleyazRa4QKBgQCSvBCpNfPvarXWKuDEUmviAwwGXJ/gE08635lu/QYv2cRGvK>5oYh+RQvmbLKdD9W7Qp50J27rtYdHeXxM8xYxFkxYsw+0v9al7aniZ7rb3AZI5HU1biLihcJ3v61jE>Kj7i1kMVxgCjUC74pgRzTh/1eQLAo5zqknROLnXDpoCLOQKBgQDIsLoVYLZaCkwjK29y+8UonAVjNy>5Ld+1mTIPdOObPTS4xFnOFBVl+jSk1mSmsZ71X1RRz8DNMsi+ErHQwrjjdN0UNTxAyY9wdS5aPC7pP>TJuKuDLzfGLZzhz8rqiauAuXmxKE19qTjaegIs7UFpvbDsAP88AMHkPtWK7TCKuriw==`

I have tried all sorts of different  format= statements (PEM, DER, OpenSSH) and none produce the same output.
","To get it in the format I needed, I think the best way is to simply strip out the newlines and the header/footer; so I ended up using this after all:
Saving RSA keys to a file, using pycrypto
Other helpful page:
https://www.dlitz.net/software/pycrypto/api/current/Crypto.PublicKey.RSA-module.html
","47","<java><python><python-2.7><rsa><pycrypto>","0","1","1","2015-09-15 10:31:23","32576005","2","","-1","","2017-05-23 12:25:13","2015-09-14 22:47:46","2015-09-15 02:42:06"
"56708641","No module named 'Crypto' Error facing on Python 3.7","I am using Windows 10 and Python 3.7 and facing this error from [Crypto.Cipher import AES ""ModuleNotFoundError: No module named 'Crypto'""]
Already installed this successfully:
C:\Users\Zeeeshan Abbas>pip install pycryptodomex
Collecting pycryptodomex
  Downloading https://files.pythonhosted.org/packages/2d/ec/1cd58f9e16980db055b5ab501e8833456ca0af1e3fef190e73a0c8674cc4/pycryptodomex-3.8.2-cp37-cp37m-win32.whl (10.0MB)
     |████████████████████████████████| 10.0MB 384kB/s
Installing collected packages: pycryptodomex
Successfully installed pycryptodomex-3.8.2
But still facing the error:
D:\Coursera\Python\venv\Scripts\python.exe D:/Coursera/Python/ctr.py
Traceback (most recent call last):
  File ""D:/Coursera/Python/ctr.py"", line 11, in 
    from Crypto.Cipher import AES
ModuleNotFoundError: No module named 'Crypto'
","D:\Coursera\Python\venv\ ""venv"" stands for virtual environment, so this is where you need to install pycryptodomex . Make sure you activate the virtual environment D:\Coursera\Python\venv\Scripts\activate. Then run the pip install pycryptodomex
","47","<python-3.x><pycrypto>","0","0","1","2019-06-21 19:20:36","56709315","7","","","","","2019-06-21 18:21:51",""
"50412705","How to reduce the length of a message encrypted with Hybrid encryption","I was looking for a good encryption scheme to encrypt my message and i founded that the Hybrid encryption is good for large and small messages. but i have a problem with the length of the output cipher message which is large.

if the input was ""hello"", then the length of the output message will be 586, and twice if if the message larger

here is the Encrypt function that i use:
def encrypt(username, msg):
    #get the reciever's public key
    f = open(""{}.pem"".format(username)) # a.salama.pem
    recipient_key = RSA.import_key(f.read())
    f.close()

    # Encrypt the session key with the reciever's public RSA key
    cipher_rsa = PKCS1_OAEP.new(recipient_key)

    # Encrypt the data with the AES128 session key
    session_key = get_random_bytes(16)  
    cipher_aes = AES.new(session_key, AES.MODE_EAX)
    ciphertext, tag = cipher_aes.encrypt_and_digest(msg)

    #finishing your processing
    encrypted_data = cipher_rsa.encrypt(session_key) + cipher_aes.nonce + tag +  ciphertext 
    encrypted_data = hexlify(encrypted_data).decode(""utf-8"")
    return encrypted_data

","There's a fixed number of extra bytes in the header regardless of the amount of plaintext being encrypted. That's evident from your line of code
encrypted_data = cipher_rsa.encrypt(session_key) + cipher_aes.nonce + tag +  ciphertext 

This extra data will be dominated by the RSA-encrypted session key. A more space-efficient choice would be ECIES using a well-known 256-bit elliptic curve.
However, you also have expansion of the data due to encoding. Your choice of encoding is hex encoding which doubles the amount of data. A more efficient and well-supported encoding is base64 encoding. Base64 encoding expands the data by a factor of 4/3. The most space-efficient is avoid encoding altogether and just store and transmit raw bytes. You only need to encode the data if it will transit over channel that cannot handle binary data. 
","46","<aes><rsa><pycrypto><hybrid><pycryptodome>","0","0","1","2018-05-18 16:13:12","","0","","","","","2018-05-18 13:42:51",""
"52024814","Python AES.MODE_CTR does not decrypt as expected","I am trying to rewrite a node.js decoding function in python
this is the function I am trying to rewrite
module.exports.decrypt = function (data, key, iv, hmacKey) {

iv = iv.slice(0, 16)

var decipherer = crypto.createDecipheriv('aes-128-ctr', key, iv)

var hmac

if (hmacKey) {
    hmac = crypto.createHmac('sha1', hmacKey).update(data).digest()
}

return {
    data: decipherer.update(data),
    hmac: hmac
}
}

the key parameter is generated by crypto.pbkdf2Sync function of node's standard library.
What I implemented in python is
from Crypto.Cipher import AES
from Crypto.Util import Counter

def decrypt(data, key, iv, hmac=None):
    iv = iv[:16]
    ctr = Counter.new(128)
    cipher = AES.new(key, mode=AES.MODE_CTR, IV=iv, counter=ctr)
    return cipher.decrypt(data)

I provided the python decrypt function the same same data that the js function receives.
since the data and key, iv params that the js function expects are binary buffers, I copied them to the python code as hex strings and then used binascii.unhexlify in the python code before passing them to the ecrypt python function.
so the arguments that I am providing to both functions are (hex)
data 972acf88c5d7
key 129b6e542600889a75ec7659d9dc23df
iv 31323331323331323331323331323331323331323331313233313233313233313233

The python function returns gibberish.
can anyone help?
thanks!
","","46","<python><node.js><pycrypto>","1","","0","2018-08-26 09:21:21","","0","","8181692","","2018-08-26 09:21:21","2018-08-26 09:11:49",""
"56486254","Decrypt base64 ciphertext with nodejs","I have this ciphertext:
7GfBCT3ZLyS+yZ3gmyMi6zPneB7Chuu7gitxlZbPlA47Y2hpKPhfxqkW8pr7Jygv/ew7Oqk+YG9fn+yCh6KcrKb+1UfdrdLNr1FdFxbQvhFVr76My1Mm4NYDE+a8q/FCIiTjPvukGhxlR6qiS5qfg9bl3IwpJJfetSemqLNGNSQw6LJXP15HvfZUjmuV3ezsvwsX2fOsdUbvgHI22Owp85tC8KVq79RAA58wHardPRSr4I1kjsF8kDg0jSJefoaNvf64XaiySPQCqKNBDjBQNKLs1SQvMxFzATMBNtSm/dwN8Ul8OO3WxNH0aNIOcbB786v8pYdPpYYd0im93ze0rUlC+DCRDnMS42wSSL7L0PaoHD24HKp8MTyQ/x7xRUCquKZ7P8g/MCq8dFvb86RfuDIF+I5H+T//jvwMXI3rvRoM5ajXnhEuN+ylRmJT+IqOQEVpuZ2yZdnydtbV31GP4k0MCORC7gxtcnR9TjZ/YWpTLuVTN+MA+FColvgiMzNDwWzIeHvuu45RT8M9N7aEU6SWyCnjar73ceb9q6qhIUZXnu3fS1BfY1fhZWwX3xWFRyF+aNwv5d+h2rKMb2kRCNPMsCiNR8ozunweMHA69mW4PxbuWXtARuKY4CsmquM8kAXUZTTi2SpX7Jl06EMApaqZRpw8PS2hajy5rTL8xedonCzeG5UdwKNSQIjw3c5rpL9eXpyOqAIsIxphKTGHeKR6a6yo/TSY2naiYf4rnas5ymvYd2rTJTq9M3QWAbdwwPBBBhn9znR1xUZ7+Flj2asjc+/5NgIWuHw0mbxRLFYMnsIiStN1ySjmdtjgAHvfpcgQBwa9LrnuQHFYZoFN1dnTdiuLburLmscsUXRseNXNEGavBuRK63c9+fPH6Zj20Ej3iYZV79IAxEPNzCJ/LO4RHNxWHqN/C77uheCtQ3rX7RxA+crqwXJ5r5ExazQvJTFBHi6FK4eS65TqAjVpBYZm/PAaec4TUICGw2HN3clwQj6YF4qB0k2t5TbrP1gb6Yq9XFEo0fChXWTFvyq7k32NJEsnQISQKaZwNF7zG+X7BmNjKf+dG+no7gzWjstbAWqEIU9ONgH7aNvVtvyoeH9tJIRMjekgmxiIYeClrL/btNh722suVIj4VoGMNeJ/nphbenwmP0/0fAvACPr3VpSO9MV8Z/G/WC5BrSUl5Bwlh5nj4dDvSMIl5MxToqMgAQUvNCnGLyxy5Uj1nPCKM/la6JcvpoNBJgCFZkru92RwIT0RrleVqU+368aESehoLL4MtDqNxX+nBqCHHGhdRlBs7Hk7RMNLYyCi9t9tiqvQgxZyzqU2syvXLmQvJWYXLFRUljgH4xf43eJmwEzk46niNGx79nGT/fyeRZDihAMBxAPu26K7N4C10I9s16ii4g+jMhPNXRHxxmWW29glcm4KfBscsBWnz9RRsR8wMR0SOyaN8Af2M/7C6FZXSJ7e6JaUwf8AG4a6FzGkFqnacvgMaASl4lvwpAFgFgYuebe966H4djNWPY3PHhmavUaCcjnsFRORiCfh6VhGZobyh2iwb3OCfwr0+KoBdXuQeqGFlJi0TjmXPB2OIIZXH4QqdycowJw8AS5qPwM6ZbBDIXACp3cMZDkbUbZ8dfiE+KkFbZYTmqu4I4UEka7iBf6dk7JAqFqf9VmDIOyrZb9KCCBQnANWXV8hs6lMbm10yKBZ8w5UmfKm7Qll6jsGv6zlzn8M6pKEWs1tggJaXsjKahVnq94L6EsudnL+Yrrg6tpp3j3AlbK7h60IibDDyE+0cn5meJ+tJ87Kb4Wk0jGmA9sNRaG0iz0IiCaeea4Iy/2M27EMr2pgVcikGXs4MFLNe/AWZvMPNcYQeY4prG1wS9h7khlvbdNBg3vs3vQjYYA5jvqxtCX0P3m9uPdLfpsCRK/LIOvY9U5vQP4Y8K+jE5aVphzTK0rnrrKUP09qv3z8PXAEntS+d0YHd+Jg55PwE2zkALxbRbPG9Ksm+O41Ybjq9VCQSjtis34Wk3QuT1HGx/qBpTXsuUx+EcPmrt+gV1rDgyMHbZQcgGcornWtrzxH5RxYlQrfUAew21hDRzNWJ1HQnz/9kUK/olTO41cr1ii7gzoCx7UTyw72yzpOXE0faUaX7iwUzEGRBl4cpS+XUUEvc5fArRtStfb7IlAAjFIPXfTJ80C0holP5sdh4i1Wo3vj2JGZrXg8UhVyOMjKGVuVQFRX2ix+zBWJmLlC3PV26RB4oxJGE6UOObqFbOXC/QYKp8JTbyHV1vWcVoExDM88jGSO3AOiGFx0qJnTBoaLAbqldl2vn519eLBsbksPE5al4AFem211Jkr7xsCkTN2BOJ1dH3EN3tJbBfp48ApN85L381Dz1ZHelnzzz5Y4XYm89Pys6aqazkm1/glh4SxOWVxUQ/FCG6kdzfe/Ra7Mmn31XgVY8MV8vwy4HTnvo2iw+tWuVLw5URZQDla5CnS94zvHohqAl62Tx6vHtXphewvh9agmzpqpmmi/7TPawykGCHAP8yT89fiIw+yntofcV9R2A8pUfMjyOM4vpCvlGIlWxlJHj7HAXvcd6le7iQichOFMZ8PjYtvaDDtY1m9JdclfmNpKrL/Zsr/AplV6JxubIAk8yX009TqiDUb/IA4Q1o9NH1+TZjr0r7y88eIrPJeZbVjOCFEgurPS3NFOKmJdsvqfh7GtsOnxIFdDZvHN9AN21uStvFO/NcqCsYy0IRFZxZN88muYcJAkIrj4CLzD4qm9OAYP/rcS42FRYJNNHaSjbl7b53tyX11ulWi2bTjK7o9IPeinf3rIXNoaQ42BAbP+8JLXRw59E1al2INIkt7q38Qnwekf/wOcPhFAHW2yY7AebVdSiEJyFzI0fqIrfCt734urzDb5lejT77O1K8eX7/ppKRlYUytddxqGgAdrvJxUq8sdF1aUnwS7AbqWPaUG+YA9Q66jBA==
Encrypted with this python function encrypt_tuple
from Crypto import Random
from Crypto.Cipher import AES

def encrypt_tuple(tupla, key):
    iv = Random.new().read(AES.block_size)
    cipher = AES.new(key, AES.MODE_CBC, iv)
    return base64.b64encode(iv + cipher.encrypt(pad(str(tupla))))

def pad(s):
    return s + ((16 - len(s) % 16) * '*')

I have also the decrypt function written in python:
def decrypt_tuple(ciphertext, key):
    """"""Decifratura simmetrica della tupla in modalità CBC con AES""""""
    text = base64.b64decode(ciphertext)
    iv = text[:16]
    cipher = AES.new(key, AES.MODE_CBC, iv)
    dec = cipher.decrypt(text[16:]).decode('utf-8')
    return dec

And it works fine, but I need to decrypt this ciphertext with nodejs.
The encryption key is this:
key = b'\x13\xe3`X\x06J\x0b\x04\xeb\xc4\x82\xbdV\\\x83\xb7'

I tried everything but I cannot make it work.
I followed this example but nothing...
var crypto = require('crypto');

password = 'abcabcabc1abcabcabc1abcabcabc132';
var cryptoStr = 'Q336OpFur65nt1NgGUebbgx5hmwpcH3iUEd4mXq8qVwXL91qpLSaFecgKpsVvQEiT0DOMwK3TpUksPnjbr3wKA==';

var buf = new Buffer(cryptoStr, 'base64');
var iv = buf.toString('binary', 0, 16);
var crypt = buf.toString('base64', 16);

var decipher = crypto.createDecipheriv('aes-256-cbc', password, iv);
decipher.setAutoPadding(false);
var dec = decipher.update(crypt,'base64','utf-8');
dec += decipher.final('utf-8'); 

console.log('Decrypted content: ' + dec);

EDIT
My nodejs decrypt function is this:
var buf = new Buffer(data, 'base64');
var keyBuff = new Buffer('\x13\xe3`X\x06J\x0b\x04\xeb\xc4\x82\xbdV\\\x83\xb7');
var iv = buf.toString('binary', 0, 16);
var crypt = buf.toString('base64', 16);
var decipher = crypto.createDecipheriv('aes-128-cbc', keyBuff, iv);
decipher.setAutoPadding(false);
var dec = decipher.update(crypt,'base64','utf-8');
dec += decipher.final('utf-8'); 

But it does not work... it throws this error: 
Invalid IV length

","Here what I did to solve the problem:
I took the key:
key = b'\x13\xe3`X\x06J\x0b\x04\xeb\xc4\x82\xbdV\\\x83\xb7'

And on the python shell I converted it to base64 with this command:
base64.b64encode(b'\x13\xe3`X\x06J\x0b\x04\xeb\xc4\x82\xbdV\\\x83\xb7')

The result was this:
b'E+NgWAZKCwTrxIK9VlyDtw=='

Then I copied this string without the first character ('b') and I pasted it inside my nodeJs script replacing the old key.
I also changed the code of the decrypt function, this is the new one:
function decypherData(data){
    var buf = new Buffer(data, 'base64');
    var key = new Buffer('E+NgWAZKCwTrxIK9VlyDtw==', 'base64');
    var iv = buf.slice(0, 16);
    var crypt = buf.slice(16);
    var decipher = crypto.createDecipheriv('aes-128-cbc', key, iv);
    decipher.setAutoPadding(false);
    var dec = decipher.update(crypt,'base64','utf-8');
    dec += decipher.final('utf-8'); 
    return dec;
}

As you can see I'm not using the old key anymore, instead I'm using the base64 version.
Here the output of the decryption:
""{'end': '1451717060986', 'segments': [{'start': '1451716695254', 'end': '1451717060986'}], 'manipulations': [{'start': '1451716696410', 'end': '1451716701152', 'sensor': 'NotRefrigeratedFood'}, {'start': '1451716700915', 'end': '1451716702675', 'sensor': 'WaterBottle'}, {'start': '1451716704106', 'end': '1451716704949', 'sensor': 'Pasta'}, {'start': '1451716706301', 'end': '1451716707303', 'sensor': 'NotRefrigeratedFood'}, {'start': '1451716706612', 'end': '1451716707792', 'sensor': 'Pasta'}, {'start': '1451717037742', 'end': '1451717041675', 'sensor': 'WaterBottle'}, {'start': '1451717044121', 'end': '1451717045349', 'sensor': 'WaterBottle'}, {'start': '1451717048433', 'end': '1451717049664', 'sensor': 'WaterBottle'}, {'start': '1451717051376', 'end': '1451717056824', 'sensor': 'WaterBottle'}], 'start': '1451716695254', 'type': 'Clean Up', 'events': [{'state': 'END', 'sensor': 'M1', 'time': '1451716699424'}, {'state': 'ON', 'sensor': 'R1', 'time': '1451716702389'}, {'state': 'OFF', 'sensor': 'R1', 'time': '1451716705403'}, {'state': 'ON', 'sensor': 'R2', 'time': '1451717047949'}, {'state': 'OFF', 'sensor': 'R2', 'time': '1451717052971'}]}

Thanks to @dave_thompson_085 that made me notice the aes-256-cbc problem!
","46","<node.js><pycrypto>","0","0","1","2019-06-07 10:22:20","","3","","6783371","","2019-06-07 08:28:16","2019-06-06 23:28:55",""
"57864387","Unable to build pycrypto recipe in python3 - toolchain","I am trying to package a simple Kivy app in iOS using the instruction in the site:
https://github.com/kivy/kivy-ios

My app is very simple with 1 line:
from firebase import firebase

The app can be packaged successfully in android using linux. However, I am having problem packaging it to iOS. I need to build a recipe named pycrypto but it's giving me the below error. I tried both python2 and python3. I still ended up with the same error. It seems the url link is dead (https://ftp.dlitz.net/pub/dlitz/crypto/pycrypto/pycrypto-2.6.1.tar.gz)
https://kivy.org/doc/stable/guide/packaging-ios.html

hcaos-iMac:kivy-ios hcao$ ./toolchain.py build pycrypto
[INFO    ] Building with 4 processes, where supported
[INFO    ] Want to build ['pycrypto']
[INFO    ] Loaded recipe pycrypto (depends of ['python', 'openssl'], optional are [])
[INFO    ] Loaded recipe python (depends of [u'python3'], optional are [])
[INFO    ] Loaded recipe openssl (depends of [], optional are [])
[INFO    ] Loaded recipe python3 (depends of ['hostpython3', 'libffi', 'openssl'], optional are [])
[INFO    ] Loaded recipe hostpython3 (depends of [], optional are ['openssl'])
[INFO    ] Loaded recipe libffi (depends of [], optional are [])
[INFO    ] Build order is ['libffi', 'openssl', 'hostpython3', u'python3', 'python', 'pycrypto']
[INFO    ] Recipe order is ['libffi', 'openssl', 'hostpython3', 'python3', 'pycrypto']
[INFO    ] Include dir added: {arch.arch}/ffi
[INFO    ] Include dir added: {arch.arch}/openssl
[INFO    ] Global: hostpython located at /Users/hcao/Desktop/kivyios-python3/kivy-ios/dist/hostpython3/bin/python
[INFO    ] Global: hostpgen located at /Users/hcao/Desktop/kivyios-python3/kivy-ios/dist/hostpython3/bin/pgen
[DEBUG   ] Cached result: Download libffi. Ignoring
[DEBUG   ] Cached result: Extract libffi. Ignoring
[DEBUG   ] Cached result: Build_all libffi. Ignoring
[DEBUG   ] Cached result: Download openssl. Ignoring
[DEBUG   ] Cached result: Extract openssl. Ignoring
[DEBUG   ] Cached result: Build_all openssl. Ignoring
[DEBUG   ] Cached result: Download hostpython3. Ignoring
[DEBUG   ] Cached result: Extract hostpython3. Ignoring
[DEBUG   ] Cached result: Build_all hostpython3. Ignoring
[DEBUG   ] Cached result: Download python3. Ignoring
[DEBUG   ] Cached result: Extract python3. Ignoring
[DEBUG   ] Cached result: Build_all python3. Ignoring
[INFO    ] Download pycrypto
[INFO    ] Downloading https://ftp.dlitz.net/pub/dlitz/crypto/pycrypto/pycrypto-2.6.1.tar.gz
Traceback (most recent call last):
  File ""./toolchain.py"", line 1569, in <module>
    ToolchainCL()
  File ""./toolchain.py"", line 1284, in __init__
    getattr(self, args.command)()
  File ""./toolchain.py"", line 1325, in build
    build_recipes(args.recipe, ctx)
  File ""./toolchain.py"", line 1161, in build_recipes
    recipe.execute()
  File ""/Users/hcao/Desktop/kivyios-python3/kivy-ios/toolchain.py"", line 726, in execute
    self.download()
  File ""/Users/hcao/Desktop/kivyios-python3/kivy-ios/toolchain.py"", line 84, in _cache_execution
    f(self, *args, **kwargs)
  File ""/Users/hcao/Desktop/kivyios-python3/kivy-ios/toolchain.py"", line 761, in download
    self.download_file(self.url.format(version=self.version), fn)
  File ""/Users/hcao/Desktop/kivyios-python3/kivy-ios/toolchain.py"", line 478, in download_file
    urlretrieve(url, filename, report_hook)
  File ""/Library/Python/2.7/site-packages/future/backports/urllib/request.py"", line 1731, in retrieve
    fp = self.open(url, data)
  File ""/Library/Python/2.7/site-packages/future/backports/urllib/request.py"", line 1703, in open
    raise_with_traceback(IOError('socket error', msg))
  File ""/Library/Python/2.7/site-packages/future/backports/urllib/request.py"", line 1697, in open
    return getattr(self, name)(url)
  File ""/Library/Python/2.7/site-packages/future/backports/urllib/request.py"", line 1907, in open_https
    return self._open_generic_http(self._https_connection, url, data)
  File ""/Library/Python/2.7/site-packages/future/backports/urllib/request.py"", line 1856, in _open_generic_http
    http_conn.request(""GET"", selector, headers=headers)
  File ""/Library/Python/2.7/site-packages/future/backports/http/client.py"", line 1083, in request
    self._send_request(method, url, body, headers)
  File ""/Library/Python/2.7/site-packages/future/backports/http/client.py"", line 1121, in _send_request
    self.endheaders(body)
  File ""/Library/Python/2.7/site-packages/future/backports/http/client.py"", line 1079, in endheaders
    self._send_output(message_body)
  File ""/Library/Python/2.7/site-packages/future/backports/http/client.py"", line 924, in _send_output
    self.send(msg)
  File ""/Library/Python/2.7/site-packages/future/backports/http/client.py"", line 860, in send
    self.connect()
  File ""/Library/Python/2.7/site-packages/future/backports/http/client.py"", line 1221, in connect
    self.timeout, self.source_address)
  File ""/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/socket.py"", line 575, in create_connection
    raise err
IOError: [Errno socket error] [Errno 61] Connection refused

","Answer can be found at https://github.com/kivy/kivy-ios/issues/384
Pycrypto can be built but it won't run properly. The workaround is to avoid firebase (which requires pycrypto) altogether. Use requests and json instead for simple get and post methods. 
","46","<ios><kivy><pycrypto><toolchain><recipe>","0","0","1","2019-09-22 16:27:10","58051197","0","","11809703","","2019-09-12 04:41:31","2019-09-10 05:16:09",""
"57790842","How to Have Pycrypto at Docker Properly Working?","I am using Pychromeless repo with success at AWS lambda. 
But now I need to use pycrypto dependency, but I am getting
configure: error: no acceptable C compiler found in $PATH
 
when running make docker-build 
(after placing pycrypto==2.6.1 at requirements.txt file).
There's this thread and someone said about the same problem:
 
""The gcc compiler is not in your $PATH. It means either you dont have gcc installed or it's not in your $PATH variable"".
So tried placing apt-get install build-essential at Dockerfile, but I got
/bin/sh: apt-get: command not found
Then, I tried with yum install gcc
only to get
The command '/bin/sh -c yum install gcc' returned a non-zero code: 1
Docker-lambda [info page] (https://hub.docker.com/r/lambci/lambda/) says:
This project consists of a set of Docker images for each of the supported Lambda runtimes.

There are also a set of build images that include packages like gcc-c++, git, zip and the aws-cli for compiling and deploying.

So I guess I shouldn't be needing to install gcc. Maybe the gcc compiler is not in $PATH, but I don't know what to do to fix that.
Here is the dockerfile
FROM lambci/lambda:python3.6
MAINTAINER tech@21buttons.com

USER root

ENV APP_DIR /var/task

WORKDIR $APP_DIR

COPY requirements.txt .
COPY bin ./bin
COPY lib ./lib

RUN mkdir -p $APP_DIR/lib
RUN pip3 install -r requirements.txt -t /var/task/lib

Any help on solving this?
","Well, well, well...today was a lucky day for me.
So simple: all I had to do was replace 
pycrypto==2.6.1 
by 
pycryptodome
on my requirements.txt file.
This thread says: ""Highly recommend NOT to use pycrypto. It is old and not maintained and contains many vulnerabilities. Use pycryptodome instead - it is compatible and up to date"".
And that's it! Docker builds just fine with pycryptodome.
","46","<python-3.x><docker><dockerfile><pycrypto>","0","1","1","2019-09-05 11:32:27","","10","","4591167","","2019-09-04 15:02:56","2019-09-04 14:43:38",""
"57917860","How to solve 'dynamic module does not define module export function' error in Xcode kivy-ios?","I am trying to package a python app in iOS. The app is very simple with just 1 line:
from firebase import firebase

I follow the instruction from this link:
https://github.com/kivy/kivy-ios

Firebase would need pycrypto. So I typed 
./toolchain.py build pycrypto

and it failed... So I copied and pasted 3 folders: Crypto, cryptography, cryptography-2.7.dist-info from folder /usr/local/lib/python3.7/site-packages to the build folder under Desktop/kivy-ios. Then I typed:
./toolchain.py build pycrypto

and it still failed... So instead of that, I used: 
./toolchain.py pip install pycrypto

It succeeded! I went into Xcode and tried to push it to a virtual iPhone XR. I got the following error which I have no idea how to resolve. Please help me out! Anything is greatly appreciated.
2019-09-13 01:24:40.859097-0400 kindact[56329:305598] [framework] CUIThemeStore: No theme registered with id=0
2019-09-13 01:24:41.060178-0400 kindact[56329:305598] Available orientation: KIVY_ORIENTATION=LandscapeLeft LandscapeRight Portrait PortraitUpsideDown
2019-09-13 01:24:41.060467-0400 kindact[56329:305598] Initializing python
/Users/hiencao/Library/Developer/CoreSimulator/Devices/9E046BFB-CB75-4394-BBBB-CD52178F0DEA/data/Containers/Bundle/Application/C9C66E4B-7DBA-409C-88FA-F0917B4D6681/kindact.app/kindact:1: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
2019-09-13 01:24:41.255757-0400 kindact[56329:305598] Running main.py: /Users/hiencao/Library/Developer/CoreSimulator/Devices/9E046BFB-CB75-4394-BBBB-CD52178F0DEA/data/Containers/Bundle/Application/C9C66E4B-7DBA-409C-88FA-F0917B4D6681/kindact.app/YourApp/main.pyc
Traceback (most recent call last):
  File ""<string>"", line 39, in load_module
  File ""/Users/hiencao/Desktop/2/kivy-ios/dist/root/python3/lib/python3.7/imp.py"", line 342, in load_dynamic
    return _load(spec)
  File ""<frozen importlib._bootstrap>"", line 696, in _load
  File ""<frozen importlib._bootstrap>"", line 670, in _load_unlocked
  File ""<frozen importlib._bootstrap>"", line 583, in module_from_spec
  File ""<frozen importlib._bootstrap_external>"", line 1043, in create_module
  File ""<frozen importlib._bootstrap>"", line 219, in _call_with_frames_removed
ImportError: dynamic module does not define module export function (PyInit_cryptography_hazmat_bindings__constant_time)
Traceback (most recent call last):
  File ""<string>"", line 39, in load_module
  File ""/Users/hiencao/Desktop/2/kivy-ios/dist/root/python3/lib/python3.7/imp.py"", line 342, in load_dynamic
  File ""<frozen importlib._bootstrap>"", line 696, in _load
  File ""<frozen importlib._bootstrap>"", line 670, in _load_unlocked
  File ""<frozen importlib._bootstrap>"", line 583, in module_from_spec
  File ""<frozen importlib._bootstrap_external>"", line 1043, in create_module
  File ""<frozen importlib._bootstrap>"", line 219, in _call_with_frames_removed
ImportError: dynamic module does not define module export function (PyInit_cryptography_hazmat_bindings__constant_time)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/Users/hiencao/Desktop/2/kivy-ios/kindact-ios/YourApp/main.py"", line 1, in <module>
  File ""/Users/hiencao/Library/Developer/CoreSimulator/Devices/9E046BFB-CB75-4394-BBBB-CD52178F0DEA/data/Containers/Bundle/Application/C9C66E4B-7DBA-409C-88FA-F0917B4D6681/kindact.app/lib/python3.7/site-packages/firebase/__init__.py"", line 14, in <module>
    import python_jwt as jwt
  File ""/Users/hiencao/Library/Developer/CoreSimulator/Devices/9E046BFB-CB75-4394-BBBB-CD52178F0DEA/data/Containers/Bundle/Application/C9C66E4B-7DBA-409C-88FA-F0917B4D6681/kindact.app/lib/python3.7/site-packages/python_jwt/__init__.py"", line 8, in <module>
    from jwcrypto.jws import JWS, JWSHeaderRegistry
  File ""/Users/hiencao/Library/Developer/CoreSimulator/Devices/9E046BFB-CB75-4394-BBBB-CD52178F0DEA/data/Containers/Bundle/Application/C9C66E4B-7DBA-409C-88FA-F0917B4D6681/kindact.app/lib/python3.7/site-packages/jwcrypto/jws.py"", line 8, in <module>
    from jwcrypto.jwa import JWA
  File ""/Users/hiencao/Library/Developer/CoreSimulator/Devices/9E046BFB-CB75-4394-BBBB-CD52178F0DEA/data/Containers/Bundle/Application/C9C66E4B-7DBA-409C-88FA-F0917B4D6681/kindact.app/lib/python3.7/site-packages/jwcrypto/jwa.py"", line 10, in <module>
    from cryptography.hazmat.primitives import constant_time, hashes, hmac
  File ""/Users/hiencao/Library/Developer/CoreSimulator/Devices/9E046BFB-CB75-4394-BBBB-CD52178F0DEA/data/Containers/Bundle/Application/C9C66E4B-7DBA-409C-88FA-F0917B4D6681/kindact.app/lib/python3.7/site-packages/cryptography/hazmat/primitives/constant_time.py"", line 11, in <module>
    from cryptography.hazmat.bindings._constant_time import lib
  File ""<string>"", line 43, in load_module
  File ""/Users/hiencao/Desktop/2/kivy-ios/dist/root/python3/lib/python3.7/imp.py"", line 342, in load_dynamic
ImportError: dynamic module does not define module export function (PyInit__constant_time)
2019-09-13 01:24:42.146234-0400 kindact[56329:305598] Application quit abnormally!
2019-09-13 01:24:42.165161-0400 kindact[56329:305598] Leaving


","Replace Firebase module by Requests and json modules.
","45","<ios><python-3.x><firebase><kivy><pycrypto>","0","0","1","2019-09-22 16:22:33","58051153","4","","","","","2019-09-13 05:41:41",""
"50629482","pycrypto massup when install with crypto on mac","I am trying to install crypto and pycrypto in same virtual environment.
[root@jnkslave01 tmp]# virtualenv test_pycrypto
New python executable in /root/tmp/test_pycrypto/bin/python
Installing setuptools, pip, wheel...done.
[root@jnkslave01 tmp]# source test_pycrypto/bin/activate
(test_pycrypto) [root@jnkslave01 tmp]# pip install crypto==1.4.1 pycrypto==2.6.1 
Collecting crypto==1.4.1
/root/tmp/test_pycrypto/lib/python2.6/site-packages/pip/_vendor/requests/packages/urllib3/util/ssl_.py:318: SNIMissingWarning: An HTTPS request has been made, but the SNI (Subject Name Indication) extension to TLS is not available on this platform. This may cause the server to present an incorrect TLS certificate, which can cause validation failures. You can upgrade to a newer version of Python to solve this. For more information, see https://urllib3.readthedocs.io/en/latest/security.html#snimissingwarning.
  SNIMissingWarning
/root/tmp/test_pycrypto/lib/python2.6/site-packages/pip/_vendor/requests/packages/urllib3/util/ssl_.py:122: InsecurePlatformWarning: A true SSLContext object is not available. This prevents urllib3 from configuring SSL appropriately and may cause certain SSL connections to fail. You can upgrade to a newer version of Python to solve this. For more information, see https://urllib3.readthedocs.io/en/latest/security.html#insecureplatformwarning.
  InsecurePlatformWarning
/root/tmp/test_pycrypto/lib/python2.6/site-packages/pip/_vendor/requests/packages/urllib3/util/ssl_.py:122: InsecurePlatformWarning: A true SSLContext object is not available. This prevents urllib3 from configuring SSL appropriately and may cause certain SSL connections to fail. You can upgrade to a newer version of Python to solve this. For more information, see https://urllib3.readthedocs.io/en/latest/security.html#insecureplatformwarning.
  InsecurePlatformWarning
/root/tmp/test_pycrypto/lib/python2.6/site-packages/pip/_vendor/requests/packages/urllib3/util/ssl_.py:122: InsecurePlatformWarning: A true SSLContext object is not available. This prevents urllib3 from configuring SSL appropriately and may cause certain SSL connections to fail. You can upgrade to a newer version of Python to solve this. For more information, see https://urllib3.readthedocs.io/en/latest/security.html#insecureplatformwarning.
  InsecurePlatformWarning
  Downloading https://pypi.storage.rackspace.com/packages/crypto-1.4.1-py2.py3-none-any.whl
Collecting pycrypto==2.6.1
/root/tmp/test_pycrypto/lib/python2.6/site-packages/pip/_vendor/requests/packages/urllib3/util/ssl_.py:122: InsecurePlatformWarning: A true SSLContext object is not available. This prevents urllib3 from configuring SSL appropriately and may cause certain SSL connections to fail. You can upgrade to a newer version of Python to solve this. For more information, see https://urllib3.readthedocs.io/en/latest/security.html#insecureplatformwarning.
  InsecurePlatformWarning
/root/tmp/test_pycrypto/lib/python2.6/site-packages/pip/_vendor/requests/packages/urllib3/util/ssl_.py:122: InsecurePlatformWarning: A true SSLContext object is not available. This prevents urllib3 from configuring SSL appropriately and may cause certain SSL connections to fail. You can upgrade to a newer version of Python to solve this. For more information, see https://urllib3.readthedocs.io/en/latest/security.html#insecureplatformwarning.
  InsecurePlatformWarning
Requirement already satisfied: Naked in ./test_pycrypto/lib/python2.6/site-packages (from crypto==1.4.1)
Requirement already satisfied: shellescape in ./test_pycrypto/lib/python2.6/site-packages (from crypto==1.4.1)
Requirement already satisfied: requests in ./test_pycrypto/lib/python2.6/site-packages (from Naked->crypto==1.4.1)
Requirement already satisfied: pyyaml in ./test_pycrypto/lib/python2.6/site-packages (from Naked->crypto==1.4.1)
Requirement already satisfied: chardet<3.1.0,>=3.0.2 in ./test_pycrypto/lib/python2.6/site-packages (from requests->Naked->crypto==1.4.1)
Requirement already satisfied: certifi>=2017.4.17 in ./test_pycrypto/lib/python2.6/site-packages (from requests->Naked->crypto==1.4.1)
Requirement already satisfied: urllib3<1.23,>=1.21.1 in ./test_pycrypto/lib/python2.6/site-packages (from requests->Naked->crypto==1.4.1)
Requirement already satisfied: idna<2.7,>=2.5 in ./test_pycrypto/lib/python2.6/site-packages (from requests->Naked->crypto==1.4.1)
Installing collected packages: crypto, pycrypto
Successfully installed crypto-1.4.1 pycrypto-2.6.1
(test_pycrypto) [root@jnkslave01 tmp]# python -c ""from Crypto import Random""
(test_pycrypto) [root@jnkslave01 tmp]#
(test_pycrypto) [root@jnkslave01 tmp]# cat /etc/issue
CentOS release 6.9 (Final)
Kernel \r on an \m

Its working fine in CentOS 6.9 but when I try to do that in my Mac. It gives error.
(test_pycrypto) ABCDEFG:~ myuser$ python -c ""from Crypto import Random""
Traceback (most recent call last):
  File ""<string>"", line 1, in <module>
ImportError: No module named Crypto

When I check, what is the difference between these 2 setups, I found in Mac it install Crypto in crypto directory in site-packages
On Mac
(test_pycrypto) ABCDEFG:~ myuser$ ls test_pycrypto/lib/python2.6/site-packages/crypto/
Cipher          PublicKey       Signature       __init__.pyc        decryptoapp.py      pct_warnings.py     settings.pyc
Hash            Random          Util            app.py          decryptoapp.pyc     pct_warnings.pyc
Protocol        SelfTest        __init__.py     app.pyc         library         settings.py
(test_pycrypto) ABCDEFG:~ myuser$ ls test_pycrypto/lib/python2.6/site-packages/Crypto/
Cipher          PublicKey       Signature       __init__.pyc        decryptoapp.py      pct_warnings.py     settings.pyc
Hash            Random          Util            app.py          decryptoapp.pyc     pct_warnings.pyc
Protocol        SelfTest        __init__.py     app.pyc         library         settings.py

On Mac, it somehow combine both packages and put same content in both directory, while on CentOS it has both directory with different content.
On CentOS
(test_pycrypto) [root@jnkslave01 tmp]# ls test_pycrypto/lib/python2.6/site-packages/crypto
app.py  app.pyc  decryptoapp.py  decryptoapp.pyc  __init__.py  __init__.pyc  library  settings.py  settings.pyc
(test_pycrypto) [root@jnkslave01 tmp]# ls test_pycrypto/lib/python2.6/site-packages/Crypto/
Cipher  Hash  __init__.py  __init__.pyc  pct_warnings.py  pct_warnings.pyc  Protocol  PublicKey  Random  SelfTest  Signature  Util

I ran same command on both setup, also tried with Python 3, it has same problem.
What I am doing wrong on Mac, which cause this issue ?
","The file system of Mac OS X is case insensitive, it doesn't distinguish Crypto and crypto. You cannot install both into the same virtual environment. Separate them.
","44","<python><macos><centos><pip><pycrypto>","0","1","1","2018-05-31 23:18:45","50634103","0","","","","","2018-05-31 17:09:31",""
"44243530","TypeError when creating a SHA512 hash using pyCryto","Evening All,
I am wanting to verify a a file using Public Key crypto and I cant figure out why I'm getting a Type error for the below code, note signatureLength = 512
signature = f[:signatureLength]
f = open('lib/publicKey.pem','rb')
publicKey = RSA.importKey(f.read())
hash = SHA512.new(f[signatureLength:])
verification = PKCS1_PSS.new(publicKey)

The specific error is:
  File ""C:\Users\Zach Newton\Desktop\pp\lib\files.py"", line 77, in verify_file
    hash = SHA512.new(f[signatureLength:])
TypeError: '_io.BufferedReader' object is not subscriptable

","You're reassigning the name f:
signature = f[:signatureLength]
f = open('lib/publicKey.pem','rb')
publicKey = RSA.importKey(f.read())
hash = SHA512.new(f[signatureLength:]) # <-- this isn't the same f anymore
verification = PKCS1_PSS.new(publicKey)

You should use something like this instead:
signature = f[:signatureLength]
with open('lib/publicKey.pem','rb') as pubkeyfile:
    publicKey = RSA.importKey(pubkeyfile.read())
hash = SHA512.new(signature)
verification = PKCS1_PSS.new(publicKey)

For that reason using generic variable names like f and reusing names for something completely different is discouraged.
","43","<python-3.x><pycrypto>","0","1","1","2017-05-29 14:08:35","44244515","0","","6288617","","2017-05-29 13:32:31","2017-05-29 13:19:05",""
"56733079","Encrypt data with accents using python crypto library","I am implementing DES3 in Python using Crypto library. I was doing some test when I’ve stumbled upon the next problem: 
If the plain text that I want to encrypt contains strange charactes, as accents, fails. 
For example, my code is working fine when I try to encrypt the next word: 
Text to be encrypted(multiple of 8 in length) : ""Hello Jose      ""
However, it fails if I try to encrypt the same text but containing an accent:
Text to be encrypted (multiple of 8 in length)= ""Hello José      ""
The error that I am getting is “ValueError: Input strings must be a multiple of 8 in length”.
If I check the length of the word, it is a multiple of 8. 
plaintext=""Hello Jose      ""
print("" Plain text:"" + plaintext)
print("" Plain Text length:"" + str(len(plaintext)))

Result: Plain Text length : 16
Find next a reduced example of my code: 
from Crypto.Cipher import DES3
import binascii
import base64

plaintext=""Hello Jose      ""
print("" Plain text:"" + plaintext)
print("" Plain Text length:"" + str(len(plaintext)))

#### ENCRYPTION 
key ='173JKL3D93A9CNI1G6NP9A14'
key=bytes(key, 'utf-8')
plaintext_bytes=bytes(plaintext, 'utf-8')
print("" Plain Text length:"" + str(len(plaintext_bytes)))


cipher_encrypt=DES3.new(key)
encrypted_text=cipher_encrypt.encrypt(plaintext_bytes)
print( "" Encrypted word:"" + str(encrypted_text))

#### DECRYPTION
cipher_encrypt=DES3.new(key)
decrypted_text=cipher_encrypt.decrypt(encrypted_text)
print("" Decripted text:"" + str(decrypted_text,'utf-8') + ""\n"")

Can anyone help me to understand why it is not working correctly?
","Goyo is right. The algorithm reads the plain text as a byte-string. Knowing that, the length in bytes of one character with accent is 2. See next example: 
>> a='a'
>> print(""length:"" + str(len(a.encode('utf-8'))))
length:1

>> a='á'
>> print(""length:"" + str(len(a.encode('utf-8'))))
length:2

So, firstly you have to encode the text to bytes and then calculate the length. 
What you could do is calculate the next multiple of 8 and that should be the length of the plain text. After that, you could fill out the string with whitespace to that length. 
","43","<python><encryption><pycrypto><des>","-1","1","1","2019-06-25 10:54:03","","3","","603316","","2019-06-24 11:40:04","2019-06-24 08:56:59",""
"56458092","Decrypt chacha20poly1305 over SSH using memory derived keys","I am trying to decrypt chacha20 over an SSH connection using memory derived keys. The source code I am tracing and from where I am deriving the keys is found here: https://github.com/openssh/openssh-portable
After the document: https://github.com/openssh/openssh-portable/blob/master/PROTOCOL.chacha20poly1305#L47 
which describes the usage of chacha20 in OpenSSH and how the keys are derived the key is split into two parts, from which one part is used to encrypt the length and the other for the payload.
The nonce which is used is the sequence number of the packet.
Now my question is. Which sequence number is meant here?
I am using tcpdump to get the packet information for the connection and there is a sequence number (code shown below), but it does not seem to work.
I also tried to use 1 or 0 as the sequence number but it also didn't work.
I used the sequence number as a byte array so something like b'\x00\x00\x00\x00\x00\x00\x00\x01'
Maybe someone of you sees the problem?
Thanks a lot in advance 
One Tcpdump packet:
09:42:05.231752 IP 192.168.12.29.35144 > 192.168.12.46.ssh: Flags [P.], seq 2723642976:2723643012, ack 716398578, win 452, options [nop,nop,TS val 1806461459 ecr 4294897807], length 36  
    0x0000:  4510 0058 b419 4000 4006 ecda c0a8 0c1d  
    0x0010:  c0a8 0c2e 8948 0016 a257 7e60 2ab3 5ff2  
    0x0020:  8018 01c4 99e6 0000 0101 080a 6bac 6a13  
    0x0030:  fffe f08f 724b 5259 1a86 cba9 11b8 ef0e  
    0x0040:  57f1 2236 2ca9 6751 1790 db5d 5247 7484  
    0x0050:  2438 2485 7103 1f22

Key1 and key2:
30A9C075103A628BABC8735785F075ECCD4E7E9C5BDB784B1DC0EDAB141F3B9C
3A5ADB494C9D13711EF2739ACC606150AFF32BF05C51910E1AC28460AB71998E
cipher (headers excluded):
724B52591A86CBA911B8EF0E57F122362CA967511790DB5D524774842438248571031F22
My pycrytodome code for the decryption:
key1_hex = binascii.a2b_hex(key1)
seqnr_hex = binascii.a2b_hex(seqnr)
cipher_len = ChaCha20.new(key=key1_hex, nonce=seqnr_hex)
length = cipher_len.decrypt(binascii.a2b_hex(cipher[:8]))
cipher_chacha = ChaCha20.new(key=binascii.a2b_hex(key2), 
nonce=binascii.a2b_hex(seqnr))
ciphertext = cipher_chacha.decrypt(binascii.a2b_hex(cipher[8:]))

","","43","<python><encryption><ssh><pycrypto><pycryptodome>","0","","0","2019-06-06 05:05:45","","0","1","11496630","","2019-06-06 05:05:45","2019-06-05 09:48:27",""
"55931413","Whenever I use with pycrypto it deletes the file","I found some code online that is supposed to encrypt and decrypt files, but whenever I use it, it encrypts the file then when decrypting the file, it just deletes the file when it's decrypting it
The program gives me different outputs when the text document I'm testing it on is empty or has words in it after the file is encrypted, so I know the deletion happens when the file is decrypted, I just don't know where in the code this happens.
Here's the whole program
import os
from Crypto.Cipher import AES
from Crypto.Hash import SHA256
from Crypto import Random

def encrypt(key, filename):
    chunksize = 64*1024
    outputFile = filename
    filesize = str(os.path.getsize(filename)).zfill(16)
    IV = Random.new().read(16)

    encryptor = AES.new(key, AES.MODE_CBC, IV)

    with open(filename, 'rb') as infile:
        with open(outputFile, 'wb') as outfile:
            outfile.write(filesize.encode('utf-8'))
            outfile.write(IV)

            while True:
                chunk = infile.read(chunksize)

                if len(chunk) == 0:
                    break
                elif len(chunk) % 16 != 0:
                    chunk += b' ' * (16 - (len(chunk) % 16))

                outfile.write(encryptor.encrypt(chunk))


def decrypt(key, filename):
    chunksize = 64*1024
    outputFile = filename

    with open(filename, 'rb') as infile:
        filesize = int(infile.read(16))
        IV = infile.read(16)
        decryptor = AES.new(key, AES.MODE_CBC, IV)
        with open(outputFile, 'wb') as outfile:
            while True:
                chunk = infile.read(chunksize)
                if len(chunk) == 0:
                    break
                outfile.write(decryptor.decrypt(chunk))
            outfile.truncate(filesize)


def getKey(password):
    hasher = SHA256.new(password.encode('utf-8'))
    return hasher.digest()

password = 'hello'
filename = r'C:\Users\user\Desktop\test.txt'
encrypt(getKey(password), filename)
print(""encrypted!"")
decrypt(getKey(password), filename)
print(""Derypted!."")


I would like to keep the file I'm trying to decrypt intact.
","You use the same file as input and output .. that's a bad idea:
def decrypt(key, filename):
    chunksize = 64*1024
    outputFile = filename                    << output

    with open(filename, 'rb') as infile:     << & input is the same

","42","<python><encryption><pycrypto>","0","1","1","2019-05-01 11:22:43","55935471","0","","","","","2019-05-01 03:51:27",""
"54451176","Have an error with AES key after his RSA decryption","I'm trying to realize hybrid cryptosystem with pycryptodome.
from Crypto.PublicKey import RSA
from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes
from Crypto.Random.random import getrandbits
from Crypto.Cipher import PKCS1_v1_5
from Crypto.Hash import SHA
from Crypto import Random
import base64
import hashlib
import os

def main():
    setup()
    data = b'12 43 42 46 af'
    key, data = send_data_to_dron(data)
    receive_data(key, data)

class AESCipher:
    def __init__(self, key):
        self.key = key

    def pad(self, s):
        return s + b""\0"" * (AES.block_size - len(s) % AES.block_size)

    def encrypt(self, message, key, key_size=256):
        message = self.pad(message)
        iv = Random.new().read(AES.block_size)
        cipher = AES.new(key, AES.MODE_CBC, iv)
        return iv + cipher.encrypt(message)

    def decrypt(self, ciphertext, key):
        iv = ciphertext[:AES.block_size]
        print(len(key))
        cipher = AES.new(key, AES.MODE_CBC, iv)
        plaintext = cipher.decrypt(ciphertext[AES.block_size:])
        return plaintext.rstrip(b""\0"")

def receive_data(key, data):
    private_key = RSA.import_key(open(""./keys/private1.pem"").read())
    dsize = SHA.digest_size
    sentinel = Random.new().read(15+dsize)
    cipher = PKCS1_v1_5.new(private_key)
    aes_key = cipher.decrypt(key, sentinel)
    print(""dec AES key:"", aes_key)

    cipher = AESCipher(aes_key)
    decrypted = cipher.decrypt(data, key)
    return decrypted

def send_data_to_dron(data):
    key = os.urandom(16)
    print(""gen AES key:"", key)
    print(len(key))
    cipher = AESCipher(key)
    ciphertext = cipher.encrypt(data, key)

    rsa_public1 = RSA.import_key(open(""./keys/public1.pem"").read())
    cipher = PKCS1_v1_5.new(rsa_public1)
    ecnrypted_aes_key = cipher.encrypt(key)
    return ecnrypted_aes_key, ciphertext

def setup():
    key1 = RSA.generate(2048)
    private_key1 = key1.export_key()
    fileout = open(""./keys/private1.pem"", mode=""wb+"")
    fileout.write(private_key1)
    public_key1 = key1.publickey().export_key()
    file_out = open(""./keys/public1.pem"", ""wb+"")
    file_out.write(public_key1)

    key2 = RSA.generate(2048)
    private_key2 = key2.export_key()
    fileout = open(""./keys/private2.pem"", mode=""wb+"")
    fileout.write(private_key2)
    public_key2 = key2.publickey().export_key()
    file_out = open(""./keys/public2.pem"", ""wb+"")
    file_out.write(public_key2)

    send_private(""./keys/private1.pem"", to='dron')
    send_private(""./keys/private2.pem"", to='operator')
    send_public(""./keys/public1.pem"", to='dron')
    send_public(""./keys/public2.pem"", to='operator')

def send_private(keyfile_path, to='dron'):
    pass

def send_public(keyfile_path, to='dron'):
    pass

if __name__ == '__main__':
    main()

Have such output:
gen AES key: b'A\xef\xc1\xa8\xa1\rf\xb3\xd1\x95\xe4L\xc1.\x16\xa9'<br>
16 (length of generated key)<br>
dec AES key: b'A\xef\xc1\xa8\xa1\rf\xb3\xd1\x95\xe4L\xc1.\x16\xa9'<br>
256 (lenght of decrypted key)<br>
<i>Long traceback</i><br>
ValueError: Incorrect AES key length (256 bytes)<br>

I may specialize padding for RSA encrypting, but I don't know how to do it.
","Solved by my own.
def receive_data(key, data):
    ...
    decrypted = cipher.decrypt(data, aes_key)#used variable ket instead of aes key
    ...

But i think i should leave it here for future users)
","41","<python><python-3.x><pycrypto><pycryptodome>","0","1","1","2019-01-31 02:01:26","","0","","10388629","","2019-01-31 02:01:26","2019-01-30 23:32:53",""
"58288866","TypeError: argument must be string or read-only buffer, not bytearray","I'm building a decryptor using DES ECB
from Crypto.Cipher import DES

code = 'cb9108614c943d96bedd2bae934c5aa3d5c4318f81cc81f255127292f2935bbc0a8990f36c1ffa20a0639ed8a6989bacc36bd11f6b2ecdab'
key = b'5199D19B'
code= bytearray.fromhex(code)

print(code)

ciphert = DES.new(key, DES.MODE_ECB)
code = ciphert.decrypt(code)
code = code.decode('ISO-8859-1')

print(code)

but I keep getting this error

File ""test.py"", line 17, in 
code = ciphert.decrypt(code)
File ""build/bdist.macosx-10.14-intel/egg/Crypto/Cipher/blockalgo.py"", line 295, in decrypt
TypeError: argument must be string or read-only buffer, not bytearray

Ive been working on this for hours now and can't figure out another way to store the variable. 
Any ideas?
","I think this is what you want:
>>> from Crypto.Cipher import DES
>>> code = 'cb9108614c943d96bedd2bae934c5aa3d5c4318f81cc81f255127292f2935bbc0a8990f36c1ffa20a0639ed8a6989bacc36bd11f6b2ecdab'
>>> key = b'5199D19B'
>>> ciphert = DES.new(key, DES.MODE_ECB)
>>> ciphert.decrypt(code.decode('hex'))
'Well done, you have been able to decode the message. \x00\x00\x00'

Generally when passing ciphertext to a ""decode"" function in crypto libraries it should be passed as a bytes object (as ciphertext can contain arbitrary bytes in general).  For whatever reason it just doesn't accept a bytearray object--that would have to be implemented separately.
code.decode('hex') does the same thing you wanted--it converts a string of hex digits to their actual byte values.
Update for Python 3:
On Python 3 code.decode('hex') won't work.  Instead use bytes.fromhex(code) (similarly to bytearray.fromhex but just return an immutable bytes instance).
","40","<python><pycrypto>","0","1","1","2019-10-08 18:51:52","","0","","4336567","","2019-10-08 18:51:52","2019-10-08 14:50:11",""
"51388336","Pycrytpo and mySQL problems","Hello I'm trying to store information in a mysql db. I want it to be encryped but I want to be able to get back to the plain text version from time to time. The column I'm currently working with is a varchar btw and I'm using Python3.6 and PyCrypto
To encrypt, I call pycrypto's encrypt function which returns a bytes object. I can't store that in the db, but if I change it to a string I can store it. I could store either estr or encrypted after decode, they're the same. This is what encrypted looks like before conversion to a string:
b'\x8ae""\xd5\xdd:s!*\x1b\x11!7\x16\xbel'
encrypted = encryption_suite.encrypt(plainText)
estr = ''.join(chr(x) for x in encrypted)
encrypted = encrypted.decode(""unicode_escape"") 

When I retrieve the encrypted string and try to decode it, I'm unable to get back to the original text. I get the following error ""Input strings must be a multiple of 16 in length"". Here's that code: 
db_val = get string from db 
bytes_ = db_val.encode('unicode_escape')
decrypted = decryption_suite.decrypt(bytes_)#this line results in the above error 

b'?e""\xd5\xdd:s!*\x1b\x11!7\x16\xbel'
  is what bytes_ looks like. Which is pretty similar to the value of the original encrypted string but the beginning is off.
Any ideas on how to go about resolving this?
","Don't try and convert arbitrary binary data to a Unicode string.  It simply doesn't work that way.  It's like converting arbitrary binary data to a MP3 file and then complaining that it won't play.
Do convert your arbitrary binary data to a base64 or hex-encoded string.  These encodings were designed to do exactly what you're attempting now.
","39","<python><mysql><encryption><pycrypto>","1","0","1","2018-07-17 20:09:57","","0","","","","","2018-07-17 18:44:20",""
"58363371","When trying to install pycrypto via pip i get very messy error","So I want to install pycrypto module and when i do that i get this very long and messy output:
C:\Users>pip install pycrypto
Collecting pycrypto
  Using cached https://files.pythonhosted.org/packages/60/db/645aa9af249f059cc3a368b118de33889219e0362141e75d4eaf6f80f163/pycrypto-2.6.1.tar.gz
Installing collected packages: pycrypto
  Running setup.py install for pycrypto ... \    WARNING: Subprocess output does not appear to be encoded as cp1250
    WARNING: Subprocess output does not appear to be encoded as cp1250
    WARNING: Subprocess output does not appear to be encoded as cp1250
    WARNING: Subprocess output does not appear to be encoded as cp1250
    WARNING: Subprocess output does not appear to be encoded as cp1250
    WARNING: Subprocess output does not appear to be encoded as cp1250
    WARNING: Subprocess output does not appear to be encoded as cp1250
    WARNING: Subprocess output does not appear to be encoded as cp1250
    WARNING: Subprocess output does not appear to be encoded as cp1250
    WARNING: Subprocess output does not appear to be encoded as cp1250
    WARNING: Subprocess output does not appear to be encoded as cp1250
    WARNING: Subprocess output does not appear to be encoded as cp1250
    WARNING: Subprocess output does not appear to be encoded as cp1250
    WARNING: Subprocess output does not appear to be encoded as cp1250
    WARNING: Subprocess output does not appear to be encoded as cp1250
    WARNING: Subprocess output does not appear to be encoded as cp1250
    WARNING: Subprocess output does not appear to be encoded as cp1250
    WARNING: Subprocess output does not appear to be encoded as cp1250
    WARNING: Subprocess output does not appear to be encoded as cp1250
    WARNING: Subprocess output does not appear to be encoded as cp1250
    WARNING: Subprocess output does not appear to be encoded as cp1250
    WARNING: Subprocess output does not appear to be encoded as cp1250
    WARNING: Subprocess output does not appear to be encoded as cp1250
    WARNING: Subprocess output does not appear to be encoded as cp1250
    WARNING: Subprocess output does not appear to be encoded as cp1250
error
    ERROR: Command errored out with exit status 1:
     command: 'c:\users\michałbogusz\appdata\local\programs\python\python37\python.exe' -u -c 'import sys, setuptools, tokenize; sys.argv[0] = '""'""'C:\\Users\\MICHAB~1\\AppData\\Local\\Temp\\pip-install-xx1xhv37\\pycrypto\\setup.py'""'""'; __file__='""'""'C:\\Users\\MICHAB~1\\AppData\\Local\\Temp\\pip-install-xx1xhv37\\pycrypto\\setup.py'""'""';f=getattr(tokenize, '""'""'open'""'""', open)(__file__);code=f.read().replace('""'""'\r\n'""'""', '""'""'\n'""'""');f.close();exec(compile(code, __file__, '""'""'exec'""'""'))' install --record 'C:\Users\MICHAB~1\AppData\Local\Temp\pip-record-i7ocqkto\install-record.txt' --single-version-externally-managed --compile
         cwd: C:\Users\MICHAB~1\AppData\Local\Temp\pip-install-xx1xhv37\pycrypto\
    Complete output (183 lines):
    running install
    running build
    running build_py
    creating build
    creating build\lib.win-amd64-3.7
    creating build\lib.win-amd64-3.7\Crypto
    copying lib\Crypto\pct_warnings.py -> build\lib.win-amd64-3.7\Crypto
    copying lib\Crypto\__init__.py -> build\lib.win-amd64-3.7\Crypto
    creating build\lib.win-amd64-3.7\Crypto\Hash
    copying lib\Crypto\Hash\hashalgo.py -> build\lib.win-amd64-3.7\Crypto\Hash
    copying lib\Crypto\Hash\HMAC.py -> build\lib.win-amd64-3.7\Crypto\Hash
    copying lib\Crypto\Hash\MD2.py -> build\lib.win-amd64-3.7\Crypto\Hash
    copying lib\Crypto\Hash\MD4.py -> build\lib.win-amd64-3.7\Crypto\Hash
    copying lib\Crypto\Hash\MD5.py -> build\lib.win-amd64-3.7\Crypto\Hash
    copying lib\Crypto\Hash\RIPEMD.py -> build\lib.win-amd64-3.7\Crypto\Hash
    copying lib\Crypto\Hash\SHA.py -> build\lib.win-amd64-3.7\Crypto\Hash
    copying lib\Crypto\Hash\SHA224.py -> build\lib.win-amd64-3.7\Crypto\Hash
    copying lib\Crypto\Hash\SHA256.py -> build\lib.win-amd64-3.7\Crypto\Hash
    copying lib\Crypto\Hash\SHA384.py -> build\lib.win-amd64-3.7\Crypto\Hash
    copying lib\Crypto\Hash\SHA512.py -> build\lib.win-amd64-3.7\Crypto\Hash
    copying lib\Crypto\Hash\__init__.py -> build\lib.win-amd64-3.7\Crypto\Hash
    creating build\lib.win-amd64-3.7\Crypto\Cipher
    copying lib\Crypto\Cipher\AES.py -> build\lib.win-amd64-3.7\Crypto\Cipher
    copying lib\Crypto\Cipher\ARC2.py -> build\lib.win-amd64-3.7\Crypto\Cipher
    copying lib\Crypto\Cipher\ARC4.py -> build\lib.win-amd64-3.7\Crypto\Cipher
    copying lib\Crypto\Cipher\blockalgo.py -> build\lib.win-amd64-3.7\Crypto\Cipher
    copying lib\Crypto\Cipher\Blowfish.py -> build\lib.win-amd64-3.7\Crypto\Cipher
    copying lib\Crypto\Cipher\CAST.py -> build\lib.win-amd64-3.7\Crypto\Cipher
    copying lib\Crypto\Cipher\DES.py -> build\lib.win-amd64-3.7\Crypto\Cipher
    copying lib\Crypto\Cipher\DES3.py -> build\lib.win-amd64-3.7\Crypto\Cipher
    copying lib\Crypto\Cipher\PKCS1_OAEP.py -> build\lib.win-amd64-3.7\Crypto\Cipher
    copying lib\Crypto\Cipher\PKCS1_v1_5.py -> build\lib.win-amd64-3.7\Crypto\Cipher
    copying lib\Crypto\Cipher\XOR.py -> build\lib.win-amd64-3.7\Crypto\Cipher
    copying lib\Crypto\Cipher\__init__.py -> build\lib.win-amd64-3.7\Crypto\Cipher
    creating build\lib.win-amd64-3.7\Crypto\Util
    copying lib\Crypto\Util\asn1.py -> build\lib.win-amd64-3.7\Crypto\Util
    copying lib\Crypto\Util\Counter.py -> build\lib.win-amd64-3.7\Crypto\Util
    copying lib\Crypto\Util\number.py -> build\lib.win-amd64-3.7\Crypto\Util
    copying lib\Crypto\Util\py3compat.py -> build\lib.win-amd64-3.7\Crypto\Util
    copying lib\Crypto\Util\randpool.py -> build\lib.win-amd64-3.7\Crypto\Util
    copying lib\Crypto\Util\RFC1751.py -> build\lib.win-amd64-3.7\Crypto\Util
    copying lib\Crypto\Util\winrandom.py -> build\lib.win-amd64-3.7\Crypto\Util
    copying lib\Crypto\Util\_number_new.py -> build\lib.win-amd64-3.7\Crypto\Util
    copying lib\Crypto\Util\__init__.py -> build\lib.win-amd64-3.7\Crypto\Util
    creating build\lib.win-amd64-3.7\Crypto\Random
    copying lib\Crypto\Random\random.py -> build\lib.win-amd64-3.7\Crypto\Random
    copying lib\Crypto\Random\_UserFriendlyRNG.py -> build\lib.win-amd64-3.7\Crypto\Random
    copying lib\Crypto\Random\__init__.py -> build\lib.win-amd64-3.7\Crypto\Random
    creating build\lib.win-amd64-3.7\Crypto\Random\Fortuna
    copying lib\Crypto\Random\Fortuna\FortunaAccumulator.py -> build\lib.win-amd64-3.7\Crypto\Random\Fortuna
    copying lib\Crypto\Random\Fortuna\FortunaGenerator.py -> build\lib.win-amd64-3.7\Crypto\Random\Fortuna
    copying lib\Crypto\Random\Fortuna\SHAd256.py -> build\lib.win-amd64-3.7\Crypto\Random\Fortuna
    copying lib\Crypto\Random\Fortuna\__init__.py -> build\lib.win-amd64-3.7\Crypto\Random\Fortuna
    creating build\lib.win-amd64-3.7\Crypto\Random\OSRNG
    copying lib\Crypto\Random\OSRNG\fallback.py -> build\lib.win-amd64-3.7\Crypto\Random\OSRNG
    copying lib\Crypto\Random\OSRNG\nt.py -> build\lib.win-amd64-3.7\Crypto\Random\OSRNG
    copying lib\Crypto\Random\OSRNG\posix.py -> build\lib.win-amd64-3.7\Crypto\Random\OSRNG
    copying lib\Crypto\Random\OSRNG\rng_base.py -> build\lib.win-amd64-3.7\Crypto\Random\OSRNG
    copying lib\Crypto\Random\OSRNG\__init__.py -> build\lib.win-amd64-3.7\Crypto\Random\OSRNG
    creating build\lib.win-amd64-3.7\Crypto\SelfTest
    copying lib\Crypto\SelfTest\st_common.py -> build\lib.win-amd64-3.7\Crypto\SelfTest
    copying lib\Crypto\SelfTest\__init__.py -> build\lib.win-amd64-3.7\Crypto\SelfTest
    creating build\lib.win-amd64-3.7\Crypto\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\common.py -> build\lib.win-amd64-3.7\Crypto\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_AES.py -> build\lib.win-amd64-3.7\Crypto\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_ARC2.py -> build\lib.win-amd64-3.7\Crypto\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_ARC4.py -> build\lib.win-amd64-3.7\Crypto\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_Blowfish.py -> build\lib.win-amd64-3.7\Crypto\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_CAST.py -> build\lib.win-amd64-3.7\Crypto\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_DES.py -> build\lib.win-amd64-3.7\Crypto\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_DES3.py -> build\lib.win-amd64-3.7\Crypto\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_pkcs1_15.py -> build\lib.win-amd64-3.7\Crypto\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_pkcs1_oaep.py -> build\lib.win-amd64-3.7\Crypto\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\test_XOR.py -> build\lib.win-amd64-3.7\Crypto\SelfTest\Cipher
    copying lib\Crypto\SelfTest\Cipher\__init__.py -> build\lib.win-amd64-3.7\Crypto\SelfTest\Cipher
    creating build\lib.win-amd64-3.7\Crypto\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\common.py -> build\lib.win-amd64-3.7\Crypto\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_HMAC.py -> build\lib.win-amd64-3.7\Crypto\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_MD2.py -> build\lib.win-amd64-3.7\Crypto\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_MD4.py -> build\lib.win-amd64-3.7\Crypto\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_MD5.py -> build\lib.win-amd64-3.7\Crypto\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_RIPEMD.py -> build\lib.win-amd64-3.7\Crypto\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_SHA.py -> build\lib.win-amd64-3.7\Crypto\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_SHA224.py -> build\lib.win-amd64-3.7\Crypto\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_SHA256.py -> build\lib.win-amd64-3.7\Crypto\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_SHA384.py -> build\lib.win-amd64-3.7\Crypto\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\test_SHA512.py -> build\lib.win-amd64-3.7\Crypto\SelfTest\Hash
    copying lib\Crypto\SelfTest\Hash\__init__.py -> build\lib.win-amd64-3.7\Crypto\SelfTest\Hash
    creating build\lib.win-amd64-3.7\Crypto\SelfTest\Protocol
    copying lib\Crypto\SelfTest\Protocol\test_AllOrNothing.py -> build\lib.win-amd64-3.7\Crypto\SelfTest\Protocol
    copying lib\Crypto\SelfTest\Protocol\test_chaffing.py -> build\lib.win-amd64-3.7\Crypto\SelfTest\Protocol
    copying lib\Crypto\SelfTest\Protocol\test_KDF.py -> build\lib.win-amd64-3.7\Crypto\SelfTest\Protocol
    copying lib\Crypto\SelfTest\Protocol\test_rfc1751.py -> build\lib.win-amd64-3.7\Crypto\SelfTest\Protocol
    copying lib\Crypto\SelfTest\Protocol\__init__.py -> build\lib.win-amd64-3.7\Crypto\SelfTest\Protocol
    creating build\lib.win-amd64-3.7\Crypto\SelfTest\PublicKey
    copying lib\Crypto\SelfTest\PublicKey\test_DSA.py -> build\lib.win-amd64-3.7\Crypto\SelfTest\PublicKey
    copying lib\Crypto\SelfTest\PublicKey\test_ElGamal.py -> build\lib.win-amd64-3.7\Crypto\SelfTest\PublicKey
    copying lib\Crypto\SelfTest\PublicKey\test_importKey.py -> build\lib.win-amd64-3.7\Crypto\SelfTest\PublicKey
    copying lib\Crypto\SelfTest\PublicKey\test_RSA.py -> build\lib.win-amd64-3.7\Crypto\SelfTest\PublicKey
    copying lib\Crypto\SelfTest\PublicKey\__init__.py -> build\lib.win-amd64-3.7\Crypto\SelfTest\PublicKey
    creating build\lib.win-amd64-3.7\Crypto\SelfTest\Random
    copying lib\Crypto\SelfTest\Random\test_random.py -> build\lib.win-amd64-3.7\Crypto\SelfTest\Random
    copying lib\Crypto\SelfTest\Random\test_rpoolcompat.py -> build\lib.win-amd64-3.7\Crypto\SelfTest\Random
    copying lib\Crypto\SelfTest\Random\test__UserFriendlyRNG.py -> build\lib.win-amd64-3.7\Crypto\SelfTest\Random
    copying lib\Crypto\SelfTest\Random\__init__.py -> build\lib.win-amd64-3.7\Crypto\SelfTest\Random
    creating build\lib.win-amd64-3.7\Crypto\SelfTest\Random\Fortuna
    copying lib\Crypto\SelfTest\Random\Fortuna\test_FortunaAccumulator.py -> build\lib.win-amd64-3.7\Crypto\SelfTest\Random\Fortuna
    copying lib\Crypto\SelfTest\Random\Fortuna\test_FortunaGenerator.py -> build\lib.win-amd64-3.7\Crypto\SelfTest\Random\Fortuna
    copying lib\Crypto\SelfTest\Random\Fortuna\test_SHAd256.py -> build\lib.win-amd64-3.7\Crypto\SelfTest\Random\Fortuna
    copying lib\Crypto\SelfTest\Random\Fortuna\__init__.py -> build\lib.win-amd64-3.7\Crypto\SelfTest\Random\Fortuna
    creating build\lib.win-amd64-3.7\Crypto\SelfTest\Random\OSRNG
    copying lib\Crypto\SelfTest\Random\OSRNG\test_fallback.py -> build\lib.win-amd64-3.7\Crypto\SelfTest\Random\OSRNG
    copying lib\Crypto\SelfTest\Random\OSRNG\test_generic.py -> build\lib.win-amd64-3.7\Crypto\SelfTest\Random\OSRNG
    copying lib\Crypto\SelfTest\Random\OSRNG\test_nt.py -> build\lib.win-amd64-3.7\Crypto\SelfTest\Random\OSRNG
    copying lib\Crypto\SelfTest\Random\OSRNG\test_posix.py -> build\lib.win-amd64-3.7\Crypto\SelfTest\Random\OSRNG
    copying lib\Crypto\SelfTest\Random\OSRNG\test_winrandom.py -> build\lib.win-amd64-3.7\Crypto\SelfTest\Random\OSRNG
    copying lib\Crypto\SelfTest\Random\OSRNG\__init__.py -> build\lib.win-amd64-3.7\Crypto\SelfTest\Random\OSRNG
    creating build\lib.win-amd64-3.7\Crypto\SelfTest\Util
    copying lib\Crypto\SelfTest\Util\test_asn1.py -> build\lib.win-amd64-3.7\Crypto\SelfTest\Util
    copying lib\Crypto\SelfTest\Util\test_Counter.py -> build\lib.win-amd64-3.7\Crypto\SelfTest\Util
    copying lib\Crypto\SelfTest\Util\test_number.py -> build\lib.win-amd64-3.7\Crypto\SelfTest\Util
    copying lib\Crypto\SelfTest\Util\test_winrandom.py -> build\lib.win-amd64-3.7\Crypto\SelfTest\Util
    copying lib\Crypto\SelfTest\Util\__init__.py -> build\lib.win-amd64-3.7\Crypto\SelfTest\Util
    creating build\lib.win-amd64-3.7\Crypto\SelfTest\Signature
    copying lib\Crypto\SelfTest\Signature\test_pkcs1_15.py -> build\lib.win-amd64-3.7\Crypto\SelfTest\Signature
    copying lib\Crypto\SelfTest\Signature\test_pkcs1_pss.py -> build\lib.win-amd64-3.7\Crypto\SelfTest\Signature
    copying lib\Crypto\SelfTest\Signature\__init__.py -> build\lib.win-amd64-3.7\Crypto\SelfTest\Signature
    creating build\lib.win-amd64-3.7\Crypto\Protocol
    copying lib\Crypto\Protocol\AllOrNothing.py -> build\lib.win-amd64-3.7\Crypto\Protocol
    copying lib\Crypto\Protocol\Chaffing.py -> build\lib.win-amd64-3.7\Crypto\Protocol
    copying lib\Crypto\Protocol\KDF.py -> build\lib.win-amd64-3.7\Crypto\Protocol
    copying lib\Crypto\Protocol\__init__.py -> build\lib.win-amd64-3.7\Crypto\Protocol
    creating build\lib.win-amd64-3.7\Crypto\PublicKey
    copying lib\Crypto\PublicKey\DSA.py -> build\lib.win-amd64-3.7\Crypto\PublicKey
    copying lib\Crypto\PublicKey\ElGamal.py -> build\lib.win-amd64-3.7\Crypto\PublicKey
    copying lib\Crypto\PublicKey\pubkey.py -> build\lib.win-amd64-3.7\Crypto\PublicKey
    copying lib\Crypto\PublicKey\RSA.py -> build\lib.win-amd64-3.7\Crypto\PublicKey
    copying lib\Crypto\PublicKey\_DSA.py -> build\lib.win-amd64-3.7\Crypto\PublicKey
    copying lib\Crypto\PublicKey\_RSA.py -> build\lib.win-amd64-3.7\Crypto\PublicKey
    copying lib\Crypto\PublicKey\_slowmath.py -> build\lib.win-amd64-3.7\Crypto\PublicKey
    copying lib\Crypto\PublicKey\__init__.py -> build\lib.win-amd64-3.7\Crypto\PublicKey
    creating build\lib.win-amd64-3.7\Crypto\Signature
    copying lib\Crypto\Signature\PKCS1_PSS.py -> build\lib.win-amd64-3.7\Crypto\Signature
    copying lib\Crypto\Signature\PKCS1_v1_5.py -> build\lib.win-amd64-3.7\Crypto\Signature
    copying lib\Crypto\Signature\__init__.py -> build\lib.win-amd64-3.7\Crypto\Signature
    Skipping optional fixer: buffer
    Skipping optional fixer: idioms
    Skipping optional fixer: set_literal
    Skipping optional fixer: ws_comma
    running build_ext
    warning: GMP or MPIR library not found; Not building Crypto.PublicKey._fastmath.
    building 'Crypto.Random.OSRNG.winrandom' extension
    creating build\temp.win-amd64-3.7
    creating build\temp.win-amd64-3.7\Release
    creating build\temp.win-amd64-3.7\Release\src
    C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\bin\HostX86\x64\cl.exe /c /nologo /Ox /W3 /GL /DNDEBUG /MT -Isrc/ -Isrc/inc-msvc/ -Ic:\users\michałbogusz\appdata\local\programs\python\python37\include -Ic:\users\michałbogusz\appdata\local\programs\python\python37\include ""-IC:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\ATLMFC\include"" ""-IC:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include"" ""-IC:\Program Files (x86)\Windows Kits\10\include\10.0.18362.0\ucrt"" ""-IC:\Program Files (x86)\Windows Kits\10\include\10.0.18362.0\shared"" ""-IC:\Program Files (x86)\Windows Kits\10\include\10.0.18362.0\um"" ""-IC:\Program Files (x86)\Windows Kits\10\include\10.0.18362.0\winrt"" ""-IC:\Program Files (x86)\Windows Kits\10\include\10.0.18362.0\cppwinrt"" /Tcsrc/winrand.c /Fobuild\temp.win-amd64-3.7\Release\src/winrand.obj
    winrand.c
    C:\Program Files (x86)\Windows Kits\10\include\10.0.18362.0\ucrt\inttypes.h(27): error C2061: b\x88Ąd sk\x88adniowy: identyfikator ""intmax_t""
    C:\Program Files (x86)\Windows Kits\10\include\10.0.18362.0\ucrt\inttypes.h(28): error C2061: b\x88Ąd sk\x88adniowy: identyfikator ""rem""
    C:\Program Files (x86)\Windows Kits\10\include\10.0.18362.0\ucrt\inttypes.h(28): error C2059: b\x88Ąd sk\x88adniowy: "";""
    C:\Program Files (x86)\Windows Kits\10\include\10.0.18362.0\ucrt\inttypes.h(29): error C2059: b\x88Ąd sk\x88adniowy: ""}""
    C:\Program Files (x86)\Windows Kits\10\include\10.0.18362.0\ucrt\inttypes.h(31): error C2061: b\x88Ąd sk\x88adniowy: identyfikator ""imaxdiv_t""
    C:\Program Files (x86)\Windows Kits\10\include\10.0.18362.0\ucrt\inttypes.h(31): error C2059: b\x88Ąd sk\x88adniowy: "";""
    C:\Program Files (x86)\Windows Kits\10\include\10.0.18362.0\ucrt\inttypes.h(41): error C2143: b\x88Ąd sk\x88adniowy: brakuje ""{"" przed ""__cdecl""
    C:\Program Files (x86)\Windows Kits\10\include\10.0.18362.0\ucrt\inttypes.h(42): error C2146: b\x88Ąd sk\x88adniowy: brakuje "")"" przed identyfikatorem ""_Number""
    C:\Program Files (x86)\Windows Kits\10\include\10.0.18362.0\ucrt\inttypes.h(42): error C2061: b\x88Ąd sk\x88adniowy: identyfikator ""_Number""
    C:\Program Files (x86)\Windows Kits\10\include\10.0.18362.0\ucrt\inttypes.h(42): error C2059: b\x88Ąd sk\x88adniowy: "";""
    C:\Program Files (x86)\Windows Kits\10\include\10.0.18362.0\ucrt\inttypes.h(43): error C2059: b\x88Ąd sk\x88adniowy: "")""
    C:\Program Files (x86)\Windows Kits\10\include\10.0.18362.0\ucrt\inttypes.h(46): error C2143: b\x88Ąd sk\x88adniowy: brakuje ""{"" przed ""__cdecl""
    C:\Program Files (x86)\Windows Kits\10\include\10.0.18362.0\ucrt\inttypes.h(47): error C2146: b\x88Ąd sk\x88adniowy: brakuje "")"" przed identyfikatorem ""_Numerator""
    C:\Program Files (x86)\Windows Kits\10\include\10.0.18362.0\ucrt\inttypes.h(47): error C2061: b\x88Ąd sk\x88adniowy: identyfikator ""_Numerator""
    C:\Program Files (x86)\Windows Kits\10\include\10.0.18362.0\ucrt\inttypes.h(47): error C2059: b\x88Ąd sk\x88adniowy: "";""
    C:\Program Files (x86)\Windows Kits\10\include\10.0.18362.0\ucrt\inttypes.h(47): error C2059: b\x88Ąd sk\x88adniowy: "",""
    C:\Program Files (x86)\Windows Kits\10\include\10.0.18362.0\ucrt\inttypes.h(49): error C2059: b\x88Ąd sk\x88adniowy: "")""
    C:\Program Files (x86)\Windows Kits\10\include\10.0.18362.0\ucrt\inttypes.h(51): error C2143: b\x88Ąd sk\x88adniowy: brakuje ""{"" przed ""__cdecl""
    C:\Program Files (x86)\Windows Kits\10\include\10.0.18362.0\ucrt\inttypes.h(57): error C2143: b\x88Ąd sk\x88adniowy: brakuje ""{"" przed ""__cdecl""
    C:\Program Files (x86)\Windows Kits\10\include\10.0.18362.0\ucrt\inttypes.h(64): error C2143: b\x88Ąd sk\x88adniowy: brakuje ""{"" przed ""__cdecl""
    C:\Program Files (x86)\Windows Kits\10\include\10.0.18362.0\ucrt\inttypes.h(70): error C2143: b\x88Ąd sk\x88adniowy: brakuje ""{"" przed ""__cdecl""
    C:\Program Files (x86)\Windows Kits\10\include\10.0.18362.0\ucrt\inttypes.h(77): error C2143: b\x88Ąd sk\x88adniowy: brakuje ""{"" przed ""__cdecl""
    C:\Program Files (x86)\Windows Kits\10\include\10.0.18362.0\ucrt\inttypes.h(83): error C2143: b\x88Ąd sk\x88adniowy: brakuje ""{"" przed ""__cdecl""
    C:\Program Files (x86)\Windows Kits\10\include\10.0.18362.0\ucrt\inttypes.h(90): error C2143: b\x88Ąd sk\x88adniowy: brakuje ""{"" przed ""__cdecl""
    C:\Program Files (x86)\Windows Kits\10\include\10.0.18362.0\ucrt\inttypes.h(96): error C2143: b\x88Ąd sk\x88adniowy: brakuje ""{"" przed ""__cdecl""
    error: command 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.23.28105\\bin\\HostX86\\x64\\cl.exe' failed with exit status 2
    ----------------------------------------
ERROR: Command errored out with exit status 1: 'c:\users\michałbogusz\appdata\local\programs\python\python37\python.exe' -u -c 'import sys, setuptools, tokenize; sys.argv[0] = '""'""'C:\\Users\\MICHAB~1\\AppData\\Local\\Temp\\pip-install-xx1xhv37\\pycrypto\\setup.py'""'""'; __file__='""'""'C:\\Users\\MICHAB~1\\AppData\\Local\\Temp\\pip-install-xx1xhv37\\pycrypto\\setup.py'""'""';f=getattr(tokenize, '""'""'open'""'""', open)(__file__);code=f.read().replace('""'""'\r\n'""'""', '""'""'\n'""'""');f.close();exec(compile(code, __file__, '""'""'exec'""'""'))' install --record 'C:\Users\MICHAB~1\AppData\Local\Temp\pip-record-i7ocqkto\install-record.txt' --single-version-externally-managed --compile Check the logs for full command output.

I can't get any usefull information from that log. What can I do to install that module and prevent from happening again. 
Also I get the same error when trying to install pycrypto using pyCharm. But I don't get any errors with others modules.
","","39","<python><pip><pycrypto>","1","","0","2019-10-13 12:01:49","","0","","","","","2019-10-13 12:01:49",""
"49996738","AES python encryption and Fernet Encryption problem","I run into trouble when making a text encryption program in python
I use both AES then I also use FERNET
my code is:
from cryptography.fernet import Fernet
key = Fernet.generate_key()
f = Fernet(key)
token = f.encrypt(b""this is my text"")
print(token)

the problem is that
I want the text ""this is my text""
is came from the use
but I wasn't able to solve this because of the letter b need 
any fix with this same in AES there is a b I can't solve how to make it from user input
","","39","<python><encryption><pycrypto>","0","","0","2018-12-14 15:02:10","","5","","1033581","","2018-12-14 15:02:10","2018-04-24 08:21:25","2018-04-24 08:24:09"
"55246839","Generating RSA and writing to file","why do i get exception in this code:
I get output: 

[*] Error creating your key
[*] Error creating your key

import os, hashlib
from Crypto.Cipher import AES
from Crypto.PublicKey import RSA

raw_key = RSA.generate(2048)
private_key = raw_key.exportKey('PEM')
try:
with open('master_private.pem', 'w+') as keyfile:
    keyfile.write(private_key)
    keyfile.close()
print (""[*] Successfully created your MASTER RSA private key"")
except:
print (""[*] Error creating your key"")

make_public = raw_key.publickey()
public_key = make_public.exportKey('PEM')
try:
with open(""master_public.pem"", ""w+"") as keyfile:
    keyfile.write(public_key)
    keyfile.close()
print (""[*] Successfully created your MASTER RSA public key"")
except:
print (""[*] Error creating your key"")

File is created successfully but it is not filled with anything. I am just starting Python.
","you should catch exeception and show to know the problem, but i think your problem is the write method, private_key its bytes but you must be pass a str to write method them you can try:
   keyfile.write(private_key.decode())

other problem could be your permission permissions, mabe not have permission to create a file, try catching the excaption and printing to know what happen
try:
    with open('master_private.pem', 'w+') as keyfile:
    keyfile.write(private_key)
    keyfile.close()
    print (""[*] Successfully created your MASTER RSA private key"")
except Exception as e:
    print (""[*] Error creating your key"", e)

also check your syntax why that code is not well tried
","37","<python><rsa><pycrypto><hashlib>","0","1","1","2019-03-19 19:28:11","55247070","3","","4234801","","2019-03-19 19:28:11","2019-03-19 17:29:36",""
"56721544","Loading RFC4716 SSH keys with Python","I'm trying to open key in SSH2 format - beginning with:
-----BEGIN OPENSSH PRIVATE KEY-----

With pycryptodome. It dosen't work.
>>> from Crypto.PublicKey import RSA
>>> k = open('bad').read()
>>> RSA.import_key(k)
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
  File ""/home/maciekw/dev/lamamind/aws-key-managemnt/venv/lib/python3.7/site-packages/Crypto/PublicKey/RSA.py"", line 736, in import_key
    return _import_keyDER(der, passphrase)
  File ""/home/maciekw/dev/lamamind/aws-key-managemnt/venv/lib/python3.7/site-packages/Crypto/PublicKey/RSA.py"", line 679, in _import_keyDER
    raise ValueError(""RSA key format is not supported"")
ValueError: RSA key format is not supported

Any other library which can do it? I need it to convert the key to DER format and compute a fingerprint in EC2's manner.
","","37","<python><ssh><pycrypto><pycryptodome>","0","","0","2019-06-23 06:24:11","","1","","","","","2019-06-23 06:24:11",""
"55101304","Crypto is not support python 3.x?","when I use python3.x , run code:
    with open('rsa_public_key.pem') as f:
    key = f.read()
    rsakey = RSA.importKey(key)
    cipher = Cipher_pkcs1_v1_5.new(rsakey)
    cipher_text = base64.b64encode(cipher.encrypt(aes_key))
    str1 = cipher_text

it will raise an error:
  File ""de_test.py"", line 81, in get_login_data_inputPostString
cipher_text = base64.b64encode(cipher.encrypt(aes_key))
File ""/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/Crypto/Cipher/PKCS1_v1_5.py"", line 137, in encrypt
em = b('\x00\x02') + ps + bchr(0x00) + message
TypeError: can't concat str to bytes

But when I use python 2.6 , it will pass.
so crypto is not support python 3.x? 
","Without seeing the aes_key, it looks like you're trying to pass a str object where you should be passing a bytes object to encrypt().
","37","<python-3.x><pycrypto>","0","1","1","2019-03-13 03:36:09","55133979","0","","","","","2019-03-11 11:54:05",""
"58706808","How to encrypt in javascript and decrypt in python?","I am trying to encrypt in javascript using cryptoJS and decrypt in python but some how I am unable to get this working.Here is my code :
//encrypting in javascript using cryptojs
var message = ""praveen"";
var key = 'This is a key123';
var iv = 'This is an IV456';

var encrypted = CryptoJS.AES.encrypt(message, key, {
  iv: CryptoJS.enc.Utf8.parse(iv),
  mode: CryptoJS.mode.CFB,
  padding: CryptoJS.pad.ZeroPadding
});

console.log(encrypted.ciphertext.toString()); // sending this over wire

#decrypting in python

BLOCK_SIZE = 16
SEGMENT_SIZE = 128

def aes_decrypt(plaintext):
    key = 'This is a key123'
    iv = 'This is an IV456' 
    aes_mode = AES.MODE_CFB
    obj = AES.new(key, aes_mode, iv)
    ciphertext = obj.decrypt(plaintext)
    ciphertext = _unpad_string(ciphertext)
    return ciphertext



","","36","<javascript><python><cryptojs><pycrypto>","0","","0","2019-11-05 08:06:13","","3","","3082296","","2019-11-05 08:06:13","2019-11-05 07:55:13",""
"58690904","How to decrypt password protected & AES256 encrypted .zip file in python","How to extract CSV's with same schema inside a zip file. Zip file is password protected and AES256 encryption was used.
I have tried the following 
from zipfile import ZipFile     
password = 'abcd'
def extract_zip(input_zip):
    input_zip = ZipFile(input_zip)
    return {name: input_zip.read(name, pwd= password.encode('cp850','replace')) for name in input_zip.namelist()}

but it gives an error of ""bad password for file"". Whereas I can able to extract the file manually with the same password. 
","","35","<python><encryption><aes><pycrypto>","0","","0","2019-11-04 10:00:49","","0","","6143870","","2019-11-04 10:00:49","2019-11-04 09:54:56",""
"57577352","CBC DES with pycrypto","I'm trying to better understand how to work with the crypto libraries in Python and I'm stuck on what seems to be an incredibly simple DES encrypt/decrypt using CBC
from Crypto.Cipher import DES
obj=DES.new('abcdefgh', DES.MODE_CBC, '12345678')
plain='hellohello'
ciph=obj.encrypt(plain + ""XXXXXX"")
print(ciph)
print(obj.decrypt(ciph))

While using ECB, the above works easily, but with CBC, the output scrambles the first 8 char block.
The output here is:
b'{\x03\x1ca\xe3e\xa2\xd4<DEh\x10 \xf63'
b'e\x13\x1a0J~\xa4gloXXXXXX'

I don't see this in the documentation for pycrypto, but I admit, I've not pored over it exhaustively.
Why does the first block get scrambled like this?
","I think I see the problem.... this also happens with AES CBC.  The object maintains the state of the CBC feedback and would use it instead of the IV for the first block.  It would be set to the last value of the encryption operation.  
Subsequent blocks are XORed with the ciphertext so come out clear, meaning only the first block is scrambled.
Creating a new object fixes it:
>>> obj=DES.new('abcdefgh', DES.MODE_CBC, '12345678')
>>> obj.decrypt(ciph)
b'hellohelloXXXXXX'

","34","<python><pycrypto>","1","1","1","2019-08-28 11:46:49","","0","","","","","2019-08-20 15:49:47",""
"56323045","Get the counter value after decrypt finished","I am trying to decrypt AES-CTR in SSH using the keys generated by the openssh/openssh-portable library. I extracted the keys successfully from memory. Now, after some printfs and research I found out that it seems like the initial counter is incremented for every encrypted packet, which means that a successor packet(not byte) has a different Counter value as the pre-packet. 
For my decryption I want to decrypt packet by packet, so now my question is:

Can I somehow get the ""end"" counter of the AES counter in the pycryptodome, so that I can use the ""end"" counter as my new initial counter for the decryption? 

My pycrypo line looks like this:  
aes = AES.new(key_hex, AES.MODE_CTR, initial_value=iv_hex, nonce=b'')  

Some links:   

Openssh aes-ctr encryption: https://github.com/openssh/openssh-portable/blob/90e51d672711c19a36573be1785caf35019ae7a8/cipher-aesctr.c
pycryptodome aes-ctr: https://pycryptodome.readthedocs.io/en/latest/src/util/util.html

","","34","<encryption><ssh><pycrypto><pycryptodome>","0","","0","2019-05-27 23:52:25","","4","1","608639","","2019-05-27 23:52:25","2019-05-27 09:14:54",""
"57199560","Pyinstaller doesn't find crypto. (even in hidden import)","I word with windows 10, python 3.7. (i am also a linux user and to be honest i don't try this with fedora should i try ?)
I use the lastest version of pyinstaller.
When i execute the .exe ""ModuleNotFoundError: No module named 'Crypto'""
I double check, Crypto is installed. 
(I don't need comment like : don't use crypto because it is not safe)
So, since yesterday, l search online.
At the begining, i didn',t know for the hidden import. So i add it to the in the .spec.
But the error still come up.
Then i try to add the hidden import in command and obviously same error.
I read some other post, and i don't really understand the hook.py stuff. In the github projectof pyinstaller, i find a hook folder. And i don't have it on my computer. Should i have them ? 
But soemthing weird came up, i have a file in dist\prepare\libcrypto-1_1.dll
And if this file is really about crypto why the .exe don't use it ? 
I try with --onefile and --onefolder doesn't change anything.
if you need something, let me know, i will edit the post.
Thank you for your help, and sorry if the question may sound like stupid. 
And sorry for my english ^^
","I find the reason, i am a noob
I make a copy of my python direcotry in C:/ and pyinstaller don't find it.^^(because i need it for my IDE)
My bad ^^
","34","<python><pyinstaller><pycrypto>","-4","0","1","2019-07-25 11:56:33","","0","","","","","2019-07-25 10:14:37",""
"57032588","from Crypto.Cipher import AES / ModuleNotFoundError: No module named 'Crypto'","I am not able to run my code, this error appears. I've tried in several ways to install pycrypto.
pip install pycrypto -> PyCrypto -> Crypto -> crypto -> pycryptodome .... and so on. Some help?
","","34","<python-3.x><pycrypto>","0","","0","2019-07-15 02:16:25","","1","","","","","2019-07-15 02:16:25",""
"45830900","Different output for same statement run twice in python shell using pycrypto library","I was experimenting with pycrypto library with below setup.
OS: Ubuntu 16.04.2 x86_64
Python Version:2.7.12
pycrypto version: 2.6.1
I am not able to understand why there is a difference in output of 2nd last and 3rd last statement though both are exactly same.
when i run this statement again the output shown in 2nd last is repeated.
I am not able to reproduce this behaviour but i wonder what could have caused this.
>>> from Crypto.Cipher import AES
>>> obj = AES.new('This is a key123', AES.MODE_CBC, 'This is an IV456')
>>> message = ""The answer is no""
>>> ciphertext = obj.encrypt(message)
>>> ciphertext
'\xd6\x83\x8dd!VT\x92\xaa`A\x05\xe0\x9b\x8b\xf1'
>>> obj2 = AES.new('This is a key123', AES.MODE_CBC, 'This is an IV456')
>>> obj2.decrypt(ciphertext)
'The answer is no'
>>> obj2.decrypt(obj.encrypt(message))
'The answer is no'
>>> obj.decrypt(obj.encrypt(message))
'\x0c\x14\xceA\x9cq\x8d\x07\xbb,\xa9G6\x14\x81s'
>>> obj2.decrypt(obj.encrypt(message))
'\x0c\x14\xceA\x9cq\x8d\x07\xbb,\xa9G6\x14\x81s'
>>> obj2.decrypt(obj.encrypt(message))
'The answer is no'
>>> obj2.decrypt(obj.encrypt(message))
'The answer is no'

","","32","<python-2.7><pycrypto>","0","","0","2017-08-23 04:55:43","","2","","","","","2017-08-23 04:55:43",""
"32607194","Python version 2.4.4 in which it unlocks some features after reading a license file from the path ""C:/filename ""","I had an application build with the Python version 2.4.4. It unlocks some features after reading a license file from the path ""C:/filename "".
But it is not working while trying on the other machine with Win-7 OS, while working on other machines successfully. 
Note: Out of 10 machines 1 machine is facing with this problem.
The file which it is directed to read is just a decrypted file created using the volume number of the O.S using py-crypto.
Can anyone suggest me to sort this out?
","","30","<python><windows-7><operating-system><pycrypto><sys>","0","","0","2015-09-18 12:44:08","","8","","2134538","","2015-09-18 12:44:08","2015-09-16 11:22:42",""
"53613523","Where to find PEM file created using pycrypto","I want to know where I can find exported keys. I don't see .pem file in my current directory. I am able to save key to txt file but its not working when I am trying to encrypt string using that key. Please help
from Crypto import Random
from Crypto.PublicKey import RSA

def generate_keys():
    modulus_length = 256*4
    keys = RSA.generate(modulus_length, Random.new().read)
    publickey = keys.publickey()

    keys.exportKey(format=""PEM"")
    publickey.exportKey(format=""PEM"")

    # with open(""prkey"",""wb"") as f:
    #   f.write(keys.exportKey())

    # with open(""pvkey"",""wb"") as p:
    #   p.write(publickey.exportKey())


return keys, publickey

","According to docs the method exportKey() returns ""A byte string with the encoded public or private half."" So it is up to you as a programmer to save it somewhere. 
This is done by the code, you have commented out. 
","29","<python-3.x><pycrypto><python-cryptography>","-2","1","1","2018-12-04 14:17:03","","0","","7385232","","2018-12-04 13:10:45","2018-12-04 12:56:57",""
"57563531","How to resolve 'Invalid PKCS8 header error' in AWS lambda","I am trying to perform jwt.encode on a small request message with a private key that I am retrieving from DynamoDB. My work station is Mac OS.
The code works in my local environment but failed when I tried to execute it in AWS lambda python3.7 environment. Any suggestions on how to solve this issue?
{
  ""errorMessage"": ""Invalid PKCS8 header"",
  ""errorType"": ""JWSError"",
  ""stackTrace"": [
    ""  File \""/var/task/lambda_function.py\"", line 228, in lambda_handler\n    response = send_request(url, body=body)\n"",
    ""  File \""/var/task/lambda_function.py\"", line 67, in send_request\n    token = _gen_jwt(private_key)\n"",
    ""  File \""/var/task/lambda_function.py\"", line 52, in _gen_jwt\n    token = jwt.encode(payload, private_key, algorithm='RS256', headers=headers)\n"",
    ""  File \""/var/task/jose/jwt.py\"", line 61, in encode\n    return jws.sign(claims, key, headers=headers, algorithm=algorithm)\n"",
    ""  File \""/var/task/jose/jws.py\"", line 47, in sign\n    signed_output = _sign_header_and_claims(encoded_header, encoded_payload, algorithm, key)\n"",
    ""  File \""/var/task/jose/jws.py\"", line 168, in _sign_header_and_claims\n    raise JWSError(e)\n""
  ]
}

","This issue was resolved after I rebuild my lambda package within a Linux environment and redeploy to AWS Lambda.
I created a docker image from python3.7.4 and deploy the package to lambda from within the container.
This solution also solves the issue: 
ImportError: /var/task/cryptography/hazmat/bindings/_constant_time.so: invalid ELF header

According to https://github.com/pyca/cryptography/issues/3051
","28","<python-3.x><aws-lambda><jwt><pycrypto><python-jose>","0","0","1","2019-10-30 17:38:05","57611508","0","","1655072","","2019-10-30 17:38:05","2019-08-19 20:28:42",""
"58698353","PyCharm IDE will not load from Crypto.Cipher import AES","I can run python3 myfile.py on the MAC OS command line and it works fine, but inside the IDE, I get the following error.  I have done the 
pip uninstall pycrypto
pip install pycrypto

This has no effect inside the PyCharm IDE, but it does work with the command line.
Python is 3.7 inside and outside the IDE.  The pycrypto is installed via the Preferences -> Project -> Project Interpreter.  The version of pycrpto is 2.6.1.
What am I missing?
    /Users/denisputnam/git/kingslanding/venv/bin/python /Users/denisputnam/git/kingslanding/denisputnam-cryptography-overview-exercise/mysymmetricencryptiondecryption.py
Traceback (most recent call last):
  File ""/Users/denisputnam/git/kingslanding/denisputnam-cryptography-overview-exercise/mysymmetricencryptiondecryption.py"", line 4, in <module>
    from Crypto.Cipher import AES 
ModuleNotFoundError: No module named 'Crypto'

Process finished with exit code 1

","Look into the following troubleshooting page.
According to your console output, you need to run /Users/denisputnam/git/kingslanding/venv/bin/python /Users/denisputnam/git/kingslanding/denisputnam-cryptography-overview-exercise/mysymmetricencryptiondecryption.py from the system terminal and see if it works.
","28","<python><pycharm><pycrypto>","0","0","1","2019-11-06 09:24:28","58726811","0","","","","","2019-11-04 17:25:51",""
"53762472","Error while creating public key using Pycrypto for SSH","I am getting error while writing public key into a file. Please let me know the solution.
from Crypto.PublicKey import RSA
key = RSA.generate(2048)
with open(""private.key"", 'wb') as content_file:
    chmod(""private.key"", 0o600)
    content_file.write(key.exportKey('PEM'))
pubkey = key.publickey()
with open(""public.key"", 'wb') as content_file:
    content_file.write(pubkey.exportKey('OpenSSH'))

The error is as under
TypeError: can't concat str to bytes

","","27","<python><pycrypto>","0","","0","2018-12-13 13:00:48","","0","","","","","2018-12-13 13:00:48",""
"57579262","MAC check failed when decrypting large files","I want to encrypt and decrypt large files. My strategy is to write seal and open_seal below to handle en(de)cryption of data as a single byte array. For large files, I would read the file chunk by chunk, each time calling those functions to en(de)crypt the read-off chunk of data.
The program works when doing 1 whole chunk. For large files, I'd call dark to encrypt, which works by calling seal on each chunk read off the stream. To decrypt I call light, which calls open_seal to decrypt each of the encrypted chunk. Encryption didn't return any problem, but decryption failed with MAC check error.
def seal(self,data):
        dataout = bytearray()
        session_key = get_random_bytes(16)

        # Encrypt the session key with the public RSA key
        cipher_rsa = PKCS1_OAEP.new(self.recipient_key)
        enc_session_key = cipher_rsa.encrypt(session_key)

        # Encrypt the data with the AES session key
        cipher_aes = AES.new(session_key, AES.MODE_EAX)
        ciphertext, tag = cipher_aes.encrypt_and_digest(data)

        for x in (enc_session_key, cipher_aes.nonce, tag, ciphertext):
            dataout += x
        return bytes(dataout)

def open_seal(self,data):
        #raise Exception if private_key empty
        #private_key = RSA.import_key(khandle)
        #private_key = RSA.import_key(private_key)
        def split_data(chunks):
            i = 0
            for x in chunks:
                i += x
                yield data[i-x:i]

        enc_session_key, nonce, tag, ciphertext = \
        [x for x in split_data((self.private_key.size_in_bytes(),16,16,len(data)))]


        # Decrypt the session key with the private RSA key
        cipher_rsa = PKCS1_OAEP.new(self.private_key)
        session_key = cipher_rsa.decrypt(enc_session_key)

        # Decrypt the data with the AES session key
        cipher_aes = AES.new(session_key, AES.MODE_EAX, nonce)
        plaindata = cipher_aes.decrypt_and_verify(ciphertext, tag)
        return plaindata
#below is in the child class, hence calling super()

def dark(self):
    while True:
        data_plain = self.stream.read(deadStream.CHUNK)
        if data_plain:
          data_encrypted = super().seal(data_plain)
          yield data_encrypted
        else:
          break
def light(self):
    while True:
        data_encrypted = self.stream.read(deadStream.CHUNK)
        if data_encrypted:
          data_plain = super().open_seal(data_encrypted)
          yield data_plain
        else:
          break

I expected the output to be piecing each of the decrypted chunks
","","27","<python><stream><pycrypto>","1","","0","2019-08-20 18:01:01","","0","","","","","2019-08-20 18:01:01",""
"42883438","Python DES encryption strange behavior","I have a text file containing the following text:
message.txt
this is my secret message

I wrote a small python code to read that file and encode it using Crypto.Cipher
from Crypto.Cipher import DES
f = open('message.txt','rb')
text = f.read()
f.close()

iv   = Random.get_random_bytes(8)
des1 = DES.new('01234567', DES.MODE_CFB, iv)

secret = des1.encrypt(text)  
print(""Encrypted text: "" + secret)   

output:

Encrypted text: Å..GH.ÿì.Vs~ö.~.wôÇ.k5â

I then saved the output string to a text file:
w = open('encrypted.txt','wb')
w.write(secret)
w.close()

Then I tried to open the same encrypted file and decrypt the content back to its original message:
d = open('encrypted.txt','rb')
secret = d.read()
d.close()

text = des1.decrypt(secret)
print(""decreypted text is: "" + text)

output:

decrypted text is: óF2â.}1Úmy secret message

It is very strange that the encryption works partially. I was under the impression that you would either encryption would produce the whole original message intact, or it would yield an unreadable gibberish text. But never expected a mixture of the two.
What am I doing wrong?
*Edit: I have edited my question: I always read binary and write binary. The half decrypted output happens when I read/write binary. When I don't read binary, the output is completely gibberish.
","","27","<python><encryption><pycrypto><des>","0","","0","2017-03-19 06:48:39","","4","","736172","","2017-03-19 06:48:39","2017-03-19 06:00:12","2017-03-19 09:40:26"
"55769884","Pycrypto making problems for me","I learned that Pycrypto project was discontinued and Pycryptodome was made which had all the same ycrypto API and plus new features too. but while  trying to work with some old modules which depend on pycrypto such as Steem and many other , how can i do this ?
Installing Pycryto is always a pain in the ass for me , i hve seen many users having issues too, how can replace or rename Pycryptodome as Pycrypto and use other modules.. please help. sry 4 bad english.
","","25","<pip><install><pycrypto><pycryptodome>","0","","0","2019-04-20 03:01:26","","0","","","","","2019-04-20 03:01:26",""
"57048483","Crypto.PublicKey.RSA.generate with randfunc set to read from mouse input","When generating a new RSA private key with the randfunc set to a custom function that reads from /dev/input/mice, it continuously reads and never stops.
I've tried feeding the raw MOUSEFILE.read function instead of my wrapper but that didn't help. However, by feeding pre-read data from mouse input into a function that uses random.choice to select random bytes from said data, it works fine.
Variables:
MOUSEFILE = open(""/dev/input/mice"",""rb"")
My end goal (doesn't work for some reason):
def randfunc(n):
    return MOUSEFILE.read(n)```

The pre-read function with random.choice that works:
MOUSEDATA = MOUSEFILE.read(1024)

def randfunc2(n):
    res = b''
    while len(res) < n:
        res += bytes([random.choice(MOUSEDATA)])
    return res

I can confirm that my randfunc is actually reading from mouse input correctly by throwing a couple print statements in there. It appears to be in a continuous loop of reading 1 and then 63 bytes from the randfunc. My randfunc2 works perfectly, but I want to get randfunc to work and read from live mouse movements. The function I use to generate the key is:
k = RSA.generate(1024, randfunc=x)

Where x is my random function.
","","24","<python><python-3.x><pycrypto><pycryptodome>","0","","0","2019-07-16 00:01:07","","0","","","","","2019-07-16 00:01:07",""
"51530041","I am trying to use pycrypto to learn about AES and I do not know what I am doing wrong","This is the code I am using to teach myself how AES works. It is supposed to produce the encrypted message an then produce the decrypted message right after it.  If anyone can help me figure out what I did wrong, it would be greatly appreciated.
from Crypto.Cipher import AES

data = input(' --> ')
data = bytes(data, encoding='utf-8')

key = b'Sixteen byte key'

cipher = AES.new(key, AES.MODE_EAX)
nonce = cipher.nonce

ciphertext = cipher.encrypt_and_digest(data)

print(ciphertext)

ciphertext = str(ciphertext)
ciphertext = bytes(ciphertext, encoding='utf-8')

key = b'Sixteen byte key'
cipher = AES.new(key, AES.MODE_EAX, nonce=nonce)

plaintext = cipher.decrypt(ciphertext)

print('\n')
print(plaintext)

","The only bytes that you should treat as a string are the bytes that have been encoded as a string in the first place. As ciphertext contains random bytes, there will likely be bytes that do not represent a character - almost any encoding has unused / reserved byte values and / or unprintable characters. If you want to convert ciphertext to actual text, you should use a (binary-to-text) encoding such as base 64.
","23","<python><encryption><aes><pycrypto>","0","0","1","2018-07-26 02:57:43","","2","","5491375","","2018-07-26 02:54:32","2018-07-26 02:13:35",""
"56617869","How do I write a Python code to extract public key from .pem, .crt, .der, .p12 digital certificates?","I was asked to extract public keys from .crt , .pem, .der, .p12 digital certificates programmatically in python. I am looking for Python libraries which could accomplish but library named ""cryptography""  is issuing some problems(not installation problems).I have read ""pyopenssl"" documentation but unable to write code with their assistance. If someone has code to extract public key into a variable in Python and use it to encrypt a file, please share.
Thank you
","","20","<python-3.x><certificate><pycrypto><pyopenssl><pycryptodome>","0","","0","2019-06-16 10:10:40","","0","","","","","2019-06-16 10:10:40",""
"52968086","Issue when installing pycrypto","I am attempting to install pycrypto I have followed multiple other threads, currently I have upgraded pip, setuptools and installed Microsoft Visual Studio 2015. However I am still getting errors when running the setup. I am installing pycrypto via pip. I need to install it on python 3.6.5. Full installation log https://hastebin.com/unenukecil.php
","","19","<python><pycrypto>","0","","0","2018-10-24 11:41:12","","7","","","","","2018-10-24 11:41:12",""
