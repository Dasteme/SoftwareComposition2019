post_link,title,body_question,body_answer,viewcount,tags,score,score_answer,answercount,LastActivityDate,AcceptedAnswerId,CommentCount,FavoriteCount,LastEditorUserId,LastEditorDisplayName,LastEditDate,CreationDate,ClosedDate
"39133437","SSLHandshakeException: Handshake failed on Android N/7.0","I'm working on an app for which the (power)users have to set up their own server (i.e. nginx) to run the backend application. The corresponding domain needs to be configured in the app so it can connect. I've been testing primarily on my own phone (sony z3c) and started developing for 5.1. Later I received an update for 6.0 but still maintained a working 5.1 inside the emulator. Not too long ago, I started to work on an AVD with an image for 7.0 and to my suprise it won't connect to my server, telling me the ssl handshake failed. My nginx configuration is pretty strict, but it works for both 5.1 and 6.0, so .... ?!
Here is what I know:

I use v24 for support libs, i.e. my compileSdkVersion is 24.
I use Volley v1.0.0.
I've tried the TLSSocketFactory, but it doesn't change anything. This seems to be used most of the times to prevent SSL3 use for older SDK versions anyway.
I've tried increasing the timeout, but it doesn't change anything.
I've tried using HttpURLConnection directly, but it doesn't change anything apart from the stack trace (it's without the volley references, but identical otherwise).

Without the TLSSocketFactory the request are made through a bare request queue, instantiated with Volley.newRequestQueue(context).
This is what I see in android studio:
W/System.err: com.android.volley.NoConnectionError: javax.net.ssl.SSLHandshakeException: Connection closed by peer
W/System.err:     at com.android.volley.toolbox.BasicNetwork.performRequest(BasicNetwork.java:151)
W/System.err:     at com.android.volley.NetworkDispatcher.run(NetworkDispatcher.java:112)
W/System.err: Caused by: javax.net.ssl.SSLHandshakeException: Connection closed by peer
W/System.err:     at com.android.org.conscrypt.NativeCrypto.SSL_do_handshake(Native Method)
W/System.err:     at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:357)
W/System.err:     at com.android.okhttp.Connection.connectTls(Connection.java:235)
W/System.err:     at com.android.okhttp.Connection.connectSocket(Connection.java:199)
W/System.err:     at com.android.okhttp.Connection.connect(Connection.java:172)
W/System.err:     at com.android.okhttp.Connection.connectAndSetOwner(Connection.java:367)
W/System.err:     at com.android.okhttp.OkHttpClient$1.connectAndSetOwner(OkHttpClient.java:130)
W/System.err:     at com.android.okhttp.internal.http.HttpEngine.connect(HttpEngine.java:329)
W/System.err:     at com.android.okhttp.internal.http.HttpEngine.sendRequest(HttpEngine.java:246)
W/System.err:     at com.android.okhttp.internal.huc.HttpURLConnectionImpl.execute(HttpURLConnectionImpl.java:457)
W/System.err:     at com.android.okhttp.internal.huc.HttpURLConnectionImpl.connect(HttpURLConnectionImpl.java:126)
W/System.err:     at com.android.okhttp.internal.huc.HttpURLConnectionImpl.getOutputStream(HttpURLConnectionImpl.java:257)
W/System.err:     at com.android.okhttp.internal.huc.DelegatingHttpsURLConnection.getOutputStream(DelegatingHttpsURLConnection.java:218)
W/System.err:     at com.android.okhttp.internal.huc.HttpsURLConnectionImpl.getOutputStream(HttpsURLConnectionImpl.java)
W/System.err:     at com.android.volley.toolbox.HurlStack.addBodyIfExists(HurlStack.java:264)
W/System.err:     at com.android.volley.toolbox.HurlStack.setConnectionParametersForRequest(HurlStack.java:234)
W/System.err:     at com.android.volley.toolbox.HurlStack.performRequest(HurlStack.java:107)
W/System.err:     at com.android.volley.toolbox.BasicNetwork.performRequest(BasicNetwork.java:96)
W/System.err:   ... 1 more
W/System.err:   Suppressed: javax.net.ssl.SSLHandshakeException: Handshake failed
W/System.err:     at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:429)
W/System.err:       ... 17 more
W/System.err:   Caused by: javax.net.ssl.SSLProtocolException: SSL handshake terminated: ssl=0x7ffef3748040: Failure in SSL library, usually a protocol error
W/System.err: error:10000410:SSL routines:OPENSSL_internal:SSLV3_ALERT_HANDSHAKE_FAILURE (external/boringssl/src/ssl/s3_pkt.c:610 0x7ffeda1d2240:0x00000001)
W/System.err: error:1000009a:SSL routines:OPENSSL_internal:HANDSHAKE_FAILURE_ON_CLIENT_HELLO (external/boringssl/src/ssl/s3_clnt.c:764 0x7ffee9d2b70a:0x00000000)
W/System.err:     at com.android.org.conscrypt.NativeCrypto.SSL_do_handshake(Native Method)
W/System.err:     at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:357)
W/System.err:       ... 17 more

Since it says SSLV3_ALERT_HANDSHAKE_FAILURE I can only assume it for some reason tries to connect using SSLv3 and fails, but this doesn't make any sense to me whatsoever. It might be a cipher-issue, but how can I tell what it is trying to use ? I would rather not enable a ciphers on the server, make a connection attempt and repeat.
My nginx site uses a let's encrypt certificate and has the following configuration:
ssl_stapling on;
ssl_stapling_verify on;
ssl_trusted_certificate /etc/ssl/certs/lets-encrypt-x1-cross-signed.pem;
ssl_ciphers ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:!aNULL;
ssl_dhparam /etc/ssl/certs/dhparam.pem;
ssl_ecdh_curve secp384r1;
ssl_prefer_server_ciphers on;
ssl_protocols TLSv1.2;

To test these ciphers I've a script and it confirms these ciphers (run on a wheezy vps outside the server's network):

Testing ECDHE-RSA-AES256-GCM-SHA384...YES
Testing ECDHE-ECDSA-AES256-GCM-SHA384...NO (sslv3 alert handshake failure)
Testing ECDHE-RSA-AES256-SHA384...NO (sslv3 alert handshake failure)
Testing ECDHE-ECDSA-AES256-SHA384...NO (sslv3 alert handshake failure)
Testing ECDHE-RSA-AES256-SHA...NO (sslv3 alert handshake failure)
Testing ECDHE-ECDSA-AES256-SHA...NO (sslv3 alert handshake failure)
Testing SRP-DSS-AES-256-CBC-SHA...NO (sslv3 alert handshake failure)
Testing SRP-RSA-AES-256-CBC-SHA...NO (sslv3 alert handshake failure)
Testing DHE-DSS-AES256-GCM-SHA384...NO (sslv3 alert handshake failure)
Testing DHE-RSA-AES256-GCM-SHA384...NO (sslv3 alert handshake failure)
Testing DHE-RSA-AES256-SHA256...NO (sslv3 alert handshake failure)
Testing DHE-DSS-AES256-SHA256...NO (sslv3 alert handshake failure)
Testing DHE-RSA-AES256-SHA...NO (sslv3 alert handshake failure)
Testing DHE-DSS-AES256-SHA...NO (sslv3 alert handshake failure)
Testing DHE-RSA-CAMELLIA256-SHA...NO (sslv3 alert handshake failure)
Testing DHE-DSS-CAMELLIA256-SHA...NO (sslv3 alert handshake failure)
Testing AECDH-AES256-SHA...NO (sslv3 alert handshake failure)
Testing SRP-AES-256-CBC-SHA...NO (sslv3 alert handshake failure)
Testing ADH-AES256-GCM-SHA384...NO (sslv3 alert handshake failure)
Testing ADH-AES256-SHA256...NO (sslv3 alert handshake failure)
Testing ADH-AES256-SHA...NO (sslv3 alert handshake failure)
Testing ADH-CAMELLIA256-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-AES256-GCM-SHA384...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-AES256-GCM-SHA384...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-AES256-SHA384...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-AES256-SHA384...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-AES256-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-AES256-SHA...NO (sslv3 alert handshake failure)
Testing AES256-GCM-SHA384...NO (sslv3 alert handshake failure)
Testing AES256-SHA256...NO (sslv3 alert handshake failure)
Testing AES256-SHA...NO (sslv3 alert handshake failure)
Testing CAMELLIA256-SHA...NO (sslv3 alert handshake failure)
Testing PSK-AES256-CBC-SHA...NO (no ciphers available)
Testing ECDHE-RSA-DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing ECDHE-ECDSA-DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing SRP-DSS-3DES-EDE-CBC-SHA...NO (sslv3 alert handshake failure)
Testing SRP-RSA-3DES-EDE-CBC-SHA...NO (sslv3 alert handshake failure)
Testing EDH-RSA-DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing EDH-DSS-DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing AECDH-DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing SRP-3DES-EDE-CBC-SHA...NO (sslv3 alert handshake failure)
Testing ADH-DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing PSK-3DES-EDE-CBC-SHA...NO (no ciphers available)
Testing ECDHE-RSA-AES128-GCM-SHA256...YES
Testing ECDHE-ECDSA-AES128-GCM-SHA256...NO (sslv3 alert handshake failure)
Testing ECDHE-RSA-AES128-SHA256...NO (sslv3 alert handshake failure)
Testing ECDHE-ECDSA-AES128-SHA256...NO (sslv3 alert handshake failure)
Testing ECDHE-RSA-AES128-SHA...NO (sslv3 alert handshake failure)
Testing ECDHE-ECDSA-AES128-SHA...NO (sslv3 alert handshake failure)
Testing SRP-DSS-AES-128-CBC-SHA...NO (sslv3 alert handshake failure)
Testing SRP-RSA-AES-128-CBC-SHA...NO (sslv3 alert handshake failure)
Testing DHE-DSS-AES128-GCM-SHA256...NO (sslv3 alert handshake failure)
Testing DHE-RSA-AES128-GCM-SHA256...NO (sslv3 alert handshake failure)
Testing DHE-RSA-AES128-SHA256...NO (sslv3 alert handshake failure)
Testing DHE-DSS-AES128-SHA256...NO (sslv3 alert handshake failure)
Testing DHE-RSA-AES128-SHA...NO (sslv3 alert handshake failure)
Testing DHE-DSS-AES128-SHA...NO (sslv3 alert handshake failure)
Testing DHE-RSA-SEED-SHA...NO (sslv3 alert handshake failure)
Testing DHE-DSS-SEED-SHA...NO (sslv3 alert handshake failure)
Testing DHE-RSA-CAMELLIA128-SHA...NO (sslv3 alert handshake failure)
Testing DHE-DSS-CAMELLIA128-SHA...NO (sslv3 alert handshake failure)
Testing AECDH-AES128-SHA...NO (sslv3 alert handshake failure)
Testing SRP-AES-128-CBC-SHA...NO (sslv3 alert handshake failure)
Testing ADH-AES128-GCM-SHA256...NO (sslv3 alert handshake failure)
Testing ADH-AES128-SHA256...NO (sslv3 alert handshake failure)
Testing ADH-AES128-SHA...NO (sslv3 alert handshake failure)
Testing ADH-SEED-SHA...NO (sslv3 alert handshake failure)
Testing ADH-CAMELLIA128-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-AES128-GCM-SHA256...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-AES128-GCM-SHA256...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-AES128-SHA256...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-AES128-SHA256...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-AES128-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-AES128-SHA...NO (sslv3 alert handshake failure)
Testing AES128-GCM-SHA256...NO (sslv3 alert handshake failure)
Testing AES128-SHA256...NO (sslv3 alert handshake failure)
Testing AES128-SHA...NO (sslv3 alert handshake failure)
Testing SEED-SHA...NO (sslv3 alert handshake failure)
Testing CAMELLIA128-SHA...NO (sslv3 alert handshake failure)
Testing PSK-AES128-CBC-SHA...NO (no ciphers available)
Testing ECDHE-RSA-RC4-SHA...NO (sslv3 alert handshake failure)
Testing ECDHE-ECDSA-RC4-SHA...NO (sslv3 alert handshake failure)
Testing AECDH-RC4-SHA...NO (sslv3 alert handshake failure)
Testing ADH-RC4-MD5...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-RC4-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-RC4-SHA...NO (sslv3 alert handshake failure)
Testing RC4-SHA...NO (sslv3 alert handshake failure)
Testing RC4-MD5...NO (sslv3 alert handshake failure)
Testing PSK-RC4-SHA...NO (no ciphers available)
Testing EDH-RSA-DES-CBC-SHA...NO (sslv3 alert handshake failure)
Testing EDH-DSS-DES-CBC-SHA...NO (sslv3 alert handshake failure)
Testing ADH-DES-CBC-SHA...NO (sslv3 alert handshake failure)
Testing DES-CBC-SHA...NO (sslv3 alert handshake failure)
Testing EXP-EDH-RSA-DES-CBC-SHA...NO (sslv3 alert handshake failure)
Testing EXP-EDH-DSS-DES-CBC-SHA...NO (sslv3 alert handshake failure)
Testing EXP-ADH-DES-CBC-SHA...NO (sslv3 alert handshake failure)
Testing EXP-DES-CBC-SHA...NO (sslv3 alert handshake failure)
Testing EXP-RC2-CBC-MD5...NO (sslv3 alert handshake failure)
Testing EXP-ADH-RC4-MD5...NO (sslv3 alert handshake failure)
Testing EXP-RC4-MD5...NO (sslv3 alert handshake failure)
Testing ECDHE-RSA-NULL-SHA...NO (sslv3 alert handshake failure)
Testing ECDHE-ECDSA-NULL-SHA...NO (sslv3 alert handshake failure)
Testing AECDH-NULL-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-NULL-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-NULL-SHA...NO (sslv3 alert handshake failure)
Testing NULL-SHA256...NO (sslv3 alert handshake failure)
Testing NULL-SHA...NO (sslv3 alert handshake failure)
Testing NULL-MD5...NO (sslv3 alert handshake failure

I can open the server-url in the emulator's browser and get a perfect json response so I know the system itself is capable.
So the question is, why can't I connect on Android 7 ?
Update:
I've looked at a captured packet using tcpdump and wireshark and the enabled ciphers are in the ClientHello, so that should not be a problem.

Cipher Suites (18 suites)

Cipher Suite: Unknown (0xcca9)
Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 (0xc02b)
Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 (0xc02c)
Cipher Suite: Unknown (0xcca8)
Cipher Suite: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 (0xc02f)
Cipher Suite: TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 (0xc030)
Cipher Suite: TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 (0x009e)
Cipher Suite: TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 (0x009f)
Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA (0xc009)
Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA (0xc00a)
Cipher Suite: TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA (0xc013)
Cipher Suite: TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA (0xc014)
Cipher Suite: TLS_DHE_RSA_WITH_AES_128_CBC_SHA (0x0033)
Cipher Suite: TLS_DHE_RSA_WITH_AES_256_CBC_SHA (0x0039)
Cipher Suite: TLS_RSA_WITH_AES_128_GCM_SHA256 (0x009c)
Cipher Suite: TLS_RSA_WITH_AES_256_GCM_SHA384 (0x009d)
Cipher Suite: TLS_RSA_WITH_AES_128_CBC_SHA (0x002f)
Cipher Suite: TLS_RSA_WITH_AES_256_CBC_SHA (0x0035)

As you can see 0xc02f and 0xc030 match, but the next TLSv1.2 packet says: Alert (21), Handshake Failure (40).
Update 2:
These are the curves from Android 5.1 in the ClientHello:

Elliptic curves (25 curves)

Elliptic curve: sect571r1 (0x000e)
Elliptic curve: sect571k1 (0x000d)
Elliptic curve: secp521r1 (0x0019)
Elliptic curve: sect409k1 (0x000b)
Elliptic curve: sect409r1 (0x000c)
Elliptic curve: secp384r1 (0x0018)
Elliptic curve: sect283k1 (0x0009)
Elliptic curve: sect283r1 (0x000a)
Elliptic curve: secp256k1 (0x0016)
Elliptic curve: secp256r1 (0x0017)
Elliptic curve: sect239k1 (0x0008)
Elliptic curve: sect233k1 (0x0006)
Elliptic curve: sect233r1 (0x0007)
Elliptic curve: secp224k1 (0x0014)
Elliptic curve: secp224r1 (0x0015)
Elliptic curve: sect193r1 (0x0004)
Elliptic curve: sect193r2 (0x0005)
Elliptic curve: secp192k1 (0x0012)
Elliptic curve: secp192r1 (0x0013)
Elliptic curve: sect163k1 (0x0001)
Elliptic curve: sect163r1 (0x0002)
Elliptic curve: sect163r2 (0x0003)
Elliptic curve: secp160k1 (0x000f)
Elliptic curve: secp160r1 (0x0010)
Elliptic curve: secp160r2 (0x0011)

In the ServerHello secp384r1 (0x0018) is returned.
And this is from Android 7:

Elliptic curves (1 curve)

Elliptic curve: secp256r1 (0x0017)

Resulting in the Handshake Failure.
Changing the nginx configuration by removing secp384r1 or replacing it with the default (prime256v1) does get it to work. So I guess the question remains: am I able to add elliptic curves ?
The captured data is the same when using the emulator as when using an Android 7.0 device (General Mobile 4G).
Update 3:
Small update, but worth mentioning: I got it to work in the emulator using Android 7.1.1 (!). It shows the following data (again, grabbed using tcpdump and viewed using wireshark):

Elliptic curves (3 curves)

Elliptic curve: secp256r1 (0x0017)
Elliptic curve: secp384r1 (0x0018)
Elliptic curve: secp512r1 (0x0019)

It shows the same 18 Cipher Suites.
","
By default, secure connections (using protocols like TLS and HTTPS) from all apps trust the pre-installed system CAs, and apps targeting Android 6.0 (API level 23) and lower also trust the user-added CA store by default. 

Which means that on Android Nougat (7.0), the game for CAs changed completely.  If you have your key cert, you can add a network security configuration file (if you have your cert), as described here: 
https://developer.android.com/training/articles/security-config.html
Or you can create your own TrustManager, as described here:
https://developer.android.com/training/articles/security-ssl.html#SelfSigned
Or you can enable cipher suites that your server demands but aren't enabled by default on Android N.  For example, here are two ciphers that I needed to add in my own application talking to an old Windows CE server:
    SSLSocket sslsock = (SSLSocket) createSocket();
    List<String> cipherSuitesToEnable = new ArrayList<>();
    cipherSuitesToEnable.add(""SSL_RSA_WITH_RC4_128_SHA"");
    cipherSuitesToEnable.add(""SSL_RSA_WITH_3DES_EDE_CBC_SHA"");
    sslsock.setEnabledCipherSuites(cipherSuitesToEnable.toArray(new String[cipherSuitesToEnable.size()]));

","41785","<android><ssl><elliptic-curve><sslhandshakeexception><android-7.0-nougat>","55","2","8","2019-11-03 16:11:55","","12","27","-1","","2017-05-23 12:26:17","2016-08-24 21:39:27",""
"39133437","SSLHandshakeException: Handshake failed on Android N/7.0","I'm working on an app for which the (power)users have to set up their own server (i.e. nginx) to run the backend application. The corresponding domain needs to be configured in the app so it can connect. I've been testing primarily on my own phone (sony z3c) and started developing for 5.1. Later I received an update for 6.0 but still maintained a working 5.1 inside the emulator. Not too long ago, I started to work on an AVD with an image for 7.0 and to my suprise it won't connect to my server, telling me the ssl handshake failed. My nginx configuration is pretty strict, but it works for both 5.1 and 6.0, so .... ?!
Here is what I know:

I use v24 for support libs, i.e. my compileSdkVersion is 24.
I use Volley v1.0.0.
I've tried the TLSSocketFactory, but it doesn't change anything. This seems to be used most of the times to prevent SSL3 use for older SDK versions anyway.
I've tried increasing the timeout, but it doesn't change anything.
I've tried using HttpURLConnection directly, but it doesn't change anything apart from the stack trace (it's without the volley references, but identical otherwise).

Without the TLSSocketFactory the request are made through a bare request queue, instantiated with Volley.newRequestQueue(context).
This is what I see in android studio:
W/System.err: com.android.volley.NoConnectionError: javax.net.ssl.SSLHandshakeException: Connection closed by peer
W/System.err:     at com.android.volley.toolbox.BasicNetwork.performRequest(BasicNetwork.java:151)
W/System.err:     at com.android.volley.NetworkDispatcher.run(NetworkDispatcher.java:112)
W/System.err: Caused by: javax.net.ssl.SSLHandshakeException: Connection closed by peer
W/System.err:     at com.android.org.conscrypt.NativeCrypto.SSL_do_handshake(Native Method)
W/System.err:     at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:357)
W/System.err:     at com.android.okhttp.Connection.connectTls(Connection.java:235)
W/System.err:     at com.android.okhttp.Connection.connectSocket(Connection.java:199)
W/System.err:     at com.android.okhttp.Connection.connect(Connection.java:172)
W/System.err:     at com.android.okhttp.Connection.connectAndSetOwner(Connection.java:367)
W/System.err:     at com.android.okhttp.OkHttpClient$1.connectAndSetOwner(OkHttpClient.java:130)
W/System.err:     at com.android.okhttp.internal.http.HttpEngine.connect(HttpEngine.java:329)
W/System.err:     at com.android.okhttp.internal.http.HttpEngine.sendRequest(HttpEngine.java:246)
W/System.err:     at com.android.okhttp.internal.huc.HttpURLConnectionImpl.execute(HttpURLConnectionImpl.java:457)
W/System.err:     at com.android.okhttp.internal.huc.HttpURLConnectionImpl.connect(HttpURLConnectionImpl.java:126)
W/System.err:     at com.android.okhttp.internal.huc.HttpURLConnectionImpl.getOutputStream(HttpURLConnectionImpl.java:257)
W/System.err:     at com.android.okhttp.internal.huc.DelegatingHttpsURLConnection.getOutputStream(DelegatingHttpsURLConnection.java:218)
W/System.err:     at com.android.okhttp.internal.huc.HttpsURLConnectionImpl.getOutputStream(HttpsURLConnectionImpl.java)
W/System.err:     at com.android.volley.toolbox.HurlStack.addBodyIfExists(HurlStack.java:264)
W/System.err:     at com.android.volley.toolbox.HurlStack.setConnectionParametersForRequest(HurlStack.java:234)
W/System.err:     at com.android.volley.toolbox.HurlStack.performRequest(HurlStack.java:107)
W/System.err:     at com.android.volley.toolbox.BasicNetwork.performRequest(BasicNetwork.java:96)
W/System.err:   ... 1 more
W/System.err:   Suppressed: javax.net.ssl.SSLHandshakeException: Handshake failed
W/System.err:     at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:429)
W/System.err:       ... 17 more
W/System.err:   Caused by: javax.net.ssl.SSLProtocolException: SSL handshake terminated: ssl=0x7ffef3748040: Failure in SSL library, usually a protocol error
W/System.err: error:10000410:SSL routines:OPENSSL_internal:SSLV3_ALERT_HANDSHAKE_FAILURE (external/boringssl/src/ssl/s3_pkt.c:610 0x7ffeda1d2240:0x00000001)
W/System.err: error:1000009a:SSL routines:OPENSSL_internal:HANDSHAKE_FAILURE_ON_CLIENT_HELLO (external/boringssl/src/ssl/s3_clnt.c:764 0x7ffee9d2b70a:0x00000000)
W/System.err:     at com.android.org.conscrypt.NativeCrypto.SSL_do_handshake(Native Method)
W/System.err:     at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:357)
W/System.err:       ... 17 more

Since it says SSLV3_ALERT_HANDSHAKE_FAILURE I can only assume it for some reason tries to connect using SSLv3 and fails, but this doesn't make any sense to me whatsoever. It might be a cipher-issue, but how can I tell what it is trying to use ? I would rather not enable a ciphers on the server, make a connection attempt and repeat.
My nginx site uses a let's encrypt certificate and has the following configuration:
ssl_stapling on;
ssl_stapling_verify on;
ssl_trusted_certificate /etc/ssl/certs/lets-encrypt-x1-cross-signed.pem;
ssl_ciphers ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:!aNULL;
ssl_dhparam /etc/ssl/certs/dhparam.pem;
ssl_ecdh_curve secp384r1;
ssl_prefer_server_ciphers on;
ssl_protocols TLSv1.2;

To test these ciphers I've a script and it confirms these ciphers (run on a wheezy vps outside the server's network):

Testing ECDHE-RSA-AES256-GCM-SHA384...YES
Testing ECDHE-ECDSA-AES256-GCM-SHA384...NO (sslv3 alert handshake failure)
Testing ECDHE-RSA-AES256-SHA384...NO (sslv3 alert handshake failure)
Testing ECDHE-ECDSA-AES256-SHA384...NO (sslv3 alert handshake failure)
Testing ECDHE-RSA-AES256-SHA...NO (sslv3 alert handshake failure)
Testing ECDHE-ECDSA-AES256-SHA...NO (sslv3 alert handshake failure)
Testing SRP-DSS-AES-256-CBC-SHA...NO (sslv3 alert handshake failure)
Testing SRP-RSA-AES-256-CBC-SHA...NO (sslv3 alert handshake failure)
Testing DHE-DSS-AES256-GCM-SHA384...NO (sslv3 alert handshake failure)
Testing DHE-RSA-AES256-GCM-SHA384...NO (sslv3 alert handshake failure)
Testing DHE-RSA-AES256-SHA256...NO (sslv3 alert handshake failure)
Testing DHE-DSS-AES256-SHA256...NO (sslv3 alert handshake failure)
Testing DHE-RSA-AES256-SHA...NO (sslv3 alert handshake failure)
Testing DHE-DSS-AES256-SHA...NO (sslv3 alert handshake failure)
Testing DHE-RSA-CAMELLIA256-SHA...NO (sslv3 alert handshake failure)
Testing DHE-DSS-CAMELLIA256-SHA...NO (sslv3 alert handshake failure)
Testing AECDH-AES256-SHA...NO (sslv3 alert handshake failure)
Testing SRP-AES-256-CBC-SHA...NO (sslv3 alert handshake failure)
Testing ADH-AES256-GCM-SHA384...NO (sslv3 alert handshake failure)
Testing ADH-AES256-SHA256...NO (sslv3 alert handshake failure)
Testing ADH-AES256-SHA...NO (sslv3 alert handshake failure)
Testing ADH-CAMELLIA256-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-AES256-GCM-SHA384...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-AES256-GCM-SHA384...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-AES256-SHA384...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-AES256-SHA384...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-AES256-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-AES256-SHA...NO (sslv3 alert handshake failure)
Testing AES256-GCM-SHA384...NO (sslv3 alert handshake failure)
Testing AES256-SHA256...NO (sslv3 alert handshake failure)
Testing AES256-SHA...NO (sslv3 alert handshake failure)
Testing CAMELLIA256-SHA...NO (sslv3 alert handshake failure)
Testing PSK-AES256-CBC-SHA...NO (no ciphers available)
Testing ECDHE-RSA-DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing ECDHE-ECDSA-DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing SRP-DSS-3DES-EDE-CBC-SHA...NO (sslv3 alert handshake failure)
Testing SRP-RSA-3DES-EDE-CBC-SHA...NO (sslv3 alert handshake failure)
Testing EDH-RSA-DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing EDH-DSS-DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing AECDH-DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing SRP-3DES-EDE-CBC-SHA...NO (sslv3 alert handshake failure)
Testing ADH-DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing PSK-3DES-EDE-CBC-SHA...NO (no ciphers available)
Testing ECDHE-RSA-AES128-GCM-SHA256...YES
Testing ECDHE-ECDSA-AES128-GCM-SHA256...NO (sslv3 alert handshake failure)
Testing ECDHE-RSA-AES128-SHA256...NO (sslv3 alert handshake failure)
Testing ECDHE-ECDSA-AES128-SHA256...NO (sslv3 alert handshake failure)
Testing ECDHE-RSA-AES128-SHA...NO (sslv3 alert handshake failure)
Testing ECDHE-ECDSA-AES128-SHA...NO (sslv3 alert handshake failure)
Testing SRP-DSS-AES-128-CBC-SHA...NO (sslv3 alert handshake failure)
Testing SRP-RSA-AES-128-CBC-SHA...NO (sslv3 alert handshake failure)
Testing DHE-DSS-AES128-GCM-SHA256...NO (sslv3 alert handshake failure)
Testing DHE-RSA-AES128-GCM-SHA256...NO (sslv3 alert handshake failure)
Testing DHE-RSA-AES128-SHA256...NO (sslv3 alert handshake failure)
Testing DHE-DSS-AES128-SHA256...NO (sslv3 alert handshake failure)
Testing DHE-RSA-AES128-SHA...NO (sslv3 alert handshake failure)
Testing DHE-DSS-AES128-SHA...NO (sslv3 alert handshake failure)
Testing DHE-RSA-SEED-SHA...NO (sslv3 alert handshake failure)
Testing DHE-DSS-SEED-SHA...NO (sslv3 alert handshake failure)
Testing DHE-RSA-CAMELLIA128-SHA...NO (sslv3 alert handshake failure)
Testing DHE-DSS-CAMELLIA128-SHA...NO (sslv3 alert handshake failure)
Testing AECDH-AES128-SHA...NO (sslv3 alert handshake failure)
Testing SRP-AES-128-CBC-SHA...NO (sslv3 alert handshake failure)
Testing ADH-AES128-GCM-SHA256...NO (sslv3 alert handshake failure)
Testing ADH-AES128-SHA256...NO (sslv3 alert handshake failure)
Testing ADH-AES128-SHA...NO (sslv3 alert handshake failure)
Testing ADH-SEED-SHA...NO (sslv3 alert handshake failure)
Testing ADH-CAMELLIA128-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-AES128-GCM-SHA256...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-AES128-GCM-SHA256...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-AES128-SHA256...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-AES128-SHA256...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-AES128-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-AES128-SHA...NO (sslv3 alert handshake failure)
Testing AES128-GCM-SHA256...NO (sslv3 alert handshake failure)
Testing AES128-SHA256...NO (sslv3 alert handshake failure)
Testing AES128-SHA...NO (sslv3 alert handshake failure)
Testing SEED-SHA...NO (sslv3 alert handshake failure)
Testing CAMELLIA128-SHA...NO (sslv3 alert handshake failure)
Testing PSK-AES128-CBC-SHA...NO (no ciphers available)
Testing ECDHE-RSA-RC4-SHA...NO (sslv3 alert handshake failure)
Testing ECDHE-ECDSA-RC4-SHA...NO (sslv3 alert handshake failure)
Testing AECDH-RC4-SHA...NO (sslv3 alert handshake failure)
Testing ADH-RC4-MD5...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-RC4-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-RC4-SHA...NO (sslv3 alert handshake failure)
Testing RC4-SHA...NO (sslv3 alert handshake failure)
Testing RC4-MD5...NO (sslv3 alert handshake failure)
Testing PSK-RC4-SHA...NO (no ciphers available)
Testing EDH-RSA-DES-CBC-SHA...NO (sslv3 alert handshake failure)
Testing EDH-DSS-DES-CBC-SHA...NO (sslv3 alert handshake failure)
Testing ADH-DES-CBC-SHA...NO (sslv3 alert handshake failure)
Testing DES-CBC-SHA...NO (sslv3 alert handshake failure)
Testing EXP-EDH-RSA-DES-CBC-SHA...NO (sslv3 alert handshake failure)
Testing EXP-EDH-DSS-DES-CBC-SHA...NO (sslv3 alert handshake failure)
Testing EXP-ADH-DES-CBC-SHA...NO (sslv3 alert handshake failure)
Testing EXP-DES-CBC-SHA...NO (sslv3 alert handshake failure)
Testing EXP-RC2-CBC-MD5...NO (sslv3 alert handshake failure)
Testing EXP-ADH-RC4-MD5...NO (sslv3 alert handshake failure)
Testing EXP-RC4-MD5...NO (sslv3 alert handshake failure)
Testing ECDHE-RSA-NULL-SHA...NO (sslv3 alert handshake failure)
Testing ECDHE-ECDSA-NULL-SHA...NO (sslv3 alert handshake failure)
Testing AECDH-NULL-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-NULL-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-NULL-SHA...NO (sslv3 alert handshake failure)
Testing NULL-SHA256...NO (sslv3 alert handshake failure)
Testing NULL-SHA...NO (sslv3 alert handshake failure)
Testing NULL-MD5...NO (sslv3 alert handshake failure

I can open the server-url in the emulator's browser and get a perfect json response so I know the system itself is capable.
So the question is, why can't I connect on Android 7 ?
Update:
I've looked at a captured packet using tcpdump and wireshark and the enabled ciphers are in the ClientHello, so that should not be a problem.

Cipher Suites (18 suites)

Cipher Suite: Unknown (0xcca9)
Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 (0xc02b)
Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 (0xc02c)
Cipher Suite: Unknown (0xcca8)
Cipher Suite: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 (0xc02f)
Cipher Suite: TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 (0xc030)
Cipher Suite: TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 (0x009e)
Cipher Suite: TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 (0x009f)
Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA (0xc009)
Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA (0xc00a)
Cipher Suite: TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA (0xc013)
Cipher Suite: TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA (0xc014)
Cipher Suite: TLS_DHE_RSA_WITH_AES_128_CBC_SHA (0x0033)
Cipher Suite: TLS_DHE_RSA_WITH_AES_256_CBC_SHA (0x0039)
Cipher Suite: TLS_RSA_WITH_AES_128_GCM_SHA256 (0x009c)
Cipher Suite: TLS_RSA_WITH_AES_256_GCM_SHA384 (0x009d)
Cipher Suite: TLS_RSA_WITH_AES_128_CBC_SHA (0x002f)
Cipher Suite: TLS_RSA_WITH_AES_256_CBC_SHA (0x0035)

As you can see 0xc02f and 0xc030 match, but the next TLSv1.2 packet says: Alert (21), Handshake Failure (40).
Update 2:
These are the curves from Android 5.1 in the ClientHello:

Elliptic curves (25 curves)

Elliptic curve: sect571r1 (0x000e)
Elliptic curve: sect571k1 (0x000d)
Elliptic curve: secp521r1 (0x0019)
Elliptic curve: sect409k1 (0x000b)
Elliptic curve: sect409r1 (0x000c)
Elliptic curve: secp384r1 (0x0018)
Elliptic curve: sect283k1 (0x0009)
Elliptic curve: sect283r1 (0x000a)
Elliptic curve: secp256k1 (0x0016)
Elliptic curve: secp256r1 (0x0017)
Elliptic curve: sect239k1 (0x0008)
Elliptic curve: sect233k1 (0x0006)
Elliptic curve: sect233r1 (0x0007)
Elliptic curve: secp224k1 (0x0014)
Elliptic curve: secp224r1 (0x0015)
Elliptic curve: sect193r1 (0x0004)
Elliptic curve: sect193r2 (0x0005)
Elliptic curve: secp192k1 (0x0012)
Elliptic curve: secp192r1 (0x0013)
Elliptic curve: sect163k1 (0x0001)
Elliptic curve: sect163r1 (0x0002)
Elliptic curve: sect163r2 (0x0003)
Elliptic curve: secp160k1 (0x000f)
Elliptic curve: secp160r1 (0x0010)
Elliptic curve: secp160r2 (0x0011)

In the ServerHello secp384r1 (0x0018) is returned.
And this is from Android 7:

Elliptic curves (1 curve)

Elliptic curve: secp256r1 (0x0017)

Resulting in the Handshake Failure.
Changing the nginx configuration by removing secp384r1 or replacing it with the default (prime256v1) does get it to work. So I guess the question remains: am I able to add elliptic curves ?
The captured data is the same when using the emulator as when using an Android 7.0 device (General Mobile 4G).
Update 3:
Small update, but worth mentioning: I got it to work in the emulator using Android 7.1.1 (!). It shows the following data (again, grabbed using tcpdump and viewed using wireshark):

Elliptic curves (3 curves)

Elliptic curve: secp256r1 (0x0017)
Elliptic curve: secp384r1 (0x0018)
Elliptic curve: secp512r1 (0x0019)

It shows the same 18 Cipher Suites.
","Here you working solution for Volley:
before you create queue in singleton codes:
public class VolleyServiceSingleton {

    private RequestQueue mRequestQueue;
    private HurlStack mStack;

    private VolleyServiceSingleton(){

        SSLSocketFactoryExtended factory = null;

        try {
            factory = new SSLSocketFactoryExtended();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (KeyManagementException e) {
            e.printStackTrace();
        }


        final SSLSocketFactoryExtended finalFactory = factory;
        mStack = new HurlStack() {
            @Override
            protected HttpURLConnection createConnection(URL url) throws IOException {
                HttpsURLConnection httpsURLConnection = (HttpsURLConnection) super.createConnection(url);
                try {
                    httpsURLConnection.setSSLSocketFactory(finalFactory);
                    httpsURLConnection.setRequestProperty(""charset"", ""utf-8"");

                } catch (Exception e) {
                    e.printStackTrace();
                }
                return httpsURLConnection;
            }

        };



        mRequestQueue = Volley.newRequestQueue(YourApplication.getContext(), mStack, -1);    

    }


}

and here is SSLSocketFactoryExtended:
public class SSLSocketFactoryExtended extends SSLSocketFactory
{
    private SSLContext mSSLContext;
    private String[] mCiphers;
    private String[] mProtocols;


    public SSLSocketFactoryExtended() throws NoSuchAlgorithmException, KeyManagementException
    {
        initSSLSocketFactoryEx(null,null,null);
    }

    public String[] getDefaultCipherSuites()
    {
        return mCiphers;
    }

    public String[] getSupportedCipherSuites()
    {
        return mCiphers;
    }

    public Socket createSocket(Socket s, String host, int port, boolean autoClose) throws IOException
    {
        SSLSocketFactory factory = mSSLContext.getSocketFactory();
        SSLSocket ss = (SSLSocket)factory.createSocket(s, host, port, autoClose);

        ss.setEnabledProtocols(mProtocols);
        ss.setEnabledCipherSuites(mCiphers);

        return ss;
    }

    public Socket createSocket(InetAddress address, int port, InetAddress localAddress, int localPort) throws IOException
    {
        SSLSocketFactory factory = mSSLContext.getSocketFactory();
        SSLSocket ss = (SSLSocket)factory.createSocket(address, port, localAddress, localPort);

        ss.setEnabledProtocols(mProtocols);
        ss.setEnabledCipherSuites(mCiphers);

        return ss;
    }

    public Socket createSocket(String host, int port, InetAddress localHost, int localPort) throws IOException
    {
        SSLSocketFactory factory = mSSLContext.getSocketFactory();
        SSLSocket ss = (SSLSocket)factory.createSocket(host, port, localHost, localPort);

        ss.setEnabledProtocols(mProtocols);
        ss.setEnabledCipherSuites(mCiphers);

        return ss;
    }

    public Socket createSocket(InetAddress host, int port) throws IOException
    {
        SSLSocketFactory factory = mSSLContext.getSocketFactory();
        SSLSocket ss = (SSLSocket)factory.createSocket(host, port);

        ss.setEnabledProtocols(mProtocols);
        ss.setEnabledCipherSuites(mCiphers);

        return ss;
    }

    public Socket createSocket(String host, int port) throws IOException
    {
        SSLSocketFactory factory = mSSLContext.getSocketFactory();
        SSLSocket ss = (SSLSocket)factory.createSocket(host, port);

        ss.setEnabledProtocols(mProtocols);
        ss.setEnabledCipherSuites(mCiphers);

        return ss;
    }

    private void initSSLSocketFactoryEx(KeyManager[] km, TrustManager[] tm, SecureRandom random)
            throws NoSuchAlgorithmException, KeyManagementException
    {
        mSSLContext = SSLContext.getInstance(""TLS"");
        mSSLContext.init(km, tm, random);

        mProtocols = GetProtocolList();
        mCiphers = GetCipherList();
    }

    protected String[] GetProtocolList()
    {
        String[] protocols = { ""TLSv1"", ""TLSv1.1"", ""TLSv1.2"", ""TLSv1.3""};
        String[] availableProtocols = null;

        SSLSocket socket = null;

        try
        {
            SSLSocketFactory factory = mSSLContext.getSocketFactory();
            socket = (SSLSocket)factory.createSocket();

            availableProtocols = socket.getSupportedProtocols();
        }
        catch(Exception e)
        {
            return new String[]{ ""TLSv1"" };
        }
        finally
        {
            if(socket != null)
                try {
                    socket.close();
                } catch (IOException e) {
                }
        }

        List<String> resultList = new ArrayList<String>();
        for(int i = 0; i < protocols.length; i++)
        {
            int idx = Arrays.binarySearch(availableProtocols, protocols[i]);
            if(idx >= 0)
                resultList.add(protocols[i]);
        }

        return resultList.toArray(new String[0]);
    }

    protected String[] GetCipherList()
    {
        List<String> resultList = new ArrayList<String>();
        SSLSocketFactory factory = mSSLContext.getSocketFactory();
        for(String s : factory.getSupportedCipherSuites()){
            Log.e(""CipherSuite type = "",s);
            resultList.add(s);
        }
        return resultList.toArray(new String[resultList.size()]);
    }

}

in this codes I simple add all Ciphers that are supported by device, for me this works ), may be will help someone ) Cheers )
p.s. no need to add security network config parameter in manifest.
","41785","<android><ssl><elliptic-curve><sslhandshakeexception><android-7.0-nougat>","55","5","8","2019-11-03 16:11:55","","12","27","-1","","2017-05-23 12:26:17","2016-08-24 21:39:27",""
"39133437","SSLHandshakeException: Handshake failed on Android N/7.0","I'm working on an app for which the (power)users have to set up their own server (i.e. nginx) to run the backend application. The corresponding domain needs to be configured in the app so it can connect. I've been testing primarily on my own phone (sony z3c) and started developing for 5.1. Later I received an update for 6.0 but still maintained a working 5.1 inside the emulator. Not too long ago, I started to work on an AVD with an image for 7.0 and to my suprise it won't connect to my server, telling me the ssl handshake failed. My nginx configuration is pretty strict, but it works for both 5.1 and 6.0, so .... ?!
Here is what I know:

I use v24 for support libs, i.e. my compileSdkVersion is 24.
I use Volley v1.0.0.
I've tried the TLSSocketFactory, but it doesn't change anything. This seems to be used most of the times to prevent SSL3 use for older SDK versions anyway.
I've tried increasing the timeout, but it doesn't change anything.
I've tried using HttpURLConnection directly, but it doesn't change anything apart from the stack trace (it's without the volley references, but identical otherwise).

Without the TLSSocketFactory the request are made through a bare request queue, instantiated with Volley.newRequestQueue(context).
This is what I see in android studio:
W/System.err: com.android.volley.NoConnectionError: javax.net.ssl.SSLHandshakeException: Connection closed by peer
W/System.err:     at com.android.volley.toolbox.BasicNetwork.performRequest(BasicNetwork.java:151)
W/System.err:     at com.android.volley.NetworkDispatcher.run(NetworkDispatcher.java:112)
W/System.err: Caused by: javax.net.ssl.SSLHandshakeException: Connection closed by peer
W/System.err:     at com.android.org.conscrypt.NativeCrypto.SSL_do_handshake(Native Method)
W/System.err:     at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:357)
W/System.err:     at com.android.okhttp.Connection.connectTls(Connection.java:235)
W/System.err:     at com.android.okhttp.Connection.connectSocket(Connection.java:199)
W/System.err:     at com.android.okhttp.Connection.connect(Connection.java:172)
W/System.err:     at com.android.okhttp.Connection.connectAndSetOwner(Connection.java:367)
W/System.err:     at com.android.okhttp.OkHttpClient$1.connectAndSetOwner(OkHttpClient.java:130)
W/System.err:     at com.android.okhttp.internal.http.HttpEngine.connect(HttpEngine.java:329)
W/System.err:     at com.android.okhttp.internal.http.HttpEngine.sendRequest(HttpEngine.java:246)
W/System.err:     at com.android.okhttp.internal.huc.HttpURLConnectionImpl.execute(HttpURLConnectionImpl.java:457)
W/System.err:     at com.android.okhttp.internal.huc.HttpURLConnectionImpl.connect(HttpURLConnectionImpl.java:126)
W/System.err:     at com.android.okhttp.internal.huc.HttpURLConnectionImpl.getOutputStream(HttpURLConnectionImpl.java:257)
W/System.err:     at com.android.okhttp.internal.huc.DelegatingHttpsURLConnection.getOutputStream(DelegatingHttpsURLConnection.java:218)
W/System.err:     at com.android.okhttp.internal.huc.HttpsURLConnectionImpl.getOutputStream(HttpsURLConnectionImpl.java)
W/System.err:     at com.android.volley.toolbox.HurlStack.addBodyIfExists(HurlStack.java:264)
W/System.err:     at com.android.volley.toolbox.HurlStack.setConnectionParametersForRequest(HurlStack.java:234)
W/System.err:     at com.android.volley.toolbox.HurlStack.performRequest(HurlStack.java:107)
W/System.err:     at com.android.volley.toolbox.BasicNetwork.performRequest(BasicNetwork.java:96)
W/System.err:   ... 1 more
W/System.err:   Suppressed: javax.net.ssl.SSLHandshakeException: Handshake failed
W/System.err:     at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:429)
W/System.err:       ... 17 more
W/System.err:   Caused by: javax.net.ssl.SSLProtocolException: SSL handshake terminated: ssl=0x7ffef3748040: Failure in SSL library, usually a protocol error
W/System.err: error:10000410:SSL routines:OPENSSL_internal:SSLV3_ALERT_HANDSHAKE_FAILURE (external/boringssl/src/ssl/s3_pkt.c:610 0x7ffeda1d2240:0x00000001)
W/System.err: error:1000009a:SSL routines:OPENSSL_internal:HANDSHAKE_FAILURE_ON_CLIENT_HELLO (external/boringssl/src/ssl/s3_clnt.c:764 0x7ffee9d2b70a:0x00000000)
W/System.err:     at com.android.org.conscrypt.NativeCrypto.SSL_do_handshake(Native Method)
W/System.err:     at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:357)
W/System.err:       ... 17 more

Since it says SSLV3_ALERT_HANDSHAKE_FAILURE I can only assume it for some reason tries to connect using SSLv3 and fails, but this doesn't make any sense to me whatsoever. It might be a cipher-issue, but how can I tell what it is trying to use ? I would rather not enable a ciphers on the server, make a connection attempt and repeat.
My nginx site uses a let's encrypt certificate and has the following configuration:
ssl_stapling on;
ssl_stapling_verify on;
ssl_trusted_certificate /etc/ssl/certs/lets-encrypt-x1-cross-signed.pem;
ssl_ciphers ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:!aNULL;
ssl_dhparam /etc/ssl/certs/dhparam.pem;
ssl_ecdh_curve secp384r1;
ssl_prefer_server_ciphers on;
ssl_protocols TLSv1.2;

To test these ciphers I've a script and it confirms these ciphers (run on a wheezy vps outside the server's network):

Testing ECDHE-RSA-AES256-GCM-SHA384...YES
Testing ECDHE-ECDSA-AES256-GCM-SHA384...NO (sslv3 alert handshake failure)
Testing ECDHE-RSA-AES256-SHA384...NO (sslv3 alert handshake failure)
Testing ECDHE-ECDSA-AES256-SHA384...NO (sslv3 alert handshake failure)
Testing ECDHE-RSA-AES256-SHA...NO (sslv3 alert handshake failure)
Testing ECDHE-ECDSA-AES256-SHA...NO (sslv3 alert handshake failure)
Testing SRP-DSS-AES-256-CBC-SHA...NO (sslv3 alert handshake failure)
Testing SRP-RSA-AES-256-CBC-SHA...NO (sslv3 alert handshake failure)
Testing DHE-DSS-AES256-GCM-SHA384...NO (sslv3 alert handshake failure)
Testing DHE-RSA-AES256-GCM-SHA384...NO (sslv3 alert handshake failure)
Testing DHE-RSA-AES256-SHA256...NO (sslv3 alert handshake failure)
Testing DHE-DSS-AES256-SHA256...NO (sslv3 alert handshake failure)
Testing DHE-RSA-AES256-SHA...NO (sslv3 alert handshake failure)
Testing DHE-DSS-AES256-SHA...NO (sslv3 alert handshake failure)
Testing DHE-RSA-CAMELLIA256-SHA...NO (sslv3 alert handshake failure)
Testing DHE-DSS-CAMELLIA256-SHA...NO (sslv3 alert handshake failure)
Testing AECDH-AES256-SHA...NO (sslv3 alert handshake failure)
Testing SRP-AES-256-CBC-SHA...NO (sslv3 alert handshake failure)
Testing ADH-AES256-GCM-SHA384...NO (sslv3 alert handshake failure)
Testing ADH-AES256-SHA256...NO (sslv3 alert handshake failure)
Testing ADH-AES256-SHA...NO (sslv3 alert handshake failure)
Testing ADH-CAMELLIA256-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-AES256-GCM-SHA384...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-AES256-GCM-SHA384...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-AES256-SHA384...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-AES256-SHA384...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-AES256-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-AES256-SHA...NO (sslv3 alert handshake failure)
Testing AES256-GCM-SHA384...NO (sslv3 alert handshake failure)
Testing AES256-SHA256...NO (sslv3 alert handshake failure)
Testing AES256-SHA...NO (sslv3 alert handshake failure)
Testing CAMELLIA256-SHA...NO (sslv3 alert handshake failure)
Testing PSK-AES256-CBC-SHA...NO (no ciphers available)
Testing ECDHE-RSA-DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing ECDHE-ECDSA-DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing SRP-DSS-3DES-EDE-CBC-SHA...NO (sslv3 alert handshake failure)
Testing SRP-RSA-3DES-EDE-CBC-SHA...NO (sslv3 alert handshake failure)
Testing EDH-RSA-DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing EDH-DSS-DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing AECDH-DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing SRP-3DES-EDE-CBC-SHA...NO (sslv3 alert handshake failure)
Testing ADH-DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing PSK-3DES-EDE-CBC-SHA...NO (no ciphers available)
Testing ECDHE-RSA-AES128-GCM-SHA256...YES
Testing ECDHE-ECDSA-AES128-GCM-SHA256...NO (sslv3 alert handshake failure)
Testing ECDHE-RSA-AES128-SHA256...NO (sslv3 alert handshake failure)
Testing ECDHE-ECDSA-AES128-SHA256...NO (sslv3 alert handshake failure)
Testing ECDHE-RSA-AES128-SHA...NO (sslv3 alert handshake failure)
Testing ECDHE-ECDSA-AES128-SHA...NO (sslv3 alert handshake failure)
Testing SRP-DSS-AES-128-CBC-SHA...NO (sslv3 alert handshake failure)
Testing SRP-RSA-AES-128-CBC-SHA...NO (sslv3 alert handshake failure)
Testing DHE-DSS-AES128-GCM-SHA256...NO (sslv3 alert handshake failure)
Testing DHE-RSA-AES128-GCM-SHA256...NO (sslv3 alert handshake failure)
Testing DHE-RSA-AES128-SHA256...NO (sslv3 alert handshake failure)
Testing DHE-DSS-AES128-SHA256...NO (sslv3 alert handshake failure)
Testing DHE-RSA-AES128-SHA...NO (sslv3 alert handshake failure)
Testing DHE-DSS-AES128-SHA...NO (sslv3 alert handshake failure)
Testing DHE-RSA-SEED-SHA...NO (sslv3 alert handshake failure)
Testing DHE-DSS-SEED-SHA...NO (sslv3 alert handshake failure)
Testing DHE-RSA-CAMELLIA128-SHA...NO (sslv3 alert handshake failure)
Testing DHE-DSS-CAMELLIA128-SHA...NO (sslv3 alert handshake failure)
Testing AECDH-AES128-SHA...NO (sslv3 alert handshake failure)
Testing SRP-AES-128-CBC-SHA...NO (sslv3 alert handshake failure)
Testing ADH-AES128-GCM-SHA256...NO (sslv3 alert handshake failure)
Testing ADH-AES128-SHA256...NO (sslv3 alert handshake failure)
Testing ADH-AES128-SHA...NO (sslv3 alert handshake failure)
Testing ADH-SEED-SHA...NO (sslv3 alert handshake failure)
Testing ADH-CAMELLIA128-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-AES128-GCM-SHA256...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-AES128-GCM-SHA256...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-AES128-SHA256...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-AES128-SHA256...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-AES128-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-AES128-SHA...NO (sslv3 alert handshake failure)
Testing AES128-GCM-SHA256...NO (sslv3 alert handshake failure)
Testing AES128-SHA256...NO (sslv3 alert handshake failure)
Testing AES128-SHA...NO (sslv3 alert handshake failure)
Testing SEED-SHA...NO (sslv3 alert handshake failure)
Testing CAMELLIA128-SHA...NO (sslv3 alert handshake failure)
Testing PSK-AES128-CBC-SHA...NO (no ciphers available)
Testing ECDHE-RSA-RC4-SHA...NO (sslv3 alert handshake failure)
Testing ECDHE-ECDSA-RC4-SHA...NO (sslv3 alert handshake failure)
Testing AECDH-RC4-SHA...NO (sslv3 alert handshake failure)
Testing ADH-RC4-MD5...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-RC4-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-RC4-SHA...NO (sslv3 alert handshake failure)
Testing RC4-SHA...NO (sslv3 alert handshake failure)
Testing RC4-MD5...NO (sslv3 alert handshake failure)
Testing PSK-RC4-SHA...NO (no ciphers available)
Testing EDH-RSA-DES-CBC-SHA...NO (sslv3 alert handshake failure)
Testing EDH-DSS-DES-CBC-SHA...NO (sslv3 alert handshake failure)
Testing ADH-DES-CBC-SHA...NO (sslv3 alert handshake failure)
Testing DES-CBC-SHA...NO (sslv3 alert handshake failure)
Testing EXP-EDH-RSA-DES-CBC-SHA...NO (sslv3 alert handshake failure)
Testing EXP-EDH-DSS-DES-CBC-SHA...NO (sslv3 alert handshake failure)
Testing EXP-ADH-DES-CBC-SHA...NO (sslv3 alert handshake failure)
Testing EXP-DES-CBC-SHA...NO (sslv3 alert handshake failure)
Testing EXP-RC2-CBC-MD5...NO (sslv3 alert handshake failure)
Testing EXP-ADH-RC4-MD5...NO (sslv3 alert handshake failure)
Testing EXP-RC4-MD5...NO (sslv3 alert handshake failure)
Testing ECDHE-RSA-NULL-SHA...NO (sslv3 alert handshake failure)
Testing ECDHE-ECDSA-NULL-SHA...NO (sslv3 alert handshake failure)
Testing AECDH-NULL-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-NULL-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-NULL-SHA...NO (sslv3 alert handshake failure)
Testing NULL-SHA256...NO (sslv3 alert handshake failure)
Testing NULL-SHA...NO (sslv3 alert handshake failure)
Testing NULL-MD5...NO (sslv3 alert handshake failure

I can open the server-url in the emulator's browser and get a perfect json response so I know the system itself is capable.
So the question is, why can't I connect on Android 7 ?
Update:
I've looked at a captured packet using tcpdump and wireshark and the enabled ciphers are in the ClientHello, so that should not be a problem.

Cipher Suites (18 suites)

Cipher Suite: Unknown (0xcca9)
Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 (0xc02b)
Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 (0xc02c)
Cipher Suite: Unknown (0xcca8)
Cipher Suite: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 (0xc02f)
Cipher Suite: TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 (0xc030)
Cipher Suite: TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 (0x009e)
Cipher Suite: TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 (0x009f)
Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA (0xc009)
Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA (0xc00a)
Cipher Suite: TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA (0xc013)
Cipher Suite: TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA (0xc014)
Cipher Suite: TLS_DHE_RSA_WITH_AES_128_CBC_SHA (0x0033)
Cipher Suite: TLS_DHE_RSA_WITH_AES_256_CBC_SHA (0x0039)
Cipher Suite: TLS_RSA_WITH_AES_128_GCM_SHA256 (0x009c)
Cipher Suite: TLS_RSA_WITH_AES_256_GCM_SHA384 (0x009d)
Cipher Suite: TLS_RSA_WITH_AES_128_CBC_SHA (0x002f)
Cipher Suite: TLS_RSA_WITH_AES_256_CBC_SHA (0x0035)

As you can see 0xc02f and 0xc030 match, but the next TLSv1.2 packet says: Alert (21), Handshake Failure (40).
Update 2:
These are the curves from Android 5.1 in the ClientHello:

Elliptic curves (25 curves)

Elliptic curve: sect571r1 (0x000e)
Elliptic curve: sect571k1 (0x000d)
Elliptic curve: secp521r1 (0x0019)
Elliptic curve: sect409k1 (0x000b)
Elliptic curve: sect409r1 (0x000c)
Elliptic curve: secp384r1 (0x0018)
Elliptic curve: sect283k1 (0x0009)
Elliptic curve: sect283r1 (0x000a)
Elliptic curve: secp256k1 (0x0016)
Elliptic curve: secp256r1 (0x0017)
Elliptic curve: sect239k1 (0x0008)
Elliptic curve: sect233k1 (0x0006)
Elliptic curve: sect233r1 (0x0007)
Elliptic curve: secp224k1 (0x0014)
Elliptic curve: secp224r1 (0x0015)
Elliptic curve: sect193r1 (0x0004)
Elliptic curve: sect193r2 (0x0005)
Elliptic curve: secp192k1 (0x0012)
Elliptic curve: secp192r1 (0x0013)
Elliptic curve: sect163k1 (0x0001)
Elliptic curve: sect163r1 (0x0002)
Elliptic curve: sect163r2 (0x0003)
Elliptic curve: secp160k1 (0x000f)
Elliptic curve: secp160r1 (0x0010)
Elliptic curve: secp160r2 (0x0011)

In the ServerHello secp384r1 (0x0018) is returned.
And this is from Android 7:

Elliptic curves (1 curve)

Elliptic curve: secp256r1 (0x0017)

Resulting in the Handshake Failure.
Changing the nginx configuration by removing secp384r1 or replacing it with the default (prime256v1) does get it to work. So I guess the question remains: am I able to add elliptic curves ?
The captured data is the same when using the emulator as when using an Android 7.0 device (General Mobile 4G).
Update 3:
Small update, but worth mentioning: I got it to work in the emulator using Android 7.1.1 (!). It shows the following data (again, grabbed using tcpdump and viewed using wireshark):

Elliptic curves (3 curves)

Elliptic curve: secp256r1 (0x0017)
Elliptic curve: secp384r1 (0x0018)
Elliptic curve: secp512r1 (0x0019)

It shows the same 18 Cipher Suites.
","I had the problem with a Self Signed Certificate and the issue was in the cipher which wasn't accepted by Android 7.0
I ran: openssl s_client -showcerts -connect <domain>:<port>
in the result I found: 
Protocol : TLSv1
Cipher   : DHE-RSA-AES256-SHA

I searched for the Android Equivalent of the Cipher and added it to my Retrofit Restadapter: 
ConnectionSpec spec = new ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS)
            .tlsVersions(TlsVersion.TLS_1_2)
            .cipherSuites(

CipherSuite.TLS_DHE_RSA_WITH_AES_256_CBC_SHA)
            .build();

clientBuilder.connectionSpecs(Collections.singletonList(spec));

From here every connection with the correct certificate pinning or a correct certificate but with the 'wrong' cipher according to Android 7.0 was accepted. 

When looking back at this answer a year later I have to admit I'm still happy I posted it, on the other hand, if you are in the position to change the certificate to the correct Cypher suite please do this always over ""downgrading"" te accepted suites in your app. If you have to work with a self-signed certificate (for example for embedded) this is a working solution for you.

","41785","<android><ssl><elliptic-curve><sslhandshakeexception><android-7.0-nougat>","55","16","8","2019-11-03 16:11:55","","12","27","-1","","2017-05-23 12:26:17","2016-08-24 21:39:27",""
"39133437","SSLHandshakeException: Handshake failed on Android N/7.0","I'm working on an app for which the (power)users have to set up their own server (i.e. nginx) to run the backend application. The corresponding domain needs to be configured in the app so it can connect. I've been testing primarily on my own phone (sony z3c) and started developing for 5.1. Later I received an update for 6.0 but still maintained a working 5.1 inside the emulator. Not too long ago, I started to work on an AVD with an image for 7.0 and to my suprise it won't connect to my server, telling me the ssl handshake failed. My nginx configuration is pretty strict, but it works for both 5.1 and 6.0, so .... ?!
Here is what I know:

I use v24 for support libs, i.e. my compileSdkVersion is 24.
I use Volley v1.0.0.
I've tried the TLSSocketFactory, but it doesn't change anything. This seems to be used most of the times to prevent SSL3 use for older SDK versions anyway.
I've tried increasing the timeout, but it doesn't change anything.
I've tried using HttpURLConnection directly, but it doesn't change anything apart from the stack trace (it's without the volley references, but identical otherwise).

Without the TLSSocketFactory the request are made through a bare request queue, instantiated with Volley.newRequestQueue(context).
This is what I see in android studio:
W/System.err: com.android.volley.NoConnectionError: javax.net.ssl.SSLHandshakeException: Connection closed by peer
W/System.err:     at com.android.volley.toolbox.BasicNetwork.performRequest(BasicNetwork.java:151)
W/System.err:     at com.android.volley.NetworkDispatcher.run(NetworkDispatcher.java:112)
W/System.err: Caused by: javax.net.ssl.SSLHandshakeException: Connection closed by peer
W/System.err:     at com.android.org.conscrypt.NativeCrypto.SSL_do_handshake(Native Method)
W/System.err:     at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:357)
W/System.err:     at com.android.okhttp.Connection.connectTls(Connection.java:235)
W/System.err:     at com.android.okhttp.Connection.connectSocket(Connection.java:199)
W/System.err:     at com.android.okhttp.Connection.connect(Connection.java:172)
W/System.err:     at com.android.okhttp.Connection.connectAndSetOwner(Connection.java:367)
W/System.err:     at com.android.okhttp.OkHttpClient$1.connectAndSetOwner(OkHttpClient.java:130)
W/System.err:     at com.android.okhttp.internal.http.HttpEngine.connect(HttpEngine.java:329)
W/System.err:     at com.android.okhttp.internal.http.HttpEngine.sendRequest(HttpEngine.java:246)
W/System.err:     at com.android.okhttp.internal.huc.HttpURLConnectionImpl.execute(HttpURLConnectionImpl.java:457)
W/System.err:     at com.android.okhttp.internal.huc.HttpURLConnectionImpl.connect(HttpURLConnectionImpl.java:126)
W/System.err:     at com.android.okhttp.internal.huc.HttpURLConnectionImpl.getOutputStream(HttpURLConnectionImpl.java:257)
W/System.err:     at com.android.okhttp.internal.huc.DelegatingHttpsURLConnection.getOutputStream(DelegatingHttpsURLConnection.java:218)
W/System.err:     at com.android.okhttp.internal.huc.HttpsURLConnectionImpl.getOutputStream(HttpsURLConnectionImpl.java)
W/System.err:     at com.android.volley.toolbox.HurlStack.addBodyIfExists(HurlStack.java:264)
W/System.err:     at com.android.volley.toolbox.HurlStack.setConnectionParametersForRequest(HurlStack.java:234)
W/System.err:     at com.android.volley.toolbox.HurlStack.performRequest(HurlStack.java:107)
W/System.err:     at com.android.volley.toolbox.BasicNetwork.performRequest(BasicNetwork.java:96)
W/System.err:   ... 1 more
W/System.err:   Suppressed: javax.net.ssl.SSLHandshakeException: Handshake failed
W/System.err:     at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:429)
W/System.err:       ... 17 more
W/System.err:   Caused by: javax.net.ssl.SSLProtocolException: SSL handshake terminated: ssl=0x7ffef3748040: Failure in SSL library, usually a protocol error
W/System.err: error:10000410:SSL routines:OPENSSL_internal:SSLV3_ALERT_HANDSHAKE_FAILURE (external/boringssl/src/ssl/s3_pkt.c:610 0x7ffeda1d2240:0x00000001)
W/System.err: error:1000009a:SSL routines:OPENSSL_internal:HANDSHAKE_FAILURE_ON_CLIENT_HELLO (external/boringssl/src/ssl/s3_clnt.c:764 0x7ffee9d2b70a:0x00000000)
W/System.err:     at com.android.org.conscrypt.NativeCrypto.SSL_do_handshake(Native Method)
W/System.err:     at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:357)
W/System.err:       ... 17 more

Since it says SSLV3_ALERT_HANDSHAKE_FAILURE I can only assume it for some reason tries to connect using SSLv3 and fails, but this doesn't make any sense to me whatsoever. It might be a cipher-issue, but how can I tell what it is trying to use ? I would rather not enable a ciphers on the server, make a connection attempt and repeat.
My nginx site uses a let's encrypt certificate and has the following configuration:
ssl_stapling on;
ssl_stapling_verify on;
ssl_trusted_certificate /etc/ssl/certs/lets-encrypt-x1-cross-signed.pem;
ssl_ciphers ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:!aNULL;
ssl_dhparam /etc/ssl/certs/dhparam.pem;
ssl_ecdh_curve secp384r1;
ssl_prefer_server_ciphers on;
ssl_protocols TLSv1.2;

To test these ciphers I've a script and it confirms these ciphers (run on a wheezy vps outside the server's network):

Testing ECDHE-RSA-AES256-GCM-SHA384...YES
Testing ECDHE-ECDSA-AES256-GCM-SHA384...NO (sslv3 alert handshake failure)
Testing ECDHE-RSA-AES256-SHA384...NO (sslv3 alert handshake failure)
Testing ECDHE-ECDSA-AES256-SHA384...NO (sslv3 alert handshake failure)
Testing ECDHE-RSA-AES256-SHA...NO (sslv3 alert handshake failure)
Testing ECDHE-ECDSA-AES256-SHA...NO (sslv3 alert handshake failure)
Testing SRP-DSS-AES-256-CBC-SHA...NO (sslv3 alert handshake failure)
Testing SRP-RSA-AES-256-CBC-SHA...NO (sslv3 alert handshake failure)
Testing DHE-DSS-AES256-GCM-SHA384...NO (sslv3 alert handshake failure)
Testing DHE-RSA-AES256-GCM-SHA384...NO (sslv3 alert handshake failure)
Testing DHE-RSA-AES256-SHA256...NO (sslv3 alert handshake failure)
Testing DHE-DSS-AES256-SHA256...NO (sslv3 alert handshake failure)
Testing DHE-RSA-AES256-SHA...NO (sslv3 alert handshake failure)
Testing DHE-DSS-AES256-SHA...NO (sslv3 alert handshake failure)
Testing DHE-RSA-CAMELLIA256-SHA...NO (sslv3 alert handshake failure)
Testing DHE-DSS-CAMELLIA256-SHA...NO (sslv3 alert handshake failure)
Testing AECDH-AES256-SHA...NO (sslv3 alert handshake failure)
Testing SRP-AES-256-CBC-SHA...NO (sslv3 alert handshake failure)
Testing ADH-AES256-GCM-SHA384...NO (sslv3 alert handshake failure)
Testing ADH-AES256-SHA256...NO (sslv3 alert handshake failure)
Testing ADH-AES256-SHA...NO (sslv3 alert handshake failure)
Testing ADH-CAMELLIA256-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-AES256-GCM-SHA384...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-AES256-GCM-SHA384...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-AES256-SHA384...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-AES256-SHA384...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-AES256-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-AES256-SHA...NO (sslv3 alert handshake failure)
Testing AES256-GCM-SHA384...NO (sslv3 alert handshake failure)
Testing AES256-SHA256...NO (sslv3 alert handshake failure)
Testing AES256-SHA...NO (sslv3 alert handshake failure)
Testing CAMELLIA256-SHA...NO (sslv3 alert handshake failure)
Testing PSK-AES256-CBC-SHA...NO (no ciphers available)
Testing ECDHE-RSA-DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing ECDHE-ECDSA-DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing SRP-DSS-3DES-EDE-CBC-SHA...NO (sslv3 alert handshake failure)
Testing SRP-RSA-3DES-EDE-CBC-SHA...NO (sslv3 alert handshake failure)
Testing EDH-RSA-DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing EDH-DSS-DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing AECDH-DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing SRP-3DES-EDE-CBC-SHA...NO (sslv3 alert handshake failure)
Testing ADH-DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing PSK-3DES-EDE-CBC-SHA...NO (no ciphers available)
Testing ECDHE-RSA-AES128-GCM-SHA256...YES
Testing ECDHE-ECDSA-AES128-GCM-SHA256...NO (sslv3 alert handshake failure)
Testing ECDHE-RSA-AES128-SHA256...NO (sslv3 alert handshake failure)
Testing ECDHE-ECDSA-AES128-SHA256...NO (sslv3 alert handshake failure)
Testing ECDHE-RSA-AES128-SHA...NO (sslv3 alert handshake failure)
Testing ECDHE-ECDSA-AES128-SHA...NO (sslv3 alert handshake failure)
Testing SRP-DSS-AES-128-CBC-SHA...NO (sslv3 alert handshake failure)
Testing SRP-RSA-AES-128-CBC-SHA...NO (sslv3 alert handshake failure)
Testing DHE-DSS-AES128-GCM-SHA256...NO (sslv3 alert handshake failure)
Testing DHE-RSA-AES128-GCM-SHA256...NO (sslv3 alert handshake failure)
Testing DHE-RSA-AES128-SHA256...NO (sslv3 alert handshake failure)
Testing DHE-DSS-AES128-SHA256...NO (sslv3 alert handshake failure)
Testing DHE-RSA-AES128-SHA...NO (sslv3 alert handshake failure)
Testing DHE-DSS-AES128-SHA...NO (sslv3 alert handshake failure)
Testing DHE-RSA-SEED-SHA...NO (sslv3 alert handshake failure)
Testing DHE-DSS-SEED-SHA...NO (sslv3 alert handshake failure)
Testing DHE-RSA-CAMELLIA128-SHA...NO (sslv3 alert handshake failure)
Testing DHE-DSS-CAMELLIA128-SHA...NO (sslv3 alert handshake failure)
Testing AECDH-AES128-SHA...NO (sslv3 alert handshake failure)
Testing SRP-AES-128-CBC-SHA...NO (sslv3 alert handshake failure)
Testing ADH-AES128-GCM-SHA256...NO (sslv3 alert handshake failure)
Testing ADH-AES128-SHA256...NO (sslv3 alert handshake failure)
Testing ADH-AES128-SHA...NO (sslv3 alert handshake failure)
Testing ADH-SEED-SHA...NO (sslv3 alert handshake failure)
Testing ADH-CAMELLIA128-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-AES128-GCM-SHA256...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-AES128-GCM-SHA256...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-AES128-SHA256...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-AES128-SHA256...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-AES128-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-AES128-SHA...NO (sslv3 alert handshake failure)
Testing AES128-GCM-SHA256...NO (sslv3 alert handshake failure)
Testing AES128-SHA256...NO (sslv3 alert handshake failure)
Testing AES128-SHA...NO (sslv3 alert handshake failure)
Testing SEED-SHA...NO (sslv3 alert handshake failure)
Testing CAMELLIA128-SHA...NO (sslv3 alert handshake failure)
Testing PSK-AES128-CBC-SHA...NO (no ciphers available)
Testing ECDHE-RSA-RC4-SHA...NO (sslv3 alert handshake failure)
Testing ECDHE-ECDSA-RC4-SHA...NO (sslv3 alert handshake failure)
Testing AECDH-RC4-SHA...NO (sslv3 alert handshake failure)
Testing ADH-RC4-MD5...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-RC4-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-RC4-SHA...NO (sslv3 alert handshake failure)
Testing RC4-SHA...NO (sslv3 alert handshake failure)
Testing RC4-MD5...NO (sslv3 alert handshake failure)
Testing PSK-RC4-SHA...NO (no ciphers available)
Testing EDH-RSA-DES-CBC-SHA...NO (sslv3 alert handshake failure)
Testing EDH-DSS-DES-CBC-SHA...NO (sslv3 alert handshake failure)
Testing ADH-DES-CBC-SHA...NO (sslv3 alert handshake failure)
Testing DES-CBC-SHA...NO (sslv3 alert handshake failure)
Testing EXP-EDH-RSA-DES-CBC-SHA...NO (sslv3 alert handshake failure)
Testing EXP-EDH-DSS-DES-CBC-SHA...NO (sslv3 alert handshake failure)
Testing EXP-ADH-DES-CBC-SHA...NO (sslv3 alert handshake failure)
Testing EXP-DES-CBC-SHA...NO (sslv3 alert handshake failure)
Testing EXP-RC2-CBC-MD5...NO (sslv3 alert handshake failure)
Testing EXP-ADH-RC4-MD5...NO (sslv3 alert handshake failure)
Testing EXP-RC4-MD5...NO (sslv3 alert handshake failure)
Testing ECDHE-RSA-NULL-SHA...NO (sslv3 alert handshake failure)
Testing ECDHE-ECDSA-NULL-SHA...NO (sslv3 alert handshake failure)
Testing AECDH-NULL-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-NULL-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-NULL-SHA...NO (sslv3 alert handshake failure)
Testing NULL-SHA256...NO (sslv3 alert handshake failure)
Testing NULL-SHA...NO (sslv3 alert handshake failure)
Testing NULL-MD5...NO (sslv3 alert handshake failure

I can open the server-url in the emulator's browser and get a perfect json response so I know the system itself is capable.
So the question is, why can't I connect on Android 7 ?
Update:
I've looked at a captured packet using tcpdump and wireshark and the enabled ciphers are in the ClientHello, so that should not be a problem.

Cipher Suites (18 suites)

Cipher Suite: Unknown (0xcca9)
Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 (0xc02b)
Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 (0xc02c)
Cipher Suite: Unknown (0xcca8)
Cipher Suite: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 (0xc02f)
Cipher Suite: TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 (0xc030)
Cipher Suite: TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 (0x009e)
Cipher Suite: TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 (0x009f)
Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA (0xc009)
Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA (0xc00a)
Cipher Suite: TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA (0xc013)
Cipher Suite: TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA (0xc014)
Cipher Suite: TLS_DHE_RSA_WITH_AES_128_CBC_SHA (0x0033)
Cipher Suite: TLS_DHE_RSA_WITH_AES_256_CBC_SHA (0x0039)
Cipher Suite: TLS_RSA_WITH_AES_128_GCM_SHA256 (0x009c)
Cipher Suite: TLS_RSA_WITH_AES_256_GCM_SHA384 (0x009d)
Cipher Suite: TLS_RSA_WITH_AES_128_CBC_SHA (0x002f)
Cipher Suite: TLS_RSA_WITH_AES_256_CBC_SHA (0x0035)

As you can see 0xc02f and 0xc030 match, but the next TLSv1.2 packet says: Alert (21), Handshake Failure (40).
Update 2:
These are the curves from Android 5.1 in the ClientHello:

Elliptic curves (25 curves)

Elliptic curve: sect571r1 (0x000e)
Elliptic curve: sect571k1 (0x000d)
Elliptic curve: secp521r1 (0x0019)
Elliptic curve: sect409k1 (0x000b)
Elliptic curve: sect409r1 (0x000c)
Elliptic curve: secp384r1 (0x0018)
Elliptic curve: sect283k1 (0x0009)
Elliptic curve: sect283r1 (0x000a)
Elliptic curve: secp256k1 (0x0016)
Elliptic curve: secp256r1 (0x0017)
Elliptic curve: sect239k1 (0x0008)
Elliptic curve: sect233k1 (0x0006)
Elliptic curve: sect233r1 (0x0007)
Elliptic curve: secp224k1 (0x0014)
Elliptic curve: secp224r1 (0x0015)
Elliptic curve: sect193r1 (0x0004)
Elliptic curve: sect193r2 (0x0005)
Elliptic curve: secp192k1 (0x0012)
Elliptic curve: secp192r1 (0x0013)
Elliptic curve: sect163k1 (0x0001)
Elliptic curve: sect163r1 (0x0002)
Elliptic curve: sect163r2 (0x0003)
Elliptic curve: secp160k1 (0x000f)
Elliptic curve: secp160r1 (0x0010)
Elliptic curve: secp160r2 (0x0011)

In the ServerHello secp384r1 (0x0018) is returned.
And this is from Android 7:

Elliptic curves (1 curve)

Elliptic curve: secp256r1 (0x0017)

Resulting in the Handshake Failure.
Changing the nginx configuration by removing secp384r1 or replacing it with the default (prime256v1) does get it to work. So I guess the question remains: am I able to add elliptic curves ?
The captured data is the same when using the emulator as when using an Android 7.0 device (General Mobile 4G).
Update 3:
Small update, but worth mentioning: I got it to work in the emulator using Android 7.1.1 (!). It shows the following data (again, grabbed using tcpdump and viewed using wireshark):

Elliptic curves (3 curves)

Elliptic curve: secp256r1 (0x0017)
Elliptic curve: secp384r1 (0x0018)
Elliptic curve: secp512r1 (0x0019)

It shows the same 18 Cipher Suites.
","This is a known regression in Android 7.0, acknowledged by Google and fixed sometime before the release of Android 7.1.1. Here is the bug report: https://code.google.com/p/android/issues/detail?id=224438.
To be clear, the bug here is that 7.0 only supports ONE elliptic curve: prime256v1 aka secp256r1 aka NIST P-256, as Cornelis points out in the question. So if your users are facing this issue, these are the workarounds available to you (ignoring the fact that your users should ideally just upgrade to Android 7.1.1):

Configure your server to use the elliptic curve prime256v1. For example, in Nginx 1.10 you do this by setting ssl_ecdh_curve prime256v1;.
If that doesn't work, use older cipher suites that don't rely on elliptic-curve cryptography (e.g., DHE-RSA-AES256-GCM-SHA384) (make sure you understand what you're doing here in terms of data security)

NOTE: I am not an expert in elliptic-curve cryptography, make sure to do your own research on the security implications of my suggestions. Here are some other links I referred to while writing this answer:

https://community.letsencrypt.org/t/warning-android-7-0-clients-not-browsers-can-only-use-curve-prime256v1/23212
https://github.com/nodejs/node/issues/1495

","41785","<android><ssl><elliptic-curve><sslhandshakeexception><android-7.0-nougat>","55","52","8","2019-11-03 16:11:55","","12","27","-1","","2017-05-23 12:26:17","2016-08-24 21:39:27",""
"39133437","SSLHandshakeException: Handshake failed on Android N/7.0","I'm working on an app for which the (power)users have to set up their own server (i.e. nginx) to run the backend application. The corresponding domain needs to be configured in the app so it can connect. I've been testing primarily on my own phone (sony z3c) and started developing for 5.1. Later I received an update for 6.0 but still maintained a working 5.1 inside the emulator. Not too long ago, I started to work on an AVD with an image for 7.0 and to my suprise it won't connect to my server, telling me the ssl handshake failed. My nginx configuration is pretty strict, but it works for both 5.1 and 6.0, so .... ?!
Here is what I know:

I use v24 for support libs, i.e. my compileSdkVersion is 24.
I use Volley v1.0.0.
I've tried the TLSSocketFactory, but it doesn't change anything. This seems to be used most of the times to prevent SSL3 use for older SDK versions anyway.
I've tried increasing the timeout, but it doesn't change anything.
I've tried using HttpURLConnection directly, but it doesn't change anything apart from the stack trace (it's without the volley references, but identical otherwise).

Without the TLSSocketFactory the request are made through a bare request queue, instantiated with Volley.newRequestQueue(context).
This is what I see in android studio:
W/System.err: com.android.volley.NoConnectionError: javax.net.ssl.SSLHandshakeException: Connection closed by peer
W/System.err:     at com.android.volley.toolbox.BasicNetwork.performRequest(BasicNetwork.java:151)
W/System.err:     at com.android.volley.NetworkDispatcher.run(NetworkDispatcher.java:112)
W/System.err: Caused by: javax.net.ssl.SSLHandshakeException: Connection closed by peer
W/System.err:     at com.android.org.conscrypt.NativeCrypto.SSL_do_handshake(Native Method)
W/System.err:     at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:357)
W/System.err:     at com.android.okhttp.Connection.connectTls(Connection.java:235)
W/System.err:     at com.android.okhttp.Connection.connectSocket(Connection.java:199)
W/System.err:     at com.android.okhttp.Connection.connect(Connection.java:172)
W/System.err:     at com.android.okhttp.Connection.connectAndSetOwner(Connection.java:367)
W/System.err:     at com.android.okhttp.OkHttpClient$1.connectAndSetOwner(OkHttpClient.java:130)
W/System.err:     at com.android.okhttp.internal.http.HttpEngine.connect(HttpEngine.java:329)
W/System.err:     at com.android.okhttp.internal.http.HttpEngine.sendRequest(HttpEngine.java:246)
W/System.err:     at com.android.okhttp.internal.huc.HttpURLConnectionImpl.execute(HttpURLConnectionImpl.java:457)
W/System.err:     at com.android.okhttp.internal.huc.HttpURLConnectionImpl.connect(HttpURLConnectionImpl.java:126)
W/System.err:     at com.android.okhttp.internal.huc.HttpURLConnectionImpl.getOutputStream(HttpURLConnectionImpl.java:257)
W/System.err:     at com.android.okhttp.internal.huc.DelegatingHttpsURLConnection.getOutputStream(DelegatingHttpsURLConnection.java:218)
W/System.err:     at com.android.okhttp.internal.huc.HttpsURLConnectionImpl.getOutputStream(HttpsURLConnectionImpl.java)
W/System.err:     at com.android.volley.toolbox.HurlStack.addBodyIfExists(HurlStack.java:264)
W/System.err:     at com.android.volley.toolbox.HurlStack.setConnectionParametersForRequest(HurlStack.java:234)
W/System.err:     at com.android.volley.toolbox.HurlStack.performRequest(HurlStack.java:107)
W/System.err:     at com.android.volley.toolbox.BasicNetwork.performRequest(BasicNetwork.java:96)
W/System.err:   ... 1 more
W/System.err:   Suppressed: javax.net.ssl.SSLHandshakeException: Handshake failed
W/System.err:     at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:429)
W/System.err:       ... 17 more
W/System.err:   Caused by: javax.net.ssl.SSLProtocolException: SSL handshake terminated: ssl=0x7ffef3748040: Failure in SSL library, usually a protocol error
W/System.err: error:10000410:SSL routines:OPENSSL_internal:SSLV3_ALERT_HANDSHAKE_FAILURE (external/boringssl/src/ssl/s3_pkt.c:610 0x7ffeda1d2240:0x00000001)
W/System.err: error:1000009a:SSL routines:OPENSSL_internal:HANDSHAKE_FAILURE_ON_CLIENT_HELLO (external/boringssl/src/ssl/s3_clnt.c:764 0x7ffee9d2b70a:0x00000000)
W/System.err:     at com.android.org.conscrypt.NativeCrypto.SSL_do_handshake(Native Method)
W/System.err:     at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:357)
W/System.err:       ... 17 more

Since it says SSLV3_ALERT_HANDSHAKE_FAILURE I can only assume it for some reason tries to connect using SSLv3 and fails, but this doesn't make any sense to me whatsoever. It might be a cipher-issue, but how can I tell what it is trying to use ? I would rather not enable a ciphers on the server, make a connection attempt and repeat.
My nginx site uses a let's encrypt certificate and has the following configuration:
ssl_stapling on;
ssl_stapling_verify on;
ssl_trusted_certificate /etc/ssl/certs/lets-encrypt-x1-cross-signed.pem;
ssl_ciphers ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:!aNULL;
ssl_dhparam /etc/ssl/certs/dhparam.pem;
ssl_ecdh_curve secp384r1;
ssl_prefer_server_ciphers on;
ssl_protocols TLSv1.2;

To test these ciphers I've a script and it confirms these ciphers (run on a wheezy vps outside the server's network):

Testing ECDHE-RSA-AES256-GCM-SHA384...YES
Testing ECDHE-ECDSA-AES256-GCM-SHA384...NO (sslv3 alert handshake failure)
Testing ECDHE-RSA-AES256-SHA384...NO (sslv3 alert handshake failure)
Testing ECDHE-ECDSA-AES256-SHA384...NO (sslv3 alert handshake failure)
Testing ECDHE-RSA-AES256-SHA...NO (sslv3 alert handshake failure)
Testing ECDHE-ECDSA-AES256-SHA...NO (sslv3 alert handshake failure)
Testing SRP-DSS-AES-256-CBC-SHA...NO (sslv3 alert handshake failure)
Testing SRP-RSA-AES-256-CBC-SHA...NO (sslv3 alert handshake failure)
Testing DHE-DSS-AES256-GCM-SHA384...NO (sslv3 alert handshake failure)
Testing DHE-RSA-AES256-GCM-SHA384...NO (sslv3 alert handshake failure)
Testing DHE-RSA-AES256-SHA256...NO (sslv3 alert handshake failure)
Testing DHE-DSS-AES256-SHA256...NO (sslv3 alert handshake failure)
Testing DHE-RSA-AES256-SHA...NO (sslv3 alert handshake failure)
Testing DHE-DSS-AES256-SHA...NO (sslv3 alert handshake failure)
Testing DHE-RSA-CAMELLIA256-SHA...NO (sslv3 alert handshake failure)
Testing DHE-DSS-CAMELLIA256-SHA...NO (sslv3 alert handshake failure)
Testing AECDH-AES256-SHA...NO (sslv3 alert handshake failure)
Testing SRP-AES-256-CBC-SHA...NO (sslv3 alert handshake failure)
Testing ADH-AES256-GCM-SHA384...NO (sslv3 alert handshake failure)
Testing ADH-AES256-SHA256...NO (sslv3 alert handshake failure)
Testing ADH-AES256-SHA...NO (sslv3 alert handshake failure)
Testing ADH-CAMELLIA256-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-AES256-GCM-SHA384...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-AES256-GCM-SHA384...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-AES256-SHA384...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-AES256-SHA384...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-AES256-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-AES256-SHA...NO (sslv3 alert handshake failure)
Testing AES256-GCM-SHA384...NO (sslv3 alert handshake failure)
Testing AES256-SHA256...NO (sslv3 alert handshake failure)
Testing AES256-SHA...NO (sslv3 alert handshake failure)
Testing CAMELLIA256-SHA...NO (sslv3 alert handshake failure)
Testing PSK-AES256-CBC-SHA...NO (no ciphers available)
Testing ECDHE-RSA-DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing ECDHE-ECDSA-DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing SRP-DSS-3DES-EDE-CBC-SHA...NO (sslv3 alert handshake failure)
Testing SRP-RSA-3DES-EDE-CBC-SHA...NO (sslv3 alert handshake failure)
Testing EDH-RSA-DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing EDH-DSS-DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing AECDH-DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing SRP-3DES-EDE-CBC-SHA...NO (sslv3 alert handshake failure)
Testing ADH-DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing PSK-3DES-EDE-CBC-SHA...NO (no ciphers available)
Testing ECDHE-RSA-AES128-GCM-SHA256...YES
Testing ECDHE-ECDSA-AES128-GCM-SHA256...NO (sslv3 alert handshake failure)
Testing ECDHE-RSA-AES128-SHA256...NO (sslv3 alert handshake failure)
Testing ECDHE-ECDSA-AES128-SHA256...NO (sslv3 alert handshake failure)
Testing ECDHE-RSA-AES128-SHA...NO (sslv3 alert handshake failure)
Testing ECDHE-ECDSA-AES128-SHA...NO (sslv3 alert handshake failure)
Testing SRP-DSS-AES-128-CBC-SHA...NO (sslv3 alert handshake failure)
Testing SRP-RSA-AES-128-CBC-SHA...NO (sslv3 alert handshake failure)
Testing DHE-DSS-AES128-GCM-SHA256...NO (sslv3 alert handshake failure)
Testing DHE-RSA-AES128-GCM-SHA256...NO (sslv3 alert handshake failure)
Testing DHE-RSA-AES128-SHA256...NO (sslv3 alert handshake failure)
Testing DHE-DSS-AES128-SHA256...NO (sslv3 alert handshake failure)
Testing DHE-RSA-AES128-SHA...NO (sslv3 alert handshake failure)
Testing DHE-DSS-AES128-SHA...NO (sslv3 alert handshake failure)
Testing DHE-RSA-SEED-SHA...NO (sslv3 alert handshake failure)
Testing DHE-DSS-SEED-SHA...NO (sslv3 alert handshake failure)
Testing DHE-RSA-CAMELLIA128-SHA...NO (sslv3 alert handshake failure)
Testing DHE-DSS-CAMELLIA128-SHA...NO (sslv3 alert handshake failure)
Testing AECDH-AES128-SHA...NO (sslv3 alert handshake failure)
Testing SRP-AES-128-CBC-SHA...NO (sslv3 alert handshake failure)
Testing ADH-AES128-GCM-SHA256...NO (sslv3 alert handshake failure)
Testing ADH-AES128-SHA256...NO (sslv3 alert handshake failure)
Testing ADH-AES128-SHA...NO (sslv3 alert handshake failure)
Testing ADH-SEED-SHA...NO (sslv3 alert handshake failure)
Testing ADH-CAMELLIA128-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-AES128-GCM-SHA256...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-AES128-GCM-SHA256...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-AES128-SHA256...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-AES128-SHA256...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-AES128-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-AES128-SHA...NO (sslv3 alert handshake failure)
Testing AES128-GCM-SHA256...NO (sslv3 alert handshake failure)
Testing AES128-SHA256...NO (sslv3 alert handshake failure)
Testing AES128-SHA...NO (sslv3 alert handshake failure)
Testing SEED-SHA...NO (sslv3 alert handshake failure)
Testing CAMELLIA128-SHA...NO (sslv3 alert handshake failure)
Testing PSK-AES128-CBC-SHA...NO (no ciphers available)
Testing ECDHE-RSA-RC4-SHA...NO (sslv3 alert handshake failure)
Testing ECDHE-ECDSA-RC4-SHA...NO (sslv3 alert handshake failure)
Testing AECDH-RC4-SHA...NO (sslv3 alert handshake failure)
Testing ADH-RC4-MD5...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-RC4-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-RC4-SHA...NO (sslv3 alert handshake failure)
Testing RC4-SHA...NO (sslv3 alert handshake failure)
Testing RC4-MD5...NO (sslv3 alert handshake failure)
Testing PSK-RC4-SHA...NO (no ciphers available)
Testing EDH-RSA-DES-CBC-SHA...NO (sslv3 alert handshake failure)
Testing EDH-DSS-DES-CBC-SHA...NO (sslv3 alert handshake failure)
Testing ADH-DES-CBC-SHA...NO (sslv3 alert handshake failure)
Testing DES-CBC-SHA...NO (sslv3 alert handshake failure)
Testing EXP-EDH-RSA-DES-CBC-SHA...NO (sslv3 alert handshake failure)
Testing EXP-EDH-DSS-DES-CBC-SHA...NO (sslv3 alert handshake failure)
Testing EXP-ADH-DES-CBC-SHA...NO (sslv3 alert handshake failure)
Testing EXP-DES-CBC-SHA...NO (sslv3 alert handshake failure)
Testing EXP-RC2-CBC-MD5...NO (sslv3 alert handshake failure)
Testing EXP-ADH-RC4-MD5...NO (sslv3 alert handshake failure)
Testing EXP-RC4-MD5...NO (sslv3 alert handshake failure)
Testing ECDHE-RSA-NULL-SHA...NO (sslv3 alert handshake failure)
Testing ECDHE-ECDSA-NULL-SHA...NO (sslv3 alert handshake failure)
Testing AECDH-NULL-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-NULL-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-NULL-SHA...NO (sslv3 alert handshake failure)
Testing NULL-SHA256...NO (sslv3 alert handshake failure)
Testing NULL-SHA...NO (sslv3 alert handshake failure)
Testing NULL-MD5...NO (sslv3 alert handshake failure

I can open the server-url in the emulator's browser and get a perfect json response so I know the system itself is capable.
So the question is, why can't I connect on Android 7 ?
Update:
I've looked at a captured packet using tcpdump and wireshark and the enabled ciphers are in the ClientHello, so that should not be a problem.

Cipher Suites (18 suites)

Cipher Suite: Unknown (0xcca9)
Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 (0xc02b)
Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 (0xc02c)
Cipher Suite: Unknown (0xcca8)
Cipher Suite: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 (0xc02f)
Cipher Suite: TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 (0xc030)
Cipher Suite: TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 (0x009e)
Cipher Suite: TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 (0x009f)
Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA (0xc009)
Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA (0xc00a)
Cipher Suite: TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA (0xc013)
Cipher Suite: TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA (0xc014)
Cipher Suite: TLS_DHE_RSA_WITH_AES_128_CBC_SHA (0x0033)
Cipher Suite: TLS_DHE_RSA_WITH_AES_256_CBC_SHA (0x0039)
Cipher Suite: TLS_RSA_WITH_AES_128_GCM_SHA256 (0x009c)
Cipher Suite: TLS_RSA_WITH_AES_256_GCM_SHA384 (0x009d)
Cipher Suite: TLS_RSA_WITH_AES_128_CBC_SHA (0x002f)
Cipher Suite: TLS_RSA_WITH_AES_256_CBC_SHA (0x0035)

As you can see 0xc02f and 0xc030 match, but the next TLSv1.2 packet says: Alert (21), Handshake Failure (40).
Update 2:
These are the curves from Android 5.1 in the ClientHello:

Elliptic curves (25 curves)

Elliptic curve: sect571r1 (0x000e)
Elliptic curve: sect571k1 (0x000d)
Elliptic curve: secp521r1 (0x0019)
Elliptic curve: sect409k1 (0x000b)
Elliptic curve: sect409r1 (0x000c)
Elliptic curve: secp384r1 (0x0018)
Elliptic curve: sect283k1 (0x0009)
Elliptic curve: sect283r1 (0x000a)
Elliptic curve: secp256k1 (0x0016)
Elliptic curve: secp256r1 (0x0017)
Elliptic curve: sect239k1 (0x0008)
Elliptic curve: sect233k1 (0x0006)
Elliptic curve: sect233r1 (0x0007)
Elliptic curve: secp224k1 (0x0014)
Elliptic curve: secp224r1 (0x0015)
Elliptic curve: sect193r1 (0x0004)
Elliptic curve: sect193r2 (0x0005)
Elliptic curve: secp192k1 (0x0012)
Elliptic curve: secp192r1 (0x0013)
Elliptic curve: sect163k1 (0x0001)
Elliptic curve: sect163r1 (0x0002)
Elliptic curve: sect163r2 (0x0003)
Elliptic curve: secp160k1 (0x000f)
Elliptic curve: secp160r1 (0x0010)
Elliptic curve: secp160r2 (0x0011)

In the ServerHello secp384r1 (0x0018) is returned.
And this is from Android 7:

Elliptic curves (1 curve)

Elliptic curve: secp256r1 (0x0017)

Resulting in the Handshake Failure.
Changing the nginx configuration by removing secp384r1 or replacing it with the default (prime256v1) does get it to work. So I guess the question remains: am I able to add elliptic curves ?
The captured data is the same when using the emulator as when using an Android 7.0 device (General Mobile 4G).
Update 3:
Small update, but worth mentioning: I got it to work in the emulator using Android 7.1.1 (!). It shows the following data (again, grabbed using tcpdump and viewed using wireshark):

Elliptic curves (3 curves)

Elliptic curve: secp256r1 (0x0017)
Elliptic curve: secp384r1 (0x0018)
Elliptic curve: secp512r1 (0x0019)

It shows the same 18 Cipher Suites.
","Same here. My Nginx server using sll_ecdh_curve prime384v1 setting. Unfortunately, backend guy not allowed me to configure the Nginx server following Vicky Chijwani's instructions due to Client's secirity policies. I was tried to use Valley and the latest version of the OkHttp library, but it did not help. 
To bypass that bug, I had to use WebView to communicate with the API Service on Adroid 7.0 devices. Here is my Adapter class. I hope someone else will find it useful.
/**
* Connection to API service using WebView (for Android 7.0 devices)
*
* Created by fishbone on 09.08.17.
*/
@RequiresApi(api = Build.VERSION_CODES.N)
class WebViewHttpsConnection extends ApiConnection {

    private static final long TIMEOUT = 30000;
    private static final String POST_DATA_SCRIPT = ""javascript:(function (){"" +
            ""var xhr = new XMLHttpRequest();\n"" +
            ""xhr.open(\""POST\"", \""%1$s\"", true);\n"" +
            ""xhr.setRequestHeader(\""Content-type\"", \""application/json\"");\n"" +
            ""xhr.onreadystatechange = function () {\n"" +
            ""    if (xhr.readyState === 4) {\n"" +
            ""        listener.onResult(xhr.status, xhr.responseText);\n"" +
            ""    }\n"" +
            ""};\n"" +
            ""xhr.send('%2$s');\n"" +
            ""})();"";

    WebViewHttpsConnection(Context context) {
        super(context);
    }
    /**
     *  Send data to API Service.
     *
     * @param url URL of API Service
     * @param request JSON Object serialized into String
     * @return API response
     * @throws IOException errors
     */
    @Override
    public String sendData(final URL url, final String request) throws IOException {
        // We should escape backslashes in JSON because JS unescape it back
        final String javaScript = String.format(POST_DATA_SCRIPT, url.toString(),
                request.replace(""\\"", ""\\\\""));
        final RequestResultListener listener = new RequestResultListener();
        // We must use WebView only from 'main' Thread, therefore I using Handler with Application context
        Handler handler = new Handler(getContext().getApplicationContext().getMainLooper());
        handler.post(new Runnable() {

            @SuppressLint({""SetJavaScriptEnabled"", ""AddJavascriptInterface""}) // JavaScript is only for me and I'll use it only on Android 7.0 devices, so not scary
            @Override
            public void run() {
                // WebView must be created, configured and called from the same Thread
                final WebView webView = new WebView(getContext(), null);
                webView.getSettings().setJavaScriptEnabled(true);
                webView.addJavascriptInterface(listener, ""listener"");
                webView.setWebViewClient(new WebViewClient() {

                    @Override
                    public void onPageFinished(WebView view, String url) {
                        // As soon as loaded any page from target domain, we call JS-script that will make POST request
                        webView.loadUrl(javaScript);
                    }
                });
                // I cant use postUrl() method because WebView doesn't allow to define 'Content-type' header, but my API service accepts only 'application/json' content type
                // To complete CORS requirements we make any GET request to lets WebView navigate to the target domain, otherwise it will send 'null' as 'Origin' in headers
                webView.loadUrl(url.toString());
            }
        });
        // And further we waiting for response of API service
        try {
            if (!listener.latch.await(TIMEOUT, TimeUnit.MILLISECONDS)) {
                throw new IOException(""Timeout connection to server"");
            }
        } catch (InterruptedException e) {
            throw new IOException(""Connection to server was interrupted"");
        }
        if (listener.code != HttpURLConnection.HTTP_OK) {
            throw new HttpRetryException(""Server return error code "" + listener.code,
                    listener.code);
        }
        if (TextUtils.isEmpty(listener.result)) {
            throw new HttpRetryException(""Service return empty response"", listener.code);
        }
        return listener.result;
    }
    /**
     * Callback interface for receiving API Service response from JavaScript inside WebView
     */
    private static class RequestResultListener {

        CountDownLatch latch = new CountDownLatch(1);
        String result = null;
        int code;

        @JavascriptInterface
        public void onResult(int code, String result) {
            this.result = result;
            this.code = code;
            latch.countDown();
        }
    }
}

","41785","<android><ssl><elliptic-curve><sslhandshakeexception><android-7.0-nougat>","55","1","8","2019-11-03 16:11:55","","12","27","-1","","2017-05-23 12:26:17","2016-08-24 21:39:27",""
"39133437","SSLHandshakeException: Handshake failed on Android N/7.0","I'm working on an app for which the (power)users have to set up their own server (i.e. nginx) to run the backend application. The corresponding domain needs to be configured in the app so it can connect. I've been testing primarily on my own phone (sony z3c) and started developing for 5.1. Later I received an update for 6.0 but still maintained a working 5.1 inside the emulator. Not too long ago, I started to work on an AVD with an image for 7.0 and to my suprise it won't connect to my server, telling me the ssl handshake failed. My nginx configuration is pretty strict, but it works for both 5.1 and 6.0, so .... ?!
Here is what I know:

I use v24 for support libs, i.e. my compileSdkVersion is 24.
I use Volley v1.0.0.
I've tried the TLSSocketFactory, but it doesn't change anything. This seems to be used most of the times to prevent SSL3 use for older SDK versions anyway.
I've tried increasing the timeout, but it doesn't change anything.
I've tried using HttpURLConnection directly, but it doesn't change anything apart from the stack trace (it's without the volley references, but identical otherwise).

Without the TLSSocketFactory the request are made through a bare request queue, instantiated with Volley.newRequestQueue(context).
This is what I see in android studio:
W/System.err: com.android.volley.NoConnectionError: javax.net.ssl.SSLHandshakeException: Connection closed by peer
W/System.err:     at com.android.volley.toolbox.BasicNetwork.performRequest(BasicNetwork.java:151)
W/System.err:     at com.android.volley.NetworkDispatcher.run(NetworkDispatcher.java:112)
W/System.err: Caused by: javax.net.ssl.SSLHandshakeException: Connection closed by peer
W/System.err:     at com.android.org.conscrypt.NativeCrypto.SSL_do_handshake(Native Method)
W/System.err:     at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:357)
W/System.err:     at com.android.okhttp.Connection.connectTls(Connection.java:235)
W/System.err:     at com.android.okhttp.Connection.connectSocket(Connection.java:199)
W/System.err:     at com.android.okhttp.Connection.connect(Connection.java:172)
W/System.err:     at com.android.okhttp.Connection.connectAndSetOwner(Connection.java:367)
W/System.err:     at com.android.okhttp.OkHttpClient$1.connectAndSetOwner(OkHttpClient.java:130)
W/System.err:     at com.android.okhttp.internal.http.HttpEngine.connect(HttpEngine.java:329)
W/System.err:     at com.android.okhttp.internal.http.HttpEngine.sendRequest(HttpEngine.java:246)
W/System.err:     at com.android.okhttp.internal.huc.HttpURLConnectionImpl.execute(HttpURLConnectionImpl.java:457)
W/System.err:     at com.android.okhttp.internal.huc.HttpURLConnectionImpl.connect(HttpURLConnectionImpl.java:126)
W/System.err:     at com.android.okhttp.internal.huc.HttpURLConnectionImpl.getOutputStream(HttpURLConnectionImpl.java:257)
W/System.err:     at com.android.okhttp.internal.huc.DelegatingHttpsURLConnection.getOutputStream(DelegatingHttpsURLConnection.java:218)
W/System.err:     at com.android.okhttp.internal.huc.HttpsURLConnectionImpl.getOutputStream(HttpsURLConnectionImpl.java)
W/System.err:     at com.android.volley.toolbox.HurlStack.addBodyIfExists(HurlStack.java:264)
W/System.err:     at com.android.volley.toolbox.HurlStack.setConnectionParametersForRequest(HurlStack.java:234)
W/System.err:     at com.android.volley.toolbox.HurlStack.performRequest(HurlStack.java:107)
W/System.err:     at com.android.volley.toolbox.BasicNetwork.performRequest(BasicNetwork.java:96)
W/System.err:   ... 1 more
W/System.err:   Suppressed: javax.net.ssl.SSLHandshakeException: Handshake failed
W/System.err:     at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:429)
W/System.err:       ... 17 more
W/System.err:   Caused by: javax.net.ssl.SSLProtocolException: SSL handshake terminated: ssl=0x7ffef3748040: Failure in SSL library, usually a protocol error
W/System.err: error:10000410:SSL routines:OPENSSL_internal:SSLV3_ALERT_HANDSHAKE_FAILURE (external/boringssl/src/ssl/s3_pkt.c:610 0x7ffeda1d2240:0x00000001)
W/System.err: error:1000009a:SSL routines:OPENSSL_internal:HANDSHAKE_FAILURE_ON_CLIENT_HELLO (external/boringssl/src/ssl/s3_clnt.c:764 0x7ffee9d2b70a:0x00000000)
W/System.err:     at com.android.org.conscrypt.NativeCrypto.SSL_do_handshake(Native Method)
W/System.err:     at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:357)
W/System.err:       ... 17 more

Since it says SSLV3_ALERT_HANDSHAKE_FAILURE I can only assume it for some reason tries to connect using SSLv3 and fails, but this doesn't make any sense to me whatsoever. It might be a cipher-issue, but how can I tell what it is trying to use ? I would rather not enable a ciphers on the server, make a connection attempt and repeat.
My nginx site uses a let's encrypt certificate and has the following configuration:
ssl_stapling on;
ssl_stapling_verify on;
ssl_trusted_certificate /etc/ssl/certs/lets-encrypt-x1-cross-signed.pem;
ssl_ciphers ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:!aNULL;
ssl_dhparam /etc/ssl/certs/dhparam.pem;
ssl_ecdh_curve secp384r1;
ssl_prefer_server_ciphers on;
ssl_protocols TLSv1.2;

To test these ciphers I've a script and it confirms these ciphers (run on a wheezy vps outside the server's network):

Testing ECDHE-RSA-AES256-GCM-SHA384...YES
Testing ECDHE-ECDSA-AES256-GCM-SHA384...NO (sslv3 alert handshake failure)
Testing ECDHE-RSA-AES256-SHA384...NO (sslv3 alert handshake failure)
Testing ECDHE-ECDSA-AES256-SHA384...NO (sslv3 alert handshake failure)
Testing ECDHE-RSA-AES256-SHA...NO (sslv3 alert handshake failure)
Testing ECDHE-ECDSA-AES256-SHA...NO (sslv3 alert handshake failure)
Testing SRP-DSS-AES-256-CBC-SHA...NO (sslv3 alert handshake failure)
Testing SRP-RSA-AES-256-CBC-SHA...NO (sslv3 alert handshake failure)
Testing DHE-DSS-AES256-GCM-SHA384...NO (sslv3 alert handshake failure)
Testing DHE-RSA-AES256-GCM-SHA384...NO (sslv3 alert handshake failure)
Testing DHE-RSA-AES256-SHA256...NO (sslv3 alert handshake failure)
Testing DHE-DSS-AES256-SHA256...NO (sslv3 alert handshake failure)
Testing DHE-RSA-AES256-SHA...NO (sslv3 alert handshake failure)
Testing DHE-DSS-AES256-SHA...NO (sslv3 alert handshake failure)
Testing DHE-RSA-CAMELLIA256-SHA...NO (sslv3 alert handshake failure)
Testing DHE-DSS-CAMELLIA256-SHA...NO (sslv3 alert handshake failure)
Testing AECDH-AES256-SHA...NO (sslv3 alert handshake failure)
Testing SRP-AES-256-CBC-SHA...NO (sslv3 alert handshake failure)
Testing ADH-AES256-GCM-SHA384...NO (sslv3 alert handshake failure)
Testing ADH-AES256-SHA256...NO (sslv3 alert handshake failure)
Testing ADH-AES256-SHA...NO (sslv3 alert handshake failure)
Testing ADH-CAMELLIA256-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-AES256-GCM-SHA384...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-AES256-GCM-SHA384...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-AES256-SHA384...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-AES256-SHA384...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-AES256-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-AES256-SHA...NO (sslv3 alert handshake failure)
Testing AES256-GCM-SHA384...NO (sslv3 alert handshake failure)
Testing AES256-SHA256...NO (sslv3 alert handshake failure)
Testing AES256-SHA...NO (sslv3 alert handshake failure)
Testing CAMELLIA256-SHA...NO (sslv3 alert handshake failure)
Testing PSK-AES256-CBC-SHA...NO (no ciphers available)
Testing ECDHE-RSA-DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing ECDHE-ECDSA-DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing SRP-DSS-3DES-EDE-CBC-SHA...NO (sslv3 alert handshake failure)
Testing SRP-RSA-3DES-EDE-CBC-SHA...NO (sslv3 alert handshake failure)
Testing EDH-RSA-DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing EDH-DSS-DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing AECDH-DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing SRP-3DES-EDE-CBC-SHA...NO (sslv3 alert handshake failure)
Testing ADH-DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing PSK-3DES-EDE-CBC-SHA...NO (no ciphers available)
Testing ECDHE-RSA-AES128-GCM-SHA256...YES
Testing ECDHE-ECDSA-AES128-GCM-SHA256...NO (sslv3 alert handshake failure)
Testing ECDHE-RSA-AES128-SHA256...NO (sslv3 alert handshake failure)
Testing ECDHE-ECDSA-AES128-SHA256...NO (sslv3 alert handshake failure)
Testing ECDHE-RSA-AES128-SHA...NO (sslv3 alert handshake failure)
Testing ECDHE-ECDSA-AES128-SHA...NO (sslv3 alert handshake failure)
Testing SRP-DSS-AES-128-CBC-SHA...NO (sslv3 alert handshake failure)
Testing SRP-RSA-AES-128-CBC-SHA...NO (sslv3 alert handshake failure)
Testing DHE-DSS-AES128-GCM-SHA256...NO (sslv3 alert handshake failure)
Testing DHE-RSA-AES128-GCM-SHA256...NO (sslv3 alert handshake failure)
Testing DHE-RSA-AES128-SHA256...NO (sslv3 alert handshake failure)
Testing DHE-DSS-AES128-SHA256...NO (sslv3 alert handshake failure)
Testing DHE-RSA-AES128-SHA...NO (sslv3 alert handshake failure)
Testing DHE-DSS-AES128-SHA...NO (sslv3 alert handshake failure)
Testing DHE-RSA-SEED-SHA...NO (sslv3 alert handshake failure)
Testing DHE-DSS-SEED-SHA...NO (sslv3 alert handshake failure)
Testing DHE-RSA-CAMELLIA128-SHA...NO (sslv3 alert handshake failure)
Testing DHE-DSS-CAMELLIA128-SHA...NO (sslv3 alert handshake failure)
Testing AECDH-AES128-SHA...NO (sslv3 alert handshake failure)
Testing SRP-AES-128-CBC-SHA...NO (sslv3 alert handshake failure)
Testing ADH-AES128-GCM-SHA256...NO (sslv3 alert handshake failure)
Testing ADH-AES128-SHA256...NO (sslv3 alert handshake failure)
Testing ADH-AES128-SHA...NO (sslv3 alert handshake failure)
Testing ADH-SEED-SHA...NO (sslv3 alert handshake failure)
Testing ADH-CAMELLIA128-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-AES128-GCM-SHA256...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-AES128-GCM-SHA256...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-AES128-SHA256...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-AES128-SHA256...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-AES128-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-AES128-SHA...NO (sslv3 alert handshake failure)
Testing AES128-GCM-SHA256...NO (sslv3 alert handshake failure)
Testing AES128-SHA256...NO (sslv3 alert handshake failure)
Testing AES128-SHA...NO (sslv3 alert handshake failure)
Testing SEED-SHA...NO (sslv3 alert handshake failure)
Testing CAMELLIA128-SHA...NO (sslv3 alert handshake failure)
Testing PSK-AES128-CBC-SHA...NO (no ciphers available)
Testing ECDHE-RSA-RC4-SHA...NO (sslv3 alert handshake failure)
Testing ECDHE-ECDSA-RC4-SHA...NO (sslv3 alert handshake failure)
Testing AECDH-RC4-SHA...NO (sslv3 alert handshake failure)
Testing ADH-RC4-MD5...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-RC4-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-RC4-SHA...NO (sslv3 alert handshake failure)
Testing RC4-SHA...NO (sslv3 alert handshake failure)
Testing RC4-MD5...NO (sslv3 alert handshake failure)
Testing PSK-RC4-SHA...NO (no ciphers available)
Testing EDH-RSA-DES-CBC-SHA...NO (sslv3 alert handshake failure)
Testing EDH-DSS-DES-CBC-SHA...NO (sslv3 alert handshake failure)
Testing ADH-DES-CBC-SHA...NO (sslv3 alert handshake failure)
Testing DES-CBC-SHA...NO (sslv3 alert handshake failure)
Testing EXP-EDH-RSA-DES-CBC-SHA...NO (sslv3 alert handshake failure)
Testing EXP-EDH-DSS-DES-CBC-SHA...NO (sslv3 alert handshake failure)
Testing EXP-ADH-DES-CBC-SHA...NO (sslv3 alert handshake failure)
Testing EXP-DES-CBC-SHA...NO (sslv3 alert handshake failure)
Testing EXP-RC2-CBC-MD5...NO (sslv3 alert handshake failure)
Testing EXP-ADH-RC4-MD5...NO (sslv3 alert handshake failure)
Testing EXP-RC4-MD5...NO (sslv3 alert handshake failure)
Testing ECDHE-RSA-NULL-SHA...NO (sslv3 alert handshake failure)
Testing ECDHE-ECDSA-NULL-SHA...NO (sslv3 alert handshake failure)
Testing AECDH-NULL-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-NULL-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-NULL-SHA...NO (sslv3 alert handshake failure)
Testing NULL-SHA256...NO (sslv3 alert handshake failure)
Testing NULL-SHA...NO (sslv3 alert handshake failure)
Testing NULL-MD5...NO (sslv3 alert handshake failure

I can open the server-url in the emulator's browser and get a perfect json response so I know the system itself is capable.
So the question is, why can't I connect on Android 7 ?
Update:
I've looked at a captured packet using tcpdump and wireshark and the enabled ciphers are in the ClientHello, so that should not be a problem.

Cipher Suites (18 suites)

Cipher Suite: Unknown (0xcca9)
Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 (0xc02b)
Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 (0xc02c)
Cipher Suite: Unknown (0xcca8)
Cipher Suite: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 (0xc02f)
Cipher Suite: TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 (0xc030)
Cipher Suite: TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 (0x009e)
Cipher Suite: TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 (0x009f)
Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA (0xc009)
Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA (0xc00a)
Cipher Suite: TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA (0xc013)
Cipher Suite: TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA (0xc014)
Cipher Suite: TLS_DHE_RSA_WITH_AES_128_CBC_SHA (0x0033)
Cipher Suite: TLS_DHE_RSA_WITH_AES_256_CBC_SHA (0x0039)
Cipher Suite: TLS_RSA_WITH_AES_128_GCM_SHA256 (0x009c)
Cipher Suite: TLS_RSA_WITH_AES_256_GCM_SHA384 (0x009d)
Cipher Suite: TLS_RSA_WITH_AES_128_CBC_SHA (0x002f)
Cipher Suite: TLS_RSA_WITH_AES_256_CBC_SHA (0x0035)

As you can see 0xc02f and 0xc030 match, but the next TLSv1.2 packet says: Alert (21), Handshake Failure (40).
Update 2:
These are the curves from Android 5.1 in the ClientHello:

Elliptic curves (25 curves)

Elliptic curve: sect571r1 (0x000e)
Elliptic curve: sect571k1 (0x000d)
Elliptic curve: secp521r1 (0x0019)
Elliptic curve: sect409k1 (0x000b)
Elliptic curve: sect409r1 (0x000c)
Elliptic curve: secp384r1 (0x0018)
Elliptic curve: sect283k1 (0x0009)
Elliptic curve: sect283r1 (0x000a)
Elliptic curve: secp256k1 (0x0016)
Elliptic curve: secp256r1 (0x0017)
Elliptic curve: sect239k1 (0x0008)
Elliptic curve: sect233k1 (0x0006)
Elliptic curve: sect233r1 (0x0007)
Elliptic curve: secp224k1 (0x0014)
Elliptic curve: secp224r1 (0x0015)
Elliptic curve: sect193r1 (0x0004)
Elliptic curve: sect193r2 (0x0005)
Elliptic curve: secp192k1 (0x0012)
Elliptic curve: secp192r1 (0x0013)
Elliptic curve: sect163k1 (0x0001)
Elliptic curve: sect163r1 (0x0002)
Elliptic curve: sect163r2 (0x0003)
Elliptic curve: secp160k1 (0x000f)
Elliptic curve: secp160r1 (0x0010)
Elliptic curve: secp160r2 (0x0011)

In the ServerHello secp384r1 (0x0018) is returned.
And this is from Android 7:

Elliptic curves (1 curve)

Elliptic curve: secp256r1 (0x0017)

Resulting in the Handshake Failure.
Changing the nginx configuration by removing secp384r1 or replacing it with the default (prime256v1) does get it to work. So I guess the question remains: am I able to add elliptic curves ?
The captured data is the same when using the emulator as when using an Android 7.0 device (General Mobile 4G).
Update 3:
Small update, but worth mentioning: I got it to work in the emulator using Android 7.1.1 (!). It shows the following data (again, grabbed using tcpdump and viewed using wireshark):

Elliptic curves (3 curves)

Elliptic curve: secp256r1 (0x0017)
Elliptic curve: secp384r1 (0x0018)
Elliptic curve: secp512r1 (0x0019)

It shows the same 18 Cipher Suites.
","I have used this to fix ""javax.net.ssl.SSLHandshakeException: Handshake failed"" error and working fine for Android 7.0 and others version too.
put this in onCreate() method of application class.
fun initializeSSLContext(mContext: Context) {
            try {
                SSLContext.getInstance(""TLSv1.2"")
            } catch (e: NoSuchAlgorithmException) {
                e.printStackTrace()
            }

            try {
                ProviderInstaller.installIfNeeded(mContext.applicationContext)
            } catch (e: GooglePlayServicesRepairableException) {
                e.printStackTrace()
            } catch (e: GooglePlayServicesNotAvailableException) {
                e.printStackTrace()
            }

        }

","41785","<android><ssl><elliptic-curve><sslhandshakeexception><android-7.0-nougat>","55","5","8","2019-11-03 16:11:55","","12","27","-1","","2017-05-23 12:26:17","2016-08-24 21:39:27",""
"39133437","SSLHandshakeException: Handshake failed on Android N/7.0","I'm working on an app for which the (power)users have to set up their own server (i.e. nginx) to run the backend application. The corresponding domain needs to be configured in the app so it can connect. I've been testing primarily on my own phone (sony z3c) and started developing for 5.1. Later I received an update for 6.0 but still maintained a working 5.1 inside the emulator. Not too long ago, I started to work on an AVD with an image for 7.0 and to my suprise it won't connect to my server, telling me the ssl handshake failed. My nginx configuration is pretty strict, but it works for both 5.1 and 6.0, so .... ?!
Here is what I know:

I use v24 for support libs, i.e. my compileSdkVersion is 24.
I use Volley v1.0.0.
I've tried the TLSSocketFactory, but it doesn't change anything. This seems to be used most of the times to prevent SSL3 use for older SDK versions anyway.
I've tried increasing the timeout, but it doesn't change anything.
I've tried using HttpURLConnection directly, but it doesn't change anything apart from the stack trace (it's without the volley references, but identical otherwise).

Without the TLSSocketFactory the request are made through a bare request queue, instantiated with Volley.newRequestQueue(context).
This is what I see in android studio:
W/System.err: com.android.volley.NoConnectionError: javax.net.ssl.SSLHandshakeException: Connection closed by peer
W/System.err:     at com.android.volley.toolbox.BasicNetwork.performRequest(BasicNetwork.java:151)
W/System.err:     at com.android.volley.NetworkDispatcher.run(NetworkDispatcher.java:112)
W/System.err: Caused by: javax.net.ssl.SSLHandshakeException: Connection closed by peer
W/System.err:     at com.android.org.conscrypt.NativeCrypto.SSL_do_handshake(Native Method)
W/System.err:     at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:357)
W/System.err:     at com.android.okhttp.Connection.connectTls(Connection.java:235)
W/System.err:     at com.android.okhttp.Connection.connectSocket(Connection.java:199)
W/System.err:     at com.android.okhttp.Connection.connect(Connection.java:172)
W/System.err:     at com.android.okhttp.Connection.connectAndSetOwner(Connection.java:367)
W/System.err:     at com.android.okhttp.OkHttpClient$1.connectAndSetOwner(OkHttpClient.java:130)
W/System.err:     at com.android.okhttp.internal.http.HttpEngine.connect(HttpEngine.java:329)
W/System.err:     at com.android.okhttp.internal.http.HttpEngine.sendRequest(HttpEngine.java:246)
W/System.err:     at com.android.okhttp.internal.huc.HttpURLConnectionImpl.execute(HttpURLConnectionImpl.java:457)
W/System.err:     at com.android.okhttp.internal.huc.HttpURLConnectionImpl.connect(HttpURLConnectionImpl.java:126)
W/System.err:     at com.android.okhttp.internal.huc.HttpURLConnectionImpl.getOutputStream(HttpURLConnectionImpl.java:257)
W/System.err:     at com.android.okhttp.internal.huc.DelegatingHttpsURLConnection.getOutputStream(DelegatingHttpsURLConnection.java:218)
W/System.err:     at com.android.okhttp.internal.huc.HttpsURLConnectionImpl.getOutputStream(HttpsURLConnectionImpl.java)
W/System.err:     at com.android.volley.toolbox.HurlStack.addBodyIfExists(HurlStack.java:264)
W/System.err:     at com.android.volley.toolbox.HurlStack.setConnectionParametersForRequest(HurlStack.java:234)
W/System.err:     at com.android.volley.toolbox.HurlStack.performRequest(HurlStack.java:107)
W/System.err:     at com.android.volley.toolbox.BasicNetwork.performRequest(BasicNetwork.java:96)
W/System.err:   ... 1 more
W/System.err:   Suppressed: javax.net.ssl.SSLHandshakeException: Handshake failed
W/System.err:     at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:429)
W/System.err:       ... 17 more
W/System.err:   Caused by: javax.net.ssl.SSLProtocolException: SSL handshake terminated: ssl=0x7ffef3748040: Failure in SSL library, usually a protocol error
W/System.err: error:10000410:SSL routines:OPENSSL_internal:SSLV3_ALERT_HANDSHAKE_FAILURE (external/boringssl/src/ssl/s3_pkt.c:610 0x7ffeda1d2240:0x00000001)
W/System.err: error:1000009a:SSL routines:OPENSSL_internal:HANDSHAKE_FAILURE_ON_CLIENT_HELLO (external/boringssl/src/ssl/s3_clnt.c:764 0x7ffee9d2b70a:0x00000000)
W/System.err:     at com.android.org.conscrypt.NativeCrypto.SSL_do_handshake(Native Method)
W/System.err:     at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:357)
W/System.err:       ... 17 more

Since it says SSLV3_ALERT_HANDSHAKE_FAILURE I can only assume it for some reason tries to connect using SSLv3 and fails, but this doesn't make any sense to me whatsoever. It might be a cipher-issue, but how can I tell what it is trying to use ? I would rather not enable a ciphers on the server, make a connection attempt and repeat.
My nginx site uses a let's encrypt certificate and has the following configuration:
ssl_stapling on;
ssl_stapling_verify on;
ssl_trusted_certificate /etc/ssl/certs/lets-encrypt-x1-cross-signed.pem;
ssl_ciphers ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:!aNULL;
ssl_dhparam /etc/ssl/certs/dhparam.pem;
ssl_ecdh_curve secp384r1;
ssl_prefer_server_ciphers on;
ssl_protocols TLSv1.2;

To test these ciphers I've a script and it confirms these ciphers (run on a wheezy vps outside the server's network):

Testing ECDHE-RSA-AES256-GCM-SHA384...YES
Testing ECDHE-ECDSA-AES256-GCM-SHA384...NO (sslv3 alert handshake failure)
Testing ECDHE-RSA-AES256-SHA384...NO (sslv3 alert handshake failure)
Testing ECDHE-ECDSA-AES256-SHA384...NO (sslv3 alert handshake failure)
Testing ECDHE-RSA-AES256-SHA...NO (sslv3 alert handshake failure)
Testing ECDHE-ECDSA-AES256-SHA...NO (sslv3 alert handshake failure)
Testing SRP-DSS-AES-256-CBC-SHA...NO (sslv3 alert handshake failure)
Testing SRP-RSA-AES-256-CBC-SHA...NO (sslv3 alert handshake failure)
Testing DHE-DSS-AES256-GCM-SHA384...NO (sslv3 alert handshake failure)
Testing DHE-RSA-AES256-GCM-SHA384...NO (sslv3 alert handshake failure)
Testing DHE-RSA-AES256-SHA256...NO (sslv3 alert handshake failure)
Testing DHE-DSS-AES256-SHA256...NO (sslv3 alert handshake failure)
Testing DHE-RSA-AES256-SHA...NO (sslv3 alert handshake failure)
Testing DHE-DSS-AES256-SHA...NO (sslv3 alert handshake failure)
Testing DHE-RSA-CAMELLIA256-SHA...NO (sslv3 alert handshake failure)
Testing DHE-DSS-CAMELLIA256-SHA...NO (sslv3 alert handshake failure)
Testing AECDH-AES256-SHA...NO (sslv3 alert handshake failure)
Testing SRP-AES-256-CBC-SHA...NO (sslv3 alert handshake failure)
Testing ADH-AES256-GCM-SHA384...NO (sslv3 alert handshake failure)
Testing ADH-AES256-SHA256...NO (sslv3 alert handshake failure)
Testing ADH-AES256-SHA...NO (sslv3 alert handshake failure)
Testing ADH-CAMELLIA256-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-AES256-GCM-SHA384...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-AES256-GCM-SHA384...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-AES256-SHA384...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-AES256-SHA384...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-AES256-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-AES256-SHA...NO (sslv3 alert handshake failure)
Testing AES256-GCM-SHA384...NO (sslv3 alert handshake failure)
Testing AES256-SHA256...NO (sslv3 alert handshake failure)
Testing AES256-SHA...NO (sslv3 alert handshake failure)
Testing CAMELLIA256-SHA...NO (sslv3 alert handshake failure)
Testing PSK-AES256-CBC-SHA...NO (no ciphers available)
Testing ECDHE-RSA-DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing ECDHE-ECDSA-DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing SRP-DSS-3DES-EDE-CBC-SHA...NO (sslv3 alert handshake failure)
Testing SRP-RSA-3DES-EDE-CBC-SHA...NO (sslv3 alert handshake failure)
Testing EDH-RSA-DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing EDH-DSS-DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing AECDH-DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing SRP-3DES-EDE-CBC-SHA...NO (sslv3 alert handshake failure)
Testing ADH-DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing PSK-3DES-EDE-CBC-SHA...NO (no ciphers available)
Testing ECDHE-RSA-AES128-GCM-SHA256...YES
Testing ECDHE-ECDSA-AES128-GCM-SHA256...NO (sslv3 alert handshake failure)
Testing ECDHE-RSA-AES128-SHA256...NO (sslv3 alert handshake failure)
Testing ECDHE-ECDSA-AES128-SHA256...NO (sslv3 alert handshake failure)
Testing ECDHE-RSA-AES128-SHA...NO (sslv3 alert handshake failure)
Testing ECDHE-ECDSA-AES128-SHA...NO (sslv3 alert handshake failure)
Testing SRP-DSS-AES-128-CBC-SHA...NO (sslv3 alert handshake failure)
Testing SRP-RSA-AES-128-CBC-SHA...NO (sslv3 alert handshake failure)
Testing DHE-DSS-AES128-GCM-SHA256...NO (sslv3 alert handshake failure)
Testing DHE-RSA-AES128-GCM-SHA256...NO (sslv3 alert handshake failure)
Testing DHE-RSA-AES128-SHA256...NO (sslv3 alert handshake failure)
Testing DHE-DSS-AES128-SHA256...NO (sslv3 alert handshake failure)
Testing DHE-RSA-AES128-SHA...NO (sslv3 alert handshake failure)
Testing DHE-DSS-AES128-SHA...NO (sslv3 alert handshake failure)
Testing DHE-RSA-SEED-SHA...NO (sslv3 alert handshake failure)
Testing DHE-DSS-SEED-SHA...NO (sslv3 alert handshake failure)
Testing DHE-RSA-CAMELLIA128-SHA...NO (sslv3 alert handshake failure)
Testing DHE-DSS-CAMELLIA128-SHA...NO (sslv3 alert handshake failure)
Testing AECDH-AES128-SHA...NO (sslv3 alert handshake failure)
Testing SRP-AES-128-CBC-SHA...NO (sslv3 alert handshake failure)
Testing ADH-AES128-GCM-SHA256...NO (sslv3 alert handshake failure)
Testing ADH-AES128-SHA256...NO (sslv3 alert handshake failure)
Testing ADH-AES128-SHA...NO (sslv3 alert handshake failure)
Testing ADH-SEED-SHA...NO (sslv3 alert handshake failure)
Testing ADH-CAMELLIA128-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-AES128-GCM-SHA256...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-AES128-GCM-SHA256...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-AES128-SHA256...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-AES128-SHA256...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-AES128-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-AES128-SHA...NO (sslv3 alert handshake failure)
Testing AES128-GCM-SHA256...NO (sslv3 alert handshake failure)
Testing AES128-SHA256...NO (sslv3 alert handshake failure)
Testing AES128-SHA...NO (sslv3 alert handshake failure)
Testing SEED-SHA...NO (sslv3 alert handshake failure)
Testing CAMELLIA128-SHA...NO (sslv3 alert handshake failure)
Testing PSK-AES128-CBC-SHA...NO (no ciphers available)
Testing ECDHE-RSA-RC4-SHA...NO (sslv3 alert handshake failure)
Testing ECDHE-ECDSA-RC4-SHA...NO (sslv3 alert handshake failure)
Testing AECDH-RC4-SHA...NO (sslv3 alert handshake failure)
Testing ADH-RC4-MD5...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-RC4-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-RC4-SHA...NO (sslv3 alert handshake failure)
Testing RC4-SHA...NO (sslv3 alert handshake failure)
Testing RC4-MD5...NO (sslv3 alert handshake failure)
Testing PSK-RC4-SHA...NO (no ciphers available)
Testing EDH-RSA-DES-CBC-SHA...NO (sslv3 alert handshake failure)
Testing EDH-DSS-DES-CBC-SHA...NO (sslv3 alert handshake failure)
Testing ADH-DES-CBC-SHA...NO (sslv3 alert handshake failure)
Testing DES-CBC-SHA...NO (sslv3 alert handshake failure)
Testing EXP-EDH-RSA-DES-CBC-SHA...NO (sslv3 alert handshake failure)
Testing EXP-EDH-DSS-DES-CBC-SHA...NO (sslv3 alert handshake failure)
Testing EXP-ADH-DES-CBC-SHA...NO (sslv3 alert handshake failure)
Testing EXP-DES-CBC-SHA...NO (sslv3 alert handshake failure)
Testing EXP-RC2-CBC-MD5...NO (sslv3 alert handshake failure)
Testing EXP-ADH-RC4-MD5...NO (sslv3 alert handshake failure)
Testing EXP-RC4-MD5...NO (sslv3 alert handshake failure)
Testing ECDHE-RSA-NULL-SHA...NO (sslv3 alert handshake failure)
Testing ECDHE-ECDSA-NULL-SHA...NO (sslv3 alert handshake failure)
Testing AECDH-NULL-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-NULL-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-NULL-SHA...NO (sslv3 alert handshake failure)
Testing NULL-SHA256...NO (sslv3 alert handshake failure)
Testing NULL-SHA...NO (sslv3 alert handshake failure)
Testing NULL-MD5...NO (sslv3 alert handshake failure

I can open the server-url in the emulator's browser and get a perfect json response so I know the system itself is capable.
So the question is, why can't I connect on Android 7 ?
Update:
I've looked at a captured packet using tcpdump and wireshark and the enabled ciphers are in the ClientHello, so that should not be a problem.

Cipher Suites (18 suites)

Cipher Suite: Unknown (0xcca9)
Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 (0xc02b)
Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 (0xc02c)
Cipher Suite: Unknown (0xcca8)
Cipher Suite: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 (0xc02f)
Cipher Suite: TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 (0xc030)
Cipher Suite: TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 (0x009e)
Cipher Suite: TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 (0x009f)
Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA (0xc009)
Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA (0xc00a)
Cipher Suite: TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA (0xc013)
Cipher Suite: TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA (0xc014)
Cipher Suite: TLS_DHE_RSA_WITH_AES_128_CBC_SHA (0x0033)
Cipher Suite: TLS_DHE_RSA_WITH_AES_256_CBC_SHA (0x0039)
Cipher Suite: TLS_RSA_WITH_AES_128_GCM_SHA256 (0x009c)
Cipher Suite: TLS_RSA_WITH_AES_256_GCM_SHA384 (0x009d)
Cipher Suite: TLS_RSA_WITH_AES_128_CBC_SHA (0x002f)
Cipher Suite: TLS_RSA_WITH_AES_256_CBC_SHA (0x0035)

As you can see 0xc02f and 0xc030 match, but the next TLSv1.2 packet says: Alert (21), Handshake Failure (40).
Update 2:
These are the curves from Android 5.1 in the ClientHello:

Elliptic curves (25 curves)

Elliptic curve: sect571r1 (0x000e)
Elliptic curve: sect571k1 (0x000d)
Elliptic curve: secp521r1 (0x0019)
Elliptic curve: sect409k1 (0x000b)
Elliptic curve: sect409r1 (0x000c)
Elliptic curve: secp384r1 (0x0018)
Elliptic curve: sect283k1 (0x0009)
Elliptic curve: sect283r1 (0x000a)
Elliptic curve: secp256k1 (0x0016)
Elliptic curve: secp256r1 (0x0017)
Elliptic curve: sect239k1 (0x0008)
Elliptic curve: sect233k1 (0x0006)
Elliptic curve: sect233r1 (0x0007)
Elliptic curve: secp224k1 (0x0014)
Elliptic curve: secp224r1 (0x0015)
Elliptic curve: sect193r1 (0x0004)
Elliptic curve: sect193r2 (0x0005)
Elliptic curve: secp192k1 (0x0012)
Elliptic curve: secp192r1 (0x0013)
Elliptic curve: sect163k1 (0x0001)
Elliptic curve: sect163r1 (0x0002)
Elliptic curve: sect163r2 (0x0003)
Elliptic curve: secp160k1 (0x000f)
Elliptic curve: secp160r1 (0x0010)
Elliptic curve: secp160r2 (0x0011)

In the ServerHello secp384r1 (0x0018) is returned.
And this is from Android 7:

Elliptic curves (1 curve)

Elliptic curve: secp256r1 (0x0017)

Resulting in the Handshake Failure.
Changing the nginx configuration by removing secp384r1 or replacing it with the default (prime256v1) does get it to work. So I guess the question remains: am I able to add elliptic curves ?
The captured data is the same when using the emulator as when using an Android 7.0 device (General Mobile 4G).
Update 3:
Small update, but worth mentioning: I got it to work in the emulator using Android 7.1.1 (!). It shows the following data (again, grabbed using tcpdump and viewed using wireshark):

Elliptic curves (3 curves)

Elliptic curve: secp256r1 (0x0017)
Elliptic curve: secp384r1 (0x0018)
Elliptic curve: secp512r1 (0x0019)

It shows the same 18 Cipher Suites.
","I ended up having to implement a similar solution to Nikolay, as none of the other solutions fixed the problem (I didn't have access to the API server, although the administrator did try to fix it without compromising his security).
I wrote my solution as a class that you should just be able to plugin to your app - as follows:
import android.content.Context;
import android.os.Handler;
import android.os.Looper;
import android.util.Log;
import android.webkit.ValueCallback;
import android.webkit.WebView;
import android.webkit.WebViewClient;

import com.google.gson.Gson;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BackupAPIService
{
    private static final String TAG = ""BackupAPIService"";
    private static BackupAPIService sService = null;

    // A context is required in order to run the webview.
    private Context mContext;
    // Headers for the request are stored here - they can be set, added to and removed from.
    private HashMap<String, String> mHeaders = new HashMap<>();
    // This sets the current location of the webview - it is probably best. although generally unnecessary to set this to the main page of the API.
    // However not setting it at all will throw 'no access-control-allow-origin header is present' errors.
    private String mOriginURL = """";
    // Setting a base url to the domain of the API means that any requests don't need to include this beginning of the url,
    // This must remain the same for all requests.
    private String mBaseURL = """";

    public static final int GET = 0, POST = 1;

    // NOTE
    // Please note that a singleton pattern has been used, assuming all calls are made to the same API.
    // If you are using several APIs, you may wish to modify this service to give a separate BackupAPIService object for each.
    // If you are using an unknown number of APIs, you may wish to make the constructor public and remove the static methods.
    // The datatype returned by the API is assumed to be in JSON format - if you wish to change this, you will need to manually edit line 9 of the ajaxRequest String in the GenerateRequest method.


    /**
     * This returns the created BackupAPIService if it exists, and creates a new one otherwise. However the new one will need to be set up.
     * @param context is the context in which to create the WebView. This can include the context from a service.
     * @return the current instance of the BackupAPIService if it exists, otherwise it creates a new one.
     */

    public static BackupAPIService getService(Context context)
    {
        if(sService == null)
        {
            sService = new BackupAPIService(context);
        }
        return sService;
    }

    /**
     * This allows the headers to be set for this instance of the BackupAPIService.
     * @param context is the context in which to create the WebView. This can include the context from a service.
     * @param headers are the custom headers to be sent with this request. If these already exist in the service, they will be updated. Otherwise they will be added onto the list. Please note that String headers and values should be surrounded by single quotes, ie. 'header'. To reset the headers run ResetService.
     * @return the current instance of the BackupAPIService if it exists, otherwise it creates a new one.
     */

    public static BackupAPIService getService(Context context, HashMap<String, String> headers)
    {
        return getService(context).addHeaders(headers);
    }

    /**
     * This allows the headers and the originURL to be set for this instance of the BackupAPIService.
     * @param context is the context in which to create the WebView. This can include the context from a service.
     * @param headers are the custom headers to be sent with this request. If these already exist in the service, they will be updated. Otherwise they will be added onto the list. Please note that String headers and values should be surrounded by single quotes, ie. 'header'. To reset the headers run ResetService.
     * @param originURL is the URL from which the WebView will make its requests. This should be set, as the API will throw a 'no access-control-allow-origin header is present' error otherwise.
     * @return the current instance of the BackupAPIService if it exists, otherwise it creates a new one.
     */

    public static BackupAPIService getService(Context context, HashMap<String, String> headers, String originURL)
    {
        return getService(context).addHeaders(headers).addOriginURL(originURL);
    }

    /**
     * This allows the headers and the originURL to be set for this instance of the BackupAPIService.
     * @param context is the context in which to create the WebView. This can include the context from a service.
     * @param headers are the custom headers to be sent with this request. If these already exist in the service, they will be updated. Otherwise they will be added onto the list. Please note that String headers and values should be surrounded by single quotes, ie. 'header'. To reset the headers run ResetService.
     * @param originURL is the URL from which the WebView will make its requests. This should be set, as the API will throw a 'no access-control-allow-origin header is present' error otherwise.
     * @param baseURL is the part of the API URL that never changes. This will allow you to only pass in the different URL endings as required, saving a lot of writing.
     * @return the current instance of the BackupAPIService if it exists, otherwise it creates a new one.
     */

    public static BackupAPIService getService(Context context, HashMap<String, String> headers, String originURL, String baseURL)
    {
        return getService(context).addHeaders(headers).addOriginURL(originURL).addBaseURL(baseURL);
    }

    /**
     * This resets all of the parameters of the service to their defaults as desired.
     * @param resetHeaders clears the headers if set to true.
     * @param resetBaseURL clears the baseURL if set to true.
     * @param resetOriginURL clears the originURL if set to true.
     */

    public static void ResetService(boolean resetHeaders, boolean resetBaseURL, boolean resetOriginURL)
    {
        if(sService != null)
        {
            if(resetHeaders) sService.mHeaders = new HashMap<>();
            if(resetBaseURL) sService.mBaseURL = """";
            if(resetOriginURL) sService.mOriginURL = """";
        }
    }

    /**
     * This is the basic constructor for the API.
     * @param context is the context in which to create the WebView. This can include the context from a service.
     */

    private BackupAPIService(Context context)
    {
        this.mContext = context;
    }

    /**
     * This allows the headers to be updated with the headers in the object that is sent. Existing headers in the list will be updated with their new values, and new headers will be added. Please note that String headers and values should be surrounded by single quotes, ie. 'header'. This can be done programmatically using the getCompatibleString method.
     * @param headers are the headers being added.
     * @return the current BackupAPIService object.
     */

    public BackupAPIService addHeaders(HashMap<String, String> headers)
    {
        this.mHeaders.putAll(headers);
        return this;
    }

    /**
     * This allows a single header to be added if it does not exist, or updated if it does.
     * @param key is the name of the header. Please note that String headers and values should be surrounded by single quotes, ie. 'header'.
     * @param value is the value of the header as a String.
     * @return the current BackupAPIService object.
     */

    public BackupAPIService addHeader(String key, String value)
    {
        this.mHeaders.put(key, value);
        return this;
    }

    /**
     * This allows a single header to be removed if it exists in the service
     * @param key is the name of the header
     * @return the current BackupAPIService object
     */

    public BackupAPIService removeHeader(String key)
    {
        this.mHeaders.remove(key);
        return this;
    }

    /**
     * This returns whether a variable with a given name exists in the Service
     * @param key is the name of the header
     * @return the current BackupAPIService object
     */

    public boolean getHeaderExists(String key)
    {
        return mHeaders.containsKey(key);
    }

    /**
     * This sets the originURL, which tells the API which website the request is coming from. If this is not set, the request is likely to be blocked.
     * @param originURL is the URL stating which website the request is coming from: you may wish to set this to the main website address of your API.
     * @return the current BackupAPIService object
     */

    public BackupAPIService addOriginURL(String originURL)
    {
        mOriginURL = originURL;
        return this;
    }

    /**
     * This sets the baseURL. If there is a common URL beginning for all your API calls, you can set it here and the just send the rest of the address in your calls to the Post or Get methods.
     * @param baseURL will be added onto the beginning of all of the API URL requests, allowing you to avoid having to write this each time, and send shorter requests.
     * @return the current BackupAPIService object
     */

    public BackupAPIService addBaseURL(String baseURL)
    {
        mBaseURL = baseURL;
        return this;
    }

    /**
     * This allows a post request to be sent, with the parameters as a hashmap. Please note that String parameters should take the format String param = ""'{param}'"", so that ajax recognises the String as a String - the getCompatibleString method can be used to automatically adds these single quotes to a given String.
     * @param URL is the url of the request - this could just be the second half of the url, if the first half has been set as the baseURL.
     * @param parameters is a hashmap of the parameters.
     * @param ajaxHandler allows you to define your own custom response with the returned information.
     */

    public void Post(String URL, HashMap<String, String> parameters, AjaxHandler ajaxHandler)
    {
        Launch(POST, URL, ajaxHandler, parameters);
    }

    /**
     * This allows a get request to be sent.
     * @param URL is the url of the request - this could just be the second half of the url, if the first half has been set as the baseURL.
     * @param ajaxHandler allows you to define your own custom response with the returned information.
     */

    public void Get(String URL, AjaxHandler ajaxHandler)
    {
        Launch(GET, URL, ajaxHandler);
    }

    /**
     * This is used by the public Post and Get methods to launch a request.
     * @param launchType is defined as either post or get by the POST and GET static constants.
     * @param URL is the url of the request - this could just be the second half of the url, if the first half has been set as the baseURL.
     * @param ajaxHandler allows you to define your own custom response with the returned information.
     * @param parameters is an optional hashmap of the parameters for a post request.
     */

    private void Launch(final int launchType, final String URL, final AjaxHandler ajaxHandler, final  HashMap<String, String>  ... parameters)
    {
        // This piece of code is required in order to allow the WebView to run from a service without throwing errors
        Handler handler = new Handler(Looper.getMainLooper());
        try
        {
            handler.post(
                    new Runnable()
                    {
                        @Override
                        public void run()
                        {
                            GenerateRequest(launchType, URL, ajaxHandler, parameters);
                        }
                    });
        } catch (Exception e)
        {
            e.printStackTrace();
        }
    }

    /**
     * This method generates the actual request.
     * @param launchType is defined as either post or get by the POST and GET static constants.
     * @param URL is the url of the request - this could just be the second half of the url, if the first half has been set as the baseURL.
     * @param ajaxHandler allows you to define your own custom response with the returned information.
     * @param parameters is an optional hashmap of the parameters for a post request.
     */

    private void GenerateRequest(int launchType, String URL, AjaxHandler ajaxHandler, HashMap<String, String> ... parameters)
    {
        String importAjax = ""<script src='https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js'></script>"";
        String customiseAjaxHeaders = ""$.ajaxSetup({headers: { "";
        for (Map.Entry<String, String> entry : mHeaders.entrySet())
        {
            customiseAjaxHeaders += entry.getKey() + "": "" + entry.getValue() + "", "";
        }
        customiseAjaxHeaders = customiseAjaxHeaders.substring(0, customiseAjaxHeaders.length()-2) + ""}});"";
        String postParameters = """";
        if(parameters.length>0)
        {
            for (Map.Entry<String, String> entry : parameters[0].entrySet())
            {
                postParameters += entry.getKey() + "": "" + entry.getValue() + "", "";
            }
            postParameters = postParameters.substring(0, postParameters.length()-2);
        }
        //String origin = ""'app.cleopatra.im'"";
        String requestAddress = ""'""+mBaseURL + URL + ""'"";
        String requestType = ""Get"";
        if(launchType == POST) requestType = ""Post"";
        String ajaxRequest = customiseAjaxHeaders + "" var saveData = "" +
                ""$.ajax"" +
                ""("" +
                    ""{"" +
                        ""type: '"" + requestType + ""',"" +
                        ""url: "" + requestAddress + "", "" +
                        ""data: "" +
                        ""{"" + postParameters + ""},"" +
                        ""dataType: 'json',"" +
                        ""success: function(data)"" +
                        ""{"" +
                            ""ajaxHandler.handleResults(JSON.stringify(data));"" + // This runs the ajax handler created below when the handler successfully returns data
                        ""},"" +
                        ""error:function(request, status)"" +
                        ""{"" +
                            ""ajaxHandler.handleFailure('Request Failed: ' + JSON.stringify(request) + ' due to: ' + JSON.stringify(status));"" + // This runs the ajax handler created below when the handler unsuccessfully returns data
                        ""}"" +
                    ""}"" +
                "");"";

        CreateRequestThroughWebView(importAjax, ajaxRequest, ajaxHandler);
    }

    /**
     * This is used to create the generated request through a webview object
     * @param content is the html content of the webview - in this implementation it is currently just an import script for JQuery
     * @param request is the Ajax request script to be run on the webview
     * @param ajaxHandler allows you to define your own custom response with the returned information.
     */

    private void CreateRequestThroughWebView(String content, final String request, AjaxHandler ajaxHandler)
    {
        Log.i(TAG, ""Content: "" + content + ""\nRequest: "" + request);
        HashMap<String, String> headers = new HashMap<>();
        // create the new webview - this can run invisibly
        WebView webView = new WebView(mContext);
        webView.getSettings().setAllowUniversalAccessFromFileURLs(true);
        // This creates a webpage at the expected location, which can be accept AJAX commands
        webView.loadDataWithBaseURL(mOriginURL, content, ""text/html; charset=utf-8"", ""utf-8"", mOriginURL);
        // Allow JavaScript to run on the page
        webView.getSettings().setJavaScriptEnabled(true);
        // Add a JavaScript interface allowing completed AJAX requests to run Java methods
        webView.addJavascriptInterface(ajaxHandler, ""ajaxHandler"");

        // override onPageFinished method of WebViewClient to handle AJAX calls
        webView.setWebViewClient(new WebViewClient()
        {
            @Override
            public void onPageFinished(WebView view, String url)
            {
                super.onPageFinished(view, url);
                // Run the JavaScript command once the page has loaded
                view.evaluateJavascript(request, new ValueCallback<String>()
                {
                    @Override
                    public void onReceiveValue(String s)
                    {
                        Log.i(TAG, ""Request Completed: "" + s);
                    }
                });
            }
        });
    }

    /**
     * This adds additional single quotes to enclose a string representing a header name, header value, variable name or variable value, so it is still recognised as a String when it is passed into Ajax.
     * @param string is the header name, header value, variable name or variable value to be modified.
     * @return an ajax compatible String.
     */

    public static String getCompatibleString(String string)
    {
        return ""'"" + string + ""'"";
    }

    /**
     * This adds additional single quotes to enclose two strings representing either a String header name and its value, or posted variable name and its value, so that they are both still recognised as Strings when they are passed into Ajax.
     * @param name is the header or variable name, header value, variable name or variable value to be modified.
     * @param value is the header or variable value to be modified.
     * @return an ajax compatible HashMap which can also be added into any existing HashMaps as necessary.
     */

    public static HashMap<String, String> getCompatibleHashMapEntry(String name, String value)
    {
        HashMap<String, String> result = new HashMap<String, String>();
        result.put(getCompatibleString(name), getCompatibleString(value));
        return result;
    }

    /**
     * This adds additional single quotes to enclose an arbitrary number of two string arrays, each representing String header name and its value, or a posted variable name and its value so that they are both still recognised as Strings when they are passed into Ajax. This is returned as a hashmap ready to be set as the necessary headers or variables for the request.
     * @param nameValuePairs is the header or variable name, header value, variable name or variable value to be modified.
     * @return an ajax compatible HashMapEntry.
     */

    public static HashMap<String, String> getCompatibleHashMap(String[] ... nameValuePairs)
    {
        HashMap<String, String> results = new HashMap<>();
        for (String[] nameValuePair: nameValuePairs)
        {
            results.put(getCompatibleString(nameValuePair[0]), getCompatibleString(nameValuePair[1]));
        }
        return results;
    }



    /**
     * This deals with the results of the Ajax API request.
     * The handleResults method of this abstracted Ajax Javascript Interface should be implemented in order to define your app's behaviour when the request completes.
     * The ConvertResultToObject method can also be used within the handleResults method in order to convert the received json string into the corresponding class.
     * The handleFailure method is called if the Ajax request fails.
     */

    public abstract static class AjaxHandler
    {
        private static final String TAG = ""ajaxHandler"";
        private final Context context;

        public AjaxHandler(Context context)
        {
            this.context = context;
        }

        /**
         * Overwrite this method to handle the response to your request
         * @param results is a String representation of the result from the WebView Query
         */

        @android.webkit.JavascriptInterface
        public abstract void handleResults(String results);

        /**
         * Overwrite this method to handle any failed requests
         * @param message is a String representation of the failure message from the WebView Query
         */


        @android.webkit.JavascriptInterface
        public abstract void handleFailure(String message);

        /**
         * This should generate a predefined class object from a JSON response. It was not used in the final implementation, so it has not been tested and may need tweaking
         * @param json is the json representation of the class
         * @param classOfT is the class of the object to be populated
         * @return an object of class T created from the JSON string
         */

        public <T> T ConvertResultToObject(String json, Class<T> classOfT)
        {
            Gson gson = new Gson();
            return gson.fromJson(json, classOfT);
        }
    }
}

An example implementation would be as follows:
// Example Ajax Implementation


// Setup basic variables


// Set up context
Context context = this.context;
// Set the beginning of the URL which is the same for all API requests
String API_URL = ""https://mywebsite.com/myapi/"";
// Set up the url from which requests should originate
String BASE_URL = ""www.mywebsite.com"";

// Set up variables to pass into the requests
// Header names and values
String API_KEY_NAME = ""{API_KEY_NAME}"";
String API_KEY_VALUE = ""{API_KEY_VALUE}"";
// Parameter names and values
String USER_NAME = ""User"";
String USER_VALUE = ""{User name}"";
String PASSWORD_NAME = ""Password"";
String PASSWORD_VALUE = ""{User Password}"";
String USER_ID_NAME = ""User_id"";
int USER_ID_VALUE = 7;
// Note that Strings need an extra set of single quotes to be recognised as a String when passed into Ajax. Methods have been provided which do that.
// Get the headers as a HashMap, and convert both name and value to an Ajax compatible String
HashMap<String, String> headers = BackupAPIService.getCompatibleHashMapEntry(API_KEY_NAME, API_KEY_VALUE);
// Get the parameters as a HashMap, and convert the appropriate names and values to Ajax compatible Strings
HashMap<String, String> parameters = BackupAPIService.getCompatibleHashMap(new String[] {USER_NAME, USER_VALUE}, new String[] {PASSWORD_NAME, PASSWORD_VALUE});
// Add the parameters where the values are not Strings
parameters.put(BackupAPIService.getCompatibleString(USER_ID_NAME), USER_ID_VALUE+"""");
// Create or get service
BackupAPIService backupService = BackupAPIService.getService(context, headers, BASE_URL, API_URL);
// Post a request with the necessary addition to the API url set earlier for this request, the parameters set above, and an implementation of AjaxHandler which handles the results and failures as you desire
backupService.Post(""user"", parameters, new BackupAPIService.AjaxHandler(context){
    @Override
    public void handleResults(String results)
    {
        Log.e(TAG, ""Success!! "" + results);
    }

    @Override
    public void handleFailure(String message)
    {
        Log.e(TAG, ""Failure :( "" + message);
    }
});

","41785","<android><ssl><elliptic-curve><sslhandshakeexception><android-7.0-nougat>","55","0","8","2019-11-03 16:11:55","","12","27","-1","","2017-05-23 12:26:17","2016-08-24 21:39:27",""
"39133437","SSLHandshakeException: Handshake failed on Android N/7.0","I'm working on an app for which the (power)users have to set up their own server (i.e. nginx) to run the backend application. The corresponding domain needs to be configured in the app so it can connect. I've been testing primarily on my own phone (sony z3c) and started developing for 5.1. Later I received an update for 6.0 but still maintained a working 5.1 inside the emulator. Not too long ago, I started to work on an AVD with an image for 7.0 and to my suprise it won't connect to my server, telling me the ssl handshake failed. My nginx configuration is pretty strict, but it works for both 5.1 and 6.0, so .... ?!
Here is what I know:

I use v24 for support libs, i.e. my compileSdkVersion is 24.
I use Volley v1.0.0.
I've tried the TLSSocketFactory, but it doesn't change anything. This seems to be used most of the times to prevent SSL3 use for older SDK versions anyway.
I've tried increasing the timeout, but it doesn't change anything.
I've tried using HttpURLConnection directly, but it doesn't change anything apart from the stack trace (it's without the volley references, but identical otherwise).

Without the TLSSocketFactory the request are made through a bare request queue, instantiated with Volley.newRequestQueue(context).
This is what I see in android studio:
W/System.err: com.android.volley.NoConnectionError: javax.net.ssl.SSLHandshakeException: Connection closed by peer
W/System.err:     at com.android.volley.toolbox.BasicNetwork.performRequest(BasicNetwork.java:151)
W/System.err:     at com.android.volley.NetworkDispatcher.run(NetworkDispatcher.java:112)
W/System.err: Caused by: javax.net.ssl.SSLHandshakeException: Connection closed by peer
W/System.err:     at com.android.org.conscrypt.NativeCrypto.SSL_do_handshake(Native Method)
W/System.err:     at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:357)
W/System.err:     at com.android.okhttp.Connection.connectTls(Connection.java:235)
W/System.err:     at com.android.okhttp.Connection.connectSocket(Connection.java:199)
W/System.err:     at com.android.okhttp.Connection.connect(Connection.java:172)
W/System.err:     at com.android.okhttp.Connection.connectAndSetOwner(Connection.java:367)
W/System.err:     at com.android.okhttp.OkHttpClient$1.connectAndSetOwner(OkHttpClient.java:130)
W/System.err:     at com.android.okhttp.internal.http.HttpEngine.connect(HttpEngine.java:329)
W/System.err:     at com.android.okhttp.internal.http.HttpEngine.sendRequest(HttpEngine.java:246)
W/System.err:     at com.android.okhttp.internal.huc.HttpURLConnectionImpl.execute(HttpURLConnectionImpl.java:457)
W/System.err:     at com.android.okhttp.internal.huc.HttpURLConnectionImpl.connect(HttpURLConnectionImpl.java:126)
W/System.err:     at com.android.okhttp.internal.huc.HttpURLConnectionImpl.getOutputStream(HttpURLConnectionImpl.java:257)
W/System.err:     at com.android.okhttp.internal.huc.DelegatingHttpsURLConnection.getOutputStream(DelegatingHttpsURLConnection.java:218)
W/System.err:     at com.android.okhttp.internal.huc.HttpsURLConnectionImpl.getOutputStream(HttpsURLConnectionImpl.java)
W/System.err:     at com.android.volley.toolbox.HurlStack.addBodyIfExists(HurlStack.java:264)
W/System.err:     at com.android.volley.toolbox.HurlStack.setConnectionParametersForRequest(HurlStack.java:234)
W/System.err:     at com.android.volley.toolbox.HurlStack.performRequest(HurlStack.java:107)
W/System.err:     at com.android.volley.toolbox.BasicNetwork.performRequest(BasicNetwork.java:96)
W/System.err:   ... 1 more
W/System.err:   Suppressed: javax.net.ssl.SSLHandshakeException: Handshake failed
W/System.err:     at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:429)
W/System.err:       ... 17 more
W/System.err:   Caused by: javax.net.ssl.SSLProtocolException: SSL handshake terminated: ssl=0x7ffef3748040: Failure in SSL library, usually a protocol error
W/System.err: error:10000410:SSL routines:OPENSSL_internal:SSLV3_ALERT_HANDSHAKE_FAILURE (external/boringssl/src/ssl/s3_pkt.c:610 0x7ffeda1d2240:0x00000001)
W/System.err: error:1000009a:SSL routines:OPENSSL_internal:HANDSHAKE_FAILURE_ON_CLIENT_HELLO (external/boringssl/src/ssl/s3_clnt.c:764 0x7ffee9d2b70a:0x00000000)
W/System.err:     at com.android.org.conscrypt.NativeCrypto.SSL_do_handshake(Native Method)
W/System.err:     at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:357)
W/System.err:       ... 17 more

Since it says SSLV3_ALERT_HANDSHAKE_FAILURE I can only assume it for some reason tries to connect using SSLv3 and fails, but this doesn't make any sense to me whatsoever. It might be a cipher-issue, but how can I tell what it is trying to use ? I would rather not enable a ciphers on the server, make a connection attempt and repeat.
My nginx site uses a let's encrypt certificate and has the following configuration:
ssl_stapling on;
ssl_stapling_verify on;
ssl_trusted_certificate /etc/ssl/certs/lets-encrypt-x1-cross-signed.pem;
ssl_ciphers ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:!aNULL;
ssl_dhparam /etc/ssl/certs/dhparam.pem;
ssl_ecdh_curve secp384r1;
ssl_prefer_server_ciphers on;
ssl_protocols TLSv1.2;

To test these ciphers I've a script and it confirms these ciphers (run on a wheezy vps outside the server's network):

Testing ECDHE-RSA-AES256-GCM-SHA384...YES
Testing ECDHE-ECDSA-AES256-GCM-SHA384...NO (sslv3 alert handshake failure)
Testing ECDHE-RSA-AES256-SHA384...NO (sslv3 alert handshake failure)
Testing ECDHE-ECDSA-AES256-SHA384...NO (sslv3 alert handshake failure)
Testing ECDHE-RSA-AES256-SHA...NO (sslv3 alert handshake failure)
Testing ECDHE-ECDSA-AES256-SHA...NO (sslv3 alert handshake failure)
Testing SRP-DSS-AES-256-CBC-SHA...NO (sslv3 alert handshake failure)
Testing SRP-RSA-AES-256-CBC-SHA...NO (sslv3 alert handshake failure)
Testing DHE-DSS-AES256-GCM-SHA384...NO (sslv3 alert handshake failure)
Testing DHE-RSA-AES256-GCM-SHA384...NO (sslv3 alert handshake failure)
Testing DHE-RSA-AES256-SHA256...NO (sslv3 alert handshake failure)
Testing DHE-DSS-AES256-SHA256...NO (sslv3 alert handshake failure)
Testing DHE-RSA-AES256-SHA...NO (sslv3 alert handshake failure)
Testing DHE-DSS-AES256-SHA...NO (sslv3 alert handshake failure)
Testing DHE-RSA-CAMELLIA256-SHA...NO (sslv3 alert handshake failure)
Testing DHE-DSS-CAMELLIA256-SHA...NO (sslv3 alert handshake failure)
Testing AECDH-AES256-SHA...NO (sslv3 alert handshake failure)
Testing SRP-AES-256-CBC-SHA...NO (sslv3 alert handshake failure)
Testing ADH-AES256-GCM-SHA384...NO (sslv3 alert handshake failure)
Testing ADH-AES256-SHA256...NO (sslv3 alert handshake failure)
Testing ADH-AES256-SHA...NO (sslv3 alert handshake failure)
Testing ADH-CAMELLIA256-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-AES256-GCM-SHA384...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-AES256-GCM-SHA384...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-AES256-SHA384...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-AES256-SHA384...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-AES256-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-AES256-SHA...NO (sslv3 alert handshake failure)
Testing AES256-GCM-SHA384...NO (sslv3 alert handshake failure)
Testing AES256-SHA256...NO (sslv3 alert handshake failure)
Testing AES256-SHA...NO (sslv3 alert handshake failure)
Testing CAMELLIA256-SHA...NO (sslv3 alert handshake failure)
Testing PSK-AES256-CBC-SHA...NO (no ciphers available)
Testing ECDHE-RSA-DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing ECDHE-ECDSA-DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing SRP-DSS-3DES-EDE-CBC-SHA...NO (sslv3 alert handshake failure)
Testing SRP-RSA-3DES-EDE-CBC-SHA...NO (sslv3 alert handshake failure)
Testing EDH-RSA-DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing EDH-DSS-DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing AECDH-DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing SRP-3DES-EDE-CBC-SHA...NO (sslv3 alert handshake failure)
Testing ADH-DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing DES-CBC3-SHA...NO (sslv3 alert handshake failure)
Testing PSK-3DES-EDE-CBC-SHA...NO (no ciphers available)
Testing ECDHE-RSA-AES128-GCM-SHA256...YES
Testing ECDHE-ECDSA-AES128-GCM-SHA256...NO (sslv3 alert handshake failure)
Testing ECDHE-RSA-AES128-SHA256...NO (sslv3 alert handshake failure)
Testing ECDHE-ECDSA-AES128-SHA256...NO (sslv3 alert handshake failure)
Testing ECDHE-RSA-AES128-SHA...NO (sslv3 alert handshake failure)
Testing ECDHE-ECDSA-AES128-SHA...NO (sslv3 alert handshake failure)
Testing SRP-DSS-AES-128-CBC-SHA...NO (sslv3 alert handshake failure)
Testing SRP-RSA-AES-128-CBC-SHA...NO (sslv3 alert handshake failure)
Testing DHE-DSS-AES128-GCM-SHA256...NO (sslv3 alert handshake failure)
Testing DHE-RSA-AES128-GCM-SHA256...NO (sslv3 alert handshake failure)
Testing DHE-RSA-AES128-SHA256...NO (sslv3 alert handshake failure)
Testing DHE-DSS-AES128-SHA256...NO (sslv3 alert handshake failure)
Testing DHE-RSA-AES128-SHA...NO (sslv3 alert handshake failure)
Testing DHE-DSS-AES128-SHA...NO (sslv3 alert handshake failure)
Testing DHE-RSA-SEED-SHA...NO (sslv3 alert handshake failure)
Testing DHE-DSS-SEED-SHA...NO (sslv3 alert handshake failure)
Testing DHE-RSA-CAMELLIA128-SHA...NO (sslv3 alert handshake failure)
Testing DHE-DSS-CAMELLIA128-SHA...NO (sslv3 alert handshake failure)
Testing AECDH-AES128-SHA...NO (sslv3 alert handshake failure)
Testing SRP-AES-128-CBC-SHA...NO (sslv3 alert handshake failure)
Testing ADH-AES128-GCM-SHA256...NO (sslv3 alert handshake failure)
Testing ADH-AES128-SHA256...NO (sslv3 alert handshake failure)
Testing ADH-AES128-SHA...NO (sslv3 alert handshake failure)
Testing ADH-SEED-SHA...NO (sslv3 alert handshake failure)
Testing ADH-CAMELLIA128-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-AES128-GCM-SHA256...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-AES128-GCM-SHA256...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-AES128-SHA256...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-AES128-SHA256...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-AES128-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-AES128-SHA...NO (sslv3 alert handshake failure)
Testing AES128-GCM-SHA256...NO (sslv3 alert handshake failure)
Testing AES128-SHA256...NO (sslv3 alert handshake failure)
Testing AES128-SHA...NO (sslv3 alert handshake failure)
Testing SEED-SHA...NO (sslv3 alert handshake failure)
Testing CAMELLIA128-SHA...NO (sslv3 alert handshake failure)
Testing PSK-AES128-CBC-SHA...NO (no ciphers available)
Testing ECDHE-RSA-RC4-SHA...NO (sslv3 alert handshake failure)
Testing ECDHE-ECDSA-RC4-SHA...NO (sslv3 alert handshake failure)
Testing AECDH-RC4-SHA...NO (sslv3 alert handshake failure)
Testing ADH-RC4-MD5...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-RC4-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-RC4-SHA...NO (sslv3 alert handshake failure)
Testing RC4-SHA...NO (sslv3 alert handshake failure)
Testing RC4-MD5...NO (sslv3 alert handshake failure)
Testing PSK-RC4-SHA...NO (no ciphers available)
Testing EDH-RSA-DES-CBC-SHA...NO (sslv3 alert handshake failure)
Testing EDH-DSS-DES-CBC-SHA...NO (sslv3 alert handshake failure)
Testing ADH-DES-CBC-SHA...NO (sslv3 alert handshake failure)
Testing DES-CBC-SHA...NO (sslv3 alert handshake failure)
Testing EXP-EDH-RSA-DES-CBC-SHA...NO (sslv3 alert handshake failure)
Testing EXP-EDH-DSS-DES-CBC-SHA...NO (sslv3 alert handshake failure)
Testing EXP-ADH-DES-CBC-SHA...NO (sslv3 alert handshake failure)
Testing EXP-DES-CBC-SHA...NO (sslv3 alert handshake failure)
Testing EXP-RC2-CBC-MD5...NO (sslv3 alert handshake failure)
Testing EXP-ADH-RC4-MD5...NO (sslv3 alert handshake failure)
Testing EXP-RC4-MD5...NO (sslv3 alert handshake failure)
Testing ECDHE-RSA-NULL-SHA...NO (sslv3 alert handshake failure)
Testing ECDHE-ECDSA-NULL-SHA...NO (sslv3 alert handshake failure)
Testing AECDH-NULL-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-RSA-NULL-SHA...NO (sslv3 alert handshake failure)
Testing ECDH-ECDSA-NULL-SHA...NO (sslv3 alert handshake failure)
Testing NULL-SHA256...NO (sslv3 alert handshake failure)
Testing NULL-SHA...NO (sslv3 alert handshake failure)
Testing NULL-MD5...NO (sslv3 alert handshake failure

I can open the server-url in the emulator's browser and get a perfect json response so I know the system itself is capable.
So the question is, why can't I connect on Android 7 ?
Update:
I've looked at a captured packet using tcpdump and wireshark and the enabled ciphers are in the ClientHello, so that should not be a problem.

Cipher Suites (18 suites)

Cipher Suite: Unknown (0xcca9)
Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 (0xc02b)
Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 (0xc02c)
Cipher Suite: Unknown (0xcca8)
Cipher Suite: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 (0xc02f)
Cipher Suite: TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 (0xc030)
Cipher Suite: TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 (0x009e)
Cipher Suite: TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 (0x009f)
Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA (0xc009)
Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA (0xc00a)
Cipher Suite: TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA (0xc013)
Cipher Suite: TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA (0xc014)
Cipher Suite: TLS_DHE_RSA_WITH_AES_128_CBC_SHA (0x0033)
Cipher Suite: TLS_DHE_RSA_WITH_AES_256_CBC_SHA (0x0039)
Cipher Suite: TLS_RSA_WITH_AES_128_GCM_SHA256 (0x009c)
Cipher Suite: TLS_RSA_WITH_AES_256_GCM_SHA384 (0x009d)
Cipher Suite: TLS_RSA_WITH_AES_128_CBC_SHA (0x002f)
Cipher Suite: TLS_RSA_WITH_AES_256_CBC_SHA (0x0035)

As you can see 0xc02f and 0xc030 match, but the next TLSv1.2 packet says: Alert (21), Handshake Failure (40).
Update 2:
These are the curves from Android 5.1 in the ClientHello:

Elliptic curves (25 curves)

Elliptic curve: sect571r1 (0x000e)
Elliptic curve: sect571k1 (0x000d)
Elliptic curve: secp521r1 (0x0019)
Elliptic curve: sect409k1 (0x000b)
Elliptic curve: sect409r1 (0x000c)
Elliptic curve: secp384r1 (0x0018)
Elliptic curve: sect283k1 (0x0009)
Elliptic curve: sect283r1 (0x000a)
Elliptic curve: secp256k1 (0x0016)
Elliptic curve: secp256r1 (0x0017)
Elliptic curve: sect239k1 (0x0008)
Elliptic curve: sect233k1 (0x0006)
Elliptic curve: sect233r1 (0x0007)
Elliptic curve: secp224k1 (0x0014)
Elliptic curve: secp224r1 (0x0015)
Elliptic curve: sect193r1 (0x0004)
Elliptic curve: sect193r2 (0x0005)
Elliptic curve: secp192k1 (0x0012)
Elliptic curve: secp192r1 (0x0013)
Elliptic curve: sect163k1 (0x0001)
Elliptic curve: sect163r1 (0x0002)
Elliptic curve: sect163r2 (0x0003)
Elliptic curve: secp160k1 (0x000f)
Elliptic curve: secp160r1 (0x0010)
Elliptic curve: secp160r2 (0x0011)

In the ServerHello secp384r1 (0x0018) is returned.
And this is from Android 7:

Elliptic curves (1 curve)

Elliptic curve: secp256r1 (0x0017)

Resulting in the Handshake Failure.
Changing the nginx configuration by removing secp384r1 or replacing it with the default (prime256v1) does get it to work. So I guess the question remains: am I able to add elliptic curves ?
The captured data is the same when using the emulator as when using an Android 7.0 device (General Mobile 4G).
Update 3:
Small update, but worth mentioning: I got it to work in the emulator using Android 7.1.1 (!). It shows the following data (again, grabbed using tcpdump and viewed using wireshark):

Elliptic curves (3 curves)

Elliptic curve: secp256r1 (0x0017)
Elliptic curve: secp384r1 (0x0018)
Elliptic curve: secp512r1 (0x0019)

It shows the same 18 Cipher Suites.
","I spent 4 days around this problem and tried everything, the problem I had was with using LetsEncrypt (certbot etc.) to generate my certificates.
Once I switched to a different CA, Android 7.0 requests started coming through.
","41785","<android><ssl><elliptic-curve><sslhandshakeexception><android-7.0-nougat>","55","1","8","2019-11-03 16:11:55","","12","27","-1","","2017-05-23 12:26:17","2016-08-24 21:39:27",""
"2228860","Signing a message using ECDSA in OpenSSL","How do I set the private key for signing messages when using ECDSA in OpenSSL programmatically? I have the following code:
static int create_signature(unsigned char* hash)
{
  EC_KEY *eckey=NULL;
  EC_GROUP *ecgroup=NULL;
  EVP_PKEY *evpkey=NULL;
  unsigned char *signature=NULL;
  point_conversion_form_t form = POINT_CONVERSION_UNCOMPRESSED;
  int signature_size, block_size;
  unsigned char * block=NULL;

  ecgroup = get_ec_group_192();
  EC_GROUP_set_asn1_flag(ecgroup, OPENSSL_EC_NAMED_CURVE);
  EC_GROUP_set_point_conversion_form(ecgroup, form);
  eckey=EC_KEY_new();
  EC_KEY_set_group(eckey,ecgroup);
  EC_KEY_generate_key(eckey);
  evpkey=EVP_PKEY_new();
  EVP_PKEY_assign_EC_KEY(evpkey,eckey);
  signature=OPENSSL_malloc(EVP_PKEY_size(evpkey));

  ECDSA_sign(0, hash, sizeof(hash), signature, &signature_size, eckey);

  printf(""%s"", signature);
  return 0;
}

The function get_ec_group_192() is created by running openssl ecparam -C -name secp192k1 -genkey which also generates some EC PARAMETERS and a EC PRIVATE KEY.
What I am trying to do is to encrypt the message contained in hash with my private key so that only public key can decrypt it. Is that possible with the above code, or am I doing this completely wrong?
","The following verifies successfully for me:
//compiled with gcc -g -lssl -UOPENSSL_NO_EC SO2228860.c -lcrypto
#include <openssl/ec.h>      // for EC_GROUP_new_by_curve_name, EC_GROUP_free, EC_KEY_new, EC_KEY_set_group, EC_KEY_generate_key, EC_KEY_free
#include <openssl/ecdsa.h>   // for ECDSA_do_sign, ECDSA_do_verify
#include <openssl/obj_mac.h> // for NID_secp192k1


static int create_signature(unsigned char* hash)
{
    int function_status = -1;
    EC_KEY *eckey=EC_KEY_new();
    if (NULL == eckey)
    {
        printf(""Failed to create new EC Key\n"");
        function_status = -1;
    }
    else
    {
        EC_GROUP *ecgroup= EC_GROUP_new_by_curve_name(NID_secp192k1);
        if (NULL == ecgroup)
        {
            printf(""Failed to create new EC Group\n"");
            function_status = -1;
        }
        else
        {
            int set_group_status = EC_KEY_set_group(eckey,ecgroup);
            const int set_group_success = 1;
            if (set_group_success != set_group_status)
            {
                printf(""Failed to set group for EC Key\n"");
                function_status = -1;
            }
            else
            {
                const int gen_success = 1;
                int gen_status = EC_KEY_generate_key(eckey);
                if (gen_success != gen_status)
                {
                    printf(""Failed to generate EC Key\n"");
                    function_status = -1;
                }
                else
                {
                    ECDSA_SIG *signature = ECDSA_do_sign(hash, strlen(hash), eckey);
                    if (NULL == signature)
                    {
                        printf(""Failed to generate EC Signature\n"");
                        function_status = -1;
                    }
                    else
                    {

                        int verify_status = ECDSA_do_verify(hash, strlen(hash), signature, eckey);
                        const int verify_success = 1;
                        if (verify_success != verify_status)
                        {
                            printf(""Failed to verify EC Signature\n"");
                            function_status = -1;
                        }
                        else
                        {
                            printf(""Verifed EC Signature\n"");
                            function_status = 1;
                        }
                    }
                }
            }
            EC_GROUP_free(ecgroup);
        }
        EC_KEY_free(eckey);
    }

  return function_status;
}

int main( int argc , char * argv[] )
{
    unsigned char hash[] = ""c7fbca202a95a570285e3d700eb04ca2"";
    int status = create_signature(hash);
    return(0) ;
}

","19137","<c><encryption><openssl><elliptic-curve>","4","8","2","2018-07-12 14:15:29","6006898","5","6","148415","","2013-02-04 13:40:32","2010-02-09 12:11:22",""
"2228860","Signing a message using ECDSA in OpenSSL","How do I set the private key for signing messages when using ECDSA in OpenSSL programmatically? I have the following code:
static int create_signature(unsigned char* hash)
{
  EC_KEY *eckey=NULL;
  EC_GROUP *ecgroup=NULL;
  EVP_PKEY *evpkey=NULL;
  unsigned char *signature=NULL;
  point_conversion_form_t form = POINT_CONVERSION_UNCOMPRESSED;
  int signature_size, block_size;
  unsigned char * block=NULL;

  ecgroup = get_ec_group_192();
  EC_GROUP_set_asn1_flag(ecgroup, OPENSSL_EC_NAMED_CURVE);
  EC_GROUP_set_point_conversion_form(ecgroup, form);
  eckey=EC_KEY_new();
  EC_KEY_set_group(eckey,ecgroup);
  EC_KEY_generate_key(eckey);
  evpkey=EVP_PKEY_new();
  EVP_PKEY_assign_EC_KEY(evpkey,eckey);
  signature=OPENSSL_malloc(EVP_PKEY_size(evpkey));

  ECDSA_sign(0, hash, sizeof(hash), signature, &signature_size, eckey);

  printf(""%s"", signature);
  return 0;
}

The function get_ec_group_192() is created by running openssl ecparam -C -name secp192k1 -genkey which also generates some EC PARAMETERS and a EC PRIVATE KEY.
What I am trying to do is to encrypt the message contained in hash with my private key so that only public key can decrypt it. Is that possible with the above code, or am I doing this completely wrong?
","Their is a small bug in the above code. The hash that is passed is an unsigned char, this hash CAN have 0x00 values in it! Do NOT use the strlen(hash) to calculate the length, as that will possibly pass the incorrect length to the routine IF the hash has a 0x00 in it anywhere. Hashes are fixed length, and should be passed as such. sha256 for example should be of length 64.
","19137","<c><encryption><openssl><elliptic-curve>","4","2","2","2018-07-12 14:15:29","6006898","5","6","148415","","2013-02-04 13:40:32","2010-02-09 12:11:22",""
"6045559","Elliptic Curve Cryptography (ECC) with bouncy castle for asymmetric encryption","I want to use ECC in order to exchange a Session Key for a long-term data transmission. This key exchange should be encrypted using ECC-192bit (curvename: prime192v1). That means that i want to implement an own hybrid encryption model.
Therefore i used bouncy castle for JAVA. I implemented ECDSA and it works fine. I implemented the AES-128 bit symmetric encryption and this also works fine. But i cant implement a simple Asymmetric encryption using ECC.
So my question: Can this asymmetric encryption implemented with bouncy castle at all?
This is my try to implement an ECC encryption using the AsymmetricBlockCipher interface. But this doesn't work. 
Do I really have to implement my own ECCEngine like there is an implementation for the RSAEngine (RSACoreEngin)?
Here is my code:
import org.bouncycastle.jce.interfaces.ECPublicKey;
import org.bouncycastle.jce.interfaces.ECPrivateKey;
import org.bouncycastle.crypto.AsymmetricBlockCipher;
import org.bouncycastle.crypto.InvalidCipherTextException;
import org.bouncycastle.crypto.engines.AESEngine;
import org.bouncycastle.crypto.modes.CBCBlockCipher;
import org.bouncycastle.crypto.params.ECDomainParameters;
import org.bouncycastle.jce.ECNamedCurveTable;
import org.bouncycastle.jce.spec.ECParameterSpec;
import org.bouncycastle.crypto.params.ECPrivateKeyParameters;
import org.bouncycastle.crypto.params.ECPublicKeyParameters;
import javax.crypto.Cipher;



public class ASymCrypto {

    //cipher init
    private static AsymmetricBlockCipher bc = null;
//    private static PaddedBufferedBlockCipher cipher = null;


    //keys and info parameter
    private static ECPublicKeyParameters publicParam = null;
    private static ECPrivateKeyParameters privParam = null;



    /**
     * Constructor
     */
    ASymCrypto(ECPublicKey pubKey, ECPrivateKey privKey) {


//  //default paddedBufferedBlockCipher with PKCS5/7 padding
//  cipher = new PaddedBufferedBlockCipher(bc);
        System.out.println( ""remotePrivateKey:  "" + privKey + "" -(format): ""+ privKey.getFormat() + "" algo: "" + privKey.getAlgorithm());
        System.out.println( ""remotePrivateKey:  "" + pubKey + "" -(format): ""+ pubKey.getFormat() + "" algo: "" + pubKey.getAlgorithm());

    //get the key and the EC parameters
    ECParameterSpec ecSpec = ECNamedCurveTable.getParameterSpec(""prime192v1"");
    ECDomainParameters domainParam = new ECDomainParameters(
        ecSpec.getCurve() , 
        ecSpec.getG(), 
        ecSpec.getN());

    //ECPublicKeyParameters(ECPoint Q, ECDomainParameters params) 
    publicParam = new ECPublicKeyParameters( pubKey.getQ() , domainParam );
    if(publicParam == null)
        System.out.println(""ERROR: Initializing ASymCrpto failed at ECPublicKeyParam."");

    //ECPrivateKeyParameters(java.math.BigInteger d, ECDomainParameters params) 
    privParam = new ECPrivateKeyParameters( privKey.getD(), domainParam );
    if(privParam == null)
        System.out.println(""ERROR: Initializing ASymCrpto failed at ECPrivateKeyParam."");

    bc = new AsymmetricBlockCipher(new AESEngine());
    }

    /**
     *  encryptEC192 function
     *  @param input: byte array with the message to encrypt
     *  @param output: byte array with the encrypted message using the public key of the partner
     *  @return bool true if successfully encrypted
     *  @throws InvalidCipherTextException 
     */
    public boolean encryptEC192(byte[] input, byte[] output) throws InvalidCipherTextException{

    if(publicParam == null)
        System.out.println(""ERROR2: Initializing ASymCrpto failed at ECPublicKeyParam."");
    bc.init( true, publicParam);

    System.out.println(""InputBS: "" + bc.getInputBlockSize() + "" OutputBS: "" + bc.getOutputBlockSize() + ""\n"");
    output = bc.processBlock(input, 0, input.length );

    return true;
    }


    /**
     *  encryptEC192 function
     *  @param input: byte array with the message to encrypt
     *  @param output: byte array with the encrypted message using the public key of the partner
     *  @return bool true if successfully encrypted
     *  @throws InvalidCipherTextException 
     */    
    public boolean decryptEC192(byte[] input, byte[] output) throws InvalidCipherTextException{

    if(privParam == null)
        System.out.println(""ERROR2: Initializing ASymCrpto failed at ECPrivateKeyParam."");
    bc.init( false, privParam);
    System.out.println(""InputBS: "" + bc.getInputBlockSize() + "" OutputBS: "" + bc.getOutputBlockSize() + ""\n"");
    output = bc.processBlock(input, 0, input.length );

    return true;
    }


//  INFORMATION PURPOSE ONLY:
//  public byte[] processBlock(byte[] in,
//                             int inOff,
//                             int len)
//                      throws InvalidCipherTextException
//  process the block of len bytes stored in in from offset inOff.
//  Parameters:
//  in - the input data
//  inOff - offset into the in array where the data starts
//  len - the length of the block to be processed.
//  Returns:
//  the resulting byte array of the encryption/decryption process.
//  Throws:
//  InvalidCipherTextException - data decrypts improperly.
//  DataLengthException - the input data is too large for the cipher.


}

","","12851","<java><encryption><bouncycastle><elliptic-curve>","4","","0","2014-02-25 07:13:34","","2","","1288","","2011-06-03 14:17:05","2011-05-18 13:31:51",""
"19673962","Codes to generate a public key in an elliptic curve algorithm using a given private key","I need to implement ECC (Elliptic Curve Cryptography) algorithm using jdk 1.7. I tried using bouncy castle, sunEC, but all of them gave errors and errors. My target is to generate an elliptic curve using the private key, I will be given to the system.
Thus, I need to get a accurate code to generate a public key using a given private key using jdk1.7. The IDE I use is ecllipse. And I need to know, what are the other parameters I should be given other than a private key? Is it enough to provide just a curve point and the private key?
Can someone help me to generate public key from private key?? I can manage the rest of my implementation.
Anyone who knows to implement keys of Elliptic Curve Cryptography using java, please tell me whether this code is correct?
public class ECCrypt {

    private ECPoint curve_point;

      public ECCrypt(ECPoint curve_point) {
        this.curve_point = curve_point;
      }

public BigInteger makePublicKey(BigInteger privateKey) {
        ECPoint ecPublicKey = new ECPoint(curve_point);
        ecPublicKey.mult(privateKey);
        return ecPublicKey.pack();
}


public static void main(String[] argv) throws Exception {
        java.util.Random rnd = new java.util.Random();
        ECPoint cp = new ECPoint();
        cp.random(rnd);
        ECCrypt ec = new ECCrypt(cp);
        BigInteger priv = new BigInteger(255,rnd);
        BigInteger pub = ec.makePublicKey(priv);

}

Thanks!
","I wrote a sample program that outputs the following:
FL261:java jvah$ javac -cp bcprov-ext-jdk15on-149.jar ECTest.java
FL261:java jvah$ java -cp bcprov-ext-jdk15on-149.jar:. ECTest
Private key: 7ba78909571fbc336b2b94054dfb745a6b0776ff36a8fa98a598dc32cb83cc8e
Public key: 035b9e4a6148c9f9b08b573871ac66a832e6e9f63cf117545523a45b8017b7c43f
Calculated public key: 035b9e4a6148c9f9b08b573871ac66a832e6e9f63cf117545523a45b8017b7c43f
Congratulations, public keys match!
FL261:java jvah$

The code should be clear enough so that you can understand what is done here. Please note that you really have to know which curve your private key is generated for, otherwise it is impossible to generate the matching public key. The sample code uses secp256r1 curve, which is quite commonly used.
import java.math.BigInteger;
import java.security.SecureRandom;

import org.bouncycastle.asn1.x9.X9ECParameters;
import org.bouncycastle.asn1.sec.SECNamedCurves;
import org.bouncycastle.crypto.AsymmetricCipherKeyPair;
import org.bouncycastle.crypto.params.ECDomainParameters;
import org.bouncycastle.crypto.params.ECKeyGenerationParameters;
import org.bouncycastle.crypto.params.ECPrivateKeyParameters;
import org.bouncycastle.crypto.params.ECPublicKeyParameters;
import org.bouncycastle.crypto.generators.ECKeyPairGenerator;
import org.bouncycastle.math.ec.ECPoint;

class ECTest {
  public static String toHex(byte[] data) {
    StringBuilder sb = new StringBuilder();
    for (byte b: data) {
      sb.append(String.format(""%02x"", b&0xff));
    }
    return sb.toString();
  }

  public static void main(String[] argv) {
    // Get domain parameters for example curve secp256r1
    X9ECParameters ecp = SECNamedCurves.getByName(""secp256r1"");
    ECDomainParameters domainParams = new ECDomainParameters(ecp.getCurve(),
                                                             ecp.getG(), ecp.getN(), ecp.getH(),
                                                             ecp.getSeed());

    // Generate a private key and a public key
    AsymmetricCipherKeyPair keyPair;
    ECKeyGenerationParameters keyGenParams = new ECKeyGenerationParameters(domainParams, new SecureRandom());
    ECKeyPairGenerator generator = new ECKeyPairGenerator();
    generator.init(keyGenParams);
    keyPair = generator.generateKeyPair();

    ECPrivateKeyParameters privateKey = (ECPrivateKeyParameters) keyPair.getPrivate();
    ECPublicKeyParameters publicKey = (ECPublicKeyParameters) keyPair.getPublic();
    byte[] privateKeyBytes = privateKey.getD().toByteArray();

    // First print our generated private key and public key
    System.out.println(""Private key: "" + toHex(privateKeyBytes));
    System.out.println(""Public key: "" + toHex(publicKey.getQ().getEncoded(true)));

    // Then calculate the public key only using domainParams.getG() and private key
    ECPoint Q = domainParams.getG().multiply(new BigInteger(privateKeyBytes));
    System.out.println(""Calculated public key: "" + toHex(Q.getEncoded(true)));

    // The calculated public key and generated public key should always match
    if (!toHex(publicKey.getQ().getEncoded(true)).equals(toHex(Q.getEncoded(true)))) {
      System.out.println(""ERROR: Public keys do not match!"");
    } else {
      System.out.println(""Congratulations, public keys match!"");
    }
  }
}

","12405","<java><bouncycastle><elliptic-curve>","5","8","3","2018-08-26 19:31:48","","11","6","2934766","","2013-10-30 11:58:27","2013-10-30 04:38:07",""
"19673962","Codes to generate a public key in an elliptic curve algorithm using a given private key","I need to implement ECC (Elliptic Curve Cryptography) algorithm using jdk 1.7. I tried using bouncy castle, sunEC, but all of them gave errors and errors. My target is to generate an elliptic curve using the private key, I will be given to the system.
Thus, I need to get a accurate code to generate a public key using a given private key using jdk1.7. The IDE I use is ecllipse. And I need to know, what are the other parameters I should be given other than a private key? Is it enough to provide just a curve point and the private key?
Can someone help me to generate public key from private key?? I can manage the rest of my implementation.
Anyone who knows to implement keys of Elliptic Curve Cryptography using java, please tell me whether this code is correct?
public class ECCrypt {

    private ECPoint curve_point;

      public ECCrypt(ECPoint curve_point) {
        this.curve_point = curve_point;
      }

public BigInteger makePublicKey(BigInteger privateKey) {
        ECPoint ecPublicKey = new ECPoint(curve_point);
        ecPublicKey.mult(privateKey);
        return ecPublicKey.pack();
}


public static void main(String[] argv) throws Exception {
        java.util.Random rnd = new java.util.Random();
        ECPoint cp = new ECPoint();
        cp.random(rnd);
        ECCrypt ec = new ECCrypt(cp);
        BigInteger priv = new BigInteger(255,rnd);
        BigInteger pub = ec.makePublicKey(priv);

}

Thanks!
","i use this method to recover ECPublicKey from ECPrivateKey.
At the end the main Routine prove that it works. It is plain
java without any external library.
public final class MULT {
private static ECPoint doublePoint(final BigInteger p, final BigInteger a, final ECPoint R) {
    if (R.equals(ECPoint.POINT_INFINITY)) return R;
    BigInteger slope = (R.getAffineX().pow(2)).multiply(FieldP._3);
    slope = slope.add(a);
    slope = slope.multiply((R.getAffineY().multiply(FieldP._2)).modInverse(p));
    final BigInteger Xout = slope.pow(2).subtract(R.getAffineX().multiply(FieldP._2)).mod(p);
    final BigInteger Yout = (R.getAffineY().negate()).add(slope.multiply(R.getAffineX().subtract(Xout))).mod(p);
    return new ECPoint(Xout, Yout);
}

private static ECPoint addPoint   (final BigInteger p, final BigInteger a, final ECPoint r, final ECPoint g) {
    if (r.equals(ECPoint.POINT_INFINITY)) return g;
    if (g.equals(ECPoint.POINT_INFINITY)) return r;
    if (r==g || r.equals(g)) return doublePoint(p, a, r);
    final BigInteger gX    = g.getAffineX();
    final BigInteger sY    = g.getAffineY();
    final BigInteger rX    = r.getAffineX();
    final BigInteger rY    = r.getAffineY();
    final BigInteger slope = (rY.subtract(sY)).multiply(rX.subtract(gX).modInverse(p)).mod(p);
    final BigInteger Xout  = (slope.modPow(FieldP._2, p).subtract(rX)).subtract(gX).mod(p);
    BigInteger Yout =   sY.negate().mod(p);
    Yout = Yout.add(slope.multiply(gX.subtract(Xout))).mod(p);
    return new ECPoint(Xout, Yout);
}

public static ECPoint scalmult   (final EllipticCurve curve, final ECPoint g, final BigInteger kin) {
    final ECField         field    = curve.getField();
    if(!(field instanceof ECFieldFp)) throw new UnsupportedOperationException(field.getClass().getCanonicalName());
    final BigInteger p = ((ECFieldFp)field).getP();
    final BigInteger a = curve.getA();
    ECPoint R = ECPoint.POINT_INFINITY;
    BigInteger k = kin.mod(p);
    final int length = k.bitLength();
    final byte[] binarray = new byte[length];
    for(int i=0;i<=length-1;i++){
        binarray[i] = k.mod(FieldP._2).byteValue();
        k = k.shiftRight(1);
    }
    for(int i = length-1;i >= 0;i--){
        R = doublePoint(p, a, R);
        if(binarray[i]== 1) R = addPoint(p, a, R, g);
    }
    return R;
}

public static ECPublicKey getPublicKey(final ECPrivateKey pk) throws GeneralSecurityException {
    final ECParameterSpec params = pk.getParams();
    final ECPoint w = scalmult(params.getCurve(), pk.getParams().getGenerator(), pk.getS());
    final KeyFactory kg = KeyFactory.getInstance(""EC"");
    return (ECPublicKey)kg.generatePublic (new ECPublicKeySpec (w, params));
}

}
","12405","<java><bouncycastle><elliptic-curve>","5","3","3","2018-08-26 19:31:48","","11","6","2934766","","2013-10-30 11:58:27","2013-10-30 04:38:07",""
"19673962","Codes to generate a public key in an elliptic curve algorithm using a given private key","I need to implement ECC (Elliptic Curve Cryptography) algorithm using jdk 1.7. I tried using bouncy castle, sunEC, but all of them gave errors and errors. My target is to generate an elliptic curve using the private key, I will be given to the system.
Thus, I need to get a accurate code to generate a public key using a given private key using jdk1.7. The IDE I use is ecllipse. And I need to know, what are the other parameters I should be given other than a private key? Is it enough to provide just a curve point and the private key?
Can someone help me to generate public key from private key?? I can manage the rest of my implementation.
Anyone who knows to implement keys of Elliptic Curve Cryptography using java, please tell me whether this code is correct?
public class ECCrypt {

    private ECPoint curve_point;

      public ECCrypt(ECPoint curve_point) {
        this.curve_point = curve_point;
      }

public BigInteger makePublicKey(BigInteger privateKey) {
        ECPoint ecPublicKey = new ECPoint(curve_point);
        ecPublicKey.mult(privateKey);
        return ecPublicKey.pack();
}


public static void main(String[] argv) throws Exception {
        java.util.Random rnd = new java.util.Random();
        ECPoint cp = new ECPoint();
        cp.random(rnd);
        ECCrypt ec = new ECCrypt(cp);
        BigInteger priv = new BigInteger(255,rnd);
        BigInteger pub = ec.makePublicKey(priv);

}

Thanks!
","Some more improvement to the answer of @markw on Generate ECPublicKey from ECPrivateKey, extended with curve name detection by @bas-goossen from here: How to find the matching curve name from an ECPublicKey
public static ECPublicKey publicFromPrivate(final ECPrivateKey privateKey) throws Exception {
    ECParameterSpec params = privateKey.getParams();
    org.bouncycastle.jce.spec.ECParameterSpec bcSpec = org.bouncycastle.jcajce.provider.asymmetric.util.EC5Util
        .convertSpec(params, false);
    org.bouncycastle.math.ec.ECPoint q = bcSpec.getG().multiply(privateKey.getS());
    org.bouncycastle.math.ec.ECPoint bcW = bcSpec.getCurve().decodePoint(q.getEncoded(false));
    ECPoint w = new ECPoint(
        bcW.getAffineXCoord().toBigInteger(),
        bcW.getAffineYCoord().toBigInteger());
    ECPublicKeySpec keySpec = new ECPublicKeySpec(w, tryFindNamedCurveSpec(params));
    return (ECPublicKey) KeyFactory
        .getInstance(""EC"", org.bouncycastle.jce.provider.BouncyCastleProvider.PROVIDER_NAME)
        .generatePublic(keySpec);
}

@SuppressWarnings(""unchecked"")
public static ECParameterSpec tryFindNamedCurveSpec(ECParameterSpec params) {
    org.bouncycastle.jce.spec.ECParameterSpec bcSpec
        = org.bouncycastle.jcajce.provider.asymmetric.util.EC5Util.convertSpec(params, false);
    for (Object name : Collections.list(org.bouncycastle.jce.ECNamedCurveTable.getNames())) {
        org.bouncycastle.jce.spec.ECNamedCurveParameterSpec bcNamedSpec
            = org.bouncycastle.jce.ECNamedCurveTable.getParameterSpec((String) name);
        if (bcNamedSpec.getN().equals(bcSpec.getN())
            && bcNamedSpec.getH().equals(bcSpec.getH())
            && bcNamedSpec.getCurve().equals(bcSpec.getCurve())
            && bcNamedSpec.getG().equals(bcSpec.getG())) {
            return new org.bouncycastle.jce.spec.ECNamedCurveSpec(
                bcNamedSpec.getName(),
                bcNamedSpec.getCurve(),
                bcNamedSpec.getG(),
                bcNamedSpec.getN(),
                bcNamedSpec.getH(),
                bcNamedSpec.getSeed());
        }
    }
    return params;
}

","12405","<java><bouncycastle><elliptic-curve>","5","0","3","2018-08-26 19:31:48","","11","6","2934766","","2013-10-30 11:58:27","2013-10-30 04:38:07",""
"2515948","Use of Curve25519 in ECDSA","I'm currently investigating the use of curve25519 for signing. Original distribution and a C implementation (and a second C implementation).
Bernstein suggests to use ECDSA for this but I could not find any code.  
","ECDSA is specified by ANSI X9.62. That standard defines the kind of curves on which ECDSA is defined, including details curve equations, key representations and so on. These do not match Curve25519: part of the optimizations which make Curve25519 faster than standard curves of the same size rely on the special curve equation, which does not enter in X9.62 formalism. Correspondingly, there cannot be any implementation of ECDSA which both conforms to ANSI X9.62, and uses Curve25519. In practice, I know of no implementation of an ECDSA-like algorithm on Curve25519.
To be brief, you are on your own. You may want to implement ECDSA over the Curve25519 implementation by following X9.62 (there a draft from 1998 which can be downloaded from several places, e.g. there, or you can spend a hundred bucks and get the genuine 2005 version from Techstreet). But be warned that you are walking outside of the carefully trodden paths of analyzed cryptography; in other words I explicitly deny any kind of guarantee on how secure that kind-of-ECDSA would be.
My advice would be to stick to standard curves (such as NIST P-256). Note that while Curve25519 is faster than most curves of the same size, smaller standard curves will be faster, and yet provide adequate security for most purposes. NIST P-192, for instance, provides ""96-bit security"", somewhat similar to 1536-bit RSA. Also, standard curves already provide performance on the order of several thousands signature per second on a small PC, and I have trouble imagining a scenario where more performance is needed.
","10045","<encryption><signature><elliptic-curve>","10","13","4","2017-11-18 20:07:40","2517052","1","4","123671","","2016-07-11 10:31:36","2010-03-25 13:38:29",""
"2515948","Use of Curve25519 in ECDSA","I'm currently investigating the use of curve25519 for signing. Original distribution and a C implementation (and a second C implementation).
Bernstein suggests to use ECDSA for this but I could not find any code.  
","To use Curve25519 for this, you'd have to implement a lot of functions that AFAIK aren't currently implemented anywhere for this curve, which would mean getting very substantially into the mathematics of elliptic curve cryptography.  The reason is that the existing functions throw away the ""y"" coordinate of the point and work only with the ""x"" coordinate.  Without the ""y"" coordinate, the points P and -P look the same.  That's fine for ECDH which Curve25519 is designed for, because |x(yG)| = |x(-yG)|.  But for ECDSA you need to calculate aG + bP, and |aG + bP| does not in general equal |aG - bP|. I've looked into what would be involved in extending curve25519-donna to support such calculations; it's doable, but far from trivial.
Since what you need most of all is fast verification, I recommend Bernstein's Rabin-Williams scheme.
","10045","<encryption><signature><elliptic-curve>","10","9","4","2017-11-18 20:07:40","2517052","1","4","123671","","2016-07-11 10:31:36","2010-03-25 13:38:29",""
"2515948","Use of Curve25519 in ECDSA","I'm currently investigating the use of curve25519 for signing. Original distribution and a C implementation (and a second C implementation).
Bernstein suggests to use ECDSA for this but I could not find any code.  
","I recently shared the curve25519 library that I developed awhile back. It is hosted at https://github.com/msotoodeh and provides more functionality, higher security as well as higher performance than any other portable-C library I have tested with. It outperforms curve25519-donna by a factor of almost 2 on 64-bit platforms and a factor of almost 4 on 32-bit targets.
","10045","<encryption><signature><elliptic-curve>","10","4","4","2017-11-18 20:07:40","2517052","1","4","123671","","2016-07-11 10:31:36","2010-03-25 13:38:29",""
"2515948","Use of Curve25519 in ECDSA","I'm currently investigating the use of curve25519 for signing. Original distribution and a C implementation (and a second C implementation).
Bernstein suggests to use ECDSA for this but I could not find any code.  
","Today, many years after this question was asked, the correct answer is the signature scheme Ed25519.
","10045","<encryption><signature><elliptic-curve>","10","2","4","2017-11-18 20:07:40","2517052","1","4","123671","","2016-07-11 10:31:36","2010-03-25 13:38:29",""
"17269238","ECDSA signature length","What will the signature length for 256 bit EC key in ECDSA algorithm?
I wanted to validated signature length for the same. It will be great if some body can help me with one EC key set.
","It depends on how you encode the signature. This is the code segment from OpenSSL that measures the length of ECDSA signature in DER format. 
/** ECDSA_size
 * returns the maximum length of the DER encoded signature
 * \param  eckey pointer to a EC_KEY object
 * \return numbers of bytes required for the DER encoded signature
 */

int ECDSA_size(const EC_KEY *r)
{
    int ret,i;
    ASN1_INTEGER bs;
    BIGNUM  *order=NULL;
    unsigned char buf[4];
    const EC_GROUP *group;

    if (r == NULL)
        return 0;
    group = EC_KEY_get0_group(r);
    if (group == NULL)
        return 0;

    if ((order = BN_new()) == NULL) return 0;
    if (!EC_GROUP_get_order(group,order,NULL))
    {
        BN_clear_free(order);
        return 0;
    } 
    i=BN_num_bits(order);
    bs.length=(i+7)/8;
    bs.data=buf;
    bs.type=V_ASN1_INTEGER;
    /* If the top bit is set the asn1 encoding is 1 larger. */
    buf[0]=0xff;    

    i=i2d_ASN1_INTEGER(&bs,NULL);
    i+=i; /* r and s */
    ret=ASN1_object_size(1,i,V_ASN1_SEQUENCE);
    BN_clear_free(order);
    return(ret);
}

The result of the above function with an EC_KEY on prime256 curve as parameter is
sig_len = ECDSA_size(eckey);

where sig_len is 72.
You need 72 bytes for DER encoded ECDSA signature using a 256-bit EC key.
","9562","<elliptic-curve><ecdsa>","2","9","1","2013-06-26 06:19:24","","1","4","","","","2013-06-24 06:30:04",""
"19665491","How do I get an ECDSA public key from just a Bitcoin signature? ... SEC1 4.1.6 key recovery for curves over (mod p)-fields","
Update: Partial solution available on Git

EDIT: A compiled version of this is available at https://github.com/makerofthings7/Bitcoin-MessageSignerVerifier 
Please note that the message to be verified must have Bitcoin Signed Message:\n as a prefix.  Source1 Source2
There is something wrong in the C# implementation that I can probably correct from this Python implementation 

It seems to have a problem with actually coming up with the correct Base 58 address.
I have the following message, signature, and Base58 address below.  I intend to extract the key from the signature, hash that key, and compare the Base58 hashes.
My problem is: How do I extract the key from the signature?  (Edit I found the c++ code at the bottom of this post, need it in Bouncy Castle / or C#) 
Message
StackOverflow test 123

Signature
IB7XjSi9TdBbB3dVUK4+Uzqf2Pqk71XkZ5PUsVUN+2gnb3TaZWJwWW2jt0OjhHc4B++yYYRy1Lg2kl+WaiF+Xsc=

Base58 Bitcoin address ""hash""
1Kb76YK9a4mhrif766m321AMocNvzeQxqV

Since the Base58 Bitcoin address is just a hash, I can't use it for validation of a Bitcoin message.  However, it is possible to extract the public key from a signature.
Edit: I'm emphasizing that I'm deriving the Public key from the signature itself, and not from the Base58 public key hash.  If I want to (and I actually do want to) I should be able to convert these public key bits into the Base58 hash.  I don't need assistance in doing this, I just need help in extracting the public key bits and verifying the signature.
Question

In the Signature above, what format is this signature in? PKCS10?  (Answer: no, it's proprietary as described here) 
how do I extract the public key in Bouncy Castle?
What is the correct way to verify the signature?  (assume that I already know how to convert the Public Key bits into a hash that equals the Bitcoin hash above)

Prior research
This link describes how to use ECDSA curves, and the following code will allow me to convert a public key into a BC object, but I'm unsure on how to get the point Q from the signature.  
In the sample below Q is the hard coded value
  Org.BouncyCastle.Asn1.X9.X9ECParameters ecp = Org.BouncyCastle.Asn1.Sec.SecNamedCurves.GetByName(""secp256k1"");
  ECDomainParameters params = new ECDomainParameters(ecp.Curve, ecp.G, ecp.N, ecp.H);
  ECPublicKeySpec pubKeySpec = new ECPublicKeySpec(
  ecp .curve.decodePoint(Hex.decode(""045894609CCECF9A92533F630DE713A958E96C97CCB8F5ABB5A688A238DEED6DC2D9D0C94EBFB7D526BA6A61764175B99CB6011E2047F9F067293F57F5"")), // Q
        params);
  PublicKey  pubKey = f.generatePublic(pubKeySpec);


 var signer = SignerUtilities.GetSigner(""ECDSA""); // possibly similar to SHA-1withECDSA
 signer.Init(false, pubKey);
 signer.BlockUpdate(plainTextAsBytes, 0, plainTextAsBytes.Length);
 return signer.VerifySignature(signature);


Additional research:
THIS is the Bitcoin source that verifies a message.
After decoding the Base64 of the signature, the RecoverCompact(hash of message, signature) is called.  I'm not a C++ programmer so I'm assuming I need to figure out how key.Recover works.  That or key.GetPubKey
This is the C++ code that I think I need in C#, ideally in bouncy castle... but I'll take anything that works.
// reconstruct public key from a compact signature
// This is only slightly more CPU intensive than just verifying it.
// If this function succeeds, the recovered public key is guaranteed to be valid
// (the signature is a valid signature of the given data for that key)
bool Recover(const uint256 &hash, const unsigned char *p64, int rec)
{
    if (rec<0 || rec>=3)
        return false;
    ECDSA_SIG *sig = ECDSA_SIG_new();
    BN_bin2bn(&p64[0],  32, sig->r);
    BN_bin2bn(&p64[32], 32, sig->s);
    bool ret = ECDSA_SIG_recover_key_GFp(pkey, sig, (unsigned char*)&hash, sizeof(hash), rec, 0) == 1;
    ECDSA_SIG_free(sig);
    return ret;
}

... the code for ECDSA_SIG_recover_key_GFp  is here
Custom signature format in Bitcoin
This answer says there are 4 possible public keys that can produce a signature, and this is encoded in the newer signatures.
","I'm afraid there are some problems with your sample data. First of all your sample Q is 61 bytes long, but Bitcoin public keys (using secp256k1 curve) should be 65 bytes in their uncompressed form. The Q you supplied does not verify the message correctly, but the Q I have calculated does seem to verify it.
I wrote code that calculates the correct public key for string ""StackOverflow test 123"" and verifies it using ECDsaSigner. However, the hash for this public key is 1HRDe7G7tn925iNxQaeD7R2ZkZiKowN8NW instead of 1Kb76YK9a4mhrif766m321AMocNvzeQxqV.
Can you please verify that your data is correct and maybe give the exact hash of the message string so that we could try to debug, an incorrect hash can mess things up quite bad. The code I have used is following:
using System;
using System.Text;
using System.Security.Cryptography;

using Org.BouncyCastle.Math;
using Org.BouncyCastle.Math.EC;
using Org.BouncyCastle.Asn1.X9;
using Org.BouncyCastle.Crypto.Signers;
using Org.BouncyCastle.Crypto.Parameters;
using Org.BouncyCastle.Utilities.Encoders;

public class Bitcoin
{
  public static ECPoint Recover(byte[] hash, byte[] sigBytes, int rec)
  {
    BigInteger r = new BigInteger(1, sigBytes, 0, 32);
    BigInteger s = new BigInteger(1, sigBytes, 32, 32);
    BigInteger[] sig = new BigInteger[]{ r, s };
    ECPoint Q = ECDSA_SIG_recover_key_GFp(sig, hash, rec, true);
    return Q;
  }

  public static ECPoint ECDSA_SIG_recover_key_GFp(BigInteger[] sig, byte[] hash, int recid, bool check)
  {
    X9ECParameters ecParams = Org.BouncyCastle.Asn1.Sec.SecNamedCurves.GetByName(""secp256k1"");
    int i = recid / 2;

    Console.WriteLine(""r: ""+ToHex(sig[0].ToByteArrayUnsigned()));
    Console.WriteLine(""s: ""+ToHex(sig[1].ToByteArrayUnsigned()));

    BigInteger order = ecParams.N;
    BigInteger field = (ecParams.Curve as FpCurve).Q;
    BigInteger x = order.Multiply(new BigInteger(i.ToString())).Add(sig[0]);
    if (x.CompareTo(field) >= 0) throw new Exception(""X too large"");

    Console.WriteLine(""Order: ""+ToHex(order.ToByteArrayUnsigned()));
    Console.WriteLine(""Field: ""+ToHex(field.ToByteArrayUnsigned()));

    byte[] compressedPoint = new Byte[x.ToByteArrayUnsigned().Length+1];
    compressedPoint[0] = (byte) (0x02+(recid%2));
    Buffer.BlockCopy(x.ToByteArrayUnsigned(), 0, compressedPoint, 1, compressedPoint.Length-1);
    ECPoint R = ecParams.Curve.DecodePoint(compressedPoint);

    Console.WriteLine(""R: ""+ToHex(R.GetEncoded()));

    if (check)
    {
      ECPoint O = R.Multiply(order);
      if (!O.IsInfinity) throw new Exception(""Check failed"");
    }

    int n = (ecParams.Curve as FpCurve).Q.ToByteArrayUnsigned().Length*8;
    BigInteger e = new BigInteger(1, hash);
    if (8*hash.Length > n)
    {
      e = e.ShiftRight(8-(n & 7));
    }
    e = BigInteger.Zero.Subtract(e).Mod(order);
    BigInteger rr = sig[0].ModInverse(order);
    BigInteger sor = sig[1].Multiply(rr).Mod(order);
    BigInteger eor = e.Multiply(rr).Mod(order);
    ECPoint Q = ecParams.G.Multiply(eor).Add(R.Multiply(sor));

    Console.WriteLine(""n: ""+n);
    Console.WriteLine(""e: ""+ToHex(e.ToByteArrayUnsigned()));
    Console.WriteLine(""rr: ""+ToHex(rr.ToByteArrayUnsigned()));
    Console.WriteLine(""sor: ""+ToHex(sor.ToByteArrayUnsigned()));
    Console.WriteLine(""eor: ""+ToHex(eor.ToByteArrayUnsigned()));
    Console.WriteLine(""Q: ""+ToHex(Q.GetEncoded()));

    return Q;
  }

  public static bool VerifySignature(byte[] pubkey, byte[] hash, byte[] sigBytes)
  {
    X9ECParameters ecParams = Org.BouncyCastle.Asn1.Sec.SecNamedCurves.GetByName(""secp256k1"");
    ECDomainParameters domainParameters = new ECDomainParameters(ecParams.Curve,
                                                                 ecParams.G, ecParams.N, ecParams.H,
                                                                 ecParams.GetSeed());

    BigInteger r = new BigInteger(1, sigBytes, 0, 32);
    BigInteger s = new BigInteger(1, sigBytes, 32, 32);
    ECPublicKeyParameters publicKey = new ECPublicKeyParameters(ecParams.Curve.DecodePoint(pubkey), domainParameters);

    ECDsaSigner signer = new ECDsaSigner();
    signer.Init(false, publicKey);
    return signer.VerifySignature(hash, r, s);
  }



  public static void Main()
  {
    string msg = ""StackOverflow test 123"";
    string sig = ""IB7XjSi9TdBbB3dVUK4+Uzqf2Pqk71XkZ5PUsVUN+2gnb3TaZWJwWW2jt0OjhHc4B++yYYRy1Lg2kl+WaiF+Xsc="";
    string pubkey = ""045894609CCECF9A92533F630DE713A958E96C97CCB8F5ABB5A688A238DEED6DC2D9D0C94EBFB7D526BA6A61764175B99CB6011E2047F9F067293F57F5"";

    SHA256Managed sha256 = new SHA256Managed();
    byte[] hash = sha256.ComputeHash(Encoding.UTF8.GetBytes(msg), 0, Encoding.UTF8.GetByteCount(msg));
    Console.WriteLine(""Hash: ""+ToHex(hash));

    byte[] tmpBytes = Convert.FromBase64String(sig);
    byte[] sigBytes = new byte[tmpBytes.Length-1];
    Buffer.BlockCopy(tmpBytes, 1, sigBytes, 0, sigBytes.Length);

    int rec = (tmpBytes[0] - 27) & ~4;
    Console.WriteLine(""Rec {0}"", rec);

    ECPoint Q = Recover(hash, sigBytes, rec);
    string qstr = ToHex(Q.GetEncoded());
    Console.WriteLine(""Q is same as supplied: ""+qstr.Equals(pubkey));

    Console.WriteLine(""Signature verified correctly: ""+VerifySignature(Q.GetEncoded(), hash, sigBytes));
  }

  public static string ToHex(byte[] data)
  {
    return BitConverter.ToString(data).Replace(""-"","""");
  }
}

EDIT
I see this is still not commented on or accepted, so I wrote a full test that generates a private key and a public key, then generates a valid signature using the private key. After that it recovers the public key from the signature and hash and uses that public key to verify the signature of the message. Please see below, if there are still some questions please let me know.
  public static void FullSignatureTest(byte[] hash)
  {
    X9ECParameters ecParams = Org.BouncyCastle.Asn1.Sec.SecNamedCurves.GetByName(""secp256k1"");
    ECDomainParameters domainParameters = new ECDomainParameters(ecParams.Curve,
                                                                 ecParams.G, ecParams.N, ecParams.H,
                                                                 ecParams.GetSeed());
    ECKeyGenerationParameters keyGenParams =
      new ECKeyGenerationParameters(domainParameters, new SecureRandom());

    AsymmetricCipherKeyPair keyPair;
    ECKeyPairGenerator generator = new ECKeyPairGenerator();
    generator.Init(keyGenParams);
    keyPair = generator.GenerateKeyPair();

    ECPrivateKeyParameters privateKey = (ECPrivateKeyParameters) keyPair.Private;
    ECPublicKeyParameters publicKey = (ECPublicKeyParameters) keyPair.Public;

    Console.WriteLine(""Generated private key: "" + ToHex(privateKey.D.ToByteArrayUnsigned()));
    Console.WriteLine(""Generated public key: "" + ToHex(publicKey.Q.GetEncoded()));

    ECDsaSigner signer = new ECDsaSigner();
    signer.Init(true, privateKey);
    BigInteger[] sig = signer.GenerateSignature(hash);

    int recid = -1;
    for (int rec=0; rec<4; rec++) {
      try
      {
        ECPoint Q = ECDSA_SIG_recover_key_GFp(sig, hash, rec, true);
        if (ToHex(publicKey.Q.GetEncoded()).Equals(ToHex(Q.GetEncoded())))
        {
          recid = rec;
          break;
        }
      }
      catch (Exception)
      {
        continue;
      }
    }
    if (recid < 0) throw new Exception(""Did not find proper recid"");

    byte[] fullSigBytes = new byte[65];
    fullSigBytes[0] = (byte) (27+recid);
    Buffer.BlockCopy(sig[0].ToByteArrayUnsigned(), 0, fullSigBytes, 1, 32);
    Buffer.BlockCopy(sig[1].ToByteArrayUnsigned(), 0, fullSigBytes, 33, 32);

    Console.WriteLine(""Generated full signature: "" + Convert.ToBase64String(fullSigBytes));

    byte[] sigBytes = new byte[64];
    Buffer.BlockCopy(sig[0].ToByteArrayUnsigned(), 0, sigBytes, 0, 32);
    Buffer.BlockCopy(sig[1].ToByteArrayUnsigned(), 0, sigBytes, 32, 32);

    ECPoint genQ = ECDSA_SIG_recover_key_GFp(sig, hash, recid, false);
    Console.WriteLine(""Generated signature verifies: "" + VerifySignature(genQ.GetEncoded(), hash, sigBytes));
  }

","8031","<c#><python><openssl><bouncycastle><elliptic-curve>","24","4","2","2019-10-24 22:23:45","20400041","8","5","-1","","2017-04-13 12:47:33","2013-10-29 17:44:51",""
"19665491","How do I get an ECDSA public key from just a Bitcoin signature? ... SEC1 4.1.6 key recovery for curves over (mod p)-fields","
Update: Partial solution available on Git

EDIT: A compiled version of this is available at https://github.com/makerofthings7/Bitcoin-MessageSignerVerifier 
Please note that the message to be verified must have Bitcoin Signed Message:\n as a prefix.  Source1 Source2
There is something wrong in the C# implementation that I can probably correct from this Python implementation 

It seems to have a problem with actually coming up with the correct Base 58 address.
I have the following message, signature, and Base58 address below.  I intend to extract the key from the signature, hash that key, and compare the Base58 hashes.
My problem is: How do I extract the key from the signature?  (Edit I found the c++ code at the bottom of this post, need it in Bouncy Castle / or C#) 
Message
StackOverflow test 123

Signature
IB7XjSi9TdBbB3dVUK4+Uzqf2Pqk71XkZ5PUsVUN+2gnb3TaZWJwWW2jt0OjhHc4B++yYYRy1Lg2kl+WaiF+Xsc=

Base58 Bitcoin address ""hash""
1Kb76YK9a4mhrif766m321AMocNvzeQxqV

Since the Base58 Bitcoin address is just a hash, I can't use it for validation of a Bitcoin message.  However, it is possible to extract the public key from a signature.
Edit: I'm emphasizing that I'm deriving the Public key from the signature itself, and not from the Base58 public key hash.  If I want to (and I actually do want to) I should be able to convert these public key bits into the Base58 hash.  I don't need assistance in doing this, I just need help in extracting the public key bits and verifying the signature.
Question

In the Signature above, what format is this signature in? PKCS10?  (Answer: no, it's proprietary as described here) 
how do I extract the public key in Bouncy Castle?
What is the correct way to verify the signature?  (assume that I already know how to convert the Public Key bits into a hash that equals the Bitcoin hash above)

Prior research
This link describes how to use ECDSA curves, and the following code will allow me to convert a public key into a BC object, but I'm unsure on how to get the point Q from the signature.  
In the sample below Q is the hard coded value
  Org.BouncyCastle.Asn1.X9.X9ECParameters ecp = Org.BouncyCastle.Asn1.Sec.SecNamedCurves.GetByName(""secp256k1"");
  ECDomainParameters params = new ECDomainParameters(ecp.Curve, ecp.G, ecp.N, ecp.H);
  ECPublicKeySpec pubKeySpec = new ECPublicKeySpec(
  ecp .curve.decodePoint(Hex.decode(""045894609CCECF9A92533F630DE713A958E96C97CCB8F5ABB5A688A238DEED6DC2D9D0C94EBFB7D526BA6A61764175B99CB6011E2047F9F067293F57F5"")), // Q
        params);
  PublicKey  pubKey = f.generatePublic(pubKeySpec);


 var signer = SignerUtilities.GetSigner(""ECDSA""); // possibly similar to SHA-1withECDSA
 signer.Init(false, pubKey);
 signer.BlockUpdate(plainTextAsBytes, 0, plainTextAsBytes.Length);
 return signer.VerifySignature(signature);


Additional research:
THIS is the Bitcoin source that verifies a message.
After decoding the Base64 of the signature, the RecoverCompact(hash of message, signature) is called.  I'm not a C++ programmer so I'm assuming I need to figure out how key.Recover works.  That or key.GetPubKey
This is the C++ code that I think I need in C#, ideally in bouncy castle... but I'll take anything that works.
// reconstruct public key from a compact signature
// This is only slightly more CPU intensive than just verifying it.
// If this function succeeds, the recovered public key is guaranteed to be valid
// (the signature is a valid signature of the given data for that key)
bool Recover(const uint256 &hash, const unsigned char *p64, int rec)
{
    if (rec<0 || rec>=3)
        return false;
    ECDSA_SIG *sig = ECDSA_SIG_new();
    BN_bin2bn(&p64[0],  32, sig->r);
    BN_bin2bn(&p64[32], 32, sig->s);
    bool ret = ECDSA_SIG_recover_key_GFp(pkey, sig, (unsigned char*)&hash, sizeof(hash), rec, 0) == 1;
    ECDSA_SIG_free(sig);
    return ret;
}

... the code for ECDSA_SIG_recover_key_GFp  is here
Custom signature format in Bitcoin
This answer says there are 4 possible public keys that can produce a signature, and this is encoded in the newer signatures.
","After referencing BitcoinJ, it appears some of these code samples are missing proper preparation of the message, double-SHA256 hashing, and possible compressed encoding of the recovered public point that is input to the address calculation.
The following code should only need BouncyCastle (probably you'll need recent version from github, not sure). It borrows a few things from BitcoinJ, and does just does enough to get small examples working, see inline comments for message size restrictions.
It only calculates up to the RIPEMD-160 hash, and I used http://gobittest.appspot.com/Address to check the final address that results (unfortunately that website doesn't seem to support entering a compressed encoding for the public key).
    public static void CheckSignedMessage(string message, string sig64)
    {
        byte[] sigBytes = Convert.FromBase64String(sig64);
        byte[] msgBytes = FormatMessageForSigning(message);

        int first = (sigBytes[0] - 27);
        bool comp = (first & 4) != 0;
        int rec = first & 3;

        BigInteger[] sig = ParseSig(sigBytes, 1);
        byte[] msgHash = DigestUtilities.CalculateDigest(""SHA-256"", DigestUtilities.CalculateDigest(""SHA-256"", msgBytes));

        ECPoint Q = Recover(msgHash, sig, rec, true);

        byte[] qEnc = Q.GetEncoded(comp);
        Console.WriteLine(""Q: "" + Hex.ToHexString(qEnc));

        byte[] qHash = DigestUtilities.CalculateDigest(""RIPEMD-160"", DigestUtilities.CalculateDigest(""SHA-256"", qEnc));
        Console.WriteLine(""RIPEMD-160(SHA-256(Q)): "" + Hex.ToHexString(qHash));

        Console.WriteLine(""Signature verified correctly: "" + VerifySignature(Q, msgHash, sig));
    }

    public static BigInteger[] ParseSig(byte[] sigBytes, int sigOff)
    {
        BigInteger r = new BigInteger(1, sigBytes, sigOff, 32);
        BigInteger s = new BigInteger(1, sigBytes, sigOff + 32, 32);
        return new BigInteger[] { r, s };
    }

    public static ECPoint Recover(byte[] hash, BigInteger[] sig, int recid, bool check)
    {
        X9ECParameters x9 = SecNamedCurves.GetByName(""secp256k1"");

        BigInteger r = sig[0], s = sig[1];

        FpCurve curve = x9.Curve as FpCurve;
        BigInteger order = x9.N;

        BigInteger x = r;
        if ((recid & 2) != 0)
        {
            x = x.Add(order);
        }

        if (x.CompareTo(curve.Q) >= 0) throw new Exception(""X too large"");

        byte[] xEnc = X9IntegerConverter.IntegerToBytes(x, X9IntegerConverter.GetByteLength(curve));

        byte[] compEncoding = new byte[xEnc.Length + 1];
        compEncoding[0] = (byte)(0x02 + (recid & 1));
        xEnc.CopyTo(compEncoding, 1);
        ECPoint R = x9.Curve.DecodePoint(compEncoding);

        if (check)
        {
            //EC_POINT_mul(group, O, NULL, R, order, ctx))
            ECPoint O = R.Multiply(order);
            if (!O.IsInfinity) throw new Exception(""Check failed"");
        }

        BigInteger e = CalculateE(order, hash);

        BigInteger rInv = r.ModInverse(order);
        BigInteger srInv = s.Multiply(rInv).Mod(order);
        BigInteger erInv = e.Multiply(rInv).Mod(order);

        return ECAlgorithms.SumOfTwoMultiplies(R, srInv, x9.G.Negate(), erInv);
    }

    public static bool VerifySignature(ECPoint Q, byte[] hash, BigInteger[] sig)
    {
        X9ECParameters x9 = SecNamedCurves.GetByName(""secp256k1"");
        ECDomainParameters ec = new ECDomainParameters(x9.Curve, x9.G, x9.N, x9.H, x9.GetSeed());
        ECPublicKeyParameters publicKey = new ECPublicKeyParameters(Q, ec);
        return VerifySignature(publicKey, hash, sig);
    }

    public static bool VerifySignature(ECPublicKeyParameters publicKey, byte[] hash, BigInteger[] sig)
    {
        ECDsaSigner signer = new ECDsaSigner();
        signer.Init(false, publicKey);
        return signer.VerifySignature(hash, sig[0], sig[1]);
    }

    private static BigInteger CalculateE(
        BigInteger n,
        byte[] message)
    {
        int messageBitLength = message.Length * 8;
        BigInteger trunc = new BigInteger(1, message);

        if (n.BitLength < messageBitLength)
        {
            trunc = trunc.ShiftRight(messageBitLength - n.BitLength);
        }

        return trunc;
    }

    public static byte[] FormatMessageForSigning(String message)
    {
        MemoryStream bos = new MemoryStream();
        bos.WriteByte((byte)BITCOIN_SIGNED_MESSAGE_HEADER_BYTES.Length);
        bos.Write(BITCOIN_SIGNED_MESSAGE_HEADER_BYTES, 0, BITCOIN_SIGNED_MESSAGE_HEADER_BYTES.Length);
        byte[] messageBytes = Encoding.UTF8.GetBytes(message);

        //VarInt size = new VarInt(messageBytes.length);
        //bos.write(size.encode());
        // HACK only works for short messages (< 253 bytes)
        bos.WriteByte((byte)messageBytes.Length);

        bos.Write(messageBytes, 0, messageBytes.Length);
        return bos.ToArray();
    }

Sample output for the initial data in the question:

Q: 0283437893b491218348bf5ff149325e47eb628ce36f73a1a927ae6cb6021c7ac4
RIPEMD-160(SHA-256(Q)): cbe57ebe20ad59518d14926f8ab47fecc984af49
Signature verified correctly: True


If we plug the RIPEMD-160 value into the address checker, it returns

1Kb76YK9a4mhrif766m321AMocNvzeQxqV


as given in the question.
","8031","<c#><python><openssl><bouncycastle><elliptic-curve>","24","9","2","2019-10-24 22:23:45","20400041","8","5","-1","","2017-04-13 12:47:33","2013-10-29 17:44:51",""
"4969570","Is there a difference between ECDH and ECDSA keys?","I'm building a network application that uses BouncyCastle as a cryptography provider.  Let's say you have this to generate a keypair:
ECParameterSpec ecSpec = ECNamedCurveTable.getParameterSpec(""prime192v1"");
KeyPairGenerator g = KeyPairGenerator.getInstance(""ECDSA"", ""BC"");
g.initialize(ecSpec, new SecureRandom());
KeyPair pair = g.generateKeyPair();

I'm confused as to why you're getting an instance of an ECDSA KeyPairGenerator.  Why doesn't it just say EC?  I know that there's an ECDH Key type that is shipped with BouncyCastle, but I thought that the two represented the same stuff about the points on the curve --  or am I completely wrong with the theory behind it?
The reason that I ask is that right now my application uses ECDH fine to establish an AES secret key, but now I want to use the same EC key to sign each message using ECDSA.
","ECDSA and ECDH are from distinct standards (ANSI X9.62 and X9.63, respectively), and used in distinct contexts. X9.63 explicitly reuses elements from X9.62, including the standard representation of public keys (e.g. in X.509 certificates). Hence, ECDSA and ECDH key pairs are largely interchangeable. Whether a given implementation will permit such exchange, however, is an open question. Historically, (EC)DSA and (EC)DH come from distinct worlds.
Note, though, that usage contexts are quite distinct. There is a bit more to cryptography than computations on elliptic curves; the ""key lifecycle"" must be taken into account. In plain words, you do not want to manage key agreement keys and signature keys with the same procedures. For instance, if you lose your key agreement key (your dog eats your smartcard -- do not laugh, it really happens), then you can no longer decrypt data which was encrypted relatively to that key (e.g. encrypted emails sent to you, and stored in encrypted format). From a business point of view, the loss of a key can also be the loss of an employee (the employee was fired, and was struck by a bus, or retired, or whatever). Hence, encryption keys (including key agreement keys) must often be escrowed (for instance, a copy of the private key is printed and stored in a safe). On the other hand, loss of a signature key implies no data loss; previously issued signatures can still be verified; recovering from such a loss is as simple as creating a new key pair. However, the existence of an escrow system tends to automatically strip signatures of any legal value that could be attached to them.
Also, on a more general basis, I would strongly advise against using the same private key in two distinct algorithms: interactions between algorithms have not been fully explored (simply studying one algorithm is already hard work). For instance, what happens if someone begins to feed your ECDH-based protocol with curve points extracted from ECDSA signatures which you computed with the same private key ?
So you really should not reuse the same key for ECDH and ECDSA.
","7744","<java><security><bouncycastle><elliptic-curve>","12","26","1","2011-02-11 15:13:00","4970640","0","2","","","","2011-02-11 13:31:55",""
"18155559","How does one access the raw ECDH public key, private key and params inside OpenSSL's EVP_PKEY structure?","I'm using OpenSSL's c library to generate an elliptic curve Diffie-Hellman (ECDH) key pair, following the first code sample here. It glosses over the actual exchange of public keys with this line:
peerkey = get_peerkey(pkey);

The pkey variable and the return value are both of type EVP *. pkey contains the public key, private key, and params generated earlier, and the return value only contains the peer's public key. So this raises three questions:

How would get_peerkey() actually extract just the public key from pkey for sending to the peer?
How would the code extract the private key and params from pKey to store them for later use after the key exchange?
How would get_peerkey() generate a new EVP_PKEY structure from the peer's raw public key?

I've seen the OpenSSL functions EVP_PKEY_print_public(), EVP_PKEY_print_private(), and EVP_PKEY_print_params() but these are for generating human-readable output. And I haven't found any equivalent for converting a human-readable public key back into an EVP_PKEY structure.
","To answer my own question, there's a different path for the private key and the public key.
To serialize the public key:

Pass the EVP_PKEY to EVP_PKEY_get1_EC_KEY() to get an EC_KEY.
Pass the EC_KEY to EC_KEY_get0_public_key() to get an EC_POINT.
Pass the EC_POINT to EC_POINT_point2oct() to get octets, which are just unsigned char *.

To deserialize the public key:

Pass the octets to EC_POINT_oct2point() to get an EC_POINT.
Pass the EC_POINT to EC_KEY_set_public_key() to get an EC_KEY.
Pass the EC_KEY to EVP_PKEY_set1_EC_KEY to get an EVP_KEY.

To serialize the private key:

Pass the EVP_PKEY to EVP_PKEY_get1_EC_KEY() to get an EC_KEY.
Pass the EC_KEY to EC_KEY_get0_private_key() to get a BIGNUM. 
Pass the BIGNUM to BN_bn2mpi() to get an mpi, which is a format written to
unsigned char *.

To deserialize the private key:

Pass the mpi to BN_mpi2bn() to get a BIGNUM.
Pass the BIGNUM to EC_KEY_set_private_key() to get an EC_KEY.
Pass the EC_KEY to EVP_PKEY_set1_EC_KEY to get an EVP_KEY.

It is also possible to convert the BIGNUM to hex, decimal, or ""bin"", although I think that mpi used the fewest bytes.
","6926","<c><openssl><pki><elliptic-curve><diffie-hellman>","17","36","1","2015-07-26 01:22:57","18603667","0","7","","","","2013-08-09 20:58:23",""
"22646792","How does one convert a public EC code point and curve name into a PublicKey?","I have two 32 byte long byte arrays representing the X and Y values for an EC Public Key. I know that the curve is the named curve ""prime256v1"".
How can I turn that into a Java PublicKey object?
The JCE appears to provide no facilities whatsoever to use named curves.
Bouncycastle's example code does not appear to compile with any version of bouncycastle I can find.
WTF?
","I don't see any way in JCE to use a named curve directly for a key, but it can be used for key generation, and the parameters can then be extracted from that key:
    // generate bogus keypair(!) with named-curve params
    KeyPairGenerator kpg = KeyPairGenerator.getInstance(""EC"");
    ECGenParameterSpec gps = new ECGenParameterSpec (""secp256r1""); // NIST P-256 
    kpg.initialize(gps); 
    KeyPair apair = kpg.generateKeyPair(); 
    ECPublicKey apub  = (ECPublicKey)apair.getPublic();
    ECParameterSpec aspec = apub.getParams();
    // could serialize aspec for later use (in compatible JRE)
    //
    // for test only reuse bogus pubkey, for real substitute values 
    ECPoint apoint = apub.getW();
    BigInteger x = apoint.getAffineX(), y = apoint.getAffineY();
    // construct point plus params to pubkey
    ECPoint bpoint = new ECPoint (x,y); 
    ECPublicKeySpec bpubs = new ECPublicKeySpec (bpoint, aspec);
    KeyFactory kfa = KeyFactory.getInstance (""EC"");
    ECPublicKey bpub = (ECPublicKey) kfa.generatePublic(bpubs);
    //
    // for test sign with original key, verify with reconstructed key
    Signature sig = Signature.getInstance (""SHA256withECDSA"");
    byte [] data = ""test"".getBytes();
    sig.initSign(apair.getPrivate());
    sig.update (data);
    byte[] dsig = sig.sign();
    sig.initVerify(bpub);
    sig.update(data);
    System.out.println (sig.verify(dsig));

You do get the parameters, but apparently no longer linked to the OID, which might make a difference.
In particular it may be treated as ""arbitrary"" or ""explicit"" in TLS and not work 
even though the TLS parties support that same curve by name.
Note that openssl uses the name prime256v1 but not everyone does. Java (sun.) uses secp256r1, or the OID.
If you are actually getting this pubkey from openssl, note that JCE can directly read the X.509 
SubjectPublicKeyInfo format, which openssl calls PUBKEY, including the named (OID) form.
","6688","<java><bouncycastle><jce><elliptic-curve>","5","9","2","2015-03-30 20:32:54","29355749","0","3","","","","2014-03-25 21:35:29",""
"22646792","How does one convert a public EC code point and curve name into a PublicKey?","I have two 32 byte long byte arrays representing the X and Y values for an EC Public Key. I know that the curve is the named curve ""prime256v1"".
How can I turn that into a Java PublicKey object?
The JCE appears to provide no facilities whatsoever to use named curves.
Bouncycastle's example code does not appear to compile with any version of bouncycastle I can find.
WTF?
","It turns out that there is, in fact, another way to do this. The AlgorithmParameters class can apparently be used to translate an ECGenParameterSpec, with a named curve, into an ECParameterSpec object that you can use with a KeyFactory to generate a PublicKey object:
            ECPoint pubPoint = new ECPoint(new BigInteger(1, x),new BigInteger(1, y));
            AlgorithmParameters parameters = AlgorithmParameters.getInstance(""EC"", ""SunEC"");
            parameters.init(new ECGenParameterSpec(""secp256r1""));
            ECParameterSpec ecParameters = parameters.getParameterSpec(ECParameterSpec.class);
            ECPublicKeySpec pubSpec = new ECPublicKeySpec(pubPoint, ecParameters);
            KeyFactory kf = KeyFactory.getInstance(""EC"");
            return (ECPublicKey)kf.generatePublic(pubSpec);

","6688","<java><bouncycastle><jce><elliptic-curve>","5","8","2","2015-03-30 20:32:54","29355749","0","3","","","","2014-03-25 21:35:29",""
"12303079","Java 7 keytool Elliptic Curve Encryption","I'm trying to create a keystore using keytool with a keyalg ECC.
This should be possible according to Oracle.
I quote:

Area: Tools
Synopsis: The keytool and jarsigner tools now support the ECC algorithm in keypair generation and jar signing.
RFE: 6870812

I'm using the 32-bit version 1.7.0_07, and I've tried keytool with -keyalg ECC, ECIES, ECDSA,... but I always get Cannot derive signature algorithm. 
Am I using the wrong Java version? Am I using the wrong name for ECC?
","I believe you have to install the unlimited strength policy for JCE to work with all algorithims. If you haven't done so already, it's at the bottom of this page: http://www.oracle.com/technetwork/java/javase/downloads/index.html
","6234","<java><encryption><keytool><elliptic-curve>","9","4","2","2014-03-28 20:06:19","22722235","0","1","1065525","","2012-09-07 08:18:13","2012-09-06 15:08:08",""
"12303079","Java 7 keytool Elliptic Curve Encryption","I'm trying to create a keystore using keytool with a keyalg ECC.
This should be possible according to Oracle.
I quote:

Area: Tools
Synopsis: The keytool and jarsigner tools now support the ECC algorithm in keypair generation and jar signing.
RFE: 6870812

I'm using the 32-bit version 1.7.0_07, and I've tried keytool with -keyalg ECC, ECIES, ECDSA,... but I always get Cannot derive signature algorithm. 
Am I using the wrong Java version? Am I using the wrong name for ECC?
","Here is the source for the algorithm selection. The allowed values are DSA, RSA and EC. These values are not documented anywhere as far as I can tell.
","6234","<java><encryption><keytool><elliptic-curve>","9","9","2","2014-03-28 20:06:19","22722235","0","1","1065525","","2012-09-07 08:18:13","2012-09-06 15:08:08",""
"2218879","Turn an byte encoded Key back into it's original ECPublicKey in Bouncy Castle","In Java I have a ECDH public Key that I am sending as a byte array.
Once I have received the byte array how can I turn it back into a public key?
I am using Bouncy Castle but a Java solution would be just as useful.
Thanks
","How are the raw bytes formatted for the ECDH key?  Where are you getting the raw bytes?
Generally, one uses the appropriate *Spec class to turn raw key material into a Key but the ECPublicKeySpec and DHPublicKeySpec classes don't accept a raw byte array.
","5399","<java><encryption><bouncycastle><elliptic-curve>","8","-1","3","2013-10-30 10:52:27","2219209","1","1","","","","2010-02-07 23:55:17",""
"2218879","Turn an byte encoded Key back into it's original ECPublicKey in Bouncy Castle","In Java I have a ECDH public Key that I am sending as a byte array.
Once I have received the byte array how can I turn it back into a public key?
I am using Bouncy Castle but a Java solution would be just as useful.
Thanks
","When you got the encoded key, assuming you used the default ""[your keyPair].getPublic().getEncoded()"" method, this will work.
    X509EncodedKeySpec ks = new X509EncodedKeySpec(pubKeyByteString.toByteArray());
    KeyFactory kf;
    try {
         kf = java.security.KeyFactory.getInstance(""ECDH"");
    } catch (NoSuchAlgorithmException e) {
        log.error(""Cryptography error: could not initialize ECDH keyfactory!"", e);
        return;
    }

    ECPublicKey remotePublicKey;

    try {
        remotePublicKey = (ECPublicKey)kf.generatePublic(ks);
    } catch (InvalidKeySpecException e) {
        log.warn(""Received invalid key specification from client"",e);
        return;
    } catch (ClassCastException e) {
        log.warn(""Received valid X.509 key from client but it was not EC Public Key material"",e);
        return;
    }

","5399","<java><encryption><bouncycastle><elliptic-curve>","8","5","3","2013-10-30 10:52:27","2219209","1","1","","","","2010-02-07 23:55:17",""
"2218879","Turn an byte encoded Key back into it's original ECPublicKey in Bouncy Castle","In Java I have a ECDH public Key that I am sending as a byte array.
Once I have received the byte array how can I turn it back into a public key?
I am using Bouncy Castle but a Java solution would be just as useful.
Thanks
","I found the above solution by @LaceCard didn't work for me. In general this isn't obvious but then again nothing in cryptography is ;)
String key = ""MihU9ztW9sEvkBL6BxyaOMgkSbodNS8yoHaHcio+WE...blahblah""
byte[] keyBytes = Base64.decode(key);

//If using Android and Spongycastle provider should be ""SC""
KeyFactory kf = KeyFactory.getInstance(""ECDH"", ""BC"");
//CURVE_NAME e.g prime192v1
ECParameterSpec ecSpec = ECNamedCurveTable.getParameterSpec(CURVE_NAME);
ECPoint point = ecSpec.getCurve().decodePoint(keyBytes);
ECPublicKeySpec pubSpec = new ECPublicKeySpec(point, ecSpec);

ECPublicKey myECPublicKey = (ECPublicKey) kf.generatePublic(pubSpec);

Note: you'll need to handle the potential exceptions appropriately 
","5399","<java><encryption><bouncycastle><elliptic-curve>","8","4","3","2013-10-30 10:52:27","2219209","1","1","","","","2010-02-07 23:55:17",""
"24963710","Read EC public key from .pem file in C","I generated a EC public and private key pair using:
openssl ecparam -name prime256v1 -genkey -noout -out ecprikey.pem
openssl ec -in ecprikey.pem -pubout -out ecpubkey.pem

I want to read the public key into a byte array in C. How do I go about it? Just read from the file? Or does OpenSSL provide something? THank you!
","
I want to read the public key into a byte array in C...

Well, the key on disk is likely PEM encoded. Because its a public key, it probably has the pre- and post- encapsulated boundaries of -----BEGIN PUBLIC KEY----- and -----END PUBLIC KEY-----. You can read it like that using standard library functions.
You can also read the public key with PEM_read_PUBKEY. The function returns a EVP_PKEY*. I believe you can convert the EVP_PKEY* to a EC_KEY* with:
EC_KEY* ecKey = EVP_PKEY_get1_EC_KEY(pKey);

The get1 above means the reference count on the key was bumped (as opposed to get0). Be sure to call EC_KEY_free when done with it.
I'm not sure how you would read the public key into an array given a EVP_PKEY* or EC_KEY*. At minimum, there are two pieces of information: the curve (like secp256k1) and the public element (a point on the curve, which consists of an (x,y) coordinate). If the named curve (i.e., the OID) is not present (i.e., the absence of the OPENSSL_EC_NAMED_CURVE flag), then you have all the domain parameters like p, a, b, G, etc. Perhaps you should look at an ASN.1/DER encoding. I think that's the closet you are going to get.
","4415","<c><openssl><public-key><elliptic-curve>","3","2","1","2014-07-26 17:34:25","","2","2","2344584","","2014-07-25 20:53:31","2014-07-25 20:08:30",""
"15727147","Scalar Multiplication of Point over elliptic Curve","I am implementing Elliptic Curve Point arithmetic operation on NIST specified curve ""p192"". For testing purpose I have taken example points shown in NIST Routine document for the curve p192. 
I am getting correct answer for addition of point and doubling of point but for scalar multiplication my answers are not correct. Due to this reason I am unable to reach whether
$ k^{-1}(kP) = P $

where
$ k^{-1}.k = 1 mod p $

Please help me to understand where I am making mistakes.
package a;
import java.math.BigInteger;
import java.security.spec.ECPoint;
public class ScalarMultiply {
private static final BigInteger ONE = new BigInteger(""1"");;
static BigInteger TWO = new BigInteger(""2"");
    static BigInteger p = new BigInteger(""6277101735386680763835789423207666416083908700390324961279"");


public static ECPoint scalmult(ECPoint P, BigInteger k){
    ECPoint R =P,S = P;
    int length = k.bitLength();
    //System.out.println(""length is"" + length);
    byte[] binarray = new byte[length];
    for(int i=0;i<=length-1;i++){
        binarray[i] = k.mod(TWO).byteValue();
        k = k.divide(TWO);

    }
    for(int i=0;i<=length-1;i++){
        System.out.print("""" + binarray[i]); 
    }

    for(int i = length - 2;i > 0;i--){
        R = doublePoint(R);
        if(binarray[i]== 1) 
            R = addPoint(R, S);
    }
return R;
}

public static ECPoint addPoint(ECPoint r, ECPoint s) {

    BigInteger slope = (r.getAffineY().subtract(s.getAffineY())).multiply(r.getAffineX().subtract(s.getAffineX()).modInverse(p)).mod(p);
    BigInteger Xout = (slope.modPow(TWO, p).subtract(r.getAffineX())).subtract(s.getAffineX()).mod(p);
    BigInteger Yout = r.getAffineY().negate().mod(p);
    Yout = Yout.add(slope.multiply(r.getAffineX().subtract(Xout))).mod(p);
    ECPoint out = new ECPoint(Xout, Yout);
    return out;
}

public static ECPoint doublePoint(ECPoint r) {
    // TODO Auto-generated method stub
    BigInteger slope = (r.getAffineX().pow(2)).multiply(new BigInteger(""3""));
    slope = slope.add(new BigInteger(""3""));
    slope = slope.multiply((r.getAffineY().multiply(TWO)).modInverse(p));
    BigInteger Xout = slope.pow(2).subtract(r.getAffineX().multiply(new BigInteger(""2""))).mod(p);
    BigInteger Yout = (r.getAffineY().negate()).add(slope.multiply(r.getAffineX().subtract(Xout))).mod(p);
    ECPoint out = new ECPoint(Xout, Yout);
    return out;
}
}

The main Class is
    package a;
    import java.math.BigInteger;
    import java.security.spec.ECPoint;

    public class EccArithmetic {

    /**
     * @param args
     */
    public static void main(String[] args) {

             BigInteger xs = new BigInteger(""d458e7d127ae671b0c330266d246769353a012073e97acf8"", 16);
             BigInteger ys = new BigInteger
(""325930500d851f336bddc050cf7fb11b5673a1645086df3b"", 16);
             BigInteger xt = new BigInteger

(""f22c4395213e9ebe67ddecdd87fdbd01be16fb059b9753a4"", 16);
             BigInteger yt = new BigInteger

(""264424096af2b3597796db48f8dfb41fa9cecc97691a9c79"", 16);
             ECPoint S = new ECPoint(xs,ys);
             ECPoint T = new ECPoint(xt,yt);
             // Verifying addition 

             ECPoint Rst = ScalarMultiply.addPoint(S, T);
             BigInteger xst = new BigInteger

(""48e1e4096b9b8e5ca9d0f1f077b8abf58e843894de4d0290"", 16);   // Specified value of x of point R for addition  in NIST Routine example
             System.out.println(""\nx-coordinate of point Rst is : "" + Rst.getAffineX()); 
             System.out.println(""\ny-coordinate of point Rst is : "" + Rst.getAffineY());
             if(Rst.getAffineX().equals(xst))
                 System.out.println(""Adding is correct"");

//Verifying Doubling
BigInteger xr = new BigInteger

(""30c5bc6b8c7da25354b373dc14dd8a0eba42d25a3f6e6962"", 16);  // Specified value of x of point R for doubling  in NIST Routine example
             BigInteger yr = new BigInteger

(""0dde14bc4249a721c407aedbf011e2ddbbcb2968c9d889cf"", 16);
             ECPoint R2s = new ECPoint(xr, yr);  // Specified value of y of point R for doubling  in NIST Routine example
             System.out.println(""\nx-coordinate of point R2s is : "" + R2s.getAffineX()); 
             System.out.println(""\ny-coordinate of point R2s is : "" + R2s.getAffineY());
             System.out.println(""\nx-coordinate of calculated point is : "" + 

ScalarMultiply.doublePoint(S).getAffineX()); 
             System.out.println(""\ny-coordinate of calculated point is : "" + 

ScalarMultiply.doublePoint(S).getAffineY());
             if(R2s.getAffineX().equals(ScalarMultiply.doublePoint(S).getAffineX()))
                 System.out.println(""Doubling is correct"");

             xr = new BigInteger(""1faee4205a4f669d2d0a8f25e3bcec9a62a6952965bf6d31"", 16);  // Specified value of x of point R for scalar Multiplication  in NIST Routine example
             yr = new BigInteger(""5ff2cdfa508a2581892367087c696f179e7a4d7e8260fb06"", 16);   // Specified value of y of point R for scalar Multiplication  in NIST Routine example
             ECPoint Rds = new ECPoint(xr, yr);
             BigInteger d = new BigInteger

(""a78a236d60baec0c5dd41b33a542463a8255391af64c74ee"", 16);
             //Rs = new ECPoint(ScalarMultiply.scalmult(S, d).getAffineX(), yr);
             System.out.println(""\nx-coordinate of point Rds is : "" + Rds.getAffineX());
            System.out.println(""\nx-coordinate of point Rds is : "" + Rds.getAffineY());
            System.out.println(""\nx-coordinate of calculated point is : "" + ScalarMultiply.scalmult(S, 

            d).getAffineX());
            System.out.println(""\nx-coordinate of calculated point is : "" + ScalarMultiply.scalmult(S, 

            d).getAffineY());            
            if(Rds.getAffineX().equals(ScalarMultiply.scalmult(S, d).getAffineX()))
                 System.out.println(""Scalar Multiplication is correct"");

    }
}

","Both addPoint and doublePoint are incorrect. The following edited JAVA code does the double-and-add scalar multiplication, and check whether the results of adding, doubling, scalar multiplying are correct:
ScalarMultiply.java
public class ScalarMultiply {

private static final BigInteger ONE = new BigInteger(""1"");;
static BigInteger TWO = new BigInteger(""2"");
static BigInteger p = new BigInteger(""6277101735386680763835789423207666416083908700390324961279"");
static BigInteger a = new BigInteger(""6277101735386680763835789423207666416083908700390324961276"");


public static ECPoint scalmult(ECPoint P, BigInteger kin){
    //ECPoint R=P; - incorrect
    ECPoint R = ECPoint.POINT_INFINITY,S = P;
    BigInteger k = kin.mod(p);
    int length = k.bitLength();
    //System.out.println(""length is"" + length);
    byte[] binarray = new byte[length];
    for(int i=0;i<=length-1;i++){
        binarray[i] = k.mod(TWO).byteValue();
        k = k.divide(TWO);
    }
    /*for(int i = length-1;i >= 0;i--){
        System.out.print("""" + binarray[i]); 
    }*/

    for(int i = length-1;i >= 0;i--){
        // i should start at length-1 not -2 because the MSB of binarry may not be 1
        R = doublePoint(R);
        if(binarray[i]== 1) 
            R = addPoint(R, S);
    }
return R;
}

public static ECPoint addPoint(ECPoint r, ECPoint s) {

    if (r.equals(s))
        return doublePoint(r);
    else if (r.equals(ECPoint.POINT_INFINITY))
        return s;
    else if (s.equals(ECPoint.POINT_INFINITY))
        return r;
    BigInteger slope = (r.getAffineY().subtract(s.getAffineY())).multiply(r.getAffineX().subtract(s.getAffineX()).modInverse(p)).mod(p);
    BigInteger Xout = (slope.modPow(TWO, p).subtract(r.getAffineX())).subtract(s.getAffineX()).mod(p);
    //BigInteger Yout = r.getAffineY().negate().mod(p); - incorrect
    BigInteger Yout = s.getAffineY().negate().mod(p);
    //Yout = Yout.add(slope.multiply(r.getAffineX().subtract(Xout))).mod(p); - incorrect
    Yout = Yout.add(slope.multiply(s.getAffineX().subtract(Xout))).mod(p);
    ECPoint out = new ECPoint(Xout, Yout);
    return out;
}

public static ECPoint doublePoint(ECPoint r) {
    if (r.equals(ECPoint.POINT_INFINITY)) 
        return r;
    BigInteger slope = (r.getAffineX().pow(2)).multiply(new BigInteger(""3""));
    //slope = slope.add(new BigInteger(""3"")); - incorrect
    slope = slope.add(a);
    slope = slope.multiply((r.getAffineY().multiply(TWO)).modInverse(p));
    BigInteger Xout = slope.pow(2).subtract(r.getAffineX().multiply(TWO)).mod(p);
    BigInteger Yout = (r.getAffineY().negate()).add(slope.multiply(r.getAffineX().subtract(Xout))).mod(p);
    ECPoint out = new ECPoint(Xout, Yout);
    return out;
}

EccArithmetic.java
public class EccArithmetic {

public static void main(String[] args) {

    BigInteger xs = new BigInteger(""d458e7d127ae671b0c330266d246769353a012073e97acf8"", 16);
    BigInteger ys = new BigInteger(""325930500d851f336bddc050cf7fb11b5673a1645086df3b"", 16);
    BigInteger xt = new BigInteger(""f22c4395213e9ebe67ddecdd87fdbd01be16fb059b9753a4"", 16);
    BigInteger yt = new BigInteger(""264424096af2b3597796db48f8dfb41fa9cecc97691a9c79"", 16);
    ECPoint S = new ECPoint(xs,ys);
    ECPoint T = new ECPoint(xt,yt);
    // Verifying addition 

    ECPoint Rst = ScalarMultiply.addPoint(S, T);
    BigInteger xst = new BigInteger(""48e1e4096b9b8e5ca9d0f1f077b8abf58e843894de4d0290"", 16);   // Specified value of x of point R for addition  in NIST Routine example
    System.out.println(""\nx-coordinate of point Rst is : "" + Rst.getAffineX()); 
    System.out.println(""\ny-coordinate of point Rst is : "" + Rst.getAffineY());
    if(Rst.getAffineX().equals(xst))
        System.out.println(""Adding is correct"");

    //Verifying Doubling
    BigInteger xr = new BigInteger(""30c5bc6b8c7da25354b373dc14dd8a0eba42d25a3f6e6962"", 16);  // Specified value of x of point R for doubling  in NIST Routine example
    BigInteger yr = new BigInteger(""0dde14bc4249a721c407aedbf011e2ddbbcb2968c9d889cf"", 16);
    ECPoint R2s = new ECPoint(xr, yr);  // Specified value of y of point R for doubling  in NIST Routine example
    System.out.println(""\nx-coordinate of point R2s is : "" + R2s.getAffineX()); 
    System.out.println(""\ny-coordinate of point R2s is : "" + R2s.getAffineY());
    System.out.println(""\nx-coordinate of calculated point is : "" + ScalarMultiply.doublePoint(S).getAffineX()); 
    System.out.println(""\ny-coordinate of calculated point is : "" +    ScalarMultiply.doublePoint(S).getAffineY());
    if(R2s.getAffineX().equals(ScalarMultiply.doublePoint(S).getAffineX()) &&
       R2s.getAffineY().equals(ScalarMultiply.doublePoint(S).getAffineY()))
        System.out.println(""Doubling is correct"");

    xr = new BigInteger(""1faee4205a4f669d2d0a8f25e3bcec9a62a6952965bf6d31"", 16);  // Specified value of x of point R for scalar Multiplication  in NIST Routine example
    yr = new BigInteger(""5ff2cdfa508a2581892367087c696f179e7a4d7e8260fb06"", 16);   // Specified value of y of point R for scalar Multiplication  in NIST Routine example
    ECPoint Rds = new ECPoint(xr, yr);
    BigInteger d = new BigInteger(""a78a236d60baec0c5dd41b33a542463a8255391af64c74ee"", 16);

    ECPoint Rs = ScalarMultiply.scalmult(S, d);

    System.out.println(""\nx-coordinate of point Rds is : "" + Rds.getAffineX());
    System.out.println(""\ny-coordinate of point Rds is : "" + Rds.getAffineY());
    System.out.println(""\nx-coordinate of calculated point is : "" + Rs.getAffineX());
    System.out.println(""\ny-coordinate of calculated point is : "" + Rs.getAffineY()); 


    if(Rds.getAffineX().equals(Rs.getAffineX()) &&
       Rds.getAffineY().equals(Rs.getAffineY()))
        System.out.println(""Scalar Multiplication is correct"");

}
}

","4335","<java><elliptic-curve>","4","4","2","2015-04-30 06:42:28","","1","2","2228618","","2013-04-01 06:01:19","2013-03-31 06:54:19",""
"15727147","Scalar Multiplication of Point over elliptic Curve","I am implementing Elliptic Curve Point arithmetic operation on NIST specified curve ""p192"". For testing purpose I have taken example points shown in NIST Routine document for the curve p192. 
I am getting correct answer for addition of point and doubling of point but for scalar multiplication my answers are not correct. Due to this reason I am unable to reach whether
$ k^{-1}(kP) = P $

where
$ k^{-1}.k = 1 mod p $

Please help me to understand where I am making mistakes.
package a;
import java.math.BigInteger;
import java.security.spec.ECPoint;
public class ScalarMultiply {
private static final BigInteger ONE = new BigInteger(""1"");;
static BigInteger TWO = new BigInteger(""2"");
    static BigInteger p = new BigInteger(""6277101735386680763835789423207666416083908700390324961279"");


public static ECPoint scalmult(ECPoint P, BigInteger k){
    ECPoint R =P,S = P;
    int length = k.bitLength();
    //System.out.println(""length is"" + length);
    byte[] binarray = new byte[length];
    for(int i=0;i<=length-1;i++){
        binarray[i] = k.mod(TWO).byteValue();
        k = k.divide(TWO);

    }
    for(int i=0;i<=length-1;i++){
        System.out.print("""" + binarray[i]); 
    }

    for(int i = length - 2;i > 0;i--){
        R = doublePoint(R);
        if(binarray[i]== 1) 
            R = addPoint(R, S);
    }
return R;
}

public static ECPoint addPoint(ECPoint r, ECPoint s) {

    BigInteger slope = (r.getAffineY().subtract(s.getAffineY())).multiply(r.getAffineX().subtract(s.getAffineX()).modInverse(p)).mod(p);
    BigInteger Xout = (slope.modPow(TWO, p).subtract(r.getAffineX())).subtract(s.getAffineX()).mod(p);
    BigInteger Yout = r.getAffineY().negate().mod(p);
    Yout = Yout.add(slope.multiply(r.getAffineX().subtract(Xout))).mod(p);
    ECPoint out = new ECPoint(Xout, Yout);
    return out;
}

public static ECPoint doublePoint(ECPoint r) {
    // TODO Auto-generated method stub
    BigInteger slope = (r.getAffineX().pow(2)).multiply(new BigInteger(""3""));
    slope = slope.add(new BigInteger(""3""));
    slope = slope.multiply((r.getAffineY().multiply(TWO)).modInverse(p));
    BigInteger Xout = slope.pow(2).subtract(r.getAffineX().multiply(new BigInteger(""2""))).mod(p);
    BigInteger Yout = (r.getAffineY().negate()).add(slope.multiply(r.getAffineX().subtract(Xout))).mod(p);
    ECPoint out = new ECPoint(Xout, Yout);
    return out;
}
}

The main Class is
    package a;
    import java.math.BigInteger;
    import java.security.spec.ECPoint;

    public class EccArithmetic {

    /**
     * @param args
     */
    public static void main(String[] args) {

             BigInteger xs = new BigInteger(""d458e7d127ae671b0c330266d246769353a012073e97acf8"", 16);
             BigInteger ys = new BigInteger
(""325930500d851f336bddc050cf7fb11b5673a1645086df3b"", 16);
             BigInteger xt = new BigInteger

(""f22c4395213e9ebe67ddecdd87fdbd01be16fb059b9753a4"", 16);
             BigInteger yt = new BigInteger

(""264424096af2b3597796db48f8dfb41fa9cecc97691a9c79"", 16);
             ECPoint S = new ECPoint(xs,ys);
             ECPoint T = new ECPoint(xt,yt);
             // Verifying addition 

             ECPoint Rst = ScalarMultiply.addPoint(S, T);
             BigInteger xst = new BigInteger

(""48e1e4096b9b8e5ca9d0f1f077b8abf58e843894de4d0290"", 16);   // Specified value of x of point R for addition  in NIST Routine example
             System.out.println(""\nx-coordinate of point Rst is : "" + Rst.getAffineX()); 
             System.out.println(""\ny-coordinate of point Rst is : "" + Rst.getAffineY());
             if(Rst.getAffineX().equals(xst))
                 System.out.println(""Adding is correct"");

//Verifying Doubling
BigInteger xr = new BigInteger

(""30c5bc6b8c7da25354b373dc14dd8a0eba42d25a3f6e6962"", 16);  // Specified value of x of point R for doubling  in NIST Routine example
             BigInteger yr = new BigInteger

(""0dde14bc4249a721c407aedbf011e2ddbbcb2968c9d889cf"", 16);
             ECPoint R2s = new ECPoint(xr, yr);  // Specified value of y of point R for doubling  in NIST Routine example
             System.out.println(""\nx-coordinate of point R2s is : "" + R2s.getAffineX()); 
             System.out.println(""\ny-coordinate of point R2s is : "" + R2s.getAffineY());
             System.out.println(""\nx-coordinate of calculated point is : "" + 

ScalarMultiply.doublePoint(S).getAffineX()); 
             System.out.println(""\ny-coordinate of calculated point is : "" + 

ScalarMultiply.doublePoint(S).getAffineY());
             if(R2s.getAffineX().equals(ScalarMultiply.doublePoint(S).getAffineX()))
                 System.out.println(""Doubling is correct"");

             xr = new BigInteger(""1faee4205a4f669d2d0a8f25e3bcec9a62a6952965bf6d31"", 16);  // Specified value of x of point R for scalar Multiplication  in NIST Routine example
             yr = new BigInteger(""5ff2cdfa508a2581892367087c696f179e7a4d7e8260fb06"", 16);   // Specified value of y of point R for scalar Multiplication  in NIST Routine example
             ECPoint Rds = new ECPoint(xr, yr);
             BigInteger d = new BigInteger

(""a78a236d60baec0c5dd41b33a542463a8255391af64c74ee"", 16);
             //Rs = new ECPoint(ScalarMultiply.scalmult(S, d).getAffineX(), yr);
             System.out.println(""\nx-coordinate of point Rds is : "" + Rds.getAffineX());
            System.out.println(""\nx-coordinate of point Rds is : "" + Rds.getAffineY());
            System.out.println(""\nx-coordinate of calculated point is : "" + ScalarMultiply.scalmult(S, 

            d).getAffineX());
            System.out.println(""\nx-coordinate of calculated point is : "" + ScalarMultiply.scalmult(S, 

            d).getAffineY());            
            if(Rds.getAffineX().equals(ScalarMultiply.scalmult(S, d).getAffineX()))
                 System.out.println(""Scalar Multiplication is correct"");

    }
}

","GregS mentioned in his comment that a*(bP) is not equal to P just because ab = 1 mod q in the underlying field F_q. 
Actually the correct statement would be: a*(bP) is equal to P if ab = 1 mod n (n is the order of group G). 
Also the code ChaiaraHsieh suggested seems correct (just change k = kin.mod(p) to k = kin.mod(n) in the ScalarMultiply code). 
Although I prefer to use BouncyCastle. 
","4335","<java><elliptic-curve>","4","-1","2","2015-04-30 06:42:28","","1","2","2228618","","2013-04-01 06:01:19","2013-03-31 06:54:19",""
"2950371","Implementation of ECC in Java","While trying to encrypt a given input using Elliptic Curve Cryptography in Java I'm using the following algorithms for generating the cipher and the key:
KeyPairGenerator g = KeyPairGenerator.getInstance(""ECDSA"");
Cipher           cipher = Cipher.getInstance(""ECIES"");
Now as expected, the cipher isn't accepting the keys generated by the ECDSA algorithm. I get the error as - must be passed IE key.
I searched for the ciphers being supported by these 2 methods here: http://java.sun.com/javase/6/docs/technotes/guides/security/StandardNames.html#Cipher
Unfortunately no else algo is supported for ECC. Has anyone used ECC generated keys to encrypt/decrypt an input? Which algo should I use for both so that they don't clash with each other? 
","According to http://java.sun.com/javase/6/docs/technotes/guides/security/StandardNames.html#KeyPairGenerator, you need to pass ""EC"" for an instance of the KeyPairGenerator for ECC.
","4328","<java><jce><elliptic-curve>","1","1","2","2011-06-20 08:38:33","","0","","5000","","2011-06-20 08:38:33","2010-06-01 14:00:06",""
"2950371","Implementation of ECC in Java","While trying to encrypt a given input using Elliptic Curve Cryptography in Java I'm using the following algorithms for generating the cipher and the key:
KeyPairGenerator g = KeyPairGenerator.getInstance(""ECDSA"");
Cipher           cipher = Cipher.getInstance(""ECIES"");
Now as expected, the cipher isn't accepting the keys generated by the ECDSA algorithm. I get the error as - must be passed IE key.
I searched for the ciphers being supported by these 2 methods here: http://java.sun.com/javase/6/docs/technotes/guides/security/StandardNames.html#Cipher
Unfortunately no else algo is supported for ECC. Has anyone used ECC generated keys to encrypt/decrypt an input? Which algo should I use for both so that they don't clash with each other? 
","Also for a more feature-rich cryptography implementation take a look at Bouncycastle.
","4328","<java><jce><elliptic-curve>","1","0","2","2011-06-20 08:38:33","","0","","5000","","2011-06-20 08:38:33","2010-06-01 14:00:06",""
"40155888","How can I generate a valid ECDSA EC key pair?","I am trying to generate ECDSA key pair using SpongyCastle in Android.
This is the code:
static {
    Security.insertProviderAt(new org.spongycastle.jce.provider.BouncyCastleProvider(), 1);
}

public static KeyPair generate() {
        ECParameterSpec ecSpec = ECNamedCurveTable.getParameterSpec(""prime256v1"");
        KeyPairGenerator generator = KeyPairGenerator.getInstance(""ECDSA"", ""SC"");
        generator.initialize(ecSpec, new SecureRandom());
        KeyPair keyPair = g.generateKeyPair();
        Log.i(TAG, ""EC Pub Key generated: "" + utils.bytesToHex(keyPair.getPublic().getEncoded()));
        Log.i(TAG, ""EC Private Key generated: "" + utils.bytesToHex(keyPair.getPrivate().getEncoded()));            
       return generator.generateKeyPair();
}

Something is wrong since I always get something like that example of 
Public Key:

3059301306072A8648CE3D020106082A8648CE3D03010703420004483ABA9F322240010ECF00E818C041A60FE71A2BD64C64CD5A60519985F110AEDE6308027D2730303F5E2478F083C7F5BB683DCAC22BFEB62F3A48BD01009F40

and Private Key: 

308193020100301306072A8648CE3D020106082A8648CE3D030107047930770201010420219AB4B3701630973A4B2917D53F69A4BE6DAD61F48016BFEF147B2999575CB2A00A06082A8648CE3D030107A14403420004483ABA9F322240010ECF00E818C041A60FE71A2BD64C64CD5A60519985F110AEDE6308027D2730303F5E2478F083C7F5BB683DCAC22BFEB62F3A48BD01009F40

The site ECDSA sample give me ""Invalid ECDSA signature message"", and them seems really very different from that smaller Private Key and always starting with ""04"" Public Key generated in the same site.
Also, my backend verification gives me the error ""Invalid point encoding 0x30""
The backend Java method check is:
public ECPublicKey getPublicKeyFromHex(String publicKeyHex)
        throws NoSuchAlgorithmException, DecoderException, ApplicationGenericException {
    byte[] rawPublicKey = Hex.decodeHex(publicKeyHex.toCharArray());
    ECPublicKey ecPublicKey = null;
    KeyFactory kf = null;

    ECNamedCurveParameterSpec ecNamedCurveParameterSpec = ECNamedCurveTable.getParameterSpec(""prime256v1"");
    ECCurve curve = ecNamedCurveParameterSpec.getCurve();
    EllipticCurve ellipticCurve = EC5Util.convertCurve(curve, ecNamedCurveParameterSpec.getSeed());
    java.security.spec.ECPoint ecPoint = ECPointUtil.decodePoint(ellipticCurve, rawPublicKey);
    java.security.spec.ECParameterSpec ecParameterSpec = EC5Util.convertSpec(ellipticCurve,
            ecNamedCurveParameterSpec);
    java.security.spec.ECPublicKeySpec publicKeySpec = new java.security.spec.ECPublicKeySpec(ecPoint,
            ecParameterSpec);

    kf = KeyFactory.getInstance(""ECDSA"", new BouncyCastleProvider());

    try {
        ecPublicKey = (ECPublicKey) kf.generatePublic(publicKeySpec);
    } catch (Exception e) {
        throw new ApplicationGenericException(e.getMessage(), e.getCause());
    }

    return ecPublicKey;
}

","Java's default encoding for a PublicKey is ""X.509"" which is not just the EC point; it is an ASN.1 structure identifying the algorithm (EC) and parameters (here prime256v1) PLUS a BIT STRING wrapping the point; see rfc5280 section 4.2.1.7 and rfc3279 section 2.3.5. 
Similarly the default encoding for PrivateKey is ""PKCS#8"" (unencrypted) which is a structure containing an AlgorithmIdentifier plus an OCTET STRING wrapping the data which in this case contains both the private key value and a copy of the public key, see rfc5208 section 5 and C.4 of document SEC 1 at http://www.secg.org with tag [0] omitted but tag [1] present.
To read (either or both of) them back in to Java, get a KeyFactory.getInstance(""EC"") and use generate{Public,Private} on an X509EncodedKeySpec or PKCS8EncodedKeySpec respectively.
ECDSA and ECDH (and ECMQV etc) use the same key structures, unlike classic integer DSA and DH which use the same mathematical structure ($Z_p^*$) but slightly different representations.
PS: the javadoc for java.security.Key tells you most of this.
","4260","<bouncycastle><elliptic-curve><ecdsa><dsa><spongycastle>","2","5","2","2016-10-24 09:42:25","","0","","5962766","","2016-10-24 09:42:25","2016-10-20 03:02:33",""
"40155888","How can I generate a valid ECDSA EC key pair?","I am trying to generate ECDSA key pair using SpongyCastle in Android.
This is the code:
static {
    Security.insertProviderAt(new org.spongycastle.jce.provider.BouncyCastleProvider(), 1);
}

public static KeyPair generate() {
        ECParameterSpec ecSpec = ECNamedCurveTable.getParameterSpec(""prime256v1"");
        KeyPairGenerator generator = KeyPairGenerator.getInstance(""ECDSA"", ""SC"");
        generator.initialize(ecSpec, new SecureRandom());
        KeyPair keyPair = g.generateKeyPair();
        Log.i(TAG, ""EC Pub Key generated: "" + utils.bytesToHex(keyPair.getPublic().getEncoded()));
        Log.i(TAG, ""EC Private Key generated: "" + utils.bytesToHex(keyPair.getPrivate().getEncoded()));            
       return generator.generateKeyPair();
}

Something is wrong since I always get something like that example of 
Public Key:

3059301306072A8648CE3D020106082A8648CE3D03010703420004483ABA9F322240010ECF00E818C041A60FE71A2BD64C64CD5A60519985F110AEDE6308027D2730303F5E2478F083C7F5BB683DCAC22BFEB62F3A48BD01009F40

and Private Key: 

308193020100301306072A8648CE3D020106082A8648CE3D030107047930770201010420219AB4B3701630973A4B2917D53F69A4BE6DAD61F48016BFEF147B2999575CB2A00A06082A8648CE3D030107A14403420004483ABA9F322240010ECF00E818C041A60FE71A2BD64C64CD5A60519985F110AEDE6308027D2730303F5E2478F083C7F5BB683DCAC22BFEB62F3A48BD01009F40

The site ECDSA sample give me ""Invalid ECDSA signature message"", and them seems really very different from that smaller Private Key and always starting with ""04"" Public Key generated in the same site.
Also, my backend verification gives me the error ""Invalid point encoding 0x30""
The backend Java method check is:
public ECPublicKey getPublicKeyFromHex(String publicKeyHex)
        throws NoSuchAlgorithmException, DecoderException, ApplicationGenericException {
    byte[] rawPublicKey = Hex.decodeHex(publicKeyHex.toCharArray());
    ECPublicKey ecPublicKey = null;
    KeyFactory kf = null;

    ECNamedCurveParameterSpec ecNamedCurveParameterSpec = ECNamedCurveTable.getParameterSpec(""prime256v1"");
    ECCurve curve = ecNamedCurveParameterSpec.getCurve();
    EllipticCurve ellipticCurve = EC5Util.convertCurve(curve, ecNamedCurveParameterSpec.getSeed());
    java.security.spec.ECPoint ecPoint = ECPointUtil.decodePoint(ellipticCurve, rawPublicKey);
    java.security.spec.ECParameterSpec ecParameterSpec = EC5Util.convertSpec(ellipticCurve,
            ecNamedCurveParameterSpec);
    java.security.spec.ECPublicKeySpec publicKeySpec = new java.security.spec.ECPublicKeySpec(ecPoint,
            ecParameterSpec);

    kf = KeyFactory.getInstance(""ECDSA"", new BouncyCastleProvider());

    try {
        ecPublicKey = (ECPublicKey) kf.generatePublic(publicKeySpec);
    } catch (Exception e) {
        throw new ApplicationGenericException(e.getMessage(), e.getCause());
    }

    return ecPublicKey;
}

","More practical example. Convert generated public key to decoded bytes array or hex string:  
public String getPublicKeyAsHex(PublicKey publicKey){

    ECPublicKey ecPublicKey = (ECPublicKey)publicKey;
    ECPoint ecPoint = ecPublicKey.getW();

    byte[] publicKeyBytes = new byte[PUBLIC_KEY_LENGTH];
    writeToStream(publicKeyBytes, 0, ecPoint.getAffineX(), PRIVATE_KEY_LENGTH);
    writeToStream(publicKeyBytes, PRIVATE_KEY_LENGTH, ecPoint.getAffineY(), PRIVATE_KEY_LENGTH);

    String hex = Hex.toHexString(publicKeyBytes);

    logger.debug(""Public key bytes: "" + Arrays.toString(publicKeyBytes));
    logger.debug(""Public key hex: "" + hex);

    return hex;
}

private void writeToStream(byte[] stream, int start, BigInteger value, int size) {
    byte[] data = value.toByteArray();
    int length = Math.min(size, data.length);
    int writeStart = start + size - length;
    int readStart = data.length - length;
    System.arraycopy(data, readStart, stream, writeStart, length);
}

Convert decoded bytes array back to PublicKey:
KeyFactory factory = KeyFactory.getInstance(ALGORITHM, ALGORITHM_PROVIDER);

ECNamedCurveParameterSpec spec = ECNamedCurveTable.getParameterSpec(CURVE);

ECNamedCurveSpec params = new ECNamedCurveSpec(CURVE, spec.getCurve(), spec.getG(), spec.getN());

BigInteger xCoordinate = new BigInteger(1, Arrays.copyOfRange(decodedPublicKey, 0, PRIVATE_KEY_LENGTH));
BigInteger yCoordinate = new BigInteger(1, Arrays.copyOfRange(decodedPublicKey, PRIVATE_KEY_LENGTH, PUBLIC_KEY_LENGTH));
java.security.spec.ECPoint w = new java.security.spec.ECPoint(xCoordinate, yCoordinate);

PublicKey encodedPublicKey = factory.generatePublic(new java.security.spec.ECPublicKeySpec(w, params));

","4260","<bouncycastle><elliptic-curve><ecdsa><dsa><spongycastle>","2","1","2","2016-10-24 09:42:25","","0","","5962766","","2016-10-24 09:42:25","2016-10-20 03:02:33",""
"5186793","Fileformat for EC public/private keys?","If I wanted to store both a private and a public key in a single file, what would be the easiest format to use? Especially if I'm planning to use the BouncyCastle library for Java?
","On a theoretical point of view, the public key can be recomputed from the private key (computational cost for that is slightly lower than the cost for producing a single ECDSA signature, or doing half of ECDH, so it is fast). Therefore, conceptually, you only have to store the private key, and the standard format for that is PKCS#8, which is supported by Java with java.security.spec.PKCS8EncodedKeySpec. Moreover, the PKCS#8 format includes provisions for optionally encoding the public key along the private key in the same blob, so this really looks like what you are looking for.
The tricky thing, however, is to convince the cryptographic provider (e.g. BouncyCastle) to extract the public key as such and/or recompute it. Apparently, if you create a PKCS8EncodedKeySpec from a PKCS#8-encoded EC private key which also contains the public key, BouncyCastle will be kind enough to internally keep a copy of the encoded public key and write it back if you decide to reencode the private key in PKCS#8 format. However, it does nothing else with it; it handles it as an opaque blob.
Hence you must recompute the public key. Wading through the JCE and BouncyCastle API and unimplemented bits, I found the following, which appears to work (JDK 1.6.0_24, BouncyCastle 1.46):
import java.security.KeyFactory;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Provider;
import java.security.spec.PKCS8EncodedKeySpec;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.bouncycastle.jce.provider.JCEECPrivateKey;
import org.bouncycastle.jce.provider.JCEECPublicKey;
import org.bouncycastle.jce.spec.ECParameterSpec;
import org.bouncycastle.jce.spec.ECPublicKeySpec;

// Create the provider and an appropriate key factory.
Provider pp = new BouncyCastleProvider();
KeyFactory kf = KeyFactory.getInstance(""EC"", pp);

// Decode the private key (read as a byte[] called 'buf').
PKCS8EncodedKeySpec ks = new PKCS8EncodedKeySpec(buf);
PrivateKey sk = kf.generatePrivate(ks);

// Recompute public key.
JCEECPrivateKey priv = (JCEECPrivateKey)sk;
ECParameterSpec params = priv.getParameters();
ECPublicKeySpec pubKS = new ECPublicKeySpec(
    params.getG().multiply(priv.getD()), params);
PublicKey pk = kf.generatePublic(pubKS);

// To reencode the private key.
buf = kf.getKeySpec(sk, PKCS8EncodedKeySpec.class).getEncoded();

Conceptually, I should use kf.getkeySpec() with org.bouncycastle.jce.spec.ECPrivateKeySpec instead of ruthlessly casting the private key to the JCEECPrivateKey class, but the clean method appears not to be implemented yet in BouncyCastle.
","4047","<file><format><bouncycastle><elliptic-curve>","4","3","2","2017-05-22 12:26:10","5195755","0","","","","","2011-03-03 21:29:47",""
"5186793","Fileformat for EC public/private keys?","If I wanted to store both a private and a public key in a single file, what would be the easiest format to use? Especially if I'm planning to use the BouncyCastle library for Java?
","Try this (BouncyCastle v1.47, using JDK 1.7.* but I assume JDK 1.6.* will be fine too):
// Recreate the private key.
final KeyFactory kf = KeyFactory.getInstance(""EC"", ""BC"");
final PKCS8EncodedKeySpec encPrivKeySpec = new PKCS8EncodedKeySpec(rawPrivKey);
final PrivateKey privKey = kf.generatePrivate(encPrivKeySpec);
final byte[] rawPrivKey = privKey.getEncoded();

// Recreate the public key.
final X509EncodedKeySpec pubKeySpec = new X509EncodedKeySpec(rawPubKey);
final PublicKey pubKey = kf.generatePublic(pubKeySpec);
final byte[] rawPubKey = pubKey.getEncoded();

where rawPrivKey and rawPubKey are arrays of byte type.
I suggest you encrypt the encoded private key with a block cipher (i.e. AES) otherwise the file is subject to be stolen and then you are indefinitely exposed.
","4047","<file><format><bouncycastle><elliptic-curve>","4","0","2","2017-05-22 12:26:10","5195755","0","","","","","2011-03-03 21:29:47",""
"2701294","How does the elliptic-curve version of Diffie-Hellman cryptography work?","Does the Elliptic curve diffie hellman calculation look any different from the standard one defined here:
            /*
             * The basic Diffie-Hellman Key Agreement Equation 
             * 
             * The client initiates
             * A = g^a mod p
             * 
             * Sends (g p A) to the server
             * 
             * The server calculates B
             * B = g^b mod p
             * 
             * Sends B back to client
             * 
             * The client calculates K
             * K = B^a mod p
             * 
             * The server calucaltes K
             * K = A^b mod p
             * 
             */

Or is it just a specific way of selecting g, a, p and b? How are g,a,p and b selected anyway?
","The basic principle is the same, but the selection of the private key and how the public key are computed are significantly different. In addition, everyone has to agree beforehand on the elliptic curve to use.
As noted, in the elliptic-curve version of Diffie-Hellman, you first decide which elliptic curve you're using. That determines a number of independent parameters called the domain parameters. Without getting too technical, it turns out that some curves are better than others for cryptographic purposes, so the parameters are actually chosen carefully rather than at random. This is somewhat analogous to picking good prime factors.
There are two sets of domain parameters:

E, the elliptic curve itself.
G, a point on E that is called the base point.

E and G are necessary and sufficient to describe all the information you need.
In ECC-DH, the private key d is computed by taking a randomly selected number on the interval [1, n-1], where n is the order of G. The public key Q is computed by taking Q = dG. After that the general idea is the same, except that instead of trying to solve a hard integer factorization problem, you're trying to solve a hard discrete logarithm problem.
","3953","<elliptic-curve><diffie-hellman>","3","7","1","2010-04-23 19:51:32","2701449","0","1","75170","","2010-04-23 19:51:32","2010-04-23 19:06:48",""
"33551848","Rejecting class because it failed compile-time verification","I am trying to integrate curve25519-java from openwhispersystems into my Android app and compiling it with API 23 (Marshmallow). When using non native code I get this runtime exception:
java.lang.VerifyError: Rejecting class org.whispersystems.curve25519.java.fe_mul because it failed compile-time verification (declaration of 'org.whispersystems.curve25519.java.fe_mul' appears in /data/app/com.fenritz.safecam-1/base.apk)
      at org.whispersystems.curve25519.java.ge_madd.ge_madd(ge_madd.java:65)
      at org.whispersystems.curve25519.java.ge_scalarmult_base.ge_scalarmult_base(ge_scalarmult_base.java:96)
      at org.whispersystems.curve25519.java.curve_sigs.curve25519_keygen(curve_sigs.java:30)
      at org.whispersystems.curve25519.BaseJavaCurve25519Provider.generatePublicKey(BaseJavaCurve25519Provider.java:50)
      at org.whispersystems.curve25519.JavaCurve25519Provider.generatePublicKey(JavaCurve25519Provider.java:8)
      at org.whispersystems.curve25519.Curve25519.generateKeyPair(Curve25519.java:70)
      at com.fenritz.safecam.SafeCameraActivity.onCreate(SafeCameraActivity.java:105)
      at android.app.Activity.performCreate(Activity.java:6237)
      at android.app.Instrumentation.callActivityOnCreate(Instrumentation.java:1107)
      at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2369)
      at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:2476)
      at android.app.ActivityThread.-wrap11(ActivityThread.java)
      at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1344)
      at android.os.Handler.dispatchMessage(Handler.java:102)
      at android.os.Looper.loop(Looper.java:148)
      at android.app.ActivityThread.main(ActivityThread.java:5417)
      at java.lang.reflect.Method.invoke(Native Method)
      at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:726)
      at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:616)

Class that is being rejected is following:
//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by Fernflower decompiler)
//

package org.whispersystems.curve25519.java;

public class fe_mul {
    public fe_mul() {
    }

    public static void fe_mul(int[] h, int[] f, int[] g) {
        int f0 = f[0];
        int f1 = f[1];
        int f2 = f[2];
        int f3 = f[3];
        int f4 = f[4];
        int f5 = f[5];
        int f6 = f[6];
        int f7 = f[7];
        int f8 = f[8];
        int f9 = f[9];
        int g0 = g[0];
        int g1 = g[1];
        int g2 = g[2];
        int g3 = g[3];
        int g4 = g[4];
        int g5 = g[5];
        int g6 = g[6];
        int g7 = g[7];
        int g8 = g[8];
        int g9 = g[9];
        int g1_19 = 19 * g1;
        int g2_19 = 19 * g2;
        int g3_19 = 19 * g3;
        int g4_19 = 19 * g4;
        int g5_19 = 19 * g5;
        int g6_19 = 19 * g6;
        int g7_19 = 19 * g7;
        int g8_19 = 19 * g8;
        int g9_19 = 19 * g9;
        int f1_2 = 2 * f1;
        int f3_2 = 2 * f3;
        int f5_2 = 2 * f5;
        int f7_2 = 2 * f7;
        int f9_2 = 2 * f9;
        long f0g0 = (long)f0 * (long)g0;
        long f0g1 = (long)f0 * (long)g1;
        long f0g2 = (long)f0 * (long)g2;
        long f0g3 = (long)f0 * (long)g3;
        long f0g4 = (long)f0 * (long)g4;
        long f0g5 = (long)f0 * (long)g5;
        long f0g6 = (long)f0 * (long)g6;
        long f0g7 = (long)f0 * (long)g7;
        long f0g8 = (long)f0 * (long)g8;
        long f0g9 = (long)f0 * (long)g9;
        long f1g0 = (long)f1 * (long)g0;
        long f1g1_2 = (long)f1_2 * (long)g1;
        long f1g2 = (long)f1 * (long)g2;
        long f1g3_2 = (long)f1_2 * (long)g3;
        long f1g4 = (long)f1 * (long)g4;
        long f1g5_2 = (long)f1_2 * (long)g5;
        long f1g6 = (long)f1 * (long)g6;
        long f1g7_2 = (long)f1_2 * (long)g7;
        long f1g8 = (long)f1 * (long)g8;
        long f1g9_38 = (long)f1_2 * (long)g9_19;
        long f2g0 = (long)f2 * (long)g0;
        long f2g1 = (long)f2 * (long)g1;
        long f2g2 = (long)f2 * (long)g2;
        long f2g3 = (long)f2 * (long)g3;
        long f2g4 = (long)f2 * (long)g4;
        long f2g5 = (long)f2 * (long)g5;
        long f2g6 = (long)f2 * (long)g6;
        long f2g7 = (long)f2 * (long)g7;
        long f2g8_19 = (long)f2 * (long)g8_19;
        long f2g9_19 = (long)f2 * (long)g9_19;
        long f3g0 = (long)f3 * (long)g0;
        long f3g1_2 = (long)f3_2 * (long)g1;
        long f3g2 = (long)f3 * (long)g2;
        long f3g3_2 = (long)f3_2 * (long)g3;
        long f3g4 = (long)f3 * (long)g4;
        long f3g5_2 = (long)f3_2 * (long)g5;
        long f3g6 = (long)f3 * (long)g6;
        long f3g7_38 = (long)f3_2 * (long)g7_19;
        long f3g8_19 = (long)f3 * (long)g8_19;
        long f3g9_38 = (long)f3_2 * (long)g9_19;
        long f4g0 = (long)f4 * (long)g0;
        long f4g1 = (long)f4 * (long)g1;
        long f4g2 = (long)f4 * (long)g2;
        long f4g3 = (long)f4 * (long)g3;
        long f4g4 = (long)f4 * (long)g4;
        long f4g5 = (long)f4 * (long)g5;
        long f4g6_19 = (long)f4 * (long)g6_19;
        long f4g7_19 = (long)f4 * (long)g7_19;
        long f4g8_19 = (long)f4 * (long)g8_19;
        long f4g9_19 = (long)f4 * (long)g9_19;
        long f5g0 = (long)f5 * (long)g0;
        long f5g1_2 = (long)f5_2 * (long)g1;
        long f5g2 = (long)f5 * (long)g2;
        long f5g3_2 = (long)f5_2 * (long)g3;
        long f5g4 = (long)f5 * (long)g4;
        long f5g5_38 = (long)f5_2 * (long)g5_19;
        long f5g6_19 = (long)f5 * (long)g6_19;
        long f5g7_38 = (long)f5_2 * (long)g7_19;
        long f5g8_19 = (long)f5 * (long)g8_19;
        long f5g9_38 = (long)f5_2 * (long)g9_19;
        long f6g0 = (long)f6 * (long)g0;
        long f6g1 = (long)f6 * (long)g1;
        long f6g2 = (long)f6 * (long)g2;
        long f6g3 = (long)f6 * (long)g3;
        long f6g4_19 = (long)f6 * (long)g4_19;
        long f6g5_19 = (long)f6 * (long)g5_19;
        long f6g6_19 = (long)f6 * (long)g6_19;
        long f6g7_19 = (long)f6 * (long)g7_19;
        long f6g8_19 = (long)f6 * (long)g8_19;
        long f6g9_19 = (long)f6 * (long)g9_19;
        long f7g0 = (long)f7 * (long)g0;
        long f7g1_2 = (long)f7_2 * (long)g1;
        long f7g2 = (long)f7 * (long)g2;
        long f7g3_38 = (long)f7_2 * (long)g3_19;
        long f7g4_19 = (long)f7 * (long)g4_19;
        long f7g5_38 = (long)f7_2 * (long)g5_19;
        long f7g6_19 = (long)f7 * (long)g6_19;
        long f7g7_38 = (long)f7_2 * (long)g7_19;
        long f7g8_19 = (long)f7 * (long)g8_19;
        long f7g9_38 = (long)f7_2 * (long)g9_19;
        long f8g0 = (long)f8 * (long)g0;
        long f8g1 = (long)f8 * (long)g1;
        long f8g2_19 = (long)f8 * (long)g2_19;
        long f8g3_19 = (long)f8 * (long)g3_19;
        long f8g4_19 = (long)f8 * (long)g4_19;
        long f8g5_19 = (long)f8 * (long)g5_19;
        long f8g6_19 = (long)f8 * (long)g6_19;
        long f8g7_19 = (long)f8 * (long)g7_19;
        long f8g8_19 = (long)f8 * (long)g8_19;
        long f8g9_19 = (long)f8 * (long)g9_19;
        long f9g0 = (long)f9 * (long)g0;
        long f9g1_38 = (long)f9_2 * (long)g1_19;
        long f9g2_19 = (long)f9 * (long)g2_19;
        long f9g3_38 = (long)f9_2 * (long)g3_19;
        long f9g4_19 = (long)f9 * (long)g4_19;
        long f9g5_38 = (long)f9_2 * (long)g5_19;
        long f9g6_19 = (long)f9 * (long)g6_19;
        long f9g7_38 = (long)f9_2 * (long)g7_19;
        long f9g8_19 = (long)f9 * (long)g8_19;
        long f9g9_38 = (long)f9_2 * (long)g9_19;
        long h0 = f0g0 + f1g9_38 + f2g8_19 + f3g7_38 + f4g6_19 + f5g5_38 + f6g4_19 + f7g3_38 + f8g2_19 + f9g1_38;
        long h1 = f0g1 + f1g0 + f2g9_19 + f3g8_19 + f4g7_19 + f5g6_19 + f6g5_19 + f7g4_19 + f8g3_19 + f9g2_19;
        long h2 = f0g2 + f1g1_2 + f2g0 + f3g9_38 + f4g8_19 + f5g7_38 + f6g6_19 + f7g5_38 + f8g4_19 + f9g3_38;
        long h3 = f0g3 + f1g2 + f2g1 + f3g0 + f4g9_19 + f5g8_19 + f6g7_19 + f7g6_19 + f8g5_19 + f9g4_19;
        long h4 = f0g4 + f1g3_2 + f2g2 + f3g1_2 + f4g0 + f5g9_38 + f6g8_19 + f7g7_38 + f8g6_19 + f9g5_38;
        long h5 = f0g5 + f1g4 + f2g3 + f3g2 + f4g1 + f5g0 + f6g9_19 + f7g8_19 + f8g7_19 + f9g6_19;
        long h6 = f0g6 + f1g5_2 + f2g4 + f3g3_2 + f4g2 + f5g1_2 + f6g0 + f7g9_38 + f8g8_19 + f9g7_38;
        long h7 = f0g7 + f1g6 + f2g5 + f3g4 + f4g3 + f5g2 + f6g1 + f7g0 + f8g9_19 + f9g8_19;
        long h8 = f0g8 + f1g7_2 + f2g6 + f3g5_2 + f4g4 + f5g3_2 + f6g2 + f7g1_2 + f8g0 + f9g9_38;
        long h9 = f0g9 + f1g8 + f2g7 + f3g6 + f4g5 + f5g4 + f6g3 + f7g2 + f8g1 + f9g0;
        long carry0 = h0 + 33554432L >> 26;
        h1 += carry0;
        h0 -= carry0 << 26;
        long carry4 = h4 + 33554432L >> 26;
        h5 += carry4;
        h4 -= carry4 << 26;
        long carry1 = h1 + 16777216L >> 25;
        h2 += carry1;
        h1 -= carry1 << 25;
        long carry5 = h5 + 16777216L >> 25;
        h6 += carry5;
        h5 -= carry5 << 25;
        long carry2 = h2 + 33554432L >> 26;
        h3 += carry2;
        h2 -= carry2 << 26;
        long carry6 = h6 + 33554432L >> 26;
        h7 += carry6;
        h6 -= carry6 << 26;
        long carry3 = h3 + 16777216L >> 25;
        h4 += carry3;
        h3 -= carry3 << 25;
        long carry7 = h7 + 16777216L >> 25;
        h8 += carry7;
        h7 -= carry7 << 25;
        carry4 = h4 + 33554432L >> 26;
        h5 += carry4;
        h4 -= carry4 << 26;
        long carry8 = h8 + 33554432L >> 26;
        h9 += carry8;
        h8 -= carry8 << 26;
        long carry9 = h9 + 16777216L >> 25;
        h0 += carry9 * 19L;
        h9 -= carry9 << 25;
        carry0 = h0 + 33554432L >> 26;
        h1 += carry0;
        h0 -= carry0 << 26;
        h[0] = (int)h0;
        h[1] = (int)h1;
        h[2] = (int)h2;
        h[3] = (int)h3;
        h[4] = (int)h4;
        h[5] = (int)h5;
        h[6] = (int)h6;
        h[7] = (int)h7;
        h[8] = (int)h8;
        h[9] = (int)h9;
    }
}

Any ideas how why it's being rejected and how can I fix this.
","Hey Alex i think this is the solution to your issue. Catching exceptions from a synchronized block fails at run time with the following exception:Rejecting class fr.inra.arttest.MyClass because it failed compile-time verification. So check around any calls to synchronized. Also you can read more about the issue from this google bug post. https://code.google.com/p/android/issues/detail?id=80961.
Hope it helps ! 
","3928","<java><android><elliptic-curve>","4","1","2","2016-05-03 10:35:08","33613234","0","","","","","2015-11-05 18:12:49",""
"33551848","Rejecting class because it failed compile-time verification","I am trying to integrate curve25519-java from openwhispersystems into my Android app and compiling it with API 23 (Marshmallow). When using non native code I get this runtime exception:
java.lang.VerifyError: Rejecting class org.whispersystems.curve25519.java.fe_mul because it failed compile-time verification (declaration of 'org.whispersystems.curve25519.java.fe_mul' appears in /data/app/com.fenritz.safecam-1/base.apk)
      at org.whispersystems.curve25519.java.ge_madd.ge_madd(ge_madd.java:65)
      at org.whispersystems.curve25519.java.ge_scalarmult_base.ge_scalarmult_base(ge_scalarmult_base.java:96)
      at org.whispersystems.curve25519.java.curve_sigs.curve25519_keygen(curve_sigs.java:30)
      at org.whispersystems.curve25519.BaseJavaCurve25519Provider.generatePublicKey(BaseJavaCurve25519Provider.java:50)
      at org.whispersystems.curve25519.JavaCurve25519Provider.generatePublicKey(JavaCurve25519Provider.java:8)
      at org.whispersystems.curve25519.Curve25519.generateKeyPair(Curve25519.java:70)
      at com.fenritz.safecam.SafeCameraActivity.onCreate(SafeCameraActivity.java:105)
      at android.app.Activity.performCreate(Activity.java:6237)
      at android.app.Instrumentation.callActivityOnCreate(Instrumentation.java:1107)
      at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2369)
      at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:2476)
      at android.app.ActivityThread.-wrap11(ActivityThread.java)
      at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1344)
      at android.os.Handler.dispatchMessage(Handler.java:102)
      at android.os.Looper.loop(Looper.java:148)
      at android.app.ActivityThread.main(ActivityThread.java:5417)
      at java.lang.reflect.Method.invoke(Native Method)
      at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:726)
      at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:616)

Class that is being rejected is following:
//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by Fernflower decompiler)
//

package org.whispersystems.curve25519.java;

public class fe_mul {
    public fe_mul() {
    }

    public static void fe_mul(int[] h, int[] f, int[] g) {
        int f0 = f[0];
        int f1 = f[1];
        int f2 = f[2];
        int f3 = f[3];
        int f4 = f[4];
        int f5 = f[5];
        int f6 = f[6];
        int f7 = f[7];
        int f8 = f[8];
        int f9 = f[9];
        int g0 = g[0];
        int g1 = g[1];
        int g2 = g[2];
        int g3 = g[3];
        int g4 = g[4];
        int g5 = g[5];
        int g6 = g[6];
        int g7 = g[7];
        int g8 = g[8];
        int g9 = g[9];
        int g1_19 = 19 * g1;
        int g2_19 = 19 * g2;
        int g3_19 = 19 * g3;
        int g4_19 = 19 * g4;
        int g5_19 = 19 * g5;
        int g6_19 = 19 * g6;
        int g7_19 = 19 * g7;
        int g8_19 = 19 * g8;
        int g9_19 = 19 * g9;
        int f1_2 = 2 * f1;
        int f3_2 = 2 * f3;
        int f5_2 = 2 * f5;
        int f7_2 = 2 * f7;
        int f9_2 = 2 * f9;
        long f0g0 = (long)f0 * (long)g0;
        long f0g1 = (long)f0 * (long)g1;
        long f0g2 = (long)f0 * (long)g2;
        long f0g3 = (long)f0 * (long)g3;
        long f0g4 = (long)f0 * (long)g4;
        long f0g5 = (long)f0 * (long)g5;
        long f0g6 = (long)f0 * (long)g6;
        long f0g7 = (long)f0 * (long)g7;
        long f0g8 = (long)f0 * (long)g8;
        long f0g9 = (long)f0 * (long)g9;
        long f1g0 = (long)f1 * (long)g0;
        long f1g1_2 = (long)f1_2 * (long)g1;
        long f1g2 = (long)f1 * (long)g2;
        long f1g3_2 = (long)f1_2 * (long)g3;
        long f1g4 = (long)f1 * (long)g4;
        long f1g5_2 = (long)f1_2 * (long)g5;
        long f1g6 = (long)f1 * (long)g6;
        long f1g7_2 = (long)f1_2 * (long)g7;
        long f1g8 = (long)f1 * (long)g8;
        long f1g9_38 = (long)f1_2 * (long)g9_19;
        long f2g0 = (long)f2 * (long)g0;
        long f2g1 = (long)f2 * (long)g1;
        long f2g2 = (long)f2 * (long)g2;
        long f2g3 = (long)f2 * (long)g3;
        long f2g4 = (long)f2 * (long)g4;
        long f2g5 = (long)f2 * (long)g5;
        long f2g6 = (long)f2 * (long)g6;
        long f2g7 = (long)f2 * (long)g7;
        long f2g8_19 = (long)f2 * (long)g8_19;
        long f2g9_19 = (long)f2 * (long)g9_19;
        long f3g0 = (long)f3 * (long)g0;
        long f3g1_2 = (long)f3_2 * (long)g1;
        long f3g2 = (long)f3 * (long)g2;
        long f3g3_2 = (long)f3_2 * (long)g3;
        long f3g4 = (long)f3 * (long)g4;
        long f3g5_2 = (long)f3_2 * (long)g5;
        long f3g6 = (long)f3 * (long)g6;
        long f3g7_38 = (long)f3_2 * (long)g7_19;
        long f3g8_19 = (long)f3 * (long)g8_19;
        long f3g9_38 = (long)f3_2 * (long)g9_19;
        long f4g0 = (long)f4 * (long)g0;
        long f4g1 = (long)f4 * (long)g1;
        long f4g2 = (long)f4 * (long)g2;
        long f4g3 = (long)f4 * (long)g3;
        long f4g4 = (long)f4 * (long)g4;
        long f4g5 = (long)f4 * (long)g5;
        long f4g6_19 = (long)f4 * (long)g6_19;
        long f4g7_19 = (long)f4 * (long)g7_19;
        long f4g8_19 = (long)f4 * (long)g8_19;
        long f4g9_19 = (long)f4 * (long)g9_19;
        long f5g0 = (long)f5 * (long)g0;
        long f5g1_2 = (long)f5_2 * (long)g1;
        long f5g2 = (long)f5 * (long)g2;
        long f5g3_2 = (long)f5_2 * (long)g3;
        long f5g4 = (long)f5 * (long)g4;
        long f5g5_38 = (long)f5_2 * (long)g5_19;
        long f5g6_19 = (long)f5 * (long)g6_19;
        long f5g7_38 = (long)f5_2 * (long)g7_19;
        long f5g8_19 = (long)f5 * (long)g8_19;
        long f5g9_38 = (long)f5_2 * (long)g9_19;
        long f6g0 = (long)f6 * (long)g0;
        long f6g1 = (long)f6 * (long)g1;
        long f6g2 = (long)f6 * (long)g2;
        long f6g3 = (long)f6 * (long)g3;
        long f6g4_19 = (long)f6 * (long)g4_19;
        long f6g5_19 = (long)f6 * (long)g5_19;
        long f6g6_19 = (long)f6 * (long)g6_19;
        long f6g7_19 = (long)f6 * (long)g7_19;
        long f6g8_19 = (long)f6 * (long)g8_19;
        long f6g9_19 = (long)f6 * (long)g9_19;
        long f7g0 = (long)f7 * (long)g0;
        long f7g1_2 = (long)f7_2 * (long)g1;
        long f7g2 = (long)f7 * (long)g2;
        long f7g3_38 = (long)f7_2 * (long)g3_19;
        long f7g4_19 = (long)f7 * (long)g4_19;
        long f7g5_38 = (long)f7_2 * (long)g5_19;
        long f7g6_19 = (long)f7 * (long)g6_19;
        long f7g7_38 = (long)f7_2 * (long)g7_19;
        long f7g8_19 = (long)f7 * (long)g8_19;
        long f7g9_38 = (long)f7_2 * (long)g9_19;
        long f8g0 = (long)f8 * (long)g0;
        long f8g1 = (long)f8 * (long)g1;
        long f8g2_19 = (long)f8 * (long)g2_19;
        long f8g3_19 = (long)f8 * (long)g3_19;
        long f8g4_19 = (long)f8 * (long)g4_19;
        long f8g5_19 = (long)f8 * (long)g5_19;
        long f8g6_19 = (long)f8 * (long)g6_19;
        long f8g7_19 = (long)f8 * (long)g7_19;
        long f8g8_19 = (long)f8 * (long)g8_19;
        long f8g9_19 = (long)f8 * (long)g9_19;
        long f9g0 = (long)f9 * (long)g0;
        long f9g1_38 = (long)f9_2 * (long)g1_19;
        long f9g2_19 = (long)f9 * (long)g2_19;
        long f9g3_38 = (long)f9_2 * (long)g3_19;
        long f9g4_19 = (long)f9 * (long)g4_19;
        long f9g5_38 = (long)f9_2 * (long)g5_19;
        long f9g6_19 = (long)f9 * (long)g6_19;
        long f9g7_38 = (long)f9_2 * (long)g7_19;
        long f9g8_19 = (long)f9 * (long)g8_19;
        long f9g9_38 = (long)f9_2 * (long)g9_19;
        long h0 = f0g0 + f1g9_38 + f2g8_19 + f3g7_38 + f4g6_19 + f5g5_38 + f6g4_19 + f7g3_38 + f8g2_19 + f9g1_38;
        long h1 = f0g1 + f1g0 + f2g9_19 + f3g8_19 + f4g7_19 + f5g6_19 + f6g5_19 + f7g4_19 + f8g3_19 + f9g2_19;
        long h2 = f0g2 + f1g1_2 + f2g0 + f3g9_38 + f4g8_19 + f5g7_38 + f6g6_19 + f7g5_38 + f8g4_19 + f9g3_38;
        long h3 = f0g3 + f1g2 + f2g1 + f3g0 + f4g9_19 + f5g8_19 + f6g7_19 + f7g6_19 + f8g5_19 + f9g4_19;
        long h4 = f0g4 + f1g3_2 + f2g2 + f3g1_2 + f4g0 + f5g9_38 + f6g8_19 + f7g7_38 + f8g6_19 + f9g5_38;
        long h5 = f0g5 + f1g4 + f2g3 + f3g2 + f4g1 + f5g0 + f6g9_19 + f7g8_19 + f8g7_19 + f9g6_19;
        long h6 = f0g6 + f1g5_2 + f2g4 + f3g3_2 + f4g2 + f5g1_2 + f6g0 + f7g9_38 + f8g8_19 + f9g7_38;
        long h7 = f0g7 + f1g6 + f2g5 + f3g4 + f4g3 + f5g2 + f6g1 + f7g0 + f8g9_19 + f9g8_19;
        long h8 = f0g8 + f1g7_2 + f2g6 + f3g5_2 + f4g4 + f5g3_2 + f6g2 + f7g1_2 + f8g0 + f9g9_38;
        long h9 = f0g9 + f1g8 + f2g7 + f3g6 + f4g5 + f5g4 + f6g3 + f7g2 + f8g1 + f9g0;
        long carry0 = h0 + 33554432L >> 26;
        h1 += carry0;
        h0 -= carry0 << 26;
        long carry4 = h4 + 33554432L >> 26;
        h5 += carry4;
        h4 -= carry4 << 26;
        long carry1 = h1 + 16777216L >> 25;
        h2 += carry1;
        h1 -= carry1 << 25;
        long carry5 = h5 + 16777216L >> 25;
        h6 += carry5;
        h5 -= carry5 << 25;
        long carry2 = h2 + 33554432L >> 26;
        h3 += carry2;
        h2 -= carry2 << 26;
        long carry6 = h6 + 33554432L >> 26;
        h7 += carry6;
        h6 -= carry6 << 26;
        long carry3 = h3 + 16777216L >> 25;
        h4 += carry3;
        h3 -= carry3 << 25;
        long carry7 = h7 + 16777216L >> 25;
        h8 += carry7;
        h7 -= carry7 << 25;
        carry4 = h4 + 33554432L >> 26;
        h5 += carry4;
        h4 -= carry4 << 26;
        long carry8 = h8 + 33554432L >> 26;
        h9 += carry8;
        h8 -= carry8 << 26;
        long carry9 = h9 + 16777216L >> 25;
        h0 += carry9 * 19L;
        h9 -= carry9 << 25;
        carry0 = h0 + 33554432L >> 26;
        h1 += carry0;
        h0 -= carry0 << 26;
        h[0] = (int)h0;
        h[1] = (int)h1;
        h[2] = (int)h2;
        h[3] = (int)h3;
        h[4] = (int)h4;
        h[5] = (int)h5;
        h[6] = (int)h6;
        h[7] = (int)h7;
        h[8] = (int)h8;
        h[9] = (int)h9;
    }
}

Any ideas how why it's being rejected and how can I fix this.
","This exception is thrown because of too many variable in single method. Just dividing it to two method fixes the issue. Here is the fix:
package org.whispersystems.curve25519.java;

public class fe_mul {

//CONVERT #include ""fe.h""
//CONVERT #include ""long.h""

/*
h = f * g
Can overlap h with f or g.

Preconditions:
   |f| bounded by 1.65*2^26,1.65*2^25,1.65*2^26,1.65*2^25,etc.
   |g| bounded by 1.65*2^26,1.65*2^25,1.65*2^26,1.65*2^25,etc.

Postconditions:
   |h| bounded by 1.01*2^25,1.01*2^24,1.01*2^25,1.01*2^24,etc.
*/

/*
Notes on implementation strategy:

Using schoolbook multiplication.
Karatsuba would save a little in some cost models.

Most multiplications by 2 and 19 are 32-bit precomputations;
cheaper than 64-bit postcomputations.

There is one remaining multiplication by 19 in the carry chain;
one *19 precomputation can be merged into this,
but the resulting data flow is considerably less clean.

There are 12 carries below.
10 of them are 2-way parallelizable and vectorizable.
Can get away with 11 carries, but then data flow is much deeper.

With tighter constraints on inputs can squeeze carries into int32.
*/

private static long[] fe_mul1(int[] f,int[] g){
  int f0 = f[0];
  int f1 = f[1];
  int f2 = f[2];
  int f3 = f[3];
  int f4 = f[4];
  int f5 = f[5];
  int f6 = f[6];
  int f7 = f[7];
  int f8 = f[8];
  int f9 = f[9];
  int g0 = g[0];
  int g1 = g[1];
  int g2 = g[2];
  int g3 = g[3];
  int g4 = g[4];
  int g5 = g[5];
  int g6 = g[6];
  int g7 = g[7];
  int g8 = g[8];
  int g9 = g[9];
  int g1_19 = 19 * g1; /* 1.959375*2^29 */
  int g2_19 = 19 * g2; /* 1.959375*2^30; still ok */
  int g3_19 = 19 * g3;
  int g4_19 = 19 * g4;
  int g5_19 = 19 * g5;
  int g6_19 = 19 * g6;
  int g7_19 = 19 * g7;
  int g8_19 = 19 * g8;
  int g9_19 = 19 * g9;
  int f1_2 = 2 * f1;
  int f3_2 = 2 * f3;
  int f5_2 = 2 * f5;
  int f7_2 = 2 * f7;
  int f9_2 = 2 * f9;
  long f0g0    = f0   * (long) g0;
  long f0g1    = f0   * (long) g1;
  long f0g2    = f0   * (long) g2;
  long f0g3    = f0   * (long) g3;
  long f0g4    = f0   * (long) g4;
  long f0g5    = f0   * (long) g5;
  long f0g6    = f0   * (long) g6;
  long f0g7    = f0   * (long) g7;
  long f0g8    = f0   * (long) g8;
  long f0g9    = f0   * (long) g9;
  long f1g0    = f1   * (long) g0;
  long f1g1_2  = f1_2 * (long) g1;
  long f1g2    = f1   * (long) g2;
  long f1g3_2  = f1_2 * (long) g3;
  long f1g4    = f1   * (long) g4;
  long f1g5_2  = f1_2 * (long) g5;
  long f1g6    = f1   * (long) g6;
  long f1g7_2  = f1_2 * (long) g7;
  long f1g8    = f1   * (long) g8;
  long f1g9_38 = f1_2 * (long) g9_19;
  long f2g0    = f2   * (long) g0;
  long f2g1    = f2   * (long) g1;
  long f2g2    = f2   * (long) g2;
  long f2g3    = f2   * (long) g3;
  long f2g4    = f2   * (long) g4;
  long f2g5    = f2   * (long) g5;
  long f2g6    = f2   * (long) g6;
  long f2g7    = f2   * (long) g7;
  long f2g8_19 = f2   * (long) g8_19;
  long f2g9_19 = f2   * (long) g9_19;
  long f3g0    = f3   * (long) g0;
  long f3g1_2  = f3_2 * (long) g1;
  long f3g2    = f3   * (long) g2;
  long f3g3_2  = f3_2 * (long) g3;
  long f3g4    = f3   * (long) g4;
  long f3g5_2  = f3_2 * (long) g5;
  long f3g6    = f3   * (long) g6;
  long f3g7_38 = f3_2 * (long) g7_19;
  long f3g8_19 = f3   * (long) g8_19;
  long f3g9_38 = f3_2 * (long) g9_19;
  long f4g0    = f4   * (long) g0;
  long f4g1    = f4   * (long) g1;
  long f4g2    = f4   * (long) g2;
  long f4g3    = f4   * (long) g3;
  long f4g4    = f4   * (long) g4;
  long f4g5    = f4   * (long) g5;
  long f4g6_19 = f4   * (long) g6_19;
  long f4g7_19 = f4   * (long) g7_19;
  long f4g8_19 = f4   * (long) g8_19;
  long f4g9_19 = f4   * (long) g9_19;
  long f5g0    = f5   * (long) g0;
  long f5g1_2  = f5_2 * (long) g1;
  long f5g2    = f5   * (long) g2;
  long f5g3_2  = f5_2 * (long) g3;
  long f5g4    = f5   * (long) g4;
  long f5g5_38 = f5_2 * (long) g5_19;
  long f5g6_19 = f5   * (long) g6_19;
  long f5g7_38 = f5_2 * (long) g7_19;
  long f5g8_19 = f5   * (long) g8_19;
  long f5g9_38 = f5_2 * (long) g9_19;
  long f6g0    = f6   * (long) g0;
  long f6g1    = f6   * (long) g1;
  long f6g2    = f6   * (long) g2;
  long f6g3    = f6   * (long) g3;
  long f6g4_19 = f6   * (long) g4_19;
  long f6g5_19 = f6   * (long) g5_19;
  long f6g6_19 = f6   * (long) g6_19;
  long f6g7_19 = f6   * (long) g7_19;
  long f6g8_19 = f6   * (long) g8_19;
  long f6g9_19 = f6   * (long) g9_19;
  long f7g0    = f7   * (long) g0;
  long f7g1_2  = f7_2 * (long) g1;
  long f7g2    = f7   * (long) g2;
  long f7g3_38 = f7_2 * (long) g3_19;
  long f7g4_19 = f7   * (long) g4_19;
  long f7g5_38 = f7_2 * (long) g5_19;
  long f7g6_19 = f7   * (long) g6_19;
  long f7g7_38 = f7_2 * (long) g7_19;
  long f7g8_19 = f7   * (long) g8_19;
  long f7g9_38 = f7_2 * (long) g9_19;
  long f8g0    = f8   * (long) g0;
  long f8g1    = f8   * (long) g1;
  long f8g2_19 = f8   * (long) g2_19;
  long f8g3_19 = f8   * (long) g3_19;
  long f8g4_19 = f8   * (long) g4_19;
  long f8g5_19 = f8   * (long) g5_19;
  long f8g6_19 = f8   * (long) g6_19;
  long f8g7_19 = f8   * (long) g7_19;
  long f8g8_19 = f8   * (long) g8_19;
  long f8g9_19 = f8   * (long) g9_19;
  long f9g0    = f9   * (long) g0;
  long f9g1_38 = f9_2 * (long) g1_19;
  long f9g2_19 = f9   * (long) g2_19;
  long f9g3_38 = f9_2 * (long) g3_19;
  long f9g4_19 = f9   * (long) g4_19;
  long f9g5_38 = f9_2 * (long) g5_19;
  long f9g6_19 = f9   * (long) g6_19;
  long f9g7_38 = f9_2 * (long) g7_19;
  long f9g8_19 = f9   * (long) g8_19;
  long f9g9_38 = f9_2 * (long) g9_19;
  long h[] = new long[10];
  h[0] = f0g0+f1g9_38+f2g8_19+f3g7_38+f4g6_19+f5g5_38+f6g4_19+f7g3_38+f8g2_19+f9g1_38;
  h[1] = f0g1+f1g0   +f2g9_19+f3g8_19+f4g7_19+f5g6_19+f6g5_19+f7g4_19+f8g3_19+f9g2_19;
  h[2] = f0g2+f1g1_2 +f2g0   +f3g9_38+f4g8_19+f5g7_38+f6g6_19+f7g5_38+f8g4_19+f9g3_38;
  h[3] = f0g3+f1g2   +f2g1   +f3g0   +f4g9_19+f5g8_19+f6g7_19+f7g6_19+f8g5_19+f9g4_19;
  h[4] = f0g4+f1g3_2 +f2g2   +f3g1_2 +f4g0   +f5g9_38+f6g8_19+f7g7_38+f8g6_19+f9g5_38;
  h[5] = f0g5+f1g4   +f2g3   +f3g2   +f4g1   +f5g0   +f6g9_19+f7g8_19+f8g7_19+f9g6_19;
  h[6] = f0g6+f1g5_2 +f2g4   +f3g3_2 +f4g2   +f5g1_2 +f6g0   +f7g9_38+f8g8_19+f9g7_38;
  h[7] = f0g7+f1g6   +f2g5   +f3g4   +f4g3   +f5g2   +f6g1   +f7g0   +f8g9_19+f9g8_19;
  h[8] = f0g8+f1g7_2 +f2g6   +f3g5_2 +f4g4   +f5g3_2 +f6g2   +f7g1_2 +f8g0   +f9g9_38;
  h[9] = f0g9+f1g8   +f2g7   +f3g6   +f4g5   +f5g4   +f6g3   +f7g2   +f8g1   +f9g0   ;

  return h;
}

public static void fe_mul(int[] h,int[] f,int[] g)
{

  long hr[] = fe_mul1(f, g);

  long carry0;
  long carry1;
  long carry2;
  long carry3;
  long carry4;
  long carry5;
  long carry6;
  long carry7;
  long carry8;
  long carry9;

  /*
  |h0| <= (1.65*1.65*2^52*(1+19+19+19+19)+1.65*1.65*2^50*(38+38+38+38+38))
    i.e. |h0| <= 1.4*2^60; narrower ranges for h2, h4, h6, h8
  |h1| <= (1.65*1.65*2^51*(1+1+19+19+19+19+19+19+19+19))
    i.e. |h1| <= 1.7*2^59; narrower ranges for h3, h5, h7, h9
  */

  carry0 = (hr[0] + (long) (1<<25)) >> 26; hr[1] += carry0; hr[0] -= carry0 << 26;
  carry4 = (hr[4] + (long) (1<<25)) >> 26; hr[5] += carry4; hr[4] -= carry4 << 26;
  /* |h0| <= 2^25 */
  /* |h4| <= 2^25 */
  /* |h1| <= 1.71*2^59 */
  /* |h5| <= 1.71*2^59 */

  carry1 = (hr[1] + (long) (1<<24)) >> 25; hr[2] += carry1; hr[1] -= carry1 << 25;
  carry5 = (hr[5] + (long) (1<<24)) >> 25; hr[6] += carry5; hr[5] -= carry5 << 25;
  /* |h1| <= 2^24; from now on fits into int32 */
  /* |h5| <= 2^24; from now on fits into int32 */
  /* |h2| <= 1.41*2^60 */
  /* |h6| <= 1.41*2^60 */

  carry2 = (hr[2] + (long) (1<<25)) >> 26; hr[3] += carry2; hr[2] -= carry2 << 26;
  carry6 = (hr[6] + (long) (1<<25)) >> 26; hr[7] += carry6; hr[6] -= carry6 << 26;
  /* |h2| <= 2^25; from now on fits into int32 unchanged */
  /* |h6| <= 2^25; from now on fits into int32 unchanged */
  /* |h3| <= 1.71*2^59 */
  /* |h7| <= 1.71*2^59 */

  carry3 = (hr[3] + (long) (1<<24)) >> 25; hr[4] += carry3; hr[3] -= carry3 << 25;
  carry7 = (hr[7] + (long) (1<<24)) >> 25; hr[8] += carry7; hr[7] -= carry7 << 25;
  /* |h3| <= 2^24; from now on fits into int32 unchanged */
  /* |h7| <= 2^24; from now on fits into int32 unchanged */
  /* |h4| <= 1.72*2^34 */
  /* |h8| <= 1.41*2^60 */

  carry4 = (hr[4] + (long) (1<<25)) >> 26; hr[5] += carry4; hr[4] -= carry4 << 26;
  carry8 = (hr[8] + (long) (1<<25)) >> 26; hr[9] += carry8; hr[8] -= carry8 << 26;
  /* |h4| <= 2^25; from now on fits into int32 unchanged */
  /* |h8| <= 2^25; from now on fits into int32 unchanged */
  /* |h5| <= 1.01*2^24 */
  /* |h9| <= 1.71*2^59 */

  carry9 = (hr[9] + (long) (1<<24)) >> 25; hr[0] += carry9 * 19; hr[9] -= carry9 << 25;
  /* |h9| <= 2^24; from now on fits into int32 unchanged */
  /* |h0| <= 1.1*2^39 */

  carry0 = (hr[0] + (long) (1<<25)) >> 26; hr[1] += carry0; hr[0] -= carry0 << 26;
  /* |h0| <= 2^25; from now on fits into int32 unchanged */
  /* |h1| <= 1.01*2^24 */

  h[0] = (int)hr[0];
  h[1] = (int)hr[1];
  h[2] = (int)hr[2];
  h[3] = (int)hr[3];
  h[4] = (int)hr[4];
  h[5] = (int)hr[5];
  h[6] = (int)hr[6];
  h[7] = (int)hr[7];
  h[8] = (int)hr[8];
  h[9] = (int)hr[9];
}


}

","3928","<java><android><elliptic-curve>","4","2","2","2016-05-03 10:35:08","33613234","0","","","","","2015-11-05 18:12:49",""
"10721831","ECDSA with SHA256 in Bouncy castle throws No Such Algorithm Exception","I am trying to generate a signature using ECDSA with SHA256 in Bouncy Castle as follows,

I add the provider in the begining
I have built the ECPrivatekey
Signature s_oSignature = Signature.getInstance(""SHA256withECDSA"",     
BouncyCastleProvider.PROVIDER_NAME);


but step 3 throws ""java.security.NoSuchAlgorithmException: no such algorithm: SHA256withECDSA for provider BC"".
But same ""SHA256withECDSA"" thing when replaced with ""SHA1withECDSA"" prceeds without any exception.
How is it possible? I am using ""bcprov-jdk14-121.jar"".
Can any one please help me as I have been struggling for a long time?
","I've never encountered this problem but here are a few things you can try. 

make sure you have the Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files installed and configured (download here at the bottom of the page)
try using the latest release of BouncyCastle and installing it as a provider in the runtime and not on-the-fly within the program

This problem is extremely odd as SHA256withECDSA is clearly listed in the specifications so it only leaves the option to try all possible options no matter how unlikely they are to help.
","3870","<java><bouncycastle><sha256><elliptic-curve>","3","2","1","2017-03-02 18:58:40","","1","2","1288","","2012-05-23 14:33:07","2012-05-23 14:16:31",""
"27773086","How to decrypt HTTPS (ECDHE) data?","I am trying to understand how exactly HTTPS works and doing a little practical tests.
I have a data captured from HTTPS communication encrypted by TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA.
If I understood it right, client during the TLS handshake creates a master key, which is then encrypted using server's public key and sent to server. This master key (as a plain text) is then used as a symmetric key for encrypting ongoing communication. Is this correct?
If yes, how to decrypt the data, if I know the master key?
It sounded pretty easy to me at first, so I just wrote this script
$masterKey = '8ef36f0eb2c10ea6142693374f6c5c7ae65eee5f6bd45bd1990b08e6c144227382726496b795d62284bd8c6c0cadbbdb';

$someRandomEncryptedData = '170303001D314A69C7DF95E07AAF51FBDA01C178D45330BC902308DF8C418FA5B02B';

$sDecrypted = mcrypt_decrypt(MCRYPT_RIJNDAEL_256, pack('H*', $masterKey), pack('H*', $someRandomEncryptedData), MCRYPT_MODE_CBC);

echo $sDecrypted;

Then I notice that master key is 96 byte long (48 as binary string), which results to PHP warning as the key should be 256 bit (32 byte) long. Am I missing something?
","
client during the request creates a master key, which is then encrypted using server's public key and sent to server. This master key (as a plain text) is then used as a symmetric key for encrypting ongoing communication. Is this correct?

Well, all-in-all, No.
Because you are asking about DH and ECDH, which are Key Agreement protocols: the client does not generate a random key, encrypt it under the server's public key and then send it to the server. That's Key Transport (like RSA Key Transport), and not DH or ECDH. Key transport is going away in TLS 1.3.
There are two phases to TLS: key agreement and bulk transfer. The phases are not as well defined as in IPSec. When the client and server use DH or ECDH, they arrive at a premaster_secret. That's the shared secret drops out of Diffie-Hellman or Elliptic Curve  Diffie-Hellman.
They take the premaster_secret, they add a client random, a server random, and arrive at a master_secret. Then they take the master_secret and derive 6 symmetric keys from it:

Client initial IV
Client encryption key
Client mac key
Server initial IV
Server encryption key
Server mac key

Those keys are used to key a block or stream cipher.
If you notice, each side contributes to the premaster_secret - the client contributes g^a and the server contributes g^b. Then each side contributes to the master_secret through nonces - the client random and the server random.
The reason there's two contributions from both sides is transport schemes, like RSA Key Transport, don't allow the server to contribute to the premaster_secret. The server has to wait until the derivation of the master_secret to contribute to the key material via a nonce.
So the progression is premaster_secret to master_secret to 6 session keys. I'm not sure where the master key is...


If yes, how to decrypt the data, if I know the master key?

I think its usually easier to just plug it into Wireshark if you have the master key. The Wireshark wiki talks about a master key (though I don't know what it is - there's a premaster_secret and master_secret). See the Wireshark wiki for Secure Socket Layer (SSL).


It sounded pretty easy to me at first, so I just wrote this script

Yeah... :) Check out RFC 5246. That's Transport Layer Security (TLS) Protocol Version 1.2. Then let's talk about easy :)


Then I notice that master key is 96 byte long (48 as binary string)

96 bytes is the output of the PseudoRandom Function (PRF). Check out RFC 5246, page 13.
","3829","<php><encryption><https><elliptic-curve><diffie-hellman>","5","3","1","2015-01-05 04:21:03","27773283","0","1","1322616","","2015-01-05 03:56:29","2015-01-05 03:38:37",""
"11563229","How to use ECC in iOS","Is there any example for use ECC in iOS?
I noticed that the kSecAttrKeyTypeEC in Apple Developer Documents, but I can't use it to generic Key pair.
Below code is modified from the example CryptoExercise
// Container dictionaries.
NSMutableDictionary * privateKeyAttr = [[NSMutableDictionary alloc] init];
NSMutableDictionary * publicKeyAttr = [[NSMutableDictionary alloc] init];
NSMutableDictionary * keyPairAttr = [[NSMutableDictionary alloc] init];

// Set top level dictionary for the keypair.
[keyPairAttr setObject:(id)kSecAttrKeyTypeEC forKey:(id)kSecAttrKeyType];
[keyPairAttr setObject:[NSNumber numberWithUnsignedInteger:keySize] forKey:(id)kSecAttrKeySizeInBits];

// Set the private key dictionary.
[privateKeyAttr setObject:[NSNumber numberWithBool:YES] forKey:(id)kSecAttrIsPermanent];
[privateKeyAttr setObject:privateTag forKey:(id)kSecAttrApplicationTag];
// See SecKey.h to set other flag values.

// Set the public key dictionary.
[publicKeyAttr setObject:[NSNumber numberWithBool:YES] forKey:(id)kSecAttrIsPermanent];
[publicKeyAttr setObject:publicTag forKey:(id)kSecAttrApplicationTag];
// See SecKey.h to set other flag values.

// Set attributes to top level dictionary.
[keyPairAttr setObject:privateKeyAttr forKey:(id)kSecPrivateKeyAttrs];
[keyPairAttr setObject:publicKeyAttr forKey:(id)kSecPublicKeyAttrs];

// SecKeyGeneratePair returns the SecKeyRefs just for educational purposes.
sanityCheck = SecKeyGeneratePair((CFDictionaryRef)keyPairAttr, &publicKeyRef, &privateKeyRef);
LOGGING_FACILITY( sanityCheck == noErr && publicKeyRef != NULL && privateKeyRef != NULL, @""Something really bad went wrong with generating the key pair."" );

The sanityCheck always return -50 which means 'errSecParam'. 
I really don't know how to use it, thank you for read this.
","NSDictionary *parameters = @{
                             (__bridge id)kSecAttrKeyType: (__bridge id)kSecAttrKeyTypeEC,
                             (__bridge id)kSecAttrKeySizeInBits: @256,
                             (__bridge id)kSecPrivateKeyAttrs: @{
                                     (__bridge id)kSecAttrIsPermanent: @YES,
                                     (__bridge id)kSecAttrApplicationTag: [@""my.key.tag"" dataUsingEncoding:NSUTF8StringEncoding],
                                     },
                             (__bridge id)kSecPublicKeyAttrs: @{
                                     (__bridge id)kSecAttrIsPermanent: @YES,
                                     (__bridge id)kSecAttrApplicationTag: [@""my.key.pubtag"" dataUsingEncoding:NSUTF8StringEncoding],
                                     }
                             };

SecKeyRef publicKey, privateKey;
OSStatus status = SecKeyGeneratePair((__bridge CFDictionaryRef)parameters, &publicKey, &privateKey);

This works, double check your key size parameter.
Just a note, currently EC keys can only be used for signing/verifying data. Encryption/decryption returns errSecUnimplemented = -4.
","3804","<ios><elliptic-curve>","10","1","1","2016-02-26 08:59:42","","2","","600753","","2015-02-23 13:30:44","2012-07-19 14:39:37",""
"5978537","BouncyCastle error: can't recognise key type in ECDSA based signer","I have been doing some simple testing with BouncyCastle's crypto library and RSA's crypto library. What I am doing is generating a private/public key pair like so:
KeyPairGenerator kpg = KeyPairGenerator.getInstance(""EC"", ""JsafeJCE"");
kpg.initialize(new ECGenParameterSpec(""secp384r1""));
KeyPair kp = kpg.genKeyPair();
PrivateKey priv = kp.getPrivate();
PublicKey pub = kp.getPublic();

Then I generate the signature like so 
Signature sig = Signature.getInstance(""SHA384/ECDSA"",""BC"");

and I try to sign the private key:
sig.initSign(priv);

All of this gets me the error:
java.security.InvalidKeyException: can't recognise key type in ECDSA based signer
When I BC and JsafeJCE, I get no error and everything is fine. Works also if both providers are BC. So why is it I can't sign the JsafeJCE generated key with the BC lib? 
","Bouncycastle requires that the private key used for its signing implementation must be one of its own. I don't know why you'd choose different providers for the various pieces in any event.
","3799","<java><rsa><bouncycastle><elliptic-curve>","3","3","2","2017-01-16 22:12:11","","0","","746849","","2011-05-12 14:35:47","2011-05-12 13:16:20",""
"5978537","BouncyCastle error: can't recognise key type in ECDSA based signer","I have been doing some simple testing with BouncyCastle's crypto library and RSA's crypto library. What I am doing is generating a private/public key pair like so:
KeyPairGenerator kpg = KeyPairGenerator.getInstance(""EC"", ""JsafeJCE"");
kpg.initialize(new ECGenParameterSpec(""secp384r1""));
KeyPair kp = kpg.genKeyPair();
PrivateKey priv = kp.getPrivate();
PublicKey pub = kp.getPublic();

Then I generate the signature like so 
Signature sig = Signature.getInstance(""SHA384/ECDSA"",""BC"");

and I try to sign the private key:
sig.initSign(priv);

All of this gets me the error:
java.security.InvalidKeyException: can't recognise key type in ECDSA based signer
When I BC and JsafeJCE, I get no error and everything is fine. Works also if both providers are BC. So why is it I can't sign the JsafeJCE generated key with the BC lib? 
","I solved the same issue by following the below steps:
1) Create static provider: 
private static BouncyCastleProvider bouncyCastleProvider;
public static final BouncyCastleProvider BOUNCY_CASTLE_PROVIDER = new BouncyCastleProvider();
static {
    bouncyCastleProvider = BOUNCY_CASTLE_PROVIDER;
}

2) Generate keyPair:
KeyPairGenerator g = KeyPairGenerator.getInstance(""ECDSA"", bouncyCastleProvider);
g.initialize(ecSpec, random);
KeyPair keyPair = g.generateKeyPair();

3) If you want to sign something using key:
Signature signature = Signature.getInstance(""SHA256withECDSA"", bouncyCastleProvider);
signature.initSign(privateKey);
signature.update(signedData);
signature.sign();

It worked for me, and will hopefully work for you as well.
","3799","<java><rsa><bouncycastle><elliptic-curve>","3","4","2","2017-01-16 22:12:11","","0","","746849","","2011-05-12 14:35:47","2011-05-12 13:16:20",""
"27743045","EC private key recovery from PEM format with BouncyCastle","My application stores private keys in PEM format, the existing code works for RSA keys but I am trying to switch to EC keys and there is a problem. The key recovery seems to work, and the equals method on the recovered key returns true for the original key, but getAlgorithm() on the original key returns ""EC"" and on the recovered key ""ECDSA"". The discrepancy in the algorithm later causes problems because it does not match the algorithm for the corresponding public key.
Am I doing something wrong or is this a bug in the PEM parser?
Here is a test program which demonstrates the problem:
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.StringReader;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.SecureRandom;
import java.security.spec.ECGenParameterSpec;

import org.bouncycastle.openssl.PEMKeyPair;
import org.bouncycastle.openssl.PEMParser;
import org.bouncycastle.openssl.PEMWriter;
import org.bouncycastle.openssl.jcajce.JcaPEMKeyConverter;
import org.immutify.janus.keytool.KeyToolUtils;

public class TestPrivateKeyRecovery
{
    private static final String KEY_ALGORITHM           = ""EC"";
    private static final String SIGNATURE_ALGORITHM     = ""SHA512withECDSA"";
    private static final String PROVIDER                = ""BC"";
    private static final String CURVE_NAME              = ""secp521r1"";
    private static final String WRAPPING_CIPHER_SPEC    = ""ECIESwithAES"";

    private ECGenParameterSpec  ecGenSpec;
    private KeyPairGenerator    keyGen_;
    private SecureRandom        rand_;

    public void run()
    {
        try
        {
            rand_       = new SecureRandom();
            ecGenSpec   = new ECGenParameterSpec(CURVE_NAME);
            keyGen_     = KeyPairGenerator.getInstance(KEY_ALGORITHM, PROVIDER);

            keyGen_.initialize(ecGenSpec, rand_);


            PrivateKey privateKey = keyGen_.generateKeyPair().getPrivate();





            String der = privateKeyToDER(privateKey);

            PrivateKey recoveredKey = privateKeyFromDER(der);

            System.out.println(""privateKey="" + privateKey);
            System.out.println(""privateKey.getAlgorithm()="" + privateKey.getAlgorithm());
            System.out.println(""der="" + der);
            System.out.println(""recoveredKey="" + privateKey);
            System.out.println(""recoveredKey.getAlgorithm()="" + recoveredKey.getAlgorithm());
            System.out.println();

            if(privateKey.equals(recoveredKey))
                System.out.println(""Key recovery ok"");
            else
                System.err.println(""Private key recovery failed"");

            if(privateKey.getAlgorithm().equals(recoveredKey.getAlgorithm()))
                System.out.println(""Key algorithm ok"");
            else
                System.err.println(""Key algorithms do not match"");
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }

    public static   String      privateKeyToDER(PrivateKey key) throws IOException
    {
        ByteArrayOutputStream   bos = new ByteArrayOutputStream();
        PEMWriter               pemWriter = new PEMWriter(new OutputStreamWriter(bos));

        pemWriter.writeObject(key);

        pemWriter.close();

        return new String(bos.toByteArray());
    }

    public static   PrivateKey      privateKeyFromDER(String der) throws IOException
    {
        StringReader            reader = new StringReader(der);
        PEMParser               pemParser = new PEMParser(reader);

        try
        {
            Object o = pemParser.readObject();

            if (o == null || !(o instanceof PEMKeyPair))
            {
                throw new IOException(""Not an OpenSSL key"");
            }

            KeyPair kp = new JcaPEMKeyConverter().setProvider(""BC"").getKeyPair((PEMKeyPair)o);
            return kp.getPrivate();
        }
        finally
        {
            pemParser.close();
        }
    }
}

The output from the test program is:

privateKey=EC Private Key
             S: 13d19928468d14fabb9235a81fc1ec706ff5413a70a760b63e07d45a5d04a2f18425ef735500190291aacaf58c92306acd87fa01a47d907d5d3fc01531180353146

privateKey.getAlgorithm()=EC
der=-----BEGIN EC PRIVATE KEY-----
MIHcAgEBBEIBPRmShGjRT6u5I1qB/B7HBv9UE6cKdgtj4H1FpdBKLxhCXvc1UAGQ
KRqsr1jJIwas2H+gGkfZB9XT/AFTEYA1MUagBwYFK4EEACOhgYkDgYYABAFN5ZcE
zg9fV13u57ffwyN9bm9Wa9Pe0MtL2cd5CW2ku4mWzgS5m8IfNMAw2QMah5Z9fuXW
1fGJgUx1RsC09R6legFTgymlbqt+CaPhNsJkr12cjyzhT1NxR6uEzMUtBcYxqLHy
ANkhHmvAk221//YIRIWix7ZlRsRrs+iYrpWw4bMt9A==
-----END EC PRIVATE KEY-----

recoveredKey=EC Private Key
             S: 13d19928468d14fabb9235a81fc1ec706ff5413a70a760b63e07d45a5d04a2f18425ef735500190291aacaf58c92306acd87fa01a47d907d5d3fc01531180353146

recoveredKey.getAlgorithm()=ECDSA

Key recovery ok
Key algorithms do not match

","The problem is not the PEMParser but JcaPEMKeyConverter which treats EC keys as keys for ECDSA:
algorithms.put(X9ObjectIdentifiers.id_ecPublicKey, ""ECDSA"");
...
private KeyFactory getKeyFactory(AlgorithmIdentifier algId)
throws NoSuchAlgorithmException, NoSuchProviderException
{
  ASN1ObjectIdentifier algorithm = algId.getAlgorithm();
  String algName = (String)algorithms.get(algorithm);
...

The algorithm identifier is id-ecPublicKey, which is also used for ECDSA keys, so the algorithm selection is not unique here and probably the BC devs have chosen ECDSA as the most suitable choice. You could do something similar like JcaPEMKeyConverter with you own KeyFactory but choose your correct algorithm for EC keys.
","3685","<java><bouncycastle><private-key><pem><elliptic-curve>","7","5","1","2015-01-03 13:33:19","27743995","0","3","1852723","","2015-01-03 13:33:19","2015-01-02 13:32:17",""
"7385882","Verify signature using elliptic curve cryptography","I need to verify a signature of a message which contains several values. The only parameters I have are the signature, the public key and the values itself. The algorithm used for creating the signature is eliptic curve cryptography with 192 bit. I allready tried to find code examples on the net but I didn't find anything for this case.
Has anybody experiences with this algorithm using java for verification? Could you please provide code or a link to an example?
Thank you for your help!
","You can probably use Bouncy Castle library.
See http://www.bouncycastle.org/wiki/display/JA1/Using+Elliptic+Curve 
","3421","<java><security><digital-signature><jce><elliptic-curve>","1","0","2","2011-09-13 11:06:37","7386402","0","1","906184","","2011-09-12 13:32:24","2011-09-12 09:38:54",""
"7385882","Verify signature using elliptic curve cryptography","I need to verify a signature of a message which contains several values. The only parameters I have are the signature, the public key and the values itself. The algorithm used for creating the signature is eliptic curve cryptography with 192 bit. I allready tried to find code examples on the net but I didn't find anything for this case.
Has anybody experiences with this algorithm using java for verification? Could you please provide code or a link to an example?
Thank you for your help!
","You are a bit short on information there...
There are several signature schemes which use elliptic curves, but the most widespread (by far) is ECDSA. You must then worry about the following points:

Signature operates on a sequence of bits. Every single data bit must be correct. Here, you have ""values"" so there must be an encoding of those values into a sequence of bits (or bytes). To verify the signature, you must use the same encoding than the one used to generate the signature.
ECDSA begins by hashing the input data with a cryptographic hash function. There again, you must use the same one than what was used for generating the signature. As a wild guess, I would say that the hash function is probably SHA-1.
ECDSA operates in an elliptic curve. The curve size is not enough to define the curve: there are many 192-bit curves. However, since defining your own curve is hard, most people use one curve among the 15 curves defined in FIPS 186-3. One of those 15 curves has a ""192-bit size"" (it is called ""P-192"") so chances are that the signature uses that curve.
An ECDSA public key is the encoding of a curve point. A curve point is, nominally, a pair of integers (X, Y) (these are the ""coordinates"" of the point). These integers are from the base field in which the curve lives; for the P-192 curve, the coordinates are 192-bit integers. The ""normal"" encoding for such a public key is then a 49-byte string: the first byte will be 0x02, followed by the big-endian unsigned encoding of X (24 bytes), then the unsigned encoding of Y (24 bytes). Other encodings are possible.
An ECDSA signature formally consists in two integer values, usually called r and s (192-bit integers too). There again, the signature you have is probably a sequence of bytes which is an encoding of the two integers. There are two common encodings, one being a raw big-endian unsigned encoding of both value (hence a 48-byte signature), the other using ASN.1 (for a signature of length 53 or 54  bytes, or so).

Using Bouncy Castle, as @Ashkan suggests, is a good idea. But, as you see, there are quite a lot of assumptions to do about your situation. If you want to gain a thorough understanding of what is going on, buy a copy of ANSI X9.62:2005 (the ECDSA standard). Be warned that the mathematical contents are quite heavy.
","3421","<java><security><digital-signature><jce><elliptic-curve>","1","5","2","2011-09-13 11:06:37","7386402","0","1","906184","","2011-09-12 13:32:24","2011-09-12 09:38:54",""
"15430784","ECDH Shared secret derived from OpenSSL and BouncyCastle are not always the same although constants and domain parameters are the same for both","I'm trying to implement AES cryptography between an iOS app and a java servlet. Java servlet uses BouncyCastle library while iOS app uses OpenSSL. Although I've used same public/private key pair and domain parameters for both side, shared secret generated by OpenSSL sometimes differs from what generates by BouncyCastle on server - side.
The procedure is as follows;

a public/private key pair generated in server with specified domain
parameters (say server_public_key, server_private_key)
server_public_key is embedded in iOS app in form of an EC_POINT X
and Y
at run-time iOS app generates its own public/private key pair (say
client_key_curve which is an EC_KEY), and
then loads server_public_key and calculates shared secret
(key_agreement) based on server_public_key and client_key_curve, and
then client_public_key (extracted from client_key_curve) as well as
a ciphered message which is encrypted symmetrically using the
derived shared secret (key_agreement) are sent to server
in server - side, shared secret again is calculated using
client_public_key and server ECDH parameters which are the same as
client side, and
then ciphered message decrypted using computed key_agreement

BUT the decrypted messages are not always the same as the client sent messages.
Since I've also developed an Android app which uses the same procedure but employs BouncyCastle for cryptography therefore I suspect the correctness of implemented code using OpenSSL, so the code is revealed here for others to help resolving the issue. What I've implemented to calculate the shared secret is as follows
- (void)calculateSharedSecret
{
    BN_CTX* bn_ctx;

    EC_KEY*     client_key_curve = NULL;
    EC_KEY*     server_key_curve = NULL;
    EC_GROUP*   client_key_group = NULL;
    EC_GROUP*   server_key_group = NULL;
    EC_POINT*   client_publicKey = NULL;
    EC_POINT*   server_publicKey = NULL;
    BIGNUM*     client_privatKey = NULL;

    BIGNUM* client_publicK_x = NULL;
    BIGNUM* client_publicK_y = NULL;
    BIGNUM* server_publicK_x = NULL;
    BIGNUM* server_publicK_y = NULL;

    NSException *p = [NSException exceptionWithName:@"""" reason:@"""" userInfo:nil];

    bn_ctx = BN_CTX_new();
    BN_CTX_start(bn_ctx);

    client_publicK_x = BN_CTX_get(bn_ctx);
    client_publicK_y = BN_CTX_get(bn_ctx);
    client_privatKey = BN_CTX_get(bn_ctx);
    server_publicK_x = BN_CTX_get(bn_ctx);
    server_publicK_y = BN_CTX_get(bn_ctx);

    // client

    if ((client_key_curve = EC_KEY_new_by_curve_name(NID_X9_62_prime256v1)) == NULL)
        @throw p;

    if ((client_key_group = (EC_GROUP *)EC_KEY_get0_group(client_key_curve)) == NULL)
        @throw p;

    if (EC_KEY_generate_key(client_key_curve) != 1)
        @throw p;

    if ((client_publicKey = (EC_POINT *)EC_KEY_get0_public_key(client_key_curve)) == NULL)
        @throw p;

    if (EC_KEY_check_key(client_key_curve) != 1)
        @throw p;

    client_privatKey = (BIGNUM *)EC_KEY_get0_private_key(client_key_curve);

    char *client_public_key = EC_POINT_point2hex(client_key_group, client_publicKey, POINT_CONVERSION_COMPRESSED, bn_ctx);
    char *client_privat_key = BN_bn2hex(client_privatKey);

    _clientPublicKey = [NSString stringWithCString:client_public_key encoding:NSUTF8StringEncoding];

    // server

    NSArray* lines = [self loadServerPublicKeyXY];

    NSString *public_str_x = [lines objectAtIndex:0];
    NSString *public_str_y = [lines objectAtIndex:1];

    BN_dec2bn(&server_publicK_x, [public_str_x UTF8String]);
    BN_dec2bn(&server_publicK_y, [public_str_y UTF8String]);

    if ((server_key_curve = EC_KEY_new_by_curve_name(NID_X9_62_prime256v1)) == NULL)
        @throw p;

    if ((server_key_group = (EC_GROUP *)EC_KEY_get0_group(server_key_curve)) == NULL)
        @throw p;

    if (EC_KEY_generate_key(server_key_curve) != 1)
        @throw p;

    if ((server_publicKey = EC_POINT_new(server_key_group)) == NULL)
        @throw p;

    if (EC_POINT_set_affine_coordinates_GFp(server_key_group, server_publicKey, server_publicK_x, server_publicK_y, bn_ctx) != 1)
        @throw p;

    if (EC_KEY_check_key(server_key_curve) != 1)
        @throw p;

    unsigned char *key_agreement = NULL;
    key_agreement = (unsigned char *)OPENSSL_malloc(SHA_DIGEST_LENGTH);
    if (ECDH_compute_key(key_agreement, SHA_DIGEST_LENGTH, server_publicKey, client_key_curve, KDF1_SHA1) == 0)
        @throw p;
    _symmetricKey = [NSData dataWithBytes:key_agreement length:16];
}

and
void *KDF1_SHA1(const void *input, size_t inlen, void *output, size_t *outlen)
{
    if (*outlen < SHA_DIGEST_LENGTH)
        return NULL;
    else
        *outlen = SHA_DIGEST_LENGTH;
    return SHA1(input, inlen, output);
}

_clientPublicKey and _symmetricKey are declared at class level
The same curve (named prime256v1 or secp256r1) is used on both side but the results are not always the same.
EDIT 1:
In response to @PeterDettman, I’ve published server – side code for more clarification
public byte[] generateAESSymmetricKey(byte[] client_public_key_hex) throws InvalidRequest{
    try {
        // ECDH Private Key as well as other prime256v1 params was generated by Java ""keytool"" and stored in a JKS file
        KeyStore keyStore = ...;
        PrivateKey privateKey = (PrivateKey) keyStore.getKey(""keyAlias"", ""keyStorePassword"".toCharArray());
        ECPrivateKeyParameters ecdhPrivateKeyParameters = (ECPrivateKeyParameters) (PrivateKeyFactory.createKey(privateKey.getEncoded()));

        ECCurve ecCurve = ecdhPrivateKeyParameters.getParameters().getCurve();
        ECDomainParameters ecDomainParameters = ecdhPrivateKeyParameters.getParameters();
        ECPublicKeyParameters client_public_key = new ECPublicKeyParameters(ecCurve.decodePoint(client_public_key_hex), ecDomainParameters);

        BasicAgreement agree = new ECDHBasicAgreement();
        agree.init(ecdhPrivateKeyParameters);
        byte[] keyAgreement = agree.calculateAgreement(client_public_key).toByteArray();

        SHA1Digest sha1Digest = new SHA1Digest();
        sha1Digest.update(keyAgreement, 0, keyAgreement.length);
        byte hashKeyAgreement[] = new byte[sha1Digest.getDigestSize()];
        sha1Digest.doFinal(hashKeyAgreement, 0);

        byte[] server_calculatd_symmetric_key = new byte[16];
        System.arraycopy(hashKeyAgreement, 0, server_calculatd_symmetric_key, 0, server_calculatd_symmetric_key.length);
        return server_calculatd_symmetric_key;
    } catch (Throwable ignored) {
        return null;
    }
}

where client_public_key_hex is client_public_key that is converted to an array of byte. The expected result is that server_calculatd_symmetric_key equals symmetricKey for all the time. BUT they are not always the same.
EDIT 2:
As a feedback to @PeterDettman answer, I made some changes to reflect his suggestion and although rate of inequality reduces, generated key agreements (shared secret) on either side are not still equal in all cases.
It is possible to reproduce one of inequality case with following data

Public key :
02E05C058C3DF6E8D63791660D9C5EA98B5A0822AB93339B0B8815322131119C4C
Privat key :
062E8AC930BD6009CF929E51B37432498075D21C335BD00086BF68CE09933ACA
Generated Shared Secret by OpenSSL : 51d027264f8540e5d0fde70000000000
Generated Shared Secret by BouncyCastle :
51d027264f8540e5d0fde700e5db0fab

So is there any mistake in the implemented code or procedure?
Thanks
","There's a problem in the server code, in the way that the ECDH agreement value is converted to bytes:
byte[] keyAgreement = agree.calculateAgreement(client_public_key).toByteArray();

Try this instead:
BigInteger agreementValue = agree.calculateAgreement(client_public_key);
byte[] keyAgreement = BigIntegers.asUnsignedByteArray(agree.getFieldSize(), agreementValue);

This will ensure a fixed-size byte array as output, which is a requirement for converting EC field elements to octet strings (search ""Field Element to Octet String Conversion Primitive"" for more details).
I recommend you ignore the SHA1 key derivation part until you can get that Java keyAgreement byte array to exactly match the input to your KDF1_SHA1 function.
","3191","<ios><openssl><bouncycastle><elliptic-curve>","6","4","1","2013-04-13 20:46:37","15897235","9","4","324362","","2013-04-13 20:46:37","2013-03-15 11:06:55",""
"19605954","Getting ECPoint/ECPublicKeyParameters from byte[] in Bouncy Castle","So far I've managed to generate a ECDHE pair in bouncy castle's lightweight API. However I have issues trying to recreate the public key from an byte[].
Since the ECPublicKeyParameters object only has one method getQ() I am assuming thats all that is required to reconstruct the key. The other parameters such as the curve used (P-521) are kept constant.
I am doing the following:
AsymmetricCipherKeyPair kp = kpgen.generateKeyPair(); //ECDHE Key Generator

ECPublicKeyParameters pubKey = (ECPublicKeyParameters)kp.getPublic();
byte[] aPubKeybytes = pubKey.getQ().getEncoded(false); //Should I set to true or false?

Unless there is another way to get the raw bytes of the public key pubKey, I don't see a way to get the bytes without invoking method getQ() which returns an ECPoint object.
My question is how to reconstruct the byte[] into a ECPoint object using bouncy castle's lightweight API. Or, better yet, how to reconstruct the whole ECPublicKeyParameter object using an byte array somehow derived from the original pubKey object.
","To whomever it may concern I resolved this issue by using the PublicKeyFactory and SubjectPublicKeyInfoFactory to encode and decode the key.
Using:
byte[] key = SubjectPublicKeyInfoFactory.createSubjectPublicKeyInfo(pubKey).getEncoded();

I was able to get the raw bytes of the key.
and using:
ECPublicKeyParameters bpubKey = (ECPublicKeyParameters)PublicKeyFactory.createKey(key);

I was able to recreate the public key.
","3157","<java><bouncycastle><public-key-encryption><elliptic-curve><diffie-hellman>","3","8","1","2013-12-05 21:31:29","19614887","0","","","","","2013-10-26 11:06:49",""
"7419183","Problems implementing ECDH on Android using BouncyCastle","I am trying to implement ECDH on Android and I managed to source for a code that tests the Key Agreement (Full code is shown right below)
Unfortunately when I run the code it gives me a java.security.NoSuchAlgorithmException: KeyPairGenerator ECDH implementation not found.
This is the line in question I take
KeyPairGenerator    g = KeyPairGenerator.getInstance(""ECDH"", ""BC"");

As I've noted some people have mentioned that BouncyCastle is not fully supported on Android and to use SpongyCastle which I have. I've also tried to change the provider from ""BC"" to ""SC""
KeyPairGenerator    g = KeyPairGenerator.getInstance(""ECDH"", ""SC"");

Unfortunately that has given me a java.security.NoSuchProviderException: SC
Hope someone can give me some direction. Many thanks!
Partial testECDH() Code:
import org.spongycastle.jce.ECPointUtil;
import org.spongycastle.jce.provider.BouncyCastleProvider;
import org.spongycastle.util.encoders.Hex;
import org.spongycastle.util.test.SimpleTest;

private void testECDH()
{
    try
    {
        KeyPairGenerator    g = KeyPairGenerator.getInstance(""ECDH"", ""SC"");

        EllipticCurve curve = new EllipticCurve(
                new ECFieldFp(new BigInteger(""883423532389192164791648750360308885314476597252960362792450860609699839"")), // q
                new BigInteger(""7fffffffffffffffffffffff7fffffffffff8000000000007ffffffffffc"", 16), // a
                new BigInteger(""6b016c3bdcf18941d0d654921475ca71a9db2fb27d1d37796185c2942c0a"", 16)); // b

        ECParameterSpec ecSpec = new ECParameterSpec(
                curve,
                ECPointUtil.decodePoint(curve, Hex.decode(""020ffa963cdca8816ccc33b8642bedf905c3d358573d3f27fbbd3b3cb9aaaf"")), // G
                new BigInteger(""883423532389192164791648750360308884807550341691627752275345424702807307""), // n
                1); // h

        g.initialize(ecSpec, new SecureRandom());

        //
        // a side
        //
        KeyPair aKeyPair = g.generateKeyPair();

        KeyAgreement aKeyAgree = KeyAgreement.getInstance(""ECDH"", ""SC"");

        aKeyAgree.init(aKeyPair.getPrivate());

        //
        // b side
        //
        KeyPair bKeyPair = g.generateKeyPair();

        KeyAgreement bKeyAgree = KeyAgreement.getInstance(""ECDH"", ""SC"");

        bKeyAgree.init(bKeyPair.getPrivate());

        //
        // agreement
        //
        aKeyAgree.doPhase(bKeyPair.getPublic(), true);
        bKeyAgree.doPhase(aKeyPair.getPublic(), true);

        BigInteger  k1 = new BigInteger(aKeyAgree.generateSecret());
        BigInteger  k2 = new BigInteger(bKeyAgree.generateSecret());

        if (!k1.equals(k2))
        {
            fail(""ECDH 2-way test failed"");
        }

        //
        // public key encoding test
        //
        byte[]              pubEnc = aKeyPair.getPublic().getEncoded();
        KeyFactory          keyFac = KeyFactory.getInstance(""ECDH"", ""SC"");
        X509EncodedKeySpec  pubX509 = new X509EncodedKeySpec(pubEnc);
        ECPublicKey         pubKey = (ECPublicKey)keyFac.generatePublic(pubX509);

        if (!pubKey.getW().equals(((ECPublicKey)aKeyPair.getPublic()).getW()))
        {
            System.out.println("" expected "" + pubKey.getW().getAffineX() + "" got "" + ((ECPublicKey)aKeyPair.getPublic()).getW().getAffineX());
            System.out.println("" expected "" + pubKey.getW().getAffineY() + "" got "" + ((ECPublicKey)aKeyPair.getPublic()).getW().getAffineY());
            fail(""ECDH public key encoding (W test) failed"");
        }

        if (!pubKey.getParams().getGenerator().equals(((ECPublicKey)aKeyPair.getPublic()).getParams().getGenerator()))
        {
            fail(""ECDH public key encoding (G test) failed"");
        }

        //
        // private key encoding test
        //
        byte[]              privEnc = aKeyPair.getPrivate().getEncoded();
        PKCS8EncodedKeySpec privPKCS8 = new PKCS8EncodedKeySpec(privEnc);
        ECPrivateKey        privKey = (ECPrivateKey)keyFac.generatePrivate(privPKCS8);

        if (!privKey.getS().equals(((ECPrivateKey)aKeyPair.getPrivate()).getS()))
        {
            fail(""ECDH private key encoding (S test) failed"");
        }

        if (!privKey.getParams().getGenerator().equals(((ECPrivateKey)aKeyPair.getPrivate()).getParams().getGenerator()))
        {
            fail(""ECDH private key encoding (G test) failed"");
        }
    }
    catch (Exception e)
    {
        fail(""ECDH 2-way test failed - exception: "" + e);
    }
}

","","3031","<java><android><bouncycastle><elliptic-curve>","2","","0","2011-09-14 15:46:45","","4","2","","","","2011-09-14 15:46:45",""
"15393242","OpenSSL command line secp384r1 / SHA-256 digital signatures","Is it possible to generate digital signatures using secp384r1 / SHA-256 from the OpenSSL command line (I'm using version 1.0.1c)? After some experimentation I can generate signatures with SHA-1 using: 
openssl dgst -sign ec-key.pem -ecdsa-with-SHA1 -binary < test.bin > sig.bin 

but 
openssl dgst -sign ec-key.pem -ecdsa-with-SHA256 -binary < test.bin > sig.bin 

just gives me a known option for '-ecdsa-with-SHA256'? 
Thanks in advance 
","Try use -sha256 instead of -ecdsa-with-SHA256, and use an EC key to sign it.
","3026","<openssl><elliptic-curve>","5","1","1","2013-03-14 02:00:23","","0","1","1622894","","2013-03-13 18:29:37","2013-03-13 18:12:20",""
"48832170","Generate EC public key from byte array private key in native java (7+)","I'm trying to learn some crypto coding and have generated a 32-byte private key currently held in a byte array (byte[] privatekey). I know the public key is generated using the secp256k1 named elliptic curve parameters, and a formula where publickey = G * privatekey, where G is some point on the elliptic curve (ECPoint?), but I am unable to transfer that named parameter spec and formula into actual coding of a public key. I know that since java 7, there are classes included in the java.security.* and java.security.spec.* packages to do this in short code, but I can't find a good example showing how to do this without using a third party library.
This bitcoin stackexchange link has all the theoretical answer and great python and C# code, but nothing in Java.
Edit/Update: I have tried to get what I need with the following code:
String secp256k1_G_uncompressed_string = ""0479BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8"";
byte[] secp256k1_G_uncompressed_bytes = DatatypeConverter.parseHexBinary(secp256k1_G_uncompressed_string);
String privatekeystring = ""1184CD2CDD640CA42CFC3A091C51D549B2F016D454B2774019C2B2D2E08529FD"";
byte[] privatekeybytes = DatatypeConverter.parseHexBinary(privatekeystring);
BigInteger secp256k1_G_num = new BigInteger(1, secp256k1_G_uncompressed_bytes);
BigInteger privatekey_num = new BigInteger(1, privatekeybytes);
BigInteger curvepoint = secp256k1_G_num.multiply(privatekey_num);
byte[] publickeybytes = curvepoint.toByteArray();
System.out.println(DatatypeConverter.printHexBinary(privatekeybytes));
System.out.println(DatatypeConverter.printHexBinary(publickeybytes));

The publickey that should be generated with correct coding is this: 

04d0988bfa799f7d7ef9ab3de97ef481cd0f75d2367ad456607647edde665d6f6
  fbdd594388756a7beaf73b4822bc22d36e9bda7db82df2b8b623673eefc0b7495

but the public key that is being generated is this:

4E6801418BB6EF9F462F69830F82EB51BB9224219B9D89C8C34FB746297F59779D8B986194181BD7AB99DC7E3086914EA13C4B37E05716CADCA0AE391CE81C4B85E0F09E8628F0F81692B5D08D0D8B9E20615A5D23DE0F591D02C650554BB1D8

","An elliptic curve point is not an integer. Putting the encoded representation of a point (G) in a BigInteger and trying to use it as an integer is nowhere near correct. Elliptic curve point multiplication is not integer multiplication, and is nowhere near as simple as BigInteger.multiply. And it is written with the scalar on the left, e.g. kG not Gk.
Translating the standard (or at least conventional) algorithms given at the bitcoin Q to Java really should be a reasonably simple exercise for any Java programmer. 
Scalar Multiplication of Point over elliptic Curve contains (in the answer) a correct implementation for P192 aka secp192r1; it can be converted to secp256k1 by replacing p and a with the values from the spec (SEC2 from https://www.secg.org or X9.62 if you have it) or any existing implementation -- including Java (see below) -- and discarding the P192-specific test data. Actually you mostly need to change p; the Koblitz curves were chosen to have a=0. Elliptic Curve Multiplication Function contains a not-quite-correct implementation that is stated to be for secp256k1 but doesn't actually include the constants for any curve.

since java 7, there are classes included in the java.security.* and java.security.spec.* packages to do this in short code

Not really. First, Java crypto isolates the classes you see in java.security and javax.crypto from the implementation code, which is in entirely different classes (mostly (still) under sun.* and com.sun.*) in one or more 'providers' which are separate jars and technically optional; it is possible to remove, add, or change providers without changing the calls in your code, although most people don't. The JCA 'facade' classes for EC crypto were present since java 5 (called 1.5), but no provider implementing EC algorithms was included in the standard build; to use them you had to add a third-party provider. Starting in java 7 a standard SunEC provider IS included. However, JCA (for all algorithms not just EC) keeps private and public keys strictly separate after generation, and in particular it provides no way to access the private-to-public derivation logic that exists internally for EC.
It does include the parameters for several standard curves, including secp256k1, which you could use to avoid the effort of copying them from the spec. There doesn't appear to be a direct way to access this data, but you can do so indirectly by generating a nonce key and discarding it. Alternatively, since you already have a private key you can create the encoding Java uses (PKCS8) and read that in, producing the same curve parameters and also a usable key. In general constructing ASN.1 DER encodings like PKCS8 is fairly complicated, but for EC it is simplified because (1) everybody uses the 'named' form which encodes the curve as a single OID and (2) the standard specifies an encoding of the private value which is fixed in length for a given curve; as a result the PKCS8 encoding for a given EC curve consists of a fixed prefix followed by the private key value. Example snippets:
    KeyPairGenerator kg = KeyPairGenerator.getInstance (""EC"");
    kg.initialize (new ECGenParameterSpec (""secp256k1""));
    ECParameterSpec p = ((ECPublicKey) kg.generateKeyPair().getPublic()).getParams();
    System.out.println (""p=(dec)"" + ((ECFieldFp) p.getCurve().getField()).getP() );
    ECPoint G = p.getGenerator(); 
    System.out.format (""Gx=(hex)%032x%n"", G.getAffineX());
    System.out.format (""Gy=(hex)%032x%n"", G.getAffineY());
    //
    byte[] privatekey_enc = DatatypeConverter.parseHexBinary(
            ""303E020100301006072A8648CE3D020106052B8104000A042730250201010420""+
            ""1184CD2CDD640CA42CFC3A091C51D549B2F016D454B2774019C2B2D2E08529FD"");
    // note fixed prefix for PKCS8-EC-secp256k1 plus your private value
    KeyFactory kf = KeyFactory.getInstance(""EC"");
    PrivateKey k1 = kf.generatePrivate(new PKCS8EncodedKeySpec(privatekey_enc));
    ECParameterSpec p2 = ((ECPrivateKey) k1).getParams();
    System.out.println (""again p=(dec)"" + ((ECFieldFp) p2.getCurve().getField()).getP() );

which produces output:
p=(dec)115792089237316195423570985008687907853269984665640564039457584007908834671663
Gx=(hex)79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798
Gy=(hex)483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8
again p=(dec)115792089237316195423570985008687907853269984665640564039457584007908834671663

Note those coordinates for the basepoint G match your expectation. I displayed a mix of decimal and hex just to show the possibilities; this does not affect the actual numbers in the computer.
ADDED in response to comments:
The variables p and p2 are ECParameterSpec objects which contain the parameters of an EC curve (underlying field, curve coefficients, basepoint aka generator, order and cofactor; and internally 'name' although the API doesn't expose it). The values I print labelled 'p' are the result of calling getP which returns one item from the curve parameters, namely the modulus of the underlying prime field, and thus the value you need to use in the calculations shown in the linked post where it does mod(p) and modInverse(p) and modPow(,p). Since this p (or P) is a parameter of the curve it is the same for all keys on that curve; note the two values I print are the same even though they are from different keys. There are actually two kinds of elliptic curves standardized for cryptography: curves over a prime field, denoted Fp, and curves over an extension field of characteristic two, denoted F2m. secp256k1 is the first kind, that's why the cast to ECFieldFp before calling getP(). 
Yes my fixed prefix contains the headers and fields identifying a privatekey (PKCS8) encoding as being for EC and secp256k1 and that prefix is the same for all EC secp256k1 privatekeys. The p values are as described above, and not privatekeys or publickeys. Yes if you had the public point you could combine it with the ECParameterSpec into an ECPublicKeySpec and convert it and use it -- or you could append the point encoding to a similar but different fixed prefix to get an X509EncodedKeySpec which is the encoding Java uses for publickeys and convert that without needing the ECParameterSpec in advance -- but your whole problem, as I understand it, is that you don't have the public point yet and want to derive it, which requires the point multiplication calculation shown in the linked posts. 
","2867","<java><public-key><elliptic-curve>","2","1","1","2019-10-10 11:04:45","48841220","1","3","8752062","","2019-10-10 11:04:45","2018-02-16 17:41:16",""
"7073319","encrypting an email using an EC X509 certificate","I'm trying to use BouncyCastle's SMIME package to create an encrypted message using ECDSA X509 certificates.  According to BouncyCastle's release notes, this has been supported since 1.32 (I'm using 1.46), but I keep getting an exception stating that no cipher can be found for the ECDSA OID.

org.bouncycastle.cms.CMSException: exception wrapping content key:
  cannot create cipher: Cannot find any provider supporting
  1.2.840.10045.2.1

Here is a snippet from one of the test certificates I am using
  Version: V3
  Subject: EMAILADDRESS=bob@example.com
  Signature Algorithm: SHA256withECDSA, OID = 1.2.840.10045.4.3.2

  Key:  EC Public Key

The code I am using to create the encrypted message looks like this:
// allow the use of the BC JCE
Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());

SMIMEEnvelopedGenerator gen = new SMIMEEnvelopedGenerator();
JceKeyTransRecipientInfoGenerator rig = new JceKeyTransRecipientInfoGenerator(cert);
gen.addRecipientInfoGenerator(rig);

MimeBodyPart msg = new MimeBodyPart();
msg.setText(message);

MimeBodyPart mp = gen.generate(
    msg,
    new JceCMSContentEncryptorBuilder(
        CMSAlgorithm.AES128_CBC).setProvider(""BC"").build());

Properties props = System.getProperties();
Session session = Session.getDefaultInstance(props, null);

// TODO: This is incorrect.  Perhaps AKA is better?
String to = cert.getSubjectDN().getName();

Address fromUser = new InternetAddress(from);
Address toUser = new InternetAddress(to);

MimeMessage body = new MimeMessage(session);
body.setFrom(fromUser);
body.setRecipient(Message.RecipientType.TO, toUser);
body.setSubject(""example encrypted message"");
body.setContent(mp.getContent(), mp.getContentType());
body.saveChanges();

body.writeTo(new FileOutputStream(filename));

I'm sure I'm doing something obviously wrong, but I'm not seeing it right now.  Any ideas?
","ECDSA is a signature algorithm, not an encryption or key exchange algorithm. In order to encrypt a message, you need the recipient's RSA or Diffie-Hellman key (possibly ECDH).
","2862","<java><bouncycastle><elliptic-curve><smime>","2","1","2","2011-08-19 06:29:21","7117759","0","","20394","","2011-08-16 04:45:09","2011-08-16 03:23:56",""
"7073319","encrypting an email using an EC X509 certificate","I'm trying to use BouncyCastle's SMIME package to create an encrypted message using ECDSA X509 certificates.  According to BouncyCastle's release notes, this has been supported since 1.32 (I'm using 1.46), but I keep getting an exception stating that no cipher can be found for the ECDSA OID.

org.bouncycastle.cms.CMSException: exception wrapping content key:
  cannot create cipher: Cannot find any provider supporting
  1.2.840.10045.2.1

Here is a snippet from one of the test certificates I am using
  Version: V3
  Subject: EMAILADDRESS=bob@example.com
  Signature Algorithm: SHA256withECDSA, OID = 1.2.840.10045.4.3.2

  Key:  EC Public Key

The code I am using to create the encrypted message looks like this:
// allow the use of the BC JCE
Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());

SMIMEEnvelopedGenerator gen = new SMIMEEnvelopedGenerator();
JceKeyTransRecipientInfoGenerator rig = new JceKeyTransRecipientInfoGenerator(cert);
gen.addRecipientInfoGenerator(rig);

MimeBodyPart msg = new MimeBodyPart();
msg.setText(message);

MimeBodyPart mp = gen.generate(
    msg,
    new JceCMSContentEncryptorBuilder(
        CMSAlgorithm.AES128_CBC).setProvider(""BC"").build());

Properties props = System.getProperties();
Session session = Session.getDefaultInstance(props, null);

// TODO: This is incorrect.  Perhaps AKA is better?
String to = cert.getSubjectDN().getName();

Address fromUser = new InternetAddress(from);
Address toUser = new InternetAddress(to);

MimeMessage body = new MimeMessage(session);
body.setFrom(fromUser);
body.setRecipient(Message.RecipientType.TO, toUser);
body.setSubject(""example encrypted message"");
body.setContent(mp.getContent(), mp.getContentType());
body.saveChanges();

body.writeTo(new FileOutputStream(filename));

I'm sure I'm doing something obviously wrong, but I'm not seeing it right now.  Any ideas?
","As Thomas Pornin suggested (above), ECDH needed to be used to make this work.  So instead of using a JceKeyTransRecipientInfoGenerator, it was necessary to use a JceKeyAgreeRecipientInfoGenerator.
SMIMEEnvelopedGenerator gen = new SMIMEEnvelopedGenerator();
JceKeyAgreeRecipientInfoGenerator rig = new JceKeyAgreeRecipientInfoGenerator(CMSAlgorithm.ECDH_SHA1KDF, senderPrivateKey, senderPublicKey, CMSAlgorithm.AES128_WRAP);
rig.setProvider(""BC"");
gen.addRecipientInfoGenerator(rig);

MimeBodyPart msg = new MimeBodyPart();
msg.setText(""This is a secret message"");

MimeBodyPart mp = gen.generate(msg, new JceCMSContentEncryptorBuilder(CMSAlgorithm.AES128_CBC).setProvider(""BC"").build());

Properties props = System.getProperties();
Session session = Session.getDefaultInstance(props, null);

String to = ""bob@example.com"";

Address fromUser = new InternetAddress(""alice@example.com"");
Address toUser = new InternetAddress(to);

MimeMessage body = new MimeMessage(session);
body.setFrom(fromUser);
body.setRecipient(Message.RecipientType.TO, toUser);
body.setSubject(""example encrypted message"");
body.setContent(mp.getContent(), mp.getContentType());
body.saveChanges();

body.writeTo(new FileOutputStream(""/tmp/encrypted.msg""));

","2862","<java><bouncycastle><elliptic-curve><smime>","2","2","2","2011-08-19 06:29:21","7117759","0","","20394","","2011-08-16 04:45:09","2011-08-16 03:23:56",""
"40115286","Generating valid ECDSA secp256r1/prime256v1 key pair on Android, using Spongy Castle (Bouncy Castle distribution)","I am trying to generate ECDSA key pair using SpongyCastle in Android.
This is the code:
static {
    Security.insertProviderAt(new org.spongycastle.jce.provider.BouncyCastleProvider(), 1);
}

public static KeyPair generate() {
        ECParameterSpec ecSpec = ECNamedCurveTable.getParameterSpec(""prime256v1"");
        KeyPairGenerator generator = KeyPairGenerator.getInstance(""ECDSA"", ""SC"");
        generator.initialize(ecSpec, new SecureRandom());
        KeyPair keyPair = g.generateKeyPair();
        Log.i(TAG, ""EC Pub Key generated: "" + utils.bytesToHex(keyPair.getPublic().getEncoded()));
        Log.i(TAG, ""EC Private Key generated: "" + utils.bytesToHex(keyPair.getPrivate().getEncoded()));            
       return generator.generateKeyPair();
}

Something is wrong since I always get something like that example of 
Public Key:

3059301306072A8648CE3D020106082A8648CE3D03010703420004483ABA9F322240010ECF00E818C041A60FE71A2BD64C64CD5A60519985F110AEDE6308027D2730303F5E2478F083C7F5BB683DCAC22BFEB62F3A48BD01009F40

and Private Key: 

308193020100301306072A8648CE3D020106082A8648CE3D030107047930770201010420219AB4B3701630973A4B2917D53F69A4BE6DAD61F48016BFEF147B2999575CB2A00A06082A8648CE3D030107A14403420004483ABA9F322240010ECF00E818C041A60FE71A2BD64C64CD5A60519985F110AEDE6308027D2730303F5E2478F083C7F5BB683DCAC22BFEB62F3A48BD01009F40

The site ECDSA sample give Invalid ECDSA signature, and them seems really very different from that smaller Private Key and always starting with ""04"" Public Key generated in the same site.
Also, my backend verification gives me the error ""Invalid point encoding 0x30""
The backend Java method check is:
public ECPublicKey getPublicKeyFromHex(String publicKeyHex)
        throws NoSuchAlgorithmException, DecoderException, ApplicationGenericException {
    byte[] rawPublicKey = Hex.decodeHex(publicKeyHex.toCharArray());
    ECPublicKey ecPublicKey = null;
    KeyFactory kf = null;

    ECNamedCurveParameterSpec ecNamedCurveParameterSpec = ECNamedCurveTable.getParameterSpec(""prime256v1"");
    ECCurve curve = ecNamedCurveParameterSpec.getCurve();
    EllipticCurve ellipticCurve = EC5Util.convertCurve(curve, ecNamedCurveParameterSpec.getSeed());
    java.security.spec.ECPoint ecPoint = ECPointUtil.decodePoint(ellipticCurve, rawPublicKey);
    java.security.spec.ECParameterSpec ecParameterSpec = EC5Util.convertSpec(ellipticCurve,
            ecNamedCurveParameterSpec);
    java.security.spec.ECPublicKeySpec publicKeySpec = new java.security.spec.ECPublicKeySpec(ecPoint,
            ecParameterSpec);

    kf = KeyFactory.getInstance(""ECDSA"", new BouncyCastleProvider());

    try {
        ecPublicKey = (ECPublicKey) kf.generatePublic(publicKeySpec);
    } catch (Exception e) {
        throw new ApplicationGenericException(e.getMessage(), e.getCause());
    }

    return ecPublicKey;
}

","Convert generated public key to decoded bytes array or hex string:  
public String getPublicKeyAsHex(PublicKey publicKey){

    ECPublicKey ecPublicKey = (ECPublicKey)publicKey;
    ECPoint ecPoint = ecPublicKey.getW();

    byte[] publicKeyBytes = new byte[PUBLIC_KEY_LENGTH];
    writeToStream(publicKeyBytes, 0, ecPoint.getAffineX(), PRIVATE_KEY_LENGTH);
    writeToStream(publicKeyBytes, PRIVATE_KEY_LENGTH, ecPoint.getAffineY(), PRIVATE_KEY_LENGTH);

    String hex = Hex.toHexString(publicKeyBytes);

    logger.debug(""Public key bytes: "" + Arrays.toString(publicKeyBytes));
    logger.debug(""Public key hex: "" + hex);

    return hex;
}

private void writeToStream(byte[] stream, int start, BigInteger value, int size) {
    byte[] data = value.toByteArray();
    int length = Math.min(size, data.length);
    int writeStart = start + size - length;
    int readStart = data.length - length;
    System.arraycopy(data, readStart, stream, writeStart, length);
}

Convert decoded bytes array back to PublicKey:
KeyFactory factory = KeyFactory.getInstance(ALGORITHM, ALGORITHM_PROVIDER);

ECNamedCurveParameterSpec spec = ECNamedCurveTable.getParameterSpec(CURVE);

ECNamedCurveSpec params = new ECNamedCurveSpec(CURVE, spec.getCurve(), spec.getG(), spec.getN());

BigInteger xCoordinate = new BigInteger(1, Arrays.copyOfRange(decodedPublicKey, 0, PRIVATE_KEY_LENGTH));
BigInteger yCoordinate = new BigInteger(1, Arrays.copyOfRange(decodedPublicKey, PRIVATE_KEY_LENGTH, PUBLIC_KEY_LENGTH));
java.security.spec.ECPoint w = new java.security.spec.ECPoint(xCoordinate, yCoordinate);

PublicKey encodedPublicKey = factory.generatePublic(new java.security.spec.ECPublicKeySpec(w, params));

","2792","<android><bouncycastle><elliptic-curve><ecdsa><spongycastle>","1","0","1","2016-10-24 09:00:26","","1","0","5962766","","2016-10-24 09:00:26","2016-10-18 18:17:18",""
"19906311","OpenSSL gost engine code example","Can anybody help me with example of usage of OpenSSL gost engine. I have to sign data using GOST R 34.10-2001 signature algorithm but can't find any working examples or documention.
BTW if I'm not going to use that OpenSSL command line utility is there any sense in modifying that openssl.cnf file? If not how do I load engine in code? And what compile flags  are needed to build OpenSSL with static gost engine?
Thanks in advance.
----Solution----
Finally the following verifies successfully for me:
ENGINE * LoadEngine()
{
    ENGINE *e = NULL;
    ENGINE_load_gost();
    e = ENGINE_by_id(""gost"");
    if(!e)
    {
        printf(""Filed to get structural reference to engine\n"");
    }
    if(!ENGINE_init(e))
    {
        ENGINE_free(e);
        printf(""Failed to get functional reference to engine\n"");
    }
    ENGINE_set_default(e, ENGINE_METHOD_ALL);
    OpenSSL_add_all_algorithms();
    return e;
}

EVP_PKEY * GenerateKeys(ENGINE *e)
{
    EVP_PKEY *pkey = EVP_PKEY_new();
    EVP_PKEY_CTX *ctx = EVP_PKEY_CTX_new_id(NID_id_GostR3410_2001, e);

    EVP_PKEY_paramgen_init(ctx);

    EVP_PKEY_CTX_ctrl(ctx,
        NID_id_GostR3410_2001,
        EVP_PKEY_OP_PARAMGEN,
        EVP_PKEY_CTRL_GOST_PARAMSET,
        NID_id_GostR3410_2001_CryptoPro_A_ParamSet,
        NULL);

    EVP_PKEY_keygen_init(ctx);

    EVP_PKEY_keygen(ctx, &pkey);

    EVP_PKEY_CTX_free(ctx);

    return pkey;
}

int main()
{
    ENGINE *e = NULL;
    EVP_PKEY_CTX *ctx = NULL;
    EVP_PKEY *pkey = NULL;
    unsigned char msg[] = ""this is a test message"";
    Binary hash(32);
    SHA256_Calc(msg, sizeof(msg), &hash[0]);
    size_t siglen = 0;
    int status = 0;
    e = LoadEngine();
    pkey = GenerateKeys(e);
    ctx = EVP_PKEY_CTX_new(pkey, e);
    if(ctx == NULL)
    {
        printf(""Failed to create context\n"");
        return -1;
    }

    EVP_PKEY_sign_init(ctx);

    status = EVP_PKEY_sign_init(ctx);
    if(status != 1)
    {
        printf(""Failed to init signing context\n"");
        return -1;
    }
    status = EVP_PKEY_sign(ctx, NULL, &siglen, &hash[0], hash.size());
    if(status != 1)
    {
        printf(""Failed to get signature length\n"");
        return -1;
    }   
    Binary signature(siglen);
    status = EVP_PKEY_sign(ctx, &signature[0], &siglen, &hash[0], hash.size());
    if(status != 1)
    {
        printf(""Failed to sign a message\n"");
        return -1;
    }
    EVP_PKEY_verify_init(ctx);
    bool result = EVP_PKEY_verify(ctx, &signature[0], siglen, &hash[0], hash.size());
    printf(""%s\n"", result ? ""SUCCESS"" : ""FAILURE"");
    ENGINE_cleanup();
}

","","2654","<c><openssl><elliptic-curve><gost3410>","2","","0","2014-03-07 20:43:59","","0","2","642653","","2014-03-07 20:43:59","2013-11-11 12:24:56",""
"22293864","Ruby/openssl: convert Elliptic Curve point octet string into OpenSSL::PKey::EC::Point","I am trying to write Ruby code to check the Elliptic Curve Digital Signature Algorithm (ECDSA) signature on a particular message that I found here.
The problem is that I don't know how to convert the octet string for the public key into an OpenSSL::PKey::EC::Point object.  If I were writing this in C, I would just pass the octet string to OpenSSL's o2i_ECPublicKey, which does something close to what I would want and in fact is used by the reference implementation.  However, I searched the source code of Ruby (MRI) and it contains no calls to o2i_ECPublicKey so I don't know how I would use that function from Ruby without writing a C extension.
Here is the octet string, in hex.  It is just a 0x04 byte followed by two 32-byte integers that represent the x and y coordinates of the point on the elliptic curve:
04fc9702847840aaf195de8442ebecedf5b095cdbb9bc716bda9110971b28a49e0ead8564ff0db22209e0374782c093bb899692d524e9d6a6956e7c5ecbcd68284

So does anyone know how to convert that string into an in OpenSSL::PKey::EC::Point in Ruby?  Once I get the point object, I will use it in the following code which I believe will verify the signature:
key = OpenSSL::PKey::EC.new('secp256k1')
key.public_key = point
result = key.dsa_verify_asn1(digest, signature)

UPDATE:
Thanks to Jay-Ar Polidario I got it to work.  Here is the full code I have that verifies the signature using OpenSSL.  I also wrote a gem called ecdsa and I included code showing how to use my gem to do the same thing.
# coding: ASCII-8BIT

digest =
  ""\xbf\x91\xfb\x0b\x4f\x63\x33\x77\x4a\x02\x2b\xd3\x07\x8e\xd6\xcc"" \
  ""\xd1\x76\xee\x31\xed\x4f\xb3\xf9\xaf\xce\xb7\x2a\x37\xe7\x87\x86""

signature_der_string =
  ""\x30\x45"" \
  ""\x02\x21\x00"" \
  ""\x83\x89\xdf\x45\xf0\x70\x3f\x39\xec\x8c\x1c\xc4\x2c\x13\x81\x0f"" \
  ""\xfc\xae\x14\x99\x5b\xb6\x48\x34\x02\x19\xe3\x53\xb6\x3b\x53\xeb"" \
  ""\x02\x20"" \
  ""\x09\xec\x65\xe1\xc1\xaa\xee\xc1\xfd\x33\x4c\x6b\x68\x4b\xde\x2b"" \
  ""\x3f\x57\x30\x60\xd5\xb7\x0c\x3a\x46\x72\x33\x26\xe4\xe8\xa4\xf1""

public_key_octet_string =
  ""\x04"" \
  ""\xfc\x97\x02\x84\x78\x40\xaa\xf1\x95\xde\x84\x42\xeb\xec\xed\xf5"" \
  ""\xb0\x95\xcd\xbb\x9b\xc7\x16\xbd\xa9\x11\x09\x71\xb2\x8a\x49\xe0"" \
  ""\xea\xd8\x56\x4f\xf0\xdb\x22\x20\x9e\x03\x74\x78\x2c\x09\x3b\xb8"" \
  ""\x99\x69\x2d\x52\x4e\x9d\x6a\x69\x56\xe7\xc5\xec\xbc\xd6\x82\x84""

# Verifying with openssl.
require 'openssl'
ec = OpenSSL::PKey::EC.new('secp256k1')
key_bn = OpenSSL::BN.new(public_key_octet_string, 2)  # 2 means binary
ec.public_key = OpenSSL::PKey::EC::Point.new(ec.group, key_bn)
result = ec.dsa_verify_asn1(digest, signature_der_string)
puts result  # => true

# Verifying with the new ECDSA gem I wrote, version 0.1.5
require 'ecdsa'
group = ECDSA::Group::Secp256k1
point = ECDSA::Format::PointOctetString.decode(public_key_octet_string, group)
signature = ECDSA::Format::SignatureDerString.decode(signature_der_string)
result = ECDSA.valid_signature?(point, digest, signature)
puts result  # => true

I think it's weird that OpenSSL makes you represent the public key temporarily as a single BN (big number), because it is actually two big numbers.  My gem can directly convert octet strings (as defined in the SEC2 standard) into ECDSA::Point objects.
","OpenSSL allows you to create a point with a group and a bignum, so I tried this:
require 'openssl'
include OpenSSL
group = PKey::EC::Group.new('secp256k1')
bignum = BN.new('04fc9702847840...')
point = PKey::EC::Point.new(group, bignum)

But it raises OpenSSL::PKey::EC::Point::Error: invalid encoding.  I'm not quite sure how to troubleshoot it from here, but hopefully this helps you out a little bit.
","2618","<ruby><openssl><elliptic-curve><ecdsa>","9","2","2","2015-08-10 08:43:37","22476010","0","4","28128","","2014-03-21 06:24:12","2014-03-10 06:56:42",""
"22293864","Ruby/openssl: convert Elliptic Curve point octet string into OpenSSL::PKey::EC::Point","I am trying to write Ruby code to check the Elliptic Curve Digital Signature Algorithm (ECDSA) signature on a particular message that I found here.
The problem is that I don't know how to convert the octet string for the public key into an OpenSSL::PKey::EC::Point object.  If I were writing this in C, I would just pass the octet string to OpenSSL's o2i_ECPublicKey, which does something close to what I would want and in fact is used by the reference implementation.  However, I searched the source code of Ruby (MRI) and it contains no calls to o2i_ECPublicKey so I don't know how I would use that function from Ruby without writing a C extension.
Here is the octet string, in hex.  It is just a 0x04 byte followed by two 32-byte integers that represent the x and y coordinates of the point on the elliptic curve:
04fc9702847840aaf195de8442ebecedf5b095cdbb9bc716bda9110971b28a49e0ead8564ff0db22209e0374782c093bb899692d524e9d6a6956e7c5ecbcd68284

So does anyone know how to convert that string into an in OpenSSL::PKey::EC::Point in Ruby?  Once I get the point object, I will use it in the following code which I believe will verify the signature:
key = OpenSSL::PKey::EC.new('secp256k1')
key.public_key = point
result = key.dsa_verify_asn1(digest, signature)

UPDATE:
Thanks to Jay-Ar Polidario I got it to work.  Here is the full code I have that verifies the signature using OpenSSL.  I also wrote a gem called ecdsa and I included code showing how to use my gem to do the same thing.
# coding: ASCII-8BIT

digest =
  ""\xbf\x91\xfb\x0b\x4f\x63\x33\x77\x4a\x02\x2b\xd3\x07\x8e\xd6\xcc"" \
  ""\xd1\x76\xee\x31\xed\x4f\xb3\xf9\xaf\xce\xb7\x2a\x37\xe7\x87\x86""

signature_der_string =
  ""\x30\x45"" \
  ""\x02\x21\x00"" \
  ""\x83\x89\xdf\x45\xf0\x70\x3f\x39\xec\x8c\x1c\xc4\x2c\x13\x81\x0f"" \
  ""\xfc\xae\x14\x99\x5b\xb6\x48\x34\x02\x19\xe3\x53\xb6\x3b\x53\xeb"" \
  ""\x02\x20"" \
  ""\x09\xec\x65\xe1\xc1\xaa\xee\xc1\xfd\x33\x4c\x6b\x68\x4b\xde\x2b"" \
  ""\x3f\x57\x30\x60\xd5\xb7\x0c\x3a\x46\x72\x33\x26\xe4\xe8\xa4\xf1""

public_key_octet_string =
  ""\x04"" \
  ""\xfc\x97\x02\x84\x78\x40\xaa\xf1\x95\xde\x84\x42\xeb\xec\xed\xf5"" \
  ""\xb0\x95\xcd\xbb\x9b\xc7\x16\xbd\xa9\x11\x09\x71\xb2\x8a\x49\xe0"" \
  ""\xea\xd8\x56\x4f\xf0\xdb\x22\x20\x9e\x03\x74\x78\x2c\x09\x3b\xb8"" \
  ""\x99\x69\x2d\x52\x4e\x9d\x6a\x69\x56\xe7\xc5\xec\xbc\xd6\x82\x84""

# Verifying with openssl.
require 'openssl'
ec = OpenSSL::PKey::EC.new('secp256k1')
key_bn = OpenSSL::BN.new(public_key_octet_string, 2)  # 2 means binary
ec.public_key = OpenSSL::PKey::EC::Point.new(ec.group, key_bn)
result = ec.dsa_verify_asn1(digest, signature_der_string)
puts result  # => true

# Verifying with the new ECDSA gem I wrote, version 0.1.5
require 'ecdsa'
group = ECDSA::Group::Secp256k1
point = ECDSA::Format::PointOctetString.decode(public_key_octet_string, group)
signature = ECDSA::Format::SignatureDerString.decode(signature_der_string)
result = ECDSA.valid_signature?(point, digest, signature)
puts result  # => true

I think it's weird that OpenSSL makes you represent the public key temporarily as a single BN (big number), because it is actually two big numbers.  My gem can directly convert octet strings (as defined in the SEC2 standard) into ECDSA::Point objects.
","Try the following (Tested without errors):
key =  '04fc9702847840aaf195de8442ebecedf5b095cdbb9bc716bda9110971b28a49e0ead8564ff0db22209e0374782c093bb899692d524e9d6a6956e7c5ecbcd68284'
key_bn = OpenSSL::BN.new(key, 16) #Input: 16=Hexa, Output: BigNumber
group = OpenSSL::PKey::EC::Group.new('secp256k1')

point = OpenSSL::PKey::EC::Point.new(group, key_bn)
#--> <OpenSSL::PKey::EC::Point:0x5288178>

","2618","<ruby><openssl><elliptic-curve><ecdsa>","9","7","2","2015-08-10 08:43:37","22476010","0","4","28128","","2014-03-21 06:24:12","2014-03-10 06:56:42",""
"13852997","Access PFX File ECC PrivateKey For Symmetric Key Generation in Java","I'm writing a program (in Java using the Bouncy Castle API) that encrypts files with AES-256/GCM with a key generated by ONE EC key pair. I have the symmetric encryption portion working perfectly but now the key generation is proving to be difficult. When trying to use the ECPublicKey object in the javax.crypto.KeyAgreement.init() method, it returns this error:
Exception in thread ""main"" java.security.InvalidKeyException: ECDH key agreement requires ECPrivateKey for initialisation
    at org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi.initFromKey(Unknown Source)
    at org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi.engineInit(Unknown Source)
    at javax.crypto.KeyAgreement.init(KeyAgreement.java:461)
    at javax.crypto.KeyAgreement.init(KeyAgreement.java:435)
    at Encrpytion.generateKey(Encrpytion.java:188)  ---aKA.init(key);---
    at Encrpytion.main(Encrpytion.java:40) ---byte[] key = generateKey();---

The source code for the method is as follows:
public static byte[] generateKey() {
    KeyStore ks = KeyStore.getInstance(""PKCS12"");
    FileInputStream fis = new FileInputStream(""file.pfx"");
    Scanner input = new Scanner(System.in);
    char[] chars = {};
    System.out.println(""Enter the password for your .pfx: "");
    chars = input.nextLine().toCharArray();
    input.close();
    Enumeration aliasEnum = null;
    ks.load(fis, chars);
    aliasEnum = ks.aliases();
    Key key = null;
    Certificate cert = null;
    while (aliasEnum.hasMoreElements()){
        String param = (String)aliasEnum.nextElement();
        if (ks.isKeyEntry(param))  {
            String keyName = param;
            key = ks.getKey(keyName,chars);
        }
        cert = ks.getCertificateChain(param)[0];
    }
    KeyPair kp = new KeyPair(cert.getPublicKey(),(ECPrivateKey) key);
    KeyAgreement aKA = null;
    aKA = KeyAgreement.getInstance(""ECDH"", ""BC"");
    aKA.init(key);
    aKA.doPhase(kp.getPublic(), true);
    return aKA.generateSecret();
}

How can I access the PrivateKey of the certificate?
**UPDATE: **updated sourcecode
** EDIT **
The following commands and instructions can be used to create some test files to demonstrate the problem.
#Make root key
openssl ecparam -name secp521r1 -genkey -out root.key
#password protect key
openssl ec -in root.key -out root.key -aes256
####change req x509_attributes to rootCA
#selfsign root
openssl req -new -x509 -key root.key -out root.crt -days 1825 -config openssl.cfg
###comment out req x509_attributes
#make new key for clientCA
openssl ecparam -name secp521r1 -genkey -out client.key
#make clientCA csr
openssl req -new -sha384 -key client.key -out client.csr -config openssl.cfg
#sign clientCA
openssl ca -out client.crt -name root -in client.csr -config openssl.cfg
#make client key
openssl ecparam -name secp521r1 -genkey -out client.key
#make server csr
openssl req -new -sha384 -key client.key -out client.csr -config openssl.cfg
#sign server cert
openssl ca -out client.crt -name client -in client.csr -config openssl.cfg
#MAKE CHAIN - copy base64 encoded root and intermidiate client ca into same ""chain.cer"" #export user cert 
openssl pkcs12 -export -chain -CAfile chain.crt -in client.crt -inkey client.key -out client.pfx -aes256

","For any given alias only one of key and cert will be non-null. In this case evidently cert was non-null and key was null. If there is an EC private key in your keystore you will need to work a little harder to find it. You can determine what kind of entry is at the alias by testing with isCertificateEntry and isKeyEntry.
EDIT 1 
The error message is unfortunately confusing because it is actually coming from the bouncycastle library. The class referred to in ECDH key agreement requires ECPrivateKey is not java.security.interfaces.ECPrivateKey but rather org.bouncycastle.jce.interfaces.ECPrivateKey
The following short adaptation of the OPs sample code illustrates one way to overcome this.  
import org.bouncycastle.jce.provider.JCEECPrivateKey;
import org.bouncycastle.jce.provider.JCEECPublicKey;
// ...
// . <original example code goes here>
// .
JCEECPrivateKey ecPrivKey = new JCEECPrivateKey((ECPrivateKey) key);
JCEECPublicKey ecPubKey = new JCEECPublicKey((ECPublicKey) cert.getPublicKey());
KeyPair kp = new KeyPair(ecPubKey, ecPrivKey);
KeyAgreement aKA = null;
aKA = KeyAgreement.getInstance(""ECDH"", ""BC"");
aKA.init(ecPrivKey);
aKA.doPhase(kp.getPublic(), true);
return aKA.generateSecret();
// ...

","2504","<bouncycastle><private-key><pkcs#12><elliptic-curve>","5","3","1","2014-10-26 20:14:34","13871178","0","","","user562566","2014-10-26 20:14:34","2012-12-13 04:32:32",""
"19911025","SVG path with rounded corners as arcs of a circle","I need to create SVG paths with rounded corners to export them to DXF for cutting. My problem is that the corners should be arcs of a circle, not some bezier curve.
Its relatively easy with right angles using the arc command because the radius is also the distance from the corner to where the arc begins. With other angles it is way more complicated.
Is there a formula to calculate the start and end point of the arc given a corner and a radius?

The upper right corner is easy but the lower left is very tricky because I have to find out where the line has to end and the arc begins.
I've found calculationg with a svg eliptical arc, which links a formula to convert end-point to center parametrization. Which doesn't help because I also don't know where the center of the circle has to be.
How to calculate the SVG Path for an arc (of a circle) just calculates the arc, not an arc between two lines replacing a sharp corner.
The solutions in Rounded corners on triangle in SVG work only when some sides are parallel to the coordinate system or change the radius.
Applying rounded corners to paths/polygons tries to use some tricks with linejoin or several cubic curves, nothing I want.
Even Inkscape (which I used to draw the image above) uses 5 cubic curves instead of an arc even when I used a circle to create this shape.
If you have some hints how I can manage this I would be very grateful.
","The geometry of a chamfered corner looks like this:

Angle ABC is equal to θ (the outside angle of the chamfered corner). This is bisected by BD, so angle DBC is equal to θ/2. That means the offset distance d from the corner to points C and A is equal to r × tan(θ/2).
For a right angle, θ=90° and tan(θ/2)=1, so d is equal to r.
As Robert Longson said, you would be lucky to find an SVG application that exports chamfered corners using circular arc segments. However, with a bit of effort, it should be possible to detect and convert them programmatically.
","2476","<svg><vector-graphics><curve><elliptic-curve><geometric-arc>","3","7","1","2013-11-11 20:50:24","19915651","3","2","-1","","2017-05-23 11:43:40","2013-11-11 16:19:27",""
"19756043","Python -- matplotlib elliptic curves","I'm teaching myself about matplotlib and Python and I'm having a difficult time plotting an equation for an elliptic curve.  I have the equation down but I'm not doing the y^2
This is as much trouble as I was able to get myself into so far:
from mpl_toolkits.axes_grid.axislines import SubplotZero
import matplotlib.pyplot as plt
import numpy as np
from pylab import *


def plotGraph():
    fig = plt.figure(1)
    ax = SubplotZero(fig, 111)
    fig.add_subplot(ax)

    for direction in [""xzero"", ""yzero""]:
        ax.axis[direction].set_axisline_style(""-|>"")
        ax.axis[direction].set_visible(True)

    a = 5; b = 25
    x = np.arange(-50.0, 50.0, 1.0)
    y = pow(x,3) + a*x + b

    xmin = -50; xmax = 50; ymin = -50; ymax = 50
    v = [xmin, xmax, ymin, ymax]
    ax.axis(v)

    ax.plot(x, pow(y,2))

    #grid()
    #ax.grid(color='r', linestyle='-', linewidth=2)

    show()


def main():
    plotGraph()


if __name__ == '__main__':
    main()

The axis() is there because I was also trying to get a clearer-looking chart with grid lines, and I thought that grid() would also take care of that but apparently not. I was also going to try to make it interactive where you click on the points you want and it calculates, but looking over the docs there seems like a lot of interaction mouse options but I don't see mouse interaction that creates some event by clicking on a point on the chart (after the 3rd time reading it over I'm still missing it). 
I'm just going from the pyplot summary on matplotlib but I'm not seeing what I'm doing wrong here.  The plot of the elliptic curve is way off, not even close.  
This is probably a beginner mistake so a junior programmer who takes a second to read this will probably see very quickly why I'm not getting the curve I want.
","Yes, you're right, you're not doing y^2. To plot elliptic curve in matplotlib I used this code (tested in Python 3):
import numpy as np
import matplotlib.pyplot as plt

def main():
    a = -1
    b = 1

    y, x = np.ogrid[-5:5:100j, -5:5:100j]
    plt.contour(x.ravel(), y.ravel(), pow(y, 2) - pow(x, 3) - x * a - b, [0])
    plt.grid()
    plt.show()

if __name__ == '__main__':
    main()

I've got this plot:

Is this what you need?
","2434","<python><python-2.7><matplotlib><elliptic-curve><finite-field>","10","21","1","2013-11-03 19:35:45","19757132","0","4","1564945","","2013-11-03 18:00:24","2013-11-03 17:54:56",""
"31435160","How to construct PrivateKey if you know the curve name & raw private key/point?","Requirement: For a given named-curve, send as little data as you can, so that receiver can construct EC PrivateKey.
I am currently using BouncyCastle/SpongyCastle on Android. This is what I have understood till now.
KeyPairGenerator keyGen = KeyPairGenerator.getInstance(""EC"");
ECGenParameterSpec ecGenParameterSpec = new ECGenParameterSpec(""secp112r2"");
keyGen.initialize(ecGenParameterSpec, new SecureRandom());
KeyPair keyPair = keyGen.generateKeyPair();
PrivateKey privateKey = keyPair.getPrivate();

// privateKey.getEncoded() -> gives DER encoded private key. I can construct PrivateKey from that easily
byte[] derEncodedPrivateKeyBytes = privateKey.getEncoded(); // byteArray length-> 80
KeyFactory kf = KeyFactory.getInstance(""EC"");
PrivateKey key = kf.generatePrivate(new PKCS8EncodedKeySpec(derEncodedPrivateKeyBytes));

Now, using Bouncy/Spongy castle, I get the actual point for the Private Key, without any other information which is present in derEncoding.
ECPrivateKeyParameters param = (ECPrivateKeyParameters) ECUtil.generatePrivateKeyParameter(privateKey);
int lenghtOfKey = param.getD().toByteArray().length; // length - 14

Question: How can I reconstruct PrivateKey object, just by using the point D (privateKeyParam.getD()) and curve name? Using curve name, I can get ECCurveParameters.
Edit: I am able to construct ECPrivateKeyParameters using private key point (praram.getD()) but still couldn't figure out how to can I generate PrivateKey from ECPrivateKeyParameters.
X9ECParameters ecCurve = ECNamedCurveTable.getByName(curveName);
ECDomainParameters ecDomainParam = new ECDomainParameters(ecCurve.getCurve(),
        ecCurve.getG(), ecCurve.getN(), ecCurve.getH(), ecCurve.getSeed());
ECPrivateKeyParameters generatedECPrivateKeyParams = new ECPrivateKeyParameters(param.getD(), ecDomainParam);

","I was able to figure out how to re-construct EC PrivateKey from BigInteger D & curve name.
 public static PrivateKey getPrivateKeyFromECBigIntAndCurve(BigInteger s, String curveName) {
    X9ECParameters ecCurve = ECNamedCurveTable.getByName(curveName);
    ECParameterSpec ecParameterSpec = new ECNamedCurveSpec(curveName, ecCurve.getCurve(), ecCurve.getG(), ecCurve.getN(), ecCurve.getH(), ecCurve.getSeed());
    ECPrivateKeySpec privateKeySpec = new ECPrivateKeySpec(s, ecParameterSpec);
    try {
        KeyFactory keyFactory = KeyFactory.getInstance(""EC"");
        return keyFactory.generatePrivate(privateKeySpec);
    } catch (NoSuchAlgorithmException | InvalidKeySpecException e) {
        e.printStackTrace();
        return null;
    }
}

","2410","<java><bouncycastle><elliptic-curve><spongycastle>","3","5","1","2015-07-16 00:03:17","31443277","0","2","3211778","","2015-07-15 19:01:34","2015-07-15 11:11:25",""
"5682137","Difference between Bouncy Castle ECDH and the .net4 native ECDiffieHellmanCNG","I've been able to generate a private key using the ECDiffieHellmanCNG in .net4 and I've also used the Bouncy Castle C# library to successfully generate private keys. I want to know why the .net 4 version generates a byte array of chars and the ECDHBasicAgreement from Bouncy Castle generates a type of BigInteger (manually implemented). I would like to be able to use these libraries interchangeably. Thanks!
","Eachy Diffie-Hellman implementation uses unique set of constants to derive the shared secret from the public+private key. So neither implementation may derive the exact same shared secret from the very same key pairs. You are better off testing it for yourself or asking it on the BouncyCastle mailing lists.
Note: ECDiffieHellmanCNG is only available on Windows Vista/Windows 7 and above. On the other hand, you can use BouncyCastle on .net 1.1 and above and older Windows versions (2000, XP etc.)
","2378","<c#><bouncycastle><elliptic-curve><diffie-hellman>","3","2","2","2012-02-02 07:12:15","5682706","0","","628273","","2011-04-17 11:14:31","2011-04-15 20:40:29",""
"5682137","Difference between Bouncy Castle ECDH and the .net4 native ECDiffieHellmanCNG","I've been able to generate a private key using the ECDiffieHellmanCNG in .net4 and I've also used the Bouncy Castle C# library to successfully generate private keys. I want to know why the .net 4 version generates a byte array of chars and the ECDHBasicAgreement from Bouncy Castle generates a type of BigInteger (manually implemented). I would like to be able to use these libraries interchangeably. Thanks!
","You're probably in the wrong area of the BouncyCastle class hierarchy for what you want to do.  (I stumbled around in the same place, for probably the same reasons.)  If you're looking to implement ECDH that must be interoperable, you're definitely in the wrong place.
Why is it structured so unintuitively?  Well, the reason is that the abstractions in BouncyCastle are where they focus their attention and provide their value.  Instead of gearing for people saying ""I'm going to use ECDH key-encrypting keys"" and wanting to deal with low-level crypto details, BC expects you to use manager-level abstractions like ""public key"", ""private key"", and ""certificate"", and fill in the security parameters like ""kind"" and ""bitstrength"" in the middle of it.
var _keypair = new ECKeyPairGenerator(""EC"").Init(
    new KeyGenerationParameters(_SecureRandomSingleton, 256)).GenerateKeyPair();
// For the love of all that's holy don't do this in production, encrypt your keys!
var pkcs8gen = new Pkcs8Generator(_keypair.Private);
Stream pkcs8stream = new MemoryStream();
using(System.IO.TextWriter pkcs8writer = new StreamWriter(pkcs8stream))
{
    var mywriter = new Org.BouncyCastle.OpenSsl.PemWriter(pkcs8writer);
    mywriter.WriteObject(pkcs8gen.Generate());
    mywriter.Writer.Flush();
}

BouncyCastle will quite happily waste time and electricity recalculating the public key every time you load this, unless you take care to save _keypair.Public in something like a self-signed X509Certificate.
var _cgen = new X509V3CertificateGenerator();
_cgen.Reset();
_cgen.SetNotBefore(DateTime.Now);
_cgen.SetNotAfter(new DateTime(2999, 12, 31, 23, 59, 59, DateTimeKind.Utc));
var DN = new X509Name(""CN=Self Signed Certificate"");
_cgen.SetIssuerDN(DN);
_cgen.SetSubjectDN(DN);
_cgen.SetPublicKey(_keypair.Public);
_cgen.SetSignatureAlgorithm(             // Can be anything ECDsaWith*
    Org.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.ECDsaWithSha256.ToString());
_cgen.SetSerialNumber(                   // Serial number collisions suck
     new Org.BouncyCastle.Math.BigInteger(
         8 * 8 - 1,                      // number of bits to generate
         _SecureRandomSingleton));       // source to generate from
var _cert = _cgen.Generate(_keypair.Private);
try
{
    _cert.Verify(_keypair.Public);
} catch (Org.BouncyCastle.Security.Certificates.CertificateException E)
{
    // error-handling code for Verify failure
    // Ridiculous here because we know that _keypair is correct, but good practice
    // to ensure that your keypair is correct and intact
}
Stream certStream = new MemoryStream();
TextWriter certWriter = new StreamWriter(certStream);
var pemWriter = new Org.BouncyCastle.OpenSsl.PemWriter(certWriter);
pemWriter.WriteObject(_cert);
pemWriter.Writer.Flush();

And here's how to load the keypair from the two structures.
AsymmetricKeyParameter privateKey;
AsymmetricKeyParameter publicKey;
AsymmetricKeyPair reconstitutedPair;
certStream.Position = 0;
pkcs8Stream.Position = 0;
using (TextReader pkcs8reader = new StreamReader(pkcs8stream))
{
    PemReader pemreader = new PemReader(pkcs8reader);
    var privateKey = pemreader.ReadObject() as ECPrivateKeyParameters;
    if (thisprivate == null)
        throw new GeneralSecurityException(""failed to read private key"");
    }
}
var certificate = new Org.BouncyCastle.X509.X509CertificateParser()
    .ReadCertificate(certStream);
var publicKey = certificate.GetPublicKey();
reconstitutedPair = new AsymmetricKeyPair(publicKey,privateKey);

Now, that all said, here's the answer your actual question.
.NET 4 provides a byte[] because it's calling OLE platform-native code which does all of the abstraction for you.  It's the most efficient representation for this purpose, because it doesn't parse what it gets back from CNG, performing the least amount of object boxing back into the CLR object space and relying on the programmer to deal with what's essentially an opaque blob.  
BouncyCastle uses its BigInteger class because it's how it implements bignum calculations with 64-bit longs.  It is the most efficient representation for this purpose, because the overhead of processing 8-bit byte by 8-bit byte is far more than 8 times the cost of processing 64-bit long by 64-bit long.  Either way, it requires iteratively calling BitConverter on a different section of the input byte[].  Those iterations and method calls add up, so BigInteger is the ""internal representation of a number"".
These are not even remotely comparable uses, so this is probably not what you want to do.
If you want to get a byte[] from BigInteger, use its ToByteArray() method.  If you want to transform a byte[] to a BigInteger, construct a new BigInteger object with the byte[] containing the bit string you want to calculate with.  new BigInteger(oldBigInteger.ToByteArray()) works as you'd expect (a new BigInteger object which has the same value as the old one).  Directly working with them is usually inappropriate, because EC public keys are made up of two numbers.  Also, ToByteArray() only dumps the value of the integer, it doesn't include any DER encoding information to identify it as an integer of whatever length.
(Also, in C#, 'byte' and 'char' are different things with different sizes.  'byte' is 8 bits long.  'char' is a Unicode code point, and those are potentially larger than 8 bits.  'char' (along with 'string', which is conceptually a sequence of chars) requires encoding/decoding before it'll fit into byte-sized pieces.)
","2378","<c#><bouncycastle><elliptic-curve><diffie-hellman>","3","3","2","2012-02-02 07:12:15","5682706","0","","628273","","2011-04-17 11:14:31","2011-04-15 20:40:29",""
"11974981","Can Elliptic Curve Cryptography be used as a block ciper?","I am trying to use asymmetric encryption to encrypt firmware. The bootloader will decrypt and update the flash. This is on a embedded device with 32 bit CPU executing at 60MHz.
I want to use ECC due to its varies advantages. I am new to encryption and my understanding os ECC as implemented in ECIES is to use ECC for the key generation and use AES for actual data encryption. Due to code and ram size, I cannot support multiple encryption algorithms. 
Is there a implementation of ECC that can be used just like AES. All I am looking for is to use a ""Private key"" to encrypt firmware and the bootloader uses ""Public Key"" to decrypt it.
Thanks.
","I'm not sure that you completely understand what ECIES consists of:
http://en.wikipedia.org/wiki/Integrated_Encryption_Scheme
That's quite a bit of work, and it requires a whole lot of primitives, including at least one symmetric primitive, it seems to me. That might as well be AES.
","2256","<encryption><embedded><elliptic-curve>","2","2","3","2012-09-28 10:09:52","","7","1","","","","2012-08-15 18:31:02",""
"11974981","Can Elliptic Curve Cryptography be used as a block ciper?","I am trying to use asymmetric encryption to encrypt firmware. The bootloader will decrypt and update the flash. This is on a embedded device with 32 bit CPU executing at 60MHz.
I want to use ECC due to its varies advantages. I am new to encryption and my understanding os ECC as implemented in ECIES is to use ECC for the key generation and use AES for actual data encryption. Due to code and ram size, I cannot support multiple encryption algorithms. 
Is there a implementation of ECC that can be used just like AES. All I am looking for is to use a ""Private key"" to encrypt firmware and the bootloader uses ""Public Key"" to decrypt it.
Thanks.
","Let's start from the last sentence of the question:

All I am looking for is to use a ""Private key"" to encrypt firmware and the bootloader uses ""Public Key"" to decrypt it.

There's some confusion in terminology here. Private keys are used to decrypt (or sign) and public keys are used to encrypt (or verify). If I understand correctly, what you want is for the bootloader to verify a signature on the firmware so that only a firmware that was properly signed by yourself will be accepted by the bootloader.
There are various asymmetric signature schemes which can be used for this purpose, including some which are based on eliptic curve cryptography. For example you could use the OpenSSL implementation of ECDSA (see http://www.openssl.org/docs/crypto/ecdsa.html).
I'm afraid there's not enough information in the question to properly choose the best signature scheme (and possibly an encryption scheme as well if there is a need to keep the firmware secret). In any case, good cryptography is not enough to make a system secure and other considerations such as secure implementation are no less important.
If this is is something that is important for you to protect and that you are worried that hackers may try to break, I would strongly advise procuring the services of a security professional. Using cryptography correctly is a very tricky business that requires a full understanding of the system - otherwise you may find yourself in a situation like this
","2256","<encryption><embedded><elliptic-curve>","2","2","3","2012-09-28 10:09:52","","7","1","","","","2012-08-15 18:31:02",""
"11974981","Can Elliptic Curve Cryptography be used as a block ciper?","I am trying to use asymmetric encryption to encrypt firmware. The bootloader will decrypt and update the flash. This is on a embedded device with 32 bit CPU executing at 60MHz.
I want to use ECC due to its varies advantages. I am new to encryption and my understanding os ECC as implemented in ECIES is to use ECC for the key generation and use AES for actual data encryption. Due to code and ram size, I cannot support multiple encryption algorithms. 
Is there a implementation of ECC that can be used just like AES. All I am looking for is to use a ""Private key"" to encrypt firmware and the bootloader uses ""Public Key"" to decrypt it.
Thanks.
","If you look for ""authentication"" you have to use asymmetric algorithm like EC, this usually done because if the user or process want to update the ""firmware"" he should identify him self to the bootloader  by his ""signature"" to check who request this update.
After that is done, the bootloader will load the symmetric key from a secure memory to decrypt what you want to do.
So, you have a symmetric key for encryption (AES), and asymmetric two keys for authentication (=Who are you?).
Note: there is no advantages of EC on 32 bit CPU executing at 60MHz for Encryption, unless your application need asymmetric for Encryption NOT authentication, this happen due to line between the user and bootloader is not secure.
Therefore, you could use bootloader's ""public key"" to encrypt firmware and the bootloader uses its ""private Key"" to decrypt it, however, the implementation cost a lot due to the high computing for asymmetric algorithm.
Look for ""lightweight cryptography"", it is typical for your application.
","2256","<encryption><embedded><elliptic-curve>","2","2","3","2012-09-28 10:09:52","","7","1","","","","2012-08-15 18:31:02",""
"2424121","Obtaining a signed x509 when using ECDSA keys","I am trying to sign some X509 certificates. My root private key is an ECDSA secp384r1. I am using bouncy castle. What seems to happen is that when generating the certificate signature, the Signature class used is unable to understand my ECDSA key.
The code that generates is as follows:
    X509V3CertificateGenerator v3CertGen = new X509V3CertificateGenerator();
    v3CertGen.setSerialNumber(BigInteger.valueOf(serialNumber));
    v3CertGen.setIssuerDN(issuerPrincipal);
    v3CertGen.setNotBefore(notBefore);
    v3CertGen.setNotAfter(notAfter);
    v3CertGen.setSubjectDN(subjectDN);
    v3CertGen.setPublicKey(publicKey);
    v3CertGen.setSignatureAlgorithm(CERT_SIGNATURE_ALGORITHM); // this is ECDSAWITHSHA1
    X509Certificate cert = v3CertGen.generate(privateKey, BOUNCY_CASTLE_PROVIDER); // ""BC""

The output from this is:
java.security.InvalidKeyException: can't identify DSA private key.
    at org.bouncycastle.jce.provider.DSAUtil.generatePrivateKeyParameter(Unknown Source)
    at org.bouncycastle.jce.provider.JDKDSASigner.engineInitSign(Unknown Source)
    at java.security.Signature.initSign(Signature.java:480)
    at org.bouncycastle.x509.X509Util.calculateSignature(Unknown Source)
    at org.bouncycastle.x509.X509V3CertificateGenerator.generate(Unknown Source)
    at org.bouncycastle.x509.X509V3CertificateGenerator.generate(Unknown Source)
    at com.snip.utils.CertificateUtility.generateAndSignCertificate(CertificateUtility.java:147)

By reading bouncycastle source code, I've traced this issue and reproduce it with the following code snippet:
Signature sig = Signature.getInstance(CERT_SIGNATURE_ALGORITHM, BOUNCY_CASTLE_PROVIDER);
System.out.println(sig.getAlgorithm());
System.out.println(sig.toString());
System.out.println(sig.getClass().getName());
try
{
    sig.initSign(privateKey);
    System.out.println(sig.toString());
} catch (Exception e) {
    e.printStackTrace();
}

which produces the output:
SHA1withECDSA
Signature object: SHA1withECDSA<not initialized>
org.bouncycastle.jce.provider.JDKDSASigner$ecDSA
java.security.InvalidKeyException: can't identify DSA private key.
        at org.bouncycastle.jce.provider.DSAUtil.generatePrivateKeyParameter(Unknown Source)
        at org.bouncycastle.jce.provider.JDKDSASigner.engineInitSign(Unknown Source)
        at java.security.Signature.initSign(Signature.java:480)
        at com.snip.utils.CertificateUtility.<init>(CertificateUtility.java:99)

The problem is that I am completely lost at this point. I don't know how to make the certificate generator give me a signed certificate. Does anyone have any idea of what I am doing wrong? 
","I've traced it down to some old jars which had not been deleted from the POM and which cause the wrong version of Bouncycastle classed to be used.
","2215","<certificate><bouncycastle><signing><x509><elliptic-curve>","4","2","1","2011-06-20 09:54:30","2424296","0","1","5000","","2011-06-20 09:54:30","2010-03-11 10:24:10",""
"24919173","Generate EC Diffie-Hellman public and private key pair","I need to generate an EC Diffie Hellman key pair. I am using the secp256r1 named curve, and OpenSSL. This is what I have with me so far:
unsigned char *ecdh(size_t *secret_len)
{
    EVP_PKEY_CTX *pctx, *kctx;
    EVP_PKEY_CTX *ctx;
    unsigned char *secret;
    EVP_PKEY *pkey = NULL, *peerkey, *params = NULL;
    /* NB: assumes pkey, peerkey have been already set up */

    /* Create the context for parameter generation */
    if(NULL == (pctx = EVP_PKEY_CTX_new_id(EVP_PKEY_EC, NULL))) 
        printf(""Error in EC key generation\n"");

    /* Initialise the parameter generation */
    if(1 != EVP_PKEY_paramgen_init(pctx)) 
        printf(""Error in EC key generation\n"");

    /* We're going to use the ANSI X9.62 Prime 256v1 curve */
    if(1 != EVP_PKEY_CTX_set_ec_paramgen_curve_nid(pctx, NID_X9_62_prime256v1)) 
        printf(""Error in EC key generation\n"");

    /* Create the parameter object params */
    if (!EVP_PKEY_paramgen(pctx, &params)) 
        printf(""Error in EC key generation\n"");

    /* Create the context for the key generation */
    if(NULL == (kctx = EVP_PKEY_CTX_new(params, NULL))) 
        printf(""Error in EC key generation\n"");

    /* Generate the key */
    if(1 != EVP_PKEY_keygen_init(kctx)) 
        printf(""Error in EC key generation\n"");

    if (1 != EVP_PKEY_keygen(kctx, &pkey)) 
        printf(""Error in EC key generation\n"");

    /* Get the peer's public key, and provide the peer with our public key -
     * how this is done will be specific to your circumstances */
    peerkey = get_peerkey(pkey);

    /* Create the context for the shared secret derivation */
    if(NULL == (ctx = EVP_PKEY_CTX_new(pkey, NULL))) 
        printf(""Error in EC key generation\n"");

    /* Initialise */
    if(1 != EVP_PKEY_derive_init(ctx)) 
        printf(""Error in EC key generation\n"");

    /* Provide the peer public key */
    if(1 != EVP_PKEY_derive_set_peer(ctx, peerkey)) 
        printf(""Error in EC key generation\n"");

    /* Determine buffer length for shared secret */
    if(1 != EVP_PKEY_derive(ctx, NULL, secret_len)) 
        printf(""Error in EC key generation\n"");

    /* Create the buffer */
    if(NULL == (secret = OPENSSL_malloc(*secret_len))) 
        printf(""Error in EC key generation\n"");

    /* Derive the shared secret */
    if(1 != (EVP_PKEY_derive(ctx, secret, secret_len))) 
        printf(""Error in EC key generation\n"");

    EVP_PKEY_CTX_free(ctx);
    EVP_PKEY_free(peerkey);
    EVP_PKEY_free(pkey);
    EVP_PKEY_CTX_free(kctx);
    EVP_PKEY_free(params);
    EVP_PKEY_CTX_free(pctx);

    /* Never use a derived secret directly. Typically it is passed
     * through some hash function to produce a key */
    return secret;
} 

I figured out that for this function to work, i need a EVP_KEY object with the second party's public key. I have this public key in a byte array, and also its length. How do I convert it to the required type? And also I could not find the secp256r1 curve in OpenSSL, but I used the one in the code after doing some research. Is it correct?
Thanks !
","The peer's public key is a point on the curve. From crypto\ec\ec_lcl.h:
struct ec_key_st {
    int version;

    EC_GROUP *group;

    EC_POINT *pub_key;
    BIGNUM   *priv_key;

    unsigned int enc_flag;
    point_conversion_form_t conv_form;

    int     references;
    int flags;

    EC_EXTRA_DATA *method_data;
} /* EC_KEY */;

I believe you need to call EC_POINT_new (c_lcl.h is a private header, so you won't have access to the structure).
Luckily, there's a lot of functions to manipulate them. From the EC_POINT_new(3) docs:

EC_POINTs can be converted to and from various external
  representations. Supported representations are octet strings, BIGNUMs
  and hexadecimal. The format of the external representation is
  described by the point_conversion_form. See EC_GROUP_copy(3) for a
  description of point_conversion_form. Octet strings are stored in a
  buffer along with an associated buffer length. A point held in a
  BIGNUM is calculated by converting the point to an octet string and
  then converting that octet string into a BIGNUM integer. Points in
  hexadecimal format are stored in a NULL terminated character string
  where each character is one of the printable values 0-9 or A-F (or
  a-f).

Also see EC_POINT_set_affine_coordinates_GFp, EC_POINT_set_affine_coordinates_GF2m and EC_KEY_set_public_key:
$ grep -R EC_KEY_set_public_key *
crypto/ec/ec.h:int EC_KEY_set_public_key(EC_KEY *key, const EC_POINT *pub);
...

You can see an example of how to set the point on the OpenSSL wiki at Elliptic Curve Cryptography.
","2182","<c><openssl><encryption-asymmetric><elliptic-curve><diffie-hellman>","3","1","1","2014-07-24 14:32:48","","3","1","","","","2014-07-23 19:23:28",""
"30477209","Use python library in iOS","I want to use a python library https://github.com/yann2192/pyelliptic in iOS to encrypt/decrypt.
I've gone through the following posts:
Is that possible to run a python built program on iOS as a static lib?
Embedding Python in an iPhone app
But found no luck.
Is there any way to do so?
","I use pythonista on my iPad and works perfectly with libraries compatible with python 2.7. If the library you wan to use depends only on the standard library (also numpy and matplotlib are supported) then it's easy (dependency to other libraries can be solved too, but takes more work). Simply, you need to copy/paste the library source in a plan script into pythonista and then you can import it from your script also running in pythonista.
I am sure there are other software that do the same but I have experience only with that one.
","2071","<python><ios><objective-c><elliptic-curve>","2","0","1","2015-05-27 09:07:04","","6","1","-1","","2017-05-23 12:17:25","2015-05-27 08:36:05",""
"33079925","AsymmetricKeyParameter as byte[]","I'm trying to do an ECDH key exchange using C# BouncyCastle. 
I have been successful in creating the necessary AsymmetricCipherKeyPair objects and I'm also able to generate the shared key of the other partys public key.
However, to actually exchange the public key, I need it as a byte[] or at least anything I can turn into raw data, since the protocol I'm using to transport the keys between the parties wont take any BouncyCastle object.
   X9ECParameters ecPars = NistNamedCurves.GetByName(""P-521"");
  ECDomainParameters ecDomPars = new ECDomainParameters(ecPars.Curve, ecPars.G, ecPars.N, ecPars.H, ecPars.GetSeed());
  IAsymmetricCipherKeyPairGenerator gen = GeneratorUtilities.GetKeyPairGenerator(""ECDH"");
  gen.Init(new ECKeyGenerationParameters(ecDomPars, new SecureRandom()));

  AsymmetricCipherKeyPair keyPair = gen.GenerateKeyPair();
  IBasicAgreement keyAgreement = AgreementUtilities.GetBasicAgreement(""ECDH"");
  keyAgreement.Init(keyPair.Private);

So what I'm needing here is the key value of keyPair.Public as a byte[].
I hope you understand where I'm heading and can help me.
","If you have only an ECPublicKeyParameter 'pub' (i.e. from keyPair.Public), you can get the public point encoding:
byte[] data = pub.Q.GetEncoded();

At the receiving end:
ECCurve curve = ecDomPars.Curve;
ECPoint q = curve.DecodePoint(data);
ECPublicKeyParameter peerPub = new ECPublicKeyParameter(q, ecDomPars);

It's more typical to exchange certificates, or else you will have no assurance of whom you're ""agreeing"" with.
I'm a bit concerned that you might be ""rolling your own crypto protocol""; if this is for a real application, please consider using an existing protocol, maybe just TLS. 
","1992","<c#><bouncycastle><public-key><elliptic-curve><diffie-hellman>","1","1","1","2015-10-19 15:39:47","33218568","0","1","1364007","","2015-10-12 11:29:38","2015-10-12 11:25:46",""
"22149271","ECDH secrets generated by BouncyCastle Java API and by OpenSSL are different","I'm trying to make use of elliptic curve crypto. I need two implementations of the same thing, one in Java and one in C. I'm testing them using two key pairs which were generated using the curve secp256k1. When I generate the derived secret in Java I always get a different number from what I get from OpenSSL.
Java code:
/* privateKey and peerPublicKey are generated with the following parameters */
ECParameterSpec paramSpec = ECNamedCurveTable.getParameterSpec(""secp256k1"");
/* ... */
Provider BC = new BouncyCastleProvider();
KeyAgreement agr = KeyAgreement.getInstance(""ECDH"", BC);
agr.init(privateKey);
agr.doPhase(peerPublicKey, true);
byte[] secret = agr.generateSecret();

C code
/* pkey and peerkey are generated using EC_KEY_new_by_curve_name(NID_secp256k1) */
/* and than wrapped in an EVP_PKEY */
EVP_PKEY_CTX *ctx = EVP_PKEY_CTX_new(pkey, NULL);
uint8_t *secret = NULL;
size_t secret_len;
EVP_PKEY_derive_init(ctx);
EVP_PKEY_derive_set_peer(ctx, peerkey);
EVP_PKEY_derive(ctx, NULL, &secret_len);
secret = malloc(secret_len);
EVP_PKEY_derive(ctx, secret, &secret_len);

I'm sure that the keys are valid and that they are the same both in C and in Java code, but I don't understand why the derived secret is different. Am I missing something?
Thanks
","EVP_PKEY_CTX *ctx = EVP_PKEY_CTX_new(pkey, NULL);
uint8_t *secret = NULL;
size_t secret_len;
EVP_PKEY_derive_init(ctx);
EVP_PKEY_derive_set_peer(ctx, peerkey);
EVP_PKEY_derive(ctx, NULL, &secret_len);
secret = malloc(secret_len);
EVP_PKEY_derive(ctx, secret, &secret_len);

This code looks like its missing a few steps. For example, EVP_PKEY_paramgen_init is not present.
The OpenSSL wiki has an example at Elliptic Curve Diffie-Hellman. I'm going to copy/paste it below to avoid the link-only answer, but I believe its the work of Matt Caswell.
EVP_PKEY_CTX *pctx, *kctx;
EVP_PKEY_CTX *ctx;
unsigned char *secret;
EVP_PKEY *pkey = NULL, *peerkey, *params = NULL;

/* Create the context for parameter generation */
if(NULL == (pctx = EVP_PKEY_CTX_new_id(EVP_PKEY_EC, NULL))) handleErrors();

/* Initialise the parameter generation */
if(1 != EVP_PKEY_paramgen_init(pctx)) handleErrors();

/* We're going to use the ANSI X9.62 Prime 256v1 curve */
if(1 != EVP_PKEY_CTX_set_ec_paramgen_curve_nid(pctx, NID_X9_62_prime256v1)) handleErrors();

/* Create the parameter object params */
if (!EVP_PKEY_paramgen(pctx, &params)) handleErrors();

/* Create the context for the key generation */
if(NULL == (kctx = EVP_PKEY_CTX_new(params, NULL))) handleErrors();

/* Generate the key */
if(1 != EVP_PKEY_keygen_init(kctx)) handleErrors();
if (1 != EVP_PKEY_keygen(kctx, &pkey)) handleErrors();

/* Get the peer's public key, and provide the peer with our public key -
 * how this is done will be specific to your circumstances */
peerkey = get_peerkey(pkey);

/* Create the context for the shared secret derivation */
if(NULL == (ctx = EVP_PKEY_CTX_new(pkey, NULL))) handleErrors();

/* Initialise */
if(1 != EVP_PKEY_derive_init(ctx)) handleErrors();

/* Provide the peer public key */
if(1 != EVP_PKEY_derive_set_peer(ctx, peerkey)) handleErrors();

/* Determine buffer length for shared secret */
if(1 != EVP_PKEY_derive(ctx, NULL, secret_len)) handleErrors();

/* Create the buffer */
if(NULL == (secret = OPENSSL_malloc(*secret_len))) handleErrors();

/* Derive the shared secret */
if(1 != (EVP_PKEY_derive(ctx, secret, secret_len))) handleErrors();

EVP_PKEY_CTX_free(ctx);
EVP_PKEY_free(peerkey);
EVP_PKEY_free(pkey);
EVP_PKEY_CTX_free(kctx);
EVP_PKEY_free(params);
EVP_PKEY_CTX_free(pctx);

/* Never use a derived secret directly. Typically it is passed
 * through some hash function to produce a key */
return secret;



When I generate the derived secret in Java I always get a different number from what I get from OpenSSL.

Each run of the protocol will produce different results. That's because each party picks a random value for each run of the protocol. That is, the a in g^a is random and different for each run, so the public key A = g^a is different for each run. 
If everything is working correctly, you'll never see the parties use the same values, or one party to reuse a past value. Independent executions will never produce the same result. It does not matter if its OpenSSL ↔ OpenSSL, OpenSSL ↔ Java, or Java ↔ Java. They will always produce different results.
","1975","<java><openssl><bouncycastle><elliptic-curve><diffie-hellman>","1","2","1","2014-03-04 13:23:47","","1","","","","","2014-03-03 14:27:12",""
"40434317","How to load PEM encoded Elliptic Curve public keys into Bouncy Castle?","I have a PEM encoded Elliptic Curve public key that I'm trying to load into Bouncy Castle and everything I tried so far is failing. This is an example of the key I'm trying to load:
-----BEGIN PUBLIC KEY-----
MIGbMBAGByqGSM49AgEGBSuBBAAjA4GGAAQBhsFCcWY2GaiN1BjPEd1v+ESKO6/0
D0sUR4y1amHnOr3FZx6TdqdoSBqxownQrnAKGCwagGxUb7BWwPFgHqKQJHgBq+J7
F+6m5SKAEL1wS5pqya91N7oudF3yFW8oZRE4RQRdSLl3fV2aVXKwGDXciwhUhw8k
x5OS4iZpMAY+LI4WVGU=
-----END PUBLIC KEY-----

It is generated by NodeJS Crypto module and the curve name is secp521r1. It's later on encoded into PEM by the npm package key-encoder. I already used it in JavaScript (ClojureScript actually) to verify a signature and now I need to verify the signature on the server with Java (Clojure actually).
I tried removing the guards from the key, coverting to a byte[] and creating a X509EncodedKeySpec. That didn't work. It crashed with: 
InvalidKeySpecException encoded key spec not recognised  org.bouncycastle.jcajce.provider.asymmetric.util.BaseKeyFactorySpi.engineGeneratePublic (:-1)

The code to I'm using to load the key:
KeyFactory.
  getInstance(""ECDSA"", ""BC"").
  generatePublic(new X509EncodedKeySpec(publicKey.getBytes()))

Just in case, this is my Clojure code:
(-> (KeyFactory/getInstance ""ECDSA"")
    (.generatePublic (X509EncodedKeySpec. (.getBytes public-key)))) 

I also tried PKCS8EncodedKeySpec but I got the error:
InvalidKeySpecException key spec not recognised  org.bouncycastle.jcajce.provider.asymmetric.util.BaseKeyFactorySpi.engineGeneratePublic (:-1)

I also tried this method here: https://gist.github.com/wuyongzheng/0e2ed6d8a075153efcd3#file-ecdh_bc-java-L47-L50 but when running decodePoint I get the error:
IllegalArgumentException Invalid point encoding 0x4d  org.bouncycastle.math.ec.ECCurve.decodePoint (:-1)

when I removed the guards and:
IllegalArgumentException Invalid point encoding 0x2d  org.bouncycastle.math.ec.ECCurve.decodePoint (:-1)

with the guards on.
Any ideas what I'm doing wrong or how to fix it?
Also, in case it helps, this is the private key:
-----BEGIN EC PRIVATE KEY-----
MIHbAgEBBEEjNeo52qeffbIQvSxRcWAPlyJjeEOov2JNxxwWKCtlowi07HsYNNyE
jFDdSn8tSYAGx0rROrgpGuuJoG0zarPKz6AHBgUrgQQAI6GBiQOBhgAEAYbBQnFm
NhmojdQYzxHdb/hEijuv9A9LFEeMtWph5zq9xWcek3anaEgasaMJ0K5wChgsGoBs
VG+wVsDxYB6ikCR4AaviexfupuUigBC9cEuaasmvdTe6LnRd8hVvKGUROEUEXUi5
d31dmlVysBg13IsIVIcPJMeTkuImaTAGPiyOFlRl
-----END EC PRIVATE KEY-----

and everything seems to be valid:
$ openssl ec -in private.pem  -pubout
read EC key
writing EC key
-----BEGIN PUBLIC KEY-----
MIGbMBAGByqGSM49AgEGBSuBBAAjA4GGAAQBhsFCcWY2GaiN1BjPEd1v+ESKO6/0
D0sUR4y1amHnOr3FZx6TdqdoSBqxownQrnAKGCwagGxUb7BWwPFgHqKQJHgBq+J7
F+6m5SKAEL1wS5pqya91N7oudF3yFW8oZRE4RQRdSLl3fV2aVXKwGDXciwhUhw8k
x5OS4iZpMAY+LI4WVGU=
-----END PUBLIC KEY-----

","Doing a bit of massaging I finally managed to load it:
(require '[clojure.string :as s])
(import '[java.security KeyFactory]
        '[java.security.spec X509EncodedKeySpec]
        '[java.util Base64])

(def public-key ""-----BEGIN PUBLIC KEY-----
MIGbMBAGByqGSM49AgEGBSuBBAAjA4GGAAQBhsFCcWY2GaiN1BjPEd1v+ESKO6/0
D0sUR4y1amHnOr3FZx6TdqdoSBqxownQrnAKGCwagGxUb7BWwPFgHqKQJHgBq+J7
F+6m5SKAEL1wS5pqya91N7oudF3yFW8oZRE4RQRdSLl3fV2aVXKwGDXciwhUhw8k
x5OS4iZpMAY+LI4WVGU=
-----END PUBLIC KEY-----"")

(as-> public-key key
      (s/replace key ""-----BEGIN PUBLIC KEY-----"" """")
      (s/replace key ""-----END PUBLIC KEY-----"" """")
      (s/replace key #""\s"" """")
      (.decode (Base64/getDecoder) key)
      (X509EncodedKeySpec. key)
      (.generatePublic (KeyFactory/getInstance ""ECDSA"" ""BC"") key))

","1935","<java><clojure><bouncycastle><pem><elliptic-curve>","5","2","2","2016-11-05 21:30:20","","0","1","7671","","2016-11-05 21:30:20","2016-11-05 02:59:51",""
"40434317","How to load PEM encoded Elliptic Curve public keys into Bouncy Castle?","I have a PEM encoded Elliptic Curve public key that I'm trying to load into Bouncy Castle and everything I tried so far is failing. This is an example of the key I'm trying to load:
-----BEGIN PUBLIC KEY-----
MIGbMBAGByqGSM49AgEGBSuBBAAjA4GGAAQBhsFCcWY2GaiN1BjPEd1v+ESKO6/0
D0sUR4y1amHnOr3FZx6TdqdoSBqxownQrnAKGCwagGxUb7BWwPFgHqKQJHgBq+J7
F+6m5SKAEL1wS5pqya91N7oudF3yFW8oZRE4RQRdSLl3fV2aVXKwGDXciwhUhw8k
x5OS4iZpMAY+LI4WVGU=
-----END PUBLIC KEY-----

It is generated by NodeJS Crypto module and the curve name is secp521r1. It's later on encoded into PEM by the npm package key-encoder. I already used it in JavaScript (ClojureScript actually) to verify a signature and now I need to verify the signature on the server with Java (Clojure actually).
I tried removing the guards from the key, coverting to a byte[] and creating a X509EncodedKeySpec. That didn't work. It crashed with: 
InvalidKeySpecException encoded key spec not recognised  org.bouncycastle.jcajce.provider.asymmetric.util.BaseKeyFactorySpi.engineGeneratePublic (:-1)

The code to I'm using to load the key:
KeyFactory.
  getInstance(""ECDSA"", ""BC"").
  generatePublic(new X509EncodedKeySpec(publicKey.getBytes()))

Just in case, this is my Clojure code:
(-> (KeyFactory/getInstance ""ECDSA"")
    (.generatePublic (X509EncodedKeySpec. (.getBytes public-key)))) 

I also tried PKCS8EncodedKeySpec but I got the error:
InvalidKeySpecException key spec not recognised  org.bouncycastle.jcajce.provider.asymmetric.util.BaseKeyFactorySpi.engineGeneratePublic (:-1)

I also tried this method here: https://gist.github.com/wuyongzheng/0e2ed6d8a075153efcd3#file-ecdh_bc-java-L47-L50 but when running decodePoint I get the error:
IllegalArgumentException Invalid point encoding 0x4d  org.bouncycastle.math.ec.ECCurve.decodePoint (:-1)

when I removed the guards and:
IllegalArgumentException Invalid point encoding 0x2d  org.bouncycastle.math.ec.ECCurve.decodePoint (:-1)

with the guards on.
Any ideas what I'm doing wrong or how to fix it?
Also, in case it helps, this is the private key:
-----BEGIN EC PRIVATE KEY-----
MIHbAgEBBEEjNeo52qeffbIQvSxRcWAPlyJjeEOov2JNxxwWKCtlowi07HsYNNyE
jFDdSn8tSYAGx0rROrgpGuuJoG0zarPKz6AHBgUrgQQAI6GBiQOBhgAEAYbBQnFm
NhmojdQYzxHdb/hEijuv9A9LFEeMtWph5zq9xWcek3anaEgasaMJ0K5wChgsGoBs
VG+wVsDxYB6ikCR4AaviexfupuUigBC9cEuaasmvdTe6LnRd8hVvKGUROEUEXUi5
d31dmlVysBg13IsIVIcPJMeTkuImaTAGPiyOFlRl
-----END EC PRIVATE KEY-----

and everything seems to be valid:
$ openssl ec -in private.pem  -pubout
read EC key
writing EC key
-----BEGIN PUBLIC KEY-----
MIGbMBAGByqGSM49AgEGBSuBBAAjA4GGAAQBhsFCcWY2GaiN1BjPEd1v+ESKO6/0
D0sUR4y1amHnOr3FZx6TdqdoSBqxownQrnAKGCwagGxUb7BWwPFgHqKQJHgBq+J7
F+6m5SKAEL1wS5pqya91N7oudF3yFW8oZRE4RQRdSLl3fV2aVXKwGDXciwhUhw8k
x5OS4iZpMAY+LI4WVGU=
-----END PUBLIC KEY-----

","Since you have BC, it can dePEMify instead of doing it 'by hand' (I only do plain Java):
Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
Reader rdr = new StringReader(""-----BEGIN PUBLIC KEY-----\n""
        +""MIGbMBAGByqGSM49AgEGBSuBBAAjA4GGAAQBhsFCcWY2GaiN1BjPEd1v+ESKO6/0\n""
        +""D0sUR4y1amHnOr3FZx6TdqdoSBqxownQrnAKGCwagGxUb7BWwPFgHqKQJHgBq+J7\n""
        +""F+6m5SKAEL1wS5pqya91N7oudF3yFW8oZRE4RQRdSLl3fV2aVXKwGDXciwhUhw8k\n""
        +""x5OS4iZpMAY+LI4WVGU=\n"" +""-----END PUBLIC KEY-----\n""); // or from file etc.

org.bouncycastle.util.io.pem.PemObject spki = new org.bouncycastle.util.io.pem.PemReader(rdr).readPemObject();
PublicKey key = KeyFactory.getInstance(""EC"",""BC"").generatePublic(new X509EncodedKeySpec(spki.getContent()));

System.out.println (key.getAlgorithm() + "" "" + ((ECPublicKey)key).getW().toString());

Example output:
EC java.security.spec.ECPoint@47244700

FYI, PKCS8 encoding is only for private keys; see javadoc for java.security.Key.getFormat()
","1935","<java><clojure><bouncycastle><pem><elliptic-curve>","5","2","2","2016-11-05 21:30:20","","0","1","7671","","2016-11-05 21:30:20","2016-11-05 02:59:51",""
"18204964","ECDSA for Android using SpongyCastle","I've just added SpongyCastle to Eclipse for my Android Project, however I don't seem to be able to find a single good/complete example of how to use ECDSA for encryption & decryption of plain texts. I would imagine this should be a 'hello world' for ecnryption libraries.
Can anyone help me with this? or direct me towards some other resource that can help me achieve the same goals?
Thanks.
","Here's the example from bouncycastle.org for generating a key, from there it's just standard use of the KeyPair.  Also @nelenkov wrote a great article (as usual) on Elliptic curve on Android
ECGenParameterSpec ecGenSpec = new ECGenParameterSpec(""prime192v1"");
//using spongycastle provider
KeyPairGenerator  g = KeyPairGenerator.getInstance(""ECDSA"", ""SC"");

g.initialize(ecGenSpec, new SecureRandom());

KeyPair pair = g.generateKeyPair();

","1926","<android><encryption-asymmetric><elliptic-curve><ecdsa><spongycastle>","1","0","1","2013-10-21 16:38:06","","1","1","","","","2013-08-13 09:08:21",""
"10969867","How to encrypt and send data via ECDH, with only a publickey (peerkey) provided?","I'm coding a program that needs asymmetric cryptography. My approach is using Python's M2Crypto and I have chosen ECDH as the algorithm. However, I also want the procedure to be as simple as RSA, which requires only the public key of our receiver. ECDH is not. Its public key seems to have to be combined with a sender's own public key first, thus shared secret calculated and everything done.
Regardless of efficiency, I do want such a solution, so that if anyone wants to send me a message, my EC public key is published and the sender has to:

get his/her own EC private key 
combine this private key with my public one and calculate a shared secret 
use the secret and AES or other symmetric cipher encrypt the message 
send me ciphertext and the derived public key(from this private key).

But here is a problem. I observed that a successful key exchange exists only when either side generate their keys basing on the same curve parameters. But unless I provide additional information of what curve my public key has based on, is there any other way of figuring this out? A public key is loaded with:
M2Crypto.EC.load_pub_key([filename])

And an EC.EC_pub instance is returned. I think information about the curve should hide somewhere in this instance, but I've not found where.
Please point out what I have missed, or if my solution was wrong or can be simpler, or any other suggestions. Thanks.
","","1877","<python><m2crypto><elliptic-curve>","2","","0","2013-12-08 18:02:42","","3","1","909742","","2013-12-08 18:02:42","2012-06-10 15:16:13",""
"30603680","Client ECC SSL Certificate contains ""unknown named curve""","Question precontext:
I am working in an existing library that uses SSL with the netty framework on a remote server. I am running into an SSL/TLS handshake error. The error is as follows: 
javax.net.ssl.SSLProtocolException: java.io.IOException: Unknown named curve: 1.2.840.10045.3.1.1
    at sun.security.ssl.Handshaker.checkThrown(Handshaker.java:1345) ~[na:1.7.0_79]
    at sun.security.ssl.SSLEngineImpl.checkTaskThrown(SSLEngineImpl.java:519) ~[na:1.7.0_79]
    at sun.security.ssl.SSLEngineImpl.readNetRecord(SSLEngineImpl.java:799) ~[na:1.7.0_79]
    at sun.security.ssl.SSLEngineImpl.unwrap(SSLEngineImpl.java:767) ~[na:1.7.0_79]
    at javax.net.ssl.SSLEngine.unwrap(SSLEngine.java:624) ~[na:1.7.0_79]
    at io.netty.handler.ssl.SslHandler.unwrap(SslHandler.java:982) ~[netty-all-4.0.23.Final.jar:4.0.23.Final]
    at io.netty.handler.ssl.SslHandler.unwrap(SslHandler.java:908) ~[netty-all-4.0.23.Final.jar:4.0.23.Final]
    at io.netty.handler.ssl.SslHandler.decode(SslHandler.java:854) ~[netty-all-4.0.23.Final.jar:4.0.23.Final]
    at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:249) ~[netty-all-4.0.23.Final.jar:4.0.23.Final]
    at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:149) ~[netty-all-4.0.23.Final.jar:4.0.23.Final]
    at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:333) ~[netty-all-4.0.23.Final.jar:4.0.23.Final]
    at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:319) ~[netty-all-4.0.23.Final.jar:4.0.23.Final]
    at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:787) ~[netty-all-4.0.23.Final.jar:4.0.23.Final]
    at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:130) ~[netty-all-4.0.23.Final.jar:4.0.23.Final]
    at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:511) ~[netty-all-4.0.23.Final.jar:4.0.23.Final]
    at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:468) ~[netty-all-4.0.23.Final.jar:4.0.23.Final]
    at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:382) ~[netty-all-4.0.23.Final.jar:4.0.23.Final]
    at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:354) ~[netty-all-4.0.23.Final.jar:4.0.23.Final]
    at io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:116) ~[netty-all-4.0.23.Final.jar:4.0.23.Final]
    at io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator.run(DefaultThreadFactory.java:137) ~[netty-all-4.0.23.Final.jar:4.0.23.Final]
    at java.lang.Thread.run(Thread.java:745) ~[na:1.7.0_79]
Caused by: javax.net.ssl.SSLProtocolException: java.io.IOException: Unknown named curve: 1.2.840.10045.3.1.1
    at sun.security.ssl.HandshakeMessage$CertificateMsg.<init>(HandshakeMessage.java:451) ~[na:1.7.0_79]
    at sun.security.ssl.ServerHandshaker.processMessage(ServerHandshaker.java:222) ~[na:1.7.0_79]
    at sun.security.ssl.Handshaker.processLoop(Handshaker.java:901) ~[na:1.7.0_79]
    at sun.security.ssl.Handshaker$1.run(Handshaker.java:841) ~[na:1.7.0_79]
    at sun.security.ssl.Handshaker$1.run(Handshaker.java:839) ~[na:1.7.0_79]
    at java.security.AccessController.doPrivileged(Native Method) ~[na:1.7.0_79]
    at sun.security.ssl.Handshaker$DelegatedTask.run(Handshaker.java:1273) ~[na:1.7.0_79]
    at io.netty.handler.ssl.SslHandler.runDelegatedTasks(SslHandler.java:1015) ~[netty-all-4.0.23.Final.jar:4.0.23.Final]
    at io.netty.handler.ssl.SslHandler.unwrap(SslHandler.java:927) ~[netty-all-4.0.23.Final.jar:4.0.23.Final]
    ... 14 common frames omitted
Caused by: java.security.cert.CertificateParsingException: java.io.IOException: Unknown named curve: 1.2.840.10045.3.1.1
    at sun.security.x509.X509CertInfo.<init>(X509CertInfo.java:171) ~[na:1.7.0_79]
    at sun.security.x509.X509CertImpl.parse(X509CertImpl.java:1781) ~[na:1.7.0_79]
    at sun.security.x509.X509CertImpl.<init>(X509CertImpl.java:196) ~[na:1.7.0_79]
    at sun.security.provider.X509Factory.engineGenerateCertificate(X509Factory.java:97) ~[na:1.7.0_79]
    at java.security.cert.CertificateFactory.generateCertificate(CertificateFactory.java:339) ~[na:1.7.0_79]
    at sun.security.ssl.HandshakeMessage$CertificateMsg.<init>(HandshakeMessage.java:449) ~[na:1.7.0_79]
    ... 22 common frames omitted
Caused by: java.io.IOException: Unknown named curve: 1.2.840.10045.3.1.1
    at sun.security.ec.ECParameters.decodeParameters(ECParameters.java:197) ~[na:1.7.0_79]
    at sun.security.ec.ECParameters.engineInit(ECParameters.java:319) ~[na:1.7.0_79]
    at java.security.AlgorithmParameters.init(AlgorithmParameters.java:293) ~[na:1.7.0_79]
    at sun.security.x509.AlgorithmId.decodeParams(AlgorithmId.java:139) ~[na:1.7.0_79]
    at sun.security.x509.AlgorithmId.<init>(AlgorithmId.java:114) ~[na:1.7.0_79]
    at sun.security.x509.AlgorithmId.parse(AlgorithmId.java:382) ~[na:1.7.0_79]
    at sun.security.x509.X509Key.parse(X509Key.java:168) ~[na:1.7.0_79]
    at sun.security.x509.CertificateX509Key.<init>(CertificateX509Key.java:75) ~[na:1.7.0_79]
    at sun.security.x509.X509CertInfo.parse(X509CertInfo.java:705) ~[na:1.7.0_79]
    at sun.security.x509.X509CertInfo.<init>(X509CertInfo.java:169) ~[na:1.7.0_79]
    ... 27 common frames omitted

Now, here was my approach to try solving this issue at hand. This remote server requires client authentication and that certificate is the one that uses elliptic curves (using a client certificate with different public key algorithms and signature algorithms does not cause the error meaning that the client certificate is at fault here). I ran
openssl x509 -in <client_cert> -text -noout

The client certificate is as follows:
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 3585039615565000225 (0x31c09e8937746e21)
    Signature Algorithm: ecdsa-with-SHA1
        Issuer: <ISSUER>
        Validity
            Not Before: Dec  1 23:01:26 2014 GMT
            Not After : Nov 26 23:01:26 2034 GMT
        Subject: 1.3.6.1.4.1.41387.1.1=18B43000004C627B
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (192 bit)
                pub:
                    04:dc:ca:07:76:de:28:91:b8:94:16:08:12:01:85:
                    24:a5:a5:5e:48:84:aa:2b:f8:3a:fa:87:f1:30:70:
                    f3:7b:01:68:6a:f6:29:56:c7:17:60:71:fe:b7:c0:
                    d1:d5:1c:ad
                ASN1 OID: prime192v1
                NIST CURVE: P-192
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:FALSE
            X509v3 Key Usage: critical
                Digital Signature, Key Encipherment
            X509v3 Extended Key Usage: critical
                TLS Web Client Authentication, TLS Web Server Authentication
            X509v3 Subject Key Identifier:
                <SUBJECT KEY IDENTIFIER>
            X509v3 Authority Key Identifier:
                keyid: <KEY ID>

    Signature Algorithm: ecdsa-with-SHA1
         <SIGNATURE GOES HERE>

This leaves me under the impression that the NIST P-192 curve is not being recognized by JDK SSL library. The JDK version I am running is 1.7.0_79. I don't know how to proceed fixing this. Any ideas?
","This might be related to an encryption issue, rather than an SSL issue. Have you tried using the unlimited strength jurisdiction policy files?
","1874","<java><ssl><netty><openjdk><elliptic-curve>","8","0","1","2015-06-05 08:28:02","","3","","4966487","","2015-06-05 08:28:02","2015-06-02 18:21:03",""
"6648166","Elliptic Curve Encryption","Please provide me an example using the Bouncycastle library showing how to add two points on an elliptic curve.
I tried the following code but i didn't get the same result that should happen theoretically.
   X9ECParameters x9=NISTNamedCurves.getByName(""P-224"");
   ECCurve curve=x9.getCurve();
   ECFieldElement x1=new ECFieldElement.Fp(new BigInteger(""10""), new BigInteger(""8""));
   ECFieldElement y1=new ECFieldElement.Fp(new BigInteger(""10""), new BigInteger(""9""));
   ECPoint.Fp p1=new ECPoint.Fp(curve, x1, y1);
   ECFieldElement x2=new ECFieldElement.Fp(new BigInteger(""10""), new BigInteger(""5""));
   ECFieldElement y2=new ECFieldElement.Fp(new BigInteger(""10""), new BigInteger(""6""));
   ECPoint.Fp p2=new ECPoint.Fp(curve, x2, y2);
   p2=(ECPoint.Fp) p1.add(p2);
   System.out.println(p2.getX().toBigInteger()+"" ""+p2.getY().toBigInteger());

And also I didn't understand what value is to provide for first BigInteger in ECFiledElement.
","Your example makes no sense at all so it is hard to understand what you think the result should be. By using low-level classes like ECFieldElement you are taking full responsibility to provide sensible parameters. You have selected NIST curve P-224. This elliptic curve is defined over a specific field. You can retrieve the prime 'q' for this finite field and use it to create field elements by the following (departing from your example):
    X9ECParameters x9 = NISTNamedCurves.getByName(""P-224"");
    ECCurve.Fp curve = (Fp) x9.getCurve();
    BigInteger q = curve.getQ();
    ECFieldElement x1 = new ECFieldElement.Fp(q, new BigInteger(""8""));
    ECFieldElement y1 = new ECFieldElement.Fp(q, new BigInteger(""9""));

The first argument of the ECFieldElement.Fp constructor is the prime that defines the field.
The second problem with your example is that not every pair (x,y) of integers is a point on the elliptic curve. The chance of a random (x,y) being on P-224 is incredibly small. Here again, by messing with the low-level EPoint classes Bouncycastle does not check this for you. So while you can make the machinery of the elliptic curve addition software run and give you answers, those answers are meaningless.
To make any more progress I have to ask first: what are you trying to do? 
EDIT: 
There are two basic ways to find a point on an elliptic curve.

take an existing known point on the curve and scalar multiply by an integer. The result is another point on the curve.
Pick an x-coordinate, say x1. Plug it into the right side of the elliptic curve formula to y1^2 = E(x1). Then attempt to compute a square root in the field. If the square root exists, then you get two points (x1, y1) and (x1,-y1) that are on the curve. If the square root does not exists, then there is no point on the curve with x-coordinate x1.

You can get a point on your elliptic curve by ECPoint.Fp = (ECPoint.Fp)x9.getG(); You can multiply that point by an integer with the ECPoint.multiply(...).
Using method #2 is harder than it needs to be with Bouncycastle. All the methods are in the ECPoint and ECFieldElement classes. The ECFieldElement class contains a public square root method that you can use to attempt to compute the square root. If it returns null then the square root does not exist.
","1872","<java><bouncycastle><elliptic-curve>","0","5","1","2011-07-13 00:51:10","6658122","0","1","238704","","2011-07-11 23:34:04","2011-07-11 09:28:34",""
"25584563","Elliptic Curve Java","I have to do a program in Java that compares 3 different asymmetric cipher algorithms. I want to choose the key size and the message size (that will be generated randomly), and I'd like to show the different time that every algorithm will be take for encrypt the same text with a key with the same dimension.
I want to compare RSA, DSA and ECIES. The first two don't pose any problems but for the last one I don't know what to do.
The main problems are : 

Which elliptic curve is safe to use?
Can I use the same curve for different key sizes?
How can I create a Cipher in Java that uses ""ECIES"", it doesn't seem to exist?

","ECIES is not present in the normal Java libraries, at least not up to the current date. You have to use a library like Bouncy Castle.
For quality of the curves you could take a look at http://safecurves.cr.yp.to (if you have the stomach for it). Each set of domain parameters is always directly tied to the key size. I like Brainpool curves myself; they are relatively standard and relatively safe if you use them with some care.
Note: never directly encrypt plaintext with RSA, DSA or ECIES, always try and use hybrid cryptography. So compare with input sizes of 128, 192 or 256 bits at most.
So, without further ado.
public static void main(String[] args) throws Exception {
    Security.addProvider(new BouncyCastleProvider());

    KeyPairGenerator kpg = KeyPairGenerator.getInstance(""ECIES"");
    ECGenParameterSpec brainpoolP256R1 = new ECGenParameterSpec(
            ""brainpoolP256R1"");
    kpg.initialize(brainpoolP256R1);
    KeyPair kp = kpg.generateKeyPair();

    Cipher c = Cipher.getInstance(""ECIES"");
    c.init(Cipher.ENCRYPT_MODE, kp.getPublic());

    final byte[] aesKeyData = new byte[16];
    SecureRandom rng = new SecureRandom();
    rng.nextBytes(aesKeyData);

    byte[] wrappedKey = c.doFinal(aesKeyData);
    SecretKey aesKey = new SecretKeySpec(aesKeyData, ""AES"");
    Arrays.fill(aesKeyData, (byte) 0);
}

","1853","<java><encryption><elliptic-curve>","-4","2","1","2014-08-30 17:40:13","25584982","0","3","589259","","2014-08-30 17:26:09","2014-08-30 16:31:10",""
"7521223","How do I cipher plaintext using ECDH?","I'm looking for sample Java code to implement the cipher for ECDH encryption. I've already found the method to get the keys required but still haven't found a solution to encrypt the text. Appreciate if anyone can give some guidance.
Btw I am using SpongyCastle as I am programming for Android.
Many Thanks!
","ECDH is not an encryption algorithm; it cannot encrypt some data you choose. It is a key agreement protocol, which results in a ""shared secret"": the data which both sender and receiver end up sharing is ""secret"" (only them know it) but they cannot control its contents.
The idea is that you can use the shared secret as the basis for a symmetric encryption algorithm. Since the shared secret has a relatively non-flexible format (with ECDH, the shared secret is an elliptic curve point, and about half of it is really secret), the normal way is to hash it with a secure hash function (say, SHA-256) and use the hash output (or part of it) as the actual encryption key.
","1848","<java><android><bouncycastle><elliptic-curve>","1","3","1","2011-09-24 23:02:36","","3","","","","","2011-09-22 20:39:39",""
"50275351","Converting EC PublicKey Hex String to PublicKey","While performing Elliptic Curve cryptography with secp256k1 curve, I noticed that while the code and test cases compile on the Android Studio IDE they do not compile on the android device since the curve isn't defined in the jre/jdk that the mobile device uses. Changing the curve to a prime256v1 I seem to be facing difficulties in converting a hex string of the publicKey to PublicKey object.
Given the hex string of a PublicKey.getEncoded() which is in a database. I want an android client to convert the byte[] from converting the hex string into a PublicKey object. I am converting the byte[] using X509EncodedKeySpec() as follows:
public static PublicKey getPublicKey(byte[] pk) throws NoSuchAlgorithmException, InvalidKeySpecException {
    EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(pk);
    KeyFactory kf = KeyFactory.getInstance(""EC"");
    PublicKey pub = kf.generatePublic(publicKeySpec);
    return pub;
}

The conversion from a hex string to a byte[] happens as follows:
public static byte[] hexStringToByteArray(String hexString) {
    byte[] bytes = new byte[hexString.length() / 2];

    for(int i = 0; i < hexString.length(); i += 2){
        String sub = hexString.substring(i, i + 2);
        Integer intVal = Integer.parseInt(sub, 16);
        bytes[i / 2] = intVal.byteValue();
        String hex = """".format(""0x%x"", bytes[i / 2]);
    }
    return bytes;
}

The conversion from a byte[] to Hex string is as follows:
public static String convertBytesToHex(byte[] bytes) {
    char[] hexChars = new char[bytes.length * 2];
    for ( int j = 0; j < bytes.length; j++ ) {
        int v = bytes[j] & 0xFF;
        hexChars[j * 2] = hexArray[v >>> 4];
        hexChars[j * 2 + 1] = hexArray[v & 0x0F];
    }
    return new String(hexChars).toLowerCase();
}

However when I run this on the android app (7.0, API 24) I get the following System Error
W/System.err: java.security.spec.InvalidKeySpecException: java.lang.RuntimeException: error:0c0000b9:ASN.1 encoding routines:OPENSSL_internal:WRONG_TAG
                  at com.android.org.conscrypt.OpenSSLKey.getPublicKey(OpenSSLKey.java:295)
                  at com.android.org.conscrypt.OpenSSLECKeyFactory.engineGeneratePublic(OpenSSLECKeyFactory.java:47)
                  at java.security.KeyFactory.generatePublic(KeyFactory.java:357)

What is the recommended approach for converting a Hex string to a PublicKey for EC instance on an android device.
Here's sample code that you can execute:
ECDSA.java
public class ECDSA {

    public static KeyPair generateKeyPair() throws NoSuchAlgorithmException, InvalidAlgorithmParameterException {
        KeyPairGenerator keyGen = KeyPairGenerator.getInstance(""EC"");
        ECGenParameterSpec ecSpec = new ECGenParameterSpec(""prime256v1"");
        SecureRandom random = SecureRandom.getInstance(""SHA1PRNG"");
        keyGen.initialize(ecSpec, random);
        KeyPair pair = keyGen.generateKeyPair();
        return pair;
    }

    public static PublicKey getPublicKey(byte[] pk) throws NoSuchAlgorithmException, InvalidKeySpecException {
        EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(pk);
        KeyFactory kf = KeyFactory.getInstance(""EC"");
        PublicKey pub = kf.generatePublic(publicKeySpec);
        return pub;
    }

    public static PrivateKey getPrivateKey(byte[] privk) throws NoSuchAlgorithmException, InvalidKeySpecException {
        EncodedKeySpec privateKeySpec = new X509EncodedKeySpec(privk);
        KeyFactory kf = KeyFactory.getInstance(""EC"");
        PrivateKey privateKey = kf.generatePrivate(privateKeySpec);
        return privateKey;
    }
}

MainActivity.java
public class MainActivity extends AppCompatActivity {

    KeyPair keyPair = ECDSA.generateKeyPair();
    PublicKey publicKey = keyPair.getPublic();
    PrivateKey privateKey = keyPair.getPrivate();
    // Converting byte[] to Hex
    publicKeyHex = convertBytesToHex(publicKey.getEncoded());
    privateKeyHex = convertBytesToHex(privateKey.getEncoded());
    // Trying to convert Hex to PublicKey/PrivateKey objects
    PublicKey pkReconstructed = ECDSA.getPublicKey(hexStringToByteArray(publicKeyHex));
    PrivateKey skReconstructed = ECDSA.getPrivateKey(hexStringToByteArray(privateKeyHex));
    // This throws an error when running on an android device
    // because there seems to be some library mismatch with 
    // java.security.* vs conscrypt.OpenSSL.* on android.
}

","Finally we get a real MCVE and we can now see that you are not using the correct class for encoded private keys. X509EncodedKeySpec is only for public keys. From the javadocs (emphasis mine):

This class represents the ASN.1 encoding of a public key, encoded
  according to the ASN.1 type SubjectPublicKeyInfo.

For private keys, the correct encoding is usually a PKCS8EncodedKeySpec. The encoding can be determined by examining the output of Key.getFormat(). Therefore, change your method getPrivateKey of ECDSA to
public static PrivateKey getPrivateKey(byte[] privk) throws NoSuchAlgorithmException, InvalidKeySpecException {
        EncodedKeySpec privateKeySpec = new PKCS8EncodedKeySpec(privk);
        KeyFactory kf = KeyFactory.getInstance(""EC"");
        PrivateKey privateKey = kf.generatePrivate(privateKeySpec);
        return privateKey;
    }

","1828","<java><android><openssl><elliptic-curve>","1","1","1","2018-05-17 16:47:36","50337499","4","","7255359","","2018-05-14 03:15:35","2018-05-10 14:31:34",""
"16100048","Drawing a portion of an ellipse programmatically with a Bezier or an Elliptical path — SVG and raphael.js","I'm trying to draw a bezier curve surrounding an ellipse with a given margin :

I want to achieve this programmatically, so if I changes the ellipse size, the curve will follow it.
At the moment I've made this function :
function bezierPathTopRounded(ellipse, margin) {
    var box = ellipse.paper.getBBox();

    var leftX = box.x - margin; 

    var rightX = box.x + margin + box.width;

    var y = box.y + box.height/2 - margin; 

    var p = ""M ""+ leftX  + "", ""+ y
    + "" C "" //could be relative too
    + ( box.x - margin + (box.width/15)  )  + "", "" + ( box.y + margin - (box.height/4.5)  ) + "" ""
    + ( box.x + margin + box.width - (box.width/15)  )  + "", "" + ( box.y + margin - (box.height/4.5) ) + "" ""
    + rightX +"", "" + y;

    return p;   
}

But I can't figure out how to calculate this direction points values so that it will work with any ellipse :

box.width/15
box.height/4.5

There is a fiddle with this example.
I've read this stackoverflow question and I tried the same on my example, but still can't figure out a simple solution, it remains random...
Edit
Now I'm trying with an elliptical Arc, the result is worser than with a Bezier Path :

There is the function I'm using. If I remove the margin it follows exactly my ellipse... Finally this is the matter is how may I follow the ellipse with a margin ?
function borderPath(ellipse, margin, flag) {
    var flag = flag == undefined ? 1 : 0;

    var box = ellipse.paper.getBBox();

    var leftX = box.x - margin;

    var rightX = box.x + margin + box.width;

    var y = box.y + box.height/2;
    y += (flag == 1) ? -margin : margin;

    var rx = box.width/2 + margin;
    var ry = box.height/2;

    var p = ""M ""+ leftX + "", ""+ y
    + "" A ""
    + rx + "" "" + ry
    + "" 0 0 ""+ flag +"" ""
    + rightX +"", "" + y;

    return p;
}

See the updated fiddle here.
Really sorry for the awful colors, those are for example purpose.
","If you want to do this with Bezier curves, you'll have to decide how ""wrong"" you want it to look. Bezier curves cannot represent circular (and by extension, elliptical) curves, they can only get really close, in the same way a polygon can, just with higher precision using fewer sections.
I describe both circle-approximation and curve offsetting using Bezier curves in my primer on Bezier curves, http://pomax.github.io/bezierinfo/#circles_cubic and http://pomax.github.io/bezierinfo/#offsetting respectively, but if you're coding this from scratch particularly the offsetting will be overkill if you only need it for what you describe in your example.
Instead, I'd recommend firing up Inkscape or Illustrator, turning on the grid overlay, and drawing a bezier curve around your ellipse. Make it look good, then check what the coordinates are, and use that as reliable-enough information for implementing in your canvas program. You probably don't need mathematically rigidly correct, as long as people don't go ""that looks wrong"", you should be just fine.
","1793","<svg><raphael><bezier><ellipse><elliptic-curve>","1","2","3","2013-04-26 07:59:49","16231473","5","","-1","","2017-05-23 11:45:01","2013-04-19 08:03:34",""
"16100048","Drawing a portion of an ellipse programmatically with a Bezier or an Elliptical path — SVG and raphael.js","I'm trying to draw a bezier curve surrounding an ellipse with a given margin :

I want to achieve this programmatically, so if I changes the ellipse size, the curve will follow it.
At the moment I've made this function :
function bezierPathTopRounded(ellipse, margin) {
    var box = ellipse.paper.getBBox();

    var leftX = box.x - margin; 

    var rightX = box.x + margin + box.width;

    var y = box.y + box.height/2 - margin; 

    var p = ""M ""+ leftX  + "", ""+ y
    + "" C "" //could be relative too
    + ( box.x - margin + (box.width/15)  )  + "", "" + ( box.y + margin - (box.height/4.5)  ) + "" ""
    + ( box.x + margin + box.width - (box.width/15)  )  + "", "" + ( box.y + margin - (box.height/4.5) ) + "" ""
    + rightX +"", "" + y;

    return p;   
}

But I can't figure out how to calculate this direction points values so that it will work with any ellipse :

box.width/15
box.height/4.5

There is a fiddle with this example.
I've read this stackoverflow question and I tried the same on my example, but still can't figure out a simple solution, it remains random...
Edit
Now I'm trying with an elliptical Arc, the result is worser than with a Bezier Path :

There is the function I'm using. If I remove the margin it follows exactly my ellipse... Finally this is the matter is how may I follow the ellipse with a margin ?
function borderPath(ellipse, margin, flag) {
    var flag = flag == undefined ? 1 : 0;

    var box = ellipse.paper.getBBox();

    var leftX = box.x - margin;

    var rightX = box.x + margin + box.width;

    var y = box.y + box.height/2;
    y += (flag == 1) ? -margin : margin;

    var rx = box.width/2 + margin;
    var ry = box.height/2;

    var p = ""M ""+ leftX + "", ""+ y
    + "" A ""
    + rx + "" "" + ry
    + "" 0 0 ""+ flag +"" ""
    + rightX +"", "" + y;

    return p;
}

See the updated fiddle here.
Really sorry for the awful colors, those are for example purpose.
","Using bezier curves to draw elliptical path may cause you headaches. As you said in a comment, you are using path arc which works well with RaphaelJS.
Documentation about all the values it expects, especially the flags, can be found at http://www.svgbasics.com/arcs.html .
","1793","<svg><raphael><bezier><ellipse><elliptic-curve>","1","0","3","2013-04-26 07:59:49","16231473","5","","-1","","2017-05-23 11:45:01","2013-04-19 08:03:34",""
"16100048","Drawing a portion of an ellipse programmatically with a Bezier or an Elliptical path — SVG and raphael.js","I'm trying to draw a bezier curve surrounding an ellipse with a given margin :

I want to achieve this programmatically, so if I changes the ellipse size, the curve will follow it.
At the moment I've made this function :
function bezierPathTopRounded(ellipse, margin) {
    var box = ellipse.paper.getBBox();

    var leftX = box.x - margin; 

    var rightX = box.x + margin + box.width;

    var y = box.y + box.height/2 - margin; 

    var p = ""M ""+ leftX  + "", ""+ y
    + "" C "" //could be relative too
    + ( box.x - margin + (box.width/15)  )  + "", "" + ( box.y + margin - (box.height/4.5)  ) + "" ""
    + ( box.x + margin + box.width - (box.width/15)  )  + "", "" + ( box.y + margin - (box.height/4.5) ) + "" ""
    + rightX +"", "" + y;

    return p;   
}

But I can't figure out how to calculate this direction points values so that it will work with any ellipse :

box.width/15
box.height/4.5

There is a fiddle with this example.
I've read this stackoverflow question and I tried the same on my example, but still can't figure out a simple solution, it remains random...
Edit
Now I'm trying with an elliptical Arc, the result is worser than with a Bezier Path :

There is the function I'm using. If I remove the margin it follows exactly my ellipse... Finally this is the matter is how may I follow the ellipse with a margin ?
function borderPath(ellipse, margin, flag) {
    var flag = flag == undefined ? 1 : 0;

    var box = ellipse.paper.getBBox();

    var leftX = box.x - margin;

    var rightX = box.x + margin + box.width;

    var y = box.y + box.height/2;
    y += (flag == 1) ? -margin : margin;

    var rx = box.width/2 + margin;
    var ry = box.height/2;

    var p = ""M ""+ leftX + "", ""+ y
    + "" A ""
    + rx + "" "" + ry
    + "" 0 0 ""+ flag +"" ""
    + rightX +"", "" + y;

    return p;
}

See the updated fiddle here.
Really sorry for the awful colors, those are for example purpose.
","I've manage to make an elliptical arc according to the ellipse and its margin. 
Than i'm simply hiding the part I don't want with a rectangle.
Here is the function :
function borderPath(ellipse, flag) {
    var flag = flag == undefined ? 1 : flag;

    var box = ellipse.paper.getBBox();

    var leftX = box.x;

    var rightX = box.x + box.width;

    var y = box.y + box.height/2;

    var rx = box.width/2;
    var ry = box.height/2;

    var p = ""M ""+ leftX + "", ""+ y
    + "" A ""
    + rx + "" "" + ry
    + "" 0 0 ""+ flag +"" ""
    + rightX +"", "" + y;

    return p;
}

","1793","<svg><raphael><bezier><ellipse><elliptic-curve>","1","1","3","2013-04-26 07:59:49","16231473","5","","-1","","2017-05-23 11:45:01","2013-04-19 08:03:34",""
"15875281","Perl - How to convert bitcoin private keys to addresses with elliptic curve math","I have a large dump (~25K) of all the private keys from my bitcoin wallet, but I don't have a mapping to the associated addresses for each private key. I need the address before I can recreate the wallet because I need to skip some of the addresses and not add them to the new wallet.
I was pointed to a python tool that includes the conversion method: pywallet, but I'd rather do this in Perl, so I can more easily script it. I also found these two JavaScript sites that do this: bitaddress.org and brainwallet.org.
I found the following libraries on CPAN, which sound like they might be helpful to do this, but I have no idea how to plug the pieces together: Math::EllipticCurve::Prime, Crypt::OpenSSL::EC. The documentation for the former says it's really slow, the latter is probably faster because it uses a C library, but the documentation is confusing. I also found some elliptic curve code on Rosetta Code. And there used to be a Crypt::ECDSA on CPAN, but was deleted at some point.
So what's the best, and fast, way to get the bitcoin address from a private key using Perl?
","You should check first this: https://github.com/grondilu/libbitcoin-perl - maybe will give your some ideas.
","1738","<perl><elliptic-curve><bitcoin>","3","0","1","2013-04-08 16:30:49","","5","1","1337","","2013-04-08 16:30:49","2013-04-08 09:08:22",""
"35616770","Derive Key with ECDiffieHellmanP256","I am working on a project to integrate with the new Push API that exists in Firefox and is being developed as a W3C standard.
Part of this is encrypting the data. The server will receive a Diffie Hellman P256 Curve (Generated in JS using var key = subscription.getKey('p256dh');)
An example of this when converted to a .NET base64 is 

BOAiqZO6ucAzDlZKKhF1aLjNpU8+R2Pfsz4bQzNpV145D+agNxvLqyu5Q2tLalK2w31RpoDHE8Sipo0m2jiX4WA=

However I ran into issues generating the Derived Material.
var key1 = Convert.FromBase64String(""<stringFromAbove>"").ToList() // You can criticize my .toList inefficiencies later

// .NET doesn't like the key without these prefixes. See here
// http://stackoverflow.com/questions/24251336/import-a-public-key-from-somewhere-else-to-cngkey
// I know the bytes don't match that post, but that is because the key type is different between their example and mine.
var keyType = new byte[] { 0x45, 0x43, 0x4B, 0x31 };
var keyLength = new byte[] { 0x20, 0x00, 0x00, 0x00 };
key1.RemoveAt(0);
key1 = keyType.Concat(keyLength).Concat(key1).ToList();

ECDiffieHellmanCng a = new ECDiffieHellmanCng();
a.KeyDerivationFunction = ECDiffieHellmanKeyDerivationFunction.Hash;
// If I set this as CngAlgorithm.Sha256 it works, but that's not what Firefox gives me.
a.HashAlgorithm = CngAlgorithm.ECDiffieHellmanP256; 
a.KeySize = 256; // It complains if I don't add this since keys are different lengths.

// Now time to actually import the key
CngKey k = CngKey.Import(key1.ToArray(), CngKeyBlobFormat.EccPublicBlob); // Works successfully
byte[] derivedMaterial = a.DeriveKeyMaterial(k); // Exception Here


System.Security.Cryptography.CryptographicException: The requested operation is not supported.

What do I not understand correctly (or on the more sad side, what is not implemented correctly (or at all) in windows/.NET)?
As an alternative, if somebody could explain how to port this Node JS library to .NET that'd work too (I think that's a bit of a reach) 
Update
I needed to keep working through the rest of the problem and not be held up by the encryption, so I used a Node.JS Wrapper to allow for further development on the .NET side. The node code simply generates the local public key and the Shared secret and returns those values to me. I still need to get this working without the Node wrapper.
Because of this test I can confirm that the rest of the code (not included here) works, so the issue definitely lies in the code above (and my inability to generate the derived key material if the HashAlgorithm is specified as CngAlgorithm.ECDiffieHellmanP256
","This solution is only confirmed working on Windows 10 64-bit. It is confirmed not working on Windows 8.1 64 bit, and is untested on other platforms.
The problem is that ECDiffieHellmanP256 is not a hash algorithm, but you are specifying to use a hash key derivation function. Your KeyDerivationFunction should be set to ECDiffieHellmanKeyDerivationFunction.Tls, and you need to specify the seed and label for the KDF.
Your fixed code looks like this:
var key1 = Convert.FromBase64String(""BOAiqZO6ucAzDlZKKhF1aLjNpU8+R2Pfsz4bQzNpV145D+agNxvLqyu5Q2tLalK2w31RpoDHE8Sipo0m2jiX4WA="").ToList();
var keyType = new byte[] { 0x45, 0x43, 0x4B, 0x31 };
var keyLength = new byte[] { 0x20, 0x00, 0x00, 0x00 };
key1.RemoveAt(0);
key1 = keyType.Concat(keyLength).Concat(key1).ToList();

ECDiffieHellmanCng a = new ECDiffieHellmanCng();
a.KeyDerivationFunction = ECDiffieHellmanKeyDerivationFunction.Tls;

byte[] label = new byte[32];
string labelStr = ""The purpose"";
Encoding.ASCII.GetBytes(labelStr, 0, labelStr.Length, label, 0);
a.Label = label;

byte[] seed = new byte[32];
RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();
rng.GetBytes(seed);
a.Seed = seed;

a.HashAlgorithm = CngAlgorithm.ECDiffieHellmanP256;
a.KeySize = 256;

CngKey k = CngKey.Import(key1.ToArray(), CngKeyBlobFormat.EccPublicBlob);
byte[] derivedMaterial = a.DeriveKeyMaterial(k);

Note that I set a nonsense value to the a.Label property.
The NIST SP 800-108 publication defines the label as:

Label – A string that identifies the purpose for the derived keying material, which is encoded as a binary string.

I'm not sure what the purpose should be set to in your specific context. If anyone has a better understanding what this string should be, please leave a comment.
Also note that if you're going to call this function repeatedly, you should probably keep a persistent copy of the RNGCryptoServiceProvider and use that.
Thanks to a comment by Simon Mourier which got me on the right track.
","1736","<c#><elliptic-curve><diffie-hellman>","15","5","1","2016-03-04 00:08:32","35783393","13","1","2106228","","2016-02-27 21:31:36","2016-02-25 01:50:08",""
"14072095","Reading back ECPrivateKey from JKS KeyStore","I'm trying to read back an ECPrivateKey (including certificate chain) from a JKS KeyStore as shown in the code below.
String storeType = ""JKS"", storePass = ""secret"", storePath = ""c:/keystore.ks"";
ECNamedCurveParameterSpec bcParamSpec = ECNamedCurveTable.getParameterSpec(""brainpoolp224r1"");
ECNamedCurveSpec jceParamSpec = new ECNamedCurveSpec(bcParamSpec.getName(), bcParamSpec.getCurve(), bcParamSpec.getG(), bcParamSpec.getN(), bcParamSpec.getH(), bcParamSpec.getSeed());

KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(""EC"");
keyPairGenerator.initialize(jceParamSpec);
KeyPair keyPair = keyPairGenerator.generateKeyPair();
ECPublicKey publicKey = (ECPublicKey)keyPair.getPublic();
ECPrivateKey privateKey = (ECPrivateKey)keyPair.getPrivate();

Certificate trustCert =  createX509Certificate(""CN=CA"", ""CN=CA"", publicKey, privateKey, ""SHA224withECDSA"");
Certificate[] chain = { createX509Certificate(""CN=Client"", ""CN=CA"", publicKey, privateKey, ""SHA224withECDSA""), trustCert };

KeyStore keyStore = KeyStore.getInstance(storeType);
keyStore.load(null, storePass.toCharArray());
keyStore.setKeyEntry(""eckey"", privateKey, storePass.toCharArray(), chain);

FileOutputStream outputStream = new FileOutputStream(storePath);
keyStore.store(outputStream, storePass.toCharArray());
outputStream.close();

/* Now read it back */
FileInputStream inputStream = new FileInputStream(storePath);
KeyStore keyStore2 = KeyStore.getInstance(storeType);
keyStore2.load(inputStream, storePass.toCharArray());

Key privateKey2 = keyStore2.getKey(""eckey"", storePass.toCharArray());

The curve I'm using is not supported by the Sun/Oracle security provider, so I'm using Bouncy Castle. BC is inserted at position 0 in my list of security providers. Storing works fine, reading back fails:
java.security.UnrecoverableKeyException: Unknown named curve: 1.3.36.3.3.2.8.1.1.5
    at sun.security.provider.KeyProtector.recover(KeyProtector.java:338)
at sun.security.provider.JavaKeyStore.engineGetKey(JavaKeyStore.java:138)
at sun.security.provider.JavaKeyStore$JKS.engineGetKey(JavaKeyStore.java:55)
at java.security.KeyStore.getKey(KeyStore.java:792)

Apparently the JKS KeyStore implementation doesn't loop through the list of security providers. This works fine, however, for other KeyStore types that are supported by BC: PKCS12 and BKS. Is there a way to use JKS as KeyStore type while using BC to recover the key?
The createX509Certificate method used in the code above is given by:
private static X509Certificate createX509Certificate(String dn, String issuer, PublicKey publicKey, PrivateKey privateKey, String sigAlg) throws Exception {
    X509V3CertificateGenerator certGenerator = new X509V3CertificateGenerator();
certGenerator.setSerialNumber(BigInteger.valueOf(Math.abs(new Random().nextLong())));
certGenerator.setIssuerDN(new X509Name(issuer));
    certGenerator.setSubjectDN(new X509Name(dn));
    certGenerator.setNotBefore(Calendar.getInstance().getTime());
certGenerator.setNotAfter(Calendar.getInstance().getTime());
certGenerator.setPublicKey(publicKey);
certGenerator.setSignatureAlgorithm(sigAlg);
X509Certificate certificate = (X509Certificate)certGenerator.generate(privateKey, ""BC"");
return certificate;
}

","My only thought would be to implement your own Provider that could either proxy ""KeyFactory"" request to a BouncyCastle provider and the rest to another one that knows about JKS or proxy all requests to BouncyCastle with the exception of the ""KeyStore"" request. Here's documentation on how to implement a provider.
","1714","<java><bouncycastle><keystore><elliptic-curve>","4","2","1","2013-01-04 22:56:48","14166372","1","","27190","","2012-12-28 18:50:58","2012-12-28 15:51:49",""
"5909849","Random characters when retrieving private/public KEY (OpenSSL) from file","I am trying to make a program that after it generates a public/private key pair using OppenSSL EC function EC_KEY_generate_key store them in separate files and retrieve them to generate an ECDH KEY.
My problem is that although I store them correctly(without any additional character), when I read the file and try to convert the hex characters to BIGNUM a character '04' or '00' randomly appears (or even sometimes not). So when I try to set the public/private keys and check the whole key, it fails. Could anyone help me with this issue? Could the key checking failure be caused by these characters or they are normal?
Here is my code that generates/stores the private key(the public one is the same):
    EC_KEY *b = NULL;
const BIGNUM *ppriv_b;
FILE *claveprivb;
const EC_GROUP *group;

b = EC_KEY_new_by_curve_name(NID_X9_62_prime192v1);
group = EC_KEY_get0_group(b);

EC_KEY_generate_key(b);
    claveprivb = fopen(""/tmp/mnt/claveprivb"", ""w+"");
    ppriv_b = EC_KEY_get0_private_key(b);
if ((ppriv_b != NULL)) 
    BN_print_fp(claveprivb,ppriv_b);
    fclose(claveprivb);

    //Afterwards do the same with the public key

And here is my code for retrieving the Private key:
    int i, s, blen, bout, ret = 0;
unsigned char *bbuf;
FILE *clavepriv, *clavetotalb;
const char cpriv_string[PRIVATE_KEY_SIZE];
BIGNUM *priv;
EC_KEY *b = NULL;
const EC_GROUP *groupb;

    b = EC_KEY_new_by_curve_name(NID_X9_62_prime192v1);
groupb = EC_KEY_get0_group(b);
    //Open the file with the hexadecimals (PRIVATE KEY)
    clavepriv = fopen(""/tmp/mnt/claveprivb"", ""r"");
kk2 = fread(&cpriv_string, sizeof(char), PRIVATE_KEY_SIZE, clavepriv);

priv = BN_new();
    //THIS FUNCTION (HEX2BN) GENERATES THE RANDOM CHARACTER: 
kk2 = BN_hex2bn(&priv, cpriv_string);
ret = EC_KEY_set_private_key(b, priv);

    //HERE I retrieve the public key by the same way and set it into EC_KEY b,
    //the same random character appears in the public key

    if (!EC_KEY_check_key(b)) {
    printf(""EC_KEY_check_key failed\n"");
} else {
    printf(""Key verified OK\n"");
}
    //It fails when try to check it.

int k;
clavetotalb = fopen(""/tmp/mnt/clavetotalb"", ""w+"");
k = EC_KEY_print_fp(clavetotalb, b, 0);

bout = ECDH_compute_key(bbuf, blen, EC_KEY_get0_public_key(b), b,
        KDF1_SHA1);

Any advise would be very appreciated!!!!Thanks!!!
After I read the answering post, I have tried to use these methods to decode and encode the public key, but by the time I try to compute the ECDH key I get a segmentation fault. The target of my program is to generate two EC keys, write them into several files and then, retrieve them and compute an ECDH key with them. This is the list of the things I change from my original program in the first thread, please tell me if something is wrong:
* Generate EC key (public & private)
* Decode the private key with i2d_ECPrivatekey()
* Decode the public key with i2o_ECPublickey()
* Write them into several files.
* Read the file with the public key.
* Encode it with o2i_ECPublickey()
* Read the file with the private key.
* Encode it with d2i_ECPrivatekey().
* Compute the ECDH key.(Here is where I get the segmentation fault)

I am quite fed up with this OpenSSL library...it is so inaccessible for first-time users...
","An EC public key is not an integer; it is a curve point which can be thought as a pair of integers. Those two integers are the point coordinates (often called X and Y).
Some notations: the curve is defined in a finite field. The finite field elements can be mapped to integers from 0 to q-1, where q is the field size (in the case of the curve you use, q is a prime integer slightly lower than 2192). Let n be the size in bytes of q-1: this is the size of the unsigned big endian representation of q-1, namely the integer such that 28(n-1) <= q-1 < 28n. For your curve, n = 24.
With these notations, the standard representation of a curve point consists in exactly 1+2n bytes, which are, in that order:

the byte of value 0x04
the unsigned big endian representation of x over n bytes
the unsigned big endian representation of y over n bytes

So this explains your '0x04' extra byte; also, since x and y are to be encoded over exactly n bytes, this may force the inclusion extra '0x00' bytes, in case their actual value turns out to be smaller than 28(n-1) (with your curve, this should be the case, on average, for about 1/128th of public keys).
There are other variants of this representation (compressed, in which the total size is 1+n and the first byte is 0x02 or 0x03, and hybrid, of size 1+2n, where the first byte is 0x06 or 0x07), but they are considered as optional in the ECDSA standard (X9.62-2005) and rumor has it that the compressed format is patented.
Bottom-line: if you want to encode and decode EC public keys, you should look at o2i_ECPublicKey() and i2o_ECPublicKey(), and handle them as sequence of arbitrary bytes, not encoded integers.
","1599","<openssl><elliptic-curve>","4","5","1","2014-06-06 18:40:58","5911512","1","","464709","","2014-06-06 18:40:58","2011-05-06 10:07:12",""
"10118224","How to convert public key to BigInteger","I need to convert a public key into a BigInteger. In the code below I have extracted the private key and stored it as BigInteger.  But when I followed the same method for the public it is not working.
public static void main(String[] args) throws  Exception {
    Security.addProvider(new BouncyCastleProvider());
    BigInteger ZERO=new BigInteger(""0"");
    int c;
    //  ECParameterSpec ecSpec = ECNamedCurveTable.getParameterSpec(""P-224"");
    ECCurve curve = new ECCurve.Fp(
          new       BigInteger(""883423532389192164791648750360308885314476597252960362792450860609699839""), // q
          new BigInteger(""7fffffffffffffffffffffff7fffffffffff8000000000007ffffffffffc"", 16), // a
          new BigInteger(""6b016c3bdcf18941d0d654921475ca71a9db2fb27d1d37796185c2942c0a"", 16)); // b

    ECParameterSpec ecSpec = new ECParameterSpec(
          curve,
          curve.decodePoint( Hex.decode(""020ffa963cdca8816ccc33b8642bedf905c3d358573d3f27fbbd3b3cb9aaaf"")), // G
              new   BigInteger(""883423532389192164791648750360308884807550341691627752275345424702807307"")); // n
    KeyPairGenerator kpg = KeyPairGenerator.getInstance(""ECDSA"", ""BC"");
    kpg.initialize(ecSpec, new SecureRandom());
    KeyPair keyPair = kpg.generateKeyPair();
    PublicKey pubKey = keyPair.getPublic();
    System.out.println(pubKey);
    PrivateKey privKey = keyPair.getPrivate();
    System.out.println(privKey);
    BigInteger s = ((ECPrivateKey) privKey).getS();
    System.out.println(s);

","In ECDSA the private key is a BigInteger, but the public key is an ECPoint (consisting of two BigInteger values). Converting it to BigInteger won't work. Use
ECPoint w = ((ECPublicKey)pubKey).getW();
BigInteger wx = w.getAffineX(), wy = w.getAffineY();
System.out.println(wx);
System.out.println(wy);

","1562","<java><elliptic-curve>","1","1","1","2012-12-27 21:43:25","","2","","104223","","2012-04-13 04:11:16","2012-04-12 06:08:04",""
"21936593","Get standard, printable public-key string for ECDSA","I'm looking to be able to generate the same kind of public-key string that you'd get from ""ssh-keygen -t ecdsa"". I have an EC_KEY.
I tried using:
PEM_write_bio_EC_PUBKEY(bio_out, ecdsa);

...But I get a string that's entirely too large.
I tried this:
ec_group = EC_KEY_get0_group(pubkey->ecdsa);
ec_point = EC_KEY_get0_public_key(pubkey->ecdsa);

encoded = EC_POINT_point2hex(
            ec_group,
            ec_point,
            POINT_CONVERSION_UNCOMPRESSED,
            NULL);

...But obviously I want something that's base64-encoded.
Can anyone give me direction, here?
","
I'm looking to be able to generate the same kind of public-key string that you'd get from ""ssh-keygen -t ecdsa"".

You can write the private key (id_ecdsa) with PEM_write_ECPrivateKey. A quick search of the sources:
$ grep -R PrivateKey *
...
ssh-keygen.c:           ok = PEM_write_DSAPrivateKey(stdout, k->dsa, NULL,
ssh-keygen.c:           ok = PEM_write_ECPrivateKey(stdout, k->ecdsa, NULL,
ssh-keygen.c:           ok = PEM_write_RSAPrivateKey(stdout, k->rsa, NULL,


However, I don't believe OpenSSL will write the ""public-key string"" (id_ecdsa.pub) in the format string you expect:
$ cat id_ecdsa.pub 
ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlz
dHAyNTYAAABBBEs/aVnJ16NcSOTGVNbk8ifPvPbZ0Edxd7uclo/5chC81MK7
iFb/++6parCUv0FBh47MBxV+k4rxGJ1OESe4Vxs= jwalton@debian-q500

That's because OpenSSL lacks the function that applies the SSH formatting. OpenSSL only deals with DER and PEM encodings, and not SSH encodings.
For completeness, there is a call to PEM_write_EC_PUBKEY, but PEM formatting does not include prologue (like ecdsa-sha2-nistp256) or epilogue (like email address).
","1527","<openssl><elliptic-curve>","1","0","3","2016-05-10 18:43:15","24472697","0","0","","","","2014-02-21 14:02:47",""
"21936593","Get standard, printable public-key string for ECDSA","I'm looking to be able to generate the same kind of public-key string that you'd get from ""ssh-keygen -t ecdsa"". I have an EC_KEY.
I tried using:
PEM_write_bio_EC_PUBKEY(bio_out, ecdsa);

...But I get a string that's entirely too large.
I tried this:
ec_group = EC_KEY_get0_group(pubkey->ecdsa);
ec_point = EC_KEY_get0_public_key(pubkey->ecdsa);

encoded = EC_POINT_point2hex(
            ec_group,
            ec_point,
            POINT_CONVERSION_UNCOMPRESSED,
            NULL);

...But obviously I want something that's base64-encoded.
Can anyone give me direction, here?
","@noloader reminded me that I could look in ssh-keygen.c .
This is what I found.
This is called for all key types (rsa, dsa, ecdsa):
key_to_blob(key, &blob, &len);
uu = xmalloc(2*len);
n = uuencode(blob, len, uu, 2*len);
if (n > 0) {
        fprintf(f, ""%s %s"", key_ssh_name(key), uu);
        success = 1;
}

Where key_to_blob() eventually leads to to_blob():
to_blob(const Key *key, u_char **blobp, u_int *lenp, int force_plain)
{
        Buffer b;
        int len, type;

        if (blobp != NULL)
                *blobp = NULL;
        if (lenp != NULL)
                *lenp = 0;
        if (key == NULL) {
                error(""key_to_blob: key == NULL"");
                return 0;
        }
        buffer_init(&b);
        type = force_plain ? key_type_plain(key->type) : key->type;
        switch (type) {
        case KEY_DSA_CERT_V00:
        case KEY_RSA_CERT_V00:
        case KEY_DSA_CERT:
        case KEY_ECDSA_CERT:
        case KEY_RSA_CERT:
        case KEY_ED25519_CERT:
                /* Use the existing blob */
                buffer_append(&b, buffer_ptr(&key->cert->certblob),
                    buffer_len(&key->cert->certblob));

Which eventually leads to this:
        buffer_clear(&k->cert->certblob);
        buffer_put_cstring(&k->cert->certblob, key_ssh_name(k));

        /* -v01 certs put nonce first */
        arc4random_buf(&nonce, sizeof(nonce));
        if (!key_cert_is_legacy(k))
                buffer_put_string(&k->cert->certblob, nonce, sizeof(nonce));

        /* XXX this substantially duplicates to_blob(); refactor */
        switch (k->type) {
        case KEY_DSA_CERT_V00:
        case KEY_DSA_CERT:
                buffer_put_bignum2(&k->cert->certblob, k->dsa->p);
                buffer_put_bignum2(&k->cert->certblob, k->dsa->q);
                buffer_put_bignum2(&k->cert->certblob, k->dsa->g);
                buffer_put_bignum2(&k->cert->certblob, k->dsa->pub_key);
                break;
#ifdef OPENSSL_HAS_ECC
        case KEY_ECDSA_CERT:
                buffer_put_cstring(&k->cert->certblob,
                    key_curve_nid_to_name(k->ecdsa_nid));
                buffer_put_ecpoint(&k->cert->certblob,
                    EC_KEY_get0_group(k->ecdsa),
                    EC_KEY_get0_public_key(k->ecdsa));
                break;
#endif

Which eventually leads to this (2):
int
buffer_put_ecpoint_ret(Buffer *buffer, const EC_GROUP *curve,
    const EC_POINT *point)
{
        u_char *buf = NULL;
        size_t len;
        BN_CTX *bnctx;
        int ret = -1;

        /* Determine length */
        if ((bnctx = BN_CTX_new()) == NULL)
                fatal(""%s: BN_CTX_new failed"", __func__);
        len = EC_POINT_point2oct(curve, point, POINT_CONVERSION_UNCOMPRESSED,
            NULL, 0, bnctx);
        if (len > BUFFER_MAX_ECPOINT_LEN) {
                error(""%s: giant EC point: len = %lu (max %u)"",
                    __func__, (u_long)len, BUFFER_MAX_ECPOINT_LEN);
                goto out;
        }
        /* Convert */
        buf = xmalloc(len);
        if (EC_POINT_point2oct(curve, point, POINT_CONVERSION_UNCOMPRESSED,
            buf, len, bnctx) != len) {
                error(""%s: EC_POINT_point2oct length mismatch"", __func__);
                goto out;
        }
        /* Append */
        buffer_put_string(buffer, buf, len);
        ret = 0;
 out:
        if (buf != NULL) {
                bzero(buf, len);
                free(buf);
        }
        BN_CTX_free(bnctx);
        return ret;
}

Where the actual string is built here:
buf = xmalloc(len);
if (EC_POINT_point2oct(curve, point, POINT_CONVERSION_UNCOMPRESSED,
    buf, len, bnctx) != len) {
        error(""%s: EC_POINT_point2oct length mismatch"", __func__);
        goto out;
}
/* Append */
buffer_put_string(buffer, buf, len);

Where the following is used to render an ""octet string"" (bnctx should be allowed to be NULL):
EC_POINT_point2oct(curve, point, POINT_CONVERSION_UNCOMPRESSED, buf, len, bnctx);

","1527","<openssl><elliptic-curve>","1","1","3","2016-05-10 18:43:15","24472697","0","0","","","","2014-02-21 14:02:47",""
"21936593","Get standard, printable public-key string for ECDSA","I'm looking to be able to generate the same kind of public-key string that you'd get from ""ssh-keygen -t ecdsa"". I have an EC_KEY.
I tried using:
PEM_write_bio_EC_PUBKEY(bio_out, ecdsa);

...But I get a string that's entirely too large.
I tried this:
ec_group = EC_KEY_get0_group(pubkey->ecdsa);
ec_point = EC_KEY_get0_public_key(pubkey->ecdsa);

encoded = EC_POINT_point2hex(
            ec_group,
            ec_point,
            POINT_CONVERSION_UNCOMPRESSED,
            NULL);

...But obviously I want something that's base64-encoded.
Can anyone give me direction, here?
","It turns out that the public-key string is PKCS8. At the command-line, you can convert from OpenSSL ECDSA to OpenSSH with OpenSSL:
$ openssl ecparam -genkey -name prime256v1 -noout -out prime256v1.key.pem
$ openssl ec -in prime256v1.key.pem -pubout | ssh-keygen -f /dev/stdin -i -m PKCS8
read EC key
writing EC key
ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBC3FrhznL2pQ/titzgnWrbznR3ve2eNEgevog/aS7SszS9Vkq0uFefavBF4M2Txc34sIQ5TPiZxYdm9uO1siXSw=

(I wrote about it here: https://the.randomengineer.com/2014/06/28/creating-those-neat-openssh-public-keys-and-dsa-and-ecdsa-keys-with-openssl-in-general/)
Just find a PKCS8 library for whatever language you're using. For Python, it looks like both PyCrypto and Paramiko support it, based on this Gist: https://gist.github.com/jtriley/7270594
First, this:
sha1digest = hashlib.sha1(k.exportKey('DER', pkcs=8)).hexdigest()

Where exportKey contains this:
if use_pycrypto:
    key = RSA.importKey(key_fobj, passphrase=passphrase)
else:
    key = paramiko.RSAKey.from_private_key(key_fobj,
                                           password=passphrase)

","1527","<openssl><elliptic-curve>","1","1","3","2016-05-10 18:43:15","24472697","0","0","","","","2014-02-21 14:02:47",""
"52004341","Create EC private key from hex string","I am wondering if this is a correct way to create PrivateKey object in Java from HEX string from this website: https://kjur.github.io/jsrsasign/sample/sample-ecdsa.html
Create a BigInteger from a HEX String:
BigInteger priv = new BigInteger(privateKeyFromSite, 16);

And pass to this method:
import java.math.BigInteger;
import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.spec.InvalidKeySpecException;

import org.bouncycastle.jce.ECNamedCurveTable;
import org.bouncycastle.jce.spec.ECParameterSpec;
import org.bouncycastle.jce.spec.ECPrivateKeySpec;


public static PrivateKey getPrivateKeyFromECBigIntAndCurve(BigInteger s, String curveName) {

    ECParameterSpec ecParameterSpec = ECNamedCurveTable.getParameterSpec(curveName);

    ECPrivateKeySpec privateKeySpec = new ECPrivateKeySpec(s, ecParameterSpec);
    try {
        KeyFactory keyFactory = KeyFactory.getInstance(EC);
        return keyFactory.generatePrivate(privateKeySpec);
    } catch (NoSuchAlgorithmException | InvalidKeySpecException e) {
        e.printStackTrace();
        return null;
    }
}

","Yes it's correct, an EC private key is just a number. If you print out your PrivateKey, you'll see the X and Y coordinates of the corresponding public key.
For example, let's say the following key pair was generated (secp256r1):

EC Private Key:
1b9cdf53588f99cea61c6482c4549b0316bafde19f76851940d71babaec5e569
EC Public Key:
0458ff2cd70c9a0897eb90a7c43d6a656bd76bb8089d52c259db6d9a45bfb37eb9882521c3b1e20a8bae181233b939174ee95e12a47bf62f41a62f1a20381a6f03

We plug the private key bytes into your function:
BigInteger priv = new BigInteger(""1b9cdf53588f99cea61c6482c4549b0316bafde19f76851940d71babaec5e569"", 16);
PrivateKey privateKey = getPrivateKeyFromECBigIntAndCurve(priv, ""secp256r1"");
System.out.println(privateKey);

And print it:
EC Private Key [91:05:8a:28:94:f9:5c:cb:c4:34:b8:69:e4:39:d4:57:59:c7:51:35]
        X: 58ff2cd70c9a0897eb90a7c43d6a656bd76bb8089d52c259db6d9a45bfb37eb9
        Y: 882521c3b1e20a8bae181233b939174ee95e12a47bf62f41a62f1a20381a6f03

As you can see, if you concatenate 04 + X + Y, you'll get the original public key, (04 is the uncompressed EC point tag).
","1501","<java><bouncycastle><elliptic-curve><ecdsa>","3","3","1","2019-10-03 13:06:00","52006151","1","2","","","","2018-08-24 12:18:49",""
"29924145","How to sign the Certificates with Elliptic curve private keys and ECDSA algorithm?","I am able to sign the certificates using bouncy castle with RSA private Keys and ""SHA256withRSA "" algorithm.  I have used below link for reference to achieve this.
Sign CSR using Bouncy Castle
Now I have my CAs with Elliptic Curve keys signed with ECDSA. Hence I want to sign the certificates with EC key and ""SHA256withECDSA"" algorithm by these CAs. 
However I am stuck at below snippet specific to RSA key, I want to use EC key.
ContentSigner sigGen = new BcRSAContentSignerBuilder(sigAlgId, digAlgId).build(privateKeyParam);

Please help me how we can achieve Certificate signing with ECDSA and EC keys
","Below code used to sign the certificates with EC private keys 
ContentSigner sigGen = new JcaContentSignerBuilder(""SHA256withECDSA"").build(new JcaPEMKeyConverter().getPrivateKey(PrivateKeyInfo));

","1465","<java><ssl><bouncycastle><elliptic-curve><ecdsa>","3","1","1","2016-05-12 12:27:31","37186879","2","0","-1","","2017-05-23 11:44:10","2015-04-28 15:54:04",""
"10998764","Matlab elliptic curves RMP function","function [X,Y,n] = PC(A,B,p)
% This function m-file finds and plots all the points that lie in E_p(A,B)
% These points are on the curve y^2 = x^3 + AX + b (mod p)
    RHS = zeros(3,1);
    LHS = zeros(3,1);
    X = zeros(2,1);
    Y = zeros(2,1);
    for i=0:1:(p-1)
        RHS(i+1) = (i)^3 + A*(i) + B;
        RHS(i+1) = rmp(RHS(i+1),p);
        LHS(i+1) = (i)^2;
        LHS(i+1) = rmp(LHS(i+1),p);

    end
    ii=1;
    for z=0:1:(p-1)
        I=find(RHS==z);
        J=find(LHS==z);
        q1 = isempty(I);
        q2 = isempty(J);
        if (q1) == 0
            if q2 == 0
                n=length(I);
                m=length(J);
                for h=1:1:n
                    for g=1:m
                        X(ii)=I(h)-1;
                        Y(ii)=J(g)-1;
                        ii=ii+1;
                    end
                end
            end
        end
    end
    n=length(X) + 1;
    %%%%%%%PLOTTING%%%%%%%%%%%
    h=plot(X,Y,'ko');
    set(h(1),'LineWidth',1.5)
    axis([0, (max(X)+1), 0,(max(Y)+1) ])
    xlabel('X','FontSize',15,'FontWeight','bold')
    ylabel('Y','FontSize',15,'FontWeight','bold')
    title(['The points in E_{',int2str(p),'}',int2str(A),',',int2str(B),')'],'FontSize',12,'FontWeight','bold')

the code will find and plot all the points on a specific prime curve. This m-file takes as its inputs, A,B and p and
produces two vectors X, Y which contain all the points (x, y) that lie on 
y2  x3 + Ax + B (mod p).
i just want to know the what is the rmp function and why it is used. i try to find it in matlab documentation, but i couldn't find it.
","","1454","<matlab><elliptic-curve>","0","","0","2013-09-10 04:29:35","","2","","328725","","2012-06-12 14:38:13","2012-06-12 14:28:40",""
"20684159","OpenSSL: Get random point on elliptic curve","I have an initialized elliptic curve (EC_GROUP). Is there a way to get random point with affine coordinates ??
This is way how i defined my curve:
BN_CTX *ctx;
EC_GROUP *curve;
BIGNUM *a, *b, *p, *order, *x, *y, *z;
EC_POINT *generator;

/* Binary data for the curve parameters */
unsigned char a_bin[28] =
        {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
        0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0xFF,0xFF,0xFF,0xFF,
        0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE};
unsigned char b_bin[28] =
        {0xB4,0x05,0x0A,0x85,0x0C,0x04,0xB3,0xAB,0xF5,0x41,
        0x32,0x56,0x50,0x44,0xB0,0xB7,0xD7,0xBF,0xD8,0xBA,
        0x27,0x0B,0x39,0x43,0x23,0x55,0xFF,0xB4};
unsigned char p_bin[28] =
        {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
        0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01};
unsigned char order_bin[28] =
        {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
        0xFF,0xFF,0xFF,0xFF,0x16,0xA2,0xE0,0xB8,0xF0,0x3E,
        0x13,0xDD,0x29,0x45,0x5C,0x5C,0x2A,0x3D };
unsigned char x_bin[28] =
        {0xB7,0x0E,0x0C,0xBD,0x6B,0xB4,0xBF,0x7F,0x32,0x13,
        0x90,0xB9,0x4A,0x03,0xC1,0xD3,0x56,0xC2,0x11,0x22,
        0x34,0x32,0x80,0xD6,0x11,0x5C,0x1D,0x21};
unsigned char y_bin[28] =
        {0xbd,0x37,0x63,0x88,0xb5,0xf7,0x23,0xfb,0x4c,0x22,
        0xdf,0xe6,0xcd,0x43,0x75,0xa0,0x5a,0x07,0x47,0x64,
        0x44,0xd5,0x81,0x99,0x85,0x00,0x7e,0x34};

unsigned char z_bin[28] = 
        {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
        0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
        0x0,0x0,0x0};

/* Set up the BN_CTX */
if(NULL == (ctx = BN_CTX_new())) handleErrors();

/* Set the values for the various parameters */
if(NULL == (a = BN_bin2bn(a_bin, 28, NULL))) handleErrors();
if(NULL == (b = BN_bin2bn(b_bin, 28, NULL))) handleErrors();
if(NULL == (p = BN_bin2bn(p_bin, 28, NULL))) handleErrors();
if(NULL == (order = BN_bin2bn(order_bin, 28, NULL))) handleErrors();
if(NULL == (x = BN_bin2bn(x_bin, 28, NULL))) handleErrors();
if(NULL == (y = BN_bin2bn(y_bin, 28, NULL))) handleErrors();
if(NULL == (z = BN_bin2bn(z_bin, 28, NULL))) handleErrors();

/* Create the curve */
if(NULL == (curve = EC_GROUP_new_curve_GFp(p, a, b, ctx))) handleErrors();

//if(EC_PO)

/* Create the generator */
if(NULL == (generator = EC_POINT_new(curve))) handleErrors();
if(1 != EC_POINT_set_affine_coordinates_GFp(curve, generator, x, y, ctx))
        handleErrors();

/* Set the generator and the order */
if(1 != EC_GROUP_set_generator(curve, generator, order, NULL))
        handleErrors();

Now I need some random points from this curve to implement optimized calculation, but I can't find a way to get random points.
","What you will do is:  

Initial a EC_POINT P as generator.
Find a random bignum k such that 0 < k < order (of the group).
Do scalar multiplication to get random point R = kP

Here's a function I just wrote, which will get random EC_POINT on given EC_GROUP. The result is stored in EC_POINT r. ctx can be NULL:
int EC_POINT_get_random(const EC_GROUP *group, EC_POINT *r, BN_CTX *ctx) {
    int ok = 0;
    BN_CTX *new_ctx = NULL;
    BIGNUM *k; 

    if (ctx == NULL) {
        ctx = new_ctx = BN_CTX_new();
        if (ctx == NULL)
            return -1; 
    }   
    k = BN_new();

    if (!EC_GROUP_get_order(group, k, ctx)) goto err;
    if (!BN_pseudo_rand(k, BN_num_bits(k), 0, 0)) goto err;
    if (!EC_POINT_mul(group,r,k,NULL,NULL,ctx)) goto err;

    ok = 1;
err:
    if (k) 
        BN_free(k);
    if (new_ctx != NULL)
        BN_CTX_free(new_ctx);
    return ok; 
}   

Here's a simple test main (not well written):
int main() {
    BN_CTX *ctx;
    BIGNUM *x, *y; 
    EC_GROUP *group;
    EC_POINT *P; 

    ctx = BN_CTX_new();
    x = BN_new(); y = BN_new();

    group = EC_GROUP_new_by_curve_name(NID_secp521r1); // take curve SN_secp521r1 as sample curve
    P = EC_POINT_new(group);
    EC_POINT_get_random(group,P,ctx);   

    // print (x,y) of P
    if (!EC_POINT_is_on_curve(group,P,ctx)) return -1; 
    if (!EC_POINT_get_affine_coordinates_GFp(group, P, x, y, ctx)) return -1; 
    fprintf(stdout, ""\nRandom Elliptic Curve Point P:\n     x = 0x"");
    BN_print_fp(stdout, x); 
    fprintf(stdout, ""\n     y = 0x"");
    BN_print_fp(stdout, y); 
    fprintf(stdout, ""\n"");
return 0;
}

","1434","<openssl><elliptic-curve>","3","6","1","2014-03-10 07:01:46","","0","","28128","","2014-03-10 07:01:46","2013-12-19 14:24:09",""
"29201387","How to generate an ECDHE public key with OpenSSL?","I'm trying to generate an ECDHE key using OpenSSL 1.0.2a on Windows and have the following sample code:
#include <openssl/crypto.h>
#include <openssl/evp.h>
#include <openssl/err.h>
#include <openssl/pem.h>
#include <openssl/ecdh.h>

int main()
{
    OpenSSL_add_all_algorithms(); ERR_load_crypto_strings();

    EVP_PKEY_CTX* parameters_context = EVP_PKEY_CTX_new_id(EVP_PKEY_EC, NULL);
    EVP_PKEY* cparameters = nullptr;
    EVP_PKEY* private_key = nullptr;

    if (EVP_PKEY_paramgen_init(parameters_context) != 1) { return 1; }
    if (EVP_PKEY_CTX_set_ec_paramgen_curve_nid(parameters_context, NID_sect571k1) != 1) { return 1; }
    if (EVP_PKEY_paramgen(parameters_context, &cparameters) != 1) { return 1; }

    EVP_PKEY_CTX* key_generation_context = EVP_PKEY_CTX_new(cparameters, NULL);

    if (!key_generation_context) { return 1; }
    if (EVP_PKEY_keygen_init(key_generation_context) != 1) { return 1; }        
    if (EVP_PKEY_keygen(key_generation_context, &private_key) != 1) { return 1; }

    BIO* bio = BIO_new(BIO_s_mem());
    PEM_write_bio_PUBKEY(bio, private_key); // <== This is where things go wrong.

    ERR_free_strings(); EVP_cleanup(); CRYPTO_cleanup_all_ex_data();
}

I tested the said code on other platforms (OSX and Debian Linux, using gcc) and it seems works fine (no errors reported under valgrind).
When I run it on Windows, it always fails on this line:
PEM_write_bio_PUBKEY(bio, private_key);

And I get this ""nice"" error screen:

I'm at loss figuring out what is wrong: from the many tutorials and documentation pages I could find, this seems to be the right way of doing things.
Before I spend another day trying to figure out what's wrong, I figured it might smarter to ask the community: is this the right way of generating and writing an ECDHE key as PEM format with OpenSSL ?
","It was indeed a bug in OpenSSL.
From the OpenSSL-dev mailing-list:

On Tue, Mar 31, 2015, ****** ******* wrote:
>

if (!combine)
        *pval = NULL;

I'd suggest deleting the two lines above. The structure should be
  cleared without this and the above line is wrong for non pointer
  fields anyway.
Steve.
  -- Dr Stephen N. Henson. OpenSSL project core developer. Commercial tech support now available see: http://www.openssl.org

See also this other question for details.
","1431","<c><openssl><elliptic-curve><diffie-hellman>","1","0","1","2015-04-01 23:09:52","29402408","6","","","","","2015-03-22 23:59:23",""
"42929802","ECDH on ios swift","I'm developing an iOS app and i would like to implemente ECDH for security.
I used this app (https://github.com/DigitalLeaves/AsymmetricCrypto) to generate a pair of key (private and public key), using :
private let kAsymmetricCryptoManagerKeyType = kSecAttrKeyTypeEC
private let kAsymmetricCryptoManagerKeySize = 256
private let kAsymmetricCryptoManagerCypheredBufferSize = 128
private let kAsymmetricCryptoManagerSecPadding: SecPadding = .PKCS1

So, i can get the private and public key as strings as follow :
private key :3b3aef4e27c61e376bb1440f6a3077199d6d5ec665f6cd3595483a05ed96c498
public key X :3a405b5877d2939aea9dfb2995a89f4d63fca3c0cbb2a9d066fe67a08c499163
public key Y : 69bdbfc0ddea97ee03e85eb335db589cfcbee54b71f7fd74f6bc7344b5539ed6

That works perfectly.
Now, what i want is to perform a ECDH to generate a shared secret between the private key that i have generated and a public key that i get (from another platform) like a string as : 
X: b1a2166411655482ad39630a480768dde4ccce5af4c53edec82496f17f0ddbfd
Y: e6dd01508da28f4f2295d9fee86239f88e8c5cbc94dbbb1f814b27c85d0d971a

So the first question is how to transform these two last lines of string into a SecKey to produce a public key.
And the second question is how to perform a ECDH between the private key that i have generated (as a SecKey) and the new public key that i wanna get in my first question.
Here is a bit of code i used to generate my key pair :
 func createSecureKeyPair(_ completion: ((_ success: Bool, _ error: AsymmetricCryptoException?) -> Void)? = nil) {
        // private key parameters
        let privateKeyParams: [String: AnyObject] = [
            kSecAttrIsPermanent as String: true as AnyObject,
            kSecAttrApplicationTag as String: kAsymmetricCryptoManagerApplicationTag as AnyObject
        ]

        //public key parameters
        let publicKeyParams: [String: AnyObject] = [
            kSecAttrIsPermanent as String: true as AnyObject,
            kSecAttrApplicationTag as String: kAsymmetricCryptoManagerApplicationTag as AnyObject
        ]

        // global parameters for our key generation
        let parameters: [String: AnyObject] = [
            kSecAttrKeyType as String:          kAsymmetricCryptoManagerKeyType,
            kSecAttrKeySizeInBits as String:    kAsymmetricCryptoManagerKeySize as AnyObject,
            kSecPublicKeyAttrs as String:       publicKeyParams as AnyObject,
            kSecPrivateKeyAttrs as String:      privateKeyParams as AnyObject,
        ]

        // asynchronously generate the key pair and call the completion block
        DispatchQueue.global(qos: DispatchQoS.QoSClass.default).async { () -> Void in
            var pubKey, privKey: SecKey?
            let status = SecKeyGeneratePair(parameters as CFDictionary, &pubKey, &privKey)
            print(""pub :"",pubKey)

I wanna have a shared secret like on this website : http://www-cs-students.stanford.edu/~tjw/jsbn/ecdh.html with secp256r1 parameteres
Thanks in advance.
","I got the your SecKey from x and y specified via code:
<SecKeyRef curve type: kSecECCurveSecp384r1, algorithm id: 3, key type: ECPublicKey, version: 4, block size: 384 bits, y: 7BA75DD35E74F1D6B6F1FE1FDB6F7977D7DE7BCEB6DFD7FCF1EF1CE5C6DCF7875B6DBD5FF35E1BDBB73CE5DD1DF7BD5A, x: 6F56B6D7AEB8D75EB9E78F3669DDFDEB7D1AE3CD3BEBC75D7B871C71EE5A7F8739DDE75E73CDB8F7A7F5EDFD1D75B7DD, addr: 0x7fda4a60d510>

","1395","<ios><swift><key><elliptic-curve>","1","0","1","2019-06-13 17:32:57","","5","","","","","2017-03-21 14:22:37",""
"46164319","How to generate EC keypair with Bouncy Castle","my current project is using the fips resources of BouncyCastle only for encrypten/decryption signing and so on.. the keys are still generated with the usual C# bouncy castle. Now, because that is a waste i want to change the code, but i can't find any documentation on how to do this.
WHat i have so far:
ECDomainParameters s = new ECDomainParameters(...?)
        FipsEC.KeyPairGenerator ecGen = CryptoServicesRegistrar.CreateGenerator(new FipsEC.KeyGenerationParameters(s));

but how do i specify the type of curve, G and n?
thanks in advance if you can help somehow.
","I found some examples in BouncyCastle unit tests. Try downloading their code with tests: https://www.bouncycastle.org/csharp/download/bccrypto-csharp-1.8.1-src.zip or find the appropriate source on their web page: https://www.bouncycastle.org/csharp/index.html
Then look for the class with unit test: ECTest
For example they have code like this:
/**
 * key generation test
 */
[Test]
public void TestECDsaKeyGenTest()
{
    SecureRandom random = new SecureRandom();

    BigInteger n = new BigInteger(""883423532389192164791648750360308884807550341691627752275345424702807307"");

    FpCurve curve = new FpCurve(
        new BigInteger(""883423532389192164791648750360308885314476597252960362792450860609699839""), // q
        new BigInteger(""7fffffffffffffffffffffff7fffffffffff8000000000007ffffffffffc"", 16), // a
        new BigInteger(""6b016c3bdcf18941d0d654921475ca71a9db2fb27d1d37796185c2942c0a"", 16), // b
        n, BigInteger.One);

    ECDomainParameters parameters = new ECDomainParameters(
        curve,
        curve.DecodePoint(Hex.Decode(""020ffa963cdca8816ccc33b8642bedf905c3d358573d3f27fbbd3b3cb9aaaf"")), // G
        n);

    ECKeyPairGenerator pGen = new ECKeyPairGenerator();
    ECKeyGenerationParameters genParam = new ECKeyGenerationParameters(
        parameters,
        random);

    pGen.Init(genParam);

    AsymmetricCipherKeyPair pair = pGen.GenerateKeyPair();

    ParametersWithRandom param = new ParametersWithRandom(pair.Private, random);

    ECDsaSigner ecdsa = new ECDsaSigner();

    ecdsa.Init(true, param);

    byte[] message = new BigInteger(""968236873715988614170569073515315707566766479517"").ToByteArray();
    BigInteger[] sig = ecdsa.GenerateSignature(message);

    ecdsa.Init(false, pair.Public);

    if (!ecdsa.VerifySignature(message, sig[0], sig[1]))
    {
        Fail(""signature fails"");
    }
}

","1394","<c#><bouncycastle><encryption-asymmetric><elliptic-curve><fips>","0","0","1","2017-09-14 14:26:47","","1","","47589","","2017-09-14 14:26:47","2017-09-11 21:01:28",""
"21320363","What is the padding type for Elliptic Curve Crypto","After SecKeyGeneratePair for ECC, I try to encrypt plaintext by the public key. SecKeyEncrypt returns -4(errSecUnimplemented). I am not sure about the padding type is correct. I tried all the types in my xcode, they don't work as well. Can somebody explain why SecKeyEncrypt returns -4?
(NSData *)encrypt:(NSString *)plainTextString key:(SecKeyRef)publicKey {

    NSData *data = [plainTextString dataUsingEncoding:NSUTF8StringEncoding];

    size_t encryptedDataLength = SecKeyGetBlockSize(publicKey);

    NSMutableData *encryptedData = [[NSMutableData alloc]
                                    initWithLength:encryptedDataLength];

    OSStatus err = SecKeyEncrypt(publicKey,
                                 kSecPaddingOAEP,
                                 [data bytes],
                                 [data length],
                                 [encryptedData mutableBytes],
                                 &encryptedDataLength);
    NSLog(@""errEXX:  %ld"", err);

    [encryptedData setLength:encryptedDataLength];


    return encryptedData;
}

","Apple's implementation only supports ECDSA, which can be used for signing but not encryption. For information about encrypting using elliptic curves using other schemes see Is it possible to use elliptic curve cryptography for encrypting data?
","1360","<ios><objective-c><encryption><elliptic-curve>","2","2","1","2014-05-31 22:21:05","","0","","589259","","2014-01-24 16:03:50","2014-01-23 22:08:51",""
"44808132","Using openssh public key (ecdsa-sha2-nistp256) with Java Security","Is there a Java library/example to read an openssh format ecdsa public key to a JCE PublicKey in Java? I want to use EC for JWT .
The format I'm trying to read is as per authorized_keys, or Github API (e.g. https://api.github.com/users/davidcarboni/keys):  ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBK8hPtB72/sfYgNw1WTska2DNOJFx+QhUxuV6OLINSD2ty+6gxcM8yZrvMqWdMePGRb2cGh8L/0bGOk+64IQ/pM=
I've found this answer, which is fine for RSA and DSS:
Using public key from authorized_keys with Java security, and this discussion of the openssh format for ECDSA: https://security.stackexchange.com/questions/129910/ecdsa-why-do-ssh-keygen-and-java-generated-public-keys-have-different-sizes 
However I'm getting lost trying to adapt the RSS/DSA code for ECDSA - I'm not sure how to set up an ECPublicKeySpec. It needs ECPoint, EllipticCurve, ECParameterSpec, ECField. The openssh format only contains two integers, which makes sense for ECPoint, but I don't know how to set up the rest.
I've been poking around a bunch of libraries, including jsch, sshj, ssh-tools and good old Bouncycastle. The closest I have is:
com.jcraft.jsch.KeyPair load = com.jcraft.jsch.KeyPair.load(jsch, null, bytes[openSshKey]);
Which loads the key fine, but doesn't get me to a JCE PublicKey - just a byte[] getPublicKeyBlob() method.
Am I missing something obvious?
","I've found a way to do this using Bouncycastle (but would like to find a JCE way).
Adapting the code from Using public key from authorized_keys with Java security, and refering to RFC 5656, section 3.1, the following block added to decodePublicKey will parse the single BigInt value Q, which is ""the public key encoded from an elliptic curve point"":
if (type.startsWith(""ecdsa-sha2-"") &&
            (type.endsWith(""nistp256"") || type.endsWith(""nistp384"") || type.endsWith(""nistp521""))) {

        // Based on RFC 5656, section 3.1 (https://tools.ietf.org/html/rfc5656#section-3.1)

        // The string [identifier] is the identifier of the elliptic curve
        // domain parameters.  The format of this string is specified in
        // Section 6.1 (https://tools.ietf.org/html/rfc5656#section-6.1).
        // Information on the REQUIRED and RECOMMENDED sets of
        // elliptic curve domain parameters for use with this algorithm can be
        // found in Section 10 (https://tools.ietf.org/html/rfc5656#section-10).
        String identifier = decodeType();
        if (!type.endsWith(identifier)) {
            throw new IllegalArgumentException(""Invalid identifier "" + identifier + "" for key type "" + type + ""."");
        }

        // Q is the public key encoded from an elliptic curve point into an
        // octet string as defined in Section 2.3.3 of [SEC1];
        // (https://tools.ietf.org/html/rfc5656#ref-SEC1)
        // point compression MAY be used.
        BigInteger q = decodeBigInt();

        ECPublicKey keyBC = getKeyBC(q, identifier);
        return keyBC;
    }

The solution I've found for getting from Q to an ECPublicKey is the following, using the Bouncycastle API (credit to Generate ECPublicKey from ECPrivateKey for providing the starting point):
ECPublicKey getKeyBC(BigInteger q, String identifier) {
    // https://stackoverflow.com/questions/42639620/generate-ecpublickey-from-ecprivatekey
    try {
        // This only works with the Bouncycastle library:
        Security.addProvider(new BouncyCastleProvider());
        // http://www.bouncycastle.org/wiki/pages/viewpage.action?pageId=362269#SupportedCurves(ECDSAandECGOST)-NIST(aliasesforSECcurves)
        String name = identifier.replace(""nist"", ""sec"") + ""r1"";
        KeyFactory keyFactory = KeyFactory.getInstance(""ECDSA"", ""BC"");
        ECNamedCurveParameterSpec ecSpec = ECNamedCurveTable.getParameterSpec(name);
        ECPoint point = ecSpec.getCurve().decodePoint(q.toByteArray());
        ECPublicKeySpec pubSpec = new ECPublicKeySpec(point, ecSpec);
        ECPublicKey publicKey = (ECPublicKey) keyFactory.generatePublic(pubSpec);
        return publicKey;
    } catch (NoSuchAlgorithmException | InvalidKeySpecException | NoSuchProviderException e) {
        throw new RuntimeException(e);
    }
}

That gets you from an openssh format elliptic curve public key (ssh-keygen -t ecdsa -b [256|384|521]) to a JCE ECPublicKey.
","1351","<java><openssh><jce><elliptic-curve><ecdsa>","1","0","2","2017-07-06 14:39:45","44907432","2","","723506","","2017-06-29 15:32:28","2017-06-28 16:34:46",""
"44808132","Using openssh public key (ecdsa-sha2-nistp256) with Java Security","Is there a Java library/example to read an openssh format ecdsa public key to a JCE PublicKey in Java? I want to use EC for JWT .
The format I'm trying to read is as per authorized_keys, or Github API (e.g. https://api.github.com/users/davidcarboni/keys):  ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBK8hPtB72/sfYgNw1WTska2DNOJFx+QhUxuV6OLINSD2ty+6gxcM8yZrvMqWdMePGRb2cGh8L/0bGOk+64IQ/pM=
I've found this answer, which is fine for RSA and DSS:
Using public key from authorized_keys with Java security, and this discussion of the openssh format for ECDSA: https://security.stackexchange.com/questions/129910/ecdsa-why-do-ssh-keygen-and-java-generated-public-keys-have-different-sizes 
However I'm getting lost trying to adapt the RSS/DSA code for ECDSA - I'm not sure how to set up an ECPublicKeySpec. It needs ECPoint, EllipticCurve, ECParameterSpec, ECField. The openssh format only contains two integers, which makes sense for ECPoint, but I don't know how to set up the rest.
I've been poking around a bunch of libraries, including jsch, sshj, ssh-tools and good old Bouncycastle. The closest I have is:
com.jcraft.jsch.KeyPair load = com.jcraft.jsch.KeyPair.load(jsch, null, bytes[openSshKey]);
Which loads the key fine, but doesn't get me to a JCE PublicKey - just a byte[] getPublicKeyBlob() method.
Am I missing something obvious?
","For completeness, here's the code I've gone with. It's nearly-pure JCE, with a sprinkling of Bouncycastle inside helper methods (this updates the example code in Using public key from authorized_keys with Java security):
...
        } else if (type.startsWith(""ecdsa-sha2-"") &&
                (type.endsWith(""nistp256"") || type.endsWith(""nistp384"") || type.endsWith(""nistp521""))) {
            // Based on RFC 5656, section 3.1 (https://tools.ietf.org/html/rfc5656#section-3.1)
            String identifier = decodeType();
            BigInteger q = decodeBigInt();
            ECPoint ecPoint = getECPoint(q, identifier);
            ECParameterSpec ecParameterSpec = getECParameterSpec(identifier);
            ECPublicKeySpec spec = new ECPublicKeySpec(ecPoint, ecParameterSpec);
            return KeyFactory.getInstance(""EC"").generatePublic(spec);
        } ...

/**
 * Provides a means to get from a parsed Q value to the X and Y point values.
 * that can be used to create and ECPoint compatible with ECPublicKeySpec.
 *
 * @param q          According to RFC 5656:
 *                   ""Q is the public key encoded from an elliptic curve point into an octet string""
 * @param identifier According to RFC 5656:
 *                   ""The string [identifier] is the identifier of the elliptic curve domain parameters.""
 * @return An ECPoint suitable for creating a JCE ECPublicKeySpec.
 */
ECPoint getECPoint(BigInteger q, String identifier) {
    String name = identifier.replace(""nist"", ""sec"") + ""r1"";
    ECNamedCurveParameterSpec ecSpec = ECNamedCurveTable.getParameterSpec(name);
    org.bouncycastle.math.ec.ECPoint point = ecSpec.getCurve().decodePoint(q.toByteArray());
    BigInteger x = point.getAffineXCoord().toBigInteger();
    BigInteger y = point.getAffineYCoord().toBigInteger();
    System.out.println(""BC x = "" + x);
    System.out.println(""BC y = "" + y);
    return new ECPoint(x, y);
}

/**
 * Gets the curve parameters for the given key type identifier.
 *
 * @param identifier According to RFC 5656:
 *                   ""The string [identifier] is the identifier of the elliptic curve domain parameters.""
 * @return An ECParameterSpec suitable for creating a JCE ECPublicKeySpec.
 */
ECParameterSpec getECParameterSpec(String identifier) {
    try {
        // http://www.bouncycastle.org/wiki/pages/viewpage.action?pageId=362269#SupportedCurves(ECDSAandECGOST)-NIST(aliasesforSECcurves)
        String name = identifier.replace(""nist"", ""sec"") + ""r1"";
        AlgorithmParameters parameters = AlgorithmParameters.getInstance(""EC"");
        parameters.init(new ECGenParameterSpec(name));
        return parameters.getParameterSpec(ECParameterSpec.class);
    } catch (InvalidParameterSpecException | NoSuchAlgorithmException e) {
        throw new IllegalArgumentException(""Unable to get parameter spec for identifier "" + identifier, e);
    }
}

","1351","<java><openssh><jce><elliptic-curve><ecdsa>","1","1","2","2017-07-06 14:39:45","44907432","2","","723506","","2017-06-29 15:32:28","2017-06-28 16:34:46",""
"18975186","Java cardSending data recieved 6f 00 error code","I have created ECC (Elliptic curve cryptography) in jcop j3A081 card.(dual interface card).Then i have android Application which use the Android ISO dep Connection to Communicate with the java card.(Contactless interface).So First i have select the Application.It gives success response code(90 00).So then i send some data to card it gives encryption data back to Android Application.Previously it worked perfectly.but suddenly it corrupted. I don't know why.After Corrupted it successfully selected Application but when i try to send data to java card it gives (6F 00) error code.previously it gives the encrypted data.Is there Any one knows what is happening in java card ?? or what is the root course??(Spec : I used this card many time for the testing)
Thanks
Sajith
","No, you will have to debug your Applet. The issue is that 6F00 is returned when any exception is thrown by the process method other than ISOException.
This could for instance include issues regarding memory management. Once in the field, you should not allocate new objects or request transient memory arrays. Note that JavaCard has not much of a garbage collector, even if it is present.
It may also be the case that you've worn out the flash or EEPROM memory somehow. For that to happen you have to write many times to the same location or block though.
","1344","<android><javacard><elliptic-curve><apdu>","0","3","1","2013-09-24 16:24:17","18987023","0","","","","","2013-09-24 07:12:54",""
"11043648","Calculate the y coordinate of a point of a elliptic curve with SAGE?","I defined with SAGE:
p=(10^34+1000).next_prime()
E=EllipticCurve(GF(p),[0,57])

My problem is:
I know the x coordinate of a P of the Elliptic Curve 1407284663933896236729058440000
How can I calculate the y coordinate with SAGE?. Any function?
E([1407284663933896236729058440000, ??????])

","sage: E.lift_x(1407284663933896236729058440000)

(1407284663933896236729058440000 : 4215171991512676773155222850458328 : 1)

I suggest that you read the Sage reference manual before asking more such questions here.
","1326","<sage><elliptic-curve>","3","8","1","2013-12-06 15:52:21","11051581","0","","759866","","2013-12-06 15:52:21","2012-06-15 01:45:19",""
"39696888","Unable to sign a file with nodejs crypto","I've created a private Key with nodejs crypto and want to sign a file with this key.
My code is following: 
var ecdh = crypto.createECDH('brainpoolP512t1');
        ecdh.generateKeys();
        var key = ecdh.getPrivateKey('buffer');

        var data= fs.readFileSync(req.file.path);
        var sign = crypto.createSign('sha512');
        sign.update(data);
        var signature = sign.sign(key, 'hex');

But I get the error: 
Error: error:0906D06C:PEM routines:PEM_read_bio:no start line
    at Error (native)
    at Sign.sign (crypto.js:283:26)
    at /....js:32:27
    at Immediate.<anonymous> (/.../node_modules/multer/lib/make-middleware.js:52:37)
    at runCallback (timers.js:578:20)
    at tryOnImmediate (timers.js:554:5)
    at processImmediate [as _immediateCallback] (timers.js:533:5)

I know it has something to do with the key format, but I don't know how to fix this. Can anyone help?
UPDATE: 
I edited the privateKey to fit the pem format:
var KEY_START = '-----BEGIN EC PRIVATE KEY-----\n';
var KEY_END = '\n-----END EC PRIVATE KEY-----';

const ecdh = crypto.createECDH('brainpoolP512t1');
            ecdh.generateKeys();
            var key =KEY_START + ecdh.getPrivateKey('base64') + KEY_END;        
            var data= fs.readFileSync(req.file.path);
            const sign = crypto.createSign('sha512');
            sign.update(data);
            var signature = sign.sign(key, 'hex');

And now I geht a different error: 
Error: error:0D07207B:asn1 encoding routines:ASN1_get_object:header too long
    at Error (native)
    at Sign.sign (crypto.js:283:26)
    at /...js:37:27
    at Immediate.<anonymous> (/.../node_modules/multer/lib/make-middleware.js:52:37)
    at runCallback (timers.js:578:20)
    at tryOnImmediate (timers.js:554:5)
    at processImmediate [as _immediateCallback] (timers.js:533:5)

","The key you sign the data with needs to be a valid PEM-encoded private key. The DH getPrivateKey() function does not return a key in this format, it returns the bare private key data.
Your options include:

Generating a private key via the OpenSSL key generator utility or similar
Using third-party node modules to properly encode the private key as outlined in RFC 5915. Full example using the asn1.js and bn.js modules:
var crypto = require('crypto');

var asn1 = require('asn1.js');
var BN = require('bn.js');

function toOIDArray(oid) {
  return oid.split('.').map(function(s) {
    return parseInt(s, 10)
  });
}

// Define ECPrivateKey from RFC 5915
var ECPrivateKey = asn1.define('ECPrivateKey', function() {
  this.seq().obj(
    this.key('version').int(),
    this.key('privateKey').octstr(),
    this.key('parameters').explicit(0).objid().optional(),
    this.key('publicKey').explicit(1).bitstr().optional()
  );
});

// Generate the DH keys
var ecdh = crypto.createECDH('brainpoolP512t1');
ecdh.generateKeys();

// Generate the PEM-encoded private key
var pemKey = ECPrivateKey.encode({
  version: new BN(1),
  privateKey: ecdh.getPrivateKey(),
  // OID for brainpoolP512t1
  parameters: toOIDArray('1.3.36.3.3.2.8.1.1.14')
}, 'pem', { label: 'EC PRIVATE KEY' });

// Sign data
var sign = crypto.createSign('sha512');
sign.update('hello world');
var signature = sign.sign(pemKey, 'hex');

console.log('signature', signature);


","1289","<node.js><header><signature><private-key><elliptic-curve>","2","4","1","2018-06-15 10:24:20","39697032","0","1","5654908","","2016-09-26 10:59:12","2016-09-26 07:21:00",""
"14677715","Determine certificate key type (RSA vs EC) in .NET or BouncyCastle?","Currently we have a routine that Signs a byte[] given a certificate (and it's private key). However, the type of certificate/keys is hardcoded as ""Certificate with RSA keys"". That code is :
public byte[] Sign(byte[] bytesToSign, bool fOAEP, X509Certificate2 certificate)
{
    using (RSACryptoServiceProvider provider = new RSACryptoServiceProvider())
    {
        // HACK: Round-trip the key to XML and back, to get provider type working
        // as 'Microsoft Enhanced RSA and AES Cryptographic Provider' (for  
        // SHA256/SHA512 signing hash) instead of 'Microsoft Enhanced 
        // Cryptographic Provider v1.0' (that limits us to SHA1)
        string publicKeyXml = certificate.PrivateKey.ToXmlString(true);
        provider.FromXmlString(publicKeyXml);

        // We use the private key to sign.
        return provider.SignData(bytesToSign, CryptoConfig.MapNameToOID(""SHA512""));
    }
}

We would like to make it more flexible where if the certificate uses RSA keys, we process it one way but if it uses EC keys, then we process it differently. Basically the Crypto Service Provider type would be of a different type.
So the core question is: 

Given a certificate with public+private keys (for signing) OR a certificate with just public keys (for verifying), how do you determine the types of keys used by the certificate?

I'm open to standard .NET libs or even BouncyCastle.Org libs.
","You can check key type (algorithm) via certificate.PublicKey.Oid.
Here you can see supported by Microsoft OIDs: http://msdn.microsoft.com/en-us/library/ff635835.aspx
Other OIDs can be checked at oid-info.com
","1267","<rsa><bouncycastle><elliptic-curve>","1","0","1","2013-02-04 08:51:45","14683215","0","1","","","","2013-02-03 21:51:28",""
"19800518","Python -- Matplotlib for elliptic curve with sympy solve()","I have an elliptic curve plotted.  I want to draw a line along a P,Q,R (where P and Q will be determined independent of this question). The main problem with the P is that sympy solve() returns another equation and it needs to instead return a value so it can be used to plot the x-value for P.  As I understood it, solve() should return a value, so I'm clearly doing something wrong here that I'm just totally not seeing. For reference, here's how P+Q=R should look:

I've been going over the docs and other material and this is as far as I've been able to get myself into trouble:
from mpl_toolkits.axes_grid.axislines import SubplotZero
from pylab import *
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.path import Path
import matplotlib.patches as patches
from matplotlib import rc
import random
from sympy.solvers import solve
from sympy import *


def plotGraph():
    fig = plt.figure(1)
    #ax = SubplotZero(fig, 111)
    #fig.add_subplot(ax)
    #for direction in [""xzero"", ""yzero""]:
        #ax.axis[direction].set_axisline_style(""-|>"")
        #ax.axis[direction].set_visible(True)
    #ax.axis([-10,10,-10,10])
    a = -2; b = 1
    y, x = np.ogrid[-10:10:100j, -10:10:100j]
    xlist = x.ravel(); ylist = y.ravel()
    elliptic_curve = pow(y, 2) - pow(x, 3) - x * a - b
    plt.contour(xlist, ylist, elliptic_curve, [0])
    #rand = random.uniform(-5,5)
    randmid = random.randint(30,70)
    #y = ylist[randmid]; x = xlist[randmid]
    xsym, ysym = symbols('x ylist[randmid]')
    x_result = solve(pow(ysym, 2) - pow(xsym, 3) - xsym * a - b, xsym) # 11/5/13 needs to return a value
    plt.plot([-1.5,5], [-1,8], color = ""c"", linewidth=1) # plot([x1,x2,x3,...],[y1,y2,y3,...])
    plt.plot([xlist[randmid],5], [ylist[randmid],8], color = ""m"", linewidth=1)
    #rc('text', usetex=True)
    text(-9,6,' size of xlist: %s \n size of ylist: %s \n x_coord: %s \n random_y: %s'
        %(len(xlist),len(ylist),x_result,ylist[randmid]),
        fontsize=10, color = 'blue',bbox=dict(facecolor='tan', alpha=0.5))
    plt.annotate('$P+Q=R$', xy=(2, 1), xytext=(3, 1.5),arrowprops=dict(facecolor='black', shrink=0.05))

##    verts = [(-5, -10),(5, 10)] # [(x,y)startpoint,(x,y)endpoint] #,(0, 0)]
##    codes = [Path.MOVETO,Path.LINETO] # related to verts[] #,Path.STOP]
##    path = Path(verts, codes)
##    patch = patches.PathPatch(path, facecolor='none', lw=2)
##    ax.add_patch(patch)

    plt.grid(True)
    plt.show()


def main():
    plotGraph()


if __name__ == '__main__':
    main()

Ultimately, I'd like to draw a line to show P+Q=R, so if someone also has something to add on how to code to get the Q that would be greatly appreciated.  I'm teaching myself about Python and elliptic curves so I'm sure that any entry-level programmer can figure out in 2 minutes what I've been on for some time already.
","I don't know what are you calculating, but here is the code that can plot the graph:
import numpy as np
import pylab as pl

Y, X = np.mgrid[-10:10:100j, -10:10:100j]

def f(x):
    return x**3 -3*x + 5

px = -2.0
py = -np.sqrt(f(px))

qx = 0.5
qy = np.sqrt(f(qx))

k = (qy - py)/(qx - px)
b = -px*k + py 

poly = np.poly1d([-1, k**2, 2*k*b+3, b**2-5])

x = np.roots(poly)
y = np.sqrt(f(x))

pl.contour(X, Y, Y**2 - f(X), levels=[0])
pl.plot(x, y, ""o"")
pl.plot(x, -y, ""o"")

x = np.linspace(-5, 5)
pl.plot(x, k*x+b)

graph:

","1230","<python-2.7><matplotlib><sympy><elliptic-curve><finite-field>","2","6","1","2013-11-24 03:27:03","19812540","1","1","-1","","2017-05-23 12:16:25","2013-11-05 22:41:06",""
"23834640","What is the purpose of the commented-out sun.security.ec.SunEC provider in java-7-openjdk?","I have a stock installation of openjdk 7u21-2.3.9-5 as included with Linux Mint Debian Edition (jessie/sid) 201403.
I'm trying to write java code to establish an SSL/TLS connection mutually-authenticated using Elliptic Curve keys.  It's not working.
Update: Since originally posting this question, I have since succeeded in establishing a secure connection by using the secp256r1 curve (rather than secp256k1) for both the server and client keys.  However I am leaving this question mostly as I originally wrote it since I still am interested in the answer to the question.  In particular I note that the security of the secp256r1 curve has been questioned.
In searching the internet for help my attention was called to the second-to-last provider listed in my java.security file:
#security.provider.9=sun.security.ec.SunEC

Why is this here?  Why is it commented out?
I have tried using SSL (TLS) client keys based on both the secp256k1 and secp256r1 curves.  I've also tried adding bouncycastle as a provider.  With the server certificate using secp256k1 I cannot establish a connection, even with the bouncycastle provider available; on the other hand, if the server and client keys are both based on the secp256r1 curve then I can establish a secure connection.
So far, my understanding is that there is a SunEC cryptographic provider that supports all EC curves but is not included with OpenJDK, that if I could find and install the proper java jar file and binary shared binary library then I could use that provider, but also that there is some incompatibility between that and the included rt.jar file.
Furthermore, I understand that the SunPKCS11 provider, which is included with OpenJDK, handles a subset of EC curves, including secp256r1, but not secp256k1.  If bouncycastle is available then it seems to kicks in when trying to use the secp256k1 curve for the client key, but not for the server key.  I have little confidence in the accuracy of my understanding because it's based on information from thread comments and other non-authoritative sources.
I am additionally confused by the fact that invoking the method sun.security.ec.NamedCurve.getECParameterSpec(""secp256k1"") returns an EC Parameter Specification, indicating that my JDK does know about that curve.  So I'm confused why it cannot handle SSL certificates using keys that are based on that curve.
At this point I am able to establish a secure connection, but only with certain EC curves.  I would like to have the option of using more curves, and in general am very curious of why there is a commented-out provider specified in the distributed java.security file.  That's my question: why is it there; how can I use it?
","","1204","<java><ssl><ssl-certificate><openjdk><elliptic-curve>","3","","0","2014-05-28 18:20:45","","0","2","373489","","2014-05-28 18:20:45","2014-05-23 16:53:05",""
"8351923","Ways to define a curve","I'm trying to give shapes in my physics engine roundness/ curvature. 
I am aware of various methods for mathematically defining curves; such as bezier-cruves, ellipses, etc. However I am not sure which methods would be most appropriate for use in my physics engine, because speed, feasibility of construction, and flexibility of each method must be considered. I want a system in which a user can easily form fairly complex curves, but still make the intersection calculations simple and fast. 
My physics engine is also purely continuous, which means I must be able to calculate the time in which curves will collide with other curves and lines based on a constant linear/angular velocity.

What techniques are there for mathematically defining a 2D curve? 
What are the advantages/disatvantages of each in terms of speed, flexibility, and  simplicity of construction? 
Is the technique feasible for an engine where predictability of shape intersection is crucial?

","Like your tag says, you are describing Bezier curves. It is mathematically well defined, so you'd be able to use that for collision detection, although depending on what you're doing it might make the equations slightly harder to write and solve. I don't know much about it, but something that seems to be the standard way to approach splines is NURBS, and wikipedia seems to have quite an article on the topic. The NURBS article probably covers all this, but a quick and dirty way to draw a smooth curve between a bunch of points is to use cubic splines by interpolating a cubic polynomial in between every two points such that the first derivatives match at the edges. That way you get a curve that goes through all your points and looks smooth everywhere, with no sharp corners at the initial points.
","1175","<collision-detection><bezier><continuous><physics-engine><elliptic-curve>","3","3","1","2011-12-14 07:47:54","8405857","0","3","700195","","2011-12-14 07:41:45","2011-12-02 04:51:34",""
"50479284","OpenSSL: Read an EC-key, then write it again, and it's different","I wrote a wrapper for OpenSSL that supports ECC. I'm trying to read a private key that I generated with 
openssl ecparam -name secp384r1 -genkey -noout -out privkey.pem

And compare it with what OpenSSL would produce after reading the key into a EVP_PKEY and EC_KEY and printing it again into a string. The results after reading are not the same.
In short:

Read a key
Save it to EVP_PKEY
Write it again

And the results don't match. My program is quite big, so I produced an MCVE that demonstrates the problem.
My suspicion is that the problem happens because I'm reading to an EC_KEY, then writing from EVP_PKEY, which is generic. I'm guessing here because the input says it's EC, but the output doesn't say that. I'm not sure how to resolve this, because I don't see a way to write directly from an EC_KEY to a file (bio object). Is my assessment correct?
Please advise.

EDIT:
I was asked to put the whole code here in the comments, so there you go:
#include <iostream>

#include <openssl/bio.h>
#include <openssl/err.h>
#include <openssl/ec.h>
#include <openssl/pem.h>

EC_KEY* ecKey = nullptr;
EVP_PKEY* pkey = nullptr;

void setPrivateKeyFromPEM(const std::string& pemkey)
{
    pkey = EVP_PKEY_new();

    BIO* bio = BIO_new(BIO_s_mem());

    int bio_write_ret = BIO_write(
        bio, static_cast<const char*>(pemkey.c_str()), pemkey.size());
    if (bio_write_ret <= 0) {
        throw std::runtime_error(""error1"");
    }

    if (!PEM_read_bio_PrivateKey(bio, &pkey, NULL, NULL)) {
        throw std::runtime_error(""error1.5"");
    }

    EC_KEY* eckey_local = EVP_PKEY_get1_EC_KEY(pkey);

    if (!eckey_local) {
        throw std::runtime_error(""error2"");
    } else {
        ecKey = eckey_local;
        EC_KEY_set_asn1_flag(ecKey, OPENSSL_EC_NAMED_CURVE);
    }
}

std::string getPrivateKeyAsPEM()
{
    if (!pkey) {
        throw std::runtime_error(""error3"");
    }

    BIO* outbio = BIO_new(BIO_s_mem());

    if (!PEM_write_bio_PrivateKey(outbio, pkey, NULL, NULL, 0, 0,
                                  NULL)) {
        throw std::runtime_error(""error4"");
    }

    std::string keyStr;
    int         priKeyLen = BIO_pending(outbio);
    keyStr.resize(priKeyLen);
    BIO_read(outbio, (void*)&(keyStr.front()), priKeyLen);
    return keyStr;
}

int main()
{
    std::string expectedPrivKey =
        ""-----BEGIN EC PRIVATE KEY-----\n""
        ""MIGkAgEBBDBNK0jwKqqf8zkM+Z2l++9r8bzdTS/XCoB4N1J07dPxpByyJyGbhvIy\n""
        ""1kLvY2gIvlmgBwYFK4EEACKhZANiAAQvPxAK2RhvH/k5inDa9oMxUZPvvb9fq8G3\n""
        ""9dKW1tS+ywhejnKeu/48HXAXgx2g6qMJjEPpcTy/DaYm12r3GTaRzOBQmxSItStk\n""
        ""lpQg5vf23Fc9fFrQ9AnQKrb1dgTkoxQ=\n""
        ""-----END EC PRIVATE KEY-----\n"";

    setPrivateKeyFromPEM(expectedPrivKey);
    // compare priv key
    {
        std::string privKeyRead = getPrivateKeyAsPEM();
        std::cout << privKeyRead << std::endl;
        std::cout<<expectedPrivKey<<std::endl;
    }

    return 0;
}

","Although the outputs don't match exactly, they actually represent the same key.
Your code outputs the following:
-----BEGIN PRIVATE KEY-----
MIG2AgEAMBAGByqGSM49AgEGBSuBBAAiBIGeMIGbAgEBBDBNK0jwKqqf8zkM+Z2l
++9r8bzdTS/XCoB4N1J07dPxpByyJyGbhvIy1kLvY2gIvlmhZANiAAQvPxAK2Rhv
H/k5inDa9oMxUZPvvb9fq8G39dKW1tS+ywhejnKeu/48HXAXgx2g6qMJjEPpcTy/
DaYm12r3GTaRzOBQmxSItStklpQg5vf23Fc9fFrQ9AnQKrb1dgTkoxQ=
-----END PRIVATE KEY-----

-----BEGIN EC PRIVATE KEY-----
MIGkAgEBBDBNK0jwKqqf8zkM+Z2l++9r8bzdTS/XCoB4N1J07dPxpByyJyGbhvIy
1kLvY2gIvlmgBwYFK4EEACKhZANiAAQvPxAK2RhvH/k5inDa9oMxUZPvvb9fq8G3
9dKW1tS+ywhejnKeu/48HXAXgx2g6qMJjEPpcTy/DaYm12r3GTaRzOBQmxSItStk
lpQg5vf23Fc9fFrQ9AnQKrb1dgTkoxQ=
-----END EC PRIVATE KEY-----

If you look closely at the first key printed, which is the one imported/exported by your code, it is labeled ""BEGIN PRIVATE KEY"" instead of ""BEGIN EC PRIVATE KEY"".  It also starts with MIG2AgEAMBAGByqGSM49AgEGBSuBBAAiBIGe but after that it is identical to the original key.  In fact, if you put both PEMs in files and run openssl ec -in {filename} -text, both will output the same thing:
read EC key
Private-Key: (384 bit)
priv:
    4d:2b:48:f0:2a:aa:9f:f3:39:0c:f9:9d:a5:fb:ef:
    6b:f1:bc:dd:4d:2f:d7:0a:80:78:37:52:74:ed:d3:
    f1:a4:1c:b2:27:21:9b:86:f2:32:d6:42:ef:63:68:
    08:be:59
pub: 
    04:2f:3f:10:0a:d9:18:6f:1f:f9:39:8a:70:da:f6:
    83:31:51:93:ef:bd:bf:5f:ab:c1:b7:f5:d2:96:d6:
    d4:be:cb:08:5e:8e:72:9e:bb:fe:3c:1d:70:17:83:
    1d:a0:ea:a3:09:8c:43:e9:71:3c:bf:0d:a6:26:d7:
    6a:f7:19:36:91:cc:e0:50:9b:14:88:b5:2b:64:96:
    94:20:e6:f7:f6:dc:57:3d:7c:5a:d0:f4:09:d0:2a:
    b6:f5:76:04:e4:a3:14
ASN1 OID: secp384r1
NIST CURVE: P-384
writing EC key
-----BEGIN EC PRIVATE KEY-----
MIGkAgEBBDBNK0jwKqqf8zkM+Z2l++9r8bzdTS/XCoB4N1J07dPxpByyJyGbhvIy
1kLvY2gIvlmgBwYFK4EEACKhZANiAAQvPxAK2RhvH/k5inDa9oMxUZPvvb9fq8G3
9dKW1tS+ywhejnKeu/48HXAXgx2g6qMJjEPpcTy/DaYm12r3GTaRzOBQmxSItStk
lpQg5vf23Fc9fFrQ9AnQKrb1dgTkoxQ=
-----END EC PRIVATE KEY-----

The extra part at the beginning is metadata from exporting a EVP_PKEY key stating that the key is an EC key.
Had you instead exported the EC_KEY directly using PEM_write_bio_ECPrivateKey(outbio, ecKey, NULL, NULL, 0, 0, NULL) the output would be exactly the same.
","1164","<c++><openssl><private-key><elliptic-curve>","3","2","2","2018-08-18 10:30:40","50488762","3","","648265","","2018-08-18 10:30:40","2018-05-23 03:15:16",""
"50479284","OpenSSL: Read an EC-key, then write it again, and it's different","I wrote a wrapper for OpenSSL that supports ECC. I'm trying to read a private key that I generated with 
openssl ecparam -name secp384r1 -genkey -noout -out privkey.pem

And compare it with what OpenSSL would produce after reading the key into a EVP_PKEY and EC_KEY and printing it again into a string. The results after reading are not the same.
In short:

Read a key
Save it to EVP_PKEY
Write it again

And the results don't match. My program is quite big, so I produced an MCVE that demonstrates the problem.
My suspicion is that the problem happens because I'm reading to an EC_KEY, then writing from EVP_PKEY, which is generic. I'm guessing here because the input says it's EC, but the output doesn't say that. I'm not sure how to resolve this, because I don't see a way to write directly from an EC_KEY to a file (bio object). Is my assessment correct?
Please advise.

EDIT:
I was asked to put the whole code here in the comments, so there you go:
#include <iostream>

#include <openssl/bio.h>
#include <openssl/err.h>
#include <openssl/ec.h>
#include <openssl/pem.h>

EC_KEY* ecKey = nullptr;
EVP_PKEY* pkey = nullptr;

void setPrivateKeyFromPEM(const std::string& pemkey)
{
    pkey = EVP_PKEY_new();

    BIO* bio = BIO_new(BIO_s_mem());

    int bio_write_ret = BIO_write(
        bio, static_cast<const char*>(pemkey.c_str()), pemkey.size());
    if (bio_write_ret <= 0) {
        throw std::runtime_error(""error1"");
    }

    if (!PEM_read_bio_PrivateKey(bio, &pkey, NULL, NULL)) {
        throw std::runtime_error(""error1.5"");
    }

    EC_KEY* eckey_local = EVP_PKEY_get1_EC_KEY(pkey);

    if (!eckey_local) {
        throw std::runtime_error(""error2"");
    } else {
        ecKey = eckey_local;
        EC_KEY_set_asn1_flag(ecKey, OPENSSL_EC_NAMED_CURVE);
    }
}

std::string getPrivateKeyAsPEM()
{
    if (!pkey) {
        throw std::runtime_error(""error3"");
    }

    BIO* outbio = BIO_new(BIO_s_mem());

    if (!PEM_write_bio_PrivateKey(outbio, pkey, NULL, NULL, 0, 0,
                                  NULL)) {
        throw std::runtime_error(""error4"");
    }

    std::string keyStr;
    int         priKeyLen = BIO_pending(outbio);
    keyStr.resize(priKeyLen);
    BIO_read(outbio, (void*)&(keyStr.front()), priKeyLen);
    return keyStr;
}

int main()
{
    std::string expectedPrivKey =
        ""-----BEGIN EC PRIVATE KEY-----\n""
        ""MIGkAgEBBDBNK0jwKqqf8zkM+Z2l++9r8bzdTS/XCoB4N1J07dPxpByyJyGbhvIy\n""
        ""1kLvY2gIvlmgBwYFK4EEACKhZANiAAQvPxAK2RhvH/k5inDa9oMxUZPvvb9fq8G3\n""
        ""9dKW1tS+ywhejnKeu/48HXAXgx2g6qMJjEPpcTy/DaYm12r3GTaRzOBQmxSItStk\n""
        ""lpQg5vf23Fc9fFrQ9AnQKrb1dgTkoxQ=\n""
        ""-----END EC PRIVATE KEY-----\n"";

    setPrivateKeyFromPEM(expectedPrivKey);
    // compare priv key
    {
        std::string privKeyRead = getPrivateKeyAsPEM();
        std::cout << privKeyRead << std::endl;
        std::cout<<expectedPrivKey<<std::endl;
    }

    return 0;
}

","PEM_write_bio_ECPrivateKey is available in OpenSSL 1.0.2 too, only the documentation is missing.
The stored key is the same, the difference is only in encoding.
The tag -----BEGIN PRIVATE KEY----- signifies a PEM-encoded ASN.1 format.
The tag -----BEGIN EC PRIVATE KEY----- signifies a PEM-encoded ANSI X9.62 key. 
Compare: key 1 vs. key 2. Notice key2 doesn't contain the key type OID, the key itself is identical.
To write the EC key format, just use this:
    if (!PEM_write_bio_ECPrivateKey(outbio, ecKey, NULL, NULL, 0, 0, NULL)) {

coliru-demo
","1164","<c++><openssl><private-key><elliptic-curve>","3","2","2","2018-08-18 10:30:40","50488762","3","","648265","","2018-08-18 10:30:40","2018-05-23 03:15:16",""
"30237021","Elliptic curve brute forcing","I have all parameter of elliptic curve. And the coordinate of points Q and P. I want to solve Q=k*P (where k is the unknown) by testing all possible k.
So i used this class
then:
a=-1
b=0
p=134747661567386867366256408824228742802669457
curve = EllipticCurve(a,b,p)
P=[18185174461194872234733581786593019886770620,74952280828346465277451545812645059041440154]
Q=[76468233972358960368422190121977870066985660, 33884872380845276447083435959215308764231090]
for i in range(2902021510595963727029):
    result = curve.multPoint(i,P)
    if result[0]==Q[0] and result[1]==Q[1]:
        print (i)
        break

Is this the right approach to solve this problem?
","This is not a good approach because you are trying to do 2902021510595963727029 operations.  Even if you managed to do a billion operations per second, it would take 92 thousand years to finish.
You are basically trying to break the security of ECDSA.  If you figure out a way to do this, then it would be possible to figure out an ECDSA private key given the corresponding public key.  It would be a breakthrough in cryptography and you would be famous.  There are many smart people that have thought about this problem before you and failed to find a solution.
The problem you are trying to solve is called the discrete logarithm problem.
","1139","<python><brute-force><elliptic-curve><ecdsa>","1","2","2","2015-05-18 20:16:10","30312076","1","","4237058","","2015-05-14 12:35:25","2015-05-14 12:07:34",""
"30237021","Elliptic curve brute forcing","I have all parameter of elliptic curve. And the coordinate of points Q and P. I want to solve Q=k*P (where k is the unknown) by testing all possible k.
So i used this class
then:
a=-1
b=0
p=134747661567386867366256408824228742802669457
curve = EllipticCurve(a,b,p)
P=[18185174461194872234733581786593019886770620,74952280828346465277451545812645059041440154]
Q=[76468233972358960368422190121977870066985660, 33884872380845276447083435959215308764231090]
for i in range(2902021510595963727029):
    result = curve.multPoint(i,P)
    if result[0]==Q[0] and result[1]==Q[1]:
        print (i)
        break

Is this the right approach to solve this problem?
","The curve is vulnerable to both the MOV attack and the older FR attack that works similarly, So we can use Weil or Tate pairings (respectively).
q = 134747661567386867366256408824228742802669457
Zq = Zmod(q)
E = EllipticCurve(Zq, [0,0,0,-1,0])
P = E(18185174461194872234733581786593019886770620, 74952280828346465277451545812645059041440154)
Q = E(76468233972358960368422190121977870066985660, 33884872380845276447083435959215308764231090)
n = P.order()
k = GF(n)(q).multiplicative_order()
R = E.random_element()
w1 = P.tate_pairing(R, n, k)
w2 = Q.tate_pairing(R, n, k)
print w1, w2

with w2=w1^k we need to solve a discrete logarithm problem in a ring of integer mod p. It can take quite a while but is still feasible given the small modulus.
PS: This is eltrai answer.
","1139","<python><brute-force><elliptic-curve><ecdsa>","1","0","2","2015-05-18 20:16:10","30312076","1","","4237058","","2015-05-14 12:35:25","2015-05-14 12:07:34",""
"33525489","How do I obtain the public key from an ECDSA private key in Java with Bouncy Castle?","I've read How do I obtain the public key from an ECDSA private key in OpenSSL?
and want to do the same thing, but in Java with Bouncy Castle.
I've also seen Bouncy Castle ESCDA Create Public Key from Private Key but it did not help.
","take a look at the following code, it's c# but in java it is similar. the private key is given by as base64 encoded string in this example and also a base64 encoded string is given back. the commented keyParameters are working, so use this one if you want to have key and curve.
private static readonly Org.BouncyCastle.Asn1.X9.X9ECParameters curve = Org.BouncyCastle.Asn1.Sec.SecNamedCurves.GetByName(""secp256r1"");
private static readonly Org.BouncyCastle.Crypto.Parameters.ECDomainParameters domain = new Org.BouncyCastle.Crypto.Parameters.ECDomainParameters(curve.Curve, curve.G, curve.N, curve.H);
public string GetPublicKey(string privKey)
{
      Org.BouncyCastle.Math.BigInteger d = new Org.BouncyCastle.Math.BigInteger(Convert.FromBase64String(privKey));
      //var privKeyParameters = new Org.BouncyCastle.Crypto.Parameters.ECPrivateKeyParameters(d, domain);
      Org.BouncyCastle.Math.EC.ECPoint q = domain.G.Multiply(d);
      //var pubKeyParameters = new Org.BouncyCastle.Crypto.Parameters.ECPublicKeyParameters(q, domain);
      return Convert.ToBase64String(q.GetEncoded());
}

","1135","<java><elliptic-curve><ecdsa>","0","0","1","2016-06-12 09:42:51","","0","1","","","","2015-11-04 15:20:01",""
"30017367","Lenstra's elliptic curve factorization problems","I'm trying to use Hendrik Lenstra's elliptic curve factoring method to factor small (less than 40 bits) composite integers. 
import math 
from fractions import gcd
import random 

def lenstra_elliptic_curve_factor(N):
     """""" Lenstra's elliptic curve factoring method """"""

    if N <=0:
    raise Exception(""Integer %s must be possitive "" % N) 

    # Can't be 1 and can't factor a prime! 
    if 1 <= N <= 2 or is_probable_prime(N):
        return [N]

    # random point in the plain (values less than N)
    x0, y0 = random.randrange(1, N), random.randrange(1, N)

    factors = list()
    bound = int(math.sqrt(N))

    for a in xrange(2,N):
        # Build curve out of random points
        b = y0**2 - x0**3 - a*x0

        # Check curve is not singular 
        if 4*a**3 - 27*b**2 ==0:
            continue

        # Initially double point 
        s = 3*x0**2 + a
        (x,y) = (s**2 - 2*x0, s*((s**2 - 2*x0) - x0) - y0)

    # Keep adding points until gcd(x-x0,N) != 1
    for k in xrange(2,bound):
        for i in xrange(0,math.factorial(k)):
            d = gcd(x- x0,N)
            if d != 1:
                return lenstra_elliptic_curve_factor(int(d)) + lenstra_elliptic_curve_factor(int(N/d))
            else:
                # Point doubling arithmetic 
                s = (y - y0) * modInv(x - x0,N)
                x = s**2 - x - x0  
                y = - y + s * (s**2 - x - x0 - x)

Where is_probably_prime() is the Miller-Rabin test with number of trials set to 20. It seems that for some composite numbers, for example 4, it doesn't find non-trivial gcd(x-x0), instead the algorithm goes all the way through and returns nothing. So when the algorithm tries to factor a larger number which 4 divides, like 12 for example, return lenstra_elliptic_curve_factor(int(d)) + lenstra_elliptic_curve_factor(int(N/d)) adds a ""NoneType"" to a list. For example 
for x in xrange(0,3241):
    print x, lenstra_elliptic_curve_factor(x) 

I get 
0 [0]
1 [1]
2 [2]
3 [3]
4 None
5 [5]
6 None
7 [7]
8 None
9 [3, 3]
10 [2, 5]
11 [11]
12

Traceback (most recent call last):
File ""/AVcrypto/util.py"", line 160, in <module>
     print x, lenstra_elliptic_curve_factor(x) 
File ""/Users/Kevin/gd/proj/curr/honproj/AVcrypto/util.py"", line 104, in lenstra_elliptic_curve_factor
     return lenstra_elliptic_curve_factor(int(d)) + lenstra_elliptic_curve_factor(int(N/d))
TypeError: can only concatenate list (not ""NoneType"") to list

I've tried increasing the number of curves tested to N**10 but it seems to have the same result. I'm just wondering if anyone has any experience with this algorithm, specifically where certain numbers seem to avoid the trial process for an incredibly long time. 
","Lenstra's algorithm assumes that the number being factored is co-prime to 6 (that is, has no factors of 2 or 3). Trying to factor 4 will not work. A more realistic test is to factor 13290059.
I assume you know that ECM is vast overkill for 40-bit numbers.
","1123","<python><elliptic-curve><prime-factoring>","2","2","1","2015-06-23 00:44:57","","2","","","","","2015-05-03 17:56:43",""
"49071730","X509Certificate2 - Access Denied Exception if use ECC certificate","I try to encrypt and decrypt data with System.Security.Cryptography.Pkcs, but it works only with RSA certificates, if I used an ECC (curve ECDH_brainpoolP512r1) certificate the constructor of X509Certificate2 crashes with an Access Denied Exception.
Create SelfSignedCertificate in Powershell
New-SelfSignedCertificate `
 -Subject ""CN=Test Code Signing RSA"" `
 -Type DocumentEncryptionCert `
 -KeyUsage ""DigitalSignature"" `
 -FriendlyName ""Test Code Signing"" `
 -NotAfter (get-date).AddYears(5) `
 -KeyExportPolicy Exportable `
 -SmimeCapabilities ` 
 -KeyAlgorithm ECDH_brainpoolP512r1

Read SelfSignedCertificate in code
var base64cert = ""MIIF/wIBAzCCBbsGCSqGSIb3DQEHAaCCBawEggWoMIIFpDCCAkcGCSqGSIb3DQEHAaCCAjgEggI0MIICMDCCAiwGCyqGSIb3DQEMCgECoIIBNjCCATIwHAYKKoZIhvcNAQwBAzAOBAi2P5j9EliEaQICB9AEggEQyJLkopAMyHJh0jQXtnlwK4yjpE0WqYXf9sNPPLOFXgaxNU7gLKc3F6kPJUxLCxnvjOe7bRJS3v4A0GQBBqeFEJjBT9hd88RaQ2NsNxDrQEh/ZAyTUg+l6CyApUtcJb5uehPVnj7xnWtu4vvxDh5hRqSVxSR50wOjk/MKlyX1hhF1JybzRiqESKIMLx84HWJqZ6Fp87asJ0/0isL+kVxarqLrTkv0CGt2QaLxZzu9YDGj6nuGy2EBQwGHwMCEVTFupX55njV4aU3YTG2U+BHFl667NekTtOXH5GXDbp6D+9PntXBxW2d3E68v7lBVMjPKfTsTeCs4aLOwQzsXIFgvouw6GgGsZCrYaQwMNuGayC4xgeIwDQYJKwYBBAGCNxECMQAwEwYJKoZIhvcNAQkVMQYEBAEAAAAwXQYJKoZIhvcNAQkUMVAeTgB0AGUALQA0ADYANwBmADEAOAAxAGMALQBiAGQAZQA0AC0ANAA5AGUANgAtAGEANABjADMALQA4ADQAOAAwADYAMgBmADIANgA4ADEAMTBdBgkrBgEEAYI3EQExUB5OAE0AaQBjAHIAbwBzAG8AZgB0ACAAUwBvAGYAdAB3AGEAcgBlACAASwBlAHkAIABTAHQAbwByAGEAZwBlACAAUAByAG8AdgBpAGQAZQByMIIDVQYJKoZIhvcNAQcBoIIDRgSCA0IwggM+MIIDOgYLKoZIhvcNAQwKAQOgggLdMIIC2QYKKoZIhvcNAQkWAaCCAskEggLFMIICwTCCAiagAwIBAgIQXQFCNRCYc4hHLhQAD247rTAJBgcqhkjOPQQBMDAxLjAsBgNVBAMMJVRlc3QgQ29kZSBTaWduaW5nIEVDQyBicmFpbnBvb2xQNTEycjEwHhcNMTgwMzAyMTQyMTQ1WhcNMjMwMzAyMTQzMTQ2WjAwMS4wLAYDVQQDDCVUZXN0IENvZGUgU2lnbmluZyBFQ0MgYnJhaW5wb29sUDUxMnIxMIGbMBQGByqGSM49AgEGCSskAwMCCAEBDQOBggAETcwT2kPzMxF5upq+xb2NpTmRk2Gkp1mThVESNI9A1tgWk3wIylN72b1t5yHxveiWdopn3LkeT0hTaXSJ4fZsHmYRo0KZS5fKZbSSiFlLbxAwndgG99HLakz/I59WtXzSenSaM6HkP+Nz0Kmxvvy0umOXLg0bU8qpX5tLUtEFAxOjgd8wgdwwDgYDVR0PAQH/BAQDAgeAMBQGA1UdJQQNMAsGCSsGAQQBgjdQATCBlAYJKoZIhvcNAQkPBIGGMIGDMAsGCWCGSAFlAwQBKjALBglghkgBZQMEAS0wCwYJYIZIAWUDBAEWMAsGCWCGSAFlAwQBGTALBglghkgBZQMEAQIwCwYJYIZIAWUDBAEFMAoGCCqGSIb3DQMHMAcGBSsOAwIHMA4GCCqGSIb3DQMCAgIAgDAOBggqhkiG9w0DBAICAgAwHQYDVR0OBBYEFMmLfUI9zvfjMlvbolK8pP0zeZNhMAkGByqGSM49BAEDgYkAMIGFAkEAlCq9PiR4Yl0A+kIZO1yyfmKpcmJI6++jZJJ1P2LxZIi9ZgIJQLIWjmBTMP1nswAzNbnqetOBuJy55+SkO2OsngJAGXIYtW8RBFcTmRYnhCLeIsB/De3khytnaeHNBZVB/x0n/gFqVNMaPZp6l4MPGhEBS8pcvLN4zvO7phxR0Xt3HDFKMBMGCSqGSIb3DQEJFTEGBAQBAAAAMDMGCSqGSIb3DQEJFDEmHiQAVABlAHMAdAAgAEMAbwBkAGUAIABTAGkAZwBuAGkAbgBnAAAwOzAfMAcGBSsOAwIaBBSas13IRWnhNtoPLKp29FJpLmCptgQUkF0JRqyYiDG0Ql7zAPED2uVWzykCAgfQ"";
new System.Security.Cryptography.X509Certificates.X509Certificate2(Convert.FromBase64String(base64cert), ""qwert"");

Exception
Internal.Cryptography.CryptoThrowHelper+WindowsCryptographicException: Access Denied
   at Internal.Cryptography.Pal.CertificatePal.FilterPFXStore(Byte[] rawData, SafePasswordHandle password, PfxCertStoreFlags pfxCertStoreFlags)
   at Internal.Cryptography.Pal.CertificatePal.FromBlobOrFile(Byte[] rawData, String fileName, SafePasswordHandle password, X509KeyStorageFlags keyStorageFlags)
   at System.Security.Cryptography.X509Certificates.X509Certificate..ctor(Byte[] rawData, String password, X509KeyStorageFlags keyStorageFlags)
   at System.Security.Cryptography.X509Certificates.X509Certificate2..ctor(Byte[] rawData, String password)
   at PkcsEncryption.Program.Certificate(Boolean rsa) in c:\git\PkcsEncryption\PkcsEncryption\Program.cs:line 88
   at PkcsEncryption.Program.Encrypt(Byte[] dataPlain, Boolean useRsa) in c:\git\PkcsEncryption\PkcsEncryption\Program.cs:line 56
   at PkcsEncryption.Program.Main(String[] args) in c:\git\PkcsEncryption\PkcsEncryption\Program.cs:line 22

","The PFX which you have encoded as base64 there has internally set the marker indicating it was exported from a machine keystore.  Your Access Denied indicates that you are not running as an administrator (and thus do not have the permission to add keys to the machine's keystore).
To ensure that keys from a PFX get added to the current user's key store set the X509KeyStorageFlags.UserKeySet flag.  Or, if you've installed the early access build (or, in the future, the released build) of .NET Framework v4.7.2 you can use EphemeralKeySet to keep the private key in memory and avoid the keystore altogether.
new System.Security.Cryptography.X509Certificates.X509Certificate2(
    Convert.FromBase64String(base64cert),
    ""qwert"",
    X509KeyStorageFlags.UserKeySet);

","1113","<c#><public-key-encryption><x509certificate2><elliptic-curve><pkcs#7>","1","7","1","2018-03-09 16:19:08","49197965","0","1","1776231","","2018-03-09 08:57:23","2018-03-02 15:00:13",""
"17409960","Recommended *minimal* elliptic curve library in c","Any recommendations for a c-library implementing elliptic curve cryptography - the smaller the better. 
I know openSSL provides it, but I want something as small as possible. It doesn't need any fancy stuff like constant time encryption / decryption / signing either.
Bonus points for nice-looking code.
","LibTomCrypt has a pretty terse ecc module.
","1106","<c><encryption><encryption-asymmetric><elliptic-curve>","0","2","1","2013-07-02 18:12:16","17432818","2","1","","","","2013-07-01 17:10:10","2014-09-05 07:46:03"
"10411450","PHP openssl_sign() ecparam key type not supported in this PHP build","openssl_sign is returning the signature string but printing this error. I am using elliptic curve key 
Warning: openssl_sign() [function.openssl-sign]: key type not supported in this PHP build! in

","An issue has been filed in the php issue tracker for this:
https://bugs.php.net/bug.php?id=66501
","1083","<php><openssl><digital-signature><elliptic-curve>","4","0","1","2014-01-31 21:40:30","","1","","642653","","2014-01-31 21:40:30","2012-05-02 09:55:58",""
"41753832","Converting a PrivateKey (SecRefKey) into NSData or Base64","I have a p12 file, from which I extract the PrivateKey, PublicKey both as SecKeyRef and the certificate as SecCertificateRef.
The P12 file have a ECDSA PrivateKey that I need to use to sign data (ECC).
So I'm using a suggested library: https://github.com/ricmoo/GMEllipticCurveCrypto
But I need to feed the library with the keys on Base64 or NSData, I can't feed SecKeyRef. I managed to extract the NSData for the publicKey using the methods provided here, it works.
But I can't find any way to convert a SecRefKey that points to a privateKey to NSData. Any ideas on how to do this, OR, sign and verify data in iOS using ECC with SecKeyRefs.

For reference, this method converts the P12 into iOS SecRefs:
- (BOOL)storeDetailsForP12CertificateData:(NSData *)certData password:(NSString*)pass identifier:(NSString*)identifier{    
    SecKeyRef publicKey, privateKey;
    SecCertificateRef certRef;

    //Extract keys and Certificate
    NSMutableDictionary * options = [[NSMutableDictionary alloc] init];
    [options setObject:pass forKey:(id)kSecImportExportPassphrase];

    CFArrayRef items = CFArrayCreate(NULL, 0, 0, NULL);
    OSStatus securityError = SecPKCS12Import((CFDataRef) certData,
                                             (CFDictionaryRef)options, &items);

    CFDictionaryRef identityDict = CFArrayGetValueAtIndex(items, 0);
    SecIdentityRef identityApp =
    (SecIdentityRef)CFDictionaryGetValue(identityDict,
                                         kSecImportItemIdentity);

    assert(securityError == noErr);

    //get private key
    SecIdentityCopyPrivateKey(identityApp, &privateKey);

    //get certificate
    SecIdentityCopyCertificate(identityApp, &certRef);

    //evaluate certificate.
    CFArrayRef certs = CFArrayCreate(kCFAllocatorDefault, (const void **) &certRef, 1, NULL);
    SecPolicyRef policy = SecPolicyCreateBasicX509();
    SecTrustRef trust;
    SecTrustCreateWithCertificates(certs, policy, &trust);
    (CFRelease(certs));
    SecTrustResultType trustResult;
    SecTrustEvaluate(trust, &trustResult);

    //get publickey
    publicKey = SecTrustCopyPublicKey(trust);

    //clean memory
    (CFRelease(trust));
    (CFRelease(policy));

    if (!publicKey || !privateKey || !certRef) {
        return NO;
    } else {
        KeyData *details = [[KeyData alloc] init];
        details.publicKey = publicKey;
        details.privateKey = privateKey;
        details.certificate = certRef;
        details.fileData = certData;

        return YES;
    }
}

","Looks like you simply need to use SecKeyCopyExternalRepresentation:
/*!
    @function SecKeyCopyExternalRepresentation
    @abstract Create an external representation for the given key suitable for the key's type.
    @param key The key to be exported.
    @param error On error, will be populated with an error object describing the failure.
    See ""Security Error Codes"" (SecBase.h).
    @result A CFData representing the key in a format suitable for that key type.
    @discussion This function may fail if the key is not exportable (e.g., bound to a smart card or Secure Enclave).
    The format in which the key will be exported depends on the type of key:
    * kSecAttrKeyTypeRSA                 PKCS#1 format
    * kSecAttrKeyTypeECSECPrimeRandom    SEC1 format (www.secg.org)
 */
CFDataRef _Nullable SecKeyCopyExternalRepresentation(SecKeyRef key, CFErrorRef *error)

Note that CFDataRef is toll-free bridged to NSData, so you can easily convert them.
","1076","<objective-c><encryption><private-key><elliptic-curve>","2","0","1","2017-01-20 09:44:32","","0","","-1","","2017-05-23 11:53:13","2017-01-19 23:54:24",""
"29547578","ECKeyAgreement in Generating public and private key using ecc","I am working on a concept of encryption and decryption using ecc.
I already generated public and private key. While I am encrypting the text I am getting this error:
 java.security.InvalidKeyException: ECKeyAgreement requires ECPrivateKey
at 
org.bouncycastle.jce.provider.JCEECDHKeyAgreement.engineInit(JCEECDHKeyAgreement.java:121)
at javax.crypto.KeyAgreement.init(KeyAgreement.java:462)
at javax.crypto.KeyAgreement.init(KeyAgreement.java:436)
at rbl2015.encryec.main(encryec.java:67)

This is my encryption Java file:
import java.io.File;
import java.io.FileInputStream;
import java.security.Key;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Security;
import java.security.spec.ECParameterSpec;
import java.security.spec.EllipticCurve;
import java.security.spec.KeySpec;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.util.Scanner;
import javax.crypto.Cipher;
import javax.crypto.KeyAgreement;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESKeySpec;
import org.apache.commons.codec.binary.Base64;
import org.bouncycastle.jce.provider.BouncyCastleProvider;


public class encryec
{
KeyPairGenerator kpg;
EllipticCurve curve;
ECParameterSpec ecSpec;
KeyPair aKeyPair;
static KeyAgreement aKeyAgree;
KeyPair bKeyPair;
KeyAgreement bKeyAgree;
KeyFactory keyFac;
static String msg;
public static void main(String args[])
{
    Security.addProvider(new BouncyCastleProvider());
    Scanner ss=new Scanner(System.in);

    try{
        String path = ""D:\\rp"";
        File filePublicKey = new File(path+""\\public.key"");
        FileInputStream fis = new FileInputStream(path+""\\public.key"");
        byte[] encodedPublicKey = new byte[(int) filePublicKey.length()];
        fis.read(encodedPublicKey);
        fis.close();

        // Read Private Key.
        File filePrivateKey = new File(path+""\\private.key"");
        fis = new FileInputStream(path+""\\private.key"");
        byte[] encodedPrivateKey = new byte[(int) filePrivateKey.length()];
        fis.read(encodedPrivateKey);
        fis.close();

        KeyFactory keyFactory = KeyFactory.getInstance(""ECDH"");
        X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(
        encodedPublicKey);
        PublicKey publicKey = keyFactory.generatePublic(publicKeySpec);

        PKCS8EncodedKeySpec privateKeySpec = new PKCS8EncodedKeySpec(encodedPrivateKey);

        PrivateKey privateKey = keyFactory.generatePrivate(privateKeySpec);

        aKeyAgree = KeyAgreement.getInstance(""ECDH"", ""BC"");
        aKeyAgree.init(privateKey);                     // exception line
        aKeyAgree.doPhase(publicKey, true);

        byte[] aBys = aKeyAgree.generateSecret(); 
        KeySpec aKeySpec = new DESKeySpec(aBys);
        SecretKeyFactory aFactory = SecretKeyFactory.getInstance(""DES"");
        Key aSecretKey = aFactory.generateSecret(aKeySpec);
        Cipher aCipher = Cipher.getInstance(aSecretKey.getAlgorithm());   
        aCipher.init(Cipher.ENCRYPT_MODE, aSecretKey);  
        byte[] encText = aCipher.doFinal(""Its Rahul"".getBytes());

        System.out.println(Base64.encodeBase64String(encText));
        System.out.println(encText);
    }
    catch(Exception e)
    {
        e.printStackTrace();
    }
}
}

I don't know what I am missing. I tried everything that I can to get the ECPrivateKey.
This is the code for generating the public and private key:
  import java.io.*;
  import java.security.*;
  import java.security.spec.*;

  public class Rahul {

   public static void main(String args[]) {
    Rahul rahul = new Rahul();
    try {
     String path = ""D:\\rp"";

     KeyPairGenerator keyGen = KeyPairGenerator.getInstance(""DSA"");

     keyGen.initialize(1024);
     KeyPair generatedKeyPair = keyGen.genKeyPair();

     System.out.println(""Generated Key Pair"");
     rahul.dumpKeyPair(generatedKeyPair);
     rahul.SaveKeyPair(path, generatedKeyPair);

     KeyPair loadedKeyPair = rahul.LoadKeyPair(path, ""DSA"");
     System.out.println(""Loaded Key Pair"");
     rahul.dumpKeyPair(loadedKeyPair);
    } catch (Exception e) {
     e.printStackTrace();
     return;
    }
   }

   private void dumpKeyPair(KeyPair keyPair) {
    PublicKey pub = keyPair.getPublic();
    System.out.println(""Public Key: "" + getHexString(pub.getEncoded()));

    PrivateKey priv = keyPair.getPrivate();
    System.out.println(""Private Key: "" + getHexString(priv.getEncoded()));
   }

   private String getHexString(byte[] b) {
    String result = """";
    for (int i = 0; i < b.length; i++) {
     result += Integer.toString((b[i] & 0xff) + 0x100, 16).substring(1);
    }
    return result;
   }

   public void SaveKeyPair(String path, KeyPair keyPair) throws IOException             {
    PrivateKey privateKey = keyPair.getPrivate();
    PublicKey publicKey = keyPair.getPublic();

    // Store Public Key.
    X509EncodedKeySpec x509EncodedKeySpec = new X509EncodedKeySpec(
      publicKey.getEncoded());
    FileOutputStream fos = new FileOutputStream(path + ""/public.key"");
    fos.write(x509EncodedKeySpec.getEncoded());
    fos.close();

    // Store Private Key.
    PKCS8EncodedKeySpec pkcs8EncodedKeySpec = new PKCS8EncodedKeySpec(
      privateKey.getEncoded());
    fos = new FileOutputStream(path + ""/private.key"");
    fos.write(pkcs8EncodedKeySpec.getEncoded());
    fos.close();
   }

         public KeyPair LoadKeyPair(String path, String algorithm)
     throws IOException, NoSuchAlgorithmException,
     InvalidKeySpecException {
    // Read Public Key.
    File filePublicKey = new File(path + ""/public.key"");
    FileInputStream fis = new FileInputStream(path + ""/public.key"");
    byte[] encodedPublicKey = new byte[(int) filePublicKey.length()];
    fis.read(encodedPublicKey);
    fis.close();

    // Read Private Key.
    File filePrivateKey = new File(path + ""/private.key"");
    fis = new FileInputStream(path + ""/private.key"");
    byte[] encodedPrivateKey = new byte[(int) filePrivateKey.length()];
    fis.read(encodedPrivateKey);
    fis.close();

    // Generate KeyPair.
    KeyFactory keyFactory = KeyFactory.getInstance(algorithm);
    X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(
encodedPublicKey);
    PublicKey publicKey = keyFactory.generatePublic(publicKeySpec);

    PKCS8EncodedKeySpec privateKeySpec = new PKCS8EncodedKeySpec(
encodedPrivateKey);
    PrivateKey privateKey = keyFactory.generatePrivate(privateKeySpec);

    return new KeyPair(publicKey, privateKey);
   }
  }

","You should try and create an EC(DH) key pair instead of a DSA key pair. Although the general method of operation is identical (both ECDSA and DSA are based on the Diffie-Hellman problem) the key types are certainly not.
","1073","<java><security><encryption><elliptic-curve>","0","0","1","2015-04-10 16:57:25","29559045","0","3","899126","","2015-04-10 16:57:25","2015-04-09 19:46:22",""
"42378394","Hot to use mechanisms CKM_ECDH1_DERIVE with pkcs11interop","I bought a NitroKey HSM and wanted to derive a secret with EC.
Previosly question
For this, I want to use the CKM_ECDH1_DERIVE mechanisms. Which is supported by this HSM, see:

Referring to the PKCS#11 specification this must be considered:

The mechanism CKM_ECDH1_DERIVE must be used with the function Derive (Page 188)
The mechanism CKM_ECDH1_DERIVE expects parameter CK_ECDH1_DERIVE_PARAMS (Page 222) with this arguments:


kdf: Key derivation function used on the shared secret value (CKD)
sharedData: Some data shared between the two parties
publicData: Other party's EC public key value

The function DeriveKey expects these arguments:


Mechanism CKM.CKM_ECDH1_DERIVE
ObjectHandle PrivateKey
ObjectAttributes (Page 338)


CKA.CKA_CLASS -> CKO.CKO_SECRET_KEY
CKA.CKA_KEY_TYPE -> CKK.CKK_GENERIC_SECRET
But ""However, since these facts are all implicit in the mechanism, there is no need to specify any of them"" so these can be null?



Problem
So with this information, I tried to implement a method.
But I get this Error:

Net.Pkcs11Interop.Common.Pkcs11Exception : Method C_DeriveKey returned CKR_TEMPLATE_INCOMPLETE

at Session.DeriveKey.
Explanation of CKR_TEMPLATE_INCOMPLETE (Page 64):

If the attribute values in the supplied template, together with any default attribute
  values and any attribute values contributed to the object by the object-creation
  function itself, are insufficient to fully specify the object to create, then the attempt
  should fail with the error code CKR_TEMPLATE_INCOMPLETE.

and here (Page 98)

CKR_TEMPLATE_INCOMPLETE: The template specified for creating an object is
  incomplete, and lacks some necessary attributes. See Section 10.1 for more
  information.

But I used the nesseary attributes:

CKA.CKA_CLASS -> CKO.CKO_SECRET_KEY
CKA.CKA_KEY_TYPE -> CKK.CKK_GENERIC_SECRET

Ideas?
Code
private const string LibraryPath = @""C:\Windows\System32\opensc-pkcs11.dll"";

public static byte[] Derive(string privateEc, string publicEc)
{
    Func<string, Session, CKO, ObjectHandle> getObjectHandle = (label, session, keyType) =>
    {
        var objectAttributes = new List<ObjectAttribute>
        {
            new ObjectAttribute(CKA.CKA_CLASS, keyType),
            new ObjectAttribute(CKA.CKA_LABEL, label),
            new ObjectAttribute(CKA.CKA_TOKEN, true)
        };

        return session.FindAllObjects(objectAttributes).First();
    };

    Func<ObjectHandle, Session, CKA, byte[]> getDataFromObject = (handle, session, type) =>
    {
        var attributes = new List<ulong> {(ulong) type};
        var requiredAttributes = session.GetAttributeValue(handle, attributes);
        return requiredAttributes[0].GetValueAsByteArray();
    };

    using (Pkcs11 pk = new Pkcs11(LibraryPath, false))
    {
        var slot = pk.GetSlotList(false).First();

        using (Session session = slot.OpenSession(false))
        {
            session.Login(CKU.CKU_USER, UserPin);

            var objectPrivate = getObjectHandle(privateEc, session, CKO.CKO_PRIVATE_KEY);
            var objectPublic = getObjectHandle(publicEc, session, CKO.CKO_PUBLIC_KEY);

            var publicKey = getDataFromObject(objectPublic, session, CKA.CKA_VALUE);

            byte[] data = session.GenerateRandom(32);
            var mechanism = new Mechanism(CKM.CKM_ECDH1_DERIVE, new CkEcdh1DeriveParams(1000, data, publicKey));

            var deriveAttributes = new List<ObjectAttribute>
            {
                new ObjectAttribute(CKA.CKA_CLASS, CKO.CKO_SECRET_KEY),
                new ObjectAttribute(CKA.CKA_KEY_TYPE, CKK.CKK_GENERIC_SECRET),
            };

            var derivedKey = session.DeriveKey(mechanism, objectPrivate, deriveAttributes);

            var derivedSecret = getDataFromObject(derivedKey, session, CKA.CKA_VALUE);

            Console.Out.WriteLine(Convert.ToBase64String(derivedSecret));

            return derivedSecret;
        }
    }
}

See also the gist (same code) https://gist.github.com/dhcgn/4ea235cdb20155ec5ea9dc9bbf3c9887
Update
Now with updated List of ObjectAttributes (thx to the answer) I get the exception Net.Pkcs11Interop.Common.Pkcs11Exception : Method C_DeriveKey returned CKR_DATA_LEN_RANGE.

CKR_DATA_LEN_RANGE: The plaintext input data to a cryptographic operation
  has a bad length.  Depending on the operation’s mechanism, this could mean that the plaintext data is too short, too long, or is not a multiple of some particular blocksize. 
  This return value has higher priority than CKR_DATA_INVALID.

For CKA.CKA_VALUE_LEN I tried different values with no success:
CKA_VALUE_LEN
-------------
24 (192)
40 (320)
48 (384)

I stumble upon the public key, I not sure if I extract the public key the right way. Because it has a length of 664 Bit.
CKA.CKA_VALUE of CKO.CKO_PUBLIC_KEY (664 Bit):
BFEEelKE3TrpE3e3f5nJATxEZrU0UeauhV/dFZXeXz5gqgZjuCtkJaUTainC/Mh357x3FyO7sGoPhzokD34oj5PJs0ItvATIKYtzvwaUkdZlDc0=

Extracted with the pkcs15-tool (864 Bit)
pkcs15-tool.exe --read-public-key 20
-----BEGIN PUBLIC KEY-----
MGowFAYHKoZIzj0CAQYJKyQDAwIIAQEJA1IABHpShN066RN3t3+ZyQE8RGa1NFHm
roVf3RWV3l8+YKoGY7grZCWlE2opwvzId+e8dxcju7BqD4c6JA9+KI+TybNCLbwE
yCmLc78GlJHWZQ3N
-----END PUBLIC KEY-----


Why is the public key different between pkcs15-tool and CKO.CKO_PUBLIC_KEY?
Which format does CkEcdh1DeriveParams expect for publicData? 
Do I extract the publicData the right way? Or what is the right way?
Must the value for CKA.CKA_VALUE_LEN equal to the lenght of my EC (320 Bit)?

","That's a very nice and complete description of a problem.
CKR_TEMPLATE_INCOMPLETE is always very painful to deal with because almost every library vendor expect different set of attributes to be provided and this error does not reveal which exact attributes are missing.
After a quick look at OpenSC source code I would try with following template:
var deriveAttributes = new List<ObjectAttribute>
{
    new ObjectAttribute(CKA.CKA_TOKEN, false),
    new ObjectAttribute(CKA.CKA_CLASS, CKO.CKO_SECRET_KEY),
    new ObjectAttribute(CKA.CKA_KEY_TYPE, CKK.CKK_GENERIC_SECRET),
    new ObjectAttribute(CKA.CKA_SENSITIVE, false),
    new ObjectAttribute(CKA.CKA_EXTRACTABLE, true),
    new ObjectAttribute(CKA.CKA_ENCRYPT, true),
    new ObjectAttribute(CKA.CKA_DECRYPT, true),
    new ObjectAttribute(CKA.CKA_WRAP, true),
    new ObjectAttribute(CKA.CKA_UNWRAP, true),
    new ObjectAttribute(CKA.CKA_VALUE_LEN, ???)
};

However I am not sure what is the correct value of CKA_VALUE_LEN attribute.
","1070","<pkcs#11><elliptic-curve><opensc><pkcs11interop><nitrokey>","3","4","1","2017-06-29 19:42:08","42378846","0","1","3325704","","2017-06-29 19:42:08","2017-02-21 21:31:14",""
"18926463","Creating an elliptic curve point object from coordinates","I have the x and y coordinate of a point and the name of a curve. I now want to create an org.bouncycastle.jce.interfaces.ECPublicKey object from that, automatically using the implementation that is provided. The goal is to be able to create the objects no matter if bouncycastle or its Android port, spongycastle, is used.
This is what I'm doing right now. Thing is, the EC5Util class is not included in spongycastle. I'd like to have a solution using maybe a factory with just one method I have to call. Is that possible?
java.security.spec.ECPoint w = new java.security.spec.ECPoint(x, y);
ECNamedCurveParameterSpec params = ECNamedCurveTable.getParameterSpec(""secp256k1"");
KeyFactory fact = KeyFactory.getInstance(""ECDSA"", ""BC"");
ECCurve curve = params.getCurve();
java.security.spec.EllipticCurve ellipticCurve = EC5Util.convertCurve(curve, params.getSeed());
java.security.spec.ECParameterSpec params2 = EC5Util.convertSpec(ellipticCurve, params);
java.security.spec.ECPublicKeySpec keySpec = new java.security.spec.ECPublicKeySpec(w, params2);
return (ECPublicKey) fact.generatePublic(keySpec);

","The unit tests within Bouncycastle, in ECPointTest.java, appears to have coverage for this case:
ECFieldElement.Fp x_ecfe = new ECFieldElement.Fp(q, x);
ECFieldElement.Fp y_ecfe = new ECFieldElement.Fp(q, y);
ECPoint.Fp point = new ECPoint.Fp(curve, x_ecfe, y_ecfe);

This is a very unique situation you are in.  If you cared to expand why you are doing this I'd be interested to find out.
","1066","<java><bouncycastle><elliptic-curve><spongycastle>","1","1","1","2013-09-20 23:56:21","","1","","577485","","2013-09-20 23:56:21","2013-09-20 21:53:32",""
"19890542","Scalar Multiplication for elliptic curve over Prime Field","I am trying to implement a scalar multiplication over a prime field for P192r1. Point addition works fine by using the code borrowed from java Scalar Multiplication
But concerning Point doubling where I used Code again from that link, it does not come to the right result. I tried to find the mistake but I couldn't find it. Has anyone already solved this mistake. 
 `public static ECPoint doublePoint(ECPoint r) {
        // TODO Auto-generated method stub

 BigInteger ONE = new BigInteger(""1"");;
 BigInteger TWO = new BigInteger(""2"");
 BigInteger p = new BigInteger(""6277101735386680763835789423207666416083908700390324961279"");

        BigInteger slope = (r.getAffineX().pow(2)).multiply(new BigInteger(""3""));

        slope = slope.add(new BigInteger(""3""));
        slope = slope.multiply((r.getAffineY().multiply(TWO)).modInverse(p));
        BigInteger Xout = slope.pow(2).subtract(r.getAffineX().multiply(new BigInteger(""2""))).mod(p);
        BigInteger Yout = (r.getAffineY().negate()).add(slope.multiply(r.getAffineX().subtract(Xout))).mod(p);
        ECPoint out = new ECPoint(Xout, Yout);
        return out;
    }`

","The original code added 3 in this line
slope = slope.add(new BigInteger(""3""));

But it should be adding a, so replace it with this line
slope = slope.add(a);

where a is
static BigInteger a = new BigInteger(""6277101735386680763835789423207666416083908700390324961276"");

Then you'll get 
Doubling is correct

when you run main function.
","1064","<java><elliptic-curve>","1","2","1","2013-11-12 09:09:50","19925025","1","0","-1","","2017-05-23 11:57:31","2013-11-10 13:57:47",""
"21232312","ECC Engine with BouncyCastle for Java","Well, 
I need make api using java to encrypt, decrypt and another things about Cryptografy. I'm using bouncycastle framework to do. But I can't found Elliptic Curve Cryptigrafy Engine into BC Framework, I found RSAEngine, IESEngine.
I wanna encrypt with public key, and decrypt with private key, but all exemples that I found need both keys to encrypt, so I no understand it. Like it:
Security.addProvider(new BouncyCastleProvider());

    KeyPairGenerator kpg = (KeyPairGenerator) KeyPairGenerator.getInstance(""ECIES"", ""BC"");

    kpg.initialize(192, new SecureRandom());

    KeyPair keyPair = kpg.generateKeyPair();
    PublicKey pubKey = keyPair.getPublic();
    PrivateKey privKey = keyPair.getPrivate();

    byte[] d = new byte[]{1, 2, 3, 4, 5, 6, 7, 8}; // 1. can someone tell me what this parameters does?
    byte[] e = new byte[]{8, 7, 6, 5, 4, 3, 2, 1};

    IESParameterSpec param = new IESParameterSpec(d, e, 192); // 2. and this parameters?
    IEKeySpec c1Key = new IEKeySpec(privKey, pubKey);
    System.out.println(c1Key.getPublic());

    Cipher cipher = Cipher.getInstance(""ECIES"", ""BC"");
    cipher.init(Cipher.ENCRYPT_MODE, c1Key, param);
    System.out.println(cipher.doFinal(""test12345678900987654321"".getBytes()));

But in sometimes I no have private key, as encrypt with public key.
Someone help me?
","Umm, as far as I know, ECC needs a different key for encrypting and decrypting. That's why it's called assymetric encryption.
Suppose Alice wants to send a message M(x,y) to Bob
1. The curve function is y^2 = x^3 + ax + b mod p with a reference point G(x,y)
2. Alice picks a private key nA and computes her public key Qa = nA.G
3. Bob picks a private key nB and computes his public key Qb = nB.G
4. Alice encrypts the message D = M + na.Qb (D = cipher text) and sends (Qa, D) to Bob
5. To decrypt the message, Bob computes M = D + (-nb).Qa and he recovers M 
Hope this helps.
","1055","<java><bouncycastle><elliptic-curve>","0","0","1","2014-04-19 04:04:49","","0","3","","","","2014-01-20 11:04:33",""
"50130448","Generate elliptic curve KeyPair via KeyStore on API Level <23","I need to generate an elliptic key pair in Android and store it to KeyStore to protect a private key from extraction.
I was able to generate a key pair using Spongycastle library, but I cannot import the key pair in the KeyStore. Firstly, because I do not have a certificate and secondly, even if I tried to create one, it did not import the key either.
I though of generating a key pair using KeyGenParameterSpec, but it's not accessible in APIs below version 23.
To sum up my question, is there a non-hacky way how to do it with general Android resources that are meant for that? Or it is simply impossible to work with elliptic curve keys on version Lollipop and lower?
","In the documentation of the Android keystore system is a section on supported key generation algorithms. It states:

Prior to API Level 23, EC keys can be generated using KeyPairGenerator
  of algorithm ""RSA"" initialized KeyPairGeneratorSpec whose key type is
  set to ""EC"" using setKeyType(String). EC curve name cannot be
  specified using this method -- a NIST P-curve is automatically chosen
  based on the requested key size.

If you can live with these limitations then you can use the Android Keystore for API levels down to API 19. It might seem that you can do down to API 18, but the necessary methods to set the key size and key type do not exist until API level 19. The name of the class used to build the parameter spec for API levels 19 through 22 inclusive is KeyPairGeneratorSpec.Builder. This is very similar to the name of the class used for API level 23 and above, KeyGenParameterSpec.Builder, so be careful not to confuse the two.
Here is a little snippet of code illustrating the above. It should run on API 19.
private void createEcKey() throws Exception {
    Calendar start = Calendar.getInstance();
    Calendar end = Calendar.getInstance();
    end.add(Calendar.YEAR, 1);
    KeyPairGeneratorSpec spec =
            new KeyPairGeneratorSpec.Builder(this)
                    .setAlias(""myKey"")
                    .setKeySize(256)
                    .setKeyType(""EC"")
                    .setSubject(new X500Principal(""CN=Dodgy Stuff""))
                    .setSerialNumber(BigInteger.valueOf(123456789L))
                    .setStartDate(start.getTime())
                    .setEndDate(end.getTime())
                    .build();
    KeyPairGenerator kpg = KeyPairGenerator.getInstance(
            ""RSA"", ""AndroidKeyStore"");
    kpg.initialize(spec);
    KeyPair keyPair = kpg.generateKeyPair();
    ECPublicKey ecPublicKey = (ECPublicKey) keyPair.getPublic();
    ECPrivateKey ecPrivateKey = (ECPrivateKey) keyPair.getPrivate();

    //
    // The following will throw an Exception if uncommented, because
    //    the private key is not allowed to leave the protection of
    //    the Androud Keystore boundary.
    //
    // byte [] privEncoded = ecPrivateKey.getEncoded();
}

","1045","<android><android-keystore><elliptic-curve>","0","4","2","2019-07-18 05:30:39","50191478","5","1","2649012","","2018-05-02 09:20:08","2018-05-02 08:40:24",""
"50130448","Generate elliptic curve KeyPair via KeyStore on API Level <23","I need to generate an elliptic key pair in Android and store it to KeyStore to protect a private key from extraction.
I was able to generate a key pair using Spongycastle library, but I cannot import the key pair in the KeyStore. Firstly, because I do not have a certificate and secondly, even if I tried to create one, it did not import the key either.
I though of generating a key pair using KeyGenParameterSpec, but it's not accessible in APIs below version 23.
To sum up my question, is there a non-hacky way how to do it with general Android resources that are meant for that? Or it is simply impossible to work with elliptic curve keys on version Lollipop and lower?
","Generate a secp256r1 key pair code:
val kpg: KeyPairGenerator = KeyPairGenerator.getInstance(KeyProperties.KEY_ALGORITHM_EC, ""AndroidKeyStore"")
val parameterSpec = KeyGenParameterSpec.Builder(""container"", KeyProperties.PURPOSE_ENCRYPT or KeyProperties.PURPOSE_DECRYPT)
                .setAlgorithmParameterSpec(ECGenParameterSpec(""secp256r1""))
                .setDigests(KeyProperties.DIGEST_SHA256, KeyProperties.DIGEST_SHA384, KeyProperties.DIGEST_SHA512)
                .build()
kpg.initialize(parameterSpec)
val keyPair = kpg.generateKeyPair()

val ecPublicKey = keyPair.public as ECPublicKey
val ecPrivateKey = keyPair.private as ECPrivateKey

","1045","<android><android-keystore><elliptic-curve>","0","-1","2","2019-07-18 05:30:39","50191478","5","1","2649012","","2018-05-02 09:20:08","2018-05-02 08:40:24",""
"7949471","Windows CNG ECDH Secret Agreement structure","I've spent a few days by searching what structure does ECDH secret agreement have, but no success. I found in MSDN that the NCryptSecretAgreement function sets a pointer to an NCRYPT_SECRET_HANDLE variable that receives a handle that represents the secret agreement value. I'm not familar with WinAPI at all so I simply can't do anything but reading docs.
I need to exchange keys between a Windows-based desktop app and a web app. What I need to know is how exactly CNG's KDF uses (hashes in my case) the secret agreement value. I'm using the SHA-256 algorithm as KDF and trying to hash X and Y of the secret agreement but result doesn't match to the one CNG computes. Any ideas?
Thank you.
","I cannot vouch for what Microsoft found fit to implement, but there is a standard on ECDH called X9.63. In that standard, ECDH works like this:

You run the DH thing, yielding the common curve point (X, Y) (that's the point you got from the peer, multiplied by your secret DH value).
You convert X (and only X; Y is discarded) into a sequence of bytes which we will call Z. Conversion is unsigned big-endian, and uses the field size: if X lives in field Fq, then the conversion yields exactly ceil(ceil(log q)/8). E.g. if you use the NIST P-521 curve, you work modulo a prime q which is such that 2520 < q < 2521, so ceil(log q) = 521 and the resulting byte sequence consists in exactly 66 bytes, whatever the value X. With the most commonly used elliptic curve (known as ""P-256""), that's 32 bytes.
To derive Z into a key, with a hash function H which has an output length of n bytes (e.g. n = 32 with SHA-256), you compute the potentially infinite string H1||H2||H3||... where ""||"" denotes concatenation, and Hi = H(Z||i) where ""i"" is represented as four bytes, using big-endian convention. In plain words, you hash Z along with a 32-bit counter, and do so again and again until you have enough bytes for your intended key length.

","1035","<windows><elliptic-curve><diffie-hellman><cng>","2","1","1","2019-08-19 10:32:44","7953736","0","1","608639","","2019-08-19 10:32:44","2011-10-31 02:32:03",""
"35960550","Elliptic curve point addition using bouncycastle","My problem is very straightforward: I need to add two points over Fp using Java. As soon as java api lacks some ecc utils I'm using bouncycastle.
Here is the formulas used:
P + Q = -R
α = (yq - yp)/(xq-xp)
уr = -yp + α(xp - xr)
xr = α^2 - xp - xq

And quick implementation of above formulas in java: 
String newline = System.lineSeparator();
BigInteger yp = new BigInteger(""4018974056539037503335449422937059775635739389905545080690979365213431566280"");
BigInteger yq = new BigInteger(""17614944419213781543809391949654080031942662045363639260709847859438286763994"");
BigInteger xp = new BigInteger(""2"");
BigInteger xq = new BigInteger(""57520216126176808443631405023338071176630104906313632182896741342206604859403"");
BigInteger p = new BigInteger(""57896044618658097711785492504343953926634992332820282019728792003956564821041"");
BigInteger a_ = new BigInteger(""7"");
BigInteger b_ = new BigInteger(""43308876546767276905765904595650931995942111794451039583252968842033849580414"");
ECFieldElement x1 = new ECFieldElement.Fp(p, xp);
ECFieldElement y1 = new ECFieldElement.Fp(p, yp);

ECFieldElement x2 = new ECFieldElement.Fp(p, xq);
ECFieldElement y2 = new ECFieldElement.Fp(p, yq);


ECFieldElement a = new ECFieldElement.Fp(p, a_);
System.out.print(""A = "" + a.toBigInteger() + newline);
ECFieldElement b = new ECFieldElement.Fp(p, b_);
System.out.print(""B = "" + b.toBigInteger() + newline);

BigInteger alpha = (yq.subtract(yp)).divide((xq.subtract(xp)));
ECFieldElement alpha_ = new ECFieldElement.Fp(p, alpha);

ECFieldElement xr = new ECFieldElement.Fp(p,alpha.pow(2).subtract(x1.toBigInteger()).subtract(x2.toBigInteger()));
ECFieldElement yr = new ECFieldElement.Fp(p,y1.negate().add(x1.multiply(alpha_)).subtract(xr.multiply(alpha_)).toBigInteger());
System.out.print(""P + Q x coordinate:"" + xr.toBigInteger() + newline);
System.out.print(""P + Q y coordinate:"" + yr.toBigInteger() + newline);

The output as follows:
A = 7
B = 43308876546767276905765904595650931995942111794451039583252968842033849580414
P + Q x coordinate:-57520216126176808443631405023338071176630104906313632182896741342206604859405
P + Q y coordinate:53877070562119060208450043081406894150999252942914736939037812638743133254761

These results are incorrect, because following Sage script and this service
have same result and it's different from mine.
p = 57896044618658097711785492504343953926634992332820282019728792003956564821041;
A = 7;
B = 43308876546767276905765904595650931995942111794451039583252968842033849580414;
xp = 2;
yp = 4018974056539037503335449422937059775635739389905545080690979365213431566280;
xq = 57520216126176808443631405023338071176630104906313632182896741342206604859403;
yq = 17614944419213781543809391949654080031942662045363639260709847859438286763994;
F = GF(p)
C = EllipticCurve(F, [ A, B ])
P = C(xp, yp)
Q = C(xq, yq)
P + Q
(51107436475926671824327183547145585639291252685317542895128927043108270260044 : 8275382333273532770266263241039288966808027917805772529614893800343160424015 : 1)

Can someone please point me out what I'd fix to get the right result?
","Here's a code example showing both an explicit calculation and also how you would just use the built-in library functionality for this. The output agrees with the Sage output in both cases.
package org.bc.sample;

import java.math.BigInteger;

import org.bouncycastle.math.ec.ECCurve;
import org.bouncycastle.math.ec.ECFieldElement;
import org.bouncycastle.math.ec.ECPoint;

public class ECPointAddition
{
    public static void main(String[] args)
    {
        BigInteger prime = new BigInteger(""57896044618658097711785492504343953926634992332820282019728792003956564821041"");
        BigInteger A = new BigInteger(""7"");
        BigInteger B = new BigInteger(""43308876546767276905765904595650931995942111794451039583252968842033849580414"");

        ECCurve curve = new ECCurve.Fp(prime, A, B);

        BigInteger Px = new BigInteger(""2"");
        BigInteger Py = new BigInteger(""4018974056539037503335449422937059775635739389905545080690979365213431566280"");
        BigInteger Qx = new BigInteger(""57520216126176808443631405023338071176630104906313632182896741342206604859403"");
        BigInteger Qy = new BigInteger(""17614944419213781543809391949654080031942662045363639260709847859438286763994"");

        // Explicit affine addition
        ECFieldElement xp = curve.fromBigInteger(Px), yp = curve.fromBigInteger(Py);
        ECFieldElement xq = curve.fromBigInteger(Qx), yq = curve.fromBigInteger(Qy);
        ECFieldElement alpha = yq.subtract(yp).divide(xq.subtract(xp));
        ECFieldElement xr = alpha.square().subtract(xp).subtract(xq);
        ECFieldElement yr = xp.subtract(xr).multiply(alpha).subtract(yp);

        System.out.println(""EXPLICIT"");
        System.out.println(xr.toBigInteger().toString(10));
        System.out.println(yr.toBigInteger().toString(10));

        // Point addition using built-in formulae
        ECPoint P = curve.createPoint(Px, Py);
        ECPoint Q = curve.createPoint(Qx, Qy);
        ECPoint R = P.add(Q).normalize();

        System.out.println(""BUILT-IN"");
        System.out.println(R.getAffineXCoord().toBigInteger().toString(10));
        System.out.println(R.getAffineYCoord().toBigInteger().toString(10));
    }
}

When you see formulae involving the coordinates of elliptic curve points, it should be understood that those calculations need to be done in the finite field the coordinates belong to, whereas you are calculating e.g. alpha just using BigInteger math. The divide in particular goes wrong as a result.
Note also that the explicit formula here won't work if the two input points have the same x-coordinate. The built-in library method handles this sort of edge case correctly, so I would recommend you use that.

Runnable version of code can be found here.
","1018","<java><bouncycastle><elliptic-curve>","3","5","1","2016-03-13 08:49:47","35967632","0","1","","","","2016-03-12 16:54:59",""
"37477586","ECC private key is longer than public key","I have generated ECC public and private key using secp192r1 curve. I get 75 for public and 125 for private encoded key array length. Why private key is longer than public key? Why private key is not longer two times than public? Why private key is not 192 bits = 24 bytes because of secp192r1?
Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());

ECNamedCurveParameterSpec ecSpec = ECNamedCurveTable.getParameterSpec(""secp192r1"");

KeyPairGenerator g = KeyPairGenerator.getInstance(""ECDSA"", ""BC"");
g.initialize(ecSpec, new SecureRandom());
KeyPair pair = g.generateKeyPair();

System.out.println(pair.getPublic().getEncoded().length);
System.out.println(pair.getPrivate().getEncoded().length);

","Code fragment below outputs 24 bytes private key:   
Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());

ECNamedCurveParameterSpec spec = ECNamedCurveTable.getParameterSpec(""secp192r1"");

KeyPairGenerator g = KeyPairGenerator.getInstance(""ECDSA"", ""BC"");
g.initialize(spec, new SecureRandom());
KeyPair pair = g.generateKeyPair();
ECPrivateKey ecPrivateKey = (ECPrivateKey)pair.getPrivate();

System.out.println(ecPrivateKey.getS().toByteArray().length);

","1011","<bouncycastle><private-key><public-key><elliptic-curve><java-security>","0","0","1","2017-10-10 07:37:41","37572497","5","","5962766","","2017-10-10 07:36:24","2016-05-27 07:39:23",""
"32936548","Elliptic Curve PublicKey (Java - bouncycastle): How to get 32 byte X and 32 byte Y value from ECPublicKey.toString()","I have a custom crypto engine for Elliptic curve, I am trying to make this compatible with Java's bouncy castle crypto, so I am testing my API (keypair generation) against Java's bouncycastle.
First thing is to share the publickey between Java & my crypto engine that way I can get the same shared secret.
My module takes Elliptic curve 32-byte X & 32-byte Y values. I was able to output X & Y from Java code by calling ""publickeyJava .toString()"" below and output comes formated as 'X: .... and Y: ....."" (as shown below). I copy pasted these X & Y values to my custom crypto engine and verified that I was able to get the same secret as generated by Java's bouncy castle, so I know my conversion works manually.
THE PROBLEM IS HOW TO EXTRACT THESE 32-BYTE X & Y VALUES IN JAVA PROGRAMATICALLY? I used java classes to get X & Y coordinate and printed with ""getW.getAffineX() and getW.AffineY()"" (as shown in my code below) but the values don't seem to match the output generated from ""publickey.tostring"" (which is what my module needs).
Is there a way to extract X & Y values from print ""pubclickey.tostring""? Please suggest.
/*** Java code that prints Elliptic curve X & Y from bouncycastle crypto ****/
public static int generateECKeys() {
    try {
        ECNamedCurveParameterSpec parameterSpec = ECNamedCurveTable.getParameterSpec(""secp256r1"");
        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(""ECDH"", ""SC"");

        keyPairGenerator.initialize(parameterSpec);
        KeyPair keyPair = keyPairGenerator.generateKeyPair();
        PublicKey publickeyJava = keyPair.getPublic();

        Log.e(TAG_LOG, ""X & Y values are ...."" + publickeyJava .toString());

        Log.d(""LOG_TAG"", ""BigInteger X value is = "" + ((ECPublicKey) publickeyJava).getW().getAffineX().toString());
        Log.d(""LOG_TAG"", ""BigInteger Y value is = "" + ((ECPublicKey) publickeyJava).getW().getAffineY().toString());
         /* .....code to generate shared secret   ..... */
        return 1;
    } catch(Exception e){e.printStackTrace();}
        return 0;
}

/******** OUTPUT ********/
X & Y values are ....EC Public Key             
    X: f98c87d3b6db30895b275630f30df9d796d067b06e4836f5615cad84965f4f85 
    Y: b8b58cb767f23e4bc4db0cc371ffb50cf12aa30407c1ba236f78a6c38948c2ee

BigInteger X value is = 324637435756455760457435640555474465574856445654455076545679
BigInteger Y value is = 954378375783465749076758439759347657056597437786534984623864

Thanks
","Today I got your same problem. I solved it in this way that it seems to me easier than parsing a String.

ECPublicKey publickeyJava = (ECPublicKey)keyPair.getPublic();
ECPoint ecp = chiavePubblica.getW();
// to access X and Y you can use
ecp.getAffineX()
ecp.getAffineY()

","962","<java><android><bouncycastle><jce><elliptic-curve>","2","0","1","2019-05-17 11:06:07","","4","1","","","","2015-10-04 17:56:16",""
"10378929","Conversion of ECPoint to BigInteger","Can anyone please help me to fix up this issue? I need to convert the public key to a BigInteger. Here the public key is ECPoint which is a  point on the curve (x,y). I don't know how to convert this to a BigInteger. Please help me. Here is my code:
public static void main(String[] args) throws  Exception {
    Security.addProvider(new BouncyCastleProvider());
    ECCurve curve = new ECCurve.Fp(
        new BigInteger(""883423532389192164791648750360308885314476597252960362792450860609699839""), // q
        new BigInteger(""7fffffffffffffffffffffff7fffffffffff8000000000007ffffffffffc"", 16), // a
        new BigInteger(""6b016c3bdcf18941d0d654921475ca71a9db2fb27d1d37796185c2942c0a"", 16)); // b

    ECParameterSpec ecSpec = new ECParameterSpec(
        curve,
        curve.decodePoint(Hex.decode(""020ffa963cdca8816ccc33b8642bedf905c3d358573d3f27fbbd3b3cb9aaaf"")), // G
        new BigInteger(""883423532389192164791648750360308884807550341691627752275345424702807307"")); // n
    KeyPairGenerator kpg = KeyPairGenerator.getInstance(""ECDSA"", ""BC"");
    kpg.initialize(ecSpec, new SecureRandom());
    KeyPair keyPair = kpg.generateKeyPair();
    PublicKey pubKey = keyPair.getPublic();
    System.out.println(pubKey);
    PrivateKey privKey = keyPair.getPrivate();
    System.out.println(privKey);
    BigInteger s = ((ECPrivateKey) privKey).getS();
    System.out.println(s);
    java.security.spec.ECPoint a = ((ECPublicKey) pubKey).getW();
}

","","958","<java><bouncycastle><elliptic-curve>","1","","0","2012-04-30 08:10:18","","4","","1111767","","2012-04-30 08:10:18","2012-04-30 05:32:47",""
"30860777","Use previously generated private key in ECIES","I wan to encrypt /decrypt data using ECIES , I am using cryptopp for this.
AutoSeededRandomPool prng;

//get private key generated
ECIES<ECP>::Decryptor d0(prng, ASN1::secp256r1());
PrintPrivateKey(d0.GetKey());

//get public key 
ECIES<ECP>::Encryptor e0(d0);
PrintPublicKey(e0.GetKey());

//encrypt the message
string em0; // encrypted message
StringSource ss1 (message, true, new PK_EncryptorFilter(prng, e0, new StringSink(em0) ) );

//decrypt the message   
string dm0; // decrypted message
StringSource ss2 (em0, true, new PK_DecryptorFilter(prng, d1, new StringSink(dm0) ) );

Everything else is fine but I want to do the above same thing using already generated 'private key' and not randomly generated 'private key' unlike the case above. How can I do this?
I have tried the following code but it just simply crashes
AutoSeededRandomPool prng;

std::string  privatekeyString=""02C200102C180F9E6A4E7A2F58B5BE86BC179478"";

CryptoPP::HexDecoder decoder;
decoder.Put((byte*)privatekeyString.data(), privatekeyString.size());
decoder.MessageEnd();

ECIES<ECP> ::Decryptor d0;
d0.AccessKey().AccessGroupParameters().Initialize(ASN1::secp128r1());

crash point
//load private key  
d0.AccessKey().Load(decoder);
PrintPrivateKey(d0.GetKey());

//get public key    
ECIES<ECP>::Encryptor e0(d0);
PrintPublicKey(e0.GetKey());

string em0; // encrypted message
StringSource ss1(message, true, new PK_EncryptorFilter(prng, e0, new StringSink(em0) ) );
cout<<""encrypted msg: ""<<em0<<""  and its length: ""<<em0.length()<<endl;

string dm0; // decrypted message
StringSource ss2 (em0, true, new PK_DecryptorFilter(prng, d0, new StringSink(dm0) ) );
cout <<""decrypted msg: ""<< dm0<<""  and its length: ""<<dm0.length() <<   endl;

Edit 2
In response to @jww answer I managed to decode the message with the private key as:
  try
  {
    AutoSeededRandomPool prng;

    std::string exponent=""AsIAECwYD55qTnovWLW+hrwXlHg="";
    StringSource ss(exponent, true /*pumpAll*/, new CryptoPP::HexDecoder);


    Integer x;
    x.Decode(ss, ss.MaxRetrievable(), Integer::UNSIGNED);
    // cout << ""Exponent: "" << std::hex << x << endl;

    ECIES<ECP>::Decryptor decryptor;
    decryptor.AccessKey().Initialize(ASN1::secp128r1(), x);

    bool valid = decryptor.AccessKey().Validate(prng, 3);
    if(!valid)
    {
        cout<<""Exponent is not valid for P-128""<<endl;
        return;
    }
      //  throw  Exception(CryptoPP::Exception::OTHER_ERROR, ""Exponent is not valid for P-256"");

    // Or: decryptor.AccessKey().ThrowIfInvalid(prng, 3);

    cout << ""Exponent is valid for P-128"" << endl;

    PrintPrivateKey(decryptor.GetKey());


    //get public key
    ECIES<ECP>::Encryptor encryptor(decryptor);
    PrintPublicKey(encryptor.GetKey());



    string em0; // encrypted message
    StringSource ss1(message, true, new PK_EncryptorFilter(prng, encryptor, new StringSink(em0) ) );
    cout<<""encrypted msg: ""<<em0<<""  and its length: ""<<em0.length()<<endl;

    string dm0; // decrypted message
    StringSource ss2 (em0, true, new PK_DecryptorFilter(prng, decryptor, new StringSink(dm0) ) );
    cout <<""decrypted msg: ""<< dm0<<""  and its length: ""<<dm0.length() << endl;

}
catch(const CryptoPP::Exception& ex)
{
    std::cerr << ex.what() << endl;
}

But when I try to encrypt the message using public key I got error 
CryptoPP::CryptoMaterial::InvalidMaterial: CryptoMaterial: this object contains invalid values
Here is my code:
std::string     public_point=""AsIAEFjzIcX+Kvhe8AmLoGUc8aYAEAwf5ecREGZ2u4RLxQuav/A="";
StringSource ss(public_point, true, new CryptoPP::HexDecoder);

ECIES<ECP>::Encryptor encryptor;
    encryptor.AccessKey().AccessGroupParameters().Initialize(ASN1::secp128r1());

ECP::Point point;
encryptor.GetKey().GetGroupParameters().GetCurve().DecodePoint(point, ss, ss.MaxRetrievable());
cout << ""X: "" << std::hex << point.x << endl;
cout << ""Y: "" << std::hex << point.y << endl;

encryptor.AccessKey().SetPublicElement(point);


encryptor.AccessKey().ThrowIfInvalid(prng, 3);

PrintPublicKey(encryptor.GetKey());



string em0; // encrypted message
StringSource ss1(message, true, new PK_EncryptorFilter(prng, encryptor, new StringSink(em0) ) );
cout<<""encrypted msg: ""<<em0<<""  and its length: ""<<em0.length()<<endl;

","The problem I am having is you don't appear to know what you have, and the some of the parameters you are using are wrong when taken with the other parameters. So its pretty much a stab in the dark.

First, you should wrap the disk operations in a try/catch. I/O can always cause problems, so be sure to catch exceptions related to the iostream stuff. You should also catch the Crypto++ Exception related to key loading. That will handle the ""crash"" with no information.
So your code might look something like:
try
{
    // Read key from disk, load it into Crypto++ object
}
catch(const Exception& ex)
{
    cerr << ""Caught Crypto++ exception "" << ex.what() << endl;
}
catch(const std::runtime_error& ex)
{
    cerr << ""Caught C++ runtime error "" << ex.what() << endl;
}


Second, this looks like a private exponent, and not a private key:
std::string  privatekeyString=""02C200102C180F9E6A4E7A2F58B5BE86BC179478"";

And its too big to be in P-128. Maybe you should do something like:
try
{
    AutoSeededRandomPool prng;

    std::string exponent=""02C200102C180F9E6A4E7A2F58B5BE86BC179478"";
    StringSource ss(exponent, true /*pumpAll*/, new HexDecoder);

    Integer x;
    x.Decode(ss, ss.MaxRetrievable(), Integer::UNSIGNED);        
    // cout << ""Exponent: "" << std::hex << x << endl;

    ECIES<ECP>::Decryptor decryptor;
    decryptor.AccessKey().Initialize(ASN1::secp256r1(), x);

    bool valid = decryptor.AccessKey().Validate(prng, 3);
    if(!valid)
        throw  Exception(Exception::OTHER_ERROR, ""Exponent is not valid for P-256"");

    // Or: decryptor.AccessKey().ThrowIfInvalid(prng, 3);

    cout << ""Exponent is valid for P-256"" << endl;        
}
catch(const Exception& ex)
{
    cerr << ex.what() << endl;
}


Or, you can:
ECIES<ECP>::Decryptor decryptor;
decryptor.AccessKey().AccessGroupParameters().Initialize(ASN1::secp256r1());
decryptor.AccessKey().SetPrivateExponent(x);


If you add the following to the program above:
// Encode key, use OID versus domain paramters
string encoded;
HexEncoder encoder(new StringSink(encoded));

decryptor.AccessKey().AccessGroupParameters().SetEncodeAsOID(true);
decryptor.GetKey().Save(encoder);

cout << ""Private key: "" << encoded << endl;

You will get the following for the private key:
$ ./ecies-test.exe
Exponent: 2c200102c180f9e6a4e7a2f58b5be86bc179478h
Private key: 3041020100301306072A8648CE3D020106082A8648CE3D030107042730250201010
42000000000000000000000000002C200102C180F9E6A4E7A2F58B5BE86BC179478

As you can see, the key is not ""02C200102C180F9E6A4E7A2F58B5BE86BC179478"".
The 12 leading 0's look suspicious to me. Though the exponent validates, you should verify the exponent and the field. The closest fit I could find is the curve secp160r2 (of course, curves like secp192k1 and secp224k1 work too).
The private key above is the hex encoding of ecies.priv.der shown below.

Third, this could be a public point in compressed form due to the leading 02.
std::string  privatekeyString=""02C200102C180F9E6A4E7A2F58B5BE86BC179478"";

If that is the case, then you are supposed to be able to do this, but I can't get it to decode the point (see Minimizing Key Size for Persistence on the wiki). x and y are 0 after the operation; maybe the problem is with the field:
std::string public_point=""02C200102C180F9E6A4E7A2F58B5BE86BC179478"";
StringSource ss(public_point, true, new HexDecoder);

ECIES<ECP>::Encryptor encryptor;
encryptor.AccessKey().AccessGroupParameters().Initialize(ASN1::secp128r1());

ECP::Point point;
encryptor.GetKey().GetGroupParameters().GetCurve().DecodePoint(point, ss, ss.MaxRetrievable());
cout << ""X: "" << std::hex << point.x << endl;
cout << ""Y: "" << std::hex << point.y << endl;

encryptor.AccessKey().SetPublicElement(point);
encryptor.AccessKey().ThrowIfInvalid(prng, 3);


Fourth, you should probably save the entire key, and not just the exponent. Here's a program for you that shows you how to save and load the keys. It also shows you how to perform encryption and decryption in one-liners.
/////////////////////////////////////////////////
// Part one - generate keys

ECIES<ECP>::Decryptor decryptor(prng, ASN1::secp256r1());
ECIES<ECP>::Encryptor encryptor(decryptor);

/////////////////////////////////////////////////
// Part two - save keys

FileSink fs1(""ecies.priv.der"", true /*binary*/);
decryptor.AccessKey().AccessGroupParameters().SetEncodeAsOID(true);
decryptor.GetKey().Save(fs1);

FileSink fs2(""ecies.pub.der"", true /*binary*/);
encryptor.AccessKey().AccessGroupParameters().SetEncodeAsOID(true);
encryptor.GetKey().Save(fs2);

/////////////////////////////////////////////////
// Part three - encrypt/decrypt

string message, encrypted, recovered;

if(argc >= 2 && argv[1] != NULL)
    message = argv[1];
else
    message = ""Attack at dawn!"";

StringSource ss1 (message,   true /*pumpAll*/, new PK_EncryptorFilter(prng, encryptor, new StringSink(encrypted)));
StringSource ss2 (encrypted, true /*pumpAll*/, new FileSink(""ecies.encrypted.bin"", true /*binary*/));
StringSource ss3 (encrypted, true /*pumpAll*/, new PK_DecryptorFilter(prng, decryptor, new StringSink(recovered)));

cout << recovered << endl;


Here is what a private key looks like from the test program above. Notice it has the field encoded into the structure so you don't have to guess at it (P-256 versus P-128 versus P-521).
$ dumpasn1 ecies.priv.der 
  0  65: SEQUENCE {
  2   1:   INTEGER 0
  5  19:   SEQUENCE {
  7   7:     OBJECT IDENTIFIER ecPublicKey (1 2 840 10045 2 1)
 16   8:     OBJECT IDENTIFIER prime256v1 (1 2 840 10045 3 1 7)
       :     }
 26  39:   OCTET STRING, encapsulates {
 28  37:     SEQUENCE {
 30   1:       INTEGER 1
 33  32:       OCTET STRING
       :         00 00 00 00 00 00 00 00 00 00 00 00 02 C2 00 10
       :         2C 18 0F 9E 6A 4E 7A 2F 58 B5 BE 86 BC 17 94 78
       :       }
       :     }
       :   }

And the public key:
$ dumpasn1 ecies.pub.der 
  0  89: SEQUENCE {
  2  19:   SEQUENCE {
  4   7:     OBJECT IDENTIFIER ecPublicKey (1 2 840 10045 2 1)
 13   8:     OBJECT IDENTIFIER prime256v1 (1 2 840 10045 3 1 7)
       :     }
 23  66:   BIT STRING
       :     04 08 9B D2 1C 3A DC 08 8B 1F F1 D0 F4 97 A0 87
       :     FE 4F 78 EA E2 B8 30 B8 E7 06 37 68 27 4C 71 CD
       :     63 C3 E2 90 66 64 2B 1C F6 79 00 36 AF 72 4C 61
       :     69 FA E9 06 00 9A 15 32 0B 85 B5 88 B2 C5 88 46
       :     5E
       :   }


Crypto++ has a wiki page on ECIES. See Elliptic Curve Integrated Encryption Scheme. They also have Bouncy Castle interop workarounds.

You can also PEM encode the keys, but you need a patch to do it because its not part of the library. For the patch, see PEM Pack on the Crypto++ wiki.
","955","<c++><public-key-encryption><crypto++><elliptic-curve>","4","2","3","2015-06-18 09:52:44","30912098","11","1","3632958","","2015-06-17 07:26:08","2015-06-16 06:58:26",""
"30860777","Use previously generated private key in ECIES","I wan to encrypt /decrypt data using ECIES , I am using cryptopp for this.
AutoSeededRandomPool prng;

//get private key generated
ECIES<ECP>::Decryptor d0(prng, ASN1::secp256r1());
PrintPrivateKey(d0.GetKey());

//get public key 
ECIES<ECP>::Encryptor e0(d0);
PrintPublicKey(e0.GetKey());

//encrypt the message
string em0; // encrypted message
StringSource ss1 (message, true, new PK_EncryptorFilter(prng, e0, new StringSink(em0) ) );

//decrypt the message   
string dm0; // decrypted message
StringSource ss2 (em0, true, new PK_DecryptorFilter(prng, d1, new StringSink(dm0) ) );

Everything else is fine but I want to do the above same thing using already generated 'private key' and not randomly generated 'private key' unlike the case above. How can I do this?
I have tried the following code but it just simply crashes
AutoSeededRandomPool prng;

std::string  privatekeyString=""02C200102C180F9E6A4E7A2F58B5BE86BC179478"";

CryptoPP::HexDecoder decoder;
decoder.Put((byte*)privatekeyString.data(), privatekeyString.size());
decoder.MessageEnd();

ECIES<ECP> ::Decryptor d0;
d0.AccessKey().AccessGroupParameters().Initialize(ASN1::secp128r1());

crash point
//load private key  
d0.AccessKey().Load(decoder);
PrintPrivateKey(d0.GetKey());

//get public key    
ECIES<ECP>::Encryptor e0(d0);
PrintPublicKey(e0.GetKey());

string em0; // encrypted message
StringSource ss1(message, true, new PK_EncryptorFilter(prng, e0, new StringSink(em0) ) );
cout<<""encrypted msg: ""<<em0<<""  and its length: ""<<em0.length()<<endl;

string dm0; // decrypted message
StringSource ss2 (em0, true, new PK_DecryptorFilter(prng, d0, new StringSink(dm0) ) );
cout <<""decrypted msg: ""<< dm0<<""  and its length: ""<<dm0.length() <<   endl;

Edit 2
In response to @jww answer I managed to decode the message with the private key as:
  try
  {
    AutoSeededRandomPool prng;

    std::string exponent=""AsIAECwYD55qTnovWLW+hrwXlHg="";
    StringSource ss(exponent, true /*pumpAll*/, new CryptoPP::HexDecoder);


    Integer x;
    x.Decode(ss, ss.MaxRetrievable(), Integer::UNSIGNED);
    // cout << ""Exponent: "" << std::hex << x << endl;

    ECIES<ECP>::Decryptor decryptor;
    decryptor.AccessKey().Initialize(ASN1::secp128r1(), x);

    bool valid = decryptor.AccessKey().Validate(prng, 3);
    if(!valid)
    {
        cout<<""Exponent is not valid for P-128""<<endl;
        return;
    }
      //  throw  Exception(CryptoPP::Exception::OTHER_ERROR, ""Exponent is not valid for P-256"");

    // Or: decryptor.AccessKey().ThrowIfInvalid(prng, 3);

    cout << ""Exponent is valid for P-128"" << endl;

    PrintPrivateKey(decryptor.GetKey());


    //get public key
    ECIES<ECP>::Encryptor encryptor(decryptor);
    PrintPublicKey(encryptor.GetKey());



    string em0; // encrypted message
    StringSource ss1(message, true, new PK_EncryptorFilter(prng, encryptor, new StringSink(em0) ) );
    cout<<""encrypted msg: ""<<em0<<""  and its length: ""<<em0.length()<<endl;

    string dm0; // decrypted message
    StringSource ss2 (em0, true, new PK_DecryptorFilter(prng, decryptor, new StringSink(dm0) ) );
    cout <<""decrypted msg: ""<< dm0<<""  and its length: ""<<dm0.length() << endl;

}
catch(const CryptoPP::Exception& ex)
{
    std::cerr << ex.what() << endl;
}

But when I try to encrypt the message using public key I got error 
CryptoPP::CryptoMaterial::InvalidMaterial: CryptoMaterial: this object contains invalid values
Here is my code:
std::string     public_point=""AsIAEFjzIcX+Kvhe8AmLoGUc8aYAEAwf5ecREGZ2u4RLxQuav/A="";
StringSource ss(public_point, true, new CryptoPP::HexDecoder);

ECIES<ECP>::Encryptor encryptor;
    encryptor.AccessKey().AccessGroupParameters().Initialize(ASN1::secp128r1());

ECP::Point point;
encryptor.GetKey().GetGroupParameters().GetCurve().DecodePoint(point, ss, ss.MaxRetrievable());
cout << ""X: "" << std::hex << point.x << endl;
cout << ""Y: "" << std::hex << point.y << endl;

encryptor.AccessKey().SetPublicElement(point);


encryptor.AccessKey().ThrowIfInvalid(prng, 3);

PrintPublicKey(encryptor.GetKey());



string em0; // encrypted message
StringSource ss1(message, true, new PK_EncryptorFilter(prng, encryptor, new StringSink(em0) ) );
cout<<""encrypted msg: ""<<em0<<""  and its length: ""<<em0.length()<<endl;

","I'm going to add another answer to show you how to serialize private exponents and public points in case you had trouble with the public points. It also shows you how to Save the PrivateKeyInfo and SubjectPublicKeyInfo.
Its produces output similar to below. You will need a patch for the Base64URLEncoder. its not part of the library.
$ ./ecies-test.exe
Private exponent
  Hex: 57E91FA3EF48706D07E56D8CB566204A4416B833EFB9687D75A37D572EC42277
  Base64: V+kfo+9IcG0H5W2MtWYgSkQWuDPvuWh9daN9Vy7EInc=
  Base64 (URL safe): V-kfo-9IcG0H5W2MtWYgSkQWuDPvuWh9daN9Vy7EInc=
Pubic point
  Hex: 037142DE6143B6AD44C74135FE71222AC1406F541E53CB635112DE4928EC94763C
  Base64: A3FC3mFDtq1Ex0E1/nEiKsFAb1QeU8tjURLeSSjslHY8
  Base64 (URL safe): A3FC3mFDtq1Ex0E1_nEiKsFAb1QeU8tjURLeSSjslHY8
Private key (PrivateKeyInfo)
  3059301306072A8648CE3D020106082A8648CE3D030107034200047142DE6143B6AD44C74135FE71
  222AC1406F541E53CB635112DE4928EC94763CFA903D9282691AE47A2D718297465EF44E905A89ED
  2D4553ED1DF906A6E2383B
Public key (SubjectPublicKeyInfo)
  3041020100301306072A8648CE3D020106082A8648CE3D03010704273025020101042057E91FA3EF
  48706D07E56D8CB566204A4416B833EFB9687D75A37D572EC42277


With the private exponent and public point above, the following works just fine:
string pub_point(""A7EDDUXAA4/6kOZ8H+firJ95YtKZvDrPFmyVoisyBfuW"");
StringSource ss(pub_point, true, new Base64Decoder);

ECIES<ECP>::Encryptor encryptor;
encryptor.AccessKey().AccessGroupParameters().Initialize(ASN1::secp256r1());

ECP::Point point;
encryptor.GetKey().GetGroupParameters().GetCurve().DecodePoint(point, ss, ss.MaxRetrievable());

encryptor.AccessKey().SetPublicElement(point);
encryptor.AccessKey().ThrowIfInvalid(prng, 3);


ECIES<ECP>::Decryptor decryptor;
decryptor.AccessKey().Initialize(prng, ASN1::secp256r1());

const Integer& priv_exp = decryptor.GetKey().GetPrivateExponent();
SecByteBlock x(priv_exp.MinEncodedSize());
priv_exp.Encode(x, x.size());

string s1, s2, s3;    
HexEncoder f1(new StringSink(s1));
Base64Encoder f2(new StringSink(s2));
Base64URLEncoder f3(new StringSink(s3));

ChannelSwitch cs1;
cs1.AddDefaultRoute(f1);
cs1.AddDefaultRoute(f2);
cs1.AddDefaultRoute(f3);

ArraySource as1(x, x.size(), true /*pumpAll*/, new Redirector(cs1));

cout << ""Private exponent"" << endl;
cout << ""  Hex: "" << s1 << endl;
cout << ""  Base64: "" << s2 << endl;
cout << ""  Base64 (URL safe): "" << s3 << endl;

//////////////////////////////////////////

ECIES<ECP>::Encryptor encryptor(decryptor);
ECP::Point pub_point = encryptor.GetKey().GetGroupParameters().ExponentiateBase(priv_exp);
SecByteBlock y(encryptor.GetKey().GetGroupParameters().GetCurve().EncodedPointSize(true /*compressed*/));
encryptor.GetKey().GetGroupParameters().GetCurve().EncodePoint(y, pub_point, true /*compressed*/);

string s4, s5, s6;    
HexEncoder f4(new StringSink(s4));
Base64Encoder f5(new StringSink(s5));
Base64URLEncoder f6(new StringSink(s6));

ChannelSwitch cs2;
cs2.AddDefaultRoute(f4);
cs2.AddDefaultRoute(f5);
cs2.AddDefaultRoute(f6);

ArraySource as2(y, y.size(), true /*pumpAll*/, new Redirector(cs2));

cout << ""Pubic point"" << endl;
cout << ""  Hex: "" << s4 << endl;
cout << ""  Base64: "" << s5 << endl;
cout << ""  Base64 (URL safe): "" << s6 << endl;

//////////////////////////////////////////

string s10, s11;
HexEncoder hex1(new StringSink(s10));
HexEncoder hex2(new StringSink(s11));

encryptor.AccessKey().AccessGroupParameters().SetEncodeAsOID(true);
encryptor.GetKey().Save(hex1);
decryptor.AccessKey().AccessGroupParameters().SetEncodeAsOID(true);
decryptor.GetKey().Save(hex2);

cout << ""Private key"" << endl;
cout << s10 << endl;

cout << ""Public key"" << endl;
cout << s11 << endl;

","955","<c++><public-key-encryption><crypto++><elliptic-curve>","4","1","3","2015-06-18 09:52:44","30912098","11","1","3632958","","2015-06-17 07:26:08","2015-06-16 06:58:26",""
"30860777","Use previously generated private key in ECIES","I wan to encrypt /decrypt data using ECIES , I am using cryptopp for this.
AutoSeededRandomPool prng;

//get private key generated
ECIES<ECP>::Decryptor d0(prng, ASN1::secp256r1());
PrintPrivateKey(d0.GetKey());

//get public key 
ECIES<ECP>::Encryptor e0(d0);
PrintPublicKey(e0.GetKey());

//encrypt the message
string em0; // encrypted message
StringSource ss1 (message, true, new PK_EncryptorFilter(prng, e0, new StringSink(em0) ) );

//decrypt the message   
string dm0; // decrypted message
StringSource ss2 (em0, true, new PK_DecryptorFilter(prng, d1, new StringSink(dm0) ) );

Everything else is fine but I want to do the above same thing using already generated 'private key' and not randomly generated 'private key' unlike the case above. How can I do this?
I have tried the following code but it just simply crashes
AutoSeededRandomPool prng;

std::string  privatekeyString=""02C200102C180F9E6A4E7A2F58B5BE86BC179478"";

CryptoPP::HexDecoder decoder;
decoder.Put((byte*)privatekeyString.data(), privatekeyString.size());
decoder.MessageEnd();

ECIES<ECP> ::Decryptor d0;
d0.AccessKey().AccessGroupParameters().Initialize(ASN1::secp128r1());

crash point
//load private key  
d0.AccessKey().Load(decoder);
PrintPrivateKey(d0.GetKey());

//get public key    
ECIES<ECP>::Encryptor e0(d0);
PrintPublicKey(e0.GetKey());

string em0; // encrypted message
StringSource ss1(message, true, new PK_EncryptorFilter(prng, e0, new StringSink(em0) ) );
cout<<""encrypted msg: ""<<em0<<""  and its length: ""<<em0.length()<<endl;

string dm0; // decrypted message
StringSource ss2 (em0, true, new PK_DecryptorFilter(prng, d0, new StringSink(dm0) ) );
cout <<""decrypted msg: ""<< dm0<<""  and its length: ""<<dm0.length() <<   endl;

Edit 2
In response to @jww answer I managed to decode the message with the private key as:
  try
  {
    AutoSeededRandomPool prng;

    std::string exponent=""AsIAECwYD55qTnovWLW+hrwXlHg="";
    StringSource ss(exponent, true /*pumpAll*/, new CryptoPP::HexDecoder);


    Integer x;
    x.Decode(ss, ss.MaxRetrievable(), Integer::UNSIGNED);
    // cout << ""Exponent: "" << std::hex << x << endl;

    ECIES<ECP>::Decryptor decryptor;
    decryptor.AccessKey().Initialize(ASN1::secp128r1(), x);

    bool valid = decryptor.AccessKey().Validate(prng, 3);
    if(!valid)
    {
        cout<<""Exponent is not valid for P-128""<<endl;
        return;
    }
      //  throw  Exception(CryptoPP::Exception::OTHER_ERROR, ""Exponent is not valid for P-256"");

    // Or: decryptor.AccessKey().ThrowIfInvalid(prng, 3);

    cout << ""Exponent is valid for P-128"" << endl;

    PrintPrivateKey(decryptor.GetKey());


    //get public key
    ECIES<ECP>::Encryptor encryptor(decryptor);
    PrintPublicKey(encryptor.GetKey());



    string em0; // encrypted message
    StringSource ss1(message, true, new PK_EncryptorFilter(prng, encryptor, new StringSink(em0) ) );
    cout<<""encrypted msg: ""<<em0<<""  and its length: ""<<em0.length()<<endl;

    string dm0; // decrypted message
    StringSource ss2 (em0, true, new PK_DecryptorFilter(prng, decryptor, new StringSink(dm0) ) );
    cout <<""decrypted msg: ""<< dm0<<""  and its length: ""<<dm0.length() << endl;

}
catch(const CryptoPP::Exception& ex)
{
    std::cerr << ex.what() << endl;
}

But when I try to encrypt the message using public key I got error 
CryptoPP::CryptoMaterial::InvalidMaterial: CryptoMaterial: this object contains invalid values
Here is my code:
std::string     public_point=""AsIAEFjzIcX+Kvhe8AmLoGUc8aYAEAwf5ecREGZ2u4RLxQuav/A="";
StringSource ss(public_point, true, new CryptoPP::HexDecoder);

ECIES<ECP>::Encryptor encryptor;
    encryptor.AccessKey().AccessGroupParameters().Initialize(ASN1::secp128r1());

ECP::Point point;
encryptor.GetKey().GetGroupParameters().GetCurve().DecodePoint(point, ss, ss.MaxRetrievable());
cout << ""X: "" << std::hex << point.x << endl;
cout << ""Y: "" << std::hex << point.y << endl;

encryptor.AccessKey().SetPublicElement(point);


encryptor.AccessKey().ThrowIfInvalid(prng, 3);

PrintPublicKey(encryptor.GetKey());



string em0; // encrypted message
StringSource ss1(message, true, new PK_EncryptorFilter(prng, encryptor, new StringSink(em0) ) );
cout<<""encrypted msg: ""<<em0<<""  and its length: ""<<em0.length()<<endl;

","As jww suggested I have successfully completed encryption and decryption.
Below are the code snippets if anyone wants.
Decryption
string decrypt(std::string encryptedMessage ,  std::string   privateKeyExponent)
{
    string decryptedMessage;
    try
    {
        AutoSeededRandomPool prng;

        //since the 'privateKeyExponent' is in base-64 format use Base64Decoder
        StringSource ss(privateKeyExponent, true /*pumpAll*/, new CryptoPP::Base64Decoder);

        Integer x;
        x.Decode(ss, ss.MaxRetrievable(), Integer::UNSIGNED);

        ECIES<ECP>::Decryptor decryptor;

        //curve used is secp256k1
        //make decryptor's access key using decoded private exponent's value
        decryptor.AccessKey().Initialize(ASN1::secp256k1(), x);

        //check whether decryptor's access key is valid or not
        bool valid = decryptor.AccessKey().Validate(prng, 3);
        if(!valid)
           decryptor.AccessKey().ThrowIfInvalid(prng, 3);

        cout << ""Exponent is valid for P-256k1"" << endl;

        //decrypt the message using private key
        StringSource ss2 (encryptedMessage, true, new PK_DecryptorFilter(prng, decryptor, new StringSink(decryptedMessage) ) );
        cout <<""decrypted msg: ""<< decryptedMessage<<""  and its length: ""<<decryptedMessage.length() << endl;

    }
    catch(const CryptoPP::Exception& ex)
    {
        std::cerr << ex.what() << endl;
    }
    return decryptedMessage;
}

Encryption
string encrypt(std::string message ,  std::string  compressedPublicKeyPoint)
{
    string encryptedMessage;
    try
    {
        AutoSeededRandomPool prng;

        //public key is a point consisting of ""public key point x"" and ""public key point y""
        //compressed public key also known as ""public-point"" formed using point-compression of public key


        //since the key is in base-64 format use Base64Decoder
        StringSource ss(compressedPublicKeyPoint, true, new CryptoPP::Base64Decoder);
     ECIES<ECP>::Encryptor encryptor;

        //curve used is secp256k1
        encryptor.AccessKey().AccessGroupParameters()
       .Initialize(ASN1::secp256k1());

        //get point on the used curve
        ECP::Point point;
        encryptor.GetKey().GetGroupParameters().GetCurve().DecodePoint(point, ss, ss.MaxRetrievable());
        cout << ""X: "" << std::hex << point.x << endl;
        cout << ""Y: "" << std::hex << point.y << endl;

        //set encryptor's public element
        encryptor.AccessKey().SetPublicElement(point);

        //check whether the encryptor's access key thus formed is valid or not
        encryptor.AccessKey().ThrowIfInvalid(prng, 3);

        // encrypted message
        StringSource ss1(message, true, new PK_EncryptorFilter(prng, encryptor, new StringSink(encryptedMessage) ) );
        cout<<""encrypted msg: ""<<encryptedMessage<<""  and its length: ""<<encryptedMessage.length()<<endl;
    }
    catch(const CryptoPP::Exception& ex)
    {
        std::cerr << ex.what() << endl;
    }

    return encryptedMessage;
}

","955","<c++><public-key-encryption><crypto++><elliptic-curve>","4","0","3","2015-06-18 09:52:44","30912098","11","1","3632958","","2015-06-17 07:26:08","2015-06-16 06:58:26",""
"11979732","NFC compatible tag to use for elliptic curve encryption","I have an Android project that requires me to use an NFC tag for encryption/signing data using an elliptical curve algorithm.
I need the tag to be able to perform the crypto itself using a keypair that I generate externally. It's important that the private key is stored on the tag and not transferred to Android to perform the signing.
I also need to write protect all tags so data can only be written to them if it's signed by me.
I'd like the form factor of the tag to be circular and as small as possible.
From my research so far, it's looking like I have to use Java Cards, but I'm not sure of this.
Can anyone confirm appropriate devices I could use?
","You need some micro-controller card. I have never seen those in any other form than the standard credit card form (ID-1).
A Java Card card is certainly an option, such as a NXP JCOP or Gemalto TOP card. They can be bought on-line in various places. To write an applet for such a card, requires that you have access to the SDK for that card (often available only under NDA). Java Card programming is quite unlike Java programming, furthermore it requires knowledge of such things as ISO 7816-4 and (in your case) crypto.
Another possibility could be ZeitControl BasicCard. The cards are available from various online smart card shops and from ZeitControl themselves (not all cards can do ECC). The SDK is free and available from the ZeitControl website. The programming language for the card takes some getting used to, though, but a lot of communication details are handled automatically. If you need help interfacing a BasicCard applet with an Android app, you can request additional information from ZeitControl (they were very helpful when I contacted them). It is not overly complicated, though.
","947","<android><nfc><elliptic-curve><javacard>","0","3","1","2012-08-16 09:19:34","11984126","0","","","","","2012-08-16 02:01:14",""
"24534320","OpenSSL i2d_ECPrivateKey() crashes","I have the following program. It successfully obtains the raw 32 byte EC private key data and then creates a EC_KEY from it. But i2d_ECPrivateKey fails to give the size of the DER encoded private key, as it crashes. Does anyone know why and how to fix this?
#include ""CBWIF.h""
#include <openssl/ssl.h>

int main(int argc, char * argv[]) {

    CBWIF wif;

    if (argc != 2)
        return EXIT_FAILURE;

    // Decode WIF string
    CBByteArray str;
    CBInitByteArrayFromString(&str, argv[1], false);
    CBInitWIFFromString(&wif, &str, false);
    CBDestroyByteArray(&str);

    // Get key
    uint8_t key[32];
    CBWIFGetPrivateKey(&wif, key);
    CBDestroyWIF(&wif);

    // Create OpenSSL key

    EC_KEY * eckey = EC_KEY_new_by_curve_name(NID_secp256k1);
    BIGNUM * bn = BN_bin2bn(key, CB_PRIVKEY_SIZE, NULL);
    if (!EC_KEY_set_private_key(eckey, bn)) 
        return EXIT_FAILURE;

    // Convert key to DER format

    int len = i2d_ECPrivateKey(eckey, NULL); // <-- CRASH HERE  
    unsigned char derkey[len];
    i2d_ECPrivateKey(eckey, (unsigned char **)&derkey);

    EC_KEY_free(eckey);

    // Encode DER key as hex

    char out[len*2+1];  
    CBBytesToString(derkey, 0, len, out, false);

    // Print to stdout      
    puts(out);

    return EXIT_SUCCESS;
}

CB_PRIVKEY_SIZE is 32. I verified that the key data from CBWIFGetPrivateKey is correct. The program crashes with the following stacktrace:
#0  0x00007ffff766cb03 in EC_POINT_point2oct () from /usr/lib/x86_64-linux-gnu/libcrypto.so.1.0.0
#1  0x00007ffff7658124 in i2d_ECPrivateKey () from /usr/lib/x86_64-linux-gnu/libcrypto.so.1.0.0
#2  0x0000000000400bf6 in main (argc=2, argv=0x7fffffffe038) at examples/WIF2DER.c:46

","The reason is that you cannot run i2d_ECPrivateKey without setting a public key, probably due to a bug in OpenSSL. I generated the public key and solved a few other issues an now the program works:
#include ""CBWIF.h""
#include <openssl/ssl.h>

int main(int argc, char * argv[]) {

    CBWIF wif;

    if (argc != 2)
        return EXIT_FAILURE;

    // Decode WIF string
    CBByteArray str;
    CBInitByteArrayFromString(&str, argv[1], false);
    CBInitWIFFromString(&wif, &str, false);
    CBDestroyByteArray(&str);

    // Get key
    uint8_t key[32];
    CBWIFGetPrivateKey(&wif, key);
    CBDestroyWIF(&wif);

    // Create OpenSSL key
    EC_KEY * eckey = EC_KEY_new_by_curve_name(NID_secp256k1);
    BIGNUM * bn = BN_bin2bn(key, CB_PRIVKEY_SIZE, NULL);

    if (!EC_KEY_set_private_key(eckey, bn)) 
        return EXIT_FAILURE;

    // Create public key as OpenSSL cannot do this easily
    EC_GROUP * group = EC_GROUP_new_by_curve_name(NID_secp256k1);
    EC_POINT * point = EC_POINT_new(group);
    BN_CTX * ctx = BN_CTX_new();

    EC_POINT_mul(group, point, bn, NULL, NULL, ctx);

    BN_CTX_free(ctx);
    EC_GROUP_free(group);
    BN_free(bn);

    if (!EC_KEY_set_public_key(eckey, point))
        return EXIT_FAILURE;

    EC_POINT_free(point);

    // Check the key
    if (!EC_KEY_check_key(eckey))
        return EXIT_FAILURE;

    // Convert key to DER format
    int len = i2d_ECPrivateKey(eckey, NULL);    
    unsigned char derkey[len];
    unsigned char * derkeyPtr = derkey;
    i2d_ECPrivateKey(eckey, &derkeyPtr);

    // Freeing the EC_KEY here crashes for some reason???

    // Encode DER key as hex

    char out[len*2+1];  
    CBBytesToString(derkey, 0, len, out, false);

    // Print to stdout
    puts(out);

    return EXIT_SUCCESS;
}

","935","<c><openssl><elliptic-curve>","3","0","2","2014-07-04 01:21:43","","1","","608639","","2014-07-03 01:47:16","2014-07-02 14:52:12",""
"24534320","OpenSSL i2d_ECPrivateKey() crashes","I have the following program. It successfully obtains the raw 32 byte EC private key data and then creates a EC_KEY from it. But i2d_ECPrivateKey fails to give the size of the DER encoded private key, as it crashes. Does anyone know why and how to fix this?
#include ""CBWIF.h""
#include <openssl/ssl.h>

int main(int argc, char * argv[]) {

    CBWIF wif;

    if (argc != 2)
        return EXIT_FAILURE;

    // Decode WIF string
    CBByteArray str;
    CBInitByteArrayFromString(&str, argv[1], false);
    CBInitWIFFromString(&wif, &str, false);
    CBDestroyByteArray(&str);

    // Get key
    uint8_t key[32];
    CBWIFGetPrivateKey(&wif, key);
    CBDestroyWIF(&wif);

    // Create OpenSSL key

    EC_KEY * eckey = EC_KEY_new_by_curve_name(NID_secp256k1);
    BIGNUM * bn = BN_bin2bn(key, CB_PRIVKEY_SIZE, NULL);
    if (!EC_KEY_set_private_key(eckey, bn)) 
        return EXIT_FAILURE;

    // Convert key to DER format

    int len = i2d_ECPrivateKey(eckey, NULL); // <-- CRASH HERE  
    unsigned char derkey[len];
    i2d_ECPrivateKey(eckey, (unsigned char **)&derkey);

    EC_KEY_free(eckey);

    // Encode DER key as hex

    char out[len*2+1];  
    CBBytesToString(derkey, 0, len, out, false);

    // Print to stdout      
    puts(out);

    return EXIT_SUCCESS;
}

CB_PRIVKEY_SIZE is 32. I verified that the key data from CBWIFGetPrivateKey is correct. The program crashes with the following stacktrace:
#0  0x00007ffff766cb03 in EC_POINT_point2oct () from /usr/lib/x86_64-linux-gnu/libcrypto.so.1.0.0
#1  0x00007ffff7658124 in i2d_ECPrivateKey () from /usr/lib/x86_64-linux-gnu/libcrypto.so.1.0.0
#2  0x0000000000400bf6 in main (argc=2, argv=0x7fffffffe038) at examples/WIF2DER.c:46

","Here's how OpenSSL uses it in <openssl src/crypto/ec/ec_ameth.c. All the other similar uses in the library utilize i2d_ECPrivateKey_bio. Also, you might take a quick look at how the OPENSSL_EC_NAMED_CURVE flag is used with V_ASN1_OBJECT.
unsigned char   *ep, *p;
int         eplen, ptype;
unsigned int    tmp_flags, old_flags;
...

old_flags = EC_KEY_get_enc_flags(ec_key);
tmp_flags = old_flags | EC_PKEY_NO_PARAMETERS;
...

eplen = i2d_ECPrivateKey(ec_key, NULL);
if (!eplen)
{
    EC_KEY_set_enc_flags(ec_key, old_flags);
    ECerr(EC_F_ECKEY_PRIV_ENCODE, ERR_R_EC_LIB);
    return 0;
}
ep = (unsigned char *) OPENSSL_malloc(eplen);
if (!ep)
{
    EC_KEY_set_enc_flags(ec_key, old_flags);
    ECerr(EC_F_ECKEY_PRIV_ENCODE, ERR_R_MALLOC_FAILURE);
    return 0;
}
p = ep;
if (!i2d_ECPrivateKey(ec_key, &p))
{
    EC_KEY_set_enc_flags(ec_key, old_flags);
    OPENSSL_free(ep);
    ECerr(EC_F_ECKEY_PRIV_ENCODE, ERR_R_EC_LIB);
    return 0;
}
...


Also take a look at Avoid a NULL dereference in i2d_ECPrivateKey() when an EC_KEY lacks the public key member from OpenBSD's LibReSSL project.
","935","<c><openssl><elliptic-curve>","3","0","2","2014-07-04 01:21:43","","1","","608639","","2014-07-03 01:47:16","2014-07-02 14:52:12",""
"44207335","x25519 curve key generation and authentication with OpenSSL","I am using OpenSSL in C to write a client and a server which will have to authenticate their keys to each other. I want to use x25519 curve for key exchange, and the key exchange needs to be authenticated.
I know that the EVP interface provides such functionality but I cannot find any example somewhere (with some level of verbosity).
How do I perform x25519 curve key generation and authentication with OpenSSL; and how do I perform the exchange? Any kind of help would be appreciated!
","","915","<c><openssl><elliptic-curve>","1","","0","2017-05-26 22:06:10","","7","","608639","","2017-05-26 22:06:10","2017-05-26 17:39:38",""
"46700477","Does Azure Key Vault support ECC(Elliptic Curve Cryptography)?","Does Azure Key Vault support ECC(Elliptic Curve Cryptography)?
","Good question. I dont believe EEC is supported yet, Christos Matskas (MS Azure Dev) blog from March 17th 2017 states:
""The service currently supports symmetric RSA keys but there is already scope for adding asymmetric and elliptic curve key support in future releases. The keys can be generated either by using the service or you can choose to import existing keys. For keys generated using the service, there are 2 types of supported algorithms:

Simple RSA
RSA-HSM

In addition USER VOICE has at least two user requests asking for this feature to be implemented, you can add your feedback request here too.
Ref: 
https://blogs.technet.microsoft.com/uktechnet/2017/03/17/application-security-with-azure-key-vault/
https://feedback.azure.com/forums/216840-security-and-compliance/suggestions/10877748-ecc-support-for-azure-key-vault
https://feedback.azure.com/forums/586780-blockchain/suggestions/17940250-support-ecc-signing-within-key-vault
","887","<azure><elliptic-curve><azure-keyvault>","1","0","3","2018-05-24 18:45:10","50110650","0","","139985","","2017-10-12 02:32:40","2017-10-12 02:31:19",""
"46700477","Does Azure Key Vault support ECC(Elliptic Curve Cryptography)?","Does Azure Key Vault support ECC(Elliptic Curve Cryptography)?
","It looks like Elliptic Curve is now supported in Azure.
There is a tutorial online in F# with someone using it https://tomislav.tech/2018-01-31-ethereum-keyvault-generating-keys/
Or there is also some information in the documentation now.
It is not marked as complete here https://feedback.azure.com/forums/216840-security-and-compliance/suggestions/10877748-ecc-support-for-azure-key-vault but the latest comment says it is now supported.
","887","<azure><elliptic-curve><azure-keyvault>","1","1","3","2018-05-24 18:45:10","50110650","0","","139985","","2017-10-12 02:32:40","2017-10-12 02:31:19",""
"46700477","Does Azure Key Vault support ECC(Elliptic Curve Cryptography)?","Does Azure Key Vault support ECC(Elliptic Curve Cryptography)?
","Yes. Here's how I imported an EC key using Microsoft.Azure.KeyVault.WebKey in .NET.
Construct JSON web key and azure KeyBundle:
JsonWebKey jwk = new JsonWebKey();
jwk.CurveName = JsonWebKeyCurveName.P256;
jwk.Kty = ""EC"";
jwk.D = ec_d; // ec_d is a 32-byte byte array representing the private key
jwk.X = ec_x; // ec_x is a 32-byte byte array representing the x coordinate
jwk.Y = ec_y; // ec_x is a 32-byte byte array representing the y coordinate

KeyBundle keyBundle = new KeyBundle
{
    Key = jwk
};

Construct request:
string keyName = ""testECkey1"";
await kvClient.ImportKeyAsync(vault.Properties.VaultUri, keyName, keyBundle);

You'll need to have authenticated to Azure first. I used a lot of the example code here: https://github.com/Azure-Samples/key-vault-dotnet-authentication/blob/master/KeyVaultAuthSample.cs
Once I figured out the right jwk parameters I got the error ""EC key is not valid - bad crypto service output"". Turns out I was pushing my bytes up little endian when they needed to be big endian, so I just used Array.Reverse.
Also, I had to extract the X and Y coords from the EC public key manually. This was helpful: https://davidederosa.com/basic-blockchain-programming/elliptic-curve-keys/
","887","<azure><elliptic-curve><azure-keyvault>","1","0","3","2018-05-24 18:45:10","50110650","0","","139985","","2017-10-12 02:32:40","2017-10-12 02:31:19",""
"43765718","Elliptic Curve Cryptography on PHP and Android","I need help in understanding Elliptic Curve Cryptography on php and android .. I have read about Spongy castle and Bouncy Castle... what I understood so far is that Each side needs to generate a pair of keys (public and private) and a shared secret key which they will use for the encryption and decryption.. am I right? or is there another key as well... i am a bit confused.. also I am unable to find anything for php ...any help is appreciated...
I also know that ECDSA is only used to generate signatures and that ECDH is used for encryption/decryption of messages which is what I need..
","
what I understood so far is that Each side needs to generate a pair of
  keys (public and private) and a shared secret key which they will use
  for the encryption and decryption.. am I right?

Yes. Each side generates key pairs and sends their public keys to each other. Private keys must be kept securely and not disclosed. 
Secret key is generated from recipient private key and sender public key and vice versa. 
Elliptic Curve Digital Signature Algorithm (ECDSA) is used to sign data with private key and verify it with corresponding public key.
Elliptic curve Diffie–Hellman (ECDH): 

is an anonymous key agreement protocol that allows two parties, each
  having an elliptic curve public–private key pair, to establish a
  shared secret over an insecure channel.

So you need ECDH if you want to encrypt and decrypt data.
","873","<java><php><android><public-key-encryption><elliptic-curve>","1","1","1","2017-05-14 11:32:07","","4","","1781150","","2017-05-03 18:33:17","2017-05-03 16:43:01",""
"18476537","ECC key encoding in pyecc and seccure","I am working with pyecc which uses the seccure C library.
When a public key is generated I get something back like this:
#Gp}7RRWK5Dyg&-m5yHve1p{?<o0xi.M8-?W^]xb))oA]|qO%[5v?#IxteV?

Are these the 'raw bytes' or is this encoded in some form? When I use os.urandom(16) I get all kinds of messed up characters, but not from this generate public key function. Does that mean that there is some encoding? I've looked at the seccure source code, but I still don't understand why I get all these 'normal' characters.
How do I turn this into a byte array (Python bytearray) of the exact key?
Code:
from pyecc import ECC
ecc = ECC.generate()
print ecc._public

","It looks like it might be a proprietary format from quickly looking at their code.  They serialize and compress the key information into a printable string.  You can download the source code and see an example of how to use it here: http://point-at-infinity.org/seccure/.
","870","<python><encryption><public-key-encryption><elliptic-curve>","1","2","1","2013-08-28 21:44:35","","2","","1020753","","2013-08-28 06:31:19","2013-08-27 22:30:41",""
"29908349","SAGE - Listing points on an elliptic curve","I have a generated elliptic curve of a modulus. I want to list just a few points on it (doesn't matter what they are, I just need one or two) and I was hoping to do:
E.points()

However due to the size of the curve this generates the error:
OverflowError: range() result has too many items

I attempted to list the first four by calling it as such: 
E.points()[:4]

However that generated the same error
Is there any way I can make it list just a few points? Maybe some Sage function?
","Since you did not include code to reproduce your situation, I take an example curve from the Sage documentation:
sage: E = EllipticCurve(GF(101),[23,34])

Generating random points
You can repeatedly use random_element or random_point to choose points at random:
sage: E.random_point()
(99 : 92 : 1)
sage: E.random_point()
(27 : 80 : 1)

This is probably the simplest way to obtain a few arbitrary points on the curve. random_element works in many places in Sage.
Intersecting with lines
It has the defining polynomial
sage: p = E.defining_polynomial(); p
-x^3 + y^2*z - 23*x*z^2 - 34*z^3

which is homogeneous in x,y,z. One way to find some points on that curve is by intersecting it with straight lines. For example, you could intersect it with the line y=0 and use z=1 to choose representatives (thus omitting representatives at z==0) using
sage: p(y=0,z=1).univariate_polynomial().roots(multiplicities=False)
[77]

So at that point you know that (77 : 0 : 1) is a point on your curve. You can automate things, intersecting with different lines until you have reached the desired number of points:
sage: res = []
sage: y = 0
sage: while len(res) < 4:
....:     for x in p(y=y,z=1).univariate_polynomial().roots(multiplicities=False):
....:         res.append(E((x, y, 1)))
....:     y += 1
....:
sage: res[:4]
[(77 : 0 : 1), (68 : 1 : 1), (23 : 2 : 1), (91 : 4 : 1)]

Adapting points()
You can have a look at how the points() method is implemented. Type E.points?? and you will see that it uses an internal method called _points_via_group_structure. Looking at the source of that (using E._points_via_group_structure?? or the link to the repo), you can see how that is implemented, and probably adapt it to only yield a smaller result. In particular you can see what role that range plays here, and use a smaller range instead.
","852","<math><point><sage><elliptic-curve>","1","2","1","2015-04-28 08:00:03","29913136","0","1","2059300","","2015-04-28 00:44:33","2015-04-28 00:38:46",""
"39690398","Computing EC PublicKey from Private Key with BC","In my program, I can successfully restore an EC private key from a PEM file using Spongy Castle (Bouncy Castle equivalent for Android). As the file does not contain the public key, I am trying to recompute the public key from the private key.
I am able to compute a valid public key. However, my public key contains much more data (311 bytes) than my original reference (92 bytes). This is even more than the private key (152 bytes).
How can I get the compressed (?) version of the public key
PrivateKey privateKey; // private key from pem file
PublicKey referencePublicKey; // public key in my testing environment, generated with an EC KeyPairGenerator


KeyFactory factory = KeyFactory.getInstance(""EC""); // using SpongyCastle provider                     
ECPrivateKeySpec privSpec = factory.getKeySpec(privateKey, ECPrivateKeySpec.class);
ECParameterSpec params = privSpec.getParams();

ECPoint q = params.getG().multiply(privSpec.getD());

ECPublicKeySpec pubSpec = new ECPublicKeySpec(q, params);
PublicKey publicKey = factory.generatePublic(pubSpec);


System.out.println( referencePublicKey.equals(publicKey) );   // true
System.out.println( referencePublicKey.getEncoded().length ); // 92
System.out.println( publicKey.getEncoded().length );          // 311

","","838","<java><android><public-key-encryption><elliptic-curve><spongycastle>","3","","0","2016-09-25 18:34:51","","6","1","","","","2016-09-25 18:34:51",""
"40679178","ECDSA private and public keys - how to get SecretKey?","I have used generateKeyPair() method to generate 2 different KeyPair using ECDSA algorithm.
public KeyPair generateKeyPair(){           

    ECNamedCurveParameterSpec spec = ECNamedCurveTable.getParameterSpec(""secp192r1"");
    KeyPairGenerator g = KeyPairGenerator.getInstance(""ECDSA"", ""BC"");
    g.initialize(spec, new SecureRandom());

    return g.generateKeyPair(); 
}

Then I used PrivateKey and PublicKey from separate KeyPair to get combined SecretKey:
private SecretKey generateSecretKey(PrivateKey privateKey, PublicKey publicKey) {

    KeyAgreement ka = KeyAgreement.getInstance(""ECDH"");
    ka.init(privateKey);
    ka.doPhase(publicKey),
            true);

    return ka.generateSecret(""AES"");
}

But I get at ka.generateSecret(""AES""):
Exception in thread ""main"" java.lang.ArrayIndexOutOfBoundsException
    at java.lang.System.arraycopy(Native Method)
    at org.bouncycastle.jcajce.provider.asymmetric.util.BaseAgreementSpi.engineGenerateSecret(Unknown Source)
    at javax.crypto.KeyAgreement.generateSecret(KeyAgreement.java:648)

If I use ECDSA, I get:
Exception in thread ""main"" java.security.NoSuchAlgorithmException: Algorithm ECDSA not available
   at javax.crypto.KeyAgreement.getInstance(KeyAgreement.java:184)

Using DH throws:
Exception in thread ""main"" java.security.InvalidKeyException: DHKeyAgreement requires DHPrivateKey
    at org.bouncycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi.engineInit(Unknown Source)
    at javax.crypto.KeyAgreement.implInit(KeyAgreement.java:346)
    at javax.crypto.KeyAgreement.chooseProvider(KeyAgreement.java:378)
    at javax.crypto.KeyAgreement.init(KeyAgreement.java:470)

How to get combined SecretKey from PrivateKey and PublicKey which are generated using ECDSA algorithm?
","A key agreement protocol usually works between two parties each of them having an own ECDS public and private key (hence we have four different keys). Are you sure that is what you want?
Therefore when you agree to a key you need the private key of party A and the public key of party B. And on the other end of the connection you use the private key of party B and the public key of party A.
The ECDH key agreement algorithm you selected is described in RFC3278 - for details read it.
","838","<encryption><aes><bouncycastle><elliptic-curve><ecdsa>","1","0","2","2016-11-21 14:49:08","40722936","4","","5962766","","2016-11-21 14:42:41","2016-11-18 14:11:41",""
"40679178","ECDSA private and public keys - how to get SecretKey?","I have used generateKeyPair() method to generate 2 different KeyPair using ECDSA algorithm.
public KeyPair generateKeyPair(){           

    ECNamedCurveParameterSpec spec = ECNamedCurveTable.getParameterSpec(""secp192r1"");
    KeyPairGenerator g = KeyPairGenerator.getInstance(""ECDSA"", ""BC"");
    g.initialize(spec, new SecureRandom());

    return g.generateKeyPair(); 
}

Then I used PrivateKey and PublicKey from separate KeyPair to get combined SecretKey:
private SecretKey generateSecretKey(PrivateKey privateKey, PublicKey publicKey) {

    KeyAgreement ka = KeyAgreement.getInstance(""ECDH"");
    ka.init(privateKey);
    ka.doPhase(publicKey),
            true);

    return ka.generateSecret(""AES"");
}

But I get at ka.generateSecret(""AES""):
Exception in thread ""main"" java.lang.ArrayIndexOutOfBoundsException
    at java.lang.System.arraycopy(Native Method)
    at org.bouncycastle.jcajce.provider.asymmetric.util.BaseAgreementSpi.engineGenerateSecret(Unknown Source)
    at javax.crypto.KeyAgreement.generateSecret(KeyAgreement.java:648)

If I use ECDSA, I get:
Exception in thread ""main"" java.security.NoSuchAlgorithmException: Algorithm ECDSA not available
   at javax.crypto.KeyAgreement.getInstance(KeyAgreement.java:184)

Using DH throws:
Exception in thread ""main"" java.security.InvalidKeyException: DHKeyAgreement requires DHPrivateKey
    at org.bouncycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi.engineInit(Unknown Source)
    at javax.crypto.KeyAgreement.implInit(KeyAgreement.java:346)
    at javax.crypto.KeyAgreement.chooseProvider(KeyAgreement.java:378)
    at javax.crypto.KeyAgreement.init(KeyAgreement.java:470)

How to get combined SecretKey from PrivateKey and PublicKey which are generated using ECDSA algorithm?
","It works correctly and returns curve size shared secret after removing ""AES"" argument from return ka.generateSecret();:
private SecretKey generateSecretKey(PrivateKey privateKey, PublicKey publicKey) {

    KeyAgreement ka = KeyAgreement.getInstance(""ECDH"");
    ka.init(privateKey);
    ka.doPhase(publicKey, true);

    return ka.generateSecret();
}

","838","<encryption><aes><bouncycastle><elliptic-curve><ecdsa>","1","1","2","2016-11-21 14:49:08","40722936","4","","5962766","","2016-11-21 14:42:41","2016-11-18 14:11:41",""
"21531014","BouncyCastle ESDSA implementation","I'm implementing ECDSA in C# using the BouncyCastle library and I'm having a hard time understanding TestECDsa192bitPrime() example.
FpCurve curve = new FpCurve(
  new BigInteger(
    ""6277101735386680763835789423207666416083908700390324961279""), // q
  new BigInteger(
    ""fffffffffffffffffffffffffffffffefffffffffffffffc"", 16), // a
  new BigInteger(
    ""64210519e59c80e70fa7e9ab72243049feb8deecc146b9b1"", 16)); // b

ECDomainParameters parameters = new ECDomainParameters(curve,
  curve.DecodePoint(Hex.Decode(
    ""03188da80eb03090f67cbf20eb43a18800f4ff0afd82ff1012"")), // G
    new BigInteger(
      ""6277101735386680763835789423176059013767194773182842284081"")); // n

ECPrivateKeyParameters priKey = new ECPrivateKeyParameters(
  ""ECDSA"",
  new BigInteger(
    ""651056770906015076056810763456358567190100156695615665659""), // d
  parameters);

ParametersWithRandom param = new ParametersWithRandom(priKey, k);
ECDsaSigner ecdsa = new ECDsaSigner();
ecdsa.Init(true, param);
curve.DecodePoint(Hex.Decode(
  ""0262b12d60690cdcf330babab6e69763b471f994dd702d16a5"")), // Q
  parameters);

In the above example how BouncyCastle directly calculated G( Basepoint) and Q( public key).
","This is a test to ensure signature process is correct. The values of G and Q were taken from X9.62 standard from 1998, section J.3.1, page 152, ECDSA over the field Fp, an example with 192 bit prime. 
This paper is not public, but the same values can be found on page 26 of Mathematical routines for the NIST prime elliptic curves paper.
","834","<c#><bouncycastle><elliptic-curve><ecdsa>","1","2","1","2014-02-04 19:44:43","21561907","0","","642653","","2014-02-04 19:36:26","2014-02-03 15:20:17",""
"30451123","Use ecc for encryption in ios","I am trying to implement ecc technique for encryption.
I went through the following posts:

Shared Secret based on Elliptic curve Diffie–Hellman with CommonCrypto 
Elliptic Curve Crypto in iOS

which doesn't have any satisfactory solutions.
Now, I am thinking of using a python library
https://github.com/yann2192/pyelliptic
But I am not aware if this would be the better solution for using  ecc for encryption as I would still need to figure out a way to use the python library in objc.
Can somebody point me in right direction? 
","Expanding on @puzzlepalace's comment, you might wanna try Libsodium. They even have a Swift library.
","828","<python><ios><public-key-encryption><elliptic-curve><commoncrypto>","6","0","2","2016-01-04 06:22:54","34585717","3","","-1","","2017-05-23 10:28:21","2015-05-26 06:34:52",""
"30451123","Use ecc for encryption in ios","I am trying to implement ecc technique for encryption.
I went through the following posts:

Shared Secret based on Elliptic curve Diffie–Hellman with CommonCrypto 
Elliptic Curve Crypto in iOS

which doesn't have any satisfactory solutions.
Now, I am thinking of using a python library
https://github.com/yann2192/pyelliptic
But I am not aware if this would be the better solution for using  ecc for encryption as I would still need to figure out a way to use the python library in objc.
Can somebody point me in right direction? 
","Finally, I made my own library for ECC/ECDSA which is now available on github 
","828","<python><ios><public-key-encryption><elliptic-curve><commoncrypto>","6","0","2","2016-01-04 06:22:54","34585717","3","","-1","","2017-05-23 10:28:21","2015-05-26 06:34:52",""
"40331595","ECC key pair - how to print private key?","I implement ""Key Pair Generation"" using secp192r1 curve. But private key did not display in string form like public key.

Here is my code:
package lam.bk;
import java.security.*;
import java.security.spec.*;

public class ECCKeyGeneration {
    public static void main(String[] args) throws Exception {
        KeyPairGenerator kpg;
        kpg = KeyPairGenerator.getInstance(""EC"",""SunEC"");
        ECGenParameterSpec ecsp;
        ecsp = new ECGenParameterSpec(""secp192r1"");
        kpg.initialize(ecsp);

        KeyPair kp = kpg.genKeyPair();
        PrivateKey privKey = kp.getPrivate();
        PublicKey pubKey = kp.getPublic();

        System.out.println(pubKey.toString());
        System.out.println(privKey.toString()); 
    }
}

","You will need to convert the Private Key to PEM format before you can get its openssl string representation. In java you can do this in a programmatic manner by using BouncyCastle library's PEMWriter
","805","<java><private-key><elliptic-curve><ecdsa><key-pair>","0","0","2","2018-07-08 08:21:47","","1","","472495","","2018-07-08 08:21:47","2016-10-30 17:18:07",""
"40331595","ECC key pair - how to print private key?","I implement ""Key Pair Generation"" using secp192r1 curve. But private key did not display in string form like public key.

Here is my code:
package lam.bk;
import java.security.*;
import java.security.spec.*;

public class ECCKeyGeneration {
    public static void main(String[] args) throws Exception {
        KeyPairGenerator kpg;
        kpg = KeyPairGenerator.getInstance(""EC"",""SunEC"");
        ECGenParameterSpec ecsp;
        ecsp = new ECGenParameterSpec(""secp192r1"");
        kpg.initialize(ecsp);

        KeyPair kp = kpg.genKeyPair();
        PrivateKey privKey = kp.getPrivate();
        PublicKey pubKey = kp.getPublic();

        System.out.println(pubKey.toString());
        System.out.println(privKey.toString()); 
    }
}

","The code below will output 24 bytes private key for secp192r1 curve:
private String getPrivateKeyAsHex(PrivateKey privateKey) {

    ECPrivateKey ecPrivateKey = (ECPrivateKey) privateKey;
    byte[] privateKeyBytes = new byte[24];
    writeToStream(privateKeyBytes, 0, ecPrivateKey.getS(), 24);

    return Hex.toHexString(privateKeyBytes);
}

private void writeToStream(byte[] stream, int start, BigInteger value, int size) {
    byte[] data = value.toByteArray();
    int length = Math.min(size, data.length);
    int writeStart = start + size - length;
    int readStart = data.length - length;
    System.arraycopy(data, readStart, stream, writeStart, length);
}

","805","<java><private-key><elliptic-curve><ecdsa><key-pair>","0","0","2","2018-07-08 08:21:47","","1","","472495","","2018-07-08 08:21:47","2016-10-30 17:18:07",""
"4280897","How to calculate control points for cubic curve, which approximates an elliptic arc?","Almost all vector graphics applications (like Corel) approximate elliptic arcs with several cubic Bezier curves. I need to add similar functionality to my application. So my question is: how to calculate control points of that Bezier curve?
","There are lots of pages explaining how to do this. This paper by Don Lancaster, for example, gives control parameters for divisions of an ellipse into between 2 and 8 cubic splines, with a detailed analysis of the 4-spline case.
","796","<geometry><vector-graphics><bezier><elliptic-curve>","1","4","1","2010-11-26 01:01:21","4281877","0","","","","","2010-11-25 21:16:13",""
"44634908","Parse Armored ECC public/private keys (generated from gpg cli) in java","I'm trying to convert an armored ECC gpg key to corresponding java class 
ECPrivateKey/ECPublicKey.
To generate the key pair I'm using: gpg --expert --full-generate-key 
Then selecting (9) ECC and ECC (or (10) ECC (sign only))
Then selecting (3) NIST P-256
Resulting in:
-----BEGIN PGP PUBLIC KEY BLOCK-----

mFIEWUdzwhMIKoZIzj0DAQcCAwQkAvZC1PIJ8ke1myyKhNny9vN78TIYo2MuAOY+
F38L9S3+Za9cKV/iIHOqfapbMoqdSmSnqDkevwQSr5MF2UOXtCJzaWduZWNjIChF
Q0Mgc2lnbiBvbmx5KSA8c3NAc3MuY28+iJAEExMIADgWIQRiC+kefVkjnjKovKy5
XANFl5+n1gUCWUdzwgIbAwULCQgHAgYVCAkKCwIEFgIDAQIeAQIXgAAKCRC5XANF
l5+n1mzGAQDsgutymxDTTXPKFfpFFVp4fxacx1MSqxP71gNJYjguXwD8CEXD20Vm
aU1WMi2jU7JC6oJn94Y4vWHwTLOU1zmQ19o=
=swfS
-----END PGP PUBLIC KEY BLOCK-----

-----BEGIN PGP PRIVATE KEY BLOCK-----

lHcEWUdzwhMIKoZIzj0DAQcCAwQkAvZC1PIJ8ke1myyKhNny9vN78TIYo2MuAOY+
F38L9S3+Za9cKV/iIHOqfapbMoqdSmSnqDkevwQSr5MF2UOXAAD9FhS2HZoWOyIi
l9nj+WPa9S1o50jM5bNIRALzcyS8SgoP97Qic2lnbmVjYyAoRUNDIHNpZ24gb25s
eSkgPHNzQHNzLmNvPoiQBBMTCAA4FiEEYgvpHn1ZI54yqLysuVwDRZefp9YFAllH
c8ICGwMFCwkIBwIGFQgJCgsCBBYCAwECHgECF4AACgkQuVwDRZefp9ZsxgEA7ILr
cpsQ001zyhX6RRVaeH8WnMdTEqsT+9YDSWI4Ll8A/AhFw9tFZmlNVjIto1OyQuqC
Z/eGOL1h8EyzlNc5kNfa
=qHBB
-----END PGP PRIVATE KEY BLOCK-----

How do I get from this armored text format to a valid java.security.interfaces.ECPrivateKey and java.security.interfaces.ECPublicKey java classes?
My final goal is to sign in the following way:
String createSignatureFromJson(String jsonPayload, byte[] privateKey) {
        Payload payload = new Payload(jsonPayload)
        def key = privateKeyParse(privateKey)

        JWSSigner signer = new ECDSASigner((ECPrivateKey)key)
        JWSHeader header = new JWSHeader.Builder(JWSAlgorithm.ES256).build()

        JWSObject jwsObject = new JWSObject(header, payload)
        jwsObject.sign(signer)
        jwsObject.signature
    }

","If you just pass in the 'private key block', this will extract the ECPrivateKey:
private static ECPrivateKey privateKeyParse(byte[] privateKey) throws Exception
{
    InputStream pgpIn = PGPUtil.getDecoderStream(new ByteArrayInputStream(privateKey));

    PGPObjectFactory pgpFact = new PGPObjectFactory(pgpIn, new JcaKeyFingerprintCalculator());
    PGPSecretKeyRing pgpSecRing = (PGPSecretKeyRing)pgpFact.nextObject();
    PGPSecretKey pgpSec = pgpSecRing.getSecretKey();
    PGPPrivateKey pgpPriv = pgpSec.extractPrivateKey(null);

    return (ECPrivateKey)new JcaPGPKeyConverter().getPrivateKey(pgpPriv);
}

To answer a comment question as to how to how to get 'privateKey', if the entire:
-----BEGIN PGP PRIVATE KEY BLOCK-----
...
-----END PGP PRIVATE KEY BLOCK-----

is in a file, then just read the whole file into a byte[]:
InputStream fIn = new BufferedInputStream(new FileInputStream(...));
byte[] privateKey = org.bouncycastle.util.io.Streams.readAll(fIn);

","795","<java><bouncycastle><gnupg><elliptic-curve><json-web-token>","8","7","2","2019-07-09 06:42:36","44795438","0","2","6949847","","2017-06-19 15:56:37","2017-06-19 15:48:59",""
"44634908","Parse Armored ECC public/private keys (generated from gpg cli) in java","I'm trying to convert an armored ECC gpg key to corresponding java class 
ECPrivateKey/ECPublicKey.
To generate the key pair I'm using: gpg --expert --full-generate-key 
Then selecting (9) ECC and ECC (or (10) ECC (sign only))
Then selecting (3) NIST P-256
Resulting in:
-----BEGIN PGP PUBLIC KEY BLOCK-----

mFIEWUdzwhMIKoZIzj0DAQcCAwQkAvZC1PIJ8ke1myyKhNny9vN78TIYo2MuAOY+
F38L9S3+Za9cKV/iIHOqfapbMoqdSmSnqDkevwQSr5MF2UOXtCJzaWduZWNjIChF
Q0Mgc2lnbiBvbmx5KSA8c3NAc3MuY28+iJAEExMIADgWIQRiC+kefVkjnjKovKy5
XANFl5+n1gUCWUdzwgIbAwULCQgHAgYVCAkKCwIEFgIDAQIeAQIXgAAKCRC5XANF
l5+n1mzGAQDsgutymxDTTXPKFfpFFVp4fxacx1MSqxP71gNJYjguXwD8CEXD20Vm
aU1WMi2jU7JC6oJn94Y4vWHwTLOU1zmQ19o=
=swfS
-----END PGP PUBLIC KEY BLOCK-----

-----BEGIN PGP PRIVATE KEY BLOCK-----

lHcEWUdzwhMIKoZIzj0DAQcCAwQkAvZC1PIJ8ke1myyKhNny9vN78TIYo2MuAOY+
F38L9S3+Za9cKV/iIHOqfapbMoqdSmSnqDkevwQSr5MF2UOXAAD9FhS2HZoWOyIi
l9nj+WPa9S1o50jM5bNIRALzcyS8SgoP97Qic2lnbmVjYyAoRUNDIHNpZ24gb25s
eSkgPHNzQHNzLmNvPoiQBBMTCAA4FiEEYgvpHn1ZI54yqLysuVwDRZefp9YFAllH
c8ICGwMFCwkIBwIGFQgJCgsCBBYCAwECHgECF4AACgkQuVwDRZefp9ZsxgEA7ILr
cpsQ001zyhX6RRVaeH8WnMdTEqsT+9YDSWI4Ll8A/AhFw9tFZmlNVjIto1OyQuqC
Z/eGOL1h8EyzlNc5kNfa
=qHBB
-----END PGP PRIVATE KEY BLOCK-----

How do I get from this armored text format to a valid java.security.interfaces.ECPrivateKey and java.security.interfaces.ECPublicKey java classes?
My final goal is to sign in the following way:
String createSignatureFromJson(String jsonPayload, byte[] privateKey) {
        Payload payload = new Payload(jsonPayload)
        def key = privateKeyParse(privateKey)

        JWSSigner signer = new ECDSASigner((ECPrivateKey)key)
        JWSHeader header = new JWSHeader.Builder(JWSAlgorithm.ES256).build()

        JWSObject jwsObject = new JWSObject(header, payload)
        jwsObject.sign(signer)
        jwsObject.signature
    }

","public static ECPrivateKey privateKeyParse(byte[] privateKey) throws Exception {

        InputStream pgpIn = PGPUtil.getDecoderStream(new ByteArrayInputStream(privateKey));

        PGPObjectFactory pgpFact = new PGPObjectFactory(pgpIn, new JcaKeyFingerprintCalculator());
        PGPSecretKeyRing pgpSecRing = (PGPSecretKeyRing) pgpFact.nextObject();
        PGPSecretKey pgpSec = pgpSecRing.getSecretKey();

        PGPPrivateKey pgpPriv = pgpSec.extractPrivateKey(null);

        JcaPGPKeyConverter converter = new JcaPGPKeyConverter();
        // this is the part i was missing from Peter Dettman's answer. pass BC provider to the converter
        converter.setProvider(new BouncyCastleProvider());
        PrivateKey key = converter.getPrivateKey(pgpPriv);
        return (ECPrivateKey) key;
    }

","795","<java><bouncycastle><gnupg><elliptic-curve><json-web-token>","8","1","2","2019-07-09 06:42:36","44795438","0","2","6949847","","2017-06-19 15:56:37","2017-06-19 15:48:59",""
"8436673","Sending a Public Key over SMS","I'm currently trying to develop an encryption app for Android using ECDH and BouncyCastle. So far what I've implemented is Public and Private Key generation on the application as per the code below.
My next task is to send the public keys over SMS. I would like to find out what methods can be used to get the job done. Currently I'm trying it out by assigning the generated keys to a string then I'm sending the string out but I'm still unable to get it to work properly.
Any assistance would be greatly appreciated
Thanks and Happy Holidays!
    try
    {
        KeyPairGenerator    g = KeyPairGenerator.getInstance(""ECDH"", ""SC"");

        //Define the Elliptic Curve Field, Points A and B
        EllipticCurve curve = new EllipticCurve(new ECFieldFp(Presets.CurveQ),Presets.PointA,Presets.PointB);

        //Define the points on the Elliptic Curve
        ECParameterSpec ecSpec = new ECParameterSpec(
                curve,
                ECPointUtil.decodePoint(curve, Hex.decode(""020ffa963cdca8816ccc33b8642bedf905c3d358573d3f27fbbd3b3cb9aaaf"")), // G
                new BigInteger(""883423532389192164791648750360308884807550341691627752275345424702807307""), // n
                1); // h

        //Generate the random point on the Elliptic Curve
        g.initialize(ecSpec, new SecureRandom());

        //Generate Private Key for User A
        KeyPair aKeyPair = g.generateKeyPair();
        aKeyAgree = KeyAgreement.getInstance(""ECDH"", ""SC"");
        aKeyAgree.init(aKeyPair.getPrivate());

        //Save Personal Keys            
        Presets.myPrivateKey = aKeyPair.getPrivate().getEncoded().toString();
        Presets.myPublicKey = aKeyPair.getPublic().getEncoded().toString();

","I managed to find out what I was doing wrongly.
The output I was getting from 
Presets.myPublicKey = aKeyPair.getPublic().getEncoded().toString();

was something along the lines of [@B1ef9157 which could not be sent over SMS like I hoped for.
Java: Syntax and meaning behind "[B@1ef9157"? Binary/Address?
Instead I did this
byte[] pubEnc = aKeyPair.getPublic().getEncoded();
String s = Base64.encodeBytes(pubEnc);

making use of the Base64 encoder from http://iharder.sourceforge.net/current/java/base64/
and now I am able to successfully send the string over sms.
Thanks Craigy!
","786","<android><bouncycastle><elliptic-curve>","1","1","1","2011-12-14 18:15:07","8509577","1","1","","","","2011-12-08 19:42:28",""
"11050801","Verification SIgnature ECDSA using SAGE","In the ECDSA algorithm (verification signature) you have to calculate a new point using the next formula: (x0,y0) = u1*P+U2*P_a
How can I calculate the coordenates of this new point?, i try that sentence in SAGE but it doesn't work.
X = (Integer(u1)*P)+(Integer(u2)*P_a)
Can you help me?. Thank you very much.
You can download code and try to execute in SAGE here: https://dl.dropbox.com/u/39374382/question.sws
","If P1 and P2 are points on (the same) elliptic curve E and a,b are integers then
Q = a*P1 + b*P2

certainly works.  And you can get the coordinates out of the point Q using Q.xy().
Example:
sage: E = EllipticCurve('389a1')
sage: P1,P2 = E.gens(); P1,P2
((-1 : 1 : 1), (0 : -1 : 1))
sage: Q = 3*P1-2*P2; Q
(-5/49 : 62/343 : 1)
sage: Q.xy()
(-5/49, 62/343)

","773","<sage><elliptic-curve>","0","3","1","2012-06-15 13:53:17","","1","","","","","2012-06-15 12:39:09",""
"35739240","How to convert JWE JSON to PEM","I want to convert JWE JSON into PEM format. I am using OpenSSL with Elliptic Curve Cryptography.
Here is JSON
{""kty"":""EC"",""crv"":""P-256"",""x"":""0FwHzpaCfb2Assd1LA3kX9_UssnhX_XuciyZ0sdDMpLuPNk"",""y"":""gf67dENsd12GnxEvABuDoZVbVw4KQ5kD9sduH7bCWPVI8aE""}

Now depending on crv value, I am setting EC curve properties:
int eccgrp = OBJ_txt2nid('secp256k1');
int ecc_bits = 256;
int ecc_bytes = ecc_bits/8;
int ecc_digit_number = ecc_bytes/8;
EC_KEY *eccKey = EC_KEY_new_by_curve_name(eccgrp);

Now I am parsing JSON to JWK object as
+ (NSString*) reverseEncoding:(NSString*)base64Url{

        NSString *decodedString = nil;
        decodedString = [base64Url stringByReplacingOccurrencesOfString:@""_"" withString:@""/""];
        decodedString = [decodedString stringByReplacingOccurrencesOfString:@""-"" withString:@""+""];

        return decodedString;
    }
+ (NSString *) jwkToPem:(JWK*)jwk{

    //NSString *kty = jwk->kty;
    //NSString *crv= jwk->crv; // defaults to P-256
    NSString *x= jwk->x; // base64url-encoded values
    NSString *y= jwk->y; // base64url-encoded values

    // Convert x, y components to Base64Url encoded format
    NSString *base64X = [JOSESecurity reverseEncoding:x];
    NSString *base64Y = [JOSESecurity reverseEncoding:y];

    NSString *base64String = [NSString stringWithFormat:@""%@%@="", base64X,base64Y];
    char * key = (char *)[base64String UTF8String];

    NSString *pemFile = [self decodePublicKey:key];

    return pemFile;
}

- (NSString*) decodePublicKey:(char*)hexJWKKey{
    ///** Computes r = generator * n + q * m
    //*  \param  group  underlying EC_GROUP object
    //*  \param  r      EC_POINT object for the result
    //*  \param  n      BIGNUM with the multiplier for the group generator (optional)
    //*  \param  q      EC_POINT object with the first factor of the second summand
    //*  \param  m      BIGNUM with the second factor of the second summand
    //*  \param  ctx    BN_CTX object (optional)
    //*  \return 1 on success and 0 if an error occured
    //*/
    //int EC_POINT_mul(const EC_GROUP *group, EC_POINT *r, const BIGNUM *n,
    //const EC_POINT *q, const BIGNUM *m, BN_CTX *ctx);

    EC_KEY *eckey = NULL;
    EC_POINT *pub_key = NULL;
    const EC_GROUP *group = NULL;
    BIGNUM start;
    BIGNUM *res;
    BN_CTX *ctx;


    BN_init(&start);
    ctx = BN_CTX_new(); // ctx is an optional buffer to save time from allocating and deallocating memory whenever required

    res = &start;

    /*
     BN_hex2bn() converts the string str containing a hexadecimal number to a BIGNUM and stores it in **bn.
     If *bn is NULL, a new BIGNUM is created.
     If bn is NULL, it only computes the number's length in hexadecimal digits.
     If the string starts with '-', the number is negative.
     BN_dec2bn() is the same using the decimal system.
     */
    //BN_hex2bn(&res,""18E14A7B6A307F426SAMPLEHEXNUMBER35DB29A206321725"");
    BN_hex2bn(&res, hexJWKKey); // HERE hexJWKKey SEEMS TO BE WRONG

    // Creates a new EC_KEY object using a named curve
    eckey = EC_KEY_new_by_curve_name(eccgrp);

    // Returns the EC_GROUP object of a EC_KEY object
    group = EC_KEY_get0_group(eckey);

    // Creates a new EC_POINT object for the specified EC_GROUP
    pub_key = EC_POINT_new(group);

    // Sets the private key of a EC_KEY object.
    EC_KEY_set_private_key(eckey, res);

    /* pub_key is a new uninitialized `EC_POINT*`.  priv_key res is a `BIGNUM*`. */
    if (!EC_POINT_mul(group, pub_key, res, NULL, NULL, ctx))
        printf(""Error at EC_POINT_mul.\n"");


    /** Sets the public key of a EC_KEY object.
     *  \param  key  EC_KEY object
     *  \param  pub  EC_POINT object with the public key (note: the EC_KEY object
     *               will use an own copy of the EC_POINT object).
     *
     */
    EC_KEY_set_public_key(eckey, pub_key);

    /** Decodes a EC_POINT from a octet string
     *  \param  group  underlying EC_GROUP object
     *  \param  p      EC_POINT object
     *  \param  buf    memory buffer with the encoded ec point
     *  \param  len    length of the encoded ec point
     *  \param  ctx    BN_CTX object (optional)
     *  \return 1 on success and 0 if an error occured
     */
    /** the point is encoded as z||x||y, where z is the octet 0x04
        POINT_CONVERSION_UNCOMPRESSED = 4,
     */

    // char *EC_POINT_point2hex(const EC_GROUP *, const EC_POINT *, point_conversion_form_t form, BN_CTX *);
    char *client_public_key = EC_POINT_point2hex(group, pub_key, POINT_CONVERSION_UNCOMPRESSED, ctx);


    //BN_CTX_free(client_public_key);

    NSString *clientPublicKey = [NSString stringWithCString:client_public_key encoding:NSUTF8StringEncoding];

    NSData *data = [NSData dataWithBytes:client_public_key length:clientPublicKey.length];

    clientPublicKey = [data base64EncodedStringWithOptions:NSDataBase64Encoding64CharacterLineLength];

    free(client_public_key);

    return clientPublicKey;
}

Because when we are using clientPublicKey in below code, then key is coming out as nil.
EC_KEY *key = NULL;
BIO *in = NULL;
const char *cPem = NULL;
unsigned char *buffer = NULL;

BIGNUM start;
const BIGNUM *res;
BN_CTX *ctx;

BN_init(&start);
ctx = BN_CTX_new();

res = &start;

cPem = [clientPublicKey UTF8String];
in = BIO_new(BIO_s_mem());
BIO_puts(in, cPem);
key = PEM_read_bio_ECPrivateKey(in, NULL, NULL, NULL);
// This key is nil.
key = PEM_read_bio_EC_PUBKEY(in, NULL, NULL, NULL);
// This key is also nil

","","772","<objective-c><openssl><elliptic-curve><jwe><jwk>","2","","0","2016-03-02 05:33:00","","4","","","","","2016-03-02 05:33:00",""
"31030100","Node.js crypto module - ECDH","I'm trying to accomplish a key exchange between Node.js using the crypto module and a web client using the Web Cryptography API.
So far I managed to process the key exchange to the point where I derive the shared secret on the server and the client side. On the server side I used the 'secp521r1' curve and on the client side the equivalent curve with the name of 'P-521'.
On the client I receive a shared secret that is has a length of 32 bytes, which I assume is the correct length of an AES-GCM key with 256 bits.
But on the server I receive a key with the length of 66 bytes. Below are two examples of generated keys, one encoded in base64 and one as byte array: 
Base64 encoded:
Client AES-Key: AJQQpnOjNe2/QQz5T9NmSPFpFgUG/20739EhdjVt//I=
Server AES-Key: AJQQpnOjNe2/QQz5T9NmSPFpFgUG/20739EhdjVt//LYZ+XeuTgkwv7CJFQrqNWxnny8R+VP3nJuk1SUyDJsa7+f

Byte array:
Client AES-Key: 0,249,8,221,38,57,84,243,202,83,90,68,4,41,49,224,69,89,162,74,47,72,134,169,32,3,133,55,109,105,144,249
Server AES-Key: 0,249,8,221,38,57,84,243,202,83,90,68,4,41,49,224,69,89,162,74,47,72,134,169,32,3,133,55,109,105,144,249,66,66,131,19,81,11,27,161,132,7,244,2,191,221,162,169,247,108,128,229,211,217,109,78,5,71,232,252,243,36,214,42,199,175

I think I misconfigured something on Node.js, but i couldn't find any hints in the documentation on how to do it correctly. 
This is what i do on Node.js to extract the key:
var ecdh = crypto.createECDH('secp521r1');
ecdh.generateKeys();

ecdh.getPublicKey('base64'); // passed this to the client

// After I receive the public key of the client
var shared = ecdh.computeSecret(clientPublicKey, 'base64');

My questions are:

Is my assumption correct, that the key from Node.js is incorrect?
What do I have to do to correctly extract an AES-GCM 256 bit key?
What does the current output mean?

Any guidance is appreciated.
","","762","<javascript><node.js><elliptic-curve><webcrypto-api><node-crypto>","5","","0","2016-06-27 09:33:02","","0","0","972240","","2016-06-27 09:33:02","2015-06-24 15:02:15",""
"23734746",".NET Use BouncyCastle to read ECC Certificate from Windows Store","I have generate some ECC Certificate using OpenSSL. I can see these certificates in windows store.
What I want to do is to load an ECC certificate, get its private key, public key to use in other encryption method, like:
    X509Store store = new X509Store(StoreName.My, StoreLocation.CurrentUser);
    store.Open(OpenFlags.ReadWrite | OpenFlags.OpenExistingOnly);
    X509Certificate2Collection x509Certificate2Collection = 
        store.Certificates.Find(X509FindType.FindBySerialNumber, ""008B2D89B2A75EE891"", false);

    X509Certificate2 cert= x509Certificate2Collection[0];
    (use Bouncy Castle to read it here)

I also try with:
    var asymmetricCipherKeyPair = 
        DotNetUtilities.GetKeyPair(x509Certificate2.PrivateKey);

But this give an Exception:
    {""The certificate key algorithm is not supported.""} System.Exception {System.NotSupportedException}

","","758","<c#><.net><bouncycastle><elliptic-curve>","2","","0","2014-05-19 09:55:11","","1","0","","","","2014-05-19 09:55:11",""
"23068616","Can't run Curve25519 implementation on Android device - able to on PC","I am trying to port a Java implementation of a authentication mechanism that uses Curve25519. 
The libraries work perfect on my PC. But when I run it on an android device - I get a stackoverflow. 
The Curve25519 implementation does have a lot of recursive calls but my question is why is it capable of running on my PC and not on my Moto G. Is this an Android limitation?
The error throws up in the public key method of the Curve Implementation that too inside the publicKeyFrom512 and somewhere in the scalarmult function.
Here is the android login activity: 
public class LoginActivity extends Activity {

    protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_login);
    SecureRandom secureRandomGenerator = null;
    try {
        secureRandomGenerator = SecureRandom.getInstance(""SHA1PRNG"");
    } catch (NoSuchAlgorithmException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }
    byte[] randomBytes = new byte[256];
    secureRandomGenerator.nextBytes(randomBytes);
    byte[] privateKey = HMACSHA256.mac(randomBytes, ""www.example.com"");
    // STEP 5: Synthesize a public key by using the result from STEP 4
    byte[] publicKey = Curve25519.publickey(privateKey);

    byte[] signature = Curve25519.signature(
            ""www.example.com"".getBytes(Charset.forName(""UTF-8"")),
            privateKey, publicKey);
    System.out.println(signature.toString());
    try {
        boolean check = Curve25519.checkvalid(signature,
                ""www.example.com"".getBytes(), publicKey);
        Log.d(""TRUE?"", Boolean.toString(check));
    } catch (Exception e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }
}

I am using this implementation of Curve25519 
import android.annotation.SuppressLint;
import android.annotation.TargetApi;
import android.os.Build;
import java.math.BigInteger;
import java.nio.ByteBuffer;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;

/* Written by k3d3
 * Released to the public domain
 */

@TargetApi(Build.VERSION_CODES.GINGERBREAD)
public class Curve25519 {
    static final int b = 256;
    static final BigInteger q = new BigInteger(""57896044618658097711785492504343953926634992332820282019728792003956564819949"");
    static final BigInteger qm2 = new BigInteger(""57896044618658097711785492504343953926634992332820282019728792003956564819947"");
    static final BigInteger qp3 = new BigInteger(""57896044618658097711785492504343953926634992332820282019728792003956564819952"");
    static final BigInteger l = new BigInteger(""7237005577332262213973186563042994240857116359379907606001950938285454250989"");
    static final BigInteger d = new BigInteger(""-4513249062541557337682894930092624173785641285191125241628941591882900924598840740"");
    static final BigInteger I = new BigInteger(""19681161376707505956807079304988542015446066515923890162744021073123829784752"");
    static final BigInteger By = new BigInteger(""46316835694926478169428394003475163141307993866256225615783033603165251855960"");
    static final BigInteger Bx = new BigInteger(""15112221349535400772501151409588531511454012693041857206046113283949847762202"");
    static final BigInteger[] B = {Bx.mod(q),By.mod(q)};
    static final BigInteger un = new BigInteger(""57896044618658097711785492504343953926634992332820282019728792003956564819967"");

    static byte[] H(byte[] m) {
        MessageDigest md;
        try {
            md = MessageDigest.getInstance(""SHA-512"");
            md.reset();
            return md.digest(m);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return null;
    }

    static BigInteger expmod(BigInteger b, BigInteger e, BigInteger m) {
        //System.out.println(""expmod open with b="" + b + "" e="" + e + "" m="" + m);
        if (e.equals(BigInteger.ZERO)) {
            //System.out.println(""expmod close with 1z"");
            return BigInteger.ONE;
        }
        BigInteger t = expmod(b, e.divide(BigInteger.valueOf(2)), m).pow(2).mod(m);
        //System.out.println(""expmod 1/2 t=""+t+"" e=""+e+"" testbit=""+(e.testBit(0)?1:0));
        if (e.testBit(0)) {
            t = t.multiply(b).mod(m);
        }
        //System.out.println(""expmod close with "" + t);
        return t;
    }

    static BigInteger inv(BigInteger x) {
        //System.out.println(""inv open with "" + x);
        //System.out.println(""inv close with "" + expmod(x, qm2, q));
        return expmod(x, qm2, q);
    }

    static BigInteger xrecover(BigInteger y) {
        BigInteger y2 = y.multiply(y);
        BigInteger xx = (y2.subtract(BigInteger.ONE)).multiply(inv(d.multiply(y2).add(BigInteger.ONE)));
        BigInteger x = expmod(xx, qp3.divide(BigInteger.valueOf(8)), q);
        if (!x.multiply(x).subtract(xx).mod(q).equals(BigInteger.ZERO)) x = (x.multiply(I).mod(q));
        if (!x.mod(BigInteger.valueOf(2)).equals(BigInteger.ZERO)) x = q.subtract(x);
        return x;
    }

    static BigInteger[] edwards(BigInteger[] P, BigInteger[] Q) {
        BigInteger x1 = P[0];
        BigInteger y1 = P[1];
        BigInteger x2 = Q[0];
        BigInteger y2 = Q[1];
        BigInteger dtemp = d.multiply(x1).multiply(x2).multiply(y1).multiply(y2);
        //System.out.println(""edwards open with ""+x1+"",""+x2+"" ""+y1+"",""+y2+"" d=""+d+"" dtemp=""+dtemp);
        BigInteger x3 = ((x1.multiply(y2)).add((x2.multiply(y1)))).multiply(inv(BigInteger.ONE.add(dtemp)));
        //System.out.println(""edwards 1/2 with ""+x1+"",""+x2+"" ""+y1+"",""+y2+"" d=""+d+"" dtemp=""+dtemp);
        BigInteger y3 = ((y1.multiply(y2)).add((x1.multiply(x2)))).multiply(inv(BigInteger.ONE.subtract(dtemp)));
        //System.out.println(""edwards 2/2 with ""+x1+"",""+x2+"" ""+y1+"",""+y2+"" d=""+d+"" dtemp=""+dtemp);
        //System.out.println(""edwards close with ""+x3.mod(q)+"",""+y3.mod(q));
        return new BigInteger[]{x3.mod(q), y3.mod(q)};
    }

    static BigInteger[] scalarmult(BigInteger[] P, BigInteger e) {
        //System.out.println(""scalarmult open with e = "" + e);
        if (e.equals(BigInteger.ZERO)) {
            //System.out.println(""scalarmult close with Q = 0,1"");
            return new BigInteger[]{BigInteger.ZERO, BigInteger.ONE};
        }
        BigInteger[] Q = scalarmult(P, e.divide(BigInteger.valueOf(2)));
        //System.out.println(""scalarmult asQ = "" + Q[0] + "","" + Q[1]);
        Q = edwards(Q, Q);
        //System.out.println(""scalarmult aeQ = "" + Q[0] + "","" + Q[1] + "" e=""+e+"" testbit=""+(e.testBit(0)?1:0));
        if (e.testBit(0)) Q = edwards(Q, P);
        //System.out.println(""scalarmult close with Q = "" + Q[0] + "","" + Q[1]);
        return Q;
    }

    static byte[] encodeint(BigInteger y) {
        byte[] in = y.toByteArray();
        byte[] out = new byte[in.length];
        for (int i=0;i<in.length;i++) {
            out[i] = in[in.length-1-i];
        }
        return out;
    }

    static byte[] encodepoint(BigInteger[] P) {
        BigInteger x = P[0];
        BigInteger y = P[1];
        byte[] out = encodeint(y);
        //System.out.println(""encodepoint x=""+x+"" testbit=""+(x.testBit(0) ? 1 : 0));
        out[out.length-1] |= (x.testBit(0) ? 0x80 : 0);
        return out;
    }

    static int bit(byte[] h, int i) {
        //System.out.println(""bit open with i=""+i);
        //System.out.println(""bit close with ""+(h[i/8] >> (i%8) & 1));
        return h[i/8] >> (i%8) & 1;
    }

    public static byte[] publickeyFrom512(byte[] h) {
        //System.out.println(""publickey open with h="" + test.getHex(h));
        BigInteger a = BigInteger.valueOf(2).pow(b-2);
        for (int i=3;i<(b-2);i++) {
            BigInteger apart = BigInteger.valueOf(2).pow(i).multiply(BigInteger.valueOf(bit(h,i)));
            //System.out.println(""publickey apart=""+apart);
            a = a.add(apart);
        }
        BigInteger[] A = scalarmult(B,a);
        //System.out.println(""publickey close with A=""+A[0]+"",""+A[1]+"" out=""+test.getHex(encodepoint(A)));
        return encodepoint(A);
    }

    public static byte[] publickey(byte[] sk) {
        byte[] h = H(sk);
        return publickeyFrom512(h);
    }

    static BigInteger Hint(byte[] m) {
        byte[] h = H(m);
        BigInteger hsum = BigInteger.ZERO;
        for (int i=0;i<2*b;i++) {
            hsum = hsum.add(BigInteger.valueOf(2).pow(i).multiply(BigInteger.valueOf(bit(h,i))));
        }
        return hsum;
    }

    public static byte[] signatureFrom512(byte[] m, byte[] h, byte[] pk) {
        //System.out.println(""signature open with m=""+test.getHex(m)+"" h=""+test.getHex(h)+"" pk=""+test.getHex(pk));
        BigInteger a = BigInteger.valueOf(2).pow(b-2);
        for (int i=3;i<(b-2);i++) {
            a = a.add(BigInteger.valueOf(2).pow(i).multiply(BigInteger.valueOf(bit(h,i))));
        }
        //System.out.println(""signature a=""+a);
        ByteBuffer rsub = ByteBuffer.allocate((b/8)+m.length);
        rsub.put(h, b/8, b/4-b/8).put(m);
        //System.out.println(""signature rsub=""+test.getHex(rsub.array()));
        BigInteger r = Hint(rsub.array());
        //System.out.println(""signature r=""+r);
        BigInteger[] R = scalarmult(B,r);
        ByteBuffer Stemp = ByteBuffer.allocate(32+pk.length+m.length);
        Stemp.put(encodepoint(R)).put(pk).put(m);
        BigInteger S = r.add(Hint(Stemp.array()).multiply(a)).mod(l);
        ByteBuffer out = ByteBuffer.allocate(64);
        out.put(encodepoint(R)).put(encodeint(S));
        return out.array();
    }
    public static byte[] signature(byte[] m, byte[] sk, byte[] pk) {
        byte[] h = H(sk);
        return signatureFrom512(m, h, pk);
    }

    static boolean isoncurve(BigInteger[] P) {
        BigInteger x = P[0];
        BigInteger y = P[1];
        //System.out.println(""isoncurve open with P=""+x+"",""+y);
        BigInteger xx = x.multiply(x);
        BigInteger yy = y.multiply(y);
        BigInteger dxxyy = d.multiply(yy).multiply(xx);
        //System.out.println(""isoncurve close with ""+xx.negate().add(yy).subtract(BigInteger.ONE).subtract(dxxyy).mod(q));
        return xx.negate().add(yy).subtract(BigInteger.ONE).subtract(dxxyy).mod(q).equals(BigInteger.ZERO);
    }

    static BigInteger decodeint(byte[] s) {
        byte[] out = new byte[s.length];
        for (int i=0;i<s.length;i++) {
            out[i] = s[s.length-1-i];
        }
        return new BigInteger(out).and(un);
    }

    static BigInteger[] decodepoint(byte[] s) throws Exception {
        byte[] ybyte = new byte[s.length];
        for (int i=0;i<s.length;i++) {
            ybyte[i] = s[s.length-1-i];
        }
        //System.out.println(""decodepoint open with s=""+test.getHex(s)+"" ybyte=""+test.getHex(ybyte));
        BigInteger y = new BigInteger(ybyte).and(un);
        //System.out.println(""decodepoint y=""+y);
        BigInteger x = xrecover(y);
        //System.out.println(""decodepoint x=""+x+"" testbit=""+(x.testBit(0)?1:0)+"" bit=""+bit(s, b-1));
        if ((x.testBit(0)?1:0) != bit(s, b-1)) {
            x = q.subtract(x);
        }
        BigInteger[] P = {x,y};
        if (!isoncurve(P)) throw new Exception(""decoding point that is not on curve"");
        return P;
    }

    @SuppressLint(""NewApi"")
    public static boolean checkvalid(byte[] s, byte[] m, byte[] pk) throws Exception {
        if (s.length != b/4) throw new Exception(""signature length is wrong"");
        if (pk.length != b/8) throw new Exception(""public-key length is wrong"");
        //System.out.println(""checkvalid open with s=""+test.getHex(s)+"" m=""+test.getHex(m)+"" pk=""+test.getHex(pk));
        byte[] Rbyte = Arrays.copyOfRange(s, 0, b/8);
        //System.out.println(""checkvalid Rbyte=""+test.getHex(Rbyte));
        BigInteger[] R = decodepoint(Rbyte);
        BigInteger[] A = decodepoint(pk);
        //System.out.println(""checkvalid R=""+R[0]+"",""+R[1]+"" A=""+A[0]+"",""+A[1]);
        byte[] Sbyte = Arrays.copyOfRange(s, b/8, b/4);
        //System.out.println(""checkvalid Sbyte=""+test.getHex(Sbyte));
        BigInteger S = decodeint(Sbyte);
        //System.out.println(""checkvalid S=""+S);
        ByteBuffer Stemp = ByteBuffer.allocate(32+pk.length+m.length);
        Stemp.put(encodepoint(R)).put(pk).put(m);
        BigInteger h = Hint(Stemp.array());
        BigInteger[] ra = scalarmult(B,S);
        BigInteger[] rb = edwards(R,scalarmult(A,h));
        //System.out.println(""checkvalid ra=""+ra[0]+"",""+ra[1]+"" rb=""+rb[0]+"",""+rb[1]);
        if (!ra[0].equals(rb[0]) || !ra[1].equals(rb[1])) // Constant time comparison
            return false;
        return true;
    }
}

And here is the error:

04-15 00:37:31.317: W/dalvikvm(26308): threadid=1: thread exiting with
  uncaught exception (group=0x41614d40)
04-15 00:37:31.714: E/AndroidRuntime(26308): FATAL EXCEPTION: main
04-15 00:37:31.714: E/AndroidRuntime(26308): Process:
  com.rtindru.qrlogin, PID: 26308
04-15 00:37:31.714: E/AndroidRuntime(26308):
  java.lang.StackOverflowError
04-15 00:37:31.714: E/AndroidRuntime(26308):  at
  java.lang.ref.FinalizerReference.add(FinalizerReference.java:54)
04-15 00:37:31.714: E/AndroidRuntime(26308):  at
  java.math.BigInt.(BigInt.java:24)
04-15 00:37:31.714: E/AndroidRuntime(26308):  at
  java.math.BigInt.newBigInt(BigInt.java:56)
04-15 00:37:31.714: E/AndroidRuntime(26308):  at
  java.math.BigInt.bigExp(BigInt.java:285)
04-15 00:37:31.714: E/AndroidRuntime(26308):  at
  com.sqrl.crypto.Curve25519.expmod(Curve25519.java:48)
04-15 00:37:31.714: E/AndroidRuntime(26308):  at
  com.sqrl.crypto.Curve25519.expmod(Curve25519.java:48)
04-15 00:37:31.714: E/AndroidRuntime(26308):  at
  com.sqrl.crypto.Curve25519.expmod(Curve25519.java:48)
04-15 00:37:31.714: E/AndroidRuntime(26308):  at
  com.sqrl.crypto.Curve25519.expmod(Curve25519.java:48)
  (These lines are repeated a hundred odd times)
  04-15 00:37:31.714: E/AndroidRuntime(26308):  at com.sqrl.cry
04-15 00:41:52.842: I/dalvikvm(26712): threadid=1: stack overflow on
  call to Ljava/lang/ref/FinalizerReference;.:VLL 04-15
00:41:52.842: I/dalvikvm(26712):   method requires 12+20+12=44 bytes,
  fp is 0x5755f314 (20 left) 
04-15 00:41:52.842: I/dalvikvm(26712):
  expanding stack end (0x5755f300 to 0x5755f000)

","This was an issue with the calculations causing a stack overflow. 
The repeated recursive division exceeded the call stack allocated to the process. 
I tried running it as an AsyncTask, but still the same issue. 
I got around this by spawning a new Thread with a lot more memory (64kb) than what Android typically allocates.
I used this constructor:
Thread(ThreadGroup group, Runnable target, String name, long stackSize)

This did resolve the issue, but I am not sure how such a simple workaround is possible! 
Any comments?
","732","<java><android><public-key-encryption><elliptic-curve>","0","0","1","2014-06-27 09:56:34","24449005","1","5","1410277","","2014-04-14 19:33:24","2014-04-14 19:28:21",""
"9939943","deformation of SVG file. Bezier Curves?","I have an SVG file.This file shows the outline of cartoon character(2D character).
My question is, can I make a program that It allows the user to interact with the outline and deform it.
An example is, to pull the outline of character's arm, with the mouse,and the arm gets bigger.
I suppose that Bezier Curves and Elliptical Arcs is a solution.I also wonder if i use OPENGL, I might be more flexible to do that.
","
I also wonder if i use OPENGL, I might be more flexible to do that.

OpenGL will not make things easier in any way. OpenGL is a drawing API, not some kind of magic scene and geometry manager. All it gives you are points, lines and triangles and methods to define how those are to be drawn to a framebuffer.
Interaction with the user lies completely outside the scope of OpenGL.
","723","<opengl><svg><2d><bezier><elliptic-curve>","1","0","3","2012-04-03 17:52:15","9949291","4","","44729","","2012-03-30 15:29:32","2012-03-30 09:02:25",""
"9939943","deformation of SVG file. Bezier Curves?","I have an SVG file.This file shows the outline of cartoon character(2D character).
My question is, can I make a program that It allows the user to interact with the outline and deform it.
An example is, to pull the outline of character's arm, with the mouse,and the arm gets bigger.
I suppose that Bezier Curves and Elliptical Arcs is a solution.I also wonder if i use OPENGL, I might be more flexible to do that.
","The interaction aspect you'll need to deal with yourself. There is a recent OpenGL extension, NV_path_rendering which makes accurate, hardware-accelerated rendering of SVG and other vector formats pretty simple. The SDK includes at least one example where interaction with control points is shown, which might make a good starting place for you. Obviously, this would require you/the end user to have a GPU which supports the extension. Here's a video of the developer explaining the extension and what it can do.
","723","<opengl><svg><2d><bezier><elliptic-curve>","1","1","3","2012-04-03 17:52:15","9949291","4","","44729","","2012-03-30 15:29:32","2012-03-30 09:02:25",""
"9939943","deformation of SVG file. Bezier Curves?","I have an SVG file.This file shows the outline of cartoon character(2D character).
My question is, can I make a program that It allows the user to interact with the outline and deform it.
An example is, to pull the outline of character's arm, with the mouse,and the arm gets bigger.
I suppose that Bezier Curves and Elliptical Arcs is a solution.I also wonder if i use OPENGL, I might be more flexible to do that.
","iscriptdesign allows you to create interactive graphics, but you need to program/script those yourself. 
","723","<opengl><svg><2d><bezier><elliptic-curve>","1","0","3","2012-04-03 17:52:15","9949291","4","","44729","","2012-03-30 15:29:32","2012-03-30 09:02:25",""
"23417192","How represent message for Elgamal EC?","I am working on my project that uses elgamal elliptic curve.
I know when the elgamal ec encrypt by following steps 

Represent the message m as a point M in E(Fp).
Select k ∈R [1,n−1].
Compute C1 = kP.
Compute C2 = M +kQ.
Return(C1,C2).
Where Q is the intended recipient’s public key, P is base point.
My qusetion at number one. how represent m as a point. Is point represent one character or represent group of characters.

","There's no obvious way to attach m to points in E(Fp). However, you can use variant algorithm of ElGamal such as Menezes-Vanstone Elliptic curve cryptosystem to encode a message 
in a point, a good reference here(P.31).   
As for java code, I suggest you do some work, and post another question on SO when you encounter a problem you really can't solve by yourself.
","710","<elliptic-curve><elgamal>","0","1","1","2014-05-20 19:48:53","","0","","2782318","","2014-05-20 19:48:53","2014-05-01 21:44:28",""
"40697895","C# Verify JWT Signed With ES256 C# Using Bouncycastle","Im trying to sign / verify a Json Web Token with Bouncycastle in C#. I've had success with RSXXX and HSXXX but I haven't been able to successfully verify one signed with ES256. I've been using https://kjur.github.io/jsrsasign/tool_jwt.html as my measuring stick and this simple function to verify a generated JWT.
public static bool IsTokenValid(
    string jwtBase, 
    string jwtSignature, 
    string publicKey, 
    string algorithmName)
{
    ISigner signer = SignerUtilities.GetSigner(algorithmName);

    byte[] publicKeyBytes = Convert.FromBase64String(publicKey);
    AsymmetricKeyParameter publicKeyParameters = 
        PublicKeyFactory.CreateKey(publicKeyBytes);

    byte[] signatureBaseBytes = Encoding.UTF8.GetBytes(jwtBase);
    signer.Init(false, publicKeyParameters);
    signer.BlockUpdate(signatureBaseBytes, 0, signatureBaseBytes.Length);

    byte[] signatureBytes = Convert.FromBase64String(
        ToProperBase64String(jwtSignature));
    return signer.VerifySignature(signatureBytes);
}

public static string ToProperBase64String(string instance)
{
    instance = instance.Replace('-', '+').Replace('_', '/').Replace(""\r"", """");
    while (instance.Length % 4 != 0)
    {
        instance = instance + ""="";
    }
    return instance;
}

Here is an example jwt signed with the default private key.
string signatureBase =
""eyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJodHRwczovL2p3dC1pZHAuZXhhbXBsZS5jb20iLCJzdWIiOiJtYWlsdG86bWlrZUBleGFtcGxlLmNvbSIsIm5iZiI6MTQ3OTUzMjM0MSwiZXhwIjoxNDc5NTM1OTQxLCJpYXQiOjE0Nzk1MzIzNDEsImp0aSI6ImlkMTIzNDU2IiwidHlwIjoiaHR0cHM6Ly9leGFtcGxlLmNvbS9yZWdpc3RlciIsImF1ZCI6WyJodHRwOi8vZm9vMS5jb20iLCJodHRwOi8vZm9vMi5jb20iXX0"";
string signature = ""aGHSDpqHqGuG89OJCapCVBYvkpStCra8ZD4py02wGf7dPiC6mEdquE2YEGuYcjMKlNOR_0lwzpuNx0xoSmr81A"";
string publicKey = @""-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEoBUyo8CQAFPeYPvv78ylh5MwFZjT
CLQeb042TjiMJxG+9DLFmRSMlBQ9T/RsLLc+PmpB1+7yPAR+oR5gZn3kJQ==
-----END PUBLIC KEY-----
"".Replace(""-----BEGIN PUBLIC KEY-----"", """")
.Replace(""\n"", """")
.Replace(""-----END PUBLIC KEY-----"", """");

bool isValid = IsTokenValid(signatureBase, signature, publicKey, ""SHA-256withECDSA"");
//above evaluates to false

Is there something I am missing here? Alternatively I would be happy with another .NET PCL implementation that can sign and verify a ES256 JWT 
","","694","<c#><jwt><elliptic-curve>","4","","0","2016-11-19 21:05:07","","0","1","","","","2016-11-19 21:05:07",""
"47353395","Generating ECDH keys using python and secp384 curve in python","private key pairs and I am trying to generate ECDH keys and I am trying to find a python library to help me do that, Can someone help me if there is any python library out there?
","Python's Cryptography package helped me to achieve this. 
","690","<python-3.x><security><elliptic-curve><ecdh>","1","1","1","2018-11-01 19:06:38","53107808","2","","","","","2017-11-17 14:51:05",""
"38105010","Extract the shared secret from class ECDiffieHellmanCng","I am currently developing an SSH client and it is necessary that said client is able to exchange keys with the server via ECDH KEX (NIST-256, 384 and 521).
I did some (actually a lot) of research, found the .NET class ECDiffieHellmanCng, and was able to extract and import the public key of the server into the class. 
The problem, however, is that I can't extract the shared secret without deriving it (ECDiffieHellmanCng.DeriveKeyMaterial(CngKey otherpartyPublicKey)).
Is there a way to directly access the shared secret (""k"" as it's called in the RFC papers)?
Here is page 7 from the RFC of the ECDH implementation and why I need the shared secret:

The exchange hash H is computed as the hash of the concatenation of
  the following.
string V_C, client's identification string (CR and LF excluded)
string   V_S, server's identification string (CR and LF excluded)
string   I_C, payload of the client's SSH_MSG_KEXINIT
string   I_S, payload of the server's SSH_MSG_KEXINIT
string   K_S, server's public host key
string   Q_C, client's ephemeral public key octet string
string   Q_S, server's ephemeral public key octet string
mpint    K,   shared secret <-- this is why I need the pure secret
  before any derivation

Thanks for any solutions or hints!
","Even after a lot of research i couldn't find a way to do it so the answer is no - you can not extract the secret.
My solution for the big picture was to discard the ECDiffieHellmanCng class altogether and instead wrap the OpenSSH library in C#.
Hope this at least helps someone else with the same idea.
","681","<c#><.net><ssh><elliptic-curve><diffie-hellman>","0","0","2","2016-07-17 01:00:05","38182858","0","","1636276","","2016-06-29 16:48:13","2016-06-29 16:13:15",""
"38105010","Extract the shared secret from class ECDiffieHellmanCng","I am currently developing an SSH client and it is necessary that said client is able to exchange keys with the server via ECDH KEX (NIST-256, 384 and 521).
I did some (actually a lot) of research, found the .NET class ECDiffieHellmanCng, and was able to extract and import the public key of the server into the class. 
The problem, however, is that I can't extract the shared secret without deriving it (ECDiffieHellmanCng.DeriveKeyMaterial(CngKey otherpartyPublicKey)).
Is there a way to directly access the shared secret (""k"" as it's called in the RFC papers)?
Here is page 7 from the RFC of the ECDH implementation and why I need the shared secret:

The exchange hash H is computed as the hash of the concatenation of
  the following.
string V_C, client's identification string (CR and LF excluded)
string   V_S, server's identification string (CR and LF excluded)
string   I_C, payload of the client's SSH_MSG_KEXINIT
string   I_S, payload of the server's SSH_MSG_KEXINIT
string   K_S, server's public host key
string   Q_C, client's ephemeral public key octet string
string   Q_S, server's ephemeral public key octet string
mpint    K,   shared secret <-- this is why I need the pure secret
  before any derivation

Thanks for any solutions or hints!
","You don't actually need k, then, you just need to compute H.  The ECDiffieHellman class allows you to do that.
byte[] prepend = Concat(V_C, V_S, I_C, I_S, K_S, Q_C, Q_S);
byte[] exchangeHash = ecdh.DeriveKeyFromHash(otherPublic, new HashAlgorithmName(""whatever your hash algorithm is""), prepend, null);

Though that is using .NET 4.6.2 (currently in preview) API: DeriveKeyFromHash
If you are on an older framework it's still possible, but requires using the ECDiffieHellmanCng type specifically:
ecdhCng.SecretPrepend = prepend;
ecdhCng.SecretAppend = null;
ecdhCng.HashAlgorithm = new CngAlgorithm(""whatever your hash algorithm is"");
ecdhCng.KeyDerivationFunction = ECDiffieHellmanKeyDerivationFunction.Hash;
byte[] exchangeHash = ecdhCng.DeriveKeyMaterial(otherPublic);

","681","<c#><.net><ssh><elliptic-curve><diffie-hellman>","0","1","2","2016-07-17 01:00:05","38182858","0","","1636276","","2016-06-29 16:48:13","2016-06-29 16:13:15",""
"50077065","Get elliptic curve public key from private key using Ruby OpenSSL","I'm playing around with Elliptic Curves using the Ruby 2.5.x OpenSSL library. I can easily generate a private and public key pair using 
curve = OpenSSL::PKey::EC.new('secp256k1')
curve.generate_key

But given a private key I want to regenerate the public key. 
I know OpenSSL can do it because the command line allows you to do it, and also the Ruby Bitcoin project does it. But the Ruby Bitcoin project has its own interface to OpenSSL using FFI rather than the one provided by Ruby. 
Does Ruby 2.5.x openssl library not expose enough of the OpenSSL interfaces to be able to generate an elliptic curve public key from a private key, or that it can but it's not documented?
","The Ruby OpenSSL bindings don’t allow you to directly get the public key from a PKey::EC object as far as I can tell, but they do expose enough to do the calculation yourself, which is straightforward.
Given a private key as an OpenSSL:BN object, which for the example we can generate like this:
example_key = OpenSSL::PKey::EC.new('secp256k1').generate_key
private_key = example_key.private_key

We can calculate the public key by multiplying the group base point (i.e. the generator) by the private key:
group = OpenSSL::PKey::EC::Group.new('secp256k1')
public_key = group.generator.mul(private_key)

The public key is an OpenSSL::PKey::EC::Point. You can compare with the original to see that is the same:
puts example_key.public_key == public_key # => true

","664","<ruby><openssl><elliptic-curve>","0","2","1","2018-04-28 18:03:24","","2","","","","","2018-04-28 13:29:30",""
"36639606","Convert ECC Public key's Bignum to JWK X, Y Coordinates","I have created public and private keys in OpenSSL using EC_Key and have x, y and d components in BigNum format.
Now I want to convert these Bignum values to Base64URLEncoded values as per JWK standards.
e.g.
{
 ""kty"":""EC"",
 ""crv"":""P-256"",
 ""x"":""MKBCTNIcKUSDii11ySs3526iDZ8AiTo7Tu6KPAqv7D4"",
 ""y"":""4Etl6SRW2YiLUrN5vfvVHuhp7x8PxltmWWlbbM4IFyM"",
 ""use"":""enc"",
 ""kid"":""1""
}

Currently x coordinate is 76638B4D8040018F834AE6D6540B20E1CA95F6A8C61BE6118062918904B5C5A7
While using OpenSSL and JSONKit in ObjC as
if (!bigNum) return nil;

/* converting from BIGNUM to binary */
int len = BN_num_bytes(bigNum);
unsigned char *buf = NULL;
buf = (unsigned char *) OPENSSL_malloc (len);
len = BN_bn2bin(bigNum, buf);
NSData *pubData =  [NSData dataWithBytesNoCopy:buf length:len freeWhenDone:YES];


NSString *base64EncodedString = [pubData base64EncodedString];
return [base64EncodedString stringWithBase64URLEncoding];

On converting it, it is giving Base64URL encoded string as
x:dmOLTYBAAY-DSubWVAsg4cqV9qjGG-YRgGKRiQS1xac
But while decoding the same x coordinate on server using Jose4J is returning it as:
53548795424402895049922051400723229099982122334687022963594437126482323424679
which is similar to available on website:
http://www.mobilefish.com/services/big_number/big_number.php
From this is is indicated that it is decimal representation of BigInt
i.e.

Convert BigInt to Decimal
Decimal to ASCII String
and then to Base64 url encoding.

But while applying this process, server is not accepting the JWK param in JOSE4J library.
","I haven't done this myself, but I think it would just be BN_bn2bin() for the x and y values, then convert the resulting data into base64url. RFC 7517 Appendix A says that JWKs need the big-endian values for x and y (and d if a private key), which is what BN_bn2bin is documented to give you.
Note that base64url is slightly different than regular base64; look at RFC 7515 Appendix C for note on how to use regular base64 routines then convert the result to base64URL.
","662","<openssl><elliptic-curve><bignum><jose4j><jwk>","1","1","1","2016-05-03 10:55:00","36842786","0","","499351","","2016-05-03 10:55:00","2016-04-15 06:20:49",""
"48130343","elliptic curve routines:o2i_ECPublicKey:passed a null parameter:ec_asn1.c:1271:","I'm creating ECDH using openssl EVP method that is explained by openssl elliptic curve diffie helman
Everything works expect where I get the other peer's public key and generate EVP_PKEY* based on it. 
In the given link, it ignores implementation details of decoding other peer's public key and has used get_peerkey pseudo function:
/* Get the peer's public key, and provide the peer with our public key -
 * how this is done will be specific to your circumstances */
peerkey = get_peerkey(pkey);

In my implementation the other peer's public key is received and stored in publickey2 and its size is stored in pub_len2 
size_t pub_len2 = 0;
const unsigned char *publickey2 = get_public_key(&pub_len2);

then I try to create EVP_PKEY* using following code:
EVP_PKEY *pkey3=NULL;

pkey3 = d2i_PublicKey(EVP_PKEY_EC, &pkey3, (const unsigned char **)&publickey2, pub_len2);

if(pkey3 == NULL) {

    ERR_print_errors_fp(stderr);
}

but pkey3 is always null and gives me following error!
139898837907104:error:10098043:elliptic curve routines:o2i_ECPublicKey:passed a null parameter:ec_asn1.c:1389:
139898837907104:error:0D09B00D:asn1 encoding routines:d2i_PublicKey:ASN1 lib:d2i_pu.c:123:

passed a null parameter error.
Do you guys have any idea?
Edit:
I've managed to solve this by using 
    pkey3 = d2i_PUBKEY(NULL, (const unsigned char **)&publickey2, pub_len2);
But I faced another problems, The main problem is that calculated derived secret from these public keys is different in both peers!
Here is my secret derivation procedure which is the same in both peers and exactly copy and pasted (with some modification) from provided link, I made some comments for the modifications reason: 
unsigned char *derive_secret(EVP_PKEY *pkey, 
const unsigned char *peer_key, 
size_t peerkey_len, size_t *secret_len)
{
    EVP_PKEY_CTX *ctx;
    unsigned char *secret;
    //MY modification to get peer key of peer_key buffer.
    //peer_key is created by i2d_PUBKEY at peer side and 
    //received by network and is passed here
    EVP_PKEY *peerkey = d2i_PUBKEY(NULL, &peer_key, peerkey_len);

    //I also set the group of newly created EC
    EC_KEY_set_group(EVP_PKEY_get1_EC_KEY(peer_key),
        EC_GROUP_new_by_curve_name(NID_X9_62_prime256v1));

    //I also set the CONVERSION format to make sure!
    EC_KEY_set_conv_form(EVP_PKEY_get1_EC_KEY(peer_key), POINT_CONVERSION_COMPRESSED);

    /* Create the context for the shared secret derivation */
    if(NULL == (ctx = EVP_PKEY_CTX_new(pkey, NULL))) handleErrors();

    /* Initialise */
    if(1 != EVP_PKEY_derive_init(ctx)) handleErrors();

    /* Provide the peer public key */
    if(1 != EVP_PKEY_derive_set_peer(ctx, peerkey)) handleErrors();

    /* Determine buffer length for shared secret */
    if(1 != EVP_PKEY_derive(ctx, NULL, secret_len)) handleErrors();

    /* Create the buffer */
    if(NULL == (secret = OPENSSL_malloc(*secret_len))) handleErrors();

    /* Derive the shared secret */
    if(1 != (EVP_PKEY_derive(ctx, secret, secret_len))) handleErrors();

    EVP_PKEY_CTX_free(ctx);
    EVP_PKEY_free(peerkey);
    EVP_PKEY_free(pkey);

    /* Never use a derived secret directly. Typically it is passed
     * through some hash function to produce a key */
    return secret;
}

I also printed out sent and received public keys on both side and made sure public keys are being received in one piece and exactly the same as they created and sent!
There is also some minor problem an that is when I figured that a long bytes of public keys are the same for both peers! Is that normal for a public key of EC diffie-helman?
Here are the public keys shown in HEX format
Peer1:


Peer2:



","some bytes (prefix) the same: all public keys in X.509-format (more exactly, SubjectPublicKeyInfo) have at least an 'object identifier' (OID), which is the same for all keys of a given algorithm (like EC), and EC keys also have 'parameters' specifying a group/curve, which is the same for all keys on the same curve -- and keys for an ECDH agreement must be on the same curve. This identical data, combined with the fact that the actual pubkeys have different values but same size, results in the ASN.1 DER encodings starting with the same bytes.
The pubkey encodings you posted use the mostly-obsolete explicit curve specification, see rfc3279 sec 2.3.5 (equivalent to X9.62 or SEC1) which is much longer than the now-preferred and often required 'named' specification. At a guess, you used OpenSSL library below 1.1.0 to generate these keys and didn't set asn1_flag in the EC_GROUP object (or group subobject of EC_KEY) before serializing (aka encoding) with i2d (or PEM_write).
The wiki page you referenced sort of covers this in section 3 ""ECDH and Named Curves"" although it only mentions private keys when this also applies to public keys and certificates -- but public key and (then) certificate are derived from private key, so setting asn1_flag on private key is sufficient. And it doesn't say that 'named' is now the default in 1.1.0 and no longer needs to be explicitly set.
your newly-posted code: point_format is meaningful only when serializing (i2d or PEM_write) so setting it on a deserialized key that will only be used and free'd (not reserialized) is useless. OTOH setting the EC group to its existing value (which was set from deserialization) is useless, but setting it to any other value will cause chaos. EC public keys are points on a specific curve and different curves have entirely different points -- a value that is a point on one curve is not a point on another curve. Also, using a get1 function and not free'ing the result leaks memory.
derivation result different: that's quite wrong for (EC)DH, and I can't reproduce it. Below is your deriviation code with the few fixes indicated above and some tiny changes to match my coding style, plus the generation code from the wiki and a trivial main to drive them, and when I run this I get pubkeys with a common prefix (shorter due to using named form) but as expected the same derivation result:
$ cat SO48130343.c 
/* SO48130343 */
#include <stdio.h>
#include <openssl/opensslv.h>
#include <openssl/evp.h>
#include <openssl/x509.h>
#include <openssl/ec.h>
#include <openssl/err.h>

void hex (unsigned char *p, size_t n){ while(n--) printf(""%02x"", *p++); }

void err (const char * msg){ fprintf(stderr, ""%s:\n"", msg); ERR_print_errors_fp(stderr); exit(1); }

EVP_PKEY * gen (void) {
  EVP_PKEY_CTX *pctx, *kctx;
  EVP_PKEY *params = NULL, *pkey = NULL;
  if( NULL == (pctx = EVP_PKEY_CTX_new_id(EVP_PKEY_EC, NULL)) ) err(""CTX1_new"");
  if( 1 != EVP_PKEY_paramgen_init(pctx) ) err(""pg_init"");
  if( 1 != EVP_PKEY_CTX_set_ec_paramgen_curve_nid(pctx, NID_X9_62_prime256v1) ) err(""pg_curve"");
  if( 1 != EVP_PKEY_paramgen(pctx, &params) ) err(""pg"");
  if( NULL == (kctx = EVP_PKEY_CTX_new(params, NULL)) ) err(""CTX2_new"");
  if( 1 != EVP_PKEY_keygen_init(kctx) ) err(""kg_init"");
  if( 1 != EVP_PKEY_keygen(kctx, &pkey) ) err(""kg"");
#if OPENSSL_VERSION_NUMBER < 0x1010000fL
  EC_KEY_set_asn1_flag (pkey->pkey.ec, OPENSSL_EC_NAMED_CURVE);
  /* point format needed before 'sending' and this is convenient */
  EC_KEY_set_conv_form (pkey->pkey.ec, POINT_CONVERSION_COMPRESSED);
#else
  /* asn1_flag now default but point format still needed */
  EC_KEY_set_conv_form (EVP_PKEY_get0_EC_KEY (pkey), POINT_CONVERSION_COMPRESSED);
#endif
  EVP_PKEY_CTX_free(pctx);
  EVP_PKEY_CTX_free(kctx);
  EVP_PKEY_free(params);
  return pkey;
}
unsigned char * derive (EVP_PKEY * self,
    const unsigned char * peer_ptr, size_t peer_len, size_t *len_ptr){
  EVP_PKEY * peer = d2i_PUBKEY (NULL, &peer_ptr, peer_len);
  /* DON'T change EC_GROUP; point_format not needed on 'receive' */

  EVP_PKEY_CTX *ctx; unsigned char * buf_ptr;
  if( !(ctx = EVP_PKEY_CTX_new (self, NULL)) ) err(""CTX_new"");
  if( 1 != EVP_PKEY_derive_init(ctx) ) err(""derive_init"");
  if( 1 != EVP_PKEY_derive_set_peer(ctx, peer) ) err(""derive_peer"");
  if( 1 != EVP_PKEY_derive (ctx, NULL, len_ptr) ) err(""derive1"");
  if( !(buf_ptr = OPENSSL_malloc (*len_ptr)) ) err(""malloc"");
  if( 1 != EVP_PKEY_derive (ctx, buf_ptr, len_ptr) ) err(""derive2"");
  EVP_PKEY_CTX_free(ctx);
  EVP_PKEY_free(peer);
  return buf_ptr;
}

int main (void){
  EVP_PKEY * pkey1 = gen(), * pkey2 = gen();
  unsigned char pub1 [100], pub2 [100], *ptr1 = &pub1[0], *ptr2 = &pub2[0];
  size_t publen1 = i2d_PUBKEY (pkey1, &ptr1), publen2 = i2d_PUBKEY (pkey2, &ptr2);
  printf (""pub1=""); hex(pub1, publen1); putchar('\n');
  printf (""pub2=""); hex(pub2, publen2); putchar('\n');

  size_t len1, len2;
  unsigned char * out1 = derive (pkey1, pub2, publen2, &len1);
  unsigned char * out2 = derive (pkey2, pub1, publen1, &len2);
  printf (""prv1/pub2=""); hex(out1, len1); putchar('\n');
  printf (""prv2/pub1=""); hex(out2, len2); putchar('\n');
  /* don't bother freeing for Q&D test code */
  return 0;
}
$ gcc [details for my system redacted]
$ ./SO48130343.exe 
pub1=3039301306072a8648ce3d020106082a8648ce3d03010703220003302c6f990445ddd27b2c0ecd3a0cd33109eec44dea0edd538c6bfc98796885e3
pub2=3039301306072a8648ce3d020106082a8648ce3d0301070322000311940ba32c0b4d71f8785a884f7ea74cebed17e841e93a0fb1ccbeac32b2eb3b
prv1/pub2=84b7a84249f1e88741a751a05d34a43e4cb131e012181967e4f465c1f4bf3b35
prv2/pub1=84b7a84249f1e88741a751a05d34a43e4cb131e012181967e4f465c1f4bf3b35

","648","<c><openssl><elliptic-curve><diffie-hellman>","1","2","1","2018-01-11 09:09:42","48203295","2","","2556354","","2018-01-09 23:36:33","2018-01-06 18:11:01",""
"50019450","Encrypting data using elliptic curve encryption in ios/swift","I've been trying to encrypt a string with an elliptic curve encryption using Security swift library, and i'm getting an error on the line with SecKeyCreateEncryptedData(...) : 

Thread 1: EXC_BAD_INSTRUCTION (code=EXC_I386_INVOP, subcode=0x0).  

I guess the length and format of the data isn't conforming to the chosen algorithm, but i can't find any information about it in the documentation.
let attributes: [String: Any] = [kSecAttrKeySizeInBits as String: 256,
                                 kSecAttrKeyType as String: kSecAttrKeyTypeEC,
                                 kSecPrivateKeyAttrs as String: [kSecAttrIsPermanent as String: false]]
var error: Unmanaged<CFError>?
if #available(iOS 10.0, *) {
    guard let privateKey1 = SecKeyCreateRandomKey(attributes as CFDictionary, &error) else {return}

    let publicKey1 = SecKeyCopyPublicKey(privateKey1)
    guard let privateKey2 = SecKeyCreateRandomKey(attributes as CFDictionary, &error) else {return}

    let publicKey2 = SecKeyCopyPublicKey(privateKey2)

    let dict: [String: Any] = [:]

    guard let shared1 = SecKeyCopyKeyExchangeResult(privateKey1, SecKeyAlgorithm.ecdhKeyExchangeStandardX963SHA256, publicKey2!, dict as CFDictionary, &error) else {return}

    guard let shared2 = SecKeyCopyKeyExchangeResult(privateKey2, SecKeyAlgorithm.ecdhKeyExchangeStandardX963SHA256, publicKey1!, dict as CFDictionary, &error) else {return}

    print(shared1==shared2)

    let str = ""Hello""
    let byteStr: [UInt8] = Array(str.utf8)
    let cfData = CFDataCreate(nil, byteStr, byteStr.count)

    guard let encrypted = SecKeyCreateEncryptedData(shared1 as! SecKey, SecKeyAlgorithm.eciesEncryptionStandardX963SHA256AESGCM, cfData!, &error) else {return}

    guard let decrypted = SecKeyCreateDecryptedData(shared2 as! SecKey, SecKeyAlgorithm.eciesEncryptionStandardX963SHA256AESGCM, encrypted, &error) else {return}


    print(decrypted)

} else {
    print(""unsupported"")
}

","With the line
SecKeyCreateEncryptedData(shared1 as! SecKey, SecKeyAlgorithm.eciesEncryptionStandardX963SHA256AESGCM, cfData!, &error)

you are force casting shared1 to SecKey type. Force casting is (usually) a bad idea, an in your case it produces crash, because shared1 is not of SecKey type, but of CFData? type - because that is what SecKeyCopyKeyExchangeResult returns. From documentation:  
func SecKeyCopyKeyExchangeResult(_ privateKey: SecKey, 
                           _ algorithm: SecKeyAlgorithm, 
                           _ publicKey: SecKey, 
                           _ parameters: CFDictionary, 
                           _ error: UnsafeMutablePointer<Unmanaged<CFError>?>?) -> CFData?

You can clearly see thet this function returns CFData?
","630","<ios><swift><encryption><elliptic-curve><ecdh>","3","1","1","2018-04-25 10:11:53","","0","1","3515033","","2018-04-25 10:10:17","2018-04-25 10:04:30",""
"22043776","Create CngKey from cert in localmachine store for use with ECDsaCng(CngKey)?","I have been trying to wrap my head around ECDsaCng, CngKey and signing with a valid EC cert. The cert is issued by ""Symantec Class 3 ECC 256 bit Extended Validation CA"", has a signature algorithm of ""sha256ECDSA"", a signature hash algorithm of ""sha256"", public key parameters = ""ECDSA_P256"" and key usage = ""Digital Signature (80)"".
Besides the ECDsaCng I have tried using JwtSecurityTokenHandler with the certificate, but I get a ""certificate algorithm not supported"" exception. Using a ""standard"" 2048-bit SSL cert with that Works fine.
What I need to do is sign a JWT with ES256, and so far this works only by using a ""randomly generated"" key of 256 bits with ECDsaCng, so an answer to any of these questions would really make my day:

How do I order a valid certificate that can be used with JwtSecurityTokenHandler for doing an ES256 signature?
How do I create a CngKey from my cert in the store? (The certificate's private key is not exportable.)
Is there any other way to sign with ES256 and a certificate private key that cannot be exported from store?

Pretty much any help is appreciated!
Best regards,
Henrik
",".NET 4.6.1 added significantly better support for doing ECDSA. In particular, the GetECDsaPrivateKey (extension) method.
Since the signing and verifying methods are on the ECDsa base class (as of .NET 4.6.1) you shouldn't really have need to work directly with the ECDsaCng type, unless you're trying to interact with named system keys or other direct system interop.
","627","<c#><x509certificate><signing><elliptic-curve><jwt>","2","1","1","2016-08-12 15:25:19","","2","","848975","","2014-02-26 14:07:19","2014-02-26 14:05:21",""
"16426561","ECC Curve Modulus","What is the modulus of an ECC P-256 key?  Would it be 32 bytes?  I seem to only be able to sign/encrypt a 32 byte data buffer with this key.  
For RSA, I know that a 1024 bit RSA key has a modulus of 128 bytes.  For ECC, I'm confused about what ""P"" means.
","You should read more about ECC. P-256 curve(s) are based on 256-bit underlying field, however this is not the order of base point.
RSA has much simpler math and can directly encrypt/decrypt data, you should never compare RSA and ECDSA.
","621","<security><rsa><elliptic-curve>","1","2","2","2013-05-08 07:01:01","","3","","","","","2013-05-07 18:59:35",""
"16426561","ECC Curve Modulus","What is the modulus of an ECC P-256 key?  Would it be 32 bytes?  I seem to only be able to sign/encrypt a 32 byte data buffer with this key.  
For RSA, I know that a 1024 bit RSA key has a modulus of 128 bytes.  For ECC, I'm confused about what ""P"" means.
","The modulus p of the X9.62/SECG curve over a 256 bit prime field is

0xFFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF

You can find this information in ec_curve.c of the OpenSSL library.
And, yes, p is a 32-byte number. In ECC, while p usually represents the modulus of a prime field, P usually represents a point on the elliptic curve, where P = [k]G, 0<k<p-1 and G is the generator of the curve.
","621","<security><rsa><elliptic-curve>","1","2","2","2013-05-08 07:01:01","","3","","","","","2013-05-07 18:59:35",""
"22376901","Elliptic Curve Diffie-Hellman Symmetric Keys Not Matching On Client and Server","I'm using JCSL - Javascript on client (documentation) and OpenSSL - Ruby on server (documentation) to generate a symmetric key on both client and server using Elliptic Curve Diffie-Hellman.
I've somehow finally managed to format properly the public keys to be sent by the Client and Server, and I've finally generated a symmetric key without anymore runtime errors (my previous question)
However, the problem now is that Client's Symmetric Key != Server's Symmetric Key
I feel that it would be best if you could try this out on your computer, so I thought of uploading the compiled JS file from JCSL (this includes the Elliptic Curve) for testing convenience (link)
My Code as follows (you can just copy-paste this for testing convenience):
#Ruby on Rails
class EcdhController < ApplicationController

  @@group = OpenSSL::PKey::EC::Group.new('secp384r1')
  @@ec = OpenSSL::PKey::EC.new(@@group)

  def connect
    logger.info('CONNECT PAGE:::::::::::::::::')
  end

  def send_params
    logger.info('SEND_PARAMS::::::::::::::::::')

    #GENERATE PUBLIC AND PRIVATE KEYS
    @@ec.generate_key

    #SEND PUBLIC KEY TO CLIENT/BROWSER
    #[2..-1] means I've removed the first two Hex characters which is x04 which I think is automatically prepended by OpenSSL which causes errors in the Client JS side
    render :json => {:server_pub_key => @@ec.public_key.to_bn.to_s(16)[2..-1]}
  end

  def receive_client_pub_key
    logger.info('RECEIVE_CLIENT_PUB_KEY:::::::::::::::')

    #Convert properly the format of the JCSL pub key on client side
    client_pub_key = (params[:client_pub_key].split("","").map { |s| s.to_i }).pack('N*')

    #Copied from https://stackoverflow.com/questions/11135420/elliptic-curve-cryptography-with-sjcl-in-js-and-openssl-in-ruby
    algokey = OpenSSL::ASN1::ObjectId 'id-ecPublicKey'
    algovalue = OpenSSL::ASN1::ObjectId 'secp384r1'
    algo = OpenSSL::ASN1::Sequence.new [algokey,algovalue]
    # for some reason OpenSSL seems to prepend 0x04 to all public keys
    key = OpenSSL::ASN1::BitString.new ""\x04#{client_pub_key}""
    root = OpenSSL::ASN1::Sequence.new [algo,key]

    pub = OpenSSL::PKey.read(root.to_der)
    #-End of copied code-#

    #COMPUTE SYMMETRIC KEY
    symm_key = @@ec.dh_compute_key(pub.public_key)

    puts ""SYMM KEY: #{symm_key.unpack('H*').first}""

    #---> SYMM KEY: f8de0a7012765a1ff8b7630c917a1d3d2ac9cc0d782fbb6c0c101128a29232fec5194468b7ed846053abab05744c61e9    

    render :json => nil
  end
end

While on Client Side,
//Javascript
<h1>Ecdh#connect</h1>
<p>Find me in app/views/ecdh/connect.html.erb</p>

<script>
    $(document).ready(function ()
    {
        var server_pub_key;
        var client_priv_key;
        var client_pub_key;

        connect();

        function connect()
        {
            //Receive Server Public Key
            jQuery.getJSON('<%= url_for(:controller => :ecdh, :action => :send_params) %>', function(data)
            {
                //Get Server Public Key
                server_pub_key_Bits = new sjcl.bn(data.server_pub_key.toString()).toBits(); //Convert Hex String to BN, and then to Bits

                //Client Keys
                client_keys = sjcl.ecc.elGamal.generateKeys(384, 0);
                client_keys.generate_keys;

                client_pub_key_Hex = sjcl.bn.fromBits( client_keys.pub.serialize().point ).toString(16); //Into bits, then to Hex
                client_priv_key = client_keys.sec; //sjcl.ecc.elGamal.privateKey format

                //Send Client/Own Public Key to Server
                jQuery.getJSON('<%= url_for(:controller => :ecdh, :action => :receive_client_pub_key) %>?client_pub_key='+client_keys.pub.serialize().point, function()
                {
                    //Set Curve from Template
                    curve = sjcl.ecc.curves['c384'];

                    //Convert server_pub_key_Bits to proper 'publicKey' format
                    server_pub_key = new sjcl.ecc.elGamal.publicKey(384, curve, server_pub_key_Bits);

                    //Compute Shared Key
                    symm_key_Bits = client_priv_key.dh(server_pub_key);
                    symm_key_Hex = sjcl.bn.fromBits(symm_key_Bits).toString(16);

                    console.log(symm_key_Hex);

                    //---> 0xa779359617b008884b67c0785a3f782b9dca6e46f9586f7e911b73de877f2aca
                }); 
            }); 
        }
    }); 
</script>

Thus my problem is
f8de0a7012765a1ff8b7630c917a1d3d2ac9cc0d782fbb6c0c101128a29232fec5194468b7ed846053abab05744c61e9
!=
0xa779359617b008884b67c0785a3f782b9dca6e46f9586f7e911b73de877f2aca

Feel free to ask me how to convert format and stuff if you want to test or anything, as this is vital for my project. Please help. Thanks
","I've finally solved this problem :)
I am now using JSBN-EC (link) rather than JCSL on Javascript-client.
Refer to (this) another question of mine for more details
","611","<javascript><ruby-on-rails><ruby><openssl><elliptic-curve>","0","0","1","2014-03-20 10:23:30","","0","","-1","","2017-05-23 11:57:37","2014-03-13 11:16:48",""
"12628315","Convert ECIES ECP CryptoPP to JAVA","I have a 202 byte key and that is used to decrypt a binary file.
StringSource keyStr( key, Z3_KEY_LENGTH, true );
AutoSeededRandomPool rng;
ECIES<ECP>::Decryptor ellipticalEnc( keyStr );
unsigned char *tmpBuffer( new unsigned char[ src.Size() ] );
DecodingResult dr = ellipticalEnc.Decrypt( rng, src.Data(), src.Size(), tmpBuffer );

I tried to use jsafejce for this:
PKCS8EncodedKeySpec privKeySpec = new PKCS8EncodedKeySpec(key);
KeyFactory factory = KeyFactory.getInstance(""EC"", ""JsafeJCE"");
PrivateKey privateKey = factory.generatePrivate(privKeySpec);
Cipher eciesDecrypter = Cipher.getInstance(""ECIES/SHA1/HMACSHA1"", ""JsafeJCE"");

and
Cipher eciesDecrypter = Cipher.getInstance(""ECIESwithXOR/SHA1/HMACSHA1"", ""JsafeJCE"");

But with the first I get a block error, must be divided by 16, and with the second I get a mac check error.
Does anyone have any suggestions?
","Have you tried adding some empty bytes to the end of your key so that it is 208 bytes long? That might fix your block size error.
","610","<java><bouncycastle><jce><elliptic-curve><crypto++>","1","0","2","2014-01-18 16:58:59","","0","2","384985","","2012-09-27 20:07:45","2012-09-27 18:57:58",""
"12628315","Convert ECIES ECP CryptoPP to JAVA","I have a 202 byte key and that is used to decrypt a binary file.
StringSource keyStr( key, Z3_KEY_LENGTH, true );
AutoSeededRandomPool rng;
ECIES<ECP>::Decryptor ellipticalEnc( keyStr );
unsigned char *tmpBuffer( new unsigned char[ src.Size() ] );
DecodingResult dr = ellipticalEnc.Decrypt( rng, src.Data(), src.Size(), tmpBuffer );

I tried to use jsafejce for this:
PKCS8EncodedKeySpec privKeySpec = new PKCS8EncodedKeySpec(key);
KeyFactory factory = KeyFactory.getInstance(""EC"", ""JsafeJCE"");
PrivateKey privateKey = factory.generatePrivate(privKeySpec);
Cipher eciesDecrypter = Cipher.getInstance(""ECIES/SHA1/HMACSHA1"", ""JsafeJCE"");

and
Cipher eciesDecrypter = Cipher.getInstance(""ECIESwithXOR/SHA1/HMACSHA1"", ""JsafeJCE"");

But with the first I get a block error, must be divided by 16, and with the second I get a mac check error.
Does anyone have any suggestions?
","Well, I don't really know what you are trying to do in your code. I'll try and answer some of the questions.


Convert ECIES ECP CryptoPP to JAVA

To get the point out of Crypto++, its about as hard as:
// Assuming your key was DER Encoded
byte key[Z3_KEY_LENGTH] = ...;

ECIES<ECP>::Decryptor decryptor;
decryptor.BERDecodePublicKey(ArraySource(key, sizeof(key)).Ref(), false, sizeof(key));

const ECPPoint& point = decryptor.GetPublicElement();
const Integer& x = point.x;
const Integer& y = point.y;

If your key was not DER Encoded, refer to Keys and Formats from the Crypto++ wiki. You also have the wiki page on Elliptic Curve Integrated Encryption Scheme.
Java 7 provides and ECPoint class, and it takes an X and Y coordinate.

> ECIES<ECP>::Decryptor ellipticalEnc( keyStr );
> unsigned char *tmpBuffer( new unsigned char[ src.Size() ] );
> DecodingResult dr = ellipticalEnc.Decrypt( rng, src.Data(), src.Size(), tmpBuffer );

This does not look quite right, but you have not showed enough code.
size_t maxLength = decryptor.MaxPlaintextLength( src.Size() );
unsigned char *tmpBuffer = new unsigned char[ maxLength ];

DecodingResult dr = ellipticalEnc.Decrypt( rng, src.Data(), src.Size(), tmpBuffer );
if( !result.isValidCoding )
    throw runtime_error(""failed to decrypt cipher text"");

unsigned char *buffer = new unsigned char[ result.messageLength ];
std::cpy(tmpBuffer, buffer, result.messageLength);

","610","<java><bouncycastle><jce><elliptic-curve><crypto++>","1","1","2","2014-01-18 16:58:59","","0","2","384985","","2012-09-27 20:07:45","2012-09-27 18:57:58",""
"12558866","Find a solutions for segmentation fault in c","I am porting elliptic curve cryptography for contiki os (Based on pure c). I am getting an error of segmentation fault. I used xxgdb to debug and still I can't found a reason why is that. And I do not have clear idea about debug in c. Please help with how get rid of these segmentation faults in c at all times(how to find why this segmentation fault occur). 
Here is my source code. 
#include <stdio.h>
#include <stdint.h>
typedef uint32_t NN_DIGIT;
typedef uint64_t NN_DOUBLE_DIGIT;

/* Types for length */
typedef uint8_t NN_UINT;
typedef uint16_t NN_UINT2;

#if defined (SECP128R1) || defined (SECP128R2)
#define KEY_BIT_LEN 128
#else 
#if defined (SECP160K1) || defined (SECP160R1) || defined (SECP160R2) 
#define KEY_BIT_LEN 160
#else 
#if defined (SECP192K1) || defined (SECP192R1)
#define KEY_BIT_LEN 192
#else
#define KEY_BIT_LEN 128
#endif /* 192 */
#endif /* 160 */
#endif /* 128 */

/* Length of digit in bits */
#define NN_DIGIT_BITS 32

/* Length of digit in bytes */
#define NN_DIGIT_LEN (NN_DIGIT_BITS/8)

/* Maximum value of digit */
#define MAX_NN_DIGIT 0xffffffff

/* Number of digits in key
 * used by optimized mod multiplication (ModMultOpt) and optimized mod square (ModSqrOpt)
 *
 */
#define KEYDIGITS (KEY_BIT_LEN/NN_DIGIT_BITS) //5

/* Maximum length in digits */
#define MAX_NN_DIGITS (KEYDIGITS+1)

/* buffer size
 *should be large enough to hold order of base point
 */
#define NUMWORDS MAX_NN_DIGITS

/* the mask for ModSqrOpt */
#define MOD_SQR_MASK1 0x8000000000000000ll
#define MOD_SQR_MASK2 0x0000000100000000ll

typedef struct Point
{
    // point's coordinates
    NN_DIGIT x[NUMWORDS];
    NN_DIGIT y[NUMWORDS];
} Point;

Point pbkey_alice;
void 
NN_Encode(unsigned char *a, NN_UINT len, NN_DIGIT *b, NN_UINT digits)
{
  NN_DIGIT t;
  int j;
  unsigned int i, u;

  for(i = 0, j = len - 1; i < digits && j >= 0; i++) {
    t = b[i];
    for(u = 0; j >= 0 && u < NN_DIGIT_BITS; j--, u += 8) {
      a[j] = (unsigned char)(t >> u);
    }
  }

  for(; j >= 0; j--) {
    a[j] = 0;
  }
}

int ecc_point2octet(uint8_t *octet, NN_UINT octet_len, Point *P, int compress)
{
    if (compress){
        if(octet_len < KEYDIGITS*NN_DIGIT_LEN+1)
      {//too small octet
        return -1;
    }
    else
    {
          //compressed point representation
            if((1 & P->y[0]) == 0){
        octet[0] = 0x02;
            }
            else
                {
                octet[0] = 0x03;
                }
            NN_Encode(octet+1, KEYDIGITS*NN_DIGIT_LEN, P->x, KEYDIGITS);
            return KEYDIGITS*NN_DIGIT_LEN+1;
      }
    }
  else
  {//non compressed
     if(octet_len < 2*KEYDIGITS*NN_DIGIT_LEN+1)
    {

        return -1;
    }
    else
    {
            //octet[0] = 0x04;
            NN_Encode(octet+1, KEYDIGITS*NN_DIGIT_LEN, P->x, KEYDIGITS);
            NN_Encode(octet+1+KEYDIGITS*NN_DIGIT_LEN, KEYDIGITS*NN_DIGIT_LEN, P->y, KEYDIGITS);
            return 2*KEYDIGITS*NN_DIGIT_LEN+1;
        }
  }
}

int main()
{
pbkey_alice.x[5] = 0x00000000;
  pbkey_alice.x[4] = 0x21961f69;
  pbkey_alice.x[3] = 0xf02d202b;
  pbkey_alice.x[2] = 0xa4b41f1a;
  pbkey_alice.x[1] = 0x0aa08a86;
  pbkey_alice.x[0] = 0xdf27908d;

  pbkey_alice.y[5] = 0x00000000;
  pbkey_alice.y[4] = 0x378e1278;
  pbkey_alice.y[3] = 0x62836d75;
  pbkey_alice.y[2] = 0x7acb7ca4;
  pbkey_alice.y[1] = 0x0dc0ad13;
  pbkey_alice.y[0] = 0x741e287c;
uint8_t *C;
int C_len = 2*KEYDIGITS*NN_DIGIT_LEN + 1 + 20 + 20;
int oct_len = ecc_point2octet(C, C_len, &pbkey_alice, 0);

}

","You haven't allocated any memory for C before you pass it to ecc_point2octet().  That seems like a recipe for just the kind of problems you're seeing.
","608","<c><segmentation-fault><elliptic-curve>","0","5","2","2012-09-24 08:51:49","12561646","8","","","","","2012-09-24 04:29:02",""
"12558866","Find a solutions for segmentation fault in c","I am porting elliptic curve cryptography for contiki os (Based on pure c). I am getting an error of segmentation fault. I used xxgdb to debug and still I can't found a reason why is that. And I do not have clear idea about debug in c. Please help with how get rid of these segmentation faults in c at all times(how to find why this segmentation fault occur). 
Here is my source code. 
#include <stdio.h>
#include <stdint.h>
typedef uint32_t NN_DIGIT;
typedef uint64_t NN_DOUBLE_DIGIT;

/* Types for length */
typedef uint8_t NN_UINT;
typedef uint16_t NN_UINT2;

#if defined (SECP128R1) || defined (SECP128R2)
#define KEY_BIT_LEN 128
#else 
#if defined (SECP160K1) || defined (SECP160R1) || defined (SECP160R2) 
#define KEY_BIT_LEN 160
#else 
#if defined (SECP192K1) || defined (SECP192R1)
#define KEY_BIT_LEN 192
#else
#define KEY_BIT_LEN 128
#endif /* 192 */
#endif /* 160 */
#endif /* 128 */

/* Length of digit in bits */
#define NN_DIGIT_BITS 32

/* Length of digit in bytes */
#define NN_DIGIT_LEN (NN_DIGIT_BITS/8)

/* Maximum value of digit */
#define MAX_NN_DIGIT 0xffffffff

/* Number of digits in key
 * used by optimized mod multiplication (ModMultOpt) and optimized mod square (ModSqrOpt)
 *
 */
#define KEYDIGITS (KEY_BIT_LEN/NN_DIGIT_BITS) //5

/* Maximum length in digits */
#define MAX_NN_DIGITS (KEYDIGITS+1)

/* buffer size
 *should be large enough to hold order of base point
 */
#define NUMWORDS MAX_NN_DIGITS

/* the mask for ModSqrOpt */
#define MOD_SQR_MASK1 0x8000000000000000ll
#define MOD_SQR_MASK2 0x0000000100000000ll

typedef struct Point
{
    // point's coordinates
    NN_DIGIT x[NUMWORDS];
    NN_DIGIT y[NUMWORDS];
} Point;

Point pbkey_alice;
void 
NN_Encode(unsigned char *a, NN_UINT len, NN_DIGIT *b, NN_UINT digits)
{
  NN_DIGIT t;
  int j;
  unsigned int i, u;

  for(i = 0, j = len - 1; i < digits && j >= 0; i++) {
    t = b[i];
    for(u = 0; j >= 0 && u < NN_DIGIT_BITS; j--, u += 8) {
      a[j] = (unsigned char)(t >> u);
    }
  }

  for(; j >= 0; j--) {
    a[j] = 0;
  }
}

int ecc_point2octet(uint8_t *octet, NN_UINT octet_len, Point *P, int compress)
{
    if (compress){
        if(octet_len < KEYDIGITS*NN_DIGIT_LEN+1)
      {//too small octet
        return -1;
    }
    else
    {
          //compressed point representation
            if((1 & P->y[0]) == 0){
        octet[0] = 0x02;
            }
            else
                {
                octet[0] = 0x03;
                }
            NN_Encode(octet+1, KEYDIGITS*NN_DIGIT_LEN, P->x, KEYDIGITS);
            return KEYDIGITS*NN_DIGIT_LEN+1;
      }
    }
  else
  {//non compressed
     if(octet_len < 2*KEYDIGITS*NN_DIGIT_LEN+1)
    {

        return -1;
    }
    else
    {
            //octet[0] = 0x04;
            NN_Encode(octet+1, KEYDIGITS*NN_DIGIT_LEN, P->x, KEYDIGITS);
            NN_Encode(octet+1+KEYDIGITS*NN_DIGIT_LEN, KEYDIGITS*NN_DIGIT_LEN, P->y, KEYDIGITS);
            return 2*KEYDIGITS*NN_DIGIT_LEN+1;
        }
  }
}

int main()
{
pbkey_alice.x[5] = 0x00000000;
  pbkey_alice.x[4] = 0x21961f69;
  pbkey_alice.x[3] = 0xf02d202b;
  pbkey_alice.x[2] = 0xa4b41f1a;
  pbkey_alice.x[1] = 0x0aa08a86;
  pbkey_alice.x[0] = 0xdf27908d;

  pbkey_alice.y[5] = 0x00000000;
  pbkey_alice.y[4] = 0x378e1278;
  pbkey_alice.y[3] = 0x62836d75;
  pbkey_alice.y[2] = 0x7acb7ca4;
  pbkey_alice.y[1] = 0x0dc0ad13;
  pbkey_alice.y[0] = 0x741e287c;
uint8_t *C;
int C_len = 2*KEYDIGITS*NN_DIGIT_LEN + 1 + 20 + 20;
int oct_len = ecc_point2octet(C, C_len, &pbkey_alice, 0);

}

","As Carl said, just replace : uint8_t *C by uint8_t *C = malloc(sizeof(uint8_t)) and you'll be good.
","608","<c><segmentation-fault><elliptic-curve>","0","0","2","2012-09-24 08:51:49","12561646","8","","","","","2012-09-24 04:29:02",""
"48929222","Recreate X and Y of Elliptic curve from public key byte array","I am really new to cryptography but - what I am trying to do is get the X and Y coordinates from byte array representation of public key. Iam using secp256r1 curve.
// get curve
X9ECParameters x9 = ECNamedCurveTable.GetByName(""secp256r1"");
ECCurve curve = x9.Curve;

// get coordinates from ASN.1 encoded public key point
var asn1 = (Asn1Sequence)Asn1Object.FromByteArray(publicKeyBytes);
var at1 = (DerBitString)asn1[1];
var bytes = at1.GetBytes();
var x = bytes.Skip(1).Take(32).Reverse().ToArray();
var y = bytes.Skip(33).Take(32).Reverse().ToArray();

// get affine X and Y using point on curve from X and Y
var ecPoint = curve.CreatePoint(new Org.BouncyCastle.Math.BigInteger(1, x), new Org.BouncyCastle.Math.BigInteger(1, y));
ECDomainParameters dParams = new ECDomainParameters(curve, ecPoint, x9.N);
ECPublicKeyParameters pubKey = new ECPublicKeyParameters(ecPoint, dParams);
var affineX = pubKey.Q.AffineXCoord.ToBigInteger().ToByteArrayUnsigned();
var affineY = pubKey.Q.AffineYCoord.ToBigInteger().ToByteArrayUnsigned();

// return a tuple of the coordinates
return (affineX, affineY);

I receive X and Y coordinates but these are probably not right. What am I doing wrong? Thanks
","Ok, so, there were few issues with the code. Here is the version that works, maybe it will help someone 
internal static (string x, string y) GetCertificateCoordinates(byte[] publicKeyBytes)
{
    // parse based on asn1 format the content of the certificate
    var asn1 = (Asn1Sequence)Asn1Object.FromByteArray(publicKeyBytes);
    var at1 = (DerBitString)asn1[1];
    var xyBytes = at1.GetBytes();

    //retrieve preddefined parameters for P256 curve
    X9ECParameters x9 = ECNamedCurveTable.GetByName(""P-256"");
    //establish domain we will be looking for the x and y
    ECDomainParameters domainParams = new ECDomainParameters(x9.Curve, x9.G, x9.N, x9.H, x9.GetSeed());
    ECPublicKeyParameters publicKeyParams = new ECPublicKeyParameters(x9.Curve.DecodePoint(xyBytes), domainParams);
    //get the affine x and y coordinates
    var affineX = EncodeCordinate(publicKeyParams.Q.AffineXCoord.ToBigInteger());
    var affineY = EncodeCordinate(publicKeyParams.Q.AffineYCoord.ToBigInteger());

    return (affineX, affineY);
}

public static string EncodeCordinate(Org.BouncyCastle.Math.BigInteger integer)
{
    var notPadded = integer.ToByteArray();
    int bytesToOutput = (256 + 7) / 8;
    if (notPadded.Length >= bytesToOutput)
        return Jose.Base64Url.Encode(notPadded);
    var padded = new byte[bytesToOutput];
    Array.Copy(notPadded, 0, padded, bytesToOutput - notPadded.Length, notPadded.Length);
    return Jose.Base64Url.Encode(padded);
}

I am using this code in android for the JWT providing X and Y to server side as jwk in header
","601","<c#><android><xamarin><bouncycastle><elliptic-curve>","1","1","1","2018-02-24 11:57:56","","1","","589259","","2018-02-23 23:59:27","2018-02-22 13:56:51",""
"23578137","ECDSA on Java BouncyCastle always returns true","I have an android program that writes data and signs ECDSA to NFC Tag, and another program that reads that data and verifies the signature from the NFC Tag.
I managed to write and sign the data to the NFC Tag, but whenever I try to verify the signature, the program always returns true, even though I deliberately changed the signature.
Can someone tell me what's wrong?
Here is the code I used to sign:  
public static String Generate(String x) throws Exception{
    KeyPairGenerator kpg;
    kpg = KeyPairGenerator.getInstance(""EC"",""BC"");
    ECGenParameterSpec ecsp;
    ecsp = new ECGenParameterSpec(""prime192v1"");
    kpg.initialize(ecsp); 

    KeyPair kp = kpg.genKeyPair();
    PrivateKey privKey = kp.getPrivate();

    Signature ecdsaSign;
    ecdsaSign = Signature.getInstance(""SHA256withECDSA"");
    ecdsaSign.initSign(privKey);
    byte[] baText = x.getBytes(""UTF-8"");

    ecdsaSign.update(baText);
    byte[] baSignature = ecdsaSign.sign();
    String signature = (new BigInteger(1,baSignature).toString(16)).toUpperCase();
    return signature;
}

And here is the code I used to verify:  
public static boolean Verify(String x) throws Exception{
    KeyPairGenerator kpg;
    kpg = KeyPairGenerator.getInstance(""EC"",""BC"");
    ECGenParameterSpec ecsp;
    ecsp = new ECGenParameterSpec(""prime192v1"");
    kpg.initialize(ecsp);

    KeyPair kp = kpg.genKeyPair();
    PrivateKey privKey = kp.getPrivate();
    PublicKey pubKey = kp.getPublic();

    Signature ecdsaSign;
    ecdsaSign = Signature.getInstance(""SHA256withECDSA"");
    ecdsaSign.initSign(privKey);

    byte[] baText = x.getBytes(""UTF-8"");
    ecdsaSign.update(baText);
    byte[] baSignature = ecdsaSign.sign();

    Signature ecdsaVerify;
    ecdsaVerify = Signature.getInstance(""SHA256withECDSA"");
    ecdsaVerify.initVerify(pubKey);
    ecdsaVerify.update(baText);
    boolean result = ecdsaVerify.verify(baSignature);
    return result;
}

","","588","<java><android><digital-signature><elliptic-curve>","0","","0","2014-05-10 07:01:18","","2","1","","","","2014-05-10 07:01:18",""
"42456624","How can I create or open a libsodium compatible sealed box in pure Java","libsodium provides an API to create or open a sealed box documented here https://download.libsodium.org/doc/public-key_cryptography/sealed_boxes.html
How can I achieve the same in pure Java, so that allows me to open a box created by libsodium or create one that libsodium can open?
","The following example code can create and open a libsodium sealed box.
It requires TweetNaclFast from https://github.com/InstantWebP2P/tweetnacl-java and a Blake2b hash implementation, for example the one from https://github.com/alphazero/Blake2b
import java.security.GeneralSecurityException;
import java.util.Arrays;
import ove.crypto.digest.Blake2b;
import com.iwebpp.crypto.TweetNaclFast;


/**
 * Example how to open sealed boxes in pure java (libsodium sealed boxes according to 
 * https://download.libsodium.org/doc/public-key_cryptography/sealed_boxes.html)
 * 
 * Has a dependency on TweetNaclFast and Blake2B, for example
 * 
 * https://github.com/alphazero/Blake2b
 * and
 * https://github.com/InstantWebP2P/tweetnacl-java
 * 
 */
public class SealedBoxUtility {


public static final int crypto_box_NONCEBYTES = 24;
public static final int crypto_box_PUBLICKEYBYTES = 32;
public static final int crypto_box_MACBYTES = 16;
public static final int crypto_box_SEALBYTES = (crypto_box_PUBLICKEYBYTES + crypto_box_MACBYTES);

//  libsodium
//  int crypto_box_seal(unsigned char *c, const unsigned char *m,
//            unsigned long long mlen, const unsigned char *pk);


/**
 * Encrypt in  a sealed box
 *
 * @param clearText clear text
 * @param receiverPubKey receiver public key
 * @return encrypted message
 * @throws GeneralSecurityException 
 */
public static byte[] crypto_box_seal(byte[] clearText, byte[] receiverPubKey) throws GeneralSecurityException {

    // create ephemeral keypair for sender
    TweetNaclFast.Box.KeyPair ephkeypair = TweetNaclFast.Box.keyPair();
    // create nonce
    byte[] nonce = crypto_box_seal_nonce(ephkeypair.getPublicKey(), receiverPubKey);
    TweetNaclFast.Box box = new TweetNaclFast.Box(receiverPubKey, ephkeypair.getSecretKey());
    byte[] ciphertext = box.box(clearText, nonce);
    if (ciphertext == null) throw new GeneralSecurityException(""could not create box"");

    byte[] sealedbox = new byte[ciphertext.length + crypto_box_PUBLICKEYBYTES];
    byte[] ephpubkey = ephkeypair.getPublicKey();
    for (int i = 0; i < crypto_box_PUBLICKEYBYTES; i ++)
        sealedbox[i] = ephpubkey[i];

    for(int i = 0; i < ciphertext.length; i ++)
        sealedbox[i+crypto_box_PUBLICKEYBYTES]=ciphertext[i];

    return sealedbox;
}

//  libsodium:
//      int
//      crypto_box_seal_open(unsigned char *m, const unsigned char *c,
//                           unsigned long long clen,
//                           const unsigned char *pk, const unsigned char *sk)

/**
 * Decrypt a sealed box
 *
 * @param c ciphertext
 * @param pk receiver public key
 * @param sk receiver secret key
 * @return decrypted message
 * @throws GeneralSecurityException 
 */
public static byte[] crypto_box_seal_open( byte[]c, byte[] pk, byte[]sk ) throws GeneralSecurityException{
    if ( c.length < crypto_box_SEALBYTES) throw new IllegalArgumentException(""Ciphertext too short"");

    byte[] pksender = Arrays.copyOfRange(c, 0, crypto_box_PUBLICKEYBYTES);
    byte[] ciphertextwithmac = Arrays.copyOfRange(c, crypto_box_PUBLICKEYBYTES , c.length);
    byte[] nonce = crypto_box_seal_nonce(pksender,pk);

    TweetNaclFast.Box box = new TweetNaclFast.Box(pksender, sk);
    byte[] cleartext = box.open(ciphertextwithmac, nonce);
    if (cleartext == null) throw new GeneralSecurityException(""could not open box"");
    return cleartext;
}


/**
 *  hash the combination of senderpk + mypk into nonce using blake2b hash
 * @param senderpk the senders public key
 * @param mypk my own public key
 * @return the nonce computed using Blake2b generic hash
 */
public static byte[] crypto_box_seal_nonce(byte[] senderpk, byte[] mypk){
// C source ported from libsodium
//      crypto_generichash_state st;
//
//      crypto_generichash_init(&st, NULL, 0U, crypto_box_NONCEBYTES);
//      crypto_generichash_update(&st, pk1, crypto_box_PUBLICKEYBYTES);
//      crypto_generichash_update(&st, pk2, crypto_box_PUBLICKEYBYTES);
//      crypto_generichash_final(&st, nonce, crypto_box_NONCEBYTES);
//
//      return 0;
    final Blake2b blake2b = Blake2b.Digest.newInstance( crypto_box_NONCEBYTES ); 
    blake2b.update(senderpk);
    blake2b.update(mypk);
    byte[] nonce = blake2b.digest();
    if (nonce == null || nonce.length!=crypto_box_NONCEBYTES) throw new IllegalArgumentException(""Blake2b hashing failed"");
    return nonce;


}

}

","584","<java><encryption><public-key-encryption><elliptic-curve><libsodium>","1","3","1","2017-02-25 13:50:53","42456750","0","","1816580","","2017-02-25 13:50:53","2017-02-25 13:23:35",""
"28953344","Javacard KeyAgreement differs from BouncyCastle KeyAgreement","My problem looks like this. I have generated keys on the card and the terminal sides. I have on the terminal side the card public and private keys and the terminals public and private keys, and the same on the card side (i'm doing tests so thats why i have all of them on the terminal and on the card). When i generate KeyAgreement (terminal side) for the card as private and for the terminal as private the secters are the same, so the generation is OK and i get a 24 bytes (192 bit) secret. When i generate the the secrets on the card (2 cases like on the terminal) the secrets are also the same, but they ale shorter - 20 bytes (160 bit). Here are the generation codes. the terminal:
ECPublicKey publicKey;
ECPrivateKey privateKey;

...
KeyAgreement aKeyAgree = KeyAgreement.getInstance(""ECDH"", ""BC"");
aKeyAgree.init(privateKey);
aKeyAgree.doPhase(publicKey, true);
byte[] aSecret = aKeyAgree.generateSecret();

and the card side:
eyAgreement = KeyAgreement.getInstance(KeyAgreement.ALG_EC_SVDP_DH, false);
short length = terminalEcPublicKey.getW(array, (short) 0);

keyAgreement.init(cardEcPrivateKey);
short secretlength = keyAgreement.generateSecret(array, (short)0, length, buffer, (short)0);

","There is a problem in your implementation of KeyAgreement.ALG_EC_SVDP_DH in the terminal side. The correct length of output of the this method of key agreement should always be 20 bytes since SHA-1 is being performed on the derived output.
So in your terminal side, you should perform SHA-1 after generating the secret data.
","580","<bouncycastle><javacard><elliptic-curve><diffie-hellman>","2","5","1","2015-03-10 00:33:50","28954235","0","","","","","2015-03-09 23:02:55",""
"12924059","Extracting a part of OpenSSL into one single, preprocessed source file","I'm currently researching the possibility of speeding up ECDSA signature verification via OpenCL in Bitcoin.
For this task I will first of all need both a bignum implementation in C (since OpenCL code is a subset of C), and an implementation of elliptic curve math, also in C. OpenSSL has very well-tested implementations of both these libraries, so my plan is to extract these two components from the ""crypto""-part of OpenSSL, and see if I can adapt the resulting C code to OpenCL-compatible code (by replacing all dynamic memory allocation with static allocation, for one thing).
My current knowledge on the subject suggests there are no readily available tools for accomplishing this. I have looked at other SO questions, and one of them suggested writing a Python script which will extract a function and all of its dependencies. To get started with this it would be useful to have one single, preprocessed file containing all the source code used by the crypto-part of OpenSSL. Is there an easy way to do this?
When, or if, this is accomplished, I will have to write a script that can extract a function from a source file given its name. I figure the script should then recursively call itself for any new, unknown function that it sees in the function it's trying to extract, and extract this as well, repeating this process recursively in the child functions it visits. Does this seem like a sensible approach?
Thanks :)
","","579","<openssl><opencl><bignum><elliptic-curve>","0","","0","2014-08-04 03:52:42","","3","","","","","2012-10-16 21:55:01",""
"43124595","Generate a random point on an elliptical curve","I'm writing a program which randomly chooses two integers within a certain interval. I also wrote a class (which I didn't add below) which uses two numbers 'a' and 'b' and creates an elliptical curve of the form:
y^2 = x^3 + ax + b
I've written the following to create the two random numbers.
def numbers():
n = 1
while n>0:
    a = random.randint(-100,100)
    b = random.randint(-100,100)
    if -16 * (4 * a ** 3 + 27 * b ** 2) != 0:
        result = [a,b]
        return result
    n = n+1

Now I would like to generate a random point on this elliptical curve. How do I do that?
","The curve has an infinite length, as for every y ϵ ℝ there is at least one x ϵ ℝ so that (x, y) is on the curve. So if we speak of a random point on the curve we cannot hope to have a homogeneous distribution of the random point over the whole curve. 
But if that is not important, you could take a random value for y within some range, and then calculate the roots of the following function:
    f(x) = x3 + ax + b - y2
This will result in three roots, of which possibly two are complex (not real numbers). You can take a random real root from that. This will be the x coordinate for the random point.
With the help of numpy, getting the roots is easy, so this is the function for getting a random point on the curve, given values for a and b:
def randomPoint(a, b):
    y = random.randint(-100,100)
    # Get roots of:  f(x) = x^3 + ax + b - y^2
    roots = numpy.roots([1, 0, a, b - y**2])
    # 3 roots are returned, but ignore potential complex roots
    # At least one will be real
    roots = [val.real for val in roots if val.imag == 0]
    # Choose a random root among those real root(s)
    x = random.choice(roots)
    return [x, y]

See it run on repl.it.
","577","<python-3.x><differential-equations><elliptic-curve>","0","1","1","2017-03-30 18:35:37","43125833","0","","","","","2017-03-30 17:27:19",""
"28795706","ed25519 ECDH encryption possible and safe?","As far as I can see everybody use curve25519 for public/private encryption (ECDH) and ed25519 for signing (ECDSA). This creates double size of keys or some special conversion tricks that may not be safe: 
https://github.com/dchest/ed2curve-js
Is it not possible to use curve ed25519 for both ECDH and ECDSA and have half the key size?
Is it not possible to use curve ed25519 for only ECDH?
I admit that I have a very limited understanding of ECC so the reason above may be because of security considerations but it is not easy to find any hint about this on the web!
NB: I understand that curve25519 can not be used for signing!
Benny
","I don't think you'll find anything better than the paper linked at Using same keypair for Diffie-Hellman and signing.
I suspect that this key reuse is fine as long as you're comfortable with assumption that SHA-512 (used in Ed25519 signing) and HSalsa (used as KDF with NaCl's Curve25519 based boxes) are independent hash functions (I do). But it'd be probably cleaner to use the same hash function with different prefixes.
I heard that Bernstein, Lange and Schwabe (authors of NaCl) are working on a paper about these issues, but who knows when it'll be published.
","574","<javascript><encryption><public-key-encryption><encryption-asymmetric><elliptic-curve>","0","-1","1","2015-03-01 16:37:15","","1","","","","","2015-03-01 16:05:26",""
"27088652","Inversion and point subtraction on Elliptic Curve","I'm trying to implement an authentication protocol based on elliptic curve over prime field in Matlab. I have already done the point addition and point multiplication successfully, but I'm facing a problem while computing the following steps:
(Capital letters are points on the curve, small letters are integer scalars)
((y^-1)T4-T2)(rs^-1) = x1P

((y^-1)T5-x1T3)(rs^-1) = X2

Should I compute
y^-1
as
ModInverse(y , prime)? % the multiplicative inverse of y mod prime

Also, is that how I'm supposed to do the subtraction?
nT2 = T2;
nT2{2} = mod(-nT2{2}, prime);

(Negate the y-coordinate of a point) mod prime, and then do the addition on nT2 and another point
","I can help you in finding negative co-ordinate of y. I am explaining with a toy example:
sum = [673  146]
% Now to convert 2nd element of sum which is the y coordinate, do the following.
sum(1,2) = -sum(1,2) % this will negate the 2nd element of 1st row of sum and store the result into sum.
% now to perform subtraction, do the following. Assume that your addend is N1 = [ 6,5] and augend is the sum, therefore, the difference of these two is...
difference = addell(N1,sum,a,b,p)
% where a,b and p are parameters of the ECC.
%Thaat is a and b are constants and p is the prime modulus of the ECC. For example of an ECC is y^2=x^3+a*x +b mod p
Hope this will suffice your 2nd question.
","568","<matlab><subtraction><elliptic-curve><inversion>","0","0","1","2015-12-25 23:22:46","","0","","218152","","2015-12-25 23:22:46","2014-11-23 11:54:32",""
"23165599","Point division Elliptic Curve in Java","Suppose I have G(x,y) = k.P(x,y). I know G(x,y) and P(x,y).
How do I calculate k?
","If G(x,y) and P(x,y)are on a secure elliptic curve for ECC, the problem of solving k is called ""elliptic curve discrete logarithm problem"", or ECDLP. It is infeasible to find k on a secure elliptic curve.  
If you're not on such curve, enumerating all possible k and see if G=kP is a reasonable approach.
","567","<elliptic-curve>","0","1","1","2014-04-29 05:57:28","23356621","0","0","","","","2014-04-19 03:53:42",""
"7945850","Can you do basic EC operations in Java 7 without a third-party library?","Java 7 comes with SunEC, which provides ECDH and ECDSA operations.  I was attempting to do basic EC operations (point addition, scalar multiplication).
I start with
ECParameterSpec p256 = NamedCurve.getECParameterSpec(""secp256r1"");
ECPoint generator = p256.getGenerator();
BigInteger scalar = new BigInteger(""23""); 

But from there, I do not see the next step.  There is no ECPoint.scalarMultiply() or ECPoint.add() or EllipticCurve.multiply().
Am I missing something, or is the answer just ""you can't do it without a third-party library?""
","You can't do it directly without a third-party library. I think the situation with elliptic curves in the JCE is basically analogous to that of RSA. The classes represents instances of various keys and encodings. You can go between encodings and key specs using KeyFactory, you can generate public and private keys using a KeyPairGenerator, etc. But just like there is no RSAPublicKey.exponentiate() there is also no ECPoint.add(). These things happen under the hood in the Signature, KeyAgreement, and Cipher classes.
","562","<java><elliptic-curve>","4","2","1","2011-11-02 23:58:56","7988830","0","","","","","2011-10-30 15:32:52",""
"45462526","How to make apt-get use gpg > 2.1 ? in ubuntu 16.4","I am trying to use apt-get on a source that is signed with a GPG ECC (NIST P-256) key which requires gpg version > 2.1 
how can i make apt-get use gpg2 instead of gpg? (aliasing does not work) 
root@fa2e16b8fbc3:/£ gpg --version
gpg (GnuPG) 1.4.20


root@fa2e16b8fbc3:/£ uname -a
Linux fa2e16b8fbc3 4.4.66-boot2docker £1 SMP Fri May 5 20:44:25 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux


root@fa2e16b8fbc3:/£ cat /proc/version
Linux version 4.4.66-boot2docker (root@607924cbbc93) (gcc version 4.9.2 (Debian 4.9.2-10) ) £1 SMP Fri May 5 20:44:25 UTC 2017


root@fa2e16b8fbc3:/£ cat /etc/issue
Ubuntu 16.04.3 LTS \n \l

root@fa2e16b8fbc3:/£ apt-get install  gnupg
Reading package lists... Done
Building dependency tree       
Reading state information... Done
gnupg is already the newest version (1.4.20-1ubuntu3.1).
0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.


root@fa2e16b8fbc3:/£ gpg2 --version
gpg (GnuPG) 2.1.11

","","562","<ubuntu><gnupg><elliptic-curve>","5","","0","2017-08-02 13:39:05","","0","2","","","","2017-08-02 13:39:05",""
"6691305","Elliptic curve cryptography for ActionScript","Does anyone know if there is a (preferably efficient :-) ) implementation of elliptic curve cryptography for ActionScript?
The only library I know of is as3crypto, which offers great implementations for symmetric cryptography, hashing and several other cryptography-related operations, but it has only RSA for public key cryptography.
Thanks in advance,
Jan
","AFAIK there is no other competent cryptographic library. For a project I made a quick port of as3crypto over to Haxe so it could use Alchemy memory, and in some test cases it was around 20x faster. It was just a quick port tho.
I created a few months ago this feature request:
http://bugs.adobe.com/jira/browse/FP-6440
However it doesn't seem to have caught any attention even if I think it's something vital.
","560","<flash><apache-flex><actionscript><encryption><elliptic-curve>","3","1","2","2019-03-10 14:11:28","","0","","","","","2011-07-14 09:48:48",""
"6691305","Elliptic curve cryptography for ActionScript","Does anyone know if there is a (preferably efficient :-) ) implementation of elliptic curve cryptography for ActionScript?
The only library I know of is as3crypto, which offers great implementations for symmetric cryptography, hashing and several other cryptography-related operations, but it has only RSA for public key cryptography.
Thanks in advance,
Jan
","Here is a library that implements a lot of cryptographic algorithms including the Elliptic Curve Diffie-Hellman (ECDH) algorithm: http://code.google.com/p/flame. All algorithms are compatible with .NET Framework and have nearly the same API as .NET ones.
","560","<flash><apache-flex><actionscript><encryption><elliptic-curve>","3","1","2","2019-03-10 14:11:28","","0","","","","","2011-07-14 09:48:48",""
"20617521","Need explanation of Elliptic Curve Key Pair Generation code","I am trying to implement an ECC curve basec program and I saw this code on their official page
import org.bouncycastle.math.ec.ECCurve;
import org.bouncycastle.jce.spec.ECParameterSpec;
...
ECCurve curve = new ECCurve.Fp(
    new BigInteger(""883423532389192164791648750360308885314476597252960362792450860609699839""), // q
    new BigInteger(""7fffffffffffffffffffffff7fffffffffff8000000000007ffffffffffc"", 16), // a
    new BigInteger(""6b016c3bdcf18941d0d654921475ca71a9db2fb27d1d37796185c2942c0a"", 16)); // b

ECParameterSpec ecSpec = new ECParameterSpec(
    curve,
    curve.decodePoint(Hex.decode(""020ffa963cdca8816ccc33b8642bedf905c3d358573d3f27fbbd3b3cb9aaaf"")), // G
    new BigInteger(""883423532389192164791648750360308884807550341691627752275345424702807307"")); // n

KeyPairGenerator g = KeyPairGenerator.getInstance(""ECDSA"", ""BC"");

Now, I need to specify my own parameters. I have a, b and q (value of field) and also a generator point (x,y). Now this code has a single value G, not in (x,y) - how do they get this value? Also how can find the value of n which has been used here in this code?
Precisely I need to know that given values of a, b, q and a (x,y) point, how can the values of G and n have been generated?
","","558","<java><bouncycastle><elliptic-curve>","4","","0","2013-12-16 20:08:04","","5","","168775","","2013-12-16 20:08:04","2013-12-16 17:55:44","2014-01-28 15:06:20"
"13495766","Moving multiple sprites in elliptical path with uniform speed","I'm trying to move multiple sprites (images) in an elliptical path such that distance (arc distance) remains uniform. 
I have tried

Move each sprite angle by angle, however the problem with this is that distance moved while moving unit angle around major axis is different than that while moving unit angle around minor axis - hence different distance moved.
Move sprites with just changing x-axis uniformly, however it again moves more around major axis. 

So any ideas how to move sprites uniformly without them catching-up/overlapping each other?
Other info:

it will be called in onMouseMove/onTouchMoved so i guess it shouldn't
be much CPU intensive. 
Although its a general algorithm question but
if it helps I'm using cocos2d-x

","So this is what i ended up doing (which solved it for me):
I moved it in equation of circle and increased angle by 1 degree. Calculated x and y using sin/cos(angle) * radius. And to make it into an ellipse I multiplied it by a factor.
Factor was yIntercept/xIntercept.
so it looked like this in end
FACTOR = Y_INTERCEPT / X_INTERCEPT;

//calculate previous angle
angle = atan((prev_y/FACTOR)/prev_x);

//increase angle by 1 degree (make sure its not radians in your case)
angle++;

//new x and y
x =  cos(newangle) * X_INTERCEPT;
y =  sin(newangle) * X_INTERCEPT * FACTOR;

","530","<ellipse><elliptic-curve>","3","1","1","2012-12-02 13:28:26","13669712","0","","","","","2012-11-21 14:46:47",""
"40810224","plotting Elliptic curve in matlab","I did wrote this code to plot elliptic curve on Matlab but I wonder if it is really what it should be :
function y=plotCurve(x,p)
for i=1:length(x)
    if(gcd(x(i),p)~=1)
        x(i)=inf;
    end
end
x(find(x==inf))=[];
y = x.^3+5.*x.^2+x;
y=mod(y,p);
k=sqrt(x.^3+10.*x.^2+x);
plot(x,k);
hold on
plot(x,-k);
xlim([min(x) max(x)]);
end

I tried to follow exactly classroom steps : 
1) Check if x is in $Z_p$
2) Calculate $y^2$ (which in my example is y)
I do use this code in range of -10:10 with no float number between.
","","518","<matlab><elliptic-curve>","1","","0","2016-11-25 17:46:49","","0","","","","","2016-11-25 17:46:49",""
"37562264","How does Elliptic Curve Diffie Hellman work on JavaCard, in combination with Java?","I'm trying to get Elliptic Curve Diffie Hellman to work on a JavaCard (version 2.2.1).
On the JavaCard, I have the following code right now:
byte temp[] = new byte[100];
byte secret[] = new byte[100];
byte size = buf[ISO7816.OFFSET_LC];

Util.arrayCopy(buf, ISO7816.OFFSET_CDATA, temp, (byte) 0, size);

// the public key is in temp
short len = dh.generateSecret(temp, (byte) 0, size, secret, (byte) 0);

Util.arrayCopy(temp, (byte) 0, buf, ISO7816.OFFSET_CDATA, size);
//Util.arrayCopy(secret, (byte) 0, buf, ISO7816.OFFSET_CDATA, len);
apdu.setOutgoingAndSend(ISO7816.OFFSET_CDATA, size);

And I initialize dh as follows:
keyPair = new KeyPair(KeyPair.ALG_EC_FP, KeyBuilder.LENGTH_EC_F2M_163);
keyPair.genKeyPair();
dh = KeyAgreement.getInstance(KeyAgreement.ALG_EC_SVDP_DH, false);
dh.init(keyPair.getPrivate());

All of this seems to work, except for the dh.generateSecret call, where the applet simply seems to crash. If I leave the call out, and return other data, that works nicely. In which I import the data that is sent by the terminal. In the terminal, I have the following:
// generate an ecdh keypair
KeyPairGenerator keyGen = KeyPairGenerator.getInstance(""EC"");
keyGen.initialize(163);
KeyPair keyPair = keyGen.generateKeyPair();

// initialize DH
KeyAgreement dh = KeyAgreement.getInstance(""ECDH"");
dh.init(keyPair.getPrivate());

//byte encKey[] = keyPair.getPublic().getEncoded();

// X9.62 encoding, no compression
int qLength = (163+7)/8;
byte[] xArr = ((ECPublicKey) keyPair.getPublic()).getW().getAffineX().toByteArray();
byte[] yArr = ((ECPublicKey) keyPair.getPublic()).getW().getAffineY().toByteArray();
byte[] enc2 = new byte[1+2*qLength];
enc2[0] = (byte) 0x04;
System.arraycopy(xArr, 0, enc2, qLength - xArr.length, xArr.length);
System.arraycopy(yArr, 0, enc2, 2* qLength - yArr.length, yArr.length);

byte res[] =send((byte) 0x00, enc2).getData();

I have tried several things. Right now, the code that sends the public key tries to encode it in X9.62 encoding (uncompressed) as specified by the JavaCard docs. However, I've also tried the default encode method, which gives exactly the same result.
I don't seem to be able to get any error out of the JavaCard about what is going wrong. Does anyone know what is going wrong? Or does anyone have a working example on how to do a key-exchange on a JavaCard?
","As vojta already indicated:
keyPair = new KeyPair(KeyPair.ALG_EC_FP, KeyBuilder.LENGTH_EC_F2M_163);

just tries to generate a key pair, and it probably works up to a point. But an Fp curve is different from a F2m curve, and to my knowledge there are no 163 bit Fp curves (to my knowledge anyway).
This means that you never actually installed the domain parameters, unless you generated your own, and I would call that unlikely.
Use a Fp curve with a known key length and set the parameters, at least for the public key (for JCOP cards you may have to set them for the private key as well). You'd normally use a 224 bit key size or higher to be secure.
","518","<java><javacard><elliptic-curve><diffie-hellman>","4","0","1","2016-08-20 22:28:02","","2","1","","","","2016-06-01 07:35:51",""
"43965667","How to get Qx and Qy form DER Encoded EC_POINT","I created a brainpool EC on a nitro key hsm and want to use this for crypto operations with the .NET Framework e.g. System.Security.Cryptography.ECDiffieHellman.
I extracted with pkcs11-tool --list-objects the public key but get only one value, the EC_POINT.   
So, how to I get the coordinate of this point?
DER Encoded EC_POINT
Public Key Object; EC  EC_POINT 320 bits
  EC_POINT:   0451040defed7988b095679e5aca422382d949c2e7fd937646def25cf7eb5140d41f12d077ac615773952da53efad266c8642c6877b8b215d091ba687acafd3c33f35ffb5ca6aadaf248ef1a126cd55e0d0598
  EC_PARAMS:  06092b2403030208010109
  label:      Brainpool #1
  ID:         10
  Usage:      verify

Decoded EC_POINT
This EC_POINT is DER encoded, I used this to extract the true value of the EC_POINT. 
040defed7988b095679e5aca422382d949c2e7fd937646def25cf7
eb5140d41f12d077ac615773952da53efad266c8642c6877b8b215
d091ba687acafd3c33f35ffb5ca6aadaf248ef1a126cd55e0d0598

(Or this JS Script https://lapo.it/asn1js/#0451040DEFED7988B095679E5ACA422382D949C2E7FD937646DEF25CF7EB5140D41F12D077AC615773952DA53EFAD266C8642C6877B8B215D091BA687ACAFD3C33F35FFB5CA6AADAF248EF1A126CD55E0D0598)
","040defed7988b095679e5aca422382d949c2e7fd937646def25cf7
eb5140d41f12d077ac615773952da53efad266c8642c6877b8b215
d091ba687acafd3c33f35ffb5ca6aadaf248ef1a126cd55e0d0598

Is your public key.  The first byte indicates that it is an uncompressed key (04), which means that of the remaining bytes, the first half are the X coordinate and the second half are the Y coordinate.
Qx = 0defed7988b095679e5aca422382d949c2e7fd937646def25cf7eb5140d41f12d077ac615773952d
Qy = a53efad266c8642c6877b8b215d091ba687acafd3c33f35ffb5ca6aadaf248ef1a126cd55e0d0598
http://www.secg.org/sec1-v2.pdf, section 2.3.4 (Octet-String-to-Elliptic-Curve-Point Conversion).
(And since the parameters (06092b2403030208010109) is the DER-oid 1.3.36.3.3.2.8.1.1.9 (brainpoolP320r1) everything looks correct, since Qx/Qy are 320-bit values)
","514","<pkcs#11><elliptic-curve><der><pkcs#15><nitrokey>","0","4","1","2017-05-15 15:06:04","43982866","2","0","","","","2017-05-14 15:26:40",""
"4080889","Delphi LogN and Power - SuperEllipse functions - algorithm","How can I isolate the 'slope' parameter in the super ellipse function given by:
MyY := (1.0- (power(1.0-power(x, 2.0/Slope), Slope*0.5)))
when I know 'x' and 'MyY' ?
(the function is always used in the range of 0 to 1).
","No easy way. This equation cannot be solved algebraically. You need to use numerical methods to find the solution (e.g. Newton's method).
","512","<delphi><math><elliptic-curve>","1","1","2","2010-11-04 16:28:03","","1","","309425","","2010-11-02 19:39:45","2010-11-02 18:25:46",""
"4080889","Delphi LogN and Power - SuperEllipse functions - algorithm","How can I isolate the 'slope' parameter in the super ellipse function given by:
MyY := (1.0- (power(1.0-power(x, 2.0/Slope), Slope*0.5)))
when I know 'x' and 'MyY' ?
(the function is always used in the range of 0 to 1).
","I don't need to solve it, to be more precise when i call the function 'MyY :=...', 'x' and 'Slope' are known.
I just need to express it in function of Slope. Instead of MyY := ... I need Slope := ... and I know 'x' and 'MyY'. I just need to express the transfert function in another way, the problem is when using logN I get someting like: (x is always 0.5 , y varies but is know) 
Slope/2 = LogN(power(1.0-power(0.5, 2.0/Slope)) (whatever the '1 -', this is not what's stucking me)
from this I cannot move or clear '2.0/slope' from the right part of the equation.
On the software way it's used to keep a correlation between a control point and the cursor mouse.
It's just like this: (by analogy)
 MyY := power(x,slope)  // MyY := (1.0- (power(1.0-power(x, 2.0/Slope), Slope*0.5))) 
slope := Logn(x,MyY)    // slope := ?
I just need to express it in another way.
","512","<delphi><math><elliptic-curve>","1","0","2","2010-11-04 16:28:03","","1","","309425","","2010-11-02 19:39:45","2010-11-02 18:25:46",""
"50002149","Why P-521 public key X,Y some time is 65 bytes some time is 66 bytes","I use golang generate the P-521 public key.
source code look like that:
curve:=elliptic.P521()
priv, x, y, err := elliptic.GenerateKey(curve, rand.Reader)
xBytes:=x.Bytes()
yBytes:=y.bytes()
//len(xBytes)  some time is 65 bytes ,some time is 66 bytes 

Why P-521 public key X,Y  not like P-256 or P-384 that have a fixed public key  length?
","secp521r1 uses a 521-bit prime field.  So the X or Y coordinates are represented as 521-bit numbers.  Yes, 521, not 512.
521 bits is 65 full bytes and one bit left over.  In a fixed-size encoding of the public key the most significant byte would always have the 7 most significant bits set to 0, and the 8th bit will be 1 or 0 (so the whole byte is 0x00 or 0x01).
Since the coordinate space isn't quite all of the 521-bit numbers, you have a slightly less than 50% chance of the high bit being set for any particular point.
Go's method seems to be returning the value using a minimum-byte representation.  So you should see something like

66 bytes: 49% of the time
65 bytes: 50% of the time
64 bytes (top 9 bits are all 0): 0.2%
(63 bytes and below are possible, but with vanishingly small percentages)

","508","<security><go><elliptic-curve><ecdh>","-3","4","1","2018-04-24 16:58:15","50007190","1","","","","","2018-04-24 12:50:34","2018-04-24 18:10:36"
"37513042","Generating Point Elliptic Curve","I'm studying Elliptic Cruve, and i'm learning OpenSSL for a quick implementation in C. Now i want to understand how can i generate a random number and multiply it with the Generator Point. Formally: An user generates a random number r_U \in [1,\dots, n - 1] and computes R_U= r_U \times G. (""I can't insert image because I have reputation less then 10"").
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <openssl/bn.h>
#include <openssl/ec.h>
#include <openssl/obj_mac.h>

int main() {

    const EC_GROUP *curve;

    BIGNUM *r_U=BN_new();

    BIGNUM *n=BN_new();//Order Curve

    EC_KEY *key=NULL;

    const BIGNUM *c=BN_new(); //Private Key CA

    const EC_POINT *C; //Public Key CA

    EC_POINT *R_U; //R_U point

    BN_CTX *ctx;

    const EC_POINT *G; //Generator

    curve = EC_GROUP_new_by_curve_name(NID_secp224r1);

    G=EC_GROUP_get0_generator(curve);

    EC_GROUP_get_order(curve,n,ctx);

    //Private Key and Public Key CA
    key = EC_KEY_new_by_curve_name(NID_secp224r1);
    EC_KEY_generate_key(key);

    key_user = EC_KEY_new_by_curve_name(NID_secp224r1);
    EC_KEY_generate_key(key_user);

    c=EC_KEY_get0_private_key(key);        

    printf(""\nPrivate Key CA:%s"",BN_bn2dec(c));


    return 0;
}

Now How can i generate a random number between 1 and n-1 and multiply it for G ? Can I use the function EC_POINT_mul ?
Thanks for support.
","","497","<c><openssl><elliptic-curve>","1","","0","2016-05-29 17:49:44","","2","","","","","2016-05-29 17:49:44",""
"51961749","Java - Create XML Digital Signature using ECDSA (Elliptic Curve)","We can create XML Digital Signature using RSA keys. But how do I use elliptic curve keys to sign xml files ? I get error messages such as -
Exception in thread ""main"" java.security.KeyException: ECKeyValue not supported
    at org.jcp.xml.dsig.internal.dom.DOMKeyValue$EC.<init>(DOMKeyValue.java:350)
    at org.jcp.xml.dsig.internal.dom.DOMKeyInfoFactory.newKeyValue(DOMKeyInfoFactory.java:71)
    at csr.ExtractEC.main(XMLSignatureECTest.java:57)
Caused by: java.lang.ClassNotFoundException: sun/security/ec/ECParameters
    at java.lang.Class.forName0(Native Method)
    at java.lang.Class.forName(Class.java:264)
    at org.jcp.xml.dsig.internal.dom.DOMKeyValue$EC.getMethods(DOMKeyValue.java:367)
    at org.jcp.xml.dsig.internal.dom.DOMKeyValue$EC$1.run(DOMKeyValue.java:343)
    at org.jcp.xml.dsig.internal.dom.DOMKeyValue$EC$1.run(DOMKeyValue.java:339)
    at java.security.AccessController.doPrivileged(Native Method)
    at org.jcp.xml.dsig.internal.dom.DOMKeyValue$EC.<init>(DOMKeyValue.java:338)
    ... 2 more

I used below code to create SignatureMethod and KeyInfo -
String url = ""http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha256"";
        SignatureMethod signatureMethod = factory.newSignatureMethod(url, null);
        SignedInfo signedInfo = factory.newSignedInfo(c14n, signatureMethod, Collections.singletonList(reference));

        PrivateKey privateKey = Utils.generatePrivateEC(""e:\\certs\\ec\\ec.key.p8"");
        Certificate certificate = Utils.generatePublic(""e:\\certs\\ec\\ec.cer"");
        KeyInfoFactory keyInfoFactory = factory.getKeyInfoFactory();
        KeyValue keyValue = keyInfoFactory.newKeyValue(certificate.getPublicKey());
        KeyInfo keyInfo = keyInfoFactory.newKeyInfo(Collections.singletonList(keyValue));

JDK - Oracle JDK 8
Security Providers - BouncyCastle and Sun.
","It seems in this junit test someone is make an example for you.
","494","<java><digital-signature><elliptic-curve><ecdsa><xml-dsig>","7","1","1","2018-09-01 07:12:46","52125821","8","","2531191","","2018-08-22 07:47:12","2018-08-22 07:26:15",""
"22410765","How to Format OpenSSL Keys to Match Online Sample (JSBN-ECC)","I want to be able to format the public key of Elliptic Curve Diffie-Hellman in OpenSSL - Ruby into something like this online example (link), as I have been using that JS library.
My code below generates an OpenSSL::PKey::EC public and private keys
#Ruby
ec = OpenSSL::PKey::EC.new('secp128r1')
ec.generate_key

ec.private_key
#--> 205607153615223513963863936713567041725

ec.public_key.to_bn
#--> 499599043529551953518354858381998373780459818901085313561109939106744612770290

Try copying the private key above 205607153615223513963863936713567041725 and pasting it on the online (link) as Alices' Private value. But click the secp1284r1 button first to have same curve parameters, and then click Compute Public button.
That will generate a public key from the inputted private key. However, the Ruby OpenSSL documentation isn't really helpful, and I am stuck on figuring out how to convert the generated public key above:
499599043529551953518354858381998373780459818901085313561109939106744612770290

Into something like this (as seen from the online site):
x: 107060165679262225845922473865530329196
y: 109296969851421346147544217212275741170

I've assumed that by properly converting one, it can somehow become equal to the other since they have same curve parameters. Or am I wrong? (And also because the default format of point_conversion_form is :uncompressed, as I just have tested) Please help.
P.S. You might wonder why I need to convert the public key into the other. No, I don't really have to. I just want to learn how to convert it as I'll be using that method to convert something similar. And this is the simplified question for your testing-convenience.
","ec.public_key.to_bn
#--> 499599043529551953518354858381998373780459818901085313561109939106744612770290

It would probably be better to print that in hex.
The public key is a point on the curve. That is, its an (x,y) coordinate. So that value probably needs to be split (hence the reason for printing in hex). Taking a guess:
x = 499599043529551953518354858381998373780
y = 459818901085313561109939106744612770290

The public key is a point because its derived from the base point G, which is also a point. G is sometimes expanded as (g_x, g_y). The private exponent is a (or b), which is a scalar or integer. So the public key is A=G^a or A=(g_x, g_y)^a, which is a point.


And also because the default format of point_conversion_form is :uncompressed, as I just have tested

Point conversion/compression is just a presentation layer optimization trick. It omits the y portion of the coordinate because you can solve for it given x. Because its a curve, sometimes you need to send +1 or -1 to specify the quadrant the y coordinate lies in. But again, its just an optimization and only matters for interop'ing. After you read the point into a library, both x and y are available.


You might wonder why I need to convert the public key into the other...

Nope :)
But one thing you might want to be aware of is OpenSSL's ""named curve"" flag. If you want to load an EC key into an OpenSSL based server, you will want to ensure the private key and resulting certificate have the OPENSSL_EC_NAMED_CURVE flag. Otherwise, you'll get bizarre errors like ""no shared ciphers"" when trying to connect to the server. See ECDH and Named Curves on the OpenSSL wiki for details.
","489","<javascript><ruby><openssl><elliptic-curve><diffie-hellman>","2","0","3","2015-01-04 04:48:09","22436799","0","","3073313","","2014-03-14 16:41:18","2014-03-14 16:31:17",""
"22410765","How to Format OpenSSL Keys to Match Online Sample (JSBN-ECC)","I want to be able to format the public key of Elliptic Curve Diffie-Hellman in OpenSSL - Ruby into something like this online example (link), as I have been using that JS library.
My code below generates an OpenSSL::PKey::EC public and private keys
#Ruby
ec = OpenSSL::PKey::EC.new('secp128r1')
ec.generate_key

ec.private_key
#--> 205607153615223513963863936713567041725

ec.public_key.to_bn
#--> 499599043529551953518354858381998373780459818901085313561109939106744612770290

Try copying the private key above 205607153615223513963863936713567041725 and pasting it on the online (link) as Alices' Private value. But click the secp1284r1 button first to have same curve parameters, and then click Compute Public button.
That will generate a public key from the inputted private key. However, the Ruby OpenSSL documentation isn't really helpful, and I am stuck on figuring out how to convert the generated public key above:
499599043529551953518354858381998373780459818901085313561109939106744612770290

Into something like this (as seen from the online site):
x: 107060165679262225845922473865530329196
y: 109296969851421346147544217212275741170

I've assumed that by properly converting one, it can somehow become equal to the other since they have same curve parameters. Or am I wrong? (And also because the default format of point_conversion_form is :uncompressed, as I just have tested) Please help.
P.S. You might wonder why I need to convert the public key into the other. No, I don't really have to. I just want to learn how to convert it as I'll be using that method to convert something similar. And this is the simplified question for your testing-convenience.
","Finally! I somehow managed to convert it properly but it's somehow weird.
#From above code
c.public_key.to_bn
#--> 499599043529551953518354858381998373780459818901085313561109939106744612770290

#irb:
require 'openssl'

key_int = '499599043529551953518354858381998373780459818901085313561109939106744612770290'
key_bn = OpenSSL::BN.new(key_int, 10) #Convert to OpenSSL::BN (Big Number, with 10=Decimal as base)
key_hex = key_bn.to_s(16) #Convert to Hex String (16=Hexadecimal)
#--> ""04508B09B35FA8C21820BE19C16B38486C5239D4A932D081DD56B90F91120551F2""

#I don't really know why, but removing '04' above will finally convert it properly
key_hex = key_hex[2..-1] #Remove first 2 chars: '04'
#--> ""508B09B35FA8C21820BE19C16B38486C5239D4A932D081DD56B90F91120551F2""

#Split key_hex into halves
key_hexarr = key_hex.chars.each_slice( (key_hex.length/2.0).round ).map(&:join)
#--> [""508B09B35FA8C21820BE19C16B38486C"", ""5239D4A932D081DD56B90F91120551F2""]

#Convert first value into BN (input: 16=hexadecimal), then convert to string(output: 10=decimal)
key_x_int = OpenSSL::BN.new(key_hexarr[0], 16).to_s(10)
#--> ""107060165679262225845922473865530329196""

#Convert second value into BN (input: 16=hexadecimal), then convert to string(output: 10=decimal)
key_y_int = OpenSSL::BN.new(key_hexarr[1], 16).to_s(10)
#--> ""109296969851421346147544217212275741170""

Finally, key_x_int and key_y_int now matches the result from the online link
","489","<javascript><ruby><openssl><elliptic-curve><diffie-hellman>","2","0","3","2015-01-04 04:48:09","22436799","0","","3073313","","2014-03-14 16:41:18","2014-03-14 16:31:17",""
"22410765","How to Format OpenSSL Keys to Match Online Sample (JSBN-ECC)","I want to be able to format the public key of Elliptic Curve Diffie-Hellman in OpenSSL - Ruby into something like this online example (link), as I have been using that JS library.
My code below generates an OpenSSL::PKey::EC public and private keys
#Ruby
ec = OpenSSL::PKey::EC.new('secp128r1')
ec.generate_key

ec.private_key
#--> 205607153615223513963863936713567041725

ec.public_key.to_bn
#--> 499599043529551953518354858381998373780459818901085313561109939106744612770290

Try copying the private key above 205607153615223513963863936713567041725 and pasting it on the online (link) as Alices' Private value. But click the secp1284r1 button first to have same curve parameters, and then click Compute Public button.
That will generate a public key from the inputted private key. However, the Ruby OpenSSL documentation isn't really helpful, and I am stuck on figuring out how to convert the generated public key above:
499599043529551953518354858381998373780459818901085313561109939106744612770290

Into something like this (as seen from the online site):
x: 107060165679262225845922473865530329196
y: 109296969851421346147544217212275741170

I've assumed that by properly converting one, it can somehow become equal to the other since they have same curve parameters. Or am I wrong? (And also because the default format of point_conversion_form is :uncompressed, as I just have tested) Please help.
P.S. You might wonder why I need to convert the public key into the other. No, I don't really have to. I just want to learn how to convert it as I'll be using that method to convert something similar. And this is the simplified question for your testing-convenience.
","Jay-Ar, 
You shouldn't find your solution weird as I think the call to ec.public_key.to_bn might be adhering to rfc5480 section 2.2 re: Subject Public Keys which states:

2.2.  Subject Public Key

The first octet of the OCTET STRING indicates whether the key is
      compressed or uncompressed.  The uncompressed form is indicated
      by 0x04 and the compressed form is indicated by either 0x02 or
      0x03 (see 2.3.3 in [SEC1]).  The public key MUST be rejected if
      any other value is included in the first octet.


Assuming this is the case and since you stated the format is :uncompressed, your own answer makes total sense to me.  Thanks for posting it! :) 
","489","<javascript><ruby><openssl><elliptic-curve><diffie-hellman>","2","2","3","2015-01-04 04:48:09","22436799","0","","3073313","","2014-03-14 16:41:18","2014-03-14 16:31:17",""
"18783383","Where is the mistake in this Elliptic Curve code","I'm trying to write an implementation of elgamal with elliptic curves in haskell.
But there's some problem in my point addition function: as long as I keep adding the start point to itself I never reach the point at infinity (O).
Here is my code:
addP :: Curve->Point->Point->Point
addP _ O O = O
addP _ O p = p
addP _ p O = p
addP curve@(a,b,p) (P x1 y1) (P x2 y2) | x1 == x2 && y1 == -y2 = O
                                       | otherwise = P x3 ((m*(x1-x3)-y1) `mod''` p)
    where x3 = (((m*m)-x1-x2) `mod''` p)
          m | x1 /= x2 = (y2-y1)/(x2-x1)
            | otherwise = (3*(x1*x1)+a)/(2*y1)

Where Curve is defined as
-- first double=a, second double=b, third double=p in y^2=x^3+ax+b mod p
type Curve = (Double, Double, Double) 

and Point is defined as
data Point = P Double Double |
             P
             deriving (Eq, Read, Show)

Does anyone know what I've done wrong?
","
as long as I keep adding the start point to itself I never reach the point at infinity (O). 

Could you please post the reference/link where you learned this. I have very limit knowledge of Elliptic curves but I know little bit of Haskell so I tried to see what is going with your code. Very first thing I noticed the use of division and double while you are using modular arithmetic modulo prime p. I am not able to see what you mod'' does so I changed your code little bit and it's working fine for me.
type Curve = ( Integer , Integer , Integer )
data Point = P Integer Integer | O
         deriving (Eq, Read, Show)


extendedGcd :: Integer -> Integer -> ( Integer , Integer )
extendedGcd a b
  | b == 0 = ( 1 , 0 )
  | otherwise = ( t , s - q * t ) where
      ( q , r ) = quotRem a b 
      ( s , t ) = extendedGcd b r


modInv :: Integer -> Integer -> Integer
modInv  a b
  | gcd a b /= 1 = error "" gcd is not 1 ""
  | otherwise = d where
     d = until ( > 0 ) ( + b  ) . fst.extendedGcd a $ b


addP :: Curve->Point->Point->Point
addP _ O O = O 
addP _ O p = p 
addP _ p O = p 
addP ( a, b, p ) ( P x1 y1 ) ( P x2 y2 ) 
    | x1 == x2 && mod ( y1 + y2 ) p == 0 = O 
    | otherwise = P x3 ( mod ( m * ( x1 - x3 ) - y1 ) p ) where
            m | x1 /= x2 = ( mod ( y2 - y1 ) p ) * modInv ( mod ( x2 - x1 ) p ) p
              | otherwise = ( 3 * x1 * x1 + a ) * modInv  ( 2*y1 ) p
            x3 = mod ( m * m - x1 - x2 ) p

Lets take curve y^2 = x^3 + x + 1 modulo 13. Z_13 = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 ]. Quadratic residue ( QR ) = [ 0, 1, 3, 4, 9, 10, 12] and Quadratic non residue ( QNR )= [ 2, 5, 6, 7, 8, 11] of Z_13. Take x = 0 and we have y^2 = 1 ( mod 13 ) since 1 is in QR so solution for this equation is 1 and 12. We get two points ( 0, 1 ) and ( 0, 12 ). Putting x = 1, y^2 = 3 ( mod 13 ) so points corresponding to x = 1 is ( 1, 4 ) and ( 1, 9). Putting x=2, y^2 = 11 ( mod 13 ) and 11 is QNR so we don't have solution. Whenever a solution exists, it gives us two points and both are inverse of each other modulo prime p ( 13 in this case ). Total points on given curve is ( 0, 1 ), ( 0, 12 ), ( 1, 4 ), ( 1, 9 ), ( 4, 2 ), ( 4, 11 ), ( 5, 1 ), ( 5, 12 ), ( 7, 0 ), ( 7, 0 ), ( 8, 1 ), ( 8, 12 ), ( 10, 6 ), ( 10, 7 ), ( 11, 2 ), ( 11, 11 ). You can try all the points and see which one generate the whole group. 
 *Main>take 20 . iterate ( addP ( 1 , 1 , 13 )  ( P 7 0 ) ) $ ( P 7 0  )
 [P 7 0,O,P 7 0,O,P 7 0,O,P 7 0,O,P 7 0,O,P 7 0,O,P 7 0,O,P 7 0,O,P 7 0,O,P 7 0,O]
 *Main> take 20 . iterate ( addP ( 1 , 1 , 13 )  ( P 0 12 ) ) $ ( P 0 12  )
 [P 0 12,P 10 6,P 7 0,P 10 7,P 0 1,O,P 0 12,P 10 6,P 7 0,P 10 7,P 0 1,O,P 0 12,P 10 6,P 7 0,P 10 7,P 0 1,O,P 0 12,P 10 6]

Coming back to Elgamal system
1. Bob chose elliptic curve E( a, b) over GF( p ) or GF ( 2^n ).
2. Bob chose a point on the curve e1( x1, y1 )
3. Bob chose an integer d.
4. Bob calculate e2(x2, y2 ) = d * e1( x1, y1 ).
5. Bob announce E( a, b, p ), e1( x1, y1 ) and e2( x2, y2) as your public key and keeps d as private key
Encryption. 
Alice selects P, point on the curve, as her plain text. She chose a random number r and computes C1 = r * e1, C2 = P + r * e2. 
Decryption.
Bob after receiving C1 and C2, computes C2 - d * C1 => P + r * e2 - d * r * e1 
=> P + r * d * e1 - d * r * e1 => P 
Edit: You are correct! If you take generator element and keep adding it then you can generate the whole group. See the lecture by Christof Paar[1].
[1]https://www.youtube.com/watch?v=3S9eZRHjP8g&list=PLn_QCKxjl9zmx3VojkDqljZcLCIslz7kB&index=37
","486","<haskell><elliptic-curve>","2","3","1","2013-09-27 10:02:30","","2","","","","","2013-09-13 09:56:16",""
"25547037","node.js Wallet Import Format (WIF) for Hierarchical Key in BitCore","I am trying to generate WIF from extendedprivatekey, but i am getting invalid WIF.
How should WIF look : https://bitcoin.org/en/developer-guide#wallet-import-format-wif
I've followed instructions from above link and got this code:
 var crypto = require('crypto');
  var bitcore = require('bitcore');
  var HierarchicalKey = bitcore.HierarchicalKey;
  var Address = bitcore.Address;
  var networks = bitcore.networks;
  var coinUtil = bitcore.util;

    var knownBytes = coinUtil.sha256('testing');
    var hkey = HierarchicalKey.seed(knownBytes,'testnet');

    var key = new Buffer(hkey.derive('m/0\'/0/0').extendedPrivateKey);
    var hash = new Buffer ([0xef].concat(key).concat([1]));

    var hashses = doubleSHA256(hash);
    var checksum = hashses.slice(0, 4);
    var data = Buffer.concat([hash, checksum]);
    var ress = bitcore.base58.encode(data);
    console.log(ress);

    function sha256(data) {
    return new Buffer(crypto.createHash('sha256').update(data).digest('binary'), 'binary');
    };
    function doubleSHA256(data) {
    return sha256(sha256(data));
    };

I suspect there is somewhere converting error.
EDIT : I've figured it myself. Will post solution later.
","I found the answer to this buried in the WalletKey.js code:
var bitcore = require('bitcore');
var HierarchicalKey = bitcore.HierarchicalKey;
var Address = bitcore.Address;
var networks = bitcore.networks;
var coinUtil = bitcore.util;

var knownBytes = coinUtil.sha256('testing');
var hkey = HierarchicalKey.seed(knownBytes,'testnet');

var derived = hkey.derive('m/0\'/0/0');
var priv = new bitcore.PrivateKey(networks.testnet.privKeyVersion, derived.eckey.private, derived.eckey.compressed);
var wif = priv.toString();

","477","<node.js><bitcoin><elliptic-curve>","1","2","1","2014-10-02 14:50:42","","0","1","3986350","","2014-08-29 09:46:56","2014-08-28 10:52:20",""
"33112426","How do I list supported Elliptic Curves in python","I am trying to create a python script which lists the supported curves. Basically I want to do this in Python
openssl ecparam -list_curves
EDIT: 
I've tried the pyOpenSSL wrapper module which does contain a with similar functionality but I am hoping for a simpler way to do this without the use of this module
","","474","<python><openssl><elliptic-curve>","1","","0","2015-10-14 17:32:59","","3","","1078112","","2015-10-14 17:32:59","2015-10-13 20:53:36",""
"36967261","Plot elliptic curve over real numbers","How can I plot the elliptic curve

over real numbers with R?
","Here is a feasible way by constructing the points manually.
df <- data.frame(x = -100:100, y = c(sqrt(x^3-3*x+ 2), -sqrt(x^3-3*x+ 2)))
ggplot(df, aes(x = x, y = y)) + geom_point()


","467","<r><plot><elliptic-curve>","1","0","2","2018-02-16 01:24:32","36967402","1","","","","","2016-05-01 13:33:00",""
"36967261","Plot elliptic curve over real numbers","How can I plot the elliptic curve

over real numbers with R?
","This can work:
df <- data.frame(x = seq(-300, 300, 0.1), y = c(sqrt(x^3 - 3*x + 2), -sqrt(x^3 - 3*x + 2)))

ggplot(df, aes(x = x, y = y)) + geom_point()

","467","<r><plot><elliptic-curve>","1","0","2","2018-02-16 01:24:32","36967402","1","","","","","2016-05-01 13:33:00",""
"18722906","Is there any NTRU alternative to GnuPG (either with (secure!) NTRUSign or different digital signature algorithm)?","I am looking for (potentially) more secure alternative to GnuPG (which is based on RSA and Elgamal). So I am curious if is there any working implementation of NTRU algorithms with same capabilities as GnuPG. I know that there is a lot of implementation of NTRUEncrypt (http://www.yassl.com/yaSSL/Products-cyassl.html, http://sourceforge.net/projects/ntru/ or answers here: NTRUEncrypt source code?). I even found some implementation with NTRUSign (https://github.com/tbuktu/ntru), but they say that the NTRUSign was broken and should not be used (here is how it was broken http://www.di.ens.fr/~ducas/NTRUSign_Cryptanalysis/DucasNguyen_Learning.pdf), so as far I know, there is no secure algorithm for NTRUSign. (that analysis from 2012 includes ""secure versions"" of NTRUSign (like adding perturbations), the pure NTRUSign was broken in 2006)
1) My first question is, am I wrong? 
Is there any secure (or not yet broken, which (I know) is  a significant difference). Or is there any secure Digital signature algorithm, which I may use for opensource without paying a lot for a licence and secure against bruteforce. I am mostly thinking of using ECDSA but I do not know how it is with patens and how secure is it. My second question: 2) Is there any secure digital signature other than DSA, ECDSA and RSA-PSS (and other RSA based), which would be good for signing messages?  I know that there are others (http://en.wikipedia.org/wiki/Digital_signature) but that is all I know about them.
And my third question 3) Is there any ECC implementation behaving similarly to GnuPG? 
Ok, after I wrote the question I found this: https://code.google.com/p/gnupg-ecc/, so I will answer it right now. (Someone could find it useful)
And 4) Is there any other implementation of  asymetric encryption for both encrypting and signing as alternative to RSA,ElGamal,ECC?
","","465","<security><digital-signature><elliptic-curve><ntrusign>","2","","0","2015-04-04 11:23:41","","3","","-1","","2017-05-23 10:24:12","2013-09-10 15:23:44",""
"19456627","20 Byte limit with Elliptic Curve Cryptography","I've been trying to switch from RSA to ECC in my code. At first, I tried using Bouncycastle, but I was having difficulties getting named curves to work. None of the sample code I found was working.
So I tried JECC and it worked just fine, except for one problem.  When using the ""secp256r1"" curve, I could only encode 20 bytes, 160 bits, before it gave me an ""index out of range"" error.
Is this a limitation with JECC, Elliptic Curves in general, or maybe my own code?  I tried researching the problem online and can't find any reference to how much data a 256 bit ECC key can encode.  With RSA, I could encode any data smaller then the key used.
Additionally, how important is data padding with ECC? I couldn't find any information on standard padding practices with ECC.
Thank you in advance for your help.
EDIT:
Here is my code in case you were wondering. I slightly modified the original JACC code so there aren't any typecasts.
ECCryptoSystem cs = new ECCryptoSystem(new EllipticCurve(new secp256r1()));

t1=System.currentTimeMillis();
ECKey sk = cs.generateKey(); // secure key
ECKey pk = sk.getPublic(); // public key
t2=System.currentTimeMillis();
System.out.println(""Generated keys in ""+(t2-t1)+""ms."");

for(int c=0;c<10;c++){
    t1=System.currentTimeMillis();
    byte[] s1=args[0].getBytes();
    byte[] s2=cs.encrypt(s1,args[0].length(),pk);
    byte[] s3=cs.decrypt(s2,sk);
    t2=System.currentTimeMillis();

    if(Arrays.equals(s1,s2)){System.out.println(""Bad encryption!"");}
    if(!Arrays.equals(s1,s3)){System.out.println(""Bad decryption!"");}

    String decoded = new String(s3, ""UTF-8"");
    System.out.println(""loop ""+(c+1)+"": \""""+decoded+""\"" (""+decoded.length()+"" Characters) in ""+(t2-t1)+""ms."");
}

And here's how I ran it:
$ java Mecc ""This is a good test.""
Generated keys in 397ms.
loop 1: ""This is a good test."" (20 Characters) in 208ms.
loop 2: ""This is a good test."" (20 Characters) in 107ms.
loop 3: ""This is a good test."" (20 Characters) in 69ms.
loop 4: ""This is a good test."" (20 Characters) in 68ms.
loop 5: ""This is a good test."" (20 Characters) in 73ms.
loop 6: ""This is a good test."" (20 Characters) in 59ms.
loop 7: ""This is a good test."" (20 Characters) in 64ms.
loop 8: ""This is a good test."" (20 Characters) in 58ms.
loop 9: ""This is a good test."" (20 Characters) in 60ms.
loop 10: ""This is a good test."" (20 Characters) in 60ms.
$ java Mecc ""This is a good test..""
Generated keys in 555ms.
Error: java.lang.ArrayIndexOutOfBoundsException: 20

FYI: You can see how the JIT compiler speeds things up after a few loops.
Another EDIT:
I just stepped through the JECC code and found something interesting:
hash = MessageDigest.getInstance(""SHA-1"");
...
byte[] digest = hash.digest();
for(int j = 0; j < numbytes; j++) {
    res[j+ek.mother.getPCS()]=(byte) (input[j]^digest[j]);
}

It seems the data is xored against the hash. If I change the ""SHA-1"" to ""SHA-256"", I no longer get the error.
Now I'm not a cryptographer, and I'd rather not change the core functionality of JECC, but is this a valid solution?
","The reason why JECC only encrypts 20 bytes of plaintext is that during encryption process it tries to XOR the input with digest value. The digest length of SHA-1 used by JECC is 160 bits(20 bytes). 
Also JECC doesn't encrypt the data using ECC, rather it's a prototype of ECIES, which involves generating symmetric key using ECC Diffie Hellman key exchange and than using any custom symmetric encryption algorithm.
","463","<java><bouncycastle><elliptic-curve>","0","0","1","2015-01-13 17:46:00","27928273","2","2","2895920","","2013-10-19 22:44:22","2013-10-18 18:27:29",""
"33589345","Sage Math elliptic curve with singularity points","I am new in sage and I have a problem. I am trying to plot the curve f(x,y)=y^2 - x^2*(x+3), but it never works. Can somebody help ?
I tried this:
sage: E = EllipticCurve([0,3,0,0,0]);
sage: E;

and it gives the error ArithmeticError: invariants (0, 3, 0, 0, 0) define a singular curve.
","You need to do an implicit plot.
f(x,y)=y^2 - x^2*(x+3)
implicit_plot(f,(x,-3,3),(y,-3,3))

Looks singular to me!  That would explain your error, probably EllipticCurve only will work with nonsingular curves.
","460","<math><plot><curve><sage><elliptic-curve>","2","2","1","2015-11-08 02:06:16","33589802","2","","971141","","2015-11-08 02:06:16","2015-11-08 00:18:39",""
"22483036","Why is the ECC-DH Symmetric Key Of This Site Different From OpenSSL","I am using (this site's) Javascript library and OpenSSL Ruby to compute the symmetric key of Elliptic Curve Diffie Hellman. 
However, from my results, OpenSSL Ruby only generated one key unlike that on the site which has X and Y symmetric keys. I am baffled as my OpenSSL symmetric key doesn't match either one of those x and y on the site.
The symmetric(shared secret) keys I got using secp224r1 curve:
Ruby OpenSSL
   13506351678569412185536677668115375188438201041599149052762191980775

Using Site's JS Library
x: 26210366144026557327555572210249241206666031403062020900473236895358
y: 19676808255388748321882118528911150828003358302170965920476006073155

My questions are:
1) Why does OpenSSL Ruby yields only one key while that size yields two keys: x and y (as I've assumed x and y won't be concatenated with each other since the bitsize will be too long when compared to the Ruby symmetric key)
2) Is there a way to convert the two symmetric keys (OpenSSL and JSBN-EC library above) from one another? All my attempts to convert failed.
I've been struggling for a week now implementing Ruby OpenSSL with that JSBN-EC library. I've also tried (SJCL library) but similar results (symmetric keys don't match). Please help.
","I've managed to work it out now with working symmetric keys on client (JSBN-EC) and on server OpenSSL Ruby
I found out that my problem actually lies in the code itself. After fixing it, I've ended up with a symmetric key on OpenSSL Ruby as follows:
#Ruby: OpenSSL
...
...
symm_key = ec.dh_compute_key(point)
symm_key.unpack('B*').first.to_i(2) #Converts to binary, then to integer
#--> 6922380353406615622038660570577625762884344085425862813095878420328

While on the client side using JSBN-EC
#Javascript: JSBN-EC
...
...
var curve = get_curve();
var P = new ECPointFp(curve,
curve.fromBigInteger(server_pub_key_x),
curve.fromBigInteger(server_pub_key_y));
var a = client_priv_key;
var S = P.multiply(a);

console.log('SYMM_KEY X: '+S.getX().toBigInteger().toString());
//--> 6922380353406615622038660570577625762884344085425862813095878420328
console.log('SYMM_KEY Y: '+S.getY().toBigInteger().toString());
//--> 14426877769799867628378883482085635535383864283889042780773103726343

Therefore from the looks of it, the symmetric key that matches the Ruby OpenSSL value is the  X value of the JSBN-EC symmetric key
6922380353406615622038660570577625762884344085425862813095878420328
==
6922380353406615622038660570577625762884344085425862813095878420328

I don't know what the Y value is now for. Looks like I won't need it. Cheers! :)
","451","<javascript><ruby><openssl><elliptic-curve><diffie-hellman>","1","1","1","2014-03-19 15:31:21","22510720","0","2","3073313","","2014-03-18 15:03:57","2014-03-18 14:56:24",""
"32790141","How to validate RSA-signed ECDHE public key?","I'd like to validate the signature on an elliptic curve public key received using ECDHE, but I can't find any reference that clearly explains which bytes are signed.  
I set up a TLS v1.2 connection to google.com using cipher suite TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 (0xc02f).  I captured traffic with Wireshark and I can see the client hello, server hello, certificate, and server key exchange messages.  My understanding is that the EC public key that Google sent is signed using the private key of certificate Google sent (RSA, in this case).  
Here is the Server Key Exchange message:
160303014d0c0001 490300174104f930
e65768e0587ec7e1 b8b537ccd6ae2500
3a364b84a68ed7c0 47d18dd104afb63c
cc72e800495db3cd d629807f0d4501a4
c043c5c7c52aea45 a66692aa11b60201
01007ec0b1ef4994 30f42f3ed9a7a592
92c0f875ad7cd2f8 5b36a7aec804f602
2959549a8a3d0e5c 5825fefa4d69f360
34eaad7138e5da69 61bdfb88ddb5172c
ba64071de0764fc1 c8b895dbc52ec85c
3b7891c53e6d843b 44f80c481a9beb86
c444b32204e9bc6c 6665e6dd26887c5e
fc4e331fbdd66536 686b6b5f16072b52
ee2fee75ca65e28f a0ee0644b91fba30
783798aa83cf28f1 394b1344b43104cb
89aed55030bd7561 d13ae20d4d7bc17e
682e6c6266f04bf6 31665a547e2f15b3
c79fda548a781d39 5d64f4eea75aac96
9374ce60400fdc11 3a3d5a98b62f63b7
6e5324797c938f39 bc1cc5736b612bd7
7a1bc790841d4e25 dae648cab33273e2
588c
Parsing this gives:
160303014d - record header
0c - server key exchange message
000149 - length of message
03 - named curve
0017 - secp256r1 curve
41 - length of public key
04 - not sure what this means
f930e6...04af [32 bytes] - x value of public key
b63ccc...11b6 [32 bytes] - y value of public key
02 - SHA-1 hash
01 - RSA signature
0100 - length of signature
7ec0b1...588c [256 bytes] - signature value
Using the certificate I received in the certificate message, I was able to perform a public key operation on the signature of the EC public key and it looks like a properly padded SHA-1 hash.  However, I cannot verify this hash value.  I tried many different combinations of the raw EC public key with its headers, but nothing I tried hashes properly.  
Here is how I retrieved the hash:
openssl rsautl -inkey ~/googlePubKey.pem -encrypt -in ~/googleECpubkeysig -pubin -raw | hexdump
0000000 0100 ffff ffff ffff ffff ffff ffff ffff
0000010 ffff ffff ffff ffff ffff ffff ffff ffff
*
00000d0 ffff ffff ffff ffff ffff ffff 3000 3021
00000e0 0609 2b05 030e 1a02 0005 1404 3ac5 fb13
00000f0 9ff8 77f1 6a69 09af 472a 90b2 cac6 b4f8
0000100
The last 20 bytes look like a SHA-1 hash, which is the algorithm specified in the signature.  Which bytes from the Server Key Exchange should I be hashing to get this value?  Or, is there some transformation or other data that I must perform or add prior to hashing?  
","I was missing the client random and server random.  Thanks to JamesKPolk for the references and this related post for mentioning the two random values in one of the comments: https://security.stackexchange.com/questions/80619/tls-1-2-handshake-how-is-the-ecdhe-public-key-signed-by-server.
The full value to hash for my example above (with hex values in parentheses) is:
client_random (32 bytes) + server_random (32 bytes) + named_curve (0x03) + secp256r1_curve (0x0017) + length_of_public_key (0x41) + first_byte_of_key (0x04) + key_x_value + key_y_value
When I used this value the hash matched and the signature verified OK.
","443","<ssl><digital-signature><elliptic-curve>","0","1","1","2015-09-26 00:15:51","32792325","1","","","","","2015-09-25 20:26:13",""
"18539305","Given an public key of type CKK_EC, is it possible to find the matching private key using C_FindObjects?","I have a serialized EC public key - its CKA_EC_PARAMS and CKA_EC_POINT.  There's a matching private key on my token.  Is there any way to find it?  
With an RSA key, I can do a FindObjects with CKA_KEY_TYPE=CKK_PRIVATE_KEY and CKA_MODULUS=.  Is there a way to do the same thing with EC keys?  According to the PKCS#11 spec, CKA_EC_POINT isn't an attribute for EC Private Keys.
","I have a token with support for EC at hand, and it seems that the only way to associate the private and public key will be through the CKA_ID value. No attribute available to test directly the key value.
Actually, even in the case of RSA that's the basic standard method to associate a private and a public key, they ought to be created with identical CKA_ID (that's what the Netscape browser originally did, and everyone copied on that).
They are even some buggy pkcs#11 implementation that won't allow you to read the CKA_MODULUS value of a RSA private key, with them CKA_ID is the only way even for RSA.
","442","<elliptic-curve><pkcs#11>","1","2","1","2014-03-14 13:35:44","22406531","0","","","","","2013-08-30 18:26:46",""
"40392052","Generating public key from private key issues","I am using the BigIntegerLibrary and this is applying secp256k1.
Here is my function to generate the public key. 
std::string genPublicKey(BigInteger privateKey){
    std::vector<bool> sequence = reducePointOps(privateKey);

    BigInteger s;
    BigInteger x3 = basePoint_X;
    BigInteger y3 = basePoint_Y;
    BigInteger rx, ry;
    BigInteger three(3);
    BigInteger two(2);

    for(std::vector<bool>::reverse_iterator it = sequence.rbegin(); it != sequence.rend(); ++it){
        //meaning point doubling
        if(*it == true){
            s = (((three * ((x3 * x3)%primeModulo))+a) * inverse(two*y3)) % primeModule;

            rx = (((s*s)%primeModulo)-(two * x3))% primeModulo;

            ry = (s * (x3 - rx) - y3)%primeModulo;
            //cout<<""Doubling: s=""<<s<<"", x=""<<rx<<"", y=""<<ry<<endl;
        }
        //meaning point addition
        else{
            //(x2,y2) -> base point         (x1,y1)->(x3, y3) aka previously calculated point
            s = ((basePoint_Y - y3) * inverse(basePoint_X - x3))%primeModulo;


            rx = (((s*s) % primeModulo) - x3 - basePoint_X) % primeModulo;

            ry = ((s * (x3 - rx)) - y3)%primeModulo;
            //cout<<""Addition: s=""<<s<<"", x=""<<rx<<"", y=""<<ry<<endl;        
        }
        //cout<<endl;

        x3=rx;
        y3=ry;

    }
    std::string x3_str = bigIntegerToString(x3);
    std::string y3_str = bigIntegerToString(y3);
    return (x3_str + y3_str);
}

Here is my inverse function but I took this from somewhere so I am almost positive it is correct.  Plus I have tested it and is working.
BigInteger inverse(BigInteger a){
    BigInteger s;
    BigInteger t;
    eea(primeModulo, a, &s, &t);
    if(t<0)
        return (t%primeModulo);
    else
        return t;
}

BigInteger eea(BigInteger a, BigInteger b, BigInteger *s, BigInteger *t){
    if(a==0){
        *s=0;
        *t=1;
        return b;
    }

    BigInteger s1;
    BigInteger t1;
    BigInteger gcd = eea(b%a, a, &s1, &t1);
    *s = t1 - (b/a) * s1;
    *t = s1;

    return gcd;
}

Other than that there is only my function to reduce the amount of operations to point doublings and additions.  I have worked out many examples by hand so I know the data coming out of this function is correct.  
The weird thing is that I have tried this on an example in my cryptography class with values m=17 x=5 y=1 a=2 and I am getting all the values I should be getting.  I didn't code a way for the values to 'wrap around' once the inverse of the base point is reached but since with bitcoin the private key space is much much smaller than the modulo value so we shouldn't even reach that point when values start repeating themselves. I am about to cry with how frustrating this is so any help would be wonderful.  
Oh also there is one other weird thing.  Here is an example when I run it.
Private Key:
18E14A7B6A307F426A94F8114701E7C8E774E7F9A47E2C2035DB29A206321725

My Public Key: 
458ACBDD5DE95281B9ACAB95D0F8DAC011C895EBE95E567BE9E308C12936CCAE3B81CE567B126A604A938D29ED15B5A96779AF27B5DC9ED6F2EE187E9C582BA6

Correct Public Key:
50863AD64A87AE8A2FE83C1AF1A8403CB53F53E486D8511DAD8A04887E5B23522CD470243453A299FA9E77237716103ABC11A1DF38855ED6F2EE187E9C582BA6

It's not obvious but the last 19 hex digits are the same but the rest is different? They are the same length by the way.  Could this be something wrong with the BigInteger Library?  This was a way that seemed simple to me but would you recommend I did it a different way?
","","442","<c++><biginteger><bitcoin><public-key><elliptic-curve>","2","","0","2016-11-03 01:14:50","","0","","207421","","2016-11-03 01:14:50","2016-11-03 00:41:04",""
"34115706","How to generate EC X509 certificate on unix?","I need to generate X509 certificate using EC.
What are the commands that I need to perform in order to achieve a PEM file of this certificate? 
","First, you need to create a private key with the elliptic curve of your choice:
openssl ecparam -name <curve> -param_enc explicit -genkey -out key.pem

You can find all supported curves with openssl ecparam -list_curves.


Afterwards you can create your certificate request, e.g.:
openssl req -x509 -new -key key.pem -out certificate.pem

","430","<unix><ssl><x509certificate><elliptic-curve>","1","1","1","2015-12-06 10:08:17","34116203","0","","","","","2015-12-06 08:59:58",""
"52595329","Elliptic curve double and add implementation in python","I am trying to implement the ""double and add"" algorithm to quickly multiply points on an elliptic curve in Python (3, please).
Based off this previous answer (about addition and doubling),
Elliptic curve point addition over a finite field in Python
the Wikipedia page,
https://en.wikipedia.org/wiki/Elliptic_curve_point_multiplication
and my textbook (Information Security, by Mark Stamp), I came up with the following code:
def point_add(N_x, N_y, Q_x, Q_y, p):
    m = (Q_y - N_y) * pow((Q_x-N_x), p-2, p)
    ret_x = (m ** 2 - N_x - Q_x) % p
    ret_y = (m*(N_x - ret_x) - N_y) % p
    return ret_x, ret_y


def point_double(N_x, N_y, a, p):
    m = (3*(N_x ** 2)+a) * pow(2*N_y, p-2, p)   
    ret_x = (m ** 2 - N_x - Q_x) % p
    ret_y = (m*(N_x - ret_x) - N_y) % p
    return ret_x, ret_y


multiplier_A = 44
multiplier_B = 57
a = 10
b = -21
p = 41
N_x = 3
N_y = 6
Q_x = 0
Q_y = 0

multiplier_A = list(bin(multiplier_A)[2:])
multiplier_B = list(bin(multiplier_B)[2:])

for x_a in multiplier_A:
    if x_a == '1':
        Q_x, Q_y = point_add(N_x, N_y, Q_x, Q_y, p)
    N_x, N_y = point_double(N_x, N_y, a, p)

print(Q_x, Q_y)

Which sure enough returns a wrong result. 
Where do I go wrong? A new implementation from scratch is also more than welcome.
UPDATE
I want to multiply the point (3,6) times multiplier_A and multiplier_B. For now I'm trying to only do multiplier_A(3,6).
a, b, and p are the elliptic curve paramethers
","","422","<python><multiplication><elliptic-curve>","0","","0","2018-10-01 17:15:57","","2","","7065505","","2018-10-01 17:15:57","2018-10-01 16:35:37",""
"41754806","Export public key to decompressed (x,y) representation begins with 0x04 and has 65 bytes length","I have below sample code for generating private key (link to gist):
https://gist.github.com/kynwu/3a65e238fcd189d516bb2de59527a320
after generated private key, I derived public key by calling SecKeyCopyPublicKey((SecKeyRef)privateKey)
I got below value showing (x,y) of the public key.
<SecKeyRef curve type: kSecECCurveSecp256r1, algorithm id: 3, key type: ECPublicKey, version: 4, block size: 256 bits, y: 1778DB79819A67BC9211E003557CB55EA0C7A19154B1C0828B30F30AD208ABCD, x: 7A1C65A955F46B9937A12E19139DE25C3F19368A3C2DD7360791E42382C98716, addr: 0x1003019f0>

Now, I want to transfer this (x,y) to 0x04|x-32bytes|y-32byteswhich is 65 bytes binary data, thus I can output this binary represents the public key to server. How to achieve this?
","Use CoreFoundation's CFDictionaryGetValue method.
const void *CFDictionaryGetValue(CFDictionaryRef theDict, const void *key);
Below function will give 65 bytes UnCompressed public key.
+ (NSData *) publicKeyBits

{
return (NSData *) CFDictionaryGetValue((CFDictionaryRef)[self lookupPublicKeyRef], kSecValueData);

}
  + (SecKeyRef) lookupPublicKeyRef
{
  CFMutableDictionaryRef getPublicKeyQuery = newCFDict;
  CFDictionarySetValue(getPublicKeyQuery, kSecClass,                kSecClassKey);
  CFDictionarySetValue(getPublicKeyQuery, kSecAttrKeyType,          kSecAttrKeyTypeEC);
  CFDictionarySetValue(getPublicKeyQuery, kSecAttrApplicationTag,   kPublicKeyName);
  CFDictionarySetValue(getPublicKeyQuery, kSecAttrKeyClass,         kSecAttrKeyClassPublic);
  CFDictionarySetValue(getPublicKeyQuery, kSecReturnData,           kCFBooleanTrue);
  CFDictionarySetValue(getPublicKeyQuery, kSecReturnPersistentRef,  kCFBooleanTrue);

  OSStatus status = SecItemCopyMatching(getPublicKeyQuery, (CFTypeRef *)&publicKeyRef);
  if (status == errSecSuccess)
    return (SecKeyRef)publicKeyRef;
  else if (status == errSecItemNotFound)
    return nil;
  else
    [NSException raise:@""Unexpected OSStatus"" format:@""Status: %i"", status];
  return false;
}


kPublicKeyName can be any constant string to be associated as a tag to public key.

for example - #define kPublicKeyName @""com.trailer.ECKey.public""
","421","<ios><objective-c><elliptic-curve>","1","0","1","2019-01-17 07:03:35","","2","","","","","2017-01-20 01:49:46",""
"45024687","Computing ECC public key from a private key in JavaCard","With Java Card APIs, which ""support"" Elliptic curves, how do I compute a public key given a known secret key.
Following a DH shared secret negotiation I'm interested in deriving common shared keys.  According to TR-03111 and X9.63 the shared secret from the DH ECC key agreement should not be used but, according to my understanding, the affine representation of the x-coordinate (The x component of the public key associated with the shared secret as a private key) is to be used.
With BigInteger arithmetic or ECPoint.multiply() this easy, but no such APIs exist in Java Card.
","This multiplication isn't directly available for Java Card. Basically Java Card hides low level operations for you.
However, if you have a relatively new Java Card you may get away with this by using a KeyAgreement instance created using ALG_EC_SVDP_DH_PLAIN_XY. What you can do is to create a ECPublicKey where the public key point is simply set to point G. This base point G is part of the domain parameters. The private key should of course be set to your value.
Then all it comes down to is to perform a key agreement; the result of the agreement will be the points X and Y of the public key.

Note that support of any algorithm constant depends on the card implementation. The constant will be there - if the implemented API is new enough - but the algorithm may not be implemented.
","412","<smartcard><javacard><elliptic-curve>","2","1","1","2017-07-19 21:34:32","","2","4","","","","2017-07-11 03:05:26",""
"23759850","ECC point multiplication algorithm","I've been working on implementing ECDH into my iOS project and have a small logic bug in my code for the point multiplication. From testing with the NIST List examples (""Link"") I know that my double method and my add method is working correctly (tested with a various of curves) but somehow I can't get the actually multiplication algorithm to work.
Here is the multiplication code:
- (NSArray *)multiplyPX:(BigInteger *)P_X PY:(BigInteger *)P_Y andD:(BigInteger *)D
{
    BigInteger *ZERO = [[BigInteger alloc] initWithInt32:0];
    BigInteger *curveA = [[BigInteger alloc] initWithString:@""ffffffff00000001000000000000000000000000fffffffffffffffffffffffc"" radix:16];

    //Getting the binary representation of the D value
    NSString *dBinary = [D toRadix:2];

    //Creating new Point Q = 0;
    BigInteger *Qx = ZERO;
    BigInteger *Qy = ZERO;

    //For every binary digit in D do ""point doubling"" & if dBinary[i] == 1 do ""point addition""
    for (int i = [dBinary length]-1; i >= 0; i++) {

        //Check that you don't divide by 0
        if (![Qy isEqual:ZERO]) {

            //Point Doubling
            NSArray *arr = [self pointDoublingWithXp:Qx andYp:Qy andA:curveA];
            Qx = [arr objectAtIndex:0];
            Qy = [arr objectAtIndex:1];

        }
            //If dBinary[i] == 1
        if ([dBinary characterAtIndex:i] == 49) {

            //Point Addition
            NSArray *arr = [self pointAdditionWithXp:P_X andYp:P_Y andXq:Qx andYq:Qy];
            Qx = [arr objectAtIndex:0];
            Qy = [arr objectAtIndex:1];

        }
    }

    return [[NSArray alloc] initWithObjects:Qx, Qy, nil];
}

And here the point addition & point doubling.
- (NSArray *)pointAdditionWithXp:(BigInteger *)xp andYp:(BigInteger *)yp andXq:(BigInteger *)xq andYq:(BigInteger *)yq
{
    BigInteger *ONE = [[BigInteger alloc] initWithInt32:1];
    BigInteger *TWO = [[BigInteger alloc] initWithInt32:2];

    BigInteger *slope = [[yq sub:yp] multiply:[[xq sub:xp] inverseModulo:p] modulo:p];
    BigInteger *xout = [[[[slope exp:TWO modulo:p] sub:xq] sub:xp] multiply:ONE modulo:p];
    BigInteger *yout = [[yp negate] multiply:ONE modulo:p];
    yout = [yout add:[slope multiply:[xp sub:xout] modulo:p]];

    return [[NSArray alloc] initWithObjects:xout, yout, nil];
}

- (NSArray *)pointDoublingWithXp:(BigInteger *)xp andYp:(BigInteger *)yp andA:(BigInteger *)a
{
    BigInteger *ONE = [[BigInteger alloc] initWithInt32:1];
    BigInteger *TWO = [[BigInteger alloc] initWithInt32:2];
    BigInteger *THREE = [[BigInteger alloc] initWithInt32:3];

    BigInteger *slope = [[[[xp multiply:xp] multiply:THREE] add:a] multiply:[[yp multiply:TWO] inverseModulo:p]];

    BigInteger *xout = [[[slope multiply:slope] sub:[xp multiply:TWO]] multiply:ONE modulo:p];

    BigInteger *yout = [[[yp negate] add:[slope multiply:[xp sub:xout]]] multiply:ONE modulo:p];

    return [[NSArray alloc] initWithObjects:xout, yout, nil];
}

I don't really know what to do with the point Q at the beginning, maybe that's the bug.
But anyways, thank you very much. :)
Anton
","","404","<objective-c><encryption><elliptic-curve>","0","","0","2014-05-20 16:51:47","","10","","3207681","","2014-05-20 16:51:47","2014-05-20 12:27:50",""
"20314246","Pari/GP Exceptions/break loops","ellpow(E, P, m) will always throw an exception:
*** ellpow: impossible inverse modulo: Mod(x, y).
***   Break loop: type 'break' to go back to GP

where x and y are integers.
I want to trap the value x, without finishing the program in order to use it
later.
The snippet of the code is:
trap(invmoder,
    x,
    ellpow(E, P, m)
), n);

The whole program is:
ellcurv(n) = {
    local(B, a1, a2, a3, a4, a6, b, E, P, m, x);

    B = 20;

    a4 = Mod(random(n), n);
    b = 4*a4^3 + 27;
    b = 1/b;

    a1 = a2 = a3 = Mod(0, n);
    a6 = Mod(1, n);

    E = ellinit([a1, a2, a3, a4, a6]);
    P = [0,1];

    ellisoncurve(E, P);
    m = 1;
    for(i = 1, B,
        m = lcm(m, i));
    print(m);

    x = gcd(
        trap(,
            ellpow(E, P, m),
            ellpow(E, P, m)
        ), n);

}

","","391","<exception><exception-handling><elliptic-curve><pari><pari-gp>","1","","0","2013-12-01 16:15:23","","0","","","","","2013-12-01 16:15:23",""
"32286022","plot elliptic curve over finite field using sage","I want to plot an elliptic curve over a finite field using sage mathematical interface with the following commands:
p=2^255-19;
F=Finite Field(p);
C=Elliptic Curve(F,[0,486662,0,1,0]);
plot(C, aspect_ratio = 1);

However due to the size of the curve this generates the error:
'OverflowError: range() result has too many items'.

How can i resolve this problem, or is there any other method to plot this curve?
","Think about this result:
sage: len(C.points())
<same error>

Your elliptic curve just has too many points for Python to deal with, much less to plot.  What I would suggest is to start by getting a few points and then using the group law to generate a sample of points and plot that.  I don't know if you'll be able to do that with ""out of the box"" behavior or if you'll have to imitate the code in sage/schemes/elliptic_curves/ell_finite_field.py in _points_via_group_structure(self) as in the traceback.  Good luck!
","391","<plot><sage><elliptic-curve>","1","2","1","2015-08-29 13:44:43","32286717","0","0","","","","2015-08-29 12:25:55",""
"27032389","Did anyone implement Asymmetric cryptographic algorithm in Contiki OS specially in Rime stack.?","I m trying to implement Elliptic Curve cryptography algorithm such as ECDH in Contiki Rime Stack in multihop executing in Cooja simulator but first I need to know..whether they implemented any security algorithm in Contiki Rime stack or not..I already tried the contiki-tls-dtls-master which is not working.I think its not working for skymote..I tried several codes but still not working..the normal FILE is working as we use CFS in contiki OS..So pls help me with this question.Thank you in advanced.
","","388","<security><elliptic-curve><contiki><dtls>","2","","0","2014-11-20 05:27:31","","0","","","","","2014-11-20 05:27:31",""
"49729539","How to use custom EC parameters with java.security.KeyPairGenerator?","I would like to use the Edwards curve ""Curve41417"" (safecurves) for key pair generation.
Right now I have converted it to Weierstrass format and tried the following source code:
public class Test {

    public static void main(String[] args) {

        try {
            KeyPairGenerator keyGen = null;
            keyGen = KeyPairGenerator.getInstance(""ECDSA"", ""LunaProvider"");

            // Create a secure random number generator using the SHA1PRNG algorithm
            SecureRandom secureRandomGenerator = SecureRandom.getInstance(""SHA1PRNG"");

            //generator with the given parameter set and source of randomness
            keyGen.initialize(curve41417InHex(),secureRandomGenerator);

            //keyGen.initialize(ecSpec);
            KeyPair keyPair = keyGen.generateKeyPair();

        } catch (NoSuchAlgorithmException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (NoSuchProviderException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }catch (InvalidAlgorithmParameterException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

    }

    public static ECParameterSpec curve41417InHex(){
        ECPoint point = new ECPoint(
                // gx
                new BigInteger(""36AF93BFF765C2150A948827D97CF68F5F83E0D0C7411AE313A89ABF50224BBAE8C2F76271040290884CF5629DAB279D49AB0F98"",16),
                // gy
                new BigInteger(""1952C13B138703B04EA0D313944A8B1E9AE7882380AD83907F12F2A937C2503ADA9E6BF01CA1F76FDF9032C79F130EB2BEA4C102"",16));

        final ECParameterSpec curve41417 = new ECParameterSpec(

                new EllipticCurve(
                        // field the finite field that this elliptic curve is over.
                        new ECFieldFp(new BigInteger(""3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF"",16)),
                        // a : the first coefficient of this elliptic curve.
                        new BigInteger(""3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBD324"",16),
                        // b : the second coefficient of this elliptic curve.
                        new BigInteger(""3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC3EC75"",16)
                        ),
                point,
                // Order n
                new BigInteger(""7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEB3CC92414CF706022B36F1C0338AD63CF181B0E71A5E106AF79"",16),
                // Cofactor
                8);
        return curve41417;
    } 

}

The ouput for the previous source code is: Exception during Key Generation - Unsupported curve: java.security.spec.ECParameterSpec@43814d18
I believe I am either doing something wrong in the conversion from Montgomery to Weierstrass equation, or I am not using the proper classes to provide custom EC parameters.
Does somebody already succeeded in using custom EC parameters for key pair generation ? Perhaps for another Montgomery or Edwards curve ?
","I believe is not possible to generate EC key pairs based on custom EC curves in LunaProvider using Luna's JSP API. However, it is possible to generate EC key pairs using JCProv API(by Luna). JCProv - PKCS#11 Java Wrapper which is a lower level API close to PKCS#11 implementation. You can use CryptokiEx.C_GenerateKey(..) method to generate key pairs. PKSC#11 C_GenerateKey() method documentation can be found here. 
","386","<java><elliptic-curve><key-pair>","1","0","1","2018-06-25 09:09:53","","0","","","","","2018-04-09 09:20:23",""
"44829426","Can I create a JCE ECPublicKey from a Q value from an openssh public key and ECParameterSpec","I'm reading openssh format elliptic curve public keys (RFC 5656, section 3.1) and would like to get from a BigInteger Q value to an ECPublicKey instance using JCE (rather than say BouncyCastle). I want to do this to verify JWT signatures.
e.g. https://api.github.com/users/davidcarboni/keys: 
ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBK8hPtB72/sfYgNw1WTska2DNOJFx+QhUxuV6OLINSD2ty+6gxcM8yZrvMqWdMePGRb2cGh8L/0bGOk+64IQ/pM=

It looks like I can use ECPublicKeySpec. This takes two parameters. An ECPoint and an ECParameterSpec. I'm able to get the parameter spec using the following JCE code (and the openssh identifier from the key data, say ""nistp256""):
ECParameterSpec getECParameterSpec(String identifier) {
    try {
        AlgorithmParameters parameters = AlgorithmParameters.getInstance(""EC"");
        String name = identifier.replace(""nist"", ""sec"") + ""r1"";
        parameters.init(new ECGenParameterSpec(name));
        return parameters.getParameterSpec(ECParameterSpec.class);
    } catch (InvalidParameterSpecException | NoSuchAlgorithmException e) {
        throw new IllegalArgumentException(""Unable to get parameter spec for identifier "" + identifier, e);
    }
}

I've successfully parsed the Q value from the key data. RFC 5656 tells me that ""Q is the public key encoded from an elliptic curve point into an octet string"") however the constructor of JCE's ECPoint class takes two parameters, X and Y.
Can I get to X and Y from Q, or do I need to take a different approach? 
(NB I quite rightly don't have access to the private key)
","The base64 portion of your input has the equivalent hex of
00 00 00 13 65 63 64 73 61 2D 73 68 61 32 2D 6E 
69 73 74 70 32 35 36 00 00 00 08 6E 69 73 74 70 
32 35 36 00 00 00 41 04 AF 21 3E D0 7B DB FB 1F 
62 03 70 D5 64 EC 91 AD 83 34 E2 45 C7 E4 21 53 
1B 95 E8 E2 C8 35 20 F6 B7 2F BA 83 17 0C F3 26 
6B BC CA 96 74 C7 8F 19 16 F6 70 68 7C 2F FD 1B 
18 E9 3E EB 82 10 FE 93 

65 63 64 jumped out to me as ""ecd"" (sure enough, ""ecdsa-sha2-nistp256"").
So the blob looks to be

Big Endian length of a string/payload (19)
The string ""ecdsa-sha2-nistp256""
Big Endian length of a string/payload (8)
The string ""nistp256""
Big Endian length of a payload (0x41 == 65)
The encoded ECPoint Q (04 AF 21 ... 10 FE 93)

The encoded ECPoint starts with 04 indicating it is an uncompressed point (the most common encoding).  The 04 encoding rules (from http://www.secg.org/sec1-v2.pdf, 2.3.5, step 3) say that the remaining payload is X and Y, each left-padded with zeros to the encoding size of the curve field.
So your ECPoint looks like
04
Qx:
AF 21 3E D0 7B DB FB 1F 62 03 70 D5 64 EC 91 AD
83 34 E2 45 C7 E4 21 53 1B 95 E8 E2 C8 35 20 F6
Qy:
B7 2F BA 83 17 0C F3 26 6B BC CA 96 74 C7 8F 19
16 F6 70 68 7C 2F FD 1B 18 E9 3E EB 82 10 FE 93

In C# you'd need to a) reverse the bytes of each of Qx and Qy (because the .NET BigInteger expects Little Endian, and these are Big Endian) and b) put a padding 0x00 byte as more significant than the 0xAF and 0xB7 bytes, since they have their high bits set (and would be interpreted as negative numbers).  Don't know if Java has either of those quirks.
","384","<java><openssh><jce><elliptic-curve><ecdsa>","0","0","1","2017-06-30 14:57:18","44849385","0","","","","","2017-06-29 15:32:33",""
"33851539","Can KeyAgreement be used without AlgorithmParameterSpec?","In my Android application working with SpongyCastle, I want to perform ECDH Key Exchange using a specific elliptic curve (prime192v1) and I am using this code to generate byte[] representation of private and public params:
        try{
            KeyPairGenerator g = KeyPairGenerator.getInstance(""ECDH"", ""SC"");

            org.spongycastle.jce.spec.ECParameterSpec ecSpec = ECNamedCurveTable.getParameterSpec(""prime192v1"");
            g.initialize(ecSpec, new SecureRandom());

            KeyPair kp1 = g.generateKeyPair();
            KeyPair kp2 = g.generateKeyPair();

            // Alice generated this
            byte[] privK1 = kp1.getPrivate().getEncoded();
            byte[] pubK1= kp1.getPrivate().getEncoded();

            // Bob generated this
            byte[] privK2 = kp2.getPrivate().getEncoded();
            byte[] pubK2= kp2.getPrivate().getEncoded();

        }catch(Exception e)
        {
            Log.e(LOGTAG, ""Exception caught in ECDHInit function"");
        }

now lets assume Alice and Bob save their private keys locally, exchange pubK1 and pubK2 and want to proceed with setting a shared secret (they have both keys now in byte[] format). I will describe only case of Alice, as for Bob this is identical:
KeyAgreement keyAgreement = KeyAgreement.getInstance(""ECDH"", ""SC"");

PrivateKey privateKey = KeyFactory.getInstance(""ECDH"", ""SC"").generatePrivate(new PKCS8EncodedKeySpec(privK1));
PublicKey publicKey = KeyFactory.getInstance(""ECDH"", ""SC"").generatePublic(new X509EncodedKeySpec(pubK2));

Here comes my question - 
using the following code, I manage to get same shared secret for both Alice and Bob                 
keyAgreement.init(privateKey);
keyAgreement.doPhase(publicKey, true);

byte[] sharedSecret = SHA256(keyAgreement.generateSecret());

but I specify nowhere my special curve prime192v1
If I try to supply this in this way:
org.spongycastle.jce.spec.ECParameterSpec ecSpec = ECNamedCurveTable.getParameterSpec(""prime192v1"");

keyAgreement.init(privateKey, ecSpec);
keyAgreement.doPhase(publicKey, true);

byte[] sharedSecret = SHA256(keyAgreement.generateSecret());

an Exception is thrown saying
java.security.InvalidAlgorithmParameterException: No algorithm parameters supported

Why can't I supply my desired parameter? Does the KeyAgreement somehow deduce this from the private key?
Thanks!
","So it turns out I had the answer right there in front of me in the Android Studio debugger. Upon inspecting PrivateKey object I found internal member privateKey.ecSpec which contains all the details of selected curve. So passing arguments is unnecessary and throws an error, use the code without providing additional ecSpec
","381","<java><android><elliptic-curve><diffie-hellman><spongycastle>","1","1","1","2015-11-22 04:22:07","33851560","0","1","","","","2015-11-22 04:18:12",""
"31289849","Generating ECDSA public key at host side from W parameter","I want to send the public key of the private-public key pair (ECDSA) generated in my applet to the host application/terminal. 
In RSA normally i would send the modulus and exponent and will generate the public key at the host side.
In ECDSA i read from the link that we can do the same if you take the W parameter bytes outside the card Click here: Stackoverflow Answer: encode public key on Java
I have the W bytes from the card now. can someone suggest how to create the public key from this?
","I wrote this method to convert an EC Public key into java.security.interfaces.ECPublicKey key object. To do this I use Bouncy Castle provider (bcprov-ext-jdk16-1.46.jar). You can download the latest version from here.
/**
 * This method converts the EC public key (ECPublicKey#getW()) into ECPublicKey
 * @param cardPublicKey as W
 * @param curveName (for example ""P-224"")
 * @return java.security.interfaces.ECPublicKey
 */
public ECPublicKey ucPublicKeyToPublicKey(byte[] cardPublicKey, String curveName) {
    //for example curveName = ""P-224"";
    java.security.interfaces.ECPublicKey ecPublicKey = null; // java.security.interfaces.ECPublicKey
    java.security.KeyFactory kf = null;

    org.bouncycastle.jce.spec.ECNamedCurveParameterSpec ecNamedCurveParameterSpec = ECNamedCurveTable.getParameterSpec(curveName);
    org.bouncycastle.math.ec.ECCurve curve = ecNamedCurveParameterSpec.getCurve();
    java.security.spec.EllipticCurve ellipticCurve = EC5Util.convertCurve(curve, ecNamedCurveParameterSpec.getSeed());
    java.security.spec.ECPoint ecPoint = ECPointUtil.decodePoint(ellipticCurve, cardPublicKey);
    java.security.spec.ECParameterSpec ecParameterSpec = EC5Util.convertSpec(ellipticCurve, ecNamedCurveParameterSpec);
    java.security.spec.ECPublicKeySpec publicKeySpec = new java.security.spec.ECPublicKeySpec(ecPoint, ecParameterSpec);

    try {
        kf = java.security.KeyFactory.getInstance(""EC"", ""BC"");
    } catch (Exception e) {
        System.out.println(""Caught Exception kf : "" + e.toString());
    }

    try {
        ecPublicKey = (ECPublicKey) kf.generatePublic(publicKeySpec);
    } catch (Exception e) {
        System.out.println(""Caught Exception public key: "" + e.toString());
    }

    return ecPublicKey;
}

","376","<java><javacard><elliptic-curve><ecdsa>","3","2","1","2015-07-11 13:48:16","31301261","0","2","-1","","2017-05-23 12:29:46","2015-07-08 10:22:42",""
"50220443","How to verify X509Certificate with EC key using Bouncy Castle","With Bouncy Castle added as a provider, the following piece of code:
    private static boolean isSelfSigned(final X509Certificate cert) {

    try {

        final PublicKey key = cert.getPublicKey();

        cert.verify(key);

        return true;

    } catch (final RuntimeException re) {

        LOG.warn(re, ""isSelfSigned: error."");
        return false;
    } catch (final GeneralSecurityException gse) {

        LOG.warn(gse, ""isSelfSigned: error."");
        return false;
    }

}

Results in the following two errors depending on the implementation class of cert:
java.security.InvalidKeyException: Supplied key (org.bouncycastle.jcajce.provider.asymmetric.ec.BCECPublicKey) is not a RSAPublicKey instance

or
java.security.InvalidKeyException: Supplied key (sun.security.ec.ECPublicKeyImpl) is not a RSAPublicKey instance

Does Bouncy Castle not support verifying EC signed certificates?  There doesn't appear to be any parameters where I can indicate the keys are not RSA.  How do I verify an EC signed certificate using Bouncy Castle?
","This was a misunderstanding on my part.  The check fails because the certificate does in fact have an EC key, but the parent certificate has an RSA key.
","376","<java><bouncycastle><x509certificate><elliptic-curve>","0","0","1","2018-05-07 19:11:40","","0","","","","","2018-05-07 18:32:00",""
"50191059","Using Elliptic Curve Key Pair on Android","I need to use an Elliptic Curve Key pair on Android to sign and verify Strings. I use following code to generate the Key Pair
val parameterSpec = ECNamedCurveTable.getParameterSpec(""secp160r1"")

fun genKeyPair(): KeyPair{
    val keyPairGenerator = KeyPairGenerator.getInstance(
            ""EC"", ""SC"")
    keyPairGenerator.initialize(parameterSpec, SecureRandom())
    val keyPair: KeyPair = keyPairGenerator.genKeyPair()
    return keyPair
}

The App is written in Kotlin but I am happy about any Java-related answer too.
Does somebody know where I can find good resources or code examples?
","You can find good documentation from the Android developer website: https://developer.android.com/training/articles/keystore#kotlin
There are examples of how to generate, store in the Keystore, Sign and verify data.
EDITED
For example, to create a KeyPair
val kpg: KeyPairGenerator = KeyPairGenerator.getInstance(KeyProperties.KEY_ALGORITHM_EC,
    ""AndroidKeyStore"")
val parameterSpec: KeyGenParameterSpec = KeyGenParameterSpec.Builder(""alias"",
    KeyProperties.PURPOSE_SIGN).run {
    setDigests(KeyProperties.DIGEST_SHA256)
    build()
    }
kpg.initialize(parameterSpec)
val keyPair = kpg.generateKeyPair()

If you want to share your public key to a server 
val pubKey = keyPair.public
val pubKeyString = String(Base64.encode(pubKey.encoded, 0))

Sign Data
val signature: ByteArray = Signature.getInstance(""SHA256withECDSA"").run {
    initSign(privKey)
    update(data)
    sign()
    }

Verify Data
val valid: Boolean = Signature.getInstance(""SHA256withECDSA"").run {
    initVerify(pubKey)
    update(data)
    verify(signature)
    }

","370","<java><android><kotlin><sign><elliptic-curve>","2","0","1","2018-11-28 15:50:33","53522512","0","","9745870","","2018-05-05 15:29:49","2018-05-05 15:24:25",""
"39755865","Restrict Eliptic curve in sun JSSE (JDK 1.8)","Which EC ciphers should be selected to avoid - secp160k1 curve as its weaker one.
I am using jdk 1.8 with SunEC as JCA provider
","In some contexts, algorithms and key sizes can be restricted using the java.security file in the JRE, but there isn't a way to restrict EC curves using that method.
However, by specifying the curves you permit when you generate your keys, you are effectively restricting key agreement to those curves. If a particular curve is not permitted, you shouldn't have a key pair to support it.
","354","<ssl><java-8><public-key-encryption><elliptic-curve><jsse>","0","2","1","2016-09-28 20:55:12","","5","","1493834","","2016-09-28 19:20:54","2016-09-28 19:14:12",""
"12684663","Is there any Elliptic Curve algorithm equivalent to RSA's asymmetric encryption?","I've been searching but I cant find anything about this... only EC Diffie-Hellman with symmetric cryptography, which is exactly what I do not want :(
Imagine this: 

generate a random private key, k
then calculate a ""public key"" with ECC, d=kG

The algorithm I'm looking for is this: any message cyphered with the public key will ""only"" be decyphered by the owner of the private key.
Does this exists? Has anything like this been developed yet?
","You could try ecc (pip install ecc)
from ecc.Key.Key import Key

# Create keypair
k=Key.generate(521)

# Encode public key
pub=k.encode()

# Encode private key
priv=k.encode(include_private=True)

# Decode public key
pubK=Key.decode(pub)

# Decode private key
privK=Key.decode(priv)

# Encrypt message
msg=pubK.encrypt(""Test"")

# Decrypt message
print privK.decrypt(msg)

","352","<elliptic-curve>","2","0","2","2013-06-26 10:11:51","","1","","","","","2012-10-02 04:45:11",""
"12684663","Is there any Elliptic Curve algorithm equivalent to RSA's asymmetric encryption?","I've been searching but I cant find anything about this... only EC Diffie-Hellman with symmetric cryptography, which is exactly what I do not want :(
Imagine this: 

generate a random private key, k
then calculate a ""public key"" with ECC, d=kG

The algorithm I'm looking for is this: any message cyphered with the public key will ""only"" be decyphered by the owner of the private key.
Does this exists? Has anything like this been developed yet?
","Actually, El Gamal scheme, being based on Diffie–Hellman key exchange, presumes an asymmetric encryption algorithm, with private and public keys, so you should consider this. Computing the public key in this scheme will be as difficult as computing the discrete logarithm in the group.
","352","<elliptic-curve>","2","0","2","2013-06-26 10:11:51","","1","","","","","2012-10-02 04:45:11",""
"33198362","Using public key coordinate with Crypto++'s ECDH class","I'm using crypto++ for ECDH key agreement
ECDH.Agree(key, privateKey, outherpublicKey);

Given that for public key I have only X and Y coordinates. How to generate publicKey from this values ?
ECDH.Agree(key,privateKey, getPublicKey(X,Y))

Thanks in advance
","
Given that for public key I have only X and Y coordinates. How to generate publicKey from this values?
ECDH.Agree(key,privateKey, getPublicKey(X,Y))

{x,y} is a point on the curve, but its never been easy to work with it directly.
This is all we really want to do but it does not work. The problem is ECDH::Domain are only domain parameters. The public point and the private exponent are layered on top.
OID curve = ASN1::secp256r1();
DL_GroupParameters_EC<ECP> params(curve);

Integer x(""..."");
Integer y(""..."");
ECP::Point q(x, y);

DL_PublicKey_EC<ECP> pubKey;
pubKey.Initialize(params, q);

ECDH < ECP >::Domain theirs(pubKey);

To further complicate matters, the keys produced by the ECDH protocol are temporary or ephemeral. They are not meant to be persisted; rather, they are meant to be used once and discarded. So Crypto++ does not make it easy to persist them (by, say, providing a DEREncode).
Analysis
To use the {x,y} coordinate, we need to figure out how the library is using it. The ephemeral public and private keys are created in pubkey.h around line 1380. The code for them is below:
void GeneratePrivateKey(RandomNumberGenerator &rng, byte *privateKey)
{
    Integer x(rng, Integer::One(), GetAbstractGroupParameters().GetMaxExponent());
    x.Encode(privateKey, PrivateKeyLength());
}

void GeneratePublicKey(RandomNumberGenerator &rng, const byte *privateKey, byte *publicKey)
{
    const DL_GroupParameters<T> &params = GetAbstractGroupParameters();
    Integer x(privateKey, PrivateKeyLength());
    Element y = params.ExponentiateBase(x);
    params.EncodeElement(true, y, publicKey);
}

The line of interest above is the params.EncodeElement(true, y, publicKey). To see what's going on there, we need to look at eccrypto.h around line 70, and note that reversible is true:
void EncodeElement(bool reversible, const Element &element, byte *encoded)
{
    if (reversible)
        GetCurve().EncodePoint(encoded, element, m_compress);
    else
        element.x.Encode(encoded, GetEncodedElementSize(false));
}

params.EncodeElement calls ECP::EncodePoint. To see what that does we can examine ecp.cpp around line 120. The routine writes a uncompressed point, but blocks x and y on the maximum size of the public element, which should be the field size or the subgroup order.
void ECP::EncodePoint(BufferedTransformation &bt, const Point &P, bool compressed)
{
    if (P.identity)
        NullStore().TransferTo(bt, EncodedPointSize(compressed));
    else if (compressed)
    {
        bt.Put(2 + P.y.GetBit(0));
        P.x.Encode(bt, GetField().MaxElementByteLength());
    }
    else
    {
        unsigned int len = GetField().MaxElementByteLength();
        bt.Put(4);      // uncompressed
        P.x.Encode(bt, len);
        P.y.Encode(bt, len);
    }
}

Don't worry too much about the BufferedTransformation. There are ways to turn a byte[] into one, and it happened before the code shown above. If you trace the code, you will see its transformed via an ArraySource:
byte myArray[PublicEphemeralKeyLength()];
ArraySource as(myArray, COUNTOF(myArray));

Above, as is a BufferedTransformation that wraps the byte[] you passed into the function.
The final open question is the maximum size of the field element. That appears to be the modulus size less one, in bytes:
$ grep -I -A 1 MaxElementByteLength modarith.h 
    unsigned int MaxElementByteLength() const
        {return (m_modulus-1).ByteCount();}

Agreement
Given the above information, here's what you should do. You need to supply the values for x and y in ECP::Point q(x,y). They are just Crypto++ Integers.
OID curve = ASN1::secp256r1();
DL_GroupParameters_EC<ECP> params(curve);

size_t size = params.GetEncodedElementSize(true);
vector<byte> othersPublicKey(size);

ECP::Point q(x,y);
params.EncodeElement(true, q, &othersPublicKey[0]);

Then you can call:
ecdh.Agree(key, myPrivateKey, &othersPublicKey[0]);

One note: params.GetEncodedElementSize(true) should equal PublicEphemeralKeyLength(). If they are not equal, then something is wrong.

If you need to modify compression, then you can:
params.SetPointCompression(true);


I'll get this added to Crypto++'s Elliptic Curve Diffie-Hellman wiki page so others don't have to go rummaging for it.
","348","<c++><crypto++><elliptic-curve><diffie-hellman>","1","0","1","2015-10-19 17:46:49","33206001","3","","608639","","2015-10-19 17:46:49","2015-10-18 13:19:28",""
"30006673","SJCL key generation","for my website ""moneyart.info"" I want to generate ECC public and private keys with JavaScript library sjcl. I tried following code:
*
crypto_keys = sjcl.ecc.elGamal.generateKeys(256);
var public_key = crypto_keys.pub.get();
var secret_key = crypto_keys.sec.get();

var public_key_hex = sjcl.codec.hex.fromBits(public_key.x) + sjcl.codec.hex.fromBits(public_key.y);
var secret_key_hex = sjcl.codec.hex.fromBits(secret_key);               

alert(secret_key_hex);*

I get the error message: 
TypeError: sjcl.ecc is undefined
I think I have to construct a class with new, but I dont know which one.
","I found the mistake: ecc.elGamal is no standard sjcl function. I have to compile the sjcl.js file manually with additional functionality included. blog.peramid.es
","329","<javascript><elliptic-curve><sjcl>","0","0","1","2015-05-17 21:30:04","30292351","1","","","","","2015-05-02 19:40:49",""
"9661963","how to retrieve value from an object-java","i need to know how to access value of an object..for example in my code
`
public static void main(String[] args) throws  Exception {
        Security.addProvider(new BouncyCastleProvider());
      BigInteger ZERO=new BigInteger(""0"");
       int c;
     ECCurve curve = new ECCurve.Fp(
            newBigInteger(""883423532389192164791648750360308885314476597252960362792450860609699839""), // q new BigInteger(""7fffffffffffffffffffffff7fffffffffff8000000000007ffffffffffc"", 16), // a new BigInteger(""6b016c3bdcf18941d0d654921475ca71a9db2fb27d1d37796185c2942c0a"", 16)); // b

ECParameterSpec ecSpec = new ECParameterSpec(
           curve,
            curve.decodePoint( Hex.decode(""020ffa963cdca8816ccc33b8642bedf905c3d358573d3f27fbbd3b3cb9aaaf"")), // G
            new BigInteger(""883423532389192164791648750360308884807550341691627752275345424702807307"")); // n
KeyPairGenerator kpg = KeyPairGenerator.getInstance(""ECDSA"", ""BC"");
kpg.initialize(ecSpec, new SecureRandom());
KeyPair keyPair = kpg.generateKeyPair();
PublicKey pubKey = keyPair.getPublic();
System.out.println(pubKey);
PrivateKey privKey = keyPair.getPrivate();
System.out.println(privKey);`

int y=numNoRange+p;//where p is value of privatekey..here along with the number i need to add privatekey  value,but private is object,so i need to know how to retrieve value from the object..Thank you..
","if you know what kind of an object p is; then just cast it. then get the value
here is a simple example of casting from double to int
double d = 3.5;
int x = (int) d;

","323","<java><object><elliptic-curve>","0","0","2","2013-02-21 20:09:20","","1","","","","","2012-03-12 04:59:28",""
"9661963","how to retrieve value from an object-java","i need to know how to access value of an object..for example in my code
`
public static void main(String[] args) throws  Exception {
        Security.addProvider(new BouncyCastleProvider());
      BigInteger ZERO=new BigInteger(""0"");
       int c;
     ECCurve curve = new ECCurve.Fp(
            newBigInteger(""883423532389192164791648750360308885314476597252960362792450860609699839""), // q new BigInteger(""7fffffffffffffffffffffff7fffffffffff8000000000007ffffffffffc"", 16), // a new BigInteger(""6b016c3bdcf18941d0d654921475ca71a9db2fb27d1d37796185c2942c0a"", 16)); // b

ECParameterSpec ecSpec = new ECParameterSpec(
           curve,
            curve.decodePoint( Hex.decode(""020ffa963cdca8816ccc33b8642bedf905c3d358573d3f27fbbd3b3cb9aaaf"")), // G
            new BigInteger(""883423532389192164791648750360308884807550341691627752275345424702807307"")); // n
KeyPairGenerator kpg = KeyPairGenerator.getInstance(""ECDSA"", ""BC"");
kpg.initialize(ecSpec, new SecureRandom());
KeyPair keyPair = kpg.generateKeyPair();
PublicKey pubKey = keyPair.getPublic();
System.out.println(pubKey);
PrivateKey privKey = keyPair.getPrivate();
System.out.println(privKey);`

int y=numNoRange+p;//where p is value of privatekey..here along with the number i need to add privatekey  value,but private is object,so i need to know how to retrieve value from the object..Thank you..
","PublicKey is a base class for representing a public key of an asymmetric cryptographic algorithm. By it's nature it's rather a structure, than a single value.
For example, if you work with RSA algorithm, then you can cast your public key to
RSAPublicKey and then access modulus and exponent.
if (pubKey instanceof RSAPublicKey) {
    RSAPublicKey rsaPubKey = (RSAPublicKey)pubKey;
    BigInteger modulus = rsaPubKey.getModulus();
    BigInteger exponent = rsaPubKey.getPublicExponent();
    System.out.println(""Modulus "" + modulus.toString());
    System.out.println(""Exponent "" + exponent.toString());
}

For elliptic curve cryptography the key consist of two values - parameters of an elliptic curve affineX and affineY
if (pubKey instanceof ECPublicKey) {
    ECPublicKey ecPubKey = (ECPublicKey)pubKey;
    ECPoint point = ecPubKey.getW();
    BigInteger affineX = point.getAffineX();
    BigInteger affineY = point.getAffineY();
    System.out.println(""Affine X "" + affineX.toString());
    System.out.println(""Affine Y "" + affineY.toString());
}

The same way internal structure of PrivateKey can be accessed.
","323","<java><object><elliptic-curve>","0","0","2","2013-02-21 20:09:20","","1","","","","","2012-03-12 04:59:28",""
"27985906","Understanding ECC in PERL","I'm trying to understand elliptic curve cryptography by coding the algorithm in perl. But getting detailed information about implementing ECC is quite difficult.
So I gathered all informations together and started coding. 
At first I searched for informations about a simple curve and I found it here: http://www.hjp.at/doc/rfc/rfc5639.html. Several curves from 160 upto 512 bits. Of course I started with the smallest one.
EDIT: Made a lot of mistakes, mostly due to the lack of information. But now this example works.
This is my perl script:
use bignum;
use Math::BigInt::Random;

my $p = hex ""E95E4A5F737059DC60DFC7AD95B3D8139515620F"";
my $a = hex ""340E7BE2A280EB74E2BE61BADA745D97E8F7C300"";
my $b = hex ""1E589A8595423412134FAA2DBDEC95C8D8675E58"";
my $x = hex ""BED5AF16EA3F6A4F62938C4631EB5AF7BDBCDBC3"";
my $y = hex ""1667CB477A1A8EC338F94741669C976316DA6321"";
my $q = hex ""E95E4A5F737059DC60DF5991D45029409E60FC09"";
my $bitLength = 160;

sub point_doubling {
    my ($px, $py) = @_;
    return $px, $py if $px == 0 && $py == 0;
    my $slope_numerator = 3 * $px * $px + $a;
    my $slope_denominator = 2 * $py;
    my $slope_denominator_inverse_modulo = $slope_denominator->bmodinv($p);
    my $slope_inverse_product = $slope_numerator * $slope_denominator_inverse_modulo;
    my $slope = $slope_inverse_product % $p;
    my $rx = (($slope * $slope - 2 * $px)) % $p;
    my $ry = (($slope * ($px - $rx) - $py)) % $p;
    return ($rx, $ry);
}

sub point_addition {
    my ($px, $py, $qx, $qy) = @_;
    return point_doubling($px, $py) if $px == $qx && $py == $qy;
    return $px, $py if $qx == 0 && $qy == 0;
    return $qx, $qy if $px == 0 && $py == 0;
    my $slope_numerator = $qy - $py;
    my $slope_denominator = $qx - $px;
    my $slope_denominator_inverse_modulo = $slope_denominator->bmodinv($p);
    my $slope_inverse_product = $slope_numerator * $slope_denominator_inverse_modulo;
    my $slope = $slope_inverse_product % $p;
    my $rx = (($slope * $slope - $px - $qx)) % $p;
    my $ry = (($slope * ($px - $rx) - $py)) % $p;
    return ($rx, $ry);
}

sub scalar_product {
    my ($k, $nx, $ny) = @_;
    my ($qx, $qy) = (0, 0);
    my $bit = 1;
    for my $bitCounter (1..$bitLength) {
        if ($k & $bit) {
            ($qx, $qy) = point_addition($nx, $ny, $qx, $qy);
        } 
        ($nx, $ny) = point_doubling($nx, $ny);
        $bit <<= 1;
    }
    return ($qx, $qy);
}

sub check_point_on_curve {
my ($qx, $qy) = @_;
return $qy * $qy % $p == ($qx * $qx * $qx + $a * $qx + $b) % $p ||
    $qy == 0 && $qx == 0;
}

print ""Test if G is in curve:\n"";
if (check_point_on_curve($x, $y)) {
    print ""G is a point on the curve\n"";
} else {
    die ""ERROR: G is NOT a point on the curve\n"";
}

# Creating the private key.
# 1.) A random integer dA with 0 < dA < q
my $dA = random_bigint(max => $q);

print ""Private key chosen as $dA\n"";

# 2.) Calculate the public key QA
my ($qax, $qay) = scalar_product($dA, $x, $y);

print ""Public key calculated to ($qax, $qay)\n"";

if (check_point_on_curve($qax, $qay)) {
    print ""Public key is a point on the curve\n"";
} else {
    die ""ERROR: Public key is NOT a point on the curve\n"";
}

The result looks likle this:
Test if G is in curve:
G is a point on the curve
Private key chosen as 14682691932678591389241030591930855095113892
Public key calculated to (1114548639616364108201749083649167655259366359581, 418437095262665064210367316915287142897094980157)
Public key is a point on the curve

Thanks for all your help.
","","305","<perl><elliptic-curve>","2","","0","2015-01-19 11:01:55","","3","1","2682133","","2015-01-19 11:01:55","2015-01-16 14:16:44",""
"20781563","How can I recover compressed y value from sender?","I am working on following scenario:

Generate private and public key
Generate compressed public key with:
PublicKey.AccessGroupParameters().SetPointCompression(true)
Sign some data and send to other end with compressed public key.
[At other end] verify signature using public key

For step 4, I need recover y value. Is there some API I can use among Crypto++?
","
For step 4, I need recover y value. Is there some API I can use among Crypto++?

During verification, you will load the persisted or serialized key after setting point compression to true.

Below is a little program to experiment with point compression. You can find it on the Crypto++ wiki under Point Compression.
It generates a random key, then creates two public key - one with and and without compression. They two public keys are serialized. Then, it loads two new public keys with the serialized values.
Key 1 (no compress) and Key 2 (compress) and saved, then Key 3 (no compress) and Key 4 (no compress) are loaded from saved values. The keys are the same, and the output is:
$ ./cryptopp-test.exe
Key 1 size (no compression): 214
  3081D33081A406072A8648CE3D0201308198020101302006072A8648CE3D0101021500FFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFF7FFFFFFF302C0414FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFC0414
1C97BEFC54BD7A8B65ACF89F81D4D4ADC565FA450429044A96B5688EF573284664698968C38BB913CB
FC8223A628553168947D59DCC912042351377AC5FB3202150100000000000000000001F4C8F927AED3
CA752257020101032A0004CBFD13CEB20D677D9D3781AFA2E66B7BD5BC0E3C4EB8702144AA62BE5235
DFC691567AA2A7101AB1

Key 2 size (compression): 174
  3081AB30819006072A8648CE3D0201308184020101302006072A8648CE3D0101021500FFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFF7FFFFFFF302C0414FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFC0414
1C97BEFC54BD7A8B65ACF89F81D4D4ADC565FA450415024A96B5688EF573284664698968C38BB913CB
FC8202150100000000000000000001F4C8F927AED3CA75225702010103160003CBFD13CEB20D677D9D
3781AFA2E66B7BD5BC0E3C

Key 3 (after deserialization of Key 1):
  y3.x: cbfd13ceb20d677d9d3781afa2e66b7bd5bc0e3ch
  y3.y: 4eb8702144aa62be5235dfc691567aa2a7101ab1h
Key 4 (after deserialization of Key 2):
  y4.x: cbfd13ceb20d677d9d3781afa2e66b7bd5bc0e3ch
  y4.y: 4eb8702144aa62be5235dfc691567aa2a7101ab1h

Here's the program to create, copy, save, load, compress, uncompress and serialize the keys and points.
#include <iostream>
using std::cout;
using std::endl;

#include <string>
using std::string;

#include <cryptopp/osrng.h>
using CryptoPP::AutoSeededRandomPool;

#include <cryptopp/secblock.h>
using CryptoPP::SecByteBlock;

#include <cryptopp/filters.h>
using CryptoPP::StringSource;
using CryptoPP::StringSink;

#include <cryptopp/hex.h>
using CryptoPP::HexEncoder;

#include <cryptopp/sha.h>
using CryptoPP::SHA1;

#include <cryptopp/integer.h>
using CryptoPP::Integer;

#include <cryptopp/eccrypto.h>
using CryptoPP::ECP;
using CryptoPP::ECDSA;

#include <cryptopp/oids.h>
using CryptoPP::ASN1::secp160r1;

int main(int argc, char* argv[])
{
    AutoSeededRandomPool prng;

    // Generate a private key, and two public keys.
    //   One with and one without compression
    ECDSA<ECP, SHA1>::PrivateKey privateKey;
    privateKey.Initialize(prng, secp160r1());

    ECDSA<ECP, SHA1>::PublicKey publicKey1;
    privateKey.MakePublicKey(publicKey1);

    ECDSA<ECP, SHA1>::PublicKey publicKey2;
    privateKey.MakePublicKey(publicKey2);
    publicKey2.AccessGroupParameters().SetPointCompression(true);

    // Save the public keys
    string p1, p2;
    publicKey1.Save(StringSink(p1).Ref());
    publicKey2.Save(StringSink(p2).Ref());

    // Print some stuff about them
    string s3, s4;
    StringSource ss3(p1, true, new HexEncoder(new StringSink(s3)));
    StringSource ss4(p2, true, new HexEncoder(new StringSink(s4)));

    cout << ""Key 1 (not compressed): "" << p1.size() << "" bytes"" << endl;
    cout << ""  "" << s3 << endl;
    cout << ""Key 2 (compressed): "" << p2.size() << "" bytes"" << endl;
    cout << ""  "" << s4 << endl;
    cout << endl;

    // Two new keys to load up the persisted keys
    ECDSA<ECP, SHA1>::PublicKey publicKey3, publicKey4;
    publicKey4.AccessGroupParameters().SetPointCompression(true);

    publicKey3.Load(StringSource(p1, true).Ref());
    publicKey4.Load(StringSource(p2, true).Ref());

    // And validate them
    publicKey3.Validate(prng, 3);
    publicKey4.Validate(prng, 3);

    // Get the public elements of the loaded keys
    const ECP::Point& y3 = publicKey3.GetPublicElement();
    const Integer& y3_x = y3.x;
    const Integer& y3_y = y3.y;

    const ECP::Point& y4 = publicKey4.GetPublicElement();
    const Integer& y4_x = y4.x;
    const Integer& y4_y = y4.y;

    // Print some stuff about them
    cout << ""Key 3 (after deserialization of Key 1):"" << endl;
    cout << ""  y3.x: "" << std::hex << y3_x << endl;
    cout << ""  y3.y: "" << std::hex << y3_y << endl;
    cout << ""Key 4 (after deserialization of Key 2):"" << endl;
    cout << ""  y4.x: "" << std::hex << y4_x << endl;
    cout << ""  y4.y: "" << std::hex << y4_y << endl;
    cout << endl;

    return 0;
}


You can even cross wires when loading the serialized keys and it just works. Below, the compressed key was loaded from a non-compressed serialization (and vice-versa):
//////////////////////////////////////////////////////////////////////
// Two new keys to load up the persisted keys, but crossing wires
//   so so there's a compress/uncompressed mismatch
ECDSA<ECP, SHA1>::PublicKey publicKey5, publicKey6;
publicKey6.AccessGroupParameters().SetPointCompression(true);

// This should be `p1`
publicKey5.Load(StringSource(p2, true).Ref());
// This should be `p2`
publicKey6.Load(StringSource(p1, true).Ref());

// Get the public elemnts of the loaded keys
const ECP::Point& y5 = publicKey5.GetPublicElement();
const Integer& y5_x = y5.x;
const Integer& y5_y = y5.y;

const ECP::Point& y6 = publicKey6.GetPublicElement();
const Integer& y6_x = y6.x;
const Integer& y6_y = y6.y;

// Print some stuff about them
cout << ""Key 5 (after deserialization of Key 1):"" << endl;
cout << ""  y5.x: "" << std::hex << y5_x << endl;
cout << ""  y5.y: "" << std::hex << y5_y << endl;
cout << ""Key 6 (after deserialization of Key 2):"" << endl;
cout << ""  y6.x: "" << std::hex << y6_x << endl;
cout << ""  y6.y: "" << std::hex << y6_y << endl;
cout << endl;


If you want to get at the underlying domain parameters (like the base point), use:
const DL_GroupParameters_EC< ECP >& params = publicKey.GetGroupParameters()

","297","<signing><elliptic-curve><crypto++><ecdsa><compression>","1","3","1","2019-02-01 11:30:57","21036981","0","","608639","","2015-10-19 17:42:13","2013-12-26 08:23:25",""
"35278662","Elliptic Curve Multiplication","I am having trouble getting the correct results when performing multiplication of elliptic curve points. I have been able to get addition working but when trying to multiply a point I am confused on the proper way to add to the previous values. I also am doing this without Javas EC points.
Example:
Expected: 12(2,7)=(153,36)
Results:  12(2,7)=(55,121)
private static int a = 11;
private static int mod = 167;

public static void main(String[] args) {

    int[] p1 = { 2, 7 };
    int[] p2 = addPoints(new int[] { 1, 4 }, new int[] { 3, 1 });
    System.out.println(""ADDING: ("" + p2[0] + "","" + p2[1] + "")"");

    int[] p3 = multiplyPoint(12, p1);

    System.out.println(""MULTIPLYING: ("" + p3[0] + "","" + p3[1] + "")"");

}

public static int[] multiplyPoint(int iterations, int[] point) {
    int[] newPoint = new int[2];

    for (int i = 1; i < iterations; i++) {

        System.out.println(""("" + newPoint[0] + "","" + newPoint[1] + "")"");
        newPoint = addPoints(newPoint, point);
    }

    return newPoint;
}

public static int[] addPoints(int[] p1, int[] p2) {
    int[] p3 = { 0, 0 };

    int m;
    if (p1[0] == p2[0] && p1[1] == p2[1])
        m = mod(((3 * p1[0] * p1[0]) + a) / (2 * p1[1]), mod);
    else
        m = mod((int) p2[1] - p1[1], mod) / mod(p2[0] - p1[0], mod);

    p3[0] = mod((int) (Math.pow(m, 2) - p1[0] - p2[0]), mod);
    p3[1] = mod((m * (p1[0] - p3[0]) - p1[1]), mod);

    return p3;
}

/**
 * Used because Java's default modulus operator does not give the correct
 * value for negative numbers
 * 
 * @param value
 *            Number to perform the mod operation on
 * @param divisor
 *            Mod by
 * @return The modulus of number mod divisor... Should now work for any
 *         number
 */
public static int mod(int value, int divisor) {
    return ((value % divisor + divisor) % divisor);
}

Thanks
EDIT: 
Still unsuccessful 
public static int[] multiplyPoint(int iterations, int[] point) {
    int[] newPoint = new int[2];
    String binary = Integer.toBinaryString(iterations);
    System.out.println(binary);

    for (int i = 0; i < binary.length(); i++) {

        System.out.println(""("" + newPoint[0] + "","" + newPoint[1] + "")"");

        if (binary.charAt(i) == '1')
            newPoint = addPoints(newPoint, point);
        point = doublePoint(point);

    }

    return newPoint;
}

public static int[] doublePoint(int[] point) {
    int[] newPoint = new int[2];

    int m = mod(((3 * point[0] * point[0]) + a) / (2 * point[1]), mod);
    newPoint[0] = mod((int) (Math.pow(m, 2) - point[0] - point[0]), mod);
    newPoint[1] = mod((m * (point[0] - newPoint[0]) - point[1]), mod);

    return newPoint;
}

public static int[] addPoints(int[] p1, int[] p2) {
    int[] p3 = new int[2];

    int m = mod((int) p2[1] - p1[1], mod) / mod(p2[0] - p1[0], mod);

    p3[0] = mod((int) (Math.pow(m, 2) - p1[0] - p2[0]), mod);
    p3[1] = mod((m * (p1[0] - p3[0]) - p1[1]), mod);

    return p3;
}

","","296","<java><multiplication><elliptic-curve>","2","","0","2016-02-09 01:13:42","","3","","5632055","","2016-02-09 01:13:42","2016-02-08 20:27:21",""
"9271742","Addition of random number and private key using ECC","I have generated keys using ECC. I need to add random number and secret key i.e x=r+s. Here's my code:
  KeyPairGenerator kpg = KeyPairGenerator.getInstance(""ECDSA"", ""BC"");
  kpg.initialize(ecSpec, new SecureRandom());
  KeyPair keyPair = kpg.generateKeyPair();
  PublicKey pubKey = keyPair.getPublic();
  System.out.println(pubKey);
  PrivateKey privKey = keyPair.getPrivate();
  System.out.println(privKey);
  Random rand = new Random();
  int numNoRange = rand.nextInt();

Now I need to add x=numNoRange+privkey; but I couldn't add it. Any suggestions for new ideas? 
","You can extract the BigInteger by casting the private key to an ECPrivateKey like the following example:
    BigInteger s = ((ECPrivateKey) privKey).getS();

","287","<elliptic-curve>","-2","0","1","2012-02-16 00:49:23","","1","","238704","","2012-02-15 23:43:21","2012-02-14 04:32:18",""
"47214027","Is secp256k1 really a field?","I know my algebra is rusty, but isn't the following an identity operation: multiplying an element of a GF by the cardinal of the field (the modulus)? I wrote a program to verify it but couldn't:
from ecpy.curves import Curve, Point  # I use Python 2.7

def bin256(num):
  """"""binary conversion, returns a binary string, MSB first and LSB last""""""
  return '{:0256b}'.format(num)

def ec_multiply(P, d):
  """"""double-and-add algo. Index decreasing, same naming as Wikipedia:
     P is a point on the curve
     d is a long
     returns P*d""""""
  Q = None
  for bit in map(int, bin256(d)):
    if Q is not None:
      Q = Q + Q
    if bit:
      if Q is None:
        Q = P
      else:
        Q = Q + P
  return Q

def main():
  """"""Picks a random point on secp256k1 and multiply it by the modulus 
     of secp256k1 and print the result.""""""
     cv = Curve.get_curve('secp256k1')
     N = Point(0x65d5b8bf9ab1801c9f168d4815994ad35f1dcb6ae6c7a1a303966b677b813b00,
               0xe6b865e529b8ecbf71cf966e900477d49ced5846d7662dd2dd11ccd55c0aff7f, cv)
  MODULUS = 2**256 - 2**32 - 2**9 - 2**8 - 2**7 - 2**6 - 2**4 - 1

  Q = ec_multiply(N, MODULUS)
  print 'Q: %064x %064x' % (Q.x, Q.y)

if __name__ == '__main__':
  main()

But I get a different point:
Q: d113d66bf911fbf026b2a3e24c96bba45ca2d2b130cbf312a36e584249153090 56cabae3704f1c5a7957cbb1d9e2f6198337c59c02b2974d32fb7501b7e287d2

I expected Q: 65d5b8bf..., e6b865e5... instead.
Any idea why multiplying by the modulus is not working in secp256k1? Thanks in advance.
Notes:

I am using the python elliptic curve library ecpy which just works, I've tested against another library (py_ecc, pure python) and I get consistent results.
The multiplication over secp256k1 uses the double-and-add algo from Wikipedia where the index is decreasing because I start from the MSB.
I use this excellent paper that explains everything about EC and how to implement them.

","","277","<python><elliptic-curve>","1","","0","2017-11-10 10:11:31","","5","","3082296","","2017-11-10 10:11:31","2017-11-10 00:44:59",""
"29231792","Point zero on an elliptic curve","I am working on a library that allows me to work with elliptic curves. It is still at embryonic state, and so far it only consists of two classes, EllipticCurve and Point.
Right now I'm implementing the basic operations of existence, belonging, sum, reflection, etc.
Unfortunately, I'm stuck now that I have to implement the concept of zero, i.e., the point of the elliptic curve E crossing the line through P and -P, where P = (x,y) and -P = (x,-y). So, my question could be rephrased as ""how do I implement a point at infinity?""
Here's part of the Point class so far:
public class Point implements Comparable<Point> {
    private static final BigDecimal MINUSONE = new BigDecimal(-1);

    private BigDecimal x;
    private BigDecimal y;
    private EllipticCurve e;

    public Point(BigDecimal x, BigDecimal y, EllipticCurve e) {
        if(x != null && y != null && e != null) {
            if(liesOn(x,y,e)) {
                this.x = x;
                this.y = y;
                this.e = e;
            }
        }
    }

    public Point reflect() {
        return new Point(x,y.multiply(MINUSONE),e);
    }

    public Point add(Point o) {
        if(this.e == o.getE()) {
            if(this == o) {
                return this.multiply(2);
            }
            if(o == this.reflect()) {
                return /*THE INFAMOUS ZERO POINT*/;
            }

            BigDecimal a;
            BigDecimal b;

            /*
             * computation I still haven't implemented
             */

            return new Point(a,b,e);
        }
    }
    /*
     * other methods
     */
}

P.S.: I am aware of the existence of java.security.spec.EllipticCurve, but since I'm going to use this class mostly for mathematical purposes, I felt the need to create my personal library ex novo.
","There is no way to represent infinity per se using BigDecimal. The only way in Java I know is:
Double.POSITIVE_INFINITY;

or Integer, Float etc. You also can't take valueOf from the above, since it will throw a NumberFormatException. 
You can use a workaround, i. e. a very large value that you know will always be larger than any other. 
","276","<java><elliptic-curve>","1","1","1","2015-03-26 10:55:33","","0","","2587422","","2015-03-26 10:34:37","2015-03-24 11:43:33",""
"48559711","Named curves or domain parameters when creating an EC CSR","I'm creating CSRs for new certificates using OpenSSL. For modern compatibility, I've gone with EC (secp521r1) certificates. While googling around, I found two different ways of creating the CSR.
I can create a private key explicitly
openssl ecparam -name secp521r1 -genkey -param_enc explicit -out private.key
openssl req -new -sha256 -nodes -key private.key -out sslcert.csr -config san.cnf

or I can create a private key with the request
openssl ecparam -name secp521r1 > ec.file
openssl req -new -sha256 -nodes -newkey ec:ec.file -keyout private.key -out sslcert.csr -config san.cnf

Both of these methods seem to create valid CSR files (I have tested them here).
My question is whether one of the methods above is better/safer? I noticed that the private key file generated by the first method is larger, and so is the CSR file.
For example, when I inspect the CSR using openssl req -noout -text -in sslcert.csr, the CSR generated by the first method contains much more detailed information about the key, with a section for pub, Prime, A, B, Generator, Order, Cofactor, Seed, but there is no mention of secp521r1.
However, the CSR generated by the second method contains only pub and a ASN1 OID: secp521r1. Are these differences important if I'm creating certificates for HTTPS use?
Many thanks!
","
For example, when I inspect the CSR using openssl req -noout -text -in
  sslcert.csr, the CSR generated by the first method contains much more
  detailed information about the key, with a section for pub, Prime, A,
  B, Generator, Order, Cofactor, Seed, but there is no mention of
  secp521r1.

These are called ""domain parameters"". They explicitly list the modulus, the coefficients, the generator, the public point, etc.

However, the CSR generated by the second method contains only pub and
  a ASN1 OID: secp521r1. Are these differences important if I'm creating
  certificates for HTTPS use?

A name like ASN1 OID: secp521r1 is called a ""named curve"".
The IETF's PKIX and TLS working group say domain parameters and named curves are not the same thing. The PKIX group is responsible for the internet's PKI and certificates. There have been several discussions about this on the TLS working group mailing lists.
If you don't use a named curve, then your clients and servers will fail to connect to one another even the the domain parameters and named curves are equivalent. You will get errors similar to ""no shared cipher suites"" which will result in a TLS alert.
Here are the errors you get when using s_client and s_server during testing if you mix and match domain parameters with named curves:
Client (s_client):
139925962778272:error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure:s3_pkt.c:1256:SSL alert number 40
139925962778272:error:1409E0E5:SSL routines:SSL3_WRITE_BYTES:ssl handshake failure:s3_pkt.c:596:

Server (s_server):
140339533272744:error:1408A0C1:SSL routines:SSL3_GET_CLIENT_HELLO:no shared cipher:s3_srvr.c:1353:

For interoperability you should always explicitly set named_curve. Also see Elliptic Curve Cryptography | Named Curves on the OpenSSL wiki.


Both of these methods seem to create valid CSR files (I have tested them here).

They kind of do, but they don't inter-operate well if they are mixed/matched.


For modern compatibility, I've gone with EC (secp521r1) certificates...

I have not surveyed it recently, but secp256r1 is (was?) the most popular one. That may have changed but I don't recall reading it anywhere. Maybe a scan of the Alexis top 1 Million will give you an idea or answer.
The 2016 paper TLS in the wild: An Internet-wide analysis of TLS-based protocols for electronic communication says:

Looking at the elliptic curves that are used in ECDHE key exchanges
  reveals that  97.2% of connections use the secp256r1 curve, followed
  by 2% using secp384r1 and 0.78% using sect571r1.

","266","<ssl><https><openssl><elliptic-curve><csr>","0","1","1","2018-02-01 22:13:20","48571811","4","","608639","","2018-02-01 21:15:54","2018-02-01 09:48:58",""
"53534454","How to work with elliptic curve SECP256K1 key in Azure Key Vault when the key is used also by a blockchain","I'm wondering how to work with SECP256K1 keys within Azure Key Vault when at the same time the key is also required for account creation on a blockchain.
WHAT HAS TO BE ACHIEVED

Generate SECP256K1 key pair
Use public key for account creation on a blockchain
Store private key to Key Vault and use it for signing purposes

ATTEMPT #1 - GENERATE OUTSIDE KEY VAULT AND IMPORT
I have generated SECP256K1 key pair outside Key Vault. As a result I have private key and public key available as strings.
My idea was to import the private key to Key Vault with help of Azure SDK for.NET wia following piece of code (ECParameters used are from Microsoft.Azure.KeyVault.WebKey.ECParameters namespace):
  //this part of code is taken from https://www.scottbrady91.com/C-Sharp/JWT-Signing-using-ECDSA-in-dotnet-Core
  var privateKeyBytes = Encoding.UTF8.GetBytes(privateKey);
  var privateKeyInt =
    new Org.BouncyCastle.Math.BigInteger(+1, privateKeyBytes);
  var parameters = SecNamedCurves.GetByName(""secp256k1"");
  var ecPoint = parameters.G.Multiply(privateKeyInt);
  var privateKeyX = ecPoint.Normalize().XCoord.ToBigInteger()
    .ToByteArrayUnsigned();
  var privateKeyY = ecPoint.Normalize().YCoord.ToBigInteger()
    .ToByteArrayUnsigned();

  //the following part is my code
  var ecParameters = new ECParameters();
  ecParameters.Curve = ""P-256K"";
  ecParameters.X = privateKeyX;
  ecParameters.Y = privateKeyY;
  ecParameters.D = privateKeyBytes;

  var key = new JsonWebKey(ecParameters);
  JsonWebKeyVerifier.Options options =
    JsonWebKeyVerifier.Options.DenyIncompatibleOperations
    | JsonWebKeyVerifier.Options.DenyExtraneousFields;
  string error = (string) null;

  JsonWebKeyVerifier.VerifyByKeyType(key, options, ref error);

  await client.ImportKeyWithHttpMessagesAsync(vaultBaseUri, name, key);

The resulting key for import looks like this (copied from Visual Studio variable view, maybe it's shortened):
  {
    ""kty"": ""EC"",
    ""crv"": ""P-256K"",
    ""x"": ""vSUHj6deEhPI6QeILgfgf2I7VTgmiDon_5nsss560OA"",
    ""y"": ""DK8DnzEOv57arN6f4Wou-vXkty7uje0n2xTHgGAehp8"",
    ""d"": ""NUpoaEEzWTFVYXBKNWZuRWZNUkVxZkpKY29LWGdMcHpFUnVNQ2E2Wjd0YkNhY2NpQ3N5""
  }

Although JsonWebKeyVerifier returns no error and a call to key.IsValid() returns true, the call to Key Vault failed with HTTP 400 Bad Request. I have turn on logging on Key Vault instance and following log appears there (id, username, IP addresses and GUIDs are changed intentionally, I'm not sure what is confidential; I can provide them on demand):
{
  ""time"": ""2018-11-28T16:28:05.2034585Z"",
  ""category"": ""AuditEvent"",
  ""operationName"": ""KeyImport"",
  ""resultType"": ""Success"",
  ""resultDescription"": ""EC key is not valid - cannot instantiate crypto service."",
  ""correlationId"": ""5682a894-0150-484f-a398-6922efed4458"",
  ""callerIpAddress"": ""XX.XX.XXX.XXX"",
  ""identity"": {
    ""claim"": {
      ""http://schemas.microsoft.com/identity/claims/objectidentifier"": ""00000000-0000-0000-0000-000000000000"",
      ""appid"": ""00000000-0000-0000-0000-000000000000"",
      ""http://schemas.microsoft.com/identity/claims/scope"": ""user_impersonation"",
      ""http://schemas.xmlsoap.org/ws/2005/05/identity/claims/upn"": ""xxx.xxxxxx@xxxxxxxx.com"",
      ""ipaddr"": ""XX.XX.XXX.XXX"",
      ""http://schemas.microsoft.com/claims/authnmethodsreferences"": ""pwd""
    }
  },
  ""properties"": {
    ""id"": ""https://xxxxxxx.vault.azure.net/keys/testJK1"",
    ""clientInfo"": ""FxVersion/4.6.27019.06 OSName/Windows OSVersion/Microsoft.Windows.10.0.17134. Microsoft.Azure.KeyVault.KeyVaultClient/3.0.2.0"",
    ""httpStatusCode"": 400,
    ""requestUri"": ""https://xxxxxxxx.vault.azure.net/keys/testJK1?api-version=7.0"",
    ""isAccessPolicyMatch"": true,
    ""keyProperties"": {
      ""type"": ""EC""
    }
  },
  ""resourceId"": ""/SUBSCRIPTIONS/00000000-0000-0000-0000-000000000000/RESOURCEGROUPS/XXXXXX-RG/PROVIDERS/MICROSOFT.KEYVAULT/VAULTS/XXXXXXX"",
  ""operationVersion"": ""7.0"",
  ""resultSignature"": ""Bad Request"",
  ""durationMs"": ""259""
}

ATTEMPT #2 - GENERATE WITHIN KEY VAULT AND EXPORT
Even if I'm able to generate SECP256K1 EC key within Key Vault, I didn't find how to export its public key part.
EDIT 11/23/2018
GetKey method on Azure Key Vault returns JsonWebKey that contains X and Y coordinates.
QUESTIONS

Is it possible to import SECP256K1 key via Azure SDK for .NET? If yes, could you provide me a link to working example?
Am I doing something wrong/insufficent in my code during attempt to import the key to Key Vault?
Is it possible to export SECP256K1 public key from Key Vault?
Do you have any other idea how to accomplish the achievements described herein before?

EDIT 11/29/2018

Is there a way how to construct public key from X and Y coordinates (ideally in .NET world)?

Thanks in advance.
Regards,
Jan
PS: I originally posted this question on Azure Key Vault blog, but here is probably much broader audience. I'll link both sources once it will be answered,
","","263","<blockchain><private-key><public-key><azure-keyvault><elliptic-curve>","1","","0","2018-11-29 14:42:49","","4","1","2281580","","2018-11-29 14:42:49","2018-11-29 08:12:49",""
"48541390","OpenSSL cmd analog for ECIESwithAES-CBC encryption with BouncyCastle provider?","Is there a way to achieve compatible encryption result using OpenSSL command line tools to the result that I have in Java code? In Java there is an asymmetric encryption of some data with EC public key:
PublicKey publicKey = KeyUtils.readPublicKey(publicKeyPath, ""EC"");
Cipher cipher = Cipher.getInstance(""ECIESwithAES-CBC/NONE/PKCS7Padding"", new BouncyCastleProvider());
cipher.init(Cipher.ENCRYPT_MODE, publicKey);
byte[] encryptedData = cipher.doFinal(dataToEncrypt);  

But I don't know how to reproduce the same encryption in OpenSSL in command line to be able to decrypt the result in Java then.
","","260","<java><encryption><openssl><elliptic-curve>","1","","0","2018-01-31 11:46:01","","4","","","","","2018-01-31 11:46:01",""
"36801620","Can WINE handle ECC certificates?","I have an application that supposedly runs well under Mono, but is having some problems on my system. In the meantime, I tried running it through WINE after using winetricks to install the proper version of .NET (winetricks dotnet452).
This worked great! The application hits Github to check for updates and manages the SSL/TLS connection flawlessly. Elsewhere while using it, it attempts to access another website, https://themoose.co.uk, but fails with an SSL/TLS error. The only reasonable difference I could find between that site and Github was that it uses an ECC cert as opposed to Github's more traditional RSA cert.
I also saw these lines in WINE's console output:
fixme:secur32:schan_get_cipher_algid Don't know CALG for encryption algorithm 2, returning 0
fixme:secur32:schan_imp_get_max_message_size Returning 1 << 14.
fixme:secur32:schan_get_cipher_algid Don't know CALG for encryption algorithm 2, returning 0

Googling these messages doesn't return anything useful.
The conclusion I am drawn to is that WINE doesn't support new ECC certificates, but I do not see that limitation documented anywhere! Am I going crazy, or is this an oversight in the documentation somewhere?
","","259","<ssl-certificate><wine><elliptic-curve>","2","","0","2016-04-22 19:10:41","","0","1","","","","2016-04-22 19:10:41",""
"26379586","magma computer algebra system local and global variables","function Max(x)
    max := 0; L := [];
    for i := 1 to x do
        P2<x,y,z> := ProjectiveSpace(Rationals(),2);
        C_i := Curve(P2, x^3+y^3-i*z^3);
        E_i, C_itoE_i := EllipticCurve(C_i);
        gen := Generators(E_i);
        if max eq #gen then
            max := #gen;
        end if;
    end for;
    return max;
end function;

When I run this (Max(100)) it tells me that max = 0. However I know there are #gen  = 1 and 2 at different places and therefore #gen > 0. I have having difficulty localizing max. It thinks of max outside the if and for statements as different than the max inside the for and if statements and thus is not updating max. I'm not sure how in magma CAS syntax I can correct for this. Can somebody help me understand Magma syntax with respect to this aspect? 
I tried putting local max; inside the loop and if statements but gave me syntax error.
","I don't know magma, but if it's anything like other procedural computer languages then it looks like you have a simple bug in your code. the lines:
    if max eq #gen then
        max := #gen;
    end if;

should be changed to
    if #gen > max then
        max := #gen;
    end if;

using whatever the the correct syntax is for the greater-than operator.
","248","<global-variables><local-variables><elliptic-curve><computer-algebra-systems>","0","1","1","2014-10-21 02:14:21","26477867","2","","","","","2014-10-15 09:56:23",""
"30733932","Recovering an ECPublicKey from JavaCard to Java","I am trying to implement ECDH between a terminal (simulated by my computer) and a smart card (Java Card).
I fixed the elliptic curve that I want to use, and on the card side I have the following code to run the first part of the protocol :
        ECPublicKey pubKey = (ECPublicKey) KeyBuilder.buildKey(
            KeyBuilder.TYPE_EC_FP_PUBLIC, (short) 0x0100, false);
        pubKey.setFieldFP(p, (short) 0x0001, (short) 0x0020);
        pubKey.setA(a, (short) 0x0001, (short) 0x0020);
        pubKey.setB(b, (short) 0x0000, (short) 0x0020);
        pubKey.setR(r, (short) 0x0001, (short) 0x0020);
        pubKey.setG(g, (short) 0x0000, (short) g.length);

        ECPrivateKey privKey = (ECPrivateKey) KeyBuilder.buildKey(
            KeyBuilder.TYPE_EC_FP_PRIVATE, (short) 0x0100, false);

        KeyPair keypair = new KeyPair(pubKey, privKey);
        keypair.genKeyPair();

        pubKey.getW(apduBuffer, (short) 0x0000);
        setOutgoingAndSend((short) 0x0000, (short) 0x0041);

So I create a KeyPair for ECDH and I send the public one to my terminal.
My problem is the following : I am not able to reconstruct an ECPublicKey given the response APDU I get...
I did not find any way to do this in Java (even using external library as Bouncy Castle).
Could someone help me ? Thank you in advance.
","The public key returned in JavaCard is formatted as follows: 04 x y. In the terminal side, first you must extract x and y coordinates. Then,

KeyFactory kf = KeyFactory.getInstance(""ECDSA"", ""BC""); 
ECPoint point = new ECPoint(x, y);
ECParameterSpec domainparameters = new ECParameterSpec(...); // initialize your domain parameters
ECPublicKeySpec spec = new ECPublicKeySpec(point, domainparameters);
ECPublicKey publickey = (ECPublicKey)kf.generatePublic(spec);

","237","<java><bouncycastle><javacard><apdu><elliptic-curve>","3","2","1","2015-06-10 00:30:50","30745140","0","1","","","","2015-06-09 13:47:33",""
"57087599","How to encrypt and decrypt data in Android using the elliptic curve key pair of type secp256r1?","I need to use NIST P-256 elliptic curves to encrypt and decrypt data. Now that I have generated the key pair, but how do I use them to encrypt and decrypt?
The official website only says how to use this ec key pair to sign/verify, but I want to know how to use this ec key pair to encrypt/decrypt.
website: https://developer.android.com/reference/android/security/keystore/KeyGenParameterSpec#example:-nist-p-256-ec-key-pair-for-signingverification-using-ecdsa
generate NIST P-256 key pair code:
        val kpg: KeyPairGenerator = KeyPairGenerator.getInstance(KeyProperties.KEY_ALGORITHM_EC, ""AndroidKeyStore"")
        val parameterSpec =
            KeyGenParameterSpec.Builder(""container"", KeyProperties.PURPOSE_ENCRYPT or KeyProperties.PURPOSE_DECRYPT)
                .setAlgorithmParameterSpec(ECGenParameterSpec(""secp256r1""))
                .setDigests(KeyProperties.DIGEST_SHA256, KeyProperties.DIGEST_SHA384, KeyProperties.DIGEST_SHA512)
                .build()
        kpg.initialize(parameterSpec)
        val keyPair = kpg.generateKeyPair()

        val ecPublicKey = keyPair.public as ECPublicKey
        val ecPrivateKey = keyPair.private as ECPrivateKey

","Public key encryption is not recommended to use for encryption. The general practice is hybrid-encryption where a block cipher key is exchanged then symmetric encryption is performed.
After the key exchange the most common issues Authentication and Integrity. The modern practice is using an authenticated encryption mode as AES-GCM. GCM mode gives you authentication and integrity. You can see an implementation here
","225","<android><encryption><kotlin><elliptic-curve>","1","0","2","2019-08-24 00:36:43","","4","","11800506","","2019-07-18 05:28:26","2019-07-18 05:22:18",""
"57087599","How to encrypt and decrypt data in Android using the elliptic curve key pair of type secp256r1?","I need to use NIST P-256 elliptic curves to encrypt and decrypt data. Now that I have generated the key pair, but how do I use them to encrypt and decrypt?
The official website only says how to use this ec key pair to sign/verify, but I want to know how to use this ec key pair to encrypt/decrypt.
website: https://developer.android.com/reference/android/security/keystore/KeyGenParameterSpec#example:-nist-p-256-ec-key-pair-for-signingverification-using-ecdsa
generate NIST P-256 key pair code:
        val kpg: KeyPairGenerator = KeyPairGenerator.getInstance(KeyProperties.KEY_ALGORITHM_EC, ""AndroidKeyStore"")
        val parameterSpec =
            KeyGenParameterSpec.Builder(""container"", KeyProperties.PURPOSE_ENCRYPT or KeyProperties.PURPOSE_DECRYPT)
                .setAlgorithmParameterSpec(ECGenParameterSpec(""secp256r1""))
                .setDigests(KeyProperties.DIGEST_SHA256, KeyProperties.DIGEST_SHA384, KeyProperties.DIGEST_SHA512)
                .build()
        kpg.initialize(parameterSpec)
        val keyPair = kpg.generateKeyPair()

        val ecPublicKey = keyPair.public as ECPublicKey
        val ecPrivateKey = keyPair.private as ECPrivateKey

","AndroidKeyStore does not currently support encryption or decryption with EC keys, only with RSA keys.
To use EC keys for encryption, you need to either use ECDH plus a key derivation function (KDF) to compute a shared symmetric key which you can use for your data, or to use ECIES which does that internally.  But AndroidKeyStore doesn't support either mode of operation as of Android 10.  Maybe in Android 11.
For now, you can either use RSA with an appropriate padding mode (OAEP recommended) to encrypt your symmetric key, or you can use the native Java cryto provider.  This, unfortunately, will not use secure hardware to generate, store or use the key, and will instead do all of these things in your app's process space.  There's an example here.
(For what it's worth, I'm the Google engineer who owns AndroidKeyStore.  I've been planning to add ECDH support for a few years now, but it's always been pre-empted by other features that were considered higher priority.  I will get to it, though.)
","225","<android><encryption><kotlin><elliptic-curve>","1","1","2","2019-08-24 00:36:43","","4","","11800506","","2019-07-18 05:28:26","2019-07-18 05:22:18",""
"6738030","Compiler error in Haskell code","I am trying to write  elliptic curve point addition using where clause. I am getting compiler error but when i translated the same code using let in expression , it works fine. Could some one please tell me what is wrong with this code. Full source code [ http://hpaste.org/49174 ] 
Thank you
Mukesh Tiwari 
{--
--add points of elliptic curve using where clause getting compiler error
addPoints :: Elliptic -> Point -> Point -> Either Point Integer
addPoints _ Identity p_2 = Left p_2
addPoints _ p_1 Identity = Left p_1
addPoints ( Conelliptic a b n ) ( Conpoint x_p y_p ) ( Conpoint x_q y_q )  
    | x_p /= x_q =  case ( ( Conpoint x_r y_r ) , d ) of
                        ( _ , 1 ) -> Left ( Conpoint x_r y_r )
                        ( _ , d' ) -> Right d'
                      where
                                [ u , v , d ] = extended_gcd ( x_p - x_q ) n
                                s = mod ( ( y_p - y_q ) * u ) n
                                x_r = mod ( s*s - x_p - x_q ) n
                                y_r = mod ( -y_p - s * ( x_r - x_p ) ) n
    | otherwise =   if mod ( y_p + y_q ) n == 0 then Left Identity
                     else  case ( ( Conpoint x_r y_r ) , d ) of
                                ( _ , 1 ) -> Left ( Conpoint x_r y_r )
                                ( _ , d' ) -> Right d'
                            where
                                [ u , v , d ] = extended_gcd ( 2 * y_p ) n
                                s = mod ( ( 3 * x_p * x_p + a ) * u ) n
                                x_r = mod ( s * s - 2 * x_p ) n
                                y_r = mod ( -y_p - s * ( x_r - x_p ) ) n 

--}


--add points of elliptic curve let in clause and its working
addPoints::Elliptic->Point->Point-> Either Point Integer
addPoints _ Identity p_2 = Left p_2
addPoints _ p_1 Identity = Left p_1
addPoints ( Conelliptic a b n ) ( Conpoint x_p y_p ) ( Conpoint x_q y_q )
| x_p /= x_q = let
           [ u , v , d ] = extended_gcd (x_p-x_q) n
           s = mod  ( ( y_p - y_q ) * u ) n
           x_r = mod ( s * s - x_p - x_q ) n
           y_r= mod ( -y_p - s * ( x_r - x_p ) ) n
         in case ( ( Conpoint x_r y_r ) , d ) of
          ( _ , 1 ) -> Left ( Conpoint x_r y_r )
          ( _ , d' ) -> Right d'
| otherwise = if mod ( y_p + y_q ) n == 0 then Left Identity
         else  let
              [ u , v , d ] = extended_gcd ( 2*y_p ) n
              s = mod  ( ( 3 * x_p * x_p + a ) * u ) n
              x_r = mod ( s * s - 2 * x_p ) n
              y_r = mod ( -y_p - s * ( x_r - x_p ) ) n
           in case ( ( Conpoint x_r y_r ) , d ) of
                            ( _ , 1 )-> Left (Conpoint x_r y_r)
                            ( _ , d' ) -> Right d'


","The problem is that where blocks scope over function guards, so it's not possible to create a separate where for each guarded statement.  When ghc encounters the where on line 59, it automatically ends the function declaration and expects a new declaration to follow, which makes the | an error because it's not a valid declaration.  It works with a let-expression because let and where are different parts of the language.  The Haskell Wiki has more information on this topic.
","224","<haskell><elliptic-curve>","2","9","1","2011-07-18 20:33:31","6739067","6","","","","","2011-07-18 19:10:13",""
"49148837","Python SSL handshake with EC keys","I'm trying to perform a ssl handshake with EC keys instead of RSA.
The private key and server certificate are generated with OpenSSL. The handshake fails.
Server Code:
context.load_cert_chain(certfile='server-cert.pem', keyfile='server-key.pem')
context.set_ecdh_curve('prime192v1')
# context.load_dh_params('server-key.pem')

bindsocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
bindsocket.bind(('localhost', 6996))
bindsocket.listen(5)


while True:
    newsocket, fromaddr = bindsocket.accept()
    connstream = context.wrap_socket(newsocket, server_side=True)
    try:
        print connstream.read()
        connstream.send('HI CLIENT#')
    finally:
        connstream.shutdown(socket.SHUT_RDWR)
        connstream.close()

Client Code:
context = ssl.SSLContext(ssl.PROTOCOL_SSLv23)
context.verify_mode = ssl.CERT_REQUIRED
context.load_verify_locations('server-cert.pem')

client = context.wrap_socket(socket.socket(socket.AF_INET, socket.SOCK_STREAM))
client.connect(('localhost', 6996))
client.send('HELLO WORLD!')
print client.read()

client.shutdown(socket.SHUT_RDWR)
client.close()

Server Error:
connstream = context.wrap_socket(newsocket, server_side=True)
  File ""C:\ProgramData\Anaconda2\lib\ssl.py"", line 363, in wrap_socket
    _context=self)
  File ""C:\ProgramData\Anaconda2\lib\ssl.py"", line 611, in __init__
    self.do_handshake()
  File ""C:\ProgramData\Anaconda2\lib\ssl.py"", line 840, in do_handshake
    self._sslobj.do_handshake()
ssl.SSLError: [SSL: NO_SHARED_CIPHER] no shared cipher (_ssl.c:661)

Client Error:
client.connect(('localhost', 6996))
  File ""C:\ProgramData\Anaconda2\lib\ssl.py"", line 876, in connect
    self._real_connect(addr, False)
  File ""C:\ProgramData\Anaconda2\lib\ssl.py"", line 867, in _real_connect
    self.do_handshake()
  File ""C:\ProgramData\Anaconda2\lib\ssl.py"", line 840, in do_handshake
    self._sslobj.do_handshake()
ssl.SSLError: [SSL: SSLV3_ALERT_HANDSHAKE_FAILURE] sslv3 alert handshake failure (_ssl.c:661)

How server-key.pem looks:
-----BEGIN EC PARAMETERS-----
...
-----END EC PARAMETERS-----
-----BEGIN EC PRIVATE KEY-----
...
-----END EC PRIVATE KEY-----

","","220","<python-2.7><ssl><openssl><handshake><elliptic-curve>","0","","0","2018-03-07 09:52:45","","3","1","","","","2018-03-07 09:52:45",""
"43748136","C ECC Double-And-Add","I am currently working on C code for Elliptic Curve Crypto using the Double-And-Add algorithm. I am facing a seg fault problem which I don't understand. I hope someone of you might have an idea.
#include ""lib/include/gmp.h""
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <openssl/sha.h>

typedef struct{
    mpz_t p;
    mpz_t a;
    mpz_t b;
    mpz_t gx;
    mpz_t gy;
} ECC;

static mpz_t *inverse_y1, *inverse_y2, *tx, *ty;
ECC secp256k1;

/*
 * Initializes the secp256k1 curve.
 */
void initSECP256K1(){
    mpz_set_str(secp256k1.p, ""FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F"", 16);
    mpz_init(secp256k1.a);
    mpz_set_str(secp256k1.b, ""7"", 10);
    mpz_set_str(secp256k1.gx, ""79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798"", 16);
    mpz_set_str(secp256k1.gy, ""483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8"", 16);
    inverse_y1 = malloc(sizeof(mpz_t));
    inverse_y2 = malloc(sizeof(mpz_t));
    mpz_set_str(*inverse_y1, ""483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8"", 16);
    mpz_set_str(*inverse_y2, ""b7c52588d95c3b9aa25b0403f1eef75702e84bb7597aabe663b82f6f04ef2777"", 16);
}

/*
 * Calculates the s value for ecc point and doubling.
 * s = (y2 - y1) / (x2 - x1) mod p if P != Q
 * s = (3 * x1 ^ 2 + a) / (2 * y1) mod p if P = Q
 * 5 parameters. First one is mpz_t pointer to save the result.
 * The other 4 are of type pointer, representing the coordinates.
 */
void calculate_s(mpz_t *s, mpz_t *x1, mpz_t *y1, mpz_t *x2, mpz_t *y2){
    mpz_t *s1 = malloc(sizeof(mpz_t));
    mpz_init(*s1);
    //Point Addition
    if(mpz_cmp(*x1, *x2) != 0 || mpz_cmp(*y1, *y2) != 0){
        mpz_sub(*s, *y2, *y1);
        mpz_sub(*s1, *x2, *x1);
    }else{
    //Point doubling
        mpz_powm_ui(*s, *x1, 2, secp256k1.p);
        mpz_mul_si(*s, *s, 3);
        mpz_mul_si(*s1, *y1, 2);
    }
    mpz_invert(*s1, *s1, secp256k1.p);
    mpz_mul(*s, *s, *s1);
    mpz_clear(*s1);
}



/*
 * ECC - Point add and Point double
 * It takes 6 parameters, each of type mpz_t pointer.
 * The result is stored in the first two pointers.
 * The third and forth pointer represent the first coordinate.
 * The last two pointer are the second coordinate.
 * It calculates the new coordinates as follows:
 * x3 = s ^ 2 - x1 - x2 mod p
 * y3 = s * (x1 - x3) - y1 mod p
 */
int ecc_papd(mpz_t *x3, mpz_t *y3, mpz_t *x1, mpz_t *y1, mpz_t *x2, mpz_t *y2){
    mpz_t *s = malloc(sizeof(mpz_t));
    mpz_init(*s);
    //calculates s value
    calculate_s(s, x1, y1, x2, y2);
    //x3 = s^2 - x1 - x2 mpd p
    mpz_powm_ui(*x3, *s, 2, secp256k1.p);
    mpz_sub(*x3, *x3, *x1);
    mpz_sub(*x3, *x3, *x2);
    mpz_mod(*x3, *x3, secp256k1.p);
    //y3 = s * (x1 - x3) - y1 mod p
    mpz_sub(*y3, *x1, *x3);
    mpz_mul(*y3, *y3, *s);
    mpz_sub(*y3, *y3, *y1);
    mpz_mod(*y3, *y3, secp256k1.p);
    mpz_clear(*s);
    //check if the result is the infinity point
    if(mpz_cmp(*x1, *x2) == 0){
        if((mpz_cmp(*y1, *inverse_y1) == 0 && mpz_cmp(*y2, *inverse_y2) == 0) ||
               (mpz_cmp(*y2, *inverse_y1) == 0 && mpz_cmp(*y1, *inverse_y2) == 0)){
            //printf(""INFINITY"");
            return 1;
        }
    }
    return 0;
}


void ecc_double_add(mpz_t *rx, mpz_t *ry, mpz_t *x, mpz_t *y, mpz_t d){
    mpz_t *tx = malloc(sizeof(mpz_t));
    mpz_t *ty = malloc(sizeof(mpz_t));
    mpz_set(*tx, *x);
    mpz_set(*ty, *y);
    //returns the amount of bits the number has
    //sub 2 because it starts to count from 1 and we remove the msb, too.
    int bits = (int) mpz_sizeinbase(d, 2) - 2;
    int bit, infinity = 0;
    //check if bits is -1, (case d=1). If yes, set the base point as solution
    if(bits < 0){
        mpz_set(*rx, *x);
        mpz_set(*ry, *y);
    }
    for(; bits >= 0; bits--){
        bit = mpz_tstbit(d, bits);
        if(infinity == 0){
            infinity = ecc_papd(rx, ry, tx, ty, tx, ty);
            mpz_set(*tx, *rx);
            mpz_set(*ty, *ry);
        }
        //point addition
        if(bit == 1){
            if(infinity == 0){
                infinity = ecc_papd(rx, ry, tx, ty, x, y);
                mpz_set(*tx, *rx);
                mpz_set(*ty, *ry);
            }else{
                mpz_set(*tx, *x);
                mpz_set(*ty, *y);
                infinity = 0;
            }
        }
    }
    free(tx);
    free(ty);
}

int main(){
    initSECP256K1();
    mpz_t *rx = malloc(sizeof(mpz_t));
    mpz_t *ry = malloc(sizeof(mpz_t));
    //tx = malloc(sizeof(mpz_t));
    //ty = malloc(sizeof(mpz_t));
    mpz_t d;
    mpz_init(*rx);
    mpz_init(*ry);
    mpz_init(d);

    int i = 0;
    for(; i < 2; i++){
        gmp_printf (""d %Zd\n"", d);
        ecc_double_add(rx, ry, &secp256k1.gx, &secp256k1.gy, d);
        gmp_printf (""R.x %Zx\n"", rx);
        gmp_printf (""R.y %Zx\n"", ry);
        printf(""\n"");
        mpz_add_ui(d, d, 1);
    }
    //mpz_clear(*tx);
    //mpz_clear(*ty);
    mpz_clear(*rx);
    mpz_clear(*ry);

    return 0;
}

The problem is within the ecc_double_add function, using the mpz_t *tx and mpz_t *ty variable. When I am running the code I get a seg fault.
Therefore, I initialized the variables outside the function (commented out in main function). As soon I do it that way, it works. I am confused and don't know why I am receiving the seg fault. My C knowledge is not that good and I am trying to get better. 
I appreciate any help :)
*Edit:
I am using the GNU MP Library for this task, which is here: https://gmplib.org/
","I had been tinkering around and I found out that the gmp_printf function is causing the problem. As soon I am removing it from the for loop the code is working. I replaced it with printf and gmp_printf without a parameter and the code started to work. 
I am not sure why gmp_printf is making problems but I found this: https://gmplib.org/list-archives/gmp-bugs/2011-July/002304.html
I replaced the gmp_printf with 
printf(""Result: %s\n"", mpz_get_str(NULL, 16, *rx));

It's not a nice solution but for testing should be enough.
","210","<c><segmentation-fault><elliptic-curve>","-1","1","1","2017-05-02 23:22:24","43748725","7","","5348813","","2017-05-02 22:30:15","2017-05-02 22:19:51",""
"46730753","How to change the key length of ECDSA?","Recently, I was trying to do something with the code of ECDSA.  I want to change the key length of it but in vain. I checked the internet and found some source code of ECDSA, but somehow it only allows 32 bytes.
For example, I found this:
var crypto = require(""crypto"");
var eccrypto = require(""eccrypto"");     

// A new random 32-byte private key.
var privateKey = crypto.randomBytes(32);

// Corresponding uncompressed (65-byte) public key.
var publicKey = eccrypto.getPublic(privateKey);

var str = ""message to sign"";

// Always hash you message to sign!    
var msg = crypto.createHash(""sha256"").update(str).digest();

eccrypto.sign(privateKey, msg).then(function(sig) {
   console.log(""Signature in DER format:"", sig);
   eccrypto.verify(publicKey, msg, sig).then(function() {    
      console.log(""Signature is OK"");
   }).catch(function() {    
      console.log(""Signature is BAD"");
   });
});

from this website. I tried to change the privateKey from 32 bytes to 16 bytes and other values. It ended up giving me errors.
Recently I discovered that to have different key length you need different curves. Does anybody know how to change the curve in the above code? If not, would someone provide source code that can use different key lengths of ECDSA?
(I'm quite new to ECC, so if I used wrong terms or I completely misunderstood the concept of it, please forgive).
","According to https://github.com/bitchan/eccrypto#implementation-details (which looks like the right library for your code) the library only supports the secp256k1 curve.
Most other libraries, if given no context other than the curve being a 256-bit curvespace, will assume it is secp256r1 (r instead of k), meaning that the library you chose doesn't interoperate with a lot of libraries.  (For example, Windows 7, 8, and 8.1 cannot do secp256k1 using the OS-provided cryptographic libraries)
So for ""how do I use a different sized key with this library?"" the answer is ""you can't, sorry"".  And for ""what library can I use, then?"" the answer is ""sorry, that's outside the scope of StackOverflow"".
","210","<javascript><digital-signature><elliptic-curve><ecdsa>","-1","1","1","2017-10-13 16:30:02","","1","","472495","","2017-10-13 16:30:02","2017-10-13 13:09:24",""
"28930169","Divide a Point in Elliptic Curve Cryptography","I'm using Elliptic Curve to design a security system. P is a point on elliptic curve. The receiver must obtain P using formula k^-1(kP). The receiver does not know P but knows k. I need to compute k^-1(R) where R=kP. How can I do this using Point Multiplication or Point Addition.
","I suggest first learning a bit more about ECC (for example, read some of Paar's book and listen to his course at http://www.crypto-textbook.com/) before tackling something this complex.  For this particular question, ask yourself: ""What does the inverse of k mean?""
","206","<elliptic-curve>","0","0","1","2015-03-09 20:04:20","","0","","","","","2015-03-08 18:21:04",""
"38944582","Upgrade to OTP 18 breaks usage of public_key library","Building a pem file in Elixir requires several steps, including building an entity. In OTP 17, the following works: 
{public, private} = :crypto.generate_key(:ecdh, :secp256k1)
ec_entity = {:ECPrivateKey,                                                                                                                                                                                             
  1,                                                                                                                                                                                                        
  :binary.bin_to_list(private),                                                                                                                                                                             
  {:namedCurve, {1, 3, 132, 0, 10}},                                                                                                                                                                        
  {0, public}}
der_encoded = :public_key.der_encode(:ECPrivateKey, ec_entity)
pem = public_key.pem_encode([{:ECPrivateKey, der_encoded, :not_encrypted}])

But using OTP 18, the following error occurs:
{public, private} = :crypto.generate_key(:ecdh, :secp256k1)
ec_entity = {:ECPrivateKey,                                                                                                                                                                                             
  1,                                                                                                                                                                                                        
  :binary.bin_to_list(private),                                                                                                                                                                             
  {:namedCurve, {1, 3, 132, 0, 10}},                                                                                                                                                                        
  {0, public}}
der_encoded = :public_key.der_encode(:ECPrivateKey, ec_entity)
** (MatchError) no match of right hand side value: {:error, {:asn1, :badarg}}
public_key.erl:253: :public_key.der_encode/2

What is the source of this error?
","The source of the error is a change in the way that the public_key entity is constructed between OTP 17 and OTP 18. If we reverse the process, starting with a pem file, we can see the difference.
OTP 17:
iex(6)> pem = ""-----BEGIN EC PRIVATE KEY-----\nMHQCAQEEIJniJF4vtTqE4wS5AkhmMZsHIbil0l3XfRButkw5IJYFoAcGBSuBBAAK\noUQDQgAEtxm+jijBB0JxZTceHnCHE0HpMXJp1ScVUZ5McvDUVsS/Dek8IdAsMOPz\nnnVALflZzXtH/wU9p2LrFdJeuXwL8g==\n-----END EC PRIVATE KEY-----\n\n""
""-----BEGIN EC PRIVATE KEY-----\nMHQCAQEEIJniJF4vtTqE4wS5AkhmMZsHIbil0l3XfRButkw5IJYFoAcGBSuBBAAK\noUQDQgAEtxm+jijBB0JxZTceHnCHE0HpMXJp1ScVUZ5McvDUVsS/Dek8IdAsMOPz\nnnVALflZzXtH/wU9p2LrFdJeuXwL8g==\n-----END EC PRIVATE KEY-----\n\n""
iex(7)> [{type, decoded, _}] = :public_key.pem_decode(pem)
[{:ECPrivateKey,
  <<48, 116, 2, 1, 1, 4, 32, 153, 226, 36, 94, 47, 181, 58, 132, 227, 4, 185, 2, 72, 102, 49, 155, 7, 33, 184, 165, 210, 93, 215, 125, 16, 110, 182, 76, 57, 32, 150, 5, 160, 7, 6, 5, 43, 129, 4, 0, 10, ...>>, 
  :not_encrypted}]
iex(8)> :public_key.der_decode(type, decoded)
{:ECPrivateKey, 1,
 [153, 226, 36, 94, 47, 181, 58, 132, 227, 4, 185, 2, 72, 102, 49, 155, 7, 33,
  184, 165, 210, 93, 215, 125, 16, 110, 182, 76, 57, 32, 150, 5],
 {:namedCurve, {1, 3, 132, 0, 10}},
 {0,
  <<4, 183, 25, 190, 142, 40, 193, 7, 66, 113, 101, 55, 30, 30, 112, 135, 19, 65, 233, 49, 114, 105, 213, 39, 21, 81, 158, 76, 114, 240, 212, 86, 196, 191, 13, 233, 60, 33, 208, 44, 48, 227, 243, 158, 117, ...>>}}

OTP 18:
iex(5)> [{type, decoded, _}] = :public_key.pem_decode(pem)
[{:ECPrivateKey,
  <<48, 116, 2, 1, 1, 4, 32, 153, 226, 36, 94, 47, 181, 58, 132, 227, 4, 185, 2, 72, 102, 49, 155, 7, 33, 184, 165, 210, 93, 215, 125, 16, 110, 182, 76, 57, 32, 150, 5, 160, 7, 6, 5, 43, 129, 4, 0, 10, ...>>, 
  :not_encrypted}]
iex(6)> entity = :public_key.der_decode(type, decoded)
{:ECPrivateKey, 1,
 <<153, 226, 36, 94, 47, 181, 58, 132, 227, 4, 185, 2, 72, 102, 49, 155, 7, 33, 184, 165, 210, 93, 215, 125, 16, 110, 182, 76, 57, 32, 150, 5>>,
 {:namedCurve, {1, 3, 132, 0, 10}},
 <<4, 183, 25, 190, 142, 40, 193, 7, 66, 113, 101, 55, 30, 30, 112, 135, 19, 65, 233, 49, 114, 105, 213, 39, 21, 81, 158, 76, 114, 240, 212, 86, 196, 191, 13, 233, 60, 33, 208, 44, 48, 227, 243, 158, 117, 64, ...>>}

The difference is in how the public and private keys are represented. 
The signature of an ECPrivateKey Record is: 
    ECPrivateKey'{ version, privateKey, parameters, publicKey}
In Erlang 18, both values are represented at plain binaries, in 17, the private key is a list and the public key is part of a tuple, {0, binary}. 
So in order to build the pem file correctly, the entity representation has to change.
{public, private} = :crypto.generate_key(:ecdh, :secp256k1)
entity = {:ECPrivateKey,                                                                                                                                                                                             
  1,                                                                                                                                                                                                        
  private,                                                                                                                                                                                                  
  {:namedCurve, {1, 3, 132, 0, 10}},                                                                                                                                                                        
  public}      

Using the new representation of the record will solve the problem.
","204","<erlang><elixir><elliptic-curve>","2","2","2","2017-12-27 19:35:51","38944583","0","","","user177800","2016-08-14 17:12:40","2016-08-14 17:10:54",""
"38944582","Upgrade to OTP 18 breaks usage of public_key library","Building a pem file in Elixir requires several steps, including building an entity. In OTP 17, the following works: 
{public, private} = :crypto.generate_key(:ecdh, :secp256k1)
ec_entity = {:ECPrivateKey,                                                                                                                                                                                             
  1,                                                                                                                                                                                                        
  :binary.bin_to_list(private),                                                                                                                                                                             
  {:namedCurve, {1, 3, 132, 0, 10}},                                                                                                                                                                        
  {0, public}}
der_encoded = :public_key.der_encode(:ECPrivateKey, ec_entity)
pem = public_key.pem_encode([{:ECPrivateKey, der_encoded, :not_encrypted}])

But using OTP 18, the following error occurs:
{public, private} = :crypto.generate_key(:ecdh, :secp256k1)
ec_entity = {:ECPrivateKey,                                                                                                                                                                                             
  1,                                                                                                                                                                                                        
  :binary.bin_to_list(private),                                                                                                                                                                             
  {:namedCurve, {1, 3, 132, 0, 10}},                                                                                                                                                                        
  {0, public}}
der_encoded = :public_key.der_encode(:ECPrivateKey, ec_entity)
** (MatchError) no match of right hand side value: {:error, {:asn1, :badarg}}
public_key.erl:253: :public_key.der_encode/2

What is the source of this error?
","I didn't really check why your version works on some versions, but I've got some code that works on all these erlang versions: 19.0, 18.2.1, 18.1, 18.0, 17.5, R16B03 (running on travis).
-include_lib(""public_key/include/public_key.hrl"").

genPEMKey() ->
    CurveId = secp256k1,
    {PubKey, PrivKey} = crypto:generate_key(ecdh, CurveId),
    Key = #'ECPrivateKey'{version = 1,
                      privateKey = PrivKey,
                      parameters = {
                        namedCurve,
                        pubkey_cert_records:namedCurves(CurveId)},
                      publicKey = PubKey},
    DERKey = public_key:der_encode('ECPrivateKey', Key),
    public_key:pem_encode([{'ECPrivateKey', DERKey, not_encrypted}]).

This piece of code was based on the examples found in the OTP codebase:
https://github.com/erlang/otp/blob/master/lib/public_key/test/erl_make_certs.erl#L407
","204","<erlang><elixir><elliptic-curve>","2","0","2","2017-12-27 19:35:51","38944583","0","","","user177800","2016-08-14 17:12:40","2016-08-14 17:10:54",""
"41755569","Derived certificate from private key in iOS(Objective-C)","I am able to generate ECC key pair on iOS (Objective-C).
Now I want to derive certificate from the generated private key?
In android normally we do:

initialize KeyStore, KeyPairGenerator
generate key pair with identifier (later retrieve with the identifier)
retrieve entry from keystore by identifier KeyStore.Entry entry = ks.getEntry(identifier, null);
get private key by calling ((KeyStore.PrivateKeyEntry) entry).getPrivateKey()
get certificate by calling ks.getCertificate(identifier)
derived public key from certificate by calling ks.getCertificate(keyHandle).getPublicKey()

How can I export certificate in iOS?
","I found some link regarding ECC encryption in iOS hope this will helps you to head into it.

Github link for ECC encryption
Some SO links
How to use ECC in iOS
Elliptic Curve Crypto in iOS
http://pastebin.com/3JBbzpX6

Extra Link for ECC
https://digitalleaves.com/blog/2015/10/sharing-public-keys-between-ios-and-the-rest-of-the-world/
Hope this will helps you.
Happy coding.
","204","<ios><objective-c><elliptic-curve>","1","0","1","2017-01-20 05:02:10","","0","","","","","2017-01-20 03:23:58",""
"30249086","elliptic curve discrete logarithm","I am trying to Solve elliptic curve discrete logarithm using  Pollard rho (find k where G=kp), So i searched for implementation in c and i found one after adding problem specific data in the main function i got  segmentation fault (core dumped)
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <gmp.h>
#include <limits.h>
#include <sys/time.h>

#include <openssl/ec.h>
#include <openssl/bn.h>
#include <openssl/obj_mac.h> // for NID_secp256k1

#define POLLARD_SET_COUNT 16

#if defined(WIN32) || defined(_WIN32)
#define EXPORT __declspec(dllexport)
#else
#define EXPORT
#endif

#define MAX_RESTART 100

int ec_point_partition(const EC_GROUP *ecgrp, const EC_POINT *x) {  

    size_t len = EC_POINT_point2oct( ecgrp, x, POINT_CONVERSION_UNCOMPRESSED, NULL, 0, NULL );
    unsigned char ret[len]; 
    EC_POINT_point2oct( ecgrp, x, POINT_CONVERSION_UNCOMPRESSED, ret, len, NULL );

    int id = ( ret[len - 1] & 0xFF ) % POLLARD_SET_COUNT;

    return id;
}

// P generator 
// Q result*P
// order of the curve
// result
//Reference: J. Sattler and C. P. Schnorr, ""Generating random walks in groups""

int elliptic_pollard_rho_dlog(const EC_GROUP *group, const EC_POINT *P, const EC_POINT *Q, const BIGNUM *order, BIGNUM *res) {

    printf(""Pollard rho discrete log algorithm... \n"");

    BN_CTX* ctx;
    ctx = BN_CTX_new();

    int i, j;
    int iterations = 0;

    if ( !EC_POINT_is_on_curve(group, P, ctx ) || !EC_POINT_is_on_curve(group, Q, ctx ) ) return 1;

    EC_POINT *X1 = EC_POINT_new(group);
    EC_POINT *X2 = EC_POINT_new(group);

    BIGNUM *c1 = BN_new();
    BIGNUM *d1 = BN_new();
    BIGNUM *c2 = BN_new();
    BIGNUM *d2 = BN_new();

    BIGNUM* a[POLLARD_SET_COUNT];
    BIGNUM* b[POLLARD_SET_COUNT];
    EC_POINT* R[POLLARD_SET_COUNT];

    BN_zero(c1); BN_zero(d1);
    BN_zero(c2); BN_zero(d2);


    for (i = 0; i < POLLARD_SET_COUNT; i++) {   

        a[i] = BN_new();
        b[i] = BN_new();
        R[i] = EC_POINT_new(group);

        BN_rand_range(a[i], order);     
        BN_rand_range(b[i], order);

        // R = aP + bQ

        EC_POINT_mul(group, R[i], a[i], Q, b[i], ctx);
        //ep_norm(R[i], R[i]);
    }

    BN_rand_range(c1, order);       
    BN_rand_range(d1, order);       


    // X1 = c1*P + d1*Q
    EC_POINT_mul(group, X1, c1, Q, d1,  ctx);  
    //ep_norm(X1, X1);

    BN_copy(c2, c1);
    BN_copy(d2, d1);
    EC_POINT_copy(X2, X1);


    double work_time = (double) clock();
    do {
        j = ec_point_partition(group, X1);
        EC_POINT_add(group, X1, X1, R[j], ctx);

        BN_mod_add(c1, c1, a[j], order, ctx); 

        BN_mod_add(d1, d1, b[j], order, ctx); 

        for (i = 0; i < 2; i++) {
            j = ec_point_partition(group, X2);

            EC_POINT_add(group, X2, X2, R[j], ctx);

            BN_mod_add(c2, c2, a[j], order, ctx); 

            BN_mod_add(d2, d2, b[j], order, ctx);
        }

        iterations++;
        printf(""Iteration %d \r"",iterations );
    } while ( EC_POINT_cmp(group, X1, X2, ctx) != 0 ) ;


    printf(""\n "");

    work_time = ( (double) clock() - work_time ) / (double)CLOCKS_PER_SEC;

    printf(""Number of iterations %d %f\n"",iterations, work_time );

    BN_mod_sub(c1, c1, c2, order, ctx);
    BN_mod_sub(d2, d2, d1, order, ctx);

    if (BN_is_zero(d2) == 1) return 1;


    //d1 = d2^-1 mod order  
    BN_mod_inverse(d1, d2, order, ctx);

    BN_mod_mul(res, c1, d1, order, ctx);

    for (int k = 0; k < POLLARD_SET_COUNT; ++k) {
        BN_free(a[k]); 
        BN_free(b[k]);
        EC_POINT_free(R[k]);
    }
    BN_free(c1); BN_free(d1);
    BN_free(c2); BN_free(d2);
    EC_POINT_free(X1); EC_POINT_free(X2);

    BN_CTX_free(ctx);
    return 0;
}


int main(int argc, char *argv[])
{
    unsigned char *p_str=""134747661567386867366256408824228742802669457"";
    unsigned char *a_str=""-1"";
    unsigned char *b_str=""0"";
    BIGNUM *p = BN_bin2bn(p_str, sizeof(p_str), NULL);
    BIGNUM *a = BN_bin2bn(a_str, sizeof(a_str), NULL);
    BIGNUM *b = BN_bin2bn(b_str, sizeof(b_str), NULL);
    BN_CTX* ctx;
    ctx = BN_CTX_new();
    EC_GROUP* g = EC_GROUP_new(EC_GFp_simple_method());
    EC_GROUP_set_curve_GFp(g,p,a,b,ctx);    
    unsigned char *XP_str=""18185174461194872234733581786593019886770620"";
    unsigned char *YP_str=""74952280828346465277451545812645059041440154"";

    BN_CTX* ctx1;
    ctx1 = BN_CTX_new();
    BIGNUM *XP = BN_bin2bn(XP_str, sizeof(XP_str), NULL);
    BIGNUM *YP = BN_bin2bn(YP_str, sizeof(YP_str), NULL);
    EC_POINT* P = EC_POINT_new(g);
    EC_POINT_set_affine_coordinates_GFp(g,P,XP,YP,ctx1);

    unsigned char *XQ_str=""76468233972358960368422190121977870066985660"";
    unsigned char *YQ_str=""33884872380845276447083435959215308764231090"";
    BIGNUM* XQ = BN_bin2bn(XQ_str, sizeof(XQ_str), NULL);
    BIGNUM* YQ = BN_bin2bn(YQ_str, sizeof(YQ_str), NULL);
    EC_POINT *Q = EC_POINT_new(g);
    BN_CTX* ctx2;
    ctx2 = BN_CTX_new();
    EC_POINT_set_affine_coordinates_GFp(g,Q,XQ,YQ,ctx2);
    char * str;


    unsigned char *N_str=""2902021510595963727029"";
    BIGNUM *N = BN_bin2bn(N_str, sizeof(N_str), NULL);
    BIGNUM *res;
    elliptic_pollard_rho_dlog (g,P,Q,N,res);
    BN_bn2mpi(res,str); 
    printf(""%s\n"", str);


  return 0;
}

This is the statement that cause segmentation fault
    BN_bn2mpi(res,str); 

","","202","<c><segmentation-fault><elliptic-curve><ecdsa>","1","","0","2015-05-14 23:24:04","","1","","","","","2015-05-14 23:24:04",""
"23325012","Koblitz method in Java","I'm trying to use Koblitz's method to convert String to ECPoint, Eclipse says that there are no errors in my code, but when I try to run my application, it gets an error everytime the code gets to the Koblitz method.  
Sorry, I know this kind of post is not educative, but I can't seem to find the problem in my source code.  
public static ECPoint ConvertToPoint(String S){
    BigInteger neg = new BigInteger(""-1"");
    BigInteger one = BigInteger.ONE;
    BigInteger adder = BigInteger.ONE;
    BigInteger two = new BigInteger(""2"");
    BigInteger M,MK,Y,s = null, n = BigInteger.ONE,x,x2,x3 = null,B,B2,B3,g,g2,g3;
    BigInteger X = null;
    BigInteger k = new BigInteger(""20"");
    BigInteger P  = new BigInteger(""751""); //Prime number (P)
    BigInteger a  = new BigInteger(""-1""); //Curve Parameter a
    BigInteger b  = new BigInteger(""188""); //Curve Parameter b
    int e = 1;
    int m = 0;
    int r;

    if (S==""B""){
        M = new BigInteger(""11"");
        MK = M.multiply(k);
        X = MK.add(adder); // x = m.k + i
        Y = (X.multiply(X).multiply(X)).add(a.multiply(X)).add(b); // y = (x^3 + ax + b)

        BigInteger C = (P.subtract(one)).divide(two);

        while((Y.mod(one) != BigInteger.ZERO) && (P.gcd(Y) != one) && Y.modPow(C, P) != one){
            adder = adder.add(one);
            X = MK.add(adder);   
            Y = (X.multiply(X).multiply(X)).add(a.multiply(X)).add(b);
        }   
        s = (P.subtract(one)).divide(two.pow(e));
        while (s.mod(two)== BigInteger.ZERO){
            e = e+1;
            s = (P.subtract(one)).divide(two.pow(e));
        }
        while (((n.modPow(C, P)) != neg.mod(P)) || (sqrt(n).mod(one)== BigInteger.ZERO)){
            n = n.add(one);
        }
        x = Y.modPow((s.add(one).divide(two)), P);
        B = Y.modPow(s, P);
        g = n.modPow(s, P);
        r = e;

        while (B.modPow(two.pow(m), P) != BigInteger.ONE){
            m = m+1;
        }
        if (m>0){
            x2 = x.multiply(g.pow(2^(r-m-1)));
            x3 = x2.mod(P);
            B2 = B.multiply(g.pow(2^(r-m)));
            B3 = B2.mod(P);
            g2 = g.pow(2^(r-m));
            g3 = g.mod(P);
            r = m;
        }
        else if (m==0){
            x3 = x;
            B3 = B;
            g3 = g;
            r = e;
        }
    }
       //This is when the program crashes
   ECPoint T = new ECPoint(X,x3); 
   return T;

","There are two problems that I see with your code, although I don't know if this is causing your error:

Again, as stated in my comment, don't compare Strings using ==. Use the equals(...) or the equalsIgnoreCase(...) method instead. Understand that == checks if the two objects are the same which is not what you're interested in. The methods on the other hand check if the two Strings have the same characters in the same order, and that's what matters here.  
The same goes for BigIntegers. You should either use the equals(...) method or the compareTo(...) method if you want to test for equality/inequality or > or <.
It's a truism that is usually correct, that all reference types should be checked for equality using their equals(...) method. This is not so for primitives which have no methods. Also enums can be tested for equality via == and != although equals(...) will work fine for them.


As an aside, you will want to learn and use Java naming conventions. Variable names should all begin with a lower letter while class names with an upper case letter. Also you should avoid using trivial variable names such as b or s unless they are being used for trivial purposes such as the index of a for loop. Instead use names that have some meaning so that your code becomes self-commenting. 
Following these suggestions as well as following good code formatting practices will allow others (such as us!) to better understand your code, and more importantly, will allow your future self to better understand just what you were thinking 6 months ago when you wrote the code.
","192","<java><eclipse><elliptic-curve>","0","1","1","2015-10-27 16:08:05","","4","","","","","2014-04-27 15:08:26",""
"18116795","OpenSSL ECC gf2m modification to apply PCLMULQDQ instruction","I'm trying to modify OpenSSL code in order to use the PCLMULQDQ instruction to accelerate gf2m operations, as described in the Intel white paper
Intel Polynomial Multiplication Instruction and Usage for Elliptic Curve Cryptography 
The paper suggests modifying the following functions in crypto/bn/gf2m.c:

int BN_GF2m_mod_arr()
int BN_GF2m_mod_mul_arr()
int BN_GF2m_mod_sqr_arr()
int rshift1()

with the code snippets in the Appendix. How should I do it? I read the snippets and had no clue how to modify the OpenSSL code.
","","192","<openssl><intel><elliptic-curve><instruction-set>","1","","0","2013-08-08 02:04:31","","0","","","","","2013-08-08 02:04:31",""
"55369670","ECDSA signature generation and verification implementation using Javascript","I have some code below that will be used to verify the authenticity of a message using javascript. The key pair generation using the elliptic curve secp256k1 is pretty straight forward however I am failing to understand why my signature implementation is not working (why the message is not being successfully verified). Here is my code:
https://pastebin.com/k1WT6apV
/**
* Signature Generation
*/
var g = bigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240');
var n = bigInt('115792089237316195423570985008687907852837564279074904382605163141518161494337');
var p = bigInt('115792089237316195423570985008687907853269984665640564039457584007908834671663');      
var k = bigInt.randBetween(""1"", n.subtract(1));
var r = bigInt(""0"");
var s = bigInt(""0"");
var privateKey = bigInt('5943918703142138746985297990399309008462887494775678462183405629775262082646');
var publicKey = bigInt(privateKey.multiply(g)).mod(p); 


while(s.equals(""0"")){
    while(r.equals(""0"")){
        k = bigInt.randBetween(""1"", n.subtract(1));
        while(bigInt(k).isPrime() == false){
            k = bigInt.randBetween(""1"", n.subtract(1));
        }
        var xCoord = bigInt(k.multiply(g)).mod(p);
        r = xCoord.mod(n);
    }
    var kInverse = k.modInv(n);
    var hashedMessage = bigInt(sha1('hello'),16); 
    s = bigInt(kInverse*(hashedMessage.add(privateKey.multiply(r)))).mod(n)        
}
var signatureParams = {
    ""publicKey"": publicKey.toString(),
    ""r"": r.toString(),
    ""sign"": s.toString()
}

/**
* Signature Verification
*/
var sInverse = bigInt(signatureParams.sign).modInv(n);
var publicKey = bigInt(signatureParams.publicKey);
var w = sInverse.mod(n);
var hashedMessage = bigInt(sha1('hello'),16);
var u1 = bigInt(hashedMessage.multiply(w)).mod(n);
var u2 = bigInt(bigInt(r).multiply(w)).mod(n);
var P = bigInt(u1.multiply(g)).add(u2.multiply(publicKey));
P == r

It can be tested easily using the browser console.
I have used an amalgamation of information from the following guides:
https://www.maximintegrated.com/en/app-notes/index.mvp/id/5767
http://www.cs.miami.edu/home/burt/learning/Csc609.142/ecdsa-cert.pdf
https://pdfs.semanticscholar.org/c06a/d6512775be1076e4abd43e3f2928729da776.pdf
What is wrong with my implementation? Am I missing something? Did I do something wrong?
EDIT:
After doing some revision I came up with the following:
var g = bigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240');
var n = bigInt('115792089237316195423570985008687907852837564279074904382605163141518161494337');
var p = bigInt('115792089237316195423570985008687907853269984665640564039457584007908834671663'); 
var privateKey = bigInt('90436540941140970165633788406609967146985661161263948799654498545867952662296');
var publicKey = bigInt(privateKey.multiply(g)).mod(p);

var generateSignature = function(hashedMessage){
    hashedMessage = bigInt(hashedMessage,16);
    var k = bigInt.randBetween(""1"", n.subtract(1));
    var r = bigInt(""0"");
    var s = bigInt(""0"");
    while(s.equals(""0"")){
        r = bigInt(""0"");
        while(r.equals(""0"")){
            k = bigInt.randBetween(""1"", n.subtract(1));
            r = bigInt(bigInt(k.multiply(g)).mod(p)).mod(n);
        }
        var kInverse = k.modInv(n); 
        var pr = privateKey.multiply(r);
        hashedMessage = hashedMessage.add(pr);
        kInverse = kInverse.multiply(hashedMessage);
        s = kInverse.mod(n);
    }  
    return [r.toString(),s.toString()];
}

var validateSignature = function(hashedMessage, signature){
    hashedMessage = bigInt(hashedMessage,16);
    var r = bigInt(signature[0]);
    var s = bigInt(signature[1]);
    var w = s.modInv(n);
    var u1 = bigInt(hashedMessage.multiply(w)).mod(n);
    var u2 = bigInt(r.multiply(w)).mod(n);
    var u1g = u1.multiply(g);
    var u2pu = u2.multiply(publicKey);
    var xCoord =u1g.add(u2pu);
    var v = xCoord.mod(n);   
    if(v.equals(r))
        return true;
    return false;
}

However it still fails to validate the signature. Hope it makes it a bit clearer.
","part of your problem is that g is actually not a number but a point
this is a rough translation of what you wrote:
g = 55066263022277343669578718895168534326250603453777594175500187360389116729240
privateKey = 90436540941140970165633788406609967146985661161263948799654498545867952662296
k = <random number>
r = k*g%p%n
e = sha(m)

ki = k^-1%n
pr = privateKey*r
ki*e
s = ki%n

i wrote an implmentation of this however over the last few weeks something like this:
g = {
    x: 55066263022277343669578718895168534326250603453777594175500187360389116729240,
    y: 32670510020758816978083085130507043184471273380659243275938904335757337482424
}
k = <random number>
r = <random number>
e = sha(m)

privateKey = 90436540941140970165633788406609967146985661161263948799654498545867952662296
r = g * k
s = ((privateKey * r.x + e) * (k^-1%n)) % n
r = r.x

it might help you to understand how the point multiplication works check out these links:
https://github.com/Azero123/simple-js-ec-math
https://www.npmjs.com/package/simple-js-ec-math
https://eng.paxos.com/blockchain-101-foundational-math
also perhaps take a look at my simple-js-ecdsa implementation as well
just another note, you likely should not use sha1 as it is consider ""officially insecure"" and there are formulas for collisions using it. perhaps try sha2 or sha3
","188","<javascript><digital-signature><verification><elliptic-curve><ecdsa>","2","0","1","2019-03-29 19:44:09","","2","1","4500996","","2019-03-27 20:40:40","2019-03-27 04:08:51",""
"48565865","Why is Node.js crypto.sign function non-deterministic?","I have the following piece of Node.js code:
let jwktopem = require('jwk-to-pem');
let crypto = require('crypto');

let key = jwktopem({
    crv: 'P-256',
    kty: 'EC',
    use: 'sig',
    x: Buffer.from('8E54B421A5B51D7A5089D69E140B9ABA3FF46D9E0F16614F9A658E49E584F539', 'hex').toString('base64'),
    y: Buffer.from('BB20BECA0B53E6CF3263226E056A0F77050AB428C10EB3B2B7E92E5D7328FC7E', 'hex').toString('base64'),
    d: Buffer.from('9963F284D16B0096F40A6153895903CAF60EEB3CA90EA4FC6AAD3512486E9790', 'hex').toString('base64'),
    kid: '1'
}, {private: true})
let message = Buffer.from('oSThaT8Kriu5Pzey6bQgCd/Ynwtpxl1PLeE+0i751Ok=', 'base64');

function signIt() {
    const sign = crypto.createSign('SHA256');
    sign.update(message);    
    console.log(sign.sign(key, 'hex'));
}

for (let i = 0; i < 10; i++) {
    signIt();
}

I'm basically signing the same message with the same key 10 times, using Elliptic Curve cryptography. But I get 10 different results! What is going on here?
","The ECDSA signature algorithm involves the random number for exactly this purpose, generate unique non-reversible signature. See https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm
The quality of random is vital for the security of the signature.
","188","<node.js><sign><elliptic-curve>","3","0","1","2018-02-16 16:27:41","","8","","","","","2018-02-01 15:05:29",""
"30727065","SageMathCloud: random elliptic curve","load cong.sage
defines random_elliptic_curve command in sage but I'm using SageMathCloud. What is I have to write to generate a random elliptic curve?
","Apparently, the Sage program you are referring to is cong.sage in William Stein's GitHub repository. It is possible to import it into your project: e.g., download from GitHub, change the file extension to .sagews, upload to your project. But it seems tricky (if possible) to import definitions from another Sage file in SageMathCloud, and since you just want this particular function, why not just copy-paste its definition. 
It's a simple function found at the very end of the file linked above: 
def random_elliptic_curve(p):
    """"""
    Construct and return a random elliptic curver over the finite
    field of order p.
    """"""
    p = ZZ(p)
    if not is_prime(p):
        raise ValueError, ""p (=%s) must be a prime integer.""%p
    F = FiniteField(p)
    while True:
        try:
            return EllipticCurve(F, [F.random_element(), F.random_element()])
        except ArithmeticError:
            pass
    return E

","186","<python><sage><elliptic-curve>","1","1","1","2015-06-09 23:30:18","","0","","","","","2015-06-09 08:43:18",""
"42015168","sgx_ecc256_create_key_pair fail","I've written a very simple test to learn working with elliptic curve cryptography inside an enclave. But the key creation method fails with SGX_ERROR_UNEXPECTED.
Here is my enclave:
#include ""Enc_t.h""

#include ""sgx_trts.h""
#include ""sgx_tcrypto.h""

int Test(sgx_status_t *error)
{
    sgx_ecc_state_handle_t handle;
    sgx_ec256_private_t sk;
    sgx_ec256_public_t pk;
    sgx_status_t status;

    status = sgx_ecc256_open_context(&handle);
    if (status)
    {
        *error = status;
        return 1;
    }

    status = sgx_ecc256_create_key_pair(&sk, &pk, &handle);
    if (status)
    {
        *error = status;
        return 2;
    }

    *error = SGX_SUCCESS;
    return 0;
}

and this is my host app:
#include ""Enc_u.h""
#include ""sgx_urts.h""
#include <cstdio>
#include <tchar.h>

#define ENC _T(""../Debug/Enc.signed.dll"")

int main()
{
    sgx_status_t error;
    sgx_enclave_id_t eid;
    sgx_launch_token_t token;
    int updated = 0;
    int step;
    error = sgx_create_enclave(ENC, SGX_DEBUG_FLAG, &token, &updated, &eid, nullptr);

    if (error)
        printf(""Failed to create enclave\n"");

    Test(eid, &step, &error);

    if (error)
        printf(""Failed on step %d\n"", step);

    return 0;
}

The result is error = 1 on step = 2.
Any ideas what I'm doing wrong or what I might have configured incorrectly? I'm using Visual Studio Community 2015 and Intel C++ Compiler 17.0.
P.S: This is a replica of my post on an Intel forum. If it's properly answered on each of these platforms, I'll post the answer to the other, also citing its author.
","Use the statement below instead of status = sgx_ecc256_create_key_pair(&sk, &pk, &handle);

status = sgx_ecc256_create_key_pair(&sk, &pk, handle);

","184","<c++><visual-studio><elliptic-curve><sgx>","0","2","1","2017-02-03 15:40:55","42018611","3","","5116581","","2017-02-03 15:29:21","2017-02-03 01:12:49",""
"20268653","How to handle short hash with longer order of base point in ECDSA","I am using CVC certificates (If you haven't heard about them, pretend they are X509) with Elliptic curve signature with brainpool256r1 curve and SHA1 hash. In java with bouncycastle, I simply verify them like this:
Signature sign = Signature.getInstance(""SHA1withECDSA"", ""BC"");
sign.initVerify(key);
sign.update(certificate_data_to_be_verified);
sign.verify(signature);

And everything works fine. However, I need to verify them also in an embedded device, and I have encountered a problem, because I am supposed to use leftmost 256bits of hash to get the value of z  at least according to wikipedia ECDSA article. But SHA1 has only 160bits.
How is this solved by bouncycastle, and is there some general theory on how to handle this?
","You are confusing an order of base point with a key length.
Here is how Bouncy Castle code performs ECDSA digital signature verification.
private BigInteger calculateE(BigInteger n, byte[] message)
{
    /* n is curve order value */
    int log2n = n.bitLength();
    /* and message is a hash */
    int messageBitLength = message.length * 8;

    BigInteger e = new BigInteger(1, message);
    /* If message is longer than curve order */
    if (log2n < messageBitLength)
    {
        /* only log2n bits are taken from the left */
        e = e.shiftRight(messageBitLength - log2n);
    }
    return e;
}

","183","<java><security><bouncycastle><elliptic-curve><ecdsa>","1","2","1","2014-01-29 17:44:25","20273488","0","","642653","","2014-01-29 17:44:25","2013-11-28 14:29:42",""
"29987799","SAGE - 'NoneType' error on valid Sage syntax","I'm trying to write a program to calculate a generator point of an elliptic curve in sage.
The function to do this is is:
E.gen(0)

Where E is some Elliptic Curve.
If I do this on the online version of Sage it works without issue:
sage: E = EllipticCurve(GF(73),[6,0])
sage: E.gen(0)
(18 : 10 : 1)

However, if I try it locally:
sage: E = EllipticCurve(GF(73),[6,0])
sage: E.gen(0)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-3-cfa3068996f9> in <module>()
----> 1 E.gen(Integer(0))

/usr/lib/python2.7/site-packages/sage/schemes/elliptic_curves/ell_generic.pyc in gen(self, i)
   1309             NotImplementedError: not implemented.
   1310         """"""
-> 1311         return self.gens()[i]
   1312 
   1313     def rst_transform(self, r, s, t):

TypeError: 'NoneType' object has no attribute '__getitem__'

I'm on Sage version 6.6, and all the documentation that I've seen so far says this should work, and does in the online version of sage. Can anyone shed some light on this?
","I did a fresh install of Arch Linux and that fixed the problem. I'm guessing it probably had something to do with my python2/3 configuration.
","175","<python><python-2.7><math><sage><elliptic-curve>","0","0","1","2015-05-05 02:00:54","30043079","6","","2059300","","2015-05-01 17:01:40","2015-05-01 13:32:18",""
"30302937","when I am executing the code only public key is generated but not the private key ,so what should I do?","package com.project;
import java.security.*;
import java.security.spec.*;

public class ECCKeyGeneration {
  public static void main(String[] args) throws Exception {
    KeyPairGenerator kpg;
    kpg = KeyPairGenerator.getInstance(""EC"",""SunEC"");
    ECGenParameterSpec ecsp;
    ecsp = new ECGenParameterSpec(""secp192r1"");
    kpg.initialize(ecsp);

    KeyPair kp = kpg.genKeyPair();
    PrivateKey privKey = kp.getPrivate();
    PublicKey pubKey = kp.getPublic();

    System.out.println(privKey.toString());
    System.out.println(pubKey.toString());
  }
}

[2] This is the code for elliptic curve cryptography for  public and private key generation but when I executed this code ,showing only the public key but not the private key,so please help me out and let me know ,what to do to generate the private key!!
","import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.spec.ECGenParameterSpec;

public class ECCKeyGeneration {

    public static void main(String[] args)  {
        try {
            KeyPairGenerator kpg;
            kpg = KeyPairGenerator.getInstance(""EC"",""SunEC"");
            ECGenParameterSpec ecsp;
            ecsp = new ECGenParameterSpec(""secp192r1"");
            kpg.initialize(ecsp);

            KeyPair kp = kpg.genKeyPair();
            PrivateKey privKey = kp.getPrivate();
            PublicKey pubKey = kp.getPublic();

            System.out.println(privKey.toString());
            System.out.println(pubKey.toString());
        } catch (Exception ex) {
            System.out.println(ex);
        }
    }
}

I've just tested the above code.
Output

Sun EC private key, 192 bits   private value: 
  3248833611418544793834748156439256292267803494576663573112
  parameters: secp192r1 [NIST P-192, X9.62 prime192v1]
  (1.2.840.10045.3.1.1)  Sun EC public key, 192 bits   public x coord:
  5122655651118956061783347731888893733494103991283417332818  public y
  coord: 223043343028867724454216740788693823451155477884918709166
  parameters: secp192r1 [NIST P-192, X9.62 prime192v1]
  (1.2.840.10045.3.1.1)

Are you getting the same output?
","173","<java><elliptic-curve>","0","0","1","2015-05-21 04:17:03","","6","","","","","2015-05-18 12:13:15",""
"56089485","How to encrypt image with ecc in java","I have to encrypt a bmp image with ECC, but I found it very difficult especially when the pixels will be mapped on the elliptic curve, I didn't understand it at all. So I researched other options and found ECIES.
I tried to implement it in java using bouncycastle, it works but the problem is that my code  encrypt the image as a file ,but i went to encrypt the pixels of the image  and get a new encrypted image  so I can calculate the PSNR between the encrypted and the unencrypted images.
I tried to encrypt every pixel alone than create the encrypting image but didn't work.
Is there some function can help me or anything in BC?or do i have to implement ECIES without it?
This is what i tried:
   Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
   KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(""EC"", ""BC""); 
   ECNamedCurveParameterSpec curveParameterSpec = ECNamedCurveTable.getParameterSpec(""secp384r1""); 
   keyPairGenerator.initialize(curveParameterSpec, new SecureRandom()); 

   KeyPair KeyPair = keyPairGenerator.generateKeyPair(); 
   ECPublicKey publicKey = (ECPublicKey) KeyPair.getPublic(); 
   ECPrivateKey privateKey = (ECPrivateKey) KeyPair.getPrivate(); 

   javax.crypto.Cipher c1 = javax.crypto.Cipher.getInstance(""ECIES"", ""BC""); 
   javax.crypto.Cipher c2 = javax.crypto.Cipher.getInstance(""ECIES"", ""BC""); 
   c1.init(ENCRYPT_MODE, publicKey,  new SecureRandom()); 
   c2.init(DECRYPT_MODE, privateKey, new SecureRandom());

   try{
        File bmpFile = new File(""C:\\Users\\acer\\Desktop\\py\\6.bmp"");
        BufferedImage image = ImageIO.read(bmpFile);
        // to byte
        ByteArrayOutputStream baos=new ByteArrayOutputStream();//length=32 bytes, though its size increases if necessary.
        ImageIO.write(image, ""bmp"", baos );

        byte[] b = baos.toByteArray(); 
        byte[] cipherimage = c1.doFinal(b, 0, b.length); 
        byte[] plainimage = c2.doFinal(cipherimage, 0, cipherimage.length);
        bmpFile=new File(""C:\\Users\\acer\\Desktop\\py\\encryptedimage.bmp"");
        FileOutputStream fos = new FileOutputStream(bmpFile);
        fos.write(cipherimage);
        fos.flush();
        fos.close();
        bmpFile=new File(""C:\\Users\\acer\\Desktop\\py\\decryptedimage.bmp"");
        FileOutputStream fos1 = new FileOutputStream(bmpFile);
        fos1.write(plainimage);
        fos1.flush();
        fos1.close();
   } catch (IOException e){
     System.out.println(e.getMessage());
   }

","Seems you are making some wrong assumptions and you may want to reconsider / rethink your approach. 

to get a new encrypted image. Then calculate the(PSNR)peak signal-to-noise ratio between theme

BMP image format consists of more than just pixels. As already commented, there are header metadata  (size, depth, ,...) which, if you encrypt the whole file, won't make sense anymore (it won't be any bmp) . I'd say you can create a new image and process a pixel by pixel on the image level, not just encrypting an input file.  Example:
https://www.dyclassroom.com/image-processing-project/how-to-get-and-set-pixel-value-in-java
int p = img.getRGB(x,y);


So I researched other options and found ECIES.

ECIES is a hybrid scheme, you may have a look at following answer for ECIES encryption https://gist.github.com/amrishodiq/9821413
 . The output will need to contain more/other information than just pixels and it is definitely not any BMP you can just open and compare.  
Hybrid encryption scheme assumes that data are encrypted by a symmetric cipher (I am not sure which is used by BC in this case, if someone knows, please comment), where the encryption key is derived using ECC. 
So at the end you'd be comparing pixels encrypted by an underlying symmetric algorithm (e. g. aes256-cbc), where it is designed to provide output indistinguishable from random output. 

have to encrypt a bmp image with ECC

If you would encrypt each pixel (lets assume you will represent every pixel as 16 bit rgb), the ECC output is much longer than the input data, so it's not easy to direcly map input values into output of the same dimension (size) 
","173","<java><image><encryption><elliptic-curve>","0","0","1","2019-05-13 16:35:40","","6","1","10067164","","2019-05-12 11:13:26","2019-05-11 10:36:07",""
"36919719","Use Elliptic curve cryptography to encrypt string in java","I want to use JDK 1.7 alone to implement ECC so that I can encrypt string, however, when I searched all over the Internet, most of pages talked about bouncy castles. I also checked Java documentation, but it only provides ECC signature and no encryption methods are offered.
Is there any way I can learn how to implement such an encryption algorithm with only java itself? 
","","170","<java><encryption><elliptic-curve>","1","","0","2016-04-28 15:54:11","","3","","","","","2016-04-28 15:54:11",""
"50993471","EC scalar multiplication with Strauss-Shamir method","I am searching informations about the so called ""Strauss-Shamir method"" for scalar multiplication upon elliptic curves. It is a method to compute k1 · P + k2 · Q in around log2(k) additions and doublings, where k1, k2 < k. 
Unfortunately, while this algorithm is cited left right and center, the actual algorithm (and, dare I hope, its analysis) is not cited anywhere. Is there someone that could explain it to me, or at least give me a link on pseudocode/analysis?
Many thanks in advance!
","To multiply a number P by an n-bit scalar k, you can use doubling and addition according to the binary expansion of k.  Let's say that k=9.  In binary, that's 1001, and you can calculate 9P like this:
R=0
R=R*2+P  //the most significant '1' bit
R=R*2    //next bit is 0
R=R*2    //next bit is 0
R=R*2+P  //next bit is 1

The Strauss-Shamir trick is just calculating aP + bQ by doing the additions inside the chain instead of outside.   Let's say that, in binary, a=1001 and b=0011`. Then we just do this:
R=0
R=R*2+P   //bits from a,b = 1,0
R=R*2     //bits from a,b = 0,0
R=R*2+Q   //bits from a,b = 0,1
R=R*2+P+Q //bits from a,b = 1,1

If you precompute P+Q, then this doesn't take much longer than a single multiplication.
","166","<algorithm><multiplication><elliptic-curve>","1","3","1","2018-06-23 11:11:20","50994362","0","1","","","","2018-06-22 18:05:53",""
"33275918","How can I edit a .class in rt.jar to support arbitrary Elliptic Curves","I am trying to change the ECParameters class in sun.security.ec. I need to do this in order to get arbitrary curves working, and I already downloaded the OpenJDK source, edited the code and compiled it again. 
I unpacked my current rt.jar and replaced all the files in sun.security.ec with my own compiled files. Everything looks right, but when I compile it again and try to start netbeans nothing happens.. 
Does anyone know what I did wrong, and how I should do it properly? 
Edit: I have read that it is not recommended to edit these classes, but this particular class even has a piece of code that is commented out. 
// The code below is incomplete.
//It is left as a starting point for a complete parsing implementation.

","It is not a good idea to change compiled JDK classes. Why you don't use ""normal"" ways to implement your case? As you already mentioned that it isn't a good way you could use the commented code you've found e.g. to implement an util class.
","164","<java><netbeans><elliptic-curve><.class-file><rt.jar>","0","0","1","2015-10-22 08:11:10","","7","","942774","","2015-10-22 08:10:10","2015-10-22 07:54:22",""
"20903182","Private key encryption in .NET 4.0 of a very large number","In my scenario, I would like to encrypt a very big  number (10^27) using a private key and later be able to decrypt it using a public key. The problem I have is that I want to keep the size of the encrypted text as small as possible.
I know that .NET has support for public key encryption (RSACryptoServiceProvider), but the encrypted text gets so huge.
Would it work to instead  treat the private key as a public key?
Would Elliptic curve cryptography produce a smaller output?
","First of all, if you want to achieve confidentiality you should always encrypt with the public key, not the private key. RSA encryption is not defined for encryption with the private key, and the results may vary (especially the kind of padding that is applied).
For direct RSA encryption, the size of the encrypted message is identical to the modulus. Now the modulus should be at least 2048 bits by now, and your message is only about (27/3)*10=90 bits. So RSA would have a large overhead, independent on the key used. Using ECIES is therefore likely to give significant benefits.
","161","<c#><.net><encryption><encryption-asymmetric><elliptic-curve>","3","2","1","2014-01-03 12:10:53","20903359","8","1","","","","2014-01-03 12:00:41",""
"7508397","Primes in PHP, elliptic curve","how i can calculate receiving a number K, K return the next prime number greater than 2 ^ 57 + 1 ? some 1 can help me with that ? 
","If you need prime tester, you can download it here.
","154","<php><server-side><primes><elliptic-curve>","0","0","1","2011-09-22 12:58:55","","3","","952925","","2011-09-22 12:42:27","2011-09-22 01:03:17",""
"49888178","Python, Sympy and elliptic curves","I am trying to write a simple implementation of elliptic curves in python.
So I have a simple Elliptic Curve class:
class EllipticCurve:

    O =""O"";

    def __init__(self,a,b):
        self.a = a
        self.b = b

    def __eq__(self, other):
        if isinstance(other, EllipticCurve):
            return self.a == other.a and self.b == other.b
        return NotImplemented

    def __ne__(self, other):
        result = self.__eq__(other)
        if result is NotImplemented:
            return result
        return not result

    @property
    def discriminant(self):
        return 4*a**3+27*b**2

and a class for Points on an Elliptic Curves:
class Point:

def __init__(self,ec):
    self.ec = ec
    self = ec.O

def __init__(self,ec,x,y):
    self.ec = ec
    self.x = x
    self.y = y

def __add__(self, other):

    if self.ec != other.ec:
        raise ValueError('These points are on different curves')
    if self == self.ec.O:
        return Point(ec, other.x, other.y)
    if other == self.ec.O:
        return Point(ec, self.x, self.y)
    if self.x==other.x and self.y==-other.y:
        return O
    if self==other:
        k = 3*(self.x**2+self.ec.a)/(2*self.y)
        x3 = k**2-self.x-other.x
        return Point(self.ec, x3,k*(self.x-x3)-self.y)

    k = (other.y-self.y)/(other.x-self.x)
    x3 = k ** 2 - self.x - other.x
    return Point(self.ec, x3, k*(self.x - x3) - self.y)

def __eq__(self, other):
    if isinstance(other, Point):
        return self.x == other.x and self.y == other.y and self.ec == other.ec
    return NotImplemented

def __ne__(self, other):
    result = self.__eq__(other)
    if result is NotImplemented:
        return result
    return not result

def __neg__(self):
    if self==self.ec.O:
        return O
    return Point(E,self.x,-self.y)

def __sub__(self, other):
    return self + -other

and although I would like to add some functionalities to them, they work with actual int values for a,b and x,y.
However, my problem is when I try to use sympy and use 'symbols' for a,b and x,y.
Ideally, my goal is to computationally prove the associative property for 3 points on an elliptic curve, ie, (P+Q)+R = P+(Q+R).
Now, I am able to get a correct result for P+Q:
a,b = symbols('a b')
x1,y1 = symbols('x1 y1')
x2,y2 = symbols('x2 y2')
x3,y3 = symbols('x3 y3')

E = EllipticCurve(a,b)
P = Point(E,x1,y1)
Q = Point(E,x2,y2)
R = Point(E,x3,y3)

P+Q

print(simplify((P+Q).x))

which outputs, correctly:

-x1 - x2 + (y1 - y2)**2/(x1 - x2)**2

Moreover, if I do this:
expr = (P+Q)+R
print(simplify(expr.x))

I get, also (I think) correctly:

x1 + x2 - x3 + (y1 + y3 - (y1 - y2)*(2*x1 + x2 - (y1 - y2)**2/(x1 - x2)**2)/(x1 - x2))**2/(x1 + x2 + x3 - (y1 - y2)**2/(x1 - x2)**2)**2 - (y1 - y2)**2/(x1 - x2)**2

However, if I do:
expr = (P+Q)+R
expr2 = P+(Q+R)

print(simplify((expr-expr2).x))

It takes forever, and if I try:
expr = (P+Q)+R
expr2 = P+(Q+R)

print((expr-expr2).x)

It also return an expression that seems reasonable and I think correct.
But I need to simplify it and to return 0 to prove that expr and expr2 are equal.
Any suggestions on what I am doing wrong ? 
","","153","<python><python-3.x><sympy><proof><elliptic-curve>","1","","0","2018-04-17 22:33:53","","7","","4268531","","2018-04-17 22:33:53","2018-04-17 22:05:35",""
"48525430","Verify Java Card signature","I am writing a Java Card 3.0.2 application on a NXP J3D081 card. I have it both signing and verifying a signature using ALG_ECDSA_SHA_256. The keys have been written to the card by my test app. If I sign 32 bytes of data and pass the signature back to the card the Verify code successfully verifies the signature. If I sign 32 bytes in Bouncy Castle with the Private key and pass to the Verify on the Card it successfully verifies the signature. The bouncy castle Verify Code successfully verifies signatures created from the bouncy castle signing routine.
BUT if I take the returned signature from the Java Card and pass it to the C# bouncy castle code it FAILS to verify the signature. I have checked all input values and they are correct. My code is here (note I pass Public keys as 64 bytes and prepend them with 0x04)
public bool HashAndVerifyDSA(byte[] pb, byte[] inData, byte[] sig)
{
    byte[] pub = new byte[65];
    pub[0] = 0x4;
    Array.Copy(pb, 0, pub, 1, 64);
    ECCurve curve = parameters.Curve;
    ECPoint q = curve.DecodePoint(pub);
    ICipherParameters Public = new ECPublicKeyParameters(algorithm, q, parameters);
    ISigner bSigner = SignerUtilities.GetSigner(""SHA-256withECDSA"");

    bSigner.Init(false, Public);
    bSigner.BlockUpdate(inData, 0, inData.Length);
    return (bSigner.VerifySignature(sig));
}

I should note that the parameters specify the P-256 curve and are used successfully in the encrypted communication to the card. The Public key is successfully created.
I seem to have less hair now then I did two days ago. Any pointers would be welcome.
","Apart from steps you have performed to debug the thing, you can check the following also: -

Verify the signature using some online available tool. Do not forget to use same curve parameters and public key generated from javacard.
Verify the same using bouncy castle java library. I perform the same steps in one of my tools and it was matched successfully.

","151","<c#><javacard><signing><elliptic-curve>","4","0","1","2018-01-31 08:55:58","","3","1","","","","2018-01-30 15:49:41",""
"46823154","How to troubleshoot OpenSSL BN_bin2bn() causing segmentation fault?","Calling the following method produces a segmentation fault on the BN_bin2bn call:
#include <openssl/ec.h>
#define ECIES_PUBLIC_KEY_SIZE 32

static int doBin2Bn(const uint8_t* someValue)
{
    BIGNUM *bn = NULL;
    bn = BN_new();
    BN_bin2bn(someValue, ECIES_PUBLIC_KEY_SIZE, bn);
}

The value of someValue in %02x format is 33313338.
Why would this cause a seg fault?
","","149","<c++><openssl><segmentation-fault><elliptic-curve>","0","","0","2017-10-19 05:08:59","","2","","","","","2017-10-19 05:08:59",""
"13653771","Trying to reconcile elliptic curve error","I am trying to do the following:
I have a piece of software which is using ECC to generate a standard Rijndael key (NOT AES... There is a difference: AES only supports key sizes of 128, 192, and 256 bits, while Rijndael  originally supported 160 and 224 bits.  This bit me at first when I was looking at the software.)  I have been able to determine that it does the following:
It has several modes, but in the weakest mode, it uses ECC secp160r1 to generate a 160 bit key (hence the Rijndael and NOT AES).  I have been able to take ""public"" values and use the private key in my own software, and, using openssl calls, have been able to generate the same keys and decrypt the data I need to decrypt.
In the best (strongest/hardest, what have you) mode, it pretty much does the same thing, however, it uses ECC sect571k1 to generate a key and takes only the first 32 bytes of the 72 it generates for a Rijndael 256 bit key (in this case, you could say AES256).
However, in another mode, it APPEARS to do the same thing, but when I attempt to do the same thing as I have done before, I DON'T get the same shared secret.
If you use the standard definitions for Alice and Bob:
da = Alice's secret key
db = Bob's secret key
Qa = Alice's public key
Qb = Bob's public key
S  = Shared secret

I Have:
daQb --> The public value sent from Alice.
db   --> My ""secret"" key.
Qb   --> My ""public"" key.
Sc   --> The ""correct"" shared secret as computed by above program

I have checked that my Qb and the daQb are on the sect283k1 curve.  If I use
sect283r1, things fail, and my points don't register on that curve using Openssl
EC_POINT, EC_KEY, EC_GROUP functions (I would post the code now, but I don't have
it in front of me.  As soon as I do, I'll try to post it here).  I have been able
to reproduce, as I said, two other modes, and it seems to work properly.  However,
in this mode, when I compute the key, I get Sw --> The ""wrong"" shared secret as computed
by MY program.
So, my question is this:  Do I have enough information to potentially determine if I may
be using the wrong db?  I don't think that I am, because in the other two cases, I can
get the db and it works fine.  Unfortunately, I don't have the source code for said program.  I am trying to create a tool that can work with the data generated by the original tool.
I thought of trying to invert Qb and multiply the data by daQb, but all that really does is
get me da, which, while interesting, doesn't lead me to a way I can use it on the shared secret I have to determine db, to check my work.
The other thing I thought of is that maybe a similar curve to sect283k1 was used, but NOT sect283k1 (i.e. maybe some different G?  I'm not sure if it is possible to use another generator on that curve, but I didn't think there was but 1 generator per curve, but maybe that is wrong, and maybe another generator would produce different results... i.e. the correct results).
At any rate, I've tried several things only to produce the same wrong key data using, presumably, the same data the other program is using.  Maybe someone with some far superior EC math knowledge (just about any would be better than my own, but I'm hoping for someone who can help me see what I'm missing) can show me a way I can reconcile what I get with what the other tool gets.
Unfortunately, I can stop just before the Rijndael key is set and see what it will be set to.  I can find that part of the key and see the original data that came from an ECDH_compute_key operation (which appears to essentially be an EC_POINT_mul between daQb and db (If I know enough about Diffie-Hellman key exchange... I've verified this much anyway using some openssl calls), and I know a few other things, but I can't locate the Bignum/EC code that would help me see what went into the operation.  So I'm looking for another way to skin the cat.
Thanks to anyone that can help.
","","144","<encryption><rijndael><elliptic-curve>","2","","0","2012-11-30 21:55:59","","0","","","","","2012-11-30 21:55:59",""
"55656854","How to transform a jwk to public key over openssl","I have a JWE and in header an ephemeral public key.
So I have coordinate X and Y.
My question in shell mode how to convert the JWK to ECC public key in pem format. 
For example, here a jwk
{""epk"":{""kty"":""EC"",""crv"":""P-256"",""x"":""GCl--lQHb7NKYU3jXpKVI_BYaTlALT5JFPdl3sbB9mY"",""y"":""ADRX25PBSlZJE79drET0ARtRqZAkUIMNt9aa2bbjBYY""}}

After I do this 
> # I convert the x coordonate from base64url to base64
> echo -n -e ""GCl++lQHb7NKYU3jXpKVI/BYaTlALT5JFPdl3sbB9mY"" | base64 -d | hexdump

0000000 2918 fa7e 0754 b36f 614a e34d 925e 2395
0000010 58f0 3969 2d40 493e f714 de65 c1c6 66f6
0000020

> echo -n -e ""ADRX25PBSlZJE79drET0ARtRqZAkUIMNt9aa2bbjBYY"" | base64 -d | hexdump

0000000 3400 db57 c193 564a 1349 5dbf 44ac 01f4
0000010 511b 90a9 5024 0d83 d6b7 d99a e3b6 8605
0000020

So the public key is
04
2918 fa7e 0754 b36f 614a e34d 925e 2395
58f0 3969 2d40 493e f714 de65 c1c6 66f6
3400 db57 c193 564a 1349 5dbf 44ac 01f4
511b 90a9 5024 0d83 d6b7 d99a e3b6 8605
But I have the curve, the public key, I want to know how to generate a pem?
In other words,
I have a file mykey.pub which contains this:
-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAETGUwowNEfqQ0LtHiMXJPY+Os5pXc
lsYCRPOi3F6K0n4k1RjJ7PGp/9RhZy3XS1yn1Qlu4hoCClHcc9rPXPn4fQ==
-----END PUBLIC KEY-----

I execute this command to display the public key:
> openssl ec -in mykey.pub -pubin -text -noout
read EC key
Public-Key: (256 bit)
pub:
    04:4c:65:30:a3:03:44:7e:a4:34:2e:d1:e2:31:72:
    4f:63:e3:ac:e6:95:dc:96:c6:02:44:f3:a2:dc:5e:
    8a:d2:7e:24:d5:18:c9:ec:f1:a9:ff:d4:61:67:2d:
    d7:4b:5c:a7:d5:09:6e:e2:1a:02:0a:51:dc:73:da:
    cf:5c:f9:f8:7d
ASN1 OID: prime256v1
NIST CURVE: P-256


So my question is if I have this data
> openssl ec -in mykey.pub -pubin -text -noout
read EC key
Public-Key: (256 bit)
pub:
    04:4c:65:30:a3:03:44:7e:a4:34:2e:d1:e2:31:72:
    4f:63:e3:ac:e6:95:dc:96:c6:02:44:f3:a2:dc:5e:
    8a:d2:7e:24:d5:18:c9:ec:f1:a9:ff:d4:61:67:2d:
    d7:4b:5c:a7:d5:09:6e:e2:1a:02:0a:51:dc:73:da:
    cf:5c:f9:f8:7d
ASN1 OID: prime256v1
NIST CURVE: P-256


how to retrieve this in shell mode
-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAETGUwowNEfqQ0LtHiMXJPY+Os5pXc
lsYCRPOi3F6K0n4k1RjJ7PGp/9RhZy3XS1yn1Qlu4hoCClHcc9rPXPn4fQ==
-----END PUBLIC KEY-----

","Let me first briefly describe your target format. What you are seeking to obtain is a PEM encoded SubjectPublicKeyInfo (SPKI) file. PEM encoding is essentially DER encoding (which is a binary format) and then base64 encoded with a header and footer. The SPKI structure is defined in RFC5280 (see section 4.1):
https://tools.ietf.org/html/rfc5280#section-4.1
   SubjectPublicKeyInfo  ::=  SEQUENCE  {
        algorithm            AlgorithmIdentifier,
        subjectPublicKey     BIT STRING  }

So the first chunk of bytes in the binary DER encoding consists of a header that identifies the algorithm being used (and part of that includes the curve). The last bytes are the raw public key (which is an encoded x and y co-ordinate on the curve).
Since your sample key is for the same curve as the key you want to create it will have the same AlgorithmIdentifier header bytes. Taking your mykey.pub file we can convert it to the binary DER format:
$ openssl ec -in mykey.pub -pubin -outform DER -out key.der

Lets look at the contents:
$ hexdump -C key.der
00000000  30 59 30 13 06 07 2a 86  48 ce 3d 02 01 06 08 2a  |0Y0...*.H.=....*|
00000010  86 48 ce 3d 03 01 07 03  42 00 04 4c 65 30 a3 03  |.H.=....B..Le0..|
00000020  44 7e a4 34 2e d1 e2 31  72 4f 63 e3 ac e6 95 dc  |D~.4...1rOc.....|
00000030  96 c6 02 44 f3 a2 dc 5e  8a d2 7e 24 d5 18 c9 ec  |...D...^..~$....|
00000040  f1 a9 ff d4 61 67 2d d7  4b 5c a7 d5 09 6e e2 1a  |....ag-.K\...n..|
00000050  02 0a 51 dc 73 da cf 5c  f9 f8 7d                 |..Q.s..\..}|
0000005b

You can see the first bytes of the public key that you printed out above starting at offset 0x1a (i.e. 26 bytes in): 04 4c 65 30 .... The raw public key data extends all the way the end of the file and is 65 bytes long. This consists of a leading 0x04 byte followed by 32 bytes of x co-ordinate and 32 bytes of y co-ordinate. The leading 0x04 tells us how the co-ordinate is represented. 0x04 means ""uncompressed"" - which is handy because that's the simplest for us to deal with. We will also use uncompressed format for our target key. Therefore we need to take the first 26 bytes of header plus the 0x04 byte (so 27 bytes in total) from our sample key:
$ head -c 27 key.der >key.head

And just to check we got what we were expecting:
$ hexdump -C key.head
00000000  30 59 30 13 06 07 2a 86  48 ce 3d 02 01 06 08 2a  |0Y0...*.H.=....*|
00000010  86 48 ce 3d 03 01 07 03  42 00 04                 |.H.=....B..|
0000001b

Now we create the x and y elements of our co-ordinate, which you already did:
$ echo -n ""GCl++lQHb7NKYU3jXpKVI/BYaTlALT5JFPdl3sbB9mY="" | base64 -d >key.x
$ echo -n ""ADRX25PBSlZJE79drET0ARtRqZAkUIMNt9aa2bbjBYY="" | base64 -d >key.y

And then put all the elements together:
cat key.head key.x key.y >keynew.der

We can convert the new key in DER format to PEM format:
$ openssl ec -in keynew.der -inform DER -pubin -out keynew.pem

Which gives us:
-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEGCl++lQHb7NKYU3jXpKVI/BYaTlA
LT5JFPdl3sbB9mYANFfbk8FKVkkTv12sRPQBG1GpkCRQgw231prZtuMFhg==
-----END PUBLIC KEY-----

And just to check it looks sane:
$ openssl ec -in keynew.pem -pubin -noout -text
read EC key
Public-Key: (256 bit)
pub:
    04:18:29:7e:fa:54:07:6f:b3:4a:61:4d:e3:5e:92:
    95:23:f0:58:69:39:40:2d:3e:49:14:f7:65:de:c6:
    c1:f6:66:00:34:57:db:93:c1:4a:56:49:13:bf:5d:
    ac:44:f4:01:1b:51:a9:90:24:50:83:0d:b7:d6:9a:
    d9:b6:e3:05:86
ASN1 OID: prime256v1
NIST CURVE: P-256

","143","<encryption><openssl><public-key-encryption><elliptic-curve><jwk>","1","1","1","2019-04-12 23:26:41","55660604","0","","","","","2019-04-12 17:26:20",""
"42561072","How do I get OpenSSL to populate the EC_POINT in my EC_KEY?","Sample code:
void BN_println_fp(char* name, BIGNUM* value) {
    if (value != NULL) {
        printf(""%s: "", name);
        BN_print_fp(stdout, value);
        printf(""\n"");
    }
}

void populatePublicKey(int curveName) {
    EC_GROUP *ecgrp = EC_GROUP_new_by_curve_name( curveName );
    EC_KEY* eccKey = EC_KEY_new_by_curve_name(curveName);
    EC_KEY_set_asn1_flag(eccKey, OPENSSL_EC_NAMED_CURVE);
    EC_KEY_set_enc_flags(eccKey, 0);
    if (EC_KEY_generate_key(eccKey) != 1) {
        return NULL;
    }
    EC_POINT *pub = EC_POINT_new( ecgrp );
    const BIGNUM* pbn = EC_KEY_get0_private_key(eccKey);
    EC_POINT_mul( ecgrp, pub, pbn, NULL, NULL, NULL );
    EC_KEY_set_public_key( eccKey, pub);
    BN_println_fp(""X"", pub->X);
    BN_println_fp(""Y"", pub->Y);
    BN_println_fp(""Z"", pub->Z);
}

The output is unpredictable, but invariably involves a panic due to accessing invalid pointers in pub.  But if I instead print out the key using the following function, I get a public key printed.
void printECDSA(EVP_PKEY *pkey) {
    BIO* fp = BIO_new_fp(stdout, BIO_NOCLOSE);
    EVP_PKEY_print_public(fp, pkey, 3, NULL);
    EVP_PKEY_print_private(fp, pkey, 3, NULL);
    BIO_free(fp);
}

What gives?
","","141","<c><encryption><openssl><elliptic-curve>","2","","0","2017-03-02 16:42:04","","1","1","","","","2017-03-02 16:42:04",""
"43942021","Compiling through gcc and using -ltr results in an error, how to fix it?","Iwant compile the fourQ lib from Microsoft foe ARM-architecture. When I try to link the parts it turns me out an error:
FourQ_x64_and_portable>make CC=gcc ARCH=ARM GENERIC=TRUE
gcc -c -O3        -D _ARM_ -D __LINUX__    -D _GENERIC_     ecc_tests.c
gcc -c -O3        -D _ARM_ -D __LINUX__    -D _GENERIC_     FourQ.c
gcc -c -O3        -D _ARM_ -D __LINUX__    -D _GENERIC_     eccp2.c
gcc -c -O3        -D _ARM_ -D __LINUX__    -D _GENERIC_     eccp2_no_endo.c
gcc -c -O3        -D _ARM_ -D __LINUX__    -D _GENERIC_     eccp2_core.c
gcc -c -O3        -D _ARM_ -D __LINUX__    -D _GENERIC_     test_extras.c
gcc -o ecc_test ecc_tests.o FourQ.o eccp2.o eccp2_no_endo.o eccp2_core.o  test_extras.o  -lrt
c:/mingw/bin/../lib/gcc/mingw32/5.3.0/../../../../mingw32/bin/ld.exe: cannot find -lrt
collect2.exe: error: ld returned 1 exit status
make: *** [ecc_test] Error 1

mingw32/5.3.0/../../../../mingw32/bin/ld.exe: cannot find -lrt
So, does anyone know how to fix it on Win10 with MinGW?
","Those errors mention that there is a missing lib. In this case ""-librt"" = ""-lrt"" is missing. 
So this errors arise. ""-l"" declares to use a lib, ""rt"" is the name of the ""rt.a"" or ""rt.ld"" lib-file. 
","138","<c><gcc><arm><cross-compiling><elliptic-curve>","0","0","1","2017-09-14 07:20:13","46212870","0","","","","","2017-05-12 16:00:38",""
"26586118","Example of factorization with the Montgomery curve","I have programmed the elliptic curve method for integer factorization using Montgomery curves(the same idea as Lenstra's elliptic curve method, just changed a bit so it works with Montgomey curves). However, I haven't really been able to find any examples of numbers being factorized using the method, and I would really like to be able to test it on numbers I know should give a result, in order to check if it works as it should. So my question is, does anyone have an example of the method used on numbers, so that I can see whether my code gives the same output using the same numbers?
","You might like to factor the Mersenne number M(677) = 2^677-1 = 1943118631 * 531132717139346021081 * 978146583988637765536217 * P53 * P98. The P53 can be found by elliptic curve factorization with B1 = 9000000, B2 = 16000000, and lucky curve sigma = 8689346476060549. You might enjoy my blog, which gives a solution to that factorization and also has a bunch of other prime-number stuff if you want to poke around.
","131","<elliptic-curve><factorization>","0","0","1","2014-10-27 14:33:36","","1","","","","","2014-10-27 11:03:04",""
"52296243","Decrypt Apple Business Chat auth token","I'm looking at this integration document:
https://register.apple.com/resources/business-chat/BC_Sending_an_Auth_Msg.pdf
See ""How to Decrypt Your Auth Token"" section
I am using Bouncy Castle v1.8.3 for c#
I have a test console app:
namespace AppleBusinessChat45
{
    class Program
    {
        static void Main(string[] args)
        {
            var publicKey = ""BNY+I93aHVkXnNWKVLdrMJLXpQ1BsyHYoiv6UNi4rDUsRx3sNNhW8FNy9yUwxYprAwwfj1ZkoJ61Fs+SwjIbGPtXi52arvSbPglyBN4uAxtP3VP3LCP4JtSEjdgsgsretA=="";
            var privateKey = ""pX/BvdXXUdpC79mW/jWi10Z6PJb5SBY2+aqkR/qYOjqgakKsqZFKnl0kz10Ve+BP"";
            var token = ""BDiRKNnPiPUb5oala31nkmCaXMB0iyWy3Q93p6fN7vPxEQSUlFVsInkJzPBBqmW1FUIY1KBA3BQb3W3Qv4akZ8kblqbmvupE/EJzPKbROZFBNvxpvVOHHgO2qadmHAjHSmnxUuxrpKxopWnOgyhzUx+mBUTao0pcEgqZFw0Y/qZIJPf1KusCMlz5TAhpjsw="";

            var decodedToken = Base64.Decode(token);
            var decodedEphemeralPublicKey = decodedToken.Take(97).ToArray();
            var encodedEphemeralPublicKeyCheck = Encoding.ASCII.GetString(Base64.Encode(decodedEphemeralPublicKey));

            if (encodedEphemeralPublicKeyCheck != ""BDiRKNnPiPUb5oala31nkmCaXMB0iyWy3Q93p6fN7vPxEQSUlFVsInkJzPBBqmW1FUIY1KBA3BQb3W3Qv4akZ8kblqbmvupE/EJzPKbROZFBNvxpvVOHHgO2qadmHAjHSg=="")
                throw new Exception(""Public key check failed"");

            X9ECParameters curveParams = ECNamedCurveTable.GetByName(""secp384r1"");
            ECPoint decodePoint = curveParams.Curve.DecodePoint(decodedEphemeralPublicKey);
            ECDomainParameters domainParams = new ECDomainParameters(curveParams.Curve, curveParams.G, curveParams.N, curveParams.H, curveParams.GetSeed());
            ECPublicKeyParameters ecPublicKeyParameters = new ECPublicKeyParameters(decodePoint, domainParams);

            var x = ecPublicKeyParameters.Q.AffineXCoord.ToBigInteger();
            var y = ecPublicKeyParameters.Q.AffineYCoord.ToBigInteger();

            if (!x.Equals(new BigInteger(""8706462696031173094919866327685737145866436939551712382591956952075131891462487598200779332295613073905587629438229"")))
                throw new Exception(""X coord check failed"");

            if (!y.Equals(new BigInteger(""10173258529327482491525749925661342501140613951412040971418641469645769857676705559747557238888921287857458976966474"")))
                throw new Exception(""Y coord check failed"");

            var privateKeyBytes = Strings.ToByteArray(privateKey);
            ECPrivateKeyParameters ecPrivateKeyParameters = new ECPrivateKeyParameters(new BigInteger(privateKeyBytes), domainParams);

            IBasicAgreement agree = AgreementUtilities.GetBasicAgreement(""ECDHC"");
            agree.Init(ecPrivateKeyParameters);
            BigInteger sharedKey = agree.CalculateAgreement(ecPublicKeyParameters);
            var sharedKeyBytes = sharedKey.ToByteArrayUnsigned();

            // Expecting:
            // 2lvSJsBO2keUHRfvPG6C1RMUmGpuDbdgNrZ9YD7RYnvAcfgq/fjeYr1p0hWABeif

            Console.WriteLine(""Done"");
            Console.ReadLine();
        }
    }
}

The documentation states ""The example private key is represented as the unsigned scalar converted to bytes."" and has a value of:
pX/BvdXXUdpC79mW/jWi10Z6PJb5SBY2+aqkR/qYOjqgakKsqZFKnl0kz10Ve+BP
I may be reading the private key incorrectly? As the secret key I try and resolve does not match the expected value in the documentation.
There is little implementation detail online.
In terms of Bouncy Castle, how might the private key be read from a string and then used to produce the shared key?
UPDATE
For those looking for a complete example implementation of decrypting the apple chat auth token, see below:
namespace AppleBusinessChat45
{
    class Program
    {
        static void Main(string[] args)
        {
            var privateKey = ""pX/BvdXXUdpC79mW/jWi10Z6PJb5SBY2+aqkR/qYOjqgakKsqZFKnl0kz10Ve+BP"";
            var token = ""BDiRKNnPiPUb5oala31nkmCaXMB0iyWy3Q93p6fN7vPxEQSUlFVsInkJzPBBqmW1FUIY1KBA3BQb3W3Qv4akZ8kblqbmvupE/EJzPKbROZFBNvxpvVOHHgO2qadmHAjHSmnxUuxrpKxopWnOgyhzUx+mBUTao0pcEgqZFw0Y/qZIJPf1KusCMlz5TAhpjsw="";

            // #####
            // ##### Step 1
            // #####
            var decodedToken = Convert.FromBase64String(token);
            var decodedEphemeralPublicKey = decodedToken.Take(97).ToArray();
            var encodedEphemeralPublicKeyCheck = Convert.ToBase64String(decodedEphemeralPublicKey);

            if (encodedEphemeralPublicKeyCheck != ""BDiRKNnPiPUb5oala31nkmCaXMB0iyWy3Q93p6fN7vPxEQSUlFVsInkJzPBBqmW1FUIY1KBA3BQb3W3Qv4akZ8kblqbmvupE/EJzPKbROZFBNvxpvVOHHgO2qadmHAjHSg=="")
                throw new Exception(""Public key check failed"");

            X9ECParameters curveParams = ECNamedCurveTable.GetByName(""secp384r1"");
            ECPoint decodePoint = curveParams.Curve.DecodePoint(decodedEphemeralPublicKey);
            ECDomainParameters domainParams = new ECDomainParameters(curveParams.Curve, curveParams.G, curveParams.N, curveParams.H, curveParams.GetSeed());
            ECPublicKeyParameters ecPublicKeyParameters = new ECPublicKeyParameters(decodePoint, domainParams);

            var x = ecPublicKeyParameters.Q.AffineXCoord.ToBigInteger();
            var y = ecPublicKeyParameters.Q.AffineYCoord.ToBigInteger();

            if (!x.Equals(new BigInteger(""8706462696031173094919866327685737145866436939551712382591956952075131891462487598200779332295613073905587629438229"")))
                throw new Exception(""X coord check failed"");

            if (!y.Equals(new BigInteger(""10173258529327482491525749925661342501140613951412040971418641469645769857676705559747557238888921287857458976966474"")))
                throw new Exception(""Y coord check failed"");

            Console.WriteLine(""Step 1 complete"");

            // #####
            // ##### Step 2
            // #####
            var privateKeyBytes = Convert.FromBase64String(privateKey);
            var ecPrivateKeyParameters = new ECPrivateKeyParameters(""ECDHC"", new BigInteger(1, privateKeyBytes), domainParams);
            var privateKeyInfo = PrivateKeyInfoFactory.CreatePrivateKeyInfo(ecPrivateKeyParameters);
            var ecPrivateKey = (ECPrivateKeyParameters) PrivateKeyFactory.CreateKey(privateKeyInfo);

            IBasicAgreement agree = AgreementUtilities.GetBasicAgreement(""ECDHC"");
            agree.Init(ecPrivateKey);
            BigInteger sharedKey = agree.CalculateAgreement(ecPublicKeyParameters);
            var sharedKeyBytes = sharedKey.ToByteArrayUnsigned();
            var sharedKeyBase64 = Convert.ToBase64String(sharedKeyBytes);

            if (sharedKeyBase64 != ""2lvSJsBO2keUHRfvPG6C1RMUmGpuDbdgNrZ9YD7RYnvAcfgq/fjeYr1p0hWABeif"")
                throw new Exception(""Shared key check failed"");

            Console.WriteLine(""Step 2 complete"");

            // #####
            // ##### Step 3
            // #####
            var kdf2Bytes = Kdf2(sharedKeyBytes, decodedEphemeralPublicKey);
            var kdf2Base64 = Convert.ToBase64String(kdf2Bytes);

            if (kdf2Base64 != ""mAzkYatDlz4SzrCyM23NhgL/+mE3eGgfUz9h1CFPhZOtXequzN3Q8w+B5GE2eU5g"")
                throw new Exception(""Kdf2 failed"");

            Console.WriteLine(""Step 3 complete"");

            // #####
            // ##### Step 4
            // #####
            var decryptionKeyBytes = kdf2Bytes.Take(32).ToArray();
            var decryptionIvBytes = kdf2Bytes.Skip(32).ToArray();

            var decryptionKeyBase64 = Convert.ToBase64String(decryptionKeyBytes);
            var decryptionIvBase64 = Convert.ToBase64String(decryptionIvBytes);

            if (decryptionKeyBase64 != ""mAzkYatDlz4SzrCyM23NhgL/+mE3eGgfUz9h1CFPhZM="")
                throw new Exception(""Decryption key check failed"");

            if (decryptionIvBase64 != ""rV3qrszd0PMPgeRhNnlOYA=="")
                throw new Exception(""Decryption iv check failed"");

            var encryptedDataBytes = decodedToken.Skip(97).Take(decodedToken.Length - 113).ToArray();
            var tagBytes = decodedToken.Skip(decodedToken.Length - 16).ToArray();

            var encryptedDataBase64 = Convert.ToBase64String(encryptedDataBytes);
            var tagBase64 = Convert.ToBase64String(tagBytes);

            if (encryptedDataBase64 != ""afFS7GukrGilac6DKHNTH6YFRNqjSlwSCpkXDRj+"")
                throw new Exception(""Encrypted data check failed"");

            if (tagBase64 != ""pkgk9/Uq6wIyXPlMCGmOzA=="")
                throw new Exception(""Tag check failed"");

            KeyParameter keyParam = ParameterUtilities.CreateKeyParameter(""AES"", decryptionKeyBytes);
            ParametersWithIV parameters = new ParametersWithIV(keyParam, decryptionIvBytes);
            IBufferedCipher cipher = CipherUtilities.GetCipher(""AES/GCM/NoPadding"");
            cipher.Init(false, parameters);
            var resultBytes = cipher.DoFinal(encryptedDataBytes.Concat(tagBytes).ToArray());
            var resultBase64 = Convert.ToBase64String(resultBytes);
            var resultString = Strings.FromByteArray(resultBytes);

            if (resultString != ""xXTi32iZwrQ6O8Sy6r1isKwF6Ff1Py"")
                throw new Exception(""Decryption failed"");

            Console.WriteLine(""Step 4 complete"");
            Console.WriteLine(resultString);

            Console.WriteLine();
            Console.WriteLine(""Done... press any key to finish"");
            Console.ReadLine();
        }

        static byte[] Kdf2(byte[] sharedKeyBytes, byte[] ephemeralKeyBytes)
        {
            var gen = new Kdf2BytesGenerator(new Sha256Digest());
            gen.Init(new KdfParameters(sharedKeyBytes, ephemeralKeyBytes));

            byte[] encryptionKeyBytes = new byte[48];
            gen.GenerateBytes(encryptionKeyBytes, 0, encryptionKeyBytes.Length);
            return encryptionKeyBytes;
        }
    }
}

","Replace this:
var privateKeyBytes = Strings.ToByteArray(privateKey);
ECPrivateKeyParameters ecPrivateKeyParameters = new ECPrivateKeyParameters(new BigInteger(privateKeyBytes), domainParams);

IBasicAgreement agree = AgreementUtilities.GetBasicAgreement(""ECDHC"");
agree.Init(ecPrivateKeyParameters);

With this:
var privateKeyBytes = Convert.FromBase64String(privateKey);
var ecPrivateKeyParameters = new ECPrivateKeyParameters(""ECDHC"", new BigInteger(1, privateKeyBytes), domainParams);
var privateKeyInfo = PrivateKeyInfoFactory.CreatePrivateKeyInfo(ecPrivateKeyParameters);
var ecPrivateKey = (ECPrivateKeyParameters)PrivateKeyFactory.CreateKey(privateKeyInfo);

var agree = AgreementUtilities.GetBasicAgreement(""ECDHC"");
agree.Init(ecPrivateKey);

and it should work.
","130","<c#><bouncycastle><elliptic-curve><apple-business-chat>","2","2","1","2018-09-19 08:21:04","52298395","2","","31412","","2018-09-13 08:23:49","2018-09-12 13:20:56",""
"4165937","Quadratic extension field (or complex numbers) with OpenSSL's BN?","Does OpenSSL have any support for operations in the quadratic extension field (or, alternatively, operations with complex numbers) using the BN API?
If not, are there any other open source libraries that do?
","You may want to look at PBC. This is a library for computing pairings on some elliptic curves, which implies using field extensions of various degrees, including quadratic extensions for some fields.
","129","<c><openssl><bignum><elliptic-curve>","1","1","1","2010-11-14 15:11:50","4178068","1","","","","","2010-11-12 15:04:55",""
"10027692","different brainpoolP521r1 parameters for flexiProvider. Why?","I am trying to generate ECC public private key pairs using flexiProvider. I have noticed that values for parameters like p and q are different in brainpoolP521r1 of flexiProvider than those which are specified in many sites. Values specified are Q= AADD.... but what I get is Q=8948... Any idea why flexiProvider does not use specified values and whether having different values is affectes security. I am new to ECC. Any help will be greatly appreciated.
","From OP:

I was printing values in decimal

","125","<java><elliptic-curve>","0","0","1","2014-01-20 22:13:22","","2","","","","","2012-04-05 11:26:07",""
"42609357","How can I Ecrypt using public key generated by jpbc","I am using jpbc(Java pairing based cryptography) to generate public and private keys.  
secret Key=random from Zn (for some n)  
private key=g^secretkey (g is generator)

The generated private key is 520970816610209807017211106072619643342231254982
and public key is 4364377476297398825794257780988969517972762758994254008863941913533830544083793244716093661347745129442432381929639153665437466547480708857597314131003216,6339898572588712728071523268489373098073453182596905335679653151242814037451740962958045848480557497628222698939931012677610106015750048131397924068665707,0  
First Request:My first confusion is that why there are commas in public key? generator g also has comma separated values.
If I have integer m to encrypt, I suppose that it can be encrypted by:  
 encrypted=m^public_key  
 decrypted=m^private_key  

(Correct me if this is wrong (Is mod n required?))
Second Request: How can I encrypt m using those Comma separated public key?
Thanks for help.
","","124","<java><encryption><public-key-encryption><elliptic-curve>","0","","0","2017-03-05 14:09:01","","8","","","","","2017-03-05 14:09:01",""
"54884372","mbedTLS ECC Operations","I've already searched for my question in the documentation of mbedtls but there was no explicit answer.
Is there any way to generate public and private ECC keys with mbedTLS? I've already got sha256 properly working, with the help of a tutorial, but it seems that ECC operations are not well documented.
Is there an example, on how to generate a private/public key on the NIST P-256 curve?
Thanks for you help.
","Here is a sample code to generate ECC keys (but without any check of the return value):
    mbedtls_pk_context key;
    mbedtls_entropy_context entropy;
    mbedtls_ctr_drbg_context ctr_drbg;

    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_ECKEY;

    mbedtls_pk_init(&key);
    mbedtls_entropy_init( &entropy );
    mbedtls_ctr_drbg_init(&ctr_drbg);


    ret = mbedtls_pk_setup(&key, mbedtls_pk_info_from_type(pk_alg));

    ret = mbedtls_ctr_drbg_seed(&ctr_drbg, mbedtls_entropy_func,
                               &entropy,
                               (const unsigned char *) ""ecdsa"",
                               strlen(pers)
    );

    ret = mbedtls_ecp_gen_key(<KEY TYPE>,
                              mbedtls_pk_ec(key),
                              mbedtls_ctr_drbg_random,
                              &ctr_drbg
    );

Where <KEY_TYPE> can be found at: https://tls.mbed.org/api/ecp_8h.html#af79e530ea8f8416480f805baa20b1a2d and in your case should be MBEDTLS_ECP_DP_SECP256R1.
","123","<c><elliptic-curve><mbedtls>","2","2","1","2019-02-26 19:05:33","54888426","0","","6949178","","2019-02-26 19:05:33","2019-02-26 11:21:36",""
"37733953","EllipticCurve, sagemath","I have an elliptic curve defined by 
y^2 = x^3 + 1062282974404935987005872930817*x + 1204388198013706813607478558721 over Finite Field of size 2017313518945563799802055961909.
And I want to get a point on this curve of order 3569809307570934983774171.
How can I get it?
","Easily you can see that the order of E, is 2017313518945565643070719128784. The main stage is that you find the generator(s) of E, and with SageMath they are: 
H_1 = (651721743085147348480059087840, 277924022187240437411690075386) 
and 
H_2 = (364767631279436218861124076682, 0)
But you can see that the order of H_1 is 1008656759472782821535359564392, so 
G = 565104 * H_1 
G = (1144674520220442511918931779419, 850803345221750997044804585048)
is the desired point on E.
","119","<sage><elliptic-curve>","0","0","1","2016-06-26 09:35:22","","0","","","","","2016-06-09 18:48:58",""
"55555891","How can one add password to ECC private key generated by openssl?","I am trying to create Elliptic Curve based certificates using the OpenSSL command line interface. I am generating the key files by typing the following command in my CLI:
openssl ecparam -name secp256k1 -genkey -noout -out rootpem.pem

The problem is although the ECC key is successfully generated, it is not encrypted with any symmetric cryptography. However, it was pretty simple to encrypt an RSA key using the command below:
openssl genrsa -aes128 -out 1.key 2048 

Is there anyway to encrypt ECC keys just like RSA keys?
I have tried ""OpenSSL 0.9.8zh 14 Jan 2016"" and ""OpenSSL 1.1.0g  2 Nov 2017"" OpenSSL versions with multiple argument combination but I always get error.
","As far as I tried, there is not a single line solution for it. It can be generate by piping openssl ecparam to openssl ec command. One possible solution is this:
openssl ecparam -genkey -name secp384r1 | openssl ec -aes-256-cbc -out rootpem.[pem/key]

Looking at the generated files, they have similar headers as the OpenSSL wiki examples. However, I am not sure whether this piping is safe or not as the unencrypted key is nakedly piped.
","119","<openssl><elliptic-curve>","0","0","2","2019-04-07 08:03:40","55556694","1","","","","","2019-04-07 05:25:37",""
"55555891","How can one add password to ECC private key generated by openssl?","I am trying to create Elliptic Curve based certificates using the OpenSSL command line interface. I am generating the key files by typing the following command in my CLI:
openssl ecparam -name secp256k1 -genkey -noout -out rootpem.pem

The problem is although the ECC key is successfully generated, it is not encrypted with any symmetric cryptography. However, it was pretty simple to encrypt an RSA key using the command below:
openssl genrsa -aes128 -out 1.key 2048 

Is there anyway to encrypt ECC keys just like RSA keys?
I have tried ""OpenSSL 0.9.8zh 14 Jan 2016"" and ""OpenSSL 1.1.0g  2 Nov 2017"" OpenSSL versions with multiple argument combination but I always get error.
","Or you could do it in two steps: first the 'ecparam', then the key
openssl ecparam -name secp256k1 -out ecparam.pem
openssl genpkey -paramfile ecparam.pem -out key.pem -aes-128-cbc -pass pass:HereIsThePassword

","119","<openssl><elliptic-curve>","0","0","2","2019-04-07 08:03:40","55556694","1","","","","","2019-04-07 05:25:37",""
"43844654","Elliptic Curve Cryptography PHP: catchable fatal error argument 1 passed to __construct()","I am trying to use Elliptic Curve Cryptography using Matyas Danter's phpecc libraries available in 1 . However, I am getting the following error when I create the variable Alice , although the passed argument is a Point.. please help..

Catchable fatal error: Argument 1 passed to EcDH::__construct() must be an instance of Point, string given, called in C:\xampp\htdocs\ECC-example.php on line 31 and defined in C:\xampp\htdocs\classes\EcDH.php on line 39

         include 'autoload.inc.php';
         include 'classes/EcDH.php';
         include 'classes/PHPECC.class.php';
         include 'classes/SECurve.class.php';
         $keypair = PHPECC::hex_keypair_genorate();

         $g = NISTcurve::generator_192();
         echo $g;
         $Alice = new EcDH(g);

..........................................
NISTcurve.php has the below function:
         public static function generator_192() {
         // NIST Curve P-192:
        if (extension_loaded('gmp') && USE_EXT == 'GMP') {
        $_p = '6277101735386680763835789423207666416083908700390324961279';
        $_r = '6277101735386680763835789423176059013767194773182842284081';
        $_b = gmp_Utils::gmp_hexdec('0x64210519e59c80e70fa7e9ab72243049feb8deecc146b9b1');
        $_Gx = gmp_Utils::gmp_hexdec('0x188da80eb03090f67cbf20eb43a18800f4ff0afd82ff1012');
        $_Gy = gmp_Utils::gmp_hexdec('0x07192b95ffc8da78631011ed6b24cdd573f977a11e794811');

        $curve_192 = new CurveFp($_p, -3, $_b);
        $generator_192 = new Point($curve_192, $_Gx, $_Gy, $_r);
    } else if (extension_loaded('bcmath') && USE_EXT == 'BCMATH') {
        $_p = '6277101735386680763835789423207666416083908700390324961279';
        $_r = '6277101735386680763835789423176059013767194773182842284081';
        $_b = bcmath_Utils::bchexdec('0x64210519e59c80e70fa7e9ab72243049feb8deecc146b9b1');
        $_Gx = bcmath_Utils::bchexdec('0x188da80eb03090f67cbf20eb43a18800f4ff0afd82ff1012');
        $_Gy = bcmath_Utils::bchexdec('0x07192b95ffc8da78631011ed6b24cdd573f977a11e794811');

        $curve_192 = new CurveFp($_p, -3, $_b);
        $generator_192 = new Point($curve_192, $_Gx, $_Gy, $_r);
    }
    return $generator_192;
}

","The error was in the last line
$Alice = new EcDH(g) -> wrong
$Alice = new EcDH($g) -> correct
A sily mistake that caused a huge error..
","111","<php><encryption><public-key-encryption><elliptic-curve><diffie-hellman>","0","0","1","2017-05-22 08:34:47","","0","","","","","2017-05-08 09:54:28",""
"41844513","Convert GMP code into Parallel using MPI","I have a  Pollard  Rho code in GMP for Elliptic Curve Discrete logarithmic problem (ECDLP) which I wanted to parallelize using MPI. Kindly guide me whether it is possible to use both libraries simultaneous in the same C code OR do I have to convert my entire code into MPI syntax.
","GMP is a multi-precision arithmetic library.
MPI's a library and set of tools that enables you to run your code in different processes (though some versions of MPI used threads, this is not common).
Since processes do not share memory, anything you're doing with GMP in one process will not affect another.
Your only worry is that GMP is doing some kind of internal multithreading to speed things up (I don't think it does). If so, allocate fewer processes in MPI than you otherwise might or disable GMP's multithreading.
","109","<c><parallel-processing><mpi><gmp><elliptic-curve>","0","3","1","2017-01-25 06:07:54","41844586","2","1","","","","2017-01-25 06:02:58",""
"45698520","ECDH Generating Public key causes the point to not be on the curve VB.net","I am not sure whether this question was relevant for stackoverflow or cryptography stackexchange, but I thought that I would ask it here as the question might go into programming.
I am trying to generate a public and private keypair using elliptic curve diffie-hellman, I successfully generate a private key that is smaller than the order of the curve but when I calculate the public key by multiplying the base point by the private key I calculate a point that is not on the curve.
The code I am using to generate the keys looks like this:
Public Shared Function generate_Keys(ByVal Param As Domain_Parameters) As Keys
        Dim __PrivateKey As BigInteger
        Dim __PublicKey As ECPoint
        Dim d As BigInteger
        Dim rng As New RNGCryptoServiceProvider
        Dim bytes(Param.n.ToByteArray.Length) As Byte
        Do
            rng.GetBytes(bytes)
            d = New BigInteger(bytes)
            If d.Sign = -1 Then
                d = d * -1
            End If
        Loop While d >= Param.n
        __PrivateKey = d
        __PublicKey = Point_Operations.Scalar_Mult(Param.Base, Param, d)
        Dim Ret As Keys
        Ret.PublicKey = __PublicKey
        Ret.PrivateKey = __PrivateKey
        __PrivateKey = BigInteger.Zero()
        d = BigInteger.Zero()
        bytes = {0}
        Return Ret
    End Function

And the code that I have tested and works fine to multiply the base point by the private key looks like this:
Public Class Point_Operations
''' <summary>
''' A structure that contains data returned from Extended_GCD function
''' </summary>
Friend Structure RetGCD
    Public x As BigInteger
    Public y As BigInteger
    Public GCD As BigInteger
End Structure
''' <summary>
''' Perfomrs addition of two points
''' </summary>
Public Shared Function Addition(ByVal P1 As ECPoint, ByVal P2 As ECPoint) As ECPoint
    'Details about the maths was found on https://en.wikipedia.org/wiki/Elliptic_curve_point_multiplication
    'Tested with the site http://christelbach.com/ECCalculator.aspx
    If P1.IsPointInfinity() Then
        Return P2
    End If
    If P2.IsPointInfinity() Then
        Return P1
    End If
    If P1.p <> P2.p Then
        Return New ECPoint(-99, -99, -99) 'Add custom errors with ENUM
    End If
    If P1.x = P2.x And P1.y = P2.y Then
        Return New ECPoint(-99, -99, -99)
    End If
    Dim P3 As New ECPoint(P1)
    Dim l, z As BigInteger
    z = Inverse((P2.x - P1.x), P1.p)
    l = ((P2.y - P1.y) * z) Mod P1.p
    P3.x = ((l * l) Mod P1.p - P2.x - P1.x) Mod P1.p
    P3.y = (l * (P1.x - P3.x) Mod P1.p - P1.y) Mod P1.p
    If P3.x < 0 Then 'Tested the code without the peice below and found that the input (10,10,47) and (20,20,47) returned wrong values found out that the difference between each was the prime number so if its less than zero we add the prime whcih seems to work
        P3.x += P1.p
    End If
    If P3.y < 0 Then
        P3.y += P1.p
    End If
    Return P3
End Function
''' <summary>
''' A way of doubling a EC Point
''' </summary>
Public Shared Function PDouble(ByVal P As ECPoint, ByVal a As Domain_Parameters) As ECPoint
    'Details about the maths was found on https://en.wikipedia.org/wiki/Elliptic_curve_point_multiplication
    'Tested with the site http://christelbach.com/ECCalculator.aspx
    If P.p = 0 And a.Fp.p = 0 Then
        Return New ECPoint(-99, -99, -99)
    End If
    'If a.a = 0 Then
    '    Return New ECPoint(-99, -99, -99)
    'End If
    If P.IsPointInfinity() Then
        Return P
    End If
    Dim prime As BigInteger
    If P.p = 0 Then
        prime = a.Fp.p
    Else
        prime = P.p
    End If
    Dim Q As New ECPoint(P)
    Dim l, z As BigInteger
    z = Inverse(2 * P.y, P.p)
    l = ((((3 * P.x * P.x) Mod P.p + a.a) Mod P.p) * z) Mod P.p
    Q.x = ((l * l) Mod P.p - 2 * P.x) Mod P.p     'accidental set (2 * p.x) to (2 * P.p)
    Q.y = (l * (P.x - Q.x) Mod P.p - P.y) Mod P.p
    If Q.x < 0 Then 'This code was tested and the same problem again with negative values for x and y so we must add the prime to p to correct that
        Q.x += P.p
    End If
    If Q.y < 0 Then
        Q.y += P.p
    End If
    Return Q
End Function
''' <summary>
''' Performs point multiplication with a scalar
''' </summary>
Public Shared Function Scalar_Mult(ByVal P As ECPoint, ByVal a As Domain_Parameters, ByVal Scalar As BigInteger) As ECPoint
    'Details about the maths was found on https://en.wikipedia.org/wiki/Elliptic_curve_point_multiplication
    'Tested with the site http://christelbach.com/ECCalculator.aspx
    If P.p = 0 And a.Fp.p = 0 Then
        Return New ECPoint(-99, -99, -99)
    End If
    'If a.a = 0 Then
    '    Return New ECPoint(-99, -99, -99)
    'End If
    If P.IsPointInfinity Then
        Return P
    End If
    Dim prime As BigInteger
    If P.p = 0 Then
        prime = a.Fp.p
    Else
        prime = P.p
    End If
    'Dim k As New BigInteger(Scalar.ToByteArray)
    Dim N, S As New ECPoint(P)
    S = New ECPoint(0, 0, prime)                      'Accidentally set S.y = 1 was causing a bad value
    'Dim sc As New BigInteger(k.ToByteArray)        'Depreciated as now we can use bits.lenght
    'Dim bitlenght As Integer
    'While sc / 2 <> 0
    '    bitlenght += 1
    '    sc /= 2
    'End While
    Dim bits As New BitArray(Scalar.ToByteArray)
    For i = 0 To bits.Length - 1
        If bits(i) = True Then                      'Fixed error where BitArray uses True/False instead of 1/0
            S = Addition(S, N)
        End If
        N = PDouble(N, a)
    Next
    Return S
End Function
''' <summary>
''' Calcualtes the Greatest Common Divisor of two numbers
''' </summary>
Private Shared Function Extended_GCD(ByVal a As BigInteger, b As BigInteger) As RetGCD
    'The pseudocode was found on https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm#Pseudocode
    'Tested with the site http://planetcalc.com/3298/
    Dim r, o_r As BigInteger
    Dim t, o_t As BigInteger
    Dim s, o_s As BigInteger
    Dim p, q As BigInteger
    Dim ret As RetGCD
    s = 0
    t = 1
    r = b
    o_s = 1
    o_t = 0
    o_r = a
    While r <> 0
        q = o_r / r
        p = r
        r = o_r - q * p
        o_r = p
        p = s
        s = o_s - q * p
        o_s = p
        p = t
        t = o_t - q * p
        o_t = p
    End While
    ret.x = o_s
    ret.y = o_t
    ret.GCD = o_r
    Return ret
End Function
''' <summary>
''' Performs the modular multiplitcative inverse of a number so we can use multiplication instead of division in our arithmetic
''' </summary>
Public Shared Function Inverse(ByVal a As BigInteger, ByVal p As BigInteger) As BigInteger
    'Not tested but works
    Dim ret As RetGCD
    ret = Extended_GCD(a, p)
    If ret.GCD <> 1 Then
        Return 0
    End If
    Return ret.x Mod p
End Function

I have a feeling that it is possibly the way I am generating a private key or that I am using the wrong operation when calculating G.d .
Any help would really be appreciated thanks.
===EDIT===
After spending some time check values I have found the problem to be caused by the scalar_mult function not returning the right value. Is this function written correctly because i am unsure I have tested it with values from a site and it has been adapted from the pseudocode on wikipedia. Is that the correct method for adding a point to itself x number of time?
","","106","<vb.net><elliptic-curve><diffie-hellman>","2","","0","2017-08-15 19:53:06","","2","0","6656310","","2017-08-15 19:53:06","2017-08-15 17:47:43",""
"38602398","ECC Random Points Generation FPGA","I want to give a large number of ECC points to my FPGA for testing purpose. I want to save the file containing ECC points as well. Is there any way , I can generate ECC random points for specific Elliptic curve? May be directly in FPGA or I can generate it using any other tool (using any other programming language) and then use them there. Any recommendations?? 
","Yes, you can do so, assuming that you already have a generator point and the ability to perform scalar*point multiplication (by doing point addition in the correct succession). Use an LFSR or other means of generating a random scalar up to the order of the group and multiply the generator point by that scalar.
","106","<java><c#><random><fpga><elliptic-curve>","0","0","1","2016-08-01 01:17:35","","4","1","2982318","","2016-08-01 01:17:35","2016-07-27 01:45:01",""
"56215012","Web3j ECKeyPair to KeyPair","I'm trying to make an ECC with the generated key using web3j. I have the ECKeyPair object, but cipher.init() requires 2nd parameter to be Key object. ECKeyPair returns BigInteger of private key and public key, how can I convert them to KeyPair which holds PrivateKey and PublicKey object?
I've tried (reference: CryptoUtil.java):
private fun decodeKeyPair(ecKeyPair: ECKeyPair): KeyPair {
        val xp = getNamedCurveByName(""secp256k1"")
        val p = ECNamedCurveSpec(""secp256k1"", xp.curve, xp.g, xp.n, xp.h, null)
        val curve = convertCurve(p.curve)
        val g = EC5Util.convertPoint(curve, p.generator, false)
        val n = p.order
        val h = BigInteger.valueOf(p.cofactor.toLong())
        val dp = ECDomainParameters(curve, g, n, h)

        val bytes = Numeric.toBytesPadded(ecKeyPair.publicKey, 64)
        val x = Numeric.toBigInt(Arrays.copyOfRange(bytes, 0, 32))
        val y = Numeric.toBigInt(Arrays.copyOfRange(bytes, 32, 64))
        val q = curve.createPoint(x, y)
        val publicKey = BCECPublicKey(
           ""EC"",
            ECPublicKeyParameters(q, dp),
            BouncyCastleProvider.CONFIGURATION
        )
        val privateKey = BCECPrivateKey(
            ""EC"",
            ECPrivateKeyParameters(ecKeyPair.privateKey, dp),
            publicKey,
            p,
            BouncyCastleProvider.CONFIGURATION
        )
        return KeyPair(publicKey, privateKey)
    }

but this returns an error:
Caused by: java.lang.NullPointerException: Attempt to invoke virtual method 'org.bouncycastle.math.ec.ECCurve org.bouncycastle.jce.spec.ECParameterSpec.getCurve()' on a null object reference
Is there any other way to convert Web3j ECKeyPair to KeyPair?
","I finally got it after exploring around https://www.programcreek.com. Main thing here was ""how to generate ECPoint using the public key string"".
Here's how I did it, instead of transforming the whole EcKeyPair object, I convert the keys separately.
Public Key String to ECPublicKey:
private fun toEcPublicKey(publicKey: String): ECPublicKey {
        val params = ECNamedCurveTable.getParameterSpec(""secp256k1"")
        val curveSpec = ECNamedCurveSpec(""secp256k1"", params.curve, params.g, params.n)

        //This is the part how to generate ECPoint manually from public key string.
        val pubKeyX = publicKey.substring(0, publicKey.length / 2)
        val pubKeyY = publicKey.substring(publicKey.length / 2)
        val ecPoint = ECPoint(BigInteger(pubKeyX, 16), BigInteger(pubKeyY, 16))

        val params2 = EC5Util.convertSpec(curveSpec.curve, params)

        val keySpec = java.security.spec.ECPublicKeySpec(ecPoint, params2)
        val factory = KeyFactory.getInstance(""ECDSA"")
        return factory.generatePublic(keySpec) as ECPublicKey
}

Private Key String to ECPrivateKey:
private fun toEcPrivateKey(privateKey: String): ECPrivateKey {
        val ecKeyPair = ECKeyPair.create(Numeric.hexStringToByteArray(privateKey))

        val params = ECNamedCurveTable.getParameterSpec(""secp256k1"")
        val curveSpec = ECNamedCurveSpec(""secp256k1"", params.curve, params.g, params.n)

        val keySpec = java.security.spec.ECPrivateKeySpec(
            ecKeyPair.privateKey,
            curveSpec)

        val factory = KeyFactory.getInstance(""ECDSA"")
        return factory.generatePrivate(keySpec) as ECPrivateKey
}

String key inputs are generated from Web3j library.
","102","<java><android><encryption><elliptic-curve><web3-java>","0","0","1","2019-05-20 11:10:15","56219770","0","","9038584","","2019-05-20 06:10:18","2019-05-20 05:53:59",""
"49856600","Cryptography with ECC : make a multiplication of two keys with elliptic curve in javascript","so i m trying to convert two strings to points on elliptic curve then multiply the points and get another point . 
Until now , i managed to convert a string to a point on the elliptic curve with this library 
https://www.npmjs.com/package/elliptic-curve
this library uses a point P on the elliptic curve and multiplied with a scalar k using elliptic curve equation to obtain another point Q on the same elliptic curve.
K: string (public key) 
P:a point that exists already on the elliptic curve (randomly)
Q: the result point 
kP=Q

i ve tried to change the P value and replace it with a point  that i already calculate but i can t find a way to do that ! 
is there any way that i can make the multiplication using the same library ? 
(JAVASCRIPT)
RECAP : 
i'm trying to make this multiplication 
k1:public key 
P:point already exists on EC
Q1=K1.P

k2:public key 
P:point already exists on EC
Q2=K2.P

**Q3:the wanted the result 
Q3=Q2.Q1**

thanks :D
","","97","<javascript><elliptic-curve>","0","","0","2018-04-16 12:05:26","","5","","7942050","","2018-04-16 12:05:26","2018-04-16 11:48:44",""
"50234953","Own random (not the private key) in the ECDSA","I'm trying to debug my own implementation of the ECDSA signature. To compare the intermediate results I would like to force the OpenSSL, Crypto++ or whatever else package to use a known ""random"" number instead of generating it each time the signature is created. Is there a way to do so? 
Since I'm working with the brainpool curves I can't use the microsoft crypto API. This doesn't support the brainpool curves in the Crypto API until Windows 10.
Another way could to be retrieve the random used after the ECDSA signature creation from one of the popular packages.
I appreciate any help
","Yes, this is possible with OpenSSL. OpenSSL provides the ability to override the default source of random numbers. To do this use the RAND_set_rand_method() function documented here:
https://www.openssl.org/docs/man1.1.0/crypto/RAND_set_rand_method.html
This function takes as an argument a RAND_METHOD structure which contains function pointers to the implementations of the OpenSSL random capabilities. Replace the bytes element with your own implementation.
For example
RAND_METHOD myrand, *oldrand;

oldrand = RAND_get_rand_method();
myrand = *oldrand;
myrand.bytes = mybytes;
RAND_set_rand_method(myrand);

Where mybytes is defined like this:
static int mybytes(unsigned char *buf, int num)
{
    /* Replace with however you want the random function to work */
    memset(buf, 0, num);
    return 1;
}

OpenSSL's own ecdsatest code does exactly this. For example see:
https://github.com/openssl/openssl/blob/OpenSSL_1_1_0-stable/test/ecdsatest.c#L65
","96","<openssl><bouncycastle><elliptic-curve><ecdsa>","-1","3","1","2018-05-09 06:41:25","50235200","5","","608639","","2018-05-09 01:08:49","2018-05-08 13:35:52",""
"34300640","How to apply the patch for fully hashed menezes-qu-vanstone (fhmqv) to crypto++ that has been installed from the Ubuntu repository","I want to use Elliptic Curve Diffie-Hellman (ECDH) key exchange protocol for a key agreement process. It is already implemented in crypto++ library and I wanted to utilize it. I have already installed crypto++ (by typing sudo apt-get... command in a terminal) but since traditional ECDH is vulnerable to man-in-the-middle attack.
I want to use fully hashed menezes-qu-vanstone protocol. Although it is implemented for crypto++ it is not in the main stream so I need to patch it. There is an explanation here but it is for those who built the library from the source code. 
Is there anyone who knows how to apply this patch to crypto++ that has been installed from Ubuntu repository? I am using Ubuntu 15.
","
but since traditional ECDH is vulnerable to man-in-the-middle attack.

What others often do is to pair ECDH with a signature scheme. For example, TLS uses ECDH with a scheme like RSA or ECDSA.
I'm not saying you should do it; I'm only letting you know what others are doing.


it is not in the main stream so I need to patch it...

We will be adding HMQV and FHMQV at the next release. The next release will be happening in the next couple of months.


Is there anyone who knows how to apply this patch to crypto++ that has been installed from Ubuntu repository?

The easiest thing to do would be to probably be to build a new version of the library, and then install it into /usr/local. I presume you know how to download and patch. To build and install:
# Crypto++ build directory
...
make static dynamic cryptest.exe
sudo make install PREFIX=/usr/local


You might be able to patch Ubuntu version because FHMQV is mostly a header-only implementation. However, cryptest.exe will not have the validation stuff included. You really need to build the library for it.
Download the patch and perform the following. fhmqv.h is the ""meat and potatoes"" of the patch.
sudo cp fhmqv.h /usr/include/cryptopp

You also need to add the following to eccrypto.h. Start by opening the file with privileges (i.e., sudo emacs /usr/include/cryptopp/eccrypto.h).
Then, add this to the top of eccrypto.h:
#include ""fhmqv.h""

And add this to the bottom of eccrypto.h:
//! Fully Hashed Menezes-Qu-Vanstone in GF(p) with key validation,
/*! <a href=""http://eprint.iacr.org/2009/408"">A Secure and Efficient Authenticated DiffieHellman Protocol</a>
    Note: this is FHMQV, Protocol 5, from page 11; and not FHMQV-C.
*/
template <class EC, class COFACTOR_OPTION = CPP_TYPENAME DL_GroupParameters_EC<EC>::DefaultCofactorOption, class HASH = SHA256>
struct FHMQV
{
    typedef FHMQV_Domain<DL_GroupParameters_EC<EC>, COFACTOR_OPTION, HASH> Domain;
};

Most of the other stuff in the DIFF file is not needed, like the changes to wait.h and wait.cpp. It was added to address outstanding bugs. The bugs were cleared at Crypto++ 5.6.3.
","96","<linux><ubuntu><patch><crypto++><elliptic-curve>","1","1","1","2015-12-16 06:11:56","34303958","1","","608639","","2015-12-16 04:15:12","2015-12-15 22:27:00",""
"52031491","How to convert ECPrivateKey into ECPublicKey using FIPS BouncyCastle?","How to convert ECPrivateKey into ECPublicKey using FIPS BouncyCastle?
I use the following code (slightly simplified) to convert an ECPrivateKey into an ECPublicKey:
public static ECPublicKey getPublicKeyFromPrivateKey(ECPrivateKey privateKey) throws GeneralSecurityException {
    final KeyFactory keyFactory = KeyFactory.getInstance(""ECDSA"", new BouncyCastleProvider());
    final BCECPrivateKey bcecPrivateKey = (BCECPrivateKey) privateKey;
    final ECParameterSpec ecSpec = bcecPrivateKey.getParameters();
    final ECPoint q = ecSpec.getG().multiply(bcecPrivateKey.getD());
    final byte[] qBytes = q.getEncoded(false);
    final ECPoint point = ecSpec.getCurve().decodePoint(qBytes);
    final ECPublicKeySpec pubSpec = new ECPublicKeySpec(point, ecSpec);
    return (ECPublicKey) keyFactory.generatePublic(pubSpec);
}

This is working fine with non-FIPS BouncyCastle. Now, we have the requirement to do the same thing in a FIPS-compliant way. And here the problem is that classes like ECParameterSpec don't appear to exist in FIPS BouncyCastle 1.0.1. How can we do the same thing with FIPS BouncyCastle?
","","96","<java><bouncycastle><elliptic-curve><fips>","1","","0","2018-08-27 01:18:07","","2","","","","","2018-08-27 01:18:07",""
"47414961","Elliptic Curve Base Point Scalar Mulitplication JPair Library","I have to multiply two field elements (f1 and f2) with the base point P on the elliptic curve defined using the Weierstrass equation i.e. y2 = x3 +ax +b. I know in scalar multiplication, the point is added those many numbers of times to get the result. I have a question that if the scalar multiplication ((f1 + f2) * P) would be equal to (f1 * P + f2 *P )? I have written the code in Jpair library but I am getting different points. Moreover, I get the same point when I use BigInt numbers.  Can someone tell me why am I getting two different points when doing scalar multiplication? 
import java.util.Random;

import uk.ac.ic.doc.jpair.api.FieldElement;
import uk.ac.ic.doc.jpair.pairing.BigInt;
import uk.ac.ic.doc.jpair.pairing.EllipticCurve;
import uk.ac.ic.doc.jpair.pairing.Fp;
import uk.ac.ic.doc.jpair.pairing.Point;


public class testCode {

    public static void main(String [] args)
    {

        Random rnd = new Random();
        //initialise the finite field Fp given a prime number p
        BigInt p = new BigInt(""8780710799663312522437781984754049815806883199414208211028653399266475630880222957078625179422662221423155858769582317459277713367317481324925129998224791"",10);
        Fp field = new Fp(p);

        //System.out.println(""order"" +field.getOrder());

        //initialise the elliptic curve. The curve can be specified given the field and the coefficient a and b 
        //of the Weierstrass equation: 
        //y2 = x3 +ax +b
        //For example, in the case of the supersingular curve //y2 = x3 + x, a = 1 b = 0 ,  
        EllipticCurve ec = new EllipticCurve (field,BigInt.ONE,BigInt.ZERO);


        //You also need to know the group order r and the cofactor
        BigInt r = new BigInt(""730750818665451621361119245571504901405976559617"",10);
        BigInt cof = new BigInt(""12016012264891146079388821366740534204802954401251311822919615131047207289359704531102844802183906537786776"",10);

        /*------------------------------------------------BEGIN SETUP ---------------------------------------------------------*/
        Point ecBasePoint = ec.getBasePoint(rnd, r, cof);

        // scALAR MULITPLICATION
        Point p1 = ec.multiply(ecBasePoint, BigInt.valueOf(2));
        Point p2 = ec.multiply(ecBasePoint, BigInt.valueOf(3));
        Point p3 = ec.add(p1, p2); 
        Point p4 = ec.multiply(ecBasePoint, BigInt.valueOf(5));

        if(p4.equals(p3))
        {
            System.out.println(""P3 equals P4"");

        }
        else{System.out.println(""P3 NOT equals P4"");}

        // pick two random elements in  Zp
        FieldElement f1 = field.randomElement(rnd);
        FieldElement f2 = field.randomElement(rnd);

        Point p5 = ec.multiply(ecBasePoint, (BigInt) f1);
        Point p6 = ec.multiply(ecBasePoint, (BigInt) f2);
        Point p7 = ec.add(p5, p6);
        Point p8 = ec.multiply(ecBasePoint, (BigInt) field.add(f1, f2));
        if(p8.equals(p7))
        {
            System.out.println(""P7 equals P8"");

        }
        else{System.out.println(""P7 NOT equals P8"");}
    }
}

--------------NEW CODE -----
import java.util.Random;
import uk.ac.ic.doc.jpair.api.FieldElement;
import uk.ac.ic.doc.jpair.pairing.BigInt;
import uk.ac.ic.doc.jpair.pairing.EllipticCurve;
import uk.ac.ic.doc.jpair.pairing.Fp;
import uk.ac.ic.doc.jpair.pairing.Point;
import uk.ac.ic.doc.jpair.ibeNew.Util;
/*
 * ECC CPABE Scheme coding
 * 
 * */
public class eccThird {

    static final String charSet =""UTF-8"";

    public static void main(String [] args)
    {

        Random rnd = new Random();
        //initialise the finite field Fp given a prime number p
        BigInt p = new BigInt(""8780710799663312522437781984754049815806883199414208211028653399266475630880222957078625179422662221423155858769582317459277713367317481324925129998224791"",10);
        Fp field = new Fp(p);

        System.out.println(""order"" +field.getOrder());

        //initialise the elliptic curve. The curve can be specified given the field and the coefficient a and b 
        //of the Weierstrass equation: 
        //y2 = x3 +ax +b
        //For example, in the case of the supersingular curve //y2 = x3 + x, a = 1 b = 0 ,  
        EllipticCurve ec = new EllipticCurve (field,BigInt.ONE,BigInt.ZERO);


        //You also need to know the group order r and the cofactor
        BigInt r = new BigInt(""730750818665451621361119245571504901405976559617"",10);
        BigInt cof = new BigInt(""12016012264891146079388821366740534204802954401251311822919615131047207289359704531102844802183906537786776"",10);

        // attribute universe = U = {""attribute1"",""attribute2"",""attribute3"",""attribute4""}
        // Obtaining hashes of attributes
        String attribute1 =""Attribute1"";
        String attribute2 =""Attribute2"";
        String attribute3 =""Attribute3"";
        String attribute4 =""Attribute4"";

        byte[] bAttribute1 = null;
        byte[] bAttribute2 = null;
        byte[] bAttribute3 = null;
        byte[] bAttribute4 = null;


        try {
            bAttribute1 = attribute1.getBytes(charSet);
            bAttribute2 = attribute2.getBytes(charSet);
            bAttribute3 = attribute3.getBytes(charSet);
            bAttribute4 = attribute4.getBytes(charSet);

        } catch (UnsupportedEncodingException e1) {
            // TODO Auto-generated catch block
            e1.printStackTrace();
        }
        System.out.println(""Byte Attribute 1"" +bAttribute1);

        // Hashes attribute bytes to field elements
        FieldElement attribute1H4 =Util.hashToField(bAttribute1, field);
        FieldElement attribute2H4 =Util.hashToField(bAttribute2, field);
        FieldElement attribute3H4 =Util.hashToField(bAttribute3, field);
        FieldElement attribute4H4 =Util.hashToField(bAttribute4, field);        


        int numberAttributes = 5;

        /*------------------------------------------------BEGIN SETUP ---------------------------------------------------------*/
        Point ecBasePoint = ec.getBasePoint(rnd, r, cof);
        // pick three random private keys alpa, k1, and k2 in Zp
        FieldElement alphaSK = field.randomElement(rnd);
        FieldElement k1SK = field.randomElement(rnd);
        FieldElement k2SK = field.randomElement(rnd);

        // Generate public key components P_i, U_i, and  V_i for all attributes


        // generate alpha^i components

        FieldElement alphaSKZero  = field.pow(alphaSK, BigInt.ZERO);
        FieldElement alphaSKOne   =  field.pow(alphaSK, BigInt.ONE);
        FieldElement alphaSKTwo   = field.pow(alphaSK, BigInt.valueOf(2));
        FieldElement alphaSKThree =  field.pow(alphaSK, BigInt.valueOf(3));
        FieldElement alphaSKFour  =  field.pow(alphaSK, BigInt.valueOf(4));
        FieldElement alphaSKFive =  field.pow(alphaSK, BigInt.valueOf(5));



        // Generate P_i components
        Point PiZero = ec.multiply(ecBasePoint, (BigInt) alphaSKZero);
        Point PiOne = ec.multiply(ecBasePoint, (BigInt) alphaSKOne);
        Point PiTwo = ec.multiply(ecBasePoint, (BigInt) alphaSKTwo);
        Point PiThree = ec.multiply(ecBasePoint, (BigInt) alphaSKThree);
        Point PiFour = ec.multiply(ecBasePoint, (BigInt) alphaSKFour);
        Point PiFive = ec.multiply(ecBasePoint, alphaSKFive);

        // Generate U_i components
        Point UiZero = ec.multiply(PiZero, (BigInt) k1SK);
        Point UiOne = ec.multiply(PiOne, (BigInt) k1SK);
        Point UiTwo = ec.multiply(PiTwo, (BigInt) k1SK);
        Point UiThree = ec.multiply(PiThree, (BigInt) k1SK);
        Point UiFour = ec.multiply(PiFour, (BigInt) k1SK);
        Point UiFive = ec.multiply(PiFive, (BigInt)k1SK);


        // Generate V_i components
        Point ViZero = ec.multiply(PiZero, (BigInt) k2SK);
        Point ViOne = ec.multiply(PiOne, (BigInt) k2SK);
        Point ViTwo = ec.multiply(PiTwo, (BigInt) k2SK);
        Point ViThree = ec.multiply(PiThree, (BigInt) k2SK);
        Point ViFour = ec.multiply(PiFour, (BigInt) k2SK);
        Point ViFive = ec.multiply(PiFive, (BigInt) k2SK);  


        //System.out.println(""Alpha alphaSKTwo = ""+ PiZero);

    /*------------------------------------------------ END SETUP ---------------------------------------------------------*/

    /*------------------------------------------------ BEGIN KEYGEN ---------------------------------------------------------*/
        // generating KeyGen Polynomial
        FieldElement keyGenPoly = field.add(alphaSK, attribute3H4);
        // two random numbers in Zp field
        FieldElement ru = field.randomElement(rnd);
        FieldElement tu = field.randomElement(rnd);
        if(ru.equals(tu))
        {
            System.out.println(""ru and tu are same"");
        }
        else { System.out.println(""ru and tu are not same""); }

        //compute su
        FieldElement suTemp1 = field.multiply(k2SK, ru);
        FieldElement suTemp2 = field.subtract(field.inverse(keyGenPoly),suTemp1);
        FieldElement su = field.multiply(field.inverse(k1SK),suTemp2);
        //computing u1 and u2
        FieldElement u1Temp = field.multiply(k1SK, tu);
        FieldElement u1 = field.add(ru, u1Temp);

        FieldElement u2Temp = field.multiply(k2SK, tu);
        FieldElement u2 = field.subtract(su, u2Temp);

        //System.out.println(""KeyGen Polynomial ""+ u1);

        // checking if field.inverse(keyGenPoly) = k1su + k2ru

        FieldElement test1 = field.add(field.multiply(k1SK, su), field.multiply(k2SK, ru));

        if(test1.equals(field.inverse(keyGenPoly)))
        {
            /*System.out.println(""Poly Inverse = "" + field.inverse(keyGenPoly));
            System.out.println(""Condition = "" + test1); */
            System.out.println(""KeyGen Condition Satisfied "");

        }


    /*------------------------------------------------ END KEYGEN ---------------------------------------------------------*/
}

}

","","95","<java><multiplication><elliptic-curve><scalar>","0","","0","2019-09-09 11:28:04","","7","1","3834036","","2019-09-09 11:28:04","2017-11-21 14:01:55",""
"49701186","Loading an Unencrypted PEM Public Key with OpenSSL libcrypt","I'm trying to load a SECP256R1 Public Key that I've created with OpenSSL into my C program. According to OpenSSL documentation the code below should work:
#include <stdio.h>

#include <openssl/pem.h>
#include <openssl/ec.h>

int main()
{
    EC_KEY *pk = NULL;
    FILE *in = fopen(""pk.pem"", ""rt"");

    if (!in)
        return 2;

    pk = PEM_read_EC_PUBKEY(in, NULL, NULL, NULL);

    fclose(in);
    return 0;
}

However, before returning from the PEM_read... call my program suddenly exits with a 1 code, with no further explanation. What can be the cause of this?
pk.pem:
-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEGQxkTNnZ3zp4NXgpnwhTkU2fzENB
RPXu3JJq1gx/CwZGh4mIWPbmHvd8eYUmffoPu4fPU6UxAQwGIH7+DEaKJw==
-----END PUBLIC KEY-----

sk.pem:
-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIElzeIrCIus5+2GIayg/i7VubOCQ1yqApAo2sau4dD1hoAoGCCqGSM49
AwEHoUQDQgAEGQxkTNnZ3zp4NXgpnwhTkU2fzENBRPXu3JJq1gx/CwZGh4mIWPbm
Hvd8eYUmffoPu4fPU6UxAQwGIH7+DEaKJw==
-----END EC PRIVATE KEY-----

","The problem vanished simply by adding #include <openssl/applink.c> at the top.
It's an issue with using OpenSSL on Windows, apparently.
","93","<c><visual-studio-2015><openssl><pem><elliptic-curve>","-2","-1","1","2018-04-09 22:54:48","49742860","5","","5116581","","2018-04-09 18:48:52","2018-04-06 21:26:42",""
"27144097","Which elliptic curves does jarsigner support?","I will be signing JARs with an ECDSA key, and I can choose now which elliptic curve I will use. I at least need to be able to generate the signature with jarsigner. Where can I see, what elliptic curves jarsigner supports?
I tested that out of 65 elliptic curves supported by my OpenSSL installation, my jarsigner supports 46. Oracle documentation on jarsigner does not say anything about what is supported. Is it documented anywhere at all?
","Here is an answer: ""Support for elliptic curves by jarsigner"". To quote the conclusion:
Support of elliptic curves by jarsigner depends on jarsigner itself and on the JRE configuration. There is no command-line option to list all supported curves.
","89","<elliptic-curve><jarsigner><jar-signing><ecdsa>","1","0","1","2015-01-02 19:51:11","27747754","0","","3608247","","2014-11-26 09:41:15","2014-11-26 08:12:05",""
"33461312","ECSchnorr Still getting wrong (hash?) results","I'm writing Schnorr signature algorithm on elliptic curves. I get instructions from here (page 128)
Here's my code
Security.addProvider(new BouncyCastleProvider());

    //key generation
    ECParameterSpec ecSpec = ECNamedCurveTable.getParameterSpec(""prime192v1"");
    ECPoint G = ecSpec.getG();
    BigInteger order = ecSpec.getN();

    BigInteger x = BigIntegers.createRandomInRange(BigInteger.ONE, order.subtract(BigInteger.ONE), new SecureRandom());
    ECPoint Y = G.multiply(x);

    //sign
    BigInteger r = BigIntegers.createRandomInRange(BigInteger.ONE, order.subtract(BigInteger.ONE), new SecureRandom());
    ECPoint R = G.multiply(r);

    byte[] xArray = R.getXCoord().getEncoded();
    byte[] yArray = R.getYCoord().getEncoded();

    String xBinary;
    StringBuilder sb = new StringBuilder();
    for(int i = 0; i < xArray.length; i++){
        sb.append(String.format(""%8s"", Integer.toBinaryString(xArray[i] & 0xFF)).replace(' ', '0'));
    }
    xBinary = sb.toString();

    sb = new StringBuilder();
    String yBinary;
    for(int i = 0; i < yArray.length; i++){
        sb.append(String.format(""%8s"", Integer.toBinaryString(yArray[i] & 0xFF)).replace(' ', '0'));
    }
    yBinary = sb.toString();

    int hash = (xBinary + yBinary + ""msg"").hashCode();
    BigInteger h = BigInteger.valueOf(hash);

    BigInteger s = r.add(h.multiply(x)).mod(order);

    //verify    
    ECPoint tmp1 = G.multiply(s);
    ECPoint tmp2 = Y.multiply(h);
    ECPoint R2 = tmp1.subtract(tmp2);

    xArray = R2.getXCoord().getEncoded();
    yArray = R2.getYCoord().getEncoded();

    sb = new StringBuilder();
    for(int i = 0; i < xArray.length; i++){
        sb.append(String.format(""%8s"", Integer.toBinaryString(xArray[i] & 0xFF)).replace(' ', '0'));
    }
    xBinary = sb.toString();

    sb = new StringBuilder();
    for(int i = 0; i < yArray.length; i++){
        sb.append(String.format(""%8s"", Integer.toBinaryString(yArray[i] & 0xFF)).replace(' ', '0'));
    }
    yBinary = sb.toString();

    int hash2 = (xBinary + yBinary + ""msg"").hashCode();
    BigInteger h2 = BigInteger.valueOf(hash2);

But I'm still getting wrong results (hashes don't match) and I don't see why. Am I taking wrong parameters at the beginnig or using wrong methods to make calculations on points
Any help would be appreciated
EDIT
It started working after I changed 
ECPoint Y = G.multiply(x);
(...)
ECPoint R = G.multiply(r);
(...)
ECPoint R2 = tmp1.subtract(tmp2);

to
ECPoint Y = G.multiply(x).normalize();
(...)
ECPoint R = G.multiply(r).normalize();
(...)
ECPoint R2 = tmp1.subtract(tmp2).normalize();

","","88","<java><signing><elliptic-curve>","3","","0","2015-11-02 14:19:28","","0","","5493692","","2015-11-02 14:19:28","2015-11-01 10:39:45",""
"48090468","Maple division command","I have been trying to find the affine coordinates from given jacobian coordinates using maple but I am unable to execute the divide and mod function properly. Below is the code.
> x := convert(""9BAE2D5BAC61E6EA5DE635BCA754B2564B7D78C45277CAD67E45C4CBBEA6E706"", decimal, hex);
7041623596977247007669265857371148522199703362600663731937152060\

  0331187054342
> y := convert(""34FB8147EED1C0FBE29EAD4D6C472EB4EF7B2191FDE09E494B2A9845FE3F605E"", decimal, hex);
print(`output redirected...`); # input placeholder
23964639004174789156012647374812775627552779006284114197031881030909921550430
> P = convert(""FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F"", decimal, hex);
P = 115792089237316195423570985008687907853269984665640564039457584007908834671663
> z := convert(""C327B5D2636B32F27B051E4742B1BBD5324432C1000BFEDCA4368A29F6654152"", decimal, hex);
88271167397410887906404620526072296461301967675745183033087652951303987216722
> pxaffine := x/z^2 mod p;
modp(35208117984886235038346329286855742610998516813003318659685\

  760300165593527171/3895899496850867432972229541307004669958561\

  04445384115473225358287940086633208436094051269966956339075604\

  3250895513211480436277854984163960587194098212642, p) // this is returned as a result while i expect a whole number value
xa := convert(pxaffine,hex);

//below is the error found
    Error, invalid input: convert/hex expects its 1st argument, n, to be of type nonnegint, but received modp(35208117984886235038346329286855742610998516813003318659685760300165593527171/3895899496850867432972229541307004669958561044453841154732253582879400866332084360940512699669563390756043250895513211480436277854984163960587194098212642, p)
Definitely, I will get this error because value in pxaffine is not valid,,, now my question is why this command ""pxaffine := x/z^2 mod p;"" doesnot work?
","The lowercase name p is not being assigned a value anywhere in your code, so the following command does not produce an integer result (ie. it returns unevaluated),
x/z^2 mod p;

The following line of your code does not assign an integer to lowercase p. It doesn't even assign to uppercase P because it uses = rather than :=.
P = convert(""FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F"", decimal, hex);

Perhaps you intended it to be an actual assignment to lowercase p, ie,
p := convert(""FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F"", decimal, hex);

So now let's try the example, excluding the assignment to y which is not used anywhere else. Here's what I get (output is indented):
x := convert(""9BAE2D5BAC61E6EA5DE635BCA754B2564B7D78C45277CAD67E45C4CBBEA6E706"", decimal, hex);

      x := 70416235969772470076692658573711485221997033626006637319371520600331187054342

p := convert(""FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F"", decimal, hex);

      p := 115792089237316195423570985008687907853269984665640564039457584007908834671663

z := convert(""C327B5D2636B32F27B051E4742B1BBD5324432C1000BFEDCA4368A29F6654152"", decimal, hex);

      z := 88271167397410887906404620526072296461301967675745183033087652951303987216722

pxaffine := x/z^2 mod p;

      pxaffine := 103388573995635080359749164254216598308788835304023601477803095234286494993683

xa := convert(pxaffine,hex);

      xa := E493DBF1C10D80F3581E4904930B1404CC6C13900EE0758474FA94ABE8C4CD13

","88","<maple><elliptic-curve>","0","2","1","2018-01-04 16:28:16","48099510","0","","","","","2018-01-04 07:19:03",""
"41275979","Mod function returns 0 for Matlab","I have a problem with the mod function output in Matlab. I am trying to perform some calculations for ECC double and add algorithm. I am reading data from a file and storing it in a variable and then performing some operations. All works smoothly except that I get 0 in temp1 when I use mod(X2,P). However if I put in values stored in X2(3.0323e+153) and P(1.1579e+77) on command window (mod( 3.0323e+153, 1.1579e+77)), I get the correct values. Can anyone please help me? Below is the part of script which is problematic.
P = hex2dec('FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F');
line = fread(fileID,[1,67],'*char');
while ~feof(fileID)
        PX = line(4:67);
        X = hex2dec(PX);
        X2 = X^2;
        temp1= mod(X2 , P)
    end
    line = fread(fileID,[1,69],'*char');
end
fclose(fileID);

","I think the problem lies with how you're initializing P. From the documentation for hex2dec (emphasis mine):

d = hex2dec('hex_value') converts hex_value to its floating-point integer representation. The argument hex_value is a hexadecimal integer stored as text. If the value of hex_value is greater than the hexadecimal equivalent of the value returned by flintmax, then hex2dec might not return an exact conversion.

And the value of flintmax is:
>> flintmax
ans =
     9.007199254740992e+15

Quite a bit smaller than your value for P. In fact, if we use num2hex to look at the two ways you initialize P, you can see a clear difference:
>> P = hex2dec('FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F');
>> num2hex(P)
ans =
4ff0000000000000
>> num2hex(1.1579e+77)
ans =
4fefffda293c30de

As it turns out, the inexact conversion done by hex2dec results in a number that evenly divides into 3.0323e+153, thus giving you a remainder of 0:
>> mod(3.0323e+153, P)
ans =
     0
>> mod(3.0323e+153, 1.1579e+77)
ans =
     8.795697942083107e+76

","87","<matlab><elliptic-curve>","2","3","1","2016-12-22 07:05:33","41277433","0","","4420609","","2016-12-22 05:33:37","2016-12-22 04:51:03",""
"56271308","Elliptic Curve Point Addition and Multiplication in Crypto++","How to use the point addition and multiplication functions in elliptic curve using Crypto++ library?
I've tried the following code where Basepoint and point are the points on the elliptic curve.
const ECP::Point& ECP::Add(&Basepoint, &point);

ECP::Point& result = ECP::Add(Basepoint, point);

const int result = ECP::Point ECP::Add(&Basepoint, &point);

It results in:

ERROR: E0245 a nonstatic member reference must be relative to a
  specific object

","in

ECP::Point& result = ECP::Add(Basepoint, point);

you call ECP::Add as a static member of ECP, the error indicates there is no static Add , you need to apply it to an instance of ECP
When I look at the documentation I only see

const Point & Add (const Point &P, const Point &Q) const

which is not static
Also 

const ECP::Point& ECP::Add(&Basepoint, &point);
const int result = ECP::Point ECP::Add(&Basepoint, &point);

are an invalid forms. 
Even having just ECP::Add(&Basepoint, &point); is also wrong because the operation is not static and because the arguments are pointers to Point incompatible with the operation parameters. Probably you have to look at what a reference is in C++ documentation/tutorial
A valid code can be 
ECP ecp;
Point basepoint;
Point point;

// set ecp, basepoint and point to be the ones you want

const Point & r1 = ecp.Add(basepoint, point); // do not copy the result
Point r2 = ecp.Add(basepoint, point); // copy result in non const to be able to modify it later etc

","86","<c++><crypto++><elliptic-curve>","-1","1","1","2019-05-23 09:22:51","56271643","2","","608639","","2019-05-23 09:22:51","2019-05-23 08:42:07",""
"36201173","openssl elliptic curves:EC_POINT_add return error","I am trying to solve elliptic curves discrete logrithm problem using Pollard rho attack in c. Since the target elliptic curve is defined over binary field F2^113, I need to do a great amount of EC_POINT_add operation s in my program. Unfortunately, the EC_POINT_add always return 0 and program stop after about 7x(10^7) loops. Here is my testing code, and I am very confused why the EC_POINT_add always return 0 and program stop after about 7x(10^7) loops. I really need your help since this problem has confused me the whole week. Thank you!
/*X1 is a elliptic point, Tx,Ty,BL,c1,d1,c[i],d[i] and R[i] are BIGNUM* */
while(1) {

    if(1 != EC_POINT_get_affine_coordinates_GF2m(curve,X1,Tx,Ty,ctx)) return 0;

    BN_mod(Tx,Tx,BL,ctx);
    i = atoi(BN_bn2dec(Tx));

    if(1 != EC_POINT_add(curve,X1,X1,R[i],ctx)) {
            printf(""\nb\n"");
            return 0;
    }

    BN_mod_add(c1,c1,c[i],order,ctx);
    BN_mod_add(d1,d1,d[i],order,ctx);

    k++;
    printf(""%d "",k);
}

","Now,I'am going to answer my own question since I have found the debug in my code at the end. I tested all of the potential errors and finally discovered that the return string of function 'BN_bn2dec()' must be free by 'OPENSSL_free()', otherwise it will lead to segmentation fault(core dumped) after about 2*10^8 loops. Here is the explanation of the documentation:
    BN_bn2hex() and BN_bn2dec() return printable strings containing the
    hexadecimal and decimal encoding of a respectively. For negative
    numbers, the string is prefaced with a leading '-'. The string must be
    freed later using OPENSSL_free().

I used GDB debugger to locate the error. GDB is really a useful tool to debug codes.
","84","<openssl><elliptic-curve>","0","0","1","2016-03-27 07:22:56","","1","","","","","2016-03-24 13:18:02",""
"55330120","How to sign SAML 2.0 AuthnRequest with ECDSA (​NIST Curve P-256/​ SHA-256) in PHP","I need to sign SAML 2.0 AuthnRequest with ECDSA (​NIST Curve P-256/​ SHA-256) in PHP.
To create SAML 2.0 AuthnRequest I'm using https://github.com/simplesamlphp/simplesamlphp
I have a private key
Private-Key: (256 bit)
priv:
    0d:.....
pub:
    04:....
ASN1 OID: prime256v1
NIST CURVE: P-256

To create signature, I'm using https://github.com/phpecc/phpecc because https://github.com/robrichards/xmlseclibs does not seem to support NIST Curve P-256/​ SHA-256
I've implemented this example exactly how it is https://github.com/phpecc/phpecc/blob/HEAD/examples/creating_signature.php but I'm getting error from request reciver. 
Where do I get from or how can I create <ds:DigestValue>...</ds:DigestValue>
What am I doing this wrong?
Am I using wrong libraries?
Is there one vendor to support this case?
","","83","<php><saml-2.0><elliptic-curve><ecdsa><xml-dsig>","1","","0","2019-03-25 01:07:36","","0","","","","","2019-03-25 01:07:36",""
"50513779","openssl Elliptic_Curve_Cryptography - Defining ""custom"" Curves","I'm trying to define curve secp192r1, which is not available as a named curve in openssl.
i'm using data from http://www.secg.org/SEC2-Ver-1.0.pdf par. 2.5.2
in the function create_curve() copied from the wiki https://wiki.openssl.org/index.php/Elliptic_Curve_Cryptography#Defining_Curves
my problem: the call EC_POINT_set_affine_coordinates_GFp(curve, generator, x, y, ctx) return an error
i'm copying the complete function here (but i use different binary data):
EC_GROUP *create_curve(void)
{
BN_CTX *ctx;
EC_GROUP *curve;
BIGNUM *a, *b, *p, *order, *x, *y;
EC_POINT *generator;

/* Binary data for the curve parameters */
unsigned char a_bin[28] =
    {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
     0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0xFF,0xFF,0xFF,0xFF,
     0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE};
unsigned char b_bin[28] =
    {0xB4,0x05,0x0A,0x85,0x0C,0x04,0xB3,0xAB,0xF5,0x41,
     0x32,0x56,0x50,0x44,0xB0,0xB7,0xD7,0xBF,0xD8,0xBA,
     0x27,0x0B,0x39,0x43,0x23,0x55,0xFF,0xB4};
unsigned char p_bin[28] =
    {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
     0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,
     0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01};
unsigned char order_bin[28] =
    {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
     0xFF,0xFF,0xFF,0xFF,0x16,0xA2,0xE0,0xB8,0xF0,0x3E,
     0x13,0xDD,0x29,0x45,0x5C,0x5C,0x2A,0x3D };
unsigned char x_bin[28] =
    {0xB7,0x0E,0x0C,0xBD,0x6B,0xB4,0xBF,0x7F,0x32,0x13,
     0x90,0xB9,0x4A,0x03,0xC1,0xD3,0x56,0xC2,0x11,0x22,
     0x34,0x32,0x80,0xD6,0x11,0x5C,0x1D,0x21};
unsigned char y_bin[28] =
    {0xbd,0x37,0x63,0x88,0xb5,0xf7,0x23,0xfb,0x4c,0x22,
     0xdf,0xe6,0xcd,0x43,0x75,0xa0,0x5a,0x07,0x47,0x64,
     0x44,0xd5,0x81,0x99,0x85,0x00,0x7e,0x34};

/* Set up the BN_CTX */
if(NULL == (ctx = BN_CTX_new())) handleErrors();

/* Set the values for the various parameters */
if(NULL == (a = BN_bin2bn(a_bin, 28, NULL))) handleErrors();
if(NULL == (b = BN_bin2bn(b_bin, 28, NULL))) handleErrors();
if(NULL == (p = BN_bin2bn(p_bin, 28, NULL))) handleErrors();
if(NULL == (order = BN_bin2bn(order_bin, 28, NULL))) handleErrors();
if(NULL == (x = BN_bin2bn(x_bin, 28, NULL))) handleErrors();
if(NULL == (y = BN_bin2bn(y_bin, 28, NULL))) handleErrors();

/* Create the curve */
if(NULL == (curve = EC_GROUP_new_curve_GFp(p, a, b, ctx))) handleErrors();

/* Create the generator */
if(NULL == (generator = EC_POINT_new(curve))) handleErrors();
if(1 != EC_POINT_set_affine_coordinates_GFp(curve, generator, x, y, ctx))
    handleErrors();

/* Set the generator and the order */
if(1 != EC_GROUP_set_generator(curve, generator, order, NULL))
    handleErrors();

EC_POINT_free(generator);
BN_free(y);
BN_free(x);
BN_free(order);
BN_free(p);
BN_free(b);
BN_free(a);
BN_CTX_free(ctx);

return curve;
}

","First, this is all a pursuit of nondomesticated migratory waterfowl, because OpenSSL does have secp192r1 builtin, under its original/earlier X9.62 name prime192v1. To see for yourself:
openssl ecparam -name prime192v1 -param_enc explicit -noout -text 

Second, the code you posted is correct (though silly, because secp224r1 aka P-224 is also builtin) and works fine. The code you are running is apparently different, but since you don't let us see it, there is no way to try to figure out what is wrong with it (beyond being unnecessary).
","81","<c><openssl><elliptic-curve>","0","2","1","2018-05-24 20:01:41","50517292","0","","","","","2018-05-24 16:08:57",""
"49956262","How to put a point on an elliptic curve using javascript","So i m trying to send a message from server to client and i m trying to put that message on the elliptic curve as a point and then make the addition of that point to itself K times ! i couldn't find a library in javascript that make the addition of one point to itself !so i m trying to find some solutions in javascript please ! 
i need library in javascript thats can :

-put a ""message"" on the elliptic curve as a point
-make the addition of two points(or the addition of the same point to itself) on the elliptic curve to get another Point P+P=Q

","","79","<javascript><encryption><point><private-key><elliptic-curve>","0","","0","2018-04-21 13:27:12","","2","","","","","2018-04-21 13:27:12",""
"58384472","genKeyPair in Javacard 2.2.1 for Secp192r1 throws ""java.lang.ArithmeticException: BigInteger not invertible""","I'm trying to generate a keypair for the Secp192r1 curve using Javacard 2.2.1 (I've also tried using Javacard 2.2.2) by calling the KeyPair.genKeyPair function for the javacard Keypair object.
However when during the generation of a keypair, the following error is sometimes thrown ""java.lang.ArithmeticException: BigInteger not invertible"". The error is not thrown every time, but rather occurs around 50% of the generations. If the key generation is successful, it seems however not to generate correct keypairs. This is since I´ve tried in those successful cases to use the generated public key to create a Bounty castle representation of the public key, which then fails and signals that the public key is an incorrect point.
I've tried to debug the code further, but as I lack the source files of the internals of javacard, I've not been able to able to track the error further than that it's thrown in the AsymmetricCipherKeyPairGenerator generateKeyPair function.
I'm completely confused as to what I've done incorrectly, and all my attempts to solve the issue have failed. If anyone can spot what I'm doing wrong I would be very thankful!
It should be noted that this I've only tested the code using jcardsim to simulate and debug the execution of the code, and not run the code on actual phsyical chips if that is of any importance. The jcardsim version I'm using is the following: https://github.com/licel/jcardsim/raw/master/jcardsim-2.2.1-all.jar
I´ve created some example source code below, which sporadically throws the error:
Secp192r1 curve code:
package example.applet;
import javacard.security.ECKey;

public class Secp192r1 {

    public static final byte[] EC192_FP_P = new byte[]{
            (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,
            (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,
            (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,
            (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFE,
            (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,
            (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF};

    public static final byte[] EC192_FP_A = new byte[]{
            (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,
            (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,
            (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,
            (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFE,
            (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,
            (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFC};

    public static final byte[] EC192_FP_B = new byte[]{
            (byte) 0x64, (byte) 0x21, (byte) 0x05, (byte) 0x19,
            (byte) 0xE5, (byte) 0x9C, (byte) 0x80, (byte) 0xE7,
            (byte) 0x0F, (byte) 0xA7, (byte) 0xE9, (byte) 0xAB,
            (byte) 0x72, (byte) 0x24, (byte) 0x30, (byte) 0x49,
            (byte) 0xFE, (byte) 0xB8, (byte) 0xDE, (byte) 0xEC,
            (byte) 0xC1, (byte) 0x46, (byte) 0xB9, (byte) 0xB1};

    public static final byte[] EC192_FP_G_UNCOMPRESSED = new byte[]{
            (byte) 0x04, // Uncompressed
            (byte) 0x18, (byte) 0x8D, (byte) 0xA8, (byte) 0x0E,
            (byte) 0xB0, (byte) 0x30, (byte) 0x90, (byte) 0xF6,
            (byte) 0x7C, (byte) 0xBF, (byte) 0x20, (byte) 0xEB,
            (byte) 0x43, (byte) 0xA1, (byte) 0x88, (byte) 0x00,
            (byte) 0xF4, (byte) 0xFF, (byte) 0x0A, (byte) 0xFD,
            (byte) 0x82, (byte) 0xFF, (byte) 0x10, (byte) 0x12,
            (byte) 0x07, (byte) 0x19, (byte) 0x2B, (byte) 0x95,
            (byte) 0xFF, (byte) 0xC8, (byte) 0xDA, (byte) 0x78,
            (byte) 0x63, (byte) 0x10, (byte) 0x11, (byte) 0xED,
            (byte) 0x6B, (byte) 0x24, (byte) 0xCD, (byte) 0xD5,
            (byte) 0x73, (byte) 0xF9, (byte) 0x77, (byte) 0xA1,
            (byte) 0x1E, (byte) 0x79, (byte) 0x48, (byte) 0x11};

    public static final byte[] EC192_FP_R = new byte[]{
            (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,
            (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,
            (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,
            (byte) 0x99, (byte) 0xDE, (byte) 0xF8, (byte) 0x36,
            (byte) 0x14, (byte) 0x6B, (byte) 0xC9, (byte) 0xB1,
            (byte) 0xB4, (byte) 0xD2, (byte) 0x28, (byte) 0x31};

    public static final short EC192_FP_K = 1;

    protected static boolean setCommonCurveParameters(ECKey key) {
        try {
            key.setFieldFP(EC192_FP_P, (short)0, (short)EC192_FP_P.length);
            key.setA(EC192_FP_A, (short)0, (short)EC192_FP_A.length);
            key.setB(EC192_FP_B, (short)0, (short)EC192_FP_B.length);
            key.setG(EC192_FP_G_UNCOMPRESSED, (short)0, (short)EC192_FP_G_UNCOMPRESSED.length);
            key.setR(EC192_FP_R, (short)0, (short)EC192_FP_R.length);
            key.setK(EC192_FP_K);
            return true;
        }
        catch(Exception e) {
            return false;
        }

    }
}


Key generation code:
 package example.applet;
 import javacard.security.*;

 public class ExampleKeyImpl {

     private static KeyPair keyPair;

     public ExampleKeyImpl() {
         keyPair = new KeyPair(
                 (ECPublicKey) KeyBuilder.buildKey(KeyBuilder.TYPE_EC_FP_PUBLIC, KeyBuilder.LENGTH_EC_FP_192, false),
                 (ECPrivateKey) KeyBuilder.buildKey(KeyBuilder.TYPE_EC_FP_PRIVATE, KeyBuilder.LENGTH_EC_FP_192, false));

         Secp192r1.setCommonCurveParameters((ECKey) keyPair.getPrivate());
         Secp192r1.setCommonCurveParameters((ECKey) keyPair.getPublic());
     }


     public void generateKeyPair() {
         try {
             keyPair.genKeyPair(); // THIS IS WHERE THE ERROR IS THROWN
         }
         catch (Exception e){
             String errorMessage = e.getMessage(); // GIVES THE BigInteger ERROR MESSAGE
         }
     }
 }

Applet code:
package example.applet;

import javacard.framework.*;
import javacard.security.Signature;

public class ExampleApplet extends Applet {


    private static byte[] scratch;
    private static ExampleKeyImpl keyImpl;

    private static Signature localSignature;

    public static void install(byte[] parameters, short startOffset, byte lengthToRead) throws ISOException {
        new ExampleApplet();
    }

    public ExampleApplet() {
        initializeResources();
        generateKeyPair();
    }

    private void initializeResources() {
        scratch = JCSystem.makeTransientByteArray((short) (200), JCSystem.CLEAR_ON_RESET);

        localSignature = Signature.getInstance(Signature.ALG_ECDSA_SHA, false);
        keyImpl = new ExampleKeyImpl();
    }

    private void generateKeyPair() {
        keyImpl.generateKeyPair();
    }

}

My best estimate is that I've somehow implemented the Secp192r1 curve incorrectly, so if you spot any error in my implementation, please tell me what I've done wrong. Thank you in advance!
","I found that the issue is solved by changing the constructor in ExampleKeyImpl from:
public ExampleKeyImpl() {
     keyPair = new KeyPair(
             (ECPublicKey) KeyBuilder.buildKey(KeyBuilder.TYPE_EC_FP_PUBLIC, KeyBuilder.LENGTH_EC_FP_192, false),
             (ECPrivateKey) KeyBuilder.buildKey(KeyBuilder.TYPE_EC_FP_PRIVATE, KeyBuilder.LENGTH_EC_FP_192, false));

     Secp192r1.setCommonCurveParameters((ECKey) keyPair.getPrivate());
     Secp192r1.setCommonCurveParameters((ECKey) keyPair.getPublic());
 }

To:
public ExampleKeyImpl() {
     keyPair = new KeyPair(KeyPair.ALG_EC_FP, KeyBuilder.LENGTH_EC_FP_192);

     Secp192r1.setCommonCurveParameters((ECKey) keyPair.getPrivate());
     Secp192r1.setCommonCurveParameters((ECKey) keyPair.getPublic());
}

I'm not really sure why that makes a difference though.
","78","<java><smartcard><javacard><elliptic-curve><globalplatform>","0","1","1","2019-10-16 20:40:17","58418925","0","1","12047931","","2019-10-16 15:35:28","2019-10-14 21:48:19",""
"58562804","Recent Java upgrade causes TLS handshake failure with elliptic curve server certificate?","On October 19th, I upgraded to OpenJDK Java 1.8.0_232 and my Java processes started failing to connect to a service fronted by stunnel using an EC server certificate. I have an EC client certificate that I would present to the server if the initial handshake would succeed, but it's not getting that far.
I was unable to obtain the version number of the previous version of Java that was running -- I had a long-running process on the client that was able to connect to the service successfully. Java has been upgraded but that client hadn't been restarted since the upgrade. I restarted the client and it, too, began to fail.
I'm about to start reading the announcement to see if there is anything in there that would suggest a ""fix"" to something, but I believe I have everything configured correctly on both client and server. My current thinking is that this is a bug in the JVM.
Using ssltest, I have been able to confirm that I can handshake with the server using multiple cipher suites when providing the correct client certificate, as long as I use Java 1.8.0_181 or Java 11.0.3 (these are the two versions I happened to have laying around on my laptop for testing). Using the same files, command-line, etc. fails when using Java 1.8.0_232.
Has anyone seen anything like this?
UPDATE
I have downloaded x86-64 OpenJDK versions 8u222 and 8u232 from here and I can confirm that version 8u222 will connect and 8u232 will not connect.
UPDATE
Downgrading to the previous version of OpenJDK has solved my problem for the time being. I'm using Debian Stretch, and I was able to downgrade with this command:
$ sudo apt-get install openjdk-8-jdk-headless=8u222-b10-1~deb9u1 openjdk-8-jre-headless=8u222-b10-1~deb9u1

Note that I only have the ""headless"" packages installed, so I only downgraded the ""headless"" packages.
UPDATE
I can confirm that the client certificate is a red herring, here. I relaxed the requirements on my server to not require the client certificate and the initial TLS handshake still fails. I'm trying to narrow this down to the simplest test case I can get.
UPDATE
Still trying to diagnose the problem, here. I have a test server where I can launch it under various configurations and see what happens. I have determined that while Java 8u222 supports the secp256k1 curve, Java 8u232 does not, and I get the handshake failure.
","The secp256k1 curve has been disabled with jdk 8u232 (see https://java.com/en/download/faq/release_changes.xml). It can be re-enabled with the java system property jdk.tls.namedGroups.
The example on the faq lists a few other Obsolete NIST EC Curves that are disabled as well. The curves listed there are sect283k1, sect283r1, sect409k1, sect409r1, sect571k1, sect571r1 and secp256k1. The system property jdk.tls.namedGroups takes a comma separated list of those names. 
","76","<java><ssl-certificate><elliptic-curve><sslhandshakeexception>","0","1","1","2019-10-27 16:03:36","58577796","4","","276232","","2019-10-25 20:50:34","2019-10-25 17:01:12",""
"52782146","How to specify conditions within Julia's composite types?","I am trying to create a composite type in Julia representing points on an elliptic curve.
Point are valid if satisfying y^2 == x^3 + a*x + b OR both x and y are equal to nothing. Note that the later case represents point at infinity.
I have come up with the below code but can't figure out how to account for point at infinity.

Is there a way to handle different exceptions in struct?
Can exception simply return a valid type instead of an error? e.g. if x == nothing && y == nothing then Point(nothing,nothing,a,b)


IntOrNothing = Union{Int,Nothing}
struct Point
    x::IntOrNothing
    y::IntOrNothing
    a::Int
    b::Int
    Point(x,y,a,b) = x == nothing || y == nothing || y^2 != x^3 + a*x + b ? error(""Point is not on curve"") : new(x,y,a,b)
end


","I would define two inner constructors for Point like this:
IntOrNothing = Union{Int,Nothing}
struct Point
    x::IntOrNothing
    y::IntOrNothing
    a::Int
    b::Int
    Point(x::Nothing,y::Nothing,a,b) = new(x,y,a,b)
    Point(x,y,a,b) = y^2 != x^3 + a*x + b ? error(""Point is not on curve"") : new(x,y,a,b)
end

as this would be most readable in my opinion.
Note that you will get MethodError if you call Point(nothing,2,1,3) but I guess from your code you do not care about the type of exception thrown as long as it is thrown on invalid data.
Does it solve your problem?
","71","<julia><elliptic-curve>","2","3","1","2018-10-12 16:44:22","52783798","2","","9993184","","2018-10-12 15:26:50","2018-10-12 14:55:32",""
"56290483","calculate public key from private key is not correct","I am using EC curve P-256. I generate a key pair.
Then, form the private key, I calculate the public key.
For some reason, the two public key values do not correspond.
See included code with the function to generate a key pair:
public static AsymmetricCipherKeyPair  Generate_EC_P256_Key_Pair(SecureRandom random)
    {
        // Select the curve P-256 //
        string curveName = ""P-256"";
        X9ECParameters ecP = NistNamedCurves.GetByName(curveName);
        ECDomainParameters dom_parameters = new ECDomainParameters(ecP.Curve, ecP.G, ecP.N);

        // Generate EC Key Pair //
        ECKeyPairGenerator pGen = new ECKeyPairGenerator();
        ECKeyGenerationParameters genParam = new ECKeyGenerationParameters(dom_parameters, random);
        pGen.Init(genParam);
        AsymmetricCipherKeyPair keypair = pGen.GenerateKeyPair();

        AsymmetricKeyParameter Priv_key = keypair.Private;
        AsymmetricKeyParameter Pub_key = keypair.Public;

        ECPrivateKeyParameters private_key = (ECPrivateKeyParameters)keypair.Private;
        ECPublicKeyParameters public_key = (ECPublicKeyParameters)keypair.Public;

        BigInteger priv_key_exp = private_key.D;
        BigInteger test2 = public_key.Q.XCoord.ToBigInteger();
        BigInteger test3 = public_key.Q.YCoord.ToBigInteger();

        ECPoint pub_key_1 = dom_parameters.G.Multiply(priv_key_exp);
        BigInteger test4 = pub_key_1.XCoord.ToBigInteger();
        BigInteger test5 = pub_key_1.YCoord.ToBigInteger();

        Console.WriteLine(""Exponent: "" + priv_key_exp.ToString(16));
        Console.WriteLine(""X-Coord: "" + test2.ToString(16));
        Console.WriteLine(""X-Coord: "" + test4.ToString(16));
        Console.WriteLine(""\n"");
        Console.WriteLine(""Y-Coord: "" + test3.ToString(16));
        Console.WriteLine(""Y-Coord: "" + test5.ToString(16));

        return keypair;
    }

If you compare the (X,Y) coordinates of both the generated public key and the calculated pubic key. You will get a different value.
I would expect the same value!!
What is wrong?
","You are getting the wrong X and Y coordinates. Internally, points are stored in an alternate representation (X, Y, Z) involving something called projective coordinates. You want the affine coordinates. The equivalent (X, Y) affine coordinates are retrieved via the properties AffineXCoord and AffineYCoord.
","70","<c#><bouncycastle><private-key><public-key><elliptic-curve>","0","0","2","2019-05-24 15:33:50","","0","","","","","2019-05-24 10:09:08",""
"56290483","calculate public key from private key is not correct","I am using EC curve P-256. I generate a key pair.
Then, form the private key, I calculate the public key.
For some reason, the two public key values do not correspond.
See included code with the function to generate a key pair:
public static AsymmetricCipherKeyPair  Generate_EC_P256_Key_Pair(SecureRandom random)
    {
        // Select the curve P-256 //
        string curveName = ""P-256"";
        X9ECParameters ecP = NistNamedCurves.GetByName(curveName);
        ECDomainParameters dom_parameters = new ECDomainParameters(ecP.Curve, ecP.G, ecP.N);

        // Generate EC Key Pair //
        ECKeyPairGenerator pGen = new ECKeyPairGenerator();
        ECKeyGenerationParameters genParam = new ECKeyGenerationParameters(dom_parameters, random);
        pGen.Init(genParam);
        AsymmetricCipherKeyPair keypair = pGen.GenerateKeyPair();

        AsymmetricKeyParameter Priv_key = keypair.Private;
        AsymmetricKeyParameter Pub_key = keypair.Public;

        ECPrivateKeyParameters private_key = (ECPrivateKeyParameters)keypair.Private;
        ECPublicKeyParameters public_key = (ECPublicKeyParameters)keypair.Public;

        BigInteger priv_key_exp = private_key.D;
        BigInteger test2 = public_key.Q.XCoord.ToBigInteger();
        BigInteger test3 = public_key.Q.YCoord.ToBigInteger();

        ECPoint pub_key_1 = dom_parameters.G.Multiply(priv_key_exp);
        BigInteger test4 = pub_key_1.XCoord.ToBigInteger();
        BigInteger test5 = pub_key_1.YCoord.ToBigInteger();

        Console.WriteLine(""Exponent: "" + priv_key_exp.ToString(16));
        Console.WriteLine(""X-Coord: "" + test2.ToString(16));
        Console.WriteLine(""X-Coord: "" + test4.ToString(16));
        Console.WriteLine(""\n"");
        Console.WriteLine(""Y-Coord: "" + test3.ToString(16));
        Console.WriteLine(""Y-Coord: "" + test5.ToString(16));

        return keypair;
    }

If you compare the (X,Y) coordinates of both the generated public key and the calculated pubic key. You will get a different value.
I would expect the same value!!
What is wrong?
","James K Polk pointed me into the right direction.
I had to Normalize the point first (""pub_key_1 =pub_key_1.Normalize()"") before I could obtain the coordinates.
I changed the code accordingly and now it gives me the correct results.
Thanks!
public static AsymmetricCipherKeyPair  Generate_EC_P256_Key_Pair(SecureRandom random)
    {
        // Select the curve P-256 //
        string curveName = ""P-256"";
        X9ECParameters ecP = NistNamedCurves.GetByName(curveName);
        ECDomainParameters dom_parameters = new ECDomainParameters(ecP.Curve, ecP.G, ecP.N);

        // Generate EC Key Pair //
        ECKeyPairGenerator pGen = new ECKeyPairGenerator();
        ECKeyGenerationParameters genParam = new ECKeyGenerationParameters(dom_parameters, random);
        pGen.Init(genParam);
        AsymmetricCipherKeyPair keypair = pGen.GenerateKeyPair();


        ECPrivateKeyParameters private_key = (ECPrivateKeyParameters)keypair.Private;
        ECPublicKeyParameters public_key = (ECPublicKeyParameters)keypair.Public;

        BigInteger priv_key_exp = private_key.D;

        BigInteger genx = public_key.Q.XCoord.ToBigInteger();
        BigInteger geny = public_key.Q.YCoord.ToBigInteger();
        BigInteger genx_aff = public_key.Q.AffineXCoord.ToBigInteger();
        BigInteger geny_aff = public_key.Q.AffineYCoord.ToBigInteger();

        ECPoint pub_key_1 = dom_parameters.G.Multiply(priv_key_exp);

        pub_key_1 =pub_key_1.Normalize();

        BigInteger calcx = pub_key_1.XCoord.ToBigInteger();
        BigInteger calcy = pub_key_1.YCoord.ToBigInteger();

        Console.WriteLine(""Exponent: "" + priv_key_exp.ToString(16));
        Console.WriteLine(""Generated X-Coord        : "" + genx.ToString(16));
        Console.WriteLine(""Generated X-Coord Affine : "" + genx_aff.ToString(16));
        Console.WriteLine(""Calculated X-Coord Affine: "" + calcx.ToString(16));
        Console.WriteLine(""\n"");
        Console.WriteLine(""Generated Y-Coord        : "" + geny.ToString(16));
        Console.WriteLine(""Generated Y-Coord Affine : "" + geny_aff.ToString(16));
        Console.WriteLine(""Calculated Y-Coord Affine: "" + calcy.ToString(16));


        return keypair;
    }

","70","<c#><bouncycastle><private-key><public-key><elliptic-curve>","0","1","2","2019-05-24 15:33:50","","0","","","","","2019-05-24 10:09:08",""
"47635633","What security level is provided by pairing curves in Charm Crypto?","I want to know what security level is provided by the type a and type d curves which are included in charm crypto library? For example, the type a curves SS512 and SS1024 have a prime field of 512 and 1024 bits respectively? Can anyone tell me what security is provided by them? 
","","69","<security><elliptic-curve><charm-crypto>","0","","0","2017-12-04 14:32:48","","4","","","","","2017-12-04 14:32:48",""
"52372836","Conductor of an elliptic curve in GP/Pari","I'm looking for a function that takes in as its input an elliptic curve and gives as an output the conductor of the curve. This should be a really simple built-in function to Pari, but frustratingly the code
E = ellinit(""11a1"");
E.conductor

Gives the error ""*   at top-level: E.conductor
                     ^---------
     not a function in function call
  *   Break loop: type 'break' to go back to GP prompt""
Even though once E is defined typing E. and then using tab twice lists E.conductor as a built in function for elliptic curve objects. I've looked all over Pari's elliptic curve reference card and elliptic curves function list with no luck. 
Any help would be really appreciated!
","I don't know anything about elliptic curves, so this might not be helpful. I had a quick look through the help.
If you have the name of the elliptic curve as in ""11a1"", then you can get the conductor with ellconvertname(""11a1"") which returns [11, 0, 1]. The conductor is just the first element: 11.
Otherwise there is a method ellglobalred that given an elliptic curve structure will return amongst other things the arithmetic conductor. (I'm not sure if that is the same thing, but in this case the first element contains 11).
And I also noticed that after calling ellglobalred, the information including conductor gets stored back into the elliptic curve structure. You can then extract this using indexes. For example E=ellinit(""11a1""); ellglobalred(E); E[16][6][1]
","68","<elliptic-curve><pari>","0","0","1","2018-09-18 02:22:39","","0","","","","","2018-09-17 17:19:03",""
"53236900","Elliptic Curve with a secant line","Currently I was trying to solve a problem with the condition below:
1. giving an elliptic curve y^2 = x^3 + ax + b
2. the user will input a, b and two points that exactly on the curve.

To put it simply, what I really need to do is make a secant line of the graph with the two points P and Q and try to check that if there is any point of intersection existing. If it exists, get the x and y of this point. I'm so struggled to solve this problem. Could someone give me some hints?
","

I'd homogenize this to x^3 + axz^2 + bz^3 - y^2z = 0 and points P = [Px : Py : Pz] and Q = [Qx : Qy : Qz]. Then any point R = λP + μQ with (λ, μ) ≠ (0, 0) lies on the line spanned by P and Q. If you wanted to avoid homogenizations, you'd require λ+μ=1 but that usually leads to divisions I'd rather avoid until the very end.
Plug the resulting coordinates of R into the homogenized equation of the elliptic curve, and you obtain a homogeneous cubic equation in λ and μ, i.e. something like
αλ³ + βλ²μ + γλμ² + δμ³ = 0

with the α, β, γ and δ depending on your a, b, P, Q. For μ=0 you get a coordinate vector which is a multiple of P, and as homogeneous coordinates identify multiples, you get point P itself, which lies on the curve. So μ=0 must satisfy the equation, hence you know α=0 even before you compute it. Likewise λ=0 represents Q so δ=0 if that point lies on the curve. You are left with
(βλ + γμ)λμ = 0

The trailing two factors encode the two known intersections I just mentioned. The parenthesis is the third intersection, the one you need. Now simply pick λ=γ and μ=−β to obtain a simple expression for the third point of intersection.
If you want to dehomogenize at the end, simply divide the first two coordinates of the resulting homogeneous coordinate vector by the third.
If I didn't mess up my sympy computation, you have
β = 3*Px^2*Qx + 2*Px*Pz*Qz*a - Py^2*Qz - 2*Py*Pz*Qy + Pz^2*Qx*a + 3*Pz^2*Qz*b
γ = 3*Px*Qx^2 + 2*Pz*Qx*Qz*a - Pz*Qy^2 - 2*Py*Qy*Qz + Px*Qz^2*a + 3*Pz*Qz^2*b

Which is expectedly very symmetric in P and Q. So essentially you just need a single function, and then you get β=f(P,Q) and γ=f(Q,P).
In C++ and with the whole homogenization / dehomogenization in place:
inline double f(double Px, double Py, double Qx, double Qy, double a, double b) {
  return 3*Px*Px*Qx + 2*Px*a - Py*Py - 2*Py*Qy + Qx*a + 3*b;
}

std::pair<double, double> third_intersection(double Px, double Py, double Qx, double Qy, double a, double b) {
  double beta = f(Px, Py, Qx, Qy, a, b);
  double gamma = f(Qx, Qy, Px, Py, a, b);
  double denominator = gamma - beta;  // Might be zero if line PQ is an asymptote!
  double x = (gamma*Px - beta*Qx) / denominator;
  double y = (gamma*Py - beta*Qy) / denominator;
  return std::make_pair(x, y);
}

","68","<c++><math><geometry><elliptic-curve>","0","0","1","2018-11-10 20:45:01","53243010","3","1","7478597","","2018-11-10 07:52:11","2018-11-10 07:28:37","2018-11-11 08:40:36"
"53572911","Javascript elliptical point multiplication algorithm","The following is an implementation of elliptical curve Point Multiplication, but it's not working as expected (using recent Chrome / Node with BigInt for illustration):
const bi0 = BigInt(0)
const bi1 = BigInt(1)
const bi2 = BigInt(2)
const bi3 = BigInt(3)

const absMod = (n, p) => n < bi0 ? (n % p) + p : n % p

export function pointAdd (xp, yp, xq, yq, p) {
  const lambda = (yq - yp) / (xq - xp)
  const x = absMod(lambda ** bi2 - xp - xq, p)
  const y = absMod(lambda * (xp - x) - yp, p)
  return { x, y }
}

export function pointDouble (xp, yp, a, p) {
  const numer = bi3 * xp ** bi2 + a
  const denom = (bi2 * yp) ** (p - bi2)
  const lambda = (numer * denom) % p
  const x = absMod(lambda ** bi2 - bi2 * xp, p)
  const y = absMod(lambda * (xp - x) - yp, p)
  return { x, y }
}

export function pointMultiply (d, xp, yp, a, p) {
  const add = (xp, yp, { x, y }) => pointAdd(xp, yp, x, y, p)
  const double = (x, y) => pointDouble(x, y, a, p)
  const recur = ({ x, y }, n) => {
    if (n === bi0) { return { x: bi0, y: bi0 } }
    if (n === bi1) { return { x, y } }
    if (n % bi2 === bi1) { return add(x, y, recur({ x, y }, n - bi1)) }
    return recur(double(x, y), n / bi2)
  }
  return recur({ x: xp, y: yp }, d)
}

Given a known curve with properties, the above succeeds for points P2 - P5, but starts failing at P6 onwards:
const p = BigInt('17')
const a = BigInt('2')
const p1 = { x: BigInt(5), y: BigInt(1) }

const d = BigInt(6)
const p6 = pointMultiply(d, p1.x, p1.y, a, p)
p6.x === BigInt(16) // incorrect value of 8 was returned
p6.y === BigInt(13) // incorrect value of 14 was returned

The known curve has values:
P   X    Y
—————————— 
1   5    1
2   6    3
3  10    6
4   3    1
5   9   16
6  16   13
7   0    6
8  13    7
9   7    6
10  7   11

I'm not sure if I misunderstand the algorithm or I've made an error in the implementation.
","I don't know javascript very well, so the code confuses me. But ...
In function pointAdd, and everywhere else, ""division"" must be done mod p. You're evidently doing it correctly in pointDouble, but not in pointAdd. In pointAdd, use the same pattern: Instead of
const lambda = (yq - yp) / (xq - xp)

do 
const numer = yq - yp
const denom = (xq - xp) ** (p - bi2)
const lambda = (numer * denom) % p

though I would think it would much clearer and less error prone to simply have a modular inverse function instead of computing Xp-2 everywhere you need it.
","62","<javascript><elliptic-curve>","1","1","1","2018-12-01 18:12:39","53573677","1","1","","","","2018-12-01 16:41:10",""
"56060327","Elliptic Curve in Swift signing and verifying results in error -9809","I'm writing this question because I've hit a dead end about the next issue.
I'm attempting to sign a chunk of data with a private key and then verify that data with a public key, but when i perform SecKeyRawVerify, it returns an error code of -9809, which is described by Apple as ""An underlying cryptographic error was encountered."", which isn't helpful at all.
I think the main issue is in my verifying code, which somehow doesn't work properly. Maybe I'm mistaken, though.
The minimum iOS version target is iOS10, if that helps. I think on iOS10 Apple did various changes on the security framework, but I'm not 100% sure.
Beware, the code is pretty long (sorry about that).
The code that generates the pair of keys used for Elliptic Curve encryption is as follows.
    private func generateKeyPair(tagPrivate: String, tagPublic: String, typeAuthentication: KeystoreServiceConstants.Authentication, keyType: CFString, KeySize: Int, container: KeystoreServiceConstants.Container) throws {

        var privateKeyAttr: [String: Any]
        var publicKeyAttr: [String: Any]
        var generatePairKeyAttr: [String: Any]

        var accessControl: AccessControl

        switch typeAuthentication {
        case KeystoreServiceConstants.Authentication.none:
            do {
                accessControl = try AccessControl(protection: .whenUnlocked, policy: [])
            } catch {
                throw error
            }
        case KeystoreServiceConstants.Authentication.biometricAuthentication:
            do {
                accessControl = try AccessControl(protection: .whenUnlocked, policy: [.touchIDCurrentSet, .privateKeyUsage])
            } catch {
                throw error
            }
        }

        publicKeyAttr = createPublicKeyParams(tagPublic: tagPublic)
        privateKeyAttr = createPrivateKeyParams(tagPrivate: tagPrivate, accessControl: accessControl)
        generatePairKeyAttr = createGeneratePairKeyParams(publicKeyAttr: publicKeyAttr, privateKeyAttr: privateKeyAttr, keyType: keyType, KeySize: KeySize, container: container)

        var publicKey, privateKey: SecKey?

        let status = SecKeyGeneratePair(generatePairKeyAttr as CFDictionary, &publicKey, &privateKey)

        if status != errSecSuccess {
            throw handlingError(status: status)
        }

        do {
            try forceSaveInKeyChain(tagPublic: tagPublic, publicKey: publicKey!, keyType: keyType, keyClass: kSecAttrKeyClassPublic)
        } catch {
            throw error
        }
    }

    private func createPublicKeyParams(tagPublic: String) -> [String: Any] {

        let publicKeyParameters: [String: Any] = [
            kSecAttrIsPermanent as String: false,
            kSecAttrApplicationTag as String: KeystoreServiceConstants.Tag.application,
            kSecAttrLabel as String: tagPublic
        ]
        return publicKeyParameters
    }

    private func createPrivateKeyParams(tagPrivate: String, accessControl: AccessControl) -> [String: Any] {

        let context = LAContext()

        let privateKeyParams: [String: Any] = [
            kSecAttrIsPermanent as String: true,
            kSecAttrApplicationTag as String: KeystoreServiceConstants.Tag.application,
            kSecAttrLabel as String: tagPrivate,
            kSecUseAuthenticationContext as String: context,
            kSecUseAuthenticationUI as String: kSecUseAuthenticationUIAllow,
            kSecAttrAccessControl as String: accessControl.accessControl
        ]
        return privateKeyParams
    }

    private func createGeneratePairKeyParams(publicKeyAttr: [String: Any], privateKeyAttr: [String: Any], keyType: CFString, KeySize: Int, container: KeystoreServiceConstants.Container) -> [String: Any] {
        var params: [String: Any] = [
            kSecAttrKeyType as String: keyType,
            kSecAttrKeySizeInBits as String: KeySize,
            kSecPublicKeyAttrs as String: publicKeyAttr,
            kSecPrivateKeyAttrs as String: privateKeyAttr,
        ]
        if container == .secureEnclave {
            params[kSecAttrTokenID as String] = kSecAttrTokenIDSecureEnclave
        }
        return params
    }

    private func forceSaveInKeyChain(tagPublic: String, publicKey: SecKey, keyType: CFString, keyClass: CFString) throws {


        let query: [String: Any] = [
            kSecClass as String: kSecClassKey,
            kSecAttrKeyType as String: keyType,
            kSecAttrKeyClass as String: keyClass,
            kSecAttrLabel as String: tagPublic,
            kSecAttrApplicationTag as String: KeystoreServiceConstants.Tag.application,
            kSecValueRef as String: publicKey,
            kSecAttrIsPermanent as String: true,
            kSecReturnData as String: true,
            ]

        var raw: CFTypeRef?
        var status = SecItemAdd(query as CFDictionary, &raw)

        if status == errSecDuplicateItem {
            status = SecItemDelete(query as CFDictionary)
            status = SecItemAdd(query as CFDictionary, &raw)
        }

        guard status == errSecSuccess else {
            throw KeystoreServiceConstants.KeyError.saveFailureInKeychain
        }
    }

The code that signs the message is the next:
   func signWithKey(data: String) throws -> String {
        let oneKeyPrivate = try getKeyTypeInSecureEnclave(tag: ""TagKeyPrivate"")
        let sign = try signWithPrivateKey(data, oneKeyPrivate)

        let dataSign = sign!.data(using: String.Encoding.utf8)!
        let testKeyPublicData = try getKeyTypeInKeyChain(tag: ""TagKeyPublic"", keyType: KeystoreServiceConstants.KeyType.EC)
        // The result is always false, because verifyString fails with code -9809
        let result = verifyString(string: data, signature: dataSign, publicKey: testKeyPublicData as! SecKey)

        // My 2nd try, with another method to get the public key
        let keyPrivate = try getKeyTypeInSecureEnclave(tag: ""TagKeyPrivate"")
        let publicKey = SecKeyCopyPublicKey(keyPrivate)
        let result2 = verifyString(string: data, signature: dataSign, publicKey: publicKey!)

        return sign!

    }



    private func getKeyTypeInKeyChain(tag: String, keyType: CFString) throws -> SecKey {

        let query: [CFString: Any] = [
            kSecClass: kSecClassKey,
            kSecAttrKeyType: keyType,
            kSecAttrApplicationTag: KeystoreServiceConstants.Tag.application,
            kSecAttrLabel: tag,
            kSecReturnRef: true
        ]
        var result: AnyObject?
        let status: OSStatus = SecItemCopyMatching(query as CFDictionary, &result)
        switch status {
        case errSecSuccess:
            return result as! SecKey
        case errSecItemNotFound:
            throw KeystoreServiceConstants.KeyError.keyNotFound
        default:
            throw KeystoreServiceConstants.KeyError.keyNotFound
        }
    }


    private func getKeyTypeInSecureEnclave(tag: String) throws -> SecKey {

        let query: [String: Any] = [
            kSecClass as String: kSecClassKey,
            kSecAttrKeyClass as String: kSecAttrKeyClassPrivate,
            kSecAttrApplicationTag as String: KeystoreServiceConstants.Tag.application,
            kSecAttrLabel as String: tag,
            kSecReturnRef as String: true,
            kSecUseOperationPrompt as String: LocalizerManager.stringForKey(key: ""accessControl_message"") as CFString,
            kSecUseAuthenticationUI as String: kSecUseAuthenticationUISkip
            ]
        let raw = try getSecKeyWithQuery(query)
        return raw as! SecKey
    }

The code that checks and verifies the signed message is the next:
     func verifyString(string: String, signature: Data, publicKey: SecKey) -> Bool {
        var digest = Data(count: Int(CC_SHA256_DIGEST_LENGTH))
        let stringData: Data = string.data(using: String.Encoding.utf8)!

        _ = digest.withUnsafeMutableBytes { (digestBytes) in
            stringData.withUnsafeBytes { (stringBytes) in
                CC_SHA256(stringBytes, CC_LONG(stringData.count), digestBytes)
            }
        }

        let mutdata = NSMutableData(data: signature)

        let err: OSStatus = SecKeyRawVerify(
            publicKey,
            SecPadding.PKCS1SHA256,
            [UInt8](digest),
            digest.count,
            mutdata.mutableBytes.assumingMemoryBound(to: UInt8.self),
            signature.count
        )
        switch err {
        case noErr:
            return true
        default:
            return false
        }
    }

I'd appreciate any help or clues you can offer, because I've been googling and searching in StackOverflow for several hours and I haven't been able to fix my issue yet.
And again, sorry for the long code!
","","62","<ios><swift><security><encryption><elliptic-curve>","2","","0","2019-05-09 13:29:36","","0","2","10473781","","2019-05-09 13:29:36","2019-05-09 13:17:40",""
"40510382","Digital Certificate for digitally signing a xml document","I have 3rd party integration requirement that xml docs be digitally signed with the following parameters:
Signature keys shall be 256bit Elliptic Curve Keys, have a length of 256 bits, use the NIST SuiteB P-256 curve.
Do I need to to have a digital certificate to digitally sign a xml document, to meet the these (above) requirements.
or do the libraries for java or c# provide the capability to digitally sign while meeting these requirements.
","Yes, you need a digital certificate. That does not mean you need to buy one. You could generate one yourself.
","62","<java><public-key-encryption><elliptic-curve>","0","0","1","2016-11-09 15:23:26","","0","","","","","2016-11-09 15:20:42",""
"33162198","in C ,why result is different after only changing loop boundary?","I met this problem when verifying whether points in a finite field GF(13) is on elliptic curve y^2 = x^3 + x + 1:
first I set the loop boundary as i<2,the results came out right.
#include <stdio.h>
#include <math.h>

void main ()
{
    int a[13], b[13];
    int j, i, m, k = 0;
    for (i = 0; i < 2; i++)
        for (j = 0; j < 13; j++)
            if ((i * i * i + i + 1) % 13 == (j * j) % 13) {
                a[k] = i;
                b[k] = j;
                k++;
            }
    printf (""\n There are %d points on the curve\nThe points are: "", k);
    for (m = 0; m < k; m++)
        printf (""\nx=%d,y=%d \n"", a[m], b[m]);
}

The result is link 1
after I change the i<2 to i<13, 
for(i=0;i<13;i++)

the first 4 points changed: link 2
","You are entering undefined behavior. If you set a break inside the loop you will notice that k >= 13 which is outside the bounds of your arrays.
You could add some bounds checking and consider the size of your arrays.
","62","<c><loops><elliptic-curve><finite-field>","-1","2","1","2015-10-16 05:26:24","33162381","3","","3422102","","2015-10-16 03:53:21","2015-10-16 03:41:58",""
"56235571","How to encrypt string/files with ECC public key from cipher","I'm trying to implement encryption and decryption of files with ECC public and private keys. I able to correctly generate public and private keys through ECC but then I don't what to put in Cipher.getinstance() to implement the Encryption/Decryption part.
I'm trying to use bounycastle library but I can't figure out how to use it.
Security.addProvider(new BouncyCastleProvider());
    KeyPairGenerator ecKeyGen = null;
    try {
        ecKeyGen = KeyPairGenerator.getInstance(""EC"");
    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
    }
    ecKeyGen.initialize(new ECGenParameterSpec(""secp384r1""));



    KeyPair ecKeyPair = ecKeyGen.generateKeyPair();
    System.out.println(""What is slow?"");

    Cipher iesCipher = null;
    try {

        try {
    /**/ Dont know what to place in Cipher.getInstance("" "")**

            iesCipher = Cipher.getInstance(""EC"",BouncyCastleProvider.PROVIDER_NAME);
        } catch (NoSuchProviderException e) {
            e.printStackTrace();
        }

    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
    } catch (NoSuchPaddingException e) {
        e.printStackTrace();
    }
    try {
        iesCipher.init(Cipher.ENCRYPT_MODE, ecKeyPair.getPublic());
    } catch (InvalidKeyException e) {
        e.printStackTrace();
    }

    String btey = ""fff"";

    byte[] ciphertext = new byte[0];
    try {
        ciphertext = iesCipher.doFinal(btey.getBytes());
    } catch (BadPaddingException e) {
        e.printStackTrace();
    } catch (IllegalBlockSizeException e) {
        e.printStackTrace();
    }

    try {
        iesCipher.init(Cipher.DECRYPT_MODE, ecKeyPair.getPrivate());
    } catch (InvalidKeyException e) {
        e.printStackTrace();
    }
    byte[] plaintext = new byte[0];
    try {
        plaintext = iesCipher.doFinal(ciphertext);
    } catch (BadPaddingException e) {
        e.printStackTrace();
    } catch (IllegalBlockSizeException e) {
        e.printStackTrace();
    }

    System.out.println(Hex.toHexString(ciphertext));
    System.out.println(new String(plaintext));

Whenever I run and debug the code and the Cipher.getInstance(""EC"",BouncyCastleProvider.PROVIDER_NAME) hits, I get a NoSuchAlgorithmException and the detail message is ""Provider BC does not provide EC"". On the other hand if I remove ""BouncyCastleProvider.PROVIDER_NAME"" from Cipher.getInstance(""EC"") it gives me an exception of NoSuchAlgorithmException with a detail message is ""No provider found for EC""
Kindly help me out in this. I don't know which algorithm to use for the encryption/decryption of files with ECC keys.
","","61","<java><android><encryption><public-key-encryption><elliptic-curve>","0","","0","2019-05-21 10:50:02","","0","","8860931","","2019-05-21 10:50:02","2019-05-21 09:45:54","2019-05-21 12:33:32"
"52044921","Java Keyfactory can't generate ECPublicKey using nimbus","I'm trying to validate a JWT token of EC type algorithm received from PingAccess using nimbusds library. It doesn't work in all environments.  But they all have the same version of Java.  Some environment couldn't generate the ECPublickey object with the key specs, so it can't find a matched key from the remote keyset.  Does anyone have the similar experience with JWT token with EC algorithm?  How can I know if the EC algorithm exists in the environment? From the doc here,https://docs.oracle.com/javase/8/docs/api/index.html?java/security/KeyFactory.html,

Every implementation of the Java platform is required to support the
  following standard KeyFactory algorithms:
DiffieHellman DSA RSA

It doesn't mention EC algorithms, but it's listed here :https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#KeyFactory
In nimbusds ECKey Class, the trace stopped at this line:
ECPublicKey ecPublicKey = (ECPublicKey)keyFactory.generatePublic(publicKeySpec);

Key factory is:
 keyFactory = KeyFactory.getInstance(""EC"");

","Not being given a stacktrace, it's a bit of guess work on my side. However, given that it works on some environments, it seems likely to me that some environments (those that work) have the Unlimited key strength policy files enabled, and others (those that don't work) have not.
Likely the public key that needs to be generated is larger than what is available under standard policy.
","61","<java><jwt><openid><elliptic-curve>","0","0","2","2018-10-15 17:32:47","","0","","","","","2018-08-27 18:19:10",""
"52044921","Java Keyfactory can't generate ECPublicKey using nimbus","I'm trying to validate a JWT token of EC type algorithm received from PingAccess using nimbusds library. It doesn't work in all environments.  But they all have the same version of Java.  Some environment couldn't generate the ECPublickey object with the key specs, so it can't find a matched key from the remote keyset.  Does anyone have the similar experience with JWT token with EC algorithm?  How can I know if the EC algorithm exists in the environment? From the doc here,https://docs.oracle.com/javase/8/docs/api/index.html?java/security/KeyFactory.html,

Every implementation of the Java platform is required to support the
  following standard KeyFactory algorithms:
DiffieHellman DSA RSA

It doesn't mention EC algorithms, but it's listed here :https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#KeyFactory
In nimbusds ECKey Class, the trace stopped at this line:
ECPublicKey ecPublicKey = (ECPublicKey)keyFactory.generatePublic(publicKeySpec);

Key factory is:
 keyFactory = KeyFactory.getInstance(""EC"");

","Actually, the problem is the provider list in java.security file. Without given a specific, provider for the algorithm, it will use the default provider in the list provided in java.security. In a production environment, that file is missing. Hard to figure it out because there is no exception thrown out or an error. In short, java.security file is missing and it couldn't find the algorithm provider. 
","61","<java><jwt><openid><elliptic-curve>","0","0","2","2018-10-15 17:32:47","","0","","","","","2018-08-27 18:19:10",""
"45482316","EdDSAPublicKey Serialization Java","Is there a way to serialize EdDSAPublicKey in java.
There a method getEncoded() in EdDSAPublicKey but how to get back a EdDSAPublicKey from the encoding.
","Using the X509EncodedKeySpec 
    X509EncodedKeySpec specPub = new X509EncodedKeySpec(encodedPublicKey);
    EdDSAPublicKey eddsakey = new EdDSAPublicKey(specPub);

","59","<java><encoding><digital-signature><public-key><elliptic-curve>","0","1","1","2017-08-03 18:39:31","45482407","1","","1816580","","2017-08-03 18:39:31","2017-08-03 11:01:05",""
"41863445","Cartesian Points on Elliptic Curves in sage","I just want to sample cartesian points from an elliptic curve in $(x,y)$ form. Given one of x or y, I want to be able to calculate the other's possibilities.
Examples: I have EllipticCurve('11a') and I want to know where it intersects the x-axis in (x,y) coordinates. What about where the curve intersects x=5? Or where it intersects y=3?
Can somebody assist me in doing this?
","You just need to solve a polynomial equation in one variable. The factor function, or the .roots method of polynomials can do that for you.
","56","<sage><elliptic-curve>","0","0","1","2017-01-26 00:57:08","","0","","","","","2017-01-25 23:16:45",""
"56206180","Support specific elliptic curves and signature algorithms in erlang with fips","I want to use the RabbitMQ configuration file (RabbitMQ.conf or advanced.config) in order to make sure Erlang will use only specific signature algorithms and elliptic curves.
I've tried couple of syntaxes but no success.
For example, I want to enable only secp256r1 and secp384r1.
Thanks for helping.
","","55","<rabbitmq><erlang><elliptic-curve><fips>","0","","0","2019-05-19 08:49:52","","1","","","","","2019-05-19 08:49:52",""
"51406274","Elliptic Curve - How to handle division at point multiplication","I am working on implementing EC-calculations (first) in C++. Everything makes sense to me, but the division used in point multiplication. As I understand using integers is common but the division of lambda (https://en.wikipedia.org/wiki/Elliptic_curve_point_multiplication) for addition or doubling a point gives some uncertainty because of the approximation of the result. How is this normally handled, so everyone gets the same results despite using different amount of numbers after dot? 
(Unfortunately I could not find the implementation of the return of the EC_POINT_add function by openssl to compare their solution)  
","The answer seems to be modular division or better multiplication of the inverse element.
","54","<c++><integer><division><multiplication><elliptic-curve>","0","0","1","2018-07-20 14:24:16","","0","","5373794","","2018-07-18 16:53:59","2018-07-18 15:52:34",""
"54176869","How can I improve this code of elliptic curve factorization?","First, I'm very noob :) I didn't studied deep on elliptic curves. I just google some elementary knowledge of prime factorization and elliptic curve.
I'm trying to make the python3 code implementation of elliptic curve factoring  algorithm. I just Followed the discription in Lenstra's Elliptic Curve Method, and with some functinons, class and implemented error, I managed to build the code:
from random import randint
from math import e as exp
from math import sqrt, log

class InvError(Exception):
    def __init__(self, v):
        self.value = v


def inv(a,n):
    r1, s1, t1 = 1, 0, a
    r2, s2, t2 = 0, 1, n
    while t2:
        q = t1//t2
        r1, r2 = r2, r1-q*r2
        s1, s2 = s2, s1-q*s2
        t1, t2 = t2, t1-q*t2

    if t1!=1: raise InvError(t1)
    else: return r1


class ECpoint(object):
    def __init__(self, A,B,N, x,y):
        if (y*y - x*x*x - A*x - B)%N != 0: raise ValueError
        self.A, self.B = A, B
        self.N = N
        self.x, self.y = x, y

    def __add__(self, other):
        A,B,N = self.A, self.B, self.N
        Px, Py, Qx, Qy = self.x, self.y, other.x, other.y
        if Px == Qx and Py == Qy:
            s = (3*Px*Px + A)%N * inv((2*Py)%N, N) %N
        else:
            s = (Py-Qy)%N * inv((Px-Qx)%N, N) %N
        x = (s*s - Px - Qx) %N
        y = (s*(Px - x) - Py) %N
        return ECpoint(A,B,N, x,y)

    def __rmul__(self, other):
        r = self; other -= 1
        while True:
            if other & 1:
                r = r + self
                if other==1: return r
            other >>= 1
            self = self+self


def ECM(n):
    x0 = 2
    y0 = 3
    bound = max(int(exp**(1/2*sqrt(log(n)*log(log(n))))),100)
    while True:
        try:
            a = randint(1,n-1)
            inv(a,n)
            b = (y0*y0 - x0*x0*x0 - a*x0) %n
            inv(b,n)
            inv((4*a*a*a + 27*b*b)%n, n)

            P = ECpoint(a,b,n, x0,y0)
            for k in range(2, bound):
                inv(P.x, n)
                inv(P.y, n)
                P = k*P
                #print(k,P)

        except InvError as e:
            d = e.value
            if d==n: continue
            else: return d, n//d


print(ECM(int(input())))

This code gets a composite number as input, and print two nontrivial divisors.
The code runs well for most of the inputs. Problem is, it's too slow...
I tested this code for some numbers between 60~120 bit integers(such as 2^101-1, 10^30-33, etc.), and what I encountered was it is even slower than roughly made Pollard's p-1 test like this:
def Pollard_pminus1(n):
    if '0' not in bin(n)[3:]: base = 3
    else: base = 2
    if n % base == 0: return base, n//base

    b = base; exp = 1
    while True:
        b = pow(b,exp,n)
        d = gcd(b-1,n)
        if d!=1: break
        exp += 1
    if d!=n: return d, n//d

And for inputs of roughly 50 digits(according to Wikipedia, this range should be the real playground for ECM...), this program is halted even for a day.
Can I improve the performance of this code? Is it worthy to optimize the boundary of the value k, or should I fix large part of this algorithm?
Thanks for your help, and sorry for poor language(if something wrong);;
","","51","<python-3.x><elliptic-curve><prime-factoring>","0","","0","2019-01-14 06:51:53","","3","","","","","2019-01-14 06:51:53",""
"46489559","Elliptic Curve PublicKey sharing between different platforms","I am trying to communicate between android(client), ios(client) and .net(webapi) platforms with Elliptic Curve.
When I try to generate public key on android platform with SpongyCastle, my web api could use this public key. This key's bytes length is 64.
But When I try to generate public key on ios with SwCrypt, my web api couldn't use this key. It throws IOException - ""DER length more than 4 bytes: 119"" . This key's bytes length is 65.
How can I generate Elliptic Curve key pairs on ios platform for communicate with .net web api? Thanks.
","","50","<.net><swift><encryption><asp.net-web-api><elliptic-curve>","0","","0","2017-09-29 13:11:07","","2","","","","","2017-09-29 13:11:07",""
"50392933","Costs of a Program (Point addition - doubling formulas)","I am currently working on the addition formulas in the Bitcoin protocol one can find on the Github webpage https://github.com/vbuterin/pybitcointools/blob/aeb0a2bbb8bbfe421432d776c649650eaeb882a5/bitcoin/main.py. I want to compare its performance to the formulas in the paper ''Complete addition formulas for prime order elliptic curves''. Therefore I need to count the number of point additions, squarings, multiplications and the number of integer operations. (In the spirit of [http://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html][2]).
Unfortunately I am not a very good and experienced programer, since my background is a master of mathematics, with little programming experience.
The code is
def jacobian_add(p, q):
    if not p[1]:
        return q
    if not q[1]:
        return p
    U1 = (p[0] * q[2] ** 2) % P
    U2 = (q[0] * p[2] ** 2) % P
    S1 = (p[1] * q[2] ** 3) % P
    S2 = (q[1] * p[2] ** 3) % P
    if U1 == U2:
        if S1 != S2:
            return (0, 0, 1)
        return jacobian_double(p)
    H = U2 - U1
    R = S2 - S1
    H2 = (H * H) % P
    H3 = (H * H2) % P
    U1H2 = (U1 * H2) % P
    nx = (R ** 2 - H3 - 2 * U1H2) % P
    ny = (R * (U1H2 - nx) - S1 * H3) % P
    nz = (H * p[2] * q[2]) % P
    return (nx, ny, nz)

My question is: when I now cound the number of squarings of a point, does the computer safe the value for q2:= q[2]**2 when I compute q[2]**2 so that computing q[2]**3 only costs the multiplication of q2 with q[2], or did he 'forget' this value and needs to calculate it again?
Then it would be more efficient to define beforehand the square of p[2] and q[2] so that the program can read out the pre-defined values without the need to calculate it two times, no?
And is H*H the cost of a point squaring or point multiplication?

Usually this jacobian point addition is of a cost of: 4S (point squarings)+ 12M (point multiplications) + 6a (point additions) + 1*2 (multiplication by 2).
","","49","<python><complexity-theory><bitcoin><elliptic-curve>","1","","0","2018-05-17 13:39:21","","1","","","","","2018-05-17 13:39:21",""
"57590223","What is this weird ObjectID in Firefox's spki export of an EC public key?","Given an spki export of an EC public key (code at bottom), Chromium & co give off a sane ObjectID but Firefox gives off a completely different one:
  0  86: SEQUENCE {
  2  16:   SEQUENCE {
  4   4:     OBJECT IDENTIFIER '1 3 132 112'wat
 10   8:     OBJECT IDENTIFIER prime256v1 (1 2 840 10045 3 1 7)
       :     }
 20  66:   BIT STRING
       :     04 EB F3 46 9A 56 19 D6 76 36 23 3B 57 D4 01 25
       :     CD DD A4 BF 72 DF 51 C7 E7 AA 81 B9 04 5F DF 6B
       :     CA 02 E4 3E 02 D1 44 57 65 EB 9E 36 C4 79 A6 F8
       :     51 BB 2D 8F DC C4 42 B3 DB 8B A3 AF 57 F0 BF 7B
       :     35
       :   }

For reference, here's one extracted from Chromium:
  0  89: SEQUENCE {
  2  19:   SEQUENCE {
  4   7:     OBJECT IDENTIFIER ecPublicKey (1 2 840 10045 2 1)yes thank you
 13   8:     OBJECT IDENTIFIER prime256v1 (1 2 840 10045 3 1 7)
       :     }
 23  66:   BIT STRING
       :     04 9D 16 97 2F 89 6F 9B 87 4B 86 0E F7 8F BB 98
       :     37 E2 BF 75 7C 8E AD 1C A7 B4 5F 6D 75 72 90 FC
       :     8F 30 AF 91 4B AA 96 71 F3 52 6B 58 8F E0 27 92
       :     13 12 77 D1 17 76 F3 3A FD ED A9 B1 1A 64 5E 5F
       :     B1
       :   }

(Dumps generated with dumpasn1)
And indeed, going on OID ref Chromium's identifier seems good.
Firefox's OID seems to belong to another group entirely and I cannot even find it.
The thing is, a different OID makes various imports crash. A key exported this way from Firefox cannot be imported into OpenSSL or even Chromium without being altered first.
Thus,

What is this ID?
Why does Firefox use it instead of the more ""standard"" one used by Chromium?
Speaking of standards, is there anywhere this export format is defined in the W3C Recommandation or a related RFC?


Here's a snippet to quickly generate an exported EC public key:


(async () => {
  const subtle = crypto.subtle
  const eckp = await subtle.generateKey({
    name: 'ECDSA',
    namedCurve: 'P-256'
  }, true, ['sign', 'verify'])

  const exportedPubK = new Uint8Array(await subtle.exportKey('spki', eckp.publicKey))
  console.log(exportedPubK.length) // 88 for the weird OID, 91 otherwise.
  console.log(`[${exportedPubK.join(', ')}]`)
})();



","The cause is a Firefox-bug, see Bug 1410403 and Bug 1514032, respectively. 
The correct OID for a public ECDSA (or ECDH) key is 1.2.840.10045.2.1 according to RFC 5480, section 2.1.1. OID 1.3.132.112 is not defined (the similar OID 1.3.132.1.12 is restricted to ECDH, see also RFC 5480, section 2.1.2 and W3C Recommendation, section B).
","48","<javascript><firefox><elliptic-curve><webcrypto-api><spki>","1","2","1","2019-08-22 12:13:30","57609110","0","","","","","2019-08-21 11:05:35",""
"58167034","ECDiffieHellman - mbedTLS vs C#","I need to use elliptic curve Diffie Hellman between a ARM cortex M3 and the PC.
On the ARM, I use mbed TLS. On the PC side I want to us C# and the ECDiffieHellman(Cng) class.
I can do the ECDH on ARM vs ARM, but I do have trouble when I try to replace one side with the PC.

Problem was the key exchange.
I found out, that the key is exported by mbed TLS as <LEN><0x04><X><Y>.

Thus, In C# I am importing the public key using
private static EC
DiffieHellmanPublicKey ToPublicKey(byte[] publicKey)
{
    var keyLength = 32;

    if (publicKey[0] != (2 + 2 * keyLength) - 1)
        throw new ArgumentException(""Invalid key length"", nameof(publicKey));
    if (publicKey[1] != 0x04)
        throw new ArgumentException(""Invalid key format"", nameof(publicKey));

    var parameters = new ECParameters()
    {
        Curve = ECCurve.NamedCurves.brainpoolP256r1,
        Q = new ECPoint()
        {
            X = publicKey.Skip(2).Take(keyLength).ToArray(),
            Y = publicKey.Skip(2 + keyLength).Take(keyLength).ToArray()
        }
    };

    using (var tmp = ECDiffieHellman.Create(parameters))
    {
        return tmp.PublicKey;
    }
}


To generate the key I tried

var ecdh = new ECDiffieHellmanCng(ECCurve.NamedCurves.brainpoolP256r1);
ecdh.KeyDerivationFunction = ECDiffieHellmanKeyDerivationFunction.Tls;
ecdh.Seed = new byte[32];
ecdh.Label = Encoding.ASCII.GetBytes(""ECDiffieHellman"");

new RNGCryptoServiceProvider().GetBytes(ecdh.Seed);

// ...

var sharedSecret = ecdh.DeriveKeyMaterial(peersPublicKey);

My problem is that the generated shared secret is of different length compared to the one generated by mbed TLS and does not match.
Did someone already solve this problem?
Thanks!
EDIT 1:
I forgot to mention, that I use bare ECDH on ARM. So I don't think there is any key derivation function executing. Is it sufficient to hash (SHA256) the result to match the C# side (when configuring SHA256 as KDF there)?
","I solved the problem. In short: just hash the ECDH result.
C/C++ side:

EC Diffie Hellman

mbedtls_ecdh_init(...);
mbedtls_ecdh_setup(...);
mbedtls_ecdh_make_public(...); //make own public key and send it to peer
mbedtls_ecdh_read_public(...); //reed peers public key
mbedtls_ecdh_calc_secret(...); //note: i pass in my own RND func because of no OS
mbedtls_ecdh_free(...);


SHA256

mbedtls_sha256_init(...);
mbedtls_sha256_starts_ret(...);
mbedtls_sha256_update_ret(...);
mbedtls_sha256_finish_ret(...);
mbedtls_sha256_free(...);

C# side:
private void EllipticCurveDiffieHellman()
{
    var ecdh = new ECDiffieHellmanCng(ECCurve.NamedCurves.brainpoolP256r1);

    ecdh.KeyDerivationFunction = ECDiffieHellmanKeyDerivationFunction.Hash;
    ecdh.HashAlgorithm = CngAlgorithm.Sha256;

    //get relevant point from own public key
    var ownPublicKey = ecdh.PublicKey.ExportExplicitParameters().Q;

    var peersPublicKey = SendPublicKey(ownPublicKey); //key exchange
    var sharedSecret = ecdh.DeriveKeyMaterial(peersPublicKey);

    Console.WriteLine(""Key: "" + HexValue.Parse(sharedSecret.ToArray()));
}

DiffieHellmanPublicKey ToPublicKey(byte[] publicKey)
{
    var keyLength = 32;

    if (publicKey[0] != (2 + 2 * keyLength) - 1)
        throw new ArgumentException(""Invalid key length"", nameof(publicKey));
    if (publicKey[1] != 0x04)
        throw new ArgumentException(""Invalid key format"", nameof(publicKey));

    var parameters = new ECParameters()
    {
        Curve = ECCurve.NamedCurves.brainpoolP256r1,
        Q = new ECPoint()
        {
            X = publicKey.Skip(2).Take(keyLength).ToArray(),
            Y = publicKey.Skip(2 + keyLength).Take(keyLength).ToArray()
        }
    };

    using (var tmp = ECDiffieHellman.Create(parameters))
    {
        return tmp.PublicKey;
    }
}

","47","<c#><c><elliptic-curve><diffie-hellman><mbedtls>","1","0","1","2019-09-30 13:03:48","58168239","0","","1083111","","2019-09-30 12:15:12","2019-09-30 11:29:52",""
"39881149","How to draw extended curve?","My problem is, I have a curve with red dots as the image below. I want to extend the curve like the blue dots in the image. How can I do it?

I think finding Bézier curve with the red dots and somehow extending the Bézier function may work, but I am not sure about it. Any idea is welcome please!
","","47","<curve-fitting><curve><bezier><elliptic-curve><best-fit-curve>","0","","0","2016-10-05 18:21:32","","9","","","","","2016-10-05 18:21:32",""
"57067178","How to implement bn254 using libpbc library?","I'm implementing pairing based cryptography using libpbc. In libpbc, the parameters setting are as follows:
pairing_t pairing;
pbc_param_t par;
pbc_param_init_i_gen(par, 696);
pairing_init_pbc_param(pairing, par);
pbc_param_clear(par);

However, I want to use bn254 curve, how can I set the parameters or what else I can do to set these parameters?
","","47","<elliptic-curve><pairing><jpbc>","0","","0","2019-07-18 08:41:58","","0","","321731","","2019-07-18 08:41:58","2019-07-17 00:57:18",""
"57498741","OpenSSL generates non-deterministic signature on CSR using P-256 or P-384 key, but not RSA key?","When I use openssl's command line to generate an RSA-2048 keypair, and then construct two Certificate Signing Requests (CSRs) for identical domain names using identical private keys, I get identical output.
$ openssl genrsa -f4 -out rsa.key | head -1
Generating RSA private key, 2048 bit long modulus
$ openssl req -new -sha256 -key rsa.key -out rsa1.csr -subj ""/CN=example.com""
$ openssl req -new -sha256 -key rsa.key -out rsa2.csr -subj ""/CN=example.com""
$ diff rsa1.csr rsa2.csr

But, when I generate an elliptic curve (P-256) keypair, and make two CSRs for identical domain names using identical private keys, I get two different outputs!
$ openssl ecparam -genkey -name prime256v1 -noout -out p256.key
$ openssl req -new -sha256 -key p256.key -out ec1.csr -subj ""/CN=example.com""
$ openssl req -new -sha256 -key p256.key -out ec2.csr -subj ""/CN=example.com""
$ diff -U999 ec1.csr ec2.csr 
--- ec1.csr 2019-08-14 12:20:55.000000000 -0400
+++ ec2.csr 2019-08-14 12:20:59.000000000 -0400
@@ -1,7 +1,7 @@
 -----BEGIN CERTIFICATE REQUEST-----
-MIHRMHgCAQAwFjEUMBIGA1UEAwwLZXhhbXBsZS5jb20wWTATBgcqhkjOPQIBBggq
+MIHPMHgCAQAwFjEUMBIGA1UEAwwLZXhhbXBsZS5jb20wWTATBgcqhkjOPQIBBggq
 hkjOPQMBBwNCAASKkrbzoJCjHgvI95U1ZYPG5AQUtN+ImrutI2KNAne/BvktGaHW
-ep2CEc5bliuYzxeC68cUG0MBmDrLZbRwaMS7oAAwCgYIKoZIzj0EAwIDSQAwRgIh
-AO1VziY7sHIKNFvCQnm+g7fguFSPoopHw+Jh3CKpjTKYAiEAmvlilKQkiN134T07
-LCDWfF/IlGeWv6nv1VhgsD3SEBU=
+ep2CEc5bliuYzxeC68cUG0MBmDrLZbRwaMS7oAAwCgYIKoZIzj0EAwIDRwAwRAIg
+AxHKjgwyXbeMqWK8XF/F6KztweW/tpY1U55pXyHeKgECID9jgdAQp7FetjbRGY7A
+GY0Y37x8XY5O3o5rEZSnsA1C
 -----END CERTIFICATE REQUEST-----

It's not a one-time thing. I generate 1000 CSRs using this P-256 key, I get 1000 different outputs. I generate 1000 CSRs using this RSA-2048 key, I get 1000 identical outputs.
$ for i in `seq 1 1000`; do openssl req -new -sha256 -key p256.key -out ec$i.csr -subj ""/CN=example.com""; done
real    0m8.147s
user    0m5.972s
sys     0m1.810s
$ md5sum ec*.csr | cut -f 1 -d ' ' | sort | uniq | wc -l
1000

$ time for i in `seq 1 1000`; do openssl req -new -sha256 -key rsa.key -out rsa$i.csr -subj ""/CN=example.com""; done
real    0m43.940s
user    0m41.386s
sys     0m2.049s
$ md5sum rsa*.csr | cut -f 1 -d ' ' | sort | uniq | wc -l
1

What on earth is going on here? Is there any way to force OpenSSL to generate reproducible output? Is there any reason I wouldn't want OpenSSL to generate reproducible output?
Is there any reason I would want OpenSSL to generate reproducible output when using RSA keys, but not when using EC keys?

I should add that I used https://certlogik.com/decoder/ to look at the CSRs being generated, and they look exactly the same except for the BIT STRING at the end, which I assume is supposed to be the SHA-256 signature?
I also see the same nondeterminism happening with P-384 keys:
$ openssl ecparam -genkey -name secp384r1 -noout -out p384.key
$ openssl req -new -sha256 -key p384.key -out ec1.csr -subj ""/CN=example.com""
$ openssl req -new -sha256 -key p384.key -out ec2.csr -subj ""/CN=example.com""
$ cmp ec1.csr ec2.csr 
ec1.csr ec2.csr differ: char 275, line 5

","Standard ECDSA signatures are non-deterministic in nature. This is a fundamental characteristic of the algorithm. RSA signatures on the other hand are deterministic. So this is the reason that you see the difference between these types of keys.
There is an RFC which describes a process for generating deterministic ECDSA signatures (see RFC6979). However OpenSSL does not currently support it. There is an open pull request adding that capability here.
","45","<openssl><rsa><elliptic-curve><csr><libssl>","0","2","1","2019-08-14 21:20:11","57502213","2","","1424877","","2019-08-14 16:47:00","2019-08-14 16:34:43",""
"40104316","Apple Push Notification Service keys","I have an EC key generated by Apple Push Notification Service (APN).
As per the RFC5915 section 3 the key should be a sequence that looks like this one.
My problem is that the APN key sequence is encapsulated into another sequence that is not described in the RFC5915. Here is the result I get.
Does anyone know where this sequence is described?
","","44","<asn.1><elliptic-curve>","0","","0","2016-10-18 09:21:25","","3","","","","","2016-10-18 09:21:25",""
"56840293","Creating an armored ECC public/private keys in android studio from spongy castle library (OpenPGP)","My goal is to create Elliptical curve key pairs from it using spongy castle library and then armor it.
      X9ECParameters curve = ECNamedCurveTable.getByName(""secp256k1"");
        ECDomainParameters domainParams = new ECDomainParameters(curve.getCurve(),curve.getG(), curve.getN(), curve.getN(), curve.getSeed());

        SecureRandom secureRandom = new SecureRandom();
        ECKeyGenerationParameters keyParams = new ECKeyGenerationParameters(domainParams, secureRandom);

        ECKeyPairGenerator generator = new ECKeyPairGenerator();
        generator.init(keyParams);
        AsymmetricCipherKeyPair kp= generator.generateKeyPair();

char[] passPhrase = ""hello"".toCharArray();
        PGPKeyPair ecKeyPair = new BcPGPKeyPair(PGPPublicKey.ECDH, kp, new Date());

PGPKeyRingGenerator    keyRingGen = new PGPKeyRingGenerator
                (PGPSignature.DEFAULT_CERTIFICATION,
                        ecKeyPair,
                        ""umaimaahmed1@gmail.com"", null, null,
                        null, new BcPGPContentSignerBuilder(PGPPublicKey.EC,
                        HashAlgorithmTags.SHA256),
                        new BcPBESecretKeyEncryptorBuilder(PGPEncryptedData.AES_256).build(passPhrase));

After this the parsed armored key ring generation is executed. 
It works fine for RSA but for ECC implementation I get an exception of illegal object in getInstance: org.spongycastle.asn1.x9.X962Parameters
when it hits the linePGPKeyPair ecKeyPair = new BcPGPKeyPair(PGPPublicKey.ECDH, kp, new Date());
I cant find anything on the internet to generate PGP Key Rings from ECC key pairs.
","","43","<java><android><encryption><elliptic-curve><openpgp>","1","","0","2019-07-01 17:57:01","","2","","","","","2019-07-01 17:57:01",""
"48230570","what is a scalar implementation in elliptical curve cryptography?","I'm trying to learn the basics of elliptical curve cryptography
and would like to know the difference between scalar and non
scalar.
The test example that comes with the library creates key pairs
performs signing and verification both for scalar and non-scalar,
what is the difference ?
The function in question is:
    void ed25519_add_scalar(unsigned char *public_key, unsigned char *private_key, const unsigned char *scalar)

","","42","<elliptic-curve>","0","","0","2018-01-14 16:13:26","","2","","8986577","","2018-01-14 16:13:26","2018-01-12 16:45:56",""
"54294185","Python3 Usage of the donna25519","I am trying to make a script that will generate a public key from a secret phrase.
I am using curve25519_donna but I can not figure out how to use it properly.
Here is the steps that I want to perform
1 generate private key using the sha2 hash
2. Use the generate private key to generate the public using curve 25519.
I can not figure out how to pass the private key to create the public
from curve25519 import Private, Public
from hashlib import sha1, sha256
from binascii import hexlify

import hashlib






  test = hashlib.sha224(b""test test1 test2 test"").hexdigest()






  mypublic=''


  mypublic=  Public.getpublic(test)

  print(mypublic)

","","42","<python><python-3.x><elliptic-curve><ed25519><ed25519-donna>","0","","0","2019-01-21 16:34:15","","0","","","","","2019-01-21 16:34:15",""
"43866582","Recipe for target 'curve25519-donna-c64.o"" failed","I have a problem trying to compile a library. I am using curve25519-donna to generate key pairs. I have already downloaded the library and unzipped the file, but my problem is with the compilation. 
I have changed my directory to curve25519-donna-1.3 and this is the code I tried to use the compile the library:
env CC='gcc -02' make

And this was the outcome.
Makefile:23 recipe for target 'curve25519-donna-c64.o' failed
make: *** [curve25519-donna-c64.o] Error 1

I am running on a Raspberry pi OS, am I missing some gcc's that I need to install in this operating system? 
I've upgraded and updated but I am still having problems with this. Any help will be much appreciated, thanks!! 
","","42","<python-3.x><gcc><raspberry-pi><elliptic-curve><curve-25519>","1","","0","2017-05-09 09:51:12","","0","","","","","2017-05-09 09:51:12",""
"56772982","Build PEM file by having ec public key coordinates","I try to create an elliptic public key by calculate the point on curve from a given number ( my private key ), so I have the coordinates (x,y) of elliptic curve point
I get the coordinates by
myPublicKeyCoordinates = myPrivateKeyValue * GPointOnCurve

How can i build the PEM ( or DER ) file for my public key?
I don't care about language (java, python, javascript, ...) 
because i want to known how build the file ( even if i write every single byte... )
","Assuming you already know about ITU-T X.680-201508 (the ASN.1 language) and ITU-T X.690-201508 (the BER (and CER) and DER encodings for ASN.1 data), the main defining document for Elliptic Curve Keys and their representation is https://www.secg.org/sec1-v2.pdf from the Standards for Efficient Cryptography Group (not the US Securites and Exchange Commission).
Section C.3 (Syntax for Elliptic Curve Public Keys) says that the general transport container for an EC public key is the X.509 SubjectPublicKeyInfo structure:
SubjectPublicKeyInfo ::= SEQUENCE {
    algorithm AlgorithmIdentifier {{ECPKAlgorithms}} (WITH COMPONENTS
        {algorithm, parameters}) ,
    subjectPublicKey BIT STRING
}

The possible ""algorithms"" (which really means key encoding types) is the open-ended set
ECPKAlgorithms ALGORITHM ::= {
    ecPublicKeyType |
    ecPublicKeyTypeRestricted |
    ecPublicKeyTypeSupplemented |
    {OID ecdh PARMS ECDomainParameters {{SECGCurveNames}}} |
    {OID ecmqv PARMS ECDomainParameters {{SECGCurveNames}}},
    ...
}

ecPublicKeyType ALGORITHM ::= {
    OID id-ecPublicKey PARMS ECDomainParameters {{SECGCurveNames}}
}

...

ECDomainParameters came from C.2:
ECDomainParameters{ECDOMAIN:IOSet} ::= CHOICE {
    specified SpecifiedECDomain,
    named ECDOMAIN.&id({IOSet}),
    implicitCA NULL
}

C.3 mentions about halfway through

The elliptic curve public key (a value of type ECPoint that is an OCTET STRING) is mapped to a subjectPublicKey (a value encoded as type BIT STRING) as follows: The most significant bit of the value of the OCTET STRING becomes the most significant bit of the value of the BIT STRING and so on with consecutive bits until the least significant bit of the OCTET STRING becomes the least significant bit of the BIT STRING.

So we seek backwards and find

An elliptic curve point itself is represented by the following type
ECPoint ::= OCTET STRING

whose value is the octet string obtained from the conversion routines given in Section 2.3.3.

2.3.3 (Elliptic-Curve-Point-to-Octet-String Conversion) has a lot of words, but the best supported format is not using point compression (and P != the point at infinity)


If P = (xP , yP ) != O and point compression is not being used, proceed as follows:

3.1. Convert the field element xP to an octet string X of length (log2 q)/8 octets using the conversion routine specified in Section 2.3.5.
3.2. Convert the field element yP to an octet string Y of length (log2 q)/8 octets using the conversion routine specified in Section 2.3.5.
3.3. Output M = 0416 || X || Y .

2.3.5 is a whole lot of words for ""big endian byte order of a length long enough to hold all values in the field"" (aka ""leave in leading zeros"").
So now we party.
Given the FIPS 186-3 reference key on secp256r1 (d=70A12C2DB16845ED56FF68CFC21A472B3F04D7D6851BF6349F2D7D5B3452B38A),
Q is 
(8101ECE47464A6EAD70CF69A6E2BD3D88691A3262D22CBA4F7635EAFF26680A8, D8A12BA61D599235F67D9CB4D58F1783D3CA43E78F0A5ABAA624079936C0C3A9)
And the public key DER looks like
// SubjectPublicKeyInfo
30 XA
   // AlgorithmIdentifier
   30 XB
      // AlgorithmIdentifier.id (id-ecPublicKey (1.2.840.10045.2.1))
      06 07 2A 86 48 CE 3D 02 01
      // AlgorithmIdentifier.parameters, using the named curve id (1.2.840.10045.3.1.7)
      06 08 2A 86 48 CE 3D 03 01 07
   // SubjectPublicKeyInfo.subjectPublicKey
   03 XC 00
      // Uncompressed public key
      04
      // Q.X
      81 01 EC E4 74 64 A6 EA D7 0C F6 9A 6E 2B D3 D8
      86 91 A3 26 2D 22 CB A4 F7 63 5E AF F2 66 80 A8
      // Q.Y
      D8 A1 2B A6 1D 59 92 35 F6 7D 9C B4 D5 8F 17 83
      D3 CA 43 E7 8F 0A 5A BA A6 24 07 99 36 C0 C3 A9

Count up all the bytes for XA, XB, and XC:
XC = 32 (Q.X) + 32 (Q.Y) + 1 (0x04) + 1 (0x00 for the unused bits) = 66 = 0x42
XB = 19 = 0x13
XA is then 66 + 19 + 2 (tag bytes) + 2 (length bytes) = 89 = 0x59
(And, of course, if any of our length values exceeded 0x7F we would have had to encode them correctly)
So now we are left with
30 59 30 13 06 07 2A 86 48 CE 3D 02 01 06 08 2A
86 48 CE 3D 03 01 07 03 42 00 04 81 01 EC E4 74
64 A6 EA D7 0C F6 9A 6E 2B D3 D8 86 91 A3 26 2D
22 CB A4 F7 63 5E AF F2 66 80 A8 D8 A1 2B A6 1D
59 92 35 F6 7D 9C B4 D5 8F 17 83 D3 CA 43 E7 8F
0A 5A BA A6 24 07 99 36 C0 C3 A9

And, we verify:
$ xxd -r -p | openssl ec -text -noout -inform der -pubin
read EC key
<paste, then hit CTRL+D>
30 59 30 13 06 07 2A 86 48 CE 3D 02 01 06 08 2A
86 48 CE 3D 03 01 07 03 42 00 04 81 01 EC E4 74
64 A6 EA D7 0C F6 9A 6E 2B D3 D8 86 91 A3 26 2D
22 CB A4 F7 63 5E AF F2 66 80 A8 D8 A1 2B A6 1D
59 92 35 F6 7D 9C B4 D5 8F 17 83 D3 CA 43 E7 8F
0A 5A BA A6 24 07 99 36 C0 C3 A9
Private-Key: (256 bit)
pub:
    04:81:01:ec:e4:74:64:a6:ea:d7:0c:f6:9a:6e:2b:
    d3:d8:86:91:a3:26:2d:22:cb:a4:f7:63:5e:af:f2:
    66:80:a8:d8:a1:2b:a6:1d:59:92:35:f6:7d:9c:b4:
    d5:8f:17:83:d3:ca:43:e7:8f:0a:5a:ba:a6:24:07:
    99:36:c0:c3:a9
ASN1 OID: prime256v1
NIST CURVE: P-256

Printing it as ""Private-Key: (256-bit)"" is just a bug/quirk of the tool, there's no private key there.
Things are harder for specified parameter curves, but those don't interoperate well (https://tools.ietf.org/html/rfc5480#section-2.1.1 says that a conforming CA MUST NOT use the specified parameter form, or the implicit form, but MUST use the named form).
","41","<elliptic-curve>","0","3","1","2019-06-27 21:28:29","56798677","0","","","","","2019-06-26 12:35:31",""
"58755669","How to get an elliptic curve public key from a private key","So, I need to get a public key from a corresponding 256 bit number using ECC spec256k1. 
So, lets say I get a private key using a sha256 from any passphrase, like this:
>>> import hashlib
>>> private_key = hashlib.sha3_256(b""Led Zeppelin - No Quarter"").hexdigest()
>>> private_key
'c0b279f18074de51d075b152c8ce78b7bddb284e8cfde19896162abec0a0acce'

How do I get a public key from that private key? I need to print the public key as a string. 
","pip install fastecdsa

from fastecdsa import keys, curve,ecdsa
priv_key, pub_key = keys.gen_keypair(curve.secp256k1) 

print(pub_key)

yield
X: 0xcc228e1a4c8e187a0deeabcd6e43bc8f7b6bdd91b8f823912f2de188fba054e6
Y: 0x7995a9d3866a8fa11a9af933c76216a908995ec5cec6ed7d3056b787fa7d39d7

Supported Primitives
Curves over Prime Fields - Source
Name                      Class

P192 / secp192r1          fastecdsa.curve.P192  
P224 / secp224r1          fastecdsa.curve.P224  
P256 / secp256r1          fastecdsa.curve.P256  
P384 / secp384r1          fastecdsa.curve.P384  
P521 / secp521r1          fastecdsa.curve.P521 
secp192k1                 fastecdsa.curve.secp192k1     
secp224k1                 fastecdsa.curve.secp224k1     
secp256k1 (bitcoin curve) fastecdsa.curve.secp256k1     
brainpoolP160r1           fastecdsa.curve.brainpoolP160r1   
brainpoolP192r1           fastecdsa.curve.brainpoolP192r1   
brainpoolP224r1           fastecdsa.curve.brainpoolP224r1   
brainpoolP256r1           fastecdsa.curve.brainpoolP256r1   
brainpoolP320r1           fastecdsa.curve.brainpoolP320r1   
brainpoolP384r1           fastecdsa.curve.brainpoolP384r1
brainpoolP512r1           fastecdsa.curve.brainpoolP512r1

","41","<python><public-key-encryption><elliptic-curve><ecdsa>","1","3","1","2019-11-08 17:31:24","58756097","3","1","1968","","2019-11-07 20:11:41","2019-11-07 19:27:43",""
"58361756","How to validate a signature in Java if the public key's algorithm is EC?","Given an X509 certificate object of a person. (The object's type is sun.security.x509.X509CertImpl). This person signed a String with his private key. Given the signature that was made by this person, when he signed the above mentioned String object.
My task is to verify this signature, but have difficulties with it.
When I try to verify the signature with the below code:
    ...
    X509Certificate x509Certificate = getCertificate(certificate);

    Signature signature = Signature.getInstance(""SHA256withECDSA"");

    signature.initVerify(x509Certificate.getPublicKey());

    signature.update(unsignedData);
    boolean bool = signature.verify(signatureToVerify);
    System.out.println(""The signature is "" + (bool ? """" : ""NOT"") + "" valid"");

I get java.security.SignatureException: Could not verify signature
Do you have an idea, how can I make it working?
Edited:
At the end, I managed to make it working, but do not understand the reason yet:
Before passing the signature to the verify method, i needed to do the following modification on it:
    byte[] rBytes = Arrays.copyOfRange(signatureHash, 0, 32);
    byte[] sBytes = Arrays.copyOfRange(signatureHash, 32, 64);

    BigInteger r = new BigInteger(1, rBytes);
    BigInteger s = new BigInteger(1, sBytes);

    ASN1Integer asn1R = new ASN1Integer(r);
    ASN1Integer asn1S = new ASN1Integer(s);

    DERSequence seq = new DERSequence(new ASN1Integer[]{asn1R, asn1S});
    byte[] signatureToVerify2 = seq.getEncoded();
    // verifying the signatureToVerify2 instead of the original brings success
    boolean bool = signature.verify(signatureToVerify2);

","Here is a (semi)working app for further reference that verifies a signature, when ECDSA is involved in the story:
import org.bouncycastle.asn1.ASN1Integer;
import org.bouncycastle.asn1.DERSequence;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.Signature;
import java.security.SignatureException;
import java.security.cert.CertificateException;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.util.Arrays;

public class SignatureTest {

    public static void main(String[] args) throws CertificateException, InvalidKeyException, SignatureException, NoSuchAlgorithmException, IOException {
        byte[] certificateAsByteArray = ...;
        byte[] dataToVerifyAsByteArray = ...;
        byte[] signatureHashAsByteArray = ...;

        CertificateFactory certFactory = CertificateFactory.getInstance(""X.509"");
        InputStream in = new ByteArrayInputStream(certificateBytes);
        X509Certificate x509Certificate = (X509Certificate) certFactory.generateCertificate(in);

        Signature signature = Signature.getInstance(""SHA256withECDSA"");

        signature.initVerify(x509Certificate.getPublicKey());

        signature.update(dataToVerifyAsHexaString);

        byte[] rBytes = Arrays.copyOfRange(signatureHash, 0, 32);
        byte[] sBytes = Arrays.copyOfRange(signatureHash, 32, 64);

        ASN1Integer asn1R = new ASN1Integer(rBytes);
        ASN1Integer asn1S = new ASN1Integer(sBytes);

        DERSequence seq = new DERSequence(new ASN1Integer[] {asn1R, asn1S});

        boolean isSignatureOK = signature.verify(seq.getEncoded());

        System.out.println(""The signature is "" + (isSignatureOK ? """" : ""NOT "") + ""VALID"");
    }
}

","40","<java><signature><public-key><elliptic-curve><ecdsa>","1","0","1","2019-10-14 13:47:57","58378193","9","","1203728","","2019-10-14 13:30:42","2019-10-13 08:19:00",""
"52263216","where does OpenSSL perform it's modular reductions on binary finite fields?","OpenSSL performs modular reductions when doing RSA but in order to maximize it's efficiency for elliptic curves over finite fields it'd need to do modular reduction for those as well.
I'm curious in what file in the OpenSSL source code does OpenSSL perform these modular reductions. I'm specifically interested in where it does it for binary finite fields but knowing where it does it for prime finite fields might give me insight into where it's doing it for binary finite fields.
","","40","<openssl><elliptic-curve><finite-field>","1","","0","2018-09-10 18:03:59","","1","","","","","2018-09-10 18:03:59",""
"54186230","Slow Elliptic Curve Multiplication in Java","I'm trying to implement an Elliptic Curve based function, and for that I need to use the multiplication operation. I need to use it with very large prime (256 bit) and I am using SpongyCastle for android implementation. However, the code is extremely slow, and I wanted to know if there is a faster way to use this operation. 
I am using the 'prime256v1' EC 
g_vector[0][i]=g.multiply(big_number);

Where g_vector is a vector of ECPoints, and g is the generator of the elliptic curve that I am using.  big_number is a BigInteger of size 256 bits. 
Thank you for your time! 
","","40","<java><elliptic-curve><spongycastle>","0","","0","2019-01-14 17:15:04","","0","","","","","2019-01-14 17:15:04",""
"58509738","ERROR: ASSERTION FAILED while using Crypto++ function","I'm writing the following code using the Crypto++ library for elliptic curve cryptography. My test program gives an assertion failed error when I assign the value to the variables loop1 and loop2 more than 7 or 8, else it executes fine. The error comes inside the if statement where Z[i][j] is assigned the value.
Also, when I execute the code without assigning the Z[i][j] in the if statement it executes fine. I'm not able to understand why I'm facing this error. Can someone please help in this issue? 
ECP::Point Z[loop1][loop2];

for (int i = 0; i < loop1; i++)
{
    for (int j = 0; j < loop2; j++)
    {
        if (r[i][j] < 0)
        {
            Pr = r[i][j] + v[i][j];
            Z[i][j] = group.GetCurve().ScalarMultiply(ng, -Pr);
        }
        else
        {
            Z[i][j] = group.GetCurve().ScalarMultiply(g, r[i][j] + v[i][j]);
        }
    }
}

","","40","<c++><visual-studio><crypto++><elliptic-curve>","-1","","0","2019-10-22 19:03:43","","2","","608639","","2019-10-22 19:03:43","2019-10-22 17:44:28",""
"56229390","encryption image with ECC in java","I want to encrypt an image with ECC, i tried using Bouncy Castle but it cant encrypt each pixel alone,and i asked about it in another question here
in stackoverflow and the Answer was to implement ECC without B**C.
So i searched about ECC and found:
Elliptic curve cryptography consists of three distinct
operations: 
1_ key generation:

we need a point G,also called as the generator point.
a large integer nB is kept as the Private Key.
and the point PB = nB * G is declared as public.
-map the plaintext message to a point on the elliptic curve(for that i get 
each pixele and multiplying it with G). 

2_ encryption:

the sender chooses a random positive integer k.
then uses the public key PB to generate the cipher point Cm that consists 
of two points.
Cm = [{k  G}, {Pm +(k  PB)}].

3_ decryption:
C2 – nB * C1 = {Pm + (k * PB)}{nB * (k * G)}
                = Pm + k*(nB * G)nB * (k * G)
                = Pm

The problem is when mapping the pixel and encrypting it the result is a point,how to get the value of the encrypted pixel from it,
so i can create the new image? i'm in the right way of implementing ECC??
   public static void main(String[] args) {
        try{

           X9ECParameters x9 = NISTNamedCurves.getByName(""P-224""); 
           org.bouncycastle.math.ec.ECPoint g = x9.getG();
           BigInteger n = x9.getN();
           int nBitLength = n.bitLength();

           BigInteger privatekey;
           do{
                Random rand = new Random();
                privatekey = new BigInteger(nBitLength,rand);
           }
           while (privatekey.equals(ZERO)  || (privatekey.compareTo(n) >= 0));
                org.bouncycastle.math.ec.ECPoint publickey = g.multiply(privatekey); 

             BigInteger k;
             Random randk = new Random();
             k= new BigInteger(nBitLength,randk); 
            File bmpFile = new File(""C:\\Users\\acer\\Desktop\\py\\6.bmp"");
            BufferedImage image = ImageIO.read(bmpFile);
            int width           = image.getWidth();
            int height          = image.getHeight();

            BigInteger [][] pixels = new BigInteger [width][height];

            for( int i = 0; i < width; i++ )
                for( int j = 0; j < height; j++ )
                     pixels[i][j] = BigInteger.valueOf(image.getRGB( i, j ));

            org.bouncycastle.math.ec.ECPoint mappedpixel,encryptedpixel;

            for( int i = 0; i < width; i++ ){
                for( int j = 0; j < height; j++ ){
                    mappedpixel= g.multiply(pixels[i][j]);
                    encryptedpixel=mappedpixel.add(publickey.multiply(k));   

                }
            }     
        }
        catch (IOException e){
             System.out.println(e.getMessage());
        } 

        }

the problem is in the last 'for' it map the pixel and encrypt it but don't know how to put the value of
encryptedpixel in the pixel to create the new image.
","
I'm in the right way of implementing ECC?

Absolutely not, and you're not even going in the right way to understand ECC.
ECC doesn't really have an encryption operation the same way that RSA does. There is ElGamal encryption, but because ECC operates on such small order fields, no good encryption scheme is compatible with that. Besides that, it will expand a message of e.g. 10 bytes to 64 bytes - and that's only after taking a very liberal approach to padding the message correctly - something that is required for secure operation. So your image would grow by a factor 6.4 if you would use direct ECC encryption.
As James mentioned, there is something called ECIES which basically derives a symmetric key using DH, sending the local public key with the message, then destroying the temporary private key. The receiver can then derive the same symmetric key using his private key and the public key. This message specific derived key can then be used to encrypt / decrypt the message (i.e. pixel data), e.g.. using AES-CTR which doesn't have any overhead (other than the IV, but as you have a randomized data key, you can use a static IV/nonce of e.g. all zeros).
Unfortunately that will still leave you with the public key to store next to the message. 
","37","<java><image><encryption><elliptic-curve>","0","1","1","2019-05-21 02:33:46","","1","","","","","2019-05-20 23:34:41",""
"56371574","Exponentiation on a point on elliptic curve unreasonably fast in SageMath","I am working on elliptic curves in sagemath. I was trying to collect benchmarks for group operation and exponentiation of points on NIST P-256 elliptic curve. When I tried to perform a group operation on 2 points on the curve, it takes roughly 2 micro seconds. When I tried to perform exponentiation on a point in elliptic curve with a random exponent, it takes only 3 micro seconds. How is this even possible? Since I am exponentiating with a 256 bit value, this should at least take time required for 256 group operations, which is more than 0.5ms. I am worried if my code is wrong!
p = 115792089210356248762697446949407573530086143415290314195533631308867097853951 
order = 115792089210356248762697446949407573529996955224135760342422259061068512044369 
b = 0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b 
F = GF(p) 
E = EllipticCurve(F, [-3,b]) 
runs = 10000 
G = E.abelian_group()

F2 = GF(order) 
exponent = [F2.random_element() for i in range(runs)]
e2 = [G.random_element() for i in range(runs)]

t1 = time() 
for i in range(runs):   
      e = Integer(exponent[i])*e2[i] 
t2 = time() 
print  ""Time per operation = "", (t2 - t1)/runs , "" seconds""

e1 = [G.random_element() for i in range(runs)] 
e2 = [G.random_element() for i in range(runs)] 
t1 = time() 
for i in range(runs):   
         e = e1[i]+e2[i] 
t2 = time() 
print  ""Time per operation = "", (t2 - t1)/runs , "" seconds""

","Do not use E.abelian_group() if your goal is to time the elliptic curve scalar multiplication:
sage: P = G.random_element()
sage: P.parent()
Additive abelian group isomorphic to Z/115792089210356248762697446949407573529996955224135760342422259061068512044369 embedded in Abelian group of points on Elliptic Curve defined by y^2 = x^3 + 115792089210356248762697446949407573530086143415290314195533631308867097853948*x + 41058363725152142129326129780047268409114441015993725554835256314039467401291 over Finite Field of size 115792089210356248762697446949407573530086143415290314195533631308867097853951
sage: P.__class__
<class 'sage.groups.additive_abelian.additive_abelian_wrapper.AdditiveAbelianGroupWrapper_with_category.element_class'>
sage: Q = E.random_element()
sage: Q.parent()
Abelian group of points on Elliptic Curve defined by y^2 = x^3 + 115792089210356248762697446949407573530086143415290314195533631308867097853948*x + 41058363725152142129326129780047268409114441015993725554835256314039467401291 over Finite Field of size 115792089210356248762697446949407573530086143415290314195533631308867097853951
sage: Q.__class__
<class 'sage.schemes.elliptic_curves.ell_point.EllipticCurvePoint_finite_field'>

E.abelian_group() is a discrete log representation of E(𝔽_p): one (or more) generator for the group is chosen:
sage: G.gens()
((20722840521025081260844746572646324413063607211611059363846436737341554936251 : 92859506829486198345561119925850006904261672023969849576492780649068338418688 : 1),)

and points are represented as vectors of exponents:
sage: P.vector()
(115792089210356248762697446949407573529996955224135760342422259061068512044368)

hence c*P simply multiplies the exponent by c and reduces modulo the order of the curve.
Use E.random_element() to get points of the curve and perform true elliptic curve operations:
sage: c = 2^100
sage: %timeit c*Q
100 loops, best of 3: 3.88 ms per loop
sage: c = 2^1000
sage: %timeit c*Q
10 loops, best of 3: 32.4 ms per loop
sage: c = 2^10000
sage: %timeit c*Q
1 loop, best of 3: 321 ms per loop

","31","<runtime><sage><elliptic-curve>","0","1","1","2019-05-30 13:37:21","56379428","2","","2751532","","2019-05-30 13:04:45","2019-05-30 04:21:00",""
"57522698","Javascript convert ECDH keys into ECDSA keys","I generate the ECDH keys in this way
let _this = this;
window.crypto.subtle.generateKey(
        {
            name: ""ECDH"",
            namedCurve: ""P-256"", // the curve name
        },
        true, // <== Here if you want it to be exportable !!
        [""deriveKey"", ""deriveBits""] // usage
    )
    .then(key => {
        _this.keys = key;
        // export
        return window.crypto.subtle.exportKey(
            ""raw"", //can be ""jwk"" (public or private), ""raw"" (public only), ""spki"" (public only), or ""pkcs8"" (private only)
            _this.keys.publicKey
        )
        .then(rawPublicKey => {
            _this.publicKey = rawPublicKey;
            return rawPublicKey;
        })
    })

In this way i have the cryptokeys and the raw (x,y coords) public key.
I would use the keys for using it for ECDSA
How can I do that?
","window.crypto.subtle.generateKey({
                name: ""ECDSA"",
                namedCurve: curve, //can be ""P-256"", ""P-384"", or ""P-521""
            },
            true, //whether the key is extractable (i.e. can be used in exportKey)
            [""sign"", ""verify""] //can be any combination of ""sign"" and ""verify""
        )
        .then(function(key) {

        publicKey = key.publicKey;
        privateKey = key.privateKey;
        // For Demo Purpos Only Exported in JWK format
        window.crypto.subtle.exportKey(""jwk"", key.publicKey).then(
            function(keydata) {
                publicKeyhold = keydata;
                publicKeyJson = JSON.stringify(publicKeyhold);
                document.getElementById(""ecdsapublic"").value = publicKeyJson;
            }
        );

        window.crypto.subtle.exportKey(""jwk"", key.privateKey).then(
            function(keydata) {
                privateKeyhold = keydata;
                privateKeyJson = JSON.stringify(privateKeyhold);
                document.getElementById(""ecdsaprivate"").value = privateKeyJson;

as you can see you can generate ECDSA keys using global method
they will be different , you can't use ECDH keys
                }
            );
","30","<javascript><elliptic-curve><ecdsa><ecdh>","0","0","1","2019-08-16 10:30:18","57523044","2","","","","","2019-08-16 10:04:12",""
"43933316","How to run the FourQ lib by Microsoft at 32-Bit?","I figured out how to run FourQ at 64-Bit, but now I want to run it through 32-Bit architecture. First of all the lib can be found at [1].
I'm running the stuff from ""FourQ_x64_and_portable"" directory. If I try the command, as suggested in the readme:
make CC=gcc ARCH=x86

it will print me errors
FourQ_x64_and_portable>make CC=gcc ARCH=x86
gcc -c -O3        -D _X86_ -D __LINUX__         ecc_tests.c
In file included from FourQ_internal.h:25:0,
                 from ecc_tests.c:15:
FourQ.h:137:6: error: #error -- ""Unsupported configuration""
     #error -- ""Unsupported configuration""
      ^
In file included from ecc_tests.c:15:0:
FourQ_internal.h:39:6: error: #error -- ""Unsupported configuration""
     #error -- ""Unsupported configuration""
      ^
make: *** [ecc_tests.o] Error 1

Well this is not wondering, I'm using Windows 10 x64 with MinGW at 32 and 64 Bits. I wrote a batch file for changing between x64 and x86, therefore, this is not the problem.
If I modify the makefile, by suggestions given from fourQ.h, and insert an input type for OS (OS==WIN? OS=WINDOWS : OS=LINUX) and run it again, it turns me out an error again.
FourQ_x64_and_portable>make CC=gcc OS=WIN ARCH=x86
gcc -c -O3        -D _X86_ -D WIN         ecc_tests.c
In file included from FourQ_internal.h:25:0,
                 from ecc_tests.c:15:
FourQ.h:39:6: error: #error -- ""Unsupported OS""
     #error -- ""Unsupported OS""
      ^
FourQ.h:137:6: error: #error -- ""Unsupported configuration""
     #error -- ""Unsupported configuration""
      ^
In file included from ecc_tests.c:15:0:
FourQ_internal.h:39:6: error: #error -- ""Unsupported configuration""
     #error -- ""Unsupported configuration""
      ^
make: *** [ecc_tests.o] Error 1

Well this looks like, WINDOWS is not supported. I've installed Ubuntu in a virtual box and try to compile again, but the last time, it show me the same error. Any suggestions how to fix this issue?
BTW. some information about gcc:
>gcc -v
Target: mingw32
[...]
Thread model: win32
gcc version 5.3.0 (GCC)

Since I want to run this code (in the end) on an ARM Cortex M4, I can use ""arm-none-eabi-gcc"" instead of ""gcc"" for cross-compiling. I've added a routine in that makefile for this.
[1] https://www.microsoft.com/en-us/research/project/fourqlib/
","The answere is to add ""GENERIC=TRUE"". That means I have to type in:
""make CC=gcc ARCH=x86 GENERIC=TRUE""
Now I can compile for ARM-Architecture.
","28","<c><compiler-errors><compilation><cross-compiling><elliptic-curve>","0","0","1","2017-05-12 09:11:27","43933786","1","","7130351","","2017-05-12 08:53:45","2017-05-12 08:48:42",""
"58045120","Unresolved external symbol error when using libsecp256k1","I downloaded the nuget secp256k1_vc120 package in Visual Studio.  I've added the ""include"" folder to my list of ""additional include directories"", the ""bin"" folder to the ""additional library directories"", listed all 6 of the _x64 lib files in ""additional dependencies"", and copied both _x64 dll files to system32.  My test code for generating a pubKey from a privKey:
#include <stdio.h>
#include <secp256k1.h>
int main(int argc, char** argv)
{
    uint8_t* privKey = malloc(32);
    memset(privKey, 139, 32);
    secp256k1_context* ctx = secp256k1_context_create(SECP256K1_CONTEXT_SIGN);
    secp256k1_pubkey* pubkey = malloc(sizeof(*pubkey));
    secp256k1_ec_pubkey_create(ctx, pubkey, privKey);

    for (int i = 0; i < 65; i++)
    {
        printf(""%02x"", pubkey->data[i]);
    }
}

When attempting to run the code, I get two ""external symbol error"" messages regarding secp256k1_context_create() and secp256k1_pubkey_create();  Anybody know why?  Also, which of the 6 lib files and 2 dll files am I supposed to use (64-bit)?
","","28","<c><elliptic-curve>","0","","0","2019-09-22 00:24:40","","0","","","","","2019-09-22 00:24:40",""
"56090251","Elliptic Curve Cryptography with Python on Windows","I'm looking for a way to generate keys for asymmetric cryptograpy via elliptic curves in Python, but all packages I was able to find only support UNIX systems. Anyone know a package that works on Windows?
","","27","<python><elliptic-curve><encryption-asymmetric>","1","","0","2019-05-11 12:12:50","","1","","","","","2019-05-11 12:12:50",""
"57558924","nettle curve 25519 result of base point * 1","I am using GNU nettle library. I have the following code:
#include <nettle/curve25519.h>

uint8_t result[32], one[32];
for(auto &i : one) i = 0;
one[31] = 1;
curve25519_mul_g(result, one);

In the code, I multiplied 1 with the base point. The base point's x-coordinate is 9, so I would expect the result to be 9.
But instead, it gives me this number:
0xfd3384e132ad02a56c78f45547ee40038dc79002b90d29ed90e08eee762ae715.
Why does this code not generate 9?
","Curve25519 clamps some bits of the scalar to 1 or 0. Specifically in Curve25519 scalar multiplication:

the lowest 3 bits are set to 0, to ensure the output point is only in the large subgroup, and
the highest bit (2^254) is set to one, to make sure the implementer does not skip any Montgomery-ladder steps.

After this clamping operation, the scalar multiplication algorithm will be executed. So in Curve25519, a point cannot be multiplied with 1.

In your case, however, there is even more going on. The nettle uses a little-endian convention in their code. That is, when you execute
one[31] = 1;

you are actually setting the 2^248 bit to one, not the 2^0 bit. Then the clamped value will become k = 2^254 + 2^248.
The computation [2^254 + 2^248] * (9 : 1) results in 0x15e72a76ee8ee090ed290db90290c78d0340ee4755f4786ca502ad32e18433fd (big endian), which corresponds with your observation.
","27","<gmp><elliptic-curve><nettle>","1","1","1","2019-10-21 14:30:55","","0","","5207081","","2019-10-21 14:30:55","2019-08-19 14:36:18",""
"45394808","Sage: Torsion parameter in elliptic_curves db","Looking at the Tables of elliptic curves of a given rank documentation page and at Mazur's Theorem, a question pops out at me: How do I specify the difference between, for example, $\mathbb{Z} / \mathbb{Z} 2 \times \mathbb{Z}/\mathbb{Z} 2$ from $\mathbb{Z}/\mathbb{Z} 4$ if the torsion parameter is an integer when querying the tables? Is there a way to query for elliptic curves that have torsion which is a particular product of nontrivial cyclic groups?

Really, the icing on the cake would be an interface to the LMFDB with filtering capabilities on all of the fields available on their website. Does anything satisfying my desires exist? 
","","25","<database><sage><elliptic-curve>","1","","0","2017-07-29 22:54:32","","0","","","","","2017-07-29 22:54:32",""
"53198174","Point addition and multiplication on Sage","I am trying to compute  rP+r'Q  on Sage where r,r' are positive integers and 
P=(38*a + 31 : 69*a + 77 : 1), 
Q=(106*a + 3 : a + 103 : 1)
two points on the elliptic curve E:y^2=x^3-x over GF(107^2).
Now I tried to define P and Q on sage simply as I did here but this gives a syntax error. So how do I define points on Sage?
","So the answer was rediculously simple. Although sage gives you the points (a: b: c), you have to define your point like (a, b, c). How did I just spend over 1h to find out.
","20","<sage><elliptic-curve>","0","1","1","2018-11-07 21:44:49","","0","","","","","2018-11-07 21:34:32",""
"38149014","Trying to iterate ""rem = (rem*value)%N"" e times while saving each value of rem for i+1 and returning rem when i=e","So essentially I'm trying to make a function that takes an ASCII value and multiplies it by the remainder of the previous multiplication in the iteration.
So for the first iteration (i = 0), the remainder just gets set as the initial asc value. The second iteration (i = 1), the calculation is something like rem = (rem * ascVal)%N, where rem in rem * ascVal is the rem (remainder) from the previous iteration. 
This continues until i = e where the last value of rem is returned.
This is what i have so far:


function newVal(ascVal) {
    var i = 0;
    var rem = ascVal;
    while (i < e) {
        rem = (rem * ascVal) % N;
        i++;
        if (i == e) {
            return rem;
        }
    }
    newVal(rem);
}



The thing is it always returns 55 if the input is a single value every time.
All i need it to do is find the remainder after e iterations. Any help would be great and i can post the entire script if needed (includes all calculations etc.)
P.S. This script is a small prototype elliptic curve encrypter.
","Ok so I solved it by using a while loop.
function newVal(ascVal) {
var num = Number(ascVal);
var rem = num;
var i = 0;
while (i < e) {
    i++;
    rem = (rem*num)%N;
}
return rem;

}
This iterates the correct value each time.
","20","<javascript><encryption><elliptic-curve>","0","0","1","2016-07-02 02:41:20","","0","","","","","2016-07-01 15:26:06",""
"58505326","How to create a EC (elliptic curve) CSR and afterwards self sign it?","is openssl able to create a self signed certificate in separate steps?

create the private key
create the csr
create the self signed certificate via the CSR

Target is not to use the one liner, which ommits the CSR step.
(which is openssl req -sha256 -newkey ec:ecparam.pem -x509 -nodes -subj ""CN=COMMON_NAME"" -days 3650 -keyout COMMON_NAME.key -out COMMON_NAME.crt)
I could not find a way for this.
","","18","<openssl><self-signed><elliptic-curve><csr><self-signed-certificate>","0","","0","2019-10-22 14:15:23","","0","","","","","2019-10-22 13:23:02","2019-10-22 14:12:16"
"58099317","Cant create SECKEY from Data","I get the data from bluetooth connection. After I get data I need to change this data to SECKEY type. But I get nil. 
let attributes: [String: Any] = [kSecAttrKeySizeInBits as String: 192,
                                       kSecAttrKeyType as String: kSecAttrKeyTypeEC]
let data: CFData = Data(hex: ""A60B941DF1DC6886B68B9F6E357C91330741300FA9E2CAA56743C63B550959370741300FA9E2CAA56743C63B55095937"") as CFData
let publicKey2 = SecKeyCreateWithData(data, attributes as CFDictionary, &error)

","","15","<ios><swift><elliptic-curve><seckeyref>","0","","0","2019-09-25 13:15:27","","0","","","","","2019-09-25 13:15:27",""
